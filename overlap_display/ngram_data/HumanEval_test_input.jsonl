{"instance": {"input": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "references": ["    return n**2\n"], "id": "id41"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id41", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["car", 0], ["race", 0], ["collision", 0], ["n", 0], ["int", 1], ["imagine", 1], ["a", 1], ["road", 1], ["that", 1], ["s", 1], ["a", 1], ["perfectly", 1], ["straight", 1], ["infinitely", 1], ["long", 1], ["line", 1], ["n", 1], ["cars", 1], ["are", 1], ["driving", 1], ["left", 1], ["to", 1], ["right", 1], ["simultaneously", 1], ["a", 1], ["different", 1], ["set", 1], ["of", 1], ["n", 1], ["cars", 1], ["are", 1], ["driving", 1], ["right", 1], ["to", 1], ["left", 1], ["the", 1], ["two", 1], ["sets", 1], ["of", 1], ["cars", 1], ["start", 1], ["out", 1], ["being", 1], ["very", 1], ["far", 1], ["from", 1], ["each", 1], ["other", 1], ["all", 1], ["cars", 1], ["move", 1], ["in", 1], ["the", 1], ["same", 1], ["speed", 1], ["two", 1], ["cars", 1], ["are", 1], ["said", 1], ["to", 1], ["collide", 1], ["when", 1], ["a", 1], ["car", 1], ["that", 1], ["s", 1], ["moving", 1], ["left", 1], ["to", 1], ["right", 1], ["hits", 1], ["a", 1], ["car", 1], ["that", 1], ["s", 1], ["moving", 1], ["right", 1], ["to", 1], ["left", 1], ["however", 1], ["the", 1], ["cars", 1], ["are", 1], ["infinitely", 1], ["sturdy", 1], ["and", 1], ["strong", 1], ["as", 1], ["a", 1], ["result", 1], ["they", 1], ["continue", 1], ["moving", 1], ["in", 1], ["their", 1], ["trajectory", 1], ["as", 1], ["if", 1], ["they", 0], ["did", 0], ["not", 0], ["collide", 0], ["this", 0], ["function", 0], ["outputs", 0], ["the", 0], ["number", 0], ["of", 0], ["such", 0], ["collisions", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9306930693069307, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9306930693069307, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9380530973451328, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9380530973451328, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9306930693069307, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9306930693069307, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9380530973451328, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9380530973451328, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["return", 0], ["n", 0], ["2", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "references": ["    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n"], "id": "id95"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id95", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["check", 0], ["dict", 0], ["case", 0], ["dict", 0], ["given", 0], ["a", 0], ["dictionary", 0], ["return", 0], ["true", 1], ["if", 2], ["all", 2], ["keys", 2], ["are", 2], ["strings", 2], ["in", 2], ["lower", 0], ["case", 0], ["or", 0], ["all", 0], ["keys", 0], ["are", 0], ["strings", 0], ["in", 0], ["upper", 0], ["case", 0], ["else", 0], ["return", 0], ["false", 0], ["the", 0], ["function", 0], ["should", 0], ["return", 0], ["false", 0], ["is", 0], ["the", 0], ["given", 0], ["dictionary", 0], ["is", 0], ["empty", 0], ["examples", 0], ["check", 0], ["dict", 0], ["case", 0], ["a", 0], ["apple", 0], ["b", 0], ["banana", 0], ["should", 0], ["return", 0], ["true", 0], ["check", 0], ["dict", 0], ["case", 0], ["a", 0], ["apple", 0], ["a", 0], ["banana", 0], ["b", 0], ["banana", 0], ["should", 0], ["return", 0], ["false", 0], ["check", 0], ["dict", 0], ["case", 0], ["a", 0], ["apple", 0], ["8", 0], ["banana", 0], ["a", 0], ["apple", 0], ["should", 0], ["return", 0], ["false", 0], ["check", 0], ["dict", 0], ["case", 0], ["name", 0], ["john", 0], ["age", 0], ["36", 0], ["city", 0], ["houston", 0], ["should", 0], ["return", 0], ["false", 0], ["check", 0], ["dict", 0], ["case", 0], ["state", 0], ["nc", 0], ["zip", 0], ["12345", 0], ["should", 0], ["return", 0], ["true", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08045977011494253, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.04597701149425287, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.1919191919191919, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1919191919191919, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08045977011494253, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.04597701149425287, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.1919191919191919, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1919191919191919, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["if", 0], ["len", 0], ["dict", 0], ["keys", 0], ["0", 0], ["return", 0], ["false", 0], ["else", 0], ["state", 0], ["start", 0], ["for", 0], ["key", 0], ["in", 0], ["dict", 0], ["keys", 0], ["if", 0], ["isinstance", 0], ["key", 0], ["str", 0], ["false", 0], ["state", 0], ["mixed", 0], ["break", 0], ["if", 0], ["state", 0], ["start", 0], ["if", 0], ["key", 0], ["isupper", 0], ["state", 0], ["upper", 0], ["elif", 0], ["key", 0], ["islower", 0], ["state", 0], ["lower", 0], ["else", 0], ["break", 0], ["elif", 0], ["state", 0], ["upper", 0], ["and", 0], ["not", 0], ["key", 0], ["isupper", 0], ["or", 0], ["state", 0], ["lower", 0], ["and", 0], ["not", 0], ["key", 0], ["islower", 0], ["state", 0], ["mixed", 0], ["break", 0], ["else", 0], ["break", 0], ["return", 0], ["state", 0], ["upper", 0], ["or", 0], ["state", 0], ["lower", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "references": ["    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"], "id": "id31"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id31", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 2], ["is", 2], ["prime", 2], ["n", 2], ["return", 2], ["true", 2], ["if", 2], ["a", 2], ["given", 2], ["number", 2], ["is", 2], ["prime", 2], ["and", 2], ["false", 2], ["otherwise", 2], ["is", 2], ["prime", 2], ["6", 2], ["false", 2], ["is", 2], ["prime", 2], ["101", 2], ["true", 2], ["is", 2], ["prime", 2], ["11", 2], ["true", 2], ["is", 2], ["prime", 2], ["13441", 2], ["true", 2], ["is", 0], ["prime", 0], ["61", 0], ["true", 0], ["is", 0], ["prime", 0], ["4", 0], ["false", 0], ["is", 0], ["prime", 0], ["1", 0], ["false", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9393939393939394, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4696969696969697, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9555555555555556, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4777777777777778, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9393939393939394, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4696969696969697, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9555555555555556, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4777777777777778, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["false", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["k", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "references": ["    return sorted(list(set(l)))\n"], "id": "id34"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id34", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 1], ["unique", 1], ["l", 1], ["list", 1], ["return", 1], ["sorted", 1], ["unique", 1], ["elements", 1], ["in", 1], ["a", 1], ["list", 1], ["unique", 1], ["5", 1], ["3", 1], ["5", 1], ["2", 0], ["3", 0], ["3", 0], ["9", 0], ["0", 0], ["123", 0], ["0", 0], ["2", 0], ["3", 0], ["5", 0], ["9", 0], ["123", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8823529411764706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8823529411764706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9310344827586207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9310344827586207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8823529411764706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8823529411764706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9310344827586207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9310344827586207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["return", 0], ["sorted", 0], ["list", 0], ["set", 0], ["l", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n", "references": ["    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n"], "id": "id116"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id116", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["sort", 0], ["array", 0], ["arr", 0], ["in", 1], ["this", 1], ["kata", 1], ["you", 1], ["have", 1], ["to", 1], ["sort", 1], ["an", 1], ["array", 1], ["of", 1], ["non", 1], ["negative", 1], ["integers", 1], ["according", 1], ["to", 1], ["number", 1], ["of", 1], ["ones", 1], ["in", 1], ["their", 1], ["binary", 1], ["representation", 1], ["in", 1], ["ascending", 1], ["order", 1], ["for", 1], ["similar", 1], ["number", 1], ["of", 1], ["ones", 1], ["sort", 1], ["based", 1], ["on", 1], ["decimal", 1], ["value", 1], ["it", 1], ["must", 1], ["be", 1], ["implemented", 1], ["like", 1], ["this", 1], ["sort", 1], ["array", 1], ["1", 1], ["5", 1], ["2", 1], ["3", 1], ["4", 1], ["1", 1], ["2", 1], ["3", 1], ["4", 1], ["5", 1], ["sort", 1], ["array", 1], ["2", 1], ["3", 1], ["4", 1], ["5", 1], ["6", 1], ["6", 1], ["5", 1], ["4", 1], ["3", 1], ["2", 1], ["sort", 0], ["array", 0], ["1", 0], ["0", 0], ["2", 0], ["3", 0], ["4", 0], ["0", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9154929577464789, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9154929577464789, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.927710843373494, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.927710843373494, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9154929577464789, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9154929577464789, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.927710843373494, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.927710843373494, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["return", 0], ["sorted", 0], ["sorted", 0], ["arr", 0], ["key", 0], ["lambda", 0], ["x", 0], ["bin", 0], ["x", 0], ["2", 0], ["count", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n", "references": ["    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"], "id": "id136"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id136", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["largest", 0], ["smallest", 0], ["integers", 0], ["lst", 1], ["create", 1], ["a", 1], ["function", 1], ["that", 1], ["returns", 1], ["a", 1], ["tuple", 1], ["a", 1], ["b", 1], ["where", 1], ["a", 1], ["is", 1], ["the", 1], ["largest", 1], ["of", 1], ["negative", 1], ["integers", 1], ["and", 1], ["b", 1], ["is", 1], ["the", 1], ["smallest", 1], ["of", 1], ["positive", 1], ["integers", 1], ["in", 1], ["a", 1], ["list", 1], ["if", 1], ["there", 0], ["is", 0], ["no", 0], ["negative", 0], ["or", 0], ["positive", 0], ["integers", 0], ["return", 0], ["them", 0], ["as", 0], ["none", 0], ["examples", 0], ["largest", 0], ["smallest", 0], ["integers", 0], ["2", 0], ["4", 0], ["1", 0], ["3", 0], ["5", 0], ["7", 0], ["none", 0], ["1", 0], ["largest", 0], ["smallest", 0], ["integers", 0], ["none", 0], ["none", 0], ["largest", 0], ["smallest", 0], ["integers", 0], ["0", 0], ["none", 0], ["none", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5172413793103449, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5172413793103449, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5172413793103449, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5172413793103449, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["smallest", 0], ["list", 0], ["filter", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["lst", 0], ["largest", 0], ["list", 0], ["filter", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["lst", 0], ["return", 0], ["max", 0], ["smallest", 0], ["if", 0], ["smallest", 0], ["else", 0], ["none", 0], ["min", 0], ["largest", 0], ["if", 0], ["largest", 0], ["else", 0], ["none", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "references": ["    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n"], "id": "id101"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id101", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["words", 0], ["string", 0], ["s", 0], ["you", 0], ["will", 0], ["be", 0], ["given", 0], ["a", 0], ["string", 0], ["of", 0], ["words", 0], ["separated", 0], ["by", 0], ["commas", 0], ["or", 0], ["spaces", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["split", 0], ["the", 0], ["string", 0], ["into", 0], ["words", 0], ["and", 0], ["return", 0], ["an", 0], ["array", 0], ["of", 0], ["the", 0], ["words", 0], ["for", 0], ["example", 0], ["words", 0], ["string", 0], ["hi", 0], ["my", 0], ["name", 0], ["is", 0], ["john", 0], ["hi", 0], ["my", 0], ["name", 0], ["is", 0], ["john", 0], ["words", 0], ["string", 0], ["one", 2], ["two", 0], ["three", 0], ["four", 0], ["five", 0], ["six", 0], ["one", 0], ["two", 0], ["three", 0], ["four", 0], ["five", 0], ["six", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0196078431372549, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00980392156862745, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.20634920634920634, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.10317460317460317, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0196078431372549, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00980392156862745, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.20634920634920634, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.10317460317460317, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["if", 0], ["not", 0], ["s", 0], ["return", 0], ["s", 0], ["list", 0], ["for", 0], ["letter", 0], ["in", 0], ["s", 0], ["if", 0], ["letter", 0], ["s", 0], ["list", 0], ["append", 0], ["else", 0], ["s", 0], ["list", 0], ["append", 0], ["letter", 0], ["s", 0], ["list", 0], ["join", 0], ["s", 0], ["list", 0], ["return", 0], ["s", 0], ["list", 0], ["split", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n", "references": ["    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n"], "id": "id21"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id21", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["from", 0], ["typing", 0], ["import", 0], ["list", 0], ["def", 0], ["rescale", 0], ["to", 0], ["unit", 0], ["numbers", 0], ["list", 0], ["float", 0], ["list", 0], ["float", 0], ["given", 0], ["list", 0], ["of", 0], ["numbers", 0], ["of", 0], ["at", 0], ["least", 0], ["two", 0], ["elements", 0], ["apply", 0], ["a", 0], ["linear", 0], ["transform", 0], ["to", 0], ["that", 0], ["list", 0], ["such", 0], ["that", 0], ["the", 0], ["smallest", 0], ["number", 0], ["will", 0], ["become", 0], ["0", 0], ["and", 0], ["the", 0], ["largest", 0], ["will", 0], ["become", 0], ["1", 0], ["rescale", 0], ["to", 0], ["unit", 0], ["1", 7], ["0", 0], ["2", 0], ["0", 0], ["3", 0], ["0", 0], ["4", 0], ["0", 0], ["5", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["25", 0], ["0", 0], ["5", 0], ["0", 0], ["75", 0], ["1", 0], ["0", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.01818181818181818, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0025974025974025974, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.19402985074626866, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0277185501066098, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.01818181818181818, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0025974025974025974, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.19402985074626866, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0277185501066098, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["min", 0], ["number", 0], ["min", 0], ["numbers", 0], ["max", 0], ["number", 0], ["max", 0], ["numbers", 0], ["return", 0], ["x", 0], ["min", 0], ["number", 0], ["max", 0], ["number", 0], ["min", 0], ["number", 0], ["for", 0], ["x", 0], ["in", 0], ["numbers", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n", "references": ["    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"], "id": "id161"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id161", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["solve", 0], ["s", 0], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["string", 1], ["s", 1], ["if", 1], ["s", 1], ["i", 1], ["is", 1], ["a", 1], ["letter", 1], ["reverse", 1], ["its", 1], ["case", 1], ["from", 1], ["lower", 1], ["to", 1], ["upper", 1], ["or", 1], ["vise", 1], ["versa", 1], ["otherwise", 1], ["keep", 1], ["it", 1], ["as", 1], ["it", 1], ["is", 1], ["if", 1], ["the", 1], ["string", 1], ["contains", 1], ["no", 1], ["letters", 1], ["reverse", 1], ["the", 1], ["string", 1], ["the", 1], ["function", 1], ["should", 1], ["return", 1], ["the", 1], ["resulted", 1], ["string", 1], ["examples", 0], ["solve", 0], ["1234", 0], ["4321", 0], ["solve", 0], ["ab", 0], ["ab", 0], ["solve", 0], ["a", 0], ["c", 0], ["a", 0], ["c", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8979591836734694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8979591836734694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9180327868852459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9180327868852459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8979591836734694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8979591836734694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9180327868852459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9180327868852459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["flg", 0], ["0", 0], ["idx", 0], ["0", 0], ["new", 0], ["str", 0], ["list", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["isalpha", 0], ["new", 0], ["str", 0], ["idx", 0], ["i", 0], ["swapcase", 0], ["flg", 0], ["1", 0], ["idx", 0], ["1", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["new", 0], ["str", 0], ["s", 0], ["i", 0], ["if", 0], ["flg", 0], ["0", 0], ["return", 0], ["s", 0], ["len", 0], ["s", 0], ["1", 0], ["return", 0], ["s", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n", "references": ["    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n"], "id": "id78"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id78", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["hex", 0], ["key", 0], ["num", 0], ["you", 0], ["have", 0], ["been", 0], ["tasked", 0], ["to", 0], ["write", 0], ["a", 0], ["function", 0], ["that", 0], ["receives", 0], ["a", 0], ["hexadecimal", 0], ["number", 0], ["as", 0], ["a", 0], ["string", 0], ["and", 0], ["counts", 0], ["the", 0], ["number", 0], ["of", 0], ["hexadecimal", 0], ["digits", 0], ["that", 0], ["are", 0], ["primes", 0], ["prime", 281], ["number", 44], ["or", 44], ["a", 44], ["prime", 44], ["is", 66], ["a", 68], ["natural", 68], ["number", 68], ["greater", 68], ["than", 0], ["1", 0], ["that", 0], ["is", 0], ["not", 0], ["a", 0], ["product", 0], ["of", 0], ["two", 0], ["smaller", 0], ["natural", 0], ["numbers", 1], ["hexadecimal", 14], ["digits", 34], ["are", 826], ["0", 13866], ["1", 16139], ["2", 16002], ["3", 15503], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["8", 0], ["9", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["f", 0], ["prime", 0], ["numbers", 0], ["are", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["11", 0], ["13", 0], ["17", 0], ["so", 0], ["you", 0], ["have", 0], ["to", 0], ["determine", 0], ["a", 0], ["number", 0], ["of", 0], ["the", 0], ["following", 0], ["digits", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["b", 0], ["decimal", 0], ["11", 0], ["d", 0], ["decimal", 0], ["13", 0], ["note", 0], ["you", 0], ["may", 0], ["assume", 0], ["the", 0], ["input", 0], ["is", 0], ["always", 0], ["correct", 0], ["or", 0], ["empty", 0], ["string", 0], ["and", 0], ["symbols", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["f", 0], ["are", 0], ["always", 0], ["uppercase", 0], ["examples", 0], ["for", 0], ["num", 0], ["ab", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["1", 0], ["for", 0], ["num", 0], ["1077e", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["2", 0], ["for", 0], ["num", 0], ["abed1a33", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["4", 0], ["for", 0], ["num", 0], ["123456789abcdef0", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["6", 0], ["for", 0], ["num", 0], ["2020", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["2", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11538461538461539, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00814586487572773, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.24404761904761904, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1217744296036111, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00641025641025641, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00641025641025641, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.11904761904761904, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11904761904761904, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["primes", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["b", 0], ["d", 0], ["total", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["num", 0], ["if", 0], ["num", 0], ["i", 0], ["in", 0], ["primes", 0], ["total", 0], ["1", 0], ["return", 0], ["total", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "references": ["    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n"], "id": "id115"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id115", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["max", 0], ["fill", 0], ["grid", 0], ["capacity", 0], ["import", 0], ["math", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["rectangular", 0], ["grid", 0], ["of", 0], ["wells", 0], ["each", 0], ["row", 0], ["represents", 0], ["a", 0], ["single", 0], ["well", 0], ["and", 0], ["each", 0], ["1", 0], ["in", 0], ["a", 0], ["row", 0], ["represents", 0], ["a", 0], ["single", 0], ["unit", 0], ["of", 0], ["water", 0], ["each", 0], ["well", 0], ["has", 0], ["a", 0], ["corresponding", 0], ["bucket", 0], ["that", 0], ["can", 0], ["be", 0], ["used", 0], ["to", 0], ["extract", 0], ["water", 0], ["from", 0], ["it", 0], ["and", 0], ["all", 0], ["buckets", 0], ["have", 0], ["the", 0], ["same", 0], ["capacity", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["use", 0], ["the", 0], ["buckets", 0], ["to", 0], ["empty", 0], ["the", 0], ["wells", 0], ["output", 0], ["the", 0], ["number", 0], ["of", 0], ["times", 0], ["you", 0], ["need", 0], ["to", 0], ["lower", 0], ["the", 0], ["buckets", 0], ["example", 0], ["1", 0], ["input", 0], ["grid", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["bucket", 0], ["capacity", 0], ["1", 0], ["output", 0], ["6", 0], ["example", 0], ["2", 0], ["input", 0], ["grid", 0], ["0", 390], ["0", 173], ["1", 135], ["1", 70], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["bucket", 0], ["capacity", 0], ["2", 0], ["output", 0], ["5", 0], ["example", 0], ["3", 0], ["input", 0], ["grid", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["bucket", 0], ["capacity", 0], ["5", 0], ["output", 0], ["0", 0], ["constraints", 0], ["all", 0], ["wells", 0], ["have", 0], ["the", 0], ["same", 0], ["length", 0], ["1", 0], ["grid", 0], ["length", 0], ["10", 0], ["2", 0], ["1", 0], ["grid", 0], ["1", 0], ["length", 0], ["10", 0], ["2", 0], ["grid", 0], ["i", 0], ["j", 0], ["0", 0], ["1", 0], ["1", 0], ["capacity", 0], ["10", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.025974025974025976, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00019504916284437338, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.0963855421686747, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0012136514608831624, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["return", 0], ["sum", 0], ["math", 0], ["ceil", 0], ["sum", 0], ["arr", 0], ["capacity", 0], ["for", 0], ["arr", 0], ["in", 0], ["grid", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n", "references": ["    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"], "id": "id114"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id114", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 1], ["minsubarraysum", 1], ["nums", 1], ["given", 2], ["an", 2], ["array", 2], ["of", 2], ["integers", 2], ["nums", 2], ["find", 1], ["the", 1], ["minimum", 1], ["sum", 1], ["of", 1], ["any", 1], ["non", 1], ["empty", 1], ["sub", 1], ["array", 1], ["of", 1], ["nums", 1], ["example", 1], ["minsubarraysum", 1], ["2", 0], ["3", 0], ["4", 0], ["1", 0], ["2", 0], ["4", 0], ["1", 0], ["minsubarraysum", 0], ["1", 0], ["2", 0], ["3", 0], ["6", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.92, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9459459459459459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9459459459459459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.92, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9459459459459459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9459459459459459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["max", 0], ["sum", 0], ["0", 0], ["s", 0], ["0", 0], ["for", 0], ["num", 0], ["in", 0], ["nums", 0], ["s", 0], ["num", 0], ["if", 0], ["s", 0], ["0", 0], ["s", 0], ["0", 0], ["max", 0], ["sum", 0], ["max", 0], ["s", 0], ["max", 0], ["sum", 0], ["if", 0], ["max", 0], ["sum", 0], ["0", 0], ["max", 0], ["sum", 0], ["max", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["nums", 0], ["min", 0], ["sum", 0], ["max", 0], ["sum", 0], ["return", 0], ["min", 0], ["sum", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "references": ["    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n"], "id": "id20"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id20", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["from", 0], ["typing", 0], ["import", 0], ["list", 0], ["tuple", 0], ["def", 1], ["find", 1], ["closest", 1], ["elements", 1], ["numbers", 1], ["list", 1], ["float", 1], ["tuple", 1], ["float", 1], ["float", 1], ["from", 1], ["a", 1], ["supplied", 1], ["list", 1], ["of", 1], ["numbers", 1], ["of", 1], ["length", 1], ["at", 1], ["least", 1], ["two", 1], ["select", 1], ["and", 1], ["return", 1], ["two", 1], ["that", 1], ["are", 1], ["the", 1], ["closest", 1], ["to", 1], ["each", 1], ["other", 1], ["and", 1], ["return", 1], ["them", 1], ["in", 1], ["order", 1], ["smaller", 1], ["number", 1], ["larger", 1], ["number", 1], ["find", 2], ["closest", 2], ["elements", 1], ["1", 1], ["0", 1], ["2", 1], ["0", 1], ["3", 1], ["0", 1], ["4", 1], ["0", 1], ["5", 1], ["0", 1], ["2", 1], ["2", 1], ["2", 1], ["0", 1], ["2", 1], ["2", 1], ["find", 2], ["closest", 2], ["elements", 1], ["1", 3], ["0", 3], ["2", 1], ["0", 1], ["3", 0], ["0", 0], ["4", 0], ["0", 0], ["5", 0], ["0", 0], ["2", 0], ["0", 0], ["2", 0], ["0", 0], ["2", 0], ["0", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9178082191780822, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8721461187214613, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9294117647058824, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9294117647058824, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9178082191780822, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8721461187214613, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9294117647058824, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9294117647058824, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["closest", 0], ["pair", 0], ["none", 0], ["distance", 0], ["none", 0], ["for", 0], ["idx", 0], ["elem", 0], ["in", 0], ["enumerate", 0], ["numbers", 0], ["for", 0], ["idx2", 0], ["elem2", 0], ["in", 0], ["enumerate", 0], ["numbers", 0], ["if", 0], ["idx", 0], ["idx2", 0], ["if", 0], ["distance", 0], ["is", 0], ["none", 0], ["distance", 0], ["abs", 0], ["elem", 0], ["elem2", 0], ["closest", 0], ["pair", 0], ["tuple", 0], ["sorted", 0], ["elem", 0], ["elem2", 0], ["else", 0], ["new", 0], ["distance", 0], ["abs", 0], ["elem", 0], ["elem2", 0], ["if", 0], ["new", 0], ["distance", 0], ["distance", 0], ["distance", 0], ["new", 0], ["distance", 0], ["closest", 0], ["pair", 0], ["tuple", 0], ["sorted", 0], ["elem", 0], ["elem2", 0], ["return", 0], ["closest", 0], ["pair", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "references": ["    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n"], "id": "id83"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id83", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["starts", 0], ["one", 0], ["ends", 0], ["n", 0], ["given", 1], ["a", 1], ["positive", 1], ["integer", 1], ["n", 1], ["return", 1], ["the", 1], ["count", 1], ["of", 1], ["the", 1], ["numbers", 0], ["of", 0], ["n", 0], ["digit", 0], ["positive", 0], ["integers", 0], ["that", 0], ["start", 0], ["or", 0], ["end", 0], ["with", 0], ["1", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5882352941176471, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5882352941176471, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7586206896551724, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7586206896551724, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5882352941176471, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5882352941176471, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7586206896551724, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7586206896551724, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["1", 0], ["return", 0], ["18", 0], ["10", 0], ["n", 0], ["2", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "references": ["    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n"], "id": "id157"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id157", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["right", 0], ["angle", 0], ["triangle", 0], ["a", 0], ["b", 0], ["c", 0], ["given", 0], ["the", 0], ["lengths", 0], ["of", 0], ["the", 0], ["three", 0], ["sides", 0], ["of", 0], ["a", 0], ["triangle", 0], ["return", 0], ["true", 0], ["if", 0], ["the", 0], ["three", 0], ["sides", 0], ["form", 0], ["a", 0], ["right", 0], ["angled", 0], ["triangle", 0], ["false", 0], ["otherwise", 0], ["a", 2], ["right", 0], ["angled", 0], ["triangle", 0], ["is", 0], ["a", 0], ["triangle", 0], ["in", 0], ["which", 0], ["one", 0], ["angle", 0], ["is", 0], ["right", 0], ["angle", 0], ["or", 0], ["90", 0], ["degree", 0], ["example", 0], ["right", 0], ["angle", 0], ["triangle", 0], ["3", 0], ["4", 0], ["5", 0], ["true", 0], ["right", 0], ["angle", 0], ["triangle", 0], ["1", 0], ["2", 0], ["3", 0], ["false", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.019230769230769232, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.009615384615384616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.203125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1015625, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.019230769230769232, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.009615384615384616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.203125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1015625, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["return", 0], ["a", 0], ["a", 0], ["b", 0], ["b", 0], ["c", 0], ["c", 0], ["or", 0], ["b", 0], ["b", 0], ["a", 0], ["a", 0], ["c", 0], ["c", 0], ["or", 0], ["c", 0], ["c", 0], ["a", 0], ["a", 0], ["b", 0], ["b", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "references": ["    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n"], "id": "id102"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id102", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 3], ["choose", 3], ["num", 3], ["x", 3], ["y", 3], ["this", 3], ["function", 3], ["takes", 3], ["two", 3], ["positive", 3], ["numbers", 3], ["x", 3], ["and", 3], ["y", 3], ["and", 3], ["returns", 3], ["the", 3], ["biggest", 3], ["even", 3], ["integer", 3], ["number", 3], ["that", 3], ["is", 3], ["in", 3], ["the", 3], ["range", 3], ["x", 3], ["y", 3], ["inclusive", 3], ["if", 2], ["there", 2], ["s", 2], ["no", 2], ["such", 2], ["number", 2], ["then", 2], ["the", 2], ["function", 2], ["should", 2], ["return", 2], ["1", 2], ["for", 0], ["example", 0], ["choose", 0], ["num", 0], ["12", 0], ["15", 0], ["14", 0], ["choose", 0], ["num", 0], ["13", 0], ["12", 0], ["1", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9534883720930233, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3643410852713178, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9636363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3939393939393939, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9534883720930233, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3643410852713178, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9636363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3939393939393939, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["if", 0], ["x", 0], ["y", 0], ["return", 0], ["1", 0], ["if", 0], ["y", 0], ["2", 0], ["0", 0], ["return", 0], ["y", 0], ["if", 0], ["x", 0], ["y", 0], ["return", 0], ["1", 0], ["return", 0], ["y", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n", "references": ["    while b:\n        a, b = b, a % b\n    return a\n"], "id": "id13"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id13", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["greatest", 0], ["common", 0], ["divisor", 0], ["a", 0], ["int", 0], ["b", 0], ["int", 0], ["int", 0], ["return", 1], ["a", 1], ["greatest", 1], ["common", 1], ["divisor", 1], ["of", 1], ["two", 1], ["integers", 1], ["a", 1], ["and", 1], ["b", 1], ["greatest", 0], ["common", 0], ["divisor", 0], ["3", 0], ["5", 0], ["1", 0], ["greatest", 0], ["common", 0], ["divisor", 0], ["25", 0], ["15", 0], ["5", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6764705882352942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6764705882352942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6764705882352942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6764705882352942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["while", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "references": ["    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"], "id": "id69"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id69", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["search", 0], ["lst", 0], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["non", 1], ["empty", 1], ["list", 1], ["of", 1], ["positive", 1], ["integers", 1], ["return", 1], ["the", 1], ["greatest", 1], ["integer", 1], ["that", 1], ["is", 1], ["greater", 1], ["than", 1], ["zero", 1], ["and", 1], ["has", 1], ["a", 1], ["frequency", 1], ["greater", 1], ["than", 1], ["or", 1], ["equal", 1], ["to", 1], ["the", 1], ["value", 1], ["of", 1], ["the", 1], ["integer", 1], ["itself", 1], ["the", 1], ["frequency", 1], ["of", 1], ["an", 1], ["integer", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["times", 1], ["it", 1], ["appears", 1], ["in", 1], ["the", 0], ["list", 0], ["if", 0], ["no", 0], ["such", 0], ["a", 0], ["value", 0], ["exist", 0], ["return", 0], ["1", 0], ["examples", 0], ["search", 0], ["4", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["search", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["3", 0], ["4", 0], ["4", 0], ["4", 0], ["3", 0], ["search", 0], ["5", 0], ["5", 0], ["4", 0], ["4", 0], ["4", 0], ["1", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6103896103896104, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6103896103896104, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6629213483146067, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6629213483146067, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6103896103896104, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6103896103896104, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6629213483146067, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6629213483146067, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["frq", 0], ["0", 0], ["max", 0], ["lst", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["lst", 0], ["frq", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["frq", 0], ["if", 0], ["frq", 0], ["i", 0], ["i", 0], ["ans", 0], ["i", 0], ["return", 0], ["ans", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "references": ["    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n"], "id": "id33"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id33", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["sort", 0], ["third", 0], ["l", 0], ["list", 0], ["this", 0], ["function", 0], ["takes", 0], ["a", 0], ["list", 0], ["l", 0], ["and", 0], ["returns", 0], ["a", 0], ["list", 0], ["l", 1], ["such", 1], ["that", 1], ["l", 1], ["is", 1], ["identical", 1], ["to", 1], ["l", 1], ["in", 1], ["the", 1], ["indicies", 1], ["that", 1], ["are", 1], ["not", 1], ["divisible", 1], ["by", 1], ["three", 1], ["while", 1], ["its", 1], ["values", 1], ["at", 1], ["the", 1], ["indicies", 1], ["that", 1], ["are", 1], ["divisible", 1], ["by", 1], ["three", 1], ["are", 1], ["equal", 1], ["to", 1], ["the", 0], ["values", 0], ["of", 0], ["the", 0], ["corresponding", 0], ["indicies", 0], ["of", 0], ["l", 0], ["but", 0], ["sorted", 0], ["sort", 0], ["third", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["sort", 0], ["third", 0], ["5", 1], ["6", 1], ["3", 0], ["4", 0], ["8", 0], ["9", 0], ["2", 0], ["2", 0], ["6", 0], ["3", 0], ["4", 0], ["8", 0], ["9", 0], ["5", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4714285714285714, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4714285714285714, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6951219512195121, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6951219512195121, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4714285714285714, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4714285714285714, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6951219512195121, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6951219512195121, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["l", 0], ["list", 0], ["l", 0], ["l", 0], ["3", 0], ["sorted", 0], ["l", 0], ["3", 0], ["return", 0], ["l", 0], ["", 0]], "metrics": []}}
