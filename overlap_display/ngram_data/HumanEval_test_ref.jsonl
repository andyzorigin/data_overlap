{"instance": {"input": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "references": ["    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"], "id": "id55"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id55", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["fib", 0], ["n", 0], ["int", 0], ["return", 0], ["n", 0], ["th", 0], ["fibonacci", 0], ["number", 0], ["fib", 0], ["10", 0], ["55", 0], ["fib", 0], ["1", 0], ["1", 0], ["fib", 0], ["8", 0], ["21", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["if", 17], ["n", 16], ["0", 16], ["return", 17], ["0", 17], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["1", 0], ["return", 0], ["fib", 0], ["n", 0], ["1", 0], ["fib", 0], ["n", 0], ["2", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7142857142857143, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.04306722689075631, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8947368421052632, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.05572755417956656, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "references": ["    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n"], "id": "id47"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id47", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["median", 0], ["l", 0], ["list", 0], ["return", 0], ["median", 0], ["of", 0], ["elements", 0], ["in", 0], ["the", 0], ["list", 0], ["l", 0], ["median", 0], ["3", 0], ["1", 0], ["2", 0], ["4", 0], ["5", 0], ["3", 0], ["median", 0], ["10", 0], ["4", 0], ["6", 0], ["1000", 0], ["10", 0], ["20", 0], ["15", 0], ["0", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["l", 2], ["sorted", 0], ["l", 0], ["if", 0], ["len", 0], ["l", 0], ["2", 0], ["1", 0], ["return", 0], ["l", 0], ["len", 0], ["l", 0], ["2", 0], ["else", 0], ["return", 0], ["l", 0], ["len", 0], ["l", 0], ["2", 0], ["1", 0], ["l", 0], ["len", 0], ["l", 0], ["2", 0], ["2", 0], ["0", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0625, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.03125, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4642857142857143, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.23214285714285715, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0625, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.03125, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4642857142857143, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.23214285714285715, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n", "references": ["    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"], "id": "id156"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id156", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["int", 0], ["to", 0], ["mini", 0], ["roman", 0], ["number", 0], ["given", 0], ["a", 0], ["positive", 0], ["integer", 0], ["obtain", 0], ["its", 0], ["roman", 0], ["numeral", 0], ["equivalent", 0], ["as", 0], ["a", 0], ["string", 0], ["and", 0], ["return", 0], ["it", 0], ["in", 0], ["lowercase", 0], ["restrictions", 0], ["1", 0], ["num", 0], ["1000", 0], ["examples", 0], ["int", 0], ["to", 0], ["mini", 0], ["roman", 0], ["19", 0], ["xix", 0], ["int", 0], ["to", 0], ["mini", 0], ["roman", 0], ["152", 0], ["clii", 0], ["int", 0], ["to", 0], ["mini", 0], ["roman", 0], ["426", 0], ["cdxxvi", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["num", 0], ["1", 8], ["4", 0], ["5", 0], ["9", 0], ["10", 0], ["40", 0], ["50", 0], ["90", 0], ["100", 0], ["400", 0], ["500", 0], ["900", 0], ["1000", 0], ["sym", 0], ["i", 6], ["iv", 0], ["v", 0], ["ix", 0], ["x", 0], ["xl", 0], ["l", 0], ["xc", 0], ["c", 0], ["cd", 0], ["d", 0], ["cm", 0], ["m", 0], ["i", 0], ["12", 0], ["res", 0], ["while", 0], ["number", 0], ["div", 0], ["number", 0], ["num", 0], ["i", 0], ["number", 0], ["num", 0], ["i", 0], ["while", 0], ["div", 0], ["res", 0], ["sym", 0], ["i", 0], ["div", 0], ["1", 0], ["i", 0], ["1", 0], ["return", 0], ["res", 0], ["lower", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.047619047619047616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.006944444444444443, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.48148148148148145, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.07021604938271603, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.047619047619047616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.006944444444444443, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.48148148148148145, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07021604938271603, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n", "references": ["    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n"], "id": "id61"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id61", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["correct", 0], ["bracketing", 0], ["brackets", 0], ["str", 0], ["brackets", 0], ["is", 0], ["a", 0], ["string", 0], ["of", 0], ["and", 0], ["return", 0], ["true", 0], ["if", 0], ["every", 0], ["opening", 0], ["bracket", 0], ["has", 0], ["a", 0], ["corresponding", 0], ["closing", 0], ["bracket", 0], ["correct", 0], ["bracketing", 0], ["false", 0], ["correct", 0], ["bracketing", 0], ["true", 0], ["correct", 0], ["bracketing", 0], ["true", 0], ["correct", 0], ["bracketing", 0], ["false", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["depth", 0], ["0", 0], ["for", 0], ["b", 0], ["in", 0], ["brackets", 0], ["if", 0], ["b", 0], ["depth", 1], ["1", 0], ["else", 0], ["depth", 0], ["1", 0], ["if", 0], ["depth", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["depth", 0], ["0", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.09090909090909091, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.09090909090909091, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5652173913043478, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5652173913043478, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.09090909090909091, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.09090909090909091, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5652173913043478, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5652173913043478, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n", "references": ["    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n"], "id": "id19"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id19", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["from", 0], ["typing", 0], ["import", 0], ["list", 0], ["def", 0], ["sort", 0], ["numbers", 0], ["numbers", 0], ["str", 0], ["str", 0], ["input", 0], ["is", 0], ["a", 0], ["space", 0], ["delimited", 0], ["string", 0], ["of", 0], ["numberals", 0], ["from", 0], ["zero", 0], ["to", 0], ["nine", 0], ["valid", 0], ["choices", 0], ["are", 0], ["zero", 0], ["one", 0], ["two", 0], ["three", 0], ["four", 0], ["five", 0], ["six", 0], ["seven", 0], ["eight", 0], ["and", 0], ["nine", 0], ["return", 0], ["the", 0], ["string", 0], ["with", 0], ["numbers", 0], ["sorted", 0], ["from", 0], ["smallest", 0], ["to", 0], ["largest", 0], ["sort", 0], ["numbers", 0], ["three", 0], ["one", 0], ["five", 0], ["one", 0], ["three", 0], ["five", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["value", 0], ["map", 1], ["zero", 56], ["0", 67], ["one", 162], ["1", 187], ["two", 210], ["2", 213], ["three", 195], ["3", 195], ["four", 0], ["4", 0], ["five", 0], ["5", 0], ["six", 0], ["6", 0], ["seven", 0], ["7", 0], ["eight", 0], ["8", 0], ["nine", 0], ["9", 0], ["return", 0], ["join", 0], ["sorted", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["numbers", 0], ["split", 0], ["if", 0], ["x", 0], ["key", 0], ["lambda", 0], ["x", 0], ["value", 0], ["map", 0], ["x", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3103448275862069, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.03669021033722752, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5121951219512195, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5121951219512195, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.034482758620689655, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.034482758620689655, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5121951219512195, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5121951219512195, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "references": ["    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"], "id": "id96"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id96", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["count", 0], ["up", 0], ["to", 0], ["n", 0], ["implement", 0], ["a", 0], ["function", 0], ["that", 0], ["takes", 0], ["an", 0], ["non", 0], ["negative", 0], ["integer", 0], ["and", 0], ["returns", 0], ["an", 0], ["array", 0], ["of", 0], ["the", 0], ["first", 0], ["n", 0], ["integers", 0], ["that", 0], ["are", 0], ["prime", 0], ["numbers", 0], ["and", 0], ["less", 0], ["than", 0], ["n", 0], ["for", 0], ["example", 0], ["count", 0], ["up", 0], ["to", 0], ["5", 0], ["2", 0], ["3", 0], ["count", 0], ["up", 0], ["to", 0], ["11", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["count", 0], ["up", 0], ["to", 0], ["0", 0], ["count", 0], ["up", 0], ["to", 0], ["20", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["11", 0], ["13", 0], ["17", 0], ["19", 0], ["count", 0], ["up", 0], ["to", 0], ["1", 0], ["count", 0], ["up", 0], ["to", 0], ["18", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["11", 0], ["13", 0], ["17", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["primes", 1], ["for", 1], ["i", 1], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["is", 0], ["prime", 0], ["true", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["i", 0], ["if", 2], ["i", 2], ["j", 2], ["0", 2], ["is", 0], ["prime", 0], ["false", 0], ["break", 0], ["if", 0], ["is", 0], ["prime", 0], ["primes", 0], ["append", 0], ["i", 0], ["return", 0], ["primes", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3181818181818182, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.22727272727272727, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9117647058823529, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6764705882352942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3181818181818182, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.22727272727272727, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9117647058823529, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6764705882352942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n", "references": ["    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n"], "id": "id105"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id105", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["by", 0], ["length", 0], ["arr", 0], ["given", 0], ["an", 0], ["array", 0], ["of", 0], ["integers", 0], ["sort", 0], ["the", 0], ["integers", 0], ["that", 0], ["are", 0], ["between", 0], ["1", 0], ["and", 0], ["9", 0], ["inclusive", 0], ["reverse", 0], ["the", 0], ["resulting", 0], ["array", 0], ["and", 0], ["then", 0], ["replace", 0], ["each", 0], ["digit", 0], ["by", 0], ["its", 0], ["corresponding", 0], ["name", 0], ["from", 0], ["one", 0], ["two", 0], ["three", 0], ["four", 0], ["five", 0], ["six", 0], ["seven", 0], ["eight", 0], ["nine", 0], ["for", 0], ["example", 0], ["arr", 0], ["2", 0], ["1", 0], ["1", 0], ["4", 0], ["5", 0], ["8", 0], ["2", 0], ["3", 0], ["sort", 0], ["arr", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["8", 0], ["reverse", 0], ["arr", 0], ["8", 0], ["5", 0], ["4", 0], ["3", 0], ["2", 0], ["2", 0], ["1", 0], ["1", 0], ["return", 0], ["eight", 0], ["five", 0], ["four", 0], ["three", 0], ["two", 0], ["two", 0], ["one", 0], ["one", 0], ["if", 0], ["the", 0], ["array", 0], ["is", 0], ["empty", 0], ["return", 0], ["an", 0], ["empty", 0], ["array", 0], ["arr", 0], ["return", 0], ["if", 0], ["the", 0], ["array", 0], ["has", 0], ["any", 0], ["strange", 0], ["number", 0], ["ignore", 0], ["it", 0], ["arr", 0], ["1", 0], ["1", 0], ["55", 0], ["sort", 0], ["arr", 0], ["1", 0], ["1", 0], ["55", 0], ["reverse", 0], ["arr", 0], ["55", 0], ["1", 0], ["1", 0], ["return", 0], ["one", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["dic", 1], ["1", 795], ["one", 788], ["2", 789], ["two", 779], ["3", 759], ["three", 745], ["4", 0], ["four", 0], ["5", 0], ["five", 0], ["6", 0], ["six", 0], ["7", 0], ["seven", 0], ["8", 0], ["eight", 0], ["9", 0], ["nine", 0], ["sorted", 0], ["arr", 0], ["sorted", 0], ["arr", 0], ["reverse", 0], ["true", 0], ["new", 0], ["arr", 0], ["for", 0], ["var", 0], ["in", 0], ["sorted", 0], ["arr", 0], ["try", 0], ["new", 0], ["arr", 0], ["append", 0], ["dic", 0], ["var", 0], ["except", 0], ["pass", 0], ["return", 0], ["new", 0], ["arr", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.21212121212121213, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.030537509887106074, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4222222222222222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4222222222222222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.030303030303030304, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.030303030303030304, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4222222222222222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4222222222222222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n", "references": ["    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n"], "id": "id127"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id127", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["intersection", 0], ["interval1", 0], ["interval2", 0], ["you", 0], ["are", 0], ["given", 0], ["two", 0], ["intervals", 0], ["where", 0], ["each", 0], ["interval", 0], ["is", 0], ["a", 0], ["pair", 0], ["of", 0], ["integers", 0], ["for", 0], ["example", 0], ["interval", 0], ["start", 0], ["end", 0], ["1", 0], ["2", 0], ["the", 0], ["given", 0], ["intervals", 0], ["are", 0], ["closed", 0], ["which", 0], ["means", 0], ["that", 0], ["the", 0], ["interval", 0], ["start", 0], ["end", 0], ["includes", 0], ["both", 0], ["start", 0], ["and", 0], ["end", 0], ["for", 0], ["each", 0], ["given", 0], ["interval", 0], ["it", 0], ["is", 0], ["assumed", 0], ["that", 0], ["its", 0], ["start", 0], ["is", 0], ["less", 0], ["or", 0], ["equal", 0], ["its", 0], ["end", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["determine", 0], ["whether", 0], ["the", 0], ["length", 0], ["of", 0], ["intersection", 0], ["of", 0], ["these", 0], ["two", 0], ["intervals", 0], ["is", 0], ["a", 0], ["prime", 0], ["number", 0], ["example", 0], ["the", 0], ["intersection", 0], ["of", 0], ["the", 0], ["intervals", 0], ["1", 0], ["3", 0], ["2", 0], ["4", 0], ["is", 0], ["2", 0], ["3", 0], ["which", 0], ["its", 0], ["length", 0], ["is", 0], ["1", 0], ["which", 0], ["not", 0], ["a", 0], ["prime", 0], ["number", 0], ["if", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["intersection", 0], ["is", 0], ["a", 0], ["prime", 0], ["number", 0], ["return", 0], ["yes", 0], ["otherwise", 0], ["return", 0], ["no", 0], ["if", 0], ["the", 0], ["two", 0], ["intervals", 0], ["don", 0], ["t", 0], ["intersect", 0], ["return", 0], ["no", 0], ["input", 0], ["output", 0], ["samples", 0], ["intersection", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["no", 0], ["intersection", 0], ["1", 0], ["1", 0], ["0", 0], ["4", 0], ["no", 0], ["intersection", 0], ["3", 0], ["1", 0], ["5", 0], ["5", 0], ["yes", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["def", 0], ["is", 0], ["prime", 0], ["num", 0], ["if", 0], ["num", 0], ["1", 0], ["or", 0], ["num", 0], ["0", 0], ["return", 0], ["false", 0], ["if", 0], ["num", 0], ["2", 0], ["return", 0], ["true", 0], ["for", 5], ["i", 5], ["in", 0], ["range", 0], ["2", 0], ["num", 0], ["if", 0], ["num", 0], ["i", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["l", 0], ["max", 0], ["interval1", 0], ["0", 0], ["interval2", 0], ["0", 0], ["r", 0], ["min", 0], ["interval1", 0], ["1", 0], ["interval2", 0], ["1", 0], ["length", 0], ["r", 0], ["l", 0], ["if", 0], ["length", 0], ["0", 0], ["and", 0], ["is", 0], ["prime", 0], ["length", 0], ["return", 0], ["yes", 0], ["return", 0], ["no", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0425531914893617, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00851063829787234, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.23728813559322035, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.04745762711864407, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0425531914893617, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00851063829787234, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.23728813559322035, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.04745762711864407, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n", "references": ["    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n"], "id": "id56"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id56", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["correct", 0], ["bracketing", 0], ["brackets", 0], ["str", 0], ["brackets", 0], ["is", 0], ["a", 0], ["string", 0], ["of", 0], ["and", 0], ["return", 0], ["true", 0], ["if", 0], ["every", 0], ["opening", 0], ["bracket", 0], ["has", 0], ["a", 0], ["corresponding", 0], ["closing", 0], ["bracket", 0], ["correct", 0], ["bracketing", 0], ["false", 0], ["correct", 0], ["bracketing", 0], ["true", 0], ["correct", 0], ["bracketing", 0], ["true", 0], ["correct", 0], ["bracketing", 0], ["false", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["depth", 0], ["0", 0], ["for", 0], ["b", 0], ["in", 0], ["brackets", 0], ["if", 0], ["b", 0], ["depth", 1], ["1", 0], ["else", 0], ["depth", 0], ["1", 0], ["if", 0], ["depth", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["depth", 0], ["0", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.09090909090909091, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.09090909090909091, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5652173913043478, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5652173913043478, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.09090909090909091, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.09090909090909091, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5652173913043478, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5652173913043478, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n", "references": ["    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n"], "id": "id147"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id147", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["get", 0], ["max", 0], ["triples", 0], ["n", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["positive", 0], ["integer", 0], ["n", 0], ["you", 0], ["have", 0], ["to", 0], ["create", 0], ["an", 0], ["integer", 0], ["array", 0], ["a", 0], ["of", 0], ["length", 0], ["n", 0], ["for", 0], ["each", 0], ["i", 0], ["1", 0], ["≤", 0], ["i", 0], ["≤", 0], ["n", 0], ["the", 0], ["value", 0], ["of", 0], ["a", 0], ["i", 0], ["i", 0], ["i", 0], ["i", 0], ["1", 0], ["return", 0], ["the", 0], ["number", 0], ["of", 0], ["triples", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["a", 0], ["k", 0], ["of", 0], ["a", 0], ["where", 0], ["i", 0], ["j", 0], ["k", 0], ["and", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["a", 0], ["k", 0], ["is", 0], ["a", 0], ["multiple", 0], ["of", 0], ["3", 0], ["example", 0], ["input", 0], ["n", 0], ["5", 0], ["output", 0], ["1", 0], ["explanation", 0], ["a", 0], ["1", 0], ["3", 0], ["7", 0], ["13", 0], ["21", 0], ["the", 0], ["only", 0], ["valid", 0], ["triple", 0], ["is", 0], ["1", 0], ["7", 0], ["13", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["a", 0], ["i", 0], ["i", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["ans", 0], ["for", 7], ["i", 2], ["in", 2], ["range", 2], ["n", 2], ["for", 2], ["j", 2], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["for", 2], ["k", 2], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["a", 0], ["k", 0], ["3", 0], ["0", 0], ["ans", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["a", 0], ["k", 0], ["return", 0], ["len", 0], ["ans", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.21951219512195122, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.10104529616724738, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.49056603773584906, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.238544474393531, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.21951219512195122, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.10104529616724738, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.49056603773584906, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.238544474393531, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "references": ["    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n"], "id": "id87"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id87", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["get", 0], ["row", 0], ["lst", 0], ["x", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["2", 0], ["dimensional", 0], ["data", 0], ["as", 0], ["a", 0], ["nested", 0], ["lists", 0], ["which", 0], ["is", 0], ["similar", 0], ["to", 0], ["matrix", 0], ["however", 0], ["unlike", 0], ["matrices", 0], ["each", 0], ["row", 0], ["may", 0], ["contain", 0], ["a", 0], ["different", 0], ["number", 0], ["of", 0], ["columns", 0], ["given", 0], ["lst", 0], ["and", 0], ["integer", 0], ["x", 0], ["find", 0], ["integers", 0], ["x", 0], ["in", 0], ["the", 0], ["list", 0], ["and", 0], ["return", 0], ["list", 0], ["of", 0], ["tuples", 0], ["x1", 0], ["y1", 0], ["x2", 0], ["y2", 0], ["such", 0], ["that", 0], ["each", 0], ["tuple", 0], ["is", 0], ["a", 0], ["coordinate", 0], ["row", 0], ["columns", 0], ["starting", 0], ["with", 0], ["0", 0], ["sort", 0], ["coordinates", 0], ["initially", 0], ["by", 0], ["rows", 0], ["in", 0], ["ascending", 0], ["order", 0], ["also", 0], ["sort", 0], ["coordinates", 0], ["of", 0], ["the", 0], ["row", 0], ["by", 0], ["columns", 0], ["in", 0], ["descending", 0], ["order", 0], ["examples", 0], ["get", 0], ["row", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["1", 0], ["6", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["1", 0], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["4", 0], ["1", 0], ["0", 0], ["2", 0], ["5", 0], ["2", 0], ["0", 0], ["get", 0], ["row", 0], ["1", 0], ["get", 0], ["row", 0], ["1", 0], ["1", 0], ["2", 0], ["3", 0], ["3", 0], ["2", 0], ["2", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["coords", 0], ["i", 0], ["j", 0], ["for", 4], ["i", 1], ["in", 1], ["range", 1], ["len", 1], ["lst", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["lst", 0], ["i", 0], ["if", 0], ["lst", 0], ["i", 0], ["j", 0], ["x", 0], ["return", 0], ["sorted", 0], ["sorted", 0], ["coords", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["1", 0], ["reverse", 0], ["true", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.18518518518518517, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1574074074074074, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4358974358974359, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4166666666666667, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.18518518518518517, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1574074074074074, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4358974358974359, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4166666666666667, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "references": ["    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"], "id": "id40"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id40", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["triples", 0], ["sum", 0], ["to", 0], ["zero", 0], ["l", 0], ["list", 0], ["triples", 0], ["sum", 0], ["to", 0], ["zero", 0], ["takes", 0], ["a", 0], ["list", 0], ["of", 0], ["integers", 0], ["as", 0], ["an", 0], ["input", 0], ["it", 0], ["returns", 0], ["true", 0], ["if", 0], ["there", 0], ["are", 0], ["three", 0], ["distinct", 0], ["elements", 0], ["in", 0], ["the", 0], ["list", 0], ["that", 0], ["sum", 0], ["to", 0], ["zero", 0], ["and", 0], ["false", 0], ["otherwise", 0], ["triples", 0], ["sum", 0], ["to", 0], ["zero", 0], ["1", 0], ["3", 0], ["5", 0], ["0", 0], ["false", 0], ["triples", 0], ["sum", 0], ["to", 0], ["zero", 0], ["1", 0], ["3", 0], ["2", 0], ["1", 0], ["true", 0], ["triples", 0], ["sum", 0], ["to", 0], ["zero", 0], ["1", 0], ["2", 0], ["3", 0], ["7", 0], ["false", 0], ["triples", 0], ["sum", 0], ["to", 0], ["zero", 0], ["2", 0], ["4", 0], ["5", 0], ["3", 0], ["9", 0], ["7", 0], ["true", 0], ["triples", 0], ["sum", 0], ["to", 0], ["zero", 0], ["1", 0], ["false", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["for", 4], ["i", 4], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["len", 0], ["l", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["len", 0], ["l", 0], ["if", 0], ["l", 0], ["i", 0], ["l", 0], ["j", 0], ["l", 0], ["k", 0], ["0", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08333333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.020833333333333332, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.3888888888888889, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.09722222222222222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08333333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.020833333333333332, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.3888888888888889, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.09722222222222222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
