{"instance": {"input": "\nQUESTION:\nLittle Artem found a grasshopper. He brought it to his house and constructed a jumping area for him.\n\nThe area looks like a strip of cells 1 × n. Each cell contains the direction for the next jump and the length of that jump. Grasshopper starts in the first cell and follows the instructions written on the cells. Grasshopper stops immediately if it jumps out of the strip. Now Artem wants to find out if this will ever happen.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — length of the strip. \n\nNext line contains a string of length n which consists of characters \"<\" and \">\" only, that provide the direction of the jump from the corresponding cell. Next line contains n integers d_{i} (1 ≤ d_{i} ≤ 10^9) — the length of the jump from the i-th cell.\n\n\n-----Output-----\n\nPrint \"INFINITE\" (without quotes) if grasshopper will continue his jumps forever. Otherwise print \"FINITE\" (without quotes).\n\n\n-----Examples-----\nInput\n2\n><\n1 2\n\nOutput\nFINITE\n\nInput\n3\n>><\n2 1 1\n\nOutput\nINFINITE\n\n\n-----Note-----\n\nIn the first sample grasshopper starts from the first cell and jumps to the right on the next cell. When he is in the second cell he needs to jump two cells left so he will jump out of the strip.\n\nSecond sample grasshopper path is 1 - 3 - 2 - 3 - 2 - 3 and so on. The path is infinite.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\ns = list([1 if x == '>' else -1 for x in input().strip()])\nd = list(map(int, input().strip().split()))\nb = [False for _ in range(n)]\n\nc = 0\nwhile True:\n\tc += s[c] * d[c]\n\tif c >= n or c < 0:\n\t\tprint('FINITE')\n\t\treturn\n\tif b[c]:\n\t\tprint('INFINITE')\n\t\treturn\n\tb[c] = True\n", "\n\nn = int(input())\ns = input()\nl = list(map(int, input().split()))\ncount = 0\nmas = [False for i in range(n)]\npos = 0\nans = 'INFINITE'\nfor i in range(n):\n\tif mas[pos]:\n\t\tbreak\n\telse:\n\t\tmas[pos] = True\n\tif s[pos] == '<':\n\t\tif pos - l[pos] < 0:\n\t\t\tans =  'FINITE'\n\t\telse:\n\t\t\tpos -= l[pos]\n\telse:\n\t\tif pos + l[pos] >= n:\n\t\t\tans = 'FINITE'\n\t\telse:\n\t\t\tpos += l[pos]\nprint(ans)\n", "n = int(input())\nstr = input()\ninp = list(map(int, input().split()))\n\nfor i in range(len(str)):\n\tif str[i] == '<':\n\t\tinp[i] *= -1\n\nvisited = [0 for i in range(n)]\n\ncur = 0\n\nwhile cur >= 0 and cur < n and visited[cur] != 1:\n\tvisited[cur] = 1\n\tcur += inp[cur]\n\nif cur >= 0 and cur < n:\n\tprint(\"INFINITE\")\nelse:\n\tprint(\"FINITE\")\n", "n = int(input())\ns = input()\nnum = list(map(int, input().split()))\npos = 0\nb = [True] * n\nwhile n > pos >= 0 and b[pos]:\n\tb[pos] = False\n\tif s[pos] == \">\":\n\t\tpos += num[pos]\n\telse:\n\t\tpos -= num[pos]\nif n > pos >= 0:\n\tprint(\"INFINITE\")\nelse:\n\tprint(\"FINITE\")\n", "n = int(input())\ninstructions = list(zip(input(), [int(i) for i in input().split()]))\n\nused = set()\npos = 0\nwhile True:\n\tif pos < 0 or pos >= n:\n\t\tprint('FINITE')\n\t\tbreak\n\tif pos in used:\n\t\tprint('INFINITE')\n\t\tbreak\n\tused.add(pos)\n\n\tdirect, length = instructions[pos]\n\tif direct == '>':\n\t\tpos += length\n\telse:\n\t\tpos -= length\n", "n = int(input())\ncells = input()\nlengths = list(map(int, input().split()))\nvisited = set()\ni = 0\nwhile (i not in visited) and (i < n) and (i > -1):\n\tvisited.add(i)\n\tif cells[i] == '>':\n\t\ti += lengths[i]\n\telse:\n\t\ti -= lengths[i]\n\t#print('new', i)\n\t\nif (i < n) and (i >= 0):\n\tprint(\"INFINITE\")\nelse:\n\tprint(\"FINITE\")\n\t\n", "class graph():\n\tdef __init__(self,n,v):\n\t\tself.G=dict()\n\t\tfor i in range(1,n+1):\n\t\t\tself.G.update([(i,set())])\n\t\tself.v=v\n\t\tself.length=n\n\tdef AppendEdge(self,a):\n\t\tself.G[a[0]].add(a[1])\n\t\tif not self.v:\n\t\t\tself.G[a[1]].add(a[0])\n\tdef ShowAdjacent(self,a):\n\t\treturn self.G[a]\n\tdef ShowLength(self):\n\t\treturn self.length\n\tdef Show(self):\n\t\tprint(self.G)\n\nn=int(input())\ns=input()\nf=[int(z) for z in input().split()]\n##G=graph(n+2,1)\nVis=[0]*n\nk=1\ni=0\nVis[0]=1\nwhile k!=0:\n\tif s[i]=='>':\n\t\tt=i+f[i]\n\t\tif t>=n:\n\t\t\tprint('FINITE')\n\t\t\tk=0\n\t\telif Vis[t]:\n\t\t\tprint('INFINITE')\n\t\t\tk=0\n\t\telse:\n\t\t\tVis[t]=1\n\t\t\ti=t\n\telse:\n\t\tt=i-f[i]\n\t\tif t<0:\n\t\t\tprint('FINITE')\n\t\t\tk=0\n\t\telif Vis[t]:\n\t\t\tprint('INFINITE')\n\t\t\tk=0\n\t\telse:\n\t\t\tVis[t]=1\n\t\t\ti=t\n", "import sys\ndef dfs(v):\n\tused[v] = True\n\tfor i in ed[v]:\n\t\tif not used[i]:\n\t\t\tdfs(i)\n\n\n\nsys.setrecursionlimit(1000000)\nn = int(input())\ndata1 = input()\ndata2 = list(map(int, input().split()))\nused = [False for i in range(n)]\ndata3 = [None for i in range(n)]\nfor i in range(n):\n\tif data1[i] == \">\":\n\t\tdata3[i] = i + data2[i]\n\telse:\n\t\tdata3[i] = i - data2[i]\nans = True\nindex = 0\nprev = -1\nfor i in range(2 * n):\n\tused[index] = True\n\tprev = index\n\tif data3[index] >= n or data3[index] < 0:\n\t\tans = False\n\t\tbreak\n\telse:\n\t\tindex = data3[index]\n\t\tif index == prev:\n\t\t\tbreak\nif ans:\n\tprint(\"INFINITE\")\nelse:\n\tprint(\"FINITE\")\n", "from sys import stdin as Si\nfrom math import floor as F \nfrom collections import defaultdict as dt\nfrom operator import itemgetter as ig\n\ndef __starting_point():\n\n\tn = int(Si.readline())\n\td = Si.readline().strip('\\n')\n\tc = tuple(map(int,Si.readline().split()))\n\ttub,i,Exit = set([0]),0,False\n\twhile not Exit:\n\t\tif d[i]=='>':   i=i+c[i]\n\t\telse:   i=i-c[i]\n\t\tif  i<0 or i>=n:   print('FINITE');break\n\t\telif i in tub:    print('INFINITE');break\n\t\telse: tub.add(i)\n\t\t\n\t\t\n\t\n\t\n'''\nA. Little Artem and Grasshopper\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\n\nLittle Artem found a grasshopper. He brought it to his house and constructed a jumping area for him.\n\nThe area looks like a strip of cells 1 × n. Each cell contains the direction for the next jump and the length of that jump. Grasshopper starts in the first cell and follows the instructions written on the cells. Grasshopper stops immediately if it jumps out of the strip. Now Artem wants to find out if this will ever happen.\nInput\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — length of the strip.\n\nNext line contains a string of length n which consists of characters \"<\" and \">\" only, that provide the direction of the jump from the corresponding cell. Next line contains n integers di (1 ≤ di ≤ 109) — the length of the jump from the i-th cell.\nOutput\n\nPrint \"INFINITE\" (without quotes) if grasshopper will continue his jumps forever. Otherwise print \"FINITE\" (without quotes).\nExamples\nInput\n\n2\n><\n1 2\n\nOutput\n\nFINITE\n\nInput\n\n3\n>><\n2 1 1\n\nOutput\n\nINFINITE\n\nNote\n\nIn the first sample grasshopper starts from the first cell and jumps to the right on the next cell. When he is in the second cell he needs to jump two cells left so he will jump out of the strip.\n\nSecond sample grasshopper path is 1 - 3 - 2 - 3 - 2 - 3 and so on. The path is infinite.\n'''\n\n__starting_point()\n", "line_length = int(input())\ndirections = input()\ndistances = [int(distance) for distance in input().split()]\nvisited_cells = set()\ncurrent_cell = 0\nwhile 0 <= current_cell < line_length:\n\tif current_cell in visited_cells:\n\t\tbreak\n\telse:\n\t\tvisited_cells.add(current_cell)\n\t\tif directions[current_cell] == '>':\n\t\t\tcurrent_cell += distances[current_cell]\n\t\telse:\n\t\t\tcurrent_cell -= distances[current_cell]\nif 0 <= current_cell < line_length:\n\tprint(\"INFINITE\")\nelse:\n\tprint(\"FINITE\")\n", "def __starting_point():\n\tn = int(input())\n\td = input()\n\tw = [int(i) for i in input().split()]\n\tvisited = set()\n\ti = 0\n\twhile (i not in visited) and (i < n) and (i > -1):\n\t\tvisited.add(i)\n\t\tif d[i] == '>':\n\t\t\ti += w[i]\n\t\telse:\n\t\t\ti -= w[i]\n\tif (i >= 0) and (i < n):\n\t\tprint('INFINITE')\n\telse:\n\t\tprint('FINITE')\n__starting_point()\n", "n, s = int(input()), input()\na = [int(i) for i in input().split()]\nc = i = 0\nwhile True:\n\tif s[i] == '>':\n\t\ti += a[i]\n\telse:\n\t\ti -= a[i]\n\tif i < 0 or i >= n:\n\t\tprint(\"FINITE\")\n\t\treturn\n\tc += 1\n\tif c > n:\n\t\tprint(\"INFINITE\")\n\t\treturn\n", "n = int(input())\ns = input()\na = list(map(int, input().split()))\nWAS = False\npos = 1\nfor i in range(0, n) :\n\tif s[pos - 1] == '<' : pos -= a[pos - 1]\n\telse : pos += a[pos - 1]\n\tif pos < 1 or pos > n : WAS = True\n\tif WAS : break\nif WAS : print(\"FINITE\")\nelse : print(\"INFINITE\")\n\n", "n = int(input())\ns = input(); a = len(s)\nj = list(map(int, input().split()))\nx = 1\nb = 'INFINITE'\ntmp = 0\nwhile tmp < n:\n\tif s[x-1] == '>':\n\t\tx += j[x-1]\n\t\tif x > n:\n\t\t\tb = 'FINITE'; break\n\telif s[x-1] == '<':\n\t\tx -= j[x-1]\n\t\tif x <= 0:\n\t\t\tb = 'FINITE'; break\n\ttmp += 1\nprint(b)\n", "def main():\n\tn = int(input())\n\tarrows = input()\n\tcells = [int(x) for x in input().split()]\n\tprint(solver(arrows, cells))\n\ndef solver(arrows, cells):\n\tfor i in range(len(arrows)):\n\t\tif arrows[i] == '<':\n\t\t\tcells[i] = - cells[i]\n\tvisited = [False] * len(cells)\n\tindex = 0\n\twhile True:\n\t\tif index >= len(cells) or index < 0:\n\t\t\treturn \"FINITE\"\n\t\telif visited[index] == True:\n\t\t\treturn \"INFINITE\"\n\t\telse:\n\t\t\tvisited[index] = True\n\t\t\tindex = index + cells[index]\n\n#print(solver(\">><\", [2, 1, 1]))\n#print(solver(\"><\", [1, 2]))\nmain()\n", "def main():\n\tn = int(input())\n\tl = [j - i if c == \"<\" else j + i for c, i, j in zip(input(), list(map(int, input().split())), list(range(n)))]\n\tv, i = [True] * n, 0\n\twhile 0 <= i < n:\n\t\tif v[i]:\n\t\t\tv[i] = False\n\t\telse:\n\t\t\tprint(\"INFINITE\")\n\t\t\treturn\n\t\ti = l[i]\n\tprint(\"FINITE\")\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n = int(input())\ns = list(1 if x == '>' else -1 for x in input())\nl = list(map(int, input().split()))\nsumm = 1\ncur = 0\nnext = 0\nfor i in range(n):\n\tif cur < 0 or cur > n - 1:\n\t\tprint('FINITE')\n\t\treturn\n\tif l[cur] == 0:\n\t\tprint('INFINITE')\n\t\treturn\n\tnext += l[cur] * s[cur]\n\tl[cur] = 0\n\tcur = next\nprint('INFINITE' if 0 <= cur < n else 'FINITE')\n", "n=int(input())\nS=input()\nl=list(map(int,input().split()))\ni=0\nc=1\nwhile i>=0 or i>=n-1 :\n\tif S[i]=='>' and i+l[i]>n-1 :\n\t\tc=1\n\t\tbreak\n\tif S[i]=='<' and i-l[i]<0 :\n\t\tc=1\n\t\tbreak\n\tif l[i]==0 :\n\t\tc=0\n\t\tbreak\n\td=l[i]\n\tl[i]=0\n\tif S[i]=='>' :\n\t\ti=i+d\n\telse :\n\t\ti=i-d\nif c==1 :\n\tprint('FINITE')\nelse :\n\tprint('INFINITE')\n", "def __starting_point():\n\tn = int(input())\n\tins = list(str(input()))\n\tabi = list(map(int, input().split()))\n\tsta = [False] * n\n\tpos = 0\n\twhile True:\n\t\tsta[pos] = True\n\t\tif ins[pos] == '>':\n\t\t\tpos += abi[pos]\n\t\telif ins[pos] == '<':\n\t\t\tpos -= abi[pos]\n\t\tif pos < 0 or pos > n - 1:\n\t\t\tprint('FINITE')\n\t\t\tbreak\n\t\telif sta[pos]:\n\t\t\tprint('INFINITE')\n\t\t\tbreak\n\n__starting_point()\n", "n = int(input())\ns = input()\nnumbers = list(map(int, input().split()))\na = 0\ncells = []\ncondition = False\nwhile True:\n\tif a < 0 or a >= n:\n\t\tprint(\"FINITE\")\n\t\tbreak\n\tif s[a] == \">\":\n\t\ta += numbers[a]\n\telse:\n\t\tcondition = True\n\t\ta -= numbers[a]\n\tif condition and a in cells:\n\t\tprint(\"INFINITE\")\n\t\tbreak\n\tcells.append(a)\n", "n=int(input())\n\na=input()  #string input\ncount=0\nflag=0\n\n\n\nb=[int(r) for r in input().split()]\n\n#b=input().split()\n\ni=int()\nfor i in range(0,n,1):\n\tif i==0:\n\t    if a[i]=='>':\n\t\tcount=count+b[i]\n\t    else:\n\t\t count=count-b[i]\n\n\telif a[count]=='>':\n\t   count+=b[count]\n\telse:\n\t   count-=b[count];\n\n\tif count>=n or count<0:\n\t   flag=1\n\t   break\n\nif flag==1:\n  print(\"FINITE\")\nelse:\n  print(\"INFINITE\")\n\n", "n,s,i=int(input()),input(),0\nd=list(map(int,input().split()))\nfor _ in range(len(s)+1):\n\tif i<0 or i>=len(s):print('FINITE');return\n\ti+=[d[i],-d[i]][s[i]=='<']\nprint('INFINITE')\n", "n,s,i=int(input()),input(),0\n\nd=list(map(int,input().split()))\n\nfor _ in range(len(s)+1):\n\n\tif i<0 or i>=len(s):print('FINITE');return\n\n\ti+=[d[i],-d[i]][s[i]=='<']\n\nprint('INFINITE')\n\n\n\n# Made By Mostafa_Khaled\n", "def main():\n\tn = int(input())\n\td = input()\n\tl = [int(c) for c in input().split()]\n\tvisited = {0}\n\ti = 0\n\twhile 0 <= i < n:\n\t\tdi, li = d[i], l[i]\n\t\ti = i + li if di == '>' else i - li\n\t\tif i in visited:\n\t\t\tprint('INFINITE')\n\t\t\treturn\n\t\tvisited.add(i)\n\n\tprint('FINITE')\n\t\t\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n=int(input())\ns=input()\nl=list(map(int,input().split()))\nL=[0 for i in range(n)]\ni=0\nwhile (True):\n\tif L[i]==-1 :\n\t\tprint(\"INFINITE\")\n\t\treturn\n\tL[i]=-1\n\tif s[i]==\">\" :\n\t\ti+=l[i]\n\telse :\n\t\ti-=l[i]\n\tif i<=-1 or i>=n :\n\t\tprint(\"FINITE\")\n\t\treturn\n\t\n\t\n\t\n"], "id": "id7250"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7250", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["little", 0], ["artem", 0], ["found", 0], ["a", 0], ["grasshopper", 0], ["he", 0], ["brought", 0], ["it", 0], ["to", 0], ["his", 0], ["house", 0], ["and", 0], ["constructed", 0], ["a", 0], ["jumping", 0], ["area", 0], ["for", 0], ["him", 0], ["the", 0], ["area", 0], ["looks", 0], ["like", 0], ["a", 0], ["strip", 0], ["of", 0], ["cells", 0], ["1", 0], ["×", 0], ["n", 0], ["each", 0], ["cell", 0], ["contains", 0], ["the", 0], ["direction", 0], ["for", 0], ["the", 0], ["next", 0], ["jump", 0], ["and", 0], ["the", 0], ["length", 0], ["of", 0], ["that", 0], ["jump", 0], ["grasshopper", 0], ["starts", 0], ["in", 0], ["the", 0], ["first", 0], ["cell", 0], ["and", 0], ["follows", 0], ["the", 0], ["instructions", 0], ["written", 0], ["on", 0], ["the", 0], ["cells", 0], ["grasshopper", 0], ["stops", 0], ["immediately", 0], ["if", 0], ["it", 0], ["jumps", 0], ["out", 0], ["of", 0], ["the", 0], ["strip", 0], ["now", 0], ["artem", 0], ["wants", 0], ["to", 0], ["find", 0], ["out", 0], ["if", 0], ["this", 0], ["will", 0], ["ever", 0], ["happen", 0], ["input", 1], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["the", 0], ["input", 1], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["100", 0], ["000", 0], ["—", 0], ["length", 0], ["of", 0], ["the", 0], ["strip", 0], ["next", 0], ["line", 0], ["contains", 0], ["a", 0], ["string", 0], ["of", 0], ["length", 0], ["n", 0], ["which", 0], ["consists", 0], ["of", 0], ["characters", 0], ["and", 0], ["only", 0], ["that", 0], ["provide", 0], ["the", 0], ["direction", 0], ["of", 0], ["the", 0], ["jump", 0], ["from", 0], ["the", 0], ["corresponding", 0], ["cell", 0], ["next", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["d", 0], ["i", 0], ["1", 0], ["≤", 0], ["d", 0], ["i", 0], ["≤", 0], ["10", 0], ["9", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["jump", 0], ["from", 0], ["the", 0], ["i", 0], ["th", 0], ["cell", 0], ["output", 0], ["print", 0], ["infinite", 0], ["without", 0], ["quotes", 0], ["if", 0], ["grasshopper", 0], ["will", 0], ["continue", 0], ["his", 0], ["jumps", 0], ["forever", 0], ["otherwise", 0], ["print", 0], ["finite", 0], ["without", 0], ["quotes", 0], ["examples", 0], ["input", 0], ["2", 0], ["1", 0], ["2", 0], ["output", 0], ["finite", 0], ["input", 0], ["3", 0], ["2", 0], ["1", 0], ["1", 0], ["output", 0], ["infinite", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["sample", 0], ["grasshopper", 0], ["starts", 0], ["from", 0], ["the", 0], ["first", 0], ["cell", 0], ["and", 0], ["jumps", 0], ["to", 0], ["the", 0], ["right", 0], ["on", 0], ["the", 0], ["next", 0], ["cell", 0], ["when", 0], ["he", 0], ["is", 0], ["in", 0], ["the", 0], ["second", 0], ["cell", 0], ["he", 0], ["needs", 0], ["to", 0], ["jump", 0], ["two", 0], ["cells", 0], ["left", 0], ["so", 0], ["he", 0], ["will", 0], ["jump", 0], ["out", 0], ["of", 0], ["the", 0], ["strip", 0], ["second", 0], ["sample", 0], ["grasshopper", 0], ["path", 0], ["is", 0], ["1", 0], ["3", 0], ["2", 0], ["3", 0], ["2", 0], ["3", 0], ["and", 0], ["so", 0], ["on", 0], ["the", 0], ["path", 0], ["is", 0], ["infinite", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.024793388429752067, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.024793388429752067, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.07480314960629922, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.07480314960629922, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.024793388429752067, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.024793388429752067, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.07480314960629922, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07480314960629922, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["1", 0], ["if", 0], ["x", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["b", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["0", 0], ["while", 0], ["true", 0], ["c", 0], ["s", 0], ["c", 0], ["d", 0], ["c", 0], ["if", 0], ["c", 0], ["n", 0], ["or", 0], ["c", 0], ["0", 0], ["print", 0], ["finite", 0], ["return", 0], ["if", 0], ["b", 0], ["c", 0], ["print", 0], ["infinite", 0], ["return", 0], ["b", 0], ["c", 0], ["true", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["mas", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["pos", 0], ["0", 0], ["ans", 0], ["infinite", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["mas", 0], ["pos", 0], ["break", 0], ["else", 0], ["mas", 0], ["pos", 0], ["true", 0], ["if", 0], ["s", 0], ["pos", 0], ["if", 0], ["pos", 0], ["l", 0], ["pos", 0], ["0", 0], ["ans", 0], ["finite", 0], ["else", 0], ["pos", 0], ["l", 0], ["pos", 0], ["else", 0], ["if", 0], ["pos", 0], ["l", 0], ["pos", 0], ["n", 0], ["ans", 0], ["finite", 0], ["else", 0], ["pos", 0], ["l", 0], ["pos", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["str", 0], ["input", 0], ["inp", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["str", 0], ["if", 0], ["str", 0], ["i", 0], ["inp", 0], ["i", 0], ["1", 0], ["visited", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cur", 0], ["0", 0], ["while", 0], ["cur", 0], ["0", 0], ["and", 0], ["cur", 0], ["n", 0], ["and", 0], ["visited", 0], ["cur", 0], ["1", 0], ["visited", 0], ["cur", 0], ["1", 0], ["cur", 0], ["inp", 0], ["cur", 0], ["if", 0], ["cur", 0], ["0", 0], ["and", 0], ["cur", 0], ["n", 0], ["print", 0], ["infinite", 0], ["else", 0], ["print", 0], ["finite", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["num", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pos", 0], ["0", 0], ["b", 0], ["true", 0], ["n", 0], ["while", 0], ["n", 0], ["pos", 0], ["0", 0], ["and", 0], ["b", 0], ["pos", 0], ["b", 0], ["pos", 0], ["false", 0], ["if", 0], ["s", 0], ["pos", 0], ["pos", 0], ["num", 0], ["pos", 0], ["else", 0], ["pos", 0], ["num", 0], ["pos", 0], ["if", 0], ["n", 0], ["pos", 0], ["0", 0], ["print", 0], ["infinite", 0], ["else", 0], ["print", 0], ["finite", 0], ["n", 0], ["int", 0], ["input", 0], ["instructions", 0], ["list", 0], ["zip", 0], ["input", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["used", 0], ["set", 0], ["pos", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["pos", 0], ["0", 0], ["or", 0], ["pos", 0], ["n", 0], ["print", 0], ["finite", 0], ["break", 0], ["if", 0], ["pos", 0], ["in", 0], ["used", 0], ["print", 0], ["infinite", 0], ["break", 0], ["used", 0], ["add", 0], ["pos", 0], ["direct", 0], ["length", 0], ["instructions", 0], ["pos", 0], ["if", 0], ["direct", 0], ["pos", 0], ["length", 0], ["else", 0], ["pos", 0], ["length", 0], ["n", 0], ["int", 0], ["input", 0], ["cells", 0], ["input", 0], ["lengths", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["visited", 0], ["set", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["not", 0], ["in", 0], ["visited", 0], ["and", 0], ["i", 0], ["n", 0], ["and", 0], ["i", 0], ["1", 0], ["visited", 0], ["add", 0], ["i", 0], ["if", 0], ["cells", 0], ["i", 0], ["i", 0], ["lengths", 0], ["i", 0], ["else", 0], ["i", 0], ["lengths", 0], ["i", 0], ["print", 0], ["new", 0], ["i", 0], ["if", 0], ["i", 0], ["n", 0], ["and", 0], ["i", 0], ["0", 0], ["print", 0], ["infinite", 0], ["else", 0], ["print", 0], ["finite", 0], ["class", 0], ["graph", 0], ["def", 0], ["init", 0], ["self", 0], ["n", 0], ["v", 0], ["self", 0], ["g", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["self", 0], ["g", 0], ["update", 0], ["i", 0], ["set", 0], ["self", 0], ["v", 0], ["v", 0], ["self", 0], ["length", 0], ["n", 0], ["def", 0], ["appendedge", 0], ["self", 0], ["a", 0], ["self", 0], ["g", 0], ["a", 0], ["0", 0], ["add", 0], ["a", 0], ["1", 0], ["if", 0], ["not", 0], ["self", 0], ["v", 0], ["self", 0], ["g", 0], ["a", 0], ["1", 0], ["add", 0], ["a", 0], ["0", 0], ["def", 0], ["showadjacent", 0], ["self", 0], ["a", 0], ["return", 0], ["self", 0], ["g", 0], ["a", 0], ["def", 0], ["showlength", 0], ["self", 0], ["return", 0], ["self", 0], ["length", 0], ["def", 0], ["show", 0], ["self", 0], ["print", 0], ["self", 0], ["g", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["f", 0], ["int", 0], ["z", 0], ["for", 0], ["z", 0], ["in", 0], ["input", 0], ["split", 0], ["g", 0], ["graph", 0], ["n", 0], ["2", 0], ["1", 0], ["vis", 0], ["0", 0], ["n", 0], ["k", 0], ["1", 0], ["i", 0], ["0", 0], ["vis", 0], ["0", 0], ["1", 0], ["while", 0], ["k", 0], ["0", 0], ["if", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["f", 0], ["i", 0], ["if", 0], ["t", 0], ["n", 0], ["print", 0], ["finite", 0], ["k", 0], ["0", 0], ["elif", 0], ["vis", 0], ["t", 0], ["print", 0], ["infinite", 0], ["k", 0], ["0", 0], ["else", 0], ["vis", 0], ["t", 0], ["1", 0], ["i", 0], ["t", 0], ["else", 0], ["t", 0], ["i", 0], ["f", 0], ["i", 0], ["if", 0], ["t", 0], ["0", 0], ["print", 0], ["finite", 0], ["k", 0], ["0", 0], ["elif", 0], ["vis", 0], ["t", 0], ["print", 0], ["infinite", 0], ["k", 0], ["0", 0], ["else", 0], ["vis", 0], ["t", 0], ["1", 0], ["i", 0], ["t", 0], ["import", 0], ["sys", 0], ["def", 0], ["dfs", 0], ["v", 0], ["used", 0], ["v", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["ed", 0], ["v", 0], ["if", 0], ["not", 0], ["used", 0], ["i", 0], ["dfs", 0], ["i", 0], ["sys", 0], ["setrecursionlimit", 0], ["1000000", 0], ["n", 0], ["int", 0], ["input", 0], ["data1", 0], ["input", 0], ["data2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["used", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["data3", 0], ["none", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["data1", 0], ["i", 0], ["data3", 0], ["i", 0], ["i", 0], ["data2", 0], ["i", 0], ["else", 0], ["data3", 0], ["i", 0], ["i", 0], ["data2", 0], ["i", 0], ["ans", 0], ["true", 0], ["index", 0], ["0", 0], ["prev", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["used", 0], ["index", 0], ["true", 0], ["prev", 0], ["index", 0], ["if", 0], ["data3", 0], ["index", 0], ["n", 0], ["or", 0], ["data3", 0], ["index", 0], ["0", 0], ["ans", 0], ["false", 0], ["break", 0], ["else", 0], ["index", 0], ["data3", 0], ["index", 0], ["if", 0], ["index", 0], ["prev", 0], ["break", 0], ["if", 0], ["ans", 0], ["print", 0], ["infinite", 0], ["else", 0], ["print", 0], ["finite", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["as", 0], ["si", 0], ["from", 0], ["math", 0], ["import", 0], ["floor", 0], ["as", 0], ["f", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dt", 0], ["from", 0], ["operator", 0], ["import", 0], ["itemgetter", 0], ["as", 0], ["ig", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["si", 0], ["readline", 0], ["d", 0], ["si", 0], ["readline", 0], ["strip", 0], ["n", 0], ["c", 0], ["tuple", 0], ["map", 0], ["int", 0], ["si", 0], ["readline", 0], ["split", 0], ["tub", 0], ["i", 0], ["exit", 0], ["set", 0], ["0", 0], ["0", 0], ["false", 0], ["while", 0], ["not", 0], ["exit", 0], ["if", 0], ["d", 0], ["i", 0], ["i", 0], ["i", 0], ["c", 0], ["i", 0], ["else", 0], ["i", 0], ["i", 0], ["c", 0], ["i", 0], ["if", 0], ["i", 0], ["0", 0], ["or", 0], ["i", 0], ["n", 0], ["print", 0], ["finite", 0], ["break", 0], ["elif", 0], ["i", 0], ["in", 0], ["tub", 0], ["print", 0], ["infinite", 0], ["break", 0], ["else", 0], ["tub", 0], ["add", 0], ["i", 0], ["a", 0], ["little", 0], ["artem", 0], ["and", 0], ["grasshopper", 0], ["time", 2], ["limit", 2], ["per", 2], ["test", 2], ["2", 2], ["seconds", 3], ["memory", 0], ["limit", 0], ["per", 0], ["test", 0], ["256", 0], ["megabytes", 0], ["input", 0], ["standard", 0], ["input", 0], ["output", 0], ["standard", 0], ["output", 0], ["little", 0], ["artem", 0], ["found", 0], ["a", 0], ["grasshopper", 0], ["he", 0], ["brought", 0], ["it", 0], ["to", 0], ["his", 0], ["house", 0], ["and", 0], ["constructed", 0], ["a", 0], ["jumping", 0], ["area", 0], ["for", 0], ["him", 0], ["the", 0], ["area", 0], ["looks", 0], ["like", 0], ["a", 0], ["strip", 0], ["of", 0], ["cells", 0], ["1", 0], ["×", 0], ["n", 0], ["each", 0], ["cell", 0], ["contains", 0], ["the", 0], ["direction", 0], ["for", 0], ["the", 0], ["next", 0], ["jump", 0], ["and", 0], ["the", 0], ["length", 0], ["of", 0], ["that", 0], ["jump", 0], ["grasshopper", 0], ["starts", 0], ["in", 0], ["the", 0], ["first", 0], ["cell", 0], ["and", 0], ["follows", 0], ["the", 0], ["instructions", 0], ["written", 0], ["on", 0], ["the", 0], ["cells", 0], ["grasshopper", 0], ["stops", 0], ["immediately", 0], ["if", 0], ["it", 0], ["jumps", 0], ["out", 0], ["of", 0], ["the", 0], ["strip", 0], ["now", 0], ["artem", 0], ["wants", 0], ["to", 0], ["find", 0], ["out", 0], ["if", 0], ["this", 0], ["will", 0], ["ever", 0], ["happen", 0], ["input", 1], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["the", 0], ["input", 1], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["100", 0], ["000", 0], ["—", 0], ["length", 0], ["of", 0], ["the", 0], ["strip", 0], ["next", 0], ["line", 0], ["contains", 0], ["a", 0], ["string", 0], ["of", 0], ["length", 0], ["n", 0], ["which", 0], ["consists", 0], ["of", 0], ["characters", 0], ["and", 0], ["only", 0], ["that", 0], ["provide", 0], ["the", 0], ["direction", 0], ["of", 0], ["the", 0], ["jump", 0], ["from", 0], ["the", 0], ["corresponding", 0], ["cell", 0], ["next", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["di", 0], ["1", 0], ["≤", 0], ["di", 0], ["≤", 0], ["109", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["jump", 0], ["from", 0], ["the", 0], ["i", 0], ["th", 0], ["cell", 0], ["output", 0], ["print", 0], ["infinite", 0], ["without", 0], ["quotes", 0], ["if", 0], ["grasshopper", 0], ["will", 0], ["continue", 0], ["his", 0], ["jumps", 0], ["forever", 0], ["otherwise", 0], ["print", 0], ["finite", 0], ["without", 0], ["quotes", 0], ["examples", 0], ["input", 0], ["2", 0], ["1", 0], ["2", 0], ["output", 0], ["finite", 0], ["input", 0], ["3", 0], ["2", 0], ["1", 0], ["1", 0], ["output", 0], ["infinite", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["sample", 0], ["grasshopper", 0], ["starts", 0], ["from", 0], ["the", 0], ["first", 0], ["cell", 0], ["and", 0], ["jumps", 0], ["to", 0], ["the", 0], ["right", 0], ["on", 0], ["the", 0], ["next", 0], ["cell", 0], ["when", 0], ["he", 0], ["is", 0], ["in", 0], ["the", 0], ["second", 0], ["cell", 0], ["he", 0], ["needs", 0], ["to", 0], ["jump", 0], ["two", 0], ["cells", 0], ["left", 0], ["so", 0], ["he", 0], ["will", 0], ["jump", 0], ["out", 0], ["of", 0], ["the", 0], ["strip", 0], ["second", 0], ["sample", 0], ["grasshopper", 0], ["path", 0], ["is", 0], ["1", 0], ["3", 0], ["2", 0], ["3", 0], ["2", 0], ["3", 0], ["and", 0], ["so", 0], ["on", 0], ["the", 0], ["path", 0], ["is", 0], ["infinite", 0], ["starting", 0], ["point", 0], ["line", 0], ["length", 0], ["int", 0], ["input", 0], ["directions", 0], ["input", 0], ["distances", 0], ["int", 0], ["distance", 0], ["for", 0], ["distance", 0], ["in", 0], ["input", 0], ["split", 0], ["visited", 0], ["cells", 0], ["set", 0], ["current", 0], ["cell", 0], ["0", 0], ["while", 0], ["0", 0], ["current", 0], ["cell", 0], ["line", 0], ["length", 0], ["if", 0], ["current", 0], ["cell", 0], ["in", 0], ["visited", 0], ["cells", 0], ["break", 0], ["else", 0], ["visited", 0], ["cells", 0], ["add", 0], ["current", 0], ["cell", 0], ["if", 0], ["directions", 0], ["current", 0], ["cell", 0], ["current", 0], ["cell", 0], ["distances", 0], ["current", 0], ["cell", 0], ["else", 0], ["current", 0], ["cell", 0], ["distances", 0], ["current", 0], ["cell", 0], ["if", 0], ["0", 0], ["current", 0], ["cell", 0], ["line", 0], ["length", 0], ["print", 0], ["infinite", 0], ["else", 0], ["print", 0], ["finite", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["input", 0], ["w", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["visited", 0], ["set", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["not", 0], ["in", 0], ["visited", 0], ["and", 0], ["i", 0], ["n", 0], ["and", 0], ["i", 0], ["1", 0], ["visited", 0], ["add", 0], ["i", 0], ["if", 0], ["d", 0], ["i", 0], ["i", 0], ["w", 0], ["i", 0], ["else", 0], ["i", 0], ["w", 0], ["i", 0], ["if", 0], ["i", 0], ["0", 0], ["and", 0], ["i", 0], ["n", 0], ["print", 0], ["infinite", 0], ["else", 0], ["print", 0], ["finite", 0], ["starting", 0], ["point", 0], ["n", 0], ["s", 0], ["int", 0], ["input", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["c", 0], ["i", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["a", 0], ["i", 0], ["else", 0], ["i", 0], ["a", 0], ["i", 0], ["if", 0], ["i", 0], ["0", 0], ["or", 0], ["i", 0], ["n", 0], ["print", 0], ["finite", 0], ["return", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["n", 0], ["print", 0], ["infinite", 0], ["return", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["was", 0], ["false", 0], ["pos", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["s", 0], ["pos", 0], ["1", 0], ["pos", 0], ["a", 0], ["pos", 0], ["1", 0], ["else", 0], ["pos", 0], ["a", 0], ["pos", 0], ["1", 0], ["if", 0], ["pos", 0], ["1", 0], ["or", 0], ["pos", 0], ["n", 0], ["was", 0], ["true", 0], ["if", 0], ["was", 0], ["break", 0], ["if", 0], ["was", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["len", 0], ["s", 0], ["j", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["1", 0], ["b", 0], ["infinite", 0], ["tmp", 0], ["0", 0], ["while", 0], ["tmp", 0], ["n", 0], ["if", 0], ["s", 0], ["x", 0], ["1", 0], ["x", 0], ["j", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["n", 0], ["b", 0], ["finite", 0], ["break", 0], ["elif", 0], ["s", 0], ["x", 0], ["1", 0], ["x", 0], ["j", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["0", 0], ["b", 0], ["finite", 0], ["break", 0], ["tmp", 0], ["1", 0], ["print", 0], ["b", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["arrows", 0], ["input", 0], ["cells", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["solver", 0], ["arrows", 0], ["cells", 0], ["def", 0], ["solver", 0], ["arrows", 0], ["cells", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["arrows", 0], ["if", 0], ["arrows", 0], ["i", 0], ["cells", 0], ["i", 0], ["cells", 0], ["i", 0], ["visited", 0], ["false", 0], ["len", 0], ["cells", 0], ["index", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["index", 0], ["len", 0], ["cells", 0], ["or", 0], ["index", 0], ["0", 0], ["return", 0], ["finite", 0], ["elif", 0], ["visited", 0], ["index", 0], ["true", 0], ["return", 0], ["infinite", 0], ["else", 0], ["visited", 0], ["index", 0], ["true", 0], ["index", 0], ["index", 0], ["cells", 0], ["index", 0], ["print", 0], ["solver", 0], ["2", 0], ["1", 0], ["1", 0], ["print", 0], ["solver", 0], ["1", 0], ["2", 0], ["main", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["j", 0], ["i", 0], ["if", 0], ["c", 0], ["else", 0], ["j", 0], ["i", 0], ["for", 0], ["c", 0], ["i", 0], ["j", 0], ["in", 0], ["zip", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["range", 0], ["n", 0], ["v", 0], ["i", 0], ["true", 0], ["n", 0], ["0", 0], ["while", 0], ["0", 0], ["i", 0], ["n", 0], ["if", 0], ["v", 0], ["i", 0], ["v", 0], ["i", 0], ["false", 0], ["else", 0], ["print", 0], ["infinite", 0], ["return", 0], ["i", 0], ["l", 0], ["i", 0], ["print", 0], ["finite", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["1", 0], ["if", 0], ["x", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["summ", 0], ["1", 0], ["cur", 0], ["0", 0], ["next", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["cur", 0], ["0", 0], ["or", 0], ["cur", 0], ["n", 0], ["1", 0], ["print", 0], ["finite", 0], ["return", 0], ["if", 0], ["l", 0], ["cur", 0], ["0", 0], ["print", 0], ["infinite", 0], ["return", 0], ["next", 0], ["l", 0], ["cur", 0], ["s", 0], ["cur", 0], ["l", 0], ["cur", 0], ["0", 0], ["cur", 0], ["next", 0], ["print", 0], ["infinite", 0], ["if", 0], ["0", 0], ["cur", 0], ["n", 0], ["else", 0], ["finite", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["0", 0], ["c", 0], ["1", 0], ["while", 0], ["i", 0], ["0", 0], ["or", 0], ["i", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["and", 0], ["i", 0], ["l", 0], ["i", 0], ["n", 0], ["1", 0], ["c", 0], ["1", 0], ["break", 0], ["if", 0], ["s", 0], ["i", 0], ["and", 0], ["i", 0], ["l", 0], ["i", 0], ["0", 0], ["c", 0], ["1", 0], ["break", 0], ["if", 0], ["l", 0], ["i", 0], ["0", 0], ["c", 0], ["0", 0], ["break", 0], ["d", 0], ["l", 0], ["i", 0], ["l", 0], ["i", 0], ["0", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["i", 0], ["d", 0], ["else", 0], ["i", 0], ["i", 0], ["d", 0], ["if", 0], ["c", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["ins", 0], ["list", 0], ["str", 0], ["input", 0], ["abi", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sta", 0], ["false", 0], ["n", 0], ["pos", 0], ["0", 0], ["while", 0], ["true", 0], ["sta", 0], ["pos", 0], ["true", 0], ["if", 0], ["ins", 0], ["pos", 0], ["pos", 0], ["abi", 0], ["pos", 0], ["elif", 0], ["ins", 0], ["pos", 0], ["pos", 0], ["abi", 0], ["pos", 0], ["if", 0], ["pos", 0], ["0", 0], ["or", 0], ["pos", 0], ["n", 0], ["1", 0], ["print", 0], ["finite", 0], ["break", 0], ["elif", 0], ["sta", 0], ["pos", 0], ["print", 0], ["infinite", 0], ["break", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["numbers", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["cells", 0], ["condition", 0], ["false", 0], ["while", 0], ["true", 0], ["if", 0], ["a", 0], ["0", 0], ["or", 0], ["a", 0], ["n", 0], ["print", 0], ["finite", 0], ["break", 0], ["if", 0], ["s", 0], ["a", 0], ["a", 0], ["numbers", 0], ["a", 0], ["else", 0], ["condition", 0], ["true", 0], ["a", 0], ["numbers", 0], ["a", 0], ["if", 0], ["condition", 0], ["and", 0], ["a", 0], ["in", 0], ["cells", 0], ["print", 0], ["infinite", 0], ["break", 0], ["cells", 0], ["append", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["string", 0], ["input", 0], ["count", 0], ["0", 0], ["flag", 0], ["0", 0], ["b", 0], ["int", 0], ["r", 0], ["for", 0], ["r", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["input", 0], ["split", 0], ["i", 0], ["int", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["if", 0], ["a", 0], ["i", 0], ["count", 0], ["count", 0], ["b", 0], ["i", 0], ["else", 0], ["count", 0], ["count", 0], ["b", 0], ["i", 0], ["elif", 0], ["a", 0], ["count", 0], ["count", 0], ["b", 0], ["count", 0], ["else", 0], ["count", 0], ["b", 0], ["count", 0], ["if", 0], ["count", 0], ["n", 0], ["or", 0], ["count", 0], ["0", 0], ["flag", 0], ["1", 0], ["break", 0], ["if", 0], ["flag", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["n", 0], ["s", 0], ["i", 0], ["int", 0], ["input", 0], ["input", 0], ["0", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["or", 0], ["i", 0], ["len", 0], ["s", 0], ["print", 0], ["finite", 0], ["return", 0], ["i", 0], ["d", 0], ["i", 0], ["d", 0], ["i", 0], ["s", 0], ["i", 0], ["print", 0], ["infinite", 0], ["n", 0], ["s", 0], ["i", 0], ["int", 0], ["input", 0], ["input", 0], ["0", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["or", 0], ["i", 0], ["len", 0], ["s", 0], ["print", 0], ["finite", 0], ["return", 0], ["i", 0], ["d", 0], ["i", 0], ["d", 0], ["i", 0], ["s", 0], ["i", 0], ["print", 0], ["infinite", 0], ["made", 0], ["by", 0], ["mostafa", 0], ["khaled", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["input", 0], ["l", 0], ["int", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["input", 0], ["split", 0], ["visited", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["0", 0], ["i", 0], ["n", 0], ["di", 0], ["li", 0], ["d", 0], ["i", 0], ["l", 0], ["i", 0], ["i", 0], ["i", 0], ["li", 0], ["if", 0], ["di", 0], ["else", 0], ["i", 0], ["li", 0], ["if", 0], ["i", 0], ["in", 0], ["visited", 0], ["print", 0], ["infinite", 0], ["return", 0], ["visited", 0], ["add", 0], ["i", 0], ["print", 0], ["finite", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["i", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["l", 0], ["i", 0], ["1", 0], ["print", 0], ["infinite", 0], ["return", 0], ["l", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["l", 0], ["i", 0], ["else", 0], ["i", 0], ["l", 0], ["i", 0], ["if", 0], ["i", 0], ["1", 0], ["or", 0], ["i", 0], ["n", 0], ["print", 0], ["finite", 0], ["return", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0065040650406504065, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.004787714543812105, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.01992460958535272, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.015078082929456112, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0065040650406504065, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.004787714543812105, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.01992460958535272, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.015078082929456112, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nA word or a sentence in some language is called a pangram if all the characters of the alphabet of this language appear in it at least once. Pangrams are often used to demonstrate fonts in printing or test the output devices.\n\nYou are given a string consisting of lowercase and uppercase Latin letters. Check whether this string is a pangram. We say that the string contains a letter of the Latin alphabet if this letter occurs in the string in uppercase or lowercase.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of characters in the string.\n\nThe second line contains the string. The string consists only of uppercase and lowercase Latin letters.\n\n\n-----Output-----\n\nOutput \"YES\", if the string is a pangram and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n12\ntoosmallword\n\nOutput\nNO\n\nInput\n35\nTheQuickBrownFoxJumpsOverTheLazyDog\n\nOutput\nYES\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\ns = input()\na = [False for i in range(26)]\nfor x in s:\n\ta[ord(x.lower()) - ord('a')] = True\nfor x in a:\n\tif not x:\n\t\tprint('NO')\n\t\treturn\nprint('YES')\n", "n = int(input())\ns = input()\n\nmySet = set()\nfor c in s:\n\tmySet.add(c.lower())\n\t\nif len(mySet) == 26:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "import string\nf = lambda: input()\nn = int(f())\n\ns = f().lower()\n\nret = True\n\nfor c in string.ascii_lowercase:\n\tif not c in s:\n\t\tret = False\n\t\tbreak\n\nif ret:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n = int(input())\nmy_str = input().upper()\nalphabet = \"QWERTYUIOPASDFGHJKLZXCVBNM\"\ni = 0\nwhile i<26 and alphabet[i] in my_str:\n\ti += 1\nif i==26:\n\tprint (\"YES\")\nelse:\n\tprint (\"NO\")\n", "alth = \"abcdefghijklmnopqrstuvwxyz\"\nalth2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nn = int(input())\nt = input()\nnum3 = [0]*26\nfor i in t:\n\tif alth.find(i)!= -1:\n\t\tnum3[alth.find(i)] = 1\n\telif alth2.find(i)!= -1:\n\t\tnum3[alth2.find(i)] = 1 \nif sum(num3) == 26:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "\n\nnums = int(input())\nthe_str = str(input()).lower()\nd = set()\n\nfor ch in the_str:\n\tif ch >= 'a' and ch <= 'z':\n\t\td.add(ch)\n\nif(len(d) == 26):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "input()\ns = input()\ns = s.lower()\nall = set()\nfor i in s:\n\tall.add(i)\nif len(all) == 26:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "class A:\n\tdef A(self, n, s):\n\t\talphabets = ['A', 'B', 'C', 'D', 'E', 'F', 'G',\n\t\t\t\t\t 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n\t\t\t\t\t 'U', 'V', 'W', 'X', 'Y', 'Z']\n\t\ts = s.upper()\n\t\tfor i in  alphabets:\n\t\t\tif i not in s:\n\t\t\t\treturn \"NO\"\n\t\treturn \"YES\"\n\ndef __starting_point():\n\tn = int(input())\n\ts = input()\n\tprint(A().A(n,s))\n__starting_point()\n", "rng = int(input())\ninstr = list(input().lower())\n\nchars = []\nfor i in range(26):\n\tchars.append(0)\n\nfor char in range(rng):\n\tchars[ord(instr[char])-97] += 1\n\nisyes = True\nfor i in range(26):\n\tif chars[i] == 0:\n\t\tprint('NO')\n\t\tisyes = False\n\t\tbreak\n\nif isyes:\n\tprint('YES')\n", "n = int(input())\na = input()\nk = 1\na = a.lower()\nfor i in range(97,123):\n\tif a.count(chr(i)) == 0:\n\t\tk=0\n\t\tbreak\nif k:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "def Main():\n\tnum = input()\n\tstr = list(input().lower())\n\tstr.sort()\n\tstr = \"\".join(str)\n\t\n\tfor word in range (97, 123):\n\t\tsymb = chr(word)\n\t\tif str.find(symb) == -1:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\n\tprint (\"YES\")\n\treturn\n\n\t\ndef __starting_point():\n\tMain()\n__starting_point()\n", "A = [0] * 26\nn = int(input())\ns = list(input().lower())\nfor i in s:\n\tA[ord(i) - ord('a')] += 1\nres = 'YES'\nfor i in A:\n\tif i == 0:\n\t\tres = 'NO'    \nprint(res)\n", "n=int(input());\ns=input()\n\na=[ord(c) for c in s]\n\nfor i in range (0,n):\n\tif a[i]>96:\n\t\ta[i]=a[i]-32\n\t\t\ncounter=0;\nfor i in range (65,91):\n\t\n\tfor j in range (0,n):\n\t\tif a[j]== i:\n\t\t\tcounter=counter+1\n\t\t\tbreak\n\t\t\nif counter==26:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "import string\n\nn = int(input())\ns = input()\ncnt = set()\nfor i in s.lower(): cnt.add(i)\ncnt = frozenset(cnt)\nprint(('NO', 'YES')[cnt == frozenset(string.ascii_lowercase)])\n", "def ok(x):\n\tx = x.lower()\n\tfor i in 'abcdefghijklmnopqrstuvwxyz':\n\t\tif i.lower() not in x:\n\t\t\treturn False\n\treturn True\n\na = int(input())\nb = input()\nif ok(b):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "import sys\nl=int(sys.stdin.readline())\nn=list(sys.stdin.readline())\na=[0]*26\nfor i in n[:-1]:\n\tj=ord(i)\n\tif j >91:  j=j-32\n\tj=j-65\n\ta[j]=1\n\tif sum(a)==26:\n\t\tprint(\"YES\")\n\t\tbreak\nif sum(a)!=26:  print(\"NO\")\n", "input()\ns = input()\n\nall_el = set()\n\nfor i in range(len(s)):\n\tall_el.add(s[i].lower())\n\n\n\nif(26 == len(all_el)):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "input()\nprint('YES' if len(set(list(input().lower())))==26 else 'NO')\n", "n = int(input())\nstr = input().lower()\nx = [0] * 50\nfor i in range(n) :\n\tx[ord(str[i]) - ord('a')] = 1\ncou = 0\nfor i in range(26) :\n\tcou += x[i]\nif cou >= 26:\n\tprint('YES')\nelse :\n\tprint('NO')\n", "n = int(input())\ns = input()\nss = len(set(s.lower()))\nif ss >= 26:\n\tprint('YES')\nelse :\n\tprint('NO')\n", "import string\ninput()\np = input()\nprint([\"NO\", \"YES\"][all(l in p.lower() for l in string.ascii_lowercase)])\n"], "id": "id8566"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8566", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 0], ["word", 0], ["or", 0], ["a", 0], ["sentence", 0], ["in", 0], ["some", 0], ["language", 0], ["is", 0], ["called", 0], ["a", 0], ["pangram", 0], ["if", 0], ["all", 0], ["the", 0], ["characters", 0], ["of", 0], ["the", 0], ["alphabet", 0], ["of", 0], ["this", 0], ["language", 0], ["appear", 0], ["in", 0], ["it", 0], ["at", 0], ["least", 0], ["once", 0], ["pangrams", 0], ["are", 0], ["often", 0], ["used", 0], ["to", 0], ["demonstrate", 0], ["fonts", 0], ["in", 0], ["printing", 0], ["or", 0], ["test", 0], ["the", 0], ["output", 0], ["devices", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["string", 0], ["consisting", 0], ["of", 0], ["lowercase", 0], ["and", 0], ["uppercase", 0], ["latin", 0], ["letters", 0], ["check", 0], ["whether", 0], ["this", 0], ["string", 0], ["is", 0], ["a", 0], ["pangram", 0], ["we", 0], ["say", 0], ["that", 0], ["the", 0], ["string", 0], ["contains", 0], ["a", 0], ["letter", 0], ["of", 0], ["the", 0], ["latin", 0], ["alphabet", 0], ["if", 0], ["this", 0], ["letter", 0], ["occurs", 0], ["in", 0], ["the", 0], ["string", 0], ["in", 0], ["uppercase", 0], ["or", 0], ["lowercase", 0], ["input", 3], ["the", 1], ["first", 0], ["line", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["100", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["characters", 0], ["in", 0], ["the", 0], ["string", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["the", 0], ["string", 0], ["the", 0], ["string", 0], ["consists", 0], ["only", 0], ["of", 0], ["uppercase", 0], ["and", 0], ["lowercase", 0], ["latin", 0], ["letters", 0], ["output", 0], ["output", 0], ["yes", 0], ["if", 0], ["the", 0], ["string", 0], ["is", 0], ["a", 0], ["pangram", 0], ["and", 0], ["no", 0], ["otherwise", 0], ["examples", 0], ["input", 0], ["12", 0], ["toosmallword", 0], ["output", 0], ["no", 0], ["input", 0], ["35", 0], ["thequickbrownfoxjumpsoverthelazydog", 0], ["output", 0], ["yes", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.013888888888888888, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.009259259259259259, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.08974358974358974, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08547008547008546, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.013888888888888888, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.009259259259259259, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.08974358974358974, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08547008547008546, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["for", 0], ["x", 0], ["in", 0], ["s", 0], ["a", 0], ["ord", 0], ["x", 0], ["lower", 0], ["ord", 0], ["a", 0], ["true", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["if", 0], ["not", 0], ["x", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["myset", 0], ["set", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["myset", 0], ["add", 0], ["c", 0], ["lower", 0], ["if", 0], ["len", 0], ["myset", 0], ["26", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["string", 0], ["f", 0], ["lambda", 0], ["input", 0], ["n", 0], ["int", 0], ["f", 0], ["s", 0], ["f", 0], ["lower", 0], ["ret", 0], ["true", 0], ["for", 0], ["c", 0], ["in", 0], ["string", 0], ["ascii", 0], ["lowercase", 0], ["if", 0], ["not", 0], ["c", 0], ["in", 0], ["s", 0], ["ret", 0], ["false", 0], ["break", 0], ["if", 0], ["ret", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["my", 0], ["str", 0], ["input", 0], ["upper", 0], ["alphabet", 0], ["qwertyuiopasdfghjklzxcvbnm", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["26", 0], ["and", 0], ["alphabet", 0], ["i", 0], ["in", 0], ["my", 0], ["str", 0], ["i", 0], ["1", 0], ["if", 0], ["i", 0], ["26", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["alth", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["alth2", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["input", 0], ["num3", 0], ["0", 0], ["26", 0], ["for", 0], ["i", 0], ["in", 0], ["t", 0], ["if", 0], ["alth", 0], ["find", 0], ["i", 0], ["1", 0], ["num3", 0], ["alth", 0], ["find", 0], ["i", 0], ["1", 0], ["elif", 0], ["alth2", 0], ["find", 0], ["i", 0], ["1", 0], ["num3", 0], ["alth2", 0], ["find", 0], ["i", 0], ["1", 0], ["if", 0], ["sum", 0], ["num3", 0], ["26", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["nums", 0], ["int", 0], ["input", 0], ["the", 0], ["str", 0], ["str", 0], ["input", 0], ["lower", 0], ["d", 0], ["set", 0], ["for", 0], ["ch", 0], ["in", 0], ["the", 0], ["str", 0], ["if", 0], ["ch", 0], ["a", 0], ["and", 0], ["ch", 0], ["z", 0], ["d", 0], ["add", 0], ["ch", 0], ["if", 0], ["len", 0], ["d", 0], ["26", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["input", 0], ["s", 0], ["input", 0], ["s", 0], ["s", 0], ["lower", 0], ["all", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["all", 0], ["add", 0], ["i", 0], ["if", 0], ["len", 0], ["all", 0], ["26", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["class", 0], ["a", 0], ["def", 0], ["a", 0], ["self", 0], ["n", 0], ["s", 0], ["alphabets", 3], ["a", 1321], ["b", 1278], ["c", 1251], ["d", 1187], ["e", 1118], ["f", 1113], ["g", 1169], ["h", 1151], ["i", 1131], ["j", 1122], ["k", 1110], ["l", 1081], ["m", 1072], ["n", 1053], ["o", 4], ["p", 0], ["q", 0], ["r", 0], ["s", 0], ["t", 0], ["u", 0], ["v", 0], ["w", 0], ["x", 0], ["y", 0], ["z", 0], ["s", 0], ["s", 0], ["upper", 0], ["for", 0], ["i", 0], ["in", 0], ["alphabets", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["s", 0], ["return", 0], ["no", 0], ["return", 0], ["yes", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["print", 0], ["a", 0], ["a", 0], ["n", 0], ["s", 0], ["starting", 0], ["point", 0], ["rng", 0], ["int", 0], ["input", 0], ["instr", 0], ["list", 0], ["input", 0], ["lower", 0], ["chars", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["chars", 0], ["append", 0], ["0", 0], ["for", 0], ["char", 0], ["in", 0], ["range", 0], ["rng", 0], ["chars", 0], ["ord", 0], ["instr", 0], ["char", 0], ["97", 0], ["1", 0], ["isyes", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["if", 0], ["chars", 0], ["i", 0], ["0", 0], ["print", 0], ["no", 0], ["isyes", 0], ["false", 0], ["break", 0], ["if", 0], ["isyes", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["k", 0], ["1", 0], ["a", 0], ["a", 0], ["lower", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["97", 0], ["123", 0], ["if", 0], ["a", 0], ["count", 0], ["chr", 0], ["i", 0], ["0", 0], ["k", 0], ["0", 0], ["break", 0], ["if", 0], ["k", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["main", 0], ["num", 0], ["input", 0], ["str", 0], ["list", 0], ["input", 0], ["lower", 0], ["str", 0], ["sort", 0], ["str", 0], ["join", 0], ["str", 0], ["for", 0], ["word", 0], ["in", 0], ["range", 0], ["97", 0], ["123", 0], ["symb", 0], ["chr", 0], ["word", 0], ["if", 0], ["str", 0], ["find", 0], ["symb", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["a", 0], ["0", 0], ["26", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["input", 0], ["lower", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["a", 0], ["ord", 0], ["i", 0], ["ord", 0], ["a", 0], ["1", 0], ["res", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["0", 0], ["res", 0], ["no", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["ord", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["96", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["32", 0], ["counter", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["65", 0], ["91", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["i", 0], ["counter", 0], ["counter", 0], ["1", 0], ["break", 0], ["if", 0], ["counter", 0], ["26", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["string", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["cnt", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["lower", 0], ["cnt", 0], ["add", 0], ["i", 0], ["cnt", 0], ["frozenset", 0], ["cnt", 0], ["print", 0], ["no", 0], ["yes", 0], ["cnt", 0], ["frozenset", 0], ["string", 0], ["ascii", 0], ["lowercase", 0], ["def", 0], ["ok", 0], ["x", 0], ["x", 0], ["x", 0], ["lower", 0], ["for", 0], ["i", 0], ["in", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["if", 0], ["i", 0], ["lower", 0], ["not", 0], ["in", 0], ["x", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["input", 0], ["if", 0], ["ok", 0], ["b", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["l", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["list", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["a", 0], ["0", 0], ["26", 0], ["for", 0], ["i", 0], ["in", 0], ["n", 0], ["1", 0], ["j", 0], ["ord", 0], ["i", 0], ["if", 0], ["j", 0], ["91", 0], ["j", 0], ["j", 0], ["32", 0], ["j", 0], ["j", 0], ["65", 0], ["a", 0], ["j", 0], ["1", 0], ["if", 0], ["sum", 0], ["a", 0], ["26", 0], ["print", 0], ["yes", 0], ["break", 0], ["if", 0], ["sum", 0], ["a", 0], ["26", 0], ["print", 0], ["no", 0], ["input", 0], ["s", 0], ["input", 0], ["all", 0], ["el", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["all", 0], ["el", 0], ["add", 0], ["s", 0], ["i", 0], ["lower", 0], ["if", 0], ["26", 0], ["len", 0], ["all", 0], ["el", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["set", 0], ["list", 0], ["input", 0], ["lower", 0], ["26", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["str", 0], ["input", 0], ["lower", 0], ["x", 0], ["0", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["ord", 0], ["str", 0], ["i", 0], ["ord", 0], ["a", 0], ["1", 0], ["cou", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["cou", 0], ["x", 0], ["i", 0], ["if", 0], ["cou", 0], ["26", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ss", 0], ["len", 0], ["set", 0], ["s", 0], ["lower", 0], ["if", 0], ["ss", 0], ["26", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["string", 0], ["input", 0], ["p", 0], ["input", 0], ["print", 0], ["no", 0], ["yes", 0], ["all", 0], ["l", 0], ["in", 0], ["p", 0], ["lower", 0], ["for", 0], ["l", 0], ["in", 0], ["string", 0], ["ascii", 0], ["lowercase", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.02247191011235955, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0008363984691421724, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.03867403314917127, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.012891344383057089, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0028089887640449437, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0008192883895131086, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.03867403314917127, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.012891344383057089, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nInna is a great piano player and Dima is a modest guitar player. Dima has recently written a song and they want to play it together. Of course, Sereja wants to listen to the song very much. \n\nA song is a sequence of notes. Dima and Inna want to play each note at the same time. At that, they can play the i-th note at volume v (1 ≤ v ≤ a_{i}; v is an integer) both on the piano and the guitar. They should retain harmony, so the total volume with which the i-th note was played on the guitar and the piano must equal b_{i}. If Dima and Inna cannot play a note by the described rules, they skip it and Sereja's joy drops by 1. But if Inna and Dima play the i-th note at volumes x_{i} and y_{i} (x_{i} + y_{i} = b_{i}) correspondingly, Sereja's joy rises by x_{i}·y_{i}. \n\nSereja has just returned home from the university and his current joy is 0. Help Dima and Inna play the song so as to maximize Sereja's total joy after listening to the whole song!\n\n\n-----Input-----\n\nThe first line of the input contains integer n (1 ≤ n ≤ 10^5) — the number of notes in the song. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 10^6). The third line contains n integers b_{i} (1 ≤ b_{i} ≤ 10^6).\n\n\n-----Output-----\n\nIn a single line print an integer — the maximum possible joy Sereja feels after he listens to a song.\n\n\n-----Examples-----\nInput\n3\n1 1 2\n2 2 3\n\nOutput\n4\n\nInput\n1\n2\n5\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample, Dima and Inna play the first two notes at volume 1 (1 + 1 = 2, the condition holds), they should play the last note at volumes 1 and 2. Sereja's total joy equals: 1·1 + 1·1 + 1·2 = 4.\n\nIn the second sample, there is no such pair (x, y), that 1 ≤ x, y ≤ 2, x + y = 5, so Dima and Inna skip a note. Sereja's total joy equals -1.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, a, b = input(), map(int, input().split()), map(int, input().split())\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n\tif 2 * a[i] < b[i]:\n\t\ts -= 1\n\telse:\n\t\tx = b[i] // 2\n\t\ty = b[i] - x\n\t\tif x * y != 0:\n\t\t\ts += x * y\n\t\telse:\n\t\t\ts -= 1\nprint(s)\n\n# 10\n# 1 2 3 4 5 6 7 8 9 10\n# 1 2 3 4 5 6 7 8 9 10\n", "R = lambda:list(map(int, input().split()))\nn, = R()\na = R()\nb = R()\ns = 0\nfor i in range(n):\n\tif 2 * a[i] < b[i] or b[i] == 1:\n\t\ts -= 1\n\telse:\n\t\tx = b[i] // 2\n\t\ty = b[i] - x\n\t\ts += x * y\nprint(s)\n", "n = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n\tif 2 * a[i] >= b[i] and b[i] > 1:\n\t\tx = b[i] // 2\n\t\tans += (x * (b[i] - x))\n\telse:\n\t\tans -= 1\nprint(ans)\n", "n = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nsum = 0\nfor i in range(n):\n\tif b[i] == 1 or a[i] + a[i] < b[i]:\n\t\tsum = sum - 1\n\telse:\n\t\tsum = sum + (b[i] // 2) * (b[i] - b[i] // 2)\nprint(sum)\n", "from math import *\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nres = 0\nfor i in range(n):\n\tif 2 * a[i] < b[i] or b[i] == 1:\n\t\tres -= 1\n\telse: res += b[i] // 2 * (b[i] - (b[i] // 2))\nprint(res)\n", "n, a, b = input(), map(int, input().split()), map(int, input().split())\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n,j=int(input()),0\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nfor i in range(n):\n\tif b[i]>a[i]*2 or b[i]==1:j-=1\n\telse: j+=(b[i]//2)*(b[i]-b[i]//2)\nprint(j)\n#WA Test:3,4,5,Hoping for 6\n", "n = int(input())\na,b = list(map(int,input().split())), list(map(int,input().split()))\nr = 0\nfor i in range(n):\n\tif 2*a[i] >= b[i] and b[i]>1:\n\t\tx = b[i]//2\n\t\ty = b[i]-x\n\t\tr += x*y\n\telse:\n\t\tr -= 1\nprint(r)\n", "n = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nhappiness = 0\nfor i in range(n):\n\tif (b[i] + 1) // 2 <= a[i] and b[i] > 1:\n\t\thappiness += (b[i] // 2) * ((b[i] + 1) // 2)\n\telse:\n\t\thappiness -= 1\nprint(happiness)\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n,j=int(input()),0\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nfor i in range(n):\n\tif b[i]>a[i]*2 or b[i]==1:j-=1\n\telse: j+=(b[i]//2)*(b[i]-b[i]//2)\nprint(j)\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\n\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n\n\n\n# Made By Mostafa_Khaled\n", "import math\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=int(0)\nfor i in range(n):\n\tif b[i]== 1:\n\t\tc-=1\n\telif a[i]*2 < b[i]:\n\t\tc-=1\n\telse:\n\t\tif b[i]%2 == 0:\n\t\t\tc+=int((b[i]/2)**2)\n\t\telse:\n\t\t\tc+=int((int(math.ceil(b[i]/2)))*(int(math.floor(b[i]/2))))\nprint(c)\n", "import math\nn = int(input())\naList = list(map(int,input().split()))\nbList = list(map(int,input().split()))\njoy = 0\nfor i in range(n):\n\tif bList[i] == 1:\n\t\tjoy = joy - 1\n\telse:\n\t\tif bList[i] % 2 == 0:\n\t\t\tb1 = bList[i] / 2\n\t\t\tb2 = bList[i] / 2\n\t\telse:\n\t\t\tb1 = math.floor(bList[i] / 2)\n\t\t\tb2 = math.ceil(bList[i] / 2)\n\t\tif b2 <= aList[i]:\n\t\t\tjoy = joy + b1 * b2\n\t\telse:\n\t\t\tjoy = joy - 1\nprint(int(joy))\n", "def great_sum_finder(num, rang):\n\tif abs(num - rang) > rang or num == 1:\n\t\treturn -1\n\tif rang == 1:\n\t\treturn 1\n\tif num < rang:\n\t\treturn great_sum_finder(num, num - 1)\n\treturn (num // 2) * (num - num // 2)\n\n\nn = int(input())\na = input().split()\nb = input().split()\na = list(map(int, a))\nb = list(map(int, b))\njoy = 0\nfor i in range(n):\n\tjoy += great_sum_finder(b[i], a[i])\nprint(joy)\n", "import math\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=int(0)\nfor i in range(n):\n\tif b[i]== 1:\n\t\tc-=1\n\telif a[i]*2 < b[i]:\n\t\tc-=1\n\telse:\n\t\tif b[i]%2 == 0:\n\t\t\tc+=int((b[i]/2)**2)\n\t\telse:\n\t\t\tc+=int((int(math.ceil(b[i]/2)))*(int(math.floor(b[i]/2))))\nprint(c)\n", "import math\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nres, v1, v2 = 0, 0, 0\nfor i in range(n):\n\tif b[i]>1 and b[i]<=2*a[i]:\n\t\tv1 = math.ceil(b[i]/2)\n\t\tv2 = b[i]-v1\n\t\tres += v1*v2\n\telse:\n\t\tres -= 1\nprint(res)\n"], "id": "id8288"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8288", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["inna", 0], ["is", 0], ["a", 0], ["great", 0], ["piano", 0], ["player", 0], ["and", 0], ["dima", 0], ["is", 0], ["a", 0], ["modest", 0], ["guitar", 0], ["player", 0], ["dima", 0], ["has", 0], ["recently", 0], ["written", 0], ["a", 0], ["song", 0], ["and", 0], ["they", 0], ["want", 0], ["to", 0], ["play", 0], ["it", 0], ["together", 0], ["of", 0], ["course", 0], ["sereja", 0], ["wants", 0], ["to", 0], ["listen", 0], ["to", 0], ["the", 0], ["song", 0], ["very", 0], ["much", 0], ["a", 0], ["song", 0], ["is", 0], ["a", 0], ["sequence", 0], ["of", 0], ["notes", 0], ["dima", 0], ["and", 0], ["inna", 0], ["want", 0], ["to", 0], ["play", 0], ["each", 0], ["note", 0], ["at", 0], ["the", 0], ["same", 0], ["time", 0], ["at", 0], ["that", 0], ["they", 0], ["can", 0], ["play", 0], ["the", 0], ["i", 0], ["th", 0], ["note", 0], ["at", 0], ["volume", 0], ["v", 0], ["1", 0], ["≤", 0], ["v", 0], ["≤", 0], ["a", 0], ["i", 0], ["v", 0], ["is", 0], ["an", 0], ["integer", 0], ["both", 0], ["on", 0], ["the", 0], ["piano", 0], ["and", 0], ["the", 0], ["guitar", 0], ["they", 0], ["should", 0], ["retain", 0], ["harmony", 0], ["so", 0], ["the", 0], ["total", 0], ["volume", 0], ["with", 0], ["which", 0], ["the", 0], ["i", 0], ["th", 0], ["note", 0], ["was", 0], ["played", 0], ["on", 0], ["the", 0], ["guitar", 0], ["and", 0], ["the", 0], ["piano", 0], ["must", 0], ["equal", 0], ["b", 0], ["i", 0], ["if", 0], ["dima", 0], ["and", 0], ["inna", 0], ["cannot", 0], ["play", 0], ["a", 0], ["note", 0], ["by", 0], ["the", 0], ["described", 0], ["rules", 0], ["they", 0], ["skip", 0], ["it", 0], ["and", 0], ["sereja", 0], ["s", 0], ["joy", 0], ["drops", 0], ["by", 0], ["1", 0], ["but", 0], ["if", 0], ["inna", 0], ["and", 0], ["dima", 0], ["play", 0], ["the", 0], ["i", 0], ["th", 0], ["note", 0], ["at", 0], ["volumes", 0], ["x", 0], ["i", 0], ["and", 0], ["y", 0], ["i", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["b", 0], ["i", 0], ["correspondingly", 0], ["sereja", 0], ["s", 0], ["joy", 0], ["rises", 0], ["by", 0], ["x", 0], ["i", 0], ["·y", 0], ["i", 0], ["sereja", 0], ["has", 0], ["just", 0], ["returned", 0], ["home", 0], ["from", 0], ["the", 0], ["university", 0], ["and", 0], ["his", 0], ["current", 0], ["joy", 0], ["is", 0], ["0", 0], ["help", 0], ["dima", 0], ["and", 0], ["inna", 0], ["play", 0], ["the", 0], ["song", 0], ["so", 0], ["as", 0], ["to", 0], ["maximize", 0], ["sereja", 0], ["s", 0], ["total", 0], ["joy", 0], ["after", 0], ["listening", 0], ["to", 0], ["the", 0], ["whole", 0], ["song", 0], ["input", 2], ["the", 2], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["notes", 0], ["in", 0], ["the", 0], ["song", 0], ["the", 1], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["a", 0], ["i", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["10", 0], ["6", 0], ["the", 0], ["third", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["b", 0], ["i", 0], ["1", 0], ["≤", 0], ["b", 0], ["i", 0], ["≤", 0], ["10", 0], ["6", 0], ["output", 0], ["in", 0], ["a", 0], ["single", 0], ["line", 0], ["print", 0], ["an", 0], ["integer", 0], ["—", 0], ["the", 0], ["maximum", 0], ["possible", 0], ["joy", 0], ["sereja", 0], ["feels", 0], ["after", 0], ["he", 0], ["listens", 0], ["to", 0], ["a", 0], ["song", 0], ["examples", 0], ["input", 0], ["3", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["2", 0], ["3", 0], ["output", 0], ["4", 0], ["input", 0], ["1", 0], ["2", 0], ["5", 0], ["output", 0], ["1", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["sample", 0], ["dima", 0], ["and", 0], ["inna", 0], ["play", 0], ["the", 0], ["first", 0], ["two", 0], ["notes", 0], ["at", 0], ["volume", 0], ["1", 0], ["1", 0], ["1", 0], ["2", 0], ["the", 0], ["condition", 0], ["holds", 0], ["they", 0], ["should", 0], ["play", 0], ["the", 0], ["last", 0], ["note", 0], ["at", 0], ["volumes", 0], ["1", 0], ["and", 0], ["2", 0], ["sereja", 0], ["s", 0], ["total", 0], ["joy", 0], ["equals", 0], ["1·1", 0], ["1·1", 0], ["1·2", 0], ["4", 0], ["in", 0], ["the", 0], ["second", 0], ["sample", 0], ["there", 0], ["is", 0], ["no", 0], ["such", 0], ["pair", 0], ["x", 0], ["y", 0], ["that", 0], ["1", 0], ["≤", 0], ["x", 0], ["y", 0], ["≤", 0], ["2", 0], ["x", 0], ["y", 0], ["5", 0], ["so", 0], ["dima", 0], ["and", 0], ["inna", 0], ["skip", 0], ["a", 0], ["note", 0], ["sereja", 0], ["s", 0], ["total", 0], ["joy", 0], ["equals", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.008152173913043478, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.005434782608695652, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.07105263157894737, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.05263157894736842, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.008152173913043478, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.005434782608695652, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.07105263157894737, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.05263157894736842, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["a", 0], ["b", 0], ["input", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["2", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["s", 0], ["1", 0], ["else", 0], ["x", 0], ["b", 0], ["i", 0], ["2", 0], ["y", 0], ["b", 0], ["i", 0], ["x", 0], ["if", 0], ["x", 0], ["y", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["else", 0], ["s", 0], ["1", 0], ["print", 0], ["s", 0], ["10", 36], ["1", 109], ["2", 109], ["3", 108], ["4", 108], ["5", 106], ["6", 106], ["7", 105], ["8", 98], ["9", 0], ["10", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["8", 0], ["9", 0], ["10", 0], ["r", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["r", 0], ["a", 0], ["r", 0], ["b", 0], ["r", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["2", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["or", 0], ["b", 0], ["i", 0], ["1", 0], ["s", 0], ["1", 0], ["else", 0], ["x", 0], ["b", 0], ["i", 0], ["2", 0], ["y", 0], ["b", 0], ["i", 0], ["x", 0], ["s", 0], ["x", 0], ["y", 0], ["print", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["2", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["and", 0], ["b", 0], ["i", 0], ["1", 0], ["x", 0], ["b", 0], ["i", 0], ["2", 0], ["ans", 0], ["x", 0], ["b", 0], ["i", 0], ["x", 0], ["else", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["or", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["sum", 0], ["sum", 0], ["1", 0], ["else", 0], ["sum", 0], ["sum", 0], ["b", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["sum", 0], ["from", 0], ["math", 0], ["import", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["2", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["or", 0], ["b", 0], ["i", 0], ["1", 0], ["res", 0], ["1", 0], ["else", 0], ["res", 0], ["b", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["res", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["j", 0], ["int", 0], ["input", 0], ["0", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["2", 0], ["or", 0], ["b", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["else", 0], ["j", 0], ["b", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["j", 0], ["wa", 0], ["test", 0], ["3", 0], ["4", 0], ["5", 0], ["hoping", 0], ["for", 0], ["6", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["2", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["and", 0], ["b", 0], ["i", 0], ["1", 0], ["x", 0], ["b", 0], ["i", 0], ["2", 0], ["y", 0], ["b", 0], ["i", 0], ["x", 0], ["r", 0], ["x", 0], ["y", 0], ["else", 0], ["r", 0], ["1", 0], ["print", 0], ["r", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["happiness", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["2", 0], ["a", 0], ["i", 0], ["and", 0], ["b", 0], ["i", 0], ["1", 0], ["happiness", 0], ["b", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["1", 0], ["2", 0], ["else", 0], ["happiness", 0], ["1", 0], ["print", 0], ["happiness", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["j", 0], ["int", 0], ["input", 0], ["0", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["2", 0], ["or", 0], ["b", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["else", 0], ["j", 0], ["b", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["j", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["made", 0], ["by", 0], ["mostafa", 0], ["khaled", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["int", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["c", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["c", 0], ["1", 0], ["else", 0], ["if", 0], ["b", 0], ["i", 0], ["2", 0], ["0", 0], ["c", 0], ["int", 0], ["b", 0], ["i", 0], ["2", 0], ["2", 0], ["else", 0], ["c", 0], ["int", 0], ["int", 0], ["math", 0], ["ceil", 0], ["b", 0], ["i", 0], ["2", 0], ["int", 0], ["math", 0], ["floor", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["c", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["alist", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["blist", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["joy", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["blist", 0], ["i", 0], ["1", 0], ["joy", 0], ["joy", 0], ["1", 0], ["else", 0], ["if", 0], ["blist", 0], ["i", 0], ["2", 0], ["0", 0], ["b1", 0], ["blist", 0], ["i", 0], ["2", 0], ["b2", 0], ["blist", 0], ["i", 0], ["2", 0], ["else", 0], ["b1", 0], ["math", 0], ["floor", 0], ["blist", 0], ["i", 0], ["2", 0], ["b2", 0], ["math", 0], ["ceil", 0], ["blist", 0], ["i", 0], ["2", 0], ["if", 0], ["b2", 0], ["alist", 0], ["i", 0], ["joy", 0], ["joy", 0], ["b1", 0], ["b2", 0], ["else", 0], ["joy", 0], ["joy", 0], ["1", 0], ["print", 0], ["int", 0], ["joy", 0], ["def", 0], ["great", 0], ["sum", 0], ["finder", 0], ["num", 0], ["rang", 0], ["if", 0], ["abs", 0], ["num", 0], ["rang", 0], ["rang", 0], ["or", 0], ["num", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["rang", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["num", 0], ["rang", 0], ["return", 0], ["great", 0], ["sum", 0], ["finder", 0], ["num", 0], ["num", 0], ["1", 0], ["return", 0], ["num", 0], ["2", 0], ["num", 0], ["num", 0], ["2", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["split", 0], ["b", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["b", 0], ["joy", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["joy", 0], ["great", 0], ["sum", 0], ["finder", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["print", 0], ["joy", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["int", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["c", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["c", 0], ["1", 0], ["else", 0], ["if", 0], ["b", 0], ["i", 0], ["2", 0], ["0", 0], ["c", 0], ["int", 0], ["b", 0], ["i", 0], ["2", 0], ["2", 0], ["else", 0], ["c", 0], ["int", 0], ["int", 0], ["math", 0], ["ceil", 0], ["b", 0], ["i", 0], ["2", 0], ["int", 0], ["math", 0], ["floor", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["c", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["v1", 0], ["v2", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["and", 0], ["b", 0], ["i", 0], ["2", 0], ["a", 0], ["i", 0], ["v1", 0], ["math", 0], ["ceil", 0], ["b", 0], ["i", 0], ["2", 0], ["v2", 0], ["b", 0], ["i", 0], ["v1", 0], ["res", 0], ["v1", 0], ["v2", 0], ["else", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.007537688442211055, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 8.646627791815056e-05, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.017412935323383085, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0004836926478717525, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nEvery summer Vitya comes to visit his grandmother in the countryside. This summer, he got a huge wart. Every grandma knows that one should treat warts when the moon goes down. Thus, Vitya has to catch the moment when the moon is down.\n\nMoon cycle lasts 30 days. The size of the visible part of the moon (in Vitya's units) for each day is 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, and then cycle repeats, thus after the second 1 again goes 0.\n\nAs there is no internet in the countryside, Vitya has been watching the moon for n consecutive days and for each of these days he wrote down the size of the visible part of the moon. Help him find out whether the moon will be up or down next day, or this cannot be determined by the data he has.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 92) — the number of consecutive days Vitya was watching the size of the visible part of the moon. \n\nThe second line contains n integers a_{i} (0 ≤ a_{i} ≤ 15) — Vitya's records.\n\nIt's guaranteed that the input data is consistent.\n\n\n-----Output-----\n\nIf Vitya can be sure that the size of visible part of the moon on day n + 1 will be less than the size of the visible part on day n, then print \"DOWN\" at the only line of the output. If he might be sure that the size of the visible part will increase, then print \"UP\". If it's impossible to determine what exactly will happen with the moon, print -1.\n\n\n-----Examples-----\nInput\n5\n3 4 5 6 7\n\nOutput\nUP\n\nInput\n7\n12 13 14 15 14 13 12\n\nOutput\nDOWN\n\nInput\n1\n8\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample, the size of the moon on the next day will be equal to 8, thus the answer is \"UP\".\n\nIn the second sample, the size of the moon on the next day will be 11, thus the answer is \"DOWN\".\n\nIn the third sample, there is no way to determine whether the size of the moon on the next day will be 7 or 9, thus the answer is -1.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["# You lost the game.\n\nn = int(input())\nL = list(map(int, input().split()))\n\nif n == 1:\n\tif L[0] == 0:\n\t\tprint(\"UP\")\n\telif L[0] == 15:\n\t\tprint(\"DOWN\")\n\telse:\n\t\tprint(\"-1\")\nelse:\n\td = L[n-2] - L[n-1]\n\tif d < 0:\n\t\tif L[n-1] == 15:\n\t\t\tprint(\"DOWN\")\n\t\telse:\n\t\t\tprint(\"UP\")\n\telse:\n\t\tif L[n-1] == 0:\n\t\t\tprint(\"UP\")\n\t\telse:\n\t\t\tprint(\"DOWN\")\n", "n = int(input())\nline = list(map(int, input().split()))\nif n == 1 and line[0] != 0 and line[0] != 15:\n\tprint(-1)\nelif n == 1 and line[0] == 0:\n\tprint(\"UP\")\nelif n == 1:\n\tprint(\"DOWN\")\nelse:\n\tif line[-1] > line[-2] and line[-1] == 15:\n\t\tprint(\"DOWN\")\n\telif line[-1] > line[-2]:\n\t\tprint(\"UP\")\n\telif line[-1] == 0:\n\t\tprint(\"UP\")\n\telse:\n\t\tprint(\"DOWN\")\n", "n = int(input())\nk = list(map(int, input().split()))\n\nUP = \"UP\"\nDOWN = \"DOWN\"\n\nif k[-1] == 15:\n\tprint(DOWN)\nelif k[-1] == 0:\n\tprint(UP)\nelif n == 1:\n\tprint(-1)\nelse:\n\tif k[-2] > k[-1]:\n\t\tprint(DOWN)\n\telse:\n\t\tprint(UP)\n", "import sys, math\nn = int(input())\nz = list(map(int, input().split()))\nif n == 1:\n\tif z[0] == 0:\n\t\tprint('UP')\n\t\treturn\n\tif z[0] == 15:\n\t\tprint('DOWN')\n\t\treturn\n\tprint(-1)\n\treturn\nif z[-1] == 0:\n\tprint('UP')\n\treturn\nif z[-1] == 15:\n\tprint('DOWN')\n\treturn\nz.append(z[-1] + z[-1] - z[-2])\nif z[-1] > z[-2]:\n\tprint('UP')\nelse:\n\tprint('DOWN')\n", "n = int(input())\na = list(map(int, input().split()))\nif (a[-1] == 15):\n\tprint(\"DOWN\")\n\treturn\nelif a[-1] == 0:\n\tprint(\"UP\")\n\treturn\nif (len(a) == 1):\n\tprint(-1)\nelse:\n\tif (a[-1] < a[-2]):\n\t\tprint(\"DOWN\")\n\telse:\n\t\tprint(\"UP\")\n", "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\nn = int(input())\nprr = [int(x) for x in input().split()]\nif(n==1):\n\ta = prr[0]\n\tif(a==0):\n\t\tprint('UP')\n\telif(a==15):\n\t\tprint('DOWN')\n\telse:\n\t\tprint(-1)\nelse:\n\ta,b = prr[n-2],prr[n-1]\n\tc = b-a\n\tif(c==1):\n\t\tif(b!=15):\n\t\t\tprint('UP')\n\t\telse:\n\t\t\tprint('DOWN')\n\telse:\n\t\tif(b!=0):\n\t\t\tprint('DOWN')\n\t\telse:\n\t\t\tprint('UP')\n", "n = int(input())\ndata = list(map(int, input().split()))\nif data[-1] == 0:\n\tprint(\"UP\")\nelif data[-1] == 15:\n\tprint(\"DOWN\")\nelse:  \n\tif n == 1:\n\t\tprint(-1)\n\telif data[-1] - data[-2] > 0:\n\t\tprint(\"UP\")\n\telse:  \n\t\tprint(\"DOWN\")\n", "n = int(input())\nA = list(map(int, input().split()))\nif n == 1:\n\tif A[0] == 15:\n\t\tprint('DOWN')\n\telif A[0] == 0:\n\t\tprint('UP')\n\telse:\n\t\tprint(-1)\nelse:\n\tper = A[-1]\n\tper2 = A[-2]\n\tif per == 15:\n\t\tprint('DOWN')\n\telif per == 0:\n\t\tprint('UP')\n\telse:\n\t\tif per > per2:\n\t\t\tprint('UP')\n\t\telse:\n\t\t\tprint('DOWN')\n", "n=int(input())\nl=list(map(int,input().split()))\nif n==1:\n\tif l[0]==0: print(\"UP\")\n\telif l[0]==15: print(\"DOWN\")\n\telse: print(-1)\nelif (l[-1]==0 or l[-2]<l[-1]) and l[-1]!=15: print(\"UP\")\nelse: print(\"DOWN\")\n", "n = int(input())\n\nai = [int(x) for x in input().split(' ')]\n\nif ai[-1] == 0:\n\tprint('UP')\n\treturn\nelif ai[-1] == 15:\n\tprint('DOWN')\n\treturn\n\nif n == 1 and ai[0] not in [0, 15]:\n\tprint(-1)\n\treturn\n\nk = ai[-2:]\n\nif k[0] - k[1] > 0:\n\tprint('DOWN')\nelse:\n\tprint('UP')\n", "n = int(input().strip())\narr = [int(x) for x in input().strip().split(' ')]\nif n == 1:\n\tif arr[0] == 0:\n\t\tprint('UP')\n\telif arr[0] == 15:\n\t\tprint('DOWN')\n\telse:\n\t\tprint(-1)\nelse:\n\tif arr[n-1] == 0:\n\t\tprint('UP')\n\telif arr[n-1] == 15:\n\t\tprint('DOWN')\n\telse:\n\t\tprint('UP' if arr[n-1] > arr[n-2] else 'DOWN')\n\n", "n = int(input().strip())\na = list(map(int, input().split()))\nif a[-1] == 15:\n\tprint('DOWN')\nelif a[-1] == 0:\n\tprint('UP')\nelse:\n\tif n == 1:\n\t\tprint(-1)\n\telse:\n\t\tif a[-2] < a[-1]:\n\t\t\tprint('UP')\n\t\telse:\n\t\t\tprint('DOWN')\n", "#!/usr/bin/env python3\n\nfrom sys import stdin\n\n\ndef main():\n\tn, = stdin_get_ints_from_line()\n\tx = stdin_get_ints_list_from_line()\n\n\tif x[-1] == 15:\n\t\tprint('DOWN')\n\t\treturn\n\n\tif x[-1] == 0:\n\t\tprint('UP')\n\t\treturn\n\n\tif n == 1:\n\t\tprint('-1')\n\t\treturn\n\n\tif x[-1] > x[-2]:\n\t\tprint('UP')\n\n\tif x[-1] < x[-2]:\n\t\tprint('DOWN')\n\n\n\ndef stdin_get_ints_from_line():\n\treturn (int(x) for x in stdin.readline().strip().split(' '))\n\n\ndef stdin_get_ints_list_from_line():\n\treturn list(int(x) for x in stdin.readline().strip().split(' '))\n\n\ndef stdin_get_string_from_line():\n\treturn stdin.readline().strip()\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n=int(input())\nd=input().split()\nd=[int(x) for x in d]\nif n==1 and int (d[0])!=15 and int (d[0])!=0:\n\tprint(-1)\nelif n==1 and int(d[0])==0:\n\tprint(\"UP\")\nelif n==1 and int(d[0])==15:\n\tprint(\"DOWN\")\nelse:\n\tif (d[-1]>d[-2] and d[-1]!=15 )or d[-1]==0:\n\t\tprint(\"UP\")\n\telif ( d[-1]<d[-2] and d[-1]!=0) or d[-1]==15:\n\t\tprint(\"DOWN\")\n", "from sys import stdin as fin\n# fin = open(\"cfr373a.in\")\n\nn = int(fin.readline())\n# n, m = map(int, fin.readline.split())\nnums = tuple(map(int, fin.readline().split()))\n\nans = {15: \"DOWN\", 0: \"UP\"}\nif nums[-1] in ans:\n\tprint(ans[nums[-1]])\nelif len(nums) == 1:\n\tprint(-1)\nelse:\n\tprint(\"DOWN\" if nums[-1] < nums[-2] else \"UP\")\n", "n = int(input())\na = [int(_) for _ in input().split()]\nif a[-1] == 15:\n\tprint('DOWN')\nelif a[-1] == 0:\n\tprint('UP')\nelif n == 1:\n\tprint(-1)\nelif a[-1] > a[-2]:\n\tprint('UP')\nelse:\n\tprint('DOWN')\n", "'''\ndef main():\n\tfrom sys import stdin,stdout\ndef __starting_point():\n\tmain()\n'''\n#372\n#1\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,c=map(int,stdin.readline().split())\n\ttup=tuple(map(int,stdin.readline().split()))\n\tcounter=1\n\tfor i in range(1,n):\n\t\tif tup[i]-tup[i-1]<=c:\n\t\t\tcounter+=1\n\t\telse:\n\t\t\tcounter=1\n\tstdout.write(str(counter))\ndef __starting_point():\n\tmain()\n'''\n#2\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\ts=stdin.readline().strip().lower()\n\tdic={}\n\tqcounter=0\n\tfor i in 'qwertyuiopasdfghjklzxcvbnm':\n\t\tdic[i]=0\n\tif len(s)<26:\n\t\tstdout.write('-1')\n\telse:\n\t\tfor i in s:\n\t\t\tif i=='?':\n\t\t\t\tqcounter+=1\n\t\t\telse:\n\t\t\t\tdic[i]+=1\n\t\tl=[]\n\t\tx=list(dic.values()).count(0)\n\t\tif qcounter==26 and x==26:\n\t\t\tstdout.write('qwertyuiopasdfghjklzxcvbnm'.upper())\n\t\telif x==0 and qcounter==0:\n\t\t\tstdout.write(s.upper())\n\t\telif qcounter>=x:\n\t\t\tfor i in 'qwertyuiopasdfghjklzxcvbnm':\n\t\t\t\tif dic[i]==0:\n\t\t\t\t\tl.append(i.upper())\n\t\t\tm=len(l)\n\t\t\ti=0\n\t\t\tt=''\n\t\t\tfor j in range(len(s)):\n\t\t\t\tif s[j]=='?':\n\t\t\t\t\tif i>=m:\n\t\t\t\t\t\ti=0\n\t\t\t\t\tt=t[:j]+l[i]\n\t\t\t\t\ti+=1\n\t\t\t\telse:\n\t\t\t\t\tt+=s[j].upper()\n\t\t\tstdout.write(t)\n\t\telse:\n\t\t\tstdout.write('-1')\ndef __starting_point():\n\tmain()\n'''\n#373\n#1\ndef main():\n\tfrom sys import stdin,stdout\n\tn=int(stdin.readline())\n\ttup=tuple(map(int,stdin.readline().split()))\n\tif n==1:\n\t\tif tup[0]==0:\n\t\t\tstdout.write('UP')\n\t\telif tup[0]==15:\n\t\t\tstdout.write('DOWN')\n\t\telse:\n\t\t\tstdout.write('-1')\n\telse:\n\t\tif tup[-1]-tup[-2]>0:\n\t\t\tif tup[-1]==15:\n\t\t\t\tstdout.write('DOWN')\n\t\t\telse:\n\t\t\t\tstdout.write('UP')\n\t\telse:\n\t\t\tif tup[-1]==0:\n\t\t\t\tstdout.write('UP')\n\t\t\telse:\n\t\t\t\tstdout.write('DOWN')\ndef __starting_point():\n\tmain()\n\n\n__starting_point()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nn=int(input())\ndays=list(map(int,input().split()))\n\nif days[-1] == 0:\n\tprint(\"UP\")\nelif days[-1] == 15:\n\tprint(\"DOWN\")\nelif n == 1:\n\tprint(\"-1\")\nelse:\n\tif days[-1] - days[-2] > 0:\n\t\tprint(\"UP\")\n\telse:\n\t\tprint(\"DOWN\")\n\n", "n=int(input())\na = list(map(int,input().split()))\nif n>1:\n\tif a[n-1]>a[n-2]:\n\t\tif a[n-1]==15:\n\t\t\tprint('DOWN')\n\t\telse:\n\t\t\tprint('UP')\n\telse:\n\t\tif a[n-1]==15:\n\t\t\tprint('DOWN')\n\t\telse:\n\t\t\t\tif a[n-1]==0:\n\t\t\t\t\tprint('UP')\n\t\t\t\telse:\n\t\t\t\t\tprint('DOWN')\nelse:\n\tif a[0]==15:\n\t\tprint('DOWN')\n\telse:\n\t\tif a[0]==0:\n\t\t\tprint('UP')\n\t\telse:\n\t\t\tprint(-1)\n", "n = int(input())\na = list(map(int, input().split()))\nif a[-1] == 0:\n\tprint(\"UP\")\nelif a[-1] == 15:\n\tprint(\"DOWN\")\nelif n == 1:\n\tprint(-1)\nelse:\n\tif a[-1] > a[-2]:\n\t\tprint(\"UP\")\n\telse:\n\t\tprint(\"DOWN\")\n", "def ans(n, seq):\n\tif n == 1:\n\t\tif seq[0] == 0:\n\t\t\treturn 'UP'\n\t\telif seq[0] == 15:\n\t\t\treturn 'DOWN'\n\t\telse:\n\t\t\treturn -1\n\telif seq[-1] == 15:\n\t\treturn 'DOWN'\n\telif seq[-1] == 0:\n\t\treturn 'UP'\n\telif seq[-1] > seq[-2] and seq[-1] != 15:\n\t\treturn 'UP'\n\telif seq[-1] < seq[-2] and seq[-1] != 0:\n\t\treturn 'DOWN'\n\nn = int(input())\nseq = list(map(int, input().split()))\nprint(ans(n,seq))\n", "n = int(input())\na = list(map(int, input().split()))\n\nif n == 1 and a[0] != 0 and a[0] != 15:\n\tprint(-1)\nelif a[-1] == 0:\n\tprint(\"UP\")\nelif a[-1] == 15:\n\tprint(\"DOWN\")\nelif a[-2] < a[-1]:\n\tprint(\"UP\")  \nelif a[-2] > a[-1]:\n\tprint(\"DOWN\")\n", "def main():\n\tn = int(input())\n\n\ta = [int(s) for s in input().split()]\n\n\tif a[-1] == 15:\n\t\tprint(\"DOWN\")\n\t\treturn\n\tif a[-1] == 0:\n\t\tprint(\"UP\")\n\t\treturn\n\tif n == 1:\n\t\tprint(-1)\n\t\treturn\n\tif a[-2] < a[-1]:\n\t\tprint(\"UP\")\n\t\treturn\n\telse:\n\t\tprint(\"DOWN\")\n\t\treturn\n\nmain()\n", "def main():\n\tn = int(input())\n\tdays = list(map(int, input().split()))\n\tif n == 1:\n\t\tif days[0] == 15:\n\t\t\tprint(\"DOWN\")\n\t\telif days[0] == 0:\n\t\t\tprint(\"UP\")\n\t\telse:\n\t\t\tprint(-1)\n\t\treturn\n\tmoves = [1, -1]\n\tnow = 0\n\tlast = days[0]\n\tif days[1] < days[0]:\n\t\tnow = (now + 1) % 2\n\tfor i in range(1, n):\n\t\tlast += moves[now]\n\t\tif last == 0 or last == 15:\n\t\t\tnow = (now + 1) % 2\n\tif now == 1:\n\t\tprint(\"DOWN\")\n\telse:\n\t\tprint(\"UP\")\nmain()\n", "n = int(input())\na = list(map(int, input().split()))\n\nif n <= 1:\n\tif n and a[0] in (0, 15):\n\t\tprint('UP' if a[0] == 0 else 'DOWN')\n\t\treturn\n\tprint('-1')\n\treturn\n\nif a[-1] - a[-2] >= 1:\n\tif a[-1] < 15:\n\t\tprint('UP')\n\telse:\n\t\tprint('DOWN')\nelse:\n\tif a[-1] <= 0:\n\t\tprint('UP')\n\telse:\n\t\tprint('DOWN')\n\n"], "id": "id5241"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5241", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["every", 0], ["summer", 0], ["vitya", 0], ["comes", 0], ["to", 0], ["visit", 0], ["his", 0], ["grandmother", 0], ["in", 0], ["the", 0], ["countryside", 0], ["this", 0], ["summer", 0], ["he", 0], ["got", 0], ["a", 0], ["huge", 0], ["wart", 0], ["every", 0], ["grandma", 0], ["knows", 0], ["that", 0], ["one", 0], ["should", 0], ["treat", 0], ["warts", 0], ["when", 0], ["the", 0], ["moon", 0], ["goes", 0], ["down", 0], ["thus", 0], ["vitya", 0], ["has", 0], ["to", 0], ["catch", 0], ["the", 0], ["moment", 0], ["when", 0], ["the", 0], ["moon", 0], ["is", 0], ["down", 0], ["moon", 0], ["cycle", 0], ["lasts", 0], ["30", 0], ["days", 0], ["the", 0], ["size", 0], ["of", 0], ["the", 0], ["visible", 0], ["part", 0], ["of", 0], ["the", 0], ["moon", 0], ["in", 0], ["vitya", 0], ["s", 0], ["units", 0], ["for", 0], ["each", 0], ["day", 0], ["is", 2], ["0", 585], ["1", 18270], ["2", 17614], ["3", 16832], ["4", 2], ["5", 2], ["6", 2], ["7", 2], ["8", 2], ["9", 2], ["10", 1], ["11", 1], ["12", 1], ["13", 1], ["14", 0], ["15", 218], ["14", 226], ["13", 224], ["12", 0], ["11", 0], ["10", 0], ["9", 0], ["8", 0], ["7", 0], ["6", 0], ["5", 0], ["4", 0], ["3", 0], ["2", 0], ["1", 0], ["and", 0], ["then", 0], ["cycle", 0], ["repeats", 0], ["thus", 0], ["after", 0], ["the", 0], ["second", 0], ["1", 0], ["again", 0], ["goes", 0], ["0", 0], ["as", 0], ["there", 0], ["is", 0], ["no", 0], ["internet", 0], ["in", 0], ["the", 0], ["countryside", 0], ["vitya", 0], ["has", 0], ["been", 0], ["watching", 0], ["the", 0], ["moon", 0], ["for", 0], ["n", 0], ["consecutive", 0], ["days", 0], ["and", 0], ["for", 0], ["each", 0], ["of", 0], ["these", 0], ["days", 0], ["he", 0], ["wrote", 0], ["down", 0], ["the", 0], ["size", 0], ["of", 0], ["the", 0], ["visible", 0], ["part", 0], ["of", 0], ["the", 0], ["moon", 0], ["help", 0], ["him", 0], ["find", 0], ["out", 0], ["whether", 0], ["the", 0], ["moon", 0], ["will", 0], ["be", 0], ["up", 0], ["or", 0], ["down", 0], ["next", 0], ["day", 0], ["or", 0], ["this", 0], ["cannot", 0], ["be", 0], ["determined", 0], ["by", 0], ["the", 0], ["data", 0], ["he", 0], ["has", 0], ["input", 1], ["the", 1], ["first", 1], ["line", 1], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["92", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["consecutive", 0], ["days", 0], ["vitya", 0], ["was", 0], ["watching", 0], ["the", 0], ["size", 0], ["of", 0], ["the", 0], ["visible", 0], ["part", 0], ["of", 0], ["the", 0], ["moon", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["a", 0], ["i", 0], ["0", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["15", 0], ["—", 0], ["vitya", 0], ["s", 0], ["records", 0], ["it", 0], ["s", 0], ["guaranteed", 0], ["that", 0], ["the", 0], ["input", 0], ["data", 0], ["is", 0], ["consistent", 0], ["output", 0], ["if", 0], ["vitya", 0], ["can", 0], ["be", 0], ["sure", 0], ["that", 0], ["the", 0], ["size", 0], ["of", 0], ["visible", 0], ["part", 0], ["of", 0], ["the", 0], ["moon", 0], ["on", 0], ["day", 0], ["n", 0], ["1", 0], ["will", 0], ["be", 0], ["less", 0], ["than", 0], ["the", 0], ["size", 0], ["of", 0], ["the", 0], ["visible", 0], ["part", 0], ["on", 0], ["day", 0], ["n", 0], ["then", 0], ["print", 0], ["down", 0], ["at", 0], ["the", 0], ["only", 0], ["line", 0], ["of", 0], ["the", 0], ["output", 0], ["if", 0], ["he", 0], ["might", 0], ["be", 0], ["sure", 0], ["that", 0], ["the", 0], ["size", 0], ["of", 0], ["the", 0], ["visible", 0], ["part", 0], ["will", 0], ["increase", 0], ["then", 0], ["print", 0], ["up", 0], ["if", 0], ["it", 0], ["s", 0], ["impossible", 0], ["to", 0], ["determine", 0], ["what", 0], ["exactly", 0], ["will", 0], ["happen", 0], ["with", 0], ["the", 0], ["moon", 0], ["print", 0], ["1", 0], ["examples", 0], ["input", 0], ["5", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["output", 0], ["up", 0], ["input", 0], ["7", 0], ["12", 0], ["13", 0], ["14", 0], ["15", 0], ["14", 0], ["13", 0], ["12", 0], ["output", 0], ["down", 0], ["input", 0], ["1", 0], ["8", 0], ["output", 0], ["1", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["sample", 0], ["the", 0], ["size", 0], ["of", 0], ["the", 0], ["moon", 0], ["on", 0], ["the", 0], ["next", 0], ["day", 0], ["will", 0], ["be", 0], ["equal", 0], ["to", 0], ["8", 0], ["thus", 0], ["the", 0], ["answer", 0], ["is", 0], ["up", 0], ["in", 0], ["the", 0], ["second", 0], ["sample", 0], ["the", 0], ["size", 0], ["of", 0], ["the", 0], ["moon", 0], ["on", 0], ["the", 0], ["next", 0], ["day", 0], ["will", 0], ["be", 0], ["11", 0], ["thus", 0], ["the", 0], ["answer", 0], ["is", 0], ["down", 0], ["in", 0], ["the", 0], ["third", 0], ["sample", 0], ["there", 0], ["is", 0], ["no", 0], ["way", 0], ["to", 0], ["determine", 0], ["whether", 0], ["the", 0], ["size", 0], ["of", 0], ["the", 0], ["moon", 0], ["on", 0], ["the", 0], ["next", 0], ["day", 0], ["will", 0], ["be", 0], ["7", 0], ["or", 0], ["9", 0], ["thus", 0], ["the", 0], ["answer", 0], ["is", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.05459057071960298, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.02857408570807294, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.11325301204819277, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.03722084367245657, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.028535980148883373, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.11325301204819277, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["you", 0], ["lost", 0], ["the", 0], ["game", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["l", 0], ["0", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["l", 0], ["0", 0], ["15", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["1", 0], ["else", 0], ["d", 0], ["l", 0], ["n", 0], ["2", 0], ["l", 0], ["n", 0], ["1", 0], ["if", 0], ["d", 0], ["0", 0], ["if", 0], ["l", 0], ["n", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["up", 0], ["else", 0], ["if", 0], ["l", 0], ["n", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["n", 0], ["int", 0], ["input", 0], ["line", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["and", 0], ["line", 0], ["0", 0], ["0", 0], ["and", 0], ["line", 0], ["0", 0], ["15", 0], ["print", 0], ["1", 0], ["elif", 0], ["n", 0], ["1", 0], ["and", 0], ["line", 0], ["0", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["n", 0], ["1", 0], ["print", 0], ["down", 0], ["else", 0], ["if", 0], ["line", 0], ["1", 0], ["line", 0], ["2", 0], ["and", 0], ["line", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["elif", 0], ["line", 0], ["1", 0], ["line", 0], ["2", 0], ["print", 0], ["up", 0], ["elif", 0], ["line", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["n", 0], ["int", 0], ["input", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["up", 0], ["up", 0], ["down", 0], ["down", 0], ["if", 0], ["k", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["elif", 0], ["k", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["k", 0], ["2", 0], ["k", 0], ["1", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["up", 0], ["import", 0], ["sys", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["z", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["z", 0], ["0", 0], ["0", 0], ["print", 0], ["up", 0], ["return", 0], ["if", 0], ["z", 0], ["0", 0], ["15", 0], ["print", 0], ["down", 0], ["return", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["z", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["return", 0], ["if", 0], ["z", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["return", 0], ["z", 0], ["append", 0], ["z", 0], ["1", 0], ["z", 0], ["1", 0], ["z", 0], ["2", 0], ["if", 0], ["z", 0], ["1", 0], ["z", 0], ["2", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["return", 0], ["elif", 0], ["a", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["return", 0], ["if", 0], ["len", 0], ["a", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["up", 0], ["arr", 0], ["0", 585], ["1", 18270], ["2", 17614], ["3", 16832], ["4", 2], ["5", 2], ["6", 2], ["7", 2], ["8", 2], ["9", 2], ["10", 1], ["11", 1], ["12", 1], ["13", 1], ["14", 0], ["15", 218], ["14", 226], ["13", 224], ["12", 0], ["11", 0], ["10", 0], ["9", 0], ["8", 0], ["7", 0], ["6", 0], ["5", 0], ["4", 0], ["3", 0], ["2", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["prr", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["a", 0], ["prr", 0], ["0", 0], ["if", 0], ["a", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["a", 0], ["15", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["1", 0], ["else", 0], ["a", 0], ["b", 0], ["prr", 0], ["n", 0], ["2", 0], ["prr", 0], ["n", 0], ["1", 0], ["c", 0], ["b", 0], ["a", 0], ["if", 0], ["c", 0], ["1", 0], ["if", 0], ["b", 0], ["15", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["else", 0], ["if", 0], ["b", 0], ["0", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["up", 0], ["n", 0], ["int", 0], ["input", 0], ["data", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["data", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["data", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["else", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["elif", 0], ["data", 0], ["1", 0], ["data", 0], ["2", 0], ["0", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["15", 0], ["print", 0], ["down", 0], ["elif", 0], ["a", 0], ["0", 0], ["0", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["1", 0], ["else", 0], ["per", 0], ["a", 0], ["1", 0], ["per2", 0], ["a", 0], ["2", 0], ["if", 0], ["per", 0], ["15", 0], ["print", 0], ["down", 0], ["elif", 0], ["per", 0], ["0", 0], ["print", 0], ["up", 0], ["else", 0], ["if", 0], ["per", 0], ["per2", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["l", 0], ["0", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["l", 0], ["0", 0], ["15", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["1", 0], ["elif", 0], ["l", 0], ["1", 0], ["0", 0], ["or", 0], ["l", 0], ["2", 0], ["l", 0], ["1", 0], ["and", 0], ["l", 0], ["1", 0], ["15", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["n", 0], ["int", 0], ["input", 0], ["ai", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["ai", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["return", 0], ["elif", 0], ["ai", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["return", 0], ["if", 0], ["n", 0], ["1", 0], ["and", 0], ["ai", 0], ["0", 0], ["not", 0], ["in", 0], ["0", 0], ["15", 0], ["print", 0], ["1", 0], ["return", 0], ["k", 0], ["ai", 0], ["2", 0], ["if", 0], ["k", 0], ["0", 0], ["k", 0], ["1", 0], ["0", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["up", 0], ["n", 0], ["int", 0], ["input", 0], ["strip", 0], ["arr", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["arr", 0], ["0", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["arr", 0], ["0", 0], ["15", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["arr", 0], ["n", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["arr", 0], ["n", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["up", 0], ["if", 0], ["arr", 0], ["n", 0], ["1", 0], ["arr", 0], ["n", 0], ["2", 0], ["else", 0], ["down", 0], ["n", 0], ["int", 0], ["input", 0], ["strip", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["elif", 0], ["a", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["else", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["def", 0], ["main", 0], ["n", 0], ["stdin", 0], ["get", 0], ["ints", 0], ["from", 0], ["line", 0], ["x", 0], ["stdin", 0], ["get", 0], ["ints", 0], ["list", 0], ["from", 0], ["line", 0], ["if", 0], ["x", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["return", 0], ["if", 0], ["x", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["return", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["print", 0], ["up", 0], ["if", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["print", 0], ["down", 0], ["def", 0], ["stdin", 0], ["get", 0], ["ints", 0], ["from", 0], ["line", 0], ["return", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["def", 0], ["stdin", 0], ["get", 0], ["ints", 0], ["list", 0], ["from", 0], ["line", 0], ["return", 0], ["list", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["def", 0], ["stdin", 0], ["get", 0], ["string", 0], ["from", 0], ["line", 0], ["return", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["input", 0], ["split", 0], ["d", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["d", 0], ["if", 0], ["n", 0], ["1", 0], ["and", 0], ["int", 0], ["d", 0], ["0", 0], ["15", 0], ["and", 0], ["int", 0], ["d", 0], ["0", 0], ["0", 0], ["print", 0], ["1", 0], ["elif", 0], ["n", 0], ["1", 0], ["and", 0], ["int", 0], ["d", 0], ["0", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["n", 0], ["1", 0], ["and", 0], ["int", 0], ["d", 0], ["0", 0], ["15", 0], ["print", 0], ["down", 0], ["else", 0], ["if", 0], ["d", 0], ["1", 0], ["d", 0], ["2", 0], ["and", 0], ["d", 0], ["1", 0], ["15", 0], ["or", 0], ["d", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["d", 0], ["1", 0], ["d", 0], ["2", 0], ["and", 0], ["d", 0], ["1", 0], ["0", 0], ["or", 0], ["d", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["as", 0], ["fin", 0], ["fin", 0], ["open", 0], ["cfr373a", 0], ["in", 0], ["n", 0], ["int", 0], ["fin", 0], ["readline", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["fin", 0], ["readline", 0], ["split", 0], ["nums", 0], ["tuple", 0], ["map", 0], ["int", 0], ["fin", 0], ["readline", 0], ["split", 0], ["ans", 0], ["15", 0], ["down", 0], ["0", 0], ["up", 0], ["if", 0], ["nums", 0], ["1", 0], ["in", 0], ["ans", 0], ["print", 0], ["ans", 0], ["nums", 0], ["1", 0], ["elif", 0], ["len", 0], ["nums", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["down", 0], ["if", 0], ["nums", 0], ["1", 0], ["nums", 0], ["2", 0], ["else", 0], ["up", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["elif", 0], ["a", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["elif", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["def", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["372", 0], ["1", 0], ["def", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["n", 0], ["c", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["tup", 0], ["tuple", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["counter", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["tup", 0], ["i", 0], ["tup", 0], ["i", 0], ["1", 0], ["c", 0], ["counter", 0], ["1", 0], ["else", 0], ["counter", 0], ["1", 0], ["stdout", 0], ["write", 0], ["str", 0], ["counter", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["2", 0], ["def", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["s", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["lower", 0], ["dic", 0], ["qcounter", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["qwertyuiopasdfghjklzxcvbnm", 0], ["dic", 0], ["i", 0], ["0", 0], ["if", 0], ["len", 0], ["s", 0], ["26", 0], ["stdout", 0], ["write", 0], ["1", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["qcounter", 0], ["1", 0], ["else", 0], ["dic", 0], ["i", 0], ["1", 0], ["l", 0], ["x", 0], ["list", 0], ["dic", 0], ["values", 0], ["count", 0], ["0", 0], ["if", 0], ["qcounter", 0], ["26", 0], ["and", 0], ["x", 0], ["26", 0], ["stdout", 0], ["write", 0], ["qwertyuiopasdfghjklzxcvbnm", 0], ["upper", 0], ["elif", 0], ["x", 0], ["0", 0], ["and", 0], ["qcounter", 0], ["0", 0], ["stdout", 0], ["write", 0], ["s", 0], ["upper", 0], ["elif", 0], ["qcounter", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["qwertyuiopasdfghjklzxcvbnm", 0], ["if", 0], ["dic", 0], ["i", 0], ["0", 0], ["l", 0], ["append", 0], ["i", 0], ["upper", 0], ["m", 0], ["len", 0], ["l", 0], ["i", 0], ["0", 0], ["t", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["j", 0], ["if", 0], ["i", 0], ["m", 0], ["i", 0], ["0", 0], ["t", 0], ["t", 0], ["j", 0], ["l", 0], ["i", 0], ["i", 0], ["1", 0], ["else", 0], ["t", 0], ["s", 0], ["j", 0], ["upper", 0], ["stdout", 0], ["write", 0], ["t", 0], ["else", 0], ["stdout", 0], ["write", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["373", 0], ["1", 0], ["def", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["tup", 0], ["tuple", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["tup", 0], ["0", 0], ["0", 0], ["stdout", 0], ["write", 0], ["up", 0], ["elif", 0], ["tup", 0], ["0", 0], ["15", 0], ["stdout", 0], ["write", 0], ["down", 0], ["else", 0], ["stdout", 0], ["write", 0], ["1", 0], ["else", 0], ["if", 0], ["tup", 0], ["1", 0], ["tup", 0], ["2", 0], ["0", 0], ["if", 0], ["tup", 0], ["1", 0], ["15", 0], ["stdout", 0], ["write", 0], ["down", 0], ["else", 0], ["stdout", 0], ["write", 0], ["up", 0], ["else", 0], ["if", 0], ["tup", 0], ["1", 0], ["0", 0], ["stdout", 0], ["write", 0], ["up", 0], ["else", 0], ["stdout", 0], ["write", 0], ["down", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["n", 0], ["int", 0], ["input", 0], ["days", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["days", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["days", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["elif", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["days", 0], ["1", 0], ["days", 0], ["2", 0], ["0", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["n", 0], ["1", 0], ["a", 0], ["n", 0], ["2", 0], ["if", 0], ["a", 0], ["n", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["up", 0], ["else", 0], ["if", 0], ["a", 0], ["n", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["else", 0], ["if", 0], ["a", 0], ["n", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["else", 0], ["if", 0], ["a", 0], ["0", 0], ["15", 0], ["print", 0], ["down", 0], ["else", 0], ["if", 0], ["a", 0], ["0", 0], ["0", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["a", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["elif", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["def", 0], ["ans", 0], ["n", 0], ["seq", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["seq", 0], ["0", 0], ["0", 0], ["return", 0], ["up", 0], ["elif", 0], ["seq", 0], ["0", 0], ["15", 0], ["return", 0], ["down", 0], ["else", 0], ["return", 0], ["1", 0], ["elif", 0], ["seq", 0], ["1", 0], ["15", 0], ["return", 0], ["down", 0], ["elif", 0], ["seq", 0], ["1", 0], ["0", 0], ["return", 0], ["up", 0], ["elif", 0], ["seq", 0], ["1", 0], ["seq", 0], ["2", 0], ["and", 0], ["seq", 0], ["1", 0], ["15", 0], ["return", 0], ["up", 0], ["elif", 0], ["seq", 0], ["1", 0], ["seq", 0], ["2", 0], ["and", 0], ["seq", 0], ["1", 0], ["0", 0], ["return", 0], ["down", 0], ["n", 0], ["int", 0], ["input", 0], ["seq", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["ans", 0], ["n", 0], ["seq", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["and", 0], ["a", 0], ["0", 0], ["0", 0], ["and", 0], ["a", 0], ["0", 0], ["15", 0], ["print", 0], ["1", 0], ["elif", 0], ["a", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["elif", 0], ["a", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["elif", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["print", 0], ["up", 0], ["elif", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["print", 0], ["down", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["1", 0], ["15", 0], ["print", 0], ["down", 0], ["return", 0], ["if", 0], ["a", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["return", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["print", 0], ["up", 0], ["return", 0], ["else", 0], ["print", 0], ["down", 0], ["return", 0], ["main", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["days", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["days", 0], ["0", 0], ["15", 0], ["print", 0], ["down", 0], ["elif", 0], ["days", 0], ["0", 0], ["0", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["1", 0], ["return", 0], ["moves", 0], ["1", 0], ["1", 0], ["now", 0], ["0", 0], ["last", 0], ["days", 0], ["0", 0], ["if", 0], ["days", 0], ["1", 0], ["days", 0], ["0", 0], ["now", 0], ["now", 0], ["1", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["last", 0], ["moves", 0], ["now", 0], ["if", 0], ["last", 0], ["0", 0], ["or", 0], ["last", 0], ["15", 0], ["now", 0], ["now", 0], ["1", 0], ["2", 0], ["if", 0], ["now", 0], ["1", 0], ["print", 0], ["down", 0], ["else", 0], ["print", 0], ["up", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["and", 0], ["a", 0], ["0", 0], ["in", 0], ["0", 0], ["15", 0], ["print", 0], ["up", 0], ["if", 0], ["a", 0], ["0", 0], ["0", 0], ["else", 0], ["down", 0], ["return", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["1", 0], ["if", 0], ["a", 0], ["1", 0], ["15", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["else", 0], ["if", 0], ["a", 0], ["1", 0], ["0", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["down", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.010435850214855739, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00430654176817274, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.018281535648994516, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.014020010729334313, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.006138735420503376, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.004297114794352364, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.015843997562461912, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.014015843997562462, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nArthur has bought a beautiful big table into his new flat. When he came home, Arthur noticed that the new table is unstable.\n\nIn total the table Arthur bought has n legs, the length of the i-th leg is l_{i}.\n\nArthur decided to make the table stable and remove some legs. For each of them Arthur determined number d_{i} — the amount of energy that he spends to remove the i-th leg.\n\nA table with k legs is assumed to be stable if there are more than half legs of the maximum length. For example, to make a table with 5 legs stable, you need to make sure it has at least three (out of these five) legs of the maximum length. Also, a table with one leg is always stable and a table with two legs is stable if and only if they have the same lengths.\n\nYour task is to help Arthur and count the minimum number of energy units Arthur should spend on making the table stable.\n\n\n-----Input-----\n\nThe first line of the input contains integer n (1 ≤ n ≤ 10^5) — the initial number of legs in the table Arthur bought.\n\nThe second line of the input contains a sequence of n integers l_{i} (1 ≤ l_{i} ≤ 10^5), where l_{i} is equal to the length of the i-th leg of the table.\n\nThe third line of the input contains a sequence of n integers d_{i} (1 ≤ d_{i} ≤ 200), where d_{i} is the number of energy units that Arthur spends on removing the i-th leg off the table.\n\n\n-----Output-----\n\nPrint a single integer — the minimum number of energy units that Arthur needs to spend in order to make the table stable.\n\n\n-----Examples-----\nInput\n2\n1 5\n3 2\n\nOutput\n2\n\nInput\n3\n2 4 4\n1 1 1\n\nOutput\n0\n\nInput\n6\n2 2 1 1 3 3\n4 3 5 5 2 1\n\nOutput\n8\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from collections import defaultdict\n\n\ndef main():\n\tn = int(input())\n\thh = list(map(int, input().split()))\n\tee = list(map(int, input().split()))\n\tdd = defaultdict(set)\n\tfor i, h in enumerate(hh):\n\t\tdd[h].add(i)\n\tidx = sorted(list(range(n)), key=ee.__getitem__, reverse=True)\n\tres = 0\n\tfor h, s in list(dd.items()):\n\t\tx = sum(ee[i] for i in s)\n\t\tle = len(s) - 1\n\t\tif le:\n\t\t\tfor i in idx:\n\t\t\t\tif hh[i] < h and i not in s:\n\t\t\t\t\tx += ee[i]\n\t\t\t\t\tle -= 1\n\t\t\t\t\tif not le:\n\t\t\t\t\t\tbreak\n\t\tif res < x:\n\t\t\tres = x\n\tprint(sum(ee) - res)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "def read_data():\n\tn = int(input())\n\tLs = list(map(int, input().split()))\n\tDs = list(map(int, input().split()))\n\treturn n, Ls, Ds\n\ndef solve(n, Ls, Ds):\n\tfreqD = [0] * 201\n\tfor d in Ds:\n\t\tfreqD[d] += 1\n\tLDs = list(zip(Ls, Ds))\n\tLDs.sort(reverse = True)\n\tprevL = 0\n\tni = 0\n\trecord = float('inf')\n\tcost_long = 0\n\tcost_me = 0\n\tfor L, D in LDs:\n\t\tif prevL != L:\n\t\t\tn -= ni\n\t\t\trecord = min(record, cost_long + calc_cost(ni, n, freqD))\n\t\t\tprevL = L\n\t\t\tni = 0\n\t\t\tcost_long += cost_me\n\t\t\tif cost_long >= record:\n\t\t\t\treturn record\n\t\t\tcost_me = 0\n\t\tfreqD[D] -= 1\n\t\tcost_me += D\n\t\tni += 1\n\trecord = min(record, cost_long)\n\treturn record\n\ndef calc_cost(ni, n, freqD):\n\tif n < ni:\n\t\treturn 0\n\tcost = 0\n\tfor d, f in enumerate(freqD):\n\t\tif n - f >= ni:\n\t\t\tcost += f * d\n\t\t\tn -= f\n\t\telse:\n\t\t\tcost += (n - ni + 1) * d\n\t\t\treturn cost\n\treturn float('inf')\n\nn, Ls, Ds = read_data()\nprint(solve(n, Ls, Ds))\n", "def main():\n\t_, dd, res = input(), {}, 0\n\the = list(zip(list(map(int, input().split())), list(map(int, input().split()))))\n\tfor h, e in he:\n\t\tle, x = dd.get(h, (-1, 0))\n\t\tdd[h] = (le + 1, x + e)\n\the.sort(key=lambda _: _[1], reverse=True)\n\tfor h, (le, x) in list(dd.items()):\n\t\tif le:\n\t\t\tfor h1, e in he:\n\t\t\t\tif h1 < h:\n\t\t\t\t\tx += e\n\t\t\t\t\tle -= 1\n\t\t\t\t\tif not le:\n\t\t\t\t\t\tbreak\n\t\tif res < x:\n\t\t\tres = x\n\tprint(sum(e for h, e in he) - res)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n = int(input())\nINF = -1\narr = [0] * n\nd = [0] * 201\nl = list(map(int, input().split()))\ne = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n\tarr[i] = (l[i], e[i])\n\ts += e[i]\n\td[e[i]] += 1\nl = []\ne = []\nans = [INF] * 3\nans[2] = 10 ** 10\n\np = arr[-1][0]\nk = [0, 0]        \narr.sort()\narr = [(-1, -1)] + arr\ne = 0\nc = 0\nfor i in range(n, -1, -1):\n\tif arr[i][0] == p:\n\t\tc += 1\n\t\te += arr[i][1]\n\t\td[arr[i][1]] -= 1\n\telse:\n\t\tif c == 1:\n\t\t\tans[0] = max(ans[0], e)\n\t\telif c == 2:\n\t\t\tans[1] = max(ans[1], arr[i + 1][1] + arr[i + 2][1])        \n\t\tif c >= 2:\n\t\t\tmx = c + c - 1\n\t\t\teng = k[1]\n\t\t\tif k[0] >= n - mx:\n\t\t\t\tans[2] = min(ans[2], eng)\n\t\t\telse:\n\t\t\t\tg = n - mx - k[0]\n\t\t\t\tj = 1\n\t\t\t\twhile j < 201 and g > 0:\n\t\t\t\t\tif d[j] > 0:\n\t\t\t\t\t\tif g > d[j]:\n\t\t\t\t\t\t\teng += d[j] * j\n\t\t\t\t\t\t\tg -= d[j]\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\teng += g * j\n\t\t\t\t\t\t\tg = 0\n\t\t\t\t\tj += 1\n\t\t\t\tif g == 0:\n\t\t\t\t\tans[2] = min(ans[2], eng)                     \n\t\tk[0] += c\n\t\tk[1] += e\n\t\tc = 1\n\t\te = arr[i][1]\n\t\td[arr[i][1]] -= 1\n\t\tp = arr[i][0]\nmn = 10 ** 10\nfor i in range(2):\n\tans[i] = s - ans[i]\nfor i in range(3):\n\tif ans[i] != -1 and mn > ans[i]:\n\t\tmn = ans[i]\nif mn != 10 ** 10:\n\tprint(mn)\nelse:\n\tprint(0)\n\t\t\n\n", "\nn = int(input())\nlengths = list(map(int, input().split()))\ncosts = list(map(int, input().split()))\nsum = 0\nlength_to_sum = {}\nlength_to_count = {}\ncost_to_lengths = {}\n\nfor i in range(n):\n\tlength, cost = lengths[i], costs[i]\n\tsum += cost\n\tlength_to_sum[length] = length_to_sum.setdefault(length, 0) + cost\n\tlength_to_count[length] = length_to_count.setdefault(length, 0) + 1\n\tcost_to_lengths.setdefault(cost, []).append(length)\n\nlength_set = set(lengths)\nfor lengths in list(cost_to_lengths.values()):\n\tlengths.sort()\nunique_costs = list(reversed(sorted(cost_to_lengths.keys())))\nbest = -1\n\nfor length in length_set:\n\ttotal = sum - length_to_sum[length]\n\tseek = length_to_count[length] - 1\n\tif seek != 0:\n\t\tfor cost in unique_costs:\n\t\t\tfor x in cost_to_lengths[cost]:\n\t\t\t\tif x >= length:\n\t\t\t\t\tbreak\n\t\t\t\ttotal -= cost\n\t\t\t\tseek -= 1\n\t\t\t\tif seek == 0:\n\t\t\t\t\tbreak\n\t\t\tif seek == 0:\n\t\t\t\tbreak\n\tif best == -1 or total < best:\n\t\tbest = total\n\nprint(best)\n", "#!/usr/bin/env python\n# 557C_table.py - Codeforces.com 557C Table quiz\n#\n# Copyright (C) 2015 Sergey\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"\nInput\n\nThe first line of the input contains integer n  the initial number of legs\nin the table Arthur bought.\n\nThe second line of the input contains a sequence of n integers li, where\nli is equal to the length of the i-th leg of the table.\n\nThe third line of the input contains a sequence of n integers di, where di\nis the number of energy units that Arthur spends on removing the i-th leg\noff the table.\nOutput\n\nPrint a single integer the minimum number of energy units that Arthur\nneeds to spend in order to make the table stable.\n\"\"\"\n\n# Standard libraries\nimport unittest\nimport sys\nimport re\nimport random\nimport bisect\n\n# Additional libraries\n\n\n###############################################################################\n# Table Class\n###############################################################################\n\n\nclass Table:\n\t\"\"\" Table representation \"\"\"\n\n\tLIM = 201\n\n\tdef __init__(self, args):\n\t\t\"\"\" Default constructor \"\"\"\n\n\t\tself.legs = args[0]\n\t\tself.energy = args[1]\n\t\tself.n = len(self.legs)\n\n\t\t# Sort lists\n\t\tself.srt = sorted((l, e) for l, e in zip(self.legs, self.energy))\n\t\tself.legs = []\n\t\tself.energy = []\n\t\tfor n in self.srt:\n\t\t\tself.legs.append(n[0])\n\t\t\tself.energy.append(n[1])\n\n\t\t# Prepare accumulator variables\n\n\t\tself.itot = 0\n\t\tself.ieltot = [0 for i in range(self.LIM)]\n\t\tself.ielprev = [0 for i in range(self.LIM)]\n\t\tself.ielprev_eng = 0\n\t\tself.ires_eng = sys.maxsize\n\n\tdef get_new_layer_info(self, legs, energy):\n\n\t\tll = len(legs)\n\t\tfor (i, l) in enumerate(legs):\n\n\t\t\tself.ilen = l\n\t\t\te = energy[i]\n\n\t\t\tif i == 0:\n\t\t\t\tself.itop_eng = sum(energy)\n\n\t\t\tif i == 0 or self.ilen != prev:\n\t\t\t\tself.irep = 0\n\t\t\t\tself.ielsum_eng = 0\n\t\t\t\tself.ielprev = list(self.ieltot)\n\n\t\t\tself.irep += 1\n\n\t\t\tself.itop_eng -= e\n\t\t\tself.ielprev_eng += e\n\t\t\tself.ielsum_eng += e\n\t\t\tself.ieltot[e] += 1\n\n\t\t\tif i == ll - 1 or legs[i+1] != self.ilen:\n\t\t\t\tself.irem = self.irep - 1\n\t\t\t\tself.irem_eng = self.ielprev_eng - self.ielsum_eng\n\t\t\t\tif self.irem != 0:\n\t\t\t\t\tsumh = self.energyl_sum_high(self.ielprev, self.irem)\n\t\t\t\t\tself.irem_eng -= sumh\n\t\t\t\tsumm = self.itop_eng + self.irem_eng\n\t\t\t\tself.ires_eng = min(self.ires_eng, summ)\n\t\t\t\tyield\n\t\t\tprev = self.ilen\n\n\tdef energyl_sum_high(self, l, n):\n\t\tresult = 0\n\t\tfor i in range(len(l) - 1, -1, -1):\n\t\t\te = l[i]\n\t\t\tif e == 0:\n\t\t\t\tcontinue\n\t\t\tif n <= 0:\n\t\t\t\tbreak\n\t\t\tresult += i * (n if e > n else e)\n\t\t\tn -= e\n\t\treturn result\n\n\tdef calculate(self):\n\t\t\"\"\" Main calcualtion function of the class \"\"\"\n\n\t\titer = self.get_new_layer_info(self.legs, self.energy)\n\n\t\tfor g in iter:\n\t\t\tpass\n\n\t\tresult = self.ires_eng\n\n\t\treturn str(result)\n\n\n###############################################################################\n# Executable code\n###############################################################################\n\n\ndef get_inputs(test_inputs=None):\n\n\tit = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n\tdef uinput():\n\t\t\"\"\" Unit-testable input function wrapper \"\"\"\n\t\tif it:\n\t\t\treturn next(it)\n\t\telse:\n\t\t\treturn input()\n\n\t# Getting string inputs. Place all uinput() calls here\n\tnum = int(uinput())\n\tstr1 = [int(s) for s in uinput().split()]\n\tstr2 = [int(s) for s in uinput().split()]\n\n\t# Decoding inputs into a list\n\tinputs = []\n\tinputs.append(str1)\n\tinputs.append(str2)\n\n\treturn inputs\n\n\ndef calculate(test_inputs=None):\n\t\"\"\" Base class calculate method wrapper \"\"\"\n\treturn Table(get_inputs(test_inputs)).calculate()\n\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n\tdef test_sample_tests(self):\n\t\t\"\"\" Quiz sample tests. Add \\n to separate lines \"\"\"\n\n\t\t# my tests\n\t\timax = 100000\n\t\ttest = \"0\\n\"\n\t\tfor i in range(imax):\n\t\t\ttest += str(i) + \" \"\n\t\ttest += \"\\n\"\n\t\tfor i in range(imax):\n\t\t\ttest += str(random.randint(1, 200)) + \" \"\n\t\tcalculate(test)\n\n\t\t# Sample test 1\n\t\ttest = \"2\\n1 5\\n3 2\"\n\t\tself.assertEqual(calculate(test), \"2\")\n\t\tself.assertEqual(get_inputs(test), [[1, 5], [3, 2]])\n\n\t\t# Other tests\n\t\ttest = \"3\\n2 4 4\\n1 1 1\"\n\t\tself.assertEqual(calculate(test), \"0\")\n\t\ttest = \"6\\n2 2 1 1 3 3\\n4 3 5 5 2 1\"\n\t\tself.assertEqual(calculate(test), \"8\")\n\n\t\ttest = (\n\t\t\t\"10\\n20 1 15 17 11 2 15 3 16 3\\n\" +\n\t\t\t\"129 114 183 94 169 16 18 104 49 146\")\n\t\tself.assertEqual(calculate(test), \"652\")\n\n\tdef test_Table_class__basic_functions(self):\n\t\t\"\"\" Table class basic functions testing \"\"\"\n\n\t\t# Constructor test\n\t\td = Table([[2, 2, 1, 1, 3, 3], [2, 2, 3, 3, 1, 1]])\n\t\tself.assertEqual(d.legs[0], 1)\n\t\tself.assertEqual(d.energy[0], 3)\n\n\t\t# Get layer info (length, number of legs, energy list, energy sum)\n\t\titer = d.get_new_layer_info([1, 1, 2, 2, 4, 5], [2, 2, 3, 3, 1, 1])\n\t\tnext(iter)\n\t\tself.assertEqual(d.itop_eng, 8)\n\t\tself.assertEqual(d.ilen, 1)\n\t\tself.assertEqual(d.irep, 2)\n\t\tself.assertEqual(d.irem, 1)\n\t\tself.assertEqual(d.irem_eng, 0)\n\t\tself.assertEqual(d.ires_eng, 8)\n\n\t\tnext(iter)\n\t\tself.assertEqual(d.ilen, 2)\n\t\tself.assertEqual(d.irep, 2)\n\t\tself.assertEqual(d.irem, 1)\n\t\tself.assertEqual(d.irem_eng, 2)\n\t\tself.assertEqual(d.ires_eng, 4)\n\n\t\t# Get layer info (length, number of legs, energy list, energy sum)\n\t\td = Table([[], []])\n\t\titer = d.get_new_layer_info([1, 1, 2, 2, 3, 3], [5, 5, 4, 3, 2, 1])\n\t\tnext(iter)\n\t\tself.assertEqual(d.ilen, 1)\n\t\tself.assertEqual(d.irep, 2)\n\t\tself.assertEqual(d.irem, 1)\n\t\tself.assertEqual(d.irem_eng, 0)\n\t\tself.assertEqual(d.ires_eng, 10)\n\t\tnext(iter)\n\t\tself.assertEqual(d.ilen, 2)\n\t\tself.assertEqual(d.irep, 2)\n\t\tself.assertEqual(d.irem, 1)\n\t\tself.assertEqual(d.irem_eng, 5)\n\t\tself.assertEqual(d.ires_eng, 8)\n\t\tnext(iter)\n\t\tself.assertEqual(d.ilen, 3)\n\t\tself.assertEqual(d.irep, 2)\n\t\tself.assertEqual(d.irem, 1)\n\t\tself.assertEqual(d.irem_eng, 12)\n\t\tself.assertEqual(d.ires_eng, 8)\n\ndef __starting_point():\n\n\t# Avoiding recursion limitaions\n\tsys.setrecursionlimit(100000)\n\n\tif sys.argv[-1] == \"-ut\":\n\t\tunittest.main(argv=[\" \"])\n\n\t# Print the result string\n\tprint(calculate())\n\n__starting_point()\n", "rr = lambda: map(int, input().split())\n_, d, res, he = input(), {}, 0, list(zip(rr(), rr()))\nfor h, e in he:\n\tf, x = d.get(h, (-1, 0))\n\td[h] = (f + 1, x + e)\nhe.sort(key = lambda x: x[1], reverse=True)\nfor h, (f, x) in d.items():\n\tif not f:\n\t\tres = max(x, res)\n\t\tcontinue\n\tfor h1, e in he:\n\t\tif h1 < h:\n\t\t\tx += e\n\t\t\tf -= 1\n\t\t\tif not f: break\n\tres = max(x, res)\nprint(sum(e for h, e in he) - res)\n", "rr = lambda: map(int, input().split())\n_, d, res, he = input(), {}, 0, list(zip(rr(), rr()))\nfor h, e in he:\n\tf, x = d.get(h, (-1, 0))\n\td[h] = (f + 1, x + e)\nhe.sort(key = lambda x: x[1], reverse=True)\nfor h, (f, x) in d.items():\n\tif not f:\n\t\tres = max(x, res)\n\t\tcontinue\n\tfor h1, e in he:\n\t\tif h1 < h:\n\t\t\tx += e\n\t\t\tf -= 1\n\t\t\tif not f: break\n\tres = max(x, res)\nprint(sum(e for h, e in he) - res)\n", "rr = lambda: list(map(int, input().split()))\n_, d, res, he = input(), {}, 0, list(zip(rr(), rr()))\nfor h, e in he:\n\tf, x = d.get(h, (-1, 0))\n\td[h] = (f + 1, x + e)\nhe.sort(key = lambda x: x[1], reverse=True)\nfor h, (f, x) in list(d.items()):\n\tif not f:\n\t\tres = max(x, res)\n\t\tcontinue\n\tfor h1, e in he:\n\t\tif h1 < h:\n\t\t\tx += e\n\t\t\tf -= 1\n\t\t\tif not f: break\n\tres = max(x, res)\nprint(sum(e for h, e in he) - res)\n", "\"\"\"\n\tAuthor\t\t: Arif Ahmad\n\tDate  \t\t: \n\tAlgo  \t\t: \n\tDifficulty\t: \n\"\"\"\nfrom sys import stdin, stdout\n\ndef main():\n\tn \t= int(stdin.readline())\n\tleg\t= [int(_) for _ in stdin.readline().split()]\n\td \t= [int(_) for _ in stdin.readline().split()]\n\n\tpairedLD = []\n\tfor x, y in zip(leg, d):\n\t\tpairedLD.append((x, y))\n\tpairedLD = sorted(pairedLD)\n\n\tlegSet \t\t= set()\n\tsuffixSum  \t= dict()\n\tlegFreq\t\t= dict()\n\tfor length, energy in zip(leg, d):\n\t\tlegSet.add(length)\n\t\tif length in suffixSum: \n\t\t\tsuffixSum[length] += energy\n\t\t\tlegFreq[length] += 1\n\t\telse: \n\t\t\tsuffixSum[length] = energy\n\t\t\tlegFreq[length] = 1\n\t\t\n\n\tlegList = [x for x in legSet]\n\tlegList = sorted(legList, reverse=True)\n\ttotal \t= 0\n\tfor length in legList:\n\t\tsuffixSum[length] += total\n\t\ttotal = suffixSum[length]\n\n\tans = int(2e7)\n\ttoRemove = 0\n\tavailable = 0\n\tremovable = [0] * 201\n\tlegList = sorted(legList)\n\tlistLen = len(legList)\n\tidx = 0\n\tfor i in range(listLen):\n\t\tcurr = 0\n\t\tif i+1 < listLen: curr += suffixSum[legList[i+1]]\n\t\ttoRemove = available - (legFreq[legList[i]] - 1)\n\t\tif toRemove < 0: toRemove = 0\n\t\tfor j in range(1, 201):\n\t\t\tif removable[j] != 0 and removable[j] <= toRemove:\n\t\t\t\tcurr += (removable[j] * j)\n\t\t\t\ttoRemove -= removable[j]\n\t\t\telif removable[j] > toRemove:\n\t\t\t\tcurr += (toRemove * j)\n\t\t\t\ttoRemove = 0\n\t\t\tif toRemove == 0: break\n\t\tavailable += legFreq[legList[i]]\n\t\tfor j in range(legFreq[legList[i]]): \n\t\t\tremovable[pairedLD[idx][1]] += 1\n\t\t\tidx += 1\n\t\tans = min(ans, curr)\n\n\tprint(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n", "rr = lambda: map(int, input().split())\n_, d, res, he = input(), {}, 0, list(zip(rr(), rr()))\nfor h, e in he:\n\tf, x = d.get(h, (-1, 0))\n\td[h] = (f + 1, x + e)\nhe.sort(key = lambda x: x[1], reverse=True)\nfor h, (f, x) in d.items():\n\tif not f:\n\t\tres = max(x, res)\n\t\tcontinue\n\tfor h1, e in he:\n\t\tif h1 < h:\n\t\t\tx += e\n\t\t\tf -= 1\n\t\t\tif not f: break\n\tres = max(x, res)\nprint(sum(e for h, e in he) - res)\n", "f = lambda: map(int, input().split())\nn, p, m, s = input(), {}, 0, sorted(zip(f(), f()), key=lambda q: -q[1])\nfor L, d in s:\n\tk, D = p.get(L, (-1, 0))\n\tp[L] = (k + 1, D + d)\nfor L, (k, D) in p.items():\n\tif k:\n\t\tfor l, d in s:\n\t\t\tif l < L:\n\t\t\t\tD += d\n\t\t\t\tk -= 1\n\t\t\t\tif k == 0: break\n\tm = max(D, m)\nprint(sum(d for l, d in s) - m)\n", "f = lambda: map(int, input().split())\nk, n = 1, f()\ns = sorted(zip(f(), f()), key=lambda q: q[0])\n\nt = [0] * 201\nfor l, d in s: t[d] += 1\n\nj = [i for i in range(201) if t[i]]\nj.reverse()\n\nS = sum(i * t[i] for i in j)\nL, D = s.pop()\nt[D] -= 1\ns.reverse()\ns.append((0, 0))\n\nm = 0\nfor l, d in s:\n\tif l < L:\n\t\tL = l\n\t\tfor i in j:\n\t\t\tif t[i] > k - 2:\n\t\t\t\tD += i * (k - 1)\n\t\t\t\tbreak\n\t\t\tD += i * t[i]\n\t\t\tk -= t[i]\n\t\tm = max(m, D)\n\t\tk = D = 0\n\tk += 1\n\tD += d\n\t\n\tt[d] -= 1\n\tif not t[d]: j.remove(d)\n\t\nprint(S - m)\n", "f = lambda: list(map(int, input().split()))\nn, p, m, s = input(), {}, 0, sorted(zip(f(), f()), key=lambda q: -q[1])\nfor L, d in s:\n\tk, D = p.get(L, (-1, 0))\n\tp[L] = (k + 1, D + d)\nfor L, (k, D) in list(p.items()):\n\tif k:\n\t\tfor l, d in s:\n\t\t\tif l < L:\n\t\t\t\tD += d\n\t\t\t\tk -= 1\n\t\t\t\tif k == 0: break\n\tm = max(D, m)\nprint(sum(d for l, d in s) - m)\n", "f = lambda: list(map(int, input().split()))\nn, p, m, s = input(), {}, 0, sorted(zip(f(), f()), key=lambda q: -q[1])\nfor L, d in s:\n\tk, D = p.get(L, (-1, 0))\n\tp[L] = (k + 1, D + d)\nfor L, (k, D) in list(p.items()):\n\tif k:\n\t\tfor l, d in s:\n\t\t\tif l < L:\n\t\t\t\tD += d\n\t\t\t\tk -= 1\n\t\t\t\tif k == 0: break\n\tm = max(D, m)\nprint(sum(d for l, d in s) - m)\n", "f = lambda: list(map(int, input().split()))\nn, p, m, s = input(), {}, 0, sorted(zip(f(), f()), key=lambda q: -q[1])\nfor L, d in s:\n\tk, D = p.get(L, (-1, 0))\n\tp[L] = (k + 1, D + d)\nfor L, (k, D) in list(p.items()):\n\tif k:\n\t\tfor l, d in s:\n\t\t\tif l < L:\n\t\t\t\tD += d\n\t\t\t\tk -= 1\n\t\t\t\tif k == 0: break\n\tm = max(D, m)\nprint(sum(d for l, d in s) - m)\n", "f = lambda: list(map(int, input().split()))\nn, p, m, s = input(), {}, 0, sorted(zip(f(), f()), key=lambda q: -q[1])\nfor L, d in s:\n\tk, D = p.get(L, (-1, 0))\n\tp[L] = (k + 1, D + d)\nfor L, (k, D) in list(p.items()):\n\tif k:\n\t\tfor l, d in s:\n\t\t\tif l < L:\n\t\t\t\tD += d\n\t\t\t\tk -= 1\n\t\t\t\tif k == 0: break\n\tm = max(D, m)\nprint(sum(d for l, d in s) - m)\n", "f = lambda: list(map(int, input().split()))\nn, p, m, s = input(), {}, 0, sorted(zip(f(), f()), key=lambda q: -q[1])\nfor L, d in s:\n\tk, D = p.get(L, (-1, 0))\n\tp[L] = (k + 1, D + d)\nfor L, (k, D) in list(p.items()):\n\tif k:\n\t\tfor l, d in s:\n\t\t\tif l < L:\n\t\t\t\tD += d\n\t\t\t\tk -= 1\n\t\t\t\tif k == 0: break\n\tm = max(D, m)\nprint(sum(d for l, d in s) - m)\n", "f = lambda: list(map(int, input().split()))\nn, p, m, s = input(), {}, 0, sorted(zip(f(), f()), key=lambda q: -q[1])\nfor L, d in s:\n\tk, D = p.get(L, (-1, 0))\n\tp[L] = (k + 1, D + d)\nfor L, (k, D) in list(p.items()):\n\tif k:\n\t\tfor l, d in s:\n\t\t\tif l < L:\n\t\t\t\tD += d\n\t\t\t\tk -= 1\n\t\t\t\tif k == 0: break\n\tm = max(D, m)\nprint(sum(d for l, d in s) - m)\n", "f = lambda: list(map(int, input().split()))\nn, p, m, s = input(), {}, 0, sorted(zip(f(), f()), key=lambda q: -q[1])\nfor L, d in s:\n\tk, D = p.get(L, (-1, 0))\n\tp[L] = (k + 1, D + d)\nfor L, (k, D) in list(p.items()):\n\tif k:\n\t\tfor l, d in s:\n\t\t\tif l < L:\n\t\t\t\tD += d\n\t\t\t\tk -= 1\n\t\t\t\tif k == 0: break\n\tm = max(D, m)\nprint(sum(d for l, d in s) - m)\n", "f = lambda: list(map(int, input().split()))\nn, p, m, s = input(), {}, 0, sorted(zip(f(), f()), key=lambda q: -q[1])\nfor L, d in s:\n\tk, D = p.get(L, (-1, 0))\n\tp[L] = (k + 1, D + d)\nfor L, (k, D) in list(p.items()):\n\tif k:\n\t\tfor l, d in s:\n\t\t\tif l < L:\n\t\t\t\tD += d\n\t\t\t\tk -= 1\n\t\t\t\tif k == 0: break\n\tm = max(D, m)\nprint(sum(d for l, d in s) - m)\n", "f = lambda: list(map(int, input().split()))\n\nn, p, m, s = input(), {}, 0, sorted(zip(f(), f()), key=lambda q: -q[1])\n\nfor L, d in s:\n\n\tk, D = p.get(L, (-1, 0))\n\n\tp[L] = (k + 1, D + d)\n\nfor L, (k, D) in list(p.items()):\n\n\tif k:\n\n\t\tfor l, d in s:\n\n\t\t\tif l < L:\n\n\t\t\t\tD += d\n\n\t\t\t\tk -= 1\n\n\t\t\t\tif k == 0: break\n\n\tm = max(D, m)\n\nprint(sum(d for l, d in s) - m)\n\n\n\n\n# Made By Mostafa_Khaled\n", "n = int(input())\nlegs = list(zip(list(map(int, input().split())), list(map(int, input().split()))))\nlegs.sort(key=lambda x: x[1], reverse=True)\n# print(legs)\ncnt = {}\ns = 0\nfor i in range(n):\n\ts += legs[i][1]\n\tif legs[i][0] not in cnt:\n\t\tcnt[legs[i][0]] = [1, legs[i][1]]\n\telse:\n\t\tcnt[legs[i][0]][0] += 1\n\t\tcnt[legs[i][0]][1] += legs[i][1]\n\ntemp = sorted(cnt.items())\nmn = 9999999999999\nf = 0\nwhile temp:\n\tl, t = temp.pop()\n\tc, e = t\n\ts -= e\n\tval = s\n\ti = 0\n\tcount = 0\n\twhile count < c-1:\n\t\tif legs[i][0] < l:\n\t\t\tcount += 1\n\t\t\tval -= legs[i][1]\n\t\ti += 1\n\t\tif i == n:\n\t\t\tbreak\n\t# print(l, c, e, val+f)\n\tif val+f < mn:\n\t\tmn = val+f\n\tf += e\nprint(mn)\n", "def buscaEnergia(perna,qtd):\n\ttotal = 0\n\tif(qtd == 0):\n\t\treturn total\n\tfor i in range(len(d)-1,-1,-1):\n\t\tfor v in d[i]:\n\t\t\tif(v <perna):\n\t\t\t\tqtd-=1\n\t\t\t\ttotal+=i\n\t\t\telse:\n\t\t\t\tbreak\n\t\t\tif(qtd == 0):\n\t\t\t\tbreak\n\t\tif(qtd == 0):\n\t\t\tbreak\n\treturn total\n\nn = int(input())\ntamanhoPerna = [int(i) for i in input().split()]\nenergiaPerna = [int(i) for i in input().split()]\nd = [[] for i in range(201)]\ncntPerna = [0]*100001\nsumPerna = [0]*100001\ncorteTotal = 0\nmaxTam = 0\n\nfor i in range(len(tamanhoPerna)):\n\td[energiaPerna[i]].append(tamanhoPerna[i])\n\tsumPerna[tamanhoPerna[i]]+=energiaPerna[i]\n\tcntPerna[tamanhoPerna[i]]+=1\n\tcorteTotal+=energiaPerna[i]\n\tmaxTam = max(tamanhoPerna[i],maxTam)\n\nfor i in range(len(d)):\n\td[i].sort()\n\ncurrentMin = float(\"inf\")\nfor perna in tamanhoPerna:\n\tsomaMesa = sumPerna[perna]\n\tsomaMesa+=buscaEnergia(perna,cntPerna[perna]-1)\n\tcurrentMin = min(currentMin,corteTotal-somaMesa)\nprint(currentMin)\n", "def buscaEnergia(perna,qtd):\n\ttotal = 0\n\tif(qtd == 0):\n\t\treturn total\n\tfor i in range(len(d)-1,-1,-1):\n\t\tfor v in d[i]:\n\t\t\tif(v <perna):\n\t\t\t\tqtd-=1\n\t\t\t\ttotal+=i\n\t\t\telse:\n\t\t\t\tbreak\n\t\t\tif(qtd == 0):\n\t\t\t\tbreak\n\t\tif(qtd == 0):\n\t\t\tbreak\n\treturn total\n\nn = int(input())\ntamanhoPerna = [int(i) for i in input().split()]\nenergiaPerna = [int(i) for i in input().split()]\nd = [[] for i in range(201)]\ncntPerna = [0]*100001\nsumPerna = [0]*100001\ncorteTotal = 0\nmaxTam = 0\n\nfor i in range(len(tamanhoPerna)):\n\td[energiaPerna[i]].append(tamanhoPerna[i])\n\tsumPerna[tamanhoPerna[i]]+=energiaPerna[i]\n\tcntPerna[tamanhoPerna[i]]+=1\n\tcorteTotal+=energiaPerna[i]\n\tmaxTam = max(tamanhoPerna[i],maxTam)\n\nfor i in range(len(d)):\n\td[i].sort()\n\ncurrentMin = float(\"inf\")\nfor perna in tamanhoPerna:\n\tsomaMesa = sumPerna[perna]\n\tsomaMesa+=buscaEnergia(perna,cntPerna[perna]-1)\n\tcurrentMin = min(currentMin,corteTotal-somaMesa)\nprint(currentMin)\n"], "id": "id9847"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9847", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["arthur", 0], ["has", 0], ["bought", 0], ["a", 0], ["beautiful", 0], ["big", 0], ["table", 0], ["into", 0], ["his", 0], ["new", 0], ["flat", 0], ["when", 0], ["he", 0], ["came", 0], ["home", 0], ["arthur", 0], ["noticed", 0], ["that", 0], ["the", 0], ["new", 0], ["table", 0], ["is", 0], ["unstable", 0], ["in", 0], ["total", 0], ["the", 0], ["table", 0], ["arthur", 0], ["bought", 0], ["has", 0], ["n", 0], ["legs", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["leg", 0], ["is", 0], ["l", 0], ["i", 0], ["arthur", 0], ["decided", 0], ["to", 0], ["make", 0], ["the", 0], ["table", 0], ["stable", 0], ["and", 0], ["remove", 0], ["some", 0], ["legs", 0], ["for", 0], ["each", 0], ["of", 0], ["them", 0], ["arthur", 0], ["determined", 0], ["number", 0], ["d", 0], ["i", 0], ["—", 0], ["the", 0], ["amount", 0], ["of", 0], ["energy", 0], ["that", 0], ["he", 0], ["spends", 0], ["to", 0], ["remove", 0], ["the", 0], ["i", 0], ["th", 0], ["leg", 0], ["a", 0], ["table", 0], ["with", 0], ["k", 0], ["legs", 0], ["is", 0], ["assumed", 0], ["to", 0], ["be", 0], ["stable", 0], ["if", 0], ["there", 0], ["are", 0], ["more", 0], ["than", 0], ["half", 0], ["legs", 0], ["of", 0], ["the", 0], ["maximum", 0], ["length", 0], ["for", 0], ["example", 0], ["to", 0], ["make", 0], ["a", 0], ["table", 0], ["with", 0], ["5", 0], ["legs", 0], ["stable", 0], ["you", 0], ["need", 0], ["to", 0], ["make", 0], ["sure", 0], ["it", 0], ["has", 0], ["at", 0], ["least", 0], ["three", 0], ["out", 0], ["of", 0], ["these", 0], ["five", 0], ["legs", 0], ["of", 0], ["the", 0], ["maximum", 0], ["length", 0], ["also", 0], ["a", 0], ["table", 0], ["with", 0], ["one", 0], ["leg", 0], ["is", 0], ["always", 0], ["stable", 0], ["and", 0], ["a", 0], ["table", 0], ["with", 0], ["two", 0], ["legs", 0], ["is", 0], ["stable", 0], ["if", 0], ["and", 0], ["only", 0], ["if", 0], ["they", 0], ["have", 0], ["the", 0], ["same", 0], ["lengths", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["help", 0], ["arthur", 0], ["and", 0], ["count", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["energy", 0], ["units", 0], ["arthur", 0], ["should", 0], ["spend", 0], ["on", 0], ["making", 0], ["the", 0], ["table", 0], ["stable", 0], ["input", 2], ["the", 2], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["—", 0], ["the", 0], ["initial", 0], ["number", 0], ["of", 0], ["legs", 0], ["in", 0], ["the", 0], ["table", 0], ["arthur", 0], ["bought", 0], ["the", 0], ["second", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["a", 0], ["sequence", 0], ["of", 0], ["n", 0], ["integers", 0], ["l", 0], ["i", 0], ["1", 0], ["≤", 0], ["l", 0], ["i", 0], ["≤", 0], ["10", 0], ["5", 0], ["where", 0], ["l", 0], ["i", 0], ["is", 0], ["equal", 0], ["to", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["leg", 0], ["of", 0], ["the", 0], ["table", 0], ["the", 0], ["third", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["a", 0], ["sequence", 0], ["of", 0], ["n", 0], ["integers", 0], ["d", 0], ["i", 0], ["1", 0], ["≤", 0], ["d", 0], ["i", 0], ["≤", 0], ["200", 0], ["where", 0], ["d", 0], ["i", 0], ["is", 0], ["the", 0], ["number", 0], ["of", 0], ["energy", 0], ["units", 0], ["that", 0], ["arthur", 0], ["spends", 0], ["on", 0], ["removing", 0], ["the", 0], ["i", 0], ["th", 0], ["leg", 0], ["off", 0], ["the", 0], ["table", 0], ["output", 0], ["print", 0], ["a", 0], ["single", 0], ["integer", 0], ["—", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["energy", 0], ["units", 0], ["that", 0], ["arthur", 0], ["needs", 0], ["to", 0], ["spend", 0], ["in", 0], ["order", 0], ["to", 0], ["make", 0], ["the", 0], ["table", 0], ["stable", 0], ["examples", 0], ["input", 0], ["2", 0], ["1", 0], ["5", 0], ["3", 0], ["2", 0], ["output", 0], ["2", 0], ["input", 0], ["3", 0], ["2", 0], ["4", 0], ["4", 0], ["1", 0], ["1", 0], ["1", 0], ["output", 0], ["0", 0], ["input", 0], ["6", 0], ["2", 0], ["2", 0], ["1", 0], ["1", 0], ["3", 0], ["3", 0], ["4", 0], ["3", 0], ["5", 0], ["5", 0], ["2", 0], ["1", 0], ["output", 0], ["8", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.005934718100890208, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.002967359050445104, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.04011461318051576, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.02005730659025788, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.005934718100890208, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.002967359050445104, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.04011461318051576, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.02005730659025788, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["hh", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ee", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dd", 0], ["defaultdict", 0], ["set", 0], ["for", 0], ["i", 0], ["h", 0], ["in", 0], ["enumerate", 0], ["hh", 0], ["dd", 0], ["h", 0], ["add", 0], ["i", 0], ["idx", 0], ["sorted", 0], ["list", 0], ["range", 0], ["n", 0], ["key", 0], ["ee", 0], ["getitem", 0], ["reverse", 0], ["true", 0], ["res", 0], ["0", 0], ["for", 0], ["h", 0], ["s", 0], ["in", 0], ["list", 0], ["dd", 0], ["items", 0], ["x", 0], ["sum", 0], ["ee", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["le", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["le", 0], ["for", 0], ["i", 0], ["in", 0], ["idx", 0], ["if", 0], ["hh", 0], ["i", 0], ["h", 0], ["and", 0], ["i", 0], ["not", 0], ["in", 0], ["s", 0], ["x", 0], ["ee", 0], ["i", 0], ["le", 0], ["1", 0], ["if", 0], ["not", 0], ["le", 0], ["break", 0], ["if", 0], ["res", 0], ["x", 0], ["res", 0], ["x", 0], ["print", 0], ["sum", 0], ["ee", 0], ["res", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["read", 0], ["data", 0], ["n", 0], ["int", 0], ["input", 0], ["ls", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ds", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["return", 0], ["n", 0], ["ls", 0], ["ds", 0], ["def", 0], ["solve", 0], ["n", 0], ["ls", 0], ["ds", 0], ["freqd", 0], ["0", 0], ["201", 0], ["for", 0], ["d", 0], ["in", 0], ["ds", 0], ["freqd", 0], ["d", 0], ["1", 0], ["lds", 0], ["list", 0], ["zip", 0], ["ls", 0], ["ds", 0], ["lds", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["prevl", 0], ["0", 0], ["ni", 0], ["0", 0], ["record", 0], ["float", 0], ["inf", 0], ["cost", 0], ["long", 0], ["0", 0], ["cost", 0], ["me", 0], ["0", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["lds", 0], ["if", 0], ["prevl", 0], ["l", 0], ["n", 0], ["ni", 0], ["record", 0], ["min", 0], ["record", 0], ["cost", 0], ["long", 0], ["calc", 0], ["cost", 0], ["ni", 0], ["n", 0], ["freqd", 0], ["prevl", 0], ["l", 0], ["ni", 0], ["0", 0], ["cost", 0], ["long", 0], ["cost", 0], ["me", 0], ["if", 0], ["cost", 0], ["long", 0], ["record", 0], ["return", 0], ["record", 0], ["cost", 0], ["me", 0], ["0", 0], ["freqd", 0], ["d", 0], ["1", 0], ["cost", 0], ["me", 0], ["d", 0], ["ni", 0], ["1", 0], ["record", 0], ["min", 0], ["record", 0], ["cost", 0], ["long", 0], ["return", 0], ["record", 0], ["def", 0], ["calc", 0], ["cost", 0], ["ni", 0], ["n", 0], ["freqd", 0], ["if", 0], ["n", 0], ["ni", 0], ["return", 0], ["0", 0], ["cost", 0], ["0", 0], ["for", 0], ["d", 0], ["f", 0], ["in", 0], ["enumerate", 0], ["freqd", 0], ["if", 0], ["n", 0], ["f", 0], ["ni", 0], ["cost", 0], ["f", 0], ["d", 0], ["n", 0], ["f", 0], ["else", 0], ["cost", 0], ["n", 0], ["ni", 0], ["1", 0], ["d", 0], ["return", 0], ["cost", 0], ["return", 0], ["float", 0], ["inf", 0], ["n", 0], ["ls", 0], ["ds", 0], ["read", 0], ["data", 0], ["print", 0], ["solve", 0], ["n", 0], ["ls", 0], ["ds", 0], ["def", 0], ["main", 0], ["dd", 0], ["res", 0], ["input", 0], ["0", 0], ["he", 0], ["list", 0], ["zip", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["h", 0], ["e", 0], ["in", 0], ["he", 0], ["le", 0], ["x", 0], ["dd", 0], ["get", 0], ["h", 0], ["1", 0], ["0", 0], ["dd", 0], ["h", 0], ["le", 0], ["1", 0], ["x", 0], ["e", 0], ["he", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["1", 0], ["reverse", 0], ["true", 0], ["for", 0], ["h", 0], ["le", 0], ["x", 0], ["in", 0], ["list", 0], ["dd", 0], ["items", 0], ["if", 0], ["le", 0], ["for", 0], ["h1", 0], ["e", 0], ["in", 0], ["he", 0], ["if", 0], ["h1", 0], ["h", 0], ["x", 0], ["e", 0], ["le", 0], ["1", 0], ["if", 0], ["not", 0], ["le", 0], ["break", 0], ["if", 0], ["res", 0], ["x", 0], ["res", 0], ["x", 0], ["print", 0], ["sum", 0], ["e", 0], ["for", 0], ["h", 0], ["e", 0], ["in", 0], ["he", 0], ["res", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["inf", 0], ["1", 0], ["arr", 0], ["0", 0], ["n", 0], ["d", 0], ["0", 0], ["201", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["e", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["arr", 0], ["i", 0], ["l", 0], ["i", 0], ["e", 0], ["i", 0], ["s", 0], ["e", 0], ["i", 0], ["d", 0], ["e", 0], ["i", 0], ["1", 0], ["l", 0], ["e", 0], ["ans", 0], ["inf", 0], ["3", 0], ["ans", 0], ["2", 0], ["10", 0], ["10", 0], ["p", 0], ["arr", 0], ["1", 0], ["0", 0], ["k", 0], ["0", 0], ["0", 0], ["arr", 0], ["sort", 0], ["arr", 0], ["1", 0], ["1", 0], ["arr", 0], ["e", 0], ["0", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["if", 0], ["arr", 0], ["i", 0], ["0", 0], ["p", 0], ["c", 0], ["1", 0], ["e", 0], ["arr", 0], ["i", 0], ["1", 0], ["d", 0], ["arr", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["if", 0], ["c", 0], ["1", 0], ["ans", 0], ["0", 0], ["max", 0], ["ans", 0], ["0", 0], ["e", 0], ["elif", 0], ["c", 0], ["2", 0], ["ans", 0], ["1", 0], ["max", 0], ["ans", 0], ["1", 0], ["arr", 0], ["i", 0], ["1", 0], ["1", 0], ["arr", 0], ["i", 0], ["2", 0], ["1", 0], ["if", 0], ["c", 0], ["2", 0], ["mx", 0], ["c", 0], ["c", 0], ["1", 0], ["eng", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["n", 0], ["mx", 0], ["ans", 0], ["2", 0], ["min", 0], ["ans", 0], ["2", 0], ["eng", 0], ["else", 0], ["g", 0], ["n", 0], ["mx", 0], ["k", 0], ["0", 0], ["j", 0], ["1", 0], ["while", 0], ["j", 0], ["201", 0], ["and", 0], ["g", 0], ["0", 0], ["if", 0], ["d", 0], ["j", 0], ["0", 0], ["if", 0], ["g", 0], ["d", 0], ["j", 0], ["eng", 0], ["d", 0], ["j", 0], ["j", 0], ["g", 0], ["d", 0], ["j", 0], ["else", 0], ["eng", 0], ["g", 0], ["j", 0], ["g", 0], ["0", 0], ["j", 0], ["1", 0], ["if", 0], ["g", 0], ["0", 0], ["ans", 0], ["2", 0], ["min", 0], ["ans", 0], ["2", 0], ["eng", 0], ["k", 0], ["0", 0], ["c", 0], ["k", 0], ["1", 0], ["e", 0], ["c", 0], ["1", 0], ["e", 0], ["arr", 0], ["i", 0], ["1", 0], ["d", 0], ["arr", 0], ["i", 0], ["1", 0], ["1", 0], ["p", 0], ["arr", 0], ["i", 0], ["0", 0], ["mn", 0], ["10", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["ans", 0], ["i", 0], ["s", 0], ["ans", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["ans", 0], ["i", 0], ["1", 0], ["and", 0], ["mn", 0], ["ans", 0], ["i", 0], ["mn", 0], ["ans", 0], ["i", 0], ["if", 0], ["mn", 0], ["10", 0], ["10", 0], ["print", 0], ["mn", 0], ["else", 0], ["print", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["lengths", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["costs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["length", 0], ["to", 0], ["sum", 0], ["length", 0], ["to", 0], ["count", 0], ["cost", 0], ["to", 0], ["lengths", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["length", 0], ["cost", 0], ["lengths", 0], ["i", 0], ["costs", 0], ["i", 0], ["sum", 0], ["cost", 0], ["length", 0], ["to", 0], ["sum", 0], ["length", 0], ["length", 0], ["to", 0], ["sum", 0], ["setdefault", 0], ["length", 0], ["0", 0], ["cost", 0], ["length", 0], ["to", 0], ["count", 0], ["length", 0], ["length", 0], ["to", 0], ["count", 0], ["setdefault", 0], ["length", 0], ["0", 0], ["1", 0], ["cost", 0], ["to", 0], ["lengths", 0], ["setdefault", 0], ["cost", 0], ["append", 0], ["length", 0], ["length", 0], ["set", 0], ["set", 0], ["lengths", 0], ["for", 0], ["lengths", 0], ["in", 0], ["list", 0], ["cost", 0], ["to", 0], ["lengths", 0], ["values", 0], ["lengths", 0], ["sort", 0], ["unique", 0], ["costs", 0], ["list", 0], ["reversed", 0], ["sorted", 0], ["cost", 0], ["to", 0], ["lengths", 0], ["keys", 0], ["best", 0], ["1", 0], ["for", 0], ["length", 0], ["in", 0], ["length", 0], ["set", 0], ["total", 0], ["sum", 0], ["length", 0], ["to", 0], ["sum", 0], ["length", 0], ["seek", 0], ["length", 0], ["to", 0], ["count", 0], ["length", 0], ["1", 0], ["if", 0], ["seek", 0], ["0", 0], ["for", 0], ["cost", 0], ["in", 0], ["unique", 0], ["costs", 0], ["for", 0], ["x", 0], ["in", 0], ["cost", 0], ["to", 0], ["lengths", 0], ["cost", 0], ["if", 0], ["x", 0], ["length", 0], ["break", 0], ["total", 0], ["cost", 0], ["seek", 0], ["1", 0], ["if", 0], ["seek", 0], ["0", 0], ["break", 0], ["if", 0], ["seek", 0], ["0", 0], ["break", 0], ["if", 0], ["best", 0], ["1", 0], ["or", 0], ["total", 0], ["best", 0], ["best", 0], ["total", 0], ["print", 0], ["best", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["557c", 0], ["table", 0], ["py", 0], ["codeforces", 0], ["com", 0], ["557c", 0], ["table", 0], ["quiz", 0], ["copyright", 0], ["c", 0], ["2015", 0], ["sergey", 0], ["licensed", 1030], ["under", 2296], ["the", 2296], ["apache", 2287], ["license", 2423], ["version", 2423], ["2", 2422], ["0", 2443], ["the", 2781], ["license", 2778], ["you", 2615], ["may", 2575], ["not", 2575], ["use", 2562], ["this", 2550], ["file", 2549], ["except", 2569], ["in", 2572], ["compliance", 2563], ["with", 2161], ["the", 2155], ["license", 1909], ["you", 1915], ["may", 1915], ["obtain", 1913], ["a", 1913], ["copy", 1910], ["of", 1547], ["the", 1547], ["license", 1547], ["at", 1549], ["http", 1617], ["www", 1625], ["apache", 1626], ["org", 1625], ["licenses", 1626], ["license", 1626], ["2", 1610], ["0", 1610], ["unless", 1732], ["required", 1736], ["by", 1734], ["applicable", 1734], ["law", 1734], ["or", 1733], ["agreed", 1736], ["to", 1700], ["in", 1700], ["writing", 1699], ["software", 1949], ["distributed", 1739], ["under", 1750], ["the", 1750], ["license", 1753], ["is", 1765], ["distributed", 1765], ["on", 1853], ["an", 1851], ["as", 1853], ["is", 1854], ["basis", 1806], ["without", 1808], ["warranties", 1806], ["or", 1805], ["conditions", 1805], ["of", 2051], ["any", 2052], ["kind", 2052], ["either", 1805], ["express", 1787], ["or", 1788], ["implied", 1788], ["see", 1827], ["the", 1826], ["license", 0], ["for", 0], ["the", 0], ["specific", 0], ["language", 0], ["governing", 0], ["permissions", 0], ["and", 0], ["limitations", 0], ["under", 0], ["the", 0], ["license", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["integer", 0], ["n", 0], ["the", 0], ["initial", 0], ["number", 0], ["of", 0], ["legs", 0], ["in", 0], ["the", 0], ["table", 0], ["arthur", 0], ["bought", 0], ["the", 0], ["second", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["a", 0], ["sequence", 0], ["of", 0], ["n", 0], ["integers", 0], ["li", 0], ["where", 0], ["li", 0], ["is", 0], ["equal", 0], ["to", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["leg", 0], ["of", 0], ["the", 0], ["table", 0], ["the", 0], ["third", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["a", 0], ["sequence", 0], ["of", 0], ["n", 0], ["integers", 0], ["di", 0], ["where", 0], ["di", 0], ["is", 0], ["the", 0], ["number", 0], ["of", 0], ["energy", 0], ["units", 0], ["that", 0], ["arthur", 0], ["spends", 0], ["on", 0], ["removing", 0], ["the", 0], ["i", 0], ["th", 0], ["leg", 0], ["off", 0], ["the", 0], ["table", 0], ["output", 0], ["print", 0], ["a", 0], ["single", 0], ["integer", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["energy", 0], ["units", 0], ["that", 0], ["arthur", 0], ["needs", 0], ["to", 0], ["spend", 0], ["in", 0], ["order", 0], ["to", 0], ["make", 0], ["the", 0], ["table", 0], ["stable", 0], ["standard", 0], ["libraries", 0], ["import", 0], ["unittest", 0], ["import", 0], ["sys", 0], ["import", 0], ["re", 0], ["import", 0], ["random", 0], ["import", 0], ["bisect", 0], ["additional", 0], ["libraries", 0], ["table", 0], ["class", 0], ["class", 0], ["table", 0], ["table", 0], ["representation", 0], ["lim", 0], ["201", 0], ["def", 0], ["init", 0], ["self", 0], ["args", 0], ["default", 0], ["constructor", 0], ["self", 0], ["legs", 0], ["args", 0], ["0", 0], ["self", 0], ["energy", 0], ["args", 0], ["1", 0], ["self", 0], ["n", 0], ["len", 0], ["self", 0], ["legs", 0], ["sort", 0], ["lists", 0], ["self", 0], ["srt", 0], ["sorted", 0], ["l", 0], ["e", 0], ["for", 0], ["l", 0], ["e", 0], ["in", 0], ["zip", 0], ["self", 0], ["legs", 0], ["self", 0], ["energy", 0], ["self", 0], ["legs", 0], ["self", 0], ["energy", 0], ["for", 0], ["n", 0], ["in", 0], ["self", 0], ["srt", 0], ["self", 0], ["legs", 0], ["append", 0], ["n", 0], ["0", 0], ["self", 0], ["energy", 0], ["append", 0], ["n", 0], ["1", 0], ["prepare", 0], ["accumulator", 0], ["variables", 0], ["self", 0], ["itot", 0], ["0", 0], ["self", 0], ["ieltot", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["self", 0], ["lim", 0], ["self", 0], ["ielprev", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["self", 0], ["lim", 0], ["self", 0], ["ielprev", 0], ["eng", 0], ["0", 0], ["self", 0], ["ires", 0], ["eng", 0], ["sys", 0], ["maxsize", 0], ["def", 0], ["get", 0], ["new", 0], ["layer", 0], ["info", 0], ["self", 0], ["legs", 0], ["energy", 0], ["ll", 0], ["len", 0], ["legs", 0], ["for", 0], ["i", 0], ["l", 0], ["in", 0], ["enumerate", 0], ["legs", 0], ["self", 0], ["ilen", 0], ["l", 0], ["e", 0], ["energy", 0], ["i", 0], ["if", 0], ["i", 0], ["0", 0], ["self", 0], ["itop", 0], ["eng", 0], ["sum", 0], ["energy", 0], ["if", 0], ["i", 0], ["0", 0], ["or", 0], ["self", 0], ["ilen", 0], ["prev", 0], ["self", 0], ["irep", 0], ["0", 0], ["self", 0], ["ielsum", 0], ["eng", 0], ["0", 0], ["self", 0], ["ielprev", 0], ["list", 0], ["self", 0], ["ieltot", 0], ["self", 0], ["irep", 0], ["1", 0], ["self", 0], ["itop", 0], ["eng", 0], ["e", 0], ["self", 0], ["ielprev", 0], ["eng", 0], ["e", 0], ["self", 0], ["ielsum", 0], ["eng", 0], ["e", 0], ["self", 0], ["ieltot", 0], ["e", 0], ["1", 0], ["if", 0], ["i", 0], ["ll", 0], ["1", 0], ["or", 0], ["legs", 0], ["i", 0], ["1", 0], ["self", 0], ["ilen", 0], ["self", 0], ["irem", 0], ["self", 0], ["irep", 0], ["1", 0], ["self", 0], ["irem", 0], ["eng", 0], ["self", 0], ["ielprev", 0], ["eng", 0], ["self", 0], ["ielsum", 0], ["eng", 0], ["if", 0], ["self", 0], ["irem", 0], ["0", 0], ["sumh", 0], ["self", 0], ["energyl", 0], ["sum", 0], ["high", 0], ["self", 0], ["ielprev", 0], ["self", 0], ["irem", 0], ["self", 0], ["irem", 0], ["eng", 0], ["sumh", 0], ["summ", 0], ["self", 0], ["itop", 0], ["eng", 0], ["self", 0], ["irem", 0], ["eng", 0], ["self", 0], ["ires", 0], ["eng", 0], ["min", 0], ["self", 0], ["ires", 0], ["eng", 0], ["summ", 0], ["yield", 0], ["prev", 0], ["self", 0], ["ilen", 0], ["def", 0], ["energyl", 0], ["sum", 0], ["high", 0], ["self", 0], ["l", 0], ["n", 0], ["result", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["1", 0], ["1", 0], ["1", 0], ["e", 0], ["l", 0], ["i", 0], ["if", 0], ["e", 0], ["0", 0], ["continue", 0], ["if", 0], ["n", 0], ["0", 0], ["break", 0], ["result", 0], ["i", 0], ["n", 0], ["if", 0], ["e", 0], ["n", 0], ["else", 0], ["e", 0], ["n", 0], ["e", 0], ["return", 0], ["result", 0], ["def", 0], ["calculate", 0], ["self", 0], ["main", 0], ["calcualtion", 0], ["function", 0], ["of", 0], ["the", 0], ["class", 0], ["iter", 0], ["self", 0], ["get", 0], ["new", 0], ["layer", 0], ["info", 0], ["self", 0], ["legs", 0], ["self", 0], ["energy", 0], ["for", 0], ["g", 0], ["in", 0], ["iter", 0], ["pass", 0], ["result", 0], ["self", 0], ["ires", 0], ["eng", 0], ["return", 0], ["str", 0], ["result", 0], ["executable", 0], ["code", 0], ["def", 0], ["get", 0], ["inputs", 0], ["test", 0], ["inputs", 0], ["none", 0], ["it", 0], ["iter", 0], ["test", 0], ["inputs", 0], ["split", 0], ["n", 0], ["if", 0], ["test", 0], ["inputs", 0], ["else", 0], ["none", 0], ["def", 0], ["uinput", 0], ["unit", 0], ["testable", 0], ["input", 0], ["function", 0], ["wrapper", 0], ["if", 0], ["it", 0], ["return", 0], ["next", 0], ["it", 0], ["else", 0], ["return", 0], ["input", 0], ["getting", 0], ["string", 0], ["inputs", 0], ["place", 0], ["all", 0], ["uinput", 0], ["calls", 0], ["here", 0], ["num", 0], ["int", 0], ["uinput", 0], ["str1", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["uinput", 0], ["split", 0], ["str2", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["uinput", 0], ["split", 0], ["decoding", 0], ["inputs", 0], ["into", 0], ["a", 0], ["list", 0], ["inputs", 0], ["inputs", 0], ["append", 0], ["str1", 0], ["inputs", 0], ["append", 0], ["str2", 0], ["return", 0], ["inputs", 0], ["def", 0], ["calculate", 0], ["test", 0], ["inputs", 0], ["none", 0], ["base", 0], ["class", 0], ["calculate", 0], ["method", 0], ["wrapper", 0], ["return", 0], ["table", 0], ["get", 0], ["inputs", 0], ["test", 0], ["inputs", 0], ["calculate", 0], ["unit", 0], ["tests", 0], ["class", 0], ["unittests", 0], ["unittest", 0], ["testcase", 0], ["def", 0], ["test", 0], ["sample", 0], ["tests", 0], ["self", 0], ["quiz", 0], ["sample", 0], ["tests", 0], ["add", 0], ["n", 0], ["to", 0], ["separate", 0], ["lines", 0], ["my", 0], ["tests", 0], ["imax", 0], ["100000", 0], ["test", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["imax", 0], ["test", 0], ["str", 0], ["i", 0], ["test", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["imax", 0], ["test", 0], ["str", 0], ["random", 0], ["randint", 0], ["1", 0], ["200", 0], ["calculate", 0], ["test", 0], ["sample", 0], ["test", 0], ["1", 0], ["test", 0], ["2", 0], ["n1", 0], ["5", 0], ["n3", 0], ["2", 0], ["self", 0], ["assertequal", 0], ["calculate", 0], ["test", 0], ["2", 0], ["self", 0], ["assertequal", 0], ["get", 0], ["inputs", 0], ["test", 0], ["1", 0], ["5", 0], ["3", 0], ["2", 0], ["other", 0], ["tests", 0], ["test", 0], ["3", 0], ["n2", 0], ["4", 0], ["4", 0], ["n1", 0], ["1", 0], ["1", 0], ["self", 0], ["assertequal", 0], ["calculate", 0], ["test", 0], ["0", 0], ["test", 0], ["6", 0], ["n2", 0], ["2", 0], ["1", 0], ["1", 0], ["3", 0], ["3", 0], ["n4", 0], ["3", 0], ["5", 0], ["5", 0], ["2", 0], ["1", 0], ["self", 0], ["assertequal", 0], ["calculate", 0], ["test", 0], ["8", 0], ["test", 0], ["10", 0], ["n20", 0], ["1", 0], ["15", 0], ["17", 0], ["11", 0], ["2", 0], ["15", 0], ["3", 0], ["16", 0], ["3", 0], ["n", 0], ["129", 0], ["114", 0], ["183", 0], ["94", 0], ["169", 0], ["16", 0], ["18", 0], ["104", 0], ["49", 0], ["146", 0], ["self", 0], ["assertequal", 0], ["calculate", 0], ["test", 0], ["652", 0], ["def", 0], ["test", 0], ["table", 0], ["class", 0], ["basic", 0], ["functions", 0], ["self", 0], ["table", 0], ["class", 0], ["basic", 0], ["functions", 0], ["testing", 0], ["constructor", 0], ["test", 0], ["d", 0], ["table", 0], ["2", 0], ["2", 0], ["1", 0], ["1", 0], ["3", 0], ["3", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["1", 0], ["1", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["legs", 0], ["0", 0], ["1", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["energy", 0], ["0", 0], ["3", 0], ["get", 0], ["layer", 0], ["info", 0], ["length", 0], ["number", 0], ["of", 0], ["legs", 0], ["energy", 0], ["list", 0], ["energy", 0], ["sum", 0], ["iter", 0], ["d", 0], ["get", 0], ["new", 0], ["layer", 0], ["info", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["4", 0], ["5", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["1", 0], ["1", 0], ["next", 0], ["iter", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["itop", 0], ["eng", 0], ["8", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["ilen", 0], ["1", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irep", 0], ["2", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irem", 0], ["1", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irem", 0], ["eng", 0], ["0", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["ires", 0], ["eng", 0], ["8", 0], ["next", 0], ["iter", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["ilen", 0], ["2", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irep", 0], ["2", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irem", 0], ["1", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irem", 0], ["eng", 0], ["2", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["ires", 0], ["eng", 0], ["4", 0], ["get", 0], ["layer", 0], ["info", 0], ["length", 0], ["number", 0], ["of", 0], ["legs", 0], ["energy", 0], ["list", 0], ["energy", 0], ["sum", 0], ["d", 0], ["table", 0], ["iter", 0], ["d", 0], ["get", 0], ["new", 0], ["layer", 0], ["info", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["5", 0], ["5", 0], ["4", 0], ["3", 0], ["2", 0], ["1", 0], ["next", 0], ["iter", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["ilen", 0], ["1", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irep", 0], ["2", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irem", 0], ["1", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irem", 0], ["eng", 0], ["0", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["ires", 0], ["eng", 0], ["10", 0], ["next", 0], ["iter", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["ilen", 0], ["2", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irep", 0], ["2", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irem", 0], ["1", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irem", 0], ["eng", 0], ["5", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["ires", 0], ["eng", 0], ["8", 0], ["next", 0], ["iter", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["ilen", 0], ["3", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irep", 0], ["2", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irem", 0], ["1", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["irem", 0], ["eng", 0], ["12", 0], ["self", 0], ["assertequal", 0], ["d", 0], ["ires", 0], ["eng", 0], ["8", 0], ["def", 0], ["starting", 0], ["point", 0], ["avoiding", 0], ["recursion", 0], ["limitaions", 0], ["sys", 0], ["setrecursionlimit", 0], ["100000", 0], ["if", 0], ["sys", 0], ["argv", 0], ["1", 0], ["ut", 0], ["unittest", 0], ["main", 0], ["argv", 0], ["print", 0], ["the", 0], ["result", 0], ["string", 0], ["print", 0], ["calculate", 0], ["starting", 0], ["point", 0], ["rr", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["res", 0], ["he", 0], ["input", 0], ["0", 0], ["list", 0], ["zip", 0], ["rr", 0], ["rr", 0], ["for", 0], ["h", 0], ["e", 0], ["in", 0], ["he", 0], ["f", 0], ["x", 0], ["d", 0], ["get", 0], ["h", 0], ["1", 0], ["0", 0], ["d", 0], ["h", 0], ["f", 0], ["1", 0], ["x", 0], ["e", 0], ["he", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["1", 0], ["reverse", 0], ["true", 0], ["for", 0], ["h", 0], ["f", 0], ["x", 0], ["in", 0], ["d", 0], ["items", 0], ["if", 0], ["not", 0], ["f", 0], ["res", 0], ["max", 0], ["x", 0], ["res", 0], ["continue", 0], ["for", 0], ["h1", 0], ["e", 0], ["in", 0], ["he", 0], ["if", 0], ["h1", 0], ["h", 0], ["x", 0], ["e", 0], ["f", 0], ["1", 0], ["if", 0], ["not", 0], ["f", 0], ["break", 0], ["res", 0], ["max", 0], ["x", 0], ["res", 0], ["print", 0], ["sum", 0], ["e", 0], ["for", 0], ["h", 0], ["e", 0], ["in", 0], ["he", 0], ["res", 0], ["rr", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["res", 0], ["he", 0], ["input", 0], ["0", 0], ["list", 0], ["zip", 0], ["rr", 0], ["rr", 0], ["for", 0], ["h", 0], ["e", 0], ["in", 0], ["he", 0], ["f", 0], ["x", 0], ["d", 0], ["get", 0], ["h", 0], ["1", 0], ["0", 0], ["d", 0], ["h", 0], ["f", 0], ["1", 0], ["x", 0], ["e", 0], ["he", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["1", 0], ["reverse", 0], ["true", 0], ["for", 0], ["h", 0], ["f", 0], ["x", 0], ["in", 0], ["d", 0], ["items", 0], ["if", 0], ["not", 0], ["f", 0], ["res", 0], ["max", 0], ["x", 0], ["res", 0], ["continue", 0], ["for", 0], ["h1", 0], ["e", 0], ["in", 0], ["he", 0], ["if", 0], ["h1", 0], ["h", 0], ["x", 0], ["e", 0], ["f", 0], ["1", 0], ["if", 0], ["not", 0], ["f", 0], ["break", 0], ["res", 0], ["max", 0], ["x", 0], ["res", 0], ["print", 0], ["sum", 0], ["e", 0], ["for", 0], ["h", 0], ["e", 0], ["in", 0], ["he", 0], ["res", 0], ["rr", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["res", 0], ["he", 0], ["input", 0], ["0", 0], ["list", 0], ["zip", 0], ["rr", 0], ["rr", 0], ["for", 0], ["h", 0], ["e", 0], ["in", 0], ["he", 0], ["f", 0], ["x", 0], ["d", 0], ["get", 0], ["h", 0], ["1", 0], ["0", 0], ["d", 0], ["h", 0], ["f", 0], ["1", 0], ["x", 0], ["e", 0], ["he", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["1", 0], ["reverse", 0], ["true", 0], ["for", 0], ["h", 0], ["f", 0], ["x", 0], ["in", 0], ["list", 0], ["d", 0], ["items", 0], ["if", 0], ["not", 0], ["f", 0], ["res", 0], ["max", 0], ["x", 0], ["res", 0], ["continue", 0], ["for", 0], ["h1", 0], ["e", 0], ["in", 0], ["he", 0], ["if", 0], ["h1", 0], ["h", 0], ["x", 0], ["e", 0], ["f", 0], ["1", 0], ["if", 0], ["not", 0], ["f", 0], ["break", 0], ["res", 0], ["max", 0], ["x", 0], ["res", 0], ["print", 0], ["sum", 0], ["e", 0], ["for", 0], ["h", 0], ["e", 0], ["in", 0], ["he", 0], ["res", 0], ["author", 0], ["arif", 0], ["ahmad", 0], ["date", 0], ["algo", 0], ["difficulty", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["leg", 0], ["int", 0], ["for", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["d", 0], ["int", 0], ["for", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["pairedld", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["leg", 0], ["d", 0], ["pairedld", 0], ["append", 0], ["x", 0], ["y", 0], ["pairedld", 0], ["sorted", 0], ["pairedld", 0], ["legset", 0], ["set", 0], ["suffixsum", 0], ["dict", 0], ["legfreq", 0], ["dict", 0], ["for", 0], ["length", 0], ["energy", 0], ["in", 0], ["zip", 0], ["leg", 0], ["d", 0], ["legset", 0], ["add", 0], ["length", 0], ["if", 0], ["length", 0], ["in", 0], ["suffixsum", 0], ["suffixsum", 0], ["length", 0], ["energy", 0], ["legfreq", 0], ["length", 0], ["1", 0], ["else", 0], ["suffixsum", 0], ["length", 0], ["energy", 0], ["legfreq", 0], ["length", 0], ["1", 0], ["leglist", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["legset", 0], ["leglist", 0], ["sorted", 0], ["leglist", 0], ["reverse", 0], ["true", 0], ["total", 0], ["0", 0], ["for", 0], ["length", 0], ["in", 0], ["leglist", 0], ["suffixsum", 0], ["length", 0], ["total", 0], ["total", 0], ["suffixsum", 0], ["length", 0], ["ans", 0], ["int", 0], ["2e7", 0], ["toremove", 0], ["0", 0], ["available", 0], ["0", 0], ["removable", 0], ["0", 0], ["201", 0], ["leglist", 0], ["sorted", 0], ["leglist", 0], ["listlen", 0], ["len", 0], ["leglist", 0], ["idx", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["listlen", 0], ["curr", 0], ["0", 0], ["if", 0], ["i", 0], ["1", 0], ["listlen", 0], ["curr", 0], ["suffixsum", 0], ["leglist", 0], ["i", 0], ["1", 0], ["toremove", 0], ["available", 0], ["legfreq", 0], ["leglist", 0], ["i", 0], ["1", 0], ["if", 0], ["toremove", 0], ["0", 0], ["toremove", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["201", 0], ["if", 0], ["removable", 0], ["j", 0], ["0", 0], ["and", 0], ["removable", 0], ["j", 0], ["toremove", 0], ["curr", 0], ["removable", 0], ["j", 0], ["j", 0], ["toremove", 0], ["removable", 0], ["j", 0], ["elif", 0], ["removable", 0], ["j", 0], ["toremove", 0], ["curr", 0], ["toremove", 0], ["j", 0], ["toremove", 0], ["0", 0], ["if", 0], ["toremove", 0], ["0", 0], ["break", 0], ["available", 0], ["legfreq", 0], ["leglist", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["legfreq", 0], ["leglist", 0], ["i", 0], ["removable", 0], ["pairedld", 0], ["idx", 0], ["1", 0], ["1", 0], ["idx", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["curr", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["rr", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["res", 0], ["he", 0], ["input", 0], ["0", 0], ["list", 0], ["zip", 0], ["rr", 0], ["rr", 0], ["for", 0], ["h", 0], ["e", 0], ["in", 0], ["he", 0], ["f", 0], ["x", 0], ["d", 0], ["get", 0], ["h", 0], ["1", 0], ["0", 0], ["d", 0], ["h", 0], ["f", 0], ["1", 0], ["x", 0], ["e", 0], ["he", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["1", 0], ["reverse", 0], ["true", 0], ["for", 0], ["h", 0], ["f", 0], ["x", 0], ["in", 0], ["d", 0], ["items", 0], ["if", 0], ["not", 0], ["f", 0], ["res", 0], ["max", 0], ["x", 0], ["res", 0], ["continue", 0], ["for", 0], ["h1", 0], ["e", 0], ["in", 0], ["he", 0], ["if", 0], ["h1", 0], ["h", 0], ["x", 0], ["e", 0], ["f", 0], ["1", 0], ["if", 0], ["not", 0], ["f", 0], ["break", 0], ["res", 0], ["max", 0], ["x", 0], ["res", 0], ["print", 0], ["sum", 0], ["e", 0], ["for", 0], ["h", 0], ["e", 0], ["in", 0], ["he", 0], ["res", 0], ["f", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["p", 0], ["m", 0], ["s", 0], ["input", 0], ["0", 0], ["sorted", 0], ["zip", 0], ["f", 0], ["f", 0], ["key", 0], ["lambda", 0], ["q", 0], ["q", 0], ["1", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["k", 0], ["d", 0], ["p", 0], ["get", 0], ["l", 0], ["1", 0], ["0", 0], ["p", 0], ["l", 0], ["k", 0], ["1", 0], ["d", 0], ["d", 0], ["for", 0], ["l", 0], ["k", 0], ["d", 0], ["in", 0], ["p", 0], ["items", 0], ["if", 0], ["k", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["if", 0], ["l", 0], ["l", 0], ["d", 0], ["d", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["m", 0], ["max", 0], ["d", 0], ["m", 0], ["print", 0], ["sum", 0], ["d", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["m", 0], ["f", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["n", 0], ["1", 0], ["f", 0], ["s", 0], ["sorted", 0], ["zip", 0], ["f", 0], ["f", 0], ["key", 0], ["lambda", 0], ["q", 0], ["q", 0], ["0", 0], ["t", 0], ["0", 0], ["201", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["t", 0], ["d", 0], ["1", 0], ["j", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["201", 0], ["if", 0], ["t", 0], ["i", 0], ["j", 0], ["reverse", 0], ["s", 0], ["sum", 0], ["i", 0], ["t", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["j", 0], ["l", 0], ["d", 0], ["s", 0], ["pop", 0], ["t", 0], ["d", 0], ["1", 0], ["s", 0], ["reverse", 0], ["s", 0], ["append", 0], ["0", 0], ["0", 0], ["m", 0], ["0", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["if", 0], ["l", 0], ["l", 0], ["l", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["j", 0], ["if", 0], ["t", 0], ["i", 0], ["k", 0], ["2", 0], ["d", 0], ["i", 0], ["k", 0], ["1", 0], ["break", 0], ["d", 0], ["i", 0], ["t", 0], ["i", 0], ["k", 0], ["t", 0], ["i", 0], ["m", 0], ["max", 0], ["m", 0], ["d", 0], ["k", 0], ["d", 0], ["0", 0], ["k", 0], ["1", 0], ["d", 0], ["d", 0], ["t", 0], ["d", 0], ["1", 0], ["if", 0], ["not", 0], ["t", 0], ["d", 0], ["j", 0], ["remove", 0], ["d", 0], ["print", 0], ["s", 0], ["m", 0], ["f", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["p", 0], ["m", 0], ["s", 0], ["input", 0], ["0", 0], ["sorted", 0], ["zip", 0], ["f", 0], ["f", 0], ["key", 0], ["lambda", 0], ["q", 0], ["q", 0], ["1", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["k", 0], ["d", 0], ["p", 0], ["get", 0], ["l", 0], ["1", 0], ["0", 0], ["p", 0], ["l", 0], ["k", 0], ["1", 0], ["d", 0], ["d", 0], ["for", 0], ["l", 0], ["k", 0], ["d", 0], ["in", 0], ["list", 0], ["p", 0], ["items", 0], ["if", 0], ["k", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["if", 0], ["l", 0], ["l", 0], ["d", 0], ["d", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["m", 0], ["max", 0], ["d", 0], ["m", 0], ["print", 0], ["sum", 0], ["d", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["m", 0], ["f", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["p", 0], ["m", 0], ["s", 0], ["input", 0], ["0", 0], ["sorted", 0], ["zip", 0], ["f", 0], ["f", 0], ["key", 0], ["lambda", 0], ["q", 0], ["q", 0], ["1", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["k", 0], ["d", 0], ["p", 0], ["get", 0], ["l", 0], ["1", 0], ["0", 0], ["p", 0], ["l", 0], ["k", 0], ["1", 0], ["d", 0], ["d", 0], ["for", 0], ["l", 0], ["k", 0], ["d", 0], ["in", 0], ["list", 0], ["p", 0], ["items", 0], ["if", 0], ["k", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["if", 0], ["l", 0], ["l", 0], ["d", 0], ["d", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["m", 0], ["max", 0], ["d", 0], ["m", 0], ["print", 0], ["sum", 0], ["d", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["m", 0], ["f", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["p", 0], ["m", 0], ["s", 0], ["input", 0], ["0", 0], ["sorted", 0], ["zip", 0], ["f", 0], ["f", 0], ["key", 0], ["lambda", 0], ["q", 0], ["q", 0], ["1", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["k", 0], ["d", 0], ["p", 0], ["get", 0], ["l", 0], ["1", 0], ["0", 0], ["p", 0], ["l", 0], ["k", 0], ["1", 0], ["d", 0], ["d", 0], ["for", 0], ["l", 0], ["k", 0], ["d", 0], ["in", 0], ["list", 0], ["p", 0], ["items", 0], ["if", 0], ["k", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["if", 0], ["l", 0], ["l", 0], ["d", 0], ["d", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["m", 0], ["max", 0], ["d", 0], ["m", 0], ["print", 0], ["sum", 0], ["d", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["m", 0], ["f", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["p", 0], ["m", 0], ["s", 0], ["input", 0], ["0", 0], ["sorted", 0], ["zip", 0], ["f", 0], ["f", 0], ["key", 0], ["lambda", 0], ["q", 0], ["q", 0], ["1", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["k", 0], ["d", 0], ["p", 0], ["get", 0], ["l", 0], ["1", 0], ["0", 0], ["p", 0], ["l", 0], ["k", 0], ["1", 0], ["d", 0], ["d", 0], ["for", 0], ["l", 0], ["k", 0], ["d", 0], ["in", 0], ["list", 0], ["p", 0], ["items", 0], ["if", 0], ["k", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["if", 0], ["l", 0], ["l", 0], ["d", 0], ["d", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["m", 0], ["max", 0], ["d", 0], ["m", 0], ["print", 0], ["sum", 0], ["d", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["m", 0], ["f", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["p", 0], ["m", 0], ["s", 0], ["input", 0], ["0", 0], ["sorted", 0], ["zip", 0], ["f", 0], ["f", 0], ["key", 0], ["lambda", 0], ["q", 0], ["q", 0], ["1", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["k", 0], ["d", 0], ["p", 0], ["get", 0], ["l", 0], ["1", 0], ["0", 0], ["p", 0], ["l", 0], ["k", 0], ["1", 0], ["d", 0], ["d", 0], ["for", 0], ["l", 0], ["k", 0], ["d", 0], ["in", 0], ["list", 0], ["p", 0], ["items", 0], ["if", 0], ["k", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["if", 0], ["l", 0], ["l", 0], ["d", 0], ["d", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["m", 0], ["max", 0], ["d", 0], ["m", 0], ["print", 0], ["sum", 0], ["d", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["m", 0], ["f", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["p", 0], ["m", 0], ["s", 0], ["input", 0], ["0", 0], ["sorted", 0], ["zip", 0], ["f", 0], ["f", 0], ["key", 0], ["lambda", 0], ["q", 0], ["q", 0], ["1", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["k", 0], ["d", 0], ["p", 0], ["get", 0], ["l", 0], ["1", 0], ["0", 0], ["p", 0], ["l", 0], ["k", 0], ["1", 0], ["d", 0], ["d", 0], ["for", 0], ["l", 0], ["k", 0], ["d", 0], ["in", 0], ["list", 0], ["p", 0], ["items", 0], ["if", 0], ["k", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["if", 0], ["l", 0], ["l", 0], ["d", 0], ["d", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["m", 0], ["max", 0], ["d", 0], ["m", 0], ["print", 0], ["sum", 0], ["d", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["m", 0], ["f", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["p", 0], ["m", 0], ["s", 0], ["input", 0], ["0", 0], ["sorted", 0], ["zip", 0], ["f", 0], ["f", 0], ["key", 0], ["lambda", 0], ["q", 0], ["q", 0], ["1", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["k", 0], ["d", 0], ["p", 0], ["get", 0], ["l", 0], ["1", 0], ["0", 0], ["p", 0], ["l", 0], ["k", 0], ["1", 0], ["d", 0], ["d", 0], ["for", 0], ["l", 0], ["k", 0], ["d", 0], ["in", 0], ["list", 0], ["p", 0], ["items", 0], ["if", 0], ["k", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["if", 0], ["l", 0], ["l", 0], ["d", 0], ["d", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["m", 0], ["max", 0], ["d", 0], ["m", 0], ["print", 0], ["sum", 0], ["d", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["m", 0], ["f", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["p", 0], ["m", 0], ["s", 0], ["input", 0], ["0", 0], ["sorted", 0], ["zip", 0], ["f", 0], ["f", 0], ["key", 0], ["lambda", 0], ["q", 0], ["q", 0], ["1", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["k", 0], ["d", 0], ["p", 0], ["get", 0], ["l", 0], ["1", 0], ["0", 0], ["p", 0], ["l", 0], ["k", 0], ["1", 0], ["d", 0], ["d", 0], ["for", 0], ["l", 0], ["k", 0], ["d", 0], ["in", 0], ["list", 0], ["p", 0], ["items", 0], ["if", 0], ["k", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["if", 0], ["l", 0], ["l", 0], ["d", 0], ["d", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["m", 0], ["max", 0], ["d", 0], ["m", 0], ["print", 0], ["sum", 0], ["d", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["m", 0], ["f", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["p", 0], ["m", 0], ["s", 0], ["input", 0], ["0", 0], ["sorted", 0], ["zip", 0], ["f", 0], ["f", 0], ["key", 0], ["lambda", 0], ["q", 0], ["q", 0], ["1", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["k", 0], ["d", 0], ["p", 0], ["get", 0], ["l", 0], ["1", 0], ["0", 0], ["p", 0], ["l", 0], ["k", 0], ["1", 0], ["d", 0], ["d", 0], ["for", 0], ["l", 0], ["k", 0], ["d", 0], ["in", 0], ["list", 0], ["p", 0], ["items", 0], ["if", 0], ["k", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["if", 0], ["l", 0], ["l", 0], ["d", 0], ["d", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["m", 0], ["max", 0], ["d", 0], ["m", 0], ["print", 0], ["sum", 0], ["d", 0], ["for", 0], ["l", 0], ["d", 0], ["in", 0], ["s", 0], ["m", 0], ["made", 0], ["by", 0], ["mostafa", 0], ["khaled", 0], ["n", 0], ["int", 0], ["input", 0], ["legs", 0], ["list", 0], ["zip", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["legs", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["1", 0], ["reverse", 0], ["true", 0], ["print", 0], ["legs", 0], ["cnt", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["legs", 0], ["i", 0], ["1", 0], ["if", 0], ["legs", 0], ["i", 0], ["0", 0], ["not", 0], ["in", 0], ["cnt", 0], ["cnt", 0], ["legs", 0], ["i", 0], ["0", 0], ["1", 0], ["legs", 0], ["i", 0], ["1", 0], ["else", 0], ["cnt", 0], ["legs", 0], ["i", 0], ["0", 0], ["0", 0], ["1", 0], ["cnt", 0], ["legs", 0], ["i", 0], ["0", 0], ["1", 0], ["legs", 0], ["i", 0], ["1", 0], ["temp", 0], ["sorted", 0], ["cnt", 0], ["items", 0], ["mn", 0], ["9999999999999", 0], ["f", 0], ["0", 0], ["while", 0], ["temp", 0], ["l", 0], ["t", 0], ["temp", 0], ["pop", 0], ["c", 0], ["e", 0], ["t", 0], ["s", 0], ["e", 0], ["val", 0], ["s", 0], ["i", 0], ["0", 0], ["count", 0], ["0", 0], ["while", 0], ["count", 0], ["c", 0], ["1", 0], ["if", 0], ["legs", 0], ["i", 0], ["0", 0], ["l", 0], ["count", 0], ["1", 0], ["val", 0], ["legs", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["break", 0], ["print", 0], ["l", 0], ["c", 0], ["e", 0], ["val", 0], ["f", 0], ["if", 0], ["val", 0], ["f", 0], ["mn", 0], ["mn", 0], ["val", 0], ["f", 0], ["f", 0], ["e", 0], ["print", 0], ["mn", 0], ["def", 0], ["buscaenergia", 0], ["perna", 0], ["qtd", 0], ["total", 0], ["0", 0], ["if", 0], ["qtd", 0], ["0", 0], ["return", 0], ["total", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["d", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["v", 0], ["in", 0], ["d", 0], ["i", 0], ["if", 0], ["v", 0], ["perna", 0], ["qtd", 0], ["1", 0], ["total", 0], ["i", 0], ["else", 0], ["break", 0], ["if", 0], ["qtd", 0], ["0", 0], ["break", 0], ["if", 0], ["qtd", 0], ["0", 0], ["break", 0], ["return", 0], ["total", 0], ["n", 0], ["int", 0], ["input", 0], ["tamanhoperna", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["energiaperna", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["201", 0], ["cntperna", 0], ["0", 0], ["100001", 0], ["sumperna", 0], ["0", 0], ["100001", 0], ["cortetotal", 0], ["0", 0], ["maxtam", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["tamanhoperna", 0], ["d", 0], ["energiaperna", 0], ["i", 0], ["append", 0], ["tamanhoperna", 0], ["i", 0], ["sumperna", 0], ["tamanhoperna", 0], ["i", 0], ["energiaperna", 0], ["i", 0], ["cntperna", 0], ["tamanhoperna", 0], ["i", 0], ["1", 0], ["cortetotal", 0], ["energiaperna", 0], ["i", 0], ["maxtam", 0], ["max", 0], ["tamanhoperna", 0], ["i", 0], ["maxtam", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["d", 0], ["d", 0], ["i", 0], ["sort", 0], ["currentmin", 0], ["float", 0], ["inf", 0], ["for", 0], ["perna", 0], ["in", 0], ["tamanhoperna", 0], ["somamesa", 0], ["sumperna", 0], ["perna", 0], ["somamesa", 0], ["buscaenergia", 0], ["perna", 0], ["cntperna", 0], ["perna", 0], ["1", 0], ["currentmin", 0], ["min", 0], ["currentmin", 0], ["cortetotal", 0], ["somamesa", 0], ["print", 0], ["currentmin", 0], ["def", 0], ["buscaenergia", 0], ["perna", 0], ["qtd", 0], ["total", 0], ["0", 0], ["if", 0], ["qtd", 0], ["0", 0], ["return", 0], ["total", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["d", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["v", 0], ["in", 0], ["d", 0], ["i", 0], ["if", 0], ["v", 0], ["perna", 0], ["qtd", 0], ["1", 0], ["total", 0], ["i", 0], ["else", 0], ["break", 0], ["if", 0], ["qtd", 0], ["0", 0], ["break", 0], ["if", 0], ["qtd", 0], ["0", 0], ["break", 0], ["return", 0], ["total", 0], ["n", 0], ["int", 0], ["input", 0], ["tamanhoperna", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["energiaperna", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["201", 0], ["cntperna", 0], ["0", 0], ["100001", 0], ["sumperna", 0], ["0", 0], ["100001", 0], ["cortetotal", 0], ["0", 0], ["maxtam", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["tamanhoperna", 0], ["d", 0], ["energiaperna", 0], ["i", 0], ["append", 0], ["tamanhoperna", 0], ["i", 0], ["sumperna", 0], ["tamanhoperna", 0], ["i", 0], ["energiaperna", 0], ["i", 0], ["cntperna", 0], ["tamanhoperna", 0], ["i", 0], ["1", 0], ["cortetotal", 0], ["energiaperna", 0], ["i", 0], ["maxtam", 0], ["max", 0], ["tamanhoperna", 0], ["i", 0], ["maxtam", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["d", 0], ["d", 0], ["i", 0], ["sort", 0], ["currentmin", 0], ["float", 0], ["inf", 0], ["for", 0], ["perna", 0], ["in", 0], ["tamanhoperna", 0], ["somamesa", 0], ["sumperna", 0], ["perna", 0], ["somamesa", 0], ["buscaenergia", 0], ["perna", 0], ["cntperna", 0], ["perna", 0], ["1", 0], ["currentmin", 0], ["min", 0], ["currentmin", 0], ["cortetotal", 0], ["somamesa", 0], ["print", 0], ["currentmin", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.020335256938719428, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 1.0768603415674757e-05, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.023555190358805808, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 2.286911685320955e-05, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nValentin participates in a show called \"Shockers\". The rules are quite easy: jury selects one letter which Valentin doesn't know. He should make a small speech, but every time he pronounces a word that contains the selected letter, he receives an electric shock. He can make guesses which letter is selected, but for each incorrect guess he receives an electric shock too. The show ends when Valentin guesses the selected letter correctly.\n\nValentin can't keep in mind everything, so he could guess the selected letter much later than it can be uniquely determined and get excessive electric shocks. Excessive electric shocks are those which Valentin got after the moment the selected letter can be uniquely determined. You should find out the number of excessive electric shocks.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of actions Valentin did.\n\nThe next n lines contain descriptions of his actions, each line contains description of one action. Each action can be of one of three types:   Valentin pronounced some word and didn't get an electric shock. This action is described by the string \". w\" (without quotes), in which \".\" is a dot (ASCII-code 46), and w is the word that Valentin said.  Valentin pronounced some word and got an electric shock. This action is described by the string \"! w\" (without quotes), in which \"!\" is an exclamation mark (ASCII-code 33), and w is the word that Valentin said.  Valentin made a guess about the selected letter. This action is described by the string \"? s\" (without quotes), in which \"?\" is a question mark (ASCII-code 63), and s is the guess — a lowercase English letter. \n\nAll words consist only of lowercase English letters. The total length of all words does not exceed 10^5.\n\nIt is guaranteed that last action is a guess about the selected letter. Also, it is guaranteed that Valentin didn't make correct guesses about the selected letter before the last action. Moreover, it's guaranteed that if Valentin got an electric shock after pronouncing some word, then it contains the selected letter; and also if Valentin didn't get an electric shock after pronouncing some word, then it does not contain the selected letter.\n\n\n-----Output-----\n\nOutput a single integer — the number of electric shocks that Valentin could have avoided if he had told the selected letter just after it became uniquely determined.\n\n\n-----Examples-----\nInput\n5\n! abc\n. ad\n. b\n! cd\n? c\n\nOutput\n1\n\nInput\n8\n! hello\n! codeforces\n? c\n. o\n? d\n? h\n. l\n? e\n\nOutput\n2\n\nInput\n7\n! ababahalamaha\n? a\n? b\n? a\n? b\n? a\n? h\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test case after the first action it becomes clear that the selected letter is one of the following: a, b, c. After the second action we can note that the selected letter is not a. Valentin tells word \"b\" and doesn't get a shock. After that it is clear that the selected letter is c, but Valentin pronounces the word cd and gets an excessive electric shock. \n\nIn the second test case after the first two electric shocks we understand that the selected letter is e or o. Valentin tries some words consisting of these letters and after the second word it's clear that the selected letter is e, but Valentin makes 3 more actions before he makes a correct hypothesis.\n\nIn the third example the selected letter can be uniquely determined only when Valentin guesses it, so he didn't get excessive electric shocks.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n=int(input())\nc=set('qwertyuiopasdfghjklzxcvbnm')\nch=False\nk=0\nfor i in range(n-1):\n\ts=input()\n\tif ch:\n\t\tif s[0]!='.':\n\t\t\tk+=1\n\telse:\n\t\tif s[0]=='.':\n\t\t\tc.difference_update(set(s[2:]))\n\t\telif s[0]=='!':\n\t\t\tc.intersection_update(set(s[2:]))\n\t\telse:\n\t\t\tif s[2] in c:\n\t\t\t\tc.remove(s[2])\n\t\tif len(c)==1:\n\t\t\tch=True\ninput()\nprint(k)\n", "n = int(input())\n\na = [chr(i) for i in range(97, 123)]\na = set(a)\ncnt = 0\nf = False\nfor i in range(n):\n\tr, w = input().split()\n\tw = set(list(w))\n\tif len(a) == 1:\n\t\tf = True\n\tif r == \".\":\n\t\ta = a - w\n\telif r == \"!\":\n\t\ta = a & w\n\t\tcnt += int(f)\n\telif r == \"?\" and (i+1) != n:\n\t\ta = a - w\n\t\tcnt += int(f)\n\t#print(a)\nprint(cnt)\n", "s = \"qwertyuiopasdfghjklzxcvbnm\"\na = set()\nfor i in s:\n\ta.add(i)\n#print(a)\nn = int(input())\nans = 0\nfor i in range(n):\n\ts = input().split()\n\t# print(s)\n\n\tif(s[0] == \"!\" and len(a) == 1):\n\t\tans+=1\n\telif len(a) == 1 and s[0] == \"?\" and i != n-1:\n\t\tans+=1\n\telif s[0] == \"?\":\n\t\ttry:\n\t\t\ta.remove(s[1])\n\t\texcept Exception:\n\t\t\tpass\n\telif s[0] == \".\":\n\t\tfor j in s[1]:\n\t\t   # print(a)\n\t\t\ttry:\n\t\t\t\ta.remove(j)\n\t\t\texcept Exception:\n\t\t\t\tpass\n\telif s[0] == \"!\":\n\t\tb = dict()\n\t\tfor j in s[1]:\n\t\t\tb[j] = 1\n\t\tfor j in a:\n\t\t\ttry:\n\t\t\t\tb[j]+=1\n\t\t\texcept Exception:\n\t\t\t\tpass\n\t\ta.clear()\n\t\tfor j in b:\n\t\t\tif b[j] == 2:\n\t\t\t\ta.add(j)\n\t#print(a)\nprint(ans)\n", "s = set()\ni = 'a'\nwhile i <= 'z':\n\ts.add(i)\n\ti = chr(ord(i)+1)\nn = int(input())\nc=0\nfor i in range(n):\n\ta = input().split()\n\tif a[0] == '.':\n\t\ts.difference_update(set(a[1]))\n\telif len(s) == 1 and i != n-1:\n\t\tc+=1\n\tif a[0] == '!':\n\t\ts.intersection_update(set(a[1]))\n\tif a[0] == '?':\n\t\tif a[1] in s:\n\t\t\ts.remove(a[1])\nprint(c)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom string import ascii_lowercase\n\n\ndef main():\n\tn = int(input())\n\tcan = set(ascii_lowercase)\n\ti = -1\n\tfound = False\n\tcnt = 0\n\tfor j in range(n):\n\t\tturn, word = input().split()\n\t\tif found and j != n - 1 and turn != '.':\n\t\t\tcnt += 1\n\t\tif turn == '.':\n\t\t\tcan -= set(word)\n\t\t\tif len(can) == 1 and not found:\n\t\t\t\ti = j\n\t\t\t\tfound = True\n\t\telif turn == '!':\n\t\t\tcan &= set(word) \n\t\t\tif len(can) == 1 and not found:\n\t\t\t\ti = j\n\t\t\t\tfound = True\t\t\t\t\n\t\telse:\n\t\t\tif j == n-1:\n\t\t\t\ti = n-1\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tcan -= set(word)\n\t\t\t\tif len(can) == 1 and not found:\n\t\t\t\t\ti = j\n\t\t\t\t\tfound = True\n\tprint(cnt)\n\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n = int(input())\nnemog = set()\nmog = set()\nfor i in range(26):\n\tmog.add(chr(97 + i))\n\t\ncnt = 0\nflag = False\n\nfor i in range(n):\n\ts = input()\n\tif s[0] == '.':\n\t\tfor j in range(2, len(s)):\n\t\t\tmog.discard(s[j])\n\tif s[0] == '!':\n\t\tcnt += 1\n\t\thelp = set()\n\t\tfor j in range(2, len(s)):\n\t\t\thelp.add(s[j])\n\t\tmog = mog & help\n\tif s[0] == '?':\n\t\tif i < n - 1:\n\t\t\tcnt += 1\n\t\t\tmog.discard(s[2])\n\t\telse:\n\t\t\tprint(0)\n\t\t\tflag = True\n\tif len(mog) == 1:\n\t\tsave = i\n\t\tbreak\nif not flag:\n\tans = 0\n\tfor i in range (save + 1, n):\n\t\ts = input()\n\t\tif s[0] == '!' or (i < n - 1 and s[0] == '?'):\n\t\t\tans += 1\n\tprint(ans)\n", "n = int(input())\ny = set()\nopr = False\ncount = 0\nfor i in range(97, 123):\n\ty.add(chr(i))\nfor i in range(n):\n\ts = input()\n\ts = s.split(\" \")\n\ta = s[1]\n\tif not opr:\n\t\tz = set()\n\t\tfor j in a:\n\t\t\tz.add(j)\n\t\tif s[0] == \"!\":\n\t\t\ty = y.intersection(z)\n\t\telif s[0] == \".\":\n\t\t\ty = y.difference(z)\n\t\telif s[0] == \"?\" and i != n - 1:\n\t\t\tq = set()\n\t\t\tq.add(s[1])\n\t\t\ty = y.difference(q)\n\t\tif len(y) == 1:\n\t\t\topr = True\n\telse:\n\t\tif (s[0] == \"?\" and i != n - 1) or s[0] == \"!\":\n\t\t\tcount += 1\nprint(count)\t\t\t\n\n\t\t\t\n\t\t\n\t\t\n", "n = int(input())\nmn = set('qwertyuiopasdfghjklzxcvbnm')\nf = False\nk = 0\nfor i in range(n):\n        \n\ts = input().split()\n\tif f:\n\t\tif s[0] == '?' and set(s[1]) != mn or s[0] =='!':\n\t\t\tk += 1\n\t\tcontinue\n\tif s[0] == '?'and i != n-1:\n\t\tmn -= set(s[1])\n\telif s[0] == '!':\n\t\tmn &= set(s[1])\n\telif s[0] == '.':\n\t\tmn -= set(s[1])\n\tif len(mn) == 1:\n\t\tf = True\nprint(k)\n", "n = int(input())\ns = set(\"abcdefghijklmnopqrstuvwxyz\")\nmark = False\ncnt = 0\nfor i in range(n):\n\tif len(s) == 1:\n\t\tmark = True\n\ttmp = input().split()\n\tif tmp[0] == \"!\":\n\t\tif mark:\n\t\t\tcnt += 1\n\t\tcurs = set(tmp[1])\n\t\ts = s & curs\n\tif tmp[0] == \".\":\n\t\tcurs = set(tmp[1])\n\t\ts -= curs\n\tif tmp[0] == \"?\":\n\t\tif mark:\n\t\t\tcnt += 1\n\t\t\tif i == n - 1:\n\t\t\t\tcnt -= 1\n\t\ts -= set(tmp[1])\nprint(cnt)\n", "n = int(input())\n\ns = set()\nfor i in range(ord('a'), ord('z') + 1):\n\ts.add(chr(i))\n\nk = 0\nfl = False\nfor i in range(n - 1):\n\tq = input().split()\n\tif fl:\n\t\tif q[0] == '!' or q[0] == '?':\n\t\t\tk += 1\n\tif q[0] == '.':\n\t\tfor ch in q[1]:\n\t\t\ts.discard(ch)\n\telif q[0] == '!':\n\t\ts = s.intersection(set(q[1]))\n\telif q[0] == '?':\n\t\ts.discard(q[1])\n\tif len(s) == 1:\n\t\tfl = True\nq = input()\n\nprint(k)\n", "q=int(input())\nd=set([chr(i) for i in range(97,123)])\ngf=0\nfor i in range(0,q-1):\n\ts=input()\n\ts1=s[2:]\n\tif s[0]=='!':\n\t\tif len(d)==1:\n\t\t\tgf+=1\n\t\td&=set(s1)\n\telif s[0]=='.':\n\t\td=d.difference(set(s1))\n\telse:\n\t\tif len(d)==1:\n\t\t\tgf+=1\n\t\td=d.difference(set(s1))\n\t\n\t#print(d)\ns=input()\nprint(gf)\n", "n=int(input())\nalf='abcdefghijklmnopqrstuvwxyz'\nso='';\nj=n\nfor i in range(n):\n\ts=input()\n\tj-=1\n\tif s[0]=='!':\n\t\tso = '';\n\t\tfor e in alf:\n\t\t\tif s.find(e)>-1: so+=e;\n\t\talf=so\n\telif s[0]=='.':\n\t\tso = '';\n\t\tfor e in alf:\n\t\t\tif s.find(e)==-1: so+=e;\n\t\talf=so\n\telse:\n\t\talf=alf.replace(s[2],'')\n\tif len(alf)==1: break\nlol=0;\np=j;\nfor i in range(j-1):\n\ts = input()\n\tif s[0]=='!' or s[0]=='?': lol+=1\nif not(p==0):s = input()\nprint(lol)\n", "n = int(input())\nl1 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'h', 'w', 'y', 'x', 'z', 'v'}\nfor i in range(n - 1):\n\tl = list(input())\n\tif l[0] == '.':\n\t\tl = set(l[2:])\n\t\tl1 -= l\n\telif l[0] == '!':\n\t\tl = set(l[2:])\n\t\tl1 &= l\n\telse:\n\t\tl1 -= set(l[2])\n\tif len(l1) == 1:\n\t\tq = 0\n\t\tfor k in range(n - i - 2):\n\t\t\tl = list(input())\n\t\t\tif l[0] != '.':\n\t\t\t\tq += 1\n\t\tprint(q)\n\t\tbreak\nif len(l1) > 1:\n\tprint(0)\n", "n=int(input())\nmn=set()\notv=set()\nk=0\nfor i in range(ord('a'),ord('z')+1):\n\totv.add(chr(i))\nfor i in range(n):\n\ts=input().split()\n\tif s[0]=='!':\n\t\totv=set(s[1])&otv\n\telif s[0]=='.':\n\t\totv-=set(s[1])\n\telse:\n\t\tif i!=n-1:\n\t\t\totv-=set(s[1])\n\tif len(otv)==1:\n\t\tbreak\nfor bb in range(i+1, n):\n\ts=input().split()\n\tif s[0]!='.':\n\t\tk+=1\nk-=1\nif k<0:\n\tk=0\nprint(k)\n\t\n", "n = int(input())\na = 0\nb = 0\nflag = True\nt = set(list('qwertyuioplkjhgfdsazxcvbnm'))\nfor i in range(n):\n\top, w = list(map(str, input().split()))\n\tw = set(list(w))\n\tif op == '!':\n\t\tt &= w\n\t\ta += 1\n\t\tif flag:\n\t\t\tb += 1\n\telif op == '.':\n\t\tt = t.difference(w)\n\telse:\n\t\tt = t.difference(w)\n\t\tif i != n - 1:\n\t\t\ta += 1\n\t\t\tif flag:\n\t\t\t\tb += 1\n\tif len(t) == 1:\n\t\tflag = False\nprint(a - b)\n", "a=set('abcdefghijklmnopqrstuvwxyz')\nn=int(input())\nfor i in range (n):\n\te,b=input().split()\n\tif e=='!':\n\t\ta.intersection_update(set(b))\n\telif e=='?' and (i!=(n-1)):\n\t\ta.difference_update(set(b))\n\telif e=='.':\n\t\ta.difference_update(set(b))\n\tif len (a)==1:\n\t\tbreak\ns=0\nfor j in range (i+1,n):\n\te,b=input().split()\n\tif e=='!' or (e=='?' and j!=(n-1)):\n\t\ts+=1\nprint(s)\n", "c=int(input())\nans=0\nq=0\nm=[[i,1]for i in 'abcdefghijklmnopqrstuvwxyz']\nfor i in range(c):\n\tsuma=0\n\tfor j in range(26):\n\t\tsuma+=m[j][1]\n\tif suma<2:\n\t\tq=1\n\tx=input()\n\ta=set(x[2:])\n\tx=x[0]\n\tif x=='.':\n\t\tfor j in range(26):\n\t\t\tif m[j][0]in a:\n\t\t\t\tm[j][1]=0\n\telif x=='!':\n\t\tfor j in range(26):\n\t\t\tif not(m[j][0]in a):\n\t\t\t\tm[j][1]=0\n\t\tif q:\n\t\t\tans+=1\n\telse:\n\t\tfor j in range(26):\n\t\t\tif m[j][0]in a:\n\t\t\t\tm[j][1]=0\n\t\tif i!=c-1 and q:\n\t\t\tans+=1\nprint(ans)\n", "n = int(input())\nno = set()\nmb = set(\"abcdefghijklmnopqrstuvwxyz\")\nans = 0\nmark = False\nfor i in range(n):\n\tflag, save = input().split()\n\tif(flag == \"!\"):\n\t\tfor_add = set()\n\t\tfor j in range(len(save)):\n\t\t\tfor_add.add(save[j])\n\t\tif(len(mb) == 0):\n\t\t\tmb = for_add\n\t\telse:\n\t\t\tmb = for_add & mb\n\t\tif(mark):\n\t\t\tans += 1\n\telif(flag == \".\"):\n\t\tfor j in range(len(save)):\n\t\t\tno.add(save[j])\n\telse:\n\t\tif(i != n - 1):\n\t\t\tno.add(save)\n\t\t\tif(mark):\n\t\t\t\tans += 1\n\tif(len(mb - no) == 1 or len(mb) == 1):\n\t\tmark = True\n\t\t\nprint(ans)\n", "n = int(input())\nlet = set()\nfor i in range(97, 123):\n\tlet.add(chr(i))\nflag = 0\nans = 0\nfor i in range(n - 1):\n\tif len(let) == 1:\n\t\tflag = 1\n\tt, s = map(str, input().split())\n\t#print(t, s)\n\tif t == '!':\n\t\tnow = set(list(s))\n\t\tif flag == 1:\n\t\t\tans += 1\n\t\tlet = let.intersection(now)\n\t\t#print(now)\n\t\t#print(let)\n\tif t == '?':\n\t\tif flag == 1:\n\t\t\tans += 1\n\t\tif s in let:\n\t\t\tlet.remove(s)\n\tif t == '.':\n\t\tnow = list(s)\n\t\tfor elem in now:\n\t\t\tif elem in let:\n\t\t\t\tlet.remove(elem)\nprint(ans)\n", "n = int(input())\nsetr = set(chr(i) for i in range(ord('a'), ord('z') + 1))\nsetnr = set()\nans = 0\nletter =''\nisq = False\na = [input() for i in range(n)]\nfor s in a:\n\tif s[0] == '.':\n\t\tsetnr = setnr | set(s[2:])\n\telif s[0] == '!':\n\t\tif len(setr - setnr) == 1 or isq:\n\t\t\tans += 1\n\t\tif len(setr) == 0:\n\t\t\tsetr = set(s[2:])\n\t\telse:\n\t\t\tsetr = setr & set(s[2:])\n\telif s[0] == '?' and s[2] != a[-1][2]:\n\t\tif len(setr - setnr) == 1 or isq:\n\t\t\tans += 1\n\t\telse:\n\t\t\tsetnr.add(s[2])\n\telif s[0] == '?' and s[2] == a[-1][2]:\n\t\tisq = True\nprint(ans)\n", "n = int(input())\nl=[chr(i) for i in range(97,123)]\nk=0\nfor i in range(n):\n\td,s=list(map(str, input().split()))\n\tif d=='!' and len(l)!=1:\n\t\th=0\n\t\twhile h<len(l):\n\t\t\tif not(l[h] in s):\n\t\t\t\tl.pop(h)\n\t\t\telse:\n\t\t\t\th+=1\n\telif d=='.' and len(l)!=1:\n\t\th=0\n\t\twhile h<len(l):\n\t\t\tif l[h] in s:\n\t\t\t\tl.pop(h)\n\t\t\telse:\n\t\t\t\th+=1\n\telif d=='?' and len(l)!=1:\n\t\tif s in l:\n\t\t\tl.remove(s)\n\telif (d=='?' or d=='!') and i!=n-1:\n\t\tk+=1\nprint(k)\n", "n = int(input())\nset1 = set()\nans = 0\nfor i in range(97,123):\n\tset1.add(chr(i))\nfor i in range(n):\n\ta, b = input().split()\n\tif len(set1) == 1:\n\t\tif a == \"?\" and i != n - 1:\n\t\t\tans += 1\n\t\tif a == \"!\":\n\t\t\tans += 1\n\telse:\n\t\tset2 = set()\n\t\tfor i in b:\n\t\t\tset2.add(i)\n\t\t\t\n\t\tif a == \".\":\n\t\t\tset1 -= set2\n\t\telif a == \"!\":\n\t\t\tset1 &= set2\n\t\telif a == \"?\":\n\t\t\tset1 -= set2\nprint(ans)\n", "n = int(input())\nSetA = set(\"abcdefghijklmnopqrstuvwxyz\")\nflag = False\nlol = 0\nb = 0\nfor i in range(n):\n\tb += 1564\n\tif len(SetA) == 1:\n\t\tflag = True\n\tpit = input().split()\n\tif pit[0] == \"!\":\n\t\tif flag:\n\t\t\tlol += 1\n\t\tcurs = set(pit[1])\n\t\tSetA = SetA & curs\n\tif pit[0] == \".\":\n\t\tcurs = set(pit[1])\n\t\tSetA -= curs\n\tif pit[0] == \"?\":\n\t\tif flag:\n\t\t\tlol += 1\n\t\t\tif i == n - 1:\n\t\t\t\tlol -= 1\n\t\tSetA -= set(pit[1])\n\tb -= 1564\nprint(lol)\n", "n = int(input())\na = set(list('qwertyuiopasdfghjklzxcvbnm'))\nal = 0\nq = 0\nz = 0\nfor i in range(n):\n\tk = input().split()\n\tif k[0] == '.':\n\t\ta -= set(list(k[1]))\n\telif k[0] == '?':\n\t\ta -= set(list(k[1]))\n\t\tal += 1\n\t\tz += 1\n\telse:\n\t\ta &= set(list(k[1]))\n\t\tal += 1\n\t\tz += 1\n\t#print(al, a)\n\tif len(a) == 1:\n\t\tq = i + 1\n\t\tbreak\n\nif len(a) != 1:\n\tprint(0)   \n\n\nelse:\n\tfor i in range(q, n):\n\t\tk = input().split()\n\t\tif k[0] != '.':\n\t\t\tal += 1 \n\t#print(al, z)\n\tprint(al - z - 1)\n", "n = int(input())\nposs = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\nstrikes = 0\nfound = False\nfor i in range(n - 1):\n\ta = input().split()\n\tif a[0] == '!':\n\t\tposs = poss.intersection(set(a[1]))\n\t\tif found:\n\t\t\tstrikes += 1\n\telif a[0] == '.':\n\t\tposs = poss.difference(set(a[1]))\n\telse:\n\t\tposs = poss.difference(set(a[1]))\n\t\tif found:\n\t\t\tstrikes += 1\n\tif len(poss) == 1:\n\t\tfound = True\nprint(strikes)\n"], "id": "id5559"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5559", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["valentin", 0], ["participates", 0], ["in", 0], ["a", 0], ["show", 0], ["called", 0], ["shockers", 0], ["the", 0], ["rules", 0], ["are", 0], ["quite", 0], ["easy", 0], ["jury", 0], ["selects", 0], ["one", 0], ["letter", 0], ["which", 0], ["valentin", 0], ["doesn", 0], ["t", 0], ["know", 0], ["he", 0], ["should", 0], ["make", 0], ["a", 0], ["small", 0], ["speech", 0], ["but", 0], ["every", 0], ["time", 0], ["he", 0], ["pronounces", 0], ["a", 0], ["word", 0], ["that", 0], ["contains", 0], ["the", 0], ["selected", 0], ["letter", 0], ["he", 0], ["receives", 0], ["an", 0], ["electric", 0], ["shock", 0], ["he", 0], ["can", 0], ["make", 0], ["guesses", 0], ["which", 0], ["letter", 0], ["is", 0], ["selected", 0], ["but", 0], ["for", 0], ["each", 0], ["incorrect", 0], ["guess", 0], ["he", 0], ["receives", 0], ["an", 0], ["electric", 0], ["shock", 0], ["too", 0], ["the", 0], ["show", 0], ["ends", 0], ["when", 0], ["valentin", 0], ["guesses", 0], ["the", 0], ["selected", 0], ["letter", 0], ["correctly", 0], ["valentin", 0], ["can", 0], ["t", 0], ["keep", 0], ["in", 0], ["mind", 0], ["everything", 0], ["so", 0], ["he", 0], ["could", 0], ["guess", 0], ["the", 0], ["selected", 0], ["letter", 0], ["much", 0], ["later", 0], ["than", 0], ["it", 0], ["can", 0], ["be", 0], ["uniquely", 0], ["determined", 0], ["and", 0], ["get", 0], ["excessive", 0], ["electric", 0], ["shocks", 0], ["excessive", 0], ["electric", 0], ["shocks", 0], ["are", 0], ["those", 0], ["which", 0], ["valentin", 0], ["got", 0], ["after", 0], ["the", 0], ["moment", 0], ["the", 0], ["selected", 0], ["letter", 0], ["can", 0], ["be", 0], ["uniquely", 0], ["determined", 0], ["you", 0], ["should", 0], ["find", 0], ["out", 0], ["the", 0], ["number", 0], ["of", 0], ["excessive", 0], ["electric", 0], ["shocks", 0], ["input", 3], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["actions", 0], ["valentin", 0], ["did", 0], ["the", 0], ["next", 0], ["n", 0], ["lines", 0], ["contain", 0], ["descriptions", 0], ["of", 0], ["his", 0], ["actions", 0], ["each", 0], ["line", 0], ["contains", 0], ["description", 0], ["of", 0], ["one", 0], ["action", 0], ["each", 0], ["action", 0], ["can", 0], ["be", 0], ["of", 0], ["one", 0], ["of", 0], ["three", 0], ["types", 0], ["valentin", 0], ["pronounced", 0], ["some", 0], ["word", 0], ["and", 0], ["didn", 0], ["t", 0], ["get", 0], ["an", 0], ["electric", 0], ["shock", 0], ["this", 0], ["action", 0], ["is", 0], ["described", 0], ["by", 0], ["the", 0], ["string", 0], ["w", 0], ["without", 0], ["quotes", 0], ["in", 0], ["which", 0], ["is", 0], ["a", 0], ["dot", 0], ["ascii", 0], ["code", 0], ["46", 0], ["and", 0], ["w", 0], ["is", 0], ["the", 0], ["word", 0], ["that", 0], ["valentin", 0], ["said", 0], ["valentin", 0], ["pronounced", 0], ["some", 0], ["word", 0], ["and", 0], ["got", 0], ["an", 0], ["electric", 0], ["shock", 0], ["this", 0], ["action", 0], ["is", 0], ["described", 0], ["by", 0], ["the", 0], ["string", 0], ["w", 0], ["without", 0], ["quotes", 0], ["in", 0], ["which", 0], ["is", 0], ["an", 0], ["exclamation", 0], ["mark", 0], ["ascii", 0], ["code", 0], ["33", 0], ["and", 0], ["w", 0], ["is", 0], ["the", 0], ["word", 0], ["that", 0], ["valentin", 0], ["said", 0], ["valentin", 0], ["made", 0], ["a", 0], ["guess", 0], ["about", 0], ["the", 0], ["selected", 0], ["letter", 0], ["this", 0], ["action", 0], ["is", 0], ["described", 0], ["by", 0], ["the", 0], ["string", 0], ["s", 0], ["without", 0], ["quotes", 0], ["in", 0], ["which", 0], ["is", 0], ["a", 0], ["question", 0], ["mark", 0], ["ascii", 0], ["code", 0], ["63", 0], ["and", 0], ["s", 0], ["is", 0], ["the", 0], ["guess", 0], ["—", 0], ["a", 0], ["lowercase", 0], ["english", 0], ["letter", 0], ["all", 0], ["words", 0], ["consist", 0], ["only", 0], ["of", 0], ["lowercase", 0], ["english", 0], ["letters", 0], ["the", 0], ["total", 0], ["length", 0], ["of", 0], ["all", 0], ["words", 0], ["does", 0], ["not", 0], ["exceed", 0], ["10", 0], ["5", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["last", 0], ["action", 0], ["is", 0], ["a", 0], ["guess", 0], ["about", 0], ["the", 0], ["selected", 0], ["letter", 0], ["also", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["valentin", 0], ["didn", 0], ["t", 0], ["make", 0], ["correct", 0], ["guesses", 0], ["about", 0], ["the", 0], ["selected", 0], ["letter", 0], ["before", 0], ["the", 0], ["last", 0], ["action", 0], ["moreover", 0], ["it", 0], ["s", 0], ["guaranteed", 0], ["that", 0], ["if", 0], ["valentin", 0], ["got", 0], ["an", 0], ["electric", 0], ["shock", 0], ["after", 0], ["pronouncing", 0], ["some", 0], ["word", 0], ["then", 0], ["it", 0], ["contains", 0], ["the", 0], ["selected", 0], ["letter", 0], ["and", 0], ["also", 0], ["if", 0], ["valentin", 0], ["didn", 0], ["t", 0], ["get", 0], ["an", 0], ["electric", 0], ["shock", 0], ["after", 0], ["pronouncing", 0], ["some", 0], ["word", 0], ["then", 0], ["it", 0], ["does", 0], ["not", 0], ["contain", 0], ["the", 0], ["selected", 0], ["letter", 0], ["output", 0], ["output", 0], ["a", 0], ["single", 0], ["integer", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["electric", 0], ["shocks", 0], ["that", 0], ["valentin", 0], ["could", 0], ["have", 0], ["avoided", 0], ["if", 0], ["he", 0], ["had", 0], ["told", 0], ["the", 0], ["selected", 0], ["letter", 0], ["just", 0], ["after", 0], ["it", 0], ["became", 0], ["uniquely", 0], ["determined", 0], ["examples", 0], ["input", 0], ["5", 0], ["abc", 0], ["ad", 0], ["b", 0], ["cd", 0], ["c", 0], ["output", 0], ["1", 0], ["input", 0], ["8", 0], ["hello", 0], ["codeforces", 0], ["c", 0], ["o", 0], ["d", 0], ["h", 0], ["l", 0], ["e", 0], ["output", 0], ["2", 0], ["input", 0], ["7", 0], ["ababahalamaha", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["a", 0], ["h", 0], ["output", 0], ["0", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["test", 0], ["case", 0], ["after", 0], ["the", 0], ["first", 0], ["action", 0], ["it", 0], ["becomes", 0], ["clear", 0], ["that", 0], ["the", 0], ["selected", 0], ["letter", 0], ["is", 0], ["one", 0], ["of", 0], ["the", 0], ["following", 0], ["a", 0], ["b", 0], ["c", 0], ["after", 0], ["the", 0], ["second", 0], ["action", 0], ["we", 0], ["can", 0], ["note", 0], ["that", 0], ["the", 0], ["selected", 0], ["letter", 0], ["is", 0], ["not", 0], ["a", 0], ["valentin", 0], ["tells", 0], ["word", 0], ["b", 0], ["and", 0], ["doesn", 0], ["t", 0], ["get", 0], ["a", 0], ["shock", 0], ["after", 0], ["that", 0], ["it", 0], ["is", 0], ["clear", 0], ["that", 0], ["the", 0], ["selected", 0], ["letter", 0], ["is", 0], ["c", 0], ["but", 0], ["valentin", 0], ["pronounces", 0], ["the", 0], ["word", 0], ["cd", 0], ["and", 0], ["gets", 0], ["an", 0], ["excessive", 0], ["electric", 0], ["shock", 0], ["in", 0], ["the", 0], ["second", 0], ["test", 0], ["case", 0], ["after", 0], ["the", 0], ["first", 0], ["two", 0], ["electric", 0], ["shocks", 0], ["we", 0], ["understand", 0], ["that", 0], ["the", 0], ["selected", 0], ["letter", 0], ["is", 0], ["e", 0], ["or", 0], ["o", 0], ["valentin", 0], ["tries", 0], ["some", 0], ["words", 0], ["consisting", 0], ["of", 0], ["these", 0], ["letters", 0], ["and", 0], ["after", 0], ["the", 0], ["second", 0], ["word", 0], ["it", 0], ["s", 0], ["clear", 0], ["that", 0], ["the", 0], ["selected", 0], ["letter", 0], ["is", 0], ["e", 0], ["but", 0], ["valentin", 0], ["makes", 0], ["3", 0], ["more", 0], ["actions", 0], ["before", 0], ["he", 0], ["makes", 0], ["a", 0], ["correct", 0], ["hypothesis", 0], ["in", 0], ["the", 0], ["third", 0], ["example", 0], ["the", 0], ["selected", 0], ["letter", 0], ["can", 0], ["be", 0], ["uniquely", 0], ["determined", 0], ["only", 0], ["when", 0], ["valentin", 0], ["guesses", 0], ["it", 0], ["so", 0], ["he", 0], ["didn", 0], ["t", 0], ["get", 0], ["excessive", 0], ["electric", 0], ["shocks", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.001692047377326565, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0005640157924421883, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.02155887230514096, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00718629076838032, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.001692047377326565, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0005640157924421883, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.02155887230514096, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00718629076838032, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["c", 0], ["set", 0], ["qwertyuiopasdfghjklzxcvbnm", 0], ["ch", 0], ["false", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["s", 0], ["input", 0], ["if", 0], ["ch", 0], ["if", 0], ["s", 0], ["0", 0], ["k", 0], ["1", 0], ["else", 0], ["if", 0], ["s", 0], ["0", 0], ["c", 0], ["difference", 0], ["update", 0], ["set", 0], ["s", 0], ["2", 0], ["elif", 0], ["s", 0], ["0", 0], ["c", 0], ["intersection", 0], ["update", 0], ["set", 0], ["s", 0], ["2", 0], ["else", 0], ["if", 0], ["s", 0], ["2", 0], ["in", 0], ["c", 0], ["c", 0], ["remove", 0], ["s", 0], ["2", 0], ["if", 0], ["len", 0], ["c", 0], ["1", 0], ["ch", 0], ["true", 0], ["input", 0], ["print", 0], ["k", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["chr", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["97", 0], ["123", 0], ["a", 0], ["set", 0], ["a", 0], ["cnt", 0], ["0", 0], ["f", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["r", 0], ["w", 0], ["input", 0], ["split", 0], ["w", 0], ["set", 0], ["list", 0], ["w", 0], ["if", 0], ["len", 0], ["a", 0], ["1", 0], ["f", 0], ["true", 0], ["if", 0], ["r", 0], ["a", 0], ["a", 0], ["w", 0], ["elif", 0], ["r", 0], ["a", 0], ["a", 0], ["w", 0], ["cnt", 0], ["int", 0], ["f", 0], ["elif", 0], ["r", 0], ["and", 0], ["i", 0], ["1", 0], ["n", 0], ["a", 0], ["a", 0], ["w", 0], ["cnt", 0], ["int", 0], ["f", 0], ["print", 0], ["a", 0], ["print", 0], ["cnt", 0], ["s", 0], ["qwertyuiopasdfghjklzxcvbnm", 0], ["a", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["a", 0], ["add", 0], ["i", 0], ["print", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["split", 0], ["print", 0], ["s", 0], ["if", 0], ["s", 0], ["0", 0], ["and", 0], ["len", 0], ["a", 0], ["1", 0], ["ans", 0], ["1", 0], ["elif", 0], ["len", 0], ["a", 0], ["1", 0], ["and", 0], ["s", 0], ["0", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["ans", 0], ["1", 0], ["elif", 0], ["s", 0], ["0", 0], ["try", 0], ["a", 0], ["remove", 0], ["s", 0], ["1", 0], ["except", 0], ["exception", 0], ["pass", 0], ["elif", 0], ["s", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["s", 0], ["1", 0], ["print", 0], ["a", 0], ["try", 0], ["a", 0], ["remove", 0], ["j", 0], ["except", 0], ["exception", 0], ["pass", 0], ["elif", 0], ["s", 0], ["0", 0], ["b", 0], ["dict", 0], ["for", 0], ["j", 0], ["in", 0], ["s", 0], ["1", 0], ["b", 0], ["j", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["a", 0], ["try", 0], ["b", 0], ["j", 0], ["1", 0], ["except", 0], ["exception", 0], ["pass", 0], ["a", 0], ["clear", 0], ["for", 0], ["j", 0], ["in", 0], ["b", 0], ["if", 0], ["b", 0], ["j", 0], ["2", 0], ["a", 0], ["add", 0], ["j", 0], ["print", 0], ["a", 0], ["print", 0], ["ans", 0], ["s", 0], ["set", 0], ["i", 0], ["a", 0], ["while", 0], ["i", 0], ["z", 0], ["s", 0], ["add", 0], ["i", 0], ["i", 0], ["chr", 0], ["ord", 0], ["i", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["0", 0], ["s", 0], ["difference", 0], ["update", 0], ["set", 0], ["a", 0], ["1", 0], ["elif", 0], ["len", 0], ["s", 0], ["1", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["c", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["s", 0], ["intersection", 0], ["update", 0], ["set", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["if", 0], ["a", 0], ["1", 0], ["in", 0], ["s", 0], ["s", 0], ["remove", 0], ["a", 0], ["1", 0], ["print", 0], ["c", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["from", 0], ["string", 0], ["import", 0], ["ascii", 0], ["lowercase", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["can", 0], ["set", 0], ["ascii", 0], ["lowercase", 0], ["i", 0], ["1", 0], ["found", 0], ["false", 0], ["cnt", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["turn", 0], ["word", 0], ["input", 0], ["split", 0], ["if", 0], ["found", 0], ["and", 0], ["j", 0], ["n", 0], ["1", 0], ["and", 0], ["turn", 0], ["cnt", 0], ["1", 0], ["if", 0], ["turn", 0], ["can", 0], ["set", 0], ["word", 0], ["if", 0], ["len", 0], ["can", 0], ["1", 0], ["and", 0], ["not", 0], ["found", 0], ["i", 0], ["j", 0], ["found", 0], ["true", 0], ["elif", 0], ["turn", 0], ["can", 0], ["set", 0], ["word", 0], ["if", 0], ["len", 0], ["can", 0], ["1", 0], ["and", 0], ["not", 0], ["found", 0], ["i", 0], ["j", 0], ["found", 0], ["true", 0], ["else", 0], ["if", 0], ["j", 0], ["n", 0], ["1", 0], ["i", 0], ["n", 0], ["1", 0], ["break", 0], ["else", 0], ["can", 0], ["set", 0], ["word", 0], ["if", 0], ["len", 0], ["can", 0], ["1", 0], ["and", 0], ["not", 0], ["found", 0], ["i", 0], ["j", 0], ["found", 0], ["true", 0], ["print", 0], ["cnt", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["nemog", 0], ["set", 0], ["mog", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["mog", 0], ["add", 0], ["chr", 0], ["97", 0], ["i", 0], ["cnt", 0], ["0", 0], ["flag", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["len", 0], ["s", 0], ["mog", 0], ["discard", 0], ["s", 0], ["j", 0], ["if", 0], ["s", 0], ["0", 0], ["cnt", 0], ["1", 0], ["help", 0], ["set", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["len", 0], ["s", 0], ["help", 0], ["add", 0], ["s", 0], ["j", 0], ["mog", 0], ["mog", 0], ["help", 0], ["if", 0], ["s", 0], ["0", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["cnt", 0], ["1", 0], ["mog", 0], ["discard", 0], ["s", 0], ["2", 0], ["else", 0], ["print", 0], ["0", 0], ["flag", 0], ["true", 0], ["if", 0], ["len", 0], ["mog", 0], ["1", 0], ["save", 0], ["i", 0], ["break", 0], ["if", 0], ["not", 0], ["flag", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["save", 0], ["1", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["0", 0], ["or", 0], ["i", 0], ["n", 0], ["1", 0], ["and", 0], ["s", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["y", 0], ["set", 0], ["opr", 0], ["false", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["97", 0], ["123", 0], ["y", 0], ["add", 0], ["chr", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["s", 0], ["s", 0], ["split", 0], ["a", 0], ["s", 0], ["1", 0], ["if", 0], ["not", 0], ["opr", 0], ["z", 0], ["set", 0], ["for", 0], ["j", 0], ["in", 0], ["a", 0], ["z", 0], ["add", 0], ["j", 0], ["if", 0], ["s", 0], ["0", 0], ["y", 0], ["y", 0], ["intersection", 0], ["z", 0], ["elif", 0], ["s", 0], ["0", 0], ["y", 0], ["y", 0], ["difference", 0], ["z", 0], ["elif", 0], ["s", 0], ["0", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["q", 0], ["set", 0], ["q", 0], ["add", 0], ["s", 0], ["1", 0], ["y", 0], ["y", 0], ["difference", 0], ["q", 0], ["if", 0], ["len", 0], ["y", 0], ["1", 0], ["opr", 0], ["true", 0], ["else", 0], ["if", 0], ["s", 0], ["0", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["or", 0], ["s", 0], ["0", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["n", 0], ["int", 0], ["input", 0], ["mn", 0], ["set", 0], ["qwertyuiopasdfghjklzxcvbnm", 0], ["f", 0], ["false", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["split", 0], ["if", 0], ["f", 0], ["if", 0], ["s", 0], ["0", 0], ["and", 0], ["set", 0], ["s", 0], ["1", 0], ["mn", 0], ["or", 0], ["s", 0], ["0", 0], ["k", 0], ["1", 0], ["continue", 0], ["if", 0], ["s", 0], ["0", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["mn", 0], ["set", 0], ["s", 0], ["1", 0], ["elif", 0], ["s", 0], ["0", 0], ["mn", 0], ["set", 0], ["s", 0], ["1", 0], ["elif", 0], ["s", 0], ["0", 0], ["mn", 0], ["set", 0], ["s", 0], ["1", 0], ["if", 0], ["len", 0], ["mn", 0], ["1", 0], ["f", 0], ["true", 0], ["print", 0], ["k", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["set", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["mark", 0], ["false", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["len", 0], ["s", 0], ["1", 0], ["mark", 0], ["true", 0], ["tmp", 0], ["input", 0], ["split", 0], ["if", 0], ["tmp", 0], ["0", 0], ["if", 0], ["mark", 0], ["cnt", 0], ["1", 0], ["curs", 0], ["set", 0], ["tmp", 0], ["1", 0], ["s", 0], ["s", 0], ["curs", 0], ["if", 0], ["tmp", 0], ["0", 0], ["curs", 0], ["set", 0], ["tmp", 0], ["1", 0], ["s", 0], ["curs", 0], ["if", 0], ["tmp", 0], ["0", 0], ["if", 0], ["mark", 0], ["cnt", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["cnt", 0], ["1", 0], ["s", 0], ["set", 0], ["tmp", 0], ["1", 0], ["print", 0], ["cnt", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ord", 0], ["a", 0], ["ord", 0], ["z", 0], ["1", 0], ["s", 0], ["add", 0], ["chr", 0], ["i", 0], ["k", 0], ["0", 0], ["fl", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["q", 0], ["input", 0], ["split", 0], ["if", 0], ["fl", 0], ["if", 0], ["q", 0], ["0", 0], ["or", 0], ["q", 0], ["0", 0], ["k", 0], ["1", 0], ["if", 0], ["q", 0], ["0", 0], ["for", 0], ["ch", 0], ["in", 0], ["q", 0], ["1", 0], ["s", 0], ["discard", 0], ["ch", 0], ["elif", 0], ["q", 0], ["0", 0], ["s", 0], ["s", 0], ["intersection", 0], ["set", 0], ["q", 0], ["1", 0], ["elif", 0], ["q", 0], ["0", 0], ["s", 0], ["discard", 0], ["q", 0], ["1", 0], ["if", 0], ["len", 0], ["s", 0], ["1", 0], ["fl", 0], ["true", 0], ["q", 0], ["input", 0], ["print", 0], ["k", 0], ["q", 0], ["int", 0], ["input", 0], ["d", 0], ["set", 0], ["chr", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["97", 0], ["123", 0], ["gf", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["q", 0], ["1", 0], ["s", 0], ["input", 0], ["s1", 0], ["s", 0], ["2", 0], ["if", 0], ["s", 0], ["0", 0], ["if", 0], ["len", 0], ["d", 0], ["1", 0], ["gf", 0], ["1", 0], ["d", 0], ["set", 0], ["s1", 0], ["elif", 0], ["s", 0], ["0", 0], ["d", 0], ["d", 0], ["difference", 0], ["set", 0], ["s1", 0], ["else", 0], ["if", 0], ["len", 0], ["d", 0], ["1", 0], ["gf", 0], ["1", 0], ["d", 0], ["d", 0], ["difference", 0], ["set", 0], ["s1", 0], ["print", 0], ["d", 0], ["s", 0], ["input", 0], ["print", 0], ["gf", 0], ["n", 0], ["int", 0], ["input", 0], ["alf", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["so", 0], ["j", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["j", 0], ["1", 0], ["if", 0], ["s", 0], ["0", 0], ["so", 0], ["for", 0], ["e", 0], ["in", 0], ["alf", 0], ["if", 0], ["s", 0], ["find", 0], ["e", 0], ["1", 0], ["so", 0], ["e", 0], ["alf", 0], ["so", 0], ["elif", 0], ["s", 0], ["0", 0], ["so", 0], ["for", 0], ["e", 0], ["in", 0], ["alf", 0], ["if", 0], ["s", 0], ["find", 0], ["e", 0], ["1", 0], ["so", 0], ["e", 0], ["alf", 0], ["so", 0], ["else", 0], ["alf", 0], ["alf", 0], ["replace", 0], ["s", 0], ["2", 0], ["if", 0], ["len", 0], ["alf", 0], ["1", 0], ["break", 0], ["lol", 0], ["0", 0], ["p", 0], ["j", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["0", 0], ["or", 0], ["s", 0], ["0", 0], ["lol", 0], ["1", 0], ["if", 0], ["not", 0], ["p", 0], ["0", 0], ["s", 0], ["input", 0], ["print", 0], ["lol", 0], ["n", 0], ["int", 0], ["input", 0], ["l1", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["f", 1], ["g", 1], ["i", 1131], ["j", 0], ["k", 0], ["l", 0], ["m", 0], ["n", 0], ["o", 0], ["p", 0], ["q", 0], ["r", 0], ["s", 0], ["t", 0], ["u", 0], ["h", 0], ["w", 0], ["y", 0], ["x", 0], ["z", 0], ["v", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["l", 0], ["list", 0], ["input", 0], ["if", 0], ["l", 0], ["0", 0], ["l", 0], ["set", 0], ["l", 0], ["2", 0], ["l1", 0], ["l", 0], ["elif", 0], ["l", 0], ["0", 0], ["l", 0], ["set", 0], ["l", 0], ["2", 0], ["l1", 0], ["l", 0], ["else", 0], ["l1", 0], ["set", 0], ["l", 0], ["2", 0], ["if", 0], ["len", 0], ["l1", 0], ["1", 0], ["q", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["i", 0], ["2", 0], ["l", 0], ["list", 0], ["input", 0], ["if", 0], ["l", 0], ["0", 0], ["q", 0], ["1", 0], ["print", 0], ["q", 0], ["break", 0], ["if", 0], ["len", 0], ["l1", 0], ["1", 0], ["print", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["mn", 0], ["set", 0], ["otv", 0], ["set", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ord", 0], ["a", 0], ["ord", 0], ["z", 0], ["1", 0], ["otv", 0], ["add", 0], ["chr", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["split", 0], ["if", 0], ["s", 0], ["0", 0], ["otv", 0], ["set", 0], ["s", 0], ["1", 0], ["otv", 0], ["elif", 0], ["s", 0], ["0", 0], ["otv", 0], ["set", 0], ["s", 0], ["1", 0], ["else", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["otv", 0], ["set", 0], ["s", 0], ["1", 0], ["if", 0], ["len", 0], ["otv", 0], ["1", 0], ["break", 0], ["for", 0], ["bb", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["s", 0], ["input", 0], ["split", 0], ["if", 0], ["s", 0], ["0", 0], ["k", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["k", 0], ["0", 0], ["print", 0], ["k", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["flag", 0], ["true", 0], ["t", 0], ["set", 0], ["list", 0], ["qwertyuioplkjhgfdsazxcvbnm", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["op", 0], ["w", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["split", 0], ["w", 0], ["set", 0], ["list", 0], ["w", 0], ["if", 0], ["op", 0], ["t", 0], ["w", 0], ["a", 0], ["1", 0], ["if", 0], ["flag", 0], ["b", 0], ["1", 0], ["elif", 0], ["op", 0], ["t", 0], ["t", 0], ["difference", 0], ["w", 0], ["else", 0], ["t", 0], ["t", 0], ["difference", 0], ["w", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["a", 0], ["1", 0], ["if", 0], ["flag", 0], ["b", 0], ["1", 0], ["if", 0], ["len", 0], ["t", 0], ["1", 0], ["flag", 0], ["false", 0], ["print", 0], ["a", 0], ["b", 0], ["a", 0], ["set", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["e", 0], ["b", 0], ["input", 0], ["split", 0], ["if", 0], ["e", 0], ["a", 0], ["intersection", 0], ["update", 0], ["set", 0], ["b", 0], ["elif", 0], ["e", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["a", 0], ["difference", 0], ["update", 0], ["set", 0], ["b", 0], ["elif", 0], ["e", 0], ["a", 0], ["difference", 0], ["update", 0], ["set", 0], ["b", 0], ["if", 0], ["len", 0], ["a", 0], ["1", 0], ["break", 0], ["s", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["e", 0], ["b", 0], ["input", 0], ["split", 0], ["if", 0], ["e", 0], ["or", 0], ["e", 0], ["and", 0], ["j", 0], ["n", 0], ["1", 0], ["s", 0], ["1", 0], ["print", 0], ["s", 0], ["c", 0], ["int", 0], ["input", 0], ["ans", 0], ["0", 0], ["q", 0], ["0", 0], ["m", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c", 0], ["suma", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["26", 0], ["suma", 0], ["m", 0], ["j", 0], ["1", 0], ["if", 0], ["suma", 0], ["2", 0], ["q", 0], ["1", 0], ["x", 0], ["input", 0], ["a", 0], ["set", 0], ["x", 0], ["2", 0], ["x", 0], ["x", 0], ["0", 0], ["if", 0], ["x", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["26", 0], ["if", 0], ["m", 0], ["j", 0], ["0", 0], ["in", 0], ["a", 0], ["m", 0], ["j", 0], ["1", 0], ["0", 0], ["elif", 0], ["x", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["26", 0], ["if", 0], ["not", 0], ["m", 0], ["j", 0], ["0", 0], ["in", 0], ["a", 0], ["m", 0], ["j", 0], ["1", 0], ["0", 0], ["if", 0], ["q", 0], ["ans", 0], ["1", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["26", 0], ["if", 0], ["m", 0], ["j", 0], ["0", 0], ["in", 0], ["a", 0], ["m", 0], ["j", 0], ["1", 0], ["0", 0], ["if", 0], ["i", 0], ["c", 0], ["1", 0], ["and", 0], ["q", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["no", 0], ["set", 0], ["mb", 0], ["set", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["ans", 0], ["0", 0], ["mark", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["flag", 0], ["save", 0], ["input", 0], ["split", 0], ["if", 0], ["flag", 0], ["for", 0], ["add", 0], ["set", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["save", 0], ["for", 0], ["add", 0], ["add", 0], ["save", 0], ["j", 0], ["if", 0], ["len", 0], ["mb", 0], ["0", 0], ["mb", 0], ["for", 0], ["add", 0], ["else", 0], ["mb", 0], ["for", 0], ["add", 0], ["mb", 0], ["if", 0], ["mark", 0], ["ans", 0], ["1", 0], ["elif", 0], ["flag", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["save", 0], ["no", 0], ["add", 0], ["save", 0], ["j", 0], ["else", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["no", 0], ["add", 0], ["save", 0], ["if", 0], ["mark", 0], ["ans", 0], ["1", 0], ["if", 0], ["len", 0], ["mb", 0], ["no", 0], ["1", 0], ["or", 0], ["len", 0], ["mb", 0], ["1", 0], ["mark", 0], ["true", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["let", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["97", 0], ["123", 0], ["let", 0], ["add", 0], ["chr", 0], ["i", 0], ["flag", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["len", 0], ["let", 0], ["1", 0], ["flag", 0], ["1", 0], ["t", 0], ["s", 0], ["map", 0], ["str", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["s", 0], ["if", 0], ["t", 0], ["now", 0], ["set", 0], ["list", 0], ["s", 0], ["if", 0], ["flag", 0], ["1", 0], ["ans", 0], ["1", 0], ["let", 0], ["let", 0], ["intersection", 0], ["now", 0], ["print", 0], ["now", 0], ["print", 0], ["let", 0], ["if", 0], ["t", 0], ["if", 0], ["flag", 0], ["1", 0], ["ans", 0], ["1", 0], ["if", 0], ["s", 0], ["in", 0], ["let", 0], ["let", 0], ["remove", 0], ["s", 0], ["if", 0], ["t", 0], ["now", 0], ["list", 0], ["s", 0], ["for", 0], ["elem", 0], ["in", 0], ["now", 0], ["if", 0], ["elem", 0], ["in", 0], ["let", 0], ["let", 0], ["remove", 0], ["elem", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["setr", 0], ["set", 0], ["chr", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ord", 0], ["a", 0], ["ord", 0], ["z", 0], ["1", 0], ["setnr", 0], ["set", 0], ["ans", 0], ["0", 0], ["letter", 0], ["isq", 0], ["false", 0], ["a", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["s", 0], ["in", 0], ["a", 0], ["if", 0], ["s", 0], ["0", 0], ["setnr", 0], ["setnr", 0], ["set", 0], ["s", 0], ["2", 0], ["elif", 0], ["s", 0], ["0", 0], ["if", 0], ["len", 0], ["setr", 0], ["setnr", 0], ["1", 0], ["or", 0], ["isq", 0], ["ans", 0], ["1", 0], ["if", 0], ["len", 0], ["setr", 0], ["0", 0], ["setr", 0], ["set", 0], ["s", 0], ["2", 0], ["else", 0], ["setr", 0], ["setr", 0], ["set", 0], ["s", 0], ["2", 0], ["elif", 0], ["s", 0], ["0", 0], ["and", 0], ["s", 0], ["2", 0], ["a", 0], ["1", 0], ["2", 0], ["if", 0], ["len", 0], ["setr", 0], ["setnr", 0], ["1", 0], ["or", 0], ["isq", 0], ["ans", 0], ["1", 0], ["else", 0], ["setnr", 0], ["add", 0], ["s", 0], ["2", 0], ["elif", 0], ["s", 0], ["0", 0], ["and", 0], ["s", 0], ["2", 0], ["a", 0], ["1", 0], ["2", 0], ["isq", 0], ["true", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["chr", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["97", 0], ["123", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["s", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["split", 0], ["if", 0], ["d", 0], ["and", 0], ["len", 0], ["l", 0], ["1", 0], ["h", 0], ["0", 0], ["while", 0], ["h", 0], ["len", 0], ["l", 0], ["if", 0], ["not", 0], ["l", 0], ["h", 0], ["in", 0], ["s", 0], ["l", 0], ["pop", 0], ["h", 0], ["else", 0], ["h", 0], ["1", 0], ["elif", 0], ["d", 0], ["and", 0], ["len", 0], ["l", 0], ["1", 0], ["h", 0], ["0", 0], ["while", 0], ["h", 0], ["len", 0], ["l", 0], ["if", 0], ["l", 0], ["h", 0], ["in", 0], ["s", 0], ["l", 0], ["pop", 0], ["h", 0], ["else", 0], ["h", 0], ["1", 0], ["elif", 0], ["d", 0], ["and", 0], ["len", 0], ["l", 0], ["1", 0], ["if", 0], ["s", 0], ["in", 0], ["l", 0], ["l", 0], ["remove", 0], ["s", 0], ["elif", 0], ["d", 0], ["or", 0], ["d", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["k", 0], ["n", 0], ["int", 0], ["input", 0], ["set1", 0], ["set", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["97", 0], ["123", 0], ["set1", 0], ["add", 0], ["chr", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["split", 0], ["if", 0], ["len", 0], ["set1", 0], ["1", 0], ["if", 0], ["a", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["ans", 0], ["1", 0], ["if", 0], ["a", 0], ["ans", 0], ["1", 0], ["else", 0], ["set2", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["set2", 0], ["add", 0], ["i", 0], ["if", 0], ["a", 0], ["set1", 0], ["set2", 0], ["elif", 0], ["a", 0], ["set1", 0], ["set2", 0], ["elif", 0], ["a", 0], ["set1", 0], ["set2", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["seta", 0], ["set", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["flag", 0], ["false", 0], ["lol", 0], ["0", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["b", 0], ["1564", 0], ["if", 0], ["len", 0], ["seta", 0], ["1", 0], ["flag", 0], ["true", 0], ["pit", 0], ["input", 0], ["split", 0], ["if", 0], ["pit", 0], ["0", 0], ["if", 0], ["flag", 0], ["lol", 0], ["1", 0], ["curs", 0], ["set", 0], ["pit", 0], ["1", 0], ["seta", 0], ["seta", 0], ["curs", 0], ["if", 0], ["pit", 0], ["0", 0], ["curs", 0], ["set", 0], ["pit", 0], ["1", 0], ["seta", 0], ["curs", 0], ["if", 0], ["pit", 0], ["0", 0], ["if", 0], ["flag", 0], ["lol", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["lol", 0], ["1", 0], ["seta", 0], ["set", 0], ["pit", 0], ["1", 0], ["b", 0], ["1564", 0], ["print", 0], ["lol", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["set", 0], ["list", 0], ["qwertyuiopasdfghjklzxcvbnm", 0], ["al", 0], ["0", 0], ["q", 0], ["0", 0], ["z", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["0", 0], ["a", 0], ["set", 0], ["list", 0], ["k", 0], ["1", 0], ["elif", 0], ["k", 0], ["0", 0], ["a", 0], ["set", 0], ["list", 0], ["k", 0], ["1", 0], ["al", 0], ["1", 0], ["z", 0], ["1", 0], ["else", 0], ["a", 0], ["set", 0], ["list", 0], ["k", 0], ["1", 0], ["al", 0], ["1", 0], ["z", 0], ["1", 0], ["print", 0], ["al", 0], ["a", 0], ["if", 0], ["len", 0], ["a", 0], ["1", 0], ["q", 0], ["i", 0], ["1", 0], ["break", 0], ["if", 0], ["len", 0], ["a", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["n", 0], ["k", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["0", 0], ["al", 0], ["1", 0], ["print", 0], ["al", 0], ["z", 0], ["print", 0], ["al", 0], ["z", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["poss", 0], ["a", 1321], ["b", 1278], ["c", 1251], ["d", 1187], ["e", 1118], ["f", 1113], ["g", 1169], ["h", 1151], ["i", 1131], ["j", 1122], ["k", 1110], ["l", 1081], ["m", 1072], ["n", 1053], ["o", 0], ["p", 0], ["q", 0], ["r", 0], ["s", 0], ["t", 0], ["u", 0], ["v", 0], ["w", 0], ["x", 0], ["y", 0], ["z", 0], ["strikes", 0], ["0", 0], ["found", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["a", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["0", 0], ["poss", 0], ["poss", 0], ["intersection", 0], ["set", 0], ["a", 0], ["1", 0], ["if", 0], ["found", 0], ["strikes", 0], ["1", 0], ["elif", 0], ["a", 0], ["0", 0], ["poss", 0], ["poss", 0], ["difference", 0], ["set", 0], ["a", 0], ["1", 0], ["else", 0], ["poss", 0], ["poss", 0], ["difference", 0], ["set", 0], ["a", 0], ["1", 0], ["if", 0], ["found", 0], ["strikes", 0], ["1", 0], ["if", 0], ["len", 0], ["poss", 0], ["1", 0], ["found", 0], ["true", 0], ["print", 0], ["strikes", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00804162724692526, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0009522547540179086, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.019285042333019756, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.007066638098710867, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.000946073793755913, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.000946073793755913, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0070555032925682035, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0070555032925682035, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nTakahashi became a pastry chef and opened a shop La Confiserie d'ABC to celebrate AtCoder Beginner Contest 100.\nThe shop sells N kinds of cakes.\n\nEach kind of cake has three parameters \"beauty\", \"tastiness\" and \"popularity\". The i-th kind of cake has the beauty of x_i, the tastiness of y_i and the popularity of z_i.\n\nThese values may be zero or negative.\nRingo has decided to have M pieces of cakes here. He will choose the set of cakes as follows:\n - Do not have two or more pieces of the same kind of cake.\n - Under the condition above, choose the set of cakes to maximize (the absolute value of the total beauty) + (the absolute value of the total tastiness)  + (the absolute value of the total popularity).\nFind the maximum possible value of (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) for the set of cakes that Ringo chooses.\n\n-----Constraints-----\n - N is an integer between 1 and 1 \\ 000 (inclusive).\n - M is an integer between 0 and N (inclusive).\n - x_i, y_i, z_i \\ (1 \\leq i \\leq N) are integers between -10 \\ 000 \\ 000 \\ 000 and 10 \\ 000 \\ 000 \\ 000 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nx_1 y_1 z_1\nx_2 y_2 z_2\n :  :\nx_N y_N z_N\n\n-----Output-----\nPrint the maximum possible value of (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) for the set of cakes that Ringo chooses.\n\n-----Sample Input-----\n5 3\n3 1 4\n1 5 9\n2 6 5\n3 5 8\n9 7 9\n\n-----Sample Output-----\n56\n\nConsider having the 2-nd, 4-th and 5-th kinds of cakes. The total beauty, tastiness and popularity will be as follows:\n - Beauty: 1 + 3 + 9 = 13\n - Tastiness: 5 + 5 + 7 = 17\n - Popularity: 9 + 8 + 9 = 26\nThe value (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) here is 13 + 17 + 26 = 56. This is the maximum value.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\n\nN, M = map(int, input().split())\n\npm = [(i,j,k) for i in range(-1,2,2) for j in range(-1,2,2) for k in range(-1,2,2)]\nlst = []\n\nfor _ in range(N):\n\tx,y,z = map(int, input().split())\n\tlst.append((x,y,z))\n\nrlt = -sys.maxsize\nfor a,b,c in pm:\n\ttmp = []\n\tfor x,y,z in lst:\n\t\ttmp.append(a*x+b*y+c*z)\n\ttmp.sort(reverse=True)\n\trlt = max(rlt, sum(tmp[:M]))\n\t\nprint(rlt)\n", "from itertools import product\nN,M=map(int,input().split())\nx,y,z = [0]*N, [0]*N, [0]*N\nfor i in range(N):\n\tx[i],y[i],z[i] = map(int,input().split())\n\nprod= product([1,-1],repeat=3)\nans=0\nfor p in prod:\n\ts=[(p[0]*x[i]+p[1]*y[i]+p[2]*z[i]) for i in range(N)]\n\ts.sort(reverse=True)\n\ttmp=sum(s[:M])\n\tans=max(ans,tmp)\nprint(ans)\n", "N, M = list(map(int, input().split()))\nC = [tuple(map(int, input().split())) for _ in range(N)]\n\nres = 0\n\nfor i in range(8):\n\t#絶対値を足す、引くの2パターンで表現する\n\t\n\t#ケーキの値の合計を入れる配列\n\tD = [0 for _ in range(N)]\n\n\t#対応するbitが1なら足す、0なら引く\n\tfor j in range(N):\n\t\tx, y, z = C[j]\n\t\tif (i >> 0) & 1:\n\t\t\tD[j] += x\n\t\telse:\n\t\t\tD[j] -= x\n\t\tif (i >> 1) & 1:\n\t\t\tD[j] += y\n\t\telse:\n\t\t\tD[j] -= y\n\t\tif (i >> 2) & 1:\n\t\t\tD[j] += z\n\t\telse:\n\t\t\tD[j] -= z\n\n\t#価値が高い順にM個選ぶ\n\tD.sort(reverse=True)\n\tres = max(res, sum(D[:M]))\n\nprint(res)\n", "n, m = map(int, input().split())\n\ncakes = [[int(x) for x in input().split()] for _ in range(n)]\n\nans = 0\nfor i in range(8):\n\tcakes_sub = []\n\tkey = [1, 1, 1]\n\tfor j in range(3):\n\t\tif (i>>j)&1:\n\t\t\tkey[j] = -1.\n\tfor j in range(n):\n\t\tk = [0]*3\n\t\tfor p in range(3):\n\t\t\tk[p] = key[p]*cakes[j][p]\n\t\tl = sum(k)\n\t\tcakes_sub.append([l]+k)\n\tcakes_sub.sort(reverse=True)\n\ta, b, c = 0, 0, 0\n\tfor j in range(m):\n\t\ta += cakes_sub[j][1]\n\t\tb += cakes_sub[j][2]\n\t\tc += cakes_sub[j][3]\n\tsub = a+b+c\n\tif ans < sub:\n\t\tans = sub\n\nprint(int(ans))\n", "from itertools import product\nn,m = map(int,input().split())\nl = [list(map(int,input().split())) for _ in range(n)]\nbit = [1,-1]\nsu_max = 0\nfor i in product(bit,repeat=3):\n\t# print(i)\n\t\tl_1 = []\n\t\tfor a,b,c in l:\n\t\t\t\tt = a*(i[0]) + b*(i[1]) + c*(i[2])\n\t\t#  print(a,b,c,t)\n\t\t\t\tl_1.append(t)\n\t\tl_1 = sorted(l_1)[::-1]\n\t\tsu_max = max(su_max, sum(l_1[:m]))\nprint(su_max)\n", "n,m=map(int,input().split())\nl=[list(map(int,input().split())) for i in range(n)]\nfrom itertools import product as pr\nans=0\nfor i in pr((-1,1),repeat=3):\n\tli=sorted(l,key=lambda xf:sum(x*y for x,y in zip(i,xf)),reverse=1)[:m]\n\tans=max(ans,sum(abs(sum(j)) for j in zip(*li)))\nprint(ans)\n", "N, M=map(int, input().split())\nxyz=[list(map(int, input().split())) for _ in range(N)]\ncand=[]\n\n#+++\nwxyz=[tmp[0]+tmp[1]+tmp[2] for tmp in xyz]\nwxyz.sort(reverse=True)\ncand.append(sum(wxyz[:M]))\n\n#++-\nwxyz=[tmp[0]+tmp[1]-tmp[2] for tmp in xyz]\nwxyz.sort(reverse=True)\ncand.append(sum(wxyz[:M]))\n\n#+-+\nwxyz=[tmp[0]-tmp[1]+tmp[2] for tmp in xyz]\nwxyz.sort(reverse=True)\ncand.append(sum(wxyz[:M]))\n\n#+--\nwxyz=[tmp[0]-tmp[1]-tmp[2] for tmp in xyz]\nwxyz.sort(reverse=True)\ncand.append(sum(wxyz[:M]))\n\n#-++\nwxyz=[-tmp[0]+tmp[1]+tmp[2] for tmp in xyz]\nwxyz.sort(reverse=True)\ncand.append(sum(wxyz[:M]))\n\n#-+-\nwxyz=[-tmp[0]+tmp[1]-tmp[2] for tmp in xyz]\nwxyz.sort(reverse=True)\ncand.append(sum(wxyz[:M]))\n\n#--+\nwxyz=[-tmp[0]-tmp[1]+tmp[2] for tmp in xyz]\nwxyz.sort(reverse=True)\ncand.append(sum(wxyz[:M]))\n\n#---\nwxyz=[-tmp[0]-tmp[1]-tmp[2] for tmp in xyz]\nwxyz.sort(reverse=True)\ncand.append(sum(wxyz[:M]))\n\nprint(max(cand))\n", "from itertools import product\n\nN, M = map(int, input().split())\nL = [[] for _ in range(N)]\n\nfor i in range(N):\n\tx, y, z = map(int, input().split())\n\tL[i] += [x, y, z]\n\nans = 0\n\nfor pm in product([-1, 1], repeat=3):\n\ttemp = []\n\tfor l in L:\n\t\ttemp.append(pm[0]*l[0] + pm[1]*l[1] + pm[2]*l[2])\n\ttemp.sort(reverse = True)\n\tans = max(ans, sum(temp[:M]))\n\nprint(ans)\n", "N, M = [int(x) for x in input().split()]\nXYZ = [[int(x) for x in input().split()] for _ in range(N)]\n\nans = -float(\"inf\")\n\nfor i in range(2 ** 3):\n\thugo = [1, 1, 1]\n\tfor j in range(3):\n\t\tif i >> j & 1 != 1:\n\t\t\thugo[j] = -1\n\n\tA = []\n\tfor x, y, z in XYZ:\n\t\tA.append(x * hugo[0] + y * hugo[1] + z * hugo[2])\n\n\tA.sort(reverse=True)\n\tans = max(ans, sum(A[:M]))\n\nprint(ans)\n\n\n", "N,M = map(int,input().split())\nnum_list = []\nfor i in range(N):\n\tnum_list.append(list(map(int,input().split())))\n#print(N,M,num_list)\n\n'''\n[x,y,z]としてx+y+z,x-y+z,x+y-z,x-y-z,-x+y+z,-x-y+z,-x+y-z,-x-y-zの8パターン\nを計算してソート\n'''\nlist_xyz1 = []\nlist_xyz2 = []\nlist_xyz3 = []\nlist_xyz4 = []\nlist_xyz5 = []\nlist_xyz6 = []\nlist_xyz7 = []\nlist_xyz8 = []\n\nfor i in range(N):\n\tlist_xyz1.append(num_list[i][0] + num_list[i][1] + num_list[i][2])\n\tlist_xyz2.append(num_list[i][0] - num_list[i][1] + num_list[i][2])\n\tlist_xyz3.append(num_list[i][0] + num_list[i][1] - num_list[i][2])\n\tlist_xyz4.append(num_list[i][0] - num_list[i][1] - num_list[i][2])\n\tlist_xyz5.append(-num_list[i][0] + num_list[i][1] + num_list[i][2])\n\tlist_xyz6.append(-num_list[i][0] - num_list[i][1] + num_list[i][2])\n\tlist_xyz7.append(-num_list[i][0] + num_list[i][1] - num_list[i][2])\n\tlist_xyz8.append(-num_list[i][0] - num_list[i][1] - num_list[i][2])\n\nlist_xyz1.sort(reverse=True)\nlist_xyz2.sort(reverse=True)\nlist_xyz3.sort(reverse=True)\nlist_xyz4.sort(reverse=True)\nlist_xyz5.sort(reverse=True)\nlist_xyz6.sort(reverse=True)\nlist_xyz7.sort(reverse=True)\nlist_xyz8.sort(reverse=True)\n\nxyz1 = 0\nxyz2 = 0\nxyz3 = 0\nxyz4 = 0\nxyz5 = 0\nxyz6 = 0\nxyz7 = 0\nxyz8 = 0\n\nfor i in range(M):\n\txyz1 += list_xyz1[i]\n\txyz2 += list_xyz2[i]\n\txyz3 += list_xyz3[i]\n\txyz4 += list_xyz4[i]\n\txyz5 += list_xyz5[i]\n\txyz6 += list_xyz6[i]\n\txyz7 += list_xyz7[i]\n\txyz8 += list_xyz8[i]\n\n#print(list_xyz1)\nprint(max(xyz1,xyz2,xyz3,xyz4,xyz5,xyz6,xyz7,xyz8))\n", "# -*- coding: utf-8 -*-\n# モジュールのインポート\nimport sys\n\n\ndef get_input() -> tuple:\n\t\"\"\"\n\t標準入力を取得.\n\n\tReturns:\\n\n\t\ttuple: 標準入力\n\t\"\"\"\n\t# 標準入力を取得\n\tN, M = list(map(int, input().split()))\n\tcakes = []\n\tfor n in range(N):\n\t\tcake_n = list(map(int, input().split()))\n\t\tcakes.append(cake_n)\n\n\treturn N, M, cakes\n\n\ndef main(N: int, M: int, cakes: list) -> None:\n\t\"\"\"\n\tメイン処理.\n\n\tArgs:\\n\n\t\tN (int): ケーキの種類(1 <= N <= 1000)\n\t\tM (int): 食べる数(0 <= M <= N)\n\t\tcakes (list): ケーキの要素(-10000000000 <= x_i, y_i, z_i <= 10000000000)\n\t\"\"\"\n\t# 求解処理\n\tans = -sys.maxsize\n\telement = 3\n\tfor bit in range(1 << element):\n\t\tsign = [1 for i in range(element)]\n\t\tfor i in range(element):\n\t\t\tif bit & (1 << i):\n\t\t\t\tsign[i] *= -1\n\t\tcakes = sorted(cakes, key=lambda x: sum(\n\t\t\t[sign[i] * x[i] for i in range(element)]), reverse=True)\n\n\t\tindicator = [0 for i in range(element)]\n\t\tfor cake in cakes[:M]:\n\t\t\tfor i in range(element):\n\t\t\t\tindicator[i] += cake[i]\n\n\t\tans = max(ans, sum(map(abs, indicator)))\n\n\t# 結果出力\n\tprint(ans)\n\n\ndef __starting_point():\n\t# 標準入力を取得\n\tN, M, cakes = get_input()\n\n\t# メイン処理\n\tmain(N, M, cakes)\n\n__starting_point()\n", "N, M = map(int, input().split())\ncakes = tuple(tuple(map(int, input().split())) for _ in range(N))\ndef make_function(i):\n\treturn lambda t: sum(t[j] * (-1) ** ((i >> j) & 1) for j in range(3))\nfunctions = [make_function(i) for i in range(8)]\nprint(max(map(sum, (sorted((function(cake) for cake in cakes), reverse=True)[:M] for function in functions))))\n", "'''\n研究室PCでの解答\n'''\nimport math\n#import numpy as np\nimport queue\nimport bisect\nfrom collections import deque,defaultdict\nimport heapq as hpq\nfrom sys import stdin,setrecursionlimit\n#from scipy.sparse.csgraph import dijkstra\n#from scipy.sparse import csr_matrix\nipt = stdin.readline\nsetrecursionlimit(10**7)\nmod = 10**9+7\n\ndef main():\n\tn,m = list(map(int,ipt().split()))\n\tpts = [[] for i in range(8)]\n\tfor i in range(n):\n\t\tni = [int(i) for i in ipt().split()]\n\t\tfor j in range(8):\n\t\t\tnm = 0\n\t\t\tfor k in range(3):\n\t\t\t\tif (j>>k)&1:\n\t\t\t\t\tnm += ni[k]\n\t\t\t\telse:\n\t\t\t\t\tnm -= ni[k]\n\t\t\tpts[j].append(nm)\n\n\tma = 0\n\tfor i in range(8):\n\t\tpts[i].sort(reverse=True)\n\t\tsm = sum(pts[i][:m:])\n\t\tif ma < sm:\n\t\t\tma = sm\n\tprint(ma)\n\treturn None\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "N,M = map(int,input().split())\nl = []\nfor i in range(N):\n\tl.append(list(map(int,input().split())))\n\nans = 0\nfor i in range(2**3):\n\tbs = format(i,\"03b\")\n\tlsum = []\n\tfor j in range(N):\n\t\tlsum.append(sum([l[j][_]*(2*int(bs[_])-1) for _ in range(3)]))\n\tlsum.sort(reverse=True)\n\tans = max(ans,sum(lsum[:M]))\nprint(ans)  \n", "import sys\nfrom itertools import product\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n\tn, m = list(map(int, input().split()))\n\tXYZ = [list(map(int, input().split())) for _ in range(n)]\n\n\tres = 0\n\tfor x, y, z in product([-1, 1], repeat=3):\n\t\ttotal = []\n\t\tfor X, Y, Z in XYZ:\n\t\t\ts = X * x + Y * y + Z * z\n\t\t\ttotal.append(s)\n\t\ttotal.sort(reverse=True)\n\t\tres = max(res, sum(total[:m]))\n\tprint(res)\n\n\ndef __starting_point():\n\tresolve()\n\n__starting_point()\n", "n,m = list(map(int, input().split()))\n\nxp_yp_zp = [0] * n\nxp_yp_zn = [0] * n\nxp_yn_zp = [0] * n\nxn_yp_zp = [0] * n\nxp_yn_zn = [0] * n\nxn_yp_zn = [0] * n\nxn_yn_zp = [0] * n\nxn_yn_zn = [0] * n\n\nfor i in range(n):\n\tx,y,z = list(map(int, input().split()))\n\txp_yp_zp[i] = x + y + z\n\txp_yp_zn[i] = x + y - z\n\txp_yn_zp[i] = x - y + z\n\txn_yp_zp[i] = -x + y + z\n\txp_yn_zn[i] = x - y - z\n\txn_yp_zn[i] = -x + y - z\n\txn_yn_zp[i] = -x - y + z\n\txn_yn_zn[i] = -x - y - z\n\nxp_yp_zp.sort(reverse = True)\na = sum(xp_yp_zp[0:m])\n\nxp_yp_zn.sort(reverse = True)\nb = sum(xp_yp_zn[0:m])\n\nxp_yn_zp.sort(reverse = True)\nc = sum(xp_yn_zp[0:m])\n\nxn_yp_zp.sort(reverse = True)\nd = sum(xn_yp_zp[0:m])\n\nxp_yn_zn.sort(reverse = True)\ne = sum(xp_yn_zn[0:m])\n\nxn_yp_zn.sort(reverse = True)\nf = sum(xn_yp_zn[0:m])\n\nxn_yn_zp.sort(reverse = True)\ng = sum(xn_yn_zp[0:m])\n\nxn_yn_zn.sort(reverse = True)\nh = sum(xn_yn_zn[0:m])\n\nans = max(a,b,c,d,e,f,g,h)\n\nprint(ans)\n", "import heapq\nn,m= map(int,input().split())\npml = [[] for _ in range(8)]\nfor ll in pml:heapq.heapify(ll)\nfor _ in range(n):\n\tx,y,z= map(int,input().split())\n\tfor xs in [1,-1]:\n\t\tfor ys in [1,-1]:\n\t\t\tfor zs in [1,-1]:\n\t\t\t\ttempid = (4 if xs==1 else 0) + (2 if ys==1 else 0) + (1 if zs==1 else 0)\n\t\t\t\ttempspm = x*xs + y*ys + z*zs\n\t\t\t\theapq.heappush(pml[tempid],tempspm)\napml = [0]*8\nfor i in range(m):\n\tfor xs in [1,-1]:\n\t\tfor ys in [1,-1]:\n\t\t\tfor zs in [1,-1]:\n\t\t\t\ttempid = (4 if xs==1 else 0) + (2 if ys==1 else 0) + (1 if zs==1 else 0)\n\t\t\t\tapml[tempid] += - heapq.heappop(pml[tempid])\nprint(max(apml))\n", "N,M=map(int,input().split())\nc=[list(map(int,input().split())) for i in range(N)]\n\nbit=[[] for i in range(2**3)]\nfor k in range(N):\n\tfor i in range(2**3):\n\t\tt=c[k].copy()\n\t\tfor j in range(3):\n\t\t\tif(i>>j&1):\n\t\t\t\tt[j]*=-1\n\t\tbit[i].append(t)\nfor i in range(2**3):\n\tbit[i].sort(key=lambda x:(x[0]+x[1]+x[2]),reverse=True)\nres=0\nfor i in range(2**3):\n\tp=[1,1,1]\n\tfor j in range(3):\n\t\tif(i>>j&1):\n\t\t\tp[j]*=-1\n\tz,o,t=0,0,0\n\tfor k in range(M):\n\t\tz+=bit[i][k][0]*p[0]\n\t\to+=bit[i][k][1]*p[1]\n\t\tt+=bit[i][k][2]*p[2]\n\tres=max(res,abs(z)+abs(o)+abs(t))\nprint(res)\n", "import sys\nimport numpy as np\ninput = sys.stdin.readline\ndef main():\n\tn,m = map(int,input().split())\n\txyz = [[] for _ in range(8)]\n\tpm = [[ 1, 1, 1],\n\t\t  [ 1, 1,-1],\n\t\t  [ 1,-1, 1],\n\t\t  [-1, 1, 1],\n\t\t  [ 1,-1,-1],\n\t\t  [-1, 1,-1],\n\t\t  [-1,-1, 1],\n\t\t  [-1,-1,-1]]\n\tpm = np.array(pm)\n\tfor _ in range(n):\n\t\tx,y,z = map(int,input().split())\n\t\tfor i in range(8):\n\t\t\tk = np.array([x,y,z])\n\t\t\txyz[i].append(sum(pm[i]*k))\n\tans = -10**20\n\tfor i in range(8):\n\t\tX = xyz[i]\n\t\tX.sort(reverse=True)\n\t\tcnt = 0\n\t\tfor j in range(m):\n\t\t\tcnt += X[j]\n\t\tans = max(ans,cnt)\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "from itertools import product\nn, m = map(int, input().split())\nxyz = [tuple(map(int, input().split())) for _ in range(n)]\n\n\nans = 0\nfor subset in product((-1, 1), repeat=3):\n\tINF = 10**18\n\tdp = [-INF]*(n+1)\n\tdp[0] = 0\n\n\tdef func(xyz):\n\t\treturn sum(x*a for x, a in zip(xyz, subset))\n\n\tvalues = list(map(func, xyz))\n\tfor i, val in enumerate(values, 1):\n\t\tfor j in reversed(range(1, i+1)):\n\t\t\tdp[j] = max(dp[j-1]+val, dp[j])\n\tif ans < dp[m]:\n\t\tans = dp[m]\n\nprint(ans)\n", "n, m = map(int, input().split())\nif m == 0:\n\tprint(0)\n\treturn\n\nres_111 = []\nres_110 = []\nres_101 = []\nres_100 = []\nres_011 = []\nres_010 = []\nres_001 = []\nres_000 = []\n\nfor i in range(n):\n\tx, y, z = map(int, input().split())\n\tres_111.append(x+y+z)\n\tres_110.append(x+y-z)\n\tres_101.append(x-y+z)\n\tres_100.append(x-y-z)\n\tres_011.append(-x+y+z)\n\tres_010.append(-x+y-z)\n\tres_001.append(-x-y+z)\n\tres_000.append(-x-y-z)\n\nres_111.sort()\nres_110.sort()\nres_101.sort()\nres_100.sort()\nres_011.sort()\nres_010.sort()\nres_001.sort()\nres_000.sort()\n\nprint(max(sum(res_111[-m:]),sum(res_110[-m:]),sum(res_101[-m:]),sum(res_100[-m:]),sum(res_011[-m:]),sum(res_010[-m:]),sum(res_001[-m:]),sum(res_000[-m:])))\n", "# D - Patisserie ABC\n\nN, M = list(map(int, input().split()))\nA = [[] for _ in range(8)]\n\nfor i in range(N):\n\tx, y, z = list(map(int, input().split()))\n\tA[0].append(x+y+z)\n\tA[1].append(x+y-z)\n\tA[2].append(x-y+z)\n\tA[3].append(x-y-z)\n\tA[4].append(-x+y+z)\n\tA[5].append(-x+y-z)\n\tA[6].append(-x-y+z)\n\tA[7].append(-x-y-z)\n\nans = 0\nfor i in range(8):\n\tA[i].sort(reverse=True)\n\tans = max(ans, sum(A[i][0:M]))\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\nn, m = map(int,input().split())\nCake = []\nfor _ in range(n):\n\tc = list(map(int,input().split()))\n\tCake.append(c)\n\ntotal = []\n\nfor i in range(8):\n\ttotal_i = []\n\tfor k in Cake:\n\t\thyouka = 0\n\t\tfor j in range(3):\n\t\t\tif ((i >> j) & 1):\n\t\t\t\thyouka += k[j]\n\t\t\telse:\n\t\t\t\thyouka -= k[j]\n\t\ttotal_i.append(hyouka)\n\ttotal_i.sort(reverse=True)\n\tgoukei = 0\n\tfor l in range(m):\n\t\tgoukei += total_i[l]\n\ttotal.append(goukei)\n\nprint(max(total))\n", "n, m = list(map(int, input().split()))\np = [list(map(int, input().split())) for i in range(n)]\ns = []\nfor i in range(8):\n\ts.append([])\n\tfor j in range(n):\n\t\tx, y, z = p[j]\n\t\tsx = i // 4 % 2 * 2 - 1\n\t\tsy = i // 2 % 2 * 2 - 1\n\t\tsz = i % 2 * 2 - 1\n\t\ts[i].append(sx * x + sy * y + sz * z)\n\ts[i] = sorted(s[i], reverse=True)\nans = 0\nfor i in range(8):\n\tans = max(ans, sum(s[i][:m]))\nprint(ans)\n", "from sys import stdin\nimport numpy as np\ndef main():\n\t#入力\n\treadline=stdin.readline\n\tn,m=map(int,readline().split())\n\tA=np.array([list(map(int,readline().split())) for _ in range(n)],dtype=\"int64\")\n\n\tans=-float(\"inf\")\n\tfor i in (-1,1):\n\t\tfor j in (-1,1):\n\t\t\tfor k in (-1,1):\n\t\t\t\tB=np.array([i,j,k],dtype=\"int64\")\n\t\t\t\tres=np.sort(np.dot(A,B))[::-1][:m].sum()\n\t\t\t\tans=max(ans,res)\n\t\t\t\t\n\tprint(ans)\n\t\ndef __starting_point():\n\tmain()\n__starting_point()\n", "from itertools import *\nN,M = map(int,input().split())\nC = [list(map(int,input().split())) for n in range(N)]\nprint(max([sum(sorted([i*x+j*y+k*z for x,y,z in C],reverse=True)[:M]) for i,j,k in product([-1,1],[-1,1],[-1,1])]))\n", "from sys import stdin\nnii=lambda:map(int,stdin.readline().split())\nlnii=lambda:list(map(int,stdin.readline().split()))\n\nn,m=nii()\nl=[lnii() for i in range(n)]\n\nans=0\nfor i in range(2**3):\n\tt_l=[]\n\tfor j in l:\n\t\tt_num=0\n\t\tfor k in range(3):\n\t\t\tif (i>>k)&1:\n\t\t\t\tt_num+=j[k]\n\t\t\telse:\n\t\t\t\tt_num-=j[k]\n\t\tt_l.append(t_num)\n\n\tt_l.sort(reverse=True)\n\tans=max(ans,sum(t_l[:m]))\n\nprint(ans)\n", "n, m = map(int, input().split())\nxyz = [list(map(int, input().split())) for i in range(n)]\nl1, l2, l3, l4, l5, l6, l7, l8 = sorted(xyz, key=lambda x: x[0] + x[1] + x[2], reverse=True), sorted(xyz, key=lambda x: x[0] + x[1] - x[2], reverse=True), sorted(xyz, key=lambda x: x[0] - x[1] + x[2], reverse=True), sorted(xyz, key=lambda x: x[0] - x[1] - x[2], reverse=True), sorted(xyz, key=lambda x: -(x[0]) + x[1] + x[2], reverse=True), sorted(xyz, key=lambda x: -(x[0]) + x[1] - x[2], reverse=True), sorted(xyz, key=lambda x: -(x[0]) - x[1] + x[2], reverse=True), sorted(xyz, key=lambda x: -(x[0]) - x[1] - x[2], reverse=True)\ndef sum2(l):\n\tans = 0\n\tcnt = 0\n\tfor i in l:\n\t\tcnt += i[0]\n\tans += abs(cnt)\n\tcnt = 0\n\tfor i in l:\n\t\tcnt += i[1]\n\tans += abs(cnt)\n\tcnt = 0\n\tfor i in l:\n\t\tcnt += i[2]\n\tans += abs(cnt)\n\treturn ans\nprint(max(sum2(l1[:m]),sum2(l2[:m]),sum2(l3[:m]),sum2(l4[:m]),sum2(l5[:m]),sum2(l6[:m]),sum2(l7[:m]),sum2(l8[:m]),))\n", "def solve():\n\tn, m = list(map(int, input().split()))\n\ta = [[] for _ in range(1 << 3)]\n\tans = - 10 ** 14\n\tfor _ in range(n):\n\t\ts = list(map(int, input().split()))\n\t\tfor i in range(1 << 3):\n\t\t\ttmp = 0\n\t\t\tfor j in range(3):\n\t\t\t\tif i >> j & 1:\n\t\t\t\t\ttmp += s[j]\n\t\t\t\telse:\n\t\t\t\t\ttmp -= s[j]\n\t\t\ta[i].append(tmp)\n\tfor x in range(1 << 3):\n\t\tres = sorted(a[x], reverse=True)\n\t\tans = max(ans, sum(res[:m]))\n\tprint(ans)\n\n\nsolve()\n\n", "import itertools\n\n\ndef main():\n\tN, M = list(map(int, input().split(' ')))\n\tcakes = [list(map(int, input().split(' '))) for _ in range(N)]\n\tans = 0\n\tfor sign in itertools.product([-1, 1], repeat=3):\n\t\tscores = [sum([s * c for s, c in zip(sign, cake)]) for cake in cakes]\n\t\tscores.sort(reverse=True)\n\t\tans = max([ans, sum(scores[:M])])\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from sys import stdin\nnii=lambda:map(int,stdin.readline().split())\nlnii=lambda:list(map(int,stdin.readline().split()))\n\nn,m=nii()\nl=[lnii() for i in range(n)]\n\nans=0\nfor i in [1,-1]:\n\tfor j in [1,-1]:\n\t\tfor k in [1,-1]:\n\t\t\tt_num=0\n\t\t\tt_l=[]\n\t\t\tfor x,y,z in l:\n\t\t\t\tt_num=x*i+y*j+z*k\n\t\t\t\tt_l.append(t_num)\n\t\t\tt_l.sort(reverse=True)\n\t\t\tans=max(ans,sum(t_l[:m]))\n\nprint(ans)\n", "n, m = map(int, input().split())\nAs = [[] for i in range(8)]\nfor i in range(n):\n\tx,y,z = map(int, input().split())\n\tAs[0].append(-x-y-z)\n\tAs[1].append(-x-y+z)\n\tAs[2].append(-x+y-z)\n\tAs[3].append(-x+y+z)\n\tAs[4].append(x-y-z)\n\tAs[5].append(x-y+z)\n\tAs[6].append(x+y-z)\n\tAs[7].append(x+y+z)\n\nans = 0\nfor a in As:\n\ta.sort(reverse=True)\n\ts = sum(a[:m])\n\tans = max(ans,s)\nprint(ans)\n", "n,m = map(int, input().split(\" \"))\na = [list(map(int, input().split(\" \"))) for i in range(n)]\nans = 0\n#print(a)\nfor i in range(2 ** 3):\n\ttotal = []\n\tminus = [1 for _ in range(3)]\n\tfor j in range(3):\n\t\tif i >> j & 1:\n\t\t\tminus[j] *= -1\n\tfor k in range(n):\n\t\ttotal.append(a[k][0] * minus[0] + a[k][1] * minus[1] + a[k][2] * minus[2])\n\tans = max(ans, sum(sorted(total, reverse=1)[:m]))\nprint(ans)\n", "N,M=list(map(int, input().split()))\n\n#全＋、全ー、\nL=[]\nfor i in range(N):\n\tx,y,z=list(map(int, input().split()))\n\ta1=x+y+z\n\ta2=-x+y+z\n\ta3=-x-y+z\n\ta4=-x-y-z\n\ta5=x-y+z\n\ta6=x-y-z\n\ta7=x+y-z\n\ta8=-x+y-z\n\tL.append([x,y,z,a1,a2,a3,a4,a5,a6,a7,a8])\n\nans=0\nfor i in range(3,11):\n\tL=sorted(L, key=lambda x: x[i], reverse=True)\n\tsub=0\n\tfor j in range(M):\n\t\tt=L[j]\n\t\tsub+=t[i]\n\tans=max(ans, sub)\nprint(ans)\n", "N,Eat = map(int,input().split())\ncakes_ls = [[0,0,0] for _ in range(N)]\nfor i in range(N):\n\tcakes_ls[i] = list(map(int,input().split()))\n\nPatterns = 2**3\nans = 0\nfor i in range(Patterns):\n\tmult = [1] * 3\n\tfor j in range(3):\n\t\tif (i>>j) & 1:\n\t\t\tmult[j] = -1\n\t\n\tvalue_ls = [0] * N\n\tfor n in range(N):\n\t\ttarget = cakes_ls[n]\n\t\tvalue = 0\n\t\tfor x in range(3):\n\t\t\tvalue += target[x] * mult[x]\n\t\tvalue_ls[n] = value\n\tvalue_ls.sort(reverse=True)\n\t#print(value_ls)\n\t#print(mult,sum(value_ls[:Eat]))\n\tans = max(ans,sum(value_ls[:Eat]))\nprint(ans)\n", "n,m = map(int,input().split())\nvalue_sum = [[0]*n for i in range(8)]\nans = [0]*8\nfor i in range(n):\n\tvalue = list(map(int,input().split()))\n\tfor j in range(8):\n\t\tfor k in range(3):\n\t\t\tif ((j>>k)&1):\n\t\t\t\tvalue_sum[j][i] += value[k]\n\t\t\telse:\n\t\t\t\tvalue_sum[j][i] -= value[k]\nfor i in range(8): \n\tvalue_sum[i].sort(reverse=True)\n\tans[i] = sum(value_sum[i][:m])\nprint(max(ans))\n", "N,M=map(int,input().split())\nX=[]\nY=[]\nZ=[]\nG1=[]\nG2=[]\nG3=[]\nG4=[]\nG5=[]\nG6=[]\nG7=[]\nG8=[]\n\nfor i in range(N):\n\tx,y,z=map(int,input().split())\n\tG1.append(-(x+y+z))\n\tG2.append(-(x+y)+z)\n\tG3.append(-x+y-z)\n\tG4.append(-x+(y+z))\n\tG5.append(x-(y+z))\n\tG6.append(x-y+z)\n\tG7.append(x+y-z)\n\tG8.append(x+y+z)\nG1.sort(reverse=True)\nG2.sort(reverse=True)\nG3.sort(reverse=True)\nG4.sort(reverse=True)\nG5.sort(reverse=True)\nG6.sort(reverse=True)\nG7.sort(reverse=True)\nG8.sort(reverse=True)\nans=0\nval1=0\nval2=0\nval3=0\nval4=0\nval5=0\nval6=0\nval7=0\nval8=0\nfor i in range(M):\n\tval1+=G1[i]\n\tval2+=G2[i]\n\tval3+=G3[i]\n\tval4+=G4[i]\n\tval5+=G5[i]\n\tval6+=G6[i]\n\tval7+=G7[i]\n\tval8+=G8[i]\n\nans=max(val1,val2,val3,val4,val5,val6,val7,val8)\nprint(ans)\n", "import sys\nimport math\nimport collections\nimport bisect\nimport copy\n\n# import numpy as np\n\nsys.setrecursionlimit(10 ** 7)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nni = lambda: int(sys.stdin.readline())\nns = lambda: list(map(int, sys.stdin.readline().split()))\nna = lambda: list(map(int, sys.stdin.readline().split()))\nna1 = lambda: list([int(x) - 1 for x in sys.stdin.readline().split()])\n\n\n# ===CODE===\n\n\ndef main():\n\tn, m = ns()\n\tres = [[] for _ in range(2 ** 3)]\n\n\tif m == 0:\n\t\tprint((0))\n\t\treturn\n\n\tfor _ in range(n):\n\t\ta = na()\n\n\t\tfor i in range(2 ** 3):\n\t\t\ttmp = 0\n\t\t\tfor j in range(3):\n\t\t\t\tif i >> j & 1:\n\t\t\t\t\ttmp += -a[j]\n\t\t\t\telse:\n\t\t\t\t\ttmp += a[j]\n\t\t\tres[i].append(tmp)\n\n\tans = -INF\n\tfor resi in res:\n\t\tresi.sort(reverse=True)\n\t\tans = max(ans, sum(resi[:m]))\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\n\n\ndef input():\n\treturn sys.stdin.readline().strip()\n\n\nsys.setrecursionlimit(20000000)\nMOD = 10 ** 9 + 7\n\n\ndef main():\n\tN, M = list(map(int, input().split()))\n\tcake = [list(map(int, input().split())) for _ in range(N)]\n\tC = [[] for _ in range(8)]\n\tfor i in range(2 ** 3):\n\t\tfor c in range(N):\n\t\t\tm = 0\n\t\t\tfor j in range(3):\n\t\t\t\tif (i >> j) & 1:\n\t\t\t\t\tm += cake[c][j]\n\t\t\t\telse:\n\t\t\t\t\tm -= cake[c][j]\n\t\t\tC[i].append(m)\n\tanswer = 0\n\tfor i in range(8):\n\t\tC[i].sort(reverse=True)\n\t\tans = sum(C[i][:M])\n\t\tif ans > answer:\n\t\t\tanswer = ans\n\tprint(answer)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n,m = list(map(int, input().split()))\na = [list(map(int, input().split())) for _ in range(n)]\nb = [[] for _ in range(8)]\nc = []\nfor i in range(n):\n\tx,y,z = a[i][0],a[i][1],a[i][2]\n\tb[0].append(x+y+z)\n\tb[1].append(x+y-z)\n\tb[2].append(x-y+z)\n\tb[3].append(x-y-z)\n\tb[4].append(-x+y+z)\n\tb[5].append(-x+y-z)\n\tb[6].append(-x-y+z)\n\tb[7].append(-x-y-z)\nfor i in range(8):\n\tb[i].sort()\n\tb[i].reverse()\nfor i in range(8):\n\tc.append(sum(b[i][:m]))\nprint((max(c)))\n", "N,M = map(int,input().split())\nnum_list = []\nfor i in range(N):\n\tnum_list.append(list(map(int,input().split())))\n#print(N,M,num_list)\n\n'''\n[x,y,z]としてx+y+z,x-y+z,x+y-z,x-y-z,-x+y+z,-x-y+z,-x+y-z,-x-y-zの8パターン\nを計算してソート\n'''\nlist_xyz1 = []\nlist_xyz2 = []\nlist_xyz3 = []\nlist_xyz4 = []\nlist_xyz5 = []\nlist_xyz6 = []\nlist_xyz7 = []\nlist_xyz8 = []\n\nfor i in range(N):\n\tlist_xyz1.append(num_list[i][0] + num_list[i][1] + num_list[i][2])\n\tlist_xyz2.append(num_list[i][0] - num_list[i][1] + num_list[i][2])\n\tlist_xyz3.append(num_list[i][0] + num_list[i][1] - num_list[i][2])\n\tlist_xyz4.append(num_list[i][0] - num_list[i][1] - num_list[i][2])\n\tlist_xyz5.append(-num_list[i][0] + num_list[i][1] + num_list[i][2])\n\tlist_xyz6.append(-num_list[i][0] - num_list[i][1] + num_list[i][2])\n\tlist_xyz7.append(-num_list[i][0] + num_list[i][1] - num_list[i][2])\n\tlist_xyz8.append(-num_list[i][0] - num_list[i][1] - num_list[i][2])\n\nlist_xyz1.sort()\nlist_xyz2.sort()\nlist_xyz3.sort()\nlist_xyz4.sort()\nlist_xyz5.sort()\nlist_xyz6.sort()\nlist_xyz7.sort()\nlist_xyz8.sort()\n\nxyz1 = 0\nxyz2 = 0\nxyz3 = 0\nxyz4 = 0\nxyz5 = 0\nxyz6 = 0\nxyz7 = 0\nxyz8 = 0\n\nfor i in range(M):\n\txyz1 += list_xyz1[N-i-1]\n\txyz2 += list_xyz2[N-i-1]\n\txyz3 += list_xyz3[N-i-1]\n\txyz4 += list_xyz4[N-i-1]\n\txyz5 += list_xyz5[N-i-1]\n\txyz6 += list_xyz6[N-i-1]\n\txyz7 += list_xyz7[N-i-1]\n\txyz8 += list_xyz8[N-i-1]\n\n#print(list_xyz1)\nprint(max(xyz1,xyz2,xyz3,xyz4,xyz5,xyz6,xyz7,xyz8))\n", "#!/usr/bin/env python3\nfrom itertools import product\nn, m = list(map(int, input().split()))\nxyz = [list(map(int, input().split())) for i in range(n)]\n\ndp = [[0 for i in range(m+1)] for j in range(n+1)]\n\n\n# eval\n# eval_list = [\"+xyz[i-1][0]+xyz[i-1][1]+xyz[i-1][2]\",\n#              \"+xyz[i-1][0]+xyz[i-1][1]-xyz[i-1][2]\",\n#              \"+xyz[i-1][0]-xyz[i-1][1]+xyz[i-1][2]\",\n#              \"+xyz[i-1][0]-xyz[i-1][1]-xyz[i-1][2]\",\n#              \"-xyz[i-1][0]+xyz[i-1][1]+xyz[i-1][2]\",\n#              \"-xyz[i-1][0]+xyz[i-1][1]-xyz[i-1][2]\",\n#              \"-xyz[i-1][0]-xyz[i-1][1]+xyz[i-1][2]\",\n#              \"-xyz[i-1][0]-xyz[i-1][1]-xyz[i-1][2]\", ]\n\nans = 0\nfor a, b, c in product([1, -1], repeat=3):\n\ttotal = []\n\tfor x, y, z in xyz:\n\t\ts = x*a+y*b+z*c\n\t\ttotal.append(s)\n\ttotal.sort(reverse=True)\n\tans = max(ans, sum(total[:m]))\nprint(ans)\n", "from itertools import product\nfrom sys import stdin\nreadline = stdin.readline\n\nN, M = list(map(int, readline().split()))\nxyz = [tuple(map(int, readline().split())) for _ in range(N)]\n\nresult = 0\nfor s in product([1, -1], repeat=3):\n\txyz.sort(reverse=True, key=lambda e: s[0] * e[0] + s[1] * e[1] + s[2] * e[2])\n\tcx, cy, cz = 0, 0, 0\n\tfor x, y, z in xyz[:M]:\n\t\tcx += x\n\t\tcy += y\n\t\tcz += z\n\tresult = max(result, abs(cx) + abs(cy) + abs(cz))\nprint(result)\n", "import sys\n\ninput = sys.stdin.readline\nN, M = map(int, input().split())\nscores = []\nfor _ in range(N):\n\tx, y, z = map(int, input().split())\n\tscores.append((x, y, z))\n\nans = 0\nfor i in range(2**3):\n\ttmp_scores = []\n\tfor score in scores:\n\t\ttmp_score = 0\n\t\tfor j in range(3):\n\t\t\tif (i >> j) & 1:\n\t\t\t\t tmp_score -= score[j]\n\t\t\telse:\n\t\t\t\t tmp_score += score[j]\n\t\ttmp_scores.append(tmp_score)\n\ttmp_scores.sort(reverse=True)\n\tans = max(ans, sum(tmp_scores[:M]))\n\nprint(ans)\n", "N,M = list(map(int,input().split()))\nL = []\nfor _ in range(N):\n\tl = list(map(int,input().split()))\n\tL.append(l)\ncand = []\nfor bit in range(8):\n\tplus_minus = [1,1,1]\n\tfor  b in range(3):\n\t\tif bit & (1 << b):\n\t\t\tplus_minus[b] = -1\n\tL = sorted(L, key = lambda x:x[0]*plus_minus[0]+x[1]*plus_minus[1]+x[2]*plus_minus[2])\n\ttmp = 0\n\tfor i in range(M):\n\t\tfor j in range(3):\n\t\t\ttmp += L[i][j] * plus_minus[j]\n\tcand.append(tmp)\n\nprint((max(abs(min(cand)),max(cand))))\n\n\n", "# -*- coding: utf-8 -*-\n# モジュールのインポート\nimport sys\n\n# 標準入力を取得\nN, M = list(map(int, input().split()))\ncakes = []\nfor n in range(N):\n\tcake_n = list(map(int, input().split()))\n\tcakes.append(cake_n)\n\n# 求解処理\nans = -sys.maxsize\nelement = 3\nfor bit in range(1 << element):\n\tsign = [1 for i in range(element)]\n\tfor i in range(element):\n\t\tif bit & (1 << i):\n\t\t\tsign[i] *= -1\n\tcakes = sorted(cakes, key=lambda x: sum(\n\t\t[sign[i] * x[i] for i in range(element)]), reverse=True)\n\n\tindicator = [0 for i in range(element)]\n\tfor cake in cakes[:M]:\n\t\tfor i in range(element):\n\t\t\tindicator[i] += cake[i]\n\n\tans = max(ans, sum(map(abs, indicator)))\n\n# 結果出力\nprint(ans)\n", "from itertools import product\nn, m = list(map(int, input().split()))\nxyz = [tuple(map(int, input().split()))for _ in range(n)]\n\nans = 0\nfor subset in product((-1, 1), repeat=3):\n\tdef func(xyz):\n\t\treturn sum(x*a for x, a in zip(xyz, subset))\n\tscore = sum(sorted(map(func, xyz), reverse=True)[:m])\n\tif ans < score:\n\t\tans = score\nprint(ans)\n", "n , m = map(int,input().split())\np = [(1,1,1),(1,1,-1),(1,-1,1),(1,-1,-1),(-1,1,1),(-1,1,-1),(-1,-1,1),(-1,-1,-1)]\ncake = [list(map(int,input().split())) for i in range(n)]\nans = 0\nfor a , b , c in p:\n\tcou = []\n\tfor x , y , z in cake:\n\t\tcou.append(x*a+y*b+z*c)\n\tcou.sort(reverse=True)\n\tans = max(ans,sum(cou[:m]))\nprint(ans)\n", "N,M = map(int,input().split())\nxyz = [tuple(map(int,input().split())) for _ in range(N)]\nans = 0\nfor i in range(2**3):\n\tsign = [(-1)**((i >> j) & 1) for j in range(3)]\n\ts,t,u = sign\n\txyz.sort(key=lambda x:s*x[0]+t*x[1]+u*x[2], reverse=True)\n\ts,t,u = 0,0,0\n\tfor x,y,z in xyz[:M]:\n\t\ts += x\n\t\tt += y\n\t\tu += z\n\tans = max(ans, abs(s)+abs(t)+abs(u))\nprint(ans)\n", "import bisect,collections,copy,heapq,itertools,math,numpy,string\nimport sys\nfrom operator import itemgetter\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\nN, M = LI()\nA = [LI() for _ in range(N)]\nm = [[0] * 3 for _ in range(8)]\n\nfor c in range(4):\n\tA.sort(key=lambda x:(((c>>2)&1)*2-1)*x[0]+(((c>>1)&1)*2-1)*(-1)*x[1]+((c&1)*2-1)*x[2])\n\tfor i in range(M):\n\t\tfor j in range(3):\n\t\t\tm[c*2][j] += A[i][j]\n\t\t\tm[c*2+1][j] += A[N-1-i][j]\n\nprint((max([abs(x[0])+abs(x[1])+abs(x[2]) for x in m])))\n", "import sys\n\nsys.setrecursionlimit(10 ** 6)\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\n\n\ndef input():\n\treturn sys.stdin.readline().strip()\n\n\ndef is_nth_bit_set(x, n):\n\tif x & (1 << n):\n\t\treturn True\n\telse:\n\t\treturn False\n\n\ndef main():\n\tN, M = list(map(int, input().split()))\n\txyz = []\n\tfor _ in range(N):\n\t\tx, y, z = list(map(int, input().split()))\n\t\txyz.append((x, y, z))\n\n\tans = 0\n\tfor i in range(8):\n\t\tarr = []\n\t\tfor x, y, z in xyz:\n\t\t\ttmp = 0\n\t\t\tif is_nth_bit_set(i, 0):\n\t\t\t\ttmp += x\n\t\t\telse:\n\t\t\t\ttmp -= x\n\n\t\t\tif is_nth_bit_set(i, 1):\n\t\t\t\ttmp += y\n\t\t\telse:\n\t\t\t\ttmp -= y\n\n\t\t\tif is_nth_bit_set(i, 2):\n\t\t\t\ttmp += z\n\t\t\telse:\n\t\t\t\ttmp -= z\n\t\t\tarr.append(tmp)\n\n\t\tarr.sort(reverse=True)\n\t\tans = max(sum(arr[:M]), ans)\n\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\ninput = sys.stdin.readline\n\n\ndef log(*args):\n\tprint(*args, file=sys.stderr)\n\n\ndef main():\n\tn, m = map(int, input().split())\n\tl = [list(map(int, input().split())) for _ in range(n)]\n\tans = 0\n\tfor i in [-1, 1]:\n\t\tfor j in [-1, 1]:\n\t\t\tfor k in [-1, 1]:\n\t\t\t\tl2 = []\n\t\t\t\tfor (x, y, z) in l:\n\t\t\t\t\ts = x * i + y * j + z * k\n\t\t\t\t\tl2.append(s)\n\t\t\t\tl2 = sorted(l2, reverse=True)\n\t\t\t\tans = max(ans, sum(l2[:m]))\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "#!/usr/bin python3\n# -*- coding: utf-8 -*-\n\nN, M = list(map(int, input().split()))\nvals = [[] for _ in range(8)]\nfor _ in range(N):\n\ta, b, c = list(map(int,input().split()))\n\tvals[0].append( a+b+c)\n\tvals[1].append( a+b-c)\n\tvals[2].append( a-b+c)\n\tvals[3].append( a-b-c)\n\tvals[4].append(-a+b+c)\n\tvals[5].append(-a+b-c)\n\tvals[6].append(-a-b+c)\n\tvals[7].append(-a-b-c)\nret = 0\nfor val in vals:\n\tval.sort(reverse = True)\n\tret = max(ret, sum(val[:M]))\nprint(ret)\n", "import sys,math,collections,itertools\ninput = sys.stdin.readline\n\nx=0\ny=0\nz=0\nxyz=[]\nN,M=list(map(int,input().split()))\nfor _ in range(N):\n\tx0,y0,z0 = list(map(int,input().split()))\n\tx+=x0\n\ty+=y0\n\tz+=z0\n\txyz.append([x0,y0,z0])\nlmn =[]\n\nfor x0,y0,z0 in xyz:\n\ttmp = [x0,y0,z0]\n\tfor fx in [-1,1]:\n\t\tfor fy in [-1,1]:\n\t\t\tfor fz in [-1,1]:\n\t\t\t\ttmp.append(x0*fx+y0*fy+z0*fz)\n\tlmn.append(tmp)\n\nans = 0\nfor i in range(8):\n\tlmn.sort(key = lambda x:-x[i+3])\n\tx=0\n\ty=0\n\tz=0\n\tfor j in range(M):\n\t\tx += lmn[j][0]\n\t\ty += lmn[j][1]\n\t\tz += lmn[j][2]\n\tans = max(ans,abs(x)+abs(y)+abs(z))\nprint(ans)\n\t\t\n\t\n", "\nfrom itertools import product\n\ndef convert(x, pt):\n\treturn sum(e if p else -e for e, p in zip(x, pt))\n\ndef submit():\n\tn, m = (int(a) for a in input().split())\n\tcakes = [tuple(map(int, input().split())) for _ in range(n)]\n\n\n\tans = 0\n\tfor pt in product([0, 1], repeat=3):\n\t\tpt_cakes = [convert(c, pt) for c in cakes]\n\t\tpt_cakes.sort(reverse=True)\n\t\tpt_sum = sum(pt_cakes[:m])\n\t\tif pt_sum > ans:\n\t\t\tans = pt_sum\n\n\tprint(ans)        \n\nsubmit()\n", "from itertools import product\nN,M=map(int,input().split())\nx,y,z = [0]*N, [0]*N, [0]*N\nfor i in range(N):\n\tx[i],y[i],z[i] = map(int,input().split())\n\npat= product([1,-1],repeat=3)\nans=0\nfor v in pat:\n\ts = [ (v[0]*x[i]+v[1]*y[i]+v[2]*z[i]) for i in range(N)]\n\ts.sort(reverse=True)\n\ttmp=sum(s[:M])\n\tans=max(ans,tmp)\nprint(ans)\n", "from sys import stdin\nnii=lambda:map(int,stdin.readline().split())\nlnii=lambda:list(map(int,stdin.readline().split()))\n\nn,m=nii()\nl=[lnii() for i in range(n)]\n\nans=0\nfor i in [1,-1]:\n\tfor j in [1,-1]:\n\t\tfor k in [1,-1]:\n\t\t\tt_num=0\n\t\t\tt_l=[]\n\t\t\tfor x,y,z in l:\n\t\t\t\tt_num=x*i+y*j+z*k\n\t\t\t\tt_l.append(t_num)\n\t\t\tt_l.sort(reverse=True)\n\t\t\tans=max(ans,sum(t_l[:m]))\n\nprint(ans)\n", "n, m = map(int, input().split())\nl = [list(map(int, input().split())) for i in range(n)]\n\nsum_list = [0] * 8\n\nl_ppp = [0] * n\nl_ppm = [0] * n\nl_pmp = [0] * n\nl_mpp = [0] * n\nl_pmm = [0] * n\nl_mpm = [0] * n\nl_mmp = [0] * n\nl_mmm = [0] * n\n\nfor i in range(n):\n\tl_ppp[i] = l[i][0] + l[i][1] + l[i][2]\n\tl_ppm[i] = l[i][0] + l[i][1] - l[i][2]\n\tl_pmp[i] = l[i][0] - l[i][1] + l[i][2]\n\tl_mpp[i] = - l[i][0] + l[i][1] + l[i][2]\n\tl_pmm[i] = l[i][0] - l[i][1] - l[i][2]\n\tl_mpm[i] = - l[i][0] + l[i][1] - l[i][2]\n\tl_mmp[i] = - l[i][0] - l[i][1] + l[i][2]\n\tl_mmm[i] = - l[i][0] - l[i][1] - l[i][2]\n\t\nl_ppp = sorted(l_ppp, reverse=True)\nl_ppm = sorted(l_ppm, reverse=True)\nl_pmp = sorted(l_pmp, reverse=True)\nl_mpp = sorted(l_mpp, reverse=True)\nl_pmm = sorted(l_pmm, reverse=True)\nl_mpm = sorted(l_mpm, reverse=True)\nl_mmp = sorted(l_mmp, reverse=True)\nl_mmm = sorted(l_mmm, reverse=True)\n\nsum_list[0] = sum(l_ppp[:m])\nsum_list[1] = sum(l_ppm[:m])\nsum_list[2] = sum(l_pmp[:m])\nsum_list[3] = sum(l_mpp[:m])\nsum_list[4] = sum(l_pmm[:m])\nsum_list[5] = sum(l_mpm[:m])\nsum_list[6] = sum(l_mmp[:m])\nsum_list[7] = sum(l_mmm[:m])\n\nprint(max(sum_list))\n", "# 絶対値と言われたら＋とーのどっちにするのか分からない→全通りやれば良い\n# 向きを固定する。\n# 例えばxが+, yが-、zが+だとすると\n# (x,y,z) = (3, -4, -1)の「貢献度」は3+4-1 = 6になる\n# あとは貢献度の順にソートして、上位からM個を取れば良い\n\n# L1ノルムが一定→ダイヤ型（正八面体）\n# マンハッタン距離を使う問題とも通じるものがある。\n# https://atcoder.jp/contests/abc178/tasks/abc178_e ABC178 E Dist Max\n# 「いくつか向きの候補があるから、全通りを考えて最大を取ればいいよね。向きを固定すればあとは単純な貪欲だよね」\n\nimport copy\n\nn, m = list(map(int, input().split()))\ntemp = [list(map(int, input().split())) for _ in range(n)]\n\nans = 0\nfor x_sign in (1, -1):\n\tfor y_sign in (1, -1):\n\t\tfor z_sign in (1, -1):\n\t\t\t# params = temp.copy() これでは浅いコピーになるので、同じオブジェクトを指してしまう\n\t\t\tparams = copy.deepcopy(temp)\n\n\t\t\tfor xyz in params:\n\t\t\t\txyz.append(x_sign * xyz[0] + y_sign * xyz[1] + z_sign * xyz[2])\n\t\t\t\n\t\t\tparams.sort(key=lambda xyz: xyz[3], reverse=True)\n\t\t\tans_sign = sum([xyz[3] for xyz in params[:m]])\n\t\t\tans = max(ans, ans_sign)\n\nprint(ans)\n", "n, m = map(int, input().split())\n\nxyz = [list(map(int, input().split())) for _i in range(n)]\n\nr = []\nfor i in range(2**3):\n\tchecker = []\n\tnum = i\n\tfor _i in range(3):\n\t\tif num%2==1:\n\t\t\tchecker.append(1)\n\t\telse:\n\t\t\tchecker.append(-1)\n\t\tnum >>= 1\n\t_xyz = []\n\tfor j in range(n):\n\t\t_abc = [checker[s]*xyz[j][s] for s in range(3)]\n\t\t_xyz.append([sum(_abc)]+_abc)\n\t_xyz.sort(reverse=True)\n\t_r = abs(sum(i[1] for i in _xyz[:m]))+ abs(sum(i[2] for i in _xyz[:m]))+abs(sum(i[3] for i in _xyz[:m]))\n\tr.append(_r)\n\nprint(max(r))\n", "def main():\n\timport itertools\n\tn,m = list(map(int,input().split()))\n\tls = [[] for i in range(8)]\n\tstats = [stat for stat in itertools.product(*((0,1) for i in range(3)))]\n\tfor i in range(n):\n\t\tx,y,z = list(map(int,input().split()))\n\t\tfor j,stat in enumerate(stats):\n\t\t\tls[j].append(x*(-1)**stat[0] + y*(-1)**stat[1] + z*(-1)**stat[2])\n\tans = 0\n\tfor i in range(8):\n\t\ta_ = sum(sorted(ls[i],reverse=True)[0:m])\n\t\tif a_>ans:\n\t\t\tans = a_\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\nimport math\nimport collections\nimport bisect\nimport copy\n\n# import numpy as np\n\nsys.setrecursionlimit(10 ** 7)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nni = lambda: int(sys.stdin.readline())\nns = lambda: list(map(int, sys.stdin.readline().split()))\nna = lambda: list(map(int, sys.stdin.readline().split()))\nna1 = lambda: list([int(x) - 1 for x in sys.stdin.readline().split()])\n\n\n# ===CODE===\n\n\ndef main():\n\tn, m = ns()\n\tres = [[] for _ in range(2 ** 3)]\n\n\tif m == 0:\n\t\tprint((0))\n\t\treturn\n\n\tfor _ in range(n):\n\t\ta = na()\n\n\t\tfor i in range(2 ** 3):\n\t\t\ttmp = 0\n\t\t\tfor j in range(3):\n\t\t\t\tif i >> j & 1:\n\t\t\t\t\ttmp += -a[j]\n\t\t\t\telse:\n\t\t\t\t\ttmp += a[j]\n\t\t\tres[i].append(tmp)\n\n\tans = -INF\n\tfor resi in res:\n\t\tif len(resi) == 0:\n\t\t\tcontinue\n\t\tresi.sort(reverse=True)\n\t\tans = max(ans, sum(resi[:m]))\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n,m = list(map(int, input().split()))\n\nab = [list(map(int, input().split())) for _ in range(n)]\n\nimport itertools\nnums = [0,1]\nll = list(itertools.product(nums,repeat=3))\n\nres = 0\nfor i in ll:\n\ttemp =[]\n\tfor j in range(n):\n\t\tif i[0]==0:\n\t\t\tx = ab[j][0]\n\t\telse:\n\t\t\tx = -ab[j][0]\n\t\tif i[1]==0:\n\t\t\ty = ab[j][1]\n\t\telse:\n\t\t\ty = -ab[j][1]\n\t\tif i[2] ==0:\n\t\t\tz = ab[j][2]\n\t\telse:\n\t\t\tz = -ab[j][2]\n\t\ttemp.append(x+y+z)\n\ttempp =list(sorted(temp,reverse=True))\n\tres = max(res,sum(tempp[:m]))\n\nprint(res)\n", "from itertools import product\nN, M = map(int, input().split())\nxyz = [list(map(int, input().split())) for _ in range(N)]\n\nans = []\n\nfor lst in product([-1, 1], repeat = 3):\n\ttemp = []\n\tfor x, y, z in xyz:\n\t\ttemp.append(x * lst[0] + y * lst[1] + z * lst[2])\n\ttemp.sort(reverse=True)\n\tans.append(sum(temp[:M]))\n\nprint(max(ans))\n", "n,m = map(int,input().split())\ncake = [[int(i) for i in input().split()] for _ in range(n)]\nans = 0\nfor i in range(2<<3):\n\ts = []\n\tfor j in range(n):\n\t\tcnt = 0\n\t\tfor k in range(3):\n\t\t\tif i>>k & 1: cnt += cake[j][k]\n\t\t\telse: cnt -= cake[j][k]\n\t\ts.append(cnt)\n\ts.sort(reverse=True)\n\tans = max(ans, sum(s[:m]))\nprint(ans)\n", "n,m = map(int,input().split())\nx = []\ny = []\nz = []\n\nfor i in range(n):\n\tX,Y,Z = map(int,input().split())\n\tx.append(X)\n\ty.append(Y)\n\tz.append(Z)\n\t\nppp = []\nppn = []\nnpp = []\npnp = []\npnn = []\nnpn = []\nnnp = []\nnnn = []\n\nfor j in range(n):\n\tppp.append(x[j] + y[j] + z[j])\n\tppn.append(x[j] + y[j] - z[j])\n\tnpp.append(-x[j] + y[j] + z[j])\n\tpnp.append(x[j] -y[j] + z[j])\n\tpnn.append(x[j] - y[j] - z[j])\n\tnpn.append(-x[j] + y[j] - z[j])\n\tnnp.append(-x[j] - y[j] + z[j])\n\tnnn.append(-(x[j] + y[j] + z[j]))\n\t\nppp.sort(reverse=True)\nppn.sort(reverse=True)\nnpp.sort(reverse=True)\npnp.sort(reverse=True)\npnn.sort(reverse=True)\nnpn.sort(reverse=True)\nnnp.sort(reverse=True)\nnnn.sort(reverse=True)\n\nprint(max(sum(ppp[:m]),sum(ppn[:m]),sum(npp[:m]),sum(pnp[:m]),sum(pnn[:m]),sum(npn[:m]),sum(nnp[:m]),sum(nnn[:m])))\n", "ma = lambda :map(int,input().split())\nlma = lambda :list(map(int,input().split()))\ntma = lambda :tuple(map(int,input().split()))\nni = lambda:int(input())\nyn = lambda fl:print(\"Yes\") if fl else print(\"No\")\nimport collections\nimport math\nimport itertools\nimport heapq as hq\npm = [-1,1]\n\nn,m = ma()\nxyz = []\nfor i in range(n):\n\txyz.append(lma())\n\ndef f(p0,p1,p2):\n\txyz.sort(key=lambda x:p0*x[0]+p1*x[1]+p2*x[2],reverse=True)\n\tret=0\n\tfor i in range(m):\n\t\tt=xyz[i]\n\t\tret+=p0*t[0]+p1*t[1]+p2*t[2]\n\treturn ret\ntmp=-10**15\nfor i in range(2**3):\n\tp=[1,1,1]\n\tfor j in range(3):\n\t\tp[j]= pm[(i >> j) &1]\n\t#print(p)\n\t#print(f(*p))\n\ttmp=max(tmp,f(*p))\nprint(tmp)\n", "N, M = [int(x) for x in input().split()]\nXYZ = [[int(x) for x in input().split()] for _ in range(N)]\n\nans = -float(\"inf\")\n\nfor i in range(2 ** 3):\n\thugo = [1, 1, 1]\n\tfor j in range(3):\n\t\tif i >> j & 1 != 1:\n\t\t\thugo[j] = -1\n\n\tA = []\n\tfor x, y, z in XYZ:\n\t\tA.append(x * hugo[0] + y * hugo[1] + z * hugo[2])\n\n\tA.sort(reverse=True)\n\tans = max(ans, sum(A[:M]))\n\nprint(ans)\n\n\n", "from itertools import product\n\nN,M=map(int,input().split())\nscores=[list(map(int,input().split())) for _ in range(N)]\n\ndef f(score):\n\treturn sum([score[i]*((-1)**(1-p[i])) for i in range(3)])\n\nans=0\nfor p in product(range(2),repeat=3):\n\ts = list(map(f,scores))\n\ts = sorted(s,reverse=True)\n\tSUM = sum(s[:M])\n\tif ans < SUM:ans=SUM\n\t\t\nprint(ans)\n", "import itertools\n\nN,M = map(int,input().split())\nvalue = [0] * N\n\nfor i in range(N):\n\tv = list(map(int,input().split()))\n\tabv = [i if i > 0 else i * - 1 for i in v]\n\tvalue[i] = v\n\nans = 0\ntotals = []\n\nfor i in range(0,2 ** 3):\n\ttotals = []\n\t#print(bin(i))\n\tfor v in range(N):\n\t\ttmp = 0\n\t\tfor j in range(0,3):\n\t\t\tif (i >> j) & 1:\n\t\t\t\ttmp += value[v][j]\n\t\t\telse:\n\t\t\t\ttmp -= value[v][j]\n\t\ttotals.append(tmp)\n\t#print(totals)\n\ttotals = sorted(totals,reverse = True)\n\n\tt = 0\n\tfor k in range(M):\n\t\tt += totals[k]\n\tans = max(ans,t)\n\t\nprint(ans)\n", "import sys\nreadline = sys.stdin.readline\n\ndef main():\n\tN, M = map(int, readline().rstrip().split())\n\tcakes = [tuple(map(int, readline().rstrip().split())) for _ in range(N)]\n\tres = - 10 ** 15\n\n\tfor a in [1, -1]:\n\t\tfor b in [1, -1]:\n\t\t\tfor c in [1, -1]:\n\t\t\t\tgains = [a*x + b*y + c*z for x, y, z in cakes]\n\t\t\t\tgains.sort(reverse=True)\n\t\t\t\tres = max(res, sum(gains[:M]))\n\t\n\tprint(res)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "N, M = map(int, input().split())\nC = [tuple(map(int, input().split())) for _ in range(N)]\n \nres = 0\n \nfor i in range(8): # x, y, z を正にするか負にするか8通り試す\n\tD = [0 for _ in range(N)]\n\tfor j in range(N):\n\t\tx, y, z = C[j]\n\t\tif (i >> 0) & 1:\n\t\t\tD[j] += x\n\t\telse:\n\t\t\tD[j] -= x\n\t\tif (i >> 1) & 1:\n\t\t\tD[j] += y\n\t\telse:\n\t\t\tD[j] -= y\n\t\tif (i >> 2) & 1:\n\t\t\tD[j] += z\n\t\telse:\n\t\t\tD[j] -= z\n\tD.sort(reverse=True)\n\tres = max(res, sum(D[:M])) # その中で一番大きいものM個をとる\n \nprint(res)\n", "N,M = list(map(int,input().split()))\nP = []\nfor _ in range(N):\n\tx,y,z = list(map(int,input().split()))\n\tP.append([x,y,z])\nans = 0\nfor X in(1,-1):\n\tfor Y in (1,-1):\n\t\tfor Z in (1,-1):\n\t\t\tA = []\n\t\t\tfor i in range(len(P)):\n\t\t\t\tval = X*P[i][0] + Y*P[i][1] + Z*P[i][2]\n\t\t\t\tA.append(val)\n\t\t\tA.sort(reverse = True)\n\t\t\tans = max(ans,sum(A[:M]))\nprint(ans)\n#O(NlogN)で全列挙\n", "import sys\nimport math\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\n\ndef make_grid(h, w, num): return [[int(num)] * w for _ in range(h)]\n\n\ndef make_cumulative(A):\n\tC = [0] * (len(A) + 1)\n\tfor i, a in enumerate(A):\n\t\ti += 1\n\t\tC[i] = C[i - 1] + a\n\treturn C\n\n\ndef main():\n\tN, M = NMI()\n\tcakes = [[] for _ in range(8)]\n\tfor i in range(N):\n\t\tx, y, z = NMI()\n\t\tcakes[0].append(sum([x, y, z]))\n\t\tcakes[1].append(sum([x, y, -z]))\n\t\tcakes[2].append(sum([x, -y, z]))\n\t\tcakes[3].append(sum([x, -y, -z]))\n\t\tcakes[4].append(sum([-x, y, z]))\n\t\tcakes[5].append(sum([-x, y, -z]))\n\t\tcakes[6].append(sum([-x, -y, z]))\n\t\tcakes[7].append(sum([-x, -y, -z]))\n\tfor i in range(8):\n\t\tcakes[i] = sorted(cakes[i], reverse=True)\n\t\tcakes[i] = sum(cakes[i][:M])\n\tprint(max(cakes))\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n,m=map(int,input().split())\nxyz=[list(map(int,input().split())) for _ in range(n)]\nmaxi=0\nfor i in range(2**3):\n\tidx=[]\n\tfor j in range(3):\n\t\tif (i>>j)&1:\n\t\t\tidx.append(j)\n\tarr=[]\n\tfor j in range(n):\n\t\ts=0\n\t\tfor k in range(3):\n\t\t\tif k in idx:\n\t\t\t\ts-=xyz[j][k]\n\t\t\telse:\n\t\t\t\ts+=xyz[j][k]\n\t\tarr.append((s,j))\n\tarr.sort(reverse=True)\n\tx,y,z=0,0,0\n\tfor j in range(m):\n\t\tx+=xyz[arr[j][1]][0]\n\t\ty+=xyz[arr[j][1]][1]\n\t\tz+=xyz[arr[j][1]][2]\n\tmaxi=max(maxi,abs(x)+abs(y)+abs(z))\nprint(maxi)\n", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n\tN, M, *XYZ = list(map(int, read().split()))\n\n\tdef score(s_X, s_Y, s_Z):\n\t\tP = [0] * N\n\t\tfor i, (x, y, z) in enumerate(zip(*[iter(XYZ)] * 3)):\n\t\t\tP[i] = s_X * x + s_Y * y + s_Z * z\n\n\t\tP.sort(reverse=True)\n\t\treturn sum(P[:M])\n\n\tans = -INF\n\tfor s_X in (-1, 1):\n\t\tfor s_Y in (-1, 1):\n\t\t\tfor s_Z in (-1, 1):\n\t\t\t\tres = score(s_X, s_Y, s_Z)\n\t\t\t\tif ans < res:\n\t\t\t\t\tans = res\n\n\tprint(ans)\n\n\treturn\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n,m=map(int,input().split())\nx=[0]*n\ny=[0]*n\nz=[0]*n\nfor i in range(n):\n\tx[i],y[i],z[i]=map(int,input().split())\n\nsign=[0]*3\nans=0\nfor i in range(8):\n\tfor j in range(3):\n\t\tif ((i >> j) & 1):  \n\t\t\tsign[j]=1\n\t\telse:\n\t\t\tsign[j]=-1\n\ttot=0\n\tarr=[0]*n\n\tfor k in range(n):\n\t\tarr[k]=x[k]*sign[0]+y[k]*sign[1]+z[k]*sign[2]\n\tarr=sorted(arr,reverse=True)\n\ttot=sum(arr[:m])\n\tif tot>ans:\n\t\tans=tot\nprint(ans)\n", "#import bisect,collections,copy,heapq,itertools,math,numpy,string\n#from operator import itemgetter\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\nN, M = LI()\nA = [LI() for _ in range(N)]\nm = [[0] * 3 for _ in range(8)]\n\n# + + +\n# - - -\nA.sort(key=lambda x:x[0]+x[1]+x[2])\nfor i in range(M):\n\tfor j in range(3):\n\t\tm[0][j] += A[i][j]\n\t\tm[1][j] += A[N-1-i][j]\n\n# + + -\n# - - +\nA.sort(key=lambda x:x[0]+x[1]-x[2])\nfor i in range(M):\n\tfor j in range(3):\n\t\tm[2][j] += A[i][j]\n\t\tm[3][j] += A[N-1-i][j]\n\n# + - +\n# - + -\nA.sort(key=lambda x:x[0]-x[1]+x[2])\nfor i in range(M):\n\tfor j in range(3):\n\t\tm[4][j] += A[i][j]\n\t\tm[5][j] += A[N-1-i][j]\n\n# + - -\n# - + +\nA.sort(key=lambda x:x[0]-x[1]-x[2])\nfor i in range(M):\n\tfor j in range(3):\n\t\tm[6][j] += A[i][j]\n\t\tm[7][j] += A[N-1-i][j]\n\nprint((max([abs(x[0])+abs(x[1])+abs(x[2]) for x in m])))\n", "N,M = map(int,input().split())\nP = []\nfor _ in range(N):\n\tx,y,z = map(int,input().split())\n\tP.append([x,y,z])\nans = 0\nfor X in(1,-1):\n\tfor Y in (1,-1):\n\t\tfor Z in (1,-1):\n\t\t\tA = []\n\t\t\tfor i in range(len(P)):\n\t\t\t\tval = X*P[i][0] + Y*P[i][1] + Z*P[i][2]\n\t\t\t\tA.append(val)\n\t\t\tA.sort(reverse = True)\n\t\t\tans = max(ans,sum(A[:M]))\nprint(ans)\n", "#!/usr/bin/env python3\nn, m = list(map(int, input().split()))\nx, y, z = [0] * n, [0] * n, [0] * n\nfor i in range(n):\n\tx[i], y[i], z[i] = list(map(int, input().split()))\nans = -(10 ** 9)\nfor i in range(8):\n\t# a,b,c それぞれ正負どちらに合わせるかを決める\n\tsort = []\n\tbit = [-1, -1, -1]\n\tif i % 2:\n\t\tbit[0] = 1\n\tif (i // 2) % 2:\n\t\tbit[1] = 1\n\tif (i // 4) % 2:\n\t\tbit[2] = 1\n\tfor i in range(n):\n\t\tsort.append(x[i] * bit[0] + y[i] * bit[1] + z[i] * bit[2])\n\tsort.sort()\n\tans = max(ans, sum(sort[n - m :]))\nprint(ans)\n", "n, m = map(int, input().split())\ncake = [[int(i) for i in input().split()] for _ in range(n)]\nans = 0\nfor sign_x in [1, -1]:\n\tfor sign_y in [1, -1]:\n\t\tfor sign_z in [1, -1]:\n\t\t\tpoint = []\n\t\t\tfor x, y, z in cake:\n\t\t\t\tv = (x * sign_x) + (y * sign_y) + (z * sign_z)\n\t\t\t\tpoint.append(v)\n\t\t\tpoint.sort(reverse=True)\n\t\t\tans = max(sum(point[:m]), ans)\nprint(ans) \n", "n,m=list(map(int,input().split()))\nxyz=[list(map(int,input().split())) for _ in range(n)]\ninf=float('inf')\nans=-inf\ndef func(multi):\n\tdp=[-inf]*(m+1)\n\tdp[0]=0\n\tfor i in range(n):\n\t\tx,y,z=xyz[i]\n\t\tfor j in range(min(i+1,m),0,-1):\n\t\t\tdp[j]=max(dp[j],dp[j-1]+x*multi[0]+y*multi[1]+z*multi[2])\n\treturn dp[m]\n\nfor i in range(8):\n\tmulti=[1]*3\n\tfor j in range(3):\n\t\tif (i>>j)&1:\n\t\t\tmulti[j]=-1\n\tans=max(ans,func(multi))\nprint(ans)\n", "n,m = map(int,input().split())\nl = [list(map(int,input().split())) for _ in range(n)]\nl0 = []\nfor i in range(8):\n\tlst = []\n\tfor j in range(3):\n\t\tlst.append(i >> j & 1)\n\tl0.append(lst)\n\ndef f(x,i):\n\treturn x*((-1)**i)\nans = 0\nfor i in range(8):\n\tlst = []\n\tfor j in range(n):\n\t\tlst.append(\n\t\t\tf(l[j][0],l0[i][0])\n\t\t\t+f(l[j][1],l0[i][1])\n\t\t\t+f(l[j][2],l0[i][2])\n\t\t)\n\tlst.sort(reverse=True)\n\tans = max(ans, sum(lst[:m]))\nprint(ans)\n", "def d_patisserie_abc():\n\tN, M = [int(i) for i in input().split()]\n\tCake = [[int(i) for i in input().split()] for j in range(N)]\n\t# 変数の意味は，左から順に， 綺麗さ, おいしさ, 人気度 をそれぞれ\n\t# 正の方向 (p) に最大化する場合と負の方向 (n) に最大化する場合である．\n\t# なお，nnn, nnp, npn, npp は，ppp, ppn, pnp, pnn を\n\t# 逆にすることで得られる．\n\tppp, ppn, pnp, pnn = [], [], [], []\n\tfor x, y, z in Cake:\n\t\tppp.append(x + y + z)\n\t\tppn.append(x + y - z)\n\t\tpnp.append(x - y + z)\n\t\tpnn.append(x - y - z)\n\tppp.sort()\n\tppn.sort()\n\tpnp.sort()\n\tpnn.sort()\n\n\t# 値が大きなものを M 個取って足して絶対値をとる\n\tpts = map(lambda x: abs(sum(x)),\n\t\t\t  (ppp[:M], ppn[:M], pnp[:M], pnn[:M], ppp[::-1][:M],\n\t\t\t   ppn[::-1][:M], pnp[::-1][:M], pnn[::-1][:M])\n\t\t\t  )\n\treturn max(pts)\n\nprint(d_patisserie_abc())\n", "import itertools\nimport numpy as np\n\nbit_base = 2#bit_base^nの全探査になる. \ndef Base_10_to_n(X, n):#10進数をbit_base進数に変換\n\tX_dumy = X\n\tout = ''\n\twhile X_dumy>0:\n\t\tout = str(X_dumy%n)+out\n\t\tX_dumy = int(X_dumy/n)\n\treturn out\n\ndef main():\n  N, M = list(map(int, input().split()))\n  cake = []\n  for i in range(N):\n\tcake.append(list(map(int, input().split())))\n  cake = np.array(cake)\n  ans = 0\n  n = 3\n  for i in range(bit_base**n):\n\ts = Base_10_to_n(i, bit_base)\n\ts = s.zfill(n)\n\tcake_temp = cake.copy()\n\tfor num, j in enumerate(s):\n\t  if j == '0':\n\t\tcake_temp[:, num] *= -1\n\tcake_temp = np.sum(cake_temp, axis = 1)\n\tcake_temp = sorted(cake_temp)\n\tans = max(sum(cake_temp[-M:]), ans)\n  if M == 0:\n\tans = 0\n  print(ans)\n  \ndef __starting_point():\n  main()\n\n__starting_point()\n", "#import bisect,collections,copy,heapq,itertools,math,numpy,string\n#from operator import itemgetter\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\nN, M = LI()\nA = [LI() for _ in range(N)]\nm = [[0] * 3 for _ in range(8)]\n\nfor c in range(4):\n\tA.sort(key=lambda x:(((c>>2)&1)*2-1)*x[0]+(((c>>1)&1)*2-1)*(-1)*x[1]+((c&1)*2-1)*x[2])\n\tfor i in range(M):\n\t\tfor j in range(3):\n\t\t\tm[c*2][j] += A[i][j]\n\t\t\tm[c*2+1][j] += A[N-1-i][j]\n\nprint((max([abs(x[0])+abs(x[1])+abs(x[2]) for x in m])))\n", "import sys\nsys.setrecursionlimit(10**8)\ndef ii(): return int(sys.stdin.readline())\ndef mi(): return map(int, sys.stdin.readline().split())\ndef li(): return list(map(int, sys.stdin.readline().split()))\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\ndef dp2(ini, i, j): return [[ini]*i for _ in range(j)]\n#import bisect #bisect.bisect_left(B, a)\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\n#from collections import Counter # a = Counter(A).most_common()\n#from itertools import accumulate #list(accumulate(A))\n\nN, M = mi()\nxyz = li2(N)\n\nsign = [[1, 1, 1], [1, 1, -1], [1, -1, 1], [1, -1, -1], [-1, 1, 1], [-1, 1, -1], [-1, -1, 1], [-1, -1, -1]]\nans = 0\n\nfor i in range(8):\n\tA = [sum(xyz[x][k] * sign[i][k] for k in range(3)) for x in range(N)]\n\n\tA = sorted(A, reverse=True)\n\n\tans = max(ans, sum(A[:M]))\n\nprint(ans)\n", "N, M = map(int, input().split())\nC = [tuple(map(int, input().split())) for _ in range(N)]\n\nres = 0\n\nfor i in range(8):\n\tD = [0 for _ in range(N)]\n\tfor j in range(N):\n\t\tx, y, z = C[j]\n\t\tif (i >> 0) & 1:\n\t\t\tD[j] += x\n\t\telse:\n\t\t\tD[j] -= x\n\t\tif (i >> 1) & 1:\n\t\t\tD[j] += y\n\t\telse:\n\t\t\tD[j] -= y\n\t\tif (i >> 2) & 1:\n\t\t\tD[j] += z\n\t\telse:\n\t\t\tD[j] -= z\n\tD.sort(reverse=True)\n\tres = max(res, sum(D[:M]))\n\nprint(res)\n", "def main():\n\tn, m = list(map(int, input().split()))\n\tinfo = [list(map(int, input().split())) for _ in range(n)]\n\tans = 0\n\tfor i in range(1 << 3):\n\t\tnow_ans = [0] * n\n\t\tfor j in range(3):\n\t\t\td = 1\n\t\t\tif (i >> j) & 1:\n\t\t\t\td *= -1\n\t\t\tfor k in range(n):\n\t\t\t\tnow_ans[k] += d * info[k][j]\n\t\tnow_ans.sort(reverse=True)\n\t\tans = max(ans, sum(now_ans[:m]))\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\nfrom itertools import product\nN, M = map(int, sys.stdin.readline().rstrip().split())\n\ncake = [tuple(map(int, sys.stdin.readline().rstrip().split())) for _ in range(N)]\n\nans = 0\nfor i, j, k in product([-1, 1], repeat=3):\n\tdata = [i * x + j * y + k * z for x, y, z in cake]\n\tans = max(ans, sum(sorted(data)[::-1][:M]))\nprint(ans)\n", "#!/usr/bin/env python3\nimport sys\nfrom collections import deque, Counter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_right\nfrom itertools import accumulate\n\nsys.setrecursionlimit(10**6)\nINF = 10**12\nm = 10**9 + 7\n\ndef main():\n\tN, M = list(map(int, input().split()))\n\txyz = [None for _ in range(N)]\n\tfor i in range(N):\n\t\txyz[i] = list(map(int, input().split()))\n\t# print(xyz)\n\tans = 0\n\tfor i in range(2**3):\n\t\ttmp = [0] * N\n\t\tfor j in range(N):\n\t\t\tfor k in range(3):\n\t\t\t\tif i >> k & 1:\n\t\t\t\t\ttmp[j] += xyz[j][k]\n\t\t\t\telse:\n\t\t\t\t\ttmp[j] -= xyz[j][k]\n\t\ttmp.sort(reverse=True)\n\t\tans = max(ans, sum(tmp[:M]))\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n,m=map(int,input().split())\ncake=[[int(i)for i in input().split()]for j in range(n)]\na=sum(sorted([sum(i)for i in cake],reverse=True)[:m])\nb=sum(sorted([cake[i][0]+cake[i][1]-cake[i][2]for i in range(n)],reverse=True)[:m])\nc=sum(sorted([cake[i][0]-cake[i][1]-cake[i][2]for i in range(n)],reverse=True)[:m])\nd=sum(sorted([cake[i][0]-cake[i][1]+cake[i][2]for i in range(n)],reverse=True)[:m])\ne=sum(sorted([0-cake[i][0]+cake[i][1]-cake[i][2]for i in range(n)],reverse=True)[:m])\nf=sum(sorted([0-cake[i][0]+cake[i][1]+cake[i][2]for i in range(n)],reverse=True)[:m])\ng=sum(sorted([0-cake[i][0]-cake[i][1]-cake[i][2]for i in range(n)],reverse=True)[:m])\nh=sum(sorted([0-cake[i][0]-cake[i][1]-cake[i][2]for i in range(n)],reverse=True)[:m])\nprint(max(a,b,c,d,e,f,g,h))\n", "n,m=list(map(int,input().split()))\nX=list()\nY=list()\nZ=list()\nfor i in range(n):\n\tx,y,z=list(map(int,input().split()))\n\tX.append(x)\n\tY.append(y)\n\tZ.append(z)\nA=list()\nB=list()\nC=list()\nD=list()\nfor i in range(n):\n\tA.append(X[i]+Y[i]+Z[i])\n\tB.append(-X[i]+Y[i]+Z[i])\n\tC.append(X[i]-Y[i]+Z[i])\n\tD.append(X[i]+Y[i]-Z[i])\nimport functools\nA.sort()\nB.sort()\nC.sort()\nD.sort()\nif m==0:\n\tprint((0))\nelse:\n\tx1=functools.reduce(lambda x,y:x+y,[A[i] for i in range(m)])\n\tx2=functools.reduce(lambda x,y:x+y,[A[-i] for i in range(1,m+1)])\n\ty1=functools.reduce(lambda x,y:x+y,[B[i] for i in range(m)])\n\ty2=functools.reduce(lambda x,y:x+y,[B[-i] for i in range(1,m+1)])\n\tz1=functools.reduce(lambda x,y:x+y,[C[i] for i in range(m)])\n\tz2=functools.reduce(lambda x,y:x+y,[C[-i] for i in range(1,m+1)])\n\tw1=functools.reduce(lambda x,y:x+y,[D[i] for i in range(m)])\n\tw2=functools.reduce(lambda x,y:x+y,[D[-i] for i in range(1,m+1)])\n\tprint((max(abs(x1),abs(x2),abs(y1),abs(y2),abs(z1),abs(z2),abs(w1),abs(w2))))\n", "n, m = [int(s) for s in input().split()]\ncake_list = [[int(s) for s in input().split()] for _ in range(n)]\n\nans_list = [0] * 8\nfor i in range(8):\n\ta, b, c = [1 if (i >> j) & 1 == 1 else -1 for j in range(3)]\n\ttemp_list = sorted([a * x + b * y + c * z for x, y, z in cake_list], reverse=True)\n\n\tfor j in range(m):\n\t\tans_list[i] += temp_list[j]\nprint(max(ans_list))\n", "import bisect\n\nn,m = map(int,input().split())\n\nx,y,z = [],[],[]\n\nfor _ in range(n):\n\ti,j,k = map(int,input().split())\n\tx.append(i)\n\ty.append(j)\n\tz.append(k)\n\nans = 0\n\nfor i in [-1,1]:\n\tfor j in [-1,1]:\n\t\tfor k in [-1,1]:\n\t\t\tli = []\n\t\t\tfor l in range(n):\n\t\t\t\tli.append(x[l]*i+y[l]*j+z[l]*k)\n\t\t\tli.sort(reverse=True)\n\t\t\tans = max(ans,sum(li[:m]))\n\nprint(ans)\n", "import sys\nfrom itertools import product\ninput = sys.stdin.readline\n\n\ndef log(*args):\n\tprint(*args, file=sys.stderr)\n\n\ndef main():\n\tn, m = map(int, input().split())\n\tl = [tuple(map(int, input().split())) for _ in range(n)]\n\tans = 0\n\tfor i, j, k in product([-1, 1], repeat=3):\n\t\tl2 = sorted([x * i + y * j + z * k for x, y, z in l], reverse=True)\n\t\tans = max(ans, sum(l2[:m]))\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\nfrom itertools import product\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n\tn, m = list(map(int, input().split()))\n\tXYZ = [list(map(int, input().split())) for _ in range(n)]\n\n\tres = 0\n\tfor pattern in product([0, 1], repeat=3):\n\t\top = [1 if p == 0 else -1 for p in pattern]\n\t\ttmp = [0] * n\n\t\tfor i in range(n):\n\t\t\ttmp[i] = sum([o * num for o, num in zip(op, XYZ[i])])\n\t\ttmp.sort(reverse=True)\n\t\tres = max(res, sum(tmp[:m]))\n\tprint(res)\n\n\ndef __starting_point():\n\tresolve()\n\n__starting_point()\n"], "id": "id6688"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6688", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["takahashi", 0], ["became", 0], ["a", 0], ["pastry", 0], ["chef", 0], ["and", 0], ["opened", 0], ["a", 0], ["shop", 0], ["la", 0], ["confiserie", 0], ["d", 0], ["abc", 0], ["to", 0], ["celebrate", 0], ["atcoder", 0], ["beginner", 0], ["contest", 0], ["100", 0], ["the", 0], ["shop", 0], ["sells", 0], ["n", 0], ["kinds", 0], ["of", 0], ["cakes", 0], ["each", 0], ["kind", 0], ["of", 0], ["cake", 0], ["has", 0], ["three", 0], ["parameters", 0], ["beauty", 0], ["tastiness", 0], ["and", 0], ["popularity", 0], ["the", 0], ["i", 0], ["th", 0], ["kind", 0], ["of", 0], ["cake", 0], ["has", 0], ["the", 0], ["beauty", 0], ["of", 0], ["x", 0], ["i", 0], ["the", 0], ["tastiness", 0], ["of", 0], ["y", 0], ["i", 0], ["and", 0], ["the", 0], ["popularity", 0], ["of", 0], ["z", 0], ["i", 0], ["these", 0], ["values", 0], ["may", 0], ["be", 0], ["zero", 0], ["or", 0], ["negative", 0], ["ringo", 0], ["has", 0], ["decided", 0], ["to", 0], ["have", 0], ["m", 0], ["pieces", 0], ["of", 0], ["cakes", 0], ["here", 0], ["he", 0], ["will", 0], ["choose", 0], ["the", 0], ["set", 0], ["of", 0], ["cakes", 0], ["as", 0], ["follows", 0], ["do", 0], ["not", 0], ["have", 0], ["two", 0], ["or", 0], ["more", 0], ["pieces", 0], ["of", 0], ["the", 0], ["same", 0], ["kind", 0], ["of", 0], ["cake", 0], ["under", 0], ["the", 0], ["condition", 0], ["above", 0], ["choose", 0], ["the", 0], ["set", 0], ["of", 0], ["cakes", 0], ["to", 0], ["maximize", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["beauty", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["tastiness", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["popularity", 0], ["find", 0], ["the", 0], ["maximum", 0], ["possible", 0], ["value", 0], ["of", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["beauty", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["tastiness", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["popularity", 0], ["for", 0], ["the", 0], ["set", 0], ["of", 0], ["cakes", 0], ["that", 0], ["ringo", 0], ["chooses", 0], ["constraints", 0], ["n", 0], ["is", 0], ["an", 0], ["integer", 0], ["between", 0], ["1", 0], ["and", 0], ["1", 0], ["000", 0], ["inclusive", 0], ["m", 0], ["is", 0], ["an", 0], ["integer", 0], ["between", 0], ["0", 0], ["and", 0], ["n", 0], ["inclusive", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["z", 0], ["i", 0], ["1", 0], ["leq", 0], ["i", 0], ["leq", 0], ["n", 0], ["are", 0], ["integers", 0], ["between", 0], ["10", 0], ["000", 0], ["000", 0], ["000", 0], ["and", 0], ["10", 0], ["000", 0], ["000", 0], ["000", 0], ["inclusive", 0], ["input", 0], ["input", 0], ["is", 0], ["given", 0], ["from", 0], ["standard", 0], ["input", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["n", 0], ["m", 0], ["x", 4], ["1", 0], ["y", 0], ["1", 0], ["z", 0], ["1", 0], ["x", 0], ["2", 0], ["y", 0], ["2", 0], ["z", 0], ["2", 0], ["x", 0], ["n", 0], ["y", 0], ["n", 0], ["z", 0], ["n", 0], ["output", 0], ["print", 0], ["the", 0], ["maximum", 0], ["possible", 0], ["value", 0], ["of", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["beauty", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["tastiness", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["popularity", 0], ["for", 0], ["the", 0], ["set", 0], ["of", 0], ["cakes", 0], ["that", 0], ["ringo", 0], ["chooses", 0], ["sample", 0], ["input", 0], ["5", 0], ["3", 0], ["3", 2], ["1", 2], ["4", 2], ["1", 0], ["5", 0], ["9", 0], ["2", 0], ["6", 0], ["5", 0], ["3", 0], ["5", 0], ["8", 0], ["9", 0], ["7", 0], ["9", 0], ["sample", 0], ["output", 0], ["56", 0], ["consider", 0], ["having", 0], ["the", 0], ["2", 0], ["nd", 0], ["4", 0], ["th", 0], ["and", 0], ["5", 0], ["th", 0], ["kinds", 0], ["of", 0], ["cakes", 0], ["the", 0], ["total", 0], ["beauty", 0], ["tastiness", 0], ["and", 0], ["popularity", 0], ["will", 0], ["be", 0], ["as", 0], ["follows", 0], ["beauty", 0], ["1", 0], ["3", 0], ["9", 0], ["13", 0], ["tastiness", 0], ["5", 0], ["5", 0], ["7", 0], ["17", 0], ["popularity", 0], ["9", 0], ["8", 0], ["9", 0], ["26", 0], ["the", 0], ["value", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["beauty", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["tastiness", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["total", 0], ["popularity", 0], ["here", 0], ["is", 0], ["13", 0], ["17", 0], ["26", 0], ["56", 0], ["this", 0], ["is", 0], ["the", 0], ["maximum", 0], ["value", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.010810810810810811, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00472972972972973, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.07329842931937172, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0281413612565445, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.010810810810810811, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00472972972972973, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.07329842931937172, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0281413612565445, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pm", 0], ["i", 0], ["j", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["2", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["2", 0], ["lst", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lst", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["rlt", 0], ["sys", 0], ["maxsize", 0], ["for", 0], ["a", 0], ["b", 0], ["c", 0], ["in", 0], ["pm", 0], ["tmp", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["lst", 0], ["tmp", 0], ["append", 0], ["a", 0], ["x", 0], ["b", 0], ["y", 0], ["c", 0], ["z", 0], ["tmp", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["rlt", 0], ["max", 0], ["rlt", 0], ["sum", 0], ["tmp", 0], ["m", 0], ["print", 0], ["rlt", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["y", 0], ["z", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["z", 0], ["i", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["prod", 0], ["product", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["ans", 0], ["0", 0], ["for", 0], ["p", 0], ["in", 0], ["prod", 0], ["s", 0], ["p", 0], ["0", 0], ["x", 0], ["i", 0], ["p", 0], ["1", 0], ["y", 0], ["i", 0], ["p", 0], ["2", 0], ["z", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["tmp", 0], ["sum", 0], ["s", 0], ["m", 0], ["ans", 0], ["max", 0], ["ans", 0], ["tmp", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["絶対値を足す、引くの2パターンで表現する", 0], ["ケーキの値の合計を入れる配列", 0], ["d", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["対応するbitが1なら足す、0なら引く", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["c", 0], ["j", 0], ["if", 0], ["i", 0], ["0", 0], ["1", 0], ["d", 0], ["j", 0], ["x", 0], ["else", 0], ["d", 0], ["j", 0], ["x", 0], ["if", 0], ["i", 0], ["1", 0], ["1", 0], ["d", 0], ["j", 0], ["y", 0], ["else", 0], ["d", 0], ["j", 0], ["y", 0], ["if", 0], ["i", 0], ["2", 0], ["1", 0], ["d", 0], ["j", 0], ["z", 0], ["else", 0], ["d", 0], ["j", 0], ["z", 0], ["価値が高い順にm個選ぶ", 0], ["d", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["res", 0], ["max", 0], ["res", 0], ["sum", 0], ["d", 0], ["m", 0], ["print", 0], ["res", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cakes", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["cakes", 0], ["sub", 0], ["key", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["key", 0], ["j", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["0", 0], ["3", 0], ["for", 0], ["p", 0], ["in", 0], ["range", 0], ["3", 0], ["k", 0], ["p", 0], ["key", 0], ["p", 0], ["cakes", 0], ["j", 0], ["p", 0], ["l", 0], ["sum", 0], ["k", 0], ["cakes", 0], ["sub", 0], ["append", 0], ["l", 0], ["k", 0], ["cakes", 0], ["sub", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["a", 0], ["b", 0], ["c", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["cakes", 0], ["sub", 0], ["j", 0], ["1", 0], ["b", 0], ["cakes", 0], ["sub", 0], ["j", 0], ["2", 0], ["c", 0], ["cakes", 0], ["sub", 0], ["j", 0], ["3", 0], ["sub", 0], ["a", 0], ["b", 0], ["c", 0], ["if", 0], ["ans", 0], ["sub", 0], ["ans", 0], ["sub", 0], ["print", 0], ["int", 0], ["ans", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["bit", 0], ["1", 0], ["1", 0], ["su", 0], ["max", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["product", 0], ["bit", 0], ["repeat", 0], ["3", 0], ["print", 0], ["i", 0], ["l", 0], ["1", 0], ["for", 0], ["a", 0], ["b", 0], ["c", 0], ["in", 0], ["l", 0], ["t", 0], ["a", 0], ["i", 0], ["0", 0], ["b", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["2", 0], ["print", 0], ["a", 0], ["b", 0], ["c", 0], ["t", 0], ["l", 0], ["1", 0], ["append", 0], ["t", 0], ["l", 0], ["1", 0], ["sorted", 0], ["l", 0], ["1", 0], ["1", 0], ["su", 0], ["max", 0], ["max", 0], ["su", 0], ["max", 0], ["sum", 0], ["l", 0], ["1", 0], ["m", 0], ["print", 0], ["su", 0], ["max", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["as", 0], ["pr", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["pr", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["li", 0], ["sorted", 0], ["l", 0], ["key", 0], ["lambda", 0], ["xf", 0], ["sum", 0], ["x", 0], ["y", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["i", 0], ["xf", 0], ["reverse", 0], ["1", 0], ["m", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["abs", 0], ["sum", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["zip", 0], ["li", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["cand", 0], ["wxyz", 0], ["tmp", 0], ["0", 0], ["tmp", 0], ["1", 0], ["tmp", 0], ["2", 0], ["for", 0], ["tmp", 0], ["in", 0], ["xyz", 0], ["wxyz", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["cand", 0], ["append", 0], ["sum", 0], ["wxyz", 0], ["m", 0], ["wxyz", 0], ["tmp", 0], ["0", 0], ["tmp", 0], ["1", 0], ["tmp", 0], ["2", 0], ["for", 0], ["tmp", 0], ["in", 0], ["xyz", 0], ["wxyz", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["cand", 0], ["append", 0], ["sum", 0], ["wxyz", 0], ["m", 0], ["wxyz", 0], ["tmp", 0], ["0", 0], ["tmp", 0], ["1", 0], ["tmp", 0], ["2", 0], ["for", 0], ["tmp", 0], ["in", 0], ["xyz", 0], ["wxyz", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["cand", 0], ["append", 0], ["sum", 0], ["wxyz", 0], ["m", 0], ["wxyz", 0], ["tmp", 0], ["0", 0], ["tmp", 0], ["1", 0], ["tmp", 0], ["2", 0], ["for", 0], ["tmp", 0], ["in", 0], ["xyz", 0], ["wxyz", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["cand", 0], ["append", 0], ["sum", 0], ["wxyz", 0], ["m", 0], ["wxyz", 0], ["tmp", 0], ["0", 0], ["tmp", 0], ["1", 0], ["tmp", 0], ["2", 0], ["for", 0], ["tmp", 0], ["in", 0], ["xyz", 0], ["wxyz", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["cand", 0], ["append", 0], ["sum", 0], ["wxyz", 0], ["m", 0], ["wxyz", 0], ["tmp", 0], ["0", 0], ["tmp", 0], ["1", 0], ["tmp", 0], ["2", 0], ["for", 0], ["tmp", 0], ["in", 0], ["xyz", 0], ["wxyz", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["cand", 0], ["append", 0], ["sum", 0], ["wxyz", 0], ["m", 0], ["wxyz", 0], ["tmp", 0], ["0", 0], ["tmp", 0], ["1", 0], ["tmp", 0], ["2", 0], ["for", 0], ["tmp", 0], ["in", 0], ["xyz", 0], ["wxyz", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["cand", 0], ["append", 0], ["sum", 0], ["wxyz", 0], ["m", 0], ["wxyz", 0], ["tmp", 0], ["0", 0], ["tmp", 0], ["1", 0], ["tmp", 0], ["2", 0], ["for", 0], ["tmp", 0], ["in", 0], ["xyz", 0], ["wxyz", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["cand", 0], ["append", 0], ["sum", 0], ["wxyz", 0], ["m", 0], ["print", 0], ["max", 0], ["cand", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["i", 0], ["x", 0], ["y", 0], ["z", 0], ["ans", 0], ["0", 0], ["for", 0], ["pm", 0], ["in", 0], ["product", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["temp", 0], ["for", 0], ["l", 0], ["in", 0], ["l", 0], ["temp", 0], ["append", 0], ["pm", 0], ["0", 0], ["l", 0], ["0", 0], ["pm", 0], ["1", 0], ["l", 0], ["1", 0], ["pm", 0], ["2", 0], ["l", 0], ["2", 0], ["temp", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["temp", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["xyz", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["hugo", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["1", 0], ["hugo", 0], ["j", 0], ["1", 0], ["a", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["xyz", 0], ["a", 0], ["append", 0], ["x", 0], ["hugo", 0], ["0", 0], ["y", 0], ["hugo", 0], ["1", 0], ["z", 0], ["hugo", 0], ["2", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["a", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["num", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["num", 0], ["list", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["n", 0], ["m", 0], ["num", 0], ["list", 0], ["x", 0], ["y", 0], ["z", 0], ["としてx", 0], ["y", 3], ["z", 4], ["x", 5], ["y", 3], ["z", 4], ["x", 5], ["y", 3], ["z", 4], ["x", 5], ["y", 3], ["z", 0], ["x", 0], ["y", 0], ["z", 0], ["x", 0], ["y", 0], ["z", 0], ["x", 0], ["y", 0], ["z", 0], ["x", 0], ["y", 0], ["zの8パターン", 0], ["を計算してソート", 0], ["list", 0], ["xyz1", 0], ["list", 0], ["xyz2", 0], ["list", 0], ["xyz3", 0], ["list", 0], ["xyz4", 0], ["list", 0], ["xyz5", 0], ["list", 0], ["xyz6", 0], ["list", 0], ["xyz7", 0], ["list", 0], ["xyz8", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["list", 0], ["xyz1", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz2", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz3", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz4", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz5", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz6", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz7", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz8", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz1", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["list", 0], ["xyz2", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["list", 0], ["xyz3", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["list", 0], ["xyz4", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["list", 0], ["xyz5", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["list", 0], ["xyz6", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["list", 0], ["xyz7", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["list", 0], ["xyz8", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["xyz1", 0], ["0", 0], ["xyz2", 0], ["0", 0], ["xyz3", 0], ["0", 0], ["xyz4", 0], ["0", 0], ["xyz5", 0], ["0", 0], ["xyz6", 0], ["0", 0], ["xyz7", 0], ["0", 0], ["xyz8", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["xyz1", 0], ["list", 0], ["xyz1", 0], ["i", 0], ["xyz2", 0], ["list", 0], ["xyz2", 0], ["i", 0], ["xyz3", 0], ["list", 0], ["xyz3", 0], ["i", 0], ["xyz4", 0], ["list", 0], ["xyz4", 0], ["i", 0], ["xyz5", 0], ["list", 0], ["xyz5", 0], ["i", 0], ["xyz6", 0], ["list", 0], ["xyz6", 0], ["i", 0], ["xyz7", 0], ["list", 0], ["xyz7", 0], ["i", 0], ["xyz8", 0], ["list", 0], ["xyz8", 0], ["i", 0], ["print", 0], ["list", 0], ["xyz1", 0], ["print", 0], ["max", 0], ["xyz1", 0], ["xyz2", 0], ["xyz3", 0], ["xyz4", 0], ["xyz5", 0], ["xyz6", 0], ["xyz7", 0], ["xyz8", 0], ["coding", 0], ["utf", 0], ["8", 0], ["モジュールのインポート", 0], ["import", 0], ["sys", 0], ["def", 0], ["get", 0], ["input", 0], ["tuple", 0], ["標準入力を取得", 0], ["returns", 0], ["n", 0], ["tuple", 0], ["標準入力", 0], ["標準入力を取得", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cakes", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["n", 0], ["cake", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cakes", 0], ["append", 0], ["cake", 0], ["n", 0], ["return", 0], ["n", 0], ["m", 0], ["cakes", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["m", 0], ["int", 0], ["cakes", 0], ["list", 0], ["none", 0], ["メイン処理", 0], ["args", 0], ["n", 0], ["n", 0], ["int", 0], ["ケーキの種類", 0], ["1", 0], ["n", 0], ["1000", 0], ["m", 0], ["int", 0], ["食べる数", 0], ["0", 0], ["m", 0], ["n", 0], ["cakes", 0], ["list", 0], ["ケーキの要素", 0], ["10000000000", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["z", 0], ["i", 0], ["10000000000", 0], ["求解処理", 0], ["ans", 0], ["sys", 0], ["maxsize", 0], ["element", 0], ["3", 0], ["for", 0], ["bit", 0], ["in", 0], ["range", 0], ["1", 0], ["element", 0], ["sign", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["element", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["element", 0], ["if", 0], ["bit", 0], ["1", 0], ["i", 0], ["sign", 0], ["i", 0], ["1", 0], ["cakes", 0], ["sorted", 0], ["cakes", 0], ["key", 0], ["lambda", 0], ["x", 0], ["sum", 0], ["sign", 0], ["i", 0], ["x", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["element", 0], ["reverse", 0], ["true", 0], ["indicator", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["element", 0], ["for", 0], ["cake", 0], ["in", 0], ["cakes", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["element", 0], ["indicator", 0], ["i", 0], ["cake", 0], ["i", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["map", 0], ["abs", 0], ["indicator", 0], ["結果出力", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["標準入力を取得", 0], ["n", 0], ["m", 0], ["cakes", 0], ["get", 0], ["input", 0], ["メイン処理", 0], ["main", 0], ["n", 0], ["m", 0], ["cakes", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cakes", 0], ["tuple", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["make", 0], ["function", 0], ["i", 0], ["return", 0], ["lambda", 0], ["t", 0], ["sum", 0], ["t", 0], ["j", 0], ["1", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["functions", 0], ["make", 0], ["function", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["print", 0], ["max", 0], ["map", 0], ["sum", 0], ["sorted", 0], ["function", 0], ["cake", 0], ["for", 0], ["cake", 0], ["in", 0], ["cakes", 0], ["reverse", 0], ["true", 0], ["m", 0], ["for", 0], ["function", 0], ["in", 0], ["functions", 0], ["研究室pcでの解答", 0], ["import", 0], ["math", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["import", 0], ["queue", 0], ["import", 0], ["bisect", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["defaultdict", 0], ["import", 0], ["heapq", 0], ["as", 0], ["hpq", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["setrecursionlimit", 0], ["from", 0], ["scipy", 0], ["sparse", 0], ["csgraph", 0], ["import", 0], ["dijkstra", 0], ["from", 0], ["scipy", 0], ["sparse", 0], ["import", 0], ["csr", 0], ["matrix", 0], ["ipt", 0], ["stdin", 0], ["readline", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["ipt", 0], ["split", 0], ["pts", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ni", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["ipt", 0], ["split", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["8", 0], ["nm", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["j", 0], ["k", 0], ["1", 0], ["nm", 0], ["ni", 0], ["k", 0], ["else", 0], ["nm", 0], ["ni", 0], ["k", 0], ["pts", 0], ["j", 0], ["append", 0], ["nm", 0], ["ma", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["pts", 0], ["i", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["sm", 0], ["sum", 0], ["pts", 0], ["i", 0], ["m", 0], ["if", 0], ["ma", 0], ["sm", 0], ["ma", 0], ["sm", 0], ["print", 0], ["ma", 0], ["return", 0], ["none", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["bs", 0], ["format", 0], ["i", 0], ["03b", 0], ["lsum", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["lsum", 0], ["append", 0], ["sum", 0], ["l", 0], ["j", 0], ["2", 0], ["int", 0], ["bs", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["3", 0], ["lsum", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["lsum", 0], ["m", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["f", 0], ["inf", 0], ["float", 0], ["inf", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["resolve", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["res", 0], ["0", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["product", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["total", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["xyz", 0], ["s", 0], ["x", 0], ["x", 0], ["y", 0], ["y", 0], ["z", 0], ["z", 0], ["total", 0], ["append", 0], ["s", 0], ["total", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["res", 0], ["max", 0], ["res", 0], ["sum", 0], ["total", 0], ["m", 0], ["print", 0], ["res", 0], ["def", 0], ["starting", 0], ["point", 0], ["resolve", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xp", 0], ["yp", 0], ["zp", 0], ["0", 0], ["n", 0], ["xp", 0], ["yp", 0], ["zn", 0], ["0", 0], ["n", 0], ["xp", 0], ["yn", 0], ["zp", 0], ["0", 0], ["n", 0], ["xn", 0], ["yp", 0], ["zp", 0], ["0", 0], ["n", 0], ["xp", 0], ["yn", 0], ["zn", 0], ["0", 0], ["n", 0], ["xn", 0], ["yp", 0], ["zn", 0], ["0", 0], ["n", 0], ["xn", 0], ["yn", 0], ["zp", 0], ["0", 0], ["n", 0], ["xn", 0], ["yn", 0], ["zn", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xp", 0], ["yp", 0], ["zp", 0], ["i", 0], ["x", 0], ["y", 0], ["z", 0], ["xp", 0], ["yp", 0], ["zn", 0], ["i", 0], ["x", 0], ["y", 0], ["z", 0], ["xp", 0], ["yn", 0], ["zp", 0], ["i", 0], ["x", 0], ["y", 0], ["z", 0], ["xn", 0], ["yp", 0], ["zp", 0], ["i", 0], ["x", 0], ["y", 0], ["z", 0], ["xp", 0], ["yn", 0], ["zn", 0], ["i", 0], ["x", 0], ["y", 0], ["z", 0], ["xn", 0], ["yp", 0], ["zn", 0], ["i", 0], ["x", 0], ["y", 0], ["z", 0], ["xn", 0], ["yn", 0], ["zp", 0], ["i", 0], ["x", 0], ["y", 0], ["z", 0], ["xn", 0], ["yn", 0], ["zn", 0], ["i", 0], ["x", 0], ["y", 0], ["z", 0], ["xp", 0], ["yp", 0], ["zp", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["a", 0], ["sum", 0], ["xp", 0], ["yp", 0], ["zp", 0], ["0", 0], ["m", 0], ["xp", 0], ["yp", 0], ["zn", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["b", 0], ["sum", 0], ["xp", 0], ["yp", 0], ["zn", 0], ["0", 0], ["m", 0], ["xp", 0], ["yn", 0], ["zp", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["c", 0], ["sum", 0], ["xp", 0], ["yn", 0], ["zp", 0], ["0", 0], ["m", 0], ["xn", 0], ["yp", 0], ["zp", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["d", 0], ["sum", 0], ["xn", 0], ["yp", 0], ["zp", 0], ["0", 0], ["m", 0], ["xp", 0], ["yn", 0], ["zn", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["e", 0], ["sum", 0], ["xp", 0], ["yn", 0], ["zn", 0], ["0", 0], ["m", 0], ["xn", 0], ["yp", 0], ["zn", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["f", 0], ["sum", 0], ["xn", 0], ["yp", 0], ["zn", 0], ["0", 0], ["m", 0], ["xn", 0], ["yn", 0], ["zp", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["g", 0], ["sum", 0], ["xn", 0], ["yn", 0], ["zp", 0], ["0", 0], ["m", 0], ["xn", 0], ["yn", 0], ["zn", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["h", 0], ["sum", 0], ["xn", 0], ["yn", 0], ["zn", 0], ["0", 0], ["m", 0], ["ans", 0], ["max", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["f", 0], ["g", 0], ["h", 0], ["print", 0], ["ans", 0], ["import", 0], ["heapq", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pml", 0], ["for", 0], ["in", 0], ["range", 0], ["8", 0], ["for", 0], ["ll", 0], ["in", 0], ["pml", 0], ["heapq", 0], ["heapify", 0], ["ll", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["xs", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["ys", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["zs", 0], ["in", 0], ["1", 0], ["1", 0], ["tempid", 0], ["4", 0], ["if", 0], ["xs", 0], ["1", 0], ["else", 0], ["0", 0], ["2", 0], ["if", 0], ["ys", 0], ["1", 0], ["else", 0], ["0", 0], ["1", 0], ["if", 0], ["zs", 0], ["1", 0], ["else", 0], ["0", 0], ["tempspm", 0], ["x", 0], ["xs", 0], ["y", 0], ["ys", 0], ["z", 0], ["zs", 0], ["heapq", 0], ["heappush", 0], ["pml", 0], ["tempid", 0], ["tempspm", 0], ["apml", 0], ["0", 0], ["8", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["xs", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["ys", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["zs", 0], ["in", 0], ["1", 0], ["1", 0], ["tempid", 0], ["4", 0], ["if", 0], ["xs", 0], ["1", 0], ["else", 0], ["0", 0], ["2", 0], ["if", 0], ["ys", 0], ["1", 0], ["else", 0], ["0", 0], ["1", 0], ["if", 0], ["zs", 0], ["1", 0], ["else", 0], ["0", 0], ["apml", 0], ["tempid", 0], ["heapq", 0], ["heappop", 0], ["pml", 0], ["tempid", 0], ["print", 0], ["max", 0], ["apml", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["bit", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["t", 0], ["c", 0], ["k", 0], ["copy", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["t", 0], ["j", 0], ["1", 0], ["bit", 0], ["i", 0], ["append", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["bit", 0], ["i", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["p", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["z", 0], ["o", 0], ["t", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["m", 0], ["z", 0], ["bit", 0], ["i", 0], ["k", 0], ["0", 0], ["p", 0], ["0", 0], ["o", 0], ["bit", 0], ["i", 0], ["k", 0], ["1", 0], ["p", 0], ["1", 0], ["t", 0], ["bit", 0], ["i", 0], ["k", 0], ["2", 0], ["p", 0], ["2", 0], ["res", 0], ["max", 0], ["res", 0], ["abs", 0], ["z", 0], ["abs", 0], ["o", 0], ["abs", 0], ["t", 0], ["print", 0], ["res", 0], ["import", 0], ["sys", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["for", 0], ["in", 0], ["range", 0], ["8", 0], ["pm", 0], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 3], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["pm", 0], ["np", 0], ["array", 0], ["pm", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["k", 0], ["np", 0], ["array", 0], ["x", 0], ["y", 0], ["z", 0], ["xyz", 0], ["i", 0], ["append", 0], ["sum", 0], ["pm", 0], ["i", 0], ["k", 0], ["ans", 0], ["10", 0], ["20", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["x", 0], ["xyz", 0], ["i", 0], ["x", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["cnt", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["cnt", 0], ["x", 0], ["j", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["subset", 0], ["in", 0], ["product", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["inf", 0], ["10", 0], ["18", 0], ["dp", 0], ["inf", 0], ["n", 0], ["1", 0], ["dp", 0], ["0", 0], ["0", 0], ["def", 0], ["func", 0], ["xyz", 0], ["return", 0], ["sum", 0], ["x", 0], ["a", 0], ["for", 0], ["x", 0], ["a", 0], ["in", 0], ["zip", 0], ["xyz", 0], ["subset", 0], ["values", 0], ["list", 0], ["map", 0], ["func", 0], ["xyz", 0], ["for", 0], ["i", 0], ["val", 0], ["in", 0], ["enumerate", 0], ["values", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["reversed", 0], ["range", 0], ["1", 0], ["i", 0], ["1", 0], ["dp", 0], ["j", 0], ["max", 0], ["dp", 0], ["j", 0], ["1", 0], ["val", 0], ["dp", 0], ["j", 0], ["if", 0], ["ans", 0], ["dp", 0], ["m", 0], ["ans", 0], ["dp", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["m", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["res", 0], ["111", 0], ["res", 0], ["110", 0], ["res", 0], ["101", 0], ["res", 0], ["100", 0], ["res", 0], ["011", 0], ["res", 0], ["010", 0], ["res", 0], ["001", 0], ["res", 0], ["000", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["111", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["res", 0], ["110", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["res", 0], ["101", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["res", 0], ["100", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["res", 0], ["011", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["res", 0], ["010", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["res", 0], ["001", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["res", 0], ["000", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["res", 0], ["111", 0], ["sort", 0], ["res", 0], ["110", 0], ["sort", 0], ["res", 0], ["101", 0], ["sort", 0], ["res", 0], ["100", 0], ["sort", 0], ["res", 0], ["011", 0], ["sort", 0], ["res", 0], ["010", 0], ["sort", 0], ["res", 0], ["001", 0], ["sort", 0], ["res", 0], ["000", 0], ["sort", 0], ["print", 0], ["max", 0], ["sum", 0], ["res", 0], ["111", 0], ["m", 0], ["sum", 0], ["res", 0], ["110", 0], ["m", 0], ["sum", 0], ["res", 0], ["101", 0], ["m", 0], ["sum", 0], ["res", 0], ["100", 0], ["m", 0], ["sum", 0], ["res", 0], ["011", 0], ["m", 0], ["sum", 0], ["res", 0], ["010", 0], ["m", 0], ["sum", 0], ["res", 0], ["001", 0], ["m", 0], ["sum", 0], ["res", 0], ["000", 0], ["m", 0], ["d", 0], ["patisserie", 0], ["abc", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["for", 0], ["in", 0], ["range", 0], ["8", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["a", 0], ["1", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["a", 0], ["2", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["a", 0], ["3", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["a", 0], ["4", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["a", 0], ["5", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["a", 0], ["6", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["a", 0], ["7", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["a", 0], ["i", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["a", 0], ["i", 0], ["0", 0], ["m", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cake", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cake", 0], ["append", 0], ["c", 0], ["total", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["total", 0], ["i", 0], ["for", 0], ["k", 0], ["in", 0], ["cake", 0], ["hyouka", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["hyouka", 0], ["k", 0], ["j", 0], ["else", 0], ["hyouka", 0], ["k", 0], ["j", 0], ["total", 0], ["i", 0], ["append", 0], ["hyouka", 0], ["total", 0], ["i", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["goukei", 0], ["0", 0], ["for", 0], ["l", 0], ["in", 0], ["range", 0], ["m", 0], ["goukei", 0], ["total", 0], ["i", 0], ["l", 0], ["total", 0], ["append", 0], ["goukei", 0], ["print", 0], ["max", 0], ["total", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["s", 0], ["append", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["p", 0], ["j", 0], ["sx", 0], ["i", 0], ["4", 0], ["2", 0], ["2", 0], ["1", 0], ["sy", 0], ["i", 0], ["2", 0], ["2", 0], ["2", 0], ["1", 0], ["sz", 0], ["i", 0], ["2", 0], ["2", 0], ["1", 0], ["s", 0], ["i", 0], ["append", 0], ["sx", 0], ["x", 0], ["sy", 0], ["y", 0], ["sz", 0], ["z", 0], ["s", 0], ["i", 0], ["sorted", 0], ["s", 0], ["i", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["s", 0], ["i", 0], ["m", 0], ["print", 0], ["ans", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["def", 0], ["main", 0], ["入力", 0], ["readline", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["a", 0], ["np", 0], ["array", 0], ["list", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["dtype", 0], ["int64", 0], ["ans", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["1", 0], ["1", 0], ["b", 0], ["np", 0], ["array", 0], ["i", 0], ["j", 0], ["k", 0], ["dtype", 0], ["int64", 0], ["res", 0], ["np", 0], ["sort", 0], ["np", 0], ["dot", 0], ["a", 0], ["b", 0], ["1", 0], ["m", 0], ["sum", 0], ["ans", 0], ["max", 0], ["ans", 0], ["res", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["itertools", 0], ["import", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["max", 0], ["sum", 0], ["sorted", 0], ["i", 0], ["x", 0], ["j", 0], ["y", 0], ["k", 0], ["z", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["c", 0], ["reverse", 0], ["true", 0], ["m", 0], ["for", 0], ["i", 0], ["j", 0], ["k", 0], ["in", 0], ["product", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["nii", 0], ["lambda", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["lnii", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["n", 0], ["m", 0], ["nii", 0], ["l", 0], ["lnii", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["t", 0], ["l", 0], ["for", 0], ["j", 0], ["in", 0], ["l", 0], ["t", 0], ["num", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["k", 0], ["1", 0], ["t", 0], ["num", 0], ["j", 0], ["k", 0], ["else", 0], ["t", 0], ["num", 0], ["j", 0], ["k", 0], ["t", 0], ["l", 0], ["append", 0], ["t", 0], ["num", 0], ["t", 0], ["l", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["t", 0], ["l", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l1", 0], ["l2", 0], ["l3", 0], ["l4", 0], ["l5", 0], ["l6", 0], ["l7", 0], ["l8", 0], ["sorted", 0], ["xyz", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["sorted", 0], ["xyz", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["sorted", 0], ["xyz", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["sorted", 0], ["xyz", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["sorted", 0], ["xyz", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["sorted", 0], ["xyz", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["sorted", 0], ["xyz", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["sorted", 0], ["xyz", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["def", 0], ["sum2", 0], ["l", 0], ["ans", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["cnt", 0], ["i", 0], ["0", 0], ["ans", 0], ["abs", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["cnt", 0], ["i", 0], ["1", 0], ["ans", 0], ["abs", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["cnt", 0], ["i", 0], ["2", 0], ["ans", 0], ["abs", 0], ["cnt", 0], ["return", 0], ["ans", 0], ["print", 0], ["max", 0], ["sum2", 0], ["l1", 0], ["m", 0], ["sum2", 0], ["l2", 0], ["m", 0], ["sum2", 0], ["l3", 0], ["m", 0], ["sum2", 0], ["l4", 0], ["m", 0], ["sum2", 0], ["l5", 0], ["m", 0], ["sum2", 0], ["l6", 0], ["m", 0], ["sum2", 0], ["l7", 0], ["m", 0], ["sum2", 0], ["l8", 0], ["m", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["for", 0], ["in", 0], ["range", 0], ["1", 0], ["3", 0], ["ans", 0], ["10", 0], ["14", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["3", 0], ["tmp", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["tmp", 0], ["s", 0], ["j", 0], ["else", 0], ["tmp", 0], ["s", 0], ["j", 0], ["a", 0], ["i", 0], ["append", 0], ["tmp", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["3", 0], ["res", 0], ["sorted", 0], ["a", 0], ["x", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["res", 0], ["m", 0], ["print", 0], ["ans", 0], ["solve", 0], ["import", 0], ["itertools", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cakes", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["sign", 0], ["in", 0], ["itertools", 0], ["product", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["scores", 0], ["sum", 0], ["s", 0], ["c", 0], ["for", 0], ["s", 0], ["c", 0], ["in", 0], ["zip", 0], ["sign", 0], ["cake", 0], ["for", 0], ["cake", 0], ["in", 0], ["cakes", 0], ["scores", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["scores", 0], ["m", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["nii", 0], ["lambda", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["lnii", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["n", 0], ["m", 0], ["nii", 0], ["l", 0], ["lnii", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["1", 0], ["1", 0], ["t", 0], ["num", 0], ["0", 0], ["t", 0], ["l", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["l", 0], ["t", 0], ["num", 0], ["x", 0], ["i", 0], ["y", 0], ["j", 0], ["z", 0], ["k", 0], ["t", 0], ["l", 0], ["append", 0], ["t", 0], ["num", 0], ["t", 0], ["l", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["t", 0], ["l", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["as", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["as", 0], ["0", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["as", 0], ["1", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["as", 0], ["2", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["as", 0], ["3", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["as", 0], ["4", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["as", 0], ["5", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["as", 0], ["6", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["as", 0], ["7", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["ans", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["as", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["s", 0], ["sum", 0], ["a", 0], ["m", 0], ["ans", 0], ["max", 0], ["ans", 0], ["s", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["print", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["total", 0], ["minus", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["3", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["minus", 0], ["j", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["total", 0], ["append", 0], ["a", 0], ["k", 0], ["0", 0], ["minus", 0], ["0", 0], ["a", 0], ["k", 0], ["1", 0], ["minus", 0], ["1", 0], ["a", 0], ["k", 0], ["2", 0], ["minus", 0], ["2", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["sorted", 0], ["total", 0], ["reverse", 0], ["1", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["全＋、全ー、", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a1", 0], ["x", 0], ["y", 0], ["z", 0], ["a2", 0], ["x", 0], ["y", 0], ["z", 0], ["a3", 0], ["x", 0], ["y", 0], ["z", 0], ["a4", 0], ["x", 0], ["y", 0], ["z", 0], ["a5", 0], ["x", 0], ["y", 0], ["z", 0], ["a6", 0], ["x", 0], ["y", 0], ["z", 0], ["a7", 0], ["x", 0], ["y", 0], ["z", 0], ["a8", 0], ["x", 0], ["y", 0], ["z", 0], ["l", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["a1", 0], ["a2", 0], ["a3", 0], ["a4", 0], ["a5", 0], ["a6", 0], ["a7", 0], ["a8", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["11", 0], ["l", 0], ["sorted", 0], ["l", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["i", 0], ["reverse", 0], ["true", 0], ["sub", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["t", 0], ["l", 0], ["j", 0], ["sub", 0], ["t", 0], ["i", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sub", 0], ["print", 0], ["ans", 0], ["n", 0], ["eat", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cakes", 0], ["ls", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cakes", 0], ["ls", 0], ["i", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["patterns", 0], ["2", 0], ["3", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["patterns", 0], ["mult", 0], ["1", 0], ["3", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["mult", 0], ["j", 0], ["1", 0], ["value", 0], ["ls", 0], ["0", 0], ["n", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["n", 0], ["target", 0], ["cakes", 0], ["ls", 0], ["n", 0], ["value", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["3", 0], ["value", 0], ["target", 0], ["x", 0], ["mult", 0], ["x", 0], ["value", 0], ["ls", 0], ["n", 0], ["value", 0], ["value", 0], ["ls", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["print", 0], ["value", 0], ["ls", 0], ["print", 0], ["mult", 0], ["sum", 0], ["value", 0], ["ls", 0], ["eat", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["value", 0], ["ls", 0], ["eat", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["value", 0], ["sum", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["ans", 0], ["0", 0], ["8", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["value", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["8", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["j", 0], ["k", 0], ["1", 0], ["value", 0], ["sum", 0], ["j", 0], ["i", 0], ["value", 0], ["k", 0], ["else", 0], ["value", 0], ["sum", 0], ["j", 0], ["i", 0], ["value", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["value", 0], ["sum", 0], ["i", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["i", 0], ["sum", 0], ["value", 0], ["sum", 0], ["i", 0], ["m", 0], ["print", 0], ["max", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["y", 0], ["z", 0], ["g1", 0], ["g2", 0], ["g3", 0], ["g4", 0], ["g5", 0], ["g6", 0], ["g7", 0], ["g8", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g1", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["g2", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["g3", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["g4", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["g5", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["g6", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["g7", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["g8", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["g1", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["g2", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["g3", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["g4", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["g5", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["g6", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["g7", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["g8", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["0", 0], ["val1", 0], ["0", 0], ["val2", 0], ["0", 0], ["val3", 0], ["0", 0], ["val4", 0], ["0", 0], ["val5", 0], ["0", 0], ["val6", 0], ["0", 0], ["val7", 0], ["0", 0], ["val8", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["val1", 0], ["g1", 0], ["i", 0], ["val2", 0], ["g2", 0], ["i", 0], ["val3", 0], ["g3", 0], ["i", 0], ["val4", 0], ["g4", 0], ["i", 0], ["val5", 0], ["g5", 0], ["i", 0], ["val6", 0], ["g6", 0], ["i", 0], ["val7", 0], ["g7", 0], ["i", 0], ["val8", 0], ["g8", 0], ["i", 0], ["ans", 0], ["max", 0], ["val1", 0], ["val2", 0], ["val3", 0], ["val4", 0], ["val5", 0], ["val6", 0], ["val7", 0], ["val8", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["collections", 0], ["import", 0], ["bisect", 0], ["import", 0], ["copy", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["inf", 0], ["10", 0], ["16", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["mod", 0], ["998244353", 0], ["ni", 0], ["lambda", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["ns", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["na", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["na1", 0], ["lambda", 0], ["list", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["code", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["ns", 0], ["res", 0], ["for", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["if", 0], ["m", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["na", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["tmp", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["tmp", 0], ["a", 0], ["j", 0], ["else", 0], ["tmp", 0], ["a", 0], ["j", 0], ["res", 0], ["i", 0], ["append", 0], ["tmp", 0], ["ans", 0], ["inf", 0], ["for", 0], ["resi", 0], ["in", 0], ["res", 0], ["resi", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["resi", 0], ["m", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["sys", 0], ["setrecursionlimit", 0], ["20000000", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cake", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["for", 0], ["in", 0], ["range", 0], ["8", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["n", 0], ["m", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["m", 0], ["cake", 0], ["c", 0], ["j", 0], ["else", 0], ["m", 0], ["cake", 0], ["c", 0], ["j", 0], ["c", 0], ["i", 0], ["append", 0], ["m", 0], ["answer", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["c", 0], ["i", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["sum", 0], ["c", 0], ["i", 0], ["m", 0], ["if", 0], ["ans", 0], ["answer", 0], ["answer", 0], ["ans", 0], ["print", 0], ["answer", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["b", 0], ["for", 0], ["in", 0], ["range", 0], ["8", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["b", 0], ["0", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["b", 0], ["1", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["b", 0], ["2", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["b", 0], ["3", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["b", 0], ["4", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["b", 0], ["5", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["b", 0], ["6", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["b", 0], ["7", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["b", 0], ["i", 0], ["sort", 0], ["b", 0], ["i", 0], ["reverse", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["c", 0], ["append", 0], ["sum", 0], ["b", 0], ["i", 0], ["m", 0], ["print", 0], ["max", 0], ["c", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["num", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["num", 0], ["list", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["n", 0], ["m", 0], ["num", 0], ["list", 0], ["x", 0], ["y", 0], ["z", 0], ["としてx", 0], ["y", 3], ["z", 4], ["x", 5], ["y", 3], ["z", 4], ["x", 5], ["y", 3], ["z", 4], ["x", 5], ["y", 3], ["z", 0], ["x", 0], ["y", 0], ["z", 0], ["x", 0], ["y", 0], ["z", 0], ["x", 0], ["y", 0], ["z", 0], ["x", 0], ["y", 0], ["zの8パターン", 0], ["を計算してソート", 0], ["list", 0], ["xyz1", 0], ["list", 0], ["xyz2", 0], ["list", 0], ["xyz3", 0], ["list", 0], ["xyz4", 0], ["list", 0], ["xyz5", 0], ["list", 0], ["xyz6", 0], ["list", 0], ["xyz7", 0], ["list", 0], ["xyz8", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["list", 0], ["xyz1", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz2", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz3", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz4", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz5", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz6", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz7", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz8", 0], ["append", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["num", 0], ["list", 0], ["i", 0], ["2", 0], ["list", 0], ["xyz1", 0], ["sort", 0], ["list", 0], ["xyz2", 0], ["sort", 0], ["list", 0], ["xyz3", 0], ["sort", 0], ["list", 0], ["xyz4", 0], ["sort", 0], ["list", 0], ["xyz5", 0], ["sort", 0], ["list", 0], ["xyz6", 0], ["sort", 0], ["list", 0], ["xyz7", 0], ["sort", 0], ["list", 0], ["xyz8", 0], ["sort", 0], ["xyz1", 0], ["0", 0], ["xyz2", 0], ["0", 0], ["xyz3", 0], ["0", 0], ["xyz4", 0], ["0", 0], ["xyz5", 0], ["0", 0], ["xyz6", 0], ["0", 0], ["xyz7", 0], ["0", 0], ["xyz8", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["xyz1", 0], ["list", 0], ["xyz1", 0], ["n", 0], ["i", 0], ["1", 0], ["xyz2", 0], ["list", 0], ["xyz2", 0], ["n", 0], ["i", 0], ["1", 0], ["xyz3", 0], ["list", 0], ["xyz3", 0], ["n", 0], ["i", 0], ["1", 0], ["xyz4", 0], ["list", 0], ["xyz4", 0], ["n", 0], ["i", 0], ["1", 0], ["xyz5", 0], ["list", 0], ["xyz5", 0], ["n", 0], ["i", 0], ["1", 0], ["xyz6", 0], ["list", 0], ["xyz6", 0], ["n", 0], ["i", 0], ["1", 0], ["xyz7", 0], ["list", 0], ["xyz7", 0], ["n", 0], ["i", 0], ["1", 0], ["xyz8", 0], ["list", 0], ["xyz8", 0], ["n", 0], ["i", 0], ["1", 0], ["print", 0], ["list", 0], ["xyz1", 0], ["print", 0], ["max", 0], ["xyz1", 0], ["xyz2", 0], ["xyz3", 0], ["xyz4", 0], ["xyz5", 0], ["xyz6", 0], ["xyz7", 0], ["xyz8", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["eval", 0], ["eval", 0], ["list", 0], ["xyz", 0], ["i", 0], ["1", 0], ["0", 0], ["xyz", 0], ["i", 0], ["1", 0], ["1", 0], ["xyz", 0], ["i", 0], ["1", 0], ["2", 0], ["xyz", 0], ["i", 0], ["1", 0], ["0", 0], ["xyz", 0], ["i", 0], ["1", 0], ["1", 0], ["xyz", 0], ["i", 0], ["1", 0], ["2", 0], ["xyz", 0], ["i", 0], ["1", 0], ["0", 0], ["xyz", 0], ["i", 0], ["1", 0], ["1", 0], ["xyz", 0], ["i", 0], ["1", 0], ["2", 0], ["xyz", 0], ["i", 0], ["1", 0], ["0", 0], ["xyz", 0], ["i", 0], ["1", 0], ["1", 0], ["xyz", 0], ["i", 0], ["1", 0], ["2", 0], ["xyz", 0], ["i", 0], ["1", 0], ["0", 0], ["xyz", 0], ["i", 0], ["1", 0], ["1", 0], ["xyz", 0], ["i", 0], ["1", 0], ["2", 0], ["xyz", 0], ["i", 0], ["1", 0], ["0", 0], ["xyz", 0], ["i", 0], ["1", 0], ["1", 0], ["xyz", 0], ["i", 0], ["1", 0], ["2", 0], ["xyz", 0], ["i", 0], ["1", 0], ["0", 0], ["xyz", 0], ["i", 0], ["1", 0], ["1", 0], ["xyz", 0], ["i", 0], ["1", 0], ["2", 0], ["xyz", 0], ["i", 0], ["1", 0], ["0", 0], ["xyz", 0], ["i", 0], ["1", 0], ["1", 0], ["xyz", 0], ["i", 0], ["1", 0], ["2", 0], ["ans", 0], ["0", 0], ["for", 0], ["a", 0], ["b", 0], ["c", 0], ["in", 0], ["product", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["total", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["xyz", 0], ["s", 0], ["x", 0], ["a", 0], ["y", 0], ["b", 0], ["z", 0], ["c", 0], ["total", 0], ["append", 0], ["s", 0], ["total", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["total", 0], ["m", 0], ["print", 0], ["ans", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["readline", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["xyz", 0], ["tuple", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["result", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["product", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["xyz", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["key", 0], ["lambda", 0], ["e", 0], ["s", 0], ["0", 0], ["e", 0], ["0", 0], ["s", 0], ["1", 0], ["e", 0], ["1", 0], ["s", 0], ["2", 0], ["e", 0], ["2", 0], ["cx", 0], ["cy", 0], ["cz", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["xyz", 0], ["m", 0], ["cx", 0], ["x", 0], ["cy", 0], ["y", 0], ["cz", 0], ["z", 0], ["result", 0], ["max", 0], ["result", 0], ["abs", 0], ["cx", 0], ["abs", 0], ["cy", 0], ["abs", 0], ["cz", 0], ["print", 0], ["result", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["scores", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["scores", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["tmp", 0], ["scores", 0], ["for", 0], ["score", 0], ["in", 0], ["scores", 0], ["tmp", 0], ["score", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["tmp", 0], ["score", 0], ["score", 0], ["j", 0], ["else", 0], ["tmp", 0], ["score", 0], ["score", 0], ["j", 0], ["tmp", 0], ["scores", 0], ["append", 0], ["tmp", 0], ["score", 0], ["tmp", 0], ["scores", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["tmp", 0], ["scores", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["append", 0], ["l", 0], ["cand", 0], ["for", 0], ["bit", 0], ["in", 0], ["range", 0], ["8", 0], ["plus", 0], ["minus", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["b", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["bit", 0], ["1", 0], ["b", 0], ["plus", 0], ["minus", 0], ["b", 0], ["1", 0], ["l", 0], ["sorted", 0], ["l", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["plus", 0], ["minus", 0], ["0", 0], ["x", 0], ["1", 0], ["plus", 0], ["minus", 0], ["1", 0], ["x", 0], ["2", 0], ["plus", 0], ["minus", 0], ["2", 0], ["tmp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["tmp", 0], ["l", 0], ["i", 0], ["j", 0], ["plus", 0], ["minus", 0], ["j", 0], ["cand", 0], ["append", 0], ["tmp", 0], ["print", 0], ["max", 0], ["abs", 0], ["min", 0], ["cand", 0], ["max", 0], ["cand", 0], ["coding", 0], ["utf", 0], ["8", 0], ["モジュールのインポート", 0], ["import", 0], ["sys", 0], ["標準入力を取得", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cakes", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["n", 0], ["cake", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cakes", 0], ["append", 0], ["cake", 0], ["n", 0], ["求解処理", 0], ["ans", 0], ["sys", 0], ["maxsize", 0], ["element", 0], ["3", 0], ["for", 0], ["bit", 0], ["in", 0], ["range", 0], ["1", 0], ["element", 0], ["sign", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["element", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["element", 0], ["if", 0], ["bit", 0], ["1", 0], ["i", 0], ["sign", 0], ["i", 0], ["1", 0], ["cakes", 0], ["sorted", 0], ["cakes", 0], ["key", 0], ["lambda", 0], ["x", 0], ["sum", 0], ["sign", 0], ["i", 0], ["x", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["element", 0], ["reverse", 0], ["true", 0], ["indicator", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["element", 0], ["for", 0], ["cake", 0], ["in", 0], ["cakes", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["element", 0], ["indicator", 0], ["i", 0], ["cake", 0], ["i", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["map", 0], ["abs", 0], ["indicator", 0], ["結果出力", 0], ["print", 0], ["ans", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["subset", 0], ["in", 0], ["product", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["def", 0], ["func", 0], ["xyz", 0], ["return", 0], ["sum", 0], ["x", 0], ["a", 0], ["for", 0], ["x", 0], ["a", 0], ["in", 0], ["zip", 0], ["xyz", 0], ["subset", 0], ["score", 0], ["sum", 0], ["sorted", 0], ["map", 0], ["func", 0], ["xyz", 0], ["reverse", 0], ["true", 0], ["m", 0], ["if", 0], ["ans", 0], ["score", 0], ["ans", 0], ["score", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["cake", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["a", 0], ["b", 0], ["c", 0], ["in", 0], ["p", 0], ["cou", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["cake", 0], ["cou", 0], ["append", 0], ["x", 0], ["a", 0], ["y", 0], ["b", 0], ["z", 0], ["c", 0], ["cou", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["cou", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["sign", 0], ["1", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["s", 0], ["t", 0], ["u", 0], ["sign", 0], ["xyz", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["s", 0], ["x", 0], ["0", 0], ["t", 0], ["x", 0], ["1", 0], ["u", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["s", 0], ["t", 0], ["u", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["xyz", 0], ["m", 0], ["s", 0], ["x", 0], ["t", 0], ["y", 0], ["u", 0], ["z", 0], ["ans", 0], ["max", 0], ["ans", 0], ["abs", 0], ["s", 0], ["abs", 0], ["t", 0], ["abs", 0], ["u", 0], ["print", 0], ["ans", 0], ["import", 0], ["bisect", 0], ["collections", 0], ["copy", 0], ["heapq", 0], ["itertools", 0], ["math", 0], ["numpy", 0], ["string", 0], ["import", 0], ["sys", 0], ["from", 0], ["operator", 0], ["import", 0], ["itemgetter", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["def", 0], ["s", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["ls", 0], ["return", 0], ["list", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["n", 0], ["m", 0], ["li", 0], ["a", 0], ["li", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["m", 0], ["0", 0], ["3", 0], ["for", 0], ["in", 0], ["range", 0], ["8", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["4", 0], ["a", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["c", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["x", 0], ["0", 0], ["c", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["1", 0], ["x", 0], ["1", 0], ["c", 0], ["1", 0], ["2", 0], ["1", 0], ["x", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["m", 0], ["c", 0], ["2", 0], ["j", 0], ["a", 0], ["i", 0], ["j", 0], ["m", 0], ["c", 0], ["2", 0], ["1", 0], ["j", 0], ["a", 0], ["n", 0], ["1", 0], ["i", 0], ["j", 0], ["print", 0], ["max", 0], ["abs", 0], ["x", 0], ["0", 0], ["abs", 0], ["x", 0], ["1", 0], ["abs", 0], ["x", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["m", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["inf", 0], ["float", 0], ["inf", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["is", 0], ["nth", 0], ["bit", 0], ["set", 0], ["x", 0], ["n", 0], ["if", 0], ["x", 0], ["1", 0], ["n", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["arr", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["xyz", 0], ["tmp", 0], ["0", 0], ["if", 0], ["is", 0], ["nth", 0], ["bit", 0], ["set", 0], ["i", 0], ["0", 0], ["tmp", 0], ["x", 0], ["else", 0], ["tmp", 0], ["x", 0], ["if", 0], ["is", 0], ["nth", 0], ["bit", 0], ["set", 0], ["i", 0], ["1", 0], ["tmp", 0], ["y", 0], ["else", 0], ["tmp", 0], ["y", 0], ["if", 0], ["is", 0], ["nth", 0], ["bit", 0], ["set", 0], ["i", 0], ["2", 0], ["tmp", 0], ["z", 0], ["else", 0], ["tmp", 0], ["z", 0], ["arr", 0], ["append", 0], ["tmp", 0], ["arr", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["sum", 0], ["arr", 0], ["m", 0], ["ans", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["log", 0], ["args", 0], ["print", 0], ["args", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["1", 0], ["1", 0], ["l2", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["l", 0], ["s", 0], ["x", 0], ["i", 0], ["y", 0], ["j", 0], ["z", 0], ["k", 0], ["l2", 0], ["append", 0], ["s", 0], ["l2", 0], ["sorted", 0], ["l2", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["l2", 0], ["m", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["usr", 0], ["bin", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["vals", 0], ["for", 0], ["in", 0], ["range", 0], ["8", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["vals", 0], ["0", 0], ["append", 0], ["a", 0], ["b", 0], ["c", 0], ["vals", 0], ["1", 0], ["append", 0], ["a", 0], ["b", 0], ["c", 0], ["vals", 0], ["2", 0], ["append", 0], ["a", 0], ["b", 0], ["c", 0], ["vals", 0], ["3", 0], ["append", 0], ["a", 0], ["b", 0], ["c", 0], ["vals", 0], ["4", 0], ["append", 0], ["a", 0], ["b", 0], ["c", 0], ["vals", 0], ["5", 0], ["append", 0], ["a", 0], ["b", 0], ["c", 0], ["vals", 0], ["6", 0], ["append", 0], ["a", 0], ["b", 0], ["c", 0], ["vals", 0], ["7", 0], ["append", 0], ["a", 0], ["b", 0], ["c", 0], ["ret", 0], ["0", 0], ["for", 0], ["val", 0], ["in", 0], ["vals", 0], ["val", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ret", 0], ["max", 0], ["ret", 0], ["sum", 0], ["val", 0], ["m", 0], ["print", 0], ["ret", 0], ["import", 0], ["sys", 0], ["math", 0], ["collections", 0], ["itertools", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["z", 0], ["0", 0], ["xyz", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x0", 0], ["y0", 0], ["z0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["x0", 0], ["y", 0], ["y0", 0], ["z", 0], ["z0", 0], ["xyz", 0], ["append", 0], ["x0", 0], ["y0", 0], ["z0", 0], ["lmn", 0], ["for", 0], ["x0", 0], ["y0", 0], ["z0", 0], ["in", 0], ["xyz", 0], ["tmp", 0], ["x0", 0], ["y0", 0], ["z0", 0], ["for", 0], ["fx", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["fy", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["fz", 0], ["in", 0], ["1", 0], ["1", 0], ["tmp", 0], ["append", 0], ["x0", 0], ["fx", 0], ["y0", 0], ["fy", 0], ["z0", 0], ["fz", 0], ["lmn", 0], ["append", 0], ["tmp", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["lmn", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["i", 0], ["3", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["z", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["lmn", 0], ["j", 0], ["0", 0], ["y", 0], ["lmn", 0], ["j", 0], ["1", 0], ["z", 0], ["lmn", 0], ["j", 0], ["2", 0], ["ans", 0], ["max", 0], ["ans", 0], ["abs", 0], ["x", 0], ["abs", 0], ["y", 0], ["abs", 0], ["z", 0], ["print", 0], ["ans", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["def", 0], ["convert", 0], ["x", 0], ["pt", 0], ["return", 0], ["sum", 0], ["e", 0], ["if", 0], ["p", 0], ["else", 0], ["e", 0], ["for", 0], ["e", 0], ["p", 0], ["in", 0], ["zip", 0], ["x", 0], ["pt", 0], ["def", 0], ["submit", 0], ["n", 0], ["m", 0], ["int", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["input", 0], ["split", 0], ["cakes", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["pt", 0], ["in", 0], ["product", 0], ["0", 0], ["1", 0], ["repeat", 0], ["3", 0], ["pt", 0], ["cakes", 0], ["convert", 0], ["c", 0], ["pt", 0], ["for", 0], ["c", 0], ["in", 0], ["cakes", 0], ["pt", 0], ["cakes", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["pt", 0], ["sum", 0], ["sum", 0], ["pt", 0], ["cakes", 0], ["m", 0], ["if", 0], ["pt", 0], ["sum", 0], ["ans", 0], ["ans", 0], ["pt", 0], ["sum", 0], ["print", 0], ["ans", 0], ["submit", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["y", 0], ["z", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["z", 0], ["i", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pat", 0], ["product", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["ans", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["pat", 0], ["s", 0], ["v", 0], ["0", 0], ["x", 0], ["i", 0], ["v", 0], ["1", 0], ["y", 0], ["i", 0], ["v", 0], ["2", 0], ["z", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["tmp", 0], ["sum", 0], ["s", 0], ["m", 0], ["ans", 0], ["max", 0], ["ans", 0], ["tmp", 0], ["print", 0], ["ans", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["nii", 0], ["lambda", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["lnii", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["n", 0], ["m", 0], ["nii", 0], ["l", 0], ["lnii", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["1", 0], ["1", 0], ["t", 0], ["num", 0], ["0", 0], ["t", 0], ["l", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["l", 0], ["t", 0], ["num", 0], ["x", 0], ["i", 0], ["y", 0], ["j", 0], ["z", 0], ["k", 0], ["t", 0], ["l", 0], ["append", 0], ["t", 0], ["num", 0], ["t", 0], ["l", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["t", 0], ["l", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sum", 0], ["list", 0], ["0", 0], ["8", 0], ["l", 0], ["ppp", 0], ["0", 0], ["n", 0], ["l", 0], ["ppm", 0], ["0", 0], ["n", 0], ["l", 0], ["pmp", 0], ["0", 0], ["n", 0], ["l", 0], ["mpp", 0], ["0", 0], ["n", 0], ["l", 0], ["pmm", 0], ["0", 0], ["n", 0], ["l", 0], ["mpm", 0], ["0", 0], ["n", 0], ["l", 0], ["mmp", 0], ["0", 0], ["n", 0], ["l", 0], ["mmm", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["ppp", 0], ["i", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["ppm", 0], ["i", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["pmp", 0], ["i", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["mpp", 0], ["i", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["pmm", 0], ["i", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["mpm", 0], ["i", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["mmp", 0], ["i", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["mmm", 0], ["i", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["ppp", 0], ["sorted", 0], ["l", 0], ["ppp", 0], ["reverse", 0], ["true", 0], ["l", 0], ["ppm", 0], ["sorted", 0], ["l", 0], ["ppm", 0], ["reverse", 0], ["true", 0], ["l", 0], ["pmp", 0], ["sorted", 0], ["l", 0], ["pmp", 0], ["reverse", 0], ["true", 0], ["l", 0], ["mpp", 0], ["sorted", 0], ["l", 0], ["mpp", 0], ["reverse", 0], ["true", 0], ["l", 0], ["pmm", 0], ["sorted", 0], ["l", 0], ["pmm", 0], ["reverse", 0], ["true", 0], ["l", 0], ["mpm", 0], ["sorted", 0], ["l", 0], ["mpm", 0], ["reverse", 0], ["true", 0], ["l", 0], ["mmp", 0], ["sorted", 0], ["l", 0], ["mmp", 0], ["reverse", 0], ["true", 0], ["l", 0], ["mmm", 0], ["sorted", 0], ["l", 0], ["mmm", 0], ["reverse", 0], ["true", 0], ["sum", 0], ["list", 0], ["0", 0], ["sum", 0], ["l", 0], ["ppp", 0], ["m", 0], ["sum", 0], ["list", 0], ["1", 0], ["sum", 0], ["l", 0], ["ppm", 0], ["m", 0], ["sum", 0], ["list", 0], ["2", 0], ["sum", 0], ["l", 0], ["pmp", 0], ["m", 0], ["sum", 0], ["list", 0], ["3", 0], ["sum", 0], ["l", 0], ["mpp", 0], ["m", 0], ["sum", 0], ["list", 0], ["4", 0], ["sum", 0], ["l", 0], ["pmm", 0], ["m", 0], ["sum", 0], ["list", 0], ["5", 0], ["sum", 0], ["l", 0], ["mpm", 0], ["m", 0], ["sum", 0], ["list", 0], ["6", 0], ["sum", 0], ["l", 0], ["mmp", 0], ["m", 0], ["sum", 0], ["list", 0], ["7", 0], ["sum", 0], ["l", 0], ["mmm", 0], ["m", 0], ["print", 0], ["max", 0], ["sum", 0], ["list", 0], ["絶対値と言われたら＋とーのどっちにするのか分からない→全通りやれば良い", 0], ["向きを固定する。", 0], ["例えばxが", 0], ["yが", 0], ["、zが", 0], ["だとすると", 0], ["x", 0], ["y", 0], ["z", 0], ["3", 0], ["4", 0], ["1", 0], ["の「貢献度」は3", 0], ["4", 0], ["1", 0], ["6になる", 0], ["あとは貢献度の順にソートして、上位からm個を取れば良い", 0], ["l1ノルムが一定→ダイヤ型（正八面体）", 0], ["マンハッタン距離を使う問題とも通じるものがある。", 0], ["https", 0], ["atcoder", 0], ["jp", 0], ["contests", 0], ["abc178", 0], ["tasks", 0], ["abc178", 0], ["e", 0], ["abc178", 0], ["e", 0], ["dist", 0], ["max", 0], ["「いくつか向きの候補があるから、全通りを考えて最大を取ればいいよね。向きを固定すればあとは単純な貪欲だよね」", 0], ["import", 0], ["copy", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["temp", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["sign", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["y", 0], ["sign", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["z", 0], ["sign", 0], ["in", 0], ["1", 0], ["1", 0], ["params", 0], ["temp", 0], ["copy", 0], ["これでは浅いコピーになるので、同じオブジェクトを指してしまう", 0], ["params", 0], ["copy", 0], ["deepcopy", 0], ["temp", 0], ["for", 0], ["xyz", 0], ["in", 0], ["params", 0], ["xyz", 0], ["append", 0], ["x", 0], ["sign", 0], ["xyz", 0], ["0", 0], ["y", 0], ["sign", 0], ["xyz", 0], ["1", 0], ["z", 0], ["sign", 0], ["xyz", 0], ["2", 0], ["params", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["xyz", 0], ["xyz", 0], ["3", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["sign", 0], ["sum", 0], ["xyz", 0], ["3", 0], ["for", 0], ["xyz", 0], ["in", 0], ["params", 0], ["m", 0], ["ans", 0], ["max", 0], ["ans", 0], ["ans", 0], ["sign", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["checker", 0], ["num", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["num", 0], ["2", 0], ["1", 0], ["checker", 0], ["append", 0], ["1", 0], ["else", 0], ["checker", 0], ["append", 0], ["1", 0], ["num", 0], ["1", 0], ["xyz", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["abc", 0], ["checker", 0], ["s", 0], ["xyz", 0], ["j", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["3", 0], ["xyz", 0], ["append", 0], ["sum", 0], ["abc", 0], ["abc", 0], ["xyz", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["r", 0], ["abs", 0], ["sum", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["xyz", 0], ["m", 0], ["abs", 0], ["sum", 0], ["i", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["xyz", 0], ["m", 0], ["abs", 0], ["sum", 0], ["i", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["xyz", 0], ["m", 0], ["r", 0], ["append", 0], ["r", 0], ["print", 0], ["max", 0], ["r", 0], ["def", 0], ["main", 0], ["import", 0], ["itertools", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ls", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["stats", 0], ["stat", 0], ["for", 0], ["stat", 0], ["in", 0], ["itertools", 0], ["product", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["j", 0], ["stat", 0], ["in", 0], ["enumerate", 0], ["stats", 0], ["ls", 0], ["j", 0], ["append", 0], ["x", 0], ["1", 0], ["stat", 0], ["0", 0], ["y", 0], ["1", 0], ["stat", 0], ["1", 0], ["z", 0], ["1", 0], ["stat", 0], ["2", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["a", 0], ["sum", 0], ["sorted", 0], ["ls", 0], ["i", 0], ["reverse", 0], ["true", 0], ["0", 0], ["m", 0], ["if", 0], ["a", 0], ["ans", 0], ["ans", 0], ["a", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["collections", 0], ["import", 0], ["bisect", 0], ["import", 0], ["copy", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["inf", 0], ["10", 0], ["16", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["mod", 0], ["998244353", 0], ["ni", 0], ["lambda", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["ns", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["na", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["na1", 0], ["lambda", 0], ["list", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["code", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["ns", 0], ["res", 0], ["for", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["if", 0], ["m", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["na", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["tmp", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["tmp", 0], ["a", 0], ["j", 0], ["else", 0], ["tmp", 0], ["a", 0], ["j", 0], ["res", 0], ["i", 0], ["append", 0], ["tmp", 0], ["ans", 0], ["inf", 0], ["for", 0], ["resi", 0], ["in", 0], ["res", 0], ["if", 0], ["len", 0], ["resi", 0], ["0", 0], ["continue", 0], ["resi", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["resi", 0], ["m", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ab", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["import", 0], ["itertools", 0], ["nums", 0], ["0", 0], ["1", 0], ["ll", 0], ["list", 0], ["itertools", 0], ["product", 0], ["nums", 0], ["repeat", 0], ["3", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["ll", 0], ["temp", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["0", 0], ["0", 0], ["x", 0], ["ab", 0], ["j", 0], ["0", 0], ["else", 0], ["x", 0], ["ab", 0], ["j", 0], ["0", 0], ["if", 0], ["i", 0], ["1", 0], ["0", 0], ["y", 0], ["ab", 0], ["j", 0], ["1", 0], ["else", 0], ["y", 0], ["ab", 0], ["j", 0], ["1", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["z", 0], ["ab", 0], ["j", 0], ["2", 0], ["else", 0], ["z", 0], ["ab", 0], ["j", 0], ["2", 0], ["temp", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["tempp", 0], ["list", 0], ["sorted", 0], ["temp", 0], ["reverse", 0], ["true", 0], ["res", 0], ["max", 0], ["res", 0], ["sum", 0], ["tempp", 0], ["m", 0], ["print", 0], ["res", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["for", 0], ["lst", 0], ["in", 0], ["product", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["temp", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["xyz", 0], ["temp", 0], ["append", 0], ["x", 0], ["lst", 0], ["0", 0], ["y", 0], ["lst", 0], ["1", 0], ["z", 0], ["lst", 0], ["2", 0], ["temp", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["append", 0], ["sum", 0], ["temp", 0], ["m", 0], ["print", 0], ["max", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cake", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["cnt", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["k", 0], ["1", 0], ["cnt", 0], ["cake", 0], ["j", 0], ["k", 0], ["else", 0], ["cnt", 0], ["cake", 0], ["j", 0], ["k", 0], ["s", 0], ["append", 0], ["cnt", 0], ["s", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["s", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["y", 0], ["z", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["append", 0], ["x", 0], ["y", 0], ["append", 0], ["y", 0], ["z", 0], ["append", 0], ["z", 0], ["ppp", 0], ["ppn", 0], ["npp", 0], ["pnp", 0], ["pnn", 0], ["npn", 0], ["nnp", 0], ["nnn", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["ppp", 0], ["append", 0], ["x", 0], ["j", 0], ["y", 0], ["j", 0], ["z", 0], ["j", 0], ["ppn", 0], ["append", 0], ["x", 0], ["j", 0], ["y", 0], ["j", 0], ["z", 0], ["j", 0], ["npp", 0], ["append", 0], ["x", 0], ["j", 0], ["y", 0], ["j", 0], ["z", 0], ["j", 0], ["pnp", 0], ["append", 0], ["x", 0], ["j", 0], ["y", 0], ["j", 0], ["z", 0], ["j", 0], ["pnn", 0], ["append", 0], ["x", 0], ["j", 0], ["y", 0], ["j", 0], ["z", 0], ["j", 0], ["npn", 0], ["append", 0], ["x", 0], ["j", 0], ["y", 0], ["j", 0], ["z", 0], ["j", 0], ["nnp", 0], ["append", 0], ["x", 0], ["j", 0], ["y", 0], ["j", 0], ["z", 0], ["j", 0], ["nnn", 0], ["append", 0], ["x", 0], ["j", 0], ["y", 0], ["j", 0], ["z", 0], ["j", 0], ["ppp", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ppn", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["npp", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["pnp", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["pnn", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["npn", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["nnp", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["nnn", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["print", 0], ["max", 0], ["sum", 0], ["ppp", 0], ["m", 0], ["sum", 0], ["ppn", 0], ["m", 0], ["sum", 0], ["npp", 0], ["m", 0], ["sum", 0], ["pnp", 0], ["m", 0], ["sum", 0], ["pnn", 0], ["m", 0], ["sum", 0], ["npn", 0], ["m", 0], ["sum", 0], ["nnp", 0], ["m", 0], ["sum", 0], ["nnn", 0], ["m", 0], ["ma", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lma", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["tma", 0], ["lambda", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ni", 0], ["lambda", 0], ["int", 0], ["input", 0], ["yn", 0], ["lambda", 0], ["fl", 0], ["print", 0], ["yes", 0], ["if", 0], ["fl", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["collections", 0], ["import", 0], ["math", 0], ["import", 0], ["itertools", 0], ["import", 0], ["heapq", 0], ["as", 0], ["hq", 0], ["pm", 0], ["1", 0], ["1", 0], ["n", 0], ["m", 0], ["ma", 0], ["xyz", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["xyz", 0], ["append", 0], ["lma", 0], ["def", 0], ["f", 0], ["p0", 0], ["p1", 0], ["p2", 0], ["xyz", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["p0", 0], ["x", 0], ["0", 0], ["p1", 0], ["x", 0], ["1", 0], ["p2", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["ret", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["t", 0], ["xyz", 0], ["i", 0], ["ret", 0], ["p0", 0], ["t", 0], ["0", 0], ["p1", 0], ["t", 0], ["1", 0], ["p2", 0], ["t", 0], ["2", 0], ["return", 0], ["ret", 0], ["tmp", 0], ["10", 0], ["15", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["p", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["p", 0], ["j", 0], ["pm", 0], ["i", 0], ["j", 0], ["1", 0], ["print", 0], ["p", 0], ["print", 0], ["f", 0], ["p", 0], ["tmp", 0], ["max", 0], ["tmp", 0], ["f", 0], ["p", 0], ["print", 0], ["tmp", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["xyz", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["hugo", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["1", 0], ["hugo", 0], ["j", 0], ["1", 0], ["a", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["xyz", 0], ["a", 0], ["append", 0], ["x", 0], ["hugo", 0], ["0", 0], ["y", 0], ["hugo", 0], ["1", 0], ["z", 0], ["hugo", 0], ["2", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["a", 0], ["m", 0], ["print", 0], ["ans", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["scores", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["f", 0], ["score", 0], ["return", 0], ["sum", 0], ["score", 0], ["i", 0], ["1", 0], ["1", 0], ["p", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["ans", 0], ["0", 0], ["for", 0], ["p", 0], ["in", 0], ["product", 0], ["range", 0], ["2", 0], ["repeat", 0], ["3", 0], ["s", 0], ["list", 0], ["map", 0], ["f", 0], ["scores", 0], ["s", 0], ["sorted", 0], ["s", 0], ["reverse", 0], ["true", 0], ["sum", 0], ["sum", 0], ["s", 0], ["m", 0], ["if", 0], ["ans", 0], ["sum", 0], ["ans", 0], ["sum", 0], ["print", 0], ["ans", 0], ["import", 0], ["itertools", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["value", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["abv", 0], ["i", 0], ["if", 0], ["i", 0], ["0", 0], ["else", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["v", 0], ["value", 0], ["i", 0], ["v", 0], ["ans", 0], ["0", 0], ["totals", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["2", 0], ["3", 0], ["totals", 0], ["print", 0], ["bin", 0], ["i", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["tmp", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["tmp", 0], ["value", 0], ["v", 0], ["j", 0], ["else", 0], ["tmp", 0], ["value", 0], ["v", 0], ["j", 0], ["totals", 0], ["append", 0], ["tmp", 0], ["print", 0], ["totals", 0], ["totals", 0], ["sorted", 0], ["totals", 0], ["reverse", 0], ["true", 0], ["t", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["m", 0], ["t", 0], ["totals", 0], ["k", 0], ["ans", 0], ["max", 0], ["ans", 0], ["t", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["cakes", 0], ["tuple", 0], ["map", 0], ["int", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["res", 0], ["10", 0], ["15", 0], ["for", 0], ["a", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["b", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["1", 0], ["1", 0], ["gains", 0], ["a", 0], ["x", 0], ["b", 0], ["y", 0], ["c", 0], ["z", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["cakes", 0], ["gains", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["res", 0], ["max", 0], ["res", 0], ["sum", 0], ["gains", 0], ["m", 0], ["print", 0], ["res", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["x", 0], ["y", 0], ["z", 0], ["を正にするか負にするか8通り試す", 0], ["d", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["c", 0], ["j", 0], ["if", 0], ["i", 0], ["0", 0], ["1", 0], ["d", 0], ["j", 0], ["x", 0], ["else", 0], ["d", 0], ["j", 0], ["x", 0], ["if", 0], ["i", 0], ["1", 0], ["1", 0], ["d", 0], ["j", 0], ["y", 0], ["else", 0], ["d", 0], ["j", 0], ["y", 0], ["if", 0], ["i", 0], ["2", 0], ["1", 0], ["d", 0], ["j", 0], ["z", 0], ["else", 0], ["d", 0], ["j", 0], ["z", 0], ["d", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["res", 0], ["max", 0], ["res", 0], ["sum", 0], ["d", 0], ["m", 0], ["その中で一番大きいものm個をとる", 0], ["print", 0], ["res", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["z", 0], ["in", 0], ["1", 0], ["1", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["p", 0], ["val", 0], ["x", 0], ["p", 0], ["i", 0], ["0", 0], ["y", 0], ["p", 0], ["i", 0], ["1", 0], ["z", 0], ["p", 0], ["i", 0], ["2", 0], ["a", 0], ["append", 0], ["val", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["a", 0], ["m", 0], ["print", 0], ["ans", 0], ["o", 0], ["nlogn", 0], ["で全列挙", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["sys", 0], ["setrecursionlimit", 0], ["1000000", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["input", 0], ["lambda", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["ni", 0], ["lambda", 0], ["int", 0], ["input", 0], ["nmi", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["nli", 0], ["lambda", 0], ["list", 0], ["nmi", 0], ["si", 0], ["lambda", 0], ["input", 0], ["def", 0], ["make", 0], ["grid", 0], ["h", 0], ["w", 0], ["num", 0], ["return", 0], ["int", 0], ["num", 0], ["w", 0], ["for", 0], ["in", 0], ["range", 0], ["h", 0], ["def", 0], ["make", 0], ["cumulative", 0], ["a", 0], ["c", 0], ["0", 0], ["len", 0], ["a", 0], ["1", 0], ["for", 0], ["i", 0], ["a", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["c", 0], ["i", 0], ["1", 0], ["a", 0], ["return", 0], ["c", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["nmi", 0], ["cakes", 0], ["for", 0], ["in", 0], ["range", 0], ["8", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["nmi", 0], ["cakes", 0], ["0", 0], ["append", 0], ["sum", 0], ["x", 0], ["y", 0], ["z", 0], ["cakes", 0], ["1", 0], ["append", 0], ["sum", 0], ["x", 0], ["y", 0], ["z", 0], ["cakes", 0], ["2", 0], ["append", 0], ["sum", 0], ["x", 0], ["y", 0], ["z", 0], ["cakes", 0], ["3", 0], ["append", 0], ["sum", 0], ["x", 0], ["y", 0], ["z", 0], ["cakes", 0], ["4", 0], ["append", 0], ["sum", 0], ["x", 0], ["y", 0], ["z", 0], ["cakes", 0], ["5", 0], ["append", 0], ["sum", 0], ["x", 0], ["y", 0], ["z", 0], ["cakes", 0], ["6", 0], ["append", 0], ["sum", 0], ["x", 0], ["y", 0], ["z", 0], ["cakes", 0], ["7", 0], ["append", 0], ["sum", 0], ["x", 0], ["y", 0], ["z", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["cakes", 0], ["i", 0], ["sorted", 0], ["cakes", 0], ["i", 0], ["reverse", 0], ["true", 0], ["cakes", 0], ["i", 0], ["sum", 0], ["cakes", 0], ["i", 0], ["m", 0], ["print", 0], ["max", 0], ["cakes", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["maxi", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["3", 0], ["idx", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["idx", 0], ["append", 0], ["j", 0], ["arr", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["k", 0], ["in", 0], ["idx", 0], ["s", 0], ["xyz", 0], ["j", 0], ["k", 0], ["else", 0], ["s", 0], ["xyz", 0], ["j", 0], ["k", 0], ["arr", 0], ["append", 0], ["s", 0], ["j", 0], ["arr", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["x", 0], ["y", 0], ["z", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["xyz", 0], ["arr", 0], ["j", 0], ["1", 0], ["0", 0], ["y", 0], ["xyz", 0], ["arr", 0], ["j", 0], ["1", 0], ["1", 0], ["z", 0], ["xyz", 0], ["arr", 0], ["j", 0], ["1", 0], ["2", 0], ["maxi", 0], ["max", 0], ["maxi", 0], ["abs", 0], ["x", 0], ["abs", 0], ["y", 0], ["abs", 0], ["z", 0], ["print", 0], ["maxi", 0], ["import", 0], ["sys", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["readlines", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["inf", 0], ["1", 0], ["60", 0], ["mod", 0], ["1000000007", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["xyz", 0], ["list", 0], ["map", 0], ["int", 0], ["read", 0], ["split", 0], ["def", 0], ["score", 0], ["s", 0], ["x", 0], ["s", 0], ["y", 0], ["s", 0], ["z", 0], ["p", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["enumerate", 0], ["zip", 0], ["iter", 0], ["xyz", 0], ["3", 0], ["p", 0], ["i", 0], ["s", 0], ["x", 0], ["x", 0], ["s", 0], ["y", 0], ["y", 0], ["s", 0], ["z", 0], ["z", 0], ["p", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["return", 0], ["sum", 0], ["p", 0], ["m", 0], ["ans", 0], ["inf", 0], ["for", 0], ["s", 0], ["x", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["s", 0], ["y", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["s", 0], ["z", 0], ["in", 0], ["1", 0], ["1", 0], ["res", 0], ["score", 0], ["s", 0], ["x", 0], ["s", 0], ["y", 0], ["s", 0], ["z", 0], ["if", 0], ["ans", 0], ["res", 0], ["ans", 0], ["res", 0], ["print", 0], ["ans", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["0", 0], ["n", 0], ["y", 0], ["0", 0], ["n", 0], ["z", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["z", 0], ["i", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sign", 0], ["0", 0], ["3", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["sign", 0], ["j", 0], ["1", 0], ["else", 0], ["sign", 0], ["j", 0], ["1", 0], ["tot", 0], ["0", 0], ["arr", 0], ["0", 0], ["n", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["arr", 0], ["k", 0], ["x", 0], ["k", 0], ["sign", 0], ["0", 0], ["y", 0], ["k", 0], ["sign", 0], ["1", 0], ["z", 0], ["k", 0], ["sign", 0], ["2", 0], ["arr", 0], ["sorted", 0], ["arr", 0], ["reverse", 0], ["true", 0], ["tot", 0], ["sum", 0], ["arr", 0], ["m", 0], ["if", 0], ["tot", 0], ["ans", 0], ["ans", 0], ["tot", 0], ["print", 0], ["ans", 0], ["import", 0], ["bisect", 0], ["collections", 0], ["copy", 0], ["heapq", 0], ["itertools", 0], ["math", 0], ["numpy", 0], ["string", 0], ["from", 0], ["operator", 0], ["import", 0], ["itemgetter", 0], ["import", 0], ["sys", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["def", 0], ["s", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["ls", 0], ["return", 0], ["list", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["n", 0], ["m", 0], ["li", 0], ["a", 0], ["li", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["m", 0], ["0", 0], ["3", 0], ["for", 0], ["in", 0], ["range", 0], ["8", 0], ["a", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["m", 0], ["0", 0], ["j", 0], ["a", 0], ["i", 0], ["j", 0], ["m", 0], ["1", 0], ["j", 0], ["a", 0], ["n", 0], ["1", 0], ["i", 0], ["j", 0], ["a", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["m", 0], ["2", 0], ["j", 0], ["a", 0], ["i", 0], ["j", 0], ["m", 0], ["3", 0], ["j", 0], ["a", 0], ["n", 0], ["1", 0], ["i", 0], ["j", 0], ["a", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["m", 0], ["4", 0], ["j", 0], ["a", 0], ["i", 0], ["j", 0], ["m", 0], ["5", 0], ["j", 0], ["a", 0], ["n", 0], ["1", 0], ["i", 0], ["j", 0], ["a", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["m", 0], ["6", 0], ["j", 0], ["a", 0], ["i", 0], ["j", 0], ["m", 0], ["7", 0], ["j", 0], ["a", 0], ["n", 0], ["1", 0], ["i", 0], ["j", 0], ["print", 0], ["max", 0], ["abs", 0], ["x", 0], ["0", 0], ["abs", 0], ["x", 0], ["1", 0], ["abs", 0], ["x", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["m", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["z", 0], ["in", 0], ["1", 0], ["1", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["p", 0], ["val", 0], ["x", 0], ["p", 0], ["i", 0], ["0", 0], ["y", 0], ["p", 0], ["i", 0], ["1", 0], ["z", 0], ["p", 0], ["i", 0], ["2", 0], ["a", 0], ["append", 0], ["val", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["a", 0], ["m", 0], ["print", 0], ["ans", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["y", 0], ["z", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["z", 0], ["i", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["10", 0], ["9", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["a", 0], ["b", 0], ["c", 0], ["それぞれ正負どちらに合わせるかを決める", 0], ["sort", 0], ["bit", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["i", 0], ["2", 0], ["bit", 0], ["0", 0], ["1", 0], ["if", 0], ["i", 0], ["2", 0], ["2", 0], ["bit", 0], ["1", 0], ["1", 0], ["if", 0], ["i", 0], ["4", 0], ["2", 0], ["bit", 0], ["2", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sort", 0], ["append", 0], ["x", 0], ["i", 0], ["bit", 0], ["0", 0], ["y", 0], ["i", 0], ["bit", 0], ["1", 0], ["z", 0], ["i", 0], ["bit", 0], ["2", 0], ["sort", 0], ["sort", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["sort", 0], ["n", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cake", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["sign", 0], ["x", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["sign", 0], ["y", 0], ["in", 0], ["1", 0], ["1", 0], ["for", 0], ["sign", 0], ["z", 0], ["in", 0], ["1", 0], ["1", 0], ["point", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["cake", 0], ["v", 0], ["x", 0], ["sign", 0], ["x", 0], ["y", 0], ["sign", 0], ["y", 0], ["z", 0], ["sign", 0], ["z", 0], ["point", 0], ["append", 0], ["v", 0], ["point", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["sum", 0], ["point", 0], ["m", 0], ["ans", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xyz", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["inf", 0], ["float", 0], ["inf", 0], ["ans", 0], ["inf", 0], ["def", 0], ["func", 0], ["multi", 0], ["dp", 0], ["inf", 0], ["m", 0], ["1", 0], ["dp", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["xyz", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["min", 0], ["i", 0], ["1", 0], ["m", 0], ["0", 0], ["1", 0], ["dp", 0], ["j", 0], ["max", 0], ["dp", 0], ["j", 0], ["dp", 0], ["j", 0], ["1", 0], ["x", 0], ["multi", 0], ["0", 0], ["y", 0], ["multi", 0], ["1", 0], ["z", 0], ["multi", 0], ["2", 0], ["return", 0], ["dp", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["multi", 0], ["1", 0], ["3", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["multi", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["func", 0], ["multi", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["lst", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["lst", 0], ["append", 0], ["i", 0], ["j", 0], ["1", 0], ["l0", 0], ["append", 0], ["lst", 0], ["def", 0], ["f", 0], ["x", 0], ["i", 0], ["return", 0], ["x", 0], ["1", 0], ["i", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["lst", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["lst", 0], ["append", 0], ["f", 0], ["l", 0], ["j", 0], ["0", 0], ["l0", 0], ["i", 0], ["0", 0], ["f", 0], ["l", 0], ["j", 0], ["1", 0], ["l0", 0], ["i", 0], ["1", 0], ["f", 0], ["l", 0], ["j", 0], ["2", 0], ["l0", 0], ["i", 0], ["2", 0], ["lst", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["lst", 0], ["m", 0], ["print", 0], ["ans", 0], ["def", 0], ["d", 0], ["patisserie", 0], ["abc", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["cake", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["変数の意味は，左から順に，", 0], ["綺麗さ", 0], ["おいしさ", 0], ["人気度", 0], ["をそれぞれ", 0], ["正の方向", 0], ["p", 0], ["に最大化する場合と負の方向", 0], ["n", 0], ["に最大化する場合である．", 0], ["なお，nnn", 0], ["nnp", 0], ["npn", 0], ["npp", 0], ["は，ppp", 0], ["ppn", 0], ["pnp", 0], ["pnn", 0], ["を", 0], ["逆にすることで得られる．", 0], ["ppp", 0], ["ppn", 0], ["pnp", 0], ["pnn", 0], ["for", 0], ["x", 0], ["y", 0], ["z", 0], ["in", 0], ["cake", 0], ["ppp", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["ppn", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["pnp", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["pnn", 0], ["append", 0], ["x", 0], ["y", 0], ["z", 0], ["ppp", 0], ["sort", 0], ["ppn", 0], ["sort", 0], ["pnp", 0], ["sort", 0], ["pnn", 0], ["sort", 0], ["値が大きなものを", 0], ["m", 0], ["個取って足して絶対値をとる", 0], ["pts", 0], ["map", 0], ["lambda", 0], ["x", 0], ["abs", 0], ["sum", 0], ["x", 0], ["ppp", 0], ["m", 0], ["ppn", 0], ["m", 0], ["pnp", 0], ["m", 0], ["pnn", 0], ["m", 0], ["ppp", 0], ["1", 0], ["m", 0], ["ppn", 0], ["1", 0], ["m", 0], ["pnp", 0], ["1", 0], ["m", 0], ["pnn", 0], ["1", 0], ["m", 0], ["return", 0], ["max", 0], ["pts", 0], ["print", 0], ["d", 0], ["patisserie", 0], ["abc", 0], ["import", 0], ["itertools", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["bit", 0], ["base", 0], ["2", 0], ["bit", 0], ["base", 0], ["nの全探査になる", 0], ["def", 0], ["base", 0], ["10", 0], ["to", 0], ["n", 0], ["x", 0], ["n", 0], ["10進数をbit", 0], ["base進数に変換", 0], ["x", 0], ["dumy", 0], ["x", 0], ["out", 0], ["while", 0], ["x", 0], ["dumy", 0], ["0", 0], ["out", 0], ["str", 0], ["x", 0], ["dumy", 0], ["n", 0], ["out", 0], ["x", 0], ["dumy", 0], ["int", 0], ["x", 0], ["dumy", 0], ["n", 0], ["return", 0], ["out", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cake", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cake", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cake", 0], ["np", 0], ["array", 0], ["cake", 0], ["ans", 0], ["0", 0], ["n", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["bit", 0], ["base", 0], ["n", 0], ["s", 0], ["base", 0], ["10", 0], ["to", 0], ["n", 0], ["i", 0], ["bit", 0], ["base", 0], ["s", 0], ["s", 0], ["zfill", 0], ["n", 0], ["cake", 0], ["temp", 0], ["cake", 0], ["copy", 0], ["for", 0], ["num", 0], ["j", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["j", 0], ["0", 0], ["cake", 0], ["temp", 0], ["num", 0], ["1", 0], ["cake", 0], ["temp", 0], ["np", 0], ["sum", 0], ["cake", 0], ["temp", 0], ["axis", 0], ["1", 0], ["cake", 0], ["temp", 0], ["sorted", 0], ["cake", 0], ["temp", 0], ["ans", 0], ["max", 0], ["sum", 0], ["cake", 0], ["temp", 0], ["m", 0], ["ans", 0], ["if", 0], ["m", 0], ["0", 0], ["ans", 0], ["0", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["bisect", 0], ["collections", 0], ["copy", 0], ["heapq", 0], ["itertools", 0], ["math", 0], ["numpy", 0], ["string", 0], ["from", 0], ["operator", 0], ["import", 0], ["itemgetter", 0], ["import", 0], ["sys", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["def", 0], ["s", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["ls", 0], ["return", 0], ["list", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["n", 0], ["m", 0], ["li", 0], ["a", 0], ["li", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["m", 0], ["0", 0], ["3", 0], ["for", 0], ["in", 0], ["range", 0], ["8", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["4", 0], ["a", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["c", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["x", 0], ["0", 0], ["c", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["1", 0], ["x", 0], ["1", 0], ["c", 0], ["1", 0], ["2", 0], ["1", 0], ["x", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["m", 0], ["c", 0], ["2", 0], ["j", 0], ["a", 0], ["i", 0], ["j", 0], ["m", 0], ["c", 0], ["2", 0], ["1", 0], ["j", 0], ["a", 0], ["n", 0], ["1", 0], ["i", 0], ["j", 0], ["print", 0], ["max", 0], ["abs", 0], ["x", 0], ["0", 0], ["abs", 0], ["x", 0], ["1", 0], ["abs", 0], ["x", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["m", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["8", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["mi", 0], ["return", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["li2", 0], ["n", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["dp2", 0], ["ini", 0], ["i", 0], ["j", 0], ["return", 0], ["ini", 0], ["i", 0], ["for", 0], ["in", 0], ["range", 0], ["j", 0], ["import", 0], ["bisect", 0], ["bisect", 0], ["bisect", 0], ["left", 0], ["b", 0], ["a", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["d", 0], ["defaultdict", 0], ["int", 0], ["d", 0], ["key", 0], ["value", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["a", 0], ["counter", 0], ["a", 0], ["most", 0], ["common", 0], ["from", 0], ["itertools", 0], ["import", 0], ["accumulate", 0], ["list", 0], ["accumulate", 0], ["a", 0], ["n", 0], ["m", 0], ["mi", 0], ["xyz", 0], ["li2", 0], ["n", 0], ["sign", 0], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 5757], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["a", 0], ["sum", 0], ["xyz", 0], ["x", 0], ["k", 0], ["sign", 0], ["i", 0], ["k", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["3", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["sorted", 0], ["a", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["a", 0], ["m", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["d", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["z", 0], ["c", 0], ["j", 0], ["if", 0], ["i", 0], ["0", 0], ["1", 0], ["d", 0], ["j", 0], ["x", 0], ["else", 0], ["d", 0], ["j", 0], ["x", 0], ["if", 0], ["i", 0], ["1", 0], ["1", 0], ["d", 0], ["j", 0], ["y", 0], ["else", 0], ["d", 0], ["j", 0], ["y", 0], ["if", 0], ["i", 0], ["2", 0], ["1", 0], ["d", 0], ["j", 0], ["z", 0], ["else", 0], ["d", 0], ["j", 0], ["z", 0], ["d", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["res", 0], ["max", 0], ["res", 0], ["sum", 0], ["d", 0], ["m", 0], ["print", 0], ["res", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["info", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["3", 0], ["now", 0], ["ans", 0], ["0", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["d", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["d", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["now", 0], ["ans", 0], ["k", 0], ["d", 0], ["info", 0], ["k", 0], ["j", 0], ["now", 0], ["ans", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sum", 0], ["now", 0], ["ans", 0], ["m", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["from", 0], ["itertools", 0], ["import", 0], ["product", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["cake", 0], ["tuple", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["j", 0], ["k", 0], ["in", 0], ["product", 0], ["1", 0], ["1", 0], ["repeat", 0], ["3", 0], ["data", 0], ["i", 0], ["x", 0], ["j", 0], ["y", 0], ["k", 0], ["z", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.005235602094240838, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0005241345877564655, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.010734929810074319, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0017442354431453442, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0019289060347203086, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0005235602094240838, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.005229837599779796, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0017432791999265989, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
