{"instance": {"input": "\nQUESTION:\n=====Problem Statement=====\nLet's learn about list comprehensions! You are given three integers x, y and z representing the dimensions of a cuboid along with an integer n. Print a list of all possible coordinates given by (i,j,k) on a 3D grid where the sum of i+j+k is not equal to n. Here, 0≤i≤x;0≤j≤y;0≤k≤z. Please use list comprehensions rather than multiple loops, as a learning exercise.\n\n=====Example=====\nx = 1\ny = 1\nz = 2\nn = 3\nAll permutations of [i,j,k] are:\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\nPrint an array of the elements that do not sum to n = 3\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2]]\n\n=====Input Format=====\nFour integers x, y, z and n, each on a separate line.\n\n=====Constraints=====\nPrint the list in lexographic increasing order\nif __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["# Enter your code here. Read input from STDIN. Print output to STDOUT\nx=int(input())\ny=int(input())\nz=int(input())\nn=int(input())\nprint([ [i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k != n ])\n", "def __starting_point():\n\tx = int(input())\n\ty = int(input())\n\tz = int(input())\n\tn = int(input())\n\t\n\tprint([ [ i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if ( (i + j + k) != n )])\n\n__starting_point()\n"], "id": "id5878"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5878", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["problem", 0], ["statement", 0], ["let", 2], ["s", 1], ["learn", 1], ["about", 1], ["list", 1], ["comprehensions", 1], ["you", 1], ["are", 1], ["given", 1], ["three", 1], ["integers", 1], ["x", 1], ["y", 1], ["and", 1], ["z", 0], ["representing", 0], ["the", 0], ["dimensions", 0], ["of", 0], ["a", 0], ["cuboid", 0], ["along", 0], ["with", 0], ["an", 0], ["integer", 0], ["n", 0], ["print", 1], ["a", 1], ["list", 1], ["of", 1], ["all", 1], ["possible", 1], ["coordinates", 1], ["given", 1], ["by", 1], ["i", 1], ["j", 1], ["k", 1], ["on", 1], ["a", 1], ["3d", 1], ["grid", 1], ["where", 0], ["the", 0], ["sum", 0], ["of", 0], ["i", 0], ["j", 0], ["k", 0], ["is", 0], ["not", 0], ["equal", 0], ["to", 0], ["n", 0], ["here", 0], ["0≤i≤x", 0], ["0≤j≤y", 0], ["0≤k≤z", 0], ["please", 0], ["use", 0], ["list", 0], ["comprehensions", 0], ["rather", 0], ["than", 0], ["multiple", 0], ["loops", 0], ["as", 0], ["a", 0], ["learning", 0], ["exercise", 0], ["example", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["z", 0], ["2", 0], ["n", 0], ["3", 0], ["all", 0], ["permutations", 0], ["of", 0], ["i", 0], ["j", 0], ["k", 0], ["are", 0], ["0", 192], ["0", 72], ["0", 56], ["0", 61], ["0", 53], ["1", 52], ["0", 6], ["0", 6], ["2", 6], ["0", 17], ["1", 15], ["0", 15], ["0", 14], ["1", 16], ["1", 8], ["0", 15], ["1", 9], ["2", 54], ["1", 82], ["0", 73], ["0", 73], ["1", 67], ["0", 46], ["1", 46], ["1", 0], ["0", 0], ["2", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["2", 0], ["print", 0], ["an", 0], ["array", 0], ["of", 0], ["the", 0], ["elements", 0], ["that", 0], ["do", 0], ["not", 0], ["sum", 0], ["to", 0], ["n", 0], ["3", 9], ["0", 192], ["0", 72], ["0", 56], ["0", 2], ["0", 1], ["1", 4], ["0", 3], ["0", 3], ["2", 3], ["0", 946], ["1", 945], ["0", 997], ["0", 515], ["1", 484], ["1", 2], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["2", 0], ["input", 0], ["format", 0], ["four", 0], ["integers", 0], ["x", 0], ["y", 0], ["z", 0], ["and", 0], ["n", 0], ["each", 0], ["on", 0], ["a", 0], ["separate", 0], ["line", 0], ["constraints", 0], ["print", 0], ["the", 0], ["list", 0], ["in", 0], ["lexographic", 0], ["increasing", 0], ["order", 0], ["if", 1], ["name", 1], ["main", 1], ["x", 0], ["int", 0], ["input", 0], ["y", 0], ["int", 0], ["input", 0], ["z", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.365, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.18621007940081963, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6273584905660378, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.46008186153839603, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.23, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.18298611111111118, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5990566037735849, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4596436058700207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 2], ["enter", 0], ["your", 0], ["code", 0], ["here", 0], ["read", 0], ["input", 0], ["from", 0], ["stdin", 0], ["print", 0], ["output", 0], ["to", 0], ["stdout", 0], ["x", 0], ["int", 0], ["input", 0], ["y", 0], ["int", 0], ["input", 0], ["z", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["i", 0], ["j", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["y", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["z", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["k", 0], ["n", 0], ["def", 0], ["starting", 0], ["point", 0], ["x", 0], ["int", 0], ["input", 0], ["y", 0], ["int", 0], ["input", 0], ["z", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["i", 0], ["j", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["y", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["z", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["k", 0], ["n", 0], ["starting", 0], ["point", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.011764705882352941, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0058823529411764705, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.13402061855670103, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.06701030927835051, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.011764705882352941, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0058823529411764705, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.13402061855670103, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.06701030927835051, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nSome time ago Mister B detected a strange signal from the space, which he started to study.\n\nAfter some transformation the signal turned out to be a permutation p of length n or its cyclic shift. For the further investigation Mister B need some basis, that's why he decided to choose cyclic shift of this permutation which has the minimum possible deviation.\n\nLet's define the deviation of a permutation p as $\\sum_{i = 1}^{i = n}|p [ i ] - i|$.\n\nFind a cyclic shift of permutation p with minimum possible deviation. If there are multiple solutions, print any of them.\n\nLet's denote id k (0 ≤ k < n) of a cyclic shift of permutation p as the number of right shifts needed to reach this shift, for example:\n\n  k = 0: shift p_1, p_2, ... p_{n},  k = 1: shift p_{n}, p_1, ... p_{n} - 1,  ...,  k = n - 1: shift p_2, p_3, ... p_{n}, p_1. \n\n\n-----Input-----\n\nFirst line contains single integer n (2 ≤ n ≤ 10^6) — the length of the permutation.\n\nThe second line contains n space-separated integers p_1, p_2, ..., p_{n} (1 ≤ p_{i} ≤ n) — the elements of the permutation. It is guaranteed that all elements are distinct.\n\n\n-----Output-----\n\nPrint two integers: the minimum deviation of cyclic shifts of permutation p and the id of such shift. If there are multiple solutions, print any of them.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n0 0\n\nInput\n3\n2 3 1\n\nOutput\n0 1\n\nInput\n3\n3 2 1\n\nOutput\n2 1\n\n\n\n-----Note-----\n\nIn the first sample test the given permutation p is the identity permutation, that's why its deviation equals to 0, the shift id equals to 0 as well.\n\nIn the second sample test the deviation of p equals to 4, the deviation of the 1-st cyclic shift (1, 2, 3) equals to 0, the deviation of the 2-nd cyclic shift (3, 1, 2) equals to 4, the optimal is the 1-st cyclic shift.\n\nIn the third sample test the deviation of p equals to 4, the deviation of the 1-st cyclic shift (1, 3, 2) equals to 2, the deviation of the 2-nd cyclic shift (2, 1, 3) also equals to 2, so the optimal are both 1-st and 2-nd cyclic shifts.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["def main():\n\tn=int(input())\n\tA=list(map(int,input().strip().split(' ')))\n\n\tdef brutal(A):\n\t\tn=len(A)\n\t\tfor i in range(n):\n\t\t\ttemp=0\n\t\t\tpos=0\n\t\t\tneg=0\n\t\t\tfor j in range(n):\n\t\t\t\ttemp+=abs(A[j]-(j+i)%n)\n\t\t\t\tif A[j]-(j+i)%n>0:\n\t\t\t\t\tpos+=1\n\t\t\t\telse:\n\t\t\t\t\tneg+=1\n\n\t\t\tprint(temp,i,pos,neg,'ans,shift,+ve,-ve')    \n\n\n\tfor i in range(len(A)):\n\t\tA[i]-=1\n\n\tans=0\n\tpos=0\n\tneg=0\n\tchange=[0 for i in range(len(A))]\n\n\tfor i in range(len(A)):\n\t\tans+=abs(A[i]-i)\n\t\tif A[i]-i>0:\n\t\t\tpos+=1\n\t\telse:\n\t\t\tneg+=1\n\t\tif A[i]-i>0:\n\t\t\tchange[i]=A[i]-i\n\t\telif A[i]==i:\n\t\t\tchange[i]=0\n\t\telse:\n\t\t\tif A[i]!=0:\n\t\t\t\tchange[i]=A[i]+n-i\n\t\t\telse:\n\t\t\t\tchange[i]=0\n\tMIN=ans\n\tindex=0\n\t#print(ans)\n\tcollect=[[] for i in range(n)]\n\tfor x in range(len(change)):\n\t\tcollect[change[x]]+=[x]\n\t#print(collect)\n\n\t#print(ans,pos,neg)    \n\tfor s in range(1,n):  \n\t\tans-=abs(A[n-s]-n+1)\n\t\tans+=abs(A[n-s]-0)\n\t\tneg-=1\n\n\t\tans-=pos\n\t\tans+=neg\n\t\tif A[n-s]>0:\n\t\t\tpos+=1\n\t\telse:\n\t\t\tneg+=1\n\n\n\t\tpos-=len(collect[s])\n\t\tneg+=len(collect[s])\n\t\t#print(ans,pos,neg)\n\t\tif ans<MIN:\n\t\t\tMIN=ans\n\t\t\tindex=s\n\tprint(MIN,index)        \n\t#brutal(A)        \nmain() \n", "n = int(input())\na = list(map(int, input().split()))\nt = [0] * 2 * n\ns = 0\nfor i in range(n):\n\td = a[i] - i - 1\n\ts += abs(d)\n\tif d > 0: t[d] += 1\np = sum(t)\nr = (s, 0)\nfor i in range(1, n):\n\td = a[n - i] - 1\n\ts += d - p << 1\n\tt[d + i] += d > 0\n\tp += (d > 0) - t[i]\n\tif s < r[0]: r = (s, i)\nprint(*r)\n"], "id": "id9763"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9763", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["some", 2], ["time", 2], ["ago", 2], ["mister", 2], ["b", 2], ["detected", 2], ["a", 2], ["strange", 2], ["signal", 2], ["from", 2], ["the", 2], ["space", 2], ["which", 2], ["he", 2], ["started", 2], ["to", 2], ["study", 2], ["after", 2], ["some", 2], ["transformation", 2], ["the", 2], ["signal", 2], ["turned", 2], ["out", 2], ["to", 2], ["be", 2], ["a", 2], ["permutation", 2], ["p", 2], ["of", 2], ["length", 2], ["n", 2], ["or", 2], ["its", 2], ["cyclic", 2], ["shift", 2], ["for", 2], ["the", 2], ["further", 2], ["investigation", 2], ["mister", 2], ["b", 2], ["need", 2], ["some", 2], ["basis", 2], ["that", 2], ["s", 2], ["why", 2], ["he", 2], ["decided", 2], ["to", 2], ["choose", 2], ["cyclic", 2], ["shift", 2], ["of", 2], ["this", 2], ["permutation", 2], ["which", 2], ["has", 2], ["the", 2], ["minimum", 2], ["possible", 0], ["deviation", 0], ["let", 0], ["s", 0], ["define", 0], ["the", 0], ["deviation", 0], ["of", 0], ["a", 0], ["permutation", 0], ["p", 0], ["as", 0], ["sum", 0], ["i", 0], ["1", 0], ["i", 0], ["n", 0], ["p", 0], ["i", 0], ["i", 0], ["find", 2], ["a", 2], ["cyclic", 2], ["shift", 2], ["of", 2], ["permutation", 2], ["p", 2], ["with", 2], ["minimum", 2], ["possible", 2], ["deviation", 2], ["if", 2], ["there", 2], ["are", 2], ["multiple", 2], ["solutions", 2], ["print", 2], ["any", 2], ["of", 2], ["them", 2], ["let", 2], ["s", 2], ["denote", 2], ["id", 2], ["k", 2], ["0", 2], ["≤", 2], ["k", 2], ["n", 2], ["of", 2], ["a", 2], ["cyclic", 2], ["shift", 2], ["of", 2], ["permutation", 2], ["p", 2], ["as", 2], ["the", 2], ["number", 2], ["of", 2], ["right", 0], ["shifts", 0], ["needed", 0], ["to", 0], ["reach", 0], ["this", 0], ["shift", 0], ["for", 0], ["example", 0], ["k", 0], ["0", 0], ["shift", 0], ["p", 0], ["1", 0], ["p", 0], ["2", 0], ["p", 0], ["n", 0], ["k", 0], ["1", 0], ["shift", 0], ["p", 0], ["n", 0], ["p", 0], ["1", 0], ["p", 0], ["n", 0], ["1", 0], ["k", 0], ["n", 0], ["1", 0], ["shift", 0], ["p", 0], ["2", 0], ["p", 0], ["3", 0], ["p", 0], ["n", 0], ["p", 0], ["1", 0], ["input", 0], ["first", 0], ["line", 0], ["contains", 0], ["single", 0], ["integer", 0], ["n", 0], ["2", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["6", 0], ["—", 2], ["the", 2], ["length", 0], ["of", 0], ["the", 0], ["permutation", 0], ["the", 2], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["space", 0], ["separated", 0], ["integers", 0], ["p", 0], ["1", 0], ["p", 0], ["2", 0], ["p", 0], ["n", 0], ["1", 0], ["≤", 0], ["p", 0], ["i", 0], ["≤", 2], ["n", 2], ["—", 2], ["the", 2], ["elements", 0], ["of", 0], ["the", 0], ["permutation", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["all", 0], ["elements", 0], ["are", 0], ["distinct", 0], ["output", 0], ["print", 2], ["two", 2], ["integers", 2], ["the", 2], ["minimum", 2], ["deviation", 2], ["of", 2], ["cyclic", 2], ["shifts", 2], ["of", 2], ["permutation", 2], ["p", 2], ["and", 2], ["the", 2], ["id", 2], ["of", 0], ["such", 0], ["shift", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["solutions", 0], ["print", 0], ["any", 0], ["of", 0], ["them", 0], ["examples", 0], ["input", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["output", 0], ["0", 0], ["0", 0], ["input", 0], ["3", 0], ["2", 0], ["3", 0], ["1", 0], ["output", 0], ["0", 0], ["1", 0], ["input", 0], ["3", 0], ["3", 0], ["2", 0], ["1", 0], ["output", 0], ["2", 0], ["1", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["sample", 2], ["test", 2], ["the", 2], ["given", 2], ["permutation", 2], ["p", 2], ["is", 2], ["the", 2], ["identity", 2], ["permutation", 2], ["that", 2], ["s", 2], ["why", 2], ["its", 2], ["deviation", 2], ["equals", 2], ["to", 2], ["0", 2], ["the", 2], ["shift", 2], ["id", 2], ["equals", 2], ["to", 2], ["0", 2], ["as", 2], ["well", 2], ["in", 2], ["the", 2], ["second", 2], ["sample", 4], ["test", 4], ["the", 4], ["deviation", 4], ["of", 4], ["p", 4], ["equals", 2], ["to", 2], ["4", 2], ["the", 2], ["deviation", 2], ["of", 2], ["the", 2], ["1", 2], ["st", 2], ["cyclic", 2], ["shift", 2], ["1", 2], ["2", 2], ["3", 2], ["equals", 2], ["to", 2], ["0", 2], ["the", 2], ["deviation", 2], ["of", 2], ["the", 2], ["2", 2], ["nd", 2], ["cyclic", 2], ["shift", 2], ["3", 2], ["1", 2], ["2", 2], ["equals", 2], ["to", 2], ["4", 2], ["the", 2], ["optimal", 2], ["is", 2], ["the", 2], ["1", 2], ["st", 2], ["cyclic", 2], ["shift", 2], ["in", 2], ["the", 2], ["third", 2], ["sample", 4], ["test", 4], ["the", 4], ["deviation", 4], ["of", 4], ["p", 4], ["equals", 2], ["to", 2], ["4", 2], ["the", 2], ["deviation", 2], ["of", 2], ["the", 2], ["1", 2], ["st", 2], ["cyclic", 2], ["shift", 2], ["1", 2], ["3", 2], ["2", 2], ["equals", 2], ["to", 2], ["2", 2], ["the", 2], ["deviation", 2], ["of", 2], ["the", 2], ["2", 2], ["nd", 2], ["cyclic", 2], ["shift", 2], ["2", 2], ["1", 2], ["3", 2], ["also", 2], ["equals", 2], ["to", 2], ["2", 2], ["so", 0], ["the", 0], ["optimal", 0], ["are", 0], ["both", 0], ["1", 0], ["st", 0], ["and", 0], ["2", 0], ["nd", 0], ["cyclic", 0], ["shifts", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6070528967254408, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2959697732997481, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7750611246943765, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.38753056234718825, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6070528967254408, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2959697732997481, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7750611246943765, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.38753056234718825, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["def", 0], ["brutal", 0], ["a", 0], ["n", 0], ["len", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["temp", 0], ["0", 0], ["pos", 0], ["0", 0], ["neg", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["temp", 0], ["abs", 0], ["a", 0], ["j", 0], ["j", 0], ["i", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["j", 0], ["i", 0], ["n", 0], ["0", 0], ["pos", 0], ["1", 0], ["else", 0], ["neg", 0], ["1", 0], ["print", 0], ["temp", 0], ["i", 0], ["pos", 0], ["neg", 0], ["ans", 0], ["shift", 0], ["ve", 0], ["ve", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["a", 0], ["i", 0], ["1", 0], ["ans", 0], ["0", 0], ["pos", 0], ["0", 0], ["neg", 0], ["0", 0], ["change", 0], ["0", 4], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["ans", 0], ["abs", 0], ["a", 0], ["i", 0], ["i", 0], ["if", 0], ["a", 0], ["i", 0], ["i", 0], ["0", 0], ["pos", 0], ["1", 0], ["else", 0], ["neg", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["i", 0], ["0", 0], ["change", 0], ["i", 0], ["a", 0], ["i", 0], ["i", 0], ["elif", 0], ["a", 0], ["i", 0], ["i", 0], ["change", 0], ["i", 0], ["0", 0], ["else", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["change", 0], ["i", 0], ["a", 0], ["i", 0], ["n", 0], ["i", 0], ["else", 0], ["change", 0], ["i", 0], ["0", 0], ["min", 0], ["ans", 0], ["index", 0], ["0", 0], ["print", 0], ["ans", 0], ["collect", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["len", 0], ["change", 0], ["collect", 0], ["change", 0], ["x", 0], ["x", 0], ["print", 0], ["collect", 0], ["print", 0], ["ans", 0], ["pos", 0], ["neg", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["ans", 0], ["abs", 0], ["a", 0], ["n", 0], ["s", 0], ["n", 0], ["1", 0], ["ans", 0], ["abs", 0], ["a", 0], ["n", 0], ["s", 0], ["0", 0], ["neg", 0], ["1", 0], ["ans", 0], ["pos", 0], ["ans", 0], ["neg", 0], ["if", 0], ["a", 0], ["n", 0], ["s", 0], ["0", 0], ["pos", 0], ["1", 0], ["else", 0], ["neg", 0], ["1", 0], ["pos", 0], ["len", 0], ["collect", 0], ["s", 0], ["neg", 0], ["len", 0], ["collect", 0], ["s", 0], ["print", 0], ["ans", 0], ["pos", 0], ["neg", 0], ["if", 0], ["ans", 0], ["min", 0], ["min", 0], ["ans", 0], ["index", 0], ["s", 0], ["print", 0], ["min", 0], ["index", 0], ["brutal", 0], ["a", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["0", 0], ["2", 0], ["n", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["s", 0], ["abs", 0], ["d", 0], ["if", 0], ["d", 0], ["0", 0], ["t", 0], ["d", 0], ["1", 0], ["p", 0], ["sum", 0], ["t", 0], ["r", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["d", 0], ["a", 0], ["n", 0], ["i", 0], ["1", 0], ["s", 0], ["d", 0], ["p", 0], ["1", 0], ["t", 0], ["d", 0], ["i", 0], ["d", 0], ["0", 0], ["p", 0], ["d", 0], ["0", 0], ["t", 0], ["i", 0], ["if", 0], ["s", 0], ["r", 0], ["0", 0], ["r", 0], ["s", 0], ["i", 0], ["print", 0], ["r", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0034602076124567475, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0008650519031141869, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.04318936877076412, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.01079734219269103, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0034602076124567475, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0008650519031141869, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.04318936877076412, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.01079734219269103, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given a permutation p of numbers 1, 2, ..., n. Let's define f(p) as the following sum:$f(p) = \\sum_{i = 1}^{n} \\sum_{j = i}^{n} \\operatorname{min}(p_{i}, p_{i + 1}, \\ldots p_{j})$\n\nFind the lexicographically m-th permutation of length n in the set of permutations having the maximum possible value of f(p).\n\n\n-----Input-----\n\nThe single line of input contains two integers n and m (1 ≤ m ≤ cnt_{n}), where cnt_{n} is the number of permutations of length n with maximum possible value of f(p).\n\nThe problem consists of two subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.  In subproblem B1 (3 points), the constraint 1 ≤ n ≤ 8 will hold.  In subproblem B2 (4 points), the constraint 1 ≤ n ≤ 50 will hold. \n\n\n-----Output-----\n\nOutput n number forming the required permutation.\n\n\n-----Examples-----\nInput\n2 2\n\nOutput\n2 1 \n\nInput\n3 2\n\nOutput\n1 3 2 \n\n\n\n-----Note-----\n\nIn the first example, both permutations of numbers {1, 2} yield maximum possible f(p) which is equal to 4. Among them, (2, 1) comes second in lexicographical order.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["\"\"\"\nCodeforces Rockethon Contest Problem B\n\nAuthor  : chaotic_iak\nLanguage: Python 3.4.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef main():\n\tn,m = read()\n\tm -= 1\n\tperm = [0]*n\n\tlf = 0\n\trt = n-1\n\tfor i in range(n):\n\t\tif m >= 2**(n-i-2):\n\t\t\tperm[rt] = i+1\n\t\t\trt -= 1\n\t\telse:\n\t\t\tperm[lf] = i+1\n\t\t\tlf += 1\n\t\tm %= 2**(n-i-2)\n\twrite(perm)\n\n\n\n#################################################### HELPERS\n\n\n\ndef read(mode=2):\n\t# 0: String\n\t# 1: List of strings\n\t# 2: List of integers\n\tinputs = input().strip()\n\tif mode == 0: return inputs\n\tif mode == 1: return inputs.split()\n\tif mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n\tif s is None: s = \"\"\n\tif isinstance(s, list): s = \" \".join(map(str, s))\n\ts = str(s)\n\tprint(s, end=\"\")\n\nwrite(main())\n", "import itertools\nimport collections\n\n\nf = lambda p: sum(itertools.starmap(lambda i, j: min(p[i: j + 1]), itertools.combinations_with_replacement(list(range(n)), 2)))\n\nn, m = list(map(int, str.split(input())))\nmem = collections.defaultdict(list)\nfor p in itertools.permutations(list(range(1, n + 1)), n):\n\n\tmem[f(p)].append(p)\n\nprint(str.join(\" \", list(map(str, mem[max(mem)][m - 1]))))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: kanari\n# @Date:   2015-02-08 01:11:21\n# @Last Modified by:   kanari\n# @Last Modified time: 2015-02-08 01:29:15\n[n, m] = map(int, input().split())\na = [0 for i in range(0, n + 1)]\nfac = [1]\nfor i in range(1, n + 1):\n#   fac.append(fac[i - 1] * i)\n\tfac.append(fac[i - 1] * 2)\n\ndef dfs(x, l, r, m):\n\tif l == r:\n\t\ta[l] = x\n\t\treturn\n\telif m <= fac[n - x - 1]:\n\t\ta[l] = x\n\t\tdfs(x + 1, l + 1, r, m)\n\telse:\n\t\ta[r] = x\n\t\tdfs(x + 1, l, r - 1, m - fac[n - x - 1])\n\ndfs(1, 1, n, m)\nfor i in range(1, n + 1):\n\tprint(a[i], end = '')\n\tif i == n:\n\t\tprint('\\n', end = '')\n\telse:\n\t\tprint(' ', end = '')\n", "arc = []\ndef sv(a,b,c,n,v):\n\tif n < c//2:\n\t\tarc[a] = v\n\t\tif b-a>1: sv(a+1,b,c//2,n,v+1)\n\telse:\n\t\tarc[b-1] = v\n\t\tif b-a>1: sv(a,b-1,c//2,n-c//2,v+1)\n\nn, m = list(map(int, input().split()))\narc = [0]*n\nssc = 1<<(n-1)\nsv(0, n, ssc, m-1, 1)\nprint(' '.join(map(str, arc)))\n", "import itertools\n\ndef factorial(n):\n\tx = 1\n\tfor i in range(2,n+1):\n\t\tx *= i\n\treturn x\n\ndef haha(t):\n\tl = []\n\tfor i in range(len(t)):\n\t\tl.append(int(t[i]))\n\tp = 0\n\tfor i in range(len(l)):\n\t\tfor j in range(i,len(l)):\n\t\t\tp += min(l[i:j+1])\n\treturn [p,l]\n\t\t\t\n\nn,m = list(map(int,input().split()))\ns = ''\nfor i in range(1,n+1):\n\ts += str(i)\nl = [1,4,10,20,35,56,84,120]\nx = l[n-1]\nc = 0\nasdf = list(itertools.permutations(s))\nfor i in range(factorial(n)):\n\ty = haha(asdf[i])\n\tif y[0] == x:\n\t\tc += 1\n\t\tif c == m:\n\t\t\ty = y[1]\n\t\t\tfor j in range(len(y)):\n\t\t\t\ty[j] = str(y[j])\n\t\t\tprint(' '.join(y))\n\t\t\tbreak\n", "from itertools import *\nmaxans = 0\nposs = []\ndef getsum(perm):\n\tnonlocal maxans, poss\n\tans = 0\n\tn = len(perm)\n\th = [0] * n\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tans += min(perm[i:j + 1])\n#            for k in range(i, j + 1):\n#                h[k] += 1\n\tif ans > maxans:\n\t\tmaxans = ans\n\t\tposs = [perm]\n\telif ans == maxans:\n\t\tposs.append(perm)\n\treturn ans\nn, m = list(map(int, input().split()))\nlst = list(range(1, n + 1))\nperms = list(permutations(lst))\nfor i in range(len(perms)):\n\tgetsum(perms[i])\n#print(maxans)\nprint(' '.join(map(str, poss[m - 1])))\n\n", "from itertools import permutations\n\ndef f(a):\n\tans = 0\n\tfor i in range(n):\n\t\tcur = a[i]\n\t\tfor j in range(i, n):\n\t\t\tcur = min(cur, a[j])\n\t\t\tans += cur\n\treturn ans\n\nn, m = list(map(int, input().split()))\nans = max(list(map(f, permutations(list(range(1, n + 1))))))\nfor a in permutations(list(range(1, n + 1))):\n\tm -= f(a) == ans\n\tif not m:\n\t\tprint(*a)\n\t\tbreak\n", "__author__ = 'yushchenko'\n\ndef countf(f):\n\tsum = 0\n\tfor i in range(len(f)):\n\t\tfor j in range(len(f))[i:]:\n\t\t\t# print(i, j)\n\t\t\t# print(f[i:j + 1])\n\t\t\tsum += min(f[i:j + 1])\n\treturn sum\n\nimport itertools\nn,m = input().split()\nn = int(n)\nm = int(m)\nmaxf = 0;\ncount = 0;\nsave = ()\nfor x in itertools.permutations(list(range(n + 1))[1:]):\n\tt = countf(x)\n\tif t > maxf:\n\t\tmaxf = t\n\t\tcount = 0\n\tif t == maxf:\n\t\t# print (x , '-' , t)\n\t\tcount = count + 1\n\t\tif count == m:\n\t\t\tsave = x\nprint(' '.join(str(e) for e in save))\n\n\n\n", "3\n\ndef gen(n, start, t):\n\tif n == 1:\n\t\treturn [start]\n\tif t <= 2 ** (n - 2):\n\t\treturn [start] + gen(n - 1, start + 1, t)\n\telse:\n\t\treturn gen(n - 1, start + 1, t - 2 ** (n - 2)) + [start]\n\n\nn, t = list(map(int, input().split()))\nprint(\" \".join(map(str, gen(n, 1, t))))\n", "n, m = map(int, input().split())\ns = 1\nc = n - 1\narr = [0] * n\ni = 0\nwhile i <= c:\n\tr = 0\n\tj = s\n\twhile j <= n and r < m:\n\t\tif j < n:\n\t\t\tr += 2 ** (n - j - 1)\n\t\tj += 1\n\t#print(s, j, r, m)\n\tif j > s and j != n + 1:\n\t\tr -= 2 ** (n - j)\n\tm -= r\n\tj -= 1\n\tarr[i] = j\n\twhile s < j:\n\t\tarr[c] = s\n\t\tc -= 1\n\t\ts += 1\n\ts += 1\n\ti += 1\nfor i in arr:\n\tprint(i, end = ' ')\n", "import itertools\n\nn, m = list(map(int, input().split()))\nA = [i + 1 for i in range(n)]\n\nperms = list(itertools.permutations(A))\nd = []\nfor x in perms:\n\ts = 0\n\tfor i in range(n):\n\t\tfor j in range(i + 1, n):\n\t\t\ts += min(x[i:(j + 1)])\n\td.append((s, x))\nmx = max(d)[0]\nans = []\nfor x in d:\n\tif x[0] == mx:\n\t\tans.append(x[1])\nans.sort()\nprint(' '.join(str(x) for x in ans[m - 1]))\n", "from itertools import permutations\n\ndef f(perm):\n\tres = 0\n\tfor i in range(len(perm)):\n\t\tfor j in range(i, len(perm)):\n\t\t\tres += min(perm[i:j + 1])\n\treturn res\n\nn, m = list(map(int, input().split()))\nres = f(list(range(1, n + 1)))\n\ni = 0\nfor p in permutations(list(range(1, n + 1))):\n\tif f(p) == res:\n\t\ti += 1\n\t\tif i == m:\n\t\t\tprint(\" \".join(list(map(str, p))))\n\t\t\tbreak\n\n", "import sys\nn, k = [int(i) for i in input().split()]\nm = 0\na = [True for i in range(n+1)]\nl = [0 for i in range(n+1)]\nbig = 0\nfor x in range(1,n+1):\n\tfor y in range(x,n+1):\n\t\tbig += x\ndef r(i):\n\tif i > n:\n\t\tf = 0\n\t\tfor x in range(1,n+1):\n\t\t\tu = l[x]\n\t\t\tfor y in range(x,n+1):\n\t\t\t\tu = min(u, l[y])\n\t\t\t\tf += u\n\t\tnonlocal m\n\t\tif f == big:\n\t\t\tm += 1\n\t\tif m == k:\n\t\t\tfor j in range(1,n+1):\n\t\t\t\tprint(l[j], end = ' ')\n\t\t\treturn\n\t\treturn 0\n\tfor j in range(1,n+1):\n\t\tif a[j]:\n\t\t\ta[j] = False\n\t\t\tl[i] = j\n\t\t\tr(i+1)\n\t\t\ta[j] = True\n\treturn 0\n\nr(1)\n", "def main():\n\tfrom itertools import permutations\n\n\tn, m = [int(i) for i in input().split()]\n\t\n\tmaxS = 0\n\tfor p in permutations(list(range(1, n + 1))):\n\t\tS = 0\n\t\tfor i in range(n):\n\t\t\tt = float(\"inf\")\n\t\t\tfor j in range(i, n):\n\t\t\t\tt = min(t, p[j])\n\t\t\t\tS += t\n\t\tmaxS = max(maxS, S)\n\t\n\tfor p in permutations(list(range(1, n + 1))):\n\t\tS = 0\n\t\tfor i in range(n):\n\t\t\tt = float(\"inf\")\n\t\t\tfor j in range(i, n):\n\t\t\t\tt = min(t, p[j])\n\t\t\t\tS += t\n\t\tif S == maxS:\n\t\t\tm -= 1\n\t\t\tif m == 0:\n\t\t\t\tprint(*p)\n\t\t\t\tbreak\n\n\n\nmain()\n", "\nn, m = map(int, input().split())\n\ndef gen(n, m, now):\n\tif n == 1:\n\t\treturn [now]\n\tif m <= 2 ** (n - 2):\n\t\treturn [now] + gen(n - 1, m, now + 1)\n\telse:\n\t\treturn gen(n - 1, m - 2 ** (n - 2), now + 1) + [now]\n\np = 2 ** (n - 2)\n\nprint(' '.join(map(str, gen(n, m, 1))))\n", "inp = input().split(' ')\nn = int(inp[0])\nm = bin(int(inp[1])-1)[2:]\nlenbin = n-1\nwhile len(m) < lenbin:\n\tm = '0' + m\nstart = []\nend = []\nfor x in range(n-1):\n\tif m[x] == '0':\n\t\tstart = start + [x+1]\n\telse:\n\t\tend = [x+1] + end\nfinal = start + [n] + end\nfor x in final:\n\tprint(x, end = ' ')\n", "#file = open(\"\", 'r')\n#f = lambda:file.readline()\nf= lambda: input()\n\nn,m = list(map(int, f().split()))\n\nmost = 0\n\np = []\n\nfor i in range(1, n+1):\n\tp.append(i)\n\tmost += i * (n+1-i)\n\ndef next_perm():\n\ti = len(p)-1\n\twhile i >0 and p[i-1] >= p[i]:\n\t\ti-=1\n\n\tif i <= 0:\n\t\treturn False\n\n\tj = len(p)-1\n\n\twhile p[j]<= p[i-1]:\n\t\tj-= 1\n\n\tp[i-1],p[j] = p[j],p[i-1]\n\n\tj = len(p)-1\n\twhile(i < j):\n\t\tp[i],p[j] = p[j],p[i]\n\t\ti += 1\n\t\tj -= 1\n\n\treturn True\n\ndef fp():\n\ts = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(i, n+1):\n\t\t\ts += min(p[i-1:j])\n\treturn s\n\nwhile(m > 0):\n\tif (fp() == most):\n\t\tm-= 1\n\t\tif m == 0:\n\t\t\tbreak\n\n\tnext_perm()\n\nprint(\" \".join(str(e) for e in p))\n\t\t\n", "from itertools import permutations\n\ndef f(l):\n\tn = len(l)\n\tres = 0\n\tfor i in range(n):\n\t\tfor j in range(i + 1, n + 1):\n\t\t\tres += min(l[i:j])\n\treturn res\n\nn, m = (int(x) for x in input().split())\nres = 0\nresl = []\nfor perm in permutations(list(range(1, n + 1))):\n\tcur = f(perm)\n#\tprint(perm, cur)\n\tif cur > res:\n\t\tres = cur\n\t\tresl = []\n\tif cur == res:\n\t\tresl.append(perm)\n#print(res)\nprint(' '.join(str(x) for x in resl[m - 1]))\n", "n,m = map(int, input().split())\na = [i for i in range(1,n+1)]\nused = [0] * (n+1)\nc = 0\nt = 0\n\ndef gen(ind):\n\tnonlocal c, t\n\tif t:\n\t\treturn\n\tif ind == n:\n\t\ts=0\n\t\tfor k in range(n):\n\t\t\tmi = a[k]\n\t\t\tfor d in range(k,n):\n\t\t\t\tif mi > a[d]:\n\t\t\t\t\tmi = a[d]\n\t\t\t\ts+=mi\n\t\tif s == ma:\n\t\t\tc+=1\n\t\t\tif c == m:\n\t\t\t\tprint(*a)\n\t\t\t\tt = 1\n\t\t\t\treturn\n\t\treturn\n\tfor i in range(1,n+1):\n\t\tif t:\n\t\t\treturn\n\t\tif not used[i]:\n\t\t\tused[i] = 1\n\t\t\ta[ind] = i\n\t\t\tgen(ind+1)\n\t\t\ta[ind] = 1\n\t\t\tused[i] = 0\n\treturn\n\nma = 0\nfor i in range(n-1,-1,-1):\n\tma+=(n-i)*a[i]\ngen(0)\n", "n, m = [int(x) for x in input().split()]\n\nbest = 0\nans = []\n\ndef foo(p):\n\tans = 0\n\tfor i in range(n):\n\t\tfor j in range(i,n):\n\t\t\tans += min(p[i:j+1])\n\treturn ans\n\ndef eval(p):\n\tnonlocal ans, best\n\tval = foo(p)\n\tif val > best:\n\t\tans = [p]\n\t\tbest = val\n\telif val == best:\n\t\tans.append(p)\n\ndef generate(l=[],remaining = list(range(1,n+1))):\n\tif not remaining:\n\t\teval(l)\n\telse:\n\t\tfor i, x in enumerate(remaining):\n\t\t\tgenerate(l+[x],remaining[:i] + remaining[i+1:])\n\ngenerate()\nprint(' '.join(str(x) for x in ans[m-1]))\n", "def rek(s,t):\n\tnonlocal q,n\n\tfor x in range(t+1,n+1):\n\t\ty=s[:n-x]+s[n-x:][::-1]\n\t\tq.append(y)\n\t\trek(y,x)\n\t\nn,m=map(int,input().split())\na=''.join(map(str,range(1,n+1)))\nq=[a]\nrek(a,1)\nq.sort()\nprint(' '.join(q[m-1]))\n", "sum1 = 0\ndef gen(used, pref, m, ans):\n\tif len(pref) == n:\n\t\tans.append(pref)\n\telse:\n\t\tfor i in range(1, n+ 1):\n\t\t\tif not used[i]:\n\t\t\t\tused[i] = True\n\t\t\t\tgen(used, pref + [i], m, ans)\n\t\t\t\tused[i] = False\n\t\t\t\n\t\t\t\nn, m = map(int, input().split())\nused = [False] * (n + 1)\nans = []\ngen(used, [], m, ans)\nmin1 = -1\nmm = -1\nsumm = [0] * len(ans)\nfor i in range(len(ans)):\n\tsum1 = 0\n\tfor z in range(n):\n\t\tfor j in range(z, n):\n\t\t\tsum1 += min(ans[i][z:j + 1])\n\tsumm[i] = sum1\n\tif sum1 >= min1:\n\t\tmin1 = sum1\n\t\tmm = i\nss = 0\ni = 0\nwhile ss <= m:\n\t#print(i, ss)\n\tif summ[i] < min1:\n\t\t\n\t\t#print(i, ss, 1)\n\t\ti += 1\n\telse:\n\t\tif summ[i] == min1:\n\t\t\tif ss == m - 1:\n\t\t\t\tbreak\n\t\t\t#print(i, ss, 2)\n\t\t\tss += 1\n\t\t\ti += 1            \n#print(i)\nprint(' '.join(map(str, ans[i])))\n", "n, m = map(int, input().split())\ns = 0\nflag = False\nk = 0\nmyset = set()\nflag1 = True\nfor j in range(n):\n\tif n in myset:\n\t\tfor i in range(n, 0, -1):\n\t\t\tif i not in myset:\n\t\t\t\tprint(i, end = ' ')\n\t\t\t\tflag1 = False\n\tif flag1 == False:\n\t\tbreak        \n\tflag = False\n\ts = 0\n\tfor i in range(n):\n\t\tif s < m <= s + 2**(n - i - 2 - k):\n\t\t\tprint(i + 1 + k, end = ' ')\n\t\t\tmyset.add(i + 1 + k)\n\t\t\tk = i + 1 + k\n\t\t\tflag = True\n\t\t\tbreak\n\t\ts += (2**(n - i - 2 - k))\n\tif flag == False:\n\t\tprint(n, end = ' ')\n\t\tmyset.add(n)\n\t\tk = n\n\tm -= s\n\t\t\t\n\t\t\t\n\t\n\n\t\t\t\n"], "id": "id8934"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8934", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["permutation", 0], ["p", 0], ["of", 0], ["numbers", 0], ["1", 0], ["2", 0], ["n", 0], ["let", 0], ["s", 0], ["define", 0], ["f", 0], ["p", 0], ["as", 0], ["the", 0], ["following", 0], ["sum", 0], ["f", 0], ["p", 0], ["sum", 0], ["i", 0], ["1", 0], ["n", 0], ["sum", 0], ["j", 0], ["i", 0], ["n", 0], ["operatorname", 0], ["min", 0], ["p", 0], ["i", 0], ["p", 0], ["i", 0], ["1", 0], ["ldots", 0], ["p", 0], ["j", 0], ["find", 0], ["the", 0], ["lexicographically", 0], ["m", 0], ["th", 0], ["permutation", 0], ["of", 0], ["length", 0], ["n", 0], ["in", 0], ["the", 0], ["set", 0], ["of", 0], ["permutations", 0], ["having", 0], ["the", 0], ["maximum", 0], ["possible", 0], ["value", 0], ["of", 0], ["f", 0], ["p", 0], ["input", 0], ["the", 0], ["single", 0], ["line", 1], ["of", 0], ["input", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["m", 0], ["1", 0], ["≤", 0], ["m", 0], ["≤", 0], ["cnt", 0], ["n", 0], ["where", 0], ["cnt", 0], ["n", 0], ["is", 0], ["the", 0], ["number", 0], ["of", 0], ["permutations", 0], ["of", 0], ["length", 0], ["n", 0], ["with", 0], ["maximum", 0], ["possible", 0], ["value", 0], ["of", 0], ["f", 0], ["p", 0], ["the", 2], ["problem", 2], ["consists", 2], ["of", 2], ["two", 2], ["subproblems", 2], ["the", 2], ["subproblems", 2], ["have", 2], ["different", 2], ["constraints", 2], ["on", 2], ["the", 2], ["input", 2], ["you", 2], ["will", 2], ["get", 2], ["some", 2], ["score", 2], ["for", 2], ["the", 2], ["correct", 2], ["submission", 0], ["of", 0], ["the", 0], ["subproblem", 0], ["the", 0], ["description", 0], ["of", 0], ["the", 0], ["subproblems", 0], ["follows", 0], ["in", 0], ["subproblem", 0], ["b1", 0], ["3", 0], ["points", 0], ["the", 0], ["constraint", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["8", 0], ["will", 0], ["hold", 0], ["in", 0], ["subproblem", 0], ["b2", 0], ["4", 0], ["points", 0], ["the", 0], ["constraint", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["50", 0], ["will", 0], ["hold", 0], ["output", 0], ["output", 0], ["n", 0], ["number", 0], ["forming", 0], ["the", 0], ["required", 0], ["permutation", 0], ["examples", 0], ["input", 0], ["2", 0], ["2", 0], ["output", 0], ["2", 0], ["1", 0], ["input", 0], ["3", 0], ["2", 0], ["output", 0], ["1", 0], ["3", 0], ["2", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["example", 0], ["both", 0], ["permutations", 0], ["of", 0], ["numbers", 0], ["1", 0], ["2", 0], ["yield", 0], ["maximum", 0], ["possible", 0], ["f", 0], ["p", 0], ["which", 0], ["is", 0], ["equal", 0], ["to", 0], ["4", 0], ["among", 0], ["them", 0], ["2", 0], ["1", 0], ["comes", 0], ["second", 0], ["in", 0], ["lexicographical", 0], ["order", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11004784688995216, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.05741626794258373, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.21266968325791855, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.13574660633484162, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11004784688995216, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.05741626794258373, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.21266968325791855, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.13574660633484162, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["codeforces", 0], ["rockethon", 0], ["contest", 0], ["problem", 0], ["b", 0], ["author", 0], ["chaotic", 0], ["iak", 0], ["language", 0], ["python", 0], ["3", 0], ["4", 0], ["2", 0], ["solution", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["read", 0], ["m", 0], ["1", 0], ["perm", 0], ["0", 0], ["n", 0], ["lf", 0], ["0", 0], ["rt", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["m", 0], ["2", 0], ["n", 0], ["i", 0], ["2", 0], ["perm", 0], ["rt", 0], ["i", 0], ["1", 0], ["rt", 0], ["1", 0], ["else", 0], ["perm", 0], ["lf", 0], ["i", 0], ["1", 0], ["lf", 0], ["1", 0], ["m", 0], ["2", 0], ["n", 0], ["i", 0], ["2", 0], ["write", 0], ["perm", 0], ["helpers", 0], ["def", 0], ["read", 0], ["mode", 0], ["2", 0], ["0", 0], ["string", 0], ["1", 0], ["list", 0], ["of", 0], ["strings", 0], ["2", 0], ["list", 0], ["of", 0], ["integers", 0], ["inputs", 0], ["input", 0], ["strip", 0], ["if", 0], ["mode", 0], ["0", 0], ["return", 0], ["inputs", 0], ["if", 0], ["mode", 0], ["1", 0], ["return", 0], ["inputs", 0], ["split", 0], ["if", 0], ["mode", 0], ["2", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["inputs", 0], ["split", 0], ["def", 0], ["write", 0], ["s", 0], ["n", 0], ["if", 0], ["s", 0], ["is", 0], ["none", 0], ["s", 0], ["if", 0], ["isinstance", 0], ["s", 0], ["list", 0], ["s", 0], ["join", 0], ["map", 0], ["str", 0], ["s", 0], ["s", 0], ["str", 0], ["s", 0], ["print", 0], ["s", 0], ["end", 0], ["write", 0], ["main", 0], ["import", 0], ["itertools", 0], ["import", 0], ["collections", 0], ["f", 0], ["lambda", 0], ["p", 0], ["sum", 0], ["itertools", 0], ["starmap", 0], ["lambda", 0], ["i", 0], ["j", 0], ["min", 0], ["p", 0], ["i", 0], ["j", 0], ["1", 0], ["itertools", 0], ["combinations", 0], ["with", 0], ["replacement", 0], ["list", 0], ["range", 0], ["n", 0], ["2", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["str", 0], ["split", 0], ["input", 0], ["mem", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["p", 0], ["in", 0], ["itertools", 0], ["permutations", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["n", 0], ["mem", 0], ["f", 0], ["p", 0], ["append", 0], ["p", 0], ["print", 0], ["str", 0], ["join", 0], ["list", 0], ["map", 0], ["str", 0], ["mem", 0], ["max", 0], ["mem", 0], ["m", 0], ["1", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["coding", 0], ["utf", 0], ["8", 0], ["author", 0], ["kanari", 0], ["date", 0], ["2015", 0], ["02", 0], ["08", 0], ["01", 0], ["11", 0], ["21", 0], ["last", 0], ["modified", 0], ["by", 0], ["kanari", 0], ["last", 0], ["modified", 0], ["time", 0], ["2015", 0], ["02", 0], ["08", 0], ["01", 0], ["29", 0], ["15", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["fac", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["fac", 0], ["append", 0], ["fac", 0], ["i", 0], ["1", 0], ["i", 0], ["fac", 0], ["append", 0], ["fac", 0], ["i", 0], ["1", 0], ["2", 0], ["def", 0], ["dfs", 0], ["x", 0], ["l", 0], ["r", 0], ["m", 0], ["if", 0], ["l", 0], ["r", 0], ["a", 0], ["l", 0], ["x", 0], ["return", 0], ["elif", 0], ["m", 0], ["fac", 0], ["n", 0], ["x", 0], ["1", 0], ["a", 0], ["l", 0], ["x", 0], ["dfs", 0], ["x", 0], ["1", 0], ["l", 0], ["1", 0], ["r", 0], ["m", 0], ["else", 0], ["a", 0], ["r", 0], ["x", 0], ["dfs", 0], ["x", 0], ["1", 0], ["l", 0], ["r", 0], ["1", 0], ["m", 0], ["fac", 0], ["n", 0], ["x", 0], ["1", 0], ["dfs", 0], ["1", 0], ["1", 0], ["n", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["print", 0], ["a", 0], ["i", 0], ["end", 0], ["if", 0], ["i", 0], ["n", 0], ["print", 0], ["n", 0], ["end", 0], ["else", 0], ["print", 0], ["end", 0], ["arc", 0], ["def", 0], ["sv", 0], ["a", 0], ["b", 0], ["c", 0], ["n", 0], ["v", 0], ["if", 0], ["n", 0], ["c", 0], ["2", 0], ["arc", 0], ["a", 0], ["v", 0], ["if", 0], ["b", 0], ["a", 0], ["1", 0], ["sv", 0], ["a", 0], ["1", 0], ["b", 0], ["c", 0], ["2", 0], ["n", 0], ["v", 0], ["1", 0], ["else", 0], ["arc", 0], ["b", 0], ["1", 0], ["v", 0], ["if", 0], ["b", 0], ["a", 0], ["1", 0], ["sv", 0], ["a", 0], ["b", 0], ["1", 0], ["c", 0], ["2", 0], ["n", 0], ["c", 0], ["2", 0], ["v", 0], ["1", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arc", 0], ["0", 0], ["n", 0], ["ssc", 0], ["1", 0], ["n", 0], ["1", 0], ["sv", 0], ["0", 0], ["n", 0], ["ssc", 0], ["m", 0], ["1", 0], ["1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["arc", 0], ["import", 0], ["itertools", 0], ["def", 1], ["factorial", 1], ["n", 1], ["x", 1], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["x", 0], ["i", 0], ["return", 0], ["x", 0], ["def", 0], ["haha", 0], ["t", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["t", 0], ["l", 0], ["append", 0], ["int", 0], ["t", 0], ["i", 0], ["p", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["l", 0], ["p", 0], ["min", 0], ["l", 0], ["i", 0], ["j", 0], ["1", 0], ["return", 0], ["p", 0], ["l", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["s", 0], ["str", 0], ["i", 0], ["l", 0], ["1", 0], ["4", 0], ["10", 0], ["20", 0], ["35", 0], ["56", 0], ["84", 0], ["120", 0], ["x", 0], ["l", 0], ["n", 0], ["1", 0], ["c", 0], ["0", 0], ["asdf", 0], ["list", 0], ["itertools", 0], ["permutations", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["factorial", 0], ["n", 0], ["y", 0], ["haha", 0], ["asdf", 0], ["i", 0], ["if", 0], ["y", 0], ["0", 0], ["x", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["m", 0], ["y", 0], ["y", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["y", 0], ["y", 0], ["j", 0], ["str", 0], ["y", 0], ["j", 0], ["print", 0], ["join", 0], ["y", 0], ["break", 0], ["from", 0], ["itertools", 0], ["import", 0], ["maxans", 0], ["0", 0], ["poss", 0], ["def", 0], ["getsum", 0], ["perm", 0], ["nonlocal", 0], ["maxans", 0], ["poss", 0], ["ans", 0], ["0", 0], ["n", 0], ["len", 0], ["perm", 0], ["h", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["ans", 0], ["min", 0], ["perm", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["i", 0], ["j", 0], ["1", 0], ["h", 0], ["k", 0], ["1", 0], ["if", 0], ["ans", 0], ["maxans", 0], ["maxans", 0], ["ans", 0], ["poss", 0], ["perm", 0], ["elif", 0], ["ans", 0], ["maxans", 0], ["poss", 0], ["append", 0], ["perm", 0], ["return", 0], ["ans", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lst", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["perms", 0], ["list", 0], ["permutations", 0], ["lst", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["perms", 0], ["getsum", 0], ["perms", 0], ["i", 0], ["print", 0], ["maxans", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["poss", 0], ["m", 0], ["1", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["def", 0], ["f", 0], ["a", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cur", 0], ["a", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["cur", 0], ["min", 0], ["cur", 0], ["a", 0], ["j", 0], ["ans", 0], ["cur", 0], ["return", 0], ["ans", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["max", 0], ["list", 0], ["map", 0], ["f", 0], ["permutations", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["a", 0], ["in", 0], ["permutations", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["m", 0], ["f", 0], ["a", 0], ["ans", 0], ["if", 0], ["not", 0], ["m", 0], ["print", 0], ["a", 0], ["break", 0], ["author", 0], ["yushchenko", 0], ["def", 0], ["countf", 0], ["f", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["f", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["f", 0], ["i", 0], ["print", 0], ["i", 0], ["j", 0], ["print", 0], ["f", 0], ["i", 0], ["j", 0], ["1", 0], ["sum", 0], ["min", 0], ["f", 0], ["i", 0], ["j", 0], ["1", 0], ["return", 0], ["sum", 0], ["import", 0], ["itertools", 0], ["n", 0], ["m", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["m", 0], ["int", 0], ["m", 0], ["maxf", 0], ["0", 0], ["count", 0], ["0", 0], ["save", 0], ["for", 0], ["x", 0], ["in", 0], ["itertools", 0], ["permutations", 0], ["list", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["t", 0], ["countf", 0], ["x", 0], ["if", 0], ["t", 0], ["maxf", 0], ["maxf", 0], ["t", 0], ["count", 0], ["0", 0], ["if", 0], ["t", 0], ["maxf", 0], ["print", 0], ["x", 0], ["t", 0], ["count", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["m", 0], ["save", 0], ["x", 0], ["print", 0], ["join", 0], ["str", 0], ["e", 0], ["for", 0], ["e", 0], ["in", 0], ["save", 0], ["3", 0], ["def", 0], ["gen", 0], ["n", 0], ["start", 0], ["t", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["start", 0], ["if", 0], ["t", 0], ["2", 0], ["n", 0], ["2", 0], ["return", 0], ["start", 0], ["gen", 0], ["n", 0], ["1", 0], ["start", 0], ["1", 0], ["t", 0], ["else", 0], ["return", 0], ["gen", 0], ["n", 0], ["1", 0], ["start", 0], ["1", 0], ["t", 0], ["2", 0], ["n", 0], ["2", 0], ["start", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["gen", 0], ["n", 0], ["1", 0], ["t", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["1", 0], ["c", 0], ["n", 0], ["1", 0], ["arr", 0], ["0", 0], ["n", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["c", 0], ["r", 0], ["0", 0], ["j", 0], ["s", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["r", 0], ["m", 0], ["if", 0], ["j", 0], ["n", 0], ["r", 0], ["2", 0], ["n", 0], ["j", 0], ["1", 0], ["j", 0], ["1", 0], ["print", 0], ["s", 0], ["j", 0], ["r", 0], ["m", 0], ["if", 0], ["j", 0], ["s", 0], ["and", 0], ["j", 0], ["n", 0], ["1", 0], ["r", 0], ["2", 0], ["n", 0], ["j", 0], ["m", 0], ["r", 0], ["j", 0], ["1", 0], ["arr", 0], ["i", 0], ["j", 0], ["while", 0], ["s", 0], ["j", 0], ["arr", 0], ["c", 0], ["s", 0], ["c", 0], ["1", 0], ["s", 0], ["1", 0], ["s", 0], ["1", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["arr", 0], ["print", 0], ["i", 0], ["end", 0], ["import", 0], ["itertools", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["perms", 0], ["list", 0], ["itertools", 0], ["permutations", 0], ["a", 0], ["d", 0], ["for", 0], ["x", 0], ["in", 0], ["perms", 0], ["s", 0], ["0", 1], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["s", 0], ["min", 0], ["x", 0], ["i", 0], ["j", 0], ["1", 0], ["d", 0], ["append", 0], ["s", 0], ["x", 0], ["mx", 0], ["max", 0], ["d", 0], ["0", 0], ["ans", 0], ["for", 0], ["x", 0], ["in", 0], ["d", 0], ["if", 0], ["x", 0], ["0", 0], ["mx", 0], ["ans", 0], ["append", 0], ["x", 0], ["1", 0], ["ans", 0], ["sort", 0], ["print", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["ans", 0], ["m", 0], ["1", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["def", 0], ["f", 0], ["perm", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["perm", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["perm", 0], ["res", 0], ["min", 0], ["perm", 0], ["i", 0], ["j", 0], ["1", 0], ["return", 0], ["res", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["f", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["i", 0], ["0", 0], ["for", 0], ["p", 0], ["in", 0], ["permutations", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["f", 0], ["p", 0], ["res", 0], ["i", 0], ["1", 0], ["if", 0], ["i", 0], ["m", 0], ["print", 0], ["join", 0], ["list", 0], ["map", 0], ["str", 0], ["p", 0], ["break", 0], ["import", 0], ["sys", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["m", 0], ["0", 0], ["a", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["big", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["x", 0], ["n", 0], ["1", 0], ["big", 0], ["x", 0], ["def", 0], ["r", 0], ["i", 0], ["if", 0], ["i", 0], ["n", 0], ["f", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["u", 0], ["l", 0], ["x", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["x", 0], ["n", 0], ["1", 0], ["u", 0], ["min", 0], ["u", 0], ["l", 0], ["y", 0], ["f", 0], ["u", 0], ["nonlocal", 0], ["m", 0], ["if", 0], ["f", 0], ["big", 0], ["m", 0], ["1", 0], ["if", 0], ["m", 0], ["k", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["print", 0], ["l", 0], ["j", 0], ["end", 0], ["return", 0], ["return", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["j", 0], ["a", 0], ["j", 0], ["false", 0], ["l", 0], ["i", 0], ["j", 0], ["r", 0], ["i", 0], ["1", 0], ["a", 0], ["j", 0], ["true", 0], ["return", 0], ["0", 0], ["r", 0], ["1", 0], ["def", 0], ["main", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["maxs", 0], ["0", 0], ["for", 0], ["p", 0], ["in", 0], ["permutations", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["t", 0], ["min", 0], ["t", 0], ["p", 0], ["j", 0], ["s", 0], ["t", 0], ["maxs", 0], ["max", 0], ["maxs", 0], ["s", 0], ["for", 0], ["p", 0], ["in", 0], ["permutations", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["t", 0], ["min", 0], ["t", 0], ["p", 0], ["j", 0], ["s", 0], ["t", 0], ["if", 0], ["s", 0], ["maxs", 0], ["m", 0], ["1", 0], ["if", 0], ["m", 0], ["0", 0], ["print", 0], ["p", 0], ["break", 0], ["main", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["gen", 0], ["n", 0], ["m", 0], ["now", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["now", 0], ["if", 0], ["m", 0], ["2", 0], ["n", 0], ["2", 0], ["return", 0], ["now", 0], ["gen", 0], ["n", 0], ["1", 0], ["m", 0], ["now", 0], ["1", 0], ["else", 0], ["return", 0], ["gen", 0], ["n", 0], ["1", 0], ["m", 0], ["2", 0], ["n", 0], ["2", 0], ["now", 0], ["1", 0], ["now", 0], ["p", 0], ["2", 0], ["n", 0], ["2", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["gen", 0], ["n", 0], ["m", 0], ["1", 0], ["inp", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["inp", 0], ["0", 0], ["m", 0], ["bin", 0], ["int", 0], ["inp", 0], ["1", 0], ["1", 0], ["2", 0], ["lenbin", 0], ["n", 0], ["1", 0], ["while", 0], ["len", 0], ["m", 0], ["lenbin", 0], ["m", 0], ["0", 0], ["m", 0], ["start", 0], ["end", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["m", 0], ["x", 0], ["0", 0], ["start", 0], ["start", 0], ["x", 0], ["1", 0], ["else", 0], ["end", 0], ["x", 0], ["1", 0], ["end", 0], ["final", 0], ["start", 0], ["n", 0], ["end", 0], ["for", 0], ["x", 0], ["in", 0], ["final", 0], ["print", 0], ["x", 0], ["end", 0], ["file", 0], ["open", 0], ["r", 0], ["f", 0], ["lambda", 0], ["file", 0], ["readline", 0], ["f", 0], ["lambda", 0], ["input", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["f", 0], ["split", 0], ["most", 0], ["0", 0], ["p", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["p", 0], ["append", 0], ["i", 0], ["most", 0], ["i", 0], ["n", 0], ["1", 0], ["i", 0], ["def", 0], ["next", 0], ["perm", 0], ["i", 0], ["len", 0], ["p", 0], ["1", 0], ["while", 0], ["i", 0], ["0", 0], ["and", 0], ["p", 0], ["i", 0], ["1", 0], ["p", 0], ["i", 0], ["i", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["return", 0], ["false", 0], ["j", 0], ["len", 0], ["p", 0], ["1", 0], ["while", 0], ["p", 0], ["j", 0], ["p", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["i", 0], ["1", 0], ["p", 0], ["j", 0], ["p", 0], ["j", 0], ["p", 0], ["i", 0], ["1", 0], ["j", 0], ["len", 0], ["p", 0], ["1", 0], ["while", 0], ["i", 0], ["j", 0], ["p", 0], ["i", 0], ["p", 0], ["j", 0], ["p", 0], ["j", 0], ["p", 0], ["i", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["return", 0], ["true", 0], ["def", 0], ["fp", 0], ["s", 0], ["0", 0], ["for", 2], ["i", 2], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["1", 0], ["s", 0], ["min", 0], ["p", 0], ["i", 0], ["1", 0], ["j", 0], ["return", 0], ["s", 0], ["while", 0], ["m", 0], ["0", 0], ["if", 0], ["fp", 0], ["most", 0], ["m", 0], ["1", 0], ["if", 0], ["m", 0], ["0", 0], ["break", 0], ["next", 0], ["perm", 0], ["print", 0], ["join", 0], ["str", 0], ["e", 0], ["for", 0], ["e", 0], ["in", 0], ["p", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["def", 0], ["f", 0], ["l", 0], ["n", 0], ["len", 0], ["l", 0], ["res", 0], ["0", 1], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["1", 0], ["res", 0], ["min", 0], ["l", 0], ["i", 0], ["j", 0], ["return", 0], ["res", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["res", 0], ["0", 0], ["resl", 0], ["for", 0], ["perm", 0], ["in", 0], ["permutations", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["cur", 0], ["f", 0], ["perm", 0], ["print", 0], ["perm", 0], ["cur", 0], ["if", 0], ["cur", 0], ["res", 0], ["res", 0], ["cur", 0], ["resl", 0], ["if", 0], ["cur", 0], ["res", 0], ["resl", 0], ["append", 0], ["perm", 0], ["print", 0], ["res", 0], ["print", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["resl", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["used", 0], ["0", 0], ["n", 0], ["1", 0], ["c", 0], ["0", 0], ["t", 0], ["0", 0], ["def", 0], ["gen", 0], ["ind", 0], ["nonlocal", 0], ["c", 0], ["t", 0], ["if", 0], ["t", 0], ["return", 0], ["if", 0], ["ind", 0], ["n", 0], ["s", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["mi", 0], ["a", 0], ["k", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["k", 0], ["n", 0], ["if", 0], ["mi", 0], ["a", 0], ["d", 0], ["mi", 0], ["a", 0], ["d", 0], ["s", 0], ["mi", 0], ["if", 0], ["s", 0], ["ma", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["m", 0], ["print", 0], ["a", 0], ["t", 0], ["1", 0], ["return", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["t", 0], ["return", 0], ["if", 0], ["not", 0], ["used", 0], ["i", 0], ["used", 0], ["i", 0], ["1", 0], ["a", 0], ["ind", 0], ["i", 0], ["gen", 0], ["ind", 0], ["1", 0], ["a", 0], ["ind", 0], ["1", 0], ["used", 0], ["i", 0], ["0", 0], ["return", 0], ["ma", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["ma", 0], ["n", 0], ["i", 0], ["a", 0], ["i", 0], ["gen", 0], ["0", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["best", 0], ["0", 0], ["ans", 0], ["def", 0], ["foo", 0], ["p", 0], ["ans", 1], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["ans", 0], ["min", 0], ["p", 0], ["i", 0], ["j", 0], ["1", 0], ["return", 0], ["ans", 0], ["def", 0], ["eval", 0], ["p", 0], ["nonlocal", 0], ["ans", 0], ["best", 0], ["val", 0], ["foo", 0], ["p", 0], ["if", 0], ["val", 0], ["best", 0], ["ans", 0], ["p", 0], ["best", 0], ["val", 0], ["elif", 0], ["val", 0], ["best", 0], ["ans", 0], ["append", 0], ["p", 0], ["def", 0], ["generate", 0], ["l", 0], ["remaining", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["remaining", 0], ["eval", 0], ["l", 0], ["else", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["remaining", 0], ["generate", 0], ["l", 0], ["x", 0], ["remaining", 0], ["i", 0], ["remaining", 0], ["i", 0], ["1", 0], ["generate", 0], ["print", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["ans", 0], ["m", 0], ["1", 0], ["def", 0], ["rek", 0], ["s", 0], ["t", 0], ["nonlocal", 0], ["q", 0], ["n", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["t", 0], ["1", 0], ["n", 0], ["1", 0], ["y", 0], ["s", 0], ["n", 0], ["x", 0], ["s", 0], ["n", 0], ["x", 0], ["1", 0], ["q", 0], ["append", 0], ["y", 0], ["rek", 0], ["y", 0], ["x", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["join", 0], ["map", 0], ["str", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["q", 0], ["a", 0], ["rek", 0], ["a", 0], ["1", 0], ["q", 0], ["sort", 0], ["print", 0], ["join", 0], ["q", 0], ["m", 0], ["1", 0], ["sum1", 0], ["0", 0], ["def", 0], ["gen", 0], ["used", 0], ["pref", 0], ["m", 0], ["ans", 0], ["if", 0], ["len", 0], ["pref", 0], ["n", 0], ["ans", 0], ["append", 0], ["pref", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["used", 0], ["i", 0], ["used", 0], ["i", 0], ["true", 0], ["gen", 0], ["used", 0], ["pref", 0], ["i", 0], ["m", 0], ["ans", 0], ["used", 0], ["i", 0], ["false", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["used", 0], ["false", 0], ["n", 0], ["1", 0], ["ans", 0], ["gen", 0], ["used", 0], ["m", 0], ["ans", 0], ["min1", 0], ["1", 0], ["mm", 0], ["1", 0], ["summ", 0], ["0", 0], ["len", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ans", 0], ["sum1", 0], ["0", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["z", 0], ["n", 0], ["sum1", 0], ["min", 0], ["ans", 0], ["i", 0], ["z", 0], ["j", 0], ["1", 0], ["summ", 0], ["i", 0], ["sum1", 0], ["if", 0], ["sum1", 0], ["min1", 0], ["min1", 0], ["sum1", 0], ["mm", 0], ["i", 0], ["ss", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["ss", 0], ["m", 0], ["print", 0], ["i", 0], ["ss", 0], ["if", 0], ["summ", 0], ["i", 0], ["min1", 0], ["print", 0], ["i", 0], ["ss", 0], ["1", 0], ["i", 0], ["1", 0], ["else", 0], ["if", 0], ["summ", 0], ["i", 0], ["min1", 0], ["if", 0], ["ss", 0], ["m", 0], ["1", 0], ["break", 0], ["print", 0], ["i", 0], ["ss", 0], ["2", 0], ["ss", 0], ["1", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["ans", 0], ["i", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["flag", 0], ["false", 0], ["k", 0], ["0", 0], ["myset", 0], ["set", 0], ["flag1", 0], ["true", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["n", 0], ["in", 0], ["myset", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["0", 0], ["1", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["myset", 0], ["print", 0], ["i", 0], ["end", 0], ["flag1", 0], ["false", 0], ["if", 0], ["flag1", 0], ["false", 0], ["break", 0], ["flag", 0], ["false", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["m", 0], ["s", 0], ["2", 0], ["n", 0], ["i", 0], ["2", 0], ["k", 0], ["print", 0], ["i", 0], ["1", 0], ["k", 0], ["end", 0], ["myset", 0], ["add", 0], ["i", 0], ["1", 0], ["k", 0], ["k", 0], ["i", 0], ["1", 0], ["k", 0], ["flag", 0], ["true", 0], ["break", 0], ["s", 0], ["2", 0], ["n", 0], ["i", 0], ["2", 0], ["k", 0], ["if", 0], ["flag", 0], ["false", 0], ["print", 0], ["n", 0], ["end", 0], ["myset", 0], ["add", 0], ["n", 0], ["k", 0], ["n", 0], ["m", 0], ["s", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.004651162790697674, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.003953488372093023, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.032377428307123035, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.029139685476410732, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.004651162790697674, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.003953488372093023, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.032377428307123035, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.029139685476410732, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nSengoku still remembers the mysterious \"colourful meteoroids\" she discovered with Lala-chan when they were little. In particular, one of the nights impressed her deeply, giving her the illusion that all her fancies would be realized.\n\nOn that night, Sengoku constructed a permutation p_1, p_2, ..., p_{n} of integers from 1 to n inclusive, with each integer representing a colour, wishing for the colours to see in the coming meteor outburst. Two incredible outbursts then arrived, each with n meteorids, colours of which being integer sequences a_1, a_2, ..., a_{n} and b_1, b_2, ..., b_{n} respectively. Meteoroids' colours were also between 1 and n inclusive, and the two sequences were not identical, that is, at least one i (1 ≤ i ≤ n) exists, such that a_{i} ≠ b_{i} holds.\n\nWell, she almost had it all — each of the sequences a and b matched exactly n - 1 elements in Sengoku's permutation. In other words, there is exactly one i (1 ≤ i ≤ n) such that a_{i} ≠ p_{i}, and exactly one j (1 ≤ j ≤ n) such that b_{j} ≠ p_{j}.\n\nFor now, Sengoku is able to recover the actual colour sequences a and b through astronomical records, but her wishes have been long forgotten. You are to reconstruct any possible permutation Sengoku could have had on that night.\n\n\n-----Input-----\n\nThe first line of input contains a positive integer n (2 ≤ n ≤ 1 000) — the length of Sengoku's permutation, being the length of both meteor outbursts at the same time.\n\nThe second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ n) — the sequence of colours in the first meteor outburst.\n\nThe third line contains n space-separated integers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ n) — the sequence of colours in the second meteor outburst. At least one i (1 ≤ i ≤ n) exists, such that a_{i} ≠ b_{i} holds.\n\n\n-----Output-----\n\nOutput n space-separated integers p_1, p_2, ..., p_{n}, denoting a possible permutation Sengoku could have had. If there are more than one possible answer, output any one of them.\n\nInput guarantees that such permutation exists.\n\n\n-----Examples-----\nInput\n5\n1 2 3 4 3\n1 2 5 4 5\n\nOutput\n1 2 5 4 3\n\nInput\n5\n4 4 2 3 1\n5 4 5 3 1\n\nOutput\n5 4 2 3 1\n\nInput\n4\n1 1 3 4\n1 4 3 4\n\nOutput\n1 2 3 4\n\n\n\n-----Note-----\n\nIn the first sample, both 1, 2, 5, 4, 3 and 1, 2, 3, 4, 5 are acceptable outputs.\n\nIn the second sample, 5, 4, 2, 3, 1 is the only permutation to satisfy the constraints.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\ncnt = 0\nfor i in range(n):\n\tif a[i] != b[i]:\n\t\tcnt += 1 \n\t\t\nif cnt == 1:\n\tdone = list(range(1,n+1))\n\tx = 0\n\tfor i in range(n):\n\t\tif a[i] == b[i]:\n\t\t\ttry:\n\t\t\t\tdone.remove(a[i])\n\t\t\texcept:\n\t\t\t\tpass\n\t\telse:\n\t\t\tx = i\n\t\t\ttry:\n\t\t\t\tdone.remove(a[i])\n\t\t\texcept:\n\t\t\t\tpass\n\t\t\ttry:\n\t\t\t\tdone.remove(b[i])\n\t\t\texcept:\n\t\t\t\tpass\n\tarr = a[::]\n\tarr[x] = done[0]\n\tfor i in arr:\n\t\tprint(i,end = ' ')\n\t\t\nelse:\n\tarr = a[::]\n\tx = -1\n\ty = -1\n\tfor i in range(n):\n\t\tif a[i] == b[i]:\n\t\t\tpass\n\t\telse:\n\t\t\tif x == -1:\n\t\t\t\tx = i\n\t\t\telse:\n\t\t\t\ty = i\n\tbr = arr[::]\n\tarr[x] = b[x]\n\tbr[y] = b[y]\n\tif len(set(br)) == n:\n\t\tarr = br[::]\n\tfor i in arr:\n\t\tprint(i,end = ' ')           \n\t\t\n", "import sys\n\nn = int(input())\n\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\np1, p2, p3, p4 = [], [], [], []\n\ncur = 0\nfor i in range(n):\n\tif a[i] == b[i]:\n\t\tfor p in (p1, p2, p3, p4):\n\t\t\tp.append(a[i])\n\telif cur == 0:\n\t\tp1.append(a[i])\n\t\tp2.append(a[i])\n\t\tp3.append(b[i])\n\t\tp4.append(b[i])\n\t\tcur += 1\n\telse:\n\t\tp1.append(a[i])\n\t\tp2.append(b[i])\n\t\tp3.append(a[i])\n\t\tp4.append(b[i])\n\nfor p in (p1, p2, p3, p4):\n\tif len(set(p)) == n:\n\t\tprint(' '.join(str(x) for x in p))\n\t\treturn\n\nfor p in (p1, p2, p3, p4):\n\tif len(set(p)) == n - 1:\n\t\tdistinct = 0\n\t\tdpos = 0\n\t\tfor i, (x, y) in enumerate(zip(p, a)):\n\t\t\tif x != y:\n\t\t\t\tdistinct += 1\n\t\t\t\tdpos = i\n\t\tif distinct == 1:\n\t\t\tunused = 1\n\t\t\twhile unused in p:\n\t\t\t\tunused += 1\n\t\t\tpp = list(p)\n\t\t\tpp[dpos] = unused\n\t\t\tprint(' '.join(str(x) for x in pp))\n\t\t\treturn\n\nassert False\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = [0 for _ in range(n)]\nused = [False for _ in range(n + 1)]\nidx = []\nfor i in range(n):\n\tif a[i] == b[i]:\n\t\tans[i] = a[i]\n\t\tused[a[i]] = True\n\telse:\n\t\tidx.append(i)\nunused = []\nfor i in range(1, n + 1):\n\tif not used[i]:\n\t\tunused.append(i)\n\nif len(unused) == 1:\n\tans[idx[0]] = unused[0]\nelif (a[idx[0]] != unused[0] and a[idx[1]] != unused[1]) or (b[idx[0]] != unused[0] and b[idx[1]] != unused[1]):\n\tans[idx[0]] = unused[1]\n\tans[idx[1]] = unused[0]\nelse:\n\tans[idx[0]] = unused[0]\n\tans[idx[1]] = unused[1]\n\nprint(' '.join(map(str, ans)))\n", "n = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\ndiff = []\nfor i in range(n):\n\tif a[i] != b[i]:\n\t\tdiff.append(i)\nsa = True\nsb = True\ndi = []\nfor i in range(1,n+1):\n\tdi.append(i)\ns = []\nfor i in range(n):\n\tif i not in diff:\n\t\ts.append(a[i])\n\t\tdi.remove(a[i])\n\telse:\n\t\ts.append(0)\nif len(diff) == 1:\n\ts[diff[0]] = di[0]\nelse:\n\tif (a[diff[0]] in di and b[diff[1]] in di):\n\t\ts[diff[0]] = a[diff[0]]\n\t\ts[diff[1]] = b[diff[1]]\n\telse:\n\t\ts[diff[0]] = b[diff[0]]\n\t\ts[diff[1]] = a[diff[1]]\n\t\t\n\t\t\n\nfor i in range(n):\n\tprint(s[i], end= ' ')\n\n", "import math\n\n\ndef main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tb = list(map(int, input().split()))\n\tres = []\n\tfor i in a:\n\t\tres.append(i)\n\tall_numbers = set([i for i in range(1, n+1)])\n\tseta = set(a)\n\tsetb = set(b)\n\tnon_a = list(all_numbers - seta)[0]\n\tnon_b = list(all_numbers - setb)[0]\n\tdpa = double_positions(a)\n\tdpb = double_positions(b)\n\tfor i in dpa:\n\t\ttemp = res[i]\n\t\tres[i] = non_a\n\t\tif diff(res, a) == 1 and diff(res, b) == 1:\n\t\t\tprint(*res)\n\t\t\treturn\n\t\tres[i]= temp\n\tfor i in dpb:\n\t\ttemp = res[i]\n\t\tres[i] = non_b\n\t\tif diff(res, b) == 1 and diff(res, a) == 1:\n\t\t\tprint(*res)\n\t\t\treturn\n\t\tres[i] = temp\n\n\n\ndef diff(a, b):\n\tc = 0\n\tfor i in range(len(a)):\n\t\tif a[i] != b[i]:\n\t\t\tc += 1\n\treturn c\n\ndef double_positions(a):\n\tcount = [-1 for i in range(len(a))]\n\tres = []\n\tfor i in range(len(a)):\n\t\tif count[a[i]-1] != -1:\n\t\t\treturn count[a[i]-1], i\n\t\tcount[a[i]-1] = i\n\t\n\t\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n = int(input())\nai = list(map(int,input().split()))\nbi = list(map(int,input().split()))\nci = [0]*n\nfor i in range(n):\n\tci[i] = ai[i]\nnums = [0]*n\nind = [0]*2\nj = 0\nnum = 0\nfor i in range(n):\n\tnums[ai[i]-1] += 1\nfor i in range(n):\n\tif nums[ai[i]-1] == 2:\n\t\tind[j] = i\n\t\tj += 1\n\tif nums[i] == 0:\n\t\tnum = i+1 \n\t\t\nci[ind[0]] = num\ndif = 0\ndif2 = 0\nfor i in range(n):\n\tif ci[i] != bi[i]:\n\t\tdif += 1\n\tif ci[i] != ai[i]:\n\t\tdif2 += 1\nif dif != 1 or dif2 != 1:\n\tci[ind[0]] = ai[ind[0]]\n\tci[ind[1]] = num\nfor i in range(n):\n\tprint(ci[i],end=\" \")\n", "import sys\n\ndef main():\n\tn=int(sys.stdin.readline().rstrip())\n\ta=list(map(int,sys.stdin.readline().split()))\n\tb=list(map(int,sys.stdin.readline().split()))\n\t\n\titems=set(range(1,n+1))\n\tcoords=[]\n\tp=[-1]*n\n\t\n\tfor i in range(n):\n\t\tif a[i]==b[i]:\n\t\t\titems.remove(a[i])\n\t\t\tp[i]=a[i]\n\t\telse:\n\t\t\tcoords.append(i)\n\t\t\t\n\titems=list(items)\n\t\n\tif len(coords)==1:\n\t\tp[coords[0]]=items[0]\n\telse:\n\t\tadelta=0\n\t\tbdelta=0\n\t\tfor k,coord in enumerate(coords):\n\t\t\tif items[k]!=a[coord]: adelta+=1\n\t\t\tif items[k]!=b[coord]: bdelta+=1\n\t\t\tp[coord]=items[k]\n\t\tif not (adelta==1 and bdelta==1):\n\t\t\tadelta=0\n\t\t\tbdelta=0\n\t\t\tfor k,coord in enumerate(reversed(coords)):\n\t\t\t\tif items[k]!=a[coord]: adelta+=1\n\t\t\t\tif items[k]!=b[coord]: bdelta+=1\n\t\t\t\tp[coord]=items[k]\n\t\t\n\tsys.stdout.write(' '.join(map(str,p))+'\\n')\n\t\nmain()\n\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nbad = []\ndef isok(tmp):\n\ts = set()\n\tfor i in range(len(tmp)):\n\t\ts.add(tmp[i])\n\treturn len(s) == n\n\t\nfor i in range(len(a)):\n\tif a[i] != b[i]:\n\t\tbad.append(i)\nif len(bad) == 1:\n\tk = [0] * (n + 1)\n\tfor i in range(len(a)):\n\t\tif i != bad[0]:\n\t\t\tk[a[i]] = 1\n\trs = 0\n\tfor i in range(1, n + 1):\n\t\tif not k[i]:\n\t\t\trs = i\n\t\t\tbreak\n\ttmp = []\n\tfor i in range(len(a)):\n\t\tif i != bad[0]:\n\t\t\ttmp.append(a[i])\n\t\telse:\n\t\t\ttmp.append(rs)\n\tprint(*tmp)\n\t\t\t\nelse:\n\ttmp = []\n\ttmp1 = []\n\tfor i in range(len(a)):\n\t\tif i == bad[0]:\n\t\t\ttmp.append(b[i])\n\t\t\ttmp1.append(a[i])\n\t\telse:\n\t\t\ttmp.append(a[i])\n\t\t\ttmp1.append(b[i])   \n\tif isok(tmp):\n\t\tprint(*tmp)\n\telse:\n\t\tprint(*tmp1)\n\t\n", "from operator import eq\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nal = [False for _ in range(n)]\nbl = [False for _ in range(n)]\n\nfor i in range(n):\n\tal[a[i]-1] = True\n\tbl[b[i]-1] = True\n\nfor i,e in enumerate(al):\n\tif not e:\n\t\tak = i+1\n\nfor i,e in enumerate(bl):\n\tif not e:\n\t\tbk = i+1\n\naa = [(e,i) for (i,e) in enumerate(a)]\nbb = [(e,i) for (i,e) in enumerate(b)]\n\naa.sort();\nbb.sort();\n\n\nfor i in range(1,n):\n\t\n\tif (aa[i][0] == aa[i-1][0]):\n\t\tamis = aa[i][0]\n\t\ta1 = aa[i-1][1]\n\t\ta2 = aa[i][1]\n\n\tif (bb[i][0] == bb[i-1][0]):\n\t\tbmis = bb[i][0]\n\t\tb1 = bb[i-1][1]\n\t\tb2 = bb[i][1]\n\n\nfor ay in [a1,a2]:\n\tfor by in [b1,b2]:\n\t\treta = list(a)\n\t\treta[ay] = ak\n\n\t\tretb = list(b)\n\t\tretb[by] = bk\n\n\t\tif all(map(eq, reta, retb)):\n\t\t\tprint(\" \".join(map(str, reta)))\n\t\t\treturn\n\n\n", "def main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tb = list(map(int, input().split()))\n\n\tused = [False] * (n + 1)\n\tanswer = [None] * n\n\n\tfor i, (ai, bi) in enumerate(zip(a, b)):\n\t\tif ai == bi and not used[ai]:\n\t\t\tanswer[i] = ai\n\t\t\tused[ai] = True\n\n\tperm = set(range(1, n + 1))\n\tind = []\n\tfor i, x in enumerate(answer):\n\t\tif x is not None:\n\t\t\tperm.remove(x)\n\t\telse:\n\t\t\tind.append(i)\n\n\tperm = list(perm)\n\tif len(perm) == 1:\n\t\tanswer[ind[0]] = perm[0]\n\t\tfor x in answer:\n\t\t\tprint(x, end=' ')\n\t\treturn\n\n\ti, j = ind\n\tx, y = perm\n\tcount = (a[i] != x) + (b[i] != x) + (a[j] != y) + (b[j] != y)\n\tif count == 2:\n\t\tanswer[i] = x\n\t\tanswer[j] = y\n\telse:\n\t\tanswer[i] = y\n\t\tanswer[j] = x\n\n\tfor x in answer:\n\t\tprint(x, end=' ')\n\n\ndef __starting_point():\n\t# import sys\n\t# sys.stdin = open('input.txt')\n\tmain()\n\n__starting_point()\n", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n\treturn list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\n\nn = int(input())\n\na = list(rint())\nb = list(rint())\n\nii = []\nfor i in range(n):\n\tif a[i] != b[i]:\n\t\tii.append(i)\n\nif len(ii) == 2:\n\tif a[ii[0]] != a[ii[1]]:\n\t\tc = a[:]\n\telse:\n\t\tc = b[:]\n\tif c.count(c[ii[0]]) == 2:\n\t\tiii = ii[0]\n\telse:\n\t\tiii = ii[1]\nelse:\n\tc = a[:]\n\tiii = ii[0]\n\n\nfor i in range(n):\n\tif not i+1 in c:\n\t\tc[iii] = i+1\n\t\tprint(*c)\n\t\treturn\n\n", "n=int(input())\na=[int(i)for i in input().split()]\nb=[int(i)for i in input().split()]\nans=[0]*n\ns=set([int(i)for i in range(1,n+1)])\nfor i in range(n):\n\tif a[i]==b[i]:\n\t\tans[i]=a[i]\n\t\ts.remove(a[i])\nfor i in range(n):\n\tif a[i]!=b[i]:\n\t\tif a[i] not in s:\n\t\t\tif b[i] in s:\n\t\t\t\tans[i]=b[i]\n\t\t\t\ts.remove(b[i])\n\tif b[i] not in s:\n\t\tif a[i] in s:\n\t\t\tans[i]=a[i]\n\t\t\ts.remove(a[i])\t\t\nj=0\nfor i in s:\n\twhile  ans[j]!=0:\n\t\tj+=1\n\tans[j]=i\n\tj+=1\nprint(*ans)\t\t\n\n\n\n", "def check(A, B):\n\tdiff = 0\n\tfor i in range(len(A)):\n\t\tif A[i] != B[i]:\n\t\t\tdiff += 1\n\treturn diff == 1\nip = lambda: list(map(int, input().split()))\nn = int(input())\nA = ip()\nB = ip()\ndiff = 0\nleft = set(range(1, n+1))\nC = [0 for _ in range(n)]\nfor i in range(n):\n\tif A[i] == B[i]:\n\t\tC[i] = A[i]\n\t\tif A[i] in left:\n\t\t\tleft.remove(A[i])\n\telse:\n\t\tdiff += 1\nif diff == 1:\n\tfor i in range(n):\n\t\tif C[i] == 0:\n\t\t\tC[i] = left.pop()\nelse:\n\ti, j = [k for k in range(n) if C[k] == 0]\n\tleft = list(left)\n\tassert(diff == 2)\n\tassert(len(left) == 2)\n\tC[i] = left[0]\n\tC[j] = left[1]\n\tif not check(A, C) or not check(B, C):\n\t\tC[i] = left[1]\n\t\tC[j] = left[0]\n\nprint(*C)\n\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n\nda = [0] * (n+1)\npa = [-1] * (n+1)\nsa = 0\nfor i in range(n):\n\tsa += a[i]\n\tif da[a[i]] == 0:\n\t\tda[a[i]] += 1\n\t\tpa[a[i]] = i\n\telse:\n\t\tpovt_a = a[i]\n\t\tplace2_a = i\n\t\tplace1_a = pa[a[i]]\nda[0] = -1\nabs_a = da.index(0)\n\ndb = [0] * (n+1)\npb = [-1] * (n+1)\nsb = 0\nfor i in range(n):\n\tsb += b[i]\n\tif db[b[i]] == 0:\n\t\tdb[b[i]] += 1\n\t\tpb[b[i]] = i\n\telse:\n\t\tpovt_b = b[i]\n\t\tplace2_b = i\n\t\tplace1_b = pb[b[i]]\ndb[0] = -1\nabs_b = db.index(0)\n\t   \n#print(povt_a, place1_a, place2_a, abs_a)\n#print(povt_b, place1_b, place2_b, abs_b)\n\na1 = a.copy()\nb1 = b.copy()\n\na1[place1_a] = abs_a\nb1[place1_b] = abs_b\nif a1 == b1:\n\tprint(\" \".join(map(str, a1)))\n\treturn\n\t\nb1[place1_b] = b[place1_b]\nb1[place2_b] = abs_b\nif a1 == b1:\n\tprint(\" \".join(map(str, a1)))\n\treturn\n \na1[place1_a] = a[place1_a]\na1[place2_a] = abs_a\nif a1 == b1:\n\tprint(\" \".join(map(str, a1)))\n\treturn\n\nb1[place2_b] = b[place2_b]\nb1[place1_b] = abs_b\nprint(\" \".join(map(str, a1)))\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [0]*n\nd = [False]*n\nbad = []\nneed = []\nfor i in range(n):\n\tif a[i] == b[i]:\n\t\td[a[i]-1] = True\n\t\tc[i] = a[i]\n\telse:\n\t\tbad.append(i)\nfor i in range(n):\n\tif not d[i]:\n\t\tneed.append(i+1)\n\nd = False\n\ndef good(c):\n\tnonlocal a, b\n\tal = 0\n\tbl = 0\n\tfor i in range(len(c)):\n\t\tif c[i] != a[i]:\n\t\t\tal += 1\n\t\tif c[i] != b[i]:\n\t\t\tbl += 1\n\tif al == 1 and bl == 1:\n\t\tfor i in range(len(c)):\n\t\t\tfor j in range(len(c)):\n\t\t\t\tif i != j and c[i] == c[j]:\n\t\t\t\t\treturn False\n\telse:\n\t\treturn False\n\treturn True\nfc = []\ndo = False\ndef f(b, n, c):\n\tnonlocal do, fc\n\t#print(b, n, c, do)\n\tif not do:\n\t\tif len(b) == 0 and good(c):\n\t\t\tdo = True\n\t\t\tfc = c\n\t\t\t#print(fc)\n\t\telse:\n\t\t\tfor i in range(len(b)):\n\t\t\t\tfor j in range(len(n)):\n\t\t\t\t\tnc = c+[]\n\t\t\t\t\tnc[b[i]] = n[j]\n\t\t\t\t\tf(b[:i]+b[i+1:]+[], n[:j]+n[j+1:]+[], nc)\n\nf(bad, need, c)\nfor i in fc:\n\tprint(i ,end=' ')\n", "def meteors(n, ar, br):\n\tdiffer = []\n\tused = {}\n\tpr = []\n\tfor i in range(n):\n\t\tif ar[i] != br[i]:\n\t\t\tpr.append(-1)\n\t\t\tdiffer.append((i, ar[i], br[i]))\n\t\telse:\n\t\t\tpr.append(ar[i])\n\t\t\tused[ar[i]] = i\n\n\tunused = find_unused(n, used)\n\n\tif len(differ) == 1:\n\t\tpr[differ[0][0]] = unused[0]\n\telif len(differ) == 2:\n\t\tif differ[0][1] in unused and differ[0][2] in unused and differ[1][1] in unused and differ[1][2] in unused: #whatever is fine\n\t\t\tpr[differ[0][0]] = unused[0]\n\t\t\tpr[differ[1][0]] = unused[1]\n\t\tif differ[1][1] in unused and differ[1][2] in unused:\n\t\t\tif not differ[0][1] in unused:\n\t\t\t\tpr[differ[0][0]] = differ[0][2]\n\t\t\t\tunused.remove(differ[0][2])\n\t\t\t\tpr[differ[1][0]] = unused[0]\n\t\t\telse:\n\t\t\t\tpr[differ[0][0]] = differ[0][1]\n\t\t\t\tunused.remove(differ[0][1])\n\t\t\t\tpr[differ[1][0]] = unused[0]\n\t\telse:\n\t\t\tif not differ[1][1] in unused:\n\t\t\t\tpr[differ[1][0]] = differ[1][2]\n\t\t\t\tunused.remove(differ[1][2])\n\t\t\t\tpr[differ[0][0]] = unused[0]\n\t\t\telse:\n\t\t\t\tpr[differ[1][0]] = differ[1][1]\n\t\t\t\tunused.remove(differ[1][1])\n\t\t\t\tpr[differ[0][0]] = unused[0]\n\telse:\n\t\tpr = list(range(1, n + 1)) # bad input\n\n\treturn pr\n\ndef find_unused(n, used):\n\tunused = []\n\tfor i in range(1, n + 1):\n\t\tif not i in used:\n\t\t\tunused.append(i)\n\treturn unused\n\n\ndef __starting_point():\n\tn = int(input().strip())\n\tar = list(map(int, input().strip().split()))\n\tbr = list(map(int, input().strip().split()))\n\tprint((\" \".join(map(str, meteors(n, ar, br)))));\n\n__starting_point()\n", "n = int(input())\nl1 = list(map(int,input().split()))\nl2 = list(map(int,input().split()))\n\ntot = 0\n\ndone = [False for i in range(n+1)]\n\nfor i in range(n):\n\tif(l1[i]!=l2[i]):\n\t\ttot+=1\n\telse:\n\t\tdone[l1[i]] = True\n\nans = []\nif(tot==1):\n\tfor i in range(n):\n\t\tif(l1[i]==l2[i]):\n\t\t\tans.append(l2[i])\n\t\telse:\n\t\t\tfor j in range(1,n+1):\n\t\t\t\tif(done[j]==False and l1[i]!=j and l2[i]!=j):\n\t\t\t\t\tans.append(j)\n\t\t\t\t\tbreak\nelif(tot==2):\n\tl = []\n\tfor i in range(n):\n\t\tif(l1[i]==l2[i]):\n\t\t\tans.append(l2[i])\n\t\telse:\n\t\t\tans.append(0)\n\t\t\tl.append(i)\n\n\tok = True\n\t_ans = ans\n\tfor i in range(1,n+1):\n\t\tif(done[i]==False):\n\t\t\tif(ok==True):\n\t\t\t\t_ans[l[0]] = i\n\t\t\t\tok = False\n\t\t\telse:\n\t\t\t\t_ans[l[1]] = i\n\tdiff1 = 0\n\tdiff2 = 0\n\tfor i in range(n):\n\t\tif(_ans[i]!=l1[i]):\n\t\t\tdiff1+=1\n\t\tif(_ans[i]!=l2[i]):\n\t\t\tdiff2+=1\n\tif(diff1==1 and diff2==1):\n\t\tans = _ans\n\telse:\n\t\tok = True\n\t\t_ans = ans\n\t\tfor i in range(1,n+1):\n\t\t\tif(done[i]==False):\n\t\t\t\tif(ok==True):\n\t\t\t\t\t_ans[l[1]] = i\n\t\t\t\t\tok = False\n\t\t\t\telse:\n\t\t\t\t\t_ans[l[0]] = i\n\t\tans = _ans\nfor i in ans:\n\t\tprint(i,end=\" \")\n", "n = int(input())\na = input().split()\nb = input().split()\na = [int(i) for i in a]\nb = [int(i) for i in b]\n\ncounter = [-1 for i in range(n)]\n\nk_a = 0\nk_a_i1, k_a_i2 = -1, -1\n\nfor i in range(n):\n\tif counter[a[i] - 1] != -1:\n\t\tk_a = a[i]\n\t\tk_a_i1, k_a_i2 = counter[a[i] - 1], i\n\tcounter[a[i] - 1] = i\ng_a = counter.index(-1) + 1\n\ncounter = [-1 for i in range(n)]\n\nk_b = 0\nk_b_i1, k_b_i2 = -1, -1\n\nfor i in range(n):\n\tif counter[b[i] - 1] != -1:\n\t\tk_b = b[i]\n\t\tk_b_i1, k_b_i2 = counter[b[i] - 1], i\n\tcounter[b[i] - 1] = i\n\ng_b = counter.index(-1) + 1\n\nres = a.copy()\nres[k_a_i1] = g_a\n\nc_a = 0\nc_b = 0\n\nfor i in range(n):\n\tif res[i] != a[i]:\n\t\tc_a += 1\n\tif res[i] != b[i]:\n\t\tc_b += 1\n\nif c_a == 1 and c_b == 1:\n\tout = ''\n\tfor i in res:\n\t\tout += str(i) + ' '\n\tprint(out)\n\treturn\n\nres = a.copy()\nres[k_a_i2] = g_a\n\nc_a = 0\nc_b = 0\n\nfor i in range(n):\n\tif res[i] != a[i]:\n\t\tc_a += 1\n\tif res[i] != b[i]:\n\t\tc_b += 1\n\nif c_a == 1 and c_b == 1:\n\tout = ''\n\tfor i in res:\n\t\tout += str(i) + ' '\n\tprint(out)\n\treturn\n\nres = a.copy()\nres[k_b_i1] = g_b\n\nc_a = 0\nc_b = 0\n\nfor i in range(n):\n\tif res[i] != a[i]:\n\t\tc_a += 1\n\tif res[i] != b[i]:\n\t\tc_b += 1\n\nif c_a == 1 and c_b == 1:\n\tout = ''\n\tfor i in res:\n\t\tout += str(i) + ' '\n\tprint(out)\n\treturn\n\nres = a.copy()\nres[k_b_i2] = g_b\n\nc_a = 0\nc_b = 0\n\nfor i in range(n):\n\tif res[i] != a[i]:\n\t\tc_a += 1\n\tif res[i] != b[i]:\n\t\tc_b += 1\n\nif c_a == 1 and c_b == 1:\n\tout = ''\n\tfor i in res:\n\t\tout += str(i) + ' '\n\tprint(out)\n\treturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def __starting_point():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tb = list(map(int, input().split()))\n\n\tans_list = [-3 for i in range(n)]\n\n\tmismatch_count = 0\n\tans_set = set([])\n\tfor i in range(0, n):\n\t\tif a[i] == b[i]:\n\t\t\tans_list[i] = a[i]\n\t\t\tans_set.add(a[i])\n\t\telse:\n\t\t\tmismatch_count += 1\n\t\t\tans_list[i] += mismatch_count\n\n\tone_to_n_set = set([i for i in range(1, n + 1)])\n\tadd_set = one_to_n_set.difference(ans_set)\n\tif mismatch_count == 1:\n\t\tans_list[ans_list.index(-2)] = add_set.pop()\n\telse:\n\t\ttmp1 = ans_list.index(-2)\n\t\ttmp2 = ans_list.index(-1)\n\t\tele1 = add_set.pop()\n\t\tele2 = add_set.pop()\n\t\tif ele1 == a[tmp1] and ele2 == b[tmp2]:\n\t\t\tans_list[tmp1] = ele1\n\t\t\tans_list[tmp2] = ele2\n\t\telif ele1 == a[tmp2] and ele2 == b[tmp1]:\n\t\t\tans_list[tmp2] = ele1\n\t\t\tans_list[tmp1] = ele2\n\t\telif ele2 == a[tmp1] and ele1 == b[tmp2]:\n\t\t\tans_list[tmp1] = ele2\n\t\t\tans_list[tmp2] = ele1\n\t\telif ele2 == a[tmp2] and ele1 == b[tmp1]:\n\t\t\tans_list[tmp2] = ele2\n\t\t\tans_list[tmp1] = ele1\n\n\tfor i in range(0, n):\n\t\tprint(ans_list[i], end=' ')\n\n__starting_point()\n", "size = int(input())\na = [int(elem) for elem in input().split()]\nb = [int(elem) for elem in input().split()]\n\nright = []\na_remain = []\nb_remain = []\ncand = []\nfor idx in range(size):\n\tif a[idx] == b[idx]:\n\t\tright.append(a[idx])\n\telse:\n\t\tright.append(0)\n\t\ta_remain.append(a[idx])\n\t\tb_remain.append(b[idx])\n\nfor elem in range(1, size+1):\n\tif elem not in right:\n\t\tcand.append(elem)\n\ndef diff(seq_a, seq_b):\n\tif (seq_a[0] == seq_b[0] and seq_a[1] != seq_b[1]) or \\\n\t   (seq_a[0] != seq_b[0] and seq_a[1] == seq_b[1]):\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef replace(original, pattern):\n\tpos = 0\n\tfor idx, elem in enumerate(original):\n\t\tif elem == 0:\n\t\t\toriginal[idx] = pattern[pos]\n\t\t\tpos += 1\n\treturn [str(elem) for elem in original]\n\nif len(cand) == 1:\n\tprint(' '.join(replace(right, cand)))\nelif diff(cand, a_remain) and diff(cand, b_remain):\n\tprint(' '.join(replace(right, cand)))\nelse:\n\tcand.reverse()\n\tprint(' '.join(replace(right, cand)))\n", "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ncounta = Counter(a)\ncountb = Counter(b)\nab = [0]*n\nfor i in range(n):\n\tif a[i] == b[i]:  ab[i] =a[i]\n\n#print(ab)\ntest = set(list(range(1,n+1)))\n#abtup = set([])\nfor i in range(n):\n\tsetab = set(ab)\n\trealtest = test - setab\n\n\tif ab[i] == 0:\n\t\tif a[i] in setab and b[i] in setab:\n\t\t\tif len(realtest) != 0:\n\t\t\t\tab[i] = realtest.pop()\n\t\t\n\t\telif a[i] in setab:\n\t\t\tab[i] = b[i]\n\t\telif b[i] in setab:\n\t\t\tab[i] = a[i]\n\t\telse:\n\t\t\tif counta[a[i]] > 1 and countb[b[i]] > 1:\n\t\t\t\tif len(realtest) != 0:\n\t\t\t\t\tab[i] = realtest.pop()\n\t\t\t\telse:\n\t\t\t\t\tab[i] = a[i]\n\t\t\telif counta[a[i]] > 1 and not countb[b[i]] > 1:\n\t\t\t\tab[i] = b[i]\n\t\t\telif not counta[a[i]] > 1 and countb[b[i]] > 1:\n\t\t\t\tab[i] = a[i]\n\t\t\t\nprint(\" \".join(list(map(str,ab))))\n\n\n\n\n", "import sys\nread=lambda:sys.stdin.readline().rstrip()\nreadi=lambda:int(sys.stdin.readline())\nwriteln=lambda x:sys.stdout.write(str(x)+\"\\n\")\nwrite=lambda x:sys.stdout.write(x)\nN = readi()\nA = list(map(int, read().split()))\nB = list(map(int, read().split()))\nncntA = [0]*(N+1)\nncntB = [0]*(N+1)\ndiff = []\nfor i in range(N):\n\tif A[i] != B[i]:\n\t\tdiff.append(i)\n\tncntA[A[i]] += 1\n\tncntB[B[i]] += 1\n\nif len(diff) == 2:\n\tP = list(A)\n\tP[diff[0]] = B[diff[0]]\n\t\n\tncntP = [0]*(N+1)\n\tfor i in range(N):\n\t\tncntP[P[i]] += 1\n\n\tflag = False\n\tfor i in range(1, N+1):\n\t\tif ncntP[i] == 0:\n\t\t\tflag = True\n\t\t\tbreak\n\tif flag:\n\t\tP = list(A)\n\t\tP[diff[1]] = B[diff[1]]\n\n\twriteln(' '.join(str(c) for c in P))\nelse:\n\tk = -1\n\tfor i in range(1, N+1):\n\t\tif ncntA[i] == 0 and ncntB[i] == 0:\n\t\t\tk = i\n\t\t\tbreak\n\tP = list(A)\n\tP[diff[0]] = k\n\twriteln(' '.join(str(c) for c in P))\n", "import sys\n\ninput = sys.stdin.readline\n\nn = int(input())\n\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nperm = [-1 for i in range(n)]\navail = set()\n\nfor i in range(1,n+1):\n\tavail.add(i)\n\nfor i in range(n):\n\tif a[i] == b[i]:\n\t\tavail.remove(a[i])\n\t\tperm[i] = a[i]\n\ndef difference(seq1, seq2):\n\tcount = 0\n\tfor i in range(len(seq1)):\n\t\tif seq1[i] != seq2[i]:\n\t\t\tcount += 1\n\t\tif count > 1:\n\t\t\treturn 0\n\treturn 1\n\ndef solve(seq, curravail):\n\tif not curravail:\n\t\tif difference(seq, a) == 1 and difference(seq, b) == 1:\n\t\t\treturn seq\n\tfor i in range(len(seq)):\n\t\tif (seq[i] == -1):\n\t\t\tfor item in list(curravail):\n\t\t\t\tnewseq = list(seq)\n\t\t\t\tnewseq[i] = item\n\t\t\t\tnewset = set(curravail)\n\t\t\t\tnewset.remove(item)\n\t\t\t\tif solve(newseq, newset):\n\t\t\t\t\treturn solve(newseq, newset)\n\nprint(\" \".join(map(str,solve(perm,avail))))\n", "n=int(input())\na=[int(x) for x in input().split()]\nb=[int(x) for x in input().split()]\nc=[0]*n\nd=set([x for x in range(1,n+1)])\nfor x in range(n):\n\tif a[x]==b[x]:\n\t\tc[x]=a[x]\n\t\td.remove(a[x])\n\telif a.count(a[x])+b.count(a[x])==1:\n\t\tc[x]=a[x]\n\t\td.remove(a[x])\n\telif a.count(b[x])+b.count(b[x])==1:\n\t\tc[x]=b[x]\n\t\td.remove(b[x])\nif(len(d))==0:\n\tty = str(c)[1:-1].replace(\",\", \"\")\n\tprint(ty)\nif len(d)==1:\n\tc[c.index(0)]=d.pop()\n\tty=str(c)[1:-1].replace(\",\",\"\")\n\tprint(ty)\nelif len(d)==2:\n\tc[c.index(0)] = d.pop()\n\tc[c.index(0)] = d.pop()\n\tty = str(c)[1:-1].replace(\",\", \"\")\n\tprint(ty)\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ncnt = 0\nnot_equals = []\nfor i in range(n):\n\tif a[i] != b[i]:\n\t\tnot_equals.append(i)\nif len(not_equals) == 1:\n\tx = 1\n\twhile x <= n and x in a and x in b:\n\t\tx += 1\n\ta[not_equals[0]] = x\n\tprint(*a)\nelse:\n\ta2 = [elem for elem in a]\n\ta2[not_equals[0]] = b[not_equals[0]]\n\tif sorted(a2) == [i for i in range(1, n + 1)]:\n\t\tprint(*a2)\n\telse:\n\t\ta2 = [elem for elem in a]\n\t\ta2[not_equals[1]] = b[not_equals[1]]\n\t\tprint(*a2)\n"], "id": "id6879"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6879", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["sengoku", 0], ["still", 0], ["remembers", 0], ["the", 0], ["mysterious", 0], ["colourful", 0], ["meteoroids", 0], ["she", 1], ["discovered", 1], ["with", 1], ["lala", 1], ["chan", 1], ["when", 1], ["they", 1], ["were", 1], ["little", 1], ["in", 1], ["particular", 1], ["one", 1], ["of", 1], ["the", 1], ["nights", 1], ["impressed", 1], ["her", 1], ["deeply", 1], ["giving", 1], ["her", 1], ["the", 1], ["illusion", 1], ["that", 1], ["all", 1], ["her", 0], ["fancies", 0], ["would", 0], ["be", 0], ["realized", 0], ["on", 0], ["that", 0], ["night", 0], ["sengoku", 0], ["constructed", 0], ["a", 0], ["permutation", 0], ["p", 0], ["1", 0], ["p", 0], ["2", 0], ["p", 0], ["n", 0], ["of", 1], ["integers", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["inclusive", 1], ["with", 1], ["each", 1], ["integer", 1], ["representing", 1], ["a", 1], ["colour", 1], ["wishing", 1], ["for", 1], ["the", 1], ["colours", 1], ["to", 1], ["see", 1], ["in", 1], ["the", 1], ["coming", 1], ["meteor", 1], ["outburst", 1], ["two", 1], ["incredible", 1], ["outbursts", 1], ["then", 0], ["arrived", 0], ["each", 0], ["with", 0], ["n", 0], ["meteorids", 0], ["colours", 0], ["of", 0], ["which", 0], ["being", 0], ["integer", 0], ["sequences", 0], ["a", 39], ["1", 8], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["and", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["b", 0], ["n", 0], ["respectively", 0], ["meteoroids", 0], ["colours", 1], ["were", 1], ["also", 1], ["between", 1], ["1", 1], ["and", 1], ["n", 1], ["inclusive", 1], ["and", 1], ["the", 1], ["two", 1], ["sequences", 1], ["were", 1], ["not", 1], ["identical", 1], ["that", 1], ["is", 1], ["at", 0], ["least", 0], ["one", 0], ["i", 0], ["1", 0], ["≤", 0], ["i", 0], ["≤", 0], ["n", 0], ["exists", 0], ["such", 0], ["that", 0], ["a", 0], ["i", 0], ["≠", 0], ["b", 0], ["i", 0], ["holds", 1], ["well", 1], ["she", 1], ["almost", 1], ["had", 1], ["it", 1], ["all", 1], ["—", 1], ["each", 1], ["of", 0], ["the", 0], ["sequences", 0], ["a", 0], ["and", 0], ["b", 0], ["matched", 0], ["exactly", 0], ["n", 0], ["1", 0], ["elements", 0], ["in", 0], ["sengoku", 0], ["s", 0], ["permutation", 1], ["in", 1], ["other", 1], ["words", 1], ["there", 0], ["is", 0], ["exactly", 0], ["one", 0], ["i", 0], ["1", 0], ["≤", 0], ["i", 0], ["≤", 0], ["n", 0], ["such", 0], ["that", 0], ["a", 0], ["i", 0], ["≠", 0], ["p", 0], ["i", 0], ["and", 0], ["exactly", 0], ["one", 0], ["j", 0], ["1", 0], ["≤", 0], ["j", 0], ["≤", 0], ["n", 0], ["such", 0], ["that", 0], ["b", 0], ["j", 0], ["≠", 0], ["p", 0], ["j", 0], ["for", 1], ["now", 1], ["sengoku", 1], ["is", 1], ["able", 1], ["to", 1], ["recover", 1], ["the", 1], ["actual", 1], ["colour", 1], ["sequences", 1], ["a", 1], ["and", 1], ["b", 1], ["through", 1], ["astronomical", 1], ["records", 1], ["but", 1], ["her", 1], ["wishes", 1], ["have", 1], ["been", 1], ["long", 1], ["forgotten", 1], ["you", 1], ["are", 1], ["to", 0], ["reconstruct", 0], ["any", 0], ["possible", 0], ["permutation", 0], ["sengoku", 0], ["could", 0], ["have", 0], ["had", 0], ["on", 0], ["that", 0], ["night", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["a", 1], ["positive", 1], ["integer", 0], ["n", 0], ["2", 0], ["≤", 0], ["n", 0], ["≤", 0], ["1", 0], ["000", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["sengoku", 0], ["s", 0], ["permutation", 1], ["being", 1], ["the", 1], ["length", 1], ["of", 1], ["both", 1], ["meteor", 1], ["outbursts", 1], ["at", 0], ["the", 0], ["same", 0], ["time", 0], ["the", 1], ["second", 1], ["line", 0], ["contains", 0], ["n", 0], ["space", 0], ["separated", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 1], ["n", 1], ["—", 1], ["the", 1], ["sequence", 1], ["of", 1], ["colours", 1], ["in", 1], ["the", 0], ["first", 0], ["meteor", 0], ["outburst", 0], ["the", 0], ["third", 0], ["line", 0], ["contains", 0], ["n", 0], ["space", 0], ["separated", 0], ["integers", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["b", 0], ["n", 0], ["1", 0], ["≤", 0], ["b", 0], ["i", 0], ["≤", 1], ["n", 1], ["—", 1], ["the", 1], ["sequence", 1], ["of", 1], ["colours", 1], ["in", 1], ["the", 1], ["second", 1], ["meteor", 1], ["outburst", 1], ["at", 0], ["least", 0], ["one", 0], ["i", 0], ["1", 0], ["≤", 0], ["i", 0], ["≤", 0], ["n", 0], ["exists", 0], ["such", 0], ["that", 0], ["a", 0], ["i", 0], ["≠", 0], ["b", 0], ["i", 0], ["holds", 0], ["output", 0], ["output", 0], ["n", 0], ["space", 0], ["separated", 0], ["integers", 0], ["p", 0], ["1", 0], ["p", 0], ["2", 0], ["p", 0], ["n", 0], ["denoting", 1], ["a", 1], ["possible", 1], ["permutation", 1], ["sengoku", 1], ["could", 1], ["have", 1], ["had", 1], ["if", 1], ["there", 1], ["are", 1], ["more", 1], ["than", 1], ["one", 1], ["possible", 1], ["answer", 0], ["output", 0], ["any", 0], ["one", 0], ["of", 0], ["them", 0], ["input", 0], ["guarantees", 0], ["that", 0], ["such", 0], ["permutation", 0], ["exists", 0], ["examples", 0], ["input", 0], ["5", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["3", 0], ["1", 0], ["2", 0], ["5", 0], ["4", 0], ["5", 0], ["output", 0], ["1", 0], ["2", 0], ["5", 0], ["4", 0], ["3", 0], ["input", 0], ["5", 0], ["4", 0], ["4", 0], ["2", 0], ["3", 0], ["1", 0], ["5", 0], ["4", 0], ["5", 0], ["3", 0], ["1", 0], ["output", 0], ["5", 0], ["4", 0], ["2", 0], ["3", 0], ["1", 0], ["input", 0], ["4", 0], ["1", 0], ["1", 0], ["3", 0], ["4", 0], ["1", 0], ["4", 0], ["3", 0], ["4", 0], ["output", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["sample", 0], ["both", 0], ["1", 0], ["2", 0], ["5", 0], ["4", 0], ["3", 0], ["and", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["are", 0], ["acceptable", 0], ["outputs", 0], ["in", 0], ["the", 0], ["second", 0], ["sample", 0], ["5", 0], ["4", 0], ["2", 0], ["3", 0], ["1", 0], ["is", 0], ["the", 0], ["only", 0], ["permutation", 0], ["to", 0], ["satisfy", 0], ["the", 0], ["constraints", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3410526315789474, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.33715924426450744, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6365503080082136, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6365503080082136, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3389473684210526, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.33710526315789474, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6365503080082136, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6365503080082136, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["cnt", 0], ["1", 0], ["if", 0], ["cnt", 0], ["1", 0], ["done", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["try", 0], ["done", 0], ["remove", 0], ["a", 0], ["i", 0], ["except", 0], ["pass", 0], ["else", 0], ["x", 0], ["i", 0], ["try", 0], ["done", 0], ["remove", 0], ["a", 0], ["i", 0], ["except", 0], ["pass", 0], ["try", 0], ["done", 0], ["remove", 0], ["b", 0], ["i", 0], ["except", 0], ["pass", 0], ["arr", 0], ["a", 0], ["arr", 0], ["x", 0], ["done", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["arr", 0], ["print", 0], ["i", 0], ["end", 0], ["else", 0], ["arr", 0], ["a", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["pass", 0], ["else", 0], ["if", 0], ["x", 0], ["1", 0], ["x", 0], ["i", 0], ["else", 0], ["y", 0], ["i", 0], ["br", 0], ["arr", 0], ["arr", 0], ["x", 0], ["b", 0], ["x", 0], ["br", 0], ["y", 0], ["b", 0], ["y", 0], ["if", 0], ["len", 0], ["set", 0], ["br", 0], ["n", 0], ["arr", 0], ["br", 0], ["for", 0], ["i", 0], ["in", 0], ["arr", 0], ["print", 0], ["i", 0], ["end", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["p1", 0], ["p2", 0], ["p3", 0], ["p4", 0], ["cur", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["for", 0], ["p", 0], ["in", 0], ["p1", 0], ["p2", 0], ["p3", 0], ["p4", 0], ["p", 0], ["append", 0], ["a", 0], ["i", 0], ["elif", 0], ["cur", 0], ["0", 0], ["p1", 0], ["append", 0], ["a", 0], ["i", 0], ["p2", 0], ["append", 0], ["a", 0], ["i", 0], ["p3", 0], ["append", 0], ["b", 0], ["i", 0], ["p4", 0], ["append", 0], ["b", 0], ["i", 0], ["cur", 0], ["1", 0], ["else", 0], ["p1", 0], ["append", 0], ["a", 0], ["i", 0], ["p2", 0], ["append", 0], ["b", 0], ["i", 0], ["p3", 0], ["append", 0], ["a", 0], ["i", 0], ["p4", 0], ["append", 0], ["b", 0], ["i", 0], ["for", 0], ["p", 0], ["in", 0], ["p1", 0], ["p2", 0], ["p3", 0], ["p4", 0], ["if", 0], ["len", 0], ["set", 0], ["p", 0], ["n", 0], ["print", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["p", 0], ["return", 0], ["for", 0], ["p", 0], ["in", 0], ["p1", 0], ["p2", 0], ["p3", 0], ["p4", 0], ["if", 0], ["len", 0], ["set", 0], ["p", 0], ["n", 0], ["1", 0], ["distinct", 0], ["0", 0], ["dpos", 0], ["0", 0], ["for", 0], ["i", 0], ["x", 0], ["y", 0], ["in", 0], ["enumerate", 0], ["zip", 0], ["p", 0], ["a", 0], ["if", 0], ["x", 0], ["y", 0], ["distinct", 0], ["1", 0], ["dpos", 0], ["i", 0], ["if", 0], ["distinct", 0], ["1", 0], ["unused", 0], ["1", 0], ["while", 0], ["unused", 0], ["in", 0], ["p", 0], ["unused", 0], ["1", 0], ["pp", 0], ["list", 0], ["p", 0], ["pp", 0], ["dpos", 0], ["unused", 0], ["print", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["pp", 0], ["return", 0], ["assert", 0], ["false", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["used", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["idx", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["ans", 0], ["i", 0], ["a", 0], ["i", 0], ["used", 0], ["a", 0], ["i", 0], ["true", 0], ["else", 0], ["idx", 0], ["append", 0], ["i", 0], ["unused", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["used", 0], ["i", 0], ["unused", 0], ["append", 0], ["i", 0], ["if", 0], ["len", 0], ["unused", 0], ["1", 0], ["ans", 0], ["idx", 0], ["0", 0], ["unused", 0], ["0", 0], ["elif", 0], ["a", 0], ["idx", 0], ["0", 0], ["unused", 0], ["0", 0], ["and", 0], ["a", 0], ["idx", 0], ["1", 0], ["unused", 0], ["1", 0], ["or", 0], ["b", 0], ["idx", 0], ["0", 0], ["unused", 0], ["0", 0], ["and", 0], ["b", 0], ["idx", 0], ["1", 0], ["unused", 0], ["1", 0], ["ans", 0], ["idx", 0], ["0", 0], ["unused", 0], ["1", 0], ["ans", 0], ["idx", 0], ["1", 0], ["unused", 0], ["0", 0], ["else", 0], ["ans", 0], ["idx", 0], ["0", 0], ["unused", 0], ["0", 0], ["ans", 0], ["idx", 0], ["1", 0], ["unused", 0], ["1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["diff", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["diff", 0], ["append", 0], ["i", 0], ["sa", 0], ["true", 0], ["sb", 0], ["true", 0], ["di", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["di", 0], ["append", 0], ["i", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["diff", 0], ["s", 0], ["append", 0], ["a", 0], ["i", 0], ["di", 0], ["remove", 0], ["a", 0], ["i", 0], ["else", 0], ["s", 0], ["append", 0], ["0", 0], ["if", 0], ["len", 0], ["diff", 0], ["1", 0], ["s", 0], ["diff", 0], ["0", 0], ["di", 0], ["0", 0], ["else", 0], ["if", 0], ["a", 0], ["diff", 0], ["0", 0], ["in", 0], ["di", 0], ["and", 0], ["b", 0], ["diff", 0], ["1", 0], ["in", 0], ["di", 0], ["s", 0], ["diff", 0], ["0", 0], ["a", 0], ["diff", 0], ["0", 0], ["s", 0], ["diff", 0], ["1", 0], ["b", 0], ["diff", 0], ["1", 0], ["else", 0], ["s", 0], ["diff", 0], ["0", 0], ["b", 0], ["diff", 0], ["0", 0], ["s", 0], ["diff", 0], ["1", 0], ["a", 0], ["diff", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["s", 0], ["i", 0], ["end", 0], ["import", 0], ["math", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["res", 0], ["append", 0], ["i", 0], ["all", 0], ["numbers", 0], ["set", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["seta", 0], ["set", 0], ["a", 0], ["setb", 0], ["set", 0], ["b", 0], ["non", 0], ["a", 0], ["list", 0], ["all", 0], ["numbers", 0], ["seta", 0], ["0", 0], ["non", 0], ["b", 0], ["list", 0], ["all", 0], ["numbers", 0], ["setb", 0], ["0", 0], ["dpa", 0], ["double", 0], ["positions", 0], ["a", 0], ["dpb", 0], ["double", 0], ["positions", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["dpa", 0], ["temp", 0], ["res", 0], ["i", 0], ["res", 0], ["i", 0], ["non", 0], ["a", 0], ["if", 0], ["diff", 0], ["res", 0], ["a", 0], ["1", 0], ["and", 0], ["diff", 0], ["res", 0], ["b", 0], ["1", 0], ["print", 0], ["res", 0], ["return", 0], ["res", 0], ["i", 0], ["temp", 0], ["for", 0], ["i", 0], ["in", 0], ["dpb", 0], ["temp", 0], ["res", 0], ["i", 0], ["res", 0], ["i", 0], ["non", 0], ["b", 0], ["if", 0], ["diff", 0], ["res", 0], ["b", 0], ["1", 0], ["and", 0], ["diff", 0], ["res", 0], ["a", 0], ["1", 0], ["print", 0], ["res", 0], ["return", 0], ["res", 0], ["i", 0], ["temp", 0], ["def", 0], ["diff", 0], ["a", 0], ["b", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["c", 0], ["1", 0], ["return", 0], ["c", 0], ["def", 0], ["double", 0], ["positions", 0], ["a", 0], ["count", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["res", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["count", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["return", 0], ["count", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["count", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["ai", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bi", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ci", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ci", 0], ["i", 0], ["ai", 0], ["i", 0], ["nums", 0], ["0", 0], ["n", 0], ["ind", 0], ["0", 0], ["2", 0], ["j", 0], ["0", 0], ["num", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["nums", 0], ["ai", 0], ["i", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["nums", 0], ["ai", 0], ["i", 0], ["1", 0], ["2", 0], ["ind", 0], ["j", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["nums", 0], ["i", 0], ["0", 0], ["num", 0], ["i", 0], ["1", 0], ["ci", 0], ["ind", 0], ["0", 0], ["num", 0], ["dif", 0], ["0", 0], ["dif2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ci", 0], ["i", 0], ["bi", 0], ["i", 0], ["dif", 0], ["1", 0], ["if", 0], ["ci", 0], ["i", 0], ["ai", 0], ["i", 0], ["dif2", 0], ["1", 0], ["if", 0], ["dif", 0], ["1", 0], ["or", 0], ["dif2", 0], ["1", 0], ["ci", 0], ["ind", 0], ["0", 0], ["ai", 0], ["ind", 0], ["0", 0], ["ci", 0], ["ind", 0], ["1", 0], ["num", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["ci", 0], ["i", 0], ["end", 0], ["import", 0], ["sys", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["items", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["coords", 0], ["p", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["items", 0], ["remove", 0], ["a", 0], ["i", 0], ["p", 0], ["i", 0], ["a", 0], ["i", 0], ["else", 0], ["coords", 0], ["append", 0], ["i", 0], ["items", 0], ["list", 0], ["items", 0], ["if", 0], ["len", 0], ["coords", 0], ["1", 0], ["p", 0], ["coords", 0], ["0", 0], ["items", 0], ["0", 0], ["else", 0], ["adelta", 0], ["0", 0], ["bdelta", 0], ["0", 0], ["for", 0], ["k", 0], ["coord", 0], ["in", 0], ["enumerate", 0], ["coords", 0], ["if", 0], ["items", 0], ["k", 0], ["a", 0], ["coord", 0], ["adelta", 0], ["1", 0], ["if", 0], ["items", 0], ["k", 0], ["b", 0], ["coord", 0], ["bdelta", 0], ["1", 0], ["p", 0], ["coord", 0], ["items", 0], ["k", 0], ["if", 0], ["not", 0], ["adelta", 0], ["1", 0], ["and", 0], ["bdelta", 0], ["1", 0], ["adelta", 0], ["0", 0], ["bdelta", 0], ["0", 0], ["for", 0], ["k", 0], ["coord", 0], ["in", 0], ["enumerate", 0], ["reversed", 0], ["coords", 0], ["if", 0], ["items", 0], ["k", 0], ["a", 0], ["coord", 0], ["adelta", 0], ["1", 0], ["if", 0], ["items", 0], ["k", 0], ["b", 0], ["coord", 0], ["bdelta", 0], ["1", 0], ["p", 0], ["coord", 0], ["items", 0], ["k", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["join", 0], ["map", 0], ["str", 0], ["p", 0], ["n", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bad", 0], ["def", 0], ["isok", 0], ["tmp", 0], ["s", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["tmp", 0], ["s", 0], ["add", 0], ["tmp", 0], ["i", 0], ["return", 0], ["len", 0], ["s", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["bad", 0], ["append", 0], ["i", 0], ["if", 0], ["len", 0], ["bad", 0], ["1", 0], ["k", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["i", 0], ["bad", 0], ["0", 0], ["k", 0], ["a", 0], ["i", 0], ["1", 0], ["rs", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["k", 0], ["i", 0], ["rs", 0], ["i", 0], ["break", 0], ["tmp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["i", 0], ["bad", 0], ["0", 0], ["tmp", 0], ["append", 0], ["a", 0], ["i", 0], ["else", 0], ["tmp", 0], ["append", 0], ["rs", 0], ["print", 0], ["tmp", 0], ["else", 0], ["tmp", 0], ["tmp1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["i", 0], ["bad", 0], ["0", 0], ["tmp", 0], ["append", 0], ["b", 0], ["i", 0], ["tmp1", 0], ["append", 0], ["a", 0], ["i", 0], ["else", 0], ["tmp", 0], ["append", 0], ["a", 0], ["i", 0], ["tmp1", 0], ["append", 0], ["b", 0], ["i", 0], ["if", 0], ["isok", 0], ["tmp", 0], ["print", 0], ["tmp", 0], ["else", 0], ["print", 0], ["tmp1", 0], ["from", 0], ["operator", 0], ["import", 0], ["eq", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["al", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["bl", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["al", 0], ["a", 0], ["i", 0], ["1", 0], ["true", 0], ["bl", 0], ["b", 0], ["i", 0], ["1", 0], ["true", 0], ["for", 0], ["i", 0], ["e", 0], ["in", 0], ["enumerate", 0], ["al", 0], ["if", 0], ["not", 0], ["e", 0], ["ak", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["e", 0], ["in", 0], ["enumerate", 0], ["bl", 0], ["if", 0], ["not", 0], ["e", 0], ["bk", 0], ["i", 0], ["1", 0], ["aa", 0], ["e", 0], ["i", 0], ["for", 0], ["i", 0], ["e", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["bb", 0], ["e", 0], ["i", 0], ["for", 0], ["i", 0], ["e", 0], ["in", 0], ["enumerate", 0], ["b", 0], ["aa", 0], ["sort", 0], ["bb", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["aa", 0], ["i", 0], ["0", 0], ["aa", 0], ["i", 0], ["1", 0], ["0", 0], ["amis", 0], ["aa", 0], ["i", 0], ["0", 0], ["a1", 0], ["aa", 0], ["i", 0], ["1", 0], ["1", 0], ["a2", 0], ["aa", 0], ["i", 0], ["1", 0], ["if", 0], ["bb", 0], ["i", 0], ["0", 0], ["bb", 0], ["i", 0], ["1", 0], ["0", 0], ["bmis", 0], ["bb", 0], ["i", 0], ["0", 0], ["b1", 0], ["bb", 0], ["i", 0], ["1", 0], ["1", 0], ["b2", 0], ["bb", 0], ["i", 0], ["1", 0], ["for", 0], ["ay", 0], ["in", 0], ["a1", 0], ["a2", 0], ["for", 0], ["by", 0], ["in", 0], ["b1", 0], ["b2", 0], ["reta", 0], ["list", 0], ["a", 0], ["reta", 0], ["ay", 0], ["ak", 0], ["retb", 0], ["list", 0], ["b", 0], ["retb", 0], ["by", 0], ["bk", 0], ["if", 0], ["all", 0], ["map", 0], ["eq", 0], ["reta", 0], ["retb", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["reta", 0], ["return", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["used", 0], ["false", 0], ["n", 0], ["1", 0], ["answer", 0], ["none", 0], ["n", 0], ["for", 0], ["i", 0], ["ai", 0], ["bi", 0], ["in", 0], ["enumerate", 0], ["zip", 0], ["a", 0], ["b", 0], ["if", 0], ["ai", 0], ["bi", 0], ["and", 0], ["not", 0], ["used", 0], ["ai", 0], ["answer", 0], ["i", 0], ["ai", 0], ["used", 0], ["ai", 0], ["true", 0], ["perm", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["ind", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["answer", 0], ["if", 0], ["x", 0], ["is", 0], ["not", 0], ["none", 0], ["perm", 0], ["remove", 0], ["x", 0], ["else", 0], ["ind", 0], ["append", 0], ["i", 0], ["perm", 0], ["list", 0], ["perm", 0], ["if", 0], ["len", 0], ["perm", 0], ["1", 0], ["answer", 0], ["ind", 0], ["0", 0], ["perm", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["answer", 0], ["print", 0], ["x", 0], ["end", 0], ["return", 0], ["i", 0], ["j", 0], ["ind", 0], ["x", 0], ["y", 0], ["perm", 0], ["count", 0], ["a", 0], ["i", 0], ["x", 0], ["b", 0], ["i", 0], ["x", 0], ["a", 0], ["j", 0], ["y", 0], ["b", 0], ["j", 0], ["y", 0], ["if", 0], ["count", 0], ["2", 0], ["answer", 0], ["i", 0], ["x", 0], ["answer", 0], ["j", 0], ["y", 0], ["else", 0], ["answer", 0], ["i", 0], ["y", 0], ["answer", 0], ["j", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["answer", 0], ["print", 0], ["x", 0], ["end", 0], ["def", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["input", 0], ["txt", 0], ["main", 0], ["starting", 0], ["point", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["def", 0], ["rint", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["lines", 0], ["stdin", 0], ["readlines", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["rint", 0], ["b", 0], ["list", 0], ["rint", 0], ["ii", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["ii", 0], ["append", 0], ["i", 0], ["if", 0], ["len", 0], ["ii", 0], ["2", 0], ["if", 0], ["a", 0], ["ii", 0], ["0", 0], ["a", 0], ["ii", 0], ["1", 0], ["c", 0], ["a", 0], ["else", 0], ["c", 0], ["b", 0], ["if", 0], ["c", 0], ["count", 0], ["c", 0], ["ii", 0], ["0", 0], ["2", 0], ["iii", 0], ["ii", 0], ["0", 0], ["else", 0], ["iii", 0], ["ii", 0], ["1", 0], ["else", 0], ["c", 0], ["a", 0], ["iii", 0], ["ii", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["i", 0], ["1", 0], ["in", 0], ["c", 0], ["c", 0], ["iii", 0], ["i", 0], ["1", 0], ["print", 0], ["c", 0], ["return", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["n", 0], ["s", 0], ["set", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["ans", 0], ["i", 0], ["a", 0], ["i", 0], ["s", 0], ["remove", 0], ["a", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["if", 0], ["a", 0], ["i", 0], ["not", 0], ["in", 0], ["s", 0], ["if", 0], ["b", 0], ["i", 0], ["in", 0], ["s", 0], ["ans", 0], ["i", 0], ["b", 0], ["i", 0], ["s", 0], ["remove", 0], ["b", 0], ["i", 0], ["if", 0], ["b", 0], ["i", 0], ["not", 0], ["in", 0], ["s", 0], ["if", 0], ["a", 0], ["i", 0], ["in", 0], ["s", 0], ["ans", 0], ["i", 0], ["a", 0], ["i", 0], ["s", 0], ["remove", 0], ["a", 0], ["i", 0], ["j", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["while", 0], ["ans", 0], ["j", 0], ["0", 0], ["j", 0], ["1", 0], ["ans", 0], ["j", 0], ["i", 0], ["j", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["check", 0], ["a", 0], ["b", 0], ["diff", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["diff", 0], ["1", 0], ["return", 0], ["diff", 0], ["1", 0], ["ip", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["ip", 0], ["b", 0], ["ip", 0], ["diff", 0], ["0", 0], ["left", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["c", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["c", 0], ["i", 0], ["a", 0], ["i", 0], ["if", 0], ["a", 0], ["i", 0], ["in", 0], ["left", 0], ["left", 0], ["remove", 0], ["a", 0], ["i", 0], ["else", 0], ["diff", 0], ["1", 0], ["if", 0], ["diff", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["c", 0], ["i", 0], ["0", 0], ["c", 0], ["i", 0], ["left", 0], ["pop", 0], ["else", 0], ["i", 0], ["j", 0], ["k", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["c", 0], ["k", 0], ["0", 0], ["left", 0], ["list", 0], ["left", 0], ["assert", 0], ["diff", 0], ["2", 0], ["assert", 0], ["len", 0], ["left", 0], ["2", 0], ["c", 0], ["i", 0], ["left", 0], ["0", 0], ["c", 0], ["j", 0], ["left", 0], ["1", 0], ["if", 0], ["not", 0], ["check", 0], ["a", 0], ["c", 0], ["or", 0], ["not", 0], ["check", 0], ["b", 0], ["c", 0], ["c", 0], ["i", 0], ["left", 0], ["1", 0], ["c", 0], ["j", 0], ["left", 0], ["0", 0], ["print", 0], ["c", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["da", 0], ["0", 0], ["n", 0], ["1", 0], ["pa", 0], ["1", 0], ["n", 0], ["1", 0], ["sa", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sa", 0], ["a", 0], ["i", 0], ["if", 0], ["da", 0], ["a", 0], ["i", 0], ["0", 0], ["da", 0], ["a", 0], ["i", 0], ["1", 0], ["pa", 0], ["a", 0], ["i", 0], ["i", 0], ["else", 0], ["povt", 0], ["a", 0], ["a", 0], ["i", 0], ["place2", 0], ["a", 0], ["i", 0], ["place1", 0], ["a", 0], ["pa", 0], ["a", 0], ["i", 0], ["da", 0], ["0", 0], ["1", 0], ["abs", 0], ["a", 0], ["da", 0], ["index", 0], ["0", 0], ["db", 0], ["0", 0], ["n", 0], ["1", 0], ["pb", 0], ["1", 0], ["n", 0], ["1", 0], ["sb", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sb", 0], ["b", 0], ["i", 0], ["if", 0], ["db", 0], ["b", 0], ["i", 0], ["0", 0], ["db", 0], ["b", 0], ["i", 0], ["1", 0], ["pb", 0], ["b", 0], ["i", 0], ["i", 0], ["else", 0], ["povt", 0], ["b", 0], ["b", 0], ["i", 0], ["place2", 0], ["b", 0], ["i", 0], ["place1", 0], ["b", 0], ["pb", 0], ["b", 0], ["i", 0], ["db", 0], ["0", 0], ["1", 0], ["abs", 0], ["b", 0], ["db", 0], ["index", 0], ["0", 0], ["print", 0], ["povt", 0], ["a", 0], ["place1", 0], ["a", 0], ["place2", 0], ["a", 0], ["abs", 0], ["a", 0], ["print", 0], ["povt", 0], ["b", 0], ["place1", 0], ["b", 0], ["place2", 0], ["b", 0], ["abs", 0], ["b", 0], ["a1", 0], ["a", 0], ["copy", 0], ["b1", 0], ["b", 0], ["copy", 0], ["a1", 0], ["place1", 0], ["a", 0], ["abs", 0], ["a", 0], ["b1", 0], ["place1", 0], ["b", 0], ["abs", 0], ["b", 0], ["if", 0], ["a1", 0], ["b1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a1", 0], ["return", 0], ["b1", 0], ["place1", 0], ["b", 0], ["b", 0], ["place1", 0], ["b", 0], ["b1", 0], ["place2", 0], ["b", 0], ["abs", 0], ["b", 0], ["if", 0], ["a1", 0], ["b1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a1", 0], ["return", 0], ["a1", 0], ["place1", 0], ["a", 0], ["a", 0], ["place1", 0], ["a", 0], ["a1", 0], ["place2", 0], ["a", 0], ["abs", 0], ["a", 0], ["if", 0], ["a1", 0], ["b1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a1", 0], ["return", 0], ["b1", 0], ["place2", 0], ["b", 0], ["b", 0], ["place2", 0], ["b", 0], ["b1", 0], ["place1", 0], ["b", 0], ["abs", 0], ["b", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["n", 0], ["d", 0], ["false", 0], ["n", 0], ["bad", 0], ["need", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["d", 0], ["a", 0], ["i", 0], ["1", 0], ["true", 0], ["c", 0], ["i", 0], ["a", 0], ["i", 0], ["else", 0], ["bad", 0], ["append", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["d", 0], ["i", 0], ["need", 0], ["append", 0], ["i", 0], ["1", 0], ["d", 0], ["false", 0], ["def", 0], ["good", 0], ["c", 0], ["nonlocal", 0], ["a", 0], ["b", 0], ["al", 0], ["0", 0], ["bl", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["c", 0], ["if", 0], ["c", 0], ["i", 0], ["a", 0], ["i", 0], ["al", 0], ["1", 0], ["if", 0], ["c", 0], ["i", 0], ["b", 0], ["i", 0], ["bl", 0], ["1", 0], ["if", 0], ["al", 0], ["1", 0], ["and", 0], ["bl", 0], ["1", 0], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["c", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["c", 0], ["if", 0], ["i", 0], ["j", 0], ["and", 0], ["c", 0], ["i", 0], ["c", 0], ["j", 0], ["return", 0], ["false", 0], ["else", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["fc", 0], ["do", 0], ["false", 0], ["def", 0], ["f", 0], ["b", 0], ["n", 0], ["c", 0], ["nonlocal", 0], ["do", 0], ["fc", 0], ["print", 0], ["b", 0], ["n", 0], ["c", 0], ["do", 0], ["if", 0], ["not", 0], ["do", 0], ["if", 0], ["len", 0], ["b", 0], ["0", 0], ["and", 0], ["good", 0], ["c", 0], ["do", 0], ["true", 0], ["fc", 0], ["c", 0], ["print", 0], ["fc", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["b", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["n", 0], ["nc", 0], ["c", 0], ["nc", 0], ["b", 0], ["i", 0], ["n", 0], ["j", 0], ["f", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["n", 0], ["j", 0], ["n", 0], ["j", 0], ["1", 0], ["nc", 0], ["f", 0], ["bad", 0], ["need", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["fc", 0], ["print", 0], ["i", 0], ["end", 0], ["def", 0], ["meteors", 0], ["n", 0], ["ar", 0], ["br", 0], ["differ", 0], ["used", 0], ["pr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ar", 0], ["i", 0], ["br", 0], ["i", 0], ["pr", 0], ["append", 0], ["1", 0], ["differ", 0], ["append", 0], ["i", 0], ["ar", 0], ["i", 0], ["br", 0], ["i", 0], ["else", 0], ["pr", 0], ["append", 0], ["ar", 0], ["i", 0], ["used", 0], ["ar", 0], ["i", 0], ["i", 0], ["unused", 0], ["find", 0], ["unused", 0], ["n", 0], ["used", 0], ["if", 0], ["len", 0], ["differ", 0], ["1", 0], ["pr", 0], ["differ", 0], ["0", 0], ["0", 0], ["unused", 0], ["0", 0], ["elif", 0], ["len", 0], ["differ", 0], ["2", 0], ["if", 0], ["differ", 0], ["0", 0], ["1", 0], ["in", 0], ["unused", 0], ["and", 0], ["differ", 0], ["0", 0], ["2", 0], ["in", 0], ["unused", 0], ["and", 0], ["differ", 0], ["1", 0], ["1", 0], ["in", 0], ["unused", 0], ["and", 0], ["differ", 0], ["1", 0], ["2", 0], ["in", 0], ["unused", 0], ["whatever", 0], ["is", 0], ["fine", 0], ["pr", 0], ["differ", 0], ["0", 0], ["0", 0], ["unused", 0], ["0", 0], ["pr", 0], ["differ", 0], ["1", 0], ["0", 0], ["unused", 0], ["1", 0], ["if", 0], ["differ", 0], ["1", 0], ["1", 0], ["in", 0], ["unused", 0], ["and", 0], ["differ", 0], ["1", 0], ["2", 0], ["in", 0], ["unused", 0], ["if", 0], ["not", 0], ["differ", 0], ["0", 0], ["1", 0], ["in", 0], ["unused", 0], ["pr", 0], ["differ", 0], ["0", 0], ["0", 0], ["differ", 0], ["0", 0], ["2", 0], ["unused", 0], ["remove", 0], ["differ", 0], ["0", 0], ["2", 0], ["pr", 0], ["differ", 0], ["1", 0], ["0", 0], ["unused", 0], ["0", 0], ["else", 0], ["pr", 0], ["differ", 0], ["0", 0], ["0", 0], ["differ", 0], ["0", 0], ["1", 0], ["unused", 0], ["remove", 0], ["differ", 0], ["0", 0], ["1", 0], ["pr", 0], ["differ", 0], ["1", 0], ["0", 0], ["unused", 0], ["0", 0], ["else", 0], ["if", 0], ["not", 0], ["differ", 0], ["1", 0], ["1", 0], ["in", 0], ["unused", 0], ["pr", 0], ["differ", 0], ["1", 0], ["0", 0], ["differ", 0], ["1", 0], ["2", 0], ["unused", 0], ["remove", 0], ["differ", 0], ["1", 0], ["2", 0], ["pr", 0], ["differ", 0], ["0", 0], ["0", 0], ["unused", 0], ["0", 0], ["else", 0], ["pr", 0], ["differ", 0], ["1", 0], ["0", 0], ["differ", 0], ["1", 0], ["1", 0], ["unused", 0], ["remove", 0], ["differ", 0], ["1", 0], ["1", 0], ["pr", 0], ["differ", 0], ["0", 0], ["0", 0], ["unused", 0], ["0", 0], ["else", 0], ["pr", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["bad", 0], ["input", 0], ["return", 0], ["pr", 0], ["def", 0], ["find", 0], ["unused", 0], ["n", 0], ["used", 0], ["unused", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["i", 0], ["in", 0], ["used", 0], ["unused", 0], ["append", 0], ["i", 0], ["return", 0], ["unused", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["strip", 0], ["ar", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["br", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["meteors", 0], ["n", 0], ["ar", 0], ["br", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["l1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["tot", 0], ["0", 0], ["done", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l1", 0], ["i", 0], ["l2", 0], ["i", 0], ["tot", 0], ["1", 0], ["else", 0], ["done", 0], ["l1", 0], ["i", 0], ["true", 0], ["ans", 0], ["if", 0], ["tot", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l1", 0], ["i", 0], ["l2", 0], ["i", 0], ["ans", 0], ["append", 0], ["l2", 0], ["i", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["done", 0], ["j", 0], ["false", 0], ["and", 0], ["l1", 0], ["i", 0], ["j", 0], ["and", 0], ["l2", 0], ["i", 0], ["j", 0], ["ans", 0], ["append", 0], ["j", 0], ["break", 0], ["elif", 0], ["tot", 0], ["2", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l1", 0], ["i", 0], ["l2", 0], ["i", 0], ["ans", 0], ["append", 0], ["l2", 0], ["i", 0], ["else", 0], ["ans", 0], ["append", 0], ["0", 0], ["l", 0], ["append", 0], ["i", 0], ["ok", 0], ["true", 0], ["ans", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["done", 0], ["i", 0], ["false", 0], ["if", 0], ["ok", 0], ["true", 0], ["ans", 0], ["l", 0], ["0", 0], ["i", 0], ["ok", 0], ["false", 0], ["else", 0], ["ans", 0], ["l", 0], ["1", 0], ["i", 0], ["diff1", 0], ["0", 0], ["diff2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ans", 0], ["i", 0], ["l1", 0], ["i", 0], ["diff1", 0], ["1", 0], ["if", 0], ["ans", 0], ["i", 0], ["l2", 0], ["i", 0], ["diff2", 0], ["1", 0], ["if", 0], ["diff1", 0], ["1", 0], ["and", 0], ["diff2", 0], ["1", 0], ["ans", 0], ["ans", 0], ["else", 0], ["ok", 0], ["true", 0], ["ans", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["done", 0], ["i", 0], ["false", 0], ["if", 0], ["ok", 0], ["true", 0], ["ans", 0], ["l", 0], ["1", 0], ["i", 0], ["ok", 0], ["false", 0], ["else", 0], ["ans", 0], ["l", 0], ["0", 0], ["i", 0], ["ans", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["print", 0], ["i", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["split", 0], ["b", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["counter", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["a", 0], ["0", 0], ["k", 0], ["a", 0], ["i1", 0], ["k", 0], ["a", 0], ["i2", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["counter", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["k", 0], ["a", 0], ["a", 0], ["i", 0], ["k", 0], ["a", 0], ["i1", 0], ["k", 0], ["a", 0], ["i2", 0], ["counter", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["counter", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["g", 0], ["a", 0], ["counter", 0], ["index", 0], ["1", 0], ["1", 0], ["counter", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["b", 0], ["0", 0], ["k", 0], ["b", 0], ["i1", 0], ["k", 0], ["b", 0], ["i2", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["counter", 0], ["b", 0], ["i", 0], ["1", 0], ["1", 0], ["k", 0], ["b", 0], ["b", 0], ["i", 0], ["k", 0], ["b", 0], ["i1", 0], ["k", 0], ["b", 0], ["i2", 0], ["counter", 0], ["b", 0], ["i", 0], ["1", 0], ["i", 0], ["counter", 0], ["b", 0], ["i", 0], ["1", 0], ["i", 0], ["g", 0], ["b", 0], ["counter", 0], ["index", 0], ["1", 0], ["1", 0], ["res", 0], ["a", 0], ["copy", 0], ["res", 0], ["k", 0], ["a", 0], ["i1", 0], ["g", 0], ["a", 0], ["c", 0], ["a", 0], ["0", 0], ["c", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["res", 0], ["i", 0], ["a", 0], ["i", 0], ["c", 0], ["a", 0], ["1", 0], ["if", 0], ["res", 0], ["i", 0], ["b", 0], ["i", 0], ["c", 0], ["b", 0], ["1", 0], ["if", 0], ["c", 0], ["a", 0], ["1", 0], ["and", 0], ["c", 0], ["b", 0], ["1", 0], ["out", 0], ["for", 0], ["i", 0], ["in", 0], ["res", 0], ["out", 0], ["str", 0], ["i", 0], ["print", 0], ["out", 0], ["return", 0], ["res", 0], ["a", 0], ["copy", 0], ["res", 0], ["k", 0], ["a", 0], ["i2", 0], ["g", 0], ["a", 0], ["c", 0], ["a", 0], ["0", 0], ["c", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["res", 0], ["i", 0], ["a", 0], ["i", 0], ["c", 0], ["a", 0], ["1", 0], ["if", 0], ["res", 0], ["i", 0], ["b", 0], ["i", 0], ["c", 0], ["b", 0], ["1", 0], ["if", 0], ["c", 0], ["a", 0], ["1", 0], ["and", 0], ["c", 0], ["b", 0], ["1", 0], ["out", 0], ["for", 0], ["i", 0], ["in", 0], ["res", 0], ["out", 0], ["str", 0], ["i", 0], ["print", 0], ["out", 0], ["return", 0], ["res", 0], ["a", 0], ["copy", 0], ["res", 0], ["k", 0], ["b", 0], ["i1", 0], ["g", 0], ["b", 0], ["c", 0], ["a", 0], ["0", 0], ["c", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["res", 0], ["i", 0], ["a", 0], ["i", 0], ["c", 0], ["a", 0], ["1", 0], ["if", 0], ["res", 0], ["i", 0], ["b", 0], ["i", 0], ["c", 0], ["b", 0], ["1", 0], ["if", 0], ["c", 0], ["a", 0], ["1", 0], ["and", 0], ["c", 0], ["b", 0], ["1", 0], ["out", 0], ["for", 0], ["i", 0], ["in", 0], ["res", 0], ["out", 0], ["str", 0], ["i", 0], ["print", 0], ["out", 0], ["return", 0], ["res", 0], ["a", 0], ["copy", 0], ["res", 0], ["k", 0], ["b", 0], ["i2", 0], ["g", 0], ["b", 0], ["c", 0], ["a", 0], ["0", 0], ["c", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["res", 0], ["i", 0], ["a", 0], ["i", 0], ["c", 0], ["a", 0], ["1", 0], ["if", 0], ["res", 0], ["i", 0], ["b", 0], ["i", 0], ["c", 0], ["b", 0], ["1", 0], ["if", 0], ["c", 0], ["a", 0], ["1", 0], ["and", 0], ["c", 0], ["b", 0], ["1", 0], ["out", 0], ["for", 0], ["i", 0], ["in", 0], ["res", 0], ["out", 0], ["str", 0], ["i", 0], ["print", 0], ["out", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["list", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["mismatch", 0], ["count", 0], ["0", 0], ["ans", 0], ["set", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["ans", 0], ["list", 0], ["i", 0], ["a", 0], ["i", 0], ["ans", 0], ["set", 0], ["add", 0], ["a", 0], ["i", 0], ["else", 0], ["mismatch", 0], ["count", 0], ["1", 0], ["ans", 0], ["list", 0], ["i", 0], ["mismatch", 0], ["count", 0], ["one", 0], ["to", 0], ["n", 0], ["set", 0], ["set", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["add", 0], ["set", 0], ["one", 0], ["to", 0], ["n", 0], ["set", 0], ["difference", 0], ["ans", 0], ["set", 0], ["if", 0], ["mismatch", 0], ["count", 0], ["1", 0], ["ans", 0], ["list", 0], ["ans", 0], ["list", 0], ["index", 0], ["2", 0], ["add", 0], ["set", 0], ["pop", 0], ["else", 0], ["tmp1", 0], ["ans", 0], ["list", 0], ["index", 0], ["2", 0], ["tmp2", 0], ["ans", 0], ["list", 0], ["index", 0], ["1", 0], ["ele1", 0], ["add", 0], ["set", 0], ["pop", 0], ["ele2", 0], ["add", 0], ["set", 0], ["pop", 0], ["if", 0], ["ele1", 0], ["a", 0], ["tmp1", 0], ["and", 0], ["ele2", 0], ["b", 0], ["tmp2", 0], ["ans", 0], ["list", 0], ["tmp1", 0], ["ele1", 0], ["ans", 0], ["list", 0], ["tmp2", 0], ["ele2", 0], ["elif", 0], ["ele1", 0], ["a", 0], ["tmp2", 0], ["and", 0], ["ele2", 0], ["b", 0], ["tmp1", 0], ["ans", 0], ["list", 0], ["tmp2", 0], ["ele1", 0], ["ans", 0], ["list", 0], ["tmp1", 0], ["ele2", 0], ["elif", 0], ["ele2", 0], ["a", 0], ["tmp1", 0], ["and", 0], ["ele1", 0], ["b", 0], ["tmp2", 0], ["ans", 0], ["list", 0], ["tmp1", 0], ["ele2", 0], ["ans", 0], ["list", 0], ["tmp2", 0], ["ele1", 0], ["elif", 0], ["ele2", 0], ["a", 0], ["tmp2", 0], ["and", 0], ["ele1", 0], ["b", 0], ["tmp1", 0], ["ans", 0], ["list", 0], ["tmp2", 0], ["ele2", 0], ["ans", 0], ["list", 0], ["tmp1", 0], ["ele1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["print", 0], ["ans", 0], ["list", 0], ["i", 0], ["end", 0], ["starting", 0], ["point", 0], ["size", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["elem", 0], ["for", 0], ["elem", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["elem", 0], ["for", 0], ["elem", 0], ["in", 0], ["input", 0], ["split", 0], ["right", 0], ["a", 0], ["remain", 0], ["b", 0], ["remain", 0], ["cand", 0], ["for", 0], ["idx", 0], ["in", 0], ["range", 0], ["size", 0], ["if", 0], ["a", 0], ["idx", 0], ["b", 0], ["idx", 0], ["right", 0], ["append", 0], ["a", 0], ["idx", 0], ["else", 0], ["right", 0], ["append", 0], ["0", 0], ["a", 0], ["remain", 0], ["append", 0], ["a", 0], ["idx", 0], ["b", 0], ["remain", 0], ["append", 0], ["b", 0], ["idx", 0], ["for", 0], ["elem", 0], ["in", 0], ["range", 0], ["1", 0], ["size", 0], ["1", 0], ["if", 0], ["elem", 0], ["not", 0], ["in", 0], ["right", 0], ["cand", 0], ["append", 0], ["elem", 0], ["def", 0], ["diff", 0], ["seq", 0], ["a", 0], ["seq", 0], ["b", 0], ["if", 0], ["seq", 0], ["a", 0], ["0", 0], ["seq", 0], ["b", 0], ["0", 0], ["and", 0], ["seq", 0], ["a", 0], ["1", 0], ["seq", 0], ["b", 0], ["1", 0], ["or", 0], ["seq", 0], ["a", 0], ["0", 0], ["seq", 0], ["b", 0], ["0", 0], ["and", 0], ["seq", 0], ["a", 0], ["1", 0], ["seq", 0], ["b", 0], ["1", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["def", 0], ["replace", 0], ["original", 0], ["pattern", 0], ["pos", 0], ["0", 0], ["for", 0], ["idx", 0], ["elem", 0], ["in", 0], ["enumerate", 0], ["original", 0], ["if", 0], ["elem", 0], ["0", 0], ["original", 0], ["idx", 0], ["pattern", 0], ["pos", 0], ["pos", 0], ["1", 0], ["return", 0], ["str", 0], ["elem", 0], ["for", 0], ["elem", 0], ["in", 0], ["original", 0], ["if", 0], ["len", 0], ["cand", 0], ["1", 0], ["print", 0], ["join", 0], ["replace", 0], ["right", 0], ["cand", 0], ["elif", 0], ["diff", 0], ["cand", 0], ["a", 0], ["remain", 0], ["and", 0], ["diff", 0], ["cand", 0], ["b", 0], ["remain", 0], ["print", 0], ["join", 0], ["replace", 0], ["right", 0], ["cand", 0], ["else", 0], ["cand", 0], ["reverse", 0], ["print", 0], ["join", 0], ["replace", 0], ["right", 0], ["cand", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["counta", 0], ["counter", 0], ["a", 0], ["countb", 0], ["counter", 0], ["b", 0], ["ab", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["ab", 0], ["i", 0], ["a", 0], ["i", 0], ["print", 0], ["ab", 0], ["test", 0], ["set", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["abtup", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["setab", 0], ["set", 0], ["ab", 0], ["realtest", 0], ["test", 0], ["setab", 0], ["if", 0], ["ab", 0], ["i", 0], ["0", 0], ["if", 0], ["a", 0], ["i", 0], ["in", 0], ["setab", 0], ["and", 0], ["b", 0], ["i", 0], ["in", 0], ["setab", 0], ["if", 0], ["len", 0], ["realtest", 0], ["0", 0], ["ab", 0], ["i", 0], ["realtest", 0], ["pop", 0], ["elif", 0], ["a", 0], ["i", 0], ["in", 0], ["setab", 0], ["ab", 0], ["i", 0], ["b", 0], ["i", 0], ["elif", 0], ["b", 0], ["i", 0], ["in", 0], ["setab", 0], ["ab", 0], ["i", 0], ["a", 0], ["i", 0], ["else", 0], ["if", 0], ["counta", 0], ["a", 0], ["i", 0], ["1", 0], ["and", 0], ["countb", 0], ["b", 0], ["i", 0], ["1", 0], ["if", 0], ["len", 0], ["realtest", 0], ["0", 0], ["ab", 0], ["i", 0], ["realtest", 0], ["pop", 0], ["else", 0], ["ab", 0], ["i", 0], ["a", 0], ["i", 0], ["elif", 0], ["counta", 0], ["a", 0], ["i", 0], ["1", 0], ["and", 0], ["not", 0], ["countb", 0], ["b", 0], ["i", 0], ["1", 0], ["ab", 0], ["i", 0], ["b", 0], ["i", 0], ["elif", 0], ["not", 0], ["counta", 0], ["a", 0], ["i", 0], ["1", 0], ["and", 0], ["countb", 0], ["b", 0], ["i", 0], ["1", 0], ["ab", 0], ["i", 0], ["a", 0], ["i", 0], ["print", 0], ["join", 0], ["list", 0], ["map", 0], ["str", 0], ["ab", 0], ["import", 0], ["sys", 0], ["read", 0], ["lambda", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["readi", 0], ["lambda", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["writeln", 0], ["lambda", 0], ["x", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["x", 0], ["n", 0], ["write", 0], ["lambda", 0], ["x", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["x", 0], ["n", 0], ["readi", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["read", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["read", 0], ["split", 0], ["ncnta", 0], ["0", 0], ["n", 0], ["1", 0], ["ncntb", 0], ["0", 0], ["n", 0], ["1", 0], ["diff", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["diff", 0], ["append", 0], ["i", 0], ["ncnta", 0], ["a", 0], ["i", 0], ["1", 0], ["ncntb", 0], ["b", 0], ["i", 0], ["1", 0], ["if", 0], ["len", 0], ["diff", 0], ["2", 0], ["p", 0], ["list", 0], ["a", 0], ["p", 0], ["diff", 0], ["0", 0], ["b", 0], ["diff", 0], ["0", 0], ["ncntp", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ncntp", 0], ["p", 0], ["i", 0], ["1", 0], ["flag", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["ncntp", 0], ["i", 0], ["0", 0], ["flag", 0], ["true", 0], ["break", 0], ["if", 0], ["flag", 0], ["p", 0], ["list", 0], ["a", 0], ["p", 0], ["diff", 0], ["1", 0], ["b", 0], ["diff", 0], ["1", 0], ["writeln", 0], ["join", 0], ["str", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["p", 0], ["else", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["ncnta", 0], ["i", 0], ["0", 0], ["and", 0], ["ncntb", 0], ["i", 0], ["0", 0], ["k", 0], ["i", 0], ["break", 0], ["p", 0], ["list", 0], ["a", 0], ["p", 0], ["diff", 0], ["0", 0], ["k", 0], ["writeln", 0], ["join", 0], ["str", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["p", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["perm", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["avail", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["avail", 0], ["add", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["avail", 0], ["remove", 0], ["a", 0], ["i", 0], ["perm", 0], ["i", 0], ["a", 0], ["i", 0], ["def", 0], ["difference", 0], ["seq1", 0], ["seq2", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["seq1", 0], ["if", 0], ["seq1", 0], ["i", 0], ["seq2", 0], ["i", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["1", 0], ["return", 0], ["0", 0], ["return", 0], ["1", 0], ["def", 0], ["solve", 0], ["seq", 0], ["curravail", 0], ["if", 0], ["not", 0], ["curravail", 0], ["if", 0], ["difference", 0], ["seq", 0], ["a", 0], ["1", 0], ["and", 0], ["difference", 0], ["seq", 0], ["b", 0], ["1", 0], ["return", 0], ["seq", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["seq", 0], ["if", 0], ["seq", 0], ["i", 0], ["1", 0], ["for", 0], ["item", 0], ["in", 0], ["list", 0], ["curravail", 0], ["newseq", 0], ["list", 0], ["seq", 0], ["newseq", 0], ["i", 0], ["item", 0], ["newset", 0], ["set", 0], ["curravail", 0], ["newset", 0], ["remove", 0], ["item", 0], ["if", 0], ["solve", 0], ["newseq", 0], ["newset", 0], ["return", 0], ["solve", 0], ["newseq", 0], ["newset", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["solve", 0], ["perm", 0], ["avail", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["n", 0], ["d", 0], ["set", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["x", 0], ["b", 0], ["x", 0], ["c", 0], ["x", 0], ["a", 0], ["x", 0], ["d", 0], ["remove", 0], ["a", 0], ["x", 0], ["elif", 0], ["a", 0], ["count", 0], ["a", 0], ["x", 0], ["b", 0], ["count", 0], ["a", 0], ["x", 0], ["1", 0], ["c", 0], ["x", 0], ["a", 0], ["x", 0], ["d", 0], ["remove", 0], ["a", 0], ["x", 0], ["elif", 0], ["a", 0], ["count", 0], ["b", 0], ["x", 0], ["b", 0], ["count", 0], ["b", 0], ["x", 0], ["1", 0], ["c", 0], ["x", 0], ["b", 0], ["x", 0], ["d", 0], ["remove", 0], ["b", 0], ["x", 0], ["if", 0], ["len", 0], ["d", 0], ["0", 0], ["ty", 0], ["str", 0], ["c", 0], ["1", 0], ["1", 0], ["replace", 0], ["print", 0], ["ty", 0], ["if", 0], ["len", 0], ["d", 0], ["1", 0], ["c", 0], ["c", 0], ["index", 0], ["0", 0], ["d", 0], ["pop", 0], ["ty", 0], ["str", 0], ["c", 0], ["1", 0], ["1", 0], ["replace", 0], ["print", 0], ["ty", 0], ["elif", 0], ["len", 0], ["d", 0], ["2", 0], ["c", 0], ["c", 0], ["index", 0], ["0", 0], ["d", 0], ["pop", 0], ["c", 0], ["c", 0], ["index", 0], ["0", 0], ["d", 0], ["pop", 0], ["ty", 0], ["str", 0], ["c", 0], ["1", 0], ["1", 0], ["replace", 0], ["print", 0], ["ty", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["not", 0], ["equals", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["not", 0], ["equals", 0], ["append", 0], ["i", 0], ["if", 0], ["len", 0], ["not", 0], ["equals", 0], ["1", 0], ["x", 0], ["1", 0], ["while", 0], ["x", 0], ["n", 0], ["and", 0], ["x", 0], ["in", 0], ["a", 0], ["and", 0], ["x", 0], ["in", 0], ["b", 0], ["x", 0], ["1", 0], ["a", 0], ["not", 0], ["equals", 0], ["0", 0], ["x", 0], ["print", 0], ["a", 0], ["else", 0], ["a2", 0], ["elem", 0], ["for", 0], ["elem", 0], ["in", 0], ["a", 0], ["a2", 0], ["not", 0], ["equals", 0], ["0", 0], ["b", 0], ["not", 0], ["equals", 0], ["0", 0], ["if", 0], ["sorted", 0], ["a2", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["print", 0], ["a2", 0], ["else", 0], ["a2", 0], ["elem", 0], ["for", 0], ["elem", 0], ["in", 0], ["a", 0], ["a2", 0], ["not", 0], ["equals", 0], ["1", 0], ["b", 0], ["not", 0], ["equals", 0], ["1", 0], ["print", 0], ["a2", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00024102193299590263, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00012051096649795132, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.0031242489786109107, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0015621244893054553, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00024102193299590263, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00012051096649795132, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0031242489786109107, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0015621244893054553, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\n\nHere, a correct bracket sequence is defined as follows:  \n - () is a correct bracket sequence.\n - If X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\n - If X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\n - Every correct bracket sequence can be derived from the rules above.\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.\n\n-----Constraints-----\n - The length of S is N.\n - 1 ≤ N ≤ 100\n - S consists of ( and ).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n\n-----Output-----\nPrint the lexicographically smallest string among the shortest correct bracket sequences that can be obtained by inserting some number of ( and ) into S.\n\n-----Sample Input-----\n3\n())\n\n-----Sample Output-----\n(())\n\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n=int(input())\nS=input()\nx=y=0\nfor i,s in enumerate(S):\n\ty=y-1 if s=='(' else y+1\n\tx=max(x,y)\nprint('('*x+S+')'*(x-y))\n", "n = int(input())\ns = input()\nwhile True:\n\tc = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == \"(\":\n\t\t\tc += 1\n\t\telse:\n\t\t\tc -= 1\n\t\tif c < 0:\n\t\t\ts = \"(\" + s\n\t\t\tbreak\n\tif c > 0:\n\t\ts = s + \")\"\n\tif c == 0:\n\t\tprint(s)\n\t\tbreak\n\t\n", "def main():\n\tN = int(input())\n\tS = input()\n\n\tcount = 0\n\tfor i in range(N-1, -1, -1):\n\t\tif S[i] == \")\":\n\t\t\tcount +=1\n\t\telse:\n\t\t\tif count:\n\t\t\t\tcount -= 1\n\t\t\telse:\n\t\t\t\tS += \")\"\n\tS = \"(\"*count + S\n\tprint(S)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "import sys\ninput = sys.stdin.readline\nfrom collections import deque\n\n\ndef read():\n\tN = int(input().strip())\n\tS = input().strip()\n\treturn N, S\n\n\ndef solve(N, S):\n\trank = 0\n\tq = deque()\n\tfor s in S:\n\t\tif rank == 0:\n\t\t\tif s == \")\":\n\t\t\t\tq.appendleft(\"(\")\n\t\t\t\tq.append(\")\")\n\t\t\telse:\n\t\t\t\tq.append(\"(\")\n\t\t\t\trank += 1\n\t\telse:\n\t\t\tif s == \")\":\n\t\t\t\tq.append(\")\")\n\t\t\t\trank -= 1\n\t\t\telse:\n\t\t\t\tq.append(\"(\")\n\t\t\t\trank += 1\n\twhile rank > 0:\n\t\tq.append(\")\")\n\t\trank -= 1\n\treturn \"\".join(q)\n\n\ndef __starting_point():\n\tinputs = read()\n\tprint((solve(*inputs)))\n\n__starting_point()\n", "N = int(input())\nS = T = input()\n\nwhile \"()\" in S:\n\tS = S.replace(\"()\",\"\")\n\nprint(\"(\"*S.count(\")\")+T+S.count(\"(\")*\")\")\n", "n = int(input())\ns = input()\n\nl, r = 0, 0\nfor i in range(n):\n\tif s[i] == \"(\":\n\t\tr += 1\n\telse:\n\t\tif r:\n\t\t\tr -= 1\n\t\telse:\n\t\t\tl += 1\n\nans = \"(\"*l + s + \")\"*r\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nS = input().rstrip()\nb = 0\nq = 0\n\nfor s in S:\n\tif s == '(':\n\t\tb +=1\n\telse:\n\t\tif b>0:\n\t\t\tb -= 1\n\t\telse:\n\t\t\tq += 1\nprint(('('*q+S+')'*b))\n", "icase=0\nif icase==0:\n\tn=int(input())\n\ts=input()\nelif icase==1:\n\tn=3\n\ts=\"())\"\nelif icase==2:\n\tn=6\n\ts=\")))())\"\nelif icase==3:\n\tn=8\n\ts=\"))))((((\"\n\nl=[]\nr=[]\nsim=s[0]\nif sim==\"(\":\n\tlidx=0\n\tl.append(1)\n\tridx=-1\nelif sim==\")\":\n\tlidx=0\n\tl.append(0)\n\tridx=0\n\tr.append(1)\n\nfor i in range(1,len(s)):\n\tif s[i]==\"(\" and s[i-1]==\"(\":\n\t\tl[lidx]+=1\n\telif s[i]==\"(\" and s[i-1]==\")\":\n\t\tlidx+=1\n\t\tl.append(1)\n\telif s[i]==\")\" and s[i-1]==\")\":\n\t\tr[ridx]+=1\n\telif s[i]==\")\" and s[i-1]==\"(\":\n\t\tridx+=1\n\t\tr.append(1)\n\nll=sum(l)\nrr=sum(r)\nds=ll-rr\n\nif len(l)>len(r):\n\tr.append(0)\nxmin=0\nx=0\nfor i in range(len(l)):\n\tx=x+l[i]-r[i]\n\txmin=min(x,xmin)\n\t\nstrs=\"(\"*(-xmin) + s + \")\"*(ds-xmin)\nprint(strs)\n\t\n", "n = int(input())\ns = input()\ncnt, L = 0, 0\nfor i in range(len(s)):\n\tif s[i] == '(':\n\t\tcnt += 1\n\telse:\n\t\tcnt -= 1\n\n\tif cnt < 0:\n\t\tL = min(L, cnt)\n\nans = '('*abs(L) + s\nR = ans.count('(') - ans.count(')')\nans += ')'*R\n\nprint(ans)\n", "n = int(input())\ns = input()\nl, r, c = 0, 0, 0\nfor a in s:\n\tif a == '(':\n\t\tc += 1\n\telif c:\n\t\tc -= 1\n\telse:\n\t\tl += 1\nr = c\nprint((\"(\"*l + s + \")\"*r))\n", "N = int(input())\nmotoS = input()\nS = list(motoS)\nstart = 0\nend = 0\nfor i in range(N):\n\tif S[i] == '(':\n\t\tend += 1\n\telse:\n\t\tend -= 1\n\tif end < 0:\n\t\tstart += 1\n\t\tend = 0\nprint('('*start+motoS+')'*end)\n", "n=int(input())\ns=input()\n\nlp=0\nrp=0\nfor i in range(n):\n\tif s[i]=='(':\n\t\trp+=1\n\telse:\n\t\trp=rp-min(rp,1)\nfor i in range(n-1,-1,-1):\n\tif s[i]==')':\n\t\tlp+=1\n\telse:\n\t\tlp=lp-min(lp,1)\n\nprint('('*max(0,lp)+s+max(0,rp)*')')\n", "def main():\n\timport sys\n\n\tdef input(): return sys.stdin.readline().rstrip()\n\n\tn = int(input())\n\ts = input()\n\tcnt = 0\n\tm = 0\n\tfor i in range(n):\n\t\tif s[i] == '(':\n\t\t\tcnt += 1\n\t\telse:\n\t\t\tcnt -= 1\n\t\tm = min(m, cnt)\n\tans = '('*(-m)+s+')'*(cnt-m)\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n=int(input())\ns=input()\nl=[]\nfor i in s:\n\tif i==')':\n\t\tif len(l)>0:\n\t\t\tif l[-1]=='(':\n\t\t\t\tl.pop()\n\t\t\telse:\n\t\t\t\tl.append(i)\n\t\telse:\n\t\t\tl.append(i)\n\telse:\n\t\tl.append(i)\nprint((l.count(')')*'(' + s +l.count('(')*')'))\n", "def main2():\n\tinput()\n\ts = input()\n\tpair = [-1] * 2\n\tans = s\n\tidx = 0\n\tfor idx in range(0, len(s)):\n\t\tfor i in range(idx, len(s)):\n\t\t\tif s[i] == '(':\n\t\t\t\tpair[0] = i if pair[0] == -1 else pair[0]\n\t\t\telif s[i] == ')':\n\t\t\t\tpair[1] = i\n\t\t\t\tbreak\n\t\tif pair[0] != -1 and pair[1] != -1:\n\t\t\ts = s[:pair[0]] + ' ' + s[pair[0]+1:pair[1]] + ' ' + s[pair[1]+1:]\n\t\telif pair[0] != -1 and pair[1] == -1:\n\t\t\ts = s[:pair[0]] + ' ' + s[pair[0]+1:]\n\t\t\tans = ans + ')'\n\t\telif pair[0] == -1 and pair[1] != -1:\n\t\t\ts = s[:pair[1]] + ' ' + s[pair[1]+1:]\n\t\t\tans = '(' + ans\n\t\tpair = [-1] * 2\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain2()\n__starting_point()\n", "n = input()\ns = input()\nss = s\nfor i in range(50):\n\ts = s.replace('()','')\nl = s.count(')')\nr = s.count('(')\nprint('('*l+ss+')'*r)\n", "def main():\n\tn = int(input())\n\ts = input()\n\tl, r, c = 0, 0, 0\n\tfor a in s:\n\t\tif a == '(':\n\t\t\tc += 1\n\t\telif c:\n\t\t\tc -= 1\n\t\telse:\n\t\t\tl += 1\n\tr = c\n\tprint((\"(\"*l + s + \")\"*r))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys, math, re\nfrom functools import lru_cache\nfrom collections import defaultdict\nsys.setrecursionlimit(500000)\nMOD = 10**9+7\n\ndef input():\n\treturn sys.stdin.readline()[:-1]\n\ndef mi():\n\treturn map(int, input().split())\n\ndef ii():\n\treturn int(input())\n\ndef i2(n):\n\ttmp = [list(mi()) for i in range(n)]\n\treturn [list(i) for i in zip(*tmp)]\n\ndef main():\n\tN = ii()\n\tS = input()\n\tl = [0]\n\tfor i in range(N):\n\t\tif S[i] == '(':\n\t\t\tl.append(l[-1]+1)\n\t\telse:\n\t\t\tl.append(l[-1]-1)\n\n\tm = min(l)\n\n\tif m < 0:\n\t\tl = list(map(lambda x: x-m, l))\n\n\tprint('('*l[0] + S + ')'*l[-1])\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "N=int(input())\nS=input()\ni=0\nhidari=str()\nmigi=str()\na=0\nwhile i<N:\n\tif S[i]==\")\":\n\t\thidari+=\"(\"\n\t\ti+=1\n\telse:\n\t\tbreak\nwhile i<N:\n\tif S[i]==\"(\":\n\t\ta+=1\n\telse:\n\t\ta-=1\n\ti+=1\nif a<0:\n\thidari+=abs(a)*\"(\"\nelif a>0:\n\tmigi+=a*\")\"\ns=hidari+S+migi\n\n\ni=0\nhidari=str()\nmigi=str()\na=0\nwhile i<N:\n\tif S[i]==\")\":\n\t\thidari+=\"(\"\n\t\ti+=1\n\telse:\n\t\tbreak\nwhile i<N:\n\tif S[i]==\"(\":\n\t\tif a<0:\n\t\t\ta=0\n\t\ta+=1\n\t\tmina=0\n\telse:\n\t\ta-=1\n\t\tif a<0:\n\t\t\tif mina>a:\n\t\t\t\thidari+=\"(\"\n\ti+=1\nif a>0:\n\tmigi+=a*\")\"\nt=hidari+S+migi\nif len(s)==len(t):\n\tprint(s)\nelif len(s)>len(t):\n\tprint(s)\nelse:\n\tprint(t)\n", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nN = int(input())\nS = input()\n\n\n# In[2]:\n\n\nl = 0\nr = 0\nfor s in S:\n\tif s == \"(\":\n\t\tr += 1\n\telse:\n\t\tif r > 0:\n\t\t\tr -= 1\n\t\telse:\n\t\t\tl += 1\nans = \"\".join([\"(\"*l , S, \")\"*r])\nprint(ans)\n\n\n# In[ ]:\n\n\n\n\n", "n = int(input())\ns = input()\ns_ = s\n\nwhile s_.count('()'):\n\ts_ = s_.replace('()', '')\n\nl = s_.count(')')\nr = len(s_) - l\n\nans = '(' * l + s + ')' * r\nprint(ans)\n", "n = int(input())\nS = input()\nT = S.replace('()', '')\nfor _ in range(50):\n\tT = T.replace('()', '')\nprint('(' * T.count(')') + S + ')' * T.count('('))\n", "n = int(input())\ns = input()\nleft = 0\nright = 0\nfor i in range(n):\n\tif s[i] == '(':\n\t\tright += 1\n\telse:\n\t\tif right > 0:\n\t\t\tright -= 1\n\t\telse:\n\t\t\tleft += 1\nprint((left * '(' + s + right * ')'))\n", "N = int(input())\nS = input()\n\nl = 0\nr = 0\n\nL = ''\nfor i in S:\n\tif i == '(':\n\t\tl += 1\n\telse:\n\t\tr += 1\n\n\tif l < r:\n\t\tL += '('\n\t\tl += 1\nR = ')'*(l-r)\nprint((L+S+R))\n", "def main():\n\tn = int(input())\n\ts = input()\n\tl, r, c = 0, 0, 0\n\tfor a in s:\n\t\tif a == '(':\n\t\t\tc += 1\n\t\telse:\n\t\t\tif c:\n\t\t\t\tc -= 1\n\t\t\telse:\n\t\t\t\tl += 1\n\tr = c\n\tprint((\"(\"*l + s + \")\"*r))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n\tn = i_input()\n\ts = input()\n\n\tl = 0\n\tr = 0\n\n\tfor i in s:\n\t\tif i == \")\" and r > 0:\n\t\t\tr -= 1\n\t\telif i == \")\":\n\t\t\tl += 1\n\t\tif i == \"(\":\n\t\t\tr += 1\n\tprint((\"(\"*l + s + \")\"*r))\n\n\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from collections import deque\n\nn=int(input())\ns=deque(input())\n\n\nleft=0\nright=0\nfor i in range(n):\n\tif s[i]==\"(\":\n\t\tleft+=1\n\telse:\n\t\tif left>0:\n\t\t\tleft-=1\n\t\telse:\n\t\t\tright+=1\n\t\t\n\t\t\t\n\nfor _ in range(left):\n\t\ts.append(\")\")\n\t\t\n\nfor _ in range(right):\n\t\ts.appendleft(\"(\")\n\nprint((\"\".join(s)))\n", "N = int(input())\nS = input()\n\nstack = []\nfor c in S:\n\tif len(stack) > 0:\n\t\tlast = stack[-1]\n\t\tif last == '(' and c == ')':\n\t\t\tstack = stack[:-1]\n\t\t\tcontinue\n\tstack.append(c)\n\nleft = stack.count(')')\nright = stack.count('(')\n\nprint(left * '(' + S + right * ')')\n", "import re\n\nN = int(input())\ns = input()[:N]\ns_check = s\ns_check = re.sub('\\(\\)', '', s_check)\n\nwhile len(s_check) > 0:\n\tfor i in range(len(s_check)):\n\t\tif s_check[i] == ')':\n\t\t\ts = '(' + s\n\t\t\ts_check = '(' + s_check\n\t\t\tbreak\n\t\telif s_check[i] == '(':\n\t\t\tbreak\n\n\tfor i in range(len(s_check)):\n\t\tif s_check[-i-1] == '(':\n\t\t\ts = s + ')'\n\t\t\ts_check = s_check + ')'\n\t\t\tbreak\n\t\telif s_check[-i-1] == ')':\n\t\t\tbreak\n\n\ts_check = re.sub('\\(\\)', '', s_check)\n\nprint(s)\n", "N = int(input())\nS = input()\nleft_cnt = 0\nright_cnt = 0\nfor s in S:\n\tif s == '(':\n\t\tleft_cnt += 1\n\telse:\n\t\tif left_cnt == 0:\n\t\t\tright_cnt += 1\n\t\telse:\n\t\t\tleft_cnt -= 1\nS = '(' * right_cnt + S + ')' * left_cnt\nprint(S)\n", "N = int(input())\ns = input()\n\nkeep = 0\nans = ''\nfor i in range(N):\n\tif s[i] == '(':\n\t\tans += '('\n\t\tkeep += 1\n\telse:\n\t\tif keep > 0:\n\t\t\tans += ')'\n\t\t\tkeep -= 1\n\t\telse:\n\t\t\tans = ('(' + ans + ')')\nprint((ans + ')' * keep))\n", "def main():\n\tN = int(input())\n\tS = input()\n\n\tcount = 0\n\tfor i in range(N-1, -1, -1):\n\t\tif S[i] == \")\":\n\t\t\tcount +=1\n\t\telse:\n\t\t\tif count:\n\t\t\t\tcount -= 1\n\t\t\telse:\n\t\t\t\tS += \")\"\n\tS = \"(\"*count + S\n\tprint(S)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "N = int(input())\nS = input()\nl = r = 0\nL = \"\"\nfor i in S:\n\tif i == \"(\":\n\t\tl += 1\n\telse:\n\t\tr += 1\n\tif l < r:\n\t\tL += \"(\"\n\t\tl += 1\nR = \")\"* (l-r)\nprint(L+S+R)\n", "_,S,l,r=input(),input(),'(',')'\nt=S\nwhile t.count(l+r):\n\tt=t.replace(l+r,'')\nprint(l*t.count(r)+S+r*t.count(l))\n", "N = int(input())\nS = input()\nnow = 0\nright = 0\nleft = 0\nadd_left = 0\nwhile now < N:\n\tif S[now] == '(':\n\t\tleft += 1\n\telse:\n\t\tif left:\n\t\t\tleft -= 1\n\t\telse:\n\t\t\tadd_left += 1\n\tnow += 1\nfor _ in range(add_left):\n\tprint('(', end='')\nprint(S, end='')\nfor _ in range(left):\n\tprint(')', end='')\n\n", "n = int(input())\ns = list(input())\nans = \"\"\n\nl = 0\nfor i in range(n):\n\tans += s[i]\n\tif s[i] == \")\":\n\t\tif l == 0:\n\t\t\tans = \"(\" + ans\n\t\telse:\n\t\t\tl -= 1\n\telse:\n\t\tl += 1\n\nans += (\")\"*l)\n\nprint(ans)\n", "n=int(input())\ns=input()\nans=[]\nminscore=0\nscore=0\nfor i in range(n):\n\tif s[i]=='(':\n\t\tscore+=1\n\telse:\n\t\tscore-=1\n\tminscore=min(minscore,score)\nfinalscore=score\nfor i in range(-minscore):\n\tans.append('(')\nfor i in range(n):\n\tans.append(s[i])\nfor i in range(-minscore+finalscore):\n\tans.append(')')\nprint(''.join(ans))\n", "N=int(input())\nS=input()\nA=0 #(\nB=0 #)\n\nfor s in S:\n\tif s=='(':\n\t\tA+=1\n\telif s==')' and A>0:\n\t\tA-=1\n\telse:\n\t\tB+=1\n\nprint('('*B+S+')'*A)\n", "N = input()\nS = input()\ns = S\nfor i in range(50):\n\tS = S.replace('()','')\nl = S.count(')')\nr = S.count('(')\nprint('('*l+s+')'*r)\n", "import copy\nN = int(input())\nS = list(input())\nS_ans = copy.deepcopy(S)\napp = 0\nq = [0]\nsave = 0\nfor i in range(N):\n\tif S[i] == '(':\n\t\tq.append(q[-1] + 1)\n\t\t\n\telse:\n\t\tq.append(q[-1] - 1)\n\t\tif q[-1] == -1:\n\t\t\tS_ans.insert(app + save,\"(\")\n\t\t\tapp += 1\n\t\t\tq[-1] = 0\n\nfor i in range(q[-1]):\n\tS_ans.append(\")\")\nprint(\"\".join(S_ans))\n", "n = int(input())\ns = input()\ncnt_l, cnt_r = 0, 0\n\nfor x in s:\n\tif x == \"(\":\n\t\tcnt_l += 1\n\telif cnt_l > 0:\n\t\tcnt_l -= 1\n\telse:\n\t\tcnt_r += 1\n\nprint((cnt_r * \"(\" + s + cnt_l * \")\"))\n", "# -*- coding: utf-8 -*-\n\"\"\"\n@author: H_Hoshigi\n\"\"\"\ndef main():\n\tN = int(input())\n\tS = input()\n\n\tsolo_close_no = 0\n\tfor i in range(N):\n\t\tif S[-i-1] == \")\":\n\t\t\tsolo_close_no += 1\n\t\telif solo_close_no >= 1:\n\t\t\tsolo_close_no -= 1\n\t\n\tsolo_open_no = 0\n\tfor i in range(N):\n\t\tif S[i] == \"(\":\n\t\t\tsolo_open_no += 1\n\t\telif solo_open_no >= 1:\n\t\t\tsolo_open_no -= 1\n\n\tanswer = \"(\"*solo_close_no + S + \")\"*solo_open_no\n\tprint(answer)\n\ndef __starting_point():\n\tmain()\n\n\n__starting_point()\n", "n = int(input())\ns = input()\n\na = \"\"\n\nstack = []\n\nfor i in range(len(s)):\n\tif s[i] == \"(\":\n\t\tstack.append(\"(\")\n\t\ta += \"(\"\n\telif s[i] == \")\" and len(stack) == 0:\n\t\tstack.append(\")\")\n\t\ta += \")\"\n\telif s[i] == \")\" and stack[-1] == \")\":\n\t\tstack.append(\")\")\n\t\ta += \")\"\n\telse:  # s[i] == \")\" and stack[-1] == \"(\"\n\t\tstack.pop(-1)\n\t\ta += \")\"\n\nwhile len(stack) > 0:\n\tif stack[len(stack) - 1] == \")\":\n\t\te = len(stack) - 1\n\t\ts = e\n\t\twhile s - 1 >= 0 and stack[s - 1] == \")\":\n\t\t\ts -= 1\n\t\ta = \"(\" * (e - s + 1) + a\n\t\tstack = stack[:s]\n\telif stack[len(stack) - 1] == \"(\":\n\t\te = len(stack) - 1\n\t\ts = e\n\t\twhile s - 1 >= 0 and stack[s - 1] == \"(\":\n\t\t\ts -= 1\n\t\ta = a + \")\" * (e - s + 1)\n\t\tstack = stack[:s]\n\nprint(a)\n", "N = int(input())\nS = input()\nT = list(1 if c == \"(\" else -1 for c in S)\nl, l_min = 0, 0\nr, r_min = 0, 0\nfor i in range(N):\n\tl += T[i]\n\tl_min = min(l_min, l)\n\tr -= T[N - i - 1]\n\tr_min = min(r_min, r)\nprint(\"\".join([\"(\" * -l_min, S, \")\" * -r_min]))\n", "N = int(input())\nS = str(input())\n\nl, r = 0, 0\np, m = 0, 0\nfor i in range(N):\n\tif S[i] == \"(\":\n\t\tl += 1\n\telse:\n\t\tr += 1\n\tif l < r:\n\t\tp += 1\n\t\tl += 1\n\nm = l - r\n\nfor i in range(p):\n\tprint(\"(\", end = \"\")\nprint(S, end =\"\")\nfor i in range(m):\n\tprint(\")\", end = \"\")\n", "N = int(input())\nS = input()\nT = S\n\nfor n in range(N):\n\tT = T.replace(\"()\",\"\")\n\nL = T.count(\"(\")\nR = T.count(\")\")\nS = R*\"(\"+S+L*\")\"\nprint(S)\n", "n = int(input())\ns = input()\n\nl = 0\nr = 0\np = []\nfor i in range(n):\n\tif s[i] == \"(\": p.append(\"(\")\n\telse:\n\t\tif p == []: l += 1\n\t\telse: p.pop()\nr = p.count(\"(\")\nprint(\"(\"*l + s + \")\"*r)\n", "_ = input()\nS = input()\n\nneeds_right = 0\nneeds_left = 0\n\nfor c in S:\n\tif c == '(':\n\t\tneeds_right += 1\n\telse:\n\t\tif needs_right == 0:\n\t\t\tneeds_left += 1\n\t\telse:\n\t\t\tneeds_right -= 1\n\nprint(('(' * needs_left + S + ')' * needs_right))\n\n", "n = int(input())\ns = list(input())\nd = [0]\nx = 0\n\nfor i in range(len(s)):\n\tif s[i] == '(':\n\t\tx += 1\n\telse:\n\t\tx -= 1\n\td.append(x)\n\nans = []\nx = min(d)\n\nfor i in range(max(0,(-1*x))):\n\tans.append('(')\n\nfor i in s:\n\tans.append(i)\n\nfor i in range(max(d[len(d)-1]-x,0)):\n\tans.append(')')\n\na = ''.join(ans)\n\nprint(a)\n", "with open(0) as f:\n\tN, S = f.read().split()\nN = int(N)\nS += '_'\nleft = 0\nright = 0\ncnt = 0\nfor i in range(N):\n\tcnt += {'(':1, ')':-1}[S[i]]\n\tif S[i] == ')' and S[i+1] != ')':\n\t\tif cnt < 0:\n\t\t\tleft += -cnt\n\t\t\tcnt = 0\n\tif i == N-1 and cnt > 0:\n\t\tright += cnt\nans = '(' * left + S[:N] + ')' * right\nprint(ans)\n", "N=int(input())\nS=input()\n\ndef add1(S):\n\tcum=[0]\n\tfor i in range(len(S)):\n\t\tif S[i]=='(':cum.append(cum[-1]+1)\n\t\telse:cum.append(cum[-1]-1)\n\tif min(cum)>=0:return S\n\tout = '('*(-min(cum))\n\tout += S\n\treturn out\n\ndef add2(S):\n\tcum=[0]\n\tfor i in range(len(S)):\n\t\tif S[i]=='(':cum.append(cum[-1]+1)\n\t\telse:cum.append(cum[-1]-1)\n\t\t\t\n\tif cum[-1]==0:return S\n\tn = cum[-1]\n\tout = S + ')'*n\n\treturn out\n\nS = add1(S)\nS = add2(S)\nprint(S)\n", "N = int(input())\nS = input()\n\nans = S\ncount = 0\n\nfor i in range(N):\n\tif(S[i] == \"(\"):\n\t\tcount += 1\n\telse:\n\t\tcount -= 1\n\t\n\tif(count<0):\n\t\tans = \"(\" + ans\n\t\tcount += 1\n\ncount = 0\n\nfor i in range(N-1,-1,-1):\n\tif(S[i] == \"(\"):\n\t\tcount += 1\n\telse:\n\t\tcount -= 1\n\n\tif(count>0):\n\t\tans = ans + \")\"\n\t\tcount -= 1\n\nprint(ans)\n", "n = int(input())\ns = str(input())\nl = []\nleft, right = 0, 0\nfor c in s:\n\tif c == ')':\n\t\tif l == []:\n\t\t\tleft += 1\n\t\telse:\n\t\t\tl.pop()\n\telse:\n\t\tl.append(1)\nright = len(l)\nprint('(' * left + s + ')' * right)\n", "n = int(input())\ns = list(input())\n\ns=s[::-1]\nbalance = 0\ni = 0\nwhile i < len(s):\n\tif s[i] == ')':\n\t\tbalance+=1\n\telse:\n\t\tbalance-=1\n\tif balance<0:\n\t\ts.insert(0, ')')\n\t\tbalance+=1\n\t\ti+=1\n\ti+=1\n\n\nbalance = 0\ni = 0\ns=s[::-1]\nwhile i < len(s):\n\tif s[i] == '(':\n\t\tbalance+=1\n\telse:\n\t\tbalance-=1\n\tif balance<0:\n\t\ts.insert(0, '(')\n\t\tbalance+=1\n\t\ti+=1\n\ti+=1\n\nprint((''.join(s)))\n\t\n", "def main():\n\t#input data\n\timport sys\n\tinput = lambda:sys.stdin.readline().strip()\n\tN = int(input())\n\tS = input()\n\t\n\t#solve\n\tright=0\n\tleft=0\n\n\tfor i in range(N):\n\t\tif S[i]=='(':\n\t\t\tright+=1\n\t\telse:\n\t\t\tif right:\n\t\t\t\tright-=1\n\t\t\telse:\n\t\t\t\tleft+=1\n\tprint(left*'('+S+right*')')\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "N = int(input())\nS = input()\nl = 0\nr = 0\nfor i in range(N):\n\tif S[i] == \")\":\n\t\tr -= 1\n\t\tif r < 0:\n\t\t\tl += 1\n\t\t\tr += 1\n\telse:\n\t\tr += 1\nprint(\"(\"*l+S+\")\"*r)\n", "n = int(input())\ns = list(str(input()))\n\n# (\nx = 0\ny = 0\nfor i in range(n):\n\tif s[i] == '(':\n\t\tx += 1\n\n\tif s[i] == ')':\n\t\tif x >= 1:\n\t\t\tx -= 1\n\t\telse:\n\t\t\ty += 1\n\nfor _ in range(x):\n\ts.append(')')\n\nfor _ in range(y):\n\ts.insert(0,'(')\nans = ''.join(s)\nprint(ans)\n", "N = int(input())\nS = input()\nnS = S\nfor i in range(50):\n\tnS = nS.replace(\"()\", \"\")\nr = nS.count(\")\")\nl = nS.count(\"(\")\nprint(\"(\" * r + S + \")\" * l)\n", "from math import ceil,floor,comb,factorial,gcd,pow,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf\nfrom itertools import accumulate,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\nn = INT()\ns = input()\n\ncount = 0\nfor i in range(n):\n\tif s[i] == '(':\n\t\tcount += 1\n\telse:\n\t\tcount = max(0, count-1)\n\ns += ')'*count\n\t\t\ncount = 0\nfor i in range(n-1, -1, -1):\n\tif s[i] == ')':\n\t\tcount += 1\n\telse:\n\t\tcount = max(0, count-1)\n\ns = '('*count + s\nprint(s)\n", "n = int(input())\ns = input()\nR, L = 0, 0\nfor i in range(len(s)):\n\tif s[i] == '(':\n\t\tR += 1\n\telse:\n\t\tif R:\n\t\t\tR -= 1\n\t\telse:\n\t\t\tL += 1\n\nprint(('('*L + s + ')'*R))\n", "n = int(input())\nN = input()\nL = 0\nR = 0\nnum = 0\nfor c in N:\n\tif c == '(':\n\t\tnum += 1\n\telse:\n\t\tif num:\n\t\t\tnum -= 1\n\t\telse:\n\t\t\tL += 1\nR = num\n\nprint(('(' * L + N + ')' * R))\n", "import sys\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n\tn = int(input())\n\tS = input()\n\n\tright = 0\n\tleft = 0\n\tfor i in range(n):\n\t\tif S[i] == \"(\":\n\t\t\tleft += 1\n\t\telse:\n\t\t\tif left:\n\t\t\t\tleft -= 1\n\t\t\telse:\n\t\t\t\tright += 1\n\tres = \"(\" * right + S + \")\" * left\n\tprint(res)\n\n\ndef __starting_point():\n\tresolve()\n\n__starting_point()\n", "n = int(input())\ns = list(input())\n\nc0 = 0\nc1 = 0\nz0 = 0\nz1 = 0\nfor i in range(n):\n\tif s[i] == \"(\":\n\t\tc0 += 1\n\telse:\n\t\tif c0 > 0:\n\t\t\tc0 -= 1\n\t\telse:\n\t\t\tc1 += 1\nans = [\"(\"]*c1 + s + [\")\"]*c0\nprint(\"\".join(ans))\n", "def main():\n\tN = int(input())\n\tS = input()\n\tbrackets = [0, 0]\n\tfor i in range(len(S)):\n\t\tif S[i] == \")\":\n\t\t\tif brackets[0] > 0:\n\t\t\t\tbrackets[0] -= 1\n\t\t\telse:\n\t\t\t\tbrackets[1] += 1\n\t\telif S[i] == \"(\":\n\t\t\tbrackets[0] += 1\n\tprint(brackets[1] * \"(\" + S + brackets[0] * \")\")\n\nmain()\n", "n = int(input())\ns = list(input())\n\nc0 = 0\nc1 = 0\nz0 = 0\nz1 = 0\nfor i in range(n):\n\tif s[i] == \"(\":\n\t\tc0 += 1\n\telse:\n\t\tif c0 > 0:\n\t\t\tc0 -= 1\n\t\telse:\n\t\t\tc1 += 1\nz0 = c1\ns = s[::-1]\nc0 = 0\nc1 = 0\nfor i in range(n):\n\tif s[i] == \")\":\n\t\tc0 += 1\n\telse:\n\t\tif c0 > 0:\n\t\t\tc0 -= 1\n\t\telse:\n\t\t\tc1 += 1\nz1 = c1\ns = s[::-1]\nans = [\"(\"]*z0 + s + [\")\"]*z1\nprint(\"\".join(ans))\n", "\nicase=0\nif icase==0:\n\tn=int(input())\n\ts=input()\nelif icase==1:\n\tn=3\n\ts=\"())\"\nelif icase==2:\n\tn=6\n\ts=\")))())\"\nelif icase==3:\n\tn=8\n\ts=\"))))((((\"\n\nl=[]\nr=[]\nsim=s[0]\nif sim==\"(\":\n\tlidx=0\n\tl.append(1)\n\tridx=-1\nelif sim==\")\":\n\tlidx=0\n\tl.append(0)\n\tridx=0\n\tr.append(1)\n\nfor i in range(1,len(s)):\n\tif s[i]==\"(\" and s[i-1]==\"(\":\n\t\tl[lidx]+=1\n\telif s[i]==\"(\" and s[i-1]==\")\":\n\t\tlidx+=1\n\t\tl.append(1)\n\telif s[i]==\")\" and s[i-1]==\")\":\n\t\tr[ridx]+=1\n\telif s[i]==\")\" and s[i-1]==\"(\":\n\t\tridx+=1\n\t\tr.append(1)\n\nll=sum(l)\nrr=sum(r)\nds=ll-rr\n\nif len(l)>len(r):\n\tr.append(0)\nelif len(l)<len(r):\n\tl.append(0)\nxmin=100\nx=0\nfor i in range(len(l)):\n\tx=x+l[i]-r[i]\n\txmin=min(x,xmin)\nif xmin>0:\n\txmin=0\n\t\nstrs=\"(\"*(-xmin) + s + \")\"*(ds-xmin)\nprint(strs)\n", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)で最大の2個とりだせるお a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3回\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# pythonで無理なときは、pypyでやると正解するかも！！\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# 四捨五入g\n#\n# インデックス系\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nINF = float('inf')\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n\treturn list(map(int,readline().split()))\ndef readTuples():\n\t\treturn tuple(map(int,readline().split()))\ndef I():\n\t\treturn int(readline())\nn = I()\nS = input()\nleft = 0\nright = 0\nfor i in range(n):\n\t\tif S[i] == '(':\n\t\t\t\tright += 1\n\t\telif S[i] == ')':\n\t\t\t\tif right >= 1:\n\t\t\t\t\t\tright -=1\n\t\t\t\telse:\n\t\t\t\t\t\tleft += 1\nprint(('('*left + S + ')'*right))\n", "#!/usr/bin/env python3\ninput()\ns = input()\nc = 0\nfor i in s:\n\tif i == \"(\":\n\t\tc += 1\n\telse:\n\t\tif c > 0:\n\t\t\tc -= 1\nd = 0\nfor i in s[::-1]:\n\tif i ==\")\":\n\t\td += 1\n\telse:\n\t\tif d > 0:\n\t\t\td -= 1\nprint((\"(\"*d+s+\")\"*c))\n\n\n", "n = int(input())\ns = input()\nans = s\nwhile s.count(\"()\")>0:\n\ts = s.replace(\"()\", \"\")\ncnt_l = s.count(\")\")\ncnt_r = s.count(\"(\")\nprint(cnt_l * \"(\" + ans + cnt_r * \")\")\n", "N = int(input())\nS = input()\n\noS = S\nS = list(S)\n\ncnt = 0\nwhile True:\n\tp_cnt = cnt\n\tfor i in range(len(S) - 1):\n\t\tif S[i] == \"(\" and S[i + 1] == \")\":\n\t\t\tS.pop(i + 1)\n\t\t\tS.pop(i)\n\t\t\tcnt += 1\n\t\t\tbreak\n\n\tif cnt == p_cnt:\n\t\tbreak\n\ncnt_open = 0\ncnt_close = 0\n\nfor s in S:\n\tif s == \"(\":\n\t\tcnt_open += 1\n\telse:\n\t\tcnt_close += 1\n\nans = (\"(\" * cnt_close) + oS + (\")\" * cnt_open)\nprint(ans)\n", "N = int(input())\nS = input()\nl = r = 0\nL = \"\"\nfor i in S:\n\tif i == \"(\":\n\t\tl += 1\n\telse:\n\t\tr += 1\n\tif l < r:\n\t\tL += \"(\"\n\t\tl += 1\nR = \")\"* (l-r)\nprint(L+S+R)\n", "n,s = open(0).read().split()\n\nimp_close = 0\nimp_open = 0\n\nfor char in s:\n\tif char == '(':\n\t\timp_open += 1\n\telse:\n\t\tif imp_open:\n\t\t\timp_open -= 1\n\t\telse:\n\t\t\timp_close += 1\n\nprint('('*imp_close + s + ')'*imp_open)\n", "import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n\tN = int(input())\n\tS = input().rstrip()\n\n\tans = \"\"\n\tn_left = 0\n\tn_right = 0\n\tfor s in S:\n\t\tif s == \"(\":\n\t\t\tn_left += 1\n\t\telse:\n\t\t\tif n_left > 0:\n\t\t\t\tn_left -= 1\n\t\t\telse:\n\t\t\t\tn_right += 1\n\n\tans = \"\".join((\"(\" * n_right, S, \")\" * n_left))\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n = int(input())\ns = input()\nss = s\nwhile ss.count('()'):\n\tss = ss.replace('()', '')\nleft, right = ss.count('('), ss.count(')')\nprint('(' * right + s + ')' * left)\n", "N = int(input())\nS = input()\n\nflg_l = False\ncnt_r = 0\ncnt_l = 0\n\nfor i in range(N):\n\tif(S[i] == \"(\"):\n\t\tcnt_r += 1\n\t\tflg_l = True            \n\telse:\n\t\tif(flg_l):\n\t\t\tif(cnt_r > 0):\n\t\t\t\tcnt_r -= 1\n\t\t\telse:\n\t\t\t\tcnt_l += 1\n\t\t\t\tflg_l = False\n\t\telse:\n\t\t\tcnt_l += 1\n\t\nans = \"\"\n\nans += (\"(\"*cnt_l)+S+(\")\"*cnt_r)\nprint(ans)\n", "n = int(input())\ns = input()\n\nopens = 0\nl = 0\nfor i in range(n):\n\tif s[i] == \"(\":\n\t\topens += 1\n\telse:\n\t\topens -= 1\n\n\t\tif opens < 0:\n\t\t\tl += 1\n\t\t\topens = 0\n\nprint(\"(\"*l + s + \")\"*opens)\n", "n = int(input())\ns = input()\ncountr, countl = 0, 0\n\nfor i in range(n-1, -1, -1):\n\tif s[i] == ')': countr += 1\n\telif countr > 0: countr -= 1\ns = '('*countr+s\nn = len(s)\n\nfor i in range(n):\n\tif s[i] == '(': countl += 1\n\telif countl > 0: countl -= 1\ns += ')'*countl\n\nprint(s)\n", "from collections import deque\n\nN = int(input())\nS = input()\nque = deque(S)\nl = r = 0\n\nfor s in S:\n\tif s == '(':\n\t\tl += 1\n\telse:\n\t\tr += 1\n\tif l < r:\n\t\tque.appendleft('(')\n\t\tl += 1\nelse:\n\tans = \"\".join(que)\n\tif r < l:\n\t\tans = ans + \")\" * (l - r)\nprint(ans)\n", "# -*- coding: utf-8 -*-\nimport sys\nfrom collections import deque, defaultdict, namedtuple\nimport heapq\nfrom math import sqrt, factorial, gcd, ceil, atan, pi\ndef input(): return sys.stdin.readline()[:-1] # warning not \\n\n# def input(): return sys.stdin.buffer.readline()[:-1] # warning bytes\n# def input(): return sys.stdin.buffer.readline().strip() # warning bytes\n# def input(): return sys.stdin.buffer.readline().decode('utf-8')\nimport string\nimport operator\nimport random\n# string.ascii_lowercase\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nMOD = int(1e9)+7\nINF = float('inf')\n\nsys.setrecursionlimit(int(1e6))\n\ndef solve():\n\tn = int(input())\n\ts = input()\n\n\tstack = [-1]\n\tfor e in s:\n\t\tif e == '(':\n\t\t\tstack.append(e)\n\t\telse:\n\t\t\tif stack[-1] == '(':\n\t\t\t\tstack.pop()\n\t\t\telse:\n\t\t\t\tstack.append(e)\n\tl = stack.count(')')\n\tr = stack.count('(')\n\tprint(('(' * l + s + ')' * r))\n\t\n\nT = 1\n# T = int(input())\nfor case in range(1,T+1):\n\tans = solve()\n\n\n\"\"\"\n\ndp[num_changes][blue_placed]\n\n\nabba\n\n\n\n\"\"\"\n", "n = int(input())\nS = input()\nlc = 0\nrc = 0\nfor s in S:\n\tif s=='(':\n\t\trc += 1\n\telse:\n\t\tif rc:\n\t\t\trc -= 1\n\t\telse:\n\t\t\tlc += 1\nprint('('*lc+S+')'*rc)\n", "import sys\nsys.setrecursionlimit(10 ** 9)\n# input = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef MI1(): return list(map(int1, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef MS(): return input().split()\ndef LS(): return list(input())\ndef LLS(rows_number): return [LS() for _ in range(rows_number)]\ndef printlist(lst, k=' '): print((k.join(list(map(str, lst)))))\nINF = float('inf')\n# from math import ceil, floor, log2\nfrom collections import deque\n# from itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\n# from heapq import heapify, heappop, heappush\n# import numpy as np    # cumsum\n# from bisect import bisect_left, bisect_right\n\ndef solve():\n\tN = II()\n\tS = LS()\n\tq = deque([])\n\t# print(S)\n\tcnt = 0\n\tfor s in S:\n\t\tif s == '(':\n\t\t\tcnt += 1\n\t\t\tq.append(s)\n\t\telse:   # ')'\n\t\t\tif cnt >= 1:\n\t\t\t\tq.append(s)\n\t\t\t\tcnt -= 1\n\t\t\telse:\n\t\t\t\tq.appendleft('(')\n\t\t\t\tq.append(s)\n\tfor _ in range(cnt):\n\t\tq.append(')')\n\n\t# print(q)\n\tprintlist(q, '')\n\ndef __starting_point():\n\tsolve()\n\n__starting_point()\n", "n = int(input())\ns = input()\n\ncntr = 0\nfor i in range(n-1, -1, -1):\n\tif s[i] == ')':\n\t\tcntr += 1\n\telif cntr > 0:\n\t\tcntr -= 1\ns = '(' * cntr + s\nn = len(s)\n\ncntl = 0\nfor i in range(n):\n\tif s[i] == '(':\n\t\tcntl += 1\n\telif cntl > 0:\n\t\tcntl -= 1\ns += ')' * cntl\n\nprint(s)\n", "import sys\nfrom collections import deque\n\n\ndef IN_I(): return int(sys.stdin.readline().rstrip())\ndef IN_LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef IN_S(): return sys.stdin.readline().rstrip()\ndef IN_LS(): return list(sys.stdin.readline().rstrip().split())\n\n\nN = IN_I()\nS = IN_S()\nd = deque(S)\n\nl = 0\nfor i in range(N):\n\tif S[i] == '(':\n\t\tl += 1\n\telse:\n\t\tif l == 0:\n\t\t\td.appendleft('(')\n\t\telse:\n\t\t\tl -= 1\n\nr = 0\nfor i in range(N - 1, -1, -1):\n\tif S[i] == ')':\n\t\tr += 1\n\telse:\n\t\tif r == 0:\n\t\t\td.append(')')\n\t\telse:\n\t\t\tr -= 1\nprint((''.join(d)))\n", "import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n\tN = int(input())\n\tS = input().rstrip()\n\n\tL = 0\n\tR = 0\n\tfor s in S:\n\t\tif s == \"(\":\n\t\t\tR += 1\n\t\telse:\n\t\t\tif R > 0:\n\t\t\t\tR -= 1\n\t\t\telse:\n\t\t\t\tL += 1\n\n\tans = \"\".join([\"(\" * L, S, \")\" * R])\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n = int(input())\nS = input()\nl = 0\nr = 0\nfor s in S:\n\tif s == \"(\":\n\t\tr += 1\n\telse:\n\t\tif r > 0:\n\t\t\tr -= 1\n\t\telse:\n\t\t\tl += 1\nans = \"(\"*l + S + \")\"*r\nprint(ans)\n", "n = input()\ncnt = 0\nS = input()\nm = 0\nfor s in S:\n\tif s == \"(\":\n\t\tcnt += 1\n\telse:\n\t\tcnt -= 1\n\tm = min(m, cnt)\n\nleft = -min(0, m)\nright = abs(cnt - m)\nprint((\"(\" * left + S + \")\" * right))\n", "N=int(input())\nS=input()\nx=0\nm=0\nfor i in range(N):\n\tif S[i]=='(':\n\t\tx+=1\n\telse:\n\t\tx-=1\n\t\tm=min(x,m)\n\na=-m\nb=x-m\nprint(('('*a+S+')'*b))\n", "from collections import deque\n\nN = int(input())\nS = input()\n\nreserveL = deque()\nout = deque()\nq = deque()\n\nfor s in S:\n\tif s == \"(\":\n\t\treserveL.append(s)\n\t\tout.append(\"(\")\n\telse:\n\t\t# print(len(reserveL))\n\t\tif len(reserveL) == 0:\n\t\t\tout.appendleft(\"(\")\n\t\t\tout.append(\")\")\n\t\telse:\n\t\t\tout.append(\")\")\n\t\t\treserveL.popleft()\n\n\t# print(out)\n\n# print(out)\nwhile reserveL:\n\tout.append(\")\")\n\treserveL.popleft()\nans = \"\"\nwhile out:\n\tans += out.popleft()\nprint(ans)\n", "from collections import deque\n\nn=int(input())\ns=deque(input())\n\n\nleft=0\nright=0\nfor i in range(n):\n\tif s[i]==\"(\":\n\t\tleft+=1\n\telse:\n\t\tif left>0:\n\t\t\tleft-=1\n\t\telse:\n\t\t\tright+=1\n\t\t\n\t\t\t\n\nfor _ in range(left):\n\t\ts.append(\")\")\n\t\t\n\nfor _ in range(right):\n\t\ts.appendleft(\"(\")\n\nprint(\"\".join(s))\n", "n = int(input())\ns = input()\ncounter_l = 0\npairs = 0\ndouble_check = set()\n\nfor i in range(n):\n\tif s[i] == \"(\":\n\t\tcounter_l += 1\n\t\tfor j in range(i + 1, n):\n\t\t\tif s[j] == \")\" and j not in double_check:\n\t\t\t\tpairs += 1\n\t\t\t\tdouble_check.add(j)\n\t\t\t\tbreak\ncounter_r = n - counter_l\ns = s + \")\" * (counter_l - pairs)\ns = \"(\" * (counter_r - pairs) + s\n\nprint(s)\n", "n=int(input())\na=input()\ns=list(a)\nfrom copy import copy\nans=copy(s)\nleft=0\nright=0\nfor i in range(n):\n\tif s[i]==\"(\":\n\t\tleft+=1\n\telse:\n\t\tif left==0:\n\t\t\tright+=1\n\t\telse:\n\t\t\tleft-=1\nprint(\"(\"*right+str(a)+\")\"*left)\n"], "id": "id7875"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7875", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["string", 1], ["s", 1], ["of", 1], ["length", 1], ["n", 1], ["consisting", 1], ["of", 1], ["and", 1], ["your", 1], ["task", 1], ["is", 1], ["to", 1], ["insert", 1], ["some", 0], ["number", 0], ["of", 0], ["and", 0], ["into", 0], ["s", 0], ["to", 0], ["obtain", 0], ["a", 0], ["correct", 0], ["bracket", 0], ["sequence", 0], ["here", 0], ["a", 0], ["correct", 0], ["bracket", 0], ["sequence", 0], ["is", 0], ["defined", 0], ["as", 0], ["follows", 0], ["is", 1], ["a", 1], ["correct", 1], ["bracket", 1], ["sequence", 1], ["if", 1], ["x", 1], ["is", 1], ["a", 1], ["correct", 1], ["bracket", 1], ["sequence", 1], ["the", 1], ["concatenation", 1], ["of", 1], ["x", 1], ["and", 1], ["in", 1], ["this", 1], ["order", 1], ["is", 1], ["also", 1], ["a", 1], ["correct", 1], ["bracket", 1], ["sequence", 1], ["if", 1], ["x", 1], ["and", 1], ["y", 1], ["are", 1], ["correct", 1], ["bracket", 1], ["sequences", 1], ["the", 1], ["concatenation", 1], ["of", 1], ["x", 1], ["and", 1], ["y", 1], ["in", 1], ["this", 1], ["order", 1], ["is", 1], ["also", 1], ["a", 1], ["correct", 1], ["bracket", 1], ["sequence", 1], ["every", 1], ["correct", 1], ["bracket", 1], ["sequence", 1], ["can", 1], ["be", 1], ["derived", 1], ["from", 1], ["the", 1], ["rules", 1], ["above", 1], ["find", 1], ["the", 1], ["shortest", 1], ["correct", 1], ["bracket", 1], ["sequence", 1], ["that", 1], ["can", 1], ["be", 1], ["obtained", 1], ["if", 1], ["there", 0], ["is", 0], ["more", 0], ["than", 0], ["one", 0], ["such", 0], ["sequence", 0], ["find", 0], ["the", 0], ["lexicographically", 0], ["smallest", 0], ["one", 0], ["constraints", 0], ["the", 0], ["length", 0], ["of", 0], ["s", 0], ["is", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["100", 0], ["s", 0], ["consists", 0], ["of", 0], ["and", 0], ["input", 0], ["input", 0], ["is", 0], ["given", 0], ["from", 0], ["standard", 0], ["input", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["n", 0], ["s", 0], ["output", 0], ["print", 1], ["the", 1], ["lexicographically", 1], ["smallest", 1], ["string", 1], ["among", 1], ["the", 1], ["shortest", 1], ["correct", 1], ["bracket", 1], ["sequences", 1], ["that", 0], ["can", 0], ["be", 0], ["obtained", 0], ["by", 0], ["inserting", 0], ["some", 0], ["number", 0], ["of", 0], ["and", 0], ["into", 0], ["s", 0], ["sample", 0], ["input", 0], ["3", 0], ["sample", 0], ["output", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5561797752808989, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5561797752808989, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7105263157894737, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7105263157894737, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5561797752808989, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5561797752808989, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7105263157894737, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7105263157894737, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["x", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["s", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["y", 0], ["y", 0], ["1", 0], ["if", 0], ["s", 0], ["else", 0], ["y", 0], ["1", 0], ["x", 0], ["max", 0], ["x", 0], ["y", 0], ["print", 0], ["x", 0], ["s", 0], ["x", 0], ["y", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["while", 0], ["true", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["c", 0], ["1", 0], ["else", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["0", 0], ["s", 0], ["s", 0], ["break", 0], ["if", 0], ["c", 0], ["0", 0], ["s", 0], ["s", 0], ["if", 0], ["c", 0], ["0", 0], ["print", 0], ["s", 0], ["break", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["count", 0], ["1", 0], ["else", 0], ["if", 0], ["count", 0], ["count", 0], ["1", 0], ["else", 0], ["s", 0], ["s", 0], ["count", 0], ["s", 0], ["print", 0], ["s", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["read", 0], ["n", 0], ["int", 0], ["input", 0], ["strip", 0], ["s", 0], ["input", 0], ["strip", 0], ["return", 0], ["n", 0], ["s", 0], ["def", 0], ["solve", 0], ["n", 0], ["s", 0], ["rank", 0], ["0", 0], ["q", 0], ["deque", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["rank", 0], ["0", 0], ["if", 0], ["s", 0], ["q", 0], ["appendleft", 0], ["q", 0], ["append", 0], ["else", 0], ["q", 0], ["append", 0], ["rank", 0], ["1", 0], ["else", 0], ["if", 0], ["s", 0], ["q", 0], ["append", 0], ["rank", 0], ["1", 0], ["else", 0], ["q", 0], ["append", 0], ["rank", 0], ["1", 0], ["while", 0], ["rank", 0], ["0", 0], ["q", 0], ["append", 0], ["rank", 0], ["1", 0], ["return", 0], ["join", 0], ["q", 0], ["def", 0], ["starting", 0], ["point", 0], ["inputs", 0], ["read", 0], ["print", 0], ["solve", 0], ["inputs", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["t", 0], ["input", 0], ["while", 0], ["in", 0], ["s", 0], ["s", 0], ["s", 0], ["replace", 0], ["print", 0], ["s", 0], ["count", 0], ["t", 0], ["s", 0], ["count", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["r", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["r", 0], ["1", 0], ["else", 0], ["if", 0], ["r", 0], ["r", 0], ["1", 0], ["else", 0], ["l", 0], ["1", 0], ["ans", 0], ["l", 0], ["s", 0], ["r", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["rstrip", 0], ["b", 0], ["0", 0], ["q", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["b", 0], ["1", 0], ["else", 0], ["if", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["else", 0], ["q", 0], ["1", 0], ["print", 0], ["q", 0], ["s", 0], ["b", 0], ["icase", 0], ["0", 0], ["if", 0], ["icase", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["elif", 0], ["icase", 0], ["1", 0], ["n", 0], ["3", 0], ["s", 0], ["elif", 0], ["icase", 0], ["2", 0], ["n", 0], ["6", 0], ["s", 0], ["elif", 0], ["icase", 0], ["3", 0], ["n", 0], ["8", 0], ["s", 0], ["l", 0], ["r", 0], ["sim", 0], ["s", 0], ["0", 0], ["if", 0], ["sim", 0], ["lidx", 0], ["0", 0], ["l", 0], ["append", 0], ["1", 0], ["ridx", 0], ["1", 0], ["elif", 0], ["sim", 0], ["lidx", 0], ["0", 0], ["l", 0], ["append", 0], ["0", 0], ["ridx", 0], ["0", 0], ["r", 0], ["append", 0], ["1", 1], ["for", 2], ["i", 2], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["l", 0], ["lidx", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["lidx", 0], ["1", 0], ["l", 0], ["append", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["r", 0], ["ridx", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["ridx", 0], ["1", 0], ["r", 0], ["append", 0], ["1", 0], ["ll", 0], ["sum", 0], ["l", 0], ["rr", 0], ["sum", 0], ["r", 0], ["ds", 0], ["ll", 0], ["rr", 0], ["if", 0], ["len", 0], ["l", 0], ["len", 0], ["r", 0], ["r", 0], ["append", 0], ["0", 0], ["xmin", 0], ["0", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["x", 0], ["x", 0], ["l", 0], ["i", 0], ["r", 0], ["i", 0], ["xmin", 0], ["min", 0], ["x", 0], ["xmin", 0], ["strs", 0], ["xmin", 0], ["s", 0], ["ds", 0], ["xmin", 0], ["print", 0], ["strs", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["cnt", 0], ["l", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["cnt", 0], ["1", 0], ["else", 0], ["cnt", 0], ["1", 0], ["if", 0], ["cnt", 0], ["0", 0], ["l", 0], ["min", 0], ["l", 0], ["cnt", 0], ["ans", 0], ["abs", 0], ["l", 0], ["s", 0], ["r", 0], ["ans", 0], ["count", 0], ["ans", 0], ["count", 0], ["ans", 0], ["r", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["r", 0], ["c", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["s", 0], ["if", 0], ["a", 0], ["c", 0], ["1", 0], ["elif", 0], ["c", 0], ["c", 0], ["1", 0], ["else", 0], ["l", 0], ["1", 0], ["r", 0], ["c", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["n", 0], ["int", 0], ["input", 0], ["motos", 0], ["input", 0], ["s", 0], ["list", 0], ["motos", 0], ["start", 0], ["0", 0], ["end", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["end", 0], ["1", 0], ["else", 0], ["end", 0], ["1", 0], ["if", 0], ["end", 0], ["0", 0], ["start", 0], ["1", 0], ["end", 0], ["0", 0], ["print", 0], ["start", 0], ["motos", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["lp", 0], ["0", 0], ["rp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["rp", 0], ["1", 0], ["else", 0], ["rp", 0], ["rp", 0], ["min", 0], ["rp", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["lp", 0], ["1", 0], ["else", 0], ["lp", 0], ["lp", 0], ["min", 0], ["lp", 0], ["1", 0], ["print", 0], ["max", 0], ["0", 0], ["lp", 0], ["s", 0], ["max", 0], ["0", 0], ["rp", 0], ["def", 0], ["main", 0], ["import", 0], ["sys", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["m", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["cnt", 0], ["1", 0], ["else", 0], ["cnt", 0], ["1", 0], ["m", 0], ["min", 0], ["m", 0], ["cnt", 0], ["ans", 0], ["m", 0], ["s", 0], ["cnt", 0], ["m", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["if", 0], ["len", 0], ["l", 0], ["0", 0], ["if", 0], ["l", 0], ["1", 0], ["l", 0], ["pop", 0], ["else", 0], ["l", 0], ["append", 0], ["i", 0], ["else", 0], ["l", 0], ["append", 0], ["i", 0], ["else", 0], ["l", 0], ["append", 0], ["i", 0], ["print", 0], ["l", 0], ["count", 0], ["s", 0], ["l", 0], ["count", 0], ["def", 0], ["main2", 0], ["input", 0], ["s", 0], ["input", 0], ["pair", 0], ["1", 0], ["2", 0], ["ans", 0], ["s", 0], ["idx", 0], ["0", 0], ["for", 0], ["idx", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["idx", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["pair", 0], ["0", 0], ["i", 0], ["if", 0], ["pair", 0], ["0", 0], ["1", 0], ["else", 0], ["pair", 0], ["0", 0], ["elif", 0], ["s", 0], ["i", 0], ["pair", 0], ["1", 0], ["i", 0], ["break", 0], ["if", 0], ["pair", 0], ["0", 0], ["1", 0], ["and", 0], ["pair", 0], ["1", 0], ["1", 0], ["s", 0], ["s", 1], ["pair", 0], ["0", 0], ["s", 0], ["pair", 0], ["0", 0], ["1", 0], ["pair", 0], ["1", 0], ["s", 0], ["pair", 0], ["1", 0], ["1", 0], ["elif", 0], ["pair", 0], ["0", 0], ["1", 0], ["and", 0], ["pair", 0], ["1", 0], ["1", 0], ["s", 0], ["s", 0], ["pair", 0], ["0", 0], ["s", 0], ["pair", 0], ["0", 0], ["1", 0], ["ans", 0], ["ans", 0], ["elif", 0], ["pair", 0], ["0", 0], ["1", 0], ["and", 0], ["pair", 0], ["1", 0], ["1", 0], ["s", 0], ["s", 0], ["pair", 0], ["1", 0], ["s", 0], ["pair", 0], ["1", 0], ["1", 0], ["ans", 0], ["ans", 0], ["pair", 0], ["1", 0], ["2", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main2", 0], ["starting", 0], ["point", 0], ["n", 0], ["input", 0], ["s", 0], ["input", 0], ["ss", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["s", 0], ["s", 0], ["replace", 0], ["l", 0], ["s", 0], ["count", 0], ["r", 0], ["s", 0], ["count", 0], ["print", 0], ["l", 0], ["ss", 0], ["r", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["r", 0], ["c", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["s", 0], ["if", 0], ["a", 0], ["c", 0], ["1", 0], ["elif", 0], ["c", 0], ["c", 0], ["1", 0], ["else", 0], ["l", 0], ["1", 0], ["r", 0], ["c", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["math", 0], ["re", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["sys", 0], ["setrecursionlimit", 0], ["500000", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["1", 0], ["def", 0], ["mi", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["i2", 0], ["n", 0], ["tmp", 0], ["list", 0], ["mi", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["return", 0], ["list", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["zip", 0], ["tmp", 0], ["def", 0], ["main", 0], ["n", 0], ["ii", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["l", 0], ["append", 0], ["l", 0], ["1", 0], ["1", 0], ["else", 0], ["l", 0], ["append", 0], ["l", 0], ["1", 0], ["1", 0], ["m", 0], ["min", 0], ["l", 0], ["if", 0], ["m", 0], ["0", 0], ["l", 0], ["list", 0], ["map", 0], ["lambda", 0], ["x", 0], ["x", 0], ["m", 0], ["l", 0], ["print", 0], ["l", 0], ["0", 0], ["s", 0], ["l", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["i", 0], ["0", 0], ["hidari", 0], ["str", 0], ["migi", 0], ["str", 0], ["a", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["hidari", 0], ["i", 0], ["1", 0], ["else", 0], ["break", 0], ["while", 0], ["i", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["1", 0], ["else", 0], ["a", 0], ["1", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["hidari", 0], ["abs", 0], ["a", 0], ["elif", 0], ["a", 0], ["0", 0], ["migi", 0], ["a", 0], ["s", 0], ["hidari", 0], ["s", 0], ["migi", 0], ["i", 0], ["0", 0], ["hidari", 0], ["str", 0], ["migi", 0], ["str", 0], ["a", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["hidari", 0], ["i", 0], ["1", 0], ["else", 0], ["break", 0], ["while", 0], ["i", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["mina", 0], ["0", 0], ["else", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["if", 0], ["mina", 0], ["a", 0], ["hidari", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["migi", 0], ["a", 0], ["t", 0], ["hidari", 0], ["s", 0], ["migi", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["t", 0], ["print", 0], ["s", 0], ["elif", 0], ["len", 0], ["s", 0], ["len", 0], ["t", 0], ["print", 0], ["s", 0], ["else", 0], ["print", 0], ["t", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["coding", 0], ["utf", 0], ["8", 0], ["in", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["in", 0], ["2", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["r", 0], ["1", 0], ["else", 0], ["if", 0], ["r", 0], ["0", 0], ["r", 0], ["1", 0], ["else", 0], ["l", 0], ["1", 0], ["ans", 0], ["join", 0], ["l", 0], ["s", 0], ["r", 0], ["print", 0], ["ans", 0], ["in", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["s", 0], ["s", 0], ["while", 0], ["s", 0], ["count", 0], ["s", 0], ["s", 0], ["replace", 0], ["l", 0], ["s", 0], ["count", 0], ["r", 0], ["len", 0], ["s", 0], ["l", 0], ["ans", 0], ["l", 0], ["s", 0], ["r", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["t", 0], ["s", 0], ["replace", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["t", 0], ["t", 0], ["replace", 0], ["print", 0], ["t", 0], ["count", 0], ["s", 0], ["t", 0], ["count", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["left", 0], ["0", 0], ["right", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["right", 0], ["1", 0], ["else", 0], ["if", 0], ["right", 0], ["0", 0], ["right", 0], ["1", 0], ["else", 0], ["left", 0], ["1", 0], ["print", 0], ["left", 0], ["s", 0], ["right", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["l", 0], ["1", 0], ["else", 0], ["r", 0], ["1", 0], ["if", 0], ["l", 0], ["r", 0], ["l", 0], ["l", 0], ["1", 0], ["r", 0], ["l", 0], ["r", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["r", 0], ["c", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["s", 0], ["if", 0], ["a", 0], ["c", 0], ["1", 0], ["else", 0], ["if", 0], ["c", 0], ["c", 0], ["1", 0], ["else", 0], ["l", 0], ["1", 0], ["r", 0], ["c", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["math", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["pi", 0], ["sqrt", 0], ["inf", 0], ["float", 0], ["inf", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["import", 0], ["itertools", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["deque", 0], ["def", 0], ["i", 0], ["input", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["i", 0], ["map", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["i", 0], ["list", 0], ["return", 0], ["list", 0], ["i", 0], ["map", 0], ["def", 0], ["i", 0], ["row", 0], ["n", 0], ["return", 0], ["i", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["i", 0], ["row", 0], ["list", 0], ["n", 0], ["return", 0], ["i", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["s", 0], ["input", 0], ["return", 0], ["input", 0], ["def", 0], ["s", 0], ["map", 0], ["return", 0], ["input", 0], ["split", 0], ["def", 0], ["s", 0], ["list", 0], ["return", 0], ["list", 0], ["s", 0], ["map", 0], ["def", 0], ["s", 0], ["row", 0], ["n", 0], ["return", 0], ["s", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["s", 0], ["row", 0], ["str", 0], ["n", 0], ["return", 0], ["s", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["s", 0], ["row", 0], ["list", 0], ["n", 0], ["return", 0], ["list", 0], ["s", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["main", 0], ["n", 0], ["i", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["and", 0], ["r", 0], ["0", 0], ["r", 0], ["1", 0], ["elif", 0], ["i", 0], ["l", 0], ["1", 0], ["if", 0], ["i", 0], ["r", 0], ["1", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["deque", 0], ["input", 0], ["left", 0], ["0", 0], ["right", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["left", 0], ["1", 0], ["else", 0], ["if", 0], ["left", 0], ["0", 0], ["left", 0], ["1", 0], ["else", 0], ["right", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["left", 0], ["s", 0], ["append", 0], ["for", 0], ["in", 0], ["range", 0], ["right", 0], ["s", 0], ["appendleft", 0], ["print", 0], ["join", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["stack", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["len", 0], ["stack", 0], ["0", 0], ["last", 0], ["stack", 0], ["1", 0], ["if", 0], ["last", 0], ["and", 0], ["c", 0], ["stack", 0], ["stack", 0], ["1", 0], ["continue", 0], ["stack", 0], ["append", 0], ["c", 0], ["left", 0], ["stack", 0], ["count", 0], ["right", 0], ["stack", 0], ["count", 0], ["print", 0], ["left", 0], ["s", 0], ["right", 0], ["import", 0], ["re", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["n", 0], ["s", 0], ["check", 0], ["s", 0], ["s", 0], ["check", 0], ["re", 0], ["sub", 0], ["s", 0], ["check", 0], ["while", 0], ["len", 0], ["s", 0], ["check", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["check", 0], ["if", 0], ["s", 0], ["check", 0], ["i", 0], ["s", 0], ["s", 0], ["s", 0], ["check", 0], ["s", 0], ["check", 0], ["break", 0], ["elif", 0], ["s", 0], ["check", 0], ["i", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["check", 0], ["if", 0], ["s", 0], ["check", 0], ["i", 0], ["1", 0], ["s", 0], ["s", 0], ["s", 0], ["check", 0], ["s", 0], ["check", 0], ["break", 0], ["elif", 0], ["s", 0], ["check", 0], ["i", 0], ["1", 0], ["break", 0], ["s", 0], ["check", 0], ["re", 0], ["sub", 0], ["s", 0], ["check", 0], ["print", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["left", 0], ["cnt", 0], ["0", 0], ["right", 0], ["cnt", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["left", 0], ["cnt", 0], ["1", 0], ["else", 0], ["if", 0], ["left", 0], ["cnt", 0], ["0", 0], ["right", 0], ["cnt", 0], ["1", 0], ["else", 0], ["left", 0], ["cnt", 0], ["1", 0], ["s", 0], ["right", 0], ["cnt", 0], ["s", 0], ["left", 0], ["cnt", 0], ["print", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["keep", 0], ["0", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["ans", 0], ["keep", 0], ["1", 0], ["else", 0], ["if", 0], ["keep", 0], ["0", 0], ["ans", 0], ["keep", 0], ["1", 0], ["else", 0], ["ans", 0], ["ans", 0], ["print", 0], ["ans", 0], ["keep", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["count", 0], ["1", 0], ["else", 0], ["if", 0], ["count", 0], ["count", 0], ["1", 0], ["else", 0], ["s", 0], ["s", 0], ["count", 0], ["s", 0], ["print", 0], ["s", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["r", 0], ["0", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["l", 0], ["1", 0], ["else", 0], ["r", 0], ["1", 0], ["if", 0], ["l", 0], ["r", 0], ["l", 0], ["l", 0], ["1", 0], ["r", 0], ["l", 0], ["r", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["s", 0], ["l", 0], ["r", 0], ["input", 0], ["input", 0], ["t", 0], ["s", 0], ["while", 0], ["t", 0], ["count", 0], ["l", 0], ["r", 0], ["t", 0], ["t", 0], ["replace", 0], ["l", 0], ["r", 0], ["print", 0], ["l", 0], ["t", 0], ["count", 0], ["r", 0], ["s", 0], ["r", 0], ["t", 0], ["count", 0], ["l", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["now", 0], ["0", 0], ["right", 0], ["0", 0], ["left", 0], ["0", 0], ["add", 0], ["left", 0], ["0", 0], ["while", 0], ["now", 0], ["n", 0], ["if", 0], ["s", 0], ["now", 0], ["left", 0], ["1", 0], ["else", 0], ["if", 0], ["left", 0], ["left", 0], ["1", 0], ["else", 0], ["add", 0], ["left", 0], ["1", 0], ["now", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["add", 0], ["left", 0], ["print", 0], ["end", 0], ["print", 0], ["s", 0], ["end", 0], ["for", 0], ["in", 0], ["range", 0], ["left", 0], ["print", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["input", 0], ["ans", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["s", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["if", 0], ["l", 0], ["0", 0], ["ans", 0], ["ans", 0], ["else", 0], ["l", 0], ["1", 0], ["else", 0], ["l", 0], ["1", 0], ["ans", 0], ["l", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ans", 0], ["minscore", 0], ["0", 0], ["score", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["score", 0], ["1", 0], ["else", 0], ["score", 0], ["1", 0], ["minscore", 0], ["min", 0], ["minscore", 0], ["score", 0], ["finalscore", 0], ["score", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["minscore", 0], ["ans", 0], ["append", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["append", 0], ["s", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["minscore", 0], ["finalscore", 0], ["ans", 0], ["append", 0], ["print", 0], ["join", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["a", 0], ["1", 0], ["elif", 0], ["s", 0], ["and", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["else", 0], ["b", 0], ["1", 0], ["print", 0], ["b", 0], ["s", 0], ["a", 0], ["n", 0], ["input", 0], ["s", 0], ["input", 0], ["s", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["s", 0], ["s", 0], ["replace", 0], ["l", 0], ["s", 0], ["count", 0], ["r", 0], ["s", 0], ["count", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["import", 0], ["copy", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["input", 0], ["s", 0], ["ans", 0], ["copy", 0], ["deepcopy", 0], ["s", 0], ["app", 0], ["0", 0], ["q", 0], ["0", 0], ["save", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["q", 0], ["append", 0], ["q", 0], ["1", 0], ["1", 0], ["else", 0], ["q", 0], ["append", 0], ["q", 0], ["1", 0], ["1", 0], ["if", 0], ["q", 0], ["1", 0], ["1", 0], ["s", 0], ["ans", 0], ["insert", 0], ["app", 0], ["save", 0], ["app", 0], ["1", 0], ["q", 0], ["1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["1", 0], ["s", 0], ["ans", 0], ["append", 0], ["print", 0], ["join", 0], ["s", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["cnt", 0], ["l", 0], ["cnt", 0], ["r", 0], ["0", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["s", 0], ["if", 0], ["x", 0], ["cnt", 0], ["l", 0], ["1", 0], ["elif", 0], ["cnt", 0], ["l", 0], ["0", 0], ["cnt", 0], ["l", 0], ["1", 0], ["else", 0], ["cnt", 0], ["r", 0], ["1", 0], ["print", 0], ["cnt", 0], ["r", 0], ["s", 0], ["cnt", 0], ["l", 0], ["coding", 0], ["utf", 0], ["8", 0], ["author", 0], ["h", 0], ["hoshigi", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["solo", 0], ["close", 0], ["no", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["solo", 0], ["close", 0], ["no", 0], ["1", 0], ["elif", 0], ["solo", 0], ["close", 0], ["no", 0], ["1", 0], ["solo", 0], ["close", 0], ["no", 0], ["1", 0], ["solo", 0], ["open", 0], ["no", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["solo", 0], ["open", 0], ["no", 0], ["1", 0], ["elif", 0], ["solo", 0], ["open", 0], ["no", 0], ["1", 0], ["solo", 0], ["open", 0], ["no", 0], ["1", 0], ["answer", 0], ["solo", 0], ["close", 0], ["no", 0], ["s", 0], ["solo", 0], ["open", 0], ["no", 0], ["print", 0], ["answer", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["stack", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["stack", 0], ["append", 0], ["a", 0], ["elif", 0], ["s", 0], ["i", 0], ["and", 0], ["len", 0], ["stack", 0], ["0", 0], ["stack", 0], ["append", 0], ["a", 0], ["elif", 0], ["s", 0], ["i", 0], ["and", 0], ["stack", 0], ["1", 0], ["stack", 0], ["append", 0], ["a", 0], ["else", 0], ["s", 0], ["i", 0], ["and", 0], ["stack", 0], ["1", 0], ["stack", 0], ["pop", 0], ["1", 0], ["a", 0], ["while", 0], ["len", 0], ["stack", 0], ["0", 0], ["if", 0], ["stack", 0], ["len", 0], ["stack", 0], ["1", 0], ["e", 0], ["len", 0], ["stack", 0], ["1", 0], ["s", 0], ["e", 0], ["while", 0], ["s", 0], ["1", 0], ["0", 0], ["and", 0], ["stack", 0], ["s", 0], ["1", 0], ["s", 0], ["1", 0], ["a", 0], ["e", 0], ["s", 0], ["1", 0], ["a", 0], ["stack", 0], ["stack", 0], ["s", 0], ["elif", 0], ["stack", 0], ["len", 0], ["stack", 0], ["1", 0], ["e", 0], ["len", 0], ["stack", 0], ["1", 0], ["s", 0], ["e", 0], ["while", 0], ["s", 0], ["1", 0], ["0", 0], ["and", 0], ["stack", 0], ["s", 0], ["1", 0], ["s", 0], ["1", 0], ["a", 0], ["a", 0], ["e", 0], ["s", 0], ["1", 0], ["stack", 0], ["stack", 0], ["s", 0], ["print", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["t", 0], ["list", 0], ["1", 0], ["if", 0], ["c", 0], ["else", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["l", 0], ["l", 0], ["min", 0], ["0", 0], ["0", 0], ["r", 0], ["r", 0], ["min", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["t", 0], ["i", 0], ["l", 0], ["min", 0], ["min", 0], ["l", 0], ["min", 0], ["l", 0], ["r", 0], ["t", 0], ["n", 0], ["i", 0], ["1", 0], ["r", 0], ["min", 0], ["min", 0], ["r", 0], ["min", 0], ["r", 0], ["print", 0], ["join", 0], ["l", 0], ["min", 0], ["s", 0], ["r", 0], ["min", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["str", 0], ["input", 0], ["l", 0], ["r", 0], ["0", 0], ["0", 0], ["p", 0], ["m", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["l", 0], ["1", 0], ["else", 0], ["r", 0], ["1", 0], ["if", 0], ["l", 0], ["r", 0], ["p", 0], ["1", 0], ["l", 0], ["1", 0], ["m", 0], ["l", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["p", 0], ["print", 0], ["end", 0], ["print", 0], ["s", 0], ["end", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["print", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["t", 0], ["s", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["t", 0], ["replace", 0], ["l", 0], ["t", 0], ["count", 0], ["r", 0], ["t", 0], ["count", 0], ["s", 0], ["r", 0], ["s", 0], ["l", 0], ["print", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["p", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["p", 0], ["append", 0], ["else", 0], ["if", 0], ["p", 0], ["l", 0], ["1", 0], ["else", 0], ["p", 0], ["pop", 0], ["r", 0], ["p", 0], ["count", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["input", 0], ["s", 0], ["input", 0], ["needs", 0], ["right", 0], ["0", 0], ["needs", 0], ["left", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["c", 0], ["needs", 0], ["right", 0], ["1", 0], ["else", 0], ["if", 0], ["needs", 0], ["right", 0], ["0", 0], ["needs", 0], ["left", 0], ["1", 0], ["else", 0], ["needs", 0], ["right", 0], ["1", 0], ["print", 0], ["needs", 0], ["left", 0], ["s", 0], ["needs", 0], ["right", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["input", 0], ["d", 0], ["0", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["x", 0], ["1", 0], ["else", 0], ["x", 0], ["1", 0], ["d", 0], ["append", 0], ["x", 0], ["ans", 0], ["x", 0], ["min", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["max", 0], ["0", 0], ["1", 0], ["x", 0], ["ans", 0], ["append", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["ans", 0], ["append", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["max", 0], ["d", 0], ["len", 0], ["d", 0], ["1", 0], ["x", 0], ["0", 0], ["ans", 0], ["append", 0], ["a", 0], ["join", 0], ["ans", 0], ["print", 0], ["a", 0], ["with", 0], ["open", 0], ["0", 0], ["as", 0], ["f", 0], ["n", 0], ["s", 0], ["f", 0], ["read", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["s", 0], ["left", 0], ["0", 0], ["right", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cnt", 0], ["1", 0], ["1", 0], ["s", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["if", 0], ["cnt", 0], ["0", 0], ["left", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["and", 0], ["cnt", 0], ["0", 0], ["right", 0], ["cnt", 0], ["ans", 0], ["left", 0], ["s", 0], ["n", 0], ["right", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["def", 0], ["add1", 0], ["s", 0], ["cum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["cum", 0], ["append", 0], ["cum", 0], ["1", 0], ["1", 0], ["else", 0], ["cum", 0], ["append", 0], ["cum", 0], ["1", 0], ["1", 0], ["if", 0], ["min", 0], ["cum", 0], ["0", 0], ["return", 0], ["s", 0], ["out", 0], ["min", 0], ["cum", 0], ["out", 0], ["s", 0], ["return", 0], ["out", 0], ["def", 0], ["add2", 0], ["s", 0], ["cum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["cum", 0], ["append", 0], ["cum", 0], ["1", 0], ["1", 0], ["else", 0], ["cum", 0], ["append", 0], ["cum", 0], ["1", 0], ["1", 0], ["if", 0], ["cum", 0], ["1", 0], ["0", 0], ["return", 0], ["s", 0], ["n", 0], ["cum", 0], ["1", 0], ["out", 0], ["s", 0], ["n", 0], ["return", 0], ["out", 0], ["s", 0], ["add1", 0], ["s", 0], ["s", 0], ["add2", 0], ["s", 0], ["print", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ans", 0], ["s", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["count", 0], ["1", 0], ["else", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["0", 0], ["ans", 0], ["ans", 0], ["count", 0], ["1", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["count", 0], ["1", 0], ["else", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["0", 0], ["ans", 0], ["ans", 0], ["count", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["str", 0], ["input", 0], ["l", 0], ["left", 0], ["right", 0], ["0", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["c", 0], ["if", 0], ["l", 0], ["left", 0], ["1", 0], ["else", 0], ["l", 0], ["pop", 0], ["else", 0], ["l", 0], ["append", 0], ["1", 0], ["right", 0], ["len", 0], ["l", 0], ["print", 0], ["left", 0], ["s", 0], ["right", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["input", 0], ["s", 0], ["s", 0], ["1", 0], ["balance", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["balance", 0], ["1", 0], ["else", 0], ["balance", 0], ["1", 0], ["if", 0], ["balance", 0], ["0", 0], ["s", 0], ["insert", 0], ["0", 0], ["balance", 0], ["1", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["balance", 0], ["0", 0], ["i", 0], ["0", 0], ["s", 0], ["s", 0], ["1", 0], ["while", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["balance", 0], ["1", 0], ["else", 0], ["balance", 0], ["1", 0], ["if", 0], ["balance", 0], ["0", 0], ["s", 0], ["insert", 0], ["0", 0], ["balance", 0], ["1", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["print", 0], ["join", 0], ["s", 0], ["def", 0], ["main", 0], ["input", 0], ["data", 0], ["import", 0], ["sys", 0], ["input", 0], ["lambda", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["solve", 0], ["right", 0], ["0", 0], ["left", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["right", 0], ["1", 0], ["else", 0], ["if", 0], ["right", 0], ["right", 0], ["1", 0], ["else", 0], ["left", 0], ["1", 0], ["print", 0], ["left", 0], ["s", 0], ["right", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["r", 0], ["1", 0], ["if", 0], ["r", 0], ["0", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["else", 0], ["r", 0], ["1", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["str", 0], ["input", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["x", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["if", 0], ["x", 0], ["1", 0], ["x", 0], ["1", 0], ["else", 0], ["y", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["x", 0], ["s", 0], ["append", 0], ["for", 0], ["in", 0], ["range", 0], ["y", 0], ["s", 0], ["insert", 0], ["0", 0], ["ans", 0], ["join", 0], ["s", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ns", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["ns", 0], ["ns", 0], ["replace", 0], ["r", 0], ["ns", 0], ["count", 0], ["l", 0], ["ns", 0], ["count", 0], ["print", 0], ["r", 0], ["s", 0], ["l", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["floor", 0], ["comb", 0], ["factorial", 0], ["gcd", 0], ["pow", 0], ["sqrt", 0], ["log2", 0], ["cos", 0], ["sin", 0], ["tan", 0], ["acos", 0], ["asin", 0], ["atan", 0], ["degrees", 0], ["radians", 0], ["pi", 0], ["inf", 0], ["from", 0], ["itertools", 0], ["import", 0], ["accumulate", 0], ["permutations", 0], ["combinations", 0], ["product", 0], ["combinations", 0], ["with", 0], ["replacement", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["defaultdict", 0], ["counter", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["bisect", 0], ["right", 0], ["from", 0], ["operator", 0], ["import", 0], ["itemgetter", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heapify", 0], ["heappop", 0], ["heappush", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["lifoqueue", 0], ["priorityqueue", 0], ["from", 0], ["copy", 0], ["import", 0], ["deepcopy", 0], ["from", 0], ["time", 0], ["import", 0], ["time", 0], ["import", 0], ["string", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["int", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["map", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["list", 0], ["return", 0], ["list", 0], ["map", 0], ["n", 0], ["int", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["count", 0], ["1", 0], ["else", 0], ["count", 0], ["max", 0], ["0", 0], ["count", 0], ["1", 0], ["s", 0], ["count", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["count", 0], ["1", 0], ["else", 0], ["count", 0], ["max", 0], ["0", 0], ["count", 0], ["1", 0], ["s", 0], ["count", 0], ["s", 0], ["print", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["r", 0], ["l", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["r", 0], ["1", 0], ["else", 0], ["if", 0], ["r", 0], ["r", 0], ["1", 0], ["else", 0], ["l", 0], ["1", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["n", 0], ["int", 0], ["input", 0], ["n", 0], ["input", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["num", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["n", 0], ["if", 0], ["c", 0], ["num", 0], ["1", 0], ["else", 0], ["if", 0], ["num", 0], ["num", 0], ["1", 0], ["else", 0], ["l", 0], ["1", 0], ["r", 0], ["num", 0], ["print", 0], ["l", 0], ["n", 0], ["r", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["f", 0], ["inf", 0], ["float", 0], ["inf", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["resolve", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["right", 0], ["0", 0], ["left", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["left", 0], ["1", 0], ["else", 0], ["if", 0], ["left", 0], ["left", 0], ["1", 0], ["else", 0], ["right", 0], ["1", 0], ["res", 0], ["right", 0], ["s", 0], ["left", 0], ["print", 0], ["res", 0], ["def", 0], ["starting", 0], ["point", 0], ["resolve", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["input", 0], ["c0", 0], ["0", 0], ["c1", 0], ["0", 0], ["z0", 0], ["0", 0], ["z1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["c0", 0], ["1", 0], ["else", 0], ["if", 0], ["c0", 0], ["0", 0], ["c0", 0], ["1", 0], ["else", 0], ["c1", 0], ["1", 0], ["ans", 0], ["c1", 0], ["s", 0], ["c0", 0], ["print", 0], ["join", 0], ["ans", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["brackets", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["if", 0], ["brackets", 0], ["0", 0], ["0", 0], ["brackets", 0], ["0", 0], ["1", 0], ["else", 0], ["brackets", 0], ["1", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["brackets", 0], ["0", 0], ["1", 0], ["print", 0], ["brackets", 0], ["1", 0], ["s", 0], ["brackets", 0], ["0", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["input", 0], ["c0", 0], ["0", 0], ["c1", 0], ["0", 0], ["z0", 0], ["0", 0], ["z1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["c0", 0], ["1", 0], ["else", 0], ["if", 0], ["c0", 0], ["0", 0], ["c0", 0], ["1", 0], ["else", 0], ["c1", 0], ["1", 0], ["z0", 0], ["c1", 0], ["s", 0], ["s", 0], ["1", 0], ["c0", 0], ["0", 0], ["c1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["c0", 0], ["1", 0], ["else", 0], ["if", 0], ["c0", 0], ["0", 0], ["c0", 0], ["1", 0], ["else", 0], ["c1", 0], ["1", 0], ["z1", 0], ["c1", 0], ["s", 0], ["s", 0], ["1", 0], ["ans", 0], ["z0", 0], ["s", 0], ["z1", 0], ["print", 0], ["join", 0], ["ans", 0], ["icase", 0], ["0", 0], ["if", 0], ["icase", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["elif", 0], ["icase", 0], ["1", 0], ["n", 0], ["3", 0], ["s", 0], ["elif", 0], ["icase", 0], ["2", 0], ["n", 0], ["6", 0], ["s", 0], ["elif", 0], ["icase", 0], ["3", 0], ["n", 0], ["8", 0], ["s", 0], ["l", 0], ["r", 0], ["sim", 0], ["s", 0], ["0", 0], ["if", 0], ["sim", 0], ["lidx", 0], ["0", 0], ["l", 0], ["append", 0], ["1", 0], ["ridx", 0], ["1", 0], ["elif", 0], ["sim", 0], ["lidx", 0], ["0", 0], ["l", 0], ["append", 0], ["0", 0], ["ridx", 0], ["0", 0], ["r", 0], ["append", 0], ["1", 1], ["for", 2], ["i", 2], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["l", 0], ["lidx", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["lidx", 0], ["1", 0], ["l", 0], ["append", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["r", 0], ["ridx", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["ridx", 0], ["1", 0], ["r", 0], ["append", 0], ["1", 0], ["ll", 0], ["sum", 0], ["l", 0], ["rr", 0], ["sum", 0], ["r", 0], ["ds", 0], ["ll", 0], ["rr", 0], ["if", 0], ["len", 0], ["l", 0], ["len", 0], ["r", 0], ["r", 0], ["append", 0], ["0", 0], ["elif", 0], ["len", 0], ["l", 0], ["len", 0], ["r", 0], ["l", 0], ["append", 0], ["0", 0], ["xmin", 0], ["100", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["x", 0], ["x", 0], ["l", 0], ["i", 0], ["r", 0], ["i", 0], ["xmin", 0], ["min", 0], ["x", 0], ["xmin", 0], ["if", 0], ["xmin", 0], ["0", 0], ["xmin", 0], ["0", 0], ["strs", 0], ["xmin", 0], ["s", 0], ["ds", 0], ["xmin", 0], ["print", 0], ["strs", 0], ["from", 0], ["statistics", 0], ["import", 0], ["median", 0], ["import", 0], ["collections", 0], ["aa", 0], ["collections", 0], ["counter", 0], ["a", 0], ["list", 0], ["to", 0], ["list", 0], ["most", 0], ["common", 0], ["2", 0], ["で最大の2個とりだせるお", 0], ["a", 0], ["0", 0], ["0", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["permutations", 0], ["accumulate", 0], ["product", 0], ["string", 0], ["3", 0], ["3回", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["defaultdict", 0], ["counter", 0], ["import", 0], ["decimal", 0], ["import", 0], ["re", 0], ["import", 0], ["math", 0], ["import", 0], ["bisect", 0], ["import", 0], ["heapq", 0], ["pythonで無理なときは、pypyでやると正解するかも！！", 0], ["my", 0], ["round", 0], ["int", 0], ["lambda", 0], ["x", 0], ["np", 0], ["round", 0], ["x", 0], ["2", 0], ["1", 0], ["2", 0], ["四捨五入g", 0], ["インデックス系", 0], ["int", 0], ["min", 0], ["y", 0], ["max", 0], ["0", 0], ["i", 0], ["2", 0], ["max", 0], ["y", 0], ["min", 0], ["h", 0], ["1", 0], ["i", 0], ["2", 0], ["int", 0], ["min", 0], ["x", 0], ["max", 0], ["0", 0], ["j", 0], ["2", 0], ["max", 0], ["x", 0], ["min", 0], ["w", 0], ["1", 0], ["j", 0], ["2", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10000000", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["mod", 0], ["9982443453", 0], ["mod", 0], ["998244353", 0], ["inf", 0], ["float", 0], ["inf", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["readline", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["readints", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["def", 0], ["readtuples", 0], ["return", 0], ["tuple", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["readline", 0], ["n", 0], ["i", 0], ["s", 0], ["input", 0], ["left", 0], ["0", 0], ["right", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["right", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["if", 0], ["right", 0], ["1", 0], ["right", 0], ["1", 0], ["else", 0], ["left", 0], ["1", 0], ["print", 0], ["left", 0], ["s", 0], ["right", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["input", 0], ["s", 0], ["input", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["c", 0], ["1", 0], ["else", 0], ["if", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["d", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["1", 0], ["if", 0], ["i", 0], ["d", 0], ["1", 0], ["else", 0], ["if", 0], ["d", 0], ["0", 0], ["d", 0], ["1", 0], ["print", 0], ["d", 0], ["s", 0], ["c", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ans", 0], ["s", 0], ["while", 0], ["s", 0], ["count", 0], ["0", 0], ["s", 0], ["s", 0], ["replace", 0], ["cnt", 0], ["l", 0], ["s", 0], ["count", 0], ["cnt", 0], ["r", 0], ["s", 0], ["count", 0], ["print", 0], ["cnt", 0], ["l", 0], ["ans", 0], ["cnt", 0], ["r", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["os", 0], ["s", 0], ["s", 0], ["list", 0], ["s", 0], ["cnt", 0], ["0", 0], ["while", 0], ["true", 0], ["p", 0], ["cnt", 0], ["cnt", 0], ["for", 6], ["i", 6], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["pop", 0], ["i", 0], ["1", 0], ["s", 0], ["pop", 0], ["i", 0], ["cnt", 0], ["1", 0], ["break", 0], ["if", 0], ["cnt", 0], ["p", 0], ["cnt", 0], ["break", 0], ["cnt", 0], ["open", 0], ["0", 0], ["cnt", 0], ["close", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["cnt", 0], ["open", 0], ["1", 0], ["else", 0], ["cnt", 0], ["close", 0], ["1", 0], ["ans", 0], ["cnt", 0], ["close", 0], ["os", 0], ["cnt", 0], ["open", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["r", 0], ["0", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["l", 0], ["1", 0], ["else", 0], ["r", 0], ["1", 0], ["if", 0], ["l", 0], ["r", 0], ["l", 0], ["l", 0], ["1", 0], ["r", 0], ["l", 0], ["r", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["n", 0], ["s", 0], ["open", 0], ["0", 0], ["read", 0], ["split", 0], ["imp", 0], ["close", 0], ["0", 0], ["imp", 0], ["open", 0], ["0", 0], ["for", 0], ["char", 0], ["in", 0], ["s", 0], ["if", 0], ["char", 0], ["imp", 0], ["open", 0], ["1", 0], ["else", 0], ["if", 0], ["imp", 0], ["open", 0], ["imp", 0], ["open", 0], ["1", 0], ["else", 0], ["imp", 0], ["close", 0], ["1", 0], ["print", 0], ["imp", 0], ["close", 0], ["s", 0], ["imp", 0], ["open", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["rstrip", 0], ["ans", 0], ["n", 0], ["left", 0], ["0", 0], ["n", 0], ["right", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["n", 0], ["left", 0], ["1", 0], ["else", 0], ["if", 0], ["n", 0], ["left", 0], ["0", 0], ["n", 0], ["left", 0], ["1", 0], ["else", 0], ["n", 0], ["right", 0], ["1", 0], ["ans", 0], ["join", 0], ["n", 0], ["right", 0], ["s", 0], ["n", 0], ["left", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ss", 0], ["s", 0], ["while", 0], ["ss", 0], ["count", 0], ["ss", 0], ["ss", 0], ["replace", 0], ["left", 0], ["right", 0], ["ss", 0], ["count", 0], ["ss", 0], ["count", 0], ["print", 0], ["right", 0], ["s", 0], ["left", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["flg", 0], ["l", 0], ["false", 0], ["cnt", 0], ["r", 0], ["0", 0], ["cnt", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["cnt", 0], ["r", 0], ["1", 0], ["flg", 0], ["l", 0], ["true", 0], ["else", 0], ["if", 0], ["flg", 0], ["l", 0], ["if", 0], ["cnt", 0], ["r", 0], ["0", 0], ["cnt", 0], ["r", 0], ["1", 0], ["else", 0], ["cnt", 0], ["l", 0], ["1", 0], ["flg", 0], ["l", 0], ["false", 0], ["else", 0], ["cnt", 0], ["l", 0], ["1", 0], ["ans", 0], ["ans", 0], ["cnt", 0], ["l", 0], ["s", 0], ["cnt", 0], ["r", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["opens", 0], ["0", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["opens", 0], ["1", 0], ["else", 0], ["opens", 0], ["1", 0], ["if", 0], ["opens", 0], ["0", 0], ["l", 0], ["1", 0], ["opens", 0], ["0", 0], ["print", 0], ["l", 0], ["s", 0], ["opens", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["countr", 0], ["countl", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["countr", 0], ["1", 0], ["elif", 0], ["countr", 0], ["0", 0], ["countr", 0], ["1", 0], ["s", 0], ["countr", 0], ["s", 0], ["n", 0], ["len", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["countl", 0], ["1", 0], ["elif", 0], ["countl", 0], ["0", 0], ["countl", 0], ["1", 0], ["s", 0], ["countl", 0], ["print", 0], ["s", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["que", 0], ["deque", 0], ["s", 0], ["l", 0], ["r", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["l", 0], ["1", 0], ["else", 0], ["r", 0], ["1", 0], ["if", 0], ["l", 0], ["r", 0], ["que", 0], ["appendleft", 0], ["l", 0], ["1", 0], ["else", 0], ["ans", 0], ["join", 0], ["que", 0], ["if", 0], ["r", 0], ["l", 0], ["ans", 0], ["ans", 0], ["l", 0], ["r", 0], ["print", 0], ["ans", 0], ["coding", 0], ["utf", 0], ["8", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["defaultdict", 0], ["namedtuple", 0], ["import", 0], ["heapq", 0], ["from", 0], ["math", 0], ["import", 0], ["sqrt", 0], ["factorial", 0], ["gcd", 0], ["ceil", 0], ["atan", 0], ["pi", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["1", 0], ["warning", 0], ["not", 0], ["n", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["1", 0], ["warning", 0], ["bytes", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["strip", 0], ["warning", 0], ["bytes", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["decode", 0], ["utf", 0], ["8", 0], ["import", 0], ["string", 0], ["import", 0], ["operator", 0], ["import", 0], ["random", 0], ["string", 0], ["ascii", 0], ["lowercase", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["bisect", 0], ["right", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["reduce", 0], ["mod", 0], ["int", 0], ["1e9", 0], ["7", 0], ["inf", 0], ["float", 0], ["inf", 0], ["sys", 0], ["setrecursionlimit", 0], ["int", 0], ["1e6", 0], ["def", 0], ["solve", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["stack", 0], ["1", 0], ["for", 0], ["e", 0], ["in", 0], ["s", 0], ["if", 0], ["e", 0], ["stack", 0], ["append", 0], ["e", 0], ["else", 0], ["if", 0], ["stack", 0], ["1", 0], ["stack", 0], ["pop", 0], ["else", 0], ["stack", 0], ["append", 0], ["e", 0], ["l", 0], ["stack", 0], ["count", 0], ["r", 0], ["stack", 0], ["count", 0], ["print", 0], ["l", 0], ["s", 0], ["r", 0], ["t", 0], ["1", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["case", 0], ["in", 0], ["range", 0], ["1", 0], ["t", 0], ["1", 0], ["ans", 0], ["solve", 0], ["dp", 0], ["num", 0], ["changes", 0], ["blue", 0], ["placed", 0], ["abba", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["lc", 0], ["0", 0], ["rc", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["rc", 0], ["1", 0], ["else", 0], ["if", 0], ["rc", 0], ["rc", 0], ["1", 0], ["else", 0], ["lc", 0], ["1", 0], ["print", 0], ["lc", 0], ["s", 0], ["rc", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["int1", 0], ["x", 0], ["return", 0], ["int", 0], ["x", 0], ["1", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["mi", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["mi1", 0], ["return", 0], ["list", 0], ["map", 0], ["int1", 0], ["input", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["li1", 0], ["return", 0], ["list", 0], ["map", 0], ["int1", 0], ["input", 0], ["split", 0], ["def", 0], ["lli", 0], ["rows", 0], ["number", 0], ["return", 0], ["li", 0], ["for", 0], ["in", 0], ["range", 0], ["rows", 0], ["number", 0], ["def", 0], ["ms", 0], ["return", 0], ["input", 0], ["split", 0], ["def", 0], ["ls", 0], ["return", 0], ["list", 0], ["input", 0], ["def", 0], ["lls", 0], ["rows", 0], ["number", 0], ["return", 0], ["ls", 0], ["for", 0], ["in", 0], ["range", 0], ["rows", 0], ["number", 0], ["def", 0], ["printlist", 0], ["lst", 0], ["k", 0], ["print", 0], ["k", 0], ["join", 0], ["list", 0], ["map", 0], ["str", 0], ["lst", 0], ["inf", 0], ["float", 0], ["inf", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["floor", 0], ["log2", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["as", 0], ["comb", 0], ["combinations", 0], ["with", 0], ["replacement", 0], ["as", 0], ["comb", 0], ["w", 0], ["accumulate", 0], ["product", 0], ["permutations", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heapify", 0], ["heappop", 0], ["heappush", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["cumsum", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["bisect", 0], ["right", 0], ["def", 0], ["solve", 0], ["n", 0], ["ii", 0], ["s", 0], ["ls", 0], ["q", 0], ["deque", 0], ["print", 0], ["s", 0], ["cnt", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["cnt", 0], ["1", 0], ["q", 0], ["append", 0], ["s", 0], ["else", 0], ["if", 0], ["cnt", 0], ["1", 0], ["q", 0], ["append", 0], ["s", 0], ["cnt", 0], ["1", 0], ["else", 0], ["q", 0], ["appendleft", 0], ["q", 0], ["append", 0], ["s", 0], ["for", 0], ["in", 0], ["range", 0], ["cnt", 0], ["q", 0], ["append", 0], ["print", 0], ["q", 0], ["printlist", 0], ["q", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["cntr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["cntr", 0], ["1", 0], ["elif", 0], ["cntr", 0], ["0", 0], ["cntr", 0], ["1", 0], ["s", 0], ["cntr", 0], ["s", 0], ["n", 0], ["len", 0], ["s", 0], ["cntl", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["cntl", 0], ["1", 0], ["elif", 0], ["cntl", 0], ["0", 0], ["cntl", 0], ["1", 0], ["s", 0], ["cntl", 0], ["print", 0], ["s", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["in", 0], ["i", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["in", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["def", 0], ["in", 0], ["s", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["in", 0], ["ls", 0], ["return", 0], ["list", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["n", 0], ["in", 0], ["i", 0], ["s", 0], ["in", 0], ["s", 0], ["d", 0], ["deque", 0], ["s", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["l", 0], ["1", 0], ["else", 0], ["if", 0], ["l", 0], ["0", 0], ["d", 0], ["appendleft", 0], ["else", 0], ["l", 0], ["1", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["r", 0], ["1", 0], ["else", 0], ["if", 0], ["r", 0], ["0", 0], ["d", 0], ["append", 0], ["else", 0], ["r", 0], ["1", 0], ["print", 0], ["join", 0], ["d", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["rstrip", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["r", 0], ["1", 0], ["else", 0], ["if", 0], ["r", 0], ["0", 0], ["r", 0], ["1", 0], ["else", 0], ["l", 0], ["1", 0], ["ans", 0], ["join", 0], ["l", 0], ["s", 0], ["r", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["r", 0], ["1", 0], ["else", 0], ["if", 0], ["r", 0], ["0", 0], ["r", 0], ["1", 0], ["else", 0], ["l", 0], ["1", 0], ["ans", 0], ["l", 0], ["s", 0], ["r", 0], ["print", 0], ["ans", 0], ["n", 0], ["input", 0], ["cnt", 0], ["0", 0], ["s", 0], ["input", 0], ["m", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["cnt", 0], ["1", 0], ["else", 0], ["cnt", 0], ["1", 0], ["m", 0], ["min", 0], ["m", 0], ["cnt", 0], ["left", 0], ["min", 0], ["0", 0], ["m", 0], ["right", 0], ["abs", 0], ["cnt", 0], ["m", 0], ["print", 0], ["left", 0], ["s", 0], ["right", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["x", 0], ["0", 0], ["m", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["x", 0], ["1", 0], ["else", 0], ["x", 0], ["1", 0], ["m", 0], ["min", 0], ["x", 0], ["m", 0], ["a", 0], ["m", 0], ["b", 0], ["x", 0], ["m", 0], ["print", 0], ["a", 0], ["s", 0], ["b", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["reservel", 0], ["deque", 0], ["out", 0], ["deque", 0], ["q", 0], ["deque", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["reservel", 0], ["append", 0], ["s", 0], ["out", 0], ["append", 0], ["else", 0], ["print", 0], ["len", 0], ["reservel", 0], ["if", 0], ["len", 0], ["reservel", 0], ["0", 0], ["out", 0], ["appendleft", 0], ["out", 0], ["append", 0], ["else", 0], ["out", 0], ["append", 0], ["reservel", 0], ["popleft", 0], ["print", 0], ["out", 0], ["print", 0], ["out", 0], ["while", 0], ["reservel", 0], ["out", 0], ["append", 0], ["reservel", 0], ["popleft", 0], ["ans", 0], ["while", 0], ["out", 0], ["ans", 0], ["out", 0], ["popleft", 0], ["print", 0], ["ans", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["deque", 0], ["input", 0], ["left", 0], ["0", 0], ["right", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["left", 0], ["1", 0], ["else", 0], ["if", 0], ["left", 0], ["0", 0], ["left", 0], ["1", 0], ["else", 0], ["right", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["left", 0], ["s", 0], ["append", 0], ["for", 0], ["in", 0], ["range", 0], ["right", 0], ["s", 0], ["appendleft", 0], ["print", 0], ["join", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["counter", 0], ["l", 0], ["0", 0], ["pairs", 0], ["0", 0], ["double", 0], ["check", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["counter", 0], ["l", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["j", 0], ["and", 0], ["j", 0], ["not", 0], ["in", 0], ["double", 0], ["check", 0], ["pairs", 0], ["1", 0], ["double", 0], ["check", 0], ["add", 0], ["j", 0], ["break", 0], ["counter", 0], ["r", 0], ["n", 0], ["counter", 0], ["l", 0], ["s", 0], ["s", 0], ["counter", 0], ["l", 0], ["pairs", 0], ["s", 0], ["counter", 0], ["r", 0], ["pairs", 0], ["s", 0], ["print", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["s", 0], ["list", 0], ["a", 0], ["from", 0], ["copy", 0], ["import", 0], ["copy", 0], ["ans", 0], ["copy", 0], ["s", 0], ["left", 0], ["0", 0], ["right", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["left", 0], ["1", 0], ["else", 0], ["if", 0], ["left", 0], ["0", 0], ["right", 0], ["1", 0], ["else", 0], ["left", 0], ["1", 0], ["print", 0], ["right", 0], ["str", 0], ["a", 0], ["left", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.001743510267338241, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0010331912695337726, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.011016621569385389, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.008761757505476092, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.001743510267338241, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0010331912695337726, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.011016621569385389, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.008761757505476092, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nIvan is a novice painter. He has $n$ dyes of different colors. He also knows exactly $m$ pairs of colors which harmonize with each other.\n\nIvan also enjoy playing chess. He has $5000$ rooks. He wants to take $k$ rooks, paint each of them in one of $n$ colors and then place this $k$ rooks on a chessboard of size $10^{9} \\times 10^{9}$.\n\nLet's call the set of rooks on the board connected if from any rook we can get to any other rook in this set moving only through cells with rooks from this set. Assume that rooks can jump over other rooks, in other words a rook can go to any cell which shares vertical and to any cell which shares horizontal.\n\nIvan wants his arrangement of rooks to have following properties: For any color there is a rook of this color on a board; For any color the set of rooks of this color is connected; For any two different colors $a$ $b$ union of set of rooks of color $a$ and set of rooks of color $b$ is connected if and only if this two colors harmonize with each other.\n\nPlease help Ivan find such an arrangement.\n\n\n-----Input-----\n\nThe first line of input contains $2$ integers $n$, $m$ ($1 \\le n \\le 100$, $0 \\le m \\le min(1000, \\,\\, \\frac{n(n-1)}{2})$) — number of colors and number of pairs of colors which harmonize with each other.\n\nIn next $m$ lines pairs of colors which harmonize with each other are listed. Colors are numbered from $1$ to $n$. It is guaranteed that no pair occurs twice in this list.\n\n\n-----Output-----\n\nPrint $n$ blocks, $i$-th of them describes rooks of $i$-th color.\n\nIn the first line of block print one number $a_{i}$ ($1 \\le a_{i} \\le 5000$) — number of rooks of color $i$. In each of next $a_{i}$ lines print two integers $x$ and $y$ ($1 \\le x, \\,\\, y \\le 10^{9}$) — coordinates of the next rook.\n\nAll rooks must be on different cells.\n\nTotal number of rooks must not exceed $5000$.\n\nIt is guaranteed that the solution exists.\n\n\n-----Examples-----\nInput\n3 2\n1 2\n2 3\n\nOutput\n2\n3 4\n1 4\n4\n1 2\n2 2\n2 4\n5 4\n1\n5 1\n\nInput\n3 3\n1 2\n2 3\n3 1\n\nOutput\n1\n1 1\n1\n1 2\n1\n1 3\n\nInput\n3 1\n1 3\n\nOutput\n1\n1 1\n1\n2 2\n1\n3 1\n\n\n\n-----Note-----\n\nRooks arrangements for all three examples (red is color $1$, green is color $2$ and blue is color $3$).\n\n$\\left. \\begin{array}{|l|l|l|l|l|l|l|} \\hline 5 & {} & {} & {} & {} & {} \\\\ \\hline 4 & {} & {} & {} & {} & {} \\\\ \\hline 3 & {} & {} & {} & {} & {} \\\\ \\hline 2 & {} & {} & {} & {} & {} \\\\ \\hline 1 & {} & {} & {} & {} & {} \\\\ \\hline & {1} & {2} & {3} & {4} & {5} \\\\ \\hline \\end{array} \\right.$\n\n$\\left. \\begin{array}{|l|l|l|l|} \\hline 2 & {} & {} & {} \\\\ \\hline 1 & {} & {} & {} \\\\ \\hline & {1} & {2} & {3} \\\\ \\hline \\end{array} \\right.$\n\n$\\left. \\begin{array}{|l|l|l|l|} \\hline 2 & {} & {} & {} \\\\ \\hline 1 & {} & {} & {} \\\\ \\hline & {1} & {2} & {3} \\\\ \\hline \\end{array} \\right.$\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, m = list(map(int, input().split()))\ncolor_pairs = [list(map(int, input().split())) for i in range(m)]\ntowers = [[(i, i)] for i in range(1, n + 1)]\nlast_coord = n + 1\nfor c1, c2 in color_pairs:\n\ttowers[c1 - 1].append((last_coord, c1))\n\ttowers[c2 - 1].append((last_coord, c2))\n\tlast_coord += 1\nfor i in range(len(towers)):\n\tprint(len(towers[i]))\n\tfor x, y in towers[i]:\n\t\tprint(x, y)\n\n\n", "from collections import defaultdict\nn, m = list(map(int, input().split()))\npairs = defaultdict(set)\nfor _ in range(m):\n\tl, r = list(map(int, input().split()))\n\tpairs[l-1].add(r-1)\n\tpairs[r-1].add(l-1)\nanswers = defaultdict(list)\nfree_rooks = defaultdict(int)\ny = 1\nfor color in range(n):\n\tfree_rooks[color] = y\n\tfor c in pairs[color]:\n\t\tif c < color:\n\t\t\tanswers[color].append((color + 1, free_rooks[c]))\n\t\t\tfree_rooks[c] += 1\n\t\telse:\n\t\t\tanswers[color].append((color + 1, y))\n\t\t\ty += 1\n\tanswers[color].append((color + 1, y))\n\ty += 1\nfor color in range(n):\n\tprint(len(answers[color]))\n\tfor x, y in answers[color]:\n\t\tprint(x, y)\n", "s = input().split()\nn = int(s[0])\nm = int(s[1])\n\ncol = []\n\nfor i in range(n):\n\tcol.append([i])\nt = n + 1\nfor i in range(m):\n\ts = input().split()\n\ta = int(s[0]) - 1\n\tb = int(s[1]) - 1\n\tcol[a].append(t)\n\tcol[b].append(t)\n\tt += 1\nfor i in range(len(col)):\n\tprint(len(col[i]))\n\tfor j in range(len(col[i])):\n\t\tprint(i + 1, col[i][j] + 1)\n\t\n", "cols, pairs = [int(x) for x in input().split()]\n\nimport collections\nd = collections.defaultdict(list)\n\nfor _ in range(pairs):\n\ta, b = [int(x) for x in input().split()]\n\td[a].append(b)\n\t#d[b].append(a)\n\nrooks = collections.defaultdict(list)\n# rooks = [[] for _ in range(cols)]\n\ncurrent_line = 1\nfor i in range(1, cols+1):\n\n\trooks[i].append((i, current_line))\n\tcurrent_line += 1\n\n\tfor harmony in d[i]:\n\t\trooks[i].append((i, current_line))\n\t\trooks[harmony].append((harmony, current_line))\n\t\tcurrent_line += 1\n\nfor i in range(1, cols+1):\n\tprint(len(rooks[i]))\n\tfor a, b in rooks[i]:\n\t\tprint(a, b)\n", "3\n\nimport math\nimport sys\n\n\nDEBUG = False\n\n\ndef inp():\n\treturn sys.stdin.readline().rstrip()\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n\tif DEBUG:\n\t\tprint(*value, sep=sep, end=end)\n\n\ndef solve(N, M, A):\n\tans = [[] for _ in range(N)]\n\tfor i in range(1, N + 1):\n\t\tans[i - 1].append((i, i))\n\n\ty = N + 1\n\tfor a in range(1, N + 1):\n\t\tfor b in range(a + 1, N + 1):\n\t\t\tif A[a][b] == 1:\n\t\t\t\tans[a - 1].append((a, y))\n\t\t\t\tans[b - 1].append((b, y))\n\t\t\t\ty += 1\n\n\treturn ans\n\n\ndef main():\n\tN, M = [int(e) for e in inp().split()]\n\tA = [bytearray(N + 1) for _ in range(N + 1)]\n\tfor _ in range(M):\n\t\ta, b = [int(e) for e in inp().split()]\n\t\tA[a][b] = 1\n\t\tA[b][a] = 1\n\n\tans = solve(N, M, A)\n\tassert len(ans) == N\n\tfor coords in ans:\n\t\tprint(len(coords))\n\t\tfor x, y in coords:\n\t\t\tprint(x, y)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n,m = list(map(int, input().split()))\nd = {}\nfor i in range(1,n+1):\n\td[i] = set()\nfor i in range(m):\n\tx,y = list(map(int, input().split()))\n\td[x].add(x*n+y)\n\td[y].add(x*n+y)\nfor i in range(1,n+1):\n\tprint(len(d[i])+1)\n\tprint(i,i)\n\tfor k in d[i]:\n\t\tprint(i,k)\n", "n,m=map(int,input().split())\nharmonies=[]\nfor i in range(m):\n\tharmonies.append(list(map(int,input().split())))\nspots=[]\nfor i in range(n):\n\tyourspots=[]\n\tfor j in range(m):\n\t\tif i+1 in harmonies[j]:\n\t\t\tyourspots.append((i+1,j+1))\n\tyourspots.append((i+1,10000-i))\n\tspots.append(yourspots)\nfor i in range(n):\n\tprint(len(spots[i]))\n\tfor j in range(len(spots[i])):\n\t\tprint(str(spots[i][j][0]),str(spots[i][j][1]))\n", "import math\n\nn,m = list(map(int, input().split()))\nhs = []\nfor _ in range(m):\n\ta,b = list(map(int, input().split()))\n\ta -= 1\n\tb -= 1\n\ths.append((min(a,b),max(a,b)))\n\nused = [0]*n\nplaced = [[] for _ in range(n)]\n\nfor (a,b) in hs:\n\tplaced[a].append(b*n + used[b])\n\tused[b] += 1\n\nfor i in range(n):\n\tprint(max(1,used[i])+len(placed[i]))\n\tfor j in range(max(1,used[i])):\n\t\tprint(i*n + j +1, i+1)\n\tfor j in placed[i]:\n\t\tprint(j +1, i+1)\n", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn map(int, minp().split())\n\nn, m = mints()\na = []\np = [None]*n\nfor i in range(n):\n\tp[i] = []\nfor i in range(m):\n\tx, y = mints()\n\tp[x-1].append((i+1,x))\n\tp[y-1].append((i+1,y))\nfor i in range(n):\n\tp[i].append((m+1+i,i+1))\nfor i in range(n):\n\tprint(len(p[i]))\n\tfor j in p[i]:\n\t\tprint(*j)\n", "n, m = list(map(int, input().split()))\na = {q: [] for q in range(1, n+1)}\nfor q in range(m):\n\tx, y = list(map(int, input().split()))\n\ta[min(x, y)].append(max(y, x))\na = {q: sorted(a[q]) for q in range(1, n+1)}\nanswer = [[] for q in range(1, n+1)]\nq2 = 1\nfor q in range(1, n+1):\n\tfor q1 in a[q]:\n\t\tanswer[q1-1].append(q2)\n\t\tanswer[q-1].append(q2)\n\t\tq2 += 1\n\tanswer[q-1].append(q2)\n\tq2 += 1\nfor q in range(n):\n\tprint(len(answer[q]))\n\tfor q1 in answer[q]:\n\t\tprint(q+1, q1)\n", "n, m = map(int, input().split())\na = [[] for i in range(n + 1)]\nfor i in range(m):\n\tloc1, loc2 = map(int, input().split())\n\ta[loc1].append(loc2)\n\ta[loc2].append(loc1)\n\nk = 1\ncvaz = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n\tl = len(a[i])\n\tprint(l + 1)\n\tprint(i, k)\n\tk += 1\n\tcvaz[i] = k\n\tfor j in range(l):\n\t\tif a[i][j] > i:\n\t\t\tprint(i, k)\n\t\t\tk += 1\n\t\telse:\n\t\t\tprint(i, cvaz[a[i][j]])\n\t\t\tcvaz[a[i][j]] += 1\n", "n,m=[int(el) for el in input().split()]\n\npair=[]\nkol={i:1 for i in range(1,n+1)}\n\nfor i in range(m):\n\tq,w=[int(el) for el in input().split()]\n\tif q<w:\n\t\tpair.append((q,w))\n\telse:\n\t\tq,w=w,q\n\t\tpair.append((q,w))\n\tkol[q]+=1\n\tkol[w]+=1\n\npair.sort()\n\nmazy=[]\nfor i in range(1,n+1):\n\tmazy.append((i,i,i))\n\nfor i in pair:\n\tmazy.append((i[0],10000*i[1]+i[0],i[0]))\n\tmazy.append((i[1],10000*i[1]+i[0],i[1]))\n\nmazy.sort()\n\ncur=1\nprint(kol[1])\n\nwhile mazy!=[]:\n\tq=mazy.pop(0)\n\tif q[0]==cur:\n\t\tprint(q[1],q[0])\n\telse:\n\t\tprint(kol[q[0]])\n\t\tprint(q[1],q[0])\n\t\tcur=q[0]\n\n\n"], "id": "id9650"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9650", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["ivan", 1], ["is", 1], ["a", 1], ["novice", 1], ["painter", 1], ["he", 1], ["has", 1], ["n", 1], ["dyes", 1], ["of", 1], ["different", 1], ["colors", 1], ["he", 1], ["also", 1], ["knows", 1], ["exactly", 1], ["m", 1], ["pairs", 1], ["of", 1], ["colors", 1], ["which", 1], ["harmonize", 1], ["with", 1], ["each", 1], ["other", 1], ["ivan", 1], ["also", 1], ["enjoy", 1], ["playing", 1], ["chess", 1], ["he", 1], ["has", 1], ["5000", 1], ["rooks", 1], ["he", 1], ["wants", 1], ["to", 1], ["take", 1], ["k", 1], ["rooks", 1], ["paint", 1], ["each", 1], ["of", 1], ["them", 1], ["in", 1], ["one", 1], ["of", 1], ["n", 1], ["colors", 1], ["and", 0], ["then", 0], ["place", 0], ["this", 0], ["k", 0], ["rooks", 0], ["on", 0], ["a", 0], ["chessboard", 0], ["of", 0], ["size", 0], ["10", 0], ["9", 0], ["times", 0], ["10", 0], ["9", 0], ["let", 1], ["s", 1], ["call", 2], ["the", 2], ["set", 2], ["of", 2], ["rooks", 2], ["on", 2], ["the", 2], ["board", 2], ["connected", 2], ["if", 2], ["from", 2], ["any", 2], ["rook", 2], ["we", 2], ["can", 2], ["get", 2], ["to", 2], ["any", 2], ["other", 2], ["rook", 2], ["in", 2], ["this", 2], ["set", 2], ["moving", 2], ["only", 2], ["through", 2], ["cells", 2], ["with", 2], ["rooks", 2], ["from", 2], ["this", 2], ["set", 2], ["assume", 2], ["that", 2], ["rooks", 2], ["can", 2], ["jump", 2], ["over", 2], ["other", 2], ["rooks", 2], ["in", 2], ["other", 2], ["words", 2], ["a", 2], ["rook", 2], ["can", 2], ["go", 2], ["to", 2], ["any", 0], ["cell", 0], ["which", 0], ["shares", 0], ["vertical", 0], ["and", 0], ["to", 0], ["any", 0], ["cell", 0], ["which", 0], ["shares", 0], ["horizontal", 0], ["ivan", 0], ["wants", 0], ["his", 0], ["arrangement", 0], ["of", 0], ["rooks", 0], ["to", 0], ["have", 0], ["following", 0], ["properties", 0], ["for", 0], ["any", 0], ["color", 0], ["there", 0], ["is", 0], ["a", 0], ["rook", 0], ["of", 0], ["this", 0], ["color", 0], ["on", 0], ["a", 0], ["board", 0], ["for", 0], ["any", 0], ["color", 0], ["the", 0], ["set", 0], ["of", 0], ["rooks", 0], ["of", 0], ["this", 0], ["color", 0], ["is", 0], ["connected", 0], ["for", 1], ["any", 1], ["two", 1], ["different", 1], ["colors", 1], ["a", 1], ["b", 1], ["union", 1], ["of", 1], ["set", 1], ["of", 1], ["rooks", 1], ["of", 1], ["color", 1], ["a", 1], ["and", 1], ["set", 1], ["of", 1], ["rooks", 1], ["of", 1], ["color", 1], ["b", 1], ["is", 1], ["connected", 1], ["if", 1], ["and", 1], ["only", 1], ["if", 1], ["this", 1], ["two", 1], ["colors", 0], ["harmonize", 0], ["with", 0], ["each", 0], ["other", 0], ["please", 0], ["help", 0], ["ivan", 0], ["find", 0], ["such", 0], ["an", 0], ["arrangement", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["2", 0], ["integers", 0], ["n", 0], ["m", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["100", 0], ["0", 0], ["le", 0], ["m", 0], ["le", 0], ["min", 0], ["1000", 0], ["frac", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 1], ["—", 1], ["number", 1], ["of", 1], ["colors", 1], ["and", 1], ["number", 1], ["of", 1], ["pairs", 1], ["of", 1], ["colors", 1], ["which", 1], ["harmonize", 1], ["with", 1], ["each", 1], ["other", 1], ["in", 1], ["next", 1], ["m", 1], ["lines", 1], ["pairs", 1], ["of", 1], ["colors", 1], ["which", 1], ["harmonize", 1], ["with", 1], ["each", 1], ["other", 1], ["are", 1], ["listed", 1], ["colors", 1], ["are", 1], ["numbered", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["no", 0], ["pair", 0], ["occurs", 0], ["twice", 0], ["in", 0], ["this", 0], ["list", 0], ["output", 0], ["print", 1], ["n", 1], ["blocks", 1], ["i", 1], ["th", 1], ["of", 1], ["them", 1], ["describes", 1], ["rooks", 1], ["of", 1], ["i", 0], ["th", 0], ["color", 0], ["in", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["block", 0], ["print", 0], ["one", 0], ["number", 0], ["a", 0], ["i", 0], ["1", 0], ["le", 0], ["a", 0], ["i", 0], ["le", 0], ["5000", 0], ["—", 0], ["number", 0], ["of", 0], ["rooks", 0], ["of", 0], ["color", 0], ["i", 0], ["in", 0], ["each", 0], ["of", 0], ["next", 0], ["a", 0], ["i", 0], ["lines", 0], ["print", 0], ["two", 0], ["integers", 0], ["x", 0], ["and", 0], ["y", 0], ["1", 0], ["le", 0], ["x", 0], ["y", 0], ["le", 0], ["10", 0], ["9", 1], ["—", 1], ["coordinates", 1], ["of", 1], ["the", 1], ["next", 1], ["rook", 1], ["all", 1], ["rooks", 1], ["must", 1], ["be", 1], ["on", 1], ["different", 1], ["cells", 1], ["total", 1], ["number", 1], ["of", 1], ["rooks", 0], ["must", 0], ["not", 0], ["exceed", 0], ["5000", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["the", 0], ["solution", 0], ["exists", 0], ["examples", 0], ["input", 0], ["3", 0], ["2", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["output", 0], ["2", 0], ["3", 0], ["4", 0], ["1", 0], ["4", 0], ["4", 0], ["1", 0], ["2", 0], ["2", 0], ["2", 0], ["2", 0], ["4", 0], ["5", 0], ["4", 0], ["1", 0], ["5", 0], ["1", 0], ["input", 0], ["3", 0], ["3", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["1", 0], ["output", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["1", 0], ["3", 0], ["input", 0], ["3", 0], ["1", 0], ["1", 0], ["3", 0], ["output", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["1", 0], ["3", 0], ["1", 0], ["note", 0], ["rooks", 1], ["arrangements", 1], ["for", 1], ["all", 1], ["three", 1], ["examples", 1], ["red", 1], ["is", 0], ["color", 0], ["1", 0], ["green", 0], ["is", 0], ["color", 0], ["2", 0], ["and", 0], ["blue", 0], ["is", 0], ["color", 0], ["3", 0], ["left", 0], ["begin", 0], ["array", 0], ["l", 0], ["l", 0], ["l", 0], ["l", 0], ["l", 0], ["l", 0], ["l", 0], ["hline", 0], ["5", 0], ["hline", 0], ["4", 0], ["hline", 0], ["3", 0], ["hline", 0], ["2", 0], ["hline", 0], ["1", 0], ["hline", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["hline", 0], ["end", 0], ["array", 0], ["right", 0], ["left", 0], ["begin", 0], ["array", 0], ["l", 0], ["l", 0], ["l", 0], ["l", 0], ["hline", 0], ["2", 0], ["hline", 0], ["1", 0], ["hline", 0], ["1", 0], ["2", 0], ["3", 0], ["hline", 0], ["end", 0], ["array", 0], ["right", 0], ["left", 0], ["begin", 0], ["array", 0], ["l", 0], ["l", 0], ["l", 0], ["l", 0], ["hline", 0], ["2", 0], ["hline", 0], ["1", 0], ["hline", 0], ["1", 0], ["2", 0], ["3", 0], ["hline", 0], ["end", 0], ["array", 0], ["right", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.38943248532289626, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3424657534246575, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5411089866156787, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5411089866156787, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.38943248532289626, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3424657534246575, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5411089866156787, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5411089866156787, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["color", 0], ["pairs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["towers", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["last", 0], ["coord", 0], ["n", 0], ["1", 0], ["for", 0], ["c1", 0], ["c2", 0], ["in", 0], ["color", 0], ["pairs", 0], ["towers", 0], ["c1", 0], ["1", 0], ["append", 0], ["last", 0], ["coord", 0], ["c1", 0], ["towers", 0], ["c2", 0], ["1", 0], ["append", 0], ["last", 0], ["coord", 0], ["c2", 0], ["last", 0], ["coord", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["towers", 0], ["print", 0], ["len", 0], ["towers", 0], ["i", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["towers", 0], ["i", 0], ["print", 0], ["x", 0], ["y", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pairs", 0], ["defaultdict", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pairs", 0], ["l", 0], ["1", 0], ["add", 0], ["r", 0], ["1", 0], ["pairs", 0], ["r", 0], ["1", 0], ["add", 0], ["l", 0], ["1", 0], ["answers", 0], ["defaultdict", 0], ["list", 0], ["free", 0], ["rooks", 0], ["defaultdict", 0], ["int", 0], ["y", 0], ["1", 0], ["for", 0], ["color", 0], ["in", 0], ["range", 0], ["n", 0], ["free", 0], ["rooks", 0], ["color", 0], ["y", 0], ["for", 0], ["c", 0], ["in", 0], ["pairs", 0], ["color", 0], ["if", 0], ["c", 0], ["color", 0], ["answers", 0], ["color", 0], ["append", 0], ["color", 0], ["1", 0], ["free", 0], ["rooks", 0], ["c", 0], ["free", 0], ["rooks", 0], ["c", 0], ["1", 0], ["else", 0], ["answers", 0], ["color", 0], ["append", 0], ["color", 0], ["1", 0], ["y", 0], ["y", 0], ["1", 0], ["answers", 0], ["color", 0], ["append", 0], ["color", 0], ["1", 0], ["y", 0], ["y", 0], ["1", 0], ["for", 0], ["color", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["len", 0], ["answers", 0], ["color", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["answers", 0], ["color", 0], ["print", 0], ["x", 0], ["y", 0], ["s", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["s", 0], ["0", 0], ["m", 0], ["int", 0], ["s", 0], ["1", 0], ["col", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["col", 0], ["append", 0], ["i", 0], ["t", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["s", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["s", 0], ["0", 0], ["1", 0], ["b", 0], ["int", 0], ["s", 0], ["1", 0], ["1", 0], ["col", 0], ["a", 0], ["append", 0], ["t", 0], ["col", 0], ["b", 0], ["append", 0], ["t", 0], ["t", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["col", 0], ["print", 0], ["len", 0], ["col", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["col", 0], ["i", 0], ["print", 0], ["i", 0], ["1", 0], ["col", 0], ["i", 0], ["j", 0], ["1", 0], ["cols", 0], ["pairs", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["import", 0], ["collections", 0], ["d", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["pairs", 0], ["a", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["d", 0], ["a", 0], ["append", 0], ["b", 0], ["d", 0], ["b", 0], ["append", 0], ["a", 0], ["rooks", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["rooks", 0], ["for", 0], ["in", 0], ["range", 0], ["cols", 0], ["current", 0], ["line", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["cols", 0], ["1", 0], ["rooks", 0], ["i", 0], ["append", 0], ["i", 0], ["current", 0], ["line", 0], ["current", 0], ["line", 0], ["1", 0], ["for", 0], ["harmony", 0], ["in", 0], ["d", 0], ["i", 0], ["rooks", 0], ["i", 0], ["append", 0], ["i", 0], ["current", 0], ["line", 0], ["rooks", 0], ["harmony", 0], ["append", 0], ["harmony", 0], ["current", 0], ["line", 0], ["current", 0], ["line", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["cols", 0], ["1", 0], ["print", 0], ["len", 0], ["rooks", 0], ["i", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["rooks", 0], ["i", 0], ["print", 0], ["a", 0], ["b", 0], ["3", 0], ["import", 0], ["math", 0], ["import", 0], ["sys", 0], ["debug", 0], ["false", 0], ["def", 0], ["inp", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["dprint", 0], ["value", 0], ["sep", 0], ["end", 0], ["n", 0], ["if", 0], ["debug", 0], ["print", 0], ["value", 0], ["sep", 0], ["sep", 0], ["end", 0], ["end", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["a", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["ans", 0], ["i", 0], ["1", 0], ["append", 0], ["i", 0], ["i", 0], ["y", 0], ["n", 0], ["1", 0], ["for", 0], ["a", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["b", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["a", 0], ["b", 0], ["1", 0], ["ans", 0], ["a", 0], ["1", 0], ["append", 0], ["a", 0], ["y", 0], ["ans", 0], ["b", 0], ["1", 0], ["append", 0], ["b", 0], ["y", 0], ["y", 0], ["1", 0], ["return", 0], ["ans", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["int", 0], ["e", 0], ["for", 0], ["e", 0], ["in", 0], ["inp", 0], ["split", 0], ["a", 0], ["bytearray", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["int", 0], ["e", 0], ["for", 0], ["e", 0], ["in", 0], ["inp", 0], ["split", 0], ["a", 0], ["a", 0], ["b", 0], ["1", 0], ["a", 0], ["b", 0], ["a", 0], ["1", 0], ["ans", 0], ["solve", 0], ["n", 0], ["m", 0], ["a", 0], ["assert", 0], ["len", 0], ["ans", 0], ["n", 0], ["for", 0], ["coords", 0], ["in", 0], ["ans", 0], ["print", 0], ["len", 0], ["coords", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["coords", 0], ["print", 0], ["x", 0], ["y", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["d", 0], ["i", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["x", 0], ["add", 0], ["x", 0], ["n", 0], ["y", 0], ["d", 0], ["y", 0], ["add", 0], ["x", 0], ["n", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["print", 0], ["len", 0], ["d", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["i", 0], ["for", 0], ["k", 0], ["in", 0], ["d", 0], ["i", 0], ["print", 0], ["i", 0], ["k", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["harmonies", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["harmonies", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["spots", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["yourspots", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["i", 0], ["1", 0], ["in", 0], ["harmonies", 0], ["j", 0], ["yourspots", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["yourspots", 0], ["append", 0], ["i", 0], ["1", 0], ["10000", 0], ["i", 0], ["spots", 0], ["append", 0], ["yourspots", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["len", 0], ["spots", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["spots", 0], ["i", 0], ["print", 0], ["str", 0], ["spots", 0], ["i", 0], ["j", 0], ["0", 0], ["str", 0], ["spots", 0], ["i", 0], ["j", 0], ["1", 0], ["import", 0], ["math", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["hs", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["hs", 0], ["append", 0], ["min", 0], ["a", 0], ["b", 0], ["max", 0], ["a", 0], ["b", 0], ["used", 0], ["0", 0], ["n", 0], ["placed", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["hs", 0], ["placed", 0], ["a", 0], ["append", 0], ["b", 0], ["n", 0], ["used", 0], ["b", 0], ["used", 0], ["b", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["max", 0], ["1", 0], ["used", 0], ["i", 0], ["len", 0], ["placed", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["max", 0], ["1", 0], ["used", 0], ["i", 0], ["print", 0], ["i", 0], ["n", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["placed", 0], ["i", 0], ["print", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["import", 0], ["sys", 0], ["from", 0], ["math", 0], ["import", 0], ["def", 0], ["minp", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["mint", 0], ["return", 0], ["int", 0], ["minp", 0], ["def", 0], ["mints", 0], ["return", 0], ["map", 0], ["int", 0], ["minp", 0], ["split", 0], ["n", 0], ["m", 0], ["mints", 0], ["a", 0], ["p", 0], ["none", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["p", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["mints", 0], ["p", 0], ["x", 0], ["1", 0], ["append", 0], ["i", 0], ["1", 0], ["x", 0], ["p", 0], ["y", 0], ["1", 0], ["append", 0], ["i", 0], ["1", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["p", 0], ["i", 0], ["append", 0], ["m", 0], ["1", 0], ["i", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["len", 0], ["p", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["p", 0], ["i", 0], ["print", 0], ["j", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["min", 0], ["x", 0], ["y", 0], ["append", 0], ["max", 0], ["y", 0], ["x", 0], ["a", 0], ["q", 0], ["sorted", 0], ["a", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["answer", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["q2", 0], ["1", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["q1", 0], ["in", 0], ["a", 0], ["q", 0], ["answer", 0], ["q1", 0], ["1", 0], ["append", 0], ["q2", 0], ["answer", 0], ["q", 0], ["1", 0], ["append", 0], ["q2", 0], ["q2", 0], ["1", 0], ["answer", 0], ["q", 0], ["1", 0], ["append", 0], ["q2", 0], ["q2", 0], ["1", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["len", 0], ["answer", 0], ["q", 0], ["for", 0], ["q1", 0], ["in", 0], ["answer", 0], ["q", 0], ["print", 0], ["q", 0], ["1", 0], ["q1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["loc1", 0], ["loc2", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["loc1", 0], ["append", 0], ["loc2", 0], ["a", 0], ["loc2", 0], ["append", 0], ["loc1", 0], ["k", 0], ["1", 0], ["cvaz", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["l", 0], ["len", 0], ["a", 0], ["i", 0], ["print", 0], ["l", 0], ["1", 0], ["print", 0], ["i", 0], ["k", 0], ["k", 0], ["1", 0], ["cvaz", 0], ["i", 0], ["k", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["a", 0], ["i", 0], ["j", 0], ["i", 0], ["print", 0], ["i", 0], ["k", 0], ["k", 0], ["1", 0], ["else", 0], ["print", 0], ["i", 0], ["cvaz", 0], ["a", 0], ["i", 0], ["j", 0], ["cvaz", 0], ["a", 0], ["i", 0], ["j", 0], ["1", 0], ["n", 0], ["m", 0], ["int", 0], ["el", 0], ["for", 0], ["el", 0], ["in", 0], ["input", 0], ["split", 0], ["pair", 0], ["kol", 0], ["i", 1], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["q", 0], ["w", 0], ["int", 0], ["el", 0], ["for", 0], ["el", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["q", 0], ["w", 0], ["pair", 0], ["append", 0], ["q", 0], ["w", 0], ["else", 0], ["q", 0], ["w", 0], ["w", 0], ["q", 0], ["pair", 0], ["append", 0], ["q", 0], ["w", 0], ["kol", 0], ["q", 0], ["1", 0], ["kol", 0], ["w", 0], ["1", 0], ["pair", 0], ["sort", 0], ["mazy", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["mazy", 0], ["append", 0], ["i", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["pair", 0], ["mazy", 0], ["append", 0], ["i", 0], ["0", 0], ["10000", 0], ["i", 0], ["1", 0], ["i", 0], ["0", 0], ["i", 0], ["0", 0], ["mazy", 0], ["append", 0], ["i", 0], ["1", 0], ["10000", 0], ["i", 0], ["1", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["mazy", 0], ["sort", 0], ["cur", 0], ["1", 0], ["print", 0], ["kol", 0], ["1", 0], ["while", 0], ["mazy", 0], ["q", 0], ["mazy", 0], ["pop", 0], ["0", 0], ["if", 0], ["q", 0], ["0", 0], ["cur", 0], ["print", 0], ["q", 0], ["1", 0], ["q", 0], ["0", 0], ["else", 0], ["print", 0], ["kol", 0], ["q", 0], ["0", 0], ["print", 0], ["q", 0], ["1", 0], ["q", 0], ["0", 0], ["cur", 0], ["q", 0], ["0", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.000856898029134533, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.000856898029134533, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.01102629346904156, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.01102629346904156, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.000856898029134533, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.000856898029134533, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.01102629346904156, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.01102629346904156, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nMishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.\n\nWhen a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + k_{i}, x + 2k_{i}, x + 3k_{i} and so on.\n\nMishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x_1, x_2 and x_3 (not necessarily distinct) so that he will switch on the first garland during x_1-th second, the second one — during x_2-th second, and the third one — during x_3-th second, respectively, and during each second starting from max(x_1, x_2, x_3) at least one garland will be lit.\n\nHelp Mishka by telling him if it is possible to do this!\n\n\n-----Input-----\n\nThe first line contains three integers k_1, k_2 and k_3 (1 ≤ k_{i} ≤ 1500) — time intervals of the garlands.\n\n\n-----Output-----\n\nIf Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.\n\nOtherwise, print NO.\n\n\n-----Examples-----\nInput\n2 2 3\n\nOutput\nYES\n\nInput\n4 2 3\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example Mishka can choose x_1 = 1, x_2 = 2, x_3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x_3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.\n\nIn the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["a, b, c = sorted(map(int, input().split()))\nif a > 3:\n\tprint('NO')\nelif a == 3:\n\tif b > 3:\n\t\tprint('NO')\n\telif b == 3:\n\t\tif c > 3:\n\t\t\tprint('NO')\n\t\telse:\n\t\t\tprint(\"YES\")\nelif a == 1:\n\tprint('YES')\nelse:\n\tif b == 2:\n\t\tprint('YES')\n\telif b > 4:\n\t\tprint('NO')\n\telif b == 4:\n\t\tif c == 4:\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n\telse:\n\t\tprint('NO')\n", "a = sorted([int(i) for i in input().split()])\nif a[0] * a[1] + a[1] * a[2] + a[2] * a[0] < a[0] * a[1] * a[2] or a[0] == 2 and a[1] == 3:\n\tprint('NO')\nelse:\n\tprint('YES')\n", "import sys\nk1,k2,k3 = [int(x) for x in input().split()]\ndef is_div(a,b):\n\treturn a==((a//b)*b)\n\ndef always_lit(x1,x2,k1,k2,k3):\n\tfor i in range(200):\n\t\tif not is_div(i-x1,k1) and not is_div(i-x2,k2) and not is_div(i,k3):\n\t\t\treturn False\n\treturn True\n\nfor x1 in range(-200,1):\n\tfor x2 in range(x1,1):\n\t\tif always_lit(x1,x2,k1,k2,k3):\n\t\t\tprint('YES')\n\t\t\treturn\n\nprint('NO')\n", "k,m,n = list(map(int,input().split()))\nmn = min(k,min(m,n))\nma = max(k,max(m,n))\nme = k+m+n-mn-ma\nif mn == 1 or (mn == me == 2) or (mn == 2 and me == ma == 4) or mn == ma == me == 3:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "q=list(map(int,input().split()))\nq.sort()\nif (1 in q)|(q.count(2)>=2)|(q.count(3)==3)|(q==[2,4,4]):\n\tprint('YES')\nelse:\n\tprint('NO')\n", "# input\nK = list(map(int, input().split()))\nK.sort()\n\ndef solve():\n\tm = min(K)\n\n\tif m == 1:\n\t\tprint('YES')\n\t\treturn\n\telif m >= 3:\n\t\tif K == [3,3,3]:\n\t\t\tprint('YES')\n\t\t\treturn\n\t\telse:\n\t\t\tprint('NO')\n\t\t\treturn\n\telse: # m=2\n\t\tif K[1] == 2:\n\t\t\tprint('YES')\n\t\t\treturn\n\t\telif K == [2,4,4]:\n\t\t\tprint('YES')\n\t\t\treturn\n\t\telse:\n\t\t\tprint('NO')\n\t\t\treturn\n\ndef __starting_point():\n\tsolve()\n\n\n__starting_point()\n", "from math import gcd\nimport sys\n\ndef f():\n\ta,b,c = sorted(map(int,input().split()))\n\n\tx1 = 0\n\tfor x2 in range(100):\n\t\tfor x3 in range(100):\n\t\t\tok = True\n\t\t\tfor t in range(x3,x3+5000):\n\t\t\t\tif (t-x1)%a == 0 or (t-x2)%b == 0 or (t-x3)%c == 0:\n\t\t\t\t   continue\n\t\t\t\telse:\n\t\t\t\t\tok = False\n\t\t\t\t\tbreak\n\t\t\tif ok:\n\t\t\t\tprint('YES')\n\t\t\t\treturn\n\tprint('NO')\nf()\n", "def ans(k1,k2,k3):\n\tif k1 == 1:\n\t\treturn(\"YES\")\n\n\tif k1 == 2 and k2 == 2:\n\t\treturn(\"YES\")\n\n\tif k1 == 3 and k2 == 3 and k3 == 3:\n\t\treturn(\"YES\")\n\n\tif k1 == 2 and k2 == 4 and k3 == 4:\n\t\treturn(\"YES\")\n\n\treturn(\"NO\")\n\n\na,b,c = [int(i) for i in input().split()]\n\nk1 = min(a,b,c)\nk3 = max(a,b,c)\nk2 = a + b+ c - k1 -k3\n\n# k1 <= k2 <= k3\n\nprint(ans(k1,k2,k3))\n", "v = list(map(int, input().split()))\nv.sort()\nif (v[0] == 1):\n\tprint(\"YES\")\n\treturn\nif (v[0] == 2 and v[1] == 2):\n\tprint(\"YES\")\n\treturn\nif (v.count(3) == 3):\n\tprint(\"YES\")\n\treturn\nif (v[0] == 2 and v.count(4) == 2):\n\tprint(\"YES\")\n\treturn\nprint(\"NO\")\n", "a,b,c = list(map(int,input().split()))\n\nif a==1 or b==1 or c==1:\n\tprint(\"YES\")\nelif a==3 and b==3 and c==3:\n\tprint(\"YES\")\nelse:\n\tl={} \n\t\n\tl[2] = 0\n\tl[4]=0\n\tl[a]=0\n\tl[b]=0\n\tl[c]=0\n\n\tl[a]+=1\n\tl[b]+=1\n\tl[c]+=1\n\tif l[2]>=2:\n\t\tprint(\"YES\")\n\telif l[2]==1 and l[4]==2:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\");\t\n", "k1,k2,k3 = map(int, input().split())\nif 1 in [k1, k2,k3]:\n\tprint('YES')\nelif sum([1 for i in [k1,k2,k3] if i == 2]) >= 2:\n\tprint('YES')\nelif sum([1 for i in [k1,k2,k3] if i == 3]) == 3:\n\tprint('YES')\nelif sum([1 for i in [k1,k2,k3] if i == 2]) == 1 and sum([1 for i in [k1,k2,k3] if i == 4]) == 2:\n\tprint('YES')\nelse:\n\tprint('NO')            \n", "import math\nx1,x2,x3 = list(map(int,input().split()))\nkmm = math.gcd(x1,math.gcd(x2,x3))\na =[x1,x2,x3]\na.sort()\nif min(a) >= 4 :print('NO')\nelif min(a) == 3:\n\tif max(a) == 3:print('YES')\n\telse:print(\"NO\")\nelif min(a) == 1:print(\"YES\")\nelif min(a) == 2:\n\tif a.count(2) >= 2:print(\"YES\")\n\telif a == [2,4,4]:print(\"YES\")\n\telse: print(\"NO\")\n", "import sys\nk1,k2,k3=list(map(int,input().split()))\nL=[k1,k2,k3]\nx=L.count(1)\nif x!=0:\n\tprint(\"YES\")\n\treturn\nx=L.count(2)\nif x>=2:\n\tprint('YES')\n\treturn\nx=L.count(3)\nif x==3:\n\tprint(\"YES\")\n\treturn\nif L.count(4)==2 and L.count(2)==1:\n\tprint(\"YES\")\n\treturn\nprint(\"NO\")\n\n", "k1,k2,k3=list(map(int,input().split()))\nL=[k1,k2,k3]\n\n\nif L.count(1) != 0:\n\tprint(\"YES\")\nelif L.count(2) >= 2:\n\tprint('YES')\n\nelif L.count(3) == 3:\n\tprint(\"YES\")\n\nelif L.count(4)==2 and L.count(2)==1:\n\tprint(\"YES\")\nelse: print(\"NO\")\n\n", "data = input().split(\" \")\nk = [int(data[0]), int(data[1]), int(data[2])]\nk.sort()\n[k1, k2, k3] = k\nhas_solution = False\nif k1 == 1:\n\thas_solution = True\nelif k1 == 2 and k2 == 2:\n\thas_solution = True\nelif k1 == 2 and k2 == 4 and k3 == 4:\n\thas_solution = True\nelif k1 == 3 and k2 == 3 and k3 == 3:\n\thas_solution = True\nif has_solution:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "a=list(sorted(list(map(int,input().split()))))\nif a[0]==1 or a[0]==2 and a[1]==2 or a==[2,4,4] or a==[3,3,3]:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "def solve(k):\n\tif min(k) > 3:\n\t\tprint(\"NO\")\n\t\treturn\n\n\tx = [0, 0, 0]\n\tfor x[0] in range(3):\n\t\tfor x[1] in range(3):\n\t\t\tfor x[2] in range(3):\n\t\t\t\ta = [False] * 15\n\t\t\t\tfor i in range(3):\n\t\t\t\t\tj = 0\n\t\t\t\t\twhile x[i] + j * k[i] < 15:\n\t\t\t\t\t\ta[x[i] + j * k[i]] = True\n\t\t\t\t\t\tj += 1\n\t\t\t\tis_possible = True\n\t\t\t\tfor i in range(3, 15):\n\t\t\t\t\tis_possible = is_possible and a[i]\n\t\t\t\tif is_possible:\n\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\t# print(\" \".join(map(str, x)))\n\t\t\t\t\treturn\n\tprint(\"NO\")\n\nk = list(map(int, input().split()))\nsolve(k)\n\n\n", "ks = [int(v) for v in input().split()]\nks.sort()\n\ndef solve(ks):\n\tk1, k2, k3 = ks\n\n\tif k1 == 1:\n\t\treturn True\n\telif k1 == 2:\n\t\tif k2 == 2:\n\t\t\treturn True\n\t\telif k2 == 4 and k3 == 4:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telif k1 == 3:\n\t\tif k2 == 3 and k3 == 3:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn False\n\nprint([\"NO\", \"YES\"][solve(ks)])\n", "k = list(map(int, input().strip().split()))\nk = sorted(k)\n\nif k[0] == 1:\n\tprint(\"YES\")\nelif k[0] == 2 and k[1] == 2:\n\tprint(\"YES\")\nelif k[0] == 2 and k[1] == 4 and k[2] == 4:\n\tprint(\"YES\")\nelif k[0] == 3 and k[1] == 3 and k[2] == 3:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n\n\n", "f=list(map(int,input().split()))\nf.sort()\na = f[0]\nb = f[1]\nc = f[2]\nif a == 1:\n\tprint('YES')\nelse:\n\tif a == 3 and b == 3 and c == 3:\n\t\tprint('YES')\n\telse:\n\t\tif a != 2:\n\t\t\tprint('NO')\n\t\telse:\n\t\t\tif b == 2 or b == 4 and c == 4:\n\t\t\t\tprint('YES')\n\t\t\telse:\n\t\t\t\tprint('NO')\n", "k = list(map(int, input().split()))\n\ncnt1 = k.count(1)\ncnt2 = k.count(2)\ncnt3 = k.count(3)\ncnt4 = k.count(4)\n\nif cnt1 >= 1 or cnt2 >= 2 or cnt3 == 3 or (cnt4 == 2 and cnt2 == 1):\n\tprint('YES')\nelse:\n\tprint('NO')\n", "a = [int(i) for i in input().split()]\na.sort()\nif a[0] == 1:\n\tprint('YES')\nelif a[0] == 2 and a[1] == 2:\n\tprint('YES')\nelif a[0] == 2 and a[1] == 4 and a[2] == 4:\n\tprint('YES')\nelif a[0] == 3 and a[1] == 3 and a[2] == 3:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "R=lambda:map(int,input().split())\n\na = list( R() ) \n\nans = 0\n\no = a.count(1)\nt = a.count(2)\nth = a.count(3)\nf = a.count(4)\n\nif o > 0 or t > 1 or th > 2 or (t == 1 and f == 2):\n\tprint(\"YES\")\n\t\nelse:\n\tprint(\"NO\")\n"], "id": "id6002"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6002", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["mishka", 4], ["is", 4], ["decorating", 4], ["the", 4], ["christmas", 4], ["tree", 4], ["he", 4], ["has", 4], ["got", 4], ["three", 4], ["garlands", 4], ["and", 4], ["all", 4], ["of", 4], ["them", 4], ["will", 4], ["be", 4], ["put", 4], ["on", 4], ["the", 4], ["tree", 4], ["after", 4], ["that", 4], ["mishka", 4], ["will", 4], ["switch", 4], ["these", 4], ["garlands", 4], ["on", 4], ["when", 4], ["a", 4], ["garland", 4], ["is", 4], ["switched", 4], ["on", 4], ["it", 4], ["periodically", 4], ["changes", 4], ["its", 4], ["state", 4], ["—", 4], ["sometimes", 4], ["it", 4], ["is", 4], ["lit", 4], ["sometimes", 4], ["not", 4], ["formally", 4], ["if", 4], ["i", 4], ["th", 4], ["garland", 4], ["is", 4], ["switched", 4], ["on", 4], ["during", 4], ["x", 0], ["th", 0], ["second", 0], ["then", 0], ["it", 0], ["is", 0], ["lit", 0], ["only", 0], ["during", 0], ["seconds", 0], ["x", 0], ["x", 0], ["k", 0], ["i", 0], ["x", 0], ["2k", 0], ["i", 0], ["x", 0], ["3k", 0], ["i", 0], ["and", 4], ["so", 4], ["on", 4], ["mishka", 4], ["wants", 4], ["to", 4], ["switch", 4], ["on", 4], ["the", 4], ["garlands", 4], ["in", 4], ["such", 4], ["a", 4], ["way", 4], ["that", 4], ["during", 4], ["each", 4], ["second", 4], ["after", 4], ["switching", 4], ["the", 4], ["garlands", 4], ["on", 4], ["there", 4], ["would", 4], ["be", 4], ["at", 0], ["least", 0], ["one", 0], ["lit", 0], ["garland", 0], ["formally", 0], ["mishka", 0], ["wants", 0], ["to", 0], ["choose", 0], ["three", 0], ["integers", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["and", 0], ["x", 0], ["3", 0], ["not", 4], ["necessarily", 0], ["distinct", 0], ["so", 0], ["that", 0], ["he", 0], ["will", 0], ["switch", 0], ["on", 0], ["the", 0], ["first", 0], ["garland", 0], ["during", 0], ["x", 0], ["1", 0], ["th", 0], ["second", 0], ["the", 0], ["second", 0], ["one", 0], ["—", 0], ["during", 0], ["x", 0], ["2", 0], ["th", 0], ["second", 0], ["and", 0], ["the", 0], ["third", 0], ["one", 0], ["—", 0], ["during", 0], ["x", 0], ["3", 0], ["th", 0], ["second", 0], ["respectively", 0], ["and", 0], ["during", 0], ["each", 0], ["second", 0], ["starting", 0], ["from", 0], ["max", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["x", 0], ["3", 0], ["at", 4], ["least", 4], ["one", 4], ["garland", 4], ["will", 4], ["be", 4], ["lit", 4], ["help", 0], ["mishka", 0], ["by", 0], ["telling", 0], ["him", 0], ["if", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["do", 0], ["this", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["three", 0], ["integers", 0], ["k", 0], ["1", 0], ["k", 0], ["2", 0], ["and", 0], ["k", 0], ["3", 0], ["1", 0], ["≤", 0], ["k", 0], ["i", 0], ["≤", 0], ["1500", 0], ["—", 0], ["time", 0], ["intervals", 0], ["of", 0], ["the", 0], ["garlands", 0], ["output", 0], ["if", 4], ["mishka", 4], ["can", 4], ["choose", 4], ["moments", 4], ["of", 4], ["time", 4], ["to", 4], ["switch", 4], ["on", 4], ["the", 4], ["garlands", 4], ["in", 4], ["such", 4], ["a", 4], ["way", 4], ["that", 4], ["each", 4], ["second", 4], ["after", 4], ["switching", 4], ["the", 3], ["garlands", 3], ["on", 3], ["at", 0], ["least", 0], ["one", 0], ["garland", 0], ["will", 0], ["be", 0], ["lit", 0], ["print", 0], ["yes", 0], ["otherwise", 0], ["print", 0], ["no", 0], ["examples", 0], ["input", 0], ["2", 0], ["2", 0], ["3", 0], ["output", 0], ["yes", 0], ["input", 0], ["4", 0], ["2", 0], ["3", 0], ["output", 0], ["no", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["example", 0], ["mishka", 0], ["can", 0], ["choose", 0], ["x", 0], ["1", 0], ["1", 0], ["x", 0], ["2", 0], ["2", 0], ["x", 0], ["3", 0], ["1", 4], ["the", 4], ["first", 4], ["garland", 4], ["will", 4], ["be", 4], ["lit", 4], ["during", 4], ["seconds", 4], ["1", 4], ["3", 4], ["5", 4], ["7", 4], ["the", 4], ["second", 4], ["—", 4], ["2", 4], ["4", 4], ["6", 4], ["8", 4], ["which", 4], ["already", 4], ["cover", 4], ["all", 4], ["the", 4], ["seconds", 0], ["after", 0], ["the", 0], ["2", 0], ["nd", 0], ["one", 0], ["it", 0], ["doesn", 0], ["t", 0], ["even", 0], ["matter", 0], ["what", 0], ["x", 0], ["3", 0], ["is", 4], ["chosen", 4], ["our", 4], ["choice", 4], ["will", 4], ["lead", 4], ["third", 4], ["to", 4], ["be", 4], ["lit", 4], ["during", 4], ["seconds", 4], ["1", 4], ["4", 4], ["7", 4], ["10", 4], ["though", 4], ["in", 4], ["the", 4], ["second", 4], ["example", 4], ["there", 4], ["is", 4], ["no", 4], ["way", 4], ["to", 4], ["choose", 4], ["such", 4], ["moments", 4], ["of", 0], ["time", 0], ["there", 0], ["always", 0], ["be", 0], ["some", 0], ["seconds", 0], ["when", 0], ["no", 0], ["garland", 0], ["is", 0], ["lit", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.46537396121883656, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11703601108033242, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.675603217158177, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.17225201072386068, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.46537396121883656, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11703601108033242, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.675603217158177, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.17225201072386068, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["a", 0], ["b", 0], ["c", 0], ["sorted", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["3", 0], ["print", 0], ["no", 0], ["elif", 0], ["a", 0], ["3", 0], ["if", 0], ["b", 0], ["3", 0], ["print", 0], ["no", 0], ["elif", 0], ["b", 0], ["3", 0], ["if", 0], ["c", 0], ["3", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["elif", 0], ["a", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["if", 0], ["b", 0], ["2", 0], ["print", 0], ["yes", 0], ["elif", 0], ["b", 0], ["4", 0], ["print", 0], ["no", 0], ["elif", 0], ["b", 0], ["4", 0], ["if", 0], ["c", 0], ["4", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["no", 0], ["a", 0], ["sorted", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 2], ["0", 1], ["a", 0], ["1", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["2", 0], ["a", 0], ["0", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["or", 0], ["a", 0], ["0", 0], ["2", 0], ["and", 0], ["a", 0], ["1", 0], ["3", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["import", 0], ["sys", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["is", 0], ["div", 0], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["a", 0], ["b", 0], ["b", 0], ["def", 0], ["always", 0], ["lit", 0], ["x1", 0], ["x2", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["200", 0], ["if", 0], ["not", 0], ["is", 0], ["div", 0], ["i", 0], ["x1", 0], ["k1", 0], ["and", 0], ["not", 0], ["is", 0], ["div", 0], ["i", 0], ["x2", 0], ["k2", 0], ["and", 0], ["not", 0], ["is", 0], ["div", 0], ["i", 0], ["k3", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["for", 0], ["x1", 0], ["in", 0], ["range", 0], ["200", 0], ["1", 0], ["for", 0], ["x2", 0], ["in", 0], ["range", 0], ["x1", 0], ["1", 0], ["if", 0], ["always", 0], ["lit", 0], ["x1", 0], ["x2", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["k", 0], ["m", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mn", 0], ["min", 0], ["k", 0], ["min", 0], ["m", 0], ["n", 0], ["ma", 0], ["max", 0], ["k", 0], ["max", 0], ["m", 0], ["n", 0], ["me", 0], ["k", 0], ["m", 0], ["n", 0], ["mn", 0], ["ma", 0], ["if", 0], ["mn", 0], ["1", 0], ["or", 0], ["mn", 0], ["me", 0], ["2", 0], ["or", 0], ["mn", 0], ["2", 0], ["and", 0], ["me", 0], ["ma", 0], ["4", 0], ["or", 0], ["mn", 0], ["ma", 0], ["me", 0], ["3", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["q", 0], ["sort", 0], ["if", 0], ["1", 0], ["in", 0], ["q", 0], ["q", 0], ["count", 0], ["2", 0], ["2", 0], ["q", 0], ["count", 0], ["3", 0], ["3", 0], ["q", 0], ["2", 0], ["4", 0], ["4", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["input", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["sort", 0], ["def", 0], ["solve", 0], ["m", 0], ["min", 0], ["k", 0], ["if", 0], ["m", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["elif", 0], ["m", 0], ["3", 0], ["if", 0], ["k", 0], ["3", 0], ["3", 0], ["3", 0], ["print", 0], ["yes", 0], ["return", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["m", 0], ["2", 0], ["if", 0], ["k", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["return", 0], ["elif", 0], ["k", 0], ["2", 0], ["4", 0], ["4", 0], ["print", 0], ["yes", 0], ["return", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["import", 0], ["sys", 0], ["def", 0], ["f", 0], ["a", 0], ["b", 0], ["c", 0], ["sorted", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x1", 0], ["0", 0], ["for", 0], ["x2", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["x3", 0], ["in", 0], ["range", 0], ["100", 0], ["ok", 0], ["true", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["x3", 0], ["x3", 0], ["5000", 0], ["if", 0], ["t", 0], ["x1", 0], ["a", 0], ["0", 0], ["or", 0], ["t", 0], ["x2", 0], ["b", 0], ["0", 0], ["or", 0], ["t", 0], ["x3", 0], ["c", 0], ["0", 0], ["continue", 0], ["else", 0], ["ok", 0], ["false", 0], ["break", 0], ["if", 0], ["ok", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["f", 0], ["def", 0], ["ans", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["if", 0], ["k1", 0], ["1", 0], ["return", 0], ["yes", 0], ["if", 0], ["k1", 0], ["2", 0], ["and", 0], ["k2", 0], ["2", 0], ["return", 0], ["yes", 0], ["if", 0], ["k1", 0], ["3", 0], ["and", 0], ["k2", 0], ["3", 0], ["and", 0], ["k3", 0], ["3", 0], ["return", 0], ["yes", 0], ["if", 0], ["k1", 0], ["2", 0], ["and", 0], ["k2", 0], ["4", 0], ["and", 0], ["k3", 0], ["4", 0], ["return", 0], ["yes", 0], ["return", 0], ["no", 0], ["a", 0], ["b", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["k1", 0], ["min", 0], ["a", 0], ["b", 0], ["c", 0], ["k3", 0], ["max", 0], ["a", 0], ["b", 0], ["c", 0], ["k2", 0], ["a", 0], ["b", 0], ["c", 0], ["k1", 0], ["k3", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["print", 0], ["ans", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["v", 0], ["sort", 0], ["if", 0], ["v", 0], ["0", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["v", 0], ["0", 0], ["2", 0], ["and", 0], ["v", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["v", 0], ["count", 0], ["3", 0], ["3", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["v", 0], ["0", 0], ["2", 0], ["and", 0], ["v", 0], ["count", 0], ["4", 0], ["2", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["1", 0], ["or", 0], ["b", 0], ["1", 0], ["or", 0], ["c", 0], ["1", 0], ["print", 0], ["yes", 0], ["elif", 0], ["a", 0], ["3", 0], ["and", 0], ["b", 0], ["3", 0], ["and", 0], ["c", 0], ["3", 0], ["print", 0], ["yes", 0], ["else", 0], ["l", 0], ["l", 0], ["2", 0], ["0", 0], ["l", 0], ["4", 0], ["0", 0], ["l", 0], ["a", 0], ["0", 0], ["l", 0], ["b", 0], ["0", 0], ["l", 0], ["c", 0], ["0", 0], ["l", 0], ["a", 0], ["1", 0], ["l", 0], ["b", 0], ["1", 0], ["l", 0], ["c", 0], ["1", 0], ["if", 0], ["l", 0], ["2", 0], ["2", 0], ["print", 0], ["yes", 0], ["elif", 0], ["l", 0], ["2", 0], ["1", 0], ["and", 0], ["l", 0], ["4", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["1", 0], ["in", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["print", 0], ["yes", 0], ["elif", 0], ["sum", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["if", 0], ["i", 0], ["2", 0], ["2", 0], ["print", 0], ["yes", 0], ["elif", 0], ["sum", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["if", 0], ["i", 0], ["3", 0], ["3", 0], ["print", 0], ["yes", 0], ["elif", 0], ["sum", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["if", 0], ["i", 0], ["2", 0], ["1", 0], ["and", 0], ["sum", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["if", 0], ["i", 0], ["4", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["math", 0], ["x1", 0], ["x2", 0], ["x3", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["kmm", 0], ["math", 0], ["gcd", 0], ["x1", 0], ["math", 0], ["gcd", 0], ["x2", 0], ["x3", 0], ["a", 0], ["x1", 0], ["x2", 0], ["x3", 0], ["a", 0], ["sort", 0], ["if", 0], ["min", 0], ["a", 0], ["4", 0], ["print", 0], ["no", 0], ["elif", 0], ["min", 0], ["a", 0], ["3", 0], ["if", 0], ["max", 0], ["a", 0], ["3", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["elif", 0], ["min", 0], ["a", 0], ["1", 0], ["print", 0], ["yes", 0], ["elif", 0], ["min", 0], ["a", 0], ["2", 0], ["if", 0], ["a", 0], ["count", 0], ["2", 0], ["2", 0], ["print", 0], ["yes", 0], ["elif", 0], ["a", 0], ["2", 0], ["4", 0], ["4", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["x", 0], ["l", 0], ["count", 0], ["1", 0], ["if", 0], ["x", 0], ["0", 0], ["print", 0], ["yes", 0], ["return", 0], ["x", 0], ["l", 0], ["count", 0], ["2", 0], ["if", 0], ["x", 0], ["2", 0], ["print", 0], ["yes", 0], ["return", 0], ["x", 0], ["l", 0], ["count", 0], ["3", 0], ["if", 0], ["x", 0], ["3", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["l", 0], ["count", 0], ["4", 0], ["2", 0], ["and", 0], ["l", 0], ["count", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["if", 0], ["l", 0], ["count", 0], ["1", 0], ["0", 0], ["print", 0], ["yes", 0], ["elif", 0], ["l", 0], ["count", 0], ["2", 0], ["2", 0], ["print", 0], ["yes", 0], ["elif", 0], ["l", 0], ["count", 0], ["3", 0], ["3", 0], ["print", 0], ["yes", 0], ["elif", 0], ["l", 0], ["count", 0], ["4", 0], ["2", 0], ["and", 0], ["l", 0], ["count", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["data", 0], ["input", 0], ["split", 0], ["k", 0], ["int", 0], ["data", 0], ["0", 0], ["int", 0], ["data", 0], ["1", 0], ["int", 0], ["data", 0], ["2", 0], ["k", 0], ["sort", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["k", 0], ["has", 0], ["solution", 0], ["false", 0], ["if", 0], ["k1", 0], ["1", 0], ["has", 0], ["solution", 0], ["true", 0], ["elif", 0], ["k1", 0], ["2", 0], ["and", 0], ["k2", 0], ["2", 0], ["has", 0], ["solution", 0], ["true", 0], ["elif", 0], ["k1", 0], ["2", 0], ["and", 0], ["k2", 0], ["4", 0], ["and", 0], ["k3", 0], ["4", 0], ["has", 0], ["solution", 0], ["true", 0], ["elif", 0], ["k1", 0], ["3", 0], ["and", 0], ["k2", 0], ["3", 0], ["and", 0], ["k3", 0], ["3", 0], ["has", 0], ["solution", 0], ["true", 0], ["if", 0], ["has", 0], ["solution", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["a", 0], ["list", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["0", 0], ["1", 0], ["or", 0], ["a", 0], ["0", 0], ["2", 0], ["and", 0], ["a", 0], ["1", 0], ["2", 0], ["or", 0], ["a", 0], ["2", 0], ["4", 0], ["4", 0], ["or", 0], ["a", 0], ["3", 0], ["3", 0], ["3", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["solve", 0], ["k", 0], ["if", 0], ["min", 0], ["k", 0], ["3", 0], ["print", 0], ["no", 0], ["return", 0], ["x", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["x", 0], ["0", 0], ["in", 0], ["range", 0], ["3", 0], ["for", 0], ["x", 0], ["1", 0], ["in", 0], ["range", 0], ["3", 0], ["for", 0], ["x", 0], ["2", 0], ["in", 0], ["range", 0], ["3", 0], ["a", 0], ["false", 0], ["15", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["j", 0], ["0", 0], ["while", 0], ["x", 0], ["i", 0], ["j", 0], ["k", 0], ["i", 0], ["15", 0], ["a", 0], ["x", 0], ["i", 0], ["j", 0], ["k", 0], ["i", 0], ["true", 0], ["j", 0], ["1", 0], ["is", 0], ["possible", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["15", 0], ["is", 0], ["possible", 0], ["is", 0], ["possible", 0], ["and", 0], ["a", 0], ["i", 0], ["if", 0], ["is", 0], ["possible", 0], ["print", 0], ["yes", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["x", 0], ["return", 0], ["print", 0], ["no", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["solve", 0], ["k", 0], ["ks", 0], ["int", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["input", 0], ["split", 0], ["ks", 0], ["sort", 0], ["def", 0], ["solve", 0], ["ks", 0], ["k1", 0], ["k2", 0], ["k3", 0], ["ks", 0], ["if", 0], ["k1", 0], ["1", 0], ["return", 0], ["true", 0], ["elif", 0], ["k1", 0], ["2", 0], ["if", 0], ["k2", 0], ["2", 0], ["return", 0], ["true", 0], ["elif", 0], ["k2", 0], ["4", 0], ["and", 0], ["k3", 0], ["4", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["elif", 0], ["k1", 0], ["3", 0], ["if", 0], ["k2", 0], ["3", 0], ["and", 0], ["k3", 0], ["3", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["else", 0], ["return", 0], ["false", 0], ["print", 0], ["no", 0], ["yes", 0], ["solve", 0], ["ks", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["k", 0], ["sorted", 0], ["k", 0], ["if", 0], ["k", 0], ["0", 0], ["1", 0], ["print", 0], ["yes", 0], ["elif", 0], ["k", 0], ["0", 0], ["2", 0], ["and", 0], ["k", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["elif", 0], ["k", 0], ["0", 0], ["2", 0], ["and", 0], ["k", 0], ["1", 0], ["4", 0], ["and", 0], ["k", 0], ["2", 0], ["4", 0], ["print", 0], ["yes", 0], ["elif", 0], ["k", 0], ["0", 0], ["3", 0], ["and", 0], ["k", 0], ["1", 0], ["3", 0], ["and", 0], ["k", 0], ["2", 0], ["3", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["f", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["sort", 0], ["a", 0], ["f", 0], ["0", 0], ["b", 0], ["f", 0], ["1", 0], ["c", 0], ["f", 0], ["2", 0], ["if", 0], ["a", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["if", 0], ["a", 0], ["3", 0], ["and", 0], ["b", 0], ["3", 0], ["and", 0], ["c", 0], ["3", 0], ["print", 0], ["yes", 0], ["else", 0], ["if", 0], ["a", 0], ["2", 0], ["print", 0], ["no", 0], ["else", 0], ["if", 0], ["b", 0], ["2", 0], ["or", 0], ["b", 0], ["4", 0], ["and", 0], ["c", 0], ["4", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt1", 0], ["k", 0], ["count", 0], ["1", 0], ["cnt2", 0], ["k", 0], ["count", 0], ["2", 0], ["cnt3", 0], ["k", 0], ["count", 0], ["3", 0], ["cnt4", 0], ["k", 0], ["count", 0], ["4", 0], ["if", 0], ["cnt1", 0], ["1", 0], ["or", 0], ["cnt2", 0], ["2", 0], ["or", 0], ["cnt3", 0], ["3", 0], ["or", 0], ["cnt4", 0], ["2", 0], ["and", 0], ["cnt2", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["if", 0], ["a", 0], ["0", 0], ["1", 0], ["print", 0], ["yes", 0], ["elif", 0], ["a", 0], ["0", 0], ["2", 0], ["and", 0], ["a", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["elif", 0], ["a", 0], ["0", 0], ["2", 0], ["and", 0], ["a", 0], ["1", 0], ["4", 0], ["and", 0], ["a", 0], ["2", 0], ["4", 0], ["print", 0], ["yes", 0], ["elif", 0], ["a", 0], ["0", 0], ["3", 0], ["and", 0], ["a", 0], ["1", 0], ["3", 0], ["and", 0], ["a", 0], ["2", 0], ["3", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["r", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["r", 0], ["ans", 0], ["0", 0], ["o", 0], ["a", 0], ["count", 0], ["1", 0], ["t", 0], ["a", 0], ["count", 0], ["2", 0], ["th", 0], ["a", 0], ["count", 0], ["3", 0], ["f", 0], ["a", 0], ["count", 0], ["4", 0], ["if", 0], ["o", 0], ["0", 0], ["or", 0], ["t", 0], ["1", 0], ["or", 0], ["th", 0], ["2", 0], ["or", 0], ["t", 0], ["1", 0], ["and", 0], ["f", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0014760147601476014, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.001107011070110701, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.010241404535479151, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.009875640087783468, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0014760147601476014, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.001107011070110701, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.010241404535479151, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.009875640087783468, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nGiven two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.\nIn one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].\nIf there is no way to make arr1 strictly increasing, return -1.\n \nExample 1:\nInput: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\nOutput: 1\nExplanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].\n\nExample 2:\nInput: arr1 = [1,5,3,6,7], arr2 = [4,3,1]\nOutput: 2\nExplanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].\n\nExample 3:\nInput: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\nOutput: -1\nExplanation: You can't make arr1 strictly increasing.\n \nConstraints:\n\n1 <= arr1.length, arr2.length <= 2000\n0 <= arr1[i], arr2[i] <= 10^9\nclass Solution:\n    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["import bisect\nfrom functools import lru_cache\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, A: List[int], B: List[int]) -> int:\n\t\tB = sorted(set(B))\n\n\t\t@lru_cache(None)\n\t\tdef find_larger_value_in_B(val):\n\t\t\tif val >= B[-1]:\n\t\t\t\treturn float('inf')\n\t\t\treturn B[bisect.bisect_right(B, val)]\n\n\t\t@lru_cache(None)\n\t\tdef min_last_value_given_operations(n, ops):\n\t\t\tif ops < 0:\n\t\t\t\treturn float('inf')\n\t\t\telif n == 0:\n\t\t\t\treturn float('-inf')\n\t\t\telif ops > n:\n\t\t\t\treturn min_last_value_given_operations(n, n)\n\n\t\t\tprev_with_op = min_last_value_given_operations(n - 1, ops - 1)\n\t\t\tb = find_larger_value_in_B(prev_with_op)\n\t\t\t# dp(n - 1, ops) <= dp(n - 1, ops - 1)\n\t\t\t# if dp(n - 1, ops - 1) < A[n - 1] => dp(n - 1, ops) < A[n - 1]\n\t\t\tif prev_with_op < A[n - 1]:\n\t\t\t\treturn min(A[n - 1], b)\n\t\t\telif b <= A[n - 1]:\n\t\t\t\treturn b\n\t\t\telif min_last_value_given_operations(n - 1, ops) < A[n - 1]:\n\t\t\t\treturn A[n - 1]\n\t\t\treturn b\n\n\t\tlast_success = -1\n\t\tfor ops in range(min(len(A), len(B)), -1, -1):\n\t\t\tif min_last_value_given_operations(len(A), ops) == float('inf'):\n\t\t\t\tbreak\n\t\t\tlast_success = ops\n\n\t\treturn last_success\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tfrom bisect import bisect_right as br\n\t\tarr2.sort()\n\t\t\n\t\tdp = {0:-math.inf}\n\t\t# min_cnt = 0\n\t\tfor n1 in arr1:\n\t\t\t# print(n1)\n\t\t\tnew_dp = {}\n\t\t\t# cnt = min_cnt\n\t\t\tfor cnt in dp:\n\t\t\t\tif n1 > dp[cnt]:\n\t\t\t\t\tnew_dp[cnt] = min(new_dp.get(cnt, math.inf), n1)\n\t\t\t\ti2 = br(arr2, dp[cnt])\n\t\t\t\tif i2 < len(arr2):\n\t\t\t\t\tnew_dp[cnt+1] = min(new_dp.get(cnt+1, math.inf), arr2[i2])\n\t\t\t\tcnt += 1\n\t\t\tif len(new_dp) == 0:\n\t\t\t\treturn -1\n\t\t\t# while min_cnt not in new_dp:\n\t\t\t#     min_cnt += 1\n\t\t\tdp = new_dp\n\t\t\t# print(dp)\n\t\treturn min(dp.keys())\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2 = list(set(arr2))\n\t\tarr2.sort()\n\t\tm, n = len(arr1), len(arr2)\n\t\tkeep = [float('inf')]*m\n\t\tswap = [[float('inf') for _ in range(n)] for _ in range(m)]\n\t\tkeep[0] = 0\n\t\tfor i in range(n):\n\t\t\tswap[0][i] = 1\n\t\tfor i in range(1, m):\n\t\t\tmin_keep, min_swap = float('inf'), float('inf')\n\t\t\tfor j in range(n):\n\t\t\t\tif j > 0:\n\t\t\t\t\tmin_swap = min(min_swap, swap[i-1][j-1]+1)\n\t\t\t\tif arr1[i] > arr2[j]:\n\t\t\t\t\tmin_keep = min(min_keep, swap[i-1][j])\n\t\t\t\tif arr1[i] > arr1[i-1]:\n\t\t\t\t\tkeep[i] = keep[i-1]\n\t\t\t\tif arr2[j] > arr1[i-1]:\n\t\t\t\t\tswap[i][j] = keep[i-1]+1\n\t\t\t\tkeep[i] = min(keep[i], min_keep)\n\t\t\t\tswap[i][j] = min(swap[i][j], min_swap)\n\t\ts = float('inf')\n\t\tfor i in range(n):\n\t\t\ts = min(s, swap[m-1][i])\n\t\tres = min(s, keep[m-1])\n\t\treturn -1 if res >= float('inf') else res\n\n# 见花花酱视频：https://www.bilibili.com/video/av67133426/?spm_id_from=333.788.b_636f6d6d656e74.7\n\t\t\t\t\t\n\t\t\n", "import numpy as np\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tm = len(arr1)\n\t\tarr2 = sorted(np.unique(arr2))\n\t\tn = len(arr2)\n\t\t\n\t\tkeep = [float('inf')] * m\n\t\tkeep[0] = 0\n\t\tswap = [1] * n\n\t\t\n\t\tfor i in range(1, m):\n\t\t\tmin_keep = float('inf')\n\t\t\tmin_swap = float('inf')\n\t\t\ttemp = [float('inf')] * n\n\t\t\tfor j in range(n):\n\t\t\t\tif j > 0:\n\t\t\t\t\tmin_swap = min(min_swap, swap[j - 1] + 1)\n\t\t\t\tif arr1[i] > arr2[j]:\n\t\t\t\t\tmin_keep = min(min_keep, swap[j])\n\t\t\t\tif arr1[i] > arr1[i - 1]:\n\t\t\t\t\tkeep[i] = keep[i - 1]\n\t\t\t\tif arr2[j] > arr1[i - 1]:\n\t\t\t\t\ttemp[j] = keep[i - 1] + 1\n\t\t\t\ttemp[j] = min(temp[j], min_swap)\n\t\t\t\tkeep[i] = min(keep[i], min_keep)\n\t\t\tfor j in range(n):\n\t\t\t\ttemp[j], swap[j] = swap[j], temp[j]\n\t\t\n\t\ts = min(swap)\n\t\tk = keep[-1]\n\t\tans = min(s, k)\n\t\treturn ans if ans < float('inf') else -1\n\t\t\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tm = len(arr1)\n\t\tarr2 = list(set(arr2))\n\t\tarr2.sort()\n\t\tn = len(arr2)\n\t\tkeep = [float('inf')] * m\n\t\tkeep[0] = 0\n\t\tswap = [[float('inf') for j in range(n)] for i in range(m)]\n\t\tfor j in range(n):\n\t\t\tswap[0][j] = 1\n\t\tfor i in range(1,m):\n\t\t\tmin_keep = float('inf')\n\t\t\tmin_swap = float('inf')\n\t\t\tfor j in range(0, n):\n\t\t\t\tif j > 0:\n\t\t\t\t\tmin_swap = min(min_swap, swap[i-1][j-1] + 1 )\n\t\t\t\tif arr1[i] > arr2[j]:\n\t\t\t\t\tmin_keep = min(min_keep, swap[i-1][j]  )\n\t\t\t\tif arr1[i] > arr1[i-1]:\n\t\t\t\t\tkeep[i] = keep[i -1]\n\t\t\t\tif arr2[j] > arr1[i-1]:\n\t\t\t\t\tswap[i][j] = keep[i -1] + 1\n\t\t\t\tswap[i][j] = min(swap[i][j], min_swap)\n\t\t\t\tkeep[i]  = min(keep[i], min_keep )\n\t\t\n\t\tk = keep[-1]\n\t\tmin_swap = min(swap[-1])\n\t\tans = min (min_swap, k)\n\t\treturn ans if ans < float('inf') else -1\n", "from bisect import bisect\n\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\td = {float('-inf'): 0}\n\t\tarr2 = sorted(set(arr2))\n\t\tfor i in arr1:\n\t\t\td2 = {}\n\t\t\tfor k, v in list(d.items()):\n\t\t\t\tif i > k:\n\t\t\t\t\tif i in d2:\n\t\t\t\t\t\td2[i] = min(d2[i], v)\n\t\t\t\t\telse:\n\t\t\t\t\t\td2[i] = v\n\n\t\t\t\tif k < arr2[-1]:\n\t\t\t\t\tj = arr2[bisect(arr2, k)]\n\t\t\t\t\tif j in d2:\n\t\t\t\t\t\td2[j] = min(d2[j], v + 1)\n\t\t\t\t\telse:\n\t\t\t\t\t\td2[j] = v + 1\n\t\t\t\n\t\t\td = d2\n\t\t\n\t\tif d:\n\t\t\treturn min(d.values())\n\t\treturn -1\n\t\t\t\t\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "from collections import defaultdict\nfrom math import inf\nfrom bisect import bisect_right\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2.sort()\n\t\tn = len(arr2)\n\t\tdp = {-1: 0}\n\t\tfor i in arr1:\n\t\t\tnext_dp = defaultdict(lambda: inf)\n\t\t\tfor key in dp:\n\t\t\t\tif i > key:\n\t\t\t\t\tnext_dp[i] = min(next_dp[i], dp[key])\n\t\t\t\tloc = bisect_right(arr2, key)\n\t\t\t\tif loc < n:\n\t\t\t\t\tnext_dp[arr2[loc]] = min(next_dp[arr2[loc]], dp[key] + 1)\n\t\t\tdp = next_dp\n\n\t\treturn min(dp.values()) if dp else -1\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tfrom bisect import bisect_right as br\n\t\tarr2.sort()\n\t\t\n\t\tdp = {0:-math.inf}\n\t\tmin_cnt = 0\n\t\tfor n1 in arr1:\n\t\t\t# print(n1)\n\t\t\tnew_dp = {}\n\t\t\tcnt = min_cnt\n\t\t\twhile cnt in dp:\n\t\t\t\tif n1 > dp[cnt]:\n\t\t\t\t\tnew_dp[cnt] = min(new_dp.get(cnt, math.inf), n1)\n\t\t\t\t\t# candidate = min(new_dp.get(cnt, math.inf), n1)\n\t\t\t\t\t# if candidate < new_dp.get(cnt-1, math.inf):\n\t\t\t\t\t#     new_dp[cnt] = candidate\n\t\t\t\ti2 = br(arr2, dp[cnt])\n\t\t\t\t# if i2 < len(arr2) and arr2[i2] < new_dp.get(cnt, math.inf):\n\t\t\t\tif i2 < len(arr2):\n\t\t\t\t\tnew_dp[cnt+1] = arr2[i2]\n\t\t\t\t# print(new_dp)\n\t\t\t\t# if new_dp.get(cnt+1, -math.inf) >= new_dp.get(cnt, math.inf):\n\t\t\t\t#     new_dp.pop(cnt+1)\n\t\t\t\t# if new_dp.get(cnt, -math.inf) >= new_dp.get(cnt-1, math.inf):\n\t\t\t\t#     new_dp.pop(cnt)\n\t\t\t\tcnt += 1\n\t\t\tif len(new_dp) == 0:\n\t\t\t\treturn -1\n\t\t\twhile min_cnt not in new_dp:\n\t\t\t\tmin_cnt += 1\n\t\t\tdp = new_dp\n\t\t\tprint(dp)\n\t\treturn min(dp.keys())\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\timport bisect\n\t\t# dp存储所有潜在的当前状态（每次dp都是遍历arr1时前一个位置的状态）\n\t\t# 这里的状态是一个键值对，key代表当前位置的数字，\n\t\t# 可以是arr1里面的，也可以是arr2里面用来替换的\n\t\t# value就是我们需要操作的次数\n\t\tdp = {-1: 0}\n\t\tarr2.sort()\n\t\tfor i in arr1:\n\t\t\ttmp = collections.defaultdict(lambda: float('inf'))\n\t\t\tfor key in dp:\n\t\t\t\tif i > key:\n\t\t\t\t\ttmp[i] = min(tmp[i], dp[key])\n\t\t\t\tloc = bisect.bisect_right(arr2, key)\n\t\t\t\tif loc < len(arr2):\n\t\t\t\t\ttmp[arr2[loc]] = min(tmp[arr2[loc]], dp[key] + 1)\n\t\t\tdp = tmp\n\t\treturn min(dp.values()) if dp else -1\n", "from bisect import bisect_right as br\nimport math\nimport functools\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2 = sorted(set(arr2))\n\t\t@lru_cache(None)\n\t\tdef dfs(i, prev):\n\t\t\tif i == len(arr1): return 0\n\t\t\tj = br(arr2, prev)\n\t\t\tswap = 1 + dfs(i+1, arr2[j]) if j < len(arr2) else math.inf\n\t\t\tnoswap = dfs(i+1, arr1[i]) if prev < arr1[i] else math.inf\n\t\t\treturn min(swap, noswap)  \n\t\tret = dfs(0, -math.inf)\n\t\treturn ret if ret != math.inf else -1\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t# arr2=sorted(set(arr2))\n\t\t# @functools.lru_cache(None)\n\t\t# def dfs(i,prev):\n\t\t#     if i >= len(arr1):\n\t\t#         return 0\n\t\t#     j = br(arr2,prev)\n\t\t#     swap = 1 + dfs(i+1, arr2[j]) if j < len(arr2) else math.inf\n\t\t#     noswap = dfs(i+1, arr1[i]) if arr1[i] > prev else math.inf\n\t\t#     return min(swap,noswap)\n\t\t# changes=dfs(0, -math.inf)\n\t\t# return changes if changes!=math.inf else -1\n", "from bisect import bisect_right as br\nimport math\nimport functools\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2 = sorted(set(arr2))   \n\t\t@lru_cache(None)\n\t\tdef dfs(i, prev):\n\t\t\tif i >= len(arr1): return 0\n\t\t\tj = br(arr2, prev)\n\t\t\tswap = 1 + dfs(i+1, arr2[j]) if j < len(arr2) else math.inf\n\t\t\tnoswap = dfs(i+1, arr1[i]) if prev < arr1[i] else math.inf\n\t\t\treturn min(swap, noswap)\n\t\tans = dfs(0, -1)\n\t\treturn ans if ans != math.inf else -1\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t# arr2=sorted(set(arr2))\n\t\t# @functools.lru_cache(None)\n\t\t# def dfs(i,prev):\n\t\t#     if i >= len(arr1):\n\t\t#         return 0\n\t\t#     j = br(arr2,prev)\n\t\t#     swap = 1 + dfs(i+1, arr2[j]) if j < len(arr2) else math.inf\n\t\t#     noswap = dfs(i+1, arr1[i]) if arr1[i] > prev else math.inf\n\t\t#     return min(swap,noswap)\n\t\t# changes=dfs(0, -math.inf)\n\t\t# return changes if changes!=math.inf else -1\n", "import bisect\nfrom functools import lru_cache\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, A: List[int], B: List[int]) -> int:\n\t\tB = sorted(set(B))\n\n\t\t@lru_cache(None)\n\t\tdef find_larger_value_in_B(val):\n\t\t\tif val >= B[-1]:\n\t\t\t\treturn float('inf')\n\t\t\treturn B[bisect.bisect_right(B, val)]\n\n\t\t@lru_cache(None)\n\t\tdef min_last_value_given_operations(n, ops):\n\t\t\tif ops < 0:\n\t\t\t\treturn float('inf')\n\t\t\telif n == 0:\n\t\t\t\treturn float('-inf')\n\t\t\telif ops > n:\n\t\t\t\treturn min_last_value_given_operations(n, n)\n\n\t\t\tskip_op = min_last_value_given_operations(n - 1, ops)\n\t\t\tif skip_op == float('inf'):\n\t\t\t\treturn float('inf')\n\t\t\treturn min(\n\t\t\t\tA[n - 1] if skip_op < A[n - 1] else float('inf'),\n\t\t\t\tfind_larger_value_in_B(min_last_value_given_operations(n - 1, ops - 1)),\n\t\t\t)\n\n\t\tlast_success = -1\n\t\tfor ops in range(min(len(A), len(B)), -1, -1):\n\t\t\tif min_last_value_given_operations(len(A), ops) == float('inf'):\n\t\t\t\tbreak\n\t\t\tlast_success = ops\n\n\t\treturn last_success\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\timport bisect\n\t\tdp = {-1: 0}\n\t\tarr2.sort()\n\t\tfor i in arr1:\n\t\t\ttmp = collections.defaultdict(lambda: float('inf'))\n\t\t\tfor key in dp:\n\t\t\t\tif i > key:\n\t\t\t\t\ttmp[i] = min(tmp[i], dp[key])\n\t\t\t\tloc = bisect.bisect_right(arr2, key)\n\t\t\t\tif loc < len(arr2):\n\t\t\t\t\ttmp[arr2[loc]] = min(tmp[arr2[loc]], dp[key] + 1)\n\t\t\tdp = tmp\n\t\treturn min(dp.values()) if dp else -1\n", "import bisect\nimport functools\n    \nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2=sorted(set(arr2))\n\t\t\n\t\t@functools.lru_cache(None)\n\t\tdef dfs(i,prev):\n\t\t\tif i>=len(arr1):\n\t\t\t\treturn 0\n\t\t\tj=bisect.bisect_right(arr2,prev)\n\t\t\tswap=1+dfs(i+1,arr2[j]) if j<len(arr2) else math.inf\n\t\t\tnoswap=dfs(i+1,arr1[i]) if arr1[i]>prev else math.inf\n\t\t\treturn min(swap,noswap)\n\t\tchanges=dfs(0,-math.inf)\n\t\treturn changes if changes!=math.inf else -1\n", "from bisect import bisect_right as br\nimport functools\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2 = sorted(set(arr2))\n\t\t@lru_cache(None)\n\t\tdef dfs(i, prev):\n\t\t\tif i >= len(arr1): return 0\n\t\t\tj = br(arr2, prev)\n\t\t\tswap = 1 + dfs(i+1, arr2[j]) if j < len(arr2) else math.inf\n\t\t\tnoswap = dfs(i+1, arr1[i]) if arr1[i] > prev else math.inf\n\t\t\treturn min(swap, noswap)\n\t\t\n\t\t\n\t\tans = dfs(0, -math.inf)\n\t\treturn ans if ans!=math.inf else -1\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t# arr2=sorted(set(arr2))\n\t\t# @functools.lru_cache(None)\n\t\t# def dfs(i,prev):\n\t\t#     if i >= len(arr1):\n\t\t#         return 0\n\t\t#     j = br(arr2,prev)\n\t\t#     swap = 1 + dfs(i+1, arr2[j]) if j < len(arr2) else math.inf\n\t\t#     noswap = dfs(i+1, arr1[i]) if arr1[i] > prev else math.inf\n\t\t#     return min(swap,noswap)\n\t\t# changes=dfs(0, -math.inf)\n\t\t# return changes if changes!=math.inf else -1\n", "import bisect\nimport functools\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2=sorted(set(arr2))\n\t\t@functools.lru_cache(None)\n\t\tdef dfs(i,prev):\n\t\t\tif i>=len(arr1):\n\t\t\t\treturn 0\n\t\t\tj=bisect.bisect_right(arr2,prev)\n\t\t\tswap=1+dfs(i+1,arr2[j]) if j<len(arr2) else math.inf\n\t\t\tnoswap=dfs(i+1,arr1[i]) if arr1[i]>prev else math.inf\n\t\t\treturn min(swap,noswap)\n\t\tchanges=dfs(0,-math.inf)\n\t\treturn changes if changes!=math.inf else -1\n", "import bisect\nimport functools\n    \nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\t# arr1i\n\t\t# arr2j\n\t\tarr2 = sorted(set(arr2))\n\t\t@functools.lru_cache(None)\n\t\tdef dfs(prev, i):\n\t\t\tif i == len(arr1):\n\t\t\t\treturn 0\n\t\t\tj = bisect.bisect_right(arr2, prev)\n\t\t\tswap = 1 + dfs(arr2[j], i+1) if j < len(arr2) else float('inf')\n\t\t\tnoswap = dfs(arr1[i], i+1) if prev < arr1[i] else float('inf')\n\t\t\treturn min(swap, noswap)\n\t\tchanges = dfs(float('-inf'), 0)\n\t\treturn changes if changes != float('inf') else -1\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\t# TC: O(min(M, N)*N+MlogM), SC: O(min(M, N))\n\t\tm, n = len(arr1), len(arr2)\n\t\t# sort O(MlogM)\n\t\tarr2.sort()\n\t\t# maintain a list of (num-of-swaps, last-value, next-to-swap-index-arr2),\n\t\t# where the last value should be decrease as the num of swaps is increase\n\t\tss = [(0, arr1[0], 0)]\n\t\tif arr2[0] < arr1[0]:\n\t\t\tss.append((1, arr2[0], 1))\n\t\t# O(N) iteration\n\t\tfor i in range(1, m):\n\t\t\tst = []\n\t\t\t# O(min(M, N))\n\t\t\tfor s, x, j in ss:\n\t\t\t\tif x < arr1[i]:\n\t\t\t\t\tif st:\n\t\t\t\t\t\tif s == st[-1][0]:\n\t\t\t\t\t\t\tif arr1[i] < st[-1][1]:\n\t\t\t\t\t\t\t\tst[-1] = (s, arr1[i], j)\n\t\t\t\t\t\telif s > st[-1][0]:\n\t\t\t\t\t\t\tif arr1[i] < st[-1][1]:\n\t\t\t\t\t\t\t\tst.append((s, arr1[i], j))\n\t\t\t\t\telse:\n\t\t\t\t\t\tst.append((s, arr1[i], j))\n\t\t\t\t# amortized O(1)\n\t\t\t\twhile j < n and arr2[j] <= x:\n\t\t\t\t\tj += 1\n\t\t\t\tif j < n:\n\t\t\t\t\tst.append((s + 1, arr2[j], j))\n\t\t\t# since each swap takes at most 1 entry, and at most O(min(M, N)) swap, so SC: O(min(M, N))\n\t\t\tss = st\n\t\treturn ss[0][0] if ss else -1\n", "import bisect\nfrom typing import List\nfrom functools import lru_cache\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarray = arr1\n\t\treplace = list(sorted(set(arr2)))\n\n\t\t@lru_cache(None)\n\t\tdef dfs(array_pos: int, prev_number: int) -> int:\n\t\t\tmin_replacements = len(replace) * 2\n\n\t\t\tif array_pos == len(array):\n\t\t\t\treturn 0\n\n\t\t\tnext_replace_pos = 0\n\n\t\t\tif array_pos > 0:\n\t\t\t\tnext_replace_pos = bisect.bisect(replace, prev_number)\n\n\t\t\tif array_pos == 0 or (\n\t\t\t\tnext_replace_pos < len(replace)\n\t\t\t):\n\t\t\t\ttmp = array[array_pos]\n\t\t\t\tmin_replacements = min(min_replacements, dfs(array_pos + 1, replace[next_replace_pos]) + 1)\n\n\t\t\tif array_pos == 0 or prev_number < array[array_pos]:\n\t\t\t\tmin_replacements = min(min_replacements, dfs(array_pos + 1, array[array_pos]))\n\n\t\t\treturn min_replacements\n\n\t\tresult = dfs(0, -100)\n\n\t\tif result > len(replace):\n\t\t\treturn -1\n\n\t\treturn result\n", "import bisect\nfrom functools import lru_cache\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, A: List[int], B: List[int]) -> int:\n\t\tB = sorted(set(B))\n\t\tb2idx = {b: i for i, b in enumerate(B)}\n\t\t\n\t\t@lru_cache(None)\n\t\tdef find_larger_value_in_B(val):\n\t\t\tif val >= B[-1]:\n\t\t\t\treturn float('inf')\n\t\t\tif val in b2idx:\n\t\t\t\treturn B[b2idx[val] + 1]\n\t\t\treturn B[bisect.bisect_right(B, val)]\n\n\t\t@lru_cache(None)\n\t\tdef min_last_value_given_operations(n, ops):\n\t\t\tif ops < 0:\n\t\t\t\treturn float('inf')\n\t\t\telif n == 0:\n\t\t\t\treturn float('-inf')\n\t\t\telif ops > n:\n\t\t\t\treturn min_last_value_given_operations(n, n)\n\n\t\t\tskip_op = min_last_value_given_operations(n - 1, ops)\n\t\t\tif skip_op == float('inf'):\n\t\t\t\treturn float('inf')\n\t\t\treturn min(\n\t\t\t\tA[n - 1] if skip_op < A[n - 1] else float('inf'),\n\t\t\t\tfind_larger_value_in_B(min_last_value_given_operations(n - 1, ops - 1)),\n\t\t\t)\n\n\t\tlast_success = -1\n\t\tfor ops in range(min(len(A), len(B)), -1, -1):\n\t\t\tif min_last_value_given_operations(len(A), ops) == float('inf'):\n\t\t\t\tbreak\n\t\t\tlast_success = ops\n\n\t\treturn last_success\n", "import bisect\nimport functools\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2=sorted(set(arr2))\n\t\t@functools.lru_cache(None)\n\t\tdef dfs(i,prev):\n\t\t\tif i>=len(arr1):\n\t\t\t\treturn 0\n\t\t\tj = bisect.bisect_right(arr2,prev)\n\t\t\tswap = 1 + dfs(i+1,arr2[j]) if j < len(arr2)  else math.inf\n\t\t\tnoswap = dfs(i+1,arr1[i])   if arr1[i] > prev else math.inf\n\t\t\treturn min(swap,noswap)\n\t\tchanges = dfs(0,-math.inf)\n\t\treturn changes if changes != math.inf else -1\n", "import bisect\n\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tN = len(arr1)\n\t\tarr1 = [0] + arr1\n\t\t# 表示前 i 个元素，执行了 k 次操作后，是有序的\n\t\tdp = [[float('inf')] * (N + 1) for _ in range(N + 1)]\n\t\tdp[0][0] = -float('inf')\n\t\t\n\t\tarr2.sort()\n\t\tfor i in range(1, N + 1):\n\t\t\tfor k in range(i + 1):\n\t\t\t\t# 前i-1个元素，已经完成了k次交换\n\t\t\t\tif arr1[i] > dp[i-1][k]:\n\t\t\t\t\tdp[i][k] = min(dp[i][k], arr1[i])\n\t\t\t\t\n\t\t\t\t# 前 i-1 个元素，已经完成了 k-1次交换，所以这一次一定要交换\n\t\t\t\tif k >= 1:\n\t\t\t\t\tidx_2 = bisect.bisect_right(arr2, dp[i-1][k-1])\n\t\t\t\t\tif idx_2 != len(arr2):                    \n\t\t\t\t\t\tdp[i][k] = min(dp[i][k], arr2[idx_2])\n\t\t\n\t\tres = float('inf')\n\t\tfor i in range(1, N+1):\n\t\t\tif dp[N][i] != float('inf'):\n\t\t\t\tres = min(res, i)\n\t\treturn res if res != float('inf') else -1\n", "import bisect\nfrom typing import List\nfrom functools import lru_cache\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarray = arr1\n\t\treplace = list(sorted(set(arr2)))\n\n\t\t@lru_cache(None)\n\t\tdef dfs(array_pos: int, prev_number: int) -> int:\n\t\t\tmin_replacements = len(replace) * 2\n\n\t\t\tif array_pos == len(array):\n\t\t\t\treturn 0\n\n\t\t\tnext_replace_pos = 0\n\n\t\t\tif array_pos > 0:\n\t\t\t\tnext_replace_pos = bisect.bisect(replace, array[array_pos - 1])\n\n\t\t\tif array_pos == 0 or (\n\t\t\t\tnext_replace_pos < len(replace)\n\t\t\t):\n\t\t\t\ttmp = array[array_pos]\n\t\t\t\tarray[array_pos] = replace[next_replace_pos]\n\t\t\t\tmin_replacements = min(min_replacements, dfs(array_pos + 1, array[array_pos]) + 1)\n\t\t\t\tarray[array_pos] = tmp\n\n\t\t\tif array_pos == 0 or array[array_pos - 1] < array[array_pos]:\n\t\t\t\tmin_replacements = min(min_replacements, dfs(array_pos + 1, array[array_pos]))\n\n\t\t\treturn min_replacements\n\n\t\tresult = dfs(0, -100)\n\n\t\tif result > len(replace):\n\t\t\treturn -1\n\n\t\treturn result\n", "import bisect\n\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1, arr2) -> int:\n\t\tN = len(arr1)\n\t\tarr1 = [0] + arr1\n\t\tarr2.sort()\n\t\tdp = [[float('inf')] * (N + 1) for _ in range(N + 1)]\n\t\tdp[0][0] = -float('inf')\n\t\t\n\t\tfor i in range(1, N + 1):\n\t\t\tfor j in range(0, i + 1):\n\t\t\t\tif dp[i-1][j] < arr1[i]:\n\t\t\t\t\tdp[i][j] = min(dp[i][j], arr1[i])\n\t\t\t\tif j >= 1:\n\t\t\t\t\t# 要在 arr2 中找到一个比 arr1[i] 稍微大一点的数\n\t\t\t\t\tidx_2 = bisect.bisect_right(arr2, dp[i-1][j-1])\n\t\t\t\t\tif idx_2 != len(arr2):\n\t\t\t\t\t\tdp[i][j] = min(dp[i][j], arr2[idx_2])\n\t\t\n\t\t# 满足条件，并且能够执行最少的次数的 K 的值\n\t\tres = float('inf')\n\t\tfor i in range(1, N + 1):\n\t\t\tif dp[N][i] != float('inf'):\n\t\t\t\tres = min(res, i)\n\t\treturn -1 if res == float('inf') else res\n", "import bisect\nimport functools\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2=sorted(set(arr2))\n\t\t\n\t\t@functools.lru_cache(None)\n\t\tdef dfs(i,prev):\n\t\t\tif i>=len(arr1):\n\t\t\t\treturn 0\n\t\t\tj=bisect.bisect_right(arr2,prev)\n\t\t\tswap=1+dfs(i+1,arr2[j]) if j<len(arr2) else math.inf\n\t\t\tnoswap=dfs(i+1,arr1[i]) if arr1[i]>prev else math.inf\n\t\t\treturn min(swap,noswap)\n\t\t\n\t\tchanges=dfs(0,-math.inf)\n\t\treturn changes if changes!=math.inf else -1\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tdef bs(arr, l, r, target):\n\t\t\twhile l<=r:\n\t\t\t\tm = l+(r-l)//2\n\t\t\t\tif arr[m]>target:\n\t\t\t\t\tr = m-1\n\t\t\t\telse:\n\t\t\t\t\tl = m+1\n\t\t\treturn l\n\t\t\n\t\tarr2.sort()\n\t\tN = len(arr2)\n\t\tdp = {-1:0}\n\t\t\n\t\tfor a in arr1:\n\t\t\tdp2 = {}\n\t\t\tfor prev in dp:\n\t\t\t\tif a>prev:\n\t\t\t\t\tdp2[a] = min(dp2.get(a, float('inf')), dp[prev])\n\t\t\t\t\n\t\t\t\tidx = bs(arr2, 0, N-1, prev)\n\t\t\t\tif idx<N:\n\t\t\t\t\tdp2[arr2[idx]] = min(dp2.get(arr2[idx], float('inf')), dp[prev]+1)\n\t\t\t\t\t\n\t\t\tdp = dp2\n\t\t\tif not dp:\n\t\t\t\treturn -1\n\t\t\t\n\t\treturn min(dp.values())\n", "import bisect\nfrom functools import lru_cache\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, A: List[int], B: List[int]) -> int:\n\t\tB = sorted(set(B))\n\t\t\n\t\tdef find_lower_val_in_B(val):\n\t\t\tlarger_equal_idx = bisect.bisect_left(B, val)\n\t\t\tif larger_equal_idx > 0:\n\t\t\t\treturn B[larger_equal_idx - 1]\n\t\t\treturn None  # no lower value in B\n\n\t\t@lru_cache(None)\n\t\tdef make_prefix_increasing(n, upper=float('inf')):\n\t\t\tif n == 0:\n\t\t\t\treturn 0\n\n\t\t\tswap_b = find_lower_val_in_B(upper)\n\t\t\tret = float('inf')\n\t\t\tif A[n - 1] < upper:\n\t\t\t\tret = min(make_prefix_increasing(n - 1, upper=A[n - 1]), ret)\n\t\t\tif swap_b is not None:\n\t\t\t\tret = min(1 + make_prefix_increasing(n - 1, upper=swap_b), ret)\n\n\t\t\treturn ret\n\n\t\tret = make_prefix_increasing(len(A))\n\t\treturn ret if ret < float('inf') else -1\n", "class Solution:\n\tdef makeArrayIncreasing(self, A: List[int], B: List[int]) -> int:\n\t\t\n\t\tdp = {-1:0}\n\t\tB = sorted(B)\n\t\t\n\t\tfor cur in A:\n\t\t\ttemp = collections.defaultdict(lambda: float('inf'))\n\t\t\tfor prev in dp:\n\t\t\t\tif prev<cur:\n\t\t\t\t\ttemp[cur] = min(temp[cur], dp[prev])\n\t\t\t\tidx = self.upper_bound(B, prev)\n\t\t\t\tif idx<len(B):\n\t\t\t\t\ttemp[B[idx]] = min(temp[B[idx]], dp[prev]+1) \n\t\t\tdp = temp\n\t\t\n\t\tif dp:\n\t\t\treturn min(dp.values())\n\t\treturn -1\n\t\n\tdef upper_bound(self, B, target):\n\t\tl=0\n\t\tr=len(B)\n\t\twhile l<r:\n\t\t\tmid=l+(r-l)//2\n\t\t\tif B[mid]<=target:\n\t\t\t\tl=mid+1\n\t\t\telse:\n\t\t\t\tr=mid\n\t\treturn l\n\t\t\t\t\n\t\t\t\t\n", "import bisect\nfrom functools import lru_cache\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, A: List[int], B: List[int]) -> int:\n\t\tB = sorted(set(B))\n\n\t\t@lru_cache(None)\n\t\tdef find_larger_value_in_B(val):\n\t\t\tif val >= B[-1]:\n\t\t\t\treturn float('inf')\n\t\t\treturn B[bisect.bisect_right(B, val)]\n\n\t\t@lru_cache(None)\n\t\tdef min_last_value_given_operations(n, ops):\n\t\t\tif ops < 0:\n\t\t\t\treturn float('inf')\n\t\t\telif n == 0:\n\t\t\t\treturn float('-inf')\n\t\t\telif ops > n:\n\t\t\t\treturn min_last_value_given_operations(n, n)\n\t\t\treturn min(\n\t\t\t\tA[n - 1] if min_last_value_given_operations(n - 1, ops) < A[n - 1] else float('inf'),\n\t\t\t\tfind_larger_value_in_B(min_last_value_given_operations(n - 1, ops - 1)),\n\t\t\t)\n\n\t\tlast_success = -1\n\t\tfor ops in range(min(len(A), len(B)), -1, -1):\n\t\t\tif min_last_value_given_operations(len(A), ops) == float('inf'):\n\t\t\t\tbreak\n\t\t\tlast_success = ops\n\n\t\treturn last_success\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tif not arr1: return 0\n\t\tif not arr2: return arr1 == sorted(arr1)\n\t\t\n\t\tarr2 = sorted(list(set(arr2)), reverse=True)\n\t\t\n\t\tn, m, inf = len(arr1), len(arr2), float('inf')\n\t\tf = [[inf]*(n+1) for _ in range(n)]\n\t\tfor i in range(n+1):\n\t\t\tf[0][i] = min(arr1[0],arr2[-1])\n\t\tf[0][0] = arr1[0]\n\t\tfor i in range(1,n):\n\t\t\tfound_k = 0\n\t\t\tfor j in range(n+1):\n\t\t\t\tif f[i-1][j] < arr1[i]: f[i][j] = arr1[i]\n\t\t\t\tif not j: continue\n\t\t\t\tva = f[i-1][j-1]\n\t\t\t\tif not found_k:\n\t\t\t\t\tif arr2[0] > va:\n\t\t\t\t\t\tl,r = 0,m-1\n\t\t\t\t\t\twhile l < r:\n\t\t\t\t\t\t\tmid = l+r+1 >> 1\n\t\t\t\t\t\t\tif arr2[mid] > va:\n\t\t\t\t\t\t\t\tl = mid\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tr = mid - 1\n\t\t\t\t\t\tk = l\n\t\t\t\t\t\tfound_k = 1\n\t\t\t\t\t\tf[i][j] = min(f[i][j],arr2[k])\n\t\t\t\telse:\n\t\t\t\t\twhile k+1 < m and arr2[k+1] > va: k += 1\n\t\t\t\t\tf[i][j] = min(f[i][j],arr2[k])\n\t\tfor i,v in enumerate(f[-1]): \n\t\t\tif v < inf: return i\n\t\treturn -1\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n", "import bisect\nfrom functools import lru_cache\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, A: List[int], B: List[int]) -> int:\n\t\tB = sorted(set(B))\n\n\t\t@lru_cache(None)\n\t\tdef find_larger_value_in_B(val):\n\t\t\tif val >= B[-1]:\n\t\t\t\treturn float('inf')\n\t\t\treturn B[bisect.bisect_right(B, val)]\n\n\t\t@lru_cache(None)\n\t\tdef min_last_value_given_operations(n, ops):\n\t\t\tif ops < 0:\n\t\t\t\treturn float('inf')\n\t\t\telif n == 0:\n\t\t\t\treturn float('-inf')\n\t\t\telif ops > n:\n\t\t\t\treturn min_last_value_given_operations(n, n)\n\n\t\t\tprev_with_op = min_last_value_given_operations(n - 1, ops - 1)\n\t\t\tb = find_larger_value_in_B(prev_with_op)\n\t\t\t# dp(n - 1, ops) <= dp(n - 1, ops - 1)\n\t\t\t# if dp(n - 1, ops - 1) < A[n - 1] => dp(n - 1, ops) < A[n - 1]\n\t\t\tif prev_with_op < A[n - 1]:\n\t\t\t\treturn min(A[n - 1], b)\n\t\t\telif b <= A[n - 1]:\n\t\t\t\treturn b\n\t\t\telif min_last_value_given_operations(n - 1, ops) < A[n - 1]:\n\t\t\t\treturn A[n - 1]\n\t\t\treturn b\n\n\t\tfor ops in range(min(len(A), len(B)) + 1):\n\t\t\tif min_last_value_given_operations(len(A), ops) < float('inf'):\n\t\t\t\treturn ops\n\n\t\treturn -1\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\t#10:04\n\t\t# arr2=list(set(arr2))\n\t\tn=len(arr1)\n\t\tarr2=list(set(arr2))\n\t\tarr2.sort()\n\t\tm=len(arr2)\n\t\t# we might need fix at point 0\n\t\t# hence we will always compare it will\n\t\tdef bsearch(left,right,val):\n\t\t\tans=-1\n\t\t\twhile left<=right:\n\t\t\t\tmid=left+(right-left)//2\n\t\t\t\tif arr2[mid]>val:\n\t\t\t\t\tans=mid\n\t\t\t\t\tright=mid-1\n\t\t\t\telse:\n\t\t\t\t\tleft=mid+1\n\t\t\treturn ans \n\t\t\n\t\t@lru_cache(None)\n\t\tdef helper(i,j,prev):\n\t\t\tnonlocal n,m\n\t\t\tif i>=len(arr1):\n\t\t\t\t# arr1 is increasing, we have reached so far\n\t\t\t\treturn 0\n\t\t\telse:\n\t\t\t\tans=float('inf')\n\t\t\t\tif arr1[i]>prev:\n\t\t\t\t\t# no need of replacement\n\t\t\t\t\tans=min(ans,helper(i+1,j,arr1[i]))\n\t\t\t\t\t# pick any index from arr2 starting j\n\t\t\t\tidx=bsearch(j,len(arr2)-1,prev)\n\t\t\t\tif idx!=-1:\n\t\t\t\t\tans=min(ans,1+helper(i+1,idx+1,arr2[idx]))\n\t\t\t\treturn ans\n\t\tans=helper(0,0,-1)\n\t\treturn -1 if ans==float('inf') else ans\n\t\t\t\t\n\t\t\t\t\n\t\t\n\t\t\n", "def binsearch(arr,x):\n\tif(arr[0]>x):\n\t\treturn 0\n\tl=0\n\th=len(arr)-1\n\tret=-1\n\twhile(l<=h):\n\t\tmid=(l+h)//2\n\t\tif(arr[mid]<=x):\n\t\t\tl=mid+1\n\t\telif(arr[mid]>x):\n\t\t\tret=mid\n\t\t\th=mid-1\n\treturn ret\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2.sort()\n\t\tm=len(arr2)\n\t\tn=len(arr1)\n\t\tdp={}\n\t\t# print(binsearch(arr2,0))\n\t\tdef dfs(arr1,arr2,left,curr,dp):\n\t\t\tif(curr>=len(arr1)):\n\t\t\t\treturn 0\n\t\t\tif((curr,left) in dp):\n\t\t\t\treturn dp[(curr,left)]\n\t\t\tres1=sys.maxsize\n\t\t\tres2=0\n\t\t\tif(arr1[curr]>left):\n\t\t\t\tres1=dfs(arr1,arr2,arr1[curr],curr+1,dp)\n\t\t\tmid=binsearch(arr2,left)\n\t\t\tif(mid==-1):\n\t\t\t\tres2=sys.maxsize-1\n\t\t\telse:\n\t\t\t\tres2=dfs(arr1,arr2,arr2[mid],curr+1,dp)\n\t\t\tdp[(curr,left)]=min(res1,1+res2)\n\t\t\treturn dp[(curr,left)]\n\t\tx=dfs(arr1,arr2,-sys.maxsize,0,dp)\n\t\tif(x>=(sys.maxsize-1)):\n\t\t\treturn -1\n\t\treturn x\n\t\t\t\n", "def binsearch(arr,x):\n\tif(arr[0]>x):\n\t\treturn 0\n\tl=0\n\th=len(arr)-1\n\tret=-1\n\twhile(l<=h):\n\t\tmid=(l+h)//2\n\t\tif(arr[mid]<=x):\n\t\t\tl=mid+1\n\t\telif(arr[mid]>x):\n\t\t\tret=mid\n\t\t\th=mid-1\n\treturn ret\nclass Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2.sort()\n\t\tm=len(arr2)\n\t\tn=len(arr1)\n\t\tdp={}\n\t\tdef dfs(arr1,arr2,left,curr,dp):\n\t\t\tif(curr>=len(arr1)):\n\t\t\t\treturn 0\n\t\t\tif((curr,left) in dp):\n\t\t\t\treturn dp[(curr,left)]\n\t\t\tres1=sys.maxsize\n\t\t\tres2=0\n\t\t\tif(arr1[curr]>left):\n\t\t\t\tres1=dfs(arr1,arr2,arr1[curr],curr+1,dp)\n\t\t\tmid=binsearch(arr2,left)\n\t\t\tif(mid==-1):\n\t\t\t\tres2=sys.maxsize-1\n\t\t\telse:\n\t\t\t\tres2=dfs(arr1,arr2,arr2[mid],curr+1,dp)\n\t\t\tdp[(curr,left)]=min(res1,1+res2)\n\t\t\treturn dp[(curr,left)]\n\t\tx=dfs(arr1,arr2,-sys.maxsize,0,dp)\n\t\tif(x==(sys.maxsize)):\n\t\t\treturn -1\n\t\treturn x\n\t\t\t\n", "import bisect\nfrom functools import lru_cache\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, A: List[int], B: List[int]) -> int:\n\t\tB = sorted(set(B))\n\t\tb2idx = {b: i for i, b in enumerate(B)}\n\t\t\n\t\t# @lru_cache(None)\n\t\tdef find_larger_value_in_B(val):\n\t\t\tif val >= B[-1]:\n\t\t\t\treturn float('inf')\n\t\t\tif val in b2idx:\n\t\t\t\treturn B[b2idx[val] + 1]\n\t\t\treturn B[bisect.bisect_right(B, val)]\n\n\t\t@lru_cache(None)\n\t\tdef min_last_value_given_operations(n, ops):\n\t\t\tif ops < 0:\n\t\t\t\treturn float('inf')\n\t\t\telif n == 0:\n\t\t\t\treturn float('-inf')\n\t\t\telif ops > n:\n\t\t\t\treturn min_last_value_given_operations(n, n)\n\n\t\t\tskip_op = min_last_value_given_operations(n - 1, ops)\n\t\t\tif skip_op == float('inf'):\n\t\t\t\treturn float('inf')\n\t\t\treturn min(\n\t\t\t\tA[n - 1] if skip_op < A[n - 1] else float('inf'),\n\t\t\t\tfind_larger_value_in_B(min_last_value_given_operations(n - 1, ops - 1)),\n\t\t\t)\n\n\t\tlast_success = -1\n\t\tfor ops in range(min(len(A), len(B)), -1, -1):\n\t\t\tif min_last_value_given_operations(len(A), ops) == float('inf'):\n\t\t\t\tbreak\n\t\t\tlast_success = ops\n\n\t\treturn last_success\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\t#10:04\n\t\t# arr2=list(set(arr2))\n\t\tarr2.sort()\n\t\t# we might need fix at point 0\n\t\t# hence we will always compare it will\n\t\t\n\t\tdef bsearch(left,right,val):\n\t\t\tans=-1\n\t\t\twhile left<=right:\n\t\t\t\tmid=left+(right-left)//2\n\t\t\t\tif arr2[mid]>val:\n\t\t\t\t\tans=mid\n\t\t\t\t\tright=mid-1\n\t\t\t\telse:\n\t\t\t\t\tleft=mid+1\n\t\t\treturn ans \n\t\t\n\t\t@lru_cache(None)\n\t\tdef helper(i,j,prev):\n\t\t\tif i>=len(arr1):\n\t\t\t\t# arr1 is increasing, we have reached so far\n\t\t\t\treturn 0\n\t\t\telse:\n\t\t\t\tans=float('inf')\n\t\t\t\tif arr1[i]>prev:\n\t\t\t\t\t# no need of replacement\n\t\t\t\t\tans=min(ans,helper(i+1,j,arr1[i]))\n\t\t\t\t\t# pick any index from arr2 starting j\n\t\t\t\tidx=bsearch(j,len(arr2)-1,prev)\n\t\t\t\tif idx!=-1:\n\t\t\t\t\tans=min(ans,1+helper(i+1,idx+1,arr2[idx]))\n\t\t\t\treturn ans\n\t\tans=helper(0,0,-1)\n\t\treturn -1 if ans==float('inf') else ans\n\t\t\t\t\n\t\t\t\t\n\t\t\n\t\t\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\t#10:04\n\t\t# arr2=list(set(arr2))\n\t\tn=len(arr1)\n\t\tarr2=list(set(arr2))\n\t\tarr2.sort()\n\t\tm=len(arr2)\n\t\t# we might need fix at point 0\n\t\t# hence we will always compare it will\n\t\tdef bsearch(left,right,val):\n\t\t\tans=-1\n\t\t\twhile left<=right:\n\t\t\t\tmid=left+(right-left)//2\n\t\t\t\tif arr2[mid]>val:\n\t\t\t\t\tans=mid\n\t\t\t\t\tright=mid-1\n\t\t\t\telse:\n\t\t\t\t\tleft=mid+1\n\t\t\treturn ans \n\t\t\n\t\t@lru_cache(None)\n\t\tdef helper(i,j,prev):\n\t\t\tnonlocal n,m\n\t\t\tif i>=n:\n\t\t\t\t# arr1 is increasing, we have reached so far\n\t\t\t\treturn 0\n\t\t\telse:\n\t\t\t\tans=float('inf')\n\t\t\t\tif arr1[i]>prev:\n\t\t\t\t\t# no need of replacement\n\t\t\t\t\tans=min(ans,helper(i+1,j,arr1[i]))\n\t\t\t\t\t# pick any index from arr2 starting j\n\t\t\t\tidx=bsearch(j,m-1,prev)\n\t\t\t\tif idx!=-1:\n\t\t\t\t\tans=min(ans,1+helper(i+1,idx+1,arr2[idx]))\n\t\t\t\treturn ans\n\t\tans=helper(0,0,-1)\n\t\treturn -1 if ans==float('inf') else ans\n\t\t\t\t\n\t\t\t\t\n\t\t\n\t\t\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\t#10:04\n\t\t# arr2=list(set(arr2))\n\t\tarr2.sort()\n\t\t# we might need fix at point 0\n\t\t# hence we will always compare it will\n\t\tdef bsearch(left,right,val):\n\t\t\tans=-1\n\t\t\twhile left<=right:\n\t\t\t\tmid=left+(right-left)//2\n\t\t\t\tif arr2[mid]>val:\n\t\t\t\t\tans=mid\n\t\t\t\t\tright=mid-1\n\t\t\t\telse:\n\t\t\t\t\tleft=mid+1\n\t\t\treturn ans\n\t\t\n\t\t@lru_cache(None)\n\t\tdef helper(i,j,prev):\n\t\t\tif i>=len(arr1):\n\t\t\t\t# arr1 is increasing, we have reached so far\n\t\t\t\treturn 0\n\t\t\telse:\n\t\t\t\tans=float('inf')\n\t\t\t\tif arr1[i]>prev:\n\t\t\t\t\t# no need of replacement\n\t\t\t\t\tans=min(ans,helper(i+1,j,arr1[i]))\n\t\t\t\t\t# pick any index from arr2 starting j\n\t\t\t\tidx=bsearch(j,len(arr2)-1,prev)\n\t\t\t\tif idx!=-1:\n\t\t\t\t\tans=min(ans,1+helper(i+1,idx+1,arr2[idx]))\n\t\t\t\t\n\t\t\t\t\t\n#                 for k in range(j,len(arr2)):\n#                     # can we use binary search here\n#                     # we got to find out the minumum value in arr2 which is greater than prev\n\t\t\t\t\t\n#                     if arr2[k]>prev:\n#                         # we can probably use binary search here\n#                         # get the first index which is strictly greater than prev\n#                         ans=min(ans,1+helper(i+1,k+1,arr2[k]))\n#                         break\n\t\t\t\treturn ans\n\t\tans=helper(0,0,-1)\n\t\treturn -1 if ans==float('inf') else ans\n\t\t\t\t\n\t\t\t\t\n\t\t\n\t\t\n", "import bisect\nclass Solution:\n\tdef recurse(self,arr1,arr2,m,n,idx,prev,dp):\n\t\tif idx>=n:\n\t\t\treturn 0\n\t\tk=bisect.bisect_right(arr2,prev)\n\t\tif dp[idx][k]!=-1:\n\t\t\treturn dp[idx][k]\n\t\tc1=self.recurse(arr1,arr2,m,n,idx+1,arr1[idx],dp) if arr1[idx]>prev else 2000\n\t\tc2=1+self.recurse(arr1,arr2,m,n,idx+1,arr2[k],dp) if k<m else 2000\n\t\tdp[idx][k]=min(c1,c2)\n\t\treturn dp[idx][k]\n\t \n\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tdp=[[-1 for i in range(2001)] for j in range(2001)]\n\t\tarr2.sort()\n\t\tself.recurse(arr1,arr2,len(arr2),len(arr1),0,-10**9,dp)\n\t\tif dp[0][0]>=2000:\n\t\t\treturn -1\n\t\telse:\n\t\t\treturn dp[0][0]\n\t  \n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\t# Maintain two dp array: 1 for keep arr1[i], 1 for swap arr1[i] with arr2[j]\n\t\t# Convert arr2 to sorted unique set\n\t\ta = arr1\n\t\tb = sorted(list(set(arr2)))\n\t\tn, m = len(a), len(b)\n\t\tkeep = [0, math.inf]  # keep[i] = keep a[i]\n\t\tswap = [[1] * m, [math.inf] * m]  # swap[i][j] = a[i] replaced with b[j]\n\n\t\tprev, curr = 1, 0\n\t\tfor i in range(1, n):\n\t\t\tprev, curr = curr, prev\n\t\t\t# must init every time\n\t\t\tswap[curr] = [math.inf] * m\n\t\t\tkeep[curr] = math.inf\n\t\t\t# keep[i] case 1: a[i] is bigger than previous keep[i-1]\n\t\t\tif a[i] > a[i - 1]:\n\t\t\t\tkeep[curr] = keep[prev]\n\t\t\tfor j in range(m):\n\t\t\t\t# keep[i] case 2: a[i] is bigger then previous swap value.\n\t\t\t\tif a[i] > b[j]:\n\t\t\t\t\tkeep[curr] = min(keep[curr], swap[prev][j])\n\t\t\t\t# swap case 1: when a[i-1] keeps\n\t\t\t\tif b[j] > a[i - 1]:\n\t\t\t\t\tswap[curr][j] = min(swap[curr][j], 1 + keep[prev])\n\t\t\t\t# Swap case 2: when a[i-1] swapped\n\t\t\t\tif j > 0:\n\t\t\t\t\t# only need to check last swap[i-1][j-1] since swap[][j] decreases when j increases.\n\t\t\t\t\tswap[curr][j] = min(swap[curr][j], 1 + swap[prev][j - 1])\n\n\t\tres = min(keep[curr], swap[curr][m - 1])\n\t\treturn res if res < math.inf else -1\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\t#10:04\n\t\t# arr2=list(set(arr2))\n\t\tn=len(arr1)\n\t\tarr2=list(set(arr2))\n\t\tarr2.sort()\n\t\tm=len(arr2)\n\t\t# we might need fix at point 0\n\t\t# hence we will always compare it will\n\t\tdef bsearch(left,right,val):\n\t\t\tans=-1\n\t\t\twhile left<=right:\n\t\t\t\tmid=left+(right-left)//2\n\t\t\t\tif arr2[mid]>val:\n\t\t\t\t\tans=mid\n\t\t\t\t\tright=mid-1\n\t\t\t\telse:\n\t\t\t\t\tleft=mid+1\n\t\t\treturn ans \n\t\t\n\t\t@lru_cache(None)\n\t\tdef helper(i,j,prev):\n\t\t\tnonlocal n,m\n\t\t\tif i>=n:\n\t\t\t\t# arr1 is increasing, we have reached so far\n\t\t\t\treturn 0\n\t\t\telse:\n\t\t\t\tans=float('inf')\n\t\t\t\tif arr1[i]>prev:\n\t\t\t\t\t# no need of replacement\n\t\t\t\t\tans=min(ans,helper(i+1,j,arr1[i]))\n\t\t\t\t# pick first index from arr2 starting j which is greater than prev\n\t\t\t\tidx=bsearch(j,m-1,prev)\n\t\t\t\tif idx!=-1:\n\t\t\t\t\tans=min(ans,1+helper(i+1,idx+1,arr2[idx]))\n\t\t\t\treturn ans\n\t\tans=helper(0,0,-1)\n\t\treturn -1 if ans==float('inf') else ans\n\n\t\n\t\t\t\t\n\t\t\t\t\n\t\t\n\t\t\n", "import bisect\nclass Solution:\n\tdef recurse(self,arr1,arr2,m,n,idx,prev,dp):\n\t\tif idx>=n:\n\t\t\treturn 0\n\t\tk=bisect.bisect_right(arr2,prev)\n\t\tif dp[idx][k]!=-1:\n\t\t\treturn dp[idx][k]\n\t\tc1=self.recurse(arr1,arr2,m,n,idx+1,arr1[idx],dp) if arr1[idx]>prev else 2000\n\t\tc2=1+self.recurse(arr1,arr2,m,n,idx+1,arr2[k],dp) if k<m else 2000\n\t\tdp[idx][k]=min(c1,c2)\n\t\treturn dp[idx][k]\n\t \n\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tdp=[[-1 for i in range(2001)] for j in range(2001)]\n\t\tarr2.sort()\n\t\tans=self.recurse(arr1,arr2,len(arr2),len(arr1),0,-10**9,dp)\n\t\tif ans>=2000:\n\t\t\treturn -1\n\t\telse:\n\t\t\treturn ans\n\t  \n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\t# Maintain two dp array: 1 for keep arr1[i], 1 for swap arr1[i] with arr2[j]\n\t\t# Convert arr2 to sorted unique set\n\t\ta = arr1\n\t\tb = sorted(list(set(arr2)))\n\t\tn, m = len(a), len(b)\n\t\tkeep = [math.inf] * n  # keep[i] = keep a[i]\n\t\tswap = [[math.inf] * m for _ in range(n)]  # swap[i][j] = a[i] replaced with b[j]\n\t\t# init\n\t\tkeep[0] = 0  # keep a[0], no swap\n\t\tswap[0] = [1] * m  # can be swapped with any a[j]\n\n\t\tfor i in range(1, n):\n\t\t\t# keep[i] case 1: a[i] is bigger than previous keep[i-1]\n\t\t\tif a[i] > a[i - 1]:\n\t\t\t\tkeep[i] = keep[i - 1]\n\t\t\tfor j in range(m):\n\t\t\t\t# keep[i] case 2: a[i] is bigger then previous swap value.\n\t\t\t\tif a[i] > b[j]:\n\t\t\t\t\tkeep[i] = min(keep[i], swap[i - 1][j])\n\t\t\t\t# swap case 1: when a[i-1] keeps\n\t\t\t\tif b[j] > a[i - 1]:\n\t\t\t\t\tswap[i][j] = min(swap[i][j], 1 + keep[i - 1])\n\t\t\t\t# Swap case 2: when a[i-1] swapped\n\t\t\t\tif j > 0:\n\t\t\t\t\t# only need to check last swap[i-1][j-1] since swap[][j] decreases when j increases.\n\t\t\t\t\tswap[i][j] = min(swap[i][j], 1 + swap[i - 1][j - 1])\n\n\t\tres = min(keep[n - 1], swap[n - 1][m - 1])\n\t\treturn res if res < math.inf else -1        \n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2.sort()\n\t\tm = len(arr1)\n\t\tn = len(arr2)\n\t\tnewarr2 = [arr2[0]]\n\t\tfor i in range(1, n):\n\t\t\tif arr2[i] != newarr2[-1]:\n\t\t\t\tnewarr2.append(arr2[i])\n\t\t\t\t\n\t\tarr2 = newarr2\n\t\tn = len(arr2)\n\n\t\tIL = 10 ** 9 + 7\n\t\t\n\t\tdp = [[IL for j in range(n + 1)] for i in range(m)]\n\t\t\n\t\tdp[0][n] = 0\n\t\tfor i in range(n):\n\t\t\tif arr2[i] < arr1[0]:\n\t\t\t\tdp[0][i] = 1\n\t\t\telse:\n\t\t\t\tbreak\n\t\t\n\t\tfor i in range(1, m):\n\t\t\tidx = 0\n\t\t\tif arr2[0] > arr1[i - 1]:\n\t\t\t\tdp[i][0] = dp[i - 1][n] + 1\n\t\t\t\n\t\t\tfor k in range(1, n):\n\t\t\t\ta = dp[i - 1][n] + 1 if dp[i - 1][n] != IL and arr1[i - 1] < arr2[k] else IL\n\t\t\t\tb = dp[i - 1][idx] + 1 if dp[i - 1][idx] != IL else IL\n\t\t\t\tdp[i][k] = min(a, b)\n\t\t\t\tif dp[i - 1][k] < dp[i - 1][idx]:\n\t\t\t\t\tidx = k\n\t\t\t\t\t\n\t\t\tif dp[i - 1][n] != IL and arr1[i] > arr1[i -1]:\n\t\t\t\tdp[i][n] = dp[i - 1][n]\n\t\t\t\n\t\t\tfor k in range(n):\n\t\t\t\tif dp[i - 1][k] != IL and arr2[k] < arr1[i]:\n\t\t\t\t\tdp[i][n] = min(dp[i][n], dp[i - 1][k])\n\t\t\t\t\t\n\t\tm = min(dp[m - 1])\n\t\t\n\t\treturn m if m != IL else -1\n\t\t\n\t\t\t\t\n", "class Solution:    \n\tdef binary_search_right(self, arr, l, r, t):\n\t\twhile l < r:\n\t\t\tm = l + (r - l) // 2\n\t\t\tif arr[m] <= t:\n\t\t\t\tl = m + 1\n\t\t\telse:\n\t\t\t\tr = m\n\t\treturn l\n\t\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2.sort()\n\t\t\n\t\tdp = {}\n\t\tdef help(i1, i2):\n\t\t\tif i1 == len(arr1):\n\t\t\t\treturn 0\n\t\t\t\n\t\t\tif i1 != 0:\n\t\t\t\tkey = (i1, i2, arr1[i1 - 1])\n\t\t\telse:\n\t\t\t\tkey = (i1, i2, None)\n\t\t\t\n\t\t\tif key in dp:\n\t\t\t\treturn dp[key]\n\t\t\t\n\t\t\t# print(key)\n\t\t\t\n\t\t\t# all possible results\n\t\t\tpos = []\n\t\t\t\n\t\t\t# don't make changes here\n\t\t\tif i1 == 0 or arr1[i1 - 1] < arr1[i1]:\n\t\t\t\tres = help(i1 + 1, i2)\n\t\t\t\tif res != -1:\n\t\t\t\t\tpos.append(res)\n\t\t\t\t\t\n\t\t\tif i1 != 0:\n\t\t\t\t# make change\n\t\t\t\ti2 = self.binary_search_right(arr2, i2, len(arr2), arr1[i1 - 1])\n\t\t\t\tif i2 != len(arr2):\n\t\t\t\t\ttmp = arr1[i1]\n\t\t\t\t\tarr1[i1] = arr2[i2]\n\t\t\t\t\tres = help(i1 + 1, i2 + 1)\n\t\t\t\t\tif res != -1:\n\t\t\t\t\t\tpos.append(res + 1)\n\t\t\t\t\tarr1[i1] = tmp\n\t\t\telse:\n\t\t\t\t# make change\n\t\t\t\tif i2 < len(arr2) and arr2[i2] < arr1[i1]:\n\t\t\t\t\ttmp = arr1[i1]\n\t\t\t\t\tarr1[i1] = arr2[i2]\n\t\t\t\t\tres = help(i1 + 1, i2 + 1)\n\t\t\t\t\tif res != -1:\n\t\t\t\t\t\tpos.append(res + 1)\n\t\t\t\t\tarr1[i1] = tmp\n\t\t\t\n\t\t\tif len(pos) == 0:\n\t\t\t\tdp[key] = -1\n\t\t\telse:\n\t\t\t\tdp[key] = min(pos)\n\t\t\treturn dp[key]\n\t\t\n\t\treturn help(0, 0)\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tn = len(arr1)\n\t\tarr1.insert(0, -1)\n\t\tarr2.sort()\n\t\t\n\t\t# dp[i][k] means the minimum number we can have at ith position with k operations\n\t\tdp = [[sys.maxsize for k in range(n + 1)] for i in range(n + 1)]\n\t\tdp[0][0] = -1\n\t\t\n\t\tfor i in range(1, n + 1):\n\t\t\tfor k in range(i + 1):\n\t\t\t\tif dp[i - 1][k] < arr1[i]:\n\t\t\t\t\t# not assign\n\t\t\t\t\tdp[i][k] = arr1[i]\n\t\t\t\t\n\t\t\t\tnum = self.helper(arr2, dp[i - 1][k - 1])\n\t\t\t\tif num > dp[i - 1][k - 1]:\n\t\t\t\t\tdp[i][k] = min(dp[i][k], num)\n\t\t\n\t\tans = sys.maxsize\n\t\tfor k in range(n + 1):\n\t\t\tif dp[n][k] < sys.maxsize:\n\t\t\t\tans = min(ans, k)\n\t\treturn ans if ans < sys.maxsize else -1\n\n\tdef helper(self, arr, val):\n\t\t# find in arr the smallest number that is larger than val\n\t\tstart, end = 0, len(arr) - 1\n\t\twhile start + 1 < end:\n\t\t\tmid = start + (end - start) // 2\n\t\t\tif arr[mid] <= val:\n\t\t\t\tstart = mid\n\t\t\telse:\n\t\t\t\tend = mid\n\t\t\n\t\tif arr[start] > val:\n\t\t\treturn arr[start]\n\t\treturn arr[end]\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tarr2 = sorted(set(arr2))\n\t\tsize1, size2 = len(arr1), len(arr2)\n\t\tInf = float('inf')\n\t\tkeep = [Inf] * size1\n\t\tkeep[0] = 0\n\t\tswap = [[Inf] * size2 for _ in range(size1)]\n\t\tswap[0] = [1] * size2\n\t\tfor i in range(1, size1):\n\t\t\tminKeep = minSwap = Inf\n\t\t\tfor j in range(size2):\n\t\t\t\tif arr1[i] > arr1[i-1]:\n\t\t\t\t\tkeep[i] = keep[i-1]\n\t\t\t\tif arr1[i] > arr2[j]:\n\t\t\t\t\tminKeep = min(minKeep, swap[i-1][j])\n\t\t\t\tif arr2[j] > arr1[i-1]:\n\t\t\t\t\tswap[i][j] = keep[i-1] + 1\n\t\t\t\tif j > 0: # arr2[j] > arr2[j-1] is always True\n\t\t\t\t\tminSwap = min(minSwap, swap[i-1][j-1] + 1)\n\t\t\t\tkeep[i] = min(keep[i], minKeep)\n\t\t\t\tswap[i][j] = min(swap[i][j], minSwap)\n\t\tres = min(min(swap[-1]), keep[-1])\n\t\treturn -1 if res == Inf else res\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tn = len(arr1)\n\t\tarr1.insert(0, -1)\n\t\tarr2.sort()\n\t\t\n\t\t# dp[i][k] means the minimum number we can have at ith position with k operations\n\t\tdp = [[sys.maxsize for k in range(n + 1)] for i in range(n + 1)]\n\t\tdp[0][0] = -1\n\t\t\n\t\tfor i in range(1, n + 1):\n\t\t\tfor k in range(i + 1):\n\t\t\t\tif dp[i - 1][k] < arr1[i]:\n\t\t\t\t\t# not assign\n\t\t\t\t\tdp[i][k] = arr1[i]\n\t\t\t\t\n\t\t\t\tif k >= 1:\n\t\t\t\t\tnum = self.helper(arr2, dp[i - 1][k - 1])\n\t\t\t\t\tif num > dp[i - 1][k - 1]:\n\t\t\t\t\t\tdp[i][k] = min(dp[i][k], num)\n\t\t\n\t\tans = sys.maxsize\n\t\tfor k in range(n + 1):\n\t\t\tif dp[n][k] < sys.maxsize:\n\t\t\t\tans = min(ans, k)\n\t\treturn ans if ans < sys.maxsize else -1\n\n\tdef helper(self, arr, val):\n\t\t# find in arr the smallest number that is larger than val\n\t\tstart, end = 0, len(arr) - 1\n\t\twhile start + 1 < end:\n\t\t\tmid = start + (end - start) // 2\n\t\t\tif arr[mid] <= val:\n\t\t\t\tstart = mid\n\t\t\telse:\n\t\t\t\tend = mid\n\t\t\n\t\tif arr[start] > val:\n\t\t\treturn arr[start]\n\t\treturn arr[end]\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tn = len(arr1)\n\t\tarr1.insert(0, -1)\n\t\tarr2.sort()\n\t\t# dp[i][k] means the minimum number we can get at arr1[i] using k operations\n\t\tdp = [[sys.maxsize for k in range(n + 1)] for i in range(n + 1)]\n\t\tdp[0][0] = -1\n\t\t\n\t\tfor i in range(1, n + 1):\n\t\t\tfor k in range(i + 1):\n\t\t\t\t# not changing for arr1[i]\n\t\t\t\tif dp[i - 1][k] < arr1[i]:\n\t\t\t\t\tdp[i][k] = arr1[i]\n\t\t\t\t\n\t\t\t\t# changing for arr1[i]\n\t\t\t\t# find the smallested number in arr2 that is larger than dp[i - 1][k - 1]\n\t\t\t\tif k >= 1:\n\t\t\t\t\tnum = self.helper(arr2, dp[i - 1][k - 1])\n\t\t\t\t\tif num > dp[i - 1][k - 1]:\n\t\t\t\t\t\tdp[i][k] = min(dp[i][k], num)\n\t\t\n\t\tans = sys.maxsize\n\t\tfor k in range(0, n + 1):\n\t\t\tif dp[n][k] < sys.maxsize:\n\t\t\t\tans = min(ans, k)\n\t\treturn ans if ans < sys.maxsize else -1\n\t\n\tdef helper(self, arr, val):\n\t\tstart, end = 0, len(arr) - 1\n\t\twhile start + 1 < end:\n\t\t\tmid = start + (end - start) // 2\n\t\t\tif arr[mid] <= val:\n\t\t\t\tstart = mid\n\t\t\telif arr[mid] > val:\n\t\t\t\tend = mid\n\t\t\n\t\tif arr[start] > val:\n\t\t\treturn arr[start]\n\t\treturn arr[end]\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\tset2 = set(arr2)\n\t\tarr2 = sorted(set2)\n\t\tN, M = len(arr1), len(arr2)\n\t\tto_index = {}\n\t\tleft = 0\n\t\tfor x in sorted(arr1):\n\t\t\twhile left < M and arr2[left] <= x:\n\t\t\t\tleft += 1\n\t\t\tto_index[x] = left - 1 if left < M else M\n\t\t\n\t\tprint(to_index, arr2)\n\t\tdp = [[[None, None] for _ in range(M + 1)] for _ in range(N)]\n\t\t\n\t\tdef solve(i, j, k):\n\t\t\tif i == N: return 0\n\t\t\tif j > M or (j == M and k == 1): return N+1\n\t\t\tif dp[i][j][k] is None:\n\t\t\t\tif i == 0: \n\t\t\t\t\tdp[i][j][k] = min(solve(i+1, to_index[arr1[0]], 0), 1 + solve(i+1, 0, 1))\n\t\t\t\telse:\n\t\t\t\t\tresult = N + 1\n\t\t\t\t\tif j < M - 1: \n\t\t\t\t\t\tresult = 1 + solve(i+1, j+1, 1)\n\t\t\t\t\tif k == 0 and arr1[i] > arr1[i-1]:\n\t\t\t\t\t\tresult = min(result, solve(i+1, to_index[arr1[i]], 0))\n\t\t\t\t\tif k == 1 and arr1[i] > arr2[j]:\n\t\t\t\t\t\tresult = min(result, solve(i+1, to_index[arr1[i]], 0))\n\t\t\t\t\tdp[i][j][k] = result\n\t\t\treturn dp[i][j][k]\n\t\tresult = solve(0, 0, 0)\n\t\t# for i in range(N):\n\t\t#     for j in range(M):\n\t\t#         for k in [0, 1]:\n\t\t#             print(dp[i][j][k], i, j, k)\n\t\treturn result if result <= N else -1\n", "import bisect\nfrom functools import lru_cache\n\n\nclass Solution:\n\tdef makeArrayIncreasing(self, A: List[int], B: List[int]) -> int:\n\t\tB = sorted(set(B))\n\n\t\tdef find_larger_value_in_B(val):\n\t\t\tif val >= B[-1]:\n\t\t\t\treturn float('inf')\n\t\t\treturn B[bisect.bisect_right(B, val)]\n\n\t\t@lru_cache(None)\n\t\tdef min_last_value_given_operations(n, ops):\n\t\t\tif ops < 0:\n\t\t\t\treturn float('inf')\n\t\t\tif n == 0:\n\t\t\t\treturn float('-inf')\n\t\t\t\t# return A[n - 1] if first_n_of_A_is_sorted(n) else float('inf')\n\n\t\t\tops = min(n, ops)\n\t\t\treturn min(\n\t\t\t\tA[n - 1] if min_last_value_given_operations(n - 1, ops) < A[n - 1] else float('inf'),\n\t\t\t\tfind_larger_value_in_B(min_last_value_given_operations(n - 1, ops - 1)),\n\t\t\t)\n\n\t\tfor ops in range(min(len(A), len(B)) + 1):\n\t\t\tif min_last_value_given_operations(len(A), ops) < float('inf'):\n\t\t\t\treturn ops\n\n\t\treturn -1\n", "class Solution:\n\tdef makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n\t\t## https://www.youtube.com/watch?v=8ttxdMCU2GE\n\t\tm = len(arr1)\n\t\t## remove dulpicates and sort arr2\n\t\tarr2 = sorted(list(set(arr2)))\n\t\t# print(arr2)\n\t\tn = len(arr2)\n\t\tswap = [[float('inf') for j in range(n)] for i in range(m)]\n\t\tkeep = [float('inf') for i in range(m)]\n\t\t\n\t\t## initialization\n\t\tkeep[0] = 0\n\t\tfor j in range(n):\n\t\t\tswap[0][j] = 1\n\t\t\t\n\t\tfor i in range(1, m):\n\t\t\tmin_keep = float('inf')\n\t\t\tmin_swap = float('inf')\n\t\t\tfor j in range(n):\n\t\t\t\t## two variables to help compute case 3 & 4\n\t\t\t\t## case 4: the last two elements of current valid array are both from arr2\n\t\t\t\tif j>0:\n\t\t\t\t\tmin_swap = min(min_swap, swap[i-1][j-1]+1)\n\n\t\t\t\t## case 3: the second to last element is replaced by the previous element arr2[j-1] or earlier elements\n\t\t\t\tif arr1[i]>arr2[j]:\n\t\t\t\t\tmin_keep = min(min_keep, swap[i-1][j])\n\t\t\t\t\t\n\t\t\t\t## case 1: no need to swap; keep arr1[i]\n\t\t\t\tif arr1[i]>arr1[i-1]:\n\t\t\t\t\tkeep[i] = keep[i-1]\n\t\t\t\t\n\t\t\t\t## case 2: ## replace arr1[i] by arr2[j]\n\t\t\t\tif arr2[j]>arr1[i-1]:\n\t\t\t\t\tswap[i][j] = keep[i-1] + 1\n\t\t\t\t\n\t\t\t\t## update\n\t\t\t\tswap[i][j] = min(swap[i][j], min_swap)\n\t\t\t\tkeep[i] = min(keep[i], min_keep)\n\t\t\t\t\n\t\t# for i in range(m):\n\t\t#     print(keep[i], swap[i])\n\t\t\t\t\n\t\tres = min(min(swap[m-1]), keep[m-1])\n\t\tif res == float('inf'):\n\t\t\treturn -1\n\t\telse:\n\t\t\treturn res\n"], "id": "id6965"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6965", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["given", 2], ["two", 2], ["integer", 2], ["arrays", 2], ["arr1", 2], ["and", 2], ["arr2", 2], ["return", 2], ["the", 2], ["minimum", 2], ["number", 2], ["of", 2], ["operations", 2], ["possibly", 2], ["zero", 2], ["needed", 2], ["to", 2], ["make", 2], ["arr1", 2], ["strictly", 2], ["increasing", 2], ["in", 2], ["one", 2], ["operation", 2], ["you", 2], ["can", 2], ["choose", 2], ["two", 2], ["indices", 2], ["0", 2], ["i", 2], ["arr1", 2], ["length", 2], ["and", 2], ["0", 2], ["j", 2], ["arr2", 2], ["length", 2], ["and", 2], ["do", 2], ["the", 2], ["assignment", 2], ["arr1", 2], ["i", 2], ["arr2", 2], ["j", 2], ["if", 0], ["there", 0], ["is", 0], ["no", 0], ["way", 0], ["to", 0], ["make", 0], ["arr1", 0], ["strictly", 0], ["increasing", 0], ["return", 0], ["1", 0], ["example", 0], ["1", 2], ["input", 0], ["arr1", 0], ["1", 0], ["5", 0], ["3", 0], ["6", 0], ["7", 0], ["arr2", 0], ["1", 0], ["3", 0], ["2", 0], ["4", 0], ["output", 0], ["1", 0], ["explanation", 0], ["replace", 0], ["5", 0], ["with", 0], ["2", 0], ["then", 0], ["arr1", 0], ["1", 0], ["2", 0], ["3", 0], ["6", 0], ["7", 0], ["example", 0], ["2", 0], ["input", 0], ["arr1", 0], ["1", 0], ["5", 0], ["3", 0], ["6", 0], ["7", 0], ["arr2", 0], ["4", 0], ["3", 0], ["1", 0], ["output", 0], ["2", 0], ["explanation", 2], ["replace", 2], ["5", 2], ["with", 2], ["3", 2], ["and", 0], ["then", 0], ["replace", 0], ["3", 0], ["with", 0], ["4", 0], ["arr1", 0], ["1", 0], ["3", 0], ["4", 0], ["6", 0], ["7", 0], ["example", 0], ["3", 0], ["input", 0], ["arr1", 0], ["1", 0], ["5", 0], ["3", 0], ["6", 0], ["7", 0], ["arr2", 0], ["1", 0], ["6", 0], ["3", 0], ["3", 0], ["output", 0], ["1", 0], ["explanation", 0], ["you", 0], ["can", 0], ["t", 0], ["make", 0], ["arr1", 0], ["strictly", 0], ["increasing", 0], ["constraints", 0], ["1", 2], ["arr1", 2], ["length", 2], ["arr2", 0], ["length", 0], ["2000", 0], ["0", 0], ["arr1", 0], ["i", 0], ["arr2", 0], ["i", 0], ["10", 0], ["9", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.32934131736526945, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.16467065868263472, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5754189944134078, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2877094972067039, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.32934131736526945, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.16467065868263472, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5754189944134078, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2877094972067039, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["bisect", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["a", 0], ["list", 0], ["int", 0], ["b", 0], ["list", 0], ["int", 0], ["int", 0], ["b", 0], ["sorted", 0], ["set", 0], ["b", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["val", 0], ["if", 0], ["val", 0], ["b", 0], ["1", 0], ["return", 0], ["float", 0], ["inf", 0], ["return", 0], ["b", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["b", 0], ["val", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["ops", 0], ["if", 0], ["ops", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["n", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["ops", 0], ["n", 0], ["return", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["n", 0], ["prev", 0], ["with", 0], ["op", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["1", 0], ["b", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["prev", 0], ["with", 0], ["op", 0], ["dp", 0], ["n", 0], ["1", 0], ["ops", 0], ["dp", 0], ["n", 0], ["1", 0], ["ops", 0], ["1", 0], ["if", 0], ["dp", 0], ["n", 0], ["1", 0], ["ops", 0], ["1", 0], ["a", 0], ["n", 0], ["1", 0], ["dp", 0], ["n", 0], ["1", 0], ["ops", 0], ["a", 0], ["n", 0], ["1", 0], ["if", 0], ["prev", 0], ["with", 0], ["op", 0], ["a", 0], ["n", 0], ["1", 0], ["return", 0], ["min", 0], ["a", 0], ["n", 0], ["1", 0], ["b", 0], ["elif", 0], ["b", 0], ["a", 0], ["n", 0], ["1", 0], ["return", 0], ["b", 0], ["elif", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["a", 0], ["n", 0], ["1", 0], ["return", 0], ["a", 0], ["n", 0], ["1", 0], ["return", 0], ["b", 0], ["last", 0], ["success", 0], ["1", 0], ["for", 0], ["ops", 0], ["in", 0], ["range", 0], ["min", 0], ["len", 0], ["a", 0], ["len", 0], ["b", 0], ["1", 0], ["1", 0], ["if", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["len", 0], ["a", 0], ["ops", 0], ["float", 0], ["inf", 0], ["break", 0], ["last", 0], ["success", 0], ["ops", 0], ["return", 0], ["last", 0], ["success", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["arr2", 0], ["sort", 0], ["dp", 0], ["0", 0], ["math", 0], ["inf", 0], ["min", 0], ["cnt", 0], ["0", 0], ["for", 0], ["n1", 0], ["in", 0], ["arr1", 0], ["print", 0], ["n1", 0], ["new", 0], ["dp", 0], ["cnt", 0], ["min", 0], ["cnt", 0], ["for", 0], ["cnt", 0], ["in", 0], ["dp", 0], ["if", 0], ["n1", 0], ["dp", 0], ["cnt", 0], ["new", 0], ["dp", 0], ["cnt", 0], ["min", 0], ["new", 0], ["dp", 0], ["get", 0], ["cnt", 0], ["math", 0], ["inf", 0], ["n1", 0], ["i2", 0], ["br", 0], ["arr2", 0], ["dp", 0], ["cnt", 0], ["if", 0], ["i2", 0], ["len", 0], ["arr2", 0], ["new", 0], ["dp", 0], ["cnt", 0], ["1", 0], ["min", 0], ["new", 0], ["dp", 0], ["get", 0], ["cnt", 0], ["1", 0], ["math", 0], ["inf", 0], ["arr2", 0], ["i2", 0], ["cnt", 0], ["1", 0], ["if", 0], ["len", 0], ["new", 0], ["dp", 0], ["0", 0], ["return", 0], ["1", 0], ["while", 0], ["min", 0], ["cnt", 0], ["not", 0], ["in", 0], ["new", 0], ["dp", 0], ["min", 0], ["cnt", 0], ["1", 0], ["dp", 0], ["new", 0], ["dp", 0], ["print", 0], ["dp", 0], ["return", 0], ["min", 0], ["dp", 0], ["keys", 0], ["class", 1], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["list", 0], ["set", 0], ["arr2", 0], ["arr2", 0], ["sort", 0], ["m", 0], ["n", 0], ["len", 0], ["arr1", 0], ["len", 0], ["arr2", 0], ["keep", 0], ["float", 0], ["inf", 0], ["m", 0], ["swap", 0], ["float", 0], ["inf", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["keep", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["swap", 0], ["0", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["min", 0], ["keep", 0], ["min", 0], ["swap", 0], ["float", 0], ["inf", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["j", 0], ["0", 0], ["min", 0], ["swap", 0], ["min", 0], ["min", 0], ["swap", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["1", 0], ["if", 0], ["arr1", 0], ["i", 0], ["arr2", 0], ["j", 0], ["min", 0], ["keep", 0], ["min", 0], ["min", 0], ["keep", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["if", 0], ["arr1", 0], ["i", 0], ["arr1", 0], ["i", 0], ["1", 0], ["keep", 0], ["i", 0], ["keep", 0], ["i", 0], ["1", 0], ["if", 0], ["arr2", 0], ["j", 0], ["arr1", 0], ["i", 0], ["1", 0], ["swap", 0], ["i", 0], ["j", 0], ["keep", 0], ["i", 0], ["1", 0], ["1", 0], ["keep", 0], ["i", 0], ["min", 0], ["keep", 0], ["i", 0], ["min", 0], ["keep", 0], ["swap", 0], ["i", 0], ["j", 0], ["min", 0], ["swap", 0], ["i", 0], ["j", 0], ["min", 0], ["swap", 0], ["s", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["min", 0], ["s", 0], ["swap", 0], ["m", 0], ["1", 0], ["i", 0], ["res", 0], ["min", 0], ["s", 0], ["keep", 0], ["m", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["res", 0], ["float", 0], ["inf", 0], ["else", 0], ["res", 0], ["见花花酱视频：https", 0], ["www", 0], ["bilibili", 0], ["com", 0], ["video", 0], ["av67133426", 0], ["spm", 0], ["id", 0], ["from", 0], ["333", 0], ["788", 0], ["b", 0], ["636f6d6d656e74", 0], ["7", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["m", 0], ["len", 0], ["arr1", 0], ["arr2", 0], ["sorted", 0], ["np", 0], ["unique", 0], ["arr2", 0], ["n", 0], ["len", 0], ["arr2", 0], ["keep", 0], ["float", 0], ["inf", 0], ["m", 0], ["keep", 0], ["0", 0], ["0", 0], ["swap", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["min", 0], ["keep", 0], ["float", 0], ["inf", 0], ["min", 0], ["swap", 0], ["float", 0], ["inf", 0], ["temp", 0], ["float", 0], ["inf", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["j", 0], ["0", 0], ["min", 0], ["swap", 0], ["min", 0], ["min", 0], ["swap", 0], ["swap", 0], ["j", 0], ["1", 0], ["1", 0], ["if", 0], ["arr1", 0], ["i", 0], ["arr2", 0], ["j", 0], ["min", 0], ["keep", 0], ["min", 0], ["min", 0], ["keep", 0], ["swap", 0], ["j", 0], ["if", 0], ["arr1", 0], ["i", 0], ["arr1", 0], ["i", 0], ["1", 0], ["keep", 0], ["i", 0], ["keep", 0], ["i", 0], ["1", 0], ["if", 0], ["arr2", 0], ["j", 0], ["arr1", 0], ["i", 0], ["1", 0], ["temp", 0], ["j", 0], ["keep", 0], ["i", 0], ["1", 0], ["1", 0], ["temp", 0], ["j", 0], ["min", 0], ["temp", 0], ["j", 0], ["min", 0], ["swap", 0], ["keep", 0], ["i", 0], ["min", 0], ["keep", 0], ["i", 0], ["min", 0], ["keep", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["temp", 0], ["j", 0], ["swap", 0], ["j", 0], ["swap", 0], ["j", 0], ["temp", 0], ["j", 0], ["s", 0], ["min", 0], ["swap", 0], ["k", 0], ["keep", 0], ["1", 0], ["ans", 0], ["min", 0], ["s", 0], ["k", 0], ["return", 0], ["ans", 0], ["if", 0], ["ans", 0], ["float", 0], ["inf", 0], ["else", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["m", 0], ["len", 0], ["arr1", 0], ["arr2", 0], ["list", 0], ["set", 0], ["arr2", 0], ["arr2", 0], ["sort", 0], ["n", 0], ["len", 0], ["arr2", 0], ["keep", 0], ["float", 0], ["inf", 0], ["m", 0], ["keep", 0], ["0", 0], ["0", 0], ["swap", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["swap", 0], ["0", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["min", 0], ["keep", 0], ["float", 0], ["inf", 0], ["min", 0], ["swap", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["j", 0], ["0", 0], ["min", 0], ["swap", 0], ["min", 0], ["min", 0], ["swap", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["1", 0], ["if", 0], ["arr1", 0], ["i", 0], ["arr2", 0], ["j", 0], ["min", 0], ["keep", 0], ["min", 0], ["min", 0], ["keep", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["if", 0], ["arr1", 0], ["i", 0], ["arr1", 0], ["i", 0], ["1", 0], ["keep", 0], ["i", 0], ["keep", 0], ["i", 0], ["1", 0], ["if", 0], ["arr2", 0], ["j", 0], ["arr1", 0], ["i", 0], ["1", 0], ["swap", 0], ["i", 0], ["j", 0], ["keep", 0], ["i", 0], ["1", 0], ["1", 0], ["swap", 0], ["i", 0], ["j", 0], ["min", 0], ["swap", 0], ["i", 0], ["j", 0], ["min", 0], ["swap", 0], ["keep", 0], ["i", 0], ["min", 0], ["keep", 0], ["i", 0], ["min", 0], ["keep", 0], ["k", 0], ["keep", 0], ["1", 0], ["min", 0], ["swap", 0], ["min", 0], ["swap", 0], ["1", 0], ["ans", 0], ["min", 0], ["min", 0], ["swap", 0], ["k", 0], ["return", 0], ["ans", 0], ["if", 0], ["ans", 0], ["float", 0], ["inf", 0], ["else", 0], ["1", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 1], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["d", 0], ["float", 0], ["inf", 0], ["0", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["for", 0], ["i", 0], ["in", 0], ["arr1", 0], ["d2", 0], ["for", 0], ["k", 0], ["v", 0], ["in", 0], ["list", 0], ["d", 0], ["items", 0], ["if", 0], ["i", 0], ["k", 0], ["if", 0], ["i", 0], ["in", 0], ["d2", 0], ["d2", 0], ["i", 0], ["min", 0], ["d2", 0], ["i", 0], ["v", 0], ["else", 0], ["d2", 0], ["i", 0], ["v", 0], ["if", 0], ["k", 0], ["arr2", 0], ["1", 0], ["j", 0], ["arr2", 0], ["bisect", 0], ["arr2", 0], ["k", 0], ["if", 0], ["j", 0], ["in", 0], ["d2", 0], ["d2", 0], ["j", 0], ["min", 0], ["d2", 0], ["j", 0], ["v", 0], ["1", 0], ["else", 0], ["d2", 0], ["j", 0], ["v", 0], ["1", 0], ["d", 0], ["d2", 0], ["if", 0], ["d", 0], ["return", 0], ["min", 0], ["d", 0], ["values", 0], ["return", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["from", 0], ["math", 0], ["import", 0], ["inf", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["class", 1], ["solution", 1], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sort", 0], ["n", 0], ["len", 0], ["arr2", 0], ["dp", 0], ["1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["arr1", 0], ["next", 0], ["dp", 0], ["defaultdict", 0], ["lambda", 0], ["inf", 0], ["for", 0], ["key", 0], ["in", 0], ["dp", 0], ["if", 0], ["i", 0], ["key", 0], ["next", 0], ["dp", 0], ["i", 0], ["min", 0], ["next", 0], ["dp", 0], ["i", 0], ["dp", 0], ["key", 0], ["loc", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["key", 0], ["if", 0], ["loc", 0], ["n", 0], ["next", 0], ["dp", 0], ["arr2", 0], ["loc", 0], ["min", 0], ["next", 0], ["dp", 0], ["arr2", 0], ["loc", 0], ["dp", 0], ["key", 0], ["1", 0], ["dp", 0], ["next", 0], ["dp", 0], ["return", 0], ["min", 0], ["dp", 0], ["values", 0], ["if", 0], ["dp", 0], ["else", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["arr2", 0], ["sort", 0], ["dp", 0], ["0", 0], ["math", 0], ["inf", 0], ["min", 0], ["cnt", 0], ["0", 0], ["for", 0], ["n1", 0], ["in", 0], ["arr1", 0], ["print", 0], ["n1", 0], ["new", 0], ["dp", 0], ["cnt", 0], ["min", 0], ["cnt", 0], ["while", 0], ["cnt", 0], ["in", 0], ["dp", 0], ["if", 0], ["n1", 0], ["dp", 0], ["cnt", 0], ["new", 0], ["dp", 0], ["cnt", 0], ["min", 0], ["new", 0], ["dp", 0], ["get", 0], ["cnt", 0], ["math", 0], ["inf", 0], ["n1", 0], ["candidate", 0], ["min", 0], ["new", 0], ["dp", 0], ["get", 0], ["cnt", 0], ["math", 0], ["inf", 0], ["n1", 0], ["if", 0], ["candidate", 0], ["new", 0], ["dp", 0], ["get", 0], ["cnt", 0], ["1", 0], ["math", 0], ["inf", 0], ["new", 0], ["dp", 0], ["cnt", 0], ["candidate", 0], ["i2", 0], ["br", 0], ["arr2", 0], ["dp", 0], ["cnt", 0], ["if", 0], ["i2", 0], ["len", 0], ["arr2", 0], ["and", 0], ["arr2", 0], ["i2", 0], ["new", 0], ["dp", 0], ["get", 0], ["cnt", 0], ["math", 0], ["inf", 0], ["if", 0], ["i2", 0], ["len", 0], ["arr2", 0], ["new", 0], ["dp", 0], ["cnt", 0], ["1", 0], ["arr2", 0], ["i2", 0], ["print", 0], ["new", 0], ["dp", 0], ["if", 0], ["new", 0], ["dp", 0], ["get", 0], ["cnt", 0], ["1", 0], ["math", 0], ["inf", 0], ["new", 0], ["dp", 0], ["get", 0], ["cnt", 0], ["math", 0], ["inf", 0], ["new", 0], ["dp", 0], ["pop", 0], ["cnt", 0], ["1", 0], ["if", 0], ["new", 0], ["dp", 0], ["get", 0], ["cnt", 0], ["math", 0], ["inf", 0], ["new", 0], ["dp", 0], ["get", 0], ["cnt", 0], ["1", 0], ["math", 0], ["inf", 0], ["new", 0], ["dp", 0], ["pop", 0], ["cnt", 0], ["cnt", 0], ["1", 0], ["if", 0], ["len", 0], ["new", 0], ["dp", 0], ["0", 0], ["return", 0], ["1", 0], ["while", 0], ["min", 0], ["cnt", 0], ["not", 0], ["in", 0], ["new", 0], ["dp", 0], ["min", 0], ["cnt", 0], ["1", 0], ["dp", 0], ["new", 0], ["dp", 0], ["print", 0], ["dp", 0], ["return", 0], ["min", 0], ["dp", 0], ["keys", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["import", 0], ["bisect", 0], ["dp存储所有潜在的当前状态（每次dp都是遍历arr1时前一个位置的状态）", 0], ["这里的状态是一个键值对，key代表当前位置的数字，", 0], ["可以是arr1里面的，也可以是arr2里面用来替换的", 0], ["value就是我们需要操作的次数", 0], ["dp", 0], ["1", 0], ["0", 0], ["arr2", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["arr1", 0], ["tmp", 0], ["collections", 0], ["defaultdict", 0], ["lambda", 0], ["float", 0], ["inf", 0], ["for", 0], ["key", 0], ["in", 0], ["dp", 0], ["if", 0], ["i", 0], ["key", 0], ["tmp", 0], ["i", 0], ["min", 0], ["tmp", 0], ["i", 0], ["dp", 0], ["key", 0], ["loc", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["key", 0], ["if", 0], ["loc", 0], ["len", 0], ["arr2", 0], ["tmp", 0], ["arr2", 0], ["loc", 0], ["min", 0], ["tmp", 0], ["arr2", 0], ["loc", 0], ["dp", 0], ["key", 0], ["1", 0], ["dp", 0], ["tmp", 0], ["return", 0], ["min", 0], ["dp", 0], ["values", 0], ["if", 0], ["dp", 0], ["else", 0], ["1", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["import", 0], ["math", 0], ["import", 0], ["functools", 0], ["class", 1], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["i", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["j", 0], ["br", 0], ["arr2", 0], ["prev", 0], ["swap", 0], ["1", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr2", 0], ["j", 0], ["if", 0], ["j", 0], ["len", 0], ["arr2", 0], ["else", 0], ["math", 0], ["inf", 0], ["noswap", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr1", 0], ["i", 0], ["if", 0], ["prev", 0], ["arr1", 0], ["i", 0], ["else", 0], ["math", 0], ["inf", 0], ["return", 0], ["min", 0], ["swap", 0], ["noswap", 0], ["ret", 0], ["dfs", 0], ["0", 0], ["math", 0], ["inf", 0], ["return", 0], ["ret", 0], ["if", 0], ["ret", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["functools", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["i", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["j", 0], ["br", 0], ["arr2", 0], ["prev", 0], ["swap", 0], ["1", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr2", 0], ["j", 0], ["if", 0], ["j", 0], ["len", 0], ["arr2", 0], ["else", 0], ["math", 0], ["inf", 0], ["noswap", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr1", 0], ["i", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["else", 0], ["math", 0], ["inf", 0], ["return", 0], ["min", 0], ["swap", 0], ["noswap", 0], ["changes", 0], ["dfs", 0], ["0", 0], ["math", 0], ["inf", 0], ["return", 0], ["changes", 0], ["if", 0], ["changes", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["import", 0], ["math", 0], ["import", 0], ["functools", 0], ["class", 1], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["i", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["j", 0], ["br", 0], ["arr2", 0], ["prev", 0], ["swap", 0], ["1", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr2", 0], ["j", 0], ["if", 0], ["j", 0], ["len", 0], ["arr2", 0], ["else", 0], ["math", 0], ["inf", 0], ["noswap", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr1", 0], ["i", 0], ["if", 0], ["prev", 0], ["arr1", 0], ["i", 0], ["else", 0], ["math", 0], ["inf", 0], ["return", 0], ["min", 0], ["swap", 0], ["noswap", 0], ["ans", 0], ["dfs", 0], ["0", 0], ["1", 0], ["return", 0], ["ans", 0], ["if", 0], ["ans", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["functools", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["i", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["j", 0], ["br", 0], ["arr2", 0], ["prev", 0], ["swap", 0], ["1", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr2", 0], ["j", 0], ["if", 0], ["j", 0], ["len", 0], ["arr2", 0], ["else", 0], ["math", 0], ["inf", 0], ["noswap", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr1", 0], ["i", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["else", 0], ["math", 0], ["inf", 0], ["return", 0], ["min", 0], ["swap", 0], ["noswap", 0], ["changes", 0], ["dfs", 0], ["0", 0], ["math", 0], ["inf", 0], ["return", 0], ["changes", 0], ["if", 0], ["changes", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["import", 0], ["bisect", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["a", 0], ["list", 0], ["int", 0], ["b", 0], ["list", 0], ["int", 0], ["int", 0], ["b", 0], ["sorted", 0], ["set", 0], ["b", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["val", 0], ["if", 0], ["val", 0], ["b", 0], ["1", 0], ["return", 0], ["float", 0], ["inf", 0], ["return", 0], ["b", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["b", 0], ["val", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["ops", 0], ["if", 0], ["ops", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["n", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["ops", 0], ["n", 0], ["return", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["n", 0], ["skip", 0], ["op", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["if", 0], ["skip", 0], ["op", 0], ["float", 0], ["inf", 0], ["return", 0], ["float", 0], ["inf", 0], ["return", 0], ["min", 0], ["a", 0], ["n", 0], ["1", 0], ["if", 0], ["skip", 0], ["op", 0], ["a", 0], ["n", 0], ["1", 0], ["else", 0], ["float", 0], ["inf", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["1", 0], ["last", 0], ["success", 0], ["1", 0], ["for", 0], ["ops", 0], ["in", 0], ["range", 0], ["min", 0], ["len", 0], ["a", 0], ["len", 0], ["b", 0], ["1", 0], ["1", 0], ["if", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["len", 0], ["a", 0], ["ops", 0], ["float", 0], ["inf", 0], ["break", 0], ["last", 0], ["success", 0], ["ops", 0], ["return", 0], ["last", 0], ["success", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["import", 0], ["bisect", 0], ["dp", 0], ["1", 0], ["0", 0], ["arr2", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["arr1", 0], ["tmp", 0], ["collections", 0], ["defaultdict", 0], ["lambda", 0], ["float", 0], ["inf", 0], ["for", 0], ["key", 0], ["in", 0], ["dp", 0], ["if", 0], ["i", 0], ["key", 0], ["tmp", 0], ["i", 0], ["min", 0], ["tmp", 0], ["i", 0], ["dp", 0], ["key", 0], ["loc", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["key", 0], ["if", 0], ["loc", 0], ["len", 0], ["arr2", 0], ["tmp", 0], ["arr2", 0], ["loc", 0], ["min", 0], ["tmp", 0], ["arr2", 0], ["loc", 0], ["dp", 0], ["key", 0], ["1", 0], ["dp", 0], ["tmp", 0], ["return", 0], ["min", 0], ["dp", 0], ["values", 0], ["if", 0], ["dp", 0], ["else", 0], ["1", 0], ["import", 0], ["bisect", 0], ["import", 0], ["functools", 0], ["class", 1], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["functools", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["i", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["j", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["prev", 0], ["swap", 0], ["1", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr2", 0], ["j", 0], ["if", 0], ["j", 0], ["len", 0], ["arr2", 0], ["else", 0], ["math", 0], ["inf", 0], ["noswap", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr1", 0], ["i", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["else", 0], ["math", 0], ["inf", 0], ["return", 0], ["min", 0], ["swap", 0], ["noswap", 0], ["changes", 0], ["dfs", 0], ["0", 0], ["math", 0], ["inf", 0], ["return", 0], ["changes", 0], ["if", 0], ["changes", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["import", 0], ["functools", 0], ["class", 1], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["i", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["j", 0], ["br", 0], ["arr2", 0], ["prev", 0], ["swap", 0], ["1", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr2", 0], ["j", 0], ["if", 0], ["j", 0], ["len", 0], ["arr2", 0], ["else", 0], ["math", 0], ["inf", 0], ["noswap", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr1", 0], ["i", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["else", 0], ["math", 0], ["inf", 0], ["return", 0], ["min", 0], ["swap", 0], ["noswap", 0], ["ans", 0], ["dfs", 0], ["0", 0], ["math", 0], ["inf", 0], ["return", 0], ["ans", 0], ["if", 0], ["ans", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["functools", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["i", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["j", 0], ["br", 0], ["arr2", 0], ["prev", 0], ["swap", 0], ["1", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr2", 0], ["j", 0], ["if", 0], ["j", 0], ["len", 0], ["arr2", 0], ["else", 0], ["math", 0], ["inf", 0], ["noswap", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr1", 0], ["i", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["else", 0], ["math", 0], ["inf", 0], ["return", 0], ["min", 0], ["swap", 0], ["noswap", 0], ["changes", 0], ["dfs", 0], ["0", 0], ["math", 0], ["inf", 0], ["return", 0], ["changes", 0], ["if", 0], ["changes", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["import", 0], ["bisect", 0], ["import", 0], ["functools", 0], ["class", 1], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["functools", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["i", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["j", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["prev", 0], ["swap", 0], ["1", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr2", 0], ["j", 0], ["if", 0], ["j", 0], ["len", 0], ["arr2", 0], ["else", 0], ["math", 0], ["inf", 0], ["noswap", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr1", 0], ["i", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["else", 0], ["math", 0], ["inf", 0], ["return", 0], ["min", 0], ["swap", 0], ["noswap", 0], ["changes", 0], ["dfs", 0], ["0", 0], ["math", 0], ["inf", 0], ["return", 0], ["changes", 0], ["if", 0], ["changes", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["import", 0], ["bisect", 0], ["import", 0], ["functools", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr1i", 0], ["arr2j", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["functools", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["prev", 0], ["i", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["j", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["prev", 0], ["swap", 0], ["1", 0], ["dfs", 0], ["arr2", 0], ["j", 0], ["i", 0], ["1", 0], ["if", 0], ["j", 0], ["len", 0], ["arr2", 0], ["else", 0], ["float", 0], ["inf", 0], ["noswap", 0], ["dfs", 0], ["arr1", 0], ["i", 0], ["i", 0], ["1", 0], ["if", 0], ["prev", 0], ["arr1", 0], ["i", 0], ["else", 0], ["float", 0], ["inf", 0], ["return", 0], ["min", 0], ["swap", 0], ["noswap", 0], ["changes", 0], ["dfs", 0], ["float", 0], ["inf", 0], ["0", 0], ["return", 0], ["changes", 0], ["if", 0], ["changes", 0], ["float", 0], ["inf", 0], ["else", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["tc", 0], ["o", 0], ["min", 0], ["m", 0], ["n", 0], ["n", 0], ["mlogm", 0], ["sc", 0], ["o", 0], ["min", 0], ["m", 0], ["n", 0], ["m", 0], ["n", 0], ["len", 0], ["arr1", 0], ["len", 0], ["arr2", 0], ["sort", 0], ["o", 0], ["mlogm", 0], ["arr2", 0], ["sort", 0], ["maintain", 0], ["a", 0], ["list", 0], ["of", 0], ["num", 0], ["of", 0], ["swaps", 0], ["last", 0], ["value", 0], ["next", 0], ["to", 0], ["swap", 0], ["index", 0], ["arr2", 0], ["where", 0], ["the", 0], ["last", 0], ["value", 0], ["should", 0], ["be", 0], ["decrease", 0], ["as", 0], ["the", 0], ["num", 0], ["of", 0], ["swaps", 0], ["is", 0], ["increase", 0], ["ss", 0], ["0", 0], ["arr1", 0], ["0", 0], ["0", 0], ["if", 0], ["arr2", 0], ["0", 0], ["arr1", 0], ["0", 0], ["ss", 0], ["append", 0], ["1", 0], ["arr2", 0], ["0", 0], ["1", 0], ["o", 0], ["n", 0], ["iteration", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["st", 0], ["o", 0], ["min", 0], ["m", 0], ["n", 0], ["for", 0], ["s", 0], ["x", 0], ["j", 0], ["in", 0], ["ss", 0], ["if", 0], ["x", 0], ["arr1", 0], ["i", 0], ["if", 0], ["st", 0], ["if", 0], ["s", 0], ["st", 0], ["1", 0], ["0", 0], ["if", 0], ["arr1", 0], ["i", 0], ["st", 0], ["1", 0], ["1", 0], ["st", 0], ["1", 0], ["s", 0], ["arr1", 0], ["i", 0], ["j", 0], ["elif", 0], ["s", 0], ["st", 0], ["1", 0], ["0", 0], ["if", 0], ["arr1", 0], ["i", 0], ["st", 0], ["1", 0], ["1", 0], ["st", 0], ["append", 0], ["s", 0], ["arr1", 0], ["i", 0], ["j", 0], ["else", 0], ["st", 0], ["append", 0], ["s", 0], ["arr1", 0], ["i", 0], ["j", 0], ["amortized", 0], ["o", 0], ["1", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["arr2", 0], ["j", 0], ["x", 0], ["j", 0], ["1", 0], ["if", 0], ["j", 0], ["n", 0], ["st", 0], ["append", 0], ["s", 0], ["1", 0], ["arr2", 0], ["j", 0], ["j", 0], ["since", 0], ["each", 0], ["swap", 0], ["takes", 0], ["at", 0], ["most", 0], ["1", 0], ["entry", 0], ["and", 0], ["at", 0], ["most", 0], ["o", 0], ["min", 0], ["m", 0], ["n", 0], ["swap", 0], ["so", 0], ["sc", 0], ["o", 0], ["min", 0], ["m", 0], ["n", 0], ["ss", 0], ["st", 0], ["return", 0], ["ss", 0], ["0", 0], ["0", 0], ["if", 0], ["ss", 0], ["else", 0], ["1", 0], ["import", 0], ["bisect", 0], ["from", 0], ["typing", 0], ["import", 0], ["list", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["array", 0], ["arr1", 0], ["replace", 0], ["list", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["array", 0], ["pos", 0], ["int", 0], ["prev", 0], ["number", 0], ["int", 0], ["int", 0], ["min", 0], ["replacements", 0], ["len", 0], ["replace", 0], ["2", 0], ["if", 0], ["array", 0], ["pos", 0], ["len", 0], ["array", 0], ["return", 0], ["0", 0], ["next", 0], ["replace", 0], ["pos", 0], ["0", 0], ["if", 0], ["array", 0], ["pos", 0], ["0", 0], ["next", 0], ["replace", 0], ["pos", 0], ["bisect", 0], ["bisect", 0], ["replace", 0], ["prev", 0], ["number", 0], ["if", 0], ["array", 0], ["pos", 0], ["0", 0], ["or", 0], ["next", 0], ["replace", 0], ["pos", 0], ["len", 0], ["replace", 0], ["tmp", 0], ["array", 0], ["array", 0], ["pos", 0], ["min", 0], ["replacements", 0], ["min", 0], ["min", 0], ["replacements", 0], ["dfs", 0], ["array", 0], ["pos", 0], ["1", 0], ["replace", 0], ["next", 0], ["replace", 0], ["pos", 0], ["1", 0], ["if", 0], ["array", 0], ["pos", 0], ["0", 0], ["or", 0], ["prev", 0], ["number", 0], ["array", 0], ["array", 0], ["pos", 0], ["min", 0], ["replacements", 0], ["min", 0], ["min", 0], ["replacements", 0], ["dfs", 0], ["array", 0], ["pos", 0], ["1", 0], ["array", 0], ["array", 0], ["pos", 0], ["return", 0], ["min", 0], ["replacements", 0], ["result", 0], ["dfs", 0], ["0", 0], ["100", 0], ["if", 0], ["result", 0], ["len", 0], ["replace", 0], ["return", 0], ["1", 0], ["return", 0], ["result", 0], ["import", 0], ["bisect", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["a", 0], ["list", 0], ["int", 0], ["b", 0], ["list", 0], ["int", 0], ["int", 0], ["b", 0], ["sorted", 0], ["set", 0], ["b", 0], ["b2idx", 0], ["b", 0], ["i", 0], ["for", 0], ["i", 0], ["b", 0], ["in", 0], ["enumerate", 0], ["b", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["val", 0], ["if", 0], ["val", 0], ["b", 0], ["1", 0], ["return", 0], ["float", 0], ["inf", 0], ["if", 0], ["val", 0], ["in", 0], ["b2idx", 0], ["return", 0], ["b", 0], ["b2idx", 0], ["val", 0], ["1", 0], ["return", 0], ["b", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["b", 0], ["val", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["ops", 0], ["if", 0], ["ops", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["n", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["ops", 0], ["n", 0], ["return", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["n", 0], ["skip", 0], ["op", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["if", 0], ["skip", 0], ["op", 0], ["float", 0], ["inf", 0], ["return", 0], ["float", 0], ["inf", 0], ["return", 0], ["min", 0], ["a", 0], ["n", 0], ["1", 0], ["if", 0], ["skip", 0], ["op", 0], ["a", 0], ["n", 0], ["1", 0], ["else", 0], ["float", 0], ["inf", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["1", 0], ["last", 0], ["success", 0], ["1", 0], ["for", 0], ["ops", 0], ["in", 0], ["range", 0], ["min", 0], ["len", 0], ["a", 0], ["len", 0], ["b", 0], ["1", 0], ["1", 0], ["if", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["len", 0], ["a", 0], ["ops", 0], ["float", 0], ["inf", 0], ["break", 0], ["last", 0], ["success", 0], ["ops", 0], ["return", 0], ["last", 0], ["success", 0], ["import", 0], ["bisect", 0], ["import", 0], ["functools", 0], ["class", 1], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["functools", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["i", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["j", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["prev", 0], ["swap", 0], ["1", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr2", 0], ["j", 0], ["if", 0], ["j", 0], ["len", 0], ["arr2", 0], ["else", 0], ["math", 0], ["inf", 0], ["noswap", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr1", 0], ["i", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["else", 0], ["math", 0], ["inf", 0], ["return", 0], ["min", 0], ["swap", 0], ["noswap", 0], ["changes", 0], ["dfs", 0], ["0", 0], ["math", 0], ["inf", 0], ["return", 0], ["changes", 0], ["if", 0], ["changes", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["import", 0], ["bisect", 1], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["n", 0], ["len", 0], ["arr1", 0], ["arr1", 0], ["0", 0], ["arr1", 0], ["表示前", 0], ["i", 0], ["个元素，执行了", 0], ["k", 0], ["次操作后，是有序的", 0], ["dp", 0], ["float", 0], ["inf", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dp", 0], ["0", 0], ["0", 0], ["float", 0], ["inf", 0], ["arr2", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["前i", 0], ["1个元素，已经完成了k次交换", 0], ["if", 0], ["arr1", 0], ["i", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["dp", 0], ["i", 0], ["k", 0], ["min", 0], ["dp", 0], ["i", 0], ["k", 0], ["arr1", 0], ["i", 0], ["前", 0], ["i", 0], ["1", 0], ["个元素，已经完成了", 0], ["k", 0], ["1次交换，所以这一次一定要交换", 0], ["if", 0], ["k", 0], ["1", 0], ["idx", 0], ["2", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["idx", 0], ["2", 0], ["len", 0], ["arr2", 0], ["dp", 0], ["i", 0], ["k", 0], ["min", 0], ["dp", 0], ["i", 0], ["k", 0], ["arr2", 0], ["idx", 0], ["2", 0], ["res", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["dp", 0], ["n", 0], ["i", 0], ["float", 0], ["inf", 0], ["res", 0], ["min", 0], ["res", 0], ["i", 0], ["return", 0], ["res", 0], ["if", 0], ["res", 0], ["float", 0], ["inf", 0], ["else", 0], ["1", 0], ["import", 0], ["bisect", 0], ["from", 0], ["typing", 0], ["import", 0], ["list", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["array", 0], ["arr1", 0], ["replace", 0], ["list", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["array", 0], ["pos", 0], ["int", 0], ["prev", 0], ["number", 0], ["int", 0], ["int", 0], ["min", 0], ["replacements", 0], ["len", 0], ["replace", 0], ["2", 0], ["if", 0], ["array", 0], ["pos", 0], ["len", 0], ["array", 0], ["return", 0], ["0", 0], ["next", 0], ["replace", 0], ["pos", 0], ["0", 0], ["if", 0], ["array", 0], ["pos", 0], ["0", 0], ["next", 0], ["replace", 0], ["pos", 0], ["bisect", 0], ["bisect", 0], ["replace", 0], ["array", 0], ["array", 0], ["pos", 0], ["1", 0], ["if", 0], ["array", 0], ["pos", 0], ["0", 0], ["or", 0], ["next", 0], ["replace", 0], ["pos", 0], ["len", 0], ["replace", 0], ["tmp", 0], ["array", 0], ["array", 0], ["pos", 0], ["array", 0], ["array", 0], ["pos", 0], ["replace", 0], ["next", 0], ["replace", 0], ["pos", 0], ["min", 0], ["replacements", 0], ["min", 0], ["min", 0], ["replacements", 0], ["dfs", 0], ["array", 0], ["pos", 0], ["1", 0], ["array", 0], ["array", 0], ["pos", 0], ["1", 0], ["array", 0], ["array", 0], ["pos", 0], ["tmp", 0], ["if", 0], ["array", 0], ["pos", 0], ["0", 0], ["or", 0], ["array", 0], ["array", 0], ["pos", 0], ["1", 0], ["array", 0], ["array", 0], ["pos", 0], ["min", 0], ["replacements", 0], ["min", 0], ["min", 0], ["replacements", 0], ["dfs", 0], ["array", 0], ["pos", 0], ["1", 0], ["array", 0], ["array", 0], ["pos", 0], ["return", 0], ["min", 0], ["replacements", 0], ["result", 0], ["dfs", 0], ["0", 0], ["100", 0], ["if", 0], ["result", 0], ["len", 0], ["replace", 0], ["return", 0], ["1", 0], ["return", 0], ["result", 0], ["import", 0], ["bisect", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["arr2", 0], ["int", 0], ["n", 0], ["len", 0], ["arr1", 0], ["arr1", 0], ["0", 0], ["arr1", 0], ["arr2", 0], ["sort", 0], ["dp", 0], ["float", 0], ["inf", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dp", 0], ["0", 0], ["0", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["i", 0], ["1", 0], ["if", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["arr1", 0], ["i", 0], ["dp", 0], ["i", 0], ["j", 0], ["min", 0], ["dp", 0], ["i", 0], ["j", 0], ["arr1", 0], ["i", 0], ["if", 0], ["j", 0], ["1", 0], ["要在", 0], ["arr2", 0], ["中找到一个比", 0], ["arr1", 0], ["i", 0], ["稍微大一点的数", 0], ["idx", 0], ["2", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["if", 0], ["idx", 0], ["2", 0], ["len", 0], ["arr2", 0], ["dp", 0], ["i", 0], ["j", 0], ["min", 0], ["dp", 0], ["i", 0], ["j", 0], ["arr2", 0], ["idx", 0], ["2", 0], ["满足条件，并且能够执行最少的次数的", 0], ["k", 0], ["的值", 0], ["res", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["dp", 0], ["n", 0], ["i", 0], ["float", 0], ["inf", 0], ["res", 0], ["min", 0], ["res", 0], ["i", 0], ["return", 0], ["1", 0], ["if", 0], ["res", 0], ["float", 0], ["inf", 0], ["else", 0], ["res", 0], ["import", 0], ["bisect", 0], ["import", 0], ["functools", 0], ["class", 1], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["functools", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["dfs", 0], ["i", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["j", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["prev", 0], ["swap", 0], ["1", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr2", 0], ["j", 0], ["if", 0], ["j", 0], ["len", 0], ["arr2", 0], ["else", 0], ["math", 0], ["inf", 0], ["noswap", 0], ["dfs", 0], ["i", 0], ["1", 0], ["arr1", 0], ["i", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["else", 0], ["math", 0], ["inf", 0], ["return", 0], ["min", 0], ["swap", 0], ["noswap", 0], ["changes", 0], ["dfs", 0], ["0", 0], ["math", 0], ["inf", 0], ["return", 0], ["changes", 0], ["if", 0], ["changes", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["def", 0], ["bs", 0], ["arr", 0], ["l", 0], ["r", 0], ["target", 0], ["while", 0], ["l", 0], ["r", 0], ["m", 0], ["l", 0], ["r", 0], ["l", 0], ["2", 0], ["if", 0], ["arr", 0], ["m", 0], ["target", 0], ["r", 0], ["m", 0], ["1", 0], ["else", 0], ["l", 0], ["m", 0], ["1", 0], ["return", 0], ["l", 0], ["arr2", 0], ["sort", 0], ["n", 0], ["len", 0], ["arr2", 0], ["dp", 0], ["1", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["arr1", 0], ["dp2", 0], ["for", 0], ["prev", 0], ["in", 0], ["dp", 0], ["if", 0], ["a", 0], ["prev", 0], ["dp2", 0], ["a", 0], ["min", 0], ["dp2", 0], ["get", 0], ["a", 0], ["float", 0], ["inf", 0], ["dp", 0], ["prev", 0], ["idx", 0], ["bs", 0], ["arr2", 0], ["0", 0], ["n", 0], ["1", 0], ["prev", 0], ["if", 0], ["idx", 0], ["n", 0], ["dp2", 0], ["arr2", 0], ["idx", 0], ["min", 0], ["dp2", 0], ["get", 0], ["arr2", 0], ["idx", 0], ["float", 0], ["inf", 0], ["dp", 0], ["prev", 0], ["1", 0], ["dp", 0], ["dp2", 0], ["if", 0], ["not", 0], ["dp", 0], ["return", 0], ["1", 0], ["return", 0], ["min", 0], ["dp", 0], ["values", 0], ["import", 0], ["bisect", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["a", 0], ["list", 0], ["int", 0], ["b", 0], ["list", 0], ["int", 0], ["int", 0], ["b", 0], ["sorted", 0], ["set", 0], ["b", 0], ["def", 0], ["find", 0], ["lower", 0], ["val", 0], ["in", 0], ["b", 0], ["val", 0], ["larger", 0], ["equal", 0], ["idx", 0], ["bisect", 0], ["bisect", 0], ["left", 0], ["b", 0], ["val", 0], ["if", 0], ["larger", 0], ["equal", 0], ["idx", 0], ["0", 0], ["return", 0], ["b", 0], ["larger", 0], ["equal", 0], ["idx", 0], ["1", 0], ["return", 0], ["none", 0], ["no", 0], ["lower", 0], ["value", 0], ["in", 0], ["b", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["make", 0], ["prefix", 0], ["increasing", 0], ["n", 0], ["upper", 0], ["float", 0], ["inf", 0], ["if", 0], ["n", 0], ["0", 0], ["return", 0], ["0", 0], ["swap", 0], ["b", 0], ["find", 0], ["lower", 0], ["val", 0], ["in", 0], ["b", 0], ["upper", 0], ["ret", 0], ["float", 0], ["inf", 0], ["if", 0], ["a", 0], ["n", 0], ["1", 0], ["upper", 0], ["ret", 0], ["min", 0], ["make", 0], ["prefix", 0], ["increasing", 0], ["n", 0], ["1", 0], ["upper", 0], ["a", 0], ["n", 0], ["1", 0], ["ret", 0], ["if", 0], ["swap", 0], ["b", 0], ["is", 0], ["not", 0], ["none", 0], ["ret", 0], ["min", 0], ["1", 0], ["make", 0], ["prefix", 0], ["increasing", 0], ["n", 0], ["1", 0], ["upper", 0], ["swap", 0], ["b", 0], ["ret", 0], ["return", 0], ["ret", 0], ["ret", 0], ["make", 0], ["prefix", 0], ["increasing", 0], ["len", 0], ["a", 0], ["return", 0], ["ret", 0], ["if", 0], ["ret", 0], ["float", 0], ["inf", 0], ["else", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["a", 0], ["list", 0], ["int", 0], ["b", 0], ["list", 0], ["int", 0], ["int", 0], ["dp", 0], ["1", 0], ["0", 0], ["b", 0], ["sorted", 0], ["b", 0], ["for", 0], ["cur", 0], ["in", 0], ["a", 0], ["temp", 0], ["collections", 0], ["defaultdict", 0], ["lambda", 0], ["float", 0], ["inf", 0], ["for", 0], ["prev", 0], ["in", 0], ["dp", 0], ["if", 0], ["prev", 0], ["cur", 0], ["temp", 0], ["cur", 0], ["min", 0], ["temp", 0], ["cur", 0], ["dp", 0], ["prev", 0], ["idx", 0], ["self", 0], ["upper", 0], ["bound", 0], ["b", 0], ["prev", 0], ["if", 0], ["idx", 0], ["len", 0], ["b", 0], ["temp", 0], ["b", 0], ["idx", 0], ["min", 0], ["temp", 0], ["b", 0], ["idx", 0], ["dp", 0], ["prev", 0], ["1", 0], ["dp", 0], ["temp", 0], ["if", 0], ["dp", 0], ["return", 0], ["min", 0], ["dp", 0], ["values", 0], ["return", 0], ["1", 0], ["def", 0], ["upper", 0], ["bound", 0], ["self", 0], ["b", 0], ["target", 0], ["l", 0], ["0", 0], ["r", 0], ["len", 0], ["b", 0], ["while", 0], ["l", 0], ["r", 0], ["mid", 0], ["l", 0], ["r", 0], ["l", 0], ["2", 0], ["if", 0], ["b", 0], ["mid", 0], ["target", 0], ["l", 0], ["mid", 0], ["1", 0], ["else", 0], ["r", 0], ["mid", 0], ["return", 0], ["l", 0], ["import", 0], ["bisect", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["a", 0], ["list", 0], ["int", 0], ["b", 0], ["list", 0], ["int", 0], ["int", 0], ["b", 0], ["sorted", 0], ["set", 0], ["b", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["val", 0], ["if", 0], ["val", 0], ["b", 0], ["1", 0], ["return", 0], ["float", 0], ["inf", 0], ["return", 0], ["b", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["b", 0], ["val", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["ops", 0], ["if", 0], ["ops", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["n", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["ops", 0], ["n", 0], ["return", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["n", 0], ["return", 0], ["min", 0], ["a", 0], ["n", 0], ["1", 0], ["if", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["a", 0], ["n", 0], ["1", 0], ["else", 0], ["float", 0], ["inf", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["1", 0], ["last", 0], ["success", 0], ["1", 0], ["for", 0], ["ops", 0], ["in", 0], ["range", 0], ["min", 0], ["len", 0], ["a", 0], ["len", 0], ["b", 0], ["1", 0], ["1", 0], ["if", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["len", 0], ["a", 0], ["ops", 0], ["float", 0], ["inf", 0], ["break", 0], ["last", 0], ["success", 0], ["ops", 0], ["return", 0], ["last", 0], ["success", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["if", 0], ["not", 0], ["arr1", 0], ["return", 0], ["0", 0], ["if", 0], ["not", 0], ["arr2", 0], ["return", 0], ["arr1", 0], ["sorted", 0], ["arr1", 0], ["arr2", 0], ["sorted", 0], ["list", 0], ["set", 0], ["arr2", 0], ["reverse", 0], ["true", 0], ["n", 0], ["m", 0], ["inf", 0], ["len", 0], ["arr1", 0], ["len", 0], ["arr2", 0], ["float", 0], ["inf", 0], ["f", 0], ["inf", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["f", 0], ["0", 0], ["i", 0], ["min", 0], ["arr1", 0], ["0", 0], ["arr2", 0], ["1", 0], ["f", 0], ["0", 0], ["0", 0], ["arr1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["found", 0], ["k", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["f", 0], ["i", 0], ["1", 0], ["j", 0], ["arr1", 0], ["i", 0], ["f", 0], ["i", 0], ["j", 0], ["arr1", 0], ["i", 0], ["if", 0], ["not", 0], ["j", 0], ["continue", 0], ["va", 0], ["f", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["if", 0], ["not", 0], ["found", 0], ["k", 0], ["if", 0], ["arr2", 0], ["0", 0], ["va", 0], ["l", 0], ["r", 0], ["0", 0], ["m", 0], ["1", 0], ["while", 0], ["l", 0], ["r", 0], ["mid", 0], ["l", 0], ["r", 0], ["1", 0], ["1", 0], ["if", 0], ["arr2", 0], ["mid", 0], ["va", 0], ["l", 0], ["mid", 0], ["else", 0], ["r", 0], ["mid", 0], ["1", 0], ["k", 0], ["l", 0], ["found", 0], ["k", 0], ["1", 0], ["f", 0], ["i", 0], ["j", 0], ["min", 0], ["f", 0], ["i", 0], ["j", 0], ["arr2", 0], ["k", 0], ["else", 0], ["while", 0], ["k", 0], ["1", 0], ["m", 0], ["and", 0], ["arr2", 0], ["k", 0], ["1", 0], ["va", 0], ["k", 0], ["1", 0], ["f", 0], ["i", 0], ["j", 0], ["min", 0], ["f", 0], ["i", 0], ["j", 0], ["arr2", 0], ["k", 0], ["for", 0], ["i", 0], ["v", 0], ["in", 0], ["enumerate", 0], ["f", 0], ["1", 0], ["if", 0], ["v", 0], ["inf", 0], ["return", 0], ["i", 0], ["return", 0], ["1", 0], ["import", 0], ["bisect", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["a", 0], ["list", 0], ["int", 0], ["b", 0], ["list", 0], ["int", 0], ["int", 0], ["b", 0], ["sorted", 0], ["set", 0], ["b", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["val", 0], ["if", 0], ["val", 0], ["b", 0], ["1", 0], ["return", 0], ["float", 0], ["inf", 0], ["return", 0], ["b", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["b", 0], ["val", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["ops", 0], ["if", 0], ["ops", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["n", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["ops", 0], ["n", 0], ["return", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["n", 0], ["prev", 0], ["with", 0], ["op", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["1", 0], ["b", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["prev", 0], ["with", 0], ["op", 0], ["dp", 0], ["n", 0], ["1", 0], ["ops", 0], ["dp", 0], ["n", 0], ["1", 0], ["ops", 0], ["1", 0], ["if", 0], ["dp", 0], ["n", 0], ["1", 0], ["ops", 0], ["1", 0], ["a", 0], ["n", 0], ["1", 0], ["dp", 0], ["n", 0], ["1", 0], ["ops", 0], ["a", 0], ["n", 0], ["1", 0], ["if", 0], ["prev", 0], ["with", 0], ["op", 0], ["a", 0], ["n", 0], ["1", 0], ["return", 0], ["min", 0], ["a", 0], ["n", 0], ["1", 0], ["b", 0], ["elif", 0], ["b", 0], ["a", 0], ["n", 0], ["1", 0], ["return", 0], ["b", 0], ["elif", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["a", 0], ["n", 0], ["1", 0], ["return", 0], ["a", 0], ["n", 0], ["1", 0], ["return", 0], ["b", 0], ["for", 0], ["ops", 0], ["in", 0], ["range", 0], ["min", 0], ["len", 0], ["a", 0], ["len", 0], ["b", 0], ["1", 0], ["if", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["len", 0], ["a", 0], ["ops", 0], ["float", 0], ["inf", 0], ["return", 0], ["ops", 0], ["return", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["10", 0], ["04", 0], ["arr2", 0], ["list", 0], ["set", 0], ["arr2", 0], ["n", 0], ["len", 0], ["arr1", 0], ["arr2", 0], ["list", 0], ["set", 0], ["arr2", 0], ["arr2", 0], ["sort", 0], ["m", 0], ["len", 0], ["arr2", 0], ["we", 0], ["might", 0], ["need", 0], ["fix", 0], ["at", 0], ["point", 0], ["0", 0], ["hence", 0], ["we", 0], ["will", 0], ["always", 0], ["compare", 0], ["it", 0], ["will", 0], ["def", 0], ["bsearch", 0], ["left", 0], ["right", 0], ["val", 0], ["ans", 0], ["1", 0], ["while", 0], ["left", 0], ["right", 0], ["mid", 0], ["left", 0], ["right", 0], ["left", 0], ["2", 0], ["if", 0], ["arr2", 0], ["mid", 0], ["val", 0], ["ans", 0], ["mid", 0], ["right", 0], ["mid", 0], ["1", 0], ["else", 0], ["left", 0], ["mid", 0], ["1", 0], ["return", 0], ["ans", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["helper", 0], ["i", 0], ["j", 0], ["prev", 0], ["nonlocal", 0], ["n", 0], ["m", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["arr1", 0], ["is", 0], ["increasing", 0], ["we", 0], ["have", 0], ["reached", 0], ["so", 0], ["far", 0], ["return", 0], ["0", 0], ["else", 0], ["ans", 0], ["float", 0], ["inf", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["no", 0], ["need", 0], ["of", 0], ["replacement", 0], ["ans", 0], ["min", 0], ["ans", 0], ["helper", 0], ["i", 0], ["1", 0], ["j", 0], ["arr1", 0], ["i", 0], ["pick", 0], ["any", 0], ["index", 0], ["from", 0], ["arr2", 0], ["starting", 0], ["j", 0], ["idx", 0], ["bsearch", 0], ["j", 0], ["len", 0], ["arr2", 0], ["1", 0], ["prev", 0], ["if", 0], ["idx", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["1", 0], ["helper", 0], ["i", 0], ["1", 0], ["idx", 0], ["1", 0], ["arr2", 0], ["idx", 0], ["return", 0], ["ans", 0], ["ans", 0], ["helper", 0], ["0", 0], ["0", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["ans", 0], ["float", 0], ["inf", 0], ["else", 0], ["ans", 0], ["def", 0], ["binsearch", 0], ["arr", 0], ["x", 0], ["if", 0], ["arr", 0], ["0", 0], ["x", 0], ["return", 0], ["0", 0], ["l", 0], ["0", 0], ["h", 0], ["len", 0], ["arr", 0], ["1", 0], ["ret", 0], ["1", 0], ["while", 0], ["l", 0], ["h", 0], ["mid", 0], ["l", 0], ["h", 0], ["2", 0], ["if", 0], ["arr", 0], ["mid", 0], ["x", 0], ["l", 0], ["mid", 0], ["1", 0], ["elif", 0], ["arr", 0], ["mid", 0], ["x", 0], ["ret", 0], ["mid", 0], ["h", 0], ["mid", 0], ["1", 0], ["return", 0], ["ret", 0], ["class", 1], ["solution", 1], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sort", 0], ["m", 0], ["len", 0], ["arr2", 0], ["n", 0], ["len", 0], ["arr1", 0], ["dp", 0], ["print", 0], ["binsearch", 0], ["arr2", 0], ["0", 0], ["def", 0], ["dfs", 0], ["arr1", 0], ["arr2", 0], ["left", 0], ["curr", 0], ["dp", 0], ["if", 0], ["curr", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["if", 0], ["curr", 0], ["left", 0], ["in", 0], ["dp", 0], ["return", 0], ["dp", 0], ["curr", 0], ["left", 0], ["res1", 0], ["sys", 0], ["maxsize", 0], ["res2", 0], ["0", 0], ["if", 0], ["arr1", 0], ["curr", 0], ["left", 0], ["res1", 0], ["dfs", 0], ["arr1", 0], ["arr2", 0], ["arr1", 0], ["curr", 0], ["curr", 0], ["1", 0], ["dp", 0], ["mid", 0], ["binsearch", 0], ["arr2", 0], ["left", 0], ["if", 0], ["mid", 0], ["1", 0], ["res2", 0], ["sys", 0], ["maxsize", 0], ["1", 0], ["else", 0], ["res2", 0], ["dfs", 0], ["arr1", 0], ["arr2", 0], ["arr2", 0], ["mid", 0], ["curr", 0], ["1", 0], ["dp", 0], ["dp", 0], ["curr", 0], ["left", 0], ["min", 0], ["res1", 0], ["1", 0], ["res2", 0], ["return", 0], ["dp", 0], ["curr", 0], ["left", 0], ["x", 0], ["dfs", 0], ["arr1", 0], ["arr2", 0], ["sys", 0], ["maxsize", 0], ["0", 0], ["dp", 0], ["if", 0], ["x", 0], ["sys", 0], ["maxsize", 0], ["1", 0], ["return", 0], ["1", 0], ["return", 0], ["x", 0], ["def", 0], ["binsearch", 0], ["arr", 0], ["x", 0], ["if", 0], ["arr", 0], ["0", 0], ["x", 0], ["return", 0], ["0", 0], ["l", 0], ["0", 0], ["h", 0], ["len", 0], ["arr", 0], ["1", 0], ["ret", 0], ["1", 0], ["while", 0], ["l", 0], ["h", 0], ["mid", 0], ["l", 0], ["h", 0], ["2", 0], ["if", 0], ["arr", 0], ["mid", 0], ["x", 0], ["l", 0], ["mid", 0], ["1", 0], ["elif", 0], ["arr", 0], ["mid", 0], ["x", 0], ["ret", 0], ["mid", 0], ["h", 0], ["mid", 0], ["1", 0], ["return", 0], ["ret", 0], ["class", 1], ["solution", 1], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sort", 0], ["m", 0], ["len", 0], ["arr2", 0], ["n", 0], ["len", 0], ["arr1", 0], ["dp", 0], ["def", 0], ["dfs", 0], ["arr1", 0], ["arr2", 0], ["left", 0], ["curr", 0], ["dp", 0], ["if", 0], ["curr", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["if", 0], ["curr", 0], ["left", 0], ["in", 0], ["dp", 0], ["return", 0], ["dp", 0], ["curr", 0], ["left", 0], ["res1", 0], ["sys", 0], ["maxsize", 0], ["res2", 0], ["0", 0], ["if", 0], ["arr1", 0], ["curr", 0], ["left", 0], ["res1", 0], ["dfs", 0], ["arr1", 0], ["arr2", 0], ["arr1", 0], ["curr", 0], ["curr", 0], ["1", 0], ["dp", 0], ["mid", 0], ["binsearch", 0], ["arr2", 0], ["left", 0], ["if", 0], ["mid", 0], ["1", 0], ["res2", 0], ["sys", 0], ["maxsize", 0], ["1", 0], ["else", 0], ["res2", 0], ["dfs", 0], ["arr1", 0], ["arr2", 0], ["arr2", 0], ["mid", 0], ["curr", 0], ["1", 0], ["dp", 0], ["dp", 0], ["curr", 0], ["left", 0], ["min", 0], ["res1", 0], ["1", 0], ["res2", 0], ["return", 0], ["dp", 0], ["curr", 0], ["left", 0], ["x", 0], ["dfs", 0], ["arr1", 0], ["arr2", 0], ["sys", 0], ["maxsize", 0], ["0", 0], ["dp", 0], ["if", 0], ["x", 0], ["sys", 0], ["maxsize", 0], ["return", 0], ["1", 0], ["return", 0], ["x", 0], ["import", 0], ["bisect", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["a", 0], ["list", 0], ["int", 0], ["b", 0], ["list", 0], ["int", 0], ["int", 0], ["b", 0], ["sorted", 0], ["set", 0], ["b", 0], ["b2idx", 0], ["b", 0], ["i", 0], ["for", 0], ["i", 0], ["b", 0], ["in", 0], ["enumerate", 0], ["b", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["val", 0], ["if", 0], ["val", 0], ["b", 0], ["1", 0], ["return", 0], ["float", 0], ["inf", 0], ["if", 0], ["val", 0], ["in", 0], ["b2idx", 0], ["return", 0], ["b", 0], ["b2idx", 0], ["val", 0], ["1", 0], ["return", 0], ["b", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["b", 0], ["val", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["ops", 0], ["if", 0], ["ops", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["n", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["elif", 0], ["ops", 0], ["n", 0], ["return", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["n", 0], ["skip", 0], ["op", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["if", 0], ["skip", 0], ["op", 0], ["float", 0], ["inf", 0], ["return", 0], ["float", 0], ["inf", 0], ["return", 0], ["min", 0], ["a", 0], ["n", 0], ["1", 0], ["if", 0], ["skip", 0], ["op", 0], ["a", 0], ["n", 0], ["1", 0], ["else", 0], ["float", 0], ["inf", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["1", 0], ["last", 0], ["success", 0], ["1", 0], ["for", 0], ["ops", 0], ["in", 0], ["range", 0], ["min", 0], ["len", 0], ["a", 0], ["len", 0], ["b", 0], ["1", 0], ["1", 0], ["if", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["len", 0], ["a", 0], ["ops", 0], ["float", 0], ["inf", 0], ["break", 0], ["last", 0], ["success", 0], ["ops", 0], ["return", 0], ["last", 0], ["success", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["10", 0], ["04", 0], ["arr2", 0], ["list", 0], ["set", 0], ["arr2", 0], ["arr2", 0], ["sort", 0], ["we", 0], ["might", 0], ["need", 0], ["fix", 0], ["at", 0], ["point", 0], ["0", 0], ["hence", 0], ["we", 0], ["will", 0], ["always", 0], ["compare", 0], ["it", 0], ["will", 0], ["def", 0], ["bsearch", 0], ["left", 0], ["right", 0], ["val", 0], ["ans", 0], ["1", 0], ["while", 0], ["left", 0], ["right", 0], ["mid", 0], ["left", 0], ["right", 0], ["left", 0], ["2", 0], ["if", 0], ["arr2", 0], ["mid", 0], ["val", 0], ["ans", 0], ["mid", 0], ["right", 0], ["mid", 0], ["1", 0], ["else", 0], ["left", 0], ["mid", 0], ["1", 0], ["return", 0], ["ans", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["helper", 0], ["i", 0], ["j", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["arr1", 0], ["is", 0], ["increasing", 0], ["we", 0], ["have", 0], ["reached", 0], ["so", 0], ["far", 0], ["return", 0], ["0", 0], ["else", 0], ["ans", 0], ["float", 0], ["inf", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["no", 0], ["need", 0], ["of", 0], ["replacement", 0], ["ans", 0], ["min", 0], ["ans", 0], ["helper", 0], ["i", 0], ["1", 0], ["j", 0], ["arr1", 0], ["i", 0], ["pick", 0], ["any", 0], ["index", 0], ["from", 0], ["arr2", 0], ["starting", 0], ["j", 0], ["idx", 0], ["bsearch", 0], ["j", 0], ["len", 0], ["arr2", 0], ["1", 0], ["prev", 0], ["if", 0], ["idx", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["1", 0], ["helper", 0], ["i", 0], ["1", 0], ["idx", 0], ["1", 0], ["arr2", 0], ["idx", 0], ["return", 0], ["ans", 0], ["ans", 0], ["helper", 0], ["0", 0], ["0", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["ans", 0], ["float", 0], ["inf", 0], ["else", 0], ["ans", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["10", 0], ["04", 0], ["arr2", 0], ["list", 0], ["set", 0], ["arr2", 0], ["n", 0], ["len", 0], ["arr1", 0], ["arr2", 0], ["list", 0], ["set", 0], ["arr2", 0], ["arr2", 0], ["sort", 0], ["m", 0], ["len", 0], ["arr2", 0], ["we", 0], ["might", 0], ["need", 0], ["fix", 0], ["at", 0], ["point", 0], ["0", 0], ["hence", 0], ["we", 0], ["will", 0], ["always", 0], ["compare", 0], ["it", 0], ["will", 0], ["def", 0], ["bsearch", 0], ["left", 0], ["right", 0], ["val", 0], ["ans", 0], ["1", 0], ["while", 0], ["left", 0], ["right", 0], ["mid", 0], ["left", 0], ["right", 0], ["left", 0], ["2", 0], ["if", 0], ["arr2", 0], ["mid", 0], ["val", 0], ["ans", 0], ["mid", 0], ["right", 0], ["mid", 0], ["1", 0], ["else", 0], ["left", 0], ["mid", 0], ["1", 0], ["return", 0], ["ans", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["helper", 0], ["i", 0], ["j", 0], ["prev", 0], ["nonlocal", 0], ["n", 0], ["m", 0], ["if", 0], ["i", 0], ["n", 0], ["arr1", 0], ["is", 0], ["increasing", 0], ["we", 0], ["have", 0], ["reached", 0], ["so", 0], ["far", 0], ["return", 0], ["0", 0], ["else", 0], ["ans", 0], ["float", 0], ["inf", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["no", 0], ["need", 0], ["of", 0], ["replacement", 0], ["ans", 0], ["min", 0], ["ans", 0], ["helper", 0], ["i", 0], ["1", 0], ["j", 0], ["arr1", 0], ["i", 0], ["pick", 0], ["any", 0], ["index", 0], ["from", 0], ["arr2", 0], ["starting", 0], ["j", 0], ["idx", 0], ["bsearch", 0], ["j", 0], ["m", 0], ["1", 0], ["prev", 0], ["if", 0], ["idx", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["1", 0], ["helper", 0], ["i", 0], ["1", 0], ["idx", 0], ["1", 0], ["arr2", 0], ["idx", 0], ["return", 0], ["ans", 0], ["ans", 0], ["helper", 0], ["0", 0], ["0", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["ans", 0], ["float", 0], ["inf", 0], ["else", 0], ["ans", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["10", 0], ["04", 0], ["arr2", 0], ["list", 0], ["set", 0], ["arr2", 0], ["arr2", 0], ["sort", 0], ["we", 0], ["might", 0], ["need", 0], ["fix", 0], ["at", 0], ["point", 0], ["0", 0], ["hence", 0], ["we", 0], ["will", 0], ["always", 0], ["compare", 0], ["it", 0], ["will", 0], ["def", 0], ["bsearch", 0], ["left", 0], ["right", 0], ["val", 0], ["ans", 0], ["1", 0], ["while", 0], ["left", 0], ["right", 0], ["mid", 0], ["left", 0], ["right", 0], ["left", 0], ["2", 0], ["if", 0], ["arr2", 0], ["mid", 0], ["val", 0], ["ans", 0], ["mid", 0], ["right", 0], ["mid", 0], ["1", 0], ["else", 0], ["left", 0], ["mid", 0], ["1", 0], ["return", 0], ["ans", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["helper", 0], ["i", 0], ["j", 0], ["prev", 0], ["if", 0], ["i", 0], ["len", 0], ["arr1", 0], ["arr1", 0], ["is", 0], ["increasing", 0], ["we", 0], ["have", 0], ["reached", 0], ["so", 0], ["far", 0], ["return", 0], ["0", 0], ["else", 0], ["ans", 0], ["float", 0], ["inf", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["no", 0], ["need", 0], ["of", 0], ["replacement", 0], ["ans", 0], ["min", 0], ["ans", 0], ["helper", 0], ["i", 0], ["1", 0], ["j", 0], ["arr1", 0], ["i", 0], ["pick", 0], ["any", 0], ["index", 0], ["from", 0], ["arr2", 0], ["starting", 0], ["j", 0], ["idx", 0], ["bsearch", 0], ["j", 0], ["len", 0], ["arr2", 0], ["1", 0], ["prev", 0], ["if", 0], ["idx", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["1", 0], ["helper", 0], ["i", 0], ["1", 0], ["idx", 0], ["1", 0], ["arr2", 0], ["idx", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["len", 0], ["arr2", 0], ["can", 0], ["we", 0], ["use", 0], ["binary", 0], ["search", 0], ["here", 0], ["we", 0], ["got", 0], ["to", 0], ["find", 0], ["out", 0], ["the", 0], ["minumum", 0], ["value", 0], ["in", 0], ["arr2", 0], ["which", 0], ["is", 0], ["greater", 0], ["than", 0], ["prev", 0], ["if", 0], ["arr2", 0], ["k", 0], ["prev", 0], ["we", 0], ["can", 0], ["probably", 0], ["use", 0], ["binary", 0], ["search", 0], ["here", 0], ["get", 0], ["the", 0], ["first", 0], ["index", 0], ["which", 0], ["is", 0], ["strictly", 0], ["greater", 0], ["than", 0], ["prev", 0], ["ans", 0], ["min", 0], ["ans", 0], ["1", 0], ["helper", 0], ["i", 0], ["1", 0], ["k", 0], ["1", 0], ["arr2", 0], ["k", 0], ["break", 0], ["return", 0], ["ans", 0], ["ans", 0], ["helper", 0], ["0", 0], ["0", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["ans", 0], ["float", 0], ["inf", 0], ["else", 0], ["ans", 0], ["import", 0], ["bisect", 0], ["class", 0], ["solution", 0], ["def", 0], ["recurse", 0], ["self", 0], ["arr1", 0], ["arr2", 0], ["m", 0], ["n", 0], ["idx", 0], ["prev", 0], ["dp", 0], ["if", 0], ["idx", 0], ["n", 0], ["return", 0], ["0", 0], ["k", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["prev", 0], ["if", 0], ["dp", 0], ["idx", 0], ["k", 0], ["1", 0], ["return", 0], ["dp", 0], ["idx", 0], ["k", 0], ["c1", 0], ["self", 0], ["recurse", 0], ["arr1", 0], ["arr2", 0], ["m", 0], ["n", 0], ["idx", 0], ["1", 0], ["arr1", 0], ["idx", 0], ["dp", 0], ["if", 0], ["arr1", 0], ["idx", 0], ["prev", 0], ["else", 0], ["2000", 0], ["c2", 0], ["1", 0], ["self", 0], ["recurse", 0], ["arr1", 0], ["arr2", 0], ["m", 0], ["n", 0], ["idx", 0], ["1", 0], ["arr2", 0], ["k", 0], ["dp", 0], ["if", 0], ["k", 0], ["m", 0], ["else", 0], ["2000", 0], ["dp", 0], ["idx", 0], ["k", 0], ["min", 0], ["c1", 0], ["c2", 0], ["return", 0], ["dp", 0], ["idx", 0], ["k", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["dp", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2001", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2001", 0], ["arr2", 0], ["sort", 0], ["self", 0], ["recurse", 0], ["arr1", 0], ["arr2", 0], ["len", 0], ["arr2", 0], ["len", 0], ["arr1", 0], ["0", 0], ["10", 0], ["9", 0], ["dp", 0], ["if", 0], ["dp", 0], ["0", 0], ["0", 0], ["2000", 0], ["return", 0], ["1", 0], ["else", 0], ["return", 0], ["dp", 0], ["0", 0], ["0", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["maintain", 0], ["two", 0], ["dp", 0], ["array", 0], ["1", 0], ["for", 0], ["keep", 0], ["arr1", 0], ["i", 0], ["1", 0], ["for", 0], ["swap", 0], ["arr1", 0], ["i", 0], ["with", 0], ["arr2", 0], ["j", 0], ["convert", 0], ["arr2", 0], ["to", 0], ["sorted", 0], ["unique", 0], ["set", 0], ["a", 0], ["arr1", 0], ["b", 0], ["sorted", 0], ["list", 0], ["set", 0], ["arr2", 0], ["n", 0], ["m", 0], ["len", 0], ["a", 0], ["len", 0], ["b", 0], ["keep", 0], ["0", 0], ["math", 0], ["inf", 0], ["keep", 0], ["i", 0], ["keep", 0], ["a", 0], ["i", 0], ["swap", 0], ["1", 0], ["m", 0], ["math", 0], ["inf", 0], ["m", 0], ["swap", 0], ["i", 0], ["j", 0], ["a", 0], ["i", 0], ["replaced", 0], ["with", 0], ["b", 0], ["j", 0], ["prev", 0], ["curr", 0], ["1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["prev", 0], ["curr", 0], ["curr", 0], ["prev", 0], ["must", 0], ["init", 0], ["every", 0], ["time", 0], ["swap", 0], ["curr", 0], ["math", 0], ["inf", 0], ["m", 0], ["keep", 0], ["curr", 0], ["math", 0], ["inf", 0], ["keep", 0], ["i", 0], ["case", 0], ["1", 0], ["a", 0], ["i", 0], ["is", 0], ["bigger", 0], ["than", 0], ["previous", 0], ["keep", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["keep", 0], ["curr", 0], ["keep", 0], ["prev", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["keep", 0], ["i", 0], ["case", 0], ["2", 0], ["a", 0], ["i", 0], ["is", 0], ["bigger", 0], ["then", 0], ["previous", 0], ["swap", 0], ["value", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["keep", 0], ["curr", 0], ["min", 0], ["keep", 0], ["curr", 0], ["swap", 0], ["prev", 0], ["j", 0], ["swap", 0], ["case", 0], ["1", 0], ["when", 0], ["a", 0], ["i", 0], ["1", 0], ["keeps", 0], ["if", 0], ["b", 0], ["j", 0], ["a", 0], ["i", 0], ["1", 0], ["swap", 0], ["curr", 0], ["j", 0], ["min", 0], ["swap", 0], ["curr", 0], ["j", 0], ["1", 0], ["keep", 0], ["prev", 0], ["swap", 0], ["case", 0], ["2", 0], ["when", 0], ["a", 0], ["i", 0], ["1", 0], ["swapped", 0], ["if", 0], ["j", 0], ["0", 0], ["only", 0], ["need", 0], ["to", 0], ["check", 0], ["last", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["since", 0], ["swap", 0], ["j", 0], ["decreases", 0], ["when", 0], ["j", 0], ["increases", 0], ["swap", 0], ["curr", 0], ["j", 0], ["min", 0], ["swap", 0], ["curr", 0], ["j", 0], ["1", 0], ["swap", 0], ["prev", 0], ["j", 0], ["1", 0], ["res", 0], ["min", 0], ["keep", 0], ["curr", 0], ["swap", 0], ["curr", 0], ["m", 0], ["1", 0], ["return", 0], ["res", 0], ["if", 0], ["res", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["10", 0], ["04", 0], ["arr2", 0], ["list", 0], ["set", 0], ["arr2", 0], ["n", 0], ["len", 0], ["arr1", 0], ["arr2", 0], ["list", 0], ["set", 0], ["arr2", 0], ["arr2", 0], ["sort", 0], ["m", 0], ["len", 0], ["arr2", 0], ["we", 0], ["might", 0], ["need", 0], ["fix", 0], ["at", 0], ["point", 0], ["0", 0], ["hence", 0], ["we", 0], ["will", 0], ["always", 0], ["compare", 0], ["it", 0], ["will", 0], ["def", 0], ["bsearch", 0], ["left", 0], ["right", 0], ["val", 0], ["ans", 0], ["1", 0], ["while", 0], ["left", 0], ["right", 0], ["mid", 0], ["left", 0], ["right", 0], ["left", 0], ["2", 0], ["if", 0], ["arr2", 0], ["mid", 0], ["val", 0], ["ans", 0], ["mid", 0], ["right", 0], ["mid", 0], ["1", 0], ["else", 0], ["left", 0], ["mid", 0], ["1", 0], ["return", 0], ["ans", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["helper", 0], ["i", 0], ["j", 0], ["prev", 0], ["nonlocal", 0], ["n", 0], ["m", 0], ["if", 0], ["i", 0], ["n", 0], ["arr1", 0], ["is", 0], ["increasing", 0], ["we", 0], ["have", 0], ["reached", 0], ["so", 0], ["far", 0], ["return", 0], ["0", 0], ["else", 0], ["ans", 0], ["float", 0], ["inf", 0], ["if", 0], ["arr1", 0], ["i", 0], ["prev", 0], ["no", 0], ["need", 0], ["of", 0], ["replacement", 0], ["ans", 0], ["min", 0], ["ans", 0], ["helper", 0], ["i", 0], ["1", 0], ["j", 0], ["arr1", 0], ["i", 0], ["pick", 0], ["first", 0], ["index", 0], ["from", 0], ["arr2", 0], ["starting", 0], ["j", 0], ["which", 0], ["is", 0], ["greater", 0], ["than", 0], ["prev", 0], ["idx", 0], ["bsearch", 0], ["j", 0], ["m", 0], ["1", 0], ["prev", 0], ["if", 0], ["idx", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["1", 0], ["helper", 0], ["i", 0], ["1", 0], ["idx", 0], ["1", 0], ["arr2", 0], ["idx", 0], ["return", 0], ["ans", 0], ["ans", 0], ["helper", 0], ["0", 0], ["0", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["ans", 0], ["float", 0], ["inf", 0], ["else", 0], ["ans", 0], ["import", 0], ["bisect", 0], ["class", 0], ["solution", 0], ["def", 0], ["recurse", 0], ["self", 0], ["arr1", 0], ["arr2", 0], ["m", 0], ["n", 0], ["idx", 0], ["prev", 0], ["dp", 0], ["if", 0], ["idx", 0], ["n", 0], ["return", 0], ["0", 0], ["k", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["arr2", 0], ["prev", 0], ["if", 0], ["dp", 0], ["idx", 0], ["k", 0], ["1", 0], ["return", 0], ["dp", 0], ["idx", 0], ["k", 0], ["c1", 0], ["self", 0], ["recurse", 0], ["arr1", 0], ["arr2", 0], ["m", 0], ["n", 0], ["idx", 0], ["1", 0], ["arr1", 0], ["idx", 0], ["dp", 0], ["if", 0], ["arr1", 0], ["idx", 0], ["prev", 0], ["else", 0], ["2000", 0], ["c2", 0], ["1", 0], ["self", 0], ["recurse", 0], ["arr1", 0], ["arr2", 0], ["m", 0], ["n", 0], ["idx", 0], ["1", 0], ["arr2", 0], ["k", 0], ["dp", 0], ["if", 0], ["k", 0], ["m", 0], ["else", 0], ["2000", 0], ["dp", 0], ["idx", 0], ["k", 0], ["min", 0], ["c1", 0], ["c2", 0], ["return", 0], ["dp", 0], ["idx", 0], ["k", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["dp", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2001", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2001", 0], ["arr2", 0], ["sort", 0], ["ans", 0], ["self", 0], ["recurse", 0], ["arr1", 0], ["arr2", 0], ["len", 0], ["arr2", 0], ["len", 0], ["arr1", 0], ["0", 0], ["10", 0], ["9", 0], ["dp", 0], ["if", 0], ["ans", 0], ["2000", 0], ["return", 0], ["1", 0], ["else", 0], ["return", 0], ["ans", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["maintain", 0], ["two", 0], ["dp", 0], ["array", 0], ["1", 0], ["for", 0], ["keep", 0], ["arr1", 0], ["i", 0], ["1", 0], ["for", 0], ["swap", 0], ["arr1", 0], ["i", 0], ["with", 0], ["arr2", 0], ["j", 0], ["convert", 0], ["arr2", 0], ["to", 0], ["sorted", 0], ["unique", 0], ["set", 0], ["a", 0], ["arr1", 0], ["b", 0], ["sorted", 0], ["list", 0], ["set", 0], ["arr2", 0], ["n", 0], ["m", 0], ["len", 0], ["a", 0], ["len", 0], ["b", 0], ["keep", 0], ["math", 0], ["inf", 0], ["n", 0], ["keep", 0], ["i", 0], ["keep", 0], ["a", 0], ["i", 0], ["swap", 0], ["math", 0], ["inf", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["swap", 0], ["i", 0], ["j", 0], ["a", 0], ["i", 0], ["replaced", 0], ["with", 0], ["b", 0], ["j", 0], ["init", 0], ["keep", 0], ["0", 0], ["0", 0], ["keep", 0], ["a", 0], ["0", 0], ["no", 0], ["swap", 0], ["swap", 0], ["0", 0], ["1", 0], ["m", 0], ["can", 0], ["be", 0], ["swapped", 0], ["with", 0], ["any", 0], ["a", 0], ["j", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["keep", 0], ["i", 0], ["case", 0], ["1", 0], ["a", 0], ["i", 0], ["is", 0], ["bigger", 0], ["than", 0], ["previous", 0], ["keep", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["keep", 0], ["i", 0], ["keep", 0], ["i", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["keep", 0], ["i", 0], ["case", 0], ["2", 0], ["a", 0], ["i", 0], ["is", 0], ["bigger", 0], ["then", 0], ["previous", 0], ["swap", 0], ["value", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["keep", 0], ["i", 0], ["min", 0], ["keep", 0], ["i", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["swap", 0], ["case", 0], ["1", 0], ["when", 0], ["a", 0], ["i", 0], ["1", 0], ["keeps", 0], ["if", 0], ["b", 0], ["j", 0], ["a", 0], ["i", 0], ["1", 0], ["swap", 0], ["i", 0], ["j", 0], ["min", 0], ["swap", 0], ["i", 0], ["j", 0], ["1", 0], ["keep", 0], ["i", 0], ["1", 0], ["swap", 0], ["case", 0], ["2", 0], ["when", 0], ["a", 0], ["i", 0], ["1", 0], ["swapped", 0], ["if", 0], ["j", 0], ["0", 0], ["only", 0], ["need", 0], ["to", 0], ["check", 0], ["last", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["since", 0], ["swap", 0], ["j", 0], ["decreases", 0], ["when", 0], ["j", 0], ["increases", 0], ["swap", 0], ["i", 0], ["j", 0], ["min", 0], ["swap", 0], ["i", 0], ["j", 0], ["1", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["res", 0], ["min", 0], ["keep", 0], ["n", 0], ["1", 0], ["swap", 0], ["n", 0], ["1", 0], ["m", 0], ["1", 0], ["return", 0], ["res", 0], ["if", 0], ["res", 0], ["math", 0], ["inf", 0], ["else", 0], ["1", 0], ["class", 1], ["solution", 1], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sort", 0], ["m", 0], ["len", 0], ["arr1", 0], ["n", 0], ["len", 0], ["arr2", 0], ["newarr2", 0], ["arr2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["arr2", 0], ["i", 0], ["newarr2", 0], ["1", 0], ["newarr2", 0], ["append", 0], ["arr2", 0], ["i", 0], ["arr2", 0], ["newarr2", 0], ["n", 0], ["len", 0], ["arr2", 0], ["il", 0], ["10", 0], ["9", 0], ["7", 0], ["dp", 0], ["il", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["dp", 0], ["0", 0], ["n", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["arr2", 0], ["i", 0], ["arr1", 0], ["0", 0], ["dp", 0], ["0", 0], ["i", 0], ["1", 0], ["else", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["idx", 0], ["0", 0], ["if", 0], ["arr2", 0], ["0", 0], ["arr1", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["a", 0], ["dp", 0], ["i", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["dp", 0], ["i", 0], ["1", 0], ["n", 0], ["il", 0], ["and", 0], ["arr1", 0], ["i", 0], ["1", 0], ["arr2", 0], ["k", 0], ["else", 0], ["il", 0], ["b", 0], ["dp", 0], ["i", 0], ["1", 0], ["idx", 0], ["1", 0], ["if", 0], ["dp", 0], ["i", 0], ["1", 0], ["idx", 0], ["il", 0], ["else", 0], ["il", 0], ["dp", 0], ["i", 0], ["k", 0], ["min", 0], ["a", 0], ["b", 0], ["if", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["dp", 0], ["i", 0], ["1", 0], ["idx", 0], ["idx", 0], ["k", 0], ["if", 0], ["dp", 0], ["i", 0], ["1", 0], ["n", 0], ["il", 0], ["and", 0], ["arr1", 0], ["i", 0], ["arr1", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["n", 0], ["dp", 0], ["i", 0], ["1", 0], ["n", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["il", 0], ["and", 0], ["arr2", 0], ["k", 0], ["arr1", 0], ["i", 0], ["dp", 0], ["i", 0], ["n", 0], ["min", 0], ["dp", 0], ["i", 0], ["n", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["m", 0], ["min", 0], ["dp", 0], ["m", 0], ["1", 0], ["return", 0], ["m", 0], ["if", 0], ["m", 0], ["il", 0], ["else", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["binary", 0], ["search", 0], ["right", 0], ["self", 0], ["arr", 0], ["l", 0], ["r", 0], ["t", 0], ["while", 0], ["l", 0], ["r", 0], ["m", 0], ["l", 0], ["r", 0], ["l", 0], ["2", 0], ["if", 0], ["arr", 0], ["m", 0], ["t", 0], ["l", 0], ["m", 0], ["1", 0], ["else", 0], ["r", 0], ["m", 0], ["return", 0], ["l", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sort", 0], ["dp", 0], ["def", 0], ["help", 0], ["i1", 0], ["i2", 0], ["if", 0], ["i1", 0], ["len", 0], ["arr1", 0], ["return", 0], ["0", 0], ["if", 0], ["i1", 0], ["0", 0], ["key", 0], ["i1", 0], ["i2", 0], ["arr1", 0], ["i1", 0], ["1", 0], ["else", 0], ["key", 0], ["i1", 0], ["i2", 0], ["none", 0], ["if", 0], ["key", 0], ["in", 0], ["dp", 0], ["return", 0], ["dp", 0], ["key", 0], ["print", 0], ["key", 0], ["all", 0], ["possible", 0], ["results", 0], ["pos", 0], ["don", 0], ["t", 0], ["make", 0], ["changes", 0], ["here", 0], ["if", 0], ["i1", 0], ["0", 0], ["or", 0], ["arr1", 0], ["i1", 0], ["1", 0], ["arr1", 0], ["i1", 0], ["res", 0], ["help", 0], ["i1", 0], ["1", 0], ["i2", 0], ["if", 0], ["res", 0], ["1", 0], ["pos", 0], ["append", 0], ["res", 0], ["if", 0], ["i1", 0], ["0", 0], ["make", 0], ["change", 0], ["i2", 0], ["self", 0], ["binary", 0], ["search", 0], ["right", 0], ["arr2", 0], ["i2", 0], ["len", 0], ["arr2", 0], ["arr1", 0], ["i1", 0], ["1", 0], ["if", 0], ["i2", 0], ["len", 0], ["arr2", 0], ["tmp", 0], ["arr1", 0], ["i1", 0], ["arr1", 0], ["i1", 0], ["arr2", 0], ["i2", 0], ["res", 0], ["help", 0], ["i1", 0], ["1", 0], ["i2", 0], ["1", 0], ["if", 0], ["res", 0], ["1", 0], ["pos", 0], ["append", 0], ["res", 0], ["1", 0], ["arr1", 0], ["i1", 0], ["tmp", 0], ["else", 0], ["make", 0], ["change", 0], ["if", 0], ["i2", 0], ["len", 0], ["arr2", 0], ["and", 0], ["arr2", 0], ["i2", 0], ["arr1", 0], ["i1", 0], ["tmp", 0], ["arr1", 0], ["i1", 0], ["arr1", 0], ["i1", 0], ["arr2", 0], ["i2", 0], ["res", 0], ["help", 0], ["i1", 0], ["1", 0], ["i2", 0], ["1", 0], ["if", 0], ["res", 0], ["1", 0], ["pos", 0], ["append", 0], ["res", 0], ["1", 0], ["arr1", 0], ["i1", 0], ["tmp", 0], ["if", 0], ["len", 0], ["pos", 0], ["0", 0], ["dp", 0], ["key", 0], ["1", 0], ["else", 0], ["dp", 0], ["key", 0], ["min", 0], ["pos", 0], ["return", 0], ["dp", 0], ["key", 0], ["return", 0], ["help", 0], ["0", 0], ["0", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["n", 0], ["len", 0], ["arr1", 0], ["arr1", 0], ["insert", 0], ["0", 0], ["1", 0], ["arr2", 0], ["sort", 0], ["dp", 0], ["i", 0], ["k", 0], ["means", 0], ["the", 0], ["minimum", 0], ["number", 0], ["we", 0], ["can", 0], ["have", 0], ["at", 0], ["ith", 0], ["position", 0], ["with", 0], ["k", 0], ["operations", 0], ["dp", 0], ["sys", 0], ["maxsize", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dp", 0], ["0", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["if", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["arr1", 0], ["i", 0], ["not", 0], ["assign", 0], ["dp", 0], ["i", 0], ["k", 0], ["arr1", 0], ["i", 0], ["num", 0], ["self", 0], ["helper", 0], ["arr2", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["num", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["k", 0], ["min", 0], ["dp", 0], ["i", 0], ["k", 0], ["num", 0], ["ans", 0], ["sys", 0], ["maxsize", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["dp", 0], ["n", 0], ["k", 0], ["sys", 0], ["maxsize", 0], ["ans", 0], ["min", 0], ["ans", 0], ["k", 0], ["return", 0], ["ans", 0], ["if", 0], ["ans", 0], ["sys", 0], ["maxsize", 0], ["else", 0], ["1", 0], ["def", 0], ["helper", 0], ["self", 0], ["arr", 0], ["val", 0], ["find", 0], ["in", 0], ["arr", 0], ["the", 0], ["smallest", 0], ["number", 0], ["that", 0], ["is", 0], ["larger", 0], ["than", 0], ["val", 0], ["start", 0], ["end", 0], ["0", 0], ["len", 0], ["arr", 0], ["1", 0], ["while", 0], ["start", 0], ["1", 0], ["end", 0], ["mid", 0], ["start", 0], ["end", 0], ["start", 0], ["2", 0], ["if", 0], ["arr", 0], ["mid", 0], ["val", 0], ["start", 0], ["mid", 0], ["else", 0], ["end", 0], ["mid", 0], ["if", 0], ["arr", 0], ["start", 0], ["val", 0], ["return", 0], ["arr", 0], ["start", 0], ["return", 0], ["arr", 0], ["end", 0], ["class", 1], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["arr2", 0], ["sorted", 0], ["set", 0], ["arr2", 0], ["size1", 0], ["size2", 0], ["len", 0], ["arr1", 0], ["len", 0], ["arr2", 0], ["inf", 0], ["float", 0], ["inf", 0], ["keep", 0], ["inf", 0], ["size1", 0], ["keep", 0], ["0", 0], ["0", 0], ["swap", 0], ["inf", 0], ["size2", 0], ["for", 0], ["in", 0], ["range", 0], ["size1", 0], ["swap", 0], ["0", 0], ["1", 0], ["size2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["size1", 0], ["minkeep", 0], ["minswap", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["size2", 0], ["if", 0], ["arr1", 0], ["i", 0], ["arr1", 0], ["i", 0], ["1", 0], ["keep", 0], ["i", 0], ["keep", 0], ["i", 0], ["1", 0], ["if", 0], ["arr1", 0], ["i", 0], ["arr2", 0], ["j", 0], ["minkeep", 0], ["min", 0], ["minkeep", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["if", 0], ["arr2", 0], ["j", 0], ["arr1", 0], ["i", 0], ["1", 0], ["swap", 0], ["i", 0], ["j", 0], ["keep", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["j", 0], ["0", 0], ["arr2", 0], ["j", 0], ["arr2", 0], ["j", 0], ["1", 0], ["is", 0], ["always", 0], ["true", 0], ["minswap", 0], ["min", 0], ["minswap", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["1", 0], ["keep", 0], ["i", 0], ["min", 0], ["keep", 0], ["i", 0], ["minkeep", 0], ["swap", 0], ["i", 0], ["j", 0], ["min", 0], ["swap", 0], ["i", 0], ["j", 0], ["minswap", 0], ["res", 0], ["min", 0], ["min", 0], ["swap", 0], ["1", 0], ["keep", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["res", 0], ["inf", 0], ["else", 0], ["res", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["n", 0], ["len", 0], ["arr1", 0], ["arr1", 0], ["insert", 0], ["0", 0], ["1", 0], ["arr2", 0], ["sort", 0], ["dp", 0], ["i", 0], ["k", 0], ["means", 0], ["the", 0], ["minimum", 0], ["number", 0], ["we", 0], ["can", 0], ["have", 0], ["at", 0], ["ith", 0], ["position", 0], ["with", 0], ["k", 0], ["operations", 0], ["dp", 0], ["sys", 0], ["maxsize", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dp", 0], ["0", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["if", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["arr1", 0], ["i", 0], ["not", 0], ["assign", 0], ["dp", 0], ["i", 0], ["k", 0], ["arr1", 0], ["i", 0], ["if", 0], ["k", 0], ["1", 0], ["num", 0], ["self", 0], ["helper", 0], ["arr2", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["num", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["k", 0], ["min", 0], ["dp", 0], ["i", 0], ["k", 0], ["num", 0], ["ans", 0], ["sys", 0], ["maxsize", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["dp", 0], ["n", 0], ["k", 0], ["sys", 0], ["maxsize", 0], ["ans", 0], ["min", 0], ["ans", 0], ["k", 0], ["return", 0], ["ans", 0], ["if", 0], ["ans", 0], ["sys", 0], ["maxsize", 0], ["else", 0], ["1", 0], ["def", 0], ["helper", 0], ["self", 0], ["arr", 0], ["val", 0], ["find", 0], ["in", 0], ["arr", 0], ["the", 0], ["smallest", 0], ["number", 0], ["that", 0], ["is", 0], ["larger", 0], ["than", 0], ["val", 0], ["start", 0], ["end", 0], ["0", 0], ["len", 0], ["arr", 0], ["1", 0], ["while", 0], ["start", 0], ["1", 0], ["end", 0], ["mid", 0], ["start", 0], ["end", 0], ["start", 0], ["2", 0], ["if", 0], ["arr", 0], ["mid", 0], ["val", 0], ["start", 0], ["mid", 0], ["else", 0], ["end", 0], ["mid", 0], ["if", 0], ["arr", 0], ["start", 0], ["val", 0], ["return", 0], ["arr", 0], ["start", 0], ["return", 0], ["arr", 0], ["end", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["n", 0], ["len", 0], ["arr1", 0], ["arr1", 0], ["insert", 0], ["0", 0], ["1", 0], ["arr2", 0], ["sort", 0], ["dp", 0], ["i", 0], ["k", 0], ["means", 0], ["the", 0], ["minimum", 0], ["number", 0], ["we", 0], ["can", 0], ["get", 0], ["at", 0], ["arr1", 0], ["i", 0], ["using", 0], ["k", 0], ["operations", 0], ["dp", 0], ["sys", 0], ["maxsize", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dp", 0], ["0", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["not", 0], ["changing", 0], ["for", 0], ["arr1", 0], ["i", 0], ["if", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["arr1", 0], ["i", 0], ["dp", 0], ["i", 0], ["k", 0], ["arr1", 0], ["i", 0], ["changing", 0], ["for", 0], ["arr1", 0], ["i", 0], ["find", 0], ["the", 0], ["smallested", 0], ["number", 0], ["in", 0], ["arr2", 0], ["that", 0], ["is", 0], ["larger", 0], ["than", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["1", 0], ["num", 0], ["self", 0], ["helper", 0], ["arr2", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["num", 0], ["dp", 0], ["i", 0], ["1", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["k", 0], ["min", 0], ["dp", 0], ["i", 0], ["k", 0], ["num", 0], ["ans", 0], ["sys", 0], ["maxsize", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["if", 0], ["dp", 0], ["n", 0], ["k", 0], ["sys", 0], ["maxsize", 0], ["ans", 0], ["min", 0], ["ans", 0], ["k", 0], ["return", 0], ["ans", 0], ["if", 0], ["ans", 0], ["sys", 0], ["maxsize", 0], ["else", 0], ["1", 0], ["def", 0], ["helper", 0], ["self", 0], ["arr", 0], ["val", 0], ["start", 0], ["end", 0], ["0", 0], ["len", 0], ["arr", 0], ["1", 0], ["while", 0], ["start", 0], ["1", 0], ["end", 0], ["mid", 0], ["start", 0], ["end", 0], ["start", 0], ["2", 0], ["if", 0], ["arr", 0], ["mid", 0], ["val", 0], ["start", 0], ["mid", 0], ["elif", 0], ["arr", 0], ["mid", 0], ["val", 0], ["end", 0], ["mid", 0], ["if", 0], ["arr", 0], ["start", 0], ["val", 0], ["return", 0], ["arr", 0], ["start", 0], ["return", 0], ["arr", 0], ["end", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["set2", 0], ["set", 0], ["arr2", 0], ["arr2", 0], ["sorted", 0], ["set2", 0], ["n", 0], ["m", 0], ["len", 0], ["arr1", 0], ["len", 0], ["arr2", 0], ["to", 0], ["index", 0], ["left", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["sorted", 0], ["arr1", 0], ["while", 0], ["left", 0], ["m", 0], ["and", 0], ["arr2", 0], ["left", 0], ["x", 0], ["left", 0], ["1", 0], ["to", 0], ["index", 0], ["x", 0], ["left", 0], ["1", 0], ["if", 0], ["left", 0], ["m", 0], ["else", 0], ["m", 0], ["print", 0], ["to", 0], ["index", 0], ["arr2", 0], ["dp", 0], ["none", 0], ["none", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["solve", 0], ["i", 0], ["j", 0], ["k", 0], ["if", 0], ["i", 0], ["n", 0], ["return", 0], ["0", 0], ["if", 0], ["j", 0], ["m", 0], ["or", 0], ["j", 0], ["m", 0], ["and", 0], ["k", 0], ["1", 0], ["return", 0], ["n", 0], ["1", 0], ["if", 0], ["dp", 0], ["i", 0], ["j", 0], ["k", 0], ["is", 0], ["none", 0], ["if", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["j", 0], ["k", 0], ["min", 0], ["solve", 0], ["i", 0], ["1", 0], ["to", 0], ["index", 0], ["arr1", 0], ["0", 0], ["0", 0], ["1", 0], ["solve", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["else", 0], ["result", 0], ["n", 0], ["1", 0], ["if", 0], ["j", 0], ["m", 0], ["1", 0], ["result", 0], ["1", 0], ["solve", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["and", 0], ["arr1", 0], ["i", 0], ["arr1", 0], ["i", 0], ["1", 0], ["result", 0], ["min", 0], ["result", 0], ["solve", 0], ["i", 0], ["1", 0], ["to", 0], ["index", 0], ["arr1", 0], ["i", 0], ["0", 0], ["if", 0], ["k", 0], ["1", 0], ["and", 0], ["arr1", 0], ["i", 0], ["arr2", 0], ["j", 0], ["result", 0], ["min", 0], ["result", 0], ["solve", 0], ["i", 0], ["1", 0], ["to", 0], ["index", 0], ["arr1", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["j", 0], ["k", 0], ["result", 0], ["return", 0], ["dp", 0], ["i", 0], ["j", 0], ["k", 0], ["result", 0], ["solve", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["k", 0], ["in", 0], ["0", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["j", 0], ["k", 0], ["i", 0], ["j", 0], ["k", 0], ["return", 0], ["result", 0], ["if", 0], ["result", 0], ["n", 0], ["else", 0], ["1", 0], ["import", 0], ["bisect", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["a", 0], ["list", 0], ["int", 0], ["b", 0], ["list", 0], ["int", 0], ["int", 0], ["b", 0], ["sorted", 0], ["set", 0], ["b", 0], ["def", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["val", 0], ["if", 0], ["val", 0], ["b", 0], ["1", 0], ["return", 0], ["float", 0], ["inf", 0], ["return", 0], ["b", 0], ["bisect", 0], ["bisect", 0], ["right", 0], ["b", 0], ["val", 0], ["lru", 0], ["cache", 0], ["none", 0], ["def", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["ops", 0], ["if", 0], ["ops", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["if", 0], ["n", 0], ["0", 0], ["return", 0], ["float", 0], ["inf", 0], ["return", 0], ["a", 0], ["n", 0], ["1", 0], ["if", 0], ["first", 0], ["n", 0], ["of", 0], ["a", 0], ["is", 0], ["sorted", 0], ["n", 0], ["else", 0], ["float", 0], ["inf", 0], ["ops", 0], ["min", 0], ["n", 0], ["ops", 0], ["return", 0], ["min", 0], ["a", 0], ["n", 0], ["1", 0], ["if", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["a", 0], ["n", 0], ["1", 0], ["else", 0], ["float", 0], ["inf", 0], ["find", 0], ["larger", 0], ["value", 0], ["in", 0], ["b", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["n", 0], ["1", 0], ["ops", 0], ["1", 0], ["for", 0], ["ops", 0], ["in", 0], ["range", 0], ["min", 0], ["len", 0], ["a", 0], ["len", 0], ["b", 0], ["1", 0], ["if", 0], ["min", 0], ["last", 0], ["value", 0], ["given", 0], ["operations", 0], ["len", 0], ["a", 0], ["ops", 0], ["float", 0], ["inf", 0], ["return", 0], ["ops", 0], ["return", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["makearrayincreasing", 0], ["self", 0], ["arr1", 0], ["list", 0], ["int", 0], ["arr2", 0], ["list", 0], ["int", 0], ["int", 0], ["https", 0], ["www", 0], ["youtube", 0], ["com", 0], ["watch", 0], ["v", 0], ["8ttxdmcu2ge", 0], ["m", 0], ["len", 0], ["arr1", 0], ["remove", 0], ["dulpicates", 0], ["and", 0], ["sort", 0], ["arr2", 0], ["arr2", 0], ["sorted", 0], ["list", 0], ["set", 0], ["arr2", 0], ["print", 0], ["arr2", 0], ["n", 0], ["len", 0], ["arr2", 0], ["swap", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["keep", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["initialization", 0], ["keep", 0], ["0", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["swap", 0], ["0", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["min", 0], ["keep", 0], ["float", 0], ["inf", 0], ["min", 0], ["swap", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["two", 0], ["variables", 0], ["to", 0], ["help", 0], ["compute", 0], ["case", 0], ["3", 0], ["4", 0], ["case", 0], ["4", 0], ["the", 0], ["last", 0], ["two", 0], ["elements", 0], ["of", 0], ["current", 0], ["valid", 0], ["array", 0], ["are", 0], ["both", 0], ["from", 0], ["arr2", 0], ["if", 0], ["j", 0], ["0", 0], ["min", 0], ["swap", 0], ["min", 0], ["min", 0], ["swap", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["1", 0], ["case", 0], ["3", 0], ["the", 0], ["second", 0], ["to", 0], ["last", 0], ["element", 0], ["is", 0], ["replaced", 0], ["by", 0], ["the", 0], ["previous", 0], ["element", 0], ["arr2", 0], ["j", 0], ["1", 0], ["or", 0], ["earlier", 0], ["elements", 0], ["if", 0], ["arr1", 0], ["i", 0], ["arr2", 0], ["j", 0], ["min", 0], ["keep", 0], ["min", 0], ["min", 0], ["keep", 0], ["swap", 0], ["i", 0], ["1", 0], ["j", 0], ["case", 0], ["1", 0], ["no", 0], ["need", 0], ["to", 0], ["swap", 0], ["keep", 0], ["arr1", 0], ["i", 0], ["if", 0], ["arr1", 0], ["i", 0], ["arr1", 0], ["i", 0], ["1", 0], ["keep", 0], ["i", 0], ["keep", 0], ["i", 0], ["1", 0], ["case", 0], ["2", 0], ["replace", 0], ["arr1", 0], ["i", 0], ["by", 0], ["arr2", 0], ["j", 0], ["if", 0], ["arr2", 0], ["j", 0], ["arr1", 0], ["i", 0], ["1", 0], ["swap", 0], ["i", 0], ["j", 0], ["keep", 0], ["i", 0], ["1", 0], ["1", 0], ["update", 0], ["swap", 0], ["i", 0], ["j", 0], ["min", 0], ["swap", 0], ["i", 0], ["j", 0], ["min", 0], ["swap", 0], ["keep", 0], ["i", 0], ["min", 0], ["keep", 0], ["i", 0], ["min", 0], ["keep", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["print", 0], ["keep", 0], ["i", 0], ["swap", 0], ["i", 0], ["res", 0], ["min", 0], ["min", 0], ["swap", 0], ["m", 0], ["1", 0], ["keep", 0], ["m", 0], ["1", 0], ["if", 0], ["res", 0], ["float", 0], ["inf", 0], ["return", 0], ["1", 0], ["else", 0], ["return", 0], ["res", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.002523977788995457, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.002523977788995457, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.026713709677419355, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.026713709677419355, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.002523977788995457, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.002523977788995457, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.026713709677419355, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.026713709677419355, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nPolycarp likes arithmetic progressions. A sequence $[a_1, a_2, \\dots, a_n]$ is called an arithmetic progression if for each $i$ ($1 \\le i < n$) the value $a_{i+1} - a_i$ is the same. For example, the sequences $[42]$, $[5, 5, 5]$, $[2, 11, 20, 29]$ and $[3, 2, 1, 0]$ are arithmetic progressions, but $[1, 0, 1]$, $[1, 3, 9]$ and $[2, 3, 1]$ are not.\n\nIt follows from the definition that any sequence of length one or two is an arithmetic progression.\n\nPolycarp found some sequence of positive integers $[b_1, b_2, \\dots, b_n]$. He agrees to change each element by at most one. In the other words, for each element there are exactly three options: an element can be decreased by $1$, an element can be increased by $1$, an element can be left unchanged.\n\nDetermine a minimum possible number of elements in $b$ which can be changed (by exactly one), so that the sequence $b$ becomes an arithmetic progression, or report that it is impossible.\n\nIt is possible that the resulting sequence contains element equals $0$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ $(1 \\le n \\le 100\\,000)$ — the number of elements in $b$.\n\nThe second line contains a sequence $b_1, b_2, \\dots, b_n$ $(1 \\le b_i \\le 10^{9})$.\n\n\n-----Output-----\n\nIf it is impossible to make an arithmetic progression with described operations, print -1. In the other case, print non-negative integer — the minimum number of elements to change to make the given sequence becomes an arithmetic progression. The only allowed operation is to add/to subtract one from an element (can't use operation twice to the same position).\n\n\n-----Examples-----\nInput\n4\n24 21 14 10\n\nOutput\n3\n\nInput\n2\n500 500\n\nOutput\n0\n\nInput\n3\n14 5 1\n\nOutput\n-1\n\nInput\n5\n1 3 6 9 12\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example Polycarp should increase the first number on $1$, decrease the second number on $1$, increase the third number on $1$, and the fourth number should left unchanged. So, after Polycarp changed three elements by one, his sequence became equals to $[25, 20, 15, 10]$, which is an arithmetic progression.\n\nIn the second example Polycarp should not change anything, because his sequence is an arithmetic progression.\n\nIn the third example it is impossible to make an arithmetic progression.\n\nIn the fourth example Polycarp should change only the first element, he should decrease it on one. After that his sequence will looks like $[0, 3, 6, 9, 12]$, which is an arithmetic progression.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\nT = input().split(' ')\nfor i in range(n):\n\tT[i] = int(T[i])\nm = n+1\nif n == 1:\n\tprint(0)\nelse:\n\tfor a in range(-1, 2):\n\t\tfor b in range(-1, 2):\n\t\t\tc = True\n\t\t\tp = (T[1]+b) - (T[0]+a)\n\t\t\ttot = 0\n\t\t\tif a!=0:\n\t\t\t\ttot+=1\n\t\t\tif b!=0:\n\t\t\t\ttot+=1\n\t\t\tel = T[1]+b\n\t\t\tfor j in range(2, n):\n\t\t\t\tif abs((T[j] - el) - p) <= 1:\n\t\t\t\t\tel += p\n\t\t\t\t\tif T[j] != el:\n\t\t\t\t\t\ttot+=1\n\t\t\t\telse:\n\t\t\t\t\tc = False\n\t\t\tif c:\n\t\t\t\tm = min(m, tot)\n\tif m <= n:\n\t\tprint(m)\n\telse:\n\t\tprint(-1)\n", "import sys\nimport operator as op\n\n\nnext(sys.stdin)\n\nxs = list(map(int, next(sys.stdin).rstrip().split()))\n\nif len(xs) <= 2:\n\tprint(0)\n\treturn\n\nfrontier = []\nfrontier.append((0, xs[1] - xs[0], xs[1]))\nfrontier.append((1, xs[1] + 1 - xs[0], xs[1] + 1))\nif xs[1] > 0:\n\tfrontier.append((1, xs[1] - 1 - xs[0], xs[1] - 1))\nif xs[0] > 0:\n\tfrontier.append((1, xs[1] - xs[0] + 1, xs[1]))\nfrontier.append((1, xs[1] - xs[0] - 1, xs[1]))\nif xs[0] > 0:\n\tfrontier.append((2, xs[1] + 1 - xs[0] + 1, xs[1] + 1))\nfrontier.append((2, xs[1] + 1 - xs[0] - 1, xs[1] + 1))\nif xs[0] > 0 and xs[1] > 0:\n\tfrontier.append((2, xs[1] - 1 - xs[0] + 1, xs[1] - 1))\nif xs[1] > 0:\n\tfrontier.append((2, xs[1] - 1 - xs[0] - 1, xs[1] - 1))\n\n\nfor x in xs[2:]:\n\n\tnew_frontier = []\n\n\tfor current, diff, last_x in frontier:\n\n\t\tif diff == x - last_x:\n\t\t\tnew_frontier.append((current, diff, x))\n\t\telif diff == x + 1 - last_x:\n\t\t\tnew_frontier.append((current + 1, diff, x + 1))\n\t\telif x > 0 and (diff == x - 1 - last_x):\n\t\t\tnew_frontier.append((current + 1, diff, x - 1))\n\n\tfrontier = new_frontier\n\tif not frontier:\n\t\tprint(-1)\n\t\treturn\n\nprint(min(frontier, key=op.itemgetter(0))[0])\n", "R = lambda: map(int, input().split())\n\ninf = 10**7\n\nn = int(input())\nb = list(R())\n\ndef f(a):\n\tres = 0\n\n\td = a[1] - a[0]\n\te = a[1]\n\tfor i in range(2, n):\n\t\te += d\n\t\tif abs(a[i] - e) == 1:\n\t\t\tres += 1\n\t\telif a[i] == e:\n\t\t\tcontinue\n\t\telse:\n\t\t\treturn inf\n\treturn res\n\nif n <= 2:\n\tprint(0)\nelse:\n\tres = inf\n\tfor dx in (-1, 0, 1):\n\t\tfor dy in (-1, 0, 1):\n\t\t\tb[0] += dx; b[1] += dy\n\t\t\tres = min(res, f(b) + abs(dx) + abs(dy))\n\t\t\tb[0] -= dx; b[1] -= dy\n\tif res == inf: res = -1\n\tprint(res)\n", "def solve(n, a):\n\tif n <= 2:\n\t\treturn 0\n\n\td = [v - u for u, v in zip(a, a[1:])]\n\n\tmax_d = max(d)\n\tmin_d = min(d)\n\tif max_d - min_d > 4:\n\t\treturn -1\n\n\tmin_cnt = -1\n\tfor d in range(min_d, max_d + 1):\n\t\tfor d0 in range(-1, 2):\n\t\t\ty = a[0] + d0\n\t\t\tvalid = True\n\t\t\tcnt = 0 if d0 == 0 else 1\n\t\t\tfor x in a[1:]:\n\t\t\t\tdx = abs(y + d - x)\n\t\t\t\tif dx > 1:\n\t\t\t\t\tvalid = False\n\t\t\t\t\tbreak\n\n\t\t\t\tcnt += dx\n\t\t\t\ty += d\n\t\t\tif valid:\n\t\t\t\t# print(d)\n\t\t\t\tif cnt < min_cnt or min_cnt < 0:\n\t\t\t\t\tmin_cnt = cnt\n\treturn min_cnt\n\ndef main():\n\tn = int(input())\n\ta = [int(_) for _ in input().split()]\n\n\tans = solve(n, a)\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "def cal(x, y):\n\td = a[1] + y - a[0] - x\n\twk1 = a[1] + y\n\twkans = 0\n\tfor k in range(2,n):\n\t\tdiff = abs((wk1 + d) - a[k])\n\t\tif diff == 1:\n\t\t\twkans += 1\n\t\telif diff > 1:\n\t\t\treturn n + 1\n\t\twk1 += d\n\treturn wkans\n\t\t\t\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n > 2:\n\tans_final = n + 1\n\tfor i in range(-1, 2):\n\t\tfor j in range(-1, 2):\n\t\t\tans_final = min(ans_final, cal(i, j) + abs(i) + abs(j))\nelse:\n\tans_final = 0\nif ans_final == n + 1:\n\tprint(-1)\nelse:\n\tprint(ans_final)\n", "n = int(input())\nb = list(map(int, input().split()))\nind = False\nminimum = 10 ** 10\nz = [[0, -1, 1], [0, -1, 1]]\nif n < 3:\n\tprint(0)\nelse:\n\tfor i in range(3):\n\t\tfor j in range(3):\n\t\t\tcount = 0\n\t\t\tcnt1 = b[0] + z[0][i]\n\t\t\tcnt2 = b[1] + z[1][j]\n\t\t\tif cnt1 != b[0]:\n\t\t\t\tcount += 1\n\t\t\tif cnt2 != b[1]:\n\t\t\t\tcount += 1\n\t\t\td = cnt2 - cnt1\n\t\t\tprev = cnt2\n\t\t\t#print(prev, cnt1, cnt2)\n\t\t\tind1 = True\n\t\t\tfor k in range(2, n):\n\t\t\t\tnew_d = b[k] - prev\n\t\t\t\tif abs(new_d - d) > 1:\n\t\t\t\t\tind1 = False\n\t\t\t\t\t#print(cnt1, cnt2, d,prev, new_d, b[k])\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tif new_d != d:\n\t\t\t\t\t\tq = d + prev\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t\tprev = q\n\t\t\t\t\telse:\n\t\t\t\t\t\tprev = b[k]\n\t\t\tif ind1:\n\t\t\t\tind = True\n\t\t\t\tif count < minimum:\n\t\t\t\t\tminimum = count\n\tif ind:\n\t\tprint(minimum)\n\telse:\n\t\tprint(-1)\t\t\t\n\n\n\n", "n = int(input())\nb = [int(i) for i in input().split()]\n_b = []\n\nif n == 1:\n\tprint(0)\n\treturn\n\ndef check(diff):\n\tcnt = 0\n\tfor i in range(2, n):\n\t\tif b[i] - _b[-1] == diff:\n\t\t\t_b.append(b[i])\n\t\telif b[i] - _b[-1] - 1 == diff:\n\t\t\t_b.append(b[i] - 1)\n\t\t\tcnt += 1\n\t\telif b[i] - _b[-1] + 1 == diff:\n\t\t\t_b.append(b[i] + 1)\n\t\t\tcnt += 1\n\t\telse:\n\t\t\treturn -1\n\treturn cnt\n\nans = n + 1\nd = [-1, 0, 1]\nfor d1 in d:\n\tfor d2 in d:\n\t\t_b = [b[0] + d1, b[1] + d2]\n\t\tcur = check(_b[1] - _b[0])\n\t\tif cur != -1:\n\t\t\tans = min(ans, cur + abs(d1) + abs(d2))\nprint(ans if ans < n + 1 else -1)\n", "n = int(input())\nm = list(map(int, input().split()))\nif n == 1:\n\tprint(0)\nelse:\n\tsost = [-1, 0, 1]\n\tmi = int(1e10)\n\tfor elem in sost:\n\t\tfor elem2 in sost:\n\t\t\tnew_m = m.copy()\n\t\t\tcur_mi = (elem != 0) + (elem2 != 0)\n\t\t\tstart = elem + m[0]\n\t\t\tend = elem2 + m[-1]\n\t\t\tnew_m[0] = start\n\t\t\tnew_m[-1] = end\n\t\t\tf = True\n\t\t\tif abs(start - end) % (n - 1) == 0:\n\t\t\t\tstep = (start - end) // (n - 1) \n\t\t\t\tfor i in range(1, n - 1):\n\t\t\t\t\tif new_m[i - 1] - new_m[i] != step:\n\t\t\t\t\t\tif abs(new_m[i - 1] - new_m[i] - step) == 1:\n\t\t\t\t\t\t\tcur_mi += 1\n\t\t\t\t\t\t\tnew_m[i] += (new_m[i - 1] - new_m[i] - step)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tf = False\n\t\t\t\t\t\t\tbreak\n\t\t\t\tif f:\n\t\t\t\t\tmi = min(mi, cur_mi)\n\tif mi == int(1e10):\n\t\tprint(-1)\n\telse:\n\t\tprint(mi)\n", "n = int(input())\na = list(map(int, input().split()))\n\nif n == 1 or n == 2:\n\tprint(0)\nelse:\n\tdiff = [a[1] - a[0], a[1] + 1 - a[0], a[1] - 1 - a[0],\n\t\t\ta[1] - a[0] + 1, a[1] + 1 - a[0] + 1, a[1] - 1 - a[0] + 1,\n\t\t\ta[1] - a[0] - 1, a[1] + 1 - a[0] - 1, a[1] - 1 - a[0] - 1]\n\n\tflag1 = False\n\tnum = float(\"inf\")\n\tflag = True\n\tpre = a[1]\n\td = diff[0]\n\trec = 0\n\tfor j in range(2, n):\n\t\tif a[j] - pre == d + 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] - 1\n\t\telif a[j] - pre == d - 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] + 1\n\t\telif a[j] - pre == d:\n\t\t\tpre = a[j]\n\t\telse:\n\t\t\tflag = False\n\t\t\tbreak\n\n\tif flag:\n\t\tflag1 = True\n\t\tnum = min(num, rec)\n\n\tflag = True\n\tpre = a[1] + 1\n\td = diff[1]\n\trec = 1\n\tfor j in range(2, n):\n\t\tif a[j] - pre == d + 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] - 1\n\t\telif a[j] - pre == d - 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] + 1\n\t\telif a[j] - pre == d:\n\t\t\tpre = a[j]\n\t\telse:\n\t\t\tflag = False\n\t\t\tbreak\n\n\tif flag:\n\t\tflag1 = True\n\t\tnum = min(num, rec)\n\n\tflag = True\n\tpre = a[1] - 1\n\td = diff[2]\n\trec = 1\n\tfor j in range(2, n):\n\t\tif a[j] - pre == d + 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] - 1\n\t\telif a[j] - pre == d - 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] + 1\n\t\telif a[j] - pre == d:\n\t\t\tpre = a[j]\n\t\telse:\n\t\t\tflag = False\n\t\t\tbreak\n\n\tif flag:\n\t\tflag1 = True\n\t\tnum = min(num, rec)\n\n\tflag = True\n\tpre = a[1]\n\td = diff[3]\n\trec = 1\n\tfor j in range(2, n):\n\t\tif a[j] - pre == d + 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] - 1\n\t\telif a[j] - pre == d - 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] + 1\n\t\telif a[j] - pre == d:\n\t\t\tpre = a[j]\n\t\telse:\n\t\t\tflag = False\n\t\t\tbreak\n\n\tif flag:\n\t\tflag1 = True\n\t\tnum = min(num, rec)\n\n\tflag = True\n\tpre = a[1] + 1\n\td = diff[4]\n\trec = 2\n\tfor j in range(2, n):\n\t\tif a[j] - pre == d + 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] - 1\n\t\telif a[j] - pre == d - 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] + 1\n\t\telif a[j] - pre == d:\n\t\t\tpre = a[j]\n\t\telse:\n\t\t\tflag = False\n\t\t\tbreak\n\n\tif flag:\n\t\tflag1 = True\n\t\tnum = min(num, rec)\n\n\tflag = True\n\tpre = a[1] - 1\n\td = diff[5]\n\trec = 2\n\tfor j in range(2, n):\n\t\tif a[j] - pre == d + 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] - 1\n\t\telif a[j] - pre == d - 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] + 1\n\t\telif a[j] - pre == d:\n\t\t\tpre = a[j]\n\t\telse:\n\t\t\tflag = False\n\t\t\tbreak\n\n\tif flag:\n\t\tflag1 = True\n\t\tnum = min(num, rec)\n\n\tflag = True\n\tpre = a[1]\n\td = diff[6]\n\trec = 1\n\tfor j in range(2, n):\n\t\tif a[j] - pre == d + 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] - 1\n\t\telif a[j] - pre == d - 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] + 1\n\t\telif a[j] - pre == d:\n\t\t\tpre = a[j]\n\t\telse:\n\t\t\tflag = False\n\t\t\tbreak\n\n\tif flag:\n\t\tflag1 = True\n\t\tnum = min(num, rec)\n\n\tflag = True\n\tpre = a[1] + 1\n\td = diff[7]\n\trec = 2\n\tfor j in range(2, n):\n\t\tif a[j] - pre == d + 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] - 1\n\t\telif a[j] - pre == d - 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] + 1\n\t\telif a[j] - pre == d:\n\t\t\tpre = a[j]\n\t\telse:\n\t\t\tflag = False\n\t\t\tbreak\n\n\tif flag:\n\t\tflag1 = True\n\t\tnum = min(num, rec)\n\n\tflag = True\n\tpre = a[1] - 1\n\td = diff[8]\n\trec = 2\n\tfor j in range(2, n):\n\t\tif a[j] - pre == d + 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] - 1\n\t\telif a[j] - pre == d - 1:\n\t\t\trec += 1\n\t\t\tpre = a[j] + 1\n\t\telif a[j] - pre == d:\n\t\t\tpre = a[j]\n\t\telse:\n\t\t\tflag = False\n\t\t\tbreak\n\n\tif flag:\n\t\tflag1 = True\n\t\tnum = min(num, rec)\n\n\tif flag1:\n\t\tprint(num)\n\telse:\n\t\tprint(-1)\n", "n=int(input())\nb=list(map(int,input().split()))\n#print(b)\nl=len(b)\n\nanswer=False\nbest=1e9\nif l<=2:\n\tprint(0)\nelse:    \n\tfor start in [b[0]-1,b[0],b[0]+1]:\n\t\tfor end in [b[-1]-1,b[-1],b[-1]+1]:\n\t\t\td=end-start\n\n\t\t\tcanbe=True\n\t\t\tif d%(l-1)==0:\n\t\t\t\tdiff=d//(l-1)\n\t\t\t\tif d!=0:\n\t\t\t\t\tif diff>0:\n\t\t\t\t\t\tneedseq = list(range(start,end+1,diff))\n\t\t\t\t\telse:\n\t\t\t\t\t\tneedseq = list(range(start,end-1,diff))\n\t\t\t\telse:\n\t\t\t\t\tneedseq=[start]*l\n#                print(needseq)\n\t\t\t\tcount=0\n\t\t\t\tfor s1,s2 in zip(b,needseq):\n\t\t\t\t\tif abs(s1-s2)<=1:\n\t\t\t\t\t\tcount+=abs(s1-s2)\n\t\t\t\t\telse:\n\t\t\t\t\t\tcanbe=False\n\t\t\t\t\t\tbreak\n\t\t\t\tif canbe:\n\t\t\t\t\tbest=min(best,count)\n\t\t\t\t\tanswer=canbe\n\t\t\telse:\n\t\t\t\tanswer=answer or False\n\tif answer and best!=1e9:\n\t\tprint(best)\n\telse:\n\t\tprint(-1)\n\t\t\t\t\n\n\n\n", "n = int(input())\na = [int(x) for x in input().split()]\nvar = [0, -1, 1]\n\nresult = n+1\n\nif n <= 2:\n\tprint(0)\n\treturn\n\nfor x in var:\n\tfor y in var:\n\t\tif result == 0:\n\t\t\tcontinue\n\n\t\tdiffrest = (a[0] + x - (a[n-1] + y)) % (n-1)\n\t\tdiff = -(a[0] + x - (a[n-1] + y)) // (n-1)\n\t\tif diffrest != 0:\n\t\t\tcontinue\n\n\t\tchange = 0 if x == 0 else 1\n\t\tlast = a[0] + x\n\t\ti = 1\n\t\twhile i < n and change <= n:\n\t\t\tnext = last + diff\n\t\t\tab = abs(next - a[i])\n\t\t\tif ab == 1:\n\t\t\t\tchange += 1\n\t\t\telif ab > 1:\n\t\t\t\tchange = n+1\n\t\t\tlast = next\n\t\t\ti += 1\n\t\t\n\t\tif change < result:\n\t\t\tresult = change\n\nprint(result if result <= n else -1)\n", "def count(a):\n\tres = 0\n\tdelta = a[1] - a[0]\n\n\tfor i in range(2, len(a)):\n\t\te = a[i] - a[i - 1] - delta\n\t\tif abs(e) > 1:\n\t\t\treturn -1\n\n\t\tif abs(e) == 1:\n\t\t\ta[i] -= e\n\t\t\tres += 1\n\n\treturn res\n\n\nn = int(input())\nb = list(map(int, input().split()))\nresult = -1\n\nif len(b) == 1:\n\tprint(0)\n\treturn\n\nfor i in range(-1, 2):\n\tfor j in range(-1, 2):\n\t\tcb = b[:]\n\t\tcb[0] += i\n\t\tcb[1] += j\n\n\t\tcur = count(cb)\n\n\t\tif cur == -1:\n\t\t\tcontinue\n\n\t\tcur += abs(i) + abs(j)\n\t\tif result == -1 or (result != -1 and cur < result):\n\t\t\tresult = cur\n\nprint(result)\n", "import sys\n\ndef ff(q, s):\n\tc = 0\n\tsu = 1\n\tfor i in range(1, len(q)):\n\t\tif(q[i] - q[i - 1] - s == 1):\n\t\t\tc += 1\n\t\t\tq[i] = q[i] - 1\n\t\telif(q[i] - q[i - 1] - s == 0):\n\t\t\tpass\n\t\telif(q[i] - q[i - 1] - s == -1):\n\t\t\tc += 1\n\t\t\tq[i] = q[i] + 1\n\t\telse:\n\t\t\tsu = 0\n\t\t\tbreak\n\tif(su == 1):\n\t\treturn c\n\telse:\n\t\treturn -1\n\n_ = input()\nb = list(map(int, input().split()))\ns = 0\nfor i in range(len(b) - 1):\n\ts += b[i + 1] - b[i]\n\nif(len(b) == 1):\n\tprint(0)\n\treturn\nqw = s // (len(b) - 1)\ngg = []\n\n\nq = b[:]\ngg.append(ff(q, qw))\nq = b[:]\ngg.append(ff(q, qw + 1))\n\nq = b[:]\nq[0] = q[0] + 1\nres = ff(q, qw)\nif(res != -1):\n\tgg.append(res + 1)\nq = b[:]\nq[0] = q[0] + 1\nres = ff(q, qw + 1)\nif(res != -1):\n\tgg.append(res + 1)\n\nq = b[:]\nq[0] = q[0] - 1\nres = ff(q, qw)\nif(res != -1):\n\tgg.append(res + 1)\nq = b[:]\nq[0] = q[0] - 1\nres = ff(q, qw + 1)\nif(res != -1):\n\tgg.append(res + 1)\n\ncc = []\nfor i in gg:\n\tif(i != -1):\n\t\tcc.append(i)\nif(cc == []):\n\tprint(-1)\nelse:\n\tprint(min(cc))\n", "m = [0, -1, 1]\n\ndef solve(b):\n\tn = len(b)\n\tif n < 3: return 0\n\tminans = -1\n\tfor ii in range(3):\n\t\tfor jj in range(3):\n\t\t\tb1 = b[0]+m[ii]\n\t\t\tbn = b[n-1]+m[jj]\n\t\t\tdn = bn-b1\n\t\t\tif dn%(n-1) == 0:\n\t\t\t\td = dn//(n-1)\n\t\t\t\tcurrans = 0\n\t\t\t\tfor i in range(n):\n\t\t\t\t\tif b[i] == b1+i*d:\n\t\t\t\t\t\tpass\n\t\t\t\t\telif abs(b[i]-(b1+i*d)) == 1:\n\t\t\t\t\t\tcurrans += 1\n\t\t\t\t\telse:\n\t\t\t\t\t\tcurrans = -1\n\t\t\t\t\t\tbreak\n\t\t\t\tif minans == -1 or currans != -1 and currans < minans:\n\t\t\t\t\tminans = currans\n\treturn minans\n\nn = int(input())\nb = [int(s) for s in input().split()]\n\nprint(solve(b))\n", "n = int(input())\n\nlst = [int(x) for x in input().split()]\n\na = []\nfor x in range(len(lst) - 1):\n\ta.append(lst[x + 1] - lst[x])\n\nif len(a) == 0:\n\tprint(0)\nelse:\n\tmini = min(a)\n\tmaxi = max(a)\n\n\tif maxi - mini > 4:\n\t\tprint(-1)\n\telse:\n\t\tm1 = (maxi + mini) // 2\n\t\tm2 = (maxi + mini + 1) // 2\n\t\tar = []\n\t\t\n\t\tk = 0\n\t\tflag = True\n\t\tfor x in range(1, n):\n\t\t\tif lst[0] + m1 * x != lst[x] and lst[x] - 1 <= lst[0] + m1 * x <= lst[x] + 1:\n\t\t\t\tk += 1\n\t\t\telse:\n\t\t\t\tif lst[0] + m1 * x == lst[x]:\n\t\t\t\t\tcontinue\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tar.append(k)\n\n\t\tk = 0\n\t\tflag = True\n\t\tfor x in range(1, n):\n\t\t\tif lst[0] + m2 * x != lst[x] and lst[x] - 1 <= lst[0] + m2 * x <= lst[x] + 1:\n\t\t\t\tk += 1\n\t\t\telse:\n\t\t\t\tif lst[0] + m2 * x == lst[x]:\n\t\t\t\t\tcontinue\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tar.append(k)\n\n\t\tk = 1\n\t\tflag = True\n\t\tlst[0] -= 1\n\t\tfor x in range(1, n):\n\t\t\tif lst[0] + m1 * x != lst[x] and lst[x] - 1 <= lst[0] + m1 * x <= lst[x] + 1:\n\t\t\t\tk += 1\n\t\t\telse:\n\t\t\t\tif lst[0] + m1 * x == lst[x]:\n\t\t\t\t\tcontinue\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tar.append(k)\n\n\t\tk = 1\n\t\tflag = True\n\t\tfor x in range(1, n):\n\t\t\tif lst[0] + m2 * x != lst[x] and lst[x] - 1 <= lst[0] + m2 * x <= lst[x] + 1:\n\t\t\t\tk += 1\n\t\t\telse:\n\t\t\t\tif lst[0] + m2 * x == lst[x]:\n\t\t\t\t\tcontinue\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tar.append(k)\n\n\t\tk = 1\n\t\tlst[0] += 2\n\t\tflag = True\n\t\tfor x in range(1, n):\n\t\t\tif lst[0] + m1 * x != lst[x] and lst[x] - 1 <= lst[0] + m1 * x <= lst[x] + 1:\n\t\t\t\tk += 1\n\t\t\telse:\n\t\t\t\tif lst[0] + m1 * x == lst[x]:\n\t\t\t\t\tcontinue\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tar.append(k)\n\n\t\tk = 1\n\t\tflag = True\n\t\tfor x in range(1, n):\n\t\t\tif lst[0] + m2 * x != lst[x] and lst[x] - 1 <= lst[0] + m2 * x <= lst[x] + 1:\n\t\t\t\tk += 1\n\t\t\telse:\n\t\t\t\tif lst[0] + m2 * x == lst[x]:\n\t\t\t\t\tcontinue\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tar.append(k)\n\n\t\tif len(ar) != 0:\n\t\t\tprint(min(ar))\n\t\telse:\n\t\t\tprint(-1)\n", "def main():\n\tn = int(input())\n\ta = [int(x) for x in input().split()]\n\n\tif len(a) <= 2:\n\t\tprint(0)\n\t\treturn\n\n\tfinal_ans = n + 1\n\tfor start, change_start in [(a[0], False), (a[0]-1, True), (a[0] + 1, True)]:\n\t\tfor end, change_end in [(a[-1], False), (a[-1]-1, True), (a[-1]+1, True)]:\n\t\t\td, r = divmod(end - start, n-1)\n\t\t\tif r == 0:\n\t\t\t\tb = start\n\t\t\t\tans = 0\n\t\t\t\tif change_start:\n\t\t\t\t\tans += 1\n\t\t\t\tif change_end:\n\t\t\t\t\tans += 1\n\n\t\t\t\timpossible = False\n\t\t\t\tfor i in range(1, n-1):\n\t\t\t\t\tif impossible:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tif a[i] - b == d:\n\t\t\t\t\t\tb += d\n\t\t\t\t\telif a[i] - b == d + 1 or a[i] - b == d - 1:\n\t\t\t\t\t\tans += 1\n\t\t\t\t\t\tb += d\n\t\t\t\t\telse:\n\t\t\t\t\t\timpossible = True\n\n\t\t\t\tif not impossible:\n\t\t\t\t\tfinal_ans = min(final_ans, ans)\n\n\tif final_ans < n + 1:\n\t\tprint(final_ans)\n\telse:\n\t\tprint(-1)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "def solve(seq):\n\tif len(seq) <= 2:\n\t\treturn 0\n\n\tstartings = []\n\tfor x in (-1, 0, 1):\n\t\tfor y in (-1, 0, 1):\n\t\t\tstart = (seq[1] + y,  # first el\n\t\t\t\t\t (seq[0] + x - seq[1] - y),  # delta\n\t\t\t\t\t int(x != 0) + int(y != 0))  # number of changes\n\t\t\tstartings.append(start)\n\n\tchanges = []\n\tfor start in startings:\n\t\tlast_el, delta, num_changes = start\n\t\timpossible = False\n\n\t\tfor x in seq[2:]:\n\t\t\tif last_el - x == delta:\n\t\t\t\tlast_el = x\n\t\t\t\tcontinue\n\t\t\tif last_el - (x - 1) == delta:\n\t\t\t\tlast_el = x - 1\n\t\t\t\tnum_changes += 1\n\t\t\t\tcontinue\n\t\t\tif last_el - (x + 1) == delta:\n\t\t\t\tlast_el = x + 1\n\t\t\t\tnum_changes += 1\n\t\t\t\tcontinue\n\n\t\t\timpossible = True\n\t\t\tbreak\n\n\t\tif not impossible:\n\t\t\tchanges.append(num_changes)\n\n\treturn min(changes or [-1])\n\nif '__main__' == __name__:\n\tinput()\n\tprint(solve(list(map(int, input().strip().split()))))\n\n", "n=int(input())\nb=list(map(int,input().split()))\nlo=n+1\nif n<=2:\n\tprint(0)\n\tquit()\nfor i in range(-1,2):\n\tfor j in range(-1,2):\n\t\tbol,c=1,0\n\t\tif (b[0]+i-b[n-1]-j)%(n-1):\n\t\t\tcontinue\n\t\td=-(b[0]+i-b[n-1]-j)//(n-1)\n\t\tfor k in range(1,n-1):\n\t\t\td0=b[k]-b[0]-i-d*k\n\t\t\tif abs(d0)>1:\n\t\t\t\tbol=0\n\t\t\t\tbreak\n\t\t\telif d0:\n\t\t\t\tc+=1\n\t\tif bol:\n\t\t\tlo=min(c+abs(i)+abs(j),lo)\nif lo>n:\n\tprint(-1)\nelse:\n\tprint(lo)\n", "n = int(input())\nans = 200000\na = list(map(int, input().split()))\n\ndef test(x, y):\n\tif ((a[n - 1] + y) - (a[0] + x)) % (n - 1):\n\t\treturn False\n\tfirst = a[0] + x\n\tlast = a[n - 1] + y\n\td = (last - first) // (n - 1)\n\tfor i in range(1, n - 1):\n\t\tif abs((first + i * d) - a[i]) > 1:\n\t\t\treturn False\n\treturn True\n\ndef find(x, y):\n\tres = abs(x) + abs(y)\n\tfirst = a[0] + x\n\tlast = a[n - 1] + y\n\td = (last - first) // (n - 1)\n\tfor i in range(1, n - 1):\n\t\tif abs((first + i * d) - a[i]):\n\t\t\tres += 1\n\treturn res\n\nif n <= 2:\n\tprint(0)\nelse:\n\tfor i in range(-1, 2):\n\t\tfor j in range(-1, 2):\n\t\t\tif test(i, j):\n\t\t\t\tans = min(ans, find(i, j))\n\tprint(-1 if ans == 200000 else ans)\n", "import copy\ndef right(a):\n\td = a[1] - a[0]\n\tres, f = 0, True\n\tfor i in range(2, len(a)):\n\t\tif a[i] - a[i - 1] == d + 1:\n\t\t\ta[i] -= 1\n\t\t\tres += 1\n\t\telif a[i] - a[i - 1] == d - 1:\n\t\t\ta[i] += 1\n\t\t\tres += 1\n\t\telif a[i] - a[i - 1] != d:\n\t\t\tf = False\n\t\t\tbreak\n\tif not f:\n\t\tres = 10 ** 9\n\treturn res\nn = int(input())\nbs = list(map(int, input().split()))\nif n <= 2:\n\tprint(0)\nelse:\n\tf = n + 1\n\tbs[0] -= 1\n\tbs[1] -= 1\n\tf = min(f, right(bs.copy()) + 2)\n\tbs[1] += 1\n\tf = min(f, right(bs.copy()) + 1)\n\tbs[1] += 1\n\tf = min(f, right(bs.copy()) + 2)\n\tbs[0] += 1\n\tbs[1] -= 2\n\tf = min(f, right(bs.copy()) + 1)\n\tbs[1] += 1\n\tf = min(f, right(bs.copy()))\n\tbs[1] += 1\n\tf = min(f, right(bs.copy()) + 1)\n\tbs[0] += 1\n\tbs[1] -= 2\n\tf = min(f, right(bs.copy()) + 2)\n\tbs[1] += 1\n\tf = min(f, right(bs.copy()) + 1)\n\tbs[1] += 1\n\tf = min(f, right(bs.copy()) + 2)\n\tif f == n + 1:\n\t\tf = -1\n\tprint(f)\n", "n = [int(x) for x in input().rstrip().split()][0]\ndata = [int(x) for x in input().rstrip().split()]\n\nis_found = False\nnudges = [0, -1, 1]\nlast_idx = len(data) - 1\n\nif n <= 2:\n\tprint(0)\n\treturn\nif n == 3:\n\tlast_idx += 1\n\nresult = -1\nfor s_nudge in nudges:\n\tfor e_nudge in nudges:\n\t\ts_val = data[0] + s_nudge\n\t\te_val = data[len(data) - 1] + e_nudge\n\t\tif ((e_val - s_val) % (n-1)) == 0:\n\t\t\tnum_change = abs(e_nudge) + abs(s_nudge)\n\t\t\tdiff = (e_val - s_val) / (n-1)\n\n\t\t\tval = s_val + diff\n\t\t\tfor idx in range(1, last_idx):\n\t\t\t\tvalue = data[idx]\n\t\t\t\tif abs(value - val) == 1:\n\t\t\t\t\tnum_change += 1\n\t\t\t\telif abs(value - val) > 1:\n\t\t\t\t\tbreak\n\n\t\t\t\tval += diff\n\t\t\t\tif idx == last_idx - 1:\n\t\t\t\t\tif result == -1 or result > num_change:\n\t\t\t\t\t\tresult = num_change\nprint(result)\n", "import itertools\n\ndef read_ints():\n\treturn list(map(int, input().strip().split()))\n\ndef read_int():\n\treturn read_ints()[0]\n\n\ndef check(nums, step, pre):\n\tsuma = 0\n\t# print(\"Start: \", step)\n\tfor x in nums:\n\t\ts = pre-x\n\t\t# print(pre, x, s)\n\t\tif abs(step-s) > 1:\n\t\t\t# print(\"BAD\")\n\t\t\traise Exception()\n\t\tif step == s:\n\t\t\tpre = x\n\t\t\tcontinue\n\t\tsuma += 1\n\t\tif pre-(x+1) == step:\n\t\t\tpre = x+1\n\t\telse:\n\t\t\tpre = x-1\n\t# print(\"OK \", suma)\n\treturn suma\n\n\ndef main():\n\tn = read_int()\n\tnums = read_ints()\n\tif n <= 2:\n\t\tprint(0)\n\t\treturn\n\n\tsuma  = 100000000\n\tfor x, y in itertools.product([-1,0,1], [-1,0,1]):\n\t\ta = nums[0]+x\n\t\tb = nums[1]+y\n\t\tdiff = a-b\n\t\ttry:\n\t\t\t# print(x,y)\n\t\t\tsuma = min(suma, check(nums[2:], diff, b)+abs(x)+abs(y))\n\t\texcept Exception as e:\n\t\t\t# print(repr(e))\n\t\t\tpass\n\n\n\tif suma == 100000000:\n\t\tprint(-1)\n\telse:\n\t\tprint(suma)\n\n\n\nmain()\n", "R = lambda:map(int, input().split())\nn = int(input())\nA = list(R())\nif n == 1 or n == 2:\n\tprint(0)\n\tquit()\nminn = int(1e9 + 1)\nfor i in range(-1,2):\n\tfor j in range(-1, 2):\n\t\tif (A[0] + i - A[-1] - j) % (n - 1):\n\t\t\tcontinue\n\t\tf = A[0] + i\n\t\tg = A[-1] + j\n\t\tcnt = abs(i) + abs(j)\n\t\td = (g - f) // (n - 1)\n\t\tfor x in range(1, n - 1):\n\t\t\tf += d\n\t\t\tif abs(f - A[x]) > 1:\n\t\t\t\tbreak\n\t\t\telif abs(f - A[x]) == 1:\n\t\t\t\tcnt += 1\n\t\telse:\n\t\t\tminn = min(minn, cnt)\nif minn == int(1e9 + 1):\n\tprint(-1)\nelse:\n\tprint(minn)\n", "def main():\n\tn = int(input())\n\tarr = list(map(int, input().split()))\n\tif n in {1, 2}:\n\t\tprint(0)\n\t\treturn\n\tx = arr[1] - arr[0]\n\ts = {x, x - 1, x - 2, x + 1, x + 2}\n\tfor i in range(2, n):\n\t\tx = arr[i] - arr[i - 1]\n\t\tnew_s = {x, x - 1, x - 2, x + 1, x + 2}\n\t\ts = s & new_s\n\t\tif not len(s):\n\t\t\tprint(-1)\n\t\t\treturn\n\tans = float('inf')\n\tfor step in s:\n\t\tfor f in [arr[0], arr[0] + 1, arr[0] - 1]:\n\t\t\tnew_arr = [f]\n\t\t\tcnt = 0 if f == arr[0] else 1\n\t\t\tfor i in range(1, n):\n\t\t\t\tnew_arr.append(new_arr[-1] + step)\n\t\t\t\tif abs(new_arr[-1] - arr[i]) > 1:\n\t\t\t\t\tcnt = float('inf')\n\t\t\t\t\tbreak\n\t\t\t\tif new_arr[-1] != arr[i]:\n\t\t\t\t\tcnt += 1\n\t\t\tans = min(ans, cnt)\n\tif ans == float('inf'):\n\t\tprint(-1)\n\telse:\n\t\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n"], "id": "id7816"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7816", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["polycarp", 0], ["likes", 0], ["arithmetic", 0], ["progressions", 0], ["a", 0], ["sequence", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["dots", 0], ["a", 0], ["n", 0], ["is", 0], ["called", 0], ["an", 0], ["arithmetic", 0], ["progression", 0], ["if", 0], ["for", 0], ["each", 0], ["i", 0], ["1", 0], ["le", 0], ["i", 0], ["n", 0], ["the", 0], ["value", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["is", 0], ["the", 0], ["same", 0], ["for", 0], ["example", 0], ["the", 0], ["sequences", 0], ["42", 0], ["5", 0], ["5", 0], ["5", 0], ["2", 0], ["11", 0], ["20", 0], ["29", 0], ["and", 0], ["3", 0], ["2", 0], ["1", 0], ["0", 0], ["are", 0], ["arithmetic", 0], ["progressions", 0], ["but", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["3", 0], ["9", 0], ["and", 0], ["2", 1], ["3", 1], ["1", 1], ["are", 1], ["not", 1], ["it", 1], ["follows", 1], ["from", 1], ["the", 1], ["definition", 1], ["that", 1], ["any", 1], ["sequence", 1], ["of", 1], ["length", 1], ["one", 1], ["or", 1], ["two", 0], ["is", 0], ["an", 0], ["arithmetic", 0], ["progression", 0], ["polycarp", 0], ["found", 0], ["some", 0], ["sequence", 0], ["of", 0], ["positive", 0], ["integers", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["dots", 0], ["b", 0], ["n", 0], ["he", 1], ["agrees", 1], ["to", 1], ["change", 1], ["each", 1], ["element", 1], ["by", 1], ["at", 1], ["most", 1], ["one", 1], ["in", 1], ["the", 1], ["other", 1], ["words", 1], ["for", 1], ["each", 1], ["element", 0], ["there", 0], ["are", 0], ["exactly", 0], ["three", 0], ["options", 0], ["an", 0], ["element", 0], ["can", 0], ["be", 0], ["decreased", 0], ["by", 0], ["1", 0], ["an", 0], ["element", 0], ["can", 0], ["be", 0], ["increased", 0], ["by", 0], ["1", 0], ["an", 1], ["element", 1], ["can", 0], ["be", 0], ["left", 0], ["unchanged", 0], ["determine", 0], ["a", 0], ["minimum", 0], ["possible", 0], ["number", 0], ["of", 0], ["elements", 0], ["in", 0], ["b", 0], ["which", 0], ["can", 0], ["be", 0], ["changed", 0], ["by", 0], ["exactly", 0], ["one", 0], ["so", 0], ["that", 0], ["the", 0], ["sequence", 0], ["b", 0], ["becomes", 1], ["an", 1], ["arithmetic", 1], ["progression", 1], ["or", 1], ["report", 1], ["that", 1], ["it", 1], ["is", 0], ["impossible", 0], ["it", 0], ["is", 0], ["possible", 0], ["that", 0], ["the", 0], ["resulting", 0], ["sequence", 0], ["contains", 0], ["element", 0], ["equals", 0], ["0", 0], ["input", 4], ["the", 4], ["first", 0], ["line", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["100", 0], ["000", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["elements", 0], ["in", 0], ["b", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["a", 0], ["sequence", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["dots", 0], ["b", 0], ["n", 0], ["1", 0], ["le", 0], ["b", 0], ["i", 0], ["le", 0], ["10", 0], ["9", 0], ["output", 0], ["if", 1], ["it", 1], ["is", 1], ["impossible", 1], ["to", 1], ["make", 1], ["an", 1], ["arithmetic", 1], ["progression", 1], ["with", 1], ["described", 1], ["operations", 1], ["print", 1], ["1", 1], ["in", 1], ["the", 1], ["other", 1], ["case", 1], ["print", 1], ["non", 1], ["negative", 1], ["integer", 1], ["—", 1], ["the", 1], ["minimum", 1], ["number", 1], ["of", 1], ["elements", 1], ["to", 1], ["change", 1], ["to", 1], ["make", 1], ["the", 1], ["given", 1], ["sequence", 1], ["becomes", 1], ["an", 1], ["arithmetic", 1], ["progression", 1], ["the", 1], ["only", 1], ["allowed", 1], ["operation", 1], ["is", 1], ["to", 1], ["add", 1], ["to", 1], ["subtract", 1], ["one", 1], ["from", 0], ["an", 0], ["element", 0], ["can", 0], ["t", 0], ["use", 0], ["operation", 0], ["twice", 0], ["to", 0], ["the", 0], ["same", 0], ["position", 0], ["examples", 0], ["input", 0], ["4", 0], ["24", 0], ["21", 0], ["14", 0], ["10", 0], ["output", 0], ["3", 0], ["input", 0], ["2", 0], ["500", 0], ["500", 0], ["output", 0], ["0", 0], ["input", 0], ["3", 0], ["14", 0], ["5", 0], ["1", 0], ["output", 0], ["1", 0], ["input", 0], ["5", 0], ["1", 0], ["3", 0], ["6", 0], ["9", 0], ["12", 0], ["output", 0], ["1", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["example", 0], ["polycarp", 0], ["should", 0], ["increase", 0], ["the", 0], ["first", 0], ["number", 0], ["on", 0], ["1", 0], ["decrease", 0], ["the", 0], ["second", 0], ["number", 0], ["on", 0], ["1", 0], ["increase", 0], ["the", 0], ["third", 0], ["number", 0], ["on", 0], ["1", 0], ["and", 1], ["the", 1], ["fourth", 1], ["number", 1], ["should", 1], ["left", 1], ["unchanged", 1], ["so", 1], ["after", 1], ["polycarp", 1], ["changed", 1], ["three", 1], ["elements", 0], ["by", 0], ["one", 0], ["his", 0], ["sequence", 0], ["became", 0], ["equals", 0], ["to", 0], ["25", 1], ["20", 1], ["15", 1], ["10", 1], ["which", 1], ["is", 1], ["an", 1], ["arithmetic", 1], ["progression", 1], ["in", 1], ["the", 1], ["second", 1], ["example", 1], ["polycarp", 1], ["should", 1], ["not", 1], ["change", 1], ["anything", 1], ["because", 1], ["his", 1], ["sequence", 1], ["is", 1], ["an", 1], ["arithmetic", 1], ["progression", 1], ["in", 0], ["the", 0], ["third", 0], ["example", 0], ["it", 0], ["is", 0], ["impossible", 0], ["to", 0], ["make", 0], ["an", 0], ["arithmetic", 0], ["progression", 0], ["in", 0], ["the", 0], ["fourth", 0], ["example", 0], ["polycarp", 0], ["should", 0], ["change", 0], ["only", 0], ["the", 0], ["first", 0], ["element", 0], ["he", 0], ["should", 0], ["decrease", 0], ["it", 0], ["on", 0], ["one", 0], ["after", 0], ["that", 0], ["his", 0], ["sequence", 0], ["will", 0], ["looks", 0], ["like", 0], ["0", 0], ["3", 0], ["6", 0], ["9", 0], ["12", 0], ["which", 0], ["is", 0], ["an", 0], ["arithmetic", 0], ["progression", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.30184331797235026, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.29838709677419356, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.476457399103139, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.30184331797235026, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.29838709677419356, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.476457399103139, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["t", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["i", 0], ["int", 0], ["t", 0], ["i", 0], ["m", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["a", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["for", 0], ["b", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["c", 0], ["true", 0], ["p", 0], ["t", 0], ["1", 0], ["b", 0], ["t", 0], ["0", 0], ["a", 0], ["tot", 0], ["0", 0], ["if", 0], ["a", 0], ["0", 0], ["tot", 0], ["1", 0], ["if", 0], ["b", 0], ["0", 0], ["tot", 0], ["1", 0], ["el", 0], ["t", 0], ["1", 0], ["b", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["abs", 0], ["t", 0], ["j", 0], ["el", 0], ["p", 0], ["1", 0], ["el", 0], ["p", 0], ["if", 0], ["t", 0], ["j", 0], ["el", 0], ["tot", 0], ["1", 0], ["else", 0], ["c", 0], ["false", 0], ["if", 0], ["c", 0], ["m", 0], ["min", 0], ["m", 0], ["tot", 0], ["if", 0], ["m", 0], ["n", 0], ["print", 0], ["m", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["sys", 0], ["import", 0], ["operator", 0], ["as", 0], ["op", 0], ["next", 0], ["sys", 0], ["stdin", 0], ["xs", 0], ["list", 0], ["map", 0], ["int", 0], ["next", 0], ["sys", 0], ["stdin", 0], ["rstrip", 0], ["split", 0], ["if", 0], ["len", 0], ["xs", 0], ["2", 0], ["print", 0], ["0", 0], ["return", 0], ["frontier", 0], ["frontier", 0], ["append", 0], ["0", 0], ["xs", 0], ["1", 0], ["xs", 0], ["0", 0], ["xs", 0], ["1", 0], ["frontier", 0], ["append", 0], ["1", 0], ["xs", 0], ["1", 0], ["1", 0], ["xs", 0], ["0", 0], ["xs", 0], ["1", 0], ["1", 0], ["if", 0], ["xs", 0], ["1", 0], ["0", 0], ["frontier", 0], ["append", 0], ["1", 0], ["xs", 0], ["1", 0], ["1", 0], ["xs", 0], ["0", 0], ["xs", 0], ["1", 0], ["1", 0], ["if", 0], ["xs", 0], ["0", 0], ["0", 0], ["frontier", 0], ["append", 0], ["1", 0], ["xs", 0], ["1", 0], ["xs", 0], ["0", 0], ["1", 0], ["xs", 0], ["1", 0], ["frontier", 0], ["append", 0], ["1", 0], ["xs", 0], ["1", 0], ["xs", 0], ["0", 0], ["1", 0], ["xs", 0], ["1", 0], ["if", 0], ["xs", 0], ["0", 0], ["0", 0], ["frontier", 0], ["append", 0], ["2", 0], ["xs", 0], ["1", 0], ["1", 0], ["xs", 0], ["0", 0], ["1", 0], ["xs", 0], ["1", 0], ["1", 0], ["frontier", 0], ["append", 0], ["2", 0], ["xs", 0], ["1", 0], ["1", 0], ["xs", 0], ["0", 0], ["1", 0], ["xs", 0], ["1", 0], ["1", 0], ["if", 0], ["xs", 0], ["0", 0], ["0", 0], ["and", 0], ["xs", 0], ["1", 0], ["0", 0], ["frontier", 0], ["append", 0], ["2", 0], ["xs", 0], ["1", 0], ["1", 0], ["xs", 0], ["0", 0], ["1", 0], ["xs", 0], ["1", 0], ["1", 0], ["if", 0], ["xs", 0], ["1", 0], ["0", 0], ["frontier", 0], ["append", 0], ["2", 0], ["xs", 0], ["1", 0], ["1", 0], ["xs", 0], ["0", 0], ["1", 0], ["xs", 0], ["1", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["xs", 0], ["2", 0], ["new", 0], ["frontier", 0], ["for", 0], ["current", 0], ["diff", 0], ["last", 0], ["x", 0], ["in", 0], ["frontier", 0], ["if", 0], ["diff", 0], ["x", 0], ["last", 0], ["x", 0], ["new", 0], ["frontier", 0], ["append", 0], ["current", 0], ["diff", 0], ["x", 0], ["elif", 0], ["diff", 0], ["x", 0], ["1", 0], ["last", 0], ["x", 0], ["new", 0], ["frontier", 0], ["append", 0], ["current", 0], ["1", 0], ["diff", 0], ["x", 0], ["1", 0], ["elif", 0], ["x", 0], ["0", 0], ["and", 0], ["diff", 0], ["x", 0], ["1", 0], ["last", 0], ["x", 0], ["new", 0], ["frontier", 0], ["append", 0], ["current", 0], ["1", 0], ["diff", 0], ["x", 0], ["1", 0], ["frontier", 0], ["new", 0], ["frontier", 0], ["if", 0], ["not", 0], ["frontier", 0], ["print", 0], ["1", 0], ["return", 0], ["print", 0], ["min", 0], ["frontier", 0], ["key", 0], ["op", 0], ["itemgetter", 0], ["0", 0], ["0", 0], ["r", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["inf", 0], ["10", 0], ["7", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["r", 0], ["def", 0], ["f", 0], ["a", 0], ["res", 0], ["0", 0], ["d", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["e", 0], ["a", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["e", 0], ["d", 0], ["if", 0], ["abs", 0], ["a", 0], ["i", 0], ["e", 0], ["1", 0], ["res", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["e", 0], ["continue", 0], ["else", 0], ["return", 0], ["inf", 0], ["return", 0], ["res", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["res", 0], ["inf", 0], ["for", 0], ["dx", 0], ["in", 0], ["1", 0], ["0", 0], ["1", 0], ["for", 0], ["dy", 0], ["in", 0], ["1", 0], ["0", 0], ["1", 0], ["b", 0], ["0", 0], ["dx", 0], ["b", 0], ["1", 0], ["dy", 0], ["res", 0], ["min", 0], ["res", 0], ["f", 0], ["b", 0], ["abs", 0], ["dx", 0], ["abs", 0], ["dy", 0], ["b", 0], ["0", 0], ["dx", 0], ["b", 0], ["1", 0], ["dy", 0], ["if", 0], ["res", 0], ["inf", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["def", 0], ["solve", 0], ["n", 0], ["a", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["0", 0], ["d", 0], ["v", 0], ["u", 0], ["for", 0], ["u", 0], ["v", 0], ["in", 0], ["zip", 0], ["a", 0], ["a", 0], ["1", 0], ["max", 0], ["d", 0], ["max", 0], ["d", 0], ["min", 0], ["d", 0], ["min", 0], ["d", 0], ["if", 0], ["max", 0], ["d", 0], ["min", 0], ["d", 0], ["4", 0], ["return", 0], ["1", 0], ["min", 0], ["cnt", 0], ["1", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["min", 0], ["d", 0], ["max", 0], ["d", 0], ["1", 0], ["for", 0], ["d0", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["y", 0], ["a", 0], ["0", 0], ["d0", 0], ["valid", 0], ["true", 0], ["cnt", 0], ["0", 0], ["if", 0], ["d0", 0], ["0", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["1", 0], ["dx", 0], ["abs", 0], ["y", 0], ["d", 0], ["x", 0], ["if", 0], ["dx", 0], ["1", 0], ["valid", 0], ["false", 0], ["break", 0], ["cnt", 0], ["dx", 0], ["y", 0], ["d", 0], ["if", 0], ["valid", 0], ["print", 0], ["d", 0], ["if", 0], ["cnt", 0], ["min", 0], ["cnt", 0], ["or", 0], ["min", 0], ["cnt", 0], ["0", 0], ["min", 0], ["cnt", 0], ["cnt", 0], ["return", 0], ["min", 0], ["cnt", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["solve", 0], ["n", 0], ["a", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["cal", 0], ["x", 0], ["y", 0], ["d", 0], ["a", 0], ["1", 0], ["y", 0], ["a", 0], ["0", 0], ["x", 0], ["wk1", 0], ["a", 0], ["1", 0], ["y", 0], ["wkans", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["diff", 0], ["abs", 0], ["wk1", 0], ["d", 0], ["a", 0], ["k", 0], ["if", 0], ["diff", 0], ["1", 0], ["wkans", 0], ["1", 0], ["elif", 0], ["diff", 0], ["1", 0], ["return", 0], ["n", 0], ["1", 0], ["wk1", 0], ["d", 0], ["return", 0], ["wkans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["2", 0], ["ans", 0], ["final", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["ans", 0], ["final", 0], ["min", 0], ["ans", 0], ["final", 0], ["cal", 0], ["i", 0], ["j", 0], ["abs", 0], ["i", 0], ["abs", 0], ["j", 0], ["else", 0], ["ans", 0], ["final", 0], ["0", 0], ["if", 0], ["ans", 0], ["final", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["ans", 0], ["final", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ind", 0], ["false", 0], ["minimum", 0], ["10", 0], ["10", 0], ["z", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["if", 0], ["n", 0], ["3", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["count", 0], ["0", 0], ["cnt1", 0], ["b", 0], ["0", 0], ["z", 0], ["0", 0], ["i", 0], ["cnt2", 0], ["b", 0], ["1", 0], ["z", 0], ["1", 0], ["j", 0], ["if", 0], ["cnt1", 0], ["b", 0], ["0", 0], ["count", 0], ["1", 0], ["if", 0], ["cnt2", 0], ["b", 0], ["1", 0], ["count", 0], ["1", 0], ["d", 0], ["cnt2", 0], ["cnt1", 0], ["prev", 0], ["cnt2", 0], ["print", 0], ["prev", 0], ["cnt1", 0], ["cnt2", 0], ["ind1", 0], ["true", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["new", 0], ["d", 0], ["b", 0], ["k", 0], ["prev", 0], ["if", 0], ["abs", 0], ["new", 0], ["d", 0], ["d", 0], ["1", 0], ["ind1", 0], ["false", 0], ["print", 0], ["cnt1", 0], ["cnt2", 0], ["d", 0], ["prev", 0], ["new", 0], ["d", 0], ["b", 0], ["k", 0], ["break", 0], ["else", 0], ["if", 0], ["new", 0], ["d", 0], ["d", 0], ["q", 0], ["d", 0], ["prev", 0], ["count", 0], ["1", 0], ["prev", 0], ["q", 0], ["else", 0], ["prev", 0], ["b", 0], ["k", 0], ["if", 0], ["ind1", 0], ["ind", 0], ["true", 0], ["if", 0], ["count", 0], ["minimum", 0], ["minimum", 0], ["count", 0], ["if", 0], ["ind", 0], ["print", 0], ["minimum", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["0", 0], ["return", 0], ["def", 0], ["check", 0], ["diff", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["b", 0], ["1", 0], ["diff", 0], ["b", 0], ["append", 0], ["b", 0], ["i", 0], ["elif", 0], ["b", 0], ["i", 0], ["b", 0], ["1", 0], ["1", 0], ["diff", 0], ["b", 0], ["append", 0], ["b", 0], ["i", 0], ["1", 0], ["cnt", 0], ["1", 0], ["elif", 0], ["b", 0], ["i", 0], ["b", 0], ["1", 0], ["1", 0], ["diff", 0], ["b", 0], ["append", 0], ["b", 0], ["i", 0], ["1", 0], ["cnt", 0], ["1", 0], ["else", 0], ["return", 0], ["1", 0], ["return", 0], ["cnt", 0], ["ans", 0], ["n", 0], ["1", 0], ["d", 0], ["1", 0], ["0", 0], ["1", 0], ["for", 0], ["d1", 0], ["in", 0], ["d", 0], ["for", 0], ["d2", 0], ["in", 0], ["d", 0], ["b", 0], ["b", 0], ["0", 0], ["d1", 0], ["b", 0], ["1", 0], ["d2", 0], ["cur", 0], ["check", 0], ["b", 0], ["1", 0], ["b", 0], ["0", 0], ["if", 0], ["cur", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["cur", 0], ["abs", 0], ["d1", 0], ["abs", 0], ["d2", 0], ["print", 0], ["ans", 0], ["if", 0], ["ans", 0], ["n", 0], ["1", 0], ["else", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["sost", 0], ["1", 0], ["0", 0], ["1", 0], ["mi", 0], ["int", 0], ["1e10", 0], ["for", 0], ["elem", 0], ["in", 0], ["sost", 0], ["for", 0], ["elem2", 0], ["in", 0], ["sost", 0], ["new", 0], ["m", 0], ["m", 0], ["copy", 0], ["cur", 0], ["mi", 0], ["elem", 0], ["0", 0], ["elem2", 0], ["0", 0], ["start", 0], ["elem", 0], ["m", 0], ["0", 0], ["end", 0], ["elem2", 0], ["m", 0], ["1", 0], ["new", 0], ["m", 0], ["0", 0], ["start", 0], ["new", 0], ["m", 0], ["1", 0], ["end", 0], ["f", 0], ["true", 0], ["if", 0], ["abs", 0], ["start", 0], ["end", 0], ["n", 0], ["1", 0], ["0", 0], ["step", 0], ["start", 0], ["end", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["new", 0], ["m", 0], ["i", 0], ["1", 0], ["new", 0], ["m", 0], ["i", 0], ["step", 0], ["if", 0], ["abs", 0], ["new", 0], ["m", 0], ["i", 0], ["1", 0], ["new", 0], ["m", 0], ["i", 0], ["step", 0], ["1", 0], ["cur", 0], ["mi", 0], ["1", 0], ["new", 0], ["m", 0], ["i", 0], ["new", 0], ["m", 0], ["i", 0], ["1", 0], ["new", 0], ["m", 0], ["i", 0], ["step", 0], ["else", 0], ["f", 0], ["false", 0], ["break", 0], ["if", 0], ["f", 0], ["mi", 0], ["min", 0], ["mi", 0], ["cur", 0], ["mi", 0], ["if", 0], ["mi", 0], ["int", 0], ["1e10", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["mi", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["or", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["diff", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["1", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["1", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 1], ["a", 4], ["0", 1], ["1", 2], ["a", 0], ["1", 0], ["1", 1], ["a", 1], ["0", 1], ["1", 0], ["a", 0], ["1", 0], ["1", 0], ["a", 0], ["0", 0], ["1", 0], ["a", 0], ["1", 1], ["a", 4], ["0", 1], ["1", 2], ["a", 0], ["1", 0], ["1", 0], ["a", 0], ["0", 0], ["1", 0], ["a", 0], ["1", 0], ["1", 0], ["a", 0], ["0", 0], ["1", 0], ["flag1", 0], ["false", 0], ["num", 0], ["float", 0], ["inf", 0], ["flag", 0], ["true", 0], ["pre", 0], ["a", 0], ["1", 0], ["d", 0], ["diff", 0], ["0", 0], ["rec", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["pre", 0], ["a", 0], ["j", 0], ["else", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["flag1", 0], ["true", 0], ["num", 0], ["min", 0], ["num", 0], ["rec", 0], ["flag", 0], ["true", 0], ["pre", 0], ["a", 0], ["1", 0], ["1", 0], ["d", 0], ["diff", 0], ["1", 0], ["rec", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["pre", 0], ["a", 0], ["j", 0], ["else", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["flag1", 0], ["true", 0], ["num", 0], ["min", 0], ["num", 0], ["rec", 0], ["flag", 0], ["true", 0], ["pre", 0], ["a", 0], ["1", 0], ["1", 0], ["d", 0], ["diff", 0], ["2", 0], ["rec", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["pre", 0], ["a", 0], ["j", 0], ["else", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["flag1", 0], ["true", 0], ["num", 0], ["min", 0], ["num", 0], ["rec", 0], ["flag", 0], ["true", 0], ["pre", 0], ["a", 0], ["1", 0], ["d", 0], ["diff", 0], ["3", 0], ["rec", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["pre", 0], ["a", 0], ["j", 0], ["else", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["flag1", 0], ["true", 0], ["num", 0], ["min", 0], ["num", 0], ["rec", 0], ["flag", 0], ["true", 0], ["pre", 0], ["a", 0], ["1", 0], ["1", 0], ["d", 0], ["diff", 0], ["4", 0], ["rec", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["pre", 0], ["a", 0], ["j", 0], ["else", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["flag1", 0], ["true", 0], ["num", 0], ["min", 0], ["num", 0], ["rec", 0], ["flag", 0], ["true", 0], ["pre", 0], ["a", 0], ["1", 0], ["1", 0], ["d", 0], ["diff", 0], ["5", 0], ["rec", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["pre", 0], ["a", 0], ["j", 0], ["else", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["flag1", 0], ["true", 0], ["num", 0], ["min", 0], ["num", 0], ["rec", 0], ["flag", 0], ["true", 0], ["pre", 0], ["a", 0], ["1", 0], ["d", 0], ["diff", 0], ["6", 0], ["rec", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["pre", 0], ["a", 0], ["j", 0], ["else", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["flag1", 0], ["true", 0], ["num", 0], ["min", 0], ["num", 0], ["rec", 0], ["flag", 0], ["true", 0], ["pre", 0], ["a", 0], ["1", 0], ["1", 0], ["d", 0], ["diff", 0], ["7", 0], ["rec", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["pre", 0], ["a", 0], ["j", 0], ["else", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["flag1", 0], ["true", 0], ["num", 0], ["min", 0], ["num", 0], ["rec", 0], ["flag", 0], ["true", 0], ["pre", 0], ["a", 0], ["1", 0], ["1", 0], ["d", 0], ["diff", 0], ["8", 0], ["rec", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["1", 0], ["rec", 0], ["1", 0], ["pre", 0], ["a", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["j", 0], ["pre", 0], ["d", 0], ["pre", 0], ["a", 0], ["j", 0], ["else", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["flag1", 0], ["true", 0], ["num", 0], ["min", 0], ["num", 0], ["rec", 0], ["if", 0], ["flag1", 0], ["print", 0], ["num", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["b", 0], ["l", 0], ["len", 0], ["b", 0], ["answer", 0], ["false", 0], ["best", 0], ["1e9", 0], ["if", 0], ["l", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["start", 0], ["in", 0], ["b", 0], ["0", 0], ["1", 0], ["b", 0], ["0", 0], ["b", 0], ["0", 0], ["1", 0], ["for", 0], ["end", 0], ["in", 0], ["b", 0], ["1", 0], ["1", 0], ["b", 0], ["1", 0], ["b", 0], ["1", 0], ["1", 0], ["d", 0], ["end", 0], ["start", 0], ["canbe", 0], ["true", 0], ["if", 0], ["d", 0], ["l", 0], ["1", 0], ["0", 0], ["diff", 0], ["d", 0], ["l", 0], ["1", 0], ["if", 0], ["d", 0], ["0", 0], ["if", 0], ["diff", 0], ["0", 0], ["needseq", 0], ["list", 0], ["range", 0], ["start", 0], ["end", 0], ["1", 0], ["diff", 0], ["else", 0], ["needseq", 0], ["list", 0], ["range", 0], ["start", 0], ["end", 0], ["1", 0], ["diff", 0], ["else", 0], ["needseq", 0], ["start", 0], ["l", 0], ["print", 0], ["needseq", 0], ["count", 0], ["0", 0], ["for", 0], ["s1", 0], ["s2", 0], ["in", 0], ["zip", 0], ["b", 0], ["needseq", 0], ["if", 0], ["abs", 0], ["s1", 0], ["s2", 0], ["1", 0], ["count", 0], ["abs", 0], ["s1", 0], ["s2", 0], ["else", 0], ["canbe", 0], ["false", 0], ["break", 0], ["if", 0], ["canbe", 0], ["best", 0], ["min", 0], ["best", 0], ["count", 0], ["answer", 0], ["canbe", 0], ["else", 0], ["answer", 0], ["answer", 0], ["or", 0], ["false", 0], ["if", 0], ["answer", 0], ["and", 0], ["best", 0], ["1e9", 0], ["print", 0], ["best", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["var", 0], ["0", 0], ["1", 0], ["1", 0], ["result", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["return", 0], ["for", 0], ["x", 0], ["in", 0], ["var", 0], ["for", 0], ["y", 0], ["in", 0], ["var", 0], ["if", 0], ["result", 0], ["0", 0], ["continue", 0], ["diffrest", 0], ["a", 0], ["0", 0], ["x", 0], ["a", 0], ["n", 0], ["1", 0], ["y", 0], ["n", 0], ["1", 0], ["diff", 0], ["a", 0], ["0", 0], ["x", 0], ["a", 0], ["n", 0], ["1", 0], ["y", 0], ["n", 0], ["1", 0], ["if", 0], ["diffrest", 0], ["0", 0], ["continue", 0], ["change", 0], ["0", 0], ["if", 0], ["x", 0], ["0", 0], ["else", 0], ["1", 0], ["last", 0], ["a", 0], ["0", 0], ["x", 0], ["i", 0], ["1", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["change", 0], ["n", 0], ["next", 0], ["last", 0], ["diff", 0], ["ab", 0], ["abs", 0], ["next", 0], ["a", 0], ["i", 0], ["if", 0], ["ab", 0], ["1", 0], ["change", 0], ["1", 0], ["elif", 0], ["ab", 0], ["1", 0], ["change", 0], ["n", 0], ["1", 0], ["last", 0], ["next", 0], ["i", 0], ["1", 0], ["if", 0], ["change", 0], ["result", 0], ["result", 0], ["change", 0], ["print", 0], ["result", 0], ["if", 0], ["result", 0], ["n", 0], ["else", 0], ["1", 0], ["def", 0], ["count", 0], ["a", 0], ["res", 0], ["0", 0], ["delta", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["len", 0], ["a", 0], ["e", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["delta", 0], ["if", 0], ["abs", 0], ["e", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["abs", 0], ["e", 0], ["1", 0], ["a", 0], ["i", 0], ["e", 0], ["res", 0], ["1", 0], ["return", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["result", 0], ["1", 0], ["if", 0], ["len", 0], ["b", 0], ["1", 0], ["print", 0], ["0", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["cb", 0], ["b", 0], ["cb", 0], ["0", 0], ["i", 0], ["cb", 0], ["1", 0], ["j", 0], ["cur", 0], ["count", 0], ["cb", 0], ["if", 0], ["cur", 0], ["1", 0], ["continue", 0], ["cur", 0], ["abs", 0], ["i", 0], ["abs", 0], ["j", 0], ["if", 0], ["result", 0], ["1", 0], ["or", 0], ["result", 0], ["1", 0], ["and", 0], ["cur", 0], ["result", 0], ["result", 0], ["cur", 0], ["print", 0], ["result", 0], ["import", 0], ["sys", 0], ["def", 0], ["ff", 0], ["q", 0], ["s", 0], ["c", 0], ["0", 0], ["su", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["q", 0], ["if", 0], ["q", 0], ["i", 0], ["q", 0], ["i", 0], ["1", 0], ["s", 0], ["1", 0], ["c", 0], ["1", 0], ["q", 0], ["i", 0], ["q", 0], ["i", 0], ["1", 0], ["elif", 0], ["q", 0], ["i", 0], ["q", 0], ["i", 0], ["1", 0], ["s", 0], ["0", 0], ["pass", 0], ["elif", 0], ["q", 0], ["i", 0], ["q", 0], ["i", 0], ["1", 0], ["s", 0], ["1", 0], ["c", 0], ["1", 0], ["q", 0], ["i", 0], ["q", 0], ["i", 0], ["1", 0], ["else", 0], ["su", 0], ["0", 0], ["break", 0], ["if", 0], ["su", 0], ["1", 0], ["return", 0], ["c", 0], ["else", 0], ["return", 0], ["1", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["b", 0], ["1", 0], ["s", 0], ["b", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["if", 0], ["len", 0], ["b", 0], ["1", 0], ["print", 0], ["0", 0], ["return", 0], ["qw", 0], ["s", 0], ["len", 0], ["b", 0], ["1", 0], ["gg", 0], ["q", 0], ["b", 0], ["gg", 0], ["append", 0], ["ff", 0], ["q", 0], ["qw", 0], ["q", 0], ["b", 0], ["gg", 0], ["append", 0], ["ff", 0], ["q", 0], ["qw", 0], ["1", 0], ["q", 0], ["b", 0], ["q", 0], ["0", 0], ["q", 0], ["0", 0], ["1", 0], ["res", 0], ["ff", 0], ["q", 0], ["qw", 0], ["if", 0], ["res", 0], ["1", 0], ["gg", 0], ["append", 0], ["res", 0], ["1", 0], ["q", 0], ["b", 0], ["q", 0], ["0", 0], ["q", 0], ["0", 0], ["1", 0], ["res", 0], ["ff", 0], ["q", 0], ["qw", 0], ["1", 0], ["if", 0], ["res", 0], ["1", 0], ["gg", 0], ["append", 0], ["res", 0], ["1", 0], ["q", 0], ["b", 0], ["q", 0], ["0", 0], ["q", 0], ["0", 0], ["1", 0], ["res", 0], ["ff", 0], ["q", 0], ["qw", 0], ["if", 0], ["res", 0], ["1", 0], ["gg", 0], ["append", 0], ["res", 0], ["1", 0], ["q", 0], ["b", 0], ["q", 0], ["0", 0], ["q", 0], ["0", 0], ["1", 0], ["res", 0], ["ff", 0], ["q", 0], ["qw", 0], ["1", 0], ["if", 0], ["res", 0], ["1", 0], ["gg", 0], ["append", 0], ["res", 0], ["1", 0], ["cc", 0], ["for", 0], ["i", 0], ["in", 0], ["gg", 0], ["if", 0], ["i", 0], ["1", 0], ["cc", 0], ["append", 0], ["i", 0], ["if", 0], ["cc", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["min", 0], ["cc", 0], ["m", 0], ["0", 0], ["1", 0], ["1", 0], ["def", 0], ["solve", 0], ["b", 0], ["n", 0], ["len", 0], ["b", 0], ["if", 0], ["n", 0], ["3", 0], ["return", 0], ["0", 0], ["minans", 0], ["1", 0], ["for", 0], ["ii", 0], ["in", 0], ["range", 0], ["3", 0], ["for", 0], ["jj", 0], ["in", 0], ["range", 0], ["3", 0], ["b1", 0], ["b", 0], ["0", 0], ["m", 0], ["ii", 0], ["bn", 0], ["b", 0], ["n", 0], ["1", 0], ["m", 0], ["jj", 0], ["dn", 0], ["bn", 0], ["b1", 0], ["if", 0], ["dn", 0], ["n", 0], ["1", 0], ["0", 0], ["d", 0], ["dn", 0], ["n", 0], ["1", 0], ["currans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["b1", 0], ["i", 0], ["d", 0], ["pass", 0], ["elif", 0], ["abs", 0], ["b", 0], ["i", 0], ["b1", 0], ["i", 0], ["d", 0], ["1", 0], ["currans", 0], ["1", 0], ["else", 0], ["currans", 0], ["1", 0], ["break", 0], ["if", 0], ["minans", 0], ["1", 0], ["or", 0], ["currans", 0], ["1", 0], ["and", 0], ["currans", 0], ["minans", 0], ["minans", 0], ["currans", 0], ["return", 0], ["minans", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["solve", 0], ["b", 0], ["n", 0], ["int", 0], ["input", 0], ["lst", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["len", 0], ["lst", 0], ["1", 0], ["a", 0], ["append", 0], ["lst", 0], ["x", 0], ["1", 0], ["lst", 0], ["x", 0], ["if", 0], ["len", 0], ["a", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["mini", 0], ["min", 0], ["a", 0], ["maxi", 0], ["max", 0], ["a", 0], ["if", 0], ["maxi", 0], ["mini", 0], ["4", 0], ["print", 0], ["1", 0], ["else", 0], ["m1", 0], ["maxi", 0], ["mini", 0], ["2", 0], ["m2", 0], ["maxi", 0], ["mini", 0], ["1", 0], ["2", 0], ["ar", 0], ["k", 0], ["0", 0], ["flag", 0], ["true", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["lst", 0], ["0", 0], ["m1", 0], ["x", 0], ["lst", 0], ["x", 0], ["and", 0], ["lst", 0], ["x", 0], ["1", 0], ["lst", 0], ["0", 0], ["m1", 0], ["x", 0], ["lst", 0], ["x", 0], ["1", 0], ["k", 0], ["1", 0], ["else", 0], ["if", 0], ["lst", 0], ["0", 0], ["m1", 0], ["x", 0], ["lst", 0], ["x", 0], ["continue", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["ar", 0], ["append", 0], ["k", 0], ["k", 0], ["0", 0], ["flag", 0], ["true", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["lst", 0], ["0", 0], ["m2", 0], ["x", 0], ["lst", 0], ["x", 0], ["and", 0], ["lst", 0], ["x", 0], ["1", 0], ["lst", 0], ["0", 0], ["m2", 0], ["x", 0], ["lst", 0], ["x", 0], ["1", 0], ["k", 0], ["1", 0], ["else", 0], ["if", 0], ["lst", 0], ["0", 0], ["m2", 0], ["x", 0], ["lst", 0], ["x", 0], ["continue", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["ar", 0], ["append", 0], ["k", 0], ["k", 0], ["1", 0], ["flag", 0], ["true", 0], ["lst", 0], ["0", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["lst", 0], ["0", 0], ["m1", 0], ["x", 0], ["lst", 0], ["x", 0], ["and", 0], ["lst", 0], ["x", 0], ["1", 0], ["lst", 0], ["0", 0], ["m1", 0], ["x", 0], ["lst", 0], ["x", 0], ["1", 0], ["k", 0], ["1", 0], ["else", 0], ["if", 0], ["lst", 0], ["0", 0], ["m1", 0], ["x", 0], ["lst", 0], ["x", 0], ["continue", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["ar", 0], ["append", 0], ["k", 0], ["k", 0], ["1", 0], ["flag", 0], ["true", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["lst", 0], ["0", 0], ["m2", 0], ["x", 0], ["lst", 0], ["x", 0], ["and", 0], ["lst", 0], ["x", 0], ["1", 0], ["lst", 0], ["0", 0], ["m2", 0], ["x", 0], ["lst", 0], ["x", 0], ["1", 0], ["k", 0], ["1", 0], ["else", 0], ["if", 0], ["lst", 0], ["0", 0], ["m2", 0], ["x", 0], ["lst", 0], ["x", 0], ["continue", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["ar", 0], ["append", 0], ["k", 0], ["k", 0], ["1", 0], ["lst", 0], ["0", 0], ["2", 0], ["flag", 0], ["true", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["lst", 0], ["0", 0], ["m1", 0], ["x", 0], ["lst", 0], ["x", 0], ["and", 0], ["lst", 0], ["x", 0], ["1", 0], ["lst", 0], ["0", 0], ["m1", 0], ["x", 0], ["lst", 0], ["x", 0], ["1", 0], ["k", 0], ["1", 0], ["else", 0], ["if", 0], ["lst", 0], ["0", 0], ["m1", 0], ["x", 0], ["lst", 0], ["x", 0], ["continue", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["ar", 0], ["append", 0], ["k", 0], ["k", 0], ["1", 0], ["flag", 0], ["true", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["lst", 0], ["0", 0], ["m2", 0], ["x", 0], ["lst", 0], ["x", 0], ["and", 0], ["lst", 0], ["x", 0], ["1", 0], ["lst", 0], ["0", 0], ["m2", 0], ["x", 0], ["lst", 0], ["x", 0], ["1", 0], ["k", 0], ["1", 0], ["else", 0], ["if", 0], ["lst", 0], ["0", 0], ["m2", 0], ["x", 0], ["lst", 0], ["x", 0], ["continue", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["ar", 0], ["append", 0], ["k", 0], ["if", 0], ["len", 0], ["ar", 0], ["0", 0], ["print", 0], ["min", 0], ["ar", 0], ["else", 0], ["print", 0], ["1", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["len", 0], ["a", 0], ["2", 0], ["print", 0], ["0", 0], ["return", 0], ["final", 0], ["ans", 0], ["n", 0], ["1", 0], ["for", 0], ["start", 0], ["change", 0], ["start", 0], ["in", 0], ["a", 0], ["0", 0], ["false", 0], ["a", 0], ["0", 0], ["1", 0], ["true", 0], ["a", 0], ["0", 0], ["1", 0], ["true", 0], ["for", 0], ["end", 0], ["change", 0], ["end", 0], ["in", 0], ["a", 0], ["1", 0], ["false", 0], ["a", 0], ["1", 0], ["1", 0], ["true", 0], ["a", 0], ["1", 0], ["1", 0], ["true", 0], ["d", 0], ["r", 0], ["divmod", 0], ["end", 0], ["start", 0], ["n", 0], ["1", 0], ["if", 0], ["r", 0], ["0", 0], ["b", 0], ["start", 0], ["ans", 0], ["0", 0], ["if", 0], ["change", 0], ["start", 0], ["ans", 0], ["1", 0], ["if", 0], ["change", 0], ["end", 0], ["ans", 0], ["1", 0], ["impossible", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["impossible", 0], ["break", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["d", 0], ["b", 0], ["d", 0], ["elif", 0], ["a", 0], ["i", 0], ["b", 0], ["d", 0], ["1", 0], ["or", 0], ["a", 0], ["i", 0], ["b", 0], ["d", 0], ["1", 0], ["ans", 0], ["1", 0], ["b", 0], ["d", 0], ["else", 0], ["impossible", 0], ["true", 0], ["if", 0], ["not", 0], ["impossible", 0], ["final", 0], ["ans", 0], ["min", 0], ["final", 0], ["ans", 0], ["ans", 0], ["if", 0], ["final", 0], ["ans", 0], ["n", 0], ["1", 0], ["print", 0], ["final", 0], ["ans", 0], ["else", 0], ["print", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["solve", 0], ["seq", 0], ["if", 0], ["len", 0], ["seq", 0], ["2", 0], ["return", 0], ["0", 0], ["startings", 0], ["for", 0], ["x", 0], ["in", 0], ["1", 0], ["0", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["1", 0], ["0", 0], ["1", 0], ["start", 0], ["seq", 0], ["1", 0], ["y", 0], ["first", 0], ["el", 0], ["seq", 0], ["0", 0], ["x", 0], ["seq", 0], ["1", 0], ["y", 0], ["delta", 0], ["int", 0], ["x", 0], ["0", 0], ["int", 0], ["y", 0], ["0", 0], ["number", 0], ["of", 0], ["changes", 0], ["startings", 0], ["append", 0], ["start", 0], ["changes", 0], ["for", 0], ["start", 0], ["in", 0], ["startings", 0], ["last", 0], ["el", 0], ["delta", 0], ["num", 0], ["changes", 0], ["start", 0], ["impossible", 0], ["false", 0], ["for", 0], ["x", 0], ["in", 0], ["seq", 0], ["2", 0], ["if", 0], ["last", 0], ["el", 0], ["x", 0], ["delta", 0], ["last", 0], ["el", 0], ["x", 0], ["continue", 0], ["if", 0], ["last", 0], ["el", 0], ["x", 0], ["1", 0], ["delta", 0], ["last", 0], ["el", 0], ["x", 0], ["1", 0], ["num", 0], ["changes", 0], ["1", 0], ["continue", 0], ["if", 0], ["last", 0], ["el", 0], ["x", 0], ["1", 0], ["delta", 0], ["last", 0], ["el", 0], ["x", 0], ["1", 0], ["num", 0], ["changes", 0], ["1", 0], ["continue", 0], ["impossible", 0], ["true", 0], ["break", 0], ["if", 0], ["not", 0], ["impossible", 0], ["changes", 0], ["append", 0], ["num", 0], ["changes", 0], ["return", 0], ["min", 0], ["changes", 0], ["or", 0], ["1", 0], ["if", 0], ["main", 0], ["name", 0], ["input", 0], ["print", 0], ["solve", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lo", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["quit", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["bol", 0], ["c", 0], ["1", 0], ["0", 0], ["if", 0], ["b", 0], ["0", 0], ["i", 0], ["b", 0], ["n", 0], ["1", 0], ["j", 0], ["n", 0], ["1", 0], ["continue", 0], ["d", 0], ["b", 0], ["0", 0], ["i", 0], ["b", 0], ["n", 0], ["1", 0], ["j", 0], ["n", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["d0", 0], ["b", 0], ["k", 0], ["b", 0], ["0", 0], ["i", 0], ["d", 0], ["k", 0], ["if", 0], ["abs", 0], ["d0", 0], ["1", 0], ["bol", 0], ["0", 0], ["break", 0], ["elif", 0], ["d0", 0], ["c", 0], ["1", 0], ["if", 0], ["bol", 0], ["lo", 0], ["min", 0], ["c", 0], ["abs", 0], ["i", 0], ["abs", 0], ["j", 0], ["lo", 0], ["if", 0], ["lo", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["lo", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["200000", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["test", 0], ["x", 0], ["y", 0], ["if", 0], ["a", 0], ["n", 0], ["1", 0], ["y", 0], ["a", 0], ["0", 0], ["x", 0], ["n", 0], ["1", 0], ["return", 0], ["false", 0], ["first", 0], ["a", 0], ["0", 0], ["x", 0], ["last", 0], ["a", 0], ["n", 0], ["1", 0], ["y", 0], ["d", 0], ["last", 0], ["first", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["abs", 0], ["first", 0], ["i", 0], ["d", 0], ["a", 0], ["i", 0], ["1", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["def", 0], ["find", 0], ["x", 0], ["y", 0], ["res", 0], ["abs", 0], ["x", 0], ["abs", 0], ["y", 0], ["first", 0], ["a", 0], ["0", 0], ["x", 0], ["last", 0], ["a", 0], ["n", 0], ["1", 0], ["y", 0], ["d", 0], ["last", 0], ["first", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["abs", 0], ["first", 0], ["i", 0], ["d", 0], ["a", 0], ["i", 0], ["res", 0], ["1", 0], ["return", 0], ["res", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 1], ["for", 10], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["if", 0], ["test", 0], ["i", 0], ["j", 0], ["ans", 0], ["min", 0], ["ans", 0], ["find", 0], ["i", 0], ["j", 0], ["print", 0], ["1", 0], ["if", 0], ["ans", 0], ["200000", 0], ["else", 0], ["ans", 0], ["import", 0], ["copy", 0], ["def", 0], ["right", 0], ["a", 0], ["d", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["res", 0], ["f", 0], ["0", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["d", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["res", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["d", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["res", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["d", 0], ["f", 0], ["false", 0], ["break", 0], ["if", 0], ["not", 0], ["f", 0], ["res", 0], ["10", 0], ["9", 0], ["return", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["bs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["f", 0], ["n", 0], ["1", 0], ["bs", 0], ["0", 0], ["1", 0], ["bs", 0], ["1", 0], ["1", 0], ["f", 0], ["min", 0], ["f", 0], ["right", 0], ["bs", 0], ["copy", 0], ["2", 0], ["bs", 0], ["1", 0], ["1", 0], ["f", 0], ["min", 0], ["f", 0], ["right", 0], ["bs", 0], ["copy", 0], ["1", 0], ["bs", 0], ["1", 0], ["1", 0], ["f", 0], ["min", 0], ["f", 0], ["right", 0], ["bs", 0], ["copy", 0], ["2", 0], ["bs", 0], ["0", 0], ["1", 0], ["bs", 0], ["1", 0], ["2", 0], ["f", 0], ["min", 0], ["f", 0], ["right", 0], ["bs", 0], ["copy", 0], ["1", 0], ["bs", 0], ["1", 0], ["1", 0], ["f", 0], ["min", 0], ["f", 0], ["right", 0], ["bs", 0], ["copy", 0], ["bs", 0], ["1", 0], ["1", 0], ["f", 0], ["min", 0], ["f", 0], ["right", 0], ["bs", 0], ["copy", 0], ["1", 0], ["bs", 0], ["0", 0], ["1", 0], ["bs", 0], ["1", 0], ["2", 0], ["f", 0], ["min", 0], ["f", 0], ["right", 0], ["bs", 0], ["copy", 0], ["2", 0], ["bs", 0], ["1", 0], ["1", 0], ["f", 0], ["min", 0], ["f", 0], ["right", 0], ["bs", 0], ["copy", 0], ["1", 0], ["bs", 0], ["1", 0], ["1", 0], ["f", 0], ["min", 0], ["f", 0], ["right", 0], ["bs", 0], ["copy", 0], ["2", 0], ["if", 0], ["f", 0], ["n", 0], ["1", 0], ["f", 0], ["1", 0], ["print", 0], ["f", 0], ["n", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["split", 0], ["0", 0], ["data", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["split", 0], ["is", 0], ["found", 0], ["false", 0], ["nudges", 0], ["0", 0], ["1", 0], ["1", 0], ["last", 0], ["idx", 0], ["len", 0], ["data", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["return", 0], ["if", 0], ["n", 0], ["3", 0], ["last", 0], ["idx", 0], ["1", 0], ["result", 0], ["1", 0], ["for", 0], ["s", 0], ["nudge", 0], ["in", 0], ["nudges", 0], ["for", 0], ["e", 0], ["nudge", 0], ["in", 0], ["nudges", 0], ["s", 0], ["val", 0], ["data", 0], ["0", 0], ["s", 0], ["nudge", 0], ["e", 0], ["val", 0], ["data", 0], ["len", 0], ["data", 0], ["1", 0], ["e", 0], ["nudge", 0], ["if", 0], ["e", 0], ["val", 0], ["s", 0], ["val", 0], ["n", 0], ["1", 0], ["0", 0], ["num", 0], ["change", 0], ["abs", 0], ["e", 0], ["nudge", 0], ["abs", 0], ["s", 0], ["nudge", 0], ["diff", 0], ["e", 0], ["val", 0], ["s", 0], ["val", 0], ["n", 0], ["1", 0], ["val", 0], ["s", 0], ["val", 0], ["diff", 0], ["for", 0], ["idx", 0], ["in", 0], ["range", 0], ["1", 0], ["last", 0], ["idx", 0], ["value", 0], ["data", 0], ["idx", 0], ["if", 0], ["abs", 0], ["value", 0], ["val", 0], ["1", 0], ["num", 0], ["change", 0], ["1", 0], ["elif", 0], ["abs", 0], ["value", 0], ["val", 0], ["1", 0], ["break", 0], ["val", 0], ["diff", 0], ["if", 0], ["idx", 0], ["last", 0], ["idx", 0], ["1", 0], ["if", 0], ["result", 0], ["1", 0], ["or", 0], ["result", 0], ["num", 0], ["change", 0], ["result", 0], ["num", 0], ["change", 0], ["print", 0], ["result", 0], ["import", 0], ["itertools", 0], ["def", 0], ["read", 0], ["ints", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["def", 0], ["read", 0], ["int", 0], ["return", 0], ["read", 0], ["ints", 0], ["0", 0], ["def", 0], ["check", 0], ["nums", 0], ["step", 0], ["pre", 0], ["suma", 0], ["0", 0], ["print", 0], ["start", 0], ["step", 0], ["for", 0], ["x", 0], ["in", 0], ["nums", 0], ["s", 0], ["pre", 0], ["x", 0], ["print", 0], ["pre", 0], ["x", 0], ["s", 0], ["if", 0], ["abs", 0], ["step", 0], ["s", 0], ["1", 0], ["print", 0], ["bad", 0], ["raise", 0], ["exception", 0], ["if", 0], ["step", 0], ["s", 0], ["pre", 0], ["x", 0], ["continue", 0], ["suma", 0], ["1", 0], ["if", 0], ["pre", 0], ["x", 0], ["1", 0], ["step", 0], ["pre", 0], ["x", 0], ["1", 0], ["else", 0], ["pre", 0], ["x", 0], ["1", 0], ["print", 0], ["ok", 0], ["suma", 0], ["return", 0], ["suma", 0], ["def", 0], ["main", 0], ["n", 0], ["read", 0], ["int", 0], ["nums", 0], ["read", 0], ["ints", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["return", 0], ["suma", 0], ["100000000", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["itertools", 0], ["product", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["a", 0], ["nums", 0], ["0", 0], ["x", 0], ["b", 0], ["nums", 0], ["1", 0], ["y", 0], ["diff", 0], ["a", 0], ["b", 0], ["try", 0], ["print", 0], ["x", 0], ["y", 0], ["suma", 0], ["min", 0], ["suma", 0], ["check", 0], ["nums", 0], ["2", 0], ["diff", 0], ["b", 0], ["abs", 0], ["x", 0], ["abs", 0], ["y", 0], ["except", 0], ["exception", 0], ["as", 0], ["e", 0], ["print", 0], ["repr", 0], ["e", 0], ["pass", 0], ["if", 0], ["suma", 0], ["100000000", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["suma", 0], ["main", 0], ["r", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["r", 0], ["if", 0], ["n", 0], ["1", 0], ["or", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["quit", 0], ["minn", 0], ["int", 0], ["1e9", 0], ["1", 0], ["for", 10], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["i", 0], ["a", 0], ["1", 0], ["j", 0], ["n", 0], ["1", 0], ["continue", 0], ["f", 0], ["a", 0], ["0", 0], ["i", 0], ["g", 0], ["a", 0], ["1", 0], ["j", 0], ["cnt", 0], ["abs", 0], ["i", 0], ["abs", 0], ["j", 0], ["d", 0], ["g", 0], ["f", 0], ["n", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["f", 0], ["d", 0], ["if", 0], ["abs", 0], ["f", 0], ["a", 0], ["x", 0], ["1", 0], ["break", 0], ["elif", 0], ["abs", 0], ["f", 0], ["a", 0], ["x", 0], ["1", 0], ["cnt", 0], ["1", 0], ["else", 0], ["minn", 0], ["min", 0], ["minn", 0], ["cnt", 0], ["if", 0], ["minn", 0], ["int", 0], ["1e9", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["minn", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["in", 0], ["1", 0], ["2", 0], ["print", 0], ["0", 0], ["return", 0], ["x", 0], ["arr", 0], ["1", 0], ["arr", 0], ["0", 0], ["s", 0], ["x", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["x", 0], ["arr", 0], ["i", 0], ["arr", 0], ["i", 0], ["1", 0], ["new", 0], ["s", 0], ["x", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["s", 0], ["s", 0], ["new", 0], ["s", 0], ["if", 0], ["not", 0], ["len", 0], ["s", 0], ["print", 0], ["1", 0], ["return", 0], ["ans", 0], ["float", 0], ["inf", 0], ["for", 0], ["step", 0], ["in", 0], ["s", 0], ["for", 0], ["f", 0], ["in", 0], ["arr", 0], ["0", 0], ["arr", 0], ["0", 0], ["1", 0], ["arr", 0], ["0", 0], ["1", 0], ["new", 0], ["arr", 0], ["f", 0], ["cnt", 0], ["0", 0], ["if", 0], ["f", 0], ["arr", 0], ["0", 0], ["else", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["new", 0], ["arr", 0], ["append", 0], ["new", 0], ["arr", 0], ["1", 0], ["step", 0], ["if", 0], ["abs", 0], ["new", 0], ["arr", 0], ["1", 0], ["arr", 0], ["i", 0], ["1", 0], ["cnt", 0], ["float", 0], ["inf", 0], ["break", 0], ["if", 0], ["new", 0], ["arr", 0], ["1", 0], ["arr", 0], ["i", 0], ["cnt", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["cnt", 0], ["if", 0], ["ans", 0], ["float", 0], ["inf", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0035833120040952137, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.002482723317123112, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.015310028068384792, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.012324572595049762, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0035833120040952137, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.002482723317123112, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.015310028068384792, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.012324572595049762, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nHeidi the Cow is aghast: cracks in the northern Wall? Zombies gathering outside, forming groups, preparing their assault? This must not happen! Quickly, she fetches her HC^2 (Handbook of Crazy Constructions) and looks for the right chapter:\n\nHow to build a wall:  Take a set of bricks.  Select one of the possible wall designs. Computing the number of possible designs is left as an exercise to the reader.  Place bricks on top of each other, according to the chosen design. \n\nThis seems easy enough. But Heidi is a Coding Cow, not a Constructing Cow. Her mind keeps coming back to point 2b. Despite the imminent danger of a zombie onslaught, she wonders just how many possible walls she could build with up to n bricks.\n\nA wall is a set of wall segments as defined in the easy version. How many different walls can be constructed such that the wall consists of at least 1 and at most n bricks? Two walls are different if there exist a column c and a row r such that one wall has a brick in this spot, and the other does not.\n\nAlong with n, you will be given C, the width of the wall (as defined in the easy version). Return the number of different walls modulo 10^6 + 3.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers n and C, 1 ≤ n ≤ 500000, 1 ≤ C ≤ 200000.\n\n\n-----Output-----\n\nPrint the number of different walls that Heidi could build, modulo 10^6 + 3.\n\n\n-----Examples-----\nInput\n5 1\n\nOutput\n5\n\nInput\n2 2\n\nOutput\n5\n\nInput\n3 2\n\nOutput\n9\n\nInput\n11 5\n\nOutput\n4367\n\nInput\n37 63\n\nOutput\n230574\n\n\n\n-----Note-----\n\nThe number 10^6 + 3 is prime.\n\nIn the second sample case, the five walls are: \n\n            B        B\n\nB., .B, BB, B., and .B\n\n\n\nIn the third sample case, the nine walls are the five as in the second sample case and in addition the following four: \n\nB    B\n\nB    B  B        B\n\nB., .B, BB, and BB\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import math\nimport operator as op\n\nfrom functools import reduce\n\nfrom operator import mul    # or mul=lambda x,y:x*y\nfrom fractions import Fraction\n\ndef nCk(n,k): \n\treturn int( reduce(mul, (Fraction(n-i, i+1) for i in range(k)), 1) )\n\n\ndef ncr(n, r):\n\t\tr = min(r, n-r)\n\t\tif r == 0: return 1\n\t\tnumer = reduce(op.mul, list(range(n, n-r, -1)))\n\t\tdenom = reduce(op.mul, list(range(1, r+1)))\n\t\treturn numer//denom\n\ndef modPow(a, x, p):\n\t\t#calculates a^x mod p in logarithmic time.\n\t\tres = 1\n\t\twhile(x > 0):\n\t\t\t\tif( x % 2 != 0):\n\t\t\t\t\t\tres = (res * a) % p\n\t\t\t\t\t\t\n\t\t\t\ta = (a * a) % p\n\t\t\t\tx = int(x/2)\n\t\treturn res\n\ndef modInverse(a, p):\n\t\t#calculates the modular multiplicative of a mod m.\n\t\t#(assuming p is prime).\n\t\treturn modPow(a, p-2, p)\n\ndef modBinomial(n, k, p):\n\t\t#calculates C(n,k) mod p (assuming p is prime).\n\n\t\t# n * (n-1) * ... * (n-k+1)\n\t\tnumerator = 1 \n\t\tfor i in range(k):\n\t\t\t\tnumerator = (numerator * (n-i) ) % p\n\n\t\tdenominator = 1\n\t\tfor i in range(1, k+1):\n\t\t\t\tdenominator = (denominator * i) % p\n\n\t\t# numerator / denominator mod p.\n\t\treturn ( numerator* modInverse(denominator,p) ) % p\n\n\nn, c = input().split()\nn = int(n)\nc = int(c)\n\n#test = [0 for x in range (n+1)]\n#test[1] = c\n\n#for i in range(2, n+1):\n#    test[i] = (test[i-1] + modBinomial((i+c-1),i, 1000003))%1000003\n\n#ans = solve(n, c)\n#ans =test[n]\nans = modBinomial((c+n),c,1000003) - 1\nprint(int(ans))\n", "import math \nm = int(1e6 + 3)\na,b = input().split()\na = int(a)\nb = int(b)\nA = 1\nB = 1\nfor i in range(2,a + b + 1):\n\tA=(A*i)%m\n\tif i<=a:\n\t\tB=(B*i)%m\n\tif i<=b:\n\t\tB=(B*i)%m\nprint((A*pow(B,m-2,m)-1)%m)\n", "n, c = list(map(int, input().split()))\nmod = 10 ** 6 +3\ninv = [0, 1]\nfor i in range(2, max(n, c) + 1):\n\tinv.append(inv[mod % i] * (mod - mod // i) % mod)\nans = 1\nfor i in range(1, n + c + 1):\n\tans = ans * i % mod\nfor i in range(1, c + 1):\n\tans = ans * inv[i] % mod\nfor i in range(1, n + 1):\n\tans = ans * inv[i] % mod\nans += mod - 1\nans %= mod\nprint(ans)\n\n", "import sys\n#with open(filename, 'r') as f:\nwith sys.stdin as f:\n\tn, C = f.readline().split(\" \")\n\tn, C = int(n), int(C)\np = 1000003\n\ndef compute_mod_fact(n, p):\n\t# n! (mod p)\n\tres = 1\n\tfor i in range(1, n+1):\n\t\tres = (res * i) % p\n\treturn res\ndef compute_mod_mult(n, a, p):\n\t# n**a (mod p)\n\tres = 1\n\tfor _ in range(a):\n\t\tres = (res * n) % p\n\treturn res\nres = compute_mod_fact(n+C, p)\nres1 = compute_mod_fact(n, p)\nres1 = compute_mod_mult(res1, p-2, p)\nres2 = compute_mod_fact(C, p)\nres2 = compute_mod_mult(res2, p-2, p)\n#print(res, res1, res2)\nres = (res * res1 * res2 - 1) % p \nprint(res)\n"], "id": "id9562"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9562", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["heidi", 0], ["the", 0], ["cow", 0], ["is", 0], ["aghast", 0], ["cracks", 0], ["in", 0], ["the", 0], ["northern", 0], ["wall", 0], ["zombies", 0], ["gathering", 0], ["outside", 0], ["forming", 0], ["groups", 0], ["preparing", 0], ["their", 0], ["assault", 0], ["this", 0], ["must", 0], ["not", 0], ["happen", 0], ["quickly", 0], ["she", 0], ["fetches", 0], ["her", 0], ["hc", 0], ["2", 0], ["handbook", 0], ["of", 0], ["crazy", 0], ["constructions", 0], ["and", 0], ["looks", 0], ["for", 0], ["the", 0], ["right", 0], ["chapter", 0], ["how", 0], ["to", 0], ["build", 0], ["a", 0], ["wall", 0], ["take", 1], ["a", 1], ["set", 1], ["of", 1], ["bricks", 1], ["select", 1], ["one", 1], ["of", 1], ["the", 1], ["possible", 1], ["wall", 1], ["designs", 1], ["computing", 1], ["the", 1], ["number", 1], ["of", 1], ["possible", 1], ["designs", 1], ["is", 1], ["left", 1], ["as", 1], ["an", 1], ["exercise", 1], ["to", 1], ["the", 1], ["reader", 1], ["place", 1], ["bricks", 1], ["on", 1], ["top", 1], ["of", 1], ["each", 1], ["other", 1], ["according", 1], ["to", 1], ["the", 1], ["chosen", 1], ["design", 1], ["this", 1], ["seems", 1], ["easy", 1], ["enough", 1], ["but", 1], ["heidi", 1], ["is", 1], ["a", 1], ["coding", 1], ["cow", 1], ["not", 1], ["a", 1], ["constructing", 1], ["cow", 1], ["her", 1], ["mind", 1], ["keeps", 1], ["coming", 1], ["back", 1], ["to", 1], ["point", 1], ["2b", 1], ["despite", 1], ["the", 1], ["imminent", 1], ["danger", 1], ["of", 1], ["a", 1], ["zombie", 1], ["onslaught", 1], ["she", 1], ["wonders", 1], ["just", 1], ["how", 1], ["many", 1], ["possible", 1], ["walls", 1], ["she", 1], ["could", 1], ["build", 1], ["with", 1], ["up", 1], ["to", 1], ["n", 1], ["bricks", 1], ["a", 1], ["wall", 1], ["is", 1], ["a", 1], ["set", 1], ["of", 1], ["wall", 1], ["segments", 1], ["as", 1], ["defined", 1], ["in", 1], ["the", 1], ["easy", 1], ["version", 1], ["how", 1], ["many", 1], ["different", 1], ["walls", 1], ["can", 1], ["be", 1], ["constructed", 1], ["such", 1], ["that", 1], ["the", 1], ["wall", 1], ["consists", 1], ["of", 1], ["at", 1], ["least", 1], ["1", 1], ["and", 1], ["at", 1], ["most", 1], ["n", 1], ["bricks", 1], ["two", 1], ["walls", 1], ["are", 1], ["different", 1], ["if", 1], ["there", 1], ["exist", 1], ["a", 1], ["column", 1], ["c", 1], ["and", 1], ["a", 1], ["row", 1], ["r", 1], ["such", 1], ["that", 1], ["one", 1], ["wall", 1], ["has", 1], ["a", 1], ["brick", 1], ["in", 1], ["this", 1], ["spot", 1], ["and", 1], ["the", 1], ["other", 1], ["does", 1], ["not", 1], ["along", 1], ["with", 1], ["n", 1], ["you", 1], ["will", 1], ["be", 1], ["given", 1], ["c", 1], ["the", 1], ["width", 1], ["of", 1], ["the", 1], ["wall", 1], ["as", 1], ["defined", 0], ["in", 0], ["the", 0], ["easy", 0], ["version", 0], ["return", 0], ["the", 0], ["number", 0], ["of", 0], ["different", 0], ["walls", 0], ["modulo", 0], ["10", 0], ["6", 0], ["3", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["two", 1], ["space", 1], ["separated", 1], ["integers", 1], ["n", 1], ["and", 0], ["c", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["500000", 0], ["1", 0], ["≤", 0], ["c", 0], ["≤", 0], ["200000", 0], ["output", 0], ["print", 0], ["the", 0], ["number", 0], ["of", 0], ["different", 0], ["walls", 0], ["that", 0], ["heidi", 0], ["could", 0], ["build", 0], ["modulo", 0], ["10", 0], ["6", 0], ["3", 0], ["examples", 0], ["input", 0], ["5", 0], ["1", 0], ["output", 0], ["5", 0], ["input", 0], ["2", 0], ["2", 0], ["output", 0], ["5", 0], ["input", 0], ["3", 0], ["2", 0], ["output", 0], ["9", 0], ["input", 0], ["11", 0], ["5", 0], ["output", 0], ["4367", 0], ["input", 0], ["37", 0], ["63", 0], ["output", 0], ["230574", 0], ["note", 0], ["the", 0], ["number", 0], ["10", 0], ["6", 0], ["3", 0], ["is", 0], ["prime", 0], ["in", 0], ["the", 0], ["second", 0], ["sample", 0], ["case", 0], ["the", 0], ["five", 0], ["walls", 0], ["are", 0], ["b", 0], ["b", 0], ["b", 0], ["b", 0], ["bb", 0], ["b", 0], ["and", 0], ["b", 0], ["in", 0], ["the", 0], ["third", 0], ["sample", 0], ["case", 0], ["the", 0], ["nine", 0], ["walls", 0], ["are", 0], ["the", 0], ["five", 0], ["as", 0], ["in", 0], ["the", 0], ["second", 0], ["sample", 0], ["case", 0], ["and", 0], ["in", 0], ["addition", 0], ["the", 0], ["following", 0], ["four", 0], ["b", 0], ["b", 0], ["b", 0], ["b", 0], ["b", 0], ["b", 0], ["b", 0], ["b", 0], ["bb", 0], ["and", 0], ["bb", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5511363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5511363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5511363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5511363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["math", 0], ["import", 0], ["operator", 0], ["as", 0], ["op", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["from", 2], ["operator", 2], ["import", 2], ["mul", 1], ["or", 1], ["mul", 1], ["lambda", 1], ["x", 1], ["y", 1], ["x", 1], ["y", 1], ["from", 1], ["fractions", 1], ["import", 1], ["fraction", 1], ["def", 2], ["nck", 2], ["n", 6], ["k", 6], ["return", 6], ["int", 6], ["reduce", 6], ["mul", 1], ["fraction", 0], ["n", 0], ["i", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["def", 2], ["ncr", 2], ["n", 3], ["r", 3], ["r", 3], ["min", 3], ["r", 0], ["n", 0], ["r", 0], ["if", 0], ["r", 0], ["0", 0], ["return", 0], ["1", 0], ["numer", 0], ["reduce", 0], ["op", 0], ["mul", 0], ["list", 0], ["range", 0], ["n", 0], ["n", 0], ["r", 0], ["1", 0], ["denom", 0], ["reduce", 0], ["op", 0], ["mul", 0], ["list", 0], ["range", 0], ["1", 0], ["r", 0], ["1", 0], ["return", 0], ["numer", 0], ["denom", 0], ["def", 0], ["modpow", 0], ["a", 0], ["x", 0], ["p", 0], ["calculates", 0], ["a", 0], ["x", 0], ["mod", 0], ["p", 0], ["in", 0], ["logarithmic", 0], ["time", 0], ["res", 0], ["1", 0], ["while", 0], ["x", 0], ["0", 0], ["if", 0], ["x", 0], ["2", 0], ["0", 0], ["res", 0], ["res", 0], ["a", 0], ["p", 0], ["a", 0], ["a", 0], ["a", 0], ["p", 0], ["x", 0], ["int", 0], ["x", 0], ["2", 0], ["return", 0], ["res", 0], ["def", 0], ["modinverse", 0], ["a", 0], ["p", 0], ["calculates", 0], ["the", 0], ["modular", 0], ["multiplicative", 0], ["of", 0], ["a", 0], ["mod", 0], ["m", 0], ["assuming", 0], ["p", 0], ["is", 0], ["prime", 0], ["return", 0], ["modpow", 0], ["a", 0], ["p", 0], ["2", 0], ["p", 0], ["def", 0], ["modbinomial", 0], ["n", 0], ["k", 0], ["p", 0], ["calculates", 0], ["c", 0], ["n", 0], ["k", 0], ["mod", 0], ["p", 0], ["assuming", 0], ["p", 0], ["is", 0], ["prime", 0], ["n", 0], ["n", 0], ["1", 0], ["n", 0], ["k", 0], ["1", 0], ["numerator", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["numerator", 0], ["numerator", 0], ["n", 0], ["i", 0], ["p", 0], ["denominator", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["denominator", 0], ["denominator", 0], ["i", 0], ["p", 0], ["numerator", 0], ["denominator", 0], ["mod", 0], ["p", 0], ["return", 0], ["numerator", 0], ["modinverse", 0], ["denominator", 0], ["p", 0], ["p", 0], ["n", 0], ["c", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["c", 0], ["int", 0], ["c", 0], ["test", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["test", 0], ["1", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["test", 0], ["i", 0], ["test", 0], ["i", 0], ["1", 0], ["modbinomial", 0], ["i", 0], ["c", 0], ["1", 0], ["i", 0], ["1000003", 0], ["1000003", 0], ["ans", 0], ["solve", 0], ["n", 0], ["c", 0], ["ans", 0], ["test", 0], ["n", 0], ["ans", 0], ["modbinomial", 0], ["c", 0], ["n", 0], ["c", 0], ["1000003", 0], ["1", 0], ["print", 0], ["int", 0], ["ans", 0], ["import", 0], ["math", 0], ["m", 0], ["int", 0], ["1e6", 0], ["3", 0], ["a", 0], ["b", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["a", 0], ["b", 0], ["int", 0], ["b", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["a", 0], ["b", 0], ["1", 0], ["a", 0], ["a", 0], ["i", 0], ["m", 0], ["if", 0], ["i", 0], ["a", 0], ["b", 0], ["b", 0], ["i", 0], ["m", 0], ["if", 0], ["i", 0], ["b", 0], ["b", 0], ["b", 0], ["i", 0], ["m", 0], ["print", 0], ["a", 0], ["pow", 0], ["b", 0], ["m", 0], ["2", 0], ["m", 0], ["1", 0], ["m", 0], ["n", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mod", 0], ["10", 0], ["6", 0], ["3", 0], ["inv", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["max", 0], ["n", 0], ["c", 0], ["1", 0], ["inv", 0], ["append", 0], ["inv", 0], ["mod", 0], ["i", 0], ["mod", 0], ["mod", 0], ["i", 0], ["mod", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["c", 0], ["1", 0], ["ans", 0], ["ans", 0], ["i", 0], ["mod", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["c", 0], ["1", 0], ["ans", 0], ["ans", 0], ["inv", 0], ["i", 0], ["mod", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["ans", 0], ["ans", 0], ["inv", 0], ["i", 0], ["mod", 0], ["ans", 0], ["mod", 0], ["1", 0], ["ans", 0], ["mod", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["with", 0], ["open", 0], ["filename", 0], ["r", 0], ["as", 0], ["f", 0], ["with", 0], ["sys", 0], ["stdin", 0], ["as", 0], ["f", 0], ["n", 0], ["c", 0], ["f", 0], ["readline", 0], ["split", 0], ["n", 0], ["c", 0], ["int", 0], ["n", 0], ["int", 0], ["c", 0], ["p", 0], ["1000003", 0], ["def", 0], ["compute", 0], ["mod", 0], ["fact", 0], ["n", 0], ["p", 0], ["n", 0], ["mod", 0], ["p", 0], ["res", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["res", 0], ["res", 0], ["i", 0], ["p", 0], ["return", 0], ["res", 0], ["def", 0], ["compute", 0], ["mod", 0], ["mult", 0], ["n", 0], ["a", 0], ["p", 0], ["n", 0], ["a", 0], ["mod", 0], ["p", 0], ["res", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["a", 0], ["res", 0], ["res", 0], ["n", 0], ["p", 0], ["return", 0], ["res", 0], ["res", 0], ["compute", 0], ["mod", 0], ["fact", 0], ["n", 0], ["c", 0], ["p", 0], ["res1", 0], ["compute", 0], ["mod", 0], ["fact", 0], ["n", 0], ["p", 0], ["res1", 0], ["compute", 0], ["mod", 0], ["mult", 0], ["res1", 0], ["p", 0], ["2", 0], ["p", 0], ["res2", 0], ["compute", 0], ["mod", 0], ["fact", 0], ["c", 0], ["p", 0], ["res2", 0], ["compute", 0], ["mod", 0], ["mult", 0], ["res2", 0], ["p", 0], ["2", 0], ["p", 0], ["print", 0], ["res", 0], ["res1", 0], ["res2", 0], ["res", 0], ["res", 0], ["res1", 0], ["res2", 0], ["1", 0], ["p", 0], ["print", 0], ["res", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.05894308943089431, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.037940379403794015, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.10317460317460317, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1001984126984127, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.05894308943089431, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.037940379403794015, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.10317460317460317, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1001984126984127, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nThe crowdedness of the discotheque would never stop our friends from having fun, but a bit more spaciousness won't hurt, will it?\n\nThe discotheque can be seen as an infinite xy-plane, in which there are a total of n dancers. Once someone starts moving around, they will move only inside their own movement range, which is a circular area C_{i} described by a center (x_{i}, y_{i}) and a radius r_{i}. No two ranges' borders have more than one common point, that is for every pair (i, j) (1 ≤ i < j ≤ n) either ranges C_{i} and C_{j} are disjoint, or one of them is a subset of the other. Note that it's possible that two ranges' borders share a single common point, but no two dancers have exactly the same ranges.\n\nTsukihi, being one of them, defines the spaciousness to be the area covered by an odd number of movement ranges of dancers who are moving. An example is shown below, with shaded regions representing the spaciousness if everyone moves at the same time. [Image] \n\nBut no one keeps moving for the whole night after all, so the whole night's time is divided into two halves — before midnight and after midnight. Every dancer moves around in one half, while sitting down with friends in the other. The spaciousness of two halves are calculated separately and their sum should, of course, be as large as possible. The following figure shows an optimal solution to the example above. [Image] \n\nBy different plans of who dances in the first half and who does in the other, different sums of spaciousness over two halves are achieved. You are to find the largest achievable value of this sum.\n\n\n-----Input-----\n\nThe first line of input contains a positive integer n (1 ≤ n ≤ 1 000) — the number of dancers.\n\nThe following n lines each describes a dancer: the i-th line among them contains three space-separated integers x_{i}, y_{i} and r_{i} ( - 10^6 ≤ x_{i}, y_{i} ≤ 10^6, 1 ≤ r_{i} ≤ 10^6), describing a circular movement range centered at (x_{i}, y_{i}) with radius r_{i}.\n\n\n-----Output-----\n\nOutput one decimal number — the largest achievable sum of spaciousness over two halves of the night.\n\nThe output is considered correct if it has a relative or absolute error of at most 10^{ - 9}. Formally, let your answer be a, and the jury's answer be b. Your answer is considered correct if $\\frac{|a - b|}{\\operatorname{max}(1,|b|)} \\leq 10^{-9}$.\n\n\n-----Examples-----\nInput\n5\n2 1 6\n0 4 1\n2 -1 3\n1 -2 1\n4 -1 1\n\nOutput\n138.23007676\n\nInput\n8\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n0 0 5\n0 0 6\n0 0 7\n0 0 8\n\nOutput\n289.02652413\n\n\n\n-----Note-----\n\nThe first sample corresponds to the illustrations in the legend.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\n\ndef inside(a,b):\n\treturn ((a[0]-b[0])**2 + (a[1]-b[1])**2) < (a[2]+b[2])**2\n\n\ndef main():\n\tpi = 3.14159265358979323\n\tn = int(sys.stdin.readline())\n\ta = []\n\tp = [-1]*n\n\tfor i in range(n):\n\t\tx,y,r = map(int,sys.stdin.readline().split())\n\t\ta.append([x,y,r])\n\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif i==j :\n\t\t\t\tcontinue\n\t\t\tif inside(a[i],a[j]):\n\t\t\t\tif a[i][2] < a[j][2]:\n\t\t\t\t\tif p[i] == -1:\n\t\t\t\t\t\tp[i] = j\n\t\t\t\t\telif a[p[i]][2]>a[j][2]:\n\t\t\t\t\t\tp[i] = j\n\t\t\t\telse:\n\t\t\t\t\tif p[j] == -1:\n\t\t\t\t\t\tp[j] = i\n\t\t\t\t\telif a[p[j]][2]>a[i][2]:\n\t\t\t\t\t\tp[j] = i\n\n\tq = []\n\tfor i in range(n):\n\t\tif p[i] == -1:\n\t\t\tq.append((i,True))\n\n\ts = len(q)\n\tans = 0.0\n\tfor i in range(s):\n\t\tc, b = q[i]\n\t\tfor j in range(n):\n\t\t\tif p[j] == c:\n\t\t\t\tq.append((j,True))\n\t\tans+= pi * a[c][2] * a[c][2]\n\n\tq = q[s:]\n\twhile len(q)!=0 :\n\t\tc,b = q.pop()\n\t\tfor j in range(n):\n\t\t\tif p[j] == c:\n\t\t\t\tq.append((j,not b))\n\t\tif b:\n\t\t\tans+= pi * a[c][2] * a[c][2]\n\t\telse:\n\t\t\tans-= pi * a[c][2] * a[c][2]\n\n\tprint(ans)\n\n\nmain()\n", "from sys import stdin, stdout\nimport math\n\ndef dist(x,y):\n\treturn ((x[0]-y[0])**2+(x[1]-y[1])**2)**0.5\n\n# Is b inside a\ndef inside(a,b):\n\tif dist(b,a)<a[2]:\n\t\treturn True\n\telse:\n\t\treturn False\n\nn = int(stdin.readline().rstrip())\npointList=[]\nfor _ in range(n):\n\tx,y,r = list(map(int,stdin.readline().rstrip().split()))\n\tpointList.append((x,y,r))\n\t\npointList.sort(key = lambda x: x[2],reverse=True)\npositiveCounter = [0]*n\ngroup = [0]*n\nparent = [-1]*n\n\nspaciousness=0\nfor i in range(n):\n\tcontained = -1\n\tfor j in range(i-1,-1,-1):\n\t\tif inside(pointList[j],pointList[i]):\n\t\t\tcontained=j\n\t\t\tbreak\n\tif contained<0:\n\t\tpositiveCounter[i]=1\n\t\tgroup[i]=1\n\t\tspaciousness+=math.pi*pointList[i][2]*pointList[i][2]\n\telse:\n\t\tparent[i]=j\n\t\tgroup[i] = 3-group[j]\n\t\tif parent[j]>=0:\n\t\t\tpositiveCounter[i] = positiveCounter[j]*-1\n\t\t\tspaciousness+=math.pi*pointList[i][2]*pointList[i][2]*positiveCounter[i]\n\t\telse:\n\t\t\tpositiveCounter[i]=1\n\t\t\tspaciousness+=math.pi*pointList[i][2]*pointList[i][2]*positiveCounter[i]\n\nprint(spaciousness)\n", "from collections import namedtuple\nfrom math import hypot, pi\n\n\ndef contains(fst, scd):\n\treturn hypot(fst.x - scd.x, fst.y - scd.y) < fst.r\n\n\ndef area(circle):\n\treturn pi * circle.r ** 2\n\n\ndef find_prev(side, circle):\n\tfor prev in reversed(side):\n\t\tif contains(prev, circle):\n\t\t\treturn prev\n\n\nCircle = namedtuple('Circle', 'x y r')\n\nn = int(input())\ncs = []\nfor i in range(n):\n\tcs.append(Circle(*list(map(int, input().split()))))\n\ncs = sorted(cs, key=lambda circle: -circle.r)\nans = 0.0\ncounts = dict()\nleft = []\nright = []\nfor ind, cur in enumerate(cs):\n\tprev_left = find_prev(left, cur)\n\tprev_right = find_prev(right, cur)\n\tif prev_left is None:\n\t\tleft.append(cur)\n\t\tcounts[cur] = True\n\t\tans += area(cur)\n\telif prev_right is None:\n\t\tright.append(cur)\n\t\tcounts[cur] = True\n\t\tans += area(cur)\n\telif counts[prev_left]:\n\t\tleft.append(cur)\n\t\tcounts[cur] = False\n\t\tans -= area(cur)\n\telse:\n\t\tleft.append(cur)\n\t\tcounts[cur] = True\n\t\tans += area(cur)\n\nprint(ans)\n", "import math\nz = math.pi\nn = input()\na = input()\nfor i in range(int(n)-1):\n\ta += '\\n' + input()\na = a.split('\\n')\nfor i in range(len(a)):\n\ta[i] = a[i].split(' ')\n\ta[i] = list(map(int,a[i]))\nfor i in range(len(a)):    \n\tfor j in list(reversed(range(i+1,len(a)))): #sort the circles by their radius\n\t\tif a[i][2] < a[j][2]:\n\t\t\ta[i],a[j] = a[j],a[i]\ndef dis(x,y): #short for distance\n\treturn math.sqrt((x[0]-y[0])**2 + (x[1]-y[1])**2)\nb = []\nfor i in range(len(a)):\n\tb.append(a[i][2]**2)\n\tfor j in list(reversed(range(i))):\n\t\tif dis(a[i],a[j]) < a[j][2]:\n\t\t\ta[i].append(j)\n\t\t\tbreak\nc = []\nfor i in a:\n\tif len(i) == 3:\n\t\tc.append(1)\n\telse:\n\t\tc.append(c[i[3]]+1)\nk = 0\nfor i in range(len(c)):\n\tif c[i] == 1:\n\t\tk += b[i]\n\telif c[i] % 2 == 0:\n\t\tk += b[i]\n\telse:\n\t\tk -= b[i]\nprint(k*z)\n", "\nimport math\n\nclass circ:\n\tdef __init__(self, x, y, r):\n\t\tself.x = x*1.0\n\t\tself.y = y*1.0\n\t\tself.r = r*1.0\n\nn = 0\nn = int(input())\nvec = []\nfor i in range(n):\n\tst = input().split(' ')\n\ta = int(st[0])\n\tb = int(st[1])\n\tc = int(st[2])\n\tvec.append(circ(a,b,c))\n\ngr = [[] for i in range(n)]\npad = [-1 for i in range(n)]\nvis = [False for i in range(n)]\n\nfor i in range(n):\n\tfor k in range(n):\n\t\tif i == k:\n\t\t\tcontinue\n\t\tdist = math.hypot(vec[i].x - vec[k].x, vec[i].y - vec[k].y)\n\t\tif (dist < vec[k].r\n\t\t\tand vec[k].r > vec[i].r\n\t\t\tand (pad[i] < 0 or vec[k].r < vec[pad[i]].r)):\n\t\t\tpad[i] = k\n\nfor i in range(n):\n\tif pad[i] < 0:\n\t\tcontinue\n\tgr[pad[i]].append(i)\n\nst = []\nans = 0.0\nfor i in range(n):\n\tif pad[i] >= 0 or vis[i]:\n\t\tcontinue\n\tst.append((i, 0))\n\twhile len(st) > 0:\n\t\tnode, level = st.pop()\n\t\tvis[node] = True\n\t\tmult = -1.0\n\t\tif level == 0 or level%2 == 1:\n\t\t\tmult = 1.0\n\t\tans += (mult * (vec[node].r * vec[node].r * math.pi))\n\t\tfor next in gr[node]:\n\t\t\tst.append((next, level+1))\n\nprint(ans)\n\n", "\nimport math\n\nclass circ:\n\tdef __init__(self, x, y, r):\n\t\tself.x = x*1.0\n\t\tself.y = y*1.0\n\t\tself.r = r*1.0\n\nn = 0\nn = int(input())\nvec = []\nfor i in range(n):\n\tst = input().split(' ')\n\ta = int(st[0])\n\tb = int(st[1])\n\tc = int(st[2])\n\tvec.append(circ(a,b,c))\n\ngr = [[] for i in range(n)]\npad = [-1 for i in range(n)]\nvis = [False for i in range(n)]\n\nfor i in range(n):\n\tfor k in range(n):\n\t\tif i == k:\n\t\t\tcontinue\n\t\tdist = math.hypot(vec[i].x - vec[k].x, vec[i].y - vec[k].y)\n\t\tif (dist < vec[k].r\n\t\t\tand vec[k].r > vec[i].r\n\t\t\tand (pad[i] < 0 or vec[k].r < vec[pad[i]].r)):\n\t\t\tpad[i] = k\n\nfor i in range(n):\n\tif pad[i] < 0:\n\t\tcontinue\n\tgr[pad[i]].append(i)\n\nst = []\nans = 0.0\nfor i in range(n):\n\tif pad[i] >= 0 or vis[i]:\n\t\tcontinue\n\tst.append((i, 0))\n\twhile len(st) > 0:\n\t\tnode, level = st.pop()\n\t\tvis[node] = True\n\t\tmult = -1.0\n\t\tif level == 0 or level%2 == 1:\n\t\t\tmult = 1.0\n\t\tans += (mult * (vec[node].r * vec[node].r * math.pi))\n\t\tfor next in gr[node]:\n\t\t\tst.append((next, level+1))\n\nprint(ans)\n\n\n\n\n\n", "n = int(input())\nd = [1] * n\np = [[] for i in range(n)]\n\n\ndef f():\n\tx, y, r = map(int, input().split())\n\treturn r * r, x, y\n\n\nt = sorted(f() for i in range(n))\n\nfor i in range(n):\n\tr, x, y = t[i]\n\tfor j in range(i + 1, n):\n\t\ts, a, b = t[j]\n\t\tif (a - x) ** 2 + (b - y) ** 2 < s:\n\t\t\tp[j].append(i)\n\t\t\td[i] = 0\n\t\t\tbreak\n\n\ndef f(i):\n\ts = t[i][0]\n\tq = [(1, j) for j in p[i]]\n\twhile q:\n\t\td, i = q.pop()\n\t\ts += d * t[i][0]\n\t\tq += [(-d, j) for j in p[i]]\n\treturn s\n\n\nprint(3.1415926536 * sum(f(i) for i in range(n) if d[i]))\n", "s = 0\nt = [list(map(int, input().split())) for i in range(int(input()))]\nf = lambda b: a[2] < b[2] and (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2 <= (a[2] - b[2]) ** 2\nfor a in t:\n\tk = sum(f(b) for b in t)\n\ts += (-1, 1)[(k < 1) + k & 1] * a[2] ** 2\nprint(3.1415926536 * s)\n"], "id": "id9592"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9592", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 2], ["crowdedness", 2], ["of", 2], ["the", 2], ["discotheque", 2], ["would", 2], ["never", 2], ["stop", 2], ["our", 2], ["friends", 2], ["from", 2], ["having", 2], ["fun", 2], ["but", 2], ["a", 2], ["bit", 2], ["more", 2], ["spaciousness", 2], ["won", 2], ["t", 2], ["hurt", 2], ["will", 2], ["it", 2], ["the", 2], ["discotheque", 2], ["can", 2], ["be", 2], ["seen", 2], ["as", 2], ["an", 2], ["infinite", 2], ["xy", 2], ["plane", 2], ["in", 2], ["which", 2], ["there", 2], ["are", 2], ["a", 2], ["total", 2], ["of", 2], ["n", 2], ["dancers", 2], ["once", 2], ["someone", 2], ["starts", 2], ["moving", 2], ["around", 2], ["they", 2], ["will", 2], ["move", 0], ["only", 0], ["inside", 0], ["their", 0], ["own", 0], ["movement", 0], ["range", 0], ["which", 0], ["is", 0], ["a", 0], ["circular", 0], ["area", 0], ["c", 0], ["i", 0], ["described", 0], ["by", 0], ["a", 0], ["center", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["and", 0], ["a", 0], ["radius", 0], ["r", 0], ["i", 0], ["no", 2], ["two", 2], ["ranges", 2], ["borders", 2], ["have", 2], ["more", 2], ["than", 2], ["one", 2], ["common", 2], ["point", 2], ["that", 2], ["is", 2], ["for", 2], ["every", 0], ["pair", 0], ["i", 0], ["j", 0], ["1", 0], ["≤", 0], ["i", 0], ["j", 0], ["≤", 0], ["n", 0], ["either", 0], ["ranges", 0], ["c", 0], ["i", 0], ["and", 0], ["c", 0], ["j", 0], ["are", 2], ["disjoint", 2], ["or", 2], ["one", 2], ["of", 2], ["them", 2], ["is", 2], ["a", 2], ["subset", 2], ["of", 2], ["the", 2], ["other", 2], ["note", 2], ["that", 2], ["it", 2], ["s", 2], ["possible", 2], ["that", 2], ["two", 2], ["ranges", 2], ["borders", 2], ["share", 2], ["a", 2], ["single", 2], ["common", 2], ["point", 2], ["but", 2], ["no", 2], ["two", 2], ["dancers", 2], ["have", 2], ["exactly", 2], ["the", 2], ["same", 2], ["ranges", 2], ["tsukihi", 2], ["being", 2], ["one", 2], ["of", 2], ["them", 2], ["defines", 2], ["the", 2], ["spaciousness", 2], ["to", 2], ["be", 2], ["the", 2], ["area", 2], ["covered", 2], ["by", 2], ["an", 2], ["odd", 2], ["number", 2], ["of", 2], ["movement", 2], ["ranges", 2], ["of", 2], ["dancers", 2], ["who", 2], ["are", 2], ["moving", 2], ["an", 2], ["example", 2], ["is", 2], ["shown", 2], ["below", 2], ["with", 2], ["shaded", 0], ["regions", 0], ["representing", 0], ["the", 0], ["spaciousness", 0], ["if", 0], ["everyone", 0], ["moves", 0], ["at", 0], ["the", 0], ["same", 0], ["time", 0], ["image", 0], ["but", 2], ["no", 2], ["one", 2], ["keeps", 2], ["moving", 2], ["for", 2], ["the", 2], ["whole", 2], ["night", 2], ["after", 2], ["all", 2], ["so", 2], ["the", 2], ["whole", 2], ["night", 2], ["s", 2], ["time", 2], ["is", 2], ["divided", 2], ["into", 2], ["two", 2], ["halves", 2], ["—", 2], ["before", 2], ["midnight", 2], ["and", 2], ["after", 2], ["midnight", 2], ["every", 2], ["dancer", 2], ["moves", 2], ["around", 2], ["in", 2], ["one", 2], ["half", 2], ["while", 2], ["sitting", 2], ["down", 2], ["with", 2], ["friends", 2], ["in", 2], ["the", 2], ["other", 2], ["the", 2], ["spaciousness", 2], ["of", 2], ["two", 2], ["halves", 2], ["are", 2], ["calculated", 2], ["separately", 2], ["and", 2], ["their", 2], ["sum", 2], ["should", 2], ["of", 2], ["course", 2], ["be", 2], ["as", 2], ["large", 2], ["as", 2], ["possible", 0], ["the", 0], ["following", 0], ["figure", 0], ["shows", 0], ["an", 0], ["optimal", 0], ["solution", 0], ["to", 0], ["the", 0], ["example", 0], ["above", 0], ["image", 0], ["by", 2], ["different", 2], ["plans", 2], ["of", 2], ["who", 2], ["dances", 2], ["in", 2], ["the", 2], ["first", 2], ["half", 2], ["and", 2], ["who", 2], ["does", 2], ["in", 2], ["the", 2], ["other", 2], ["different", 2], ["sums", 2], ["of", 2], ["spaciousness", 2], ["over", 2], ["two", 2], ["halves", 2], ["are", 2], ["achieved", 0], ["you", 0], ["are", 0], ["to", 0], ["find", 0], ["the", 0], ["largest", 0], ["achievable", 0], ["value", 0], ["of", 0], ["this", 0], ["sum", 0], ["input", 0], ["the", 3], ["first", 3], ["line", 3], ["of", 2], ["input", 2], ["contains", 2], ["a", 2], ["positive", 2], ["integer", 2], ["n", 2], ["1", 2], ["≤", 2], ["n", 2], ["≤", 2], ["1", 2], ["000", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["dancers", 2], ["the", 2], ["following", 2], ["n", 2], ["lines", 2], ["each", 2], ["describes", 2], ["a", 2], ["dancer", 0], ["the", 0], ["i", 0], ["th", 0], ["line", 0], ["among", 0], ["them", 0], ["contains", 0], ["three", 0], ["space", 0], ["separated", 0], ["integers", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["and", 0], ["r", 0], ["i", 0], ["10", 0], ["6", 0], ["≤", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["≤", 0], ["10", 0], ["6", 0], ["1", 0], ["≤", 0], ["r", 0], ["i", 0], ["≤", 0], ["10", 0], ["6", 0], ["describing", 0], ["a", 0], ["circular", 0], ["movement", 0], ["range", 0], ["centered", 0], ["at", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["with", 0], ["radius", 0], ["r", 0], ["i", 0], ["output", 0], ["output", 2], ["one", 2], ["decimal", 2], ["number", 2], ["—", 2], ["the", 2], ["largest", 2], ["achievable", 2], ["sum", 2], ["of", 2], ["spaciousness", 2], ["over", 2], ["two", 2], ["halves", 2], ["of", 2], ["the", 2], ["night", 2], ["the", 2], ["output", 2], ["is", 2], ["considered", 2], ["correct", 2], ["if", 2], ["it", 2], ["has", 2], ["a", 2], ["relative", 2], ["or", 2], ["absolute", 2], ["error", 2], ["of", 2], ["at", 2], ["most", 2], ["10", 3], ["9", 3], ["formally", 4], ["let", 4], ["your", 4], ["answer", 3], ["be", 3], ["a", 3], ["and", 3], ["the", 0], ["jury", 0], ["s", 0], ["answer", 0], ["be", 0], ["b", 0], ["your", 0], ["answer", 0], ["is", 0], ["considered", 0], ["correct", 0], ["if", 0], ["frac", 0], ["a", 0], ["b", 0], ["operatorname", 0], ["max", 0], ["1", 0], ["b", 0], ["leq", 0], ["10", 0], ["9", 0], ["examples", 0], ["input", 0], ["5", 0], ["2", 0], ["1", 0], ["6", 0], ["0", 0], ["4", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["1", 0], ["2", 0], ["1", 0], ["4", 0], ["1", 0], ["1", 0], ["output", 0], ["138", 0], ["23007676", 0], ["input", 0], ["8", 0], ["0", 143], ["0", 142], ["1", 154], ["0", 145], ["0", 85], ["2", 70], ["0", 64], ["0", 75], ["3", 112], ["0", 112], ["0", 171], ["4", 310], ["0", 0], ["0", 0], ["5", 0], ["0", 0], ["0", 0], ["6", 0], ["0", 0], ["0", 0], ["7", 0], ["0", 0], ["0", 0], ["8", 0], ["output", 0], ["289", 0], ["02652413", 0], ["note", 0], ["the", 0], ["first", 0], ["sample", 0], ["corresponds", 0], ["to", 0], ["the", 0], ["illustrations", 0], ["in", 0], ["the", 0], ["legend", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.59, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.27871872994951674, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.763671875, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3580769925541493, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.566, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.27850000000000014, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.716796875, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.35742187500000006, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["def", 0], ["inside", 0], ["a", 4], ["b", 2], ["return", 2], ["a", 5], ["0", 5], ["b", 5], ["0", 1], ["2", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["2", 0], ["a", 0], ["2", 0], ["b", 0], ["2", 0], ["2", 0], ["def", 0], ["main", 0], ["pi", 0], ["3", 0], ["14159265358979323", 0], ["n", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["a", 0], ["p", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["r", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["a", 0], ["append", 0], ["x", 0], ["y", 0], ["r", 0], ["for", 27], ["i", 6], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["j", 0], ["continue", 0], ["if", 0], ["inside", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["if", 0], ["a", 0], ["i", 0], ["2", 0], ["a", 0], ["j", 0], ["2", 0], ["if", 0], ["p", 0], ["i", 0], ["1", 0], ["p", 0], ["i", 0], ["j", 0], ["elif", 0], ["a", 0], ["p", 0], ["i", 0], ["2", 0], ["a", 0], ["j", 0], ["2", 0], ["p", 0], ["i", 0], ["j", 0], ["else", 0], ["if", 0], ["p", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["i", 0], ["elif", 0], ["a", 0], ["p", 0], ["j", 0], ["2", 0], ["a", 0], ["i", 0], ["2", 0], ["p", 0], ["j", 0], ["i", 0], ["q", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["p", 0], ["i", 0], ["1", 0], ["q", 0], ["append", 0], ["i", 0], ["true", 0], ["s", 0], ["len", 0], ["q", 0], ["ans", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["s", 0], ["c", 0], ["b", 0], ["q", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["p", 0], ["j", 0], ["c", 0], ["q", 0], ["append", 0], ["j", 0], ["true", 0], ["ans", 0], ["pi", 0], ["a", 0], ["c", 0], ["2", 0], ["a", 0], ["c", 0], ["2", 0], ["q", 0], ["q", 0], ["s", 0], ["while", 0], ["len", 0], ["q", 0], ["0", 0], ["c", 0], ["b", 0], ["q", 0], ["pop", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["p", 0], ["j", 0], ["c", 0], ["q", 0], ["append", 0], ["j", 0], ["not", 0], ["b", 0], ["if", 0], ["b", 0], ["ans", 0], ["pi", 0], ["a", 0], ["c", 0], ["2", 0], ["a", 0], ["c", 0], ["2", 0], ["else", 0], ["ans", 0], ["pi", 0], ["a", 0], ["c", 0], ["2", 0], ["a", 0], ["c", 0], ["2", 0], ["print", 0], ["ans", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["import", 0], ["math", 0], ["def", 0], ["dist", 0], ["x", 0], ["y", 0], ["return", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["2", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["2", 0], ["0", 0], ["5", 0], ["is", 0], ["b", 0], ["inside", 0], ["a", 0], ["def", 0], ["inside", 0], ["a", 0], ["b", 0], ["if", 0], ["dist", 0], ["b", 0], ["a", 0], ["a", 0], ["2", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["pointlist", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["pointlist", 0], ["append", 0], ["x", 0], ["y", 0], ["r", 0], ["pointlist", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["2", 0], ["reverse", 0], ["true", 0], ["positivecounter", 0], ["0", 0], ["n", 0], ["group", 0], ["0", 0], ["n", 0], ["parent", 0], ["1", 0], ["n", 0], ["spaciousness", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["contained", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["inside", 0], ["pointlist", 0], ["j", 0], ["pointlist", 0], ["i", 0], ["contained", 0], ["j", 0], ["break", 0], ["if", 0], ["contained", 0], ["0", 0], ["positivecounter", 0], ["i", 0], ["1", 0], ["group", 0], ["i", 0], ["1", 0], ["spaciousness", 0], ["math", 0], ["pi", 0], ["pointlist", 0], ["i", 0], ["2", 0], ["pointlist", 0], ["i", 0], ["2", 0], ["else", 0], ["parent", 0], ["i", 0], ["j", 0], ["group", 0], ["i", 0], ["3", 0], ["group", 0], ["j", 0], ["if", 0], ["parent", 0], ["j", 0], ["0", 0], ["positivecounter", 0], ["i", 0], ["positivecounter", 0], ["j", 0], ["1", 0], ["spaciousness", 0], ["math", 0], ["pi", 0], ["pointlist", 0], ["i", 0], ["2", 0], ["pointlist", 0], ["i", 0], ["2", 0], ["positivecounter", 0], ["i", 0], ["else", 0], ["positivecounter", 0], ["i", 0], ["1", 0], ["spaciousness", 0], ["math", 0], ["pi", 0], ["pointlist", 0], ["i", 0], ["2", 0], ["pointlist", 0], ["i", 0], ["2", 0], ["positivecounter", 0], ["i", 0], ["print", 0], ["spaciousness", 0], ["from", 0], ["collections", 0], ["import", 0], ["namedtuple", 0], ["from", 0], ["math", 0], ["import", 0], ["hypot", 0], ["pi", 0], ["def", 0], ["contains", 0], ["fst", 0], ["scd", 0], ["return", 0], ["hypot", 0], ["fst", 0], ["x", 0], ["scd", 0], ["x", 0], ["fst", 0], ["y", 0], ["scd", 0], ["y", 0], ["fst", 0], ["r", 0], ["def", 0], ["area", 0], ["circle", 0], ["return", 0], ["pi", 0], ["circle", 0], ["r", 0], ["2", 0], ["def", 0], ["find", 0], ["prev", 0], ["side", 0], ["circle", 0], ["for", 0], ["prev", 0], ["in", 0], ["reversed", 0], ["side", 0], ["if", 0], ["contains", 0], ["prev", 0], ["circle", 0], ["return", 0], ["prev", 0], ["circle", 0], ["namedtuple", 0], ["circle", 0], ["x", 0], ["y", 0], ["r", 0], ["n", 0], ["int", 0], ["input", 0], ["cs", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cs", 0], ["append", 0], ["circle", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cs", 0], ["sorted", 0], ["cs", 0], ["key", 0], ["lambda", 0], ["circle", 0], ["circle", 0], ["r", 0], ["ans", 0], ["0", 0], ["0", 0], ["counts", 0], ["dict", 0], ["left", 0], ["right", 0], ["for", 0], ["ind", 0], ["cur", 0], ["in", 0], ["enumerate", 0], ["cs", 0], ["prev", 0], ["left", 0], ["find", 0], ["prev", 0], ["left", 0], ["cur", 0], ["prev", 0], ["right", 0], ["find", 0], ["prev", 0], ["right", 0], ["cur", 0], ["if", 0], ["prev", 0], ["left", 0], ["is", 0], ["none", 0], ["left", 0], ["append", 0], ["cur", 0], ["counts", 0], ["cur", 0], ["true", 0], ["ans", 0], ["area", 0], ["cur", 0], ["elif", 0], ["prev", 0], ["right", 0], ["is", 0], ["none", 0], ["right", 0], ["append", 0], ["cur", 0], ["counts", 0], ["cur", 0], ["true", 0], ["ans", 0], ["area", 0], ["cur", 0], ["elif", 0], ["counts", 0], ["prev", 0], ["left", 0], ["left", 0], ["append", 0], ["cur", 0], ["counts", 0], ["cur", 0], ["false", 0], ["ans", 0], ["area", 0], ["cur", 0], ["else", 0], ["left", 0], ["append", 0], ["cur", 0], ["counts", 0], ["cur", 0], ["true", 0], ["ans", 0], ["area", 0], ["cur", 0], ["print", 0], ["ans", 0], ["import", 0], ["math", 0], ["z", 0], ["math", 0], ["pi", 0], ["n", 0], ["input", 0], ["a", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["n", 0], ["1", 0], ["a", 0], ["n", 0], ["input", 0], ["a", 0], ["a", 0], ["split", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["split", 0], ["a", 0], ["i", 0], ["list", 0], ["map", 0], ["int", 0], ["a", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["for", 0], ["j", 0], ["in", 0], ["list", 0], ["reversed", 0], ["range", 0], ["i", 0], ["1", 0], ["len", 0], ["a", 0], ["sort", 0], ["the", 0], ["circles", 0], ["by", 0], ["their", 0], ["radius", 0], ["if", 0], ["a", 0], ["i", 0], ["2", 0], ["a", 0], ["j", 0], ["2", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["a", 0], ["j", 0], ["a", 0], ["i", 0], ["def", 0], ["dis", 0], ["x", 0], ["y", 0], ["short", 0], ["for", 0], ["distance", 0], ["return", 5], ["math", 0], ["sqrt", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["2", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["2", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["b", 0], ["append", 0], ["a", 0], ["i", 0], ["2", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["list", 0], ["reversed", 0], ["range", 0], ["i", 0], ["if", 0], ["dis", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["a", 0], ["j", 0], ["2", 0], ["a", 0], ["i", 0], ["append", 0], ["j", 0], ["break", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["len", 0], ["i", 0], ["3", 0], ["c", 0], ["append", 0], ["1", 0], ["else", 0], ["c", 0], ["append", 0], ["c", 0], ["i", 0], ["3", 0], ["1", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["c", 0], ["if", 0], ["c", 0], ["i", 0], ["1", 0], ["k", 0], ["b", 0], ["i", 0], ["elif", 0], ["c", 0], ["i", 0], ["2", 0], ["0", 0], ["k", 0], ["b", 0], ["i", 0], ["else", 0], ["k", 0], ["b", 0], ["i", 0], ["print", 0], ["k", 0], ["z", 0], ["import", 0], ["math", 0], ["class", 0], ["circ", 0], ["def", 0], ["init", 0], ["self", 0], ["x", 0], ["y", 0], ["r", 0], ["self", 0], ["x", 0], ["x", 0], ["1", 0], ["0", 0], ["self", 0], ["y", 0], ["y", 0], ["1", 0], ["0", 0], ["self", 0], ["r", 0], ["r", 0], ["1", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["vec", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["st", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["st", 0], ["0", 0], ["b", 0], ["int", 0], ["st", 0], ["1", 0], ["c", 0], ["int", 0], ["st", 0], ["2", 0], ["vec", 0], ["append", 0], ["circ", 0], ["a", 0], ["b", 0], ["c", 0], ["gr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["pad", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["vis", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["k", 0], ["continue", 0], ["dist", 0], ["math", 0], ["hypot", 0], ["vec", 0], ["i", 0], ["x", 0], ["vec", 0], ["k", 0], ["x", 0], ["vec", 0], ["i", 0], ["y", 0], ["vec", 0], ["k", 0], ["y", 0], ["if", 0], ["dist", 0], ["vec", 0], ["k", 0], ["r", 0], ["and", 0], ["vec", 0], ["k", 0], ["r", 0], ["vec", 0], ["i", 0], ["r", 0], ["and", 0], ["pad", 0], ["i", 0], ["0", 0], ["or", 0], ["vec", 0], ["k", 0], ["r", 0], ["vec", 0], ["pad", 0], ["i", 0], ["r", 0], ["pad", 0], ["i", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["pad", 0], ["i", 0], ["0", 0], ["continue", 0], ["gr", 0], ["pad", 0], ["i", 0], ["append", 0], ["i", 0], ["st", 0], ["ans", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["pad", 0], ["i", 0], ["0", 0], ["or", 0], ["vis", 0], ["i", 0], ["continue", 0], ["st", 0], ["append", 0], ["i", 0], ["0", 0], ["while", 0], ["len", 0], ["st", 0], ["0", 0], ["node", 0], ["level", 0], ["st", 0], ["pop", 0], ["vis", 0], ["node", 0], ["true", 0], ["mult", 0], ["1", 0], ["0", 0], ["if", 0], ["level", 0], ["0", 0], ["or", 0], ["level", 0], ["2", 0], ["1", 0], ["mult", 0], ["1", 0], ["0", 0], ["ans", 0], ["mult", 0], ["vec", 0], ["node", 0], ["r", 0], ["vec", 0], ["node", 0], ["r", 0], ["math", 0], ["pi", 0], ["for", 0], ["next", 0], ["in", 0], ["gr", 0], ["node", 0], ["st", 0], ["append", 0], ["next", 0], ["level", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["math", 0], ["class", 0], ["circ", 0], ["def", 0], ["init", 0], ["self", 0], ["x", 0], ["y", 0], ["r", 0], ["self", 0], ["x", 0], ["x", 0], ["1", 0], ["0", 0], ["self", 0], ["y", 0], ["y", 0], ["1", 0], ["0", 0], ["self", 0], ["r", 0], ["r", 0], ["1", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["vec", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["st", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["st", 0], ["0", 0], ["b", 0], ["int", 0], ["st", 0], ["1", 0], ["c", 0], ["int", 0], ["st", 0], ["2", 0], ["vec", 0], ["append", 0], ["circ", 0], ["a", 0], ["b", 0], ["c", 0], ["gr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["pad", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["vis", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["k", 0], ["continue", 0], ["dist", 0], ["math", 0], ["hypot", 0], ["vec", 0], ["i", 0], ["x", 0], ["vec", 0], ["k", 0], ["x", 0], ["vec", 0], ["i", 0], ["y", 0], ["vec", 0], ["k", 0], ["y", 0], ["if", 0], ["dist", 0], ["vec", 0], ["k", 0], ["r", 0], ["and", 0], ["vec", 0], ["k", 0], ["r", 0], ["vec", 0], ["i", 0], ["r", 0], ["and", 0], ["pad", 0], ["i", 0], ["0", 0], ["or", 0], ["vec", 0], ["k", 0], ["r", 0], ["vec", 0], ["pad", 0], ["i", 0], ["r", 0], ["pad", 0], ["i", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["pad", 0], ["i", 0], ["0", 0], ["continue", 0], ["gr", 0], ["pad", 0], ["i", 0], ["append", 0], ["i", 0], ["st", 0], ["ans", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["pad", 0], ["i", 0], ["0", 0], ["or", 0], ["vis", 0], ["i", 0], ["continue", 0], ["st", 0], ["append", 0], ["i", 0], ["0", 0], ["while", 0], ["len", 0], ["st", 0], ["0", 0], ["node", 0], ["level", 0], ["st", 0], ["pop", 0], ["vis", 0], ["node", 0], ["true", 0], ["mult", 0], ["1", 0], ["0", 0], ["if", 0], ["level", 0], ["0", 0], ["or", 0], ["level", 0], ["2", 0], ["1", 0], ["mult", 0], ["1", 0], ["0", 0], ["ans", 0], ["mult", 0], ["vec", 0], ["node", 0], ["r", 0], ["vec", 0], ["node", 0], ["r", 0], ["math", 0], ["pi", 0], ["for", 0], ["next", 0], ["in", 0], ["gr", 0], ["node", 0], ["st", 0], ["append", 0], ["next", 0], ["level", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["1", 0], ["n", 0], ["p", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["f", 0], ["x", 0], ["y", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["return", 0], ["r", 0], ["r", 0], ["x", 0], ["y", 0], ["t", 0], ["sorted", 0], ["f", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["r", 0], ["x", 0], ["y", 0], ["t", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["s", 0], ["a", 0], ["b", 0], ["t", 0], ["j", 0], ["if", 0], ["a", 0], ["x", 0], ["2", 0], ["b", 0], ["y", 0], ["2", 0], ["s", 0], ["p", 0], ["j", 0], ["append", 0], ["i", 0], ["d", 0], ["i", 0], ["0", 0], ["break", 0], ["def", 0], ["f", 0], ["i", 0], ["s", 0], ["t", 0], ["i", 0], ["0", 0], ["q", 0], ["1", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["p", 0], ["i", 0], ["while", 0], ["q", 0], ["d", 0], ["i", 0], ["q", 0], ["pop", 0], ["s", 0], ["d", 0], ["t", 0], ["i", 0], ["0", 0], ["q", 0], ["d", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["p", 0], ["i", 0], ["return", 0], ["s", 0], ["print", 0], ["3", 0], ["1415926536", 0], ["sum", 0], ["f", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["d", 0], ["i", 0], ["s", 0], ["0", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["f", 0], ["lambda", 0], ["b", 0], ["a", 0], ["2", 0], ["b", 0], ["2", 0], ["and", 0], ["a", 5], ["0", 5], ["b", 5], ["0", 0], ["2", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["2", 0], ["a", 0], ["2", 0], ["b", 0], ["2", 0], ["2", 0], ["for", 0], ["a", 0], ["in", 0], ["t", 0], ["k", 0], ["sum", 0], ["f", 0], ["b", 0], ["for", 0], ["b", 0], ["in", 0], ["t", 0], ["s", 0], ["1", 0], ["1", 0], ["k", 0], ["1", 0], ["k", 0], ["1", 0], ["a", 0], ["2", 0], ["2", 0], ["print", 0], ["3", 0], ["1415926536", 0], ["s", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.009737827715355805, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0028866694409765575, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.04528582034149963, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.01748604580824328, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.008988764044943821, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00285892634207241, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.044543429844097995, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.01745854986389507, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given two integers K and S.\n\nThree variable X, Y and Z takes integer values satisfying 0≤X,Y,Z≤K.\n\nHow many different assignments of values to X, Y and Z are there such that X + Y + Z = S?  \n\n-----Constraints-----\n - 2≤K≤2500 \n - 0≤S≤3K \n - K and S are integers.  \n\n-----Input-----\nThe input is given from Standard Input in the following format:\nK S\n\n-----Output-----\nPrint the number of the triples of X, Y and Z that satisfy the condition.\n\n-----Sample Input-----\n2 2\n\n-----Sample Output-----\n6\n\nThere are six triples of X, Y and Z that satisfy the condition:\n - X = 0, Y = 0, Z = 2 \n - X = 0, Y = 2, Z = 0 \n - X = 2, Y = 0, Z = 0 \n - X = 0, Y = 1, Z = 1 \n - X = 1, Y = 0, Z = 1 \n - X = 1, Y = 1, Z = 0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["k,s=map(int,input().split())\nprint(len([2 for z in range(k+1) for y in range(k+1) if 0<=s-y-z<=k]))\n", "k,s=map(int,input().split())\ncnt=0\n\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tif s-k<=i+j<=s:\n\t\t\tcnt+=1\n\t\t\t\nprint(cnt)\n", "K, S = map(int, input().split())\n\nkotae = 0\nfor Z in range(K + 1):\n\tX_plus_Y = S - Z\n\tfor Y in range(K + 1):\n\t\tX = X_plus_Y - Y\n\t\tif 0 <= X <= K:\n\t\t\tkotae += 1\n\nprint(kotae)\n", "k,s=map(int,input().split())\nprint(len([1 for x in range(k+1) for y in range(k+1) if 0<=s-x-y<=k]))\n", "K,S = map(int,input().split())\n\ncount = 0\nfor i in range(K+1):\n\tfor j in range(K+1):\n\t\tif 0 <= S-(i+j) <= K:\n\t\t\tcount += 1\nprint(count)\n", "a,b=list(map(int,input().split()))\nn=0\n\nfor y in range(a+1):\n\tfor z in range(a+1):\n\t\t\tp=b-y-z\n\t\t\tif 0<=p and p<=a:\n\t\t\t\tn+=1\nprint(n)\n\t\t\t\n", "K,S = map(int,input().split())\ntotal = 0\ncount = 0\n\nfor x in range(0,K+1):\n\tfor y in range(0,K+1):\n\t\tif K >= (S - x - y) and (S - x - y)>=0:\n\t\t\tcount+=1\nprint(count)            \n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# FileName: \tB\n# CreatedDate:  2020-10-01 02:02:04 +0900\n# LastModified: 2020-10-01 02:04:56 +0900\n#\n\n\nimport os\nimport sys\n# import numpy as np\n# import pandas as pd\n\n\ndef main():\n\tK, S = list(map(int, input().split()))\n\tans = 0\n\tfor x in range(K+1):\n\t\tfor y in range(K+1):\n\t\t\tif 0 <= S - x - y <= K:\n\t\t\t\tans += 1\n\tprint(ans)\n\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "k, s = map(int, input().split())\n\nans = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tif 0 <= s-(x+y) and s-(x+y)<=k:\n\t\t\tans += 1\nprint(ans)\n", "K,S=list(map(int,input().split()))\nans=0\nfor x in range(0,K+1):\n\tfor y in range(0,K+1):\n\t\tz=S-x-y\n\t\tif 0<=z and z<=K:\n\t\t\tans+=1\nprint(ans)\n", "K,S = map(int,input().split())\n\ncnt = 0\nfor x in range(K+1):\n\tfor y in range(K+1):\n\t\tz = S - x - y\n\t\tif 0 <= z <= K:\n\t\t\tcnt += 1\n\t\t\t\nprint(cnt)\n", "k,s = map(int,input().split())\ncnt = 0\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tz = s - i - j\n\t\tif 0 <= z and z <= k:\n\t\t\tcnt += 1\nprint(cnt)\n", "#!/usr/bin/env python3\n# coding:utf-8\n\ndef main():\n\tstdIn1, stdIn2 = list(map(int, input().split()))\n\tstdOut = solve(stdIn1, stdIn2)\n\tprint(stdOut)\n\n\n\"\"\"\n方針\nx,y,zそれぞれを3重ループで0からkまで回す\n(O(N^3)だが、k<=2500なので気にならない)\nx+y+zが等しければパターンを1追加\n\nTLEになったので、もう少し節約するパターンを考える必要あり\nひとまずx,x+y,x+y+zがsより大きなった場合はbreakさせてループを抜ける処理にしてみる\nまだTLEになるので、もう少し考える\n実はzはループする必要はなく z = s - (x + y) <= k であれば +1, > k であれば continueでよい\nこれでO(N^2)に計算量を抑えられる\n\n\"\"\"\n\n\ndef solve(k, s):\n\tpattern = 0\n\tfor x in range(k+1):\n\t\tif x > s:\n\t\t\tbreak\n\t\tfor y in range(k+1):\n\t\t\tif x + y > s:\n\t\t\t\tbreak\n\t\t\tz = s - x - y\n\t\t\tif z <= k:\n\t\t\t\tpattern += 1\n\n\treturn pattern\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "k, s = list(map(int, input().split()))\n\nans = 0\nfor x in range(k + 1):\n\tfor y in range(k + 1):\n\t\tif 0 <= s - x - y <= k:\n\t\t\tans += 1\n\nprint(ans)\n", "k, s = map(int, input().split())\nans = 0\nfor x in range(k+1):\n\tif x > s:\n\t\tbreak\n\telse:\n\t\tfor y in range(k+1):\n\t\t\tif x+y > s:\n\t\t\t\tbreak\n\t\t\telif s - x - y <= k:\n\t\t\t\tans += 1\nprint(ans)\n", "k,s=list(map(int,input().split()))\ncnt=0\nfor x in range(0,k+1):\n\tfor y in range(0,k+1):\n\t\tz=s-x-y\n\t\tif (0<=z<=k):\n\t\t\tcnt+=1\n\t\t\t\nprint(cnt)\n", "k, n = list(map(int,input().split()))\n\ndef the_algorithm(k, n):\n\tcount = 0\n\n\tfor x in range(k + 1):\n\t\tfor y in range(k + 1):\n\t\t\tz = n - x - y\n\t\t\tif 0 <= z <= k:\n\t\t\t\tcount += 1\n\t\n\treturn count\n\nprint((the_algorithm(k, n)))\n", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n\tK, S = LI()\n\n\tans = 0\n\tfor x, y in itertools.product(list(range(K + 1)), repeat=2):\n\t\tif 0 <= S - (x + y) <= K:\n\t\t\tans += 1\n\n\tprint(ans)\n\ndef __starting_point():\n\tresolve()\n\n__starting_point()\n", "k,s = map(int,input().split())\nans = 0\n\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tz = s - (x + y)\n\t\tif 0<=z<=k:\n\t\t\tans += 1\nprint(ans)\n", "k,s = map(int,input().split())\nans = 0\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tif s - (i+j) <= k and s - (i+j) >= 0:\n\t\t\tans += 1\nprint(ans)\n", "k,s=map(int,input().split())\nans=0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tif 0<=s-(x+y)<=k:\n\t\t\tans+=1\nprint(ans)\n", "def main():\n\tK, S = list(map(int, input().split()))\n\tans = 0\n\tfor Z in range(0, K+1):\n\t\tif 0 <= S - Z <= 2*K:\n\t\t\tans += min(2*K - (S - Z) + 1, S-Z + 1)\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "K, S = map(int, input().split())\ncnt = 0\nfor i in range(K+1):\n\tfor j in range(K+1):\n\t\tif 0 <= S-i-j <= K:\n\t\t\tcnt += 1\nprint(cnt)\n", "k, s = map(int,input().split())\n\ncount=0\nfor X in range(k+1):\n\tfor Y in range(k+1):\n\t\tZ = s - X - Y\n\t\tif k>=Z>=0:\n\t\t\tcount+=1\n\nprint(count)\n", "def answer(k: int, s: int) -> int:\n\tcount = 0\n\t\n\tfor x in range(k + 1):\n\t\ty_max = min(k, s - x)\n\t\ty_min = max(0, s - x - k)\n\t\tcomb = y_max - y_min + 1\n\t\t\n\t\tif 0 < comb:\n\t\t\tcount += comb\n\n\treturn count\n\n\ndef main():\n\tk, s = map(int, input().split())\n\tprint(answer(k, s))\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "k,s = map(int,input().split())\n\ncount = 0\n\nfor x in range(k + 1):\n\tfor y in range(k + 1):\n\t\tif 0 <= s - x - y <= k:\n\t\t\tcount += 1\nprint(count)\n", "k, s = map(int, input().split())\ncount = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tz = s - x -y\n\t\tif 0 <= z <= k:\n\t\t\tcount += 1\nprint(count)\n", "K, S = map(int, input().split())\nans = 0\nfor x in range(K+1):\n\tfor y in range(K+1):\n\t\tz = S - x - y\n\t\tif 0 <= z <= K:\n\t\t\tans += 1\n\nprint(ans)\n", "k,s = list(map(int,input().split()))\n\ncnt=0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tif 0<=s-x-y<=k:\n\t\t\tcnt+=1\nprint(cnt)\n", "K, S = list(map(int, input().split()))\nSum = 0\n\nfor i in range(K + 1):\n\tfor j in range(K + 1):\n\t\tif 0 <= S - i - j <= K:\n\t\t\tSum += 1\n\nprint(Sum)\n", "k,s = map(int,input().split())\nans = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tz = s-x-y\n\t\tans += (0 <= z <= k)\nprint(ans)\n", "K,S = map(int,input().split())\nans = 0\nfor i in range(K+1):\n\tfor j in range(K+1):\n\t\tx = S - i - j\n\t\tif 0 <= x and x <= K:\n\t\t\tans += 1\nprint(ans)\n", "K,S = map(int,input().split())\n\nans = 0\nfor x in range(K+1):\n\tfor y in range(K+1):\n\t\tz = S-x-y\n\t\tif z <=K and z >=0:\n\t\t\tans += 1\nprint(ans)\n", "k,s=map(int,input().split())\nans=0\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tif 0<=s-i-j<=k:\n\t\t\tans+=1\nprint(ans)\n", "def main():\n\tK, S = list(map(int,input().split()))\n\tans = 0\n\tfor i in range(K+1):\n\t\tfor j in range(K+1):\n\t\t\tif i+j <= S and S - (i+j) <= K:\n\t\t\t\tans += 1\n\tprint(ans)\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "k, s = map(int, input().split())\ncount=0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tif 0<=s-x-y<=k:\n\t\t\tcount+=1\nprint(count)\n", "def main():\n\tK,S = map(int,input().split())\n\tans = 0\n\tListK = [i for i in range(K+1)]\n\tfor x in ListK:\n\t\tfor y in ListK:\n\t\t\tif 0 <= S - (x + y) <= K:\n\t\t\t\tans += 1\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "K, S = list(map(int, input().split()))\nc = 0\n\nfor x in range(K+1):\n\tfor y in range(K+1):\n\t\tif 0 <= S-(x+y) <= K:\n\t\t\tc += 1\nprint(c)\n", "# B - Sum of Three Integers\n\nk,s = list(map(int,input().split()))\nc = 0\nmin_limit = s - k\n\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tif i + j <= s and i + j >= min_limit:\n\t\t\tc += 1\nprint(c)\n", "k, s = list(map(int, input().split()))\n\nans = 0\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tm = s - i - j\n\t\tif (0 <= m <= k):\n\t\t\tans += 1\n\nprint(ans)\n", "k, s = map(int, input().split())\n\ncnt = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t  if x+y<= s:\n\t\tz = s-(x+y)\n\t\tif z <= k:\n\t\t  cnt +=1\n\nprint(cnt)\n", "import sys\nimport heapq\nfrom decimal import Decimal\n\ninput = sys.stdin.readline\nk, s = map(int, input().split())\n\nans = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tz = s - x - y\n\t\tif z >= 0 and z <= k:\n\t\t\tans += 1\n\t\nprint(ans)\n", "k,s = map(int, input().split())\ncnt = 0\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\t\tif 0 <= s-(i+j) <= k:\n\t\t\t\tcnt += 1\nprint(cnt)\n", "k, s = list(map(int, input().split()))\ncounter = 0\nfor x in range(k + 1):\n\tfor y in range(x, k + 1):\n\t\tz = s - x - y\n\t\tif y <= z <= k:\n\t\t\tif x == y == z:\n\t\t\t\tcounter += 1\n\t\t\telif x == y or y == z:\n\t\t\t\tcounter += 3\n\t\t\telse:\n\t\t\t\tcounter += 6\n\nprint(counter)\n", "k,s=map(int,input().split())\ntotal=0\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tgen=s-k\n\t\tnum=i+j\n\t\tif num<=s and num>=gen:\n\t\t\ttotal+=1\nprint(total)\n", "k,s=map(int,input().split())\ncnt=0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tif 0<=s-x-y<=k:\n\t\t\tcnt+=1\nprint(cnt)\n", "k, s = list(map(int, input().split()))\nans = 0\nfor x in range(k + 1):\n\tfor y in range(k + 1):\n\t\tz = s - x - y\n\t\tif 0 <= z <= k:\n\t\t\tans += 1\nprint(ans)\n", "array = list(map(int,input().split()))\nK = array[0]\nS = array[1]\ncount = 0\nfor i in range(K+1):\n\tfor j in range(K+1):\n\t\tz = S - i - j\n\t\tif(z >= 0 and z <= K):\n\t\t\tcount+=1\nprint(count)\n", "k,s=map(int,input().split())\ncnt=0\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tif 0<=s-(i+j)<=k:\n\t\t\tcnt+=1\n\nprint(cnt)\n", "'''\nCreated on 2020/09/03\n\n@author: harurun\n'''\ndef main():\n\timport sys\n\tpin=sys.stdin.readline\n\tpout=sys.stdout.write\n\tperr=sys.stderr.write\n\t\n\tK,S=map(int,pin().split())\n\tans=0\n\tfor x in range(K+1):\n\t\tfor y in range(K+1):\n\t\t\tif 0<=S-x-y<=K:\n\t\t\t\tans+=1\n\tprint(ans)\n\treturn \nmain()\n", "import sys\nfrom collections import defaultdict\n\n\ndef get_lines():\n\treturn [line for line in sys.stdin]\n\n\ndef get_sum_counts(K):\n\tcnts = defaultdict(int)\n\tfor i in range(K + 1):\n\t\tfor j in range(K + 1):\n\t\t\tcnts[i + j] += 1\n\treturn cnts\n\n\ndef main(lines):\n\t'''\n\tS - Z = X + Y\n\t'''\n\tK, S = list(map(int, lines[0].split()))\n\tcount = 0\n\tsum_counts = get_sum_counts(K)\n\tfor z in range(min(K, S) + 1):\n\t\ttarget = S - z\n\t\tcount += sum_counts[target]\n\treturn count\n\n\ndef __starting_point():\n\tlines = get_lines()\n\tres = main(lines)\n\tprint(f'{res}')\n\n__starting_point()\n", "K,S=map(int,input().split())\ncount=0\nfor x in range(K+1):\n\tfor y in range(K+1):\n\t\tif 0<=S-x-y<=K:\n\t\t\tcount+=1\nprint(count)\n", "k,s = map(int,input().split())\nans = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tz = s - (x + y)\n\t\tif 0 <= z <= k:\n\t\t\tans += 1\nprint(ans)\n", "# coding: utf-8\n# Your code here!\n\nk, s = map(int, input().split())\n\ncnt = 0\n\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tif s-i-j <= k and s-i-j>=0:\n\t\t\tcnt += 1\n\nprint(cnt)\n", "k,s = map(int,input().split())\nans = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tif k >= s-x-y >= 0:\n\n\t\t\tans += 1\nprint(ans)\n", "k,s = map(int, input().split())\nc = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tif 0 <= s-x-y <= k:\n\t\t\tc += 1\nprint(c)\n", "import itertools\nurl = \"https://atcoder.jp//contests/abc057/tasks/abc057_a\"\n\ndef main():\n\tk, s = list(map(int, input().split()))\n\tcount = 0\n\tfor x, y in itertools.product(range(k+1), range(k+1)):\n\t\tz = s - x - y\n\t\tif 0 <= z <= k:\n\t\t\tcount += 1\n\tprint(count)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "k,s = list(map(int,input().split()))\n\ncnt=0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tz = s -x- y \n\t\tif 0<=z and z<=k:\n\t\t\tcnt+=1\n\nprint(cnt)\n", "k,s = map(int,input().split())\ncnt = 0\n\nfor x in range(k+1) :\n\tfor y in range(k+1) :\n\t\tz = s-(x+y)\n\t\tif 0 <= z <= k and x+y+z == s :\n\t\t\tcnt += 1\n\nprint(cnt)\n", "k, s = map(int, input().split())\n\nans = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tz = s - x - y\n\t\tif 0 <= z and z <= k:\n\t\t\tans += 1\n\t\t\t\t\nprint(ans)\n", "k,s = map(int,input().split())\nans = 0\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tif 0 <= s - i - j <= k:\n\t\t\tans += 1\n\t\t\t\nprint(ans)\n", "k,s=map(int,input().split())\nans=0\nfor i in range(k+1):\n\tnum=s-i\n\tfor j in range(min(num+1,k+1)):\n\t\tif 0<=num-j<=k:\n\t\t\tans+=1\nprint(ans)\n", "k, s = map(int, input().split())\ncnt = 0\n\nfor i in range(k + 1):\n\tfor j in range(k + 1):\n\t\tz = s - i - j\n\t\tif 0 <= z <= k:\n\t\t\tcnt += 1\n\nprint(cnt)\n", "k,s=map(int, input().split())\nprint(sum(s-k<=x+y<=s for x in range(min(k+1,s+1)) for y in range(min(k+1,s-x+1))))\n", "k, s = list(map(int, input().split()))\n\nans = 0\n\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\ttmp = s - x - y\n\t\tif 0 <= tmp and tmp <= k:\n\t\t\tans += 1\n\nprint(ans)\n", "k,s=map(int,input().split())\nprint(len([1 for z in range(k+1) for y in range(k+1) if 0<=s-y-z<=k]))\n", "K,S = map(int, input().split())\ncnt=0\nfor X in range(K+1):\n\tfor Y in range(K+1):\n\t\t if S-X-Y>=0 and S-X-Y<=K:\n\t\t\t cnt+=1\nprint(cnt)\n", "k, s = list(map(int, input().split()))\n\ncnt = 0\nfor x in range(k + 1):\n\tfor y in range(k + 1):\n\t\tz = s - x - y\n\t\tif 0 <= z <= k:\n\t\t\tcnt += 1\n\nprint(cnt)\n", "K,S=map(int,input().split())\nans=0\nfor i in range(K+1):\n\tfor j in range(K+1):\n\t\tk=S-i-j\n\t\tif i+j+k==S:\n\t\t\tif 0<=k<=K:\n\t\t\t\tans+=1\nprint(ans)\n", "K,S=list(map(int,input().split()))\nans=0\nfor X in range(K+1):\n\tfor Y in range(K+1):\n\t\tZ=S-X-Y\n\t\tif 0<=Z<=K:\n\t\t\tans+=1\nprint(ans)\n", "k, s = map(int, input().split())\n\nans = 0\nfor i1 in range(min(k+1, s+1)):\n\tfor i2 in range(0, min(k+1, s - i1 + 1)):\n\t\tif s - (i1 + i2) <= k:\n\t\t\tans += 1\n\nprint(ans)\n", "k, s = map(int, input().split())\ncnt = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tz = s - x - y\n\t\tif k >= z >= 0:\n\t\t\tcnt += 1\nprint(cnt)\n", "import sys\n\nK, S = map(int, sys.stdin.readline().split())\nans = 0\nfor x in range(K+1):\n\tfor y in range(K+1):\n\t\tif 0 <= S - (x + y) <= K:\n\t\t\tans += 1\nprint(ans)\n", "K, S = list(map(int, input().split()))\n\ncount = 0\nfor i in range(K + 1):\n\tfor j in range(K + 1):\n\t\tif (S - i - j <= K and S - i - j >= 0):\n\t\t\tcount += 1\n\nprint(count)\n", "K,S = map(int, input().split())\ncnt=0\nfor x in range(K+1):\n\tfor y in range(K+1):\n\t\tif 0 <= S-(x+y) <= K:\n\t\t\tcnt += 1\nprint(cnt)\n", "k, s = map(int,input().split())\n\nans = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\t\tz = s - x - y \n\t\t\tif z <= k and z >= 0 :\n\t\t\t\tans += 1\n\nprint(ans)\n", "k,s=map(int,input().split())\ncount=0\n\nif k*3==s:\n\tprint(1)\n\treturn\n\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tz=s-x-y\n\t\tif z>=0 and z<=k:\n\t\t\tcount+=1\nprint(count)\n", "k, s = map(int, input().split(' '))\ncount = 0\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tif i + j <= s and s<=k+i+j:\n\t\t\tcount += 1\n\nprint(count)\n", "k, s = list(map(int, input().split()))\ncounter = 0\nfor i in range(k + 1):\n\tcounter += max(min(k, s - i) - max(0, s - k - i) + 1, 0)\n\nprint(counter)\n", "k, s = list(map(int, input().split()))\n\ncount = 0\nfor x in range(k + 1):\n\tfor y in range(k + 1):\n\t\tz = s - x - y\n\t\tif z < 0 or z > k:\n\t\t\tcontinue\n\t\tcount += 1\n\t\t# print(x, y, z)\n\nprint(count)\n", "import sys, math\nfrom itertools import combinations as c, product as p\nfrom collections import deque\nsys.setrecursionlimit(10**9)\n\n\ndef si(): return input()\ndef ii(): return int(input())\ndef fi(): return float(input())\ndef lstr(): return input().split()\ndef lint(): return list(map(int, input().split()))\ndef lint_dec(): return list(map(lambda x:int(x) - 1, input().split()))\ndef lnstr(n): return [input() for _ in range(n)]\ndef lnint(n): return [int(input()) for _ in range(n)]\ndef lint_list(n): return [lint() for _ in range(n)]\n\n\n\n############################################################\nK, S = lint()\nans = 0\n\nfor i in range(K + 1):\n\tfor j in range(K + 1):\n\t\tif 0 <= S - i - j <= K:\n\t\t\tans += 1\n\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\n\ndef main():\n\tK, S = [int(x) for x in input().split()]\n\n\n\tans = 0\n\tfor x in range(K + 1) :\n\t\tfor y in range(K + 1):\n\t\t\tz = S - x - y\n\t\t\tif z < 0 or z > K:\n\t\t\t\tcontinue\n\t\t\tans += 1\n\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n\n__starting_point()\n", "k,s=map(int,input().split())\ncount=0\nfor x in range(k+1):\n\tfor y in range(x+1):\n\t\tif x+y>s:\n\t\t\tcontinue\n\t\telse:\n\t\t\tz=s-x-y\n\t\t\tif z>x or z>y:\n\t\t\t  continue\n\t\t\tif x==y==z:\n\t\t\t\tcount+=1\n\t\t\telif x==y or y==z or z==x:\n\t\t\t\tcount+=3\n\t\t\telse:\n\t\t\t\tcount+=6\nprint(count)\n", "K,S = list(map(int,input().split()))\nresult = 0\n\nfor i in range(K+1):\n\tfor j in range(K+1):\n\t\tif K >= S -(i+j) >= 0:\n\t\t\tz = S -(i+j)\n\t\t\tresult += 1\n\t\t\t\n\nprint(result)\n", "k,s = [int(x) for x in input().split()]\n\nres = 0\n\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tcc = s - i - j\n\t\tif 0 <= cc <= k:\n\t\t\tres += 1\n\nprint(res)\n", "k,s = map(int,input().split())\nans = 0\nfor i in range(k + 1):\n\tfor j in range(k + 1):\n\t\tl = s - i - j\n\t\tif 0 <= l and l <= k:\n\t\t\tans += 1\nprint(ans)\n", "k, s = map(int, input().split())\ncnt = 0\nfor i in range(k + 1):\n\tfor j in range(k + 1):\n\t\tif 0 <= s - i - j <= k:\n\t\t\tcnt += 1\nprint(cnt)\n", "import itertools as it\n# 入力の整数K, S\nK, S = map(int, input().split())\n\n\ncounter = 0\n# 3つの変数を作る\nfor x in range(0, K+1):\n\tfor y in range(0, K+1):\n\t\tif K >= (S-x-y) and (S-x-y) >= 0:\n\t\t\tcounter+=1\nprint(counter)\n", "k,s = map(int,input().split())\nans = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tz = s-x-y\n\t\tif z >= 0 and z <= k:\n\t\t\tans += 1\nprint(ans)\n", "K, S = map(int, input().split())\nprint(sum(0<=S-x-y<=K for x in range(K+1) for y in range(K+1)))\n", "k,s = map(int, input().split())\nans = 0\nfor i in range(k+1):\n\tfor j in range(k+1):\n\t\tt = s - (i + j)\n\t\tif 0 <= t <= k:\n\t\t\tans += 1\nprint(ans)\n", "k, s = list(map(int, input().split()))\n\nsum = 0\n\nfor z in range(k + 1):\n\tfor y in range(k + 1):\n\t\tif (s - y - z <= k and s - y - z >= 0):\n\t\t\tsum += 1\n\nprint(sum)\n", "k_num, s_num = map(int, input().split())\n\ncnt = 0\nfor x in range(k_num+1):\n\tl = s_num - x\n\tfor y in range(k_num+1):\n\t\tz = l - y\n\t\tif 0 <= z <= k_num:\n\t\t\tcnt += 1\n\nprint(cnt)\n", "k, s = map(int, input().split())\nans = 0\nfor x in range(k+1):\n\tfor y in range(k+1):\n\t\tz = s - x - y\n\t\tif 0 <= z <= k:\n\t\t\tans += 1\nprint(ans)\n", "K,S=map(int, input().split())\nans = 0\nx = S//3+1\nfor i in range(x):\n\ty = (S-i)//2+1\n\tfor j in range(i, y):\n\t\tk = S - i - j\n\t\tif k > K:\n\t\t\tcontinue\n\t\tif i == j == k:\n\t\t\tans += 1\n\t\telif i == j or j == k:\n\t\t\tans += 3\n\t\telse:\n\t\t\tans += 6\nprint(ans)\n", "def LI():\n\treturn list(map(int, input().split()))\n\n\nK, S = LI()\nans = 0\nfor i in range(K+1):\n\tfor j in range(K+1):\n\t\tif 0 <= S-(i+j) <= K:\n\t\t\tans += 1\nprint(ans)\n", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(K: int, S: int):\n\tans = 0\n\tfor x in range(K+1):\n\t\tfor y in range(K+1):\n\t\t\tif 0 <= S - x - y <= K:\n\t\t\t\tans += 1\n\treturn ans\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools\ndef main():\n\tdef iterate_tokens():\n\t\tfor line in sys.stdin:\n\t\t\tfor word in line.split():\n\t\t\t\tyield word\n\ttokens = iterate_tokens()\n\tK = int(next(tokens))  # type: int\n\tS = int(next(tokens))  # type: int\n\tprint((solve(K, S)))\n\ndef test():\n\timport doctest\n\tdoctest.testmod()\n\ndef __starting_point():\n\t#test()\n\tmain()\n\n__starting_point()\n", "K, S = map(int, input().split())\ncnt = 0\n\nfor x in range(K+1):\n\tfor y in range(K+1):\n\t\tz = S - x - y\n\t\tif 0 <= z <= K:\n\t\t\tcnt += 1\nprint(cnt)\n", "k, s = list(map(int, input().split()))\ncounter = 0\nfor x in range(k + 1):\n\tfor y in range(k + 1):\n\t\tif 0 <= s - x - y <= k:\n\t\t\tcounter += 1\n\nprint(counter)\n", "a,b=input().split()\na=int(a)\nb=int(b)\nc=0\nfor i in range(a+1):\n\tfor k in range(a+1):\n\t\tif b-a<=i+k<=b:\n\t\t\tc=c+1\nprint(c)\n"], "id": "id7630"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7630", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["are", 1], ["given", 1], ["two", 1], ["integers", 1], ["k", 1], ["and", 1], ["s", 1], ["three", 1], ["variable", 1], ["x", 1], ["y", 1], ["and", 1], ["z", 1], ["takes", 1], ["integer", 1], ["values", 1], ["satisfying", 1], ["0≤x", 1], ["y", 1], ["z≤k", 1], ["how", 1], ["many", 1], ["different", 1], ["assignments", 1], ["of", 1], ["values", 1], ["to", 1], ["x", 0], ["y", 0], ["and", 0], ["z", 0], ["are", 0], ["there", 0], ["such", 0], ["that", 0], ["x", 0], ["y", 0], ["z", 0], ["s", 0], ["constraints", 0], ["2≤k≤2500", 0], ["0≤s≤3k", 0], ["k", 0], ["and", 0], ["s", 0], ["are", 0], ["integers", 0], ["input", 0], ["the", 0], ["input", 0], ["is", 0], ["given", 0], ["from", 0], ["standard", 0], ["input", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["k", 0], ["s", 0], ["output", 0], ["print", 1], ["the", 1], ["number", 1], ["of", 0], ["the", 0], ["triples", 0], ["of", 0], ["x", 0], ["y", 0], ["and", 0], ["z", 0], ["that", 0], ["satisfy", 0], ["the", 0], ["condition", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["sample", 0], ["output", 0], ["6", 0], ["there", 0], ["are", 0], ["six", 0], ["triples", 0], ["of", 0], ["x", 0], ["y", 0], ["and", 0], ["z", 0], ["that", 0], ["satisfy", 0], ["the", 0], ["condition", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["z", 0], ["2", 0], ["x", 0], ["0", 0], ["y", 0], ["2", 0], ["z", 0], ["0", 0], ["x", 0], ["2", 0], ["y", 2], ["0", 2], ["z", 11], ["0", 2], ["x", 11], ["0", 9], ["y", 15], ["1", 8], ["z", 8], ["1", 7], ["x", 0], ["1", 0], ["y", 0], ["0", 0], ["z", 0], ["1", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["z", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3082706766917293, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2500184443793467, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5310344827586206, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.45517241379310347, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2857142857142857, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.24815013724788165, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5310344827586206, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.45517241379310347, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["len", 0], ["2", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["y", 0], ["z", 0], ["k", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["s", 0], ["k", 0], ["i", 0], ["j", 0], ["s", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["kotae", 0], ["0", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["x", 0], ["plus", 0], ["y", 0], ["s", 0], ["z", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["x", 0], ["x", 0], ["plus", 0], ["y", 0], ["y", 0], ["if", 0], ["0", 0], ["x", 0], ["k", 0], ["kotae", 0], ["1", 0], ["print", 0], ["kotae", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["len", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["0", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["p", 0], ["b", 0], ["y", 0], ["z", 0], ["if", 0], ["0", 0], ["p", 0], ["and", 0], ["p", 0], ["a", 0], ["n", 0], ["1", 0], ["print", 0], ["n", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["total", 0], ["0", 0], ["count", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["0", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["s", 0], ["x", 0], ["y", 0], ["and", 0], ["s", 0], ["x", 0], ["y", 0], ["0", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["coding", 0], ["utf", 0], ["8", 0], ["filename", 0], ["b", 0], ["createddate", 0], ["2020", 0], ["10", 0], ["01", 0], ["02", 0], ["02", 0], ["04", 0], ["0900", 0], ["lastmodified", 0], ["2020", 0], ["10", 0], ["01", 0], ["02", 0], ["04", 0], ["56", 0], ["0900", 0], ["import", 0], ["os", 0], ["import", 0], ["sys", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["import", 0], ["pandas", 0], ["as", 0], ["pd", 0], ["def", 0], ["main", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["and", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["0", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["and", 0], ["z", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["0", 0], ["z", 0], ["and", 0], ["z", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["def", 0], ["main", 0], ["stdin1", 0], ["stdin2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["stdout", 0], ["solve", 0], ["stdin1", 0], ["stdin2", 0], ["print", 0], ["stdout", 0], ["方針", 0], ["x", 0], ["y", 0], ["zそれぞれを3重ループで0からkまで回す", 0], ["o", 0], ["n", 0], ["3", 0], ["だが、k", 0], ["2500なので気にならない", 0], ["x", 0], ["y", 0], ["zが等しければパターンを1追加", 0], ["tleになったので、もう少し節約するパターンを考える必要あり", 0], ["ひとまずx", 0], ["x", 0], ["y", 0], ["x", 0], ["y", 0], ["zがsより大きなった場合はbreakさせてループを抜ける処理にしてみる", 0], ["まだtleになるので、もう少し考える", 0], ["実はzはループする必要はなく", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["であれば", 0], ["1", 0], ["k", 0], ["であれば", 0], ["continueでよい", 0], ["これでo", 0], ["n", 0], ["2", 0], ["に計算量を抑えられる", 0], ["def", 0], ["solve", 0], ["k", 0], ["s", 0], ["pattern", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["x", 0], ["s", 0], ["break", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["x", 0], ["y", 0], ["s", 0], ["break", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["z", 0], ["k", 0], ["pattern", 0], ["1", 0], ["return", 0], ["pattern", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["x", 0], ["s", 0], ["break", 0], ["else", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["x", 0], ["y", 0], ["s", 0], ["break", 0], ["elif", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["0", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["the", 0], ["algorithm", 0], ["k", 0], ["n", 0], ["count", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["n", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["count", 0], ["1", 0], ["return", 0], ["count", 0], ["print", 0], ["the", 0], ["algorithm", 0], ["k", 0], ["n", 0], ["import", 0], ["bisect", 0], ["collections", 0], ["copy", 0], ["heapq", 0], ["itertools", 0], ["math", 0], ["string", 0], ["sys", 0], ["input", 0], ["lambda", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["inf", 0], ["float", 0], ["inf", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["f", 0], ["return", 0], ["float", 0], ["input", 0], ["def", 0], ["ss", 0], ["return", 0], ["input", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["lf", 0], ["return", 0], ["float", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["lss", 0], ["return", 0], ["input", 0], ["split", 0], ["def", 0], ["resolve", 0], ["k", 0], ["s", 0], ["li", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["itertools", 0], ["product", 0], ["list", 0], ["range", 0], ["k", 0], ["1", 0], ["repeat", 0], ["2", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["resolve", 0], ["starting", 0], ["point", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["main", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["0", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["z", 0], ["2", 0], ["k", 0], ["ans", 0], ["min", 0], ["2", 0], ["k", 0], ["s", 0], ["z", 0], ["1", 0], ["s", 0], ["z", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["k", 0], ["z", 0], ["0", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["def", 0], ["answer", 0], ["k", 0], ["int", 0], ["s", 0], ["int", 0], ["int", 0], ["count", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["y", 0], ["max", 0], ["min", 0], ["k", 0], ["s", 0], ["x", 0], ["y", 0], ["min", 0], ["max", 0], ["0", 0], ["s", 0], ["x", 0], ["k", 0], ["comb", 0], ["y", 0], ["max", 0], ["y", 0], ["min", 0], ["1", 0], ["if", 0], ["0", 0], ["comb", 0], ["count", 0], ["comb", 0], ["return", 0], ["count", 0], ["def", 0], ["main", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["answer", 0], ["k", 0], ["s", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["sum", 0], ["1", 0], ["print", 0], ["sum", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["ans", 0], ["0", 0], ["z", 0], ["k", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["x", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["0", 0], ["x", 0], ["and", 0], ["x", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["z", 0], ["k", 0], ["and", 0], ["z", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["main", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["def", 0], ["main", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["listk", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["listk", 0], ["for", 0], ["y", 0], ["in", 0], ["listk", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["c", 0], ["1", 0], ["print", 0], ["c", 0], ["b", 0], ["sum", 0], ["of", 0], ["three", 0], ["integers", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["min", 0], ["limit", 0], ["s", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["s", 0], ["and", 0], ["i", 0], ["j", 0], ["min", 0], ["limit", 0], ["c", 0], ["1", 0], ["print", 0], ["c", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["m", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["0", 0], ["m", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["x", 0], ["y", 0], ["s", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["z", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["import", 0], ["sys", 0], ["import", 0], ["heapq", 0], ["from", 0], ["decimal", 0], ["import", 0], ["decimal", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["z", 0], ["0", 0], ["and", 0], ["z", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["counter", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["x", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["y", 0], ["z", 0], ["k", 0], ["if", 0], ["x", 0], ["y", 0], ["z", 0], ["counter", 0], ["1", 0], ["elif", 0], ["x", 0], ["y", 0], ["or", 0], ["y", 0], ["z", 0], ["counter", 0], ["3", 0], ["else", 0], ["counter", 0], ["6", 0], ["print", 0], ["counter", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["total", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["gen", 0], ["s", 0], ["k", 0], ["num", 0], ["i", 0], ["j", 0], ["if", 0], ["num", 0], ["s", 0], ["and", 0], ["num", 0], ["gen", 0], ["total", 0], ["1", 0], ["print", 0], ["total", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["array", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["array", 0], ["0", 0], ["s", 0], ["array", 0], ["1", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["z", 0], ["0", 0], ["and", 0], ["z", 0], ["k", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["created", 0], ["on", 0], ["2020", 0], ["09", 0], ["03", 0], ["author", 0], ["harurun", 0], ["def", 0], ["main", 0], ["import", 0], ["sys", 0], ["pin", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["pout", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["perr", 0], ["sys", 0], ["stderr", 0], ["write", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["pin", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["return", 0], ["main", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["def", 0], ["get", 0], ["lines", 0], ["return", 0], ["line", 0], ["for", 0], ["line", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["def", 0], ["get", 0], ["sum", 0], ["counts", 0], ["k", 0], ["cnts", 0], ["defaultdict", 0], ["int", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["cnts", 0], ["i", 0], ["j", 0], ["1", 0], ["return", 0], ["cnts", 0], ["def", 0], ["main", 0], ["lines", 0], ["s", 0], ["z", 0], ["x", 0], ["y", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["lines", 0], ["0", 0], ["split", 0], ["count", 0], ["0", 0], ["sum", 0], ["counts", 0], ["get", 0], ["sum", 0], ["counts", 0], ["k", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["min", 0], ["k", 0], ["s", 0], ["1", 0], ["target", 0], ["s", 0], ["z", 0], ["count", 0], ["sum", 0], ["counts", 0], ["target", 0], ["return", 0], ["count", 0], ["def", 0], ["starting", 0], ["point", 0], ["lines", 0], ["get", 0], ["lines", 0], ["res", 0], ["main", 0], ["lines", 0], ["print", 0], ["f", 0], ["res", 0], ["starting", 0], ["point", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["coding", 0], ["utf", 0], ["8", 0], ["your", 0], ["code", 0], ["here", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["0", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["s", 0], ["x", 0], ["y", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["c", 0], ["1", 0], ["print", 0], ["c", 0], ["import", 0], ["itertools", 0], ["url", 0], ["https", 0], ["atcoder", 0], ["jp", 0], ["contests", 0], ["abc057", 0], ["tasks", 0], ["abc057", 0], ["a", 0], ["def", 0], ["main", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["itertools", 0], ["product", 0], ["range", 0], ["k", 0], ["1", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["and", 0], ["z", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["and", 0], ["x", 0], ["y", 0], ["z", 0], ["s", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["and", 0], ["z", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["num", 0], ["s", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["min", 0], ["num", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["num", 0], ["j", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["s", 0], ["k", 0], ["x", 0], ["y", 0], ["s", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["min", 0], ["k", 0], ["1", 0], ["s", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["min", 0], ["k", 0], ["1", 0], ["s", 0], ["x", 0], ["1", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["tmp", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["tmp", 0], ["and", 0], ["tmp", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["len", 0], ["1", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["y", 0], ["z", 0], ["k", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["s", 0], ["x", 0], ["y", 0], ["0", 0], ["and", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["k", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["i", 0], ["j", 0], ["k", 0], ["s", 0], ["if", 0], ["0", 0], ["k", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i1", 0], ["in", 0], ["range", 0], ["min", 0], ["k", 0], ["1", 0], ["s", 0], ["1", 0], ["for", 0], ["i2", 0], ["in", 0], ["range", 0], ["0", 0], ["min", 0], ["k", 0], ["1", 0], ["s", 0], ["i1", 0], ["1", 0], ["if", 0], ["s", 0], ["i1", 0], ["i2", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["k", 0], ["z", 0], ["0", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["import", 0], ["sys", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["0", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["z", 0], ["k", 0], ["and", 0], ["z", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["if", 0], ["k", 0], ["3", 0], ["s", 0], ["print", 0], ["1", 0], ["return", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["z", 0], ["0", 0], ["and", 0], ["z", 0], ["k", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["s", 0], ["and", 0], ["s", 0], ["k", 0], ["i", 0], ["j", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["counter", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["counter", 0], ["max", 0], ["min", 0], ["k", 0], ["s", 0], ["i", 0], ["max", 0], ["0", 0], ["s", 0], ["k", 0], ["i", 0], ["1", 0], ["0", 0], ["print", 0], ["counter", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["z", 0], ["0", 0], ["or", 0], ["z", 0], ["k", 0], ["continue", 0], ["count", 0], ["1", 0], ["print", 0], ["x", 0], ["y", 0], ["z", 0], ["print", 0], ["count", 0], ["import", 0], ["sys", 0], ["math", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["as", 0], ["c", 0], ["product", 0], ["as", 0], ["p", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["def", 0], ["si", 0], ["return", 0], ["input", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["fi", 0], ["return", 0], ["float", 0], ["input", 0], ["def", 0], ["lstr", 0], ["return", 0], ["input", 0], ["split", 0], ["def", 0], ["lint", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["lint", 0], ["dec", 0], ["return", 0], ["list", 0], ["map", 0], ["lambda", 0], ["x", 0], ["int", 0], ["x", 0], ["1", 0], ["input", 0], ["split", 0], ["def", 0], ["lnstr", 0], ["n", 0], ["return", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["lnint", 0], ["n", 0], ["return", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["lint", 0], ["list", 0], ["n", 0], ["return", 0], ["lint", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["s", 0], ["lint", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["main", 0], ["k", 0], ["s", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["z", 0], ["0", 0], ["or", 0], ["z", 0], ["k", 0], ["continue", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["y", 0], ["s", 0], ["continue", 0], ["else", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["z", 0], ["x", 0], ["or", 0], ["z", 0], ["y", 0], ["continue", 0], ["if", 0], ["x", 0], ["y", 0], ["z", 0], ["count", 0], ["1", 0], ["elif", 0], ["x", 0], ["y", 0], ["or", 0], ["y", 0], ["z", 0], ["or", 0], ["z", 0], ["x", 0], ["count", 0], ["3", 0], ["else", 0], ["count", 0], ["6", 0], ["print", 0], ["count", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["result", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["s", 0], ["i", 0], ["j", 0], ["0", 0], ["z", 0], ["s", 0], ["i", 0], ["j", 0], ["result", 0], ["1", 0], ["print", 0], ["result", 0], ["k", 0], ["s", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["cc", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["0", 0], ["cc", 0], ["k", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["l", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["0", 0], ["l", 0], ["and", 0], ["l", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["import", 0], ["itertools", 0], ["as", 0], ["it", 0], ["入力の整数k", 0], ["s", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["counter", 0], ["0", 0], ["3つの変数を作る", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["0", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["s", 0], ["x", 0], ["y", 0], ["and", 0], ["s", 0], ["x", 0], ["y", 0], ["0", 0], ["counter", 0], ["1", 0], ["print", 0], ["counter", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["z", 0], ["0", 0], ["and", 0], ["z", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["t", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["0", 0], ["t", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["s", 0], ["y", 0], ["z", 0], ["k", 0], ["and", 0], ["s", 0], ["y", 0], ["z", 0], ["0", 0], ["sum", 0], ["1", 0], ["print", 0], ["sum", 0], ["k", 0], ["num", 0], ["s", 0], ["num", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["num", 0], ["1", 0], ["l", 0], ["s", 0], ["num", 0], ["x", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["num", 0], ["1", 0], ["z", 0], ["l", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["num", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["x", 0], ["s", 0], ["3", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["x", 0], ["y", 0], ["s", 0], ["i", 0], ["2", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["y", 0], ["k", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["k", 0], ["k", 0], ["continue", 0], ["if", 0], ["i", 0], ["j", 0], ["k", 0], ["ans", 0], ["1", 0], ["elif", 0], ["i", 0], ["j", 0], ["or", 0], ["j", 0], ["k", 0], ["ans", 0], ["3", 0], ["else", 0], ["ans", 0], ["6", 0], ["print", 0], ["ans", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["s", 0], ["li", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["def", 0], ["solve", 0], ["k", 0], ["int", 0], ["s", 0], ["int", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["ans", 0], ["1", 0], ["return", 0], ["ans", 0], ["generated", 0], ["by", 0], ["1", 0], ["1", 0], ["7", 0], ["1", 0], ["https", 0], ["github", 0], ["com", 0], ["kyuridenamida", 0], ["atcoder", 0], ["tools", 0], ["def", 1], ["main", 1], ["def", 2], ["iterate", 2], ["tokens", 2], ["for", 2], ["line", 2], ["in", 2], ["sys", 0], ["stdin", 0], ["for", 0], ["word", 0], ["in", 0], ["line", 0], ["split", 0], ["yield", 0], ["word", 0], ["tokens", 0], ["iterate", 0], ["tokens", 0], ["k", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["s", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["print", 0], ["solve", 0], ["k", 0], ["s", 0], ["def", 0], ["test", 0], ["import", 0], ["doctest", 0], ["doctest", 0], ["testmod", 0], ["def", 0], ["starting", 0], ["point", 0], ["test", 0], ["main", 0], ["starting", 0], ["point", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["z", 0], ["s", 0], ["x", 0], ["y", 0], ["if", 0], ["0", 0], ["z", 0], ["k", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["k", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["counter", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["k", 0], ["counter", 0], ["1", 0], ["print", 0], ["counter", 0], ["a", 0], ["b", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["a", 0], ["b", 0], ["int", 0], ["b", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["if", 0], ["b", 0], ["a", 0], ["i", 0], ["k", 0], ["b", 0], ["c", 0], ["c", 0], ["1", 0], ["print", 0], ["c", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0020470829068577278, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00127942681678608, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.00510204081632653, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00510204081632653, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0020470829068577278, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00127942681678608, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.00510204081632653, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00510204081632653, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nA permutation of size $n$ is an array of size $n$ such that each integer from $1$ to $n$ occurs exactly once in this array. An inversion in a permutation $p$ is a pair of indices $(i, j)$ such that $i > j$ and $a_i < a_j$. For example, a permutation $[4, 1, 3, 2]$ contains $4$ inversions: $(2, 1)$, $(3, 1)$, $(4, 1)$, $(4, 3)$.\n\nYou are given a permutation $p$ of size $n$. However, the numbers on some positions are replaced by $-1$. Let the valid permutation be such a replacement of $-1$ in this sequence back to numbers from $1$ to $n$ in such a way that the resulting sequence is a permutation of size $n$.\n\nThe given sequence was turned into a valid permutation randomly with the equal probability of getting each valid permutation.\n\nCalculate the expected total number of inversions in the resulting valid permutation.\n\nIt can be shown that it is in the form of $\\frac{P}{Q}$ where $P$ and $Q$ are non-negative integers and $Q \\ne 0$. Report the value of $P \\cdot Q^{-1} \\pmod {998244353}$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the length of the sequence.\n\nThe second line contains $n$ integers $p_1, p_2, \\dots, p_n$ ($-1 \\le p_i \\le n$, $p_i \\ne 0$) — the initial sequence.\n\nIt is guaranteed that all elements not equal to $-1$ are pairwise distinct.\n\n\n-----Output-----\n\nPrint a single integer — the expected total number of inversions in the resulting valid permutation.\n\nIt can be shown that it is in the form of $\\frac{P}{Q}$ where $P$ and $Q$ are non-negative integers and $Q \\ne 0$. Report the value of $P \\cdot Q^{-1} \\pmod {998244353}$.\n\n\n-----Examples-----\nInput\n3\n3 -1 -1\n\nOutput\n499122179\n\nInput\n2\n1 2\n\nOutput\n0\n\nInput\n2\n-1 -1\n\nOutput\n499122177\n\n\n\n-----Note-----\n\nIn the first example two resulting valid permutations are possible:\n\n  $[3, 1, 2]$ — $2$ inversions;  $[3, 2, 1]$ — $3$ inversions. \n\nThe expected value is $\\frac{2 \\cdot 1 + 3 \\cdot 1}{2} = 2.5$.\n\nIn the second example no $-1$ are present, thus the only valid permutation is possible — the given one. It has $0$ inversions.\n\nIn the third example there are two resulting valid permutations — one with $0$ inversions and one with $1$ inversion.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["MOD = 998244353\ndef power(x, n) :\n\tans = 1\n\twhile (n) :\n\t\tif ((n & 1) == 1) :\n\t\t\tans = ans * x % MOD\n\t\tx = x * x % MOD\n\t\tn = n // 2\n\treturn ans\n\nn = int(input())\na = list(map(int, input().split()))\nb = [0 for i in range(n + 1)]\n\ndef add(x, v) :\n\twhile (x <= n) : \n\t\tb[x] = b[x] + v\n\t\tx = x + (x & -x)\ndef get(x) :\n\tans = 0\n\twhile (x) :\n\t\tans = ans + b[x]\n\t\tx = x - (x & -x)\n\treturn ans\n\nanss = 0\nfor i in range(n) :\n\tif (a[i] != -1) :\n\t\tadd(a[i], 1)\n\t\tanss = anss + get(n) - get(a[i])\n\nanss = anss % MOD\ntotal = 0\n\nsur = [0] + [1 for i in range(n)]\nfor i in range(n) :\n\tif (a[i] == -1) :\n\t\ttotal = total + 1\n\telse :\n\t\tsur[a[i]] = 0\n\nif (total == 0) : \n\tprint(anss) \n\treturn\nfor i in range(1, n + 1) : \n\tsur[i] = sur[i] + sur[i - 1]\n\ndead = 0\n\nansa = 0\nfor i in range(n) :\n\tif (a[i] != -1) :\n\t\tansa = ansa + sur[a[i]] * (total - dead) + (sur[n] - sur[a[i]]) * dead\n\telse : \n\t\tdead = dead + 1\n\nans = (ansa * 4 + anss * 4 * total + total * total * (total - 1)) % MOD\nans = (ans * power(4 * total, MOD - 2)) % MOD\nprint(ans) \n\n", "n = int(input())\n\nL = [int(x) for x in input().split()]\nD = {}\nJ = []\nS = []\nT = [0]*(n+1)\nfor i in range(n):\n\tif L[i] > 0:\n\t\tD[L[i]] = i\n\t\tJ.append(L[i])\n\t\tT[i+1] = T[i]\n\telse:\n\t\tT[i+1] = T[i]+1\n\t\t\ndef I(J):\n\tif len(J) <= 1:\n\t\treturn J, 0\n\telse:\n\t\ta = J[:len(J)//2]\n\t\tb = J[len(J)//2:]\n\t\ta, ai = I(a)\n\t\tb, bi = I(b)\n\t\tc = []\n\t\ti = 0\n\t\tj = 0\n\t\tinversions = ai + bi\n\twhile i < len(a) and j < len(b):\n\t\tif a[i] <= b[j]:\n\t\t\tc.append(a[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tc.append(b[j])\n\t\t\tj += 1\n\t\t\tinversions += (len(a)-i)\n\tc += a[i:]\n\tc += b[j:]\n\treturn c, inversions\n\nfor i in range(1,n+1):\n\tif not i in D:\n\t\tS.append(i)\n\ntotal = len(S)\nnum = 1\ndenom = 1\nif total > 0:\n\tthemostimportantsum = 0\n\tfor i in J:\n\t\tlow = 0\n\t\thigh = total-1\n\t\twhile high-low > 1:\n\t\t\tguess = (high+low)//2\n\t\t\tif S[guess] > i:\n\t\t\t\thigh = guess\n\t\t\telse:\n\t\t\t\tlow = guess\n\t\tif S[low] > i:\n\t\t\tsmaller = low\n\t\telif S[high] > i:\n\t\t\tsmaller = high\n\t\telse:\n\t\t\tsmaller = high+1\n\t\t#D[i] is the position of i in the list\n\t\t#T[D[i]] is how many -1s there are to the left of it\n\t\tthemostimportantsum += T[D[i]]*(total-smaller)+(total-T[D[i]])*(smaller)\n\t\tnum = themostimportantsum+total\n\t\tdenom = total\n\nnum =(denom*(((total)*(total-1))//2)+2*num)%998244353\ndenom *= 2\nif num == denom:\n\tif I(J)[1] == 0:\n\t\tprint(0)\n\telse:\n\t\tprint(I(J)[1]%998244353)\nelse:       \n\tnum += denom*I(J)[1]\n\tprint(((num-denom)*pow(denom%998244353,998244351,998244353))%998244353)\n", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nP=list(map(int,input().split()))\nmod=998244353\n\nINV=[None]*(n+1)#1/aのリストを予め作っておく.\nfor i in range(1,n+1):\n\tINV[i]=pow(i,mod-2,mod)\n\nBLA=P.count(-1)\n\nif BLA==0 or BLA==1:\n\tANS=0\nelse:\n\tLEFT=BLA*(BLA-1)//2*INV[BLA]%mod#左側の個数の平均\n\tAVEP=BLA*(BLA-1)//2*pow(BLA-1,mod-2,mod)#左側にあるものが自分より大きい確率の和\n\n\tANS=LEFT*AVEP%mod\n\n\n#print(ANS,LEFT,AVEP)\ny=1\nfor i in range(BLA):\n\ty=y*(BLA-i)%mod\n\nKOSUU=pow(y,mod-2,mod)\nBLALIST=[1]*(n+1)\nNONBLA=[]\nBLANUM=[0]*n\nfor i in range(n):\n\tif P[i]!=-1:\n\t\tBLALIST[P[i]]=0\n\t\tBLANUM[i]=BLANUM[i-1]\n\t\tNONBLA.append(P[i])\n\t\t\n\telse:\n\t\tBLANUM[i]=BLANUM[i-1]+1\n\n#print(BLALIST)\nBLALIST[0]=0\nfor i in range(1,n+1):\n\tBLALIST[i]=BLALIST[i-1]+BLALIST[i]\n\t\nif BLA!=0:\n\tfor i in range(n):\n\t\tif P[i]!=-1:\n\t\t\tANS=(ANS+(BLANUM[i]*(BLA-BLALIST[P[i]])+(BLA-BLANUM[i])*BLALIST[P[i]])*INV[BLA])%mod\n\n#print(ANS)\n\nA=NONBLA\n\nif A==[]:\n\tprint(ANS)\n\treturn\n\n\nn=len(A)\nMAXA=max(A)\nMINA=min(A)\n\n\nBIT=[0]*(MAXA-MINA+2)#出現回数をbit indexed treeの形でもっておく.\n\nfor i in range(n):#A[0],A[1],...とBITを更新\n\tbitobje=A[i]-MINA+1\n\n\tx=bitobje\n\twhile x!=0:\n\t\tANS=(ANS-BIT[x])%mod\n\t\tx-=(x&(-x))\n\n\t#print(ANS)\n\n\tx2=MAXA-MINA+1\n\t#print(x2)\n\twhile x2!=0:\n\t\t#print(x2,BIT)\n\t\tANS=(ANS+BIT[x2])%mod\n\t\tx2-=(x2&(-x2))\n\n\t#print(ANS)\n\n\ty=bitobje\n\twhile y<=MAXA-MINA+1:\n\t\tBIT[y]+=1\n\t\ty+=(y&(-y))\n\n\t#print(ANS,BIT)\n\nprint(ANS)\n\n", "K = 998244353\ndef mu(a, n):\n\tif n == 0: return 1\n\tq = mu(a, n // 2)\n\tif n % 2 == 0: return q * q % K\n\treturn q * q % K * a % K\nMAXN = 200005\ndd = [0 for i in range(MAXN)]\np = [0 for i in range(MAXN)]\ns = [0 for i in range(MAXN)]\na = [0 for i in range(MAXN)]\nfen = [0 for i in range(MAXN)]\n\ndef add(u, v):\n\ti = u\n\twhile (i <= 200000):\n\t\tfen[i] += v\n\t\ti += i & -i\n\ndef get(u):\n\tres = 0\n\ti = u\n\twhile (i > 0):\n\t\tres += fen[i]\n\t\ti -= i & -i\n\treturn res\n\nn = int(input())\n\ndata = input().split()\n\ncnt = 0\n\nfor i in range(1, n + 1):\n\tp[i] = int(data[i - 1])\n\tif (p[i] > 0): dd[p[i]] = 1\n\telse: cnt += 1\n\nfor i in range(1, n + 1):\n\tif (dd[i] == 0):\n\t\ts[i] = s[i - 1] + 1\n\telse:\n\t\ts[i] = s[i - 1]\n\ncnt1 = 0\nP = 0\nden = mu(cnt, K - 2)\nfor i in range(1, n + 1):\n\tif (p[i] == -1):\n\t\tcnt1 += 1\n\telse:\n\t\tu = cnt - cnt1\n\t\tP = (P + u * s[p[i]] % K * den % K) % K\n\t\tP = (P + cnt1 * (cnt - s[p[i]]) % K * den % K) % K\n\nP = (P + cnt * (cnt - 1) * mu(4, K - 2)) % K\n\nm = 0\n\nfor i in range(1, n + 1):\n\tif p[i] > 0:\n\t\tm += 1\n\t\ta[m] = p[i]\n\nP1 = 0\nfor i in range(m, 0, -1):\n\tP1 = (P1 + get(a[i])) % K\n\tadd(a[i], 1)\n\nP = (P + P1) % K\n\nprint(P)\n\n", "def merge(a,b):\n\tinda=0\n\tindb=0\n\tlena=len(a)\n\tlenb=len(b)\n\td=[a[-1]+b[-1]+1000]\n\ta+=d\n\tb+=d\n\tc=[]\n\tinversions=0\n\tfor i in range(lena+lenb):\n\t\tif a[inda]<b[indb]:\n\t\t\tc.append(a[inda])\n\t\t\tinda+=1\n\t\telse:\n\t\t\tc.append(b[indb])\n\t\t\tindb+=1\n\t\t\tinversions+=lena-inda\n\treturn((c,inversions))\ndef mergesort(a):\n\tif len(a)<=1:\n\t\treturn((a,0))\n\tsplit=len(a)//2\n\tb=a[:split]\n\tc=a[split:]\n\td=mergesort(b)\n\te=mergesort(c)\n\tf=merge(d[0],e[0])\n\treturn((f[0],f[1]+d[1]+e[1]))\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor guy in a:\n\tif guy!=-1:\n\t\tb.append(guy)\ninvs=mergesort(b)[1]\nnegs=len(a)-len(b)\npairs=(negs*(negs-1))//2\nused=[0]*n\nfor guy in a:\n\tif guy!=-1:\n\t\tused[guy-1]+=1\nunused=[0]\nfor i in range(n-1):\n\tunused.append(unused[-1]+1-used[i])\nnegsseen=0\nmix=0\nfor i in range(n):\n\tif a[i]==-1:\n\t\tnegsseen+=1\n\telse:\n\t\tmix+=unused[a[i]-1]*(negs-negsseen)+negsseen*(negs-unused[a[i]-1])\nnum=invs*2*negs+pairs*negs+mix*2\ndenom=2*negs\nif negs==0:\n\tprint(invs%998244353)\nelse:\n\tfor i in range(denom):\n\t\tif (998244353*i+1)%denom==0:\n\t\t\tinv=(998244353*i+1)//denom\n\t\t\tbreak\n\tprint((num*inv)%998244353)\n", "base=998244353;\ndef power(x, y):\n\tif(y==0):\n\t\treturn 1\n\tt=power(x, y//2)\n\tt=(t*t)%base\n\tif(y%2):\n\t\tt=(t*x)%base\n\treturn t;\ndef inverse(x):\n\treturn power(x, base-2)\nft=[0]\nfor i in range(0, 200000):\n\tft.append(0)\ndef get(i):\n\tres=0\n\twhile(i<=200000):\n\t\tres+=ft[i]\n\t\ti+=i&-i\n\treturn res\ndef update(i, x):\n\twhile(i):\n\t\tft[i]+=x\n\t\ti-=i&-i\nn=int(input())\na=[0]\na+=list(map(int, input().split()))\nneg=[0]\nnon=[0]\nfor i in range(1, n+1):\n\tnon.append(0)\nfor i in range(1, n+1):\n\tif(a[i]!=-1):\n\t\tnon[a[i]]+=1\nfor i in range(1, n+1):\n\tnon[i]+=non[i-1]\nfor i in range(1, n+1):\n\tif(a[i]==-1):\n\t\tneg.append(neg[i-1]+1)\n\telse: \n\t\tneg.append(neg[i-1])\nm=neg[n]\nans=0\nfor i in range(1, n+1):\n\tif(a[i]!=-1):\n\t\tans+=get(a[i])\n\t\tupdate(a[i], 1)\nfm=1\nfs=fm\nfor i in range(1, m+1):\n\tfs=fm\n\tfm=(fm*i)%base\nfs=(fs*inverse(fm))%base\nfor i in range(1, n+1):\n\tif(a[i]!=-1):\n\t\tless=a[i]-non[a[i]]\n\t\tmore=m-less\n\t\tans=(ans+neg[i]*more*fs)%base\n\t\tans=(ans+(m-neg[i])*less*fs)%base\nans=(ans+m*(m-1)*inverse(4))%base\nprint(ans)\n"], "id": "id5829"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5829", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 0], ["permutation", 0], ["of", 0], ["size", 0], ["n", 0], ["is", 0], ["an", 0], ["array", 0], ["of", 0], ["size", 0], ["n", 0], ["such", 0], ["that", 0], ["each", 0], ["integer", 0], ["from", 0], ["1", 0], ["to", 0], ["n", 0], ["occurs", 0], ["exactly", 0], ["once", 0], ["in", 0], ["this", 0], ["array", 0], ["an", 0], ["inversion", 0], ["in", 0], ["a", 0], ["permutation", 0], ["p", 0], ["is", 0], ["a", 0], ["pair", 0], ["of", 2], ["indices", 2], ["i", 2], ["j", 0], ["such", 0], ["that", 0], ["i", 0], ["j", 0], ["and", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["for", 0], ["example", 0], ["a", 0], ["permutation", 0], ["4", 0], ["1", 0], ["3", 0], ["2", 0], ["contains", 0], ["4", 0], ["inversions", 0], ["2", 0], ["1", 0], ["3", 0], ["1", 0], ["4", 0], ["1", 0], ["4", 0], ["3", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["permutation", 0], ["p", 0], ["of", 0], ["size", 0], ["n", 0], ["however", 0], ["the", 0], ["numbers", 0], ["on", 0], ["some", 0], ["positions", 0], ["are", 0], ["replaced", 0], ["by", 0], ["1", 0], ["let", 0], ["the", 0], ["valid", 0], ["permutation", 0], ["be", 0], ["such", 0], ["a", 0], ["replacement", 0], ["of", 0], ["1", 0], ["in", 0], ["this", 0], ["sequence", 0], ["back", 0], ["to", 0], ["numbers", 0], ["from", 0], ["1", 0], ["to", 0], ["n", 0], ["in", 0], ["such", 0], ["a", 0], ["way", 0], ["that", 0], ["the", 0], ["resulting", 0], ["sequence", 0], ["is", 0], ["a", 0], ["permutation", 0], ["of", 0], ["size", 0], ["n", 0], ["the", 0], ["given", 0], ["sequence", 0], ["was", 0], ["turned", 0], ["into", 0], ["a", 0], ["valid", 0], ["permutation", 0], ["randomly", 0], ["with", 0], ["the", 0], ["equal", 0], ["probability", 0], ["of", 0], ["getting", 0], ["each", 0], ["valid", 0], ["permutation", 0], ["calculate", 0], ["the", 0], ["expected", 0], ["total", 0], ["number", 0], ["of", 0], ["inversions", 0], ["in", 0], ["the", 0], ["resulting", 0], ["valid", 0], ["permutation", 0], ["it", 2], ["can", 2], ["be", 2], ["shown", 2], ["that", 2], ["it", 2], ["is", 2], ["in", 2], ["the", 2], ["form", 2], ["of", 2], ["frac", 2], ["p", 2], ["q", 2], ["where", 0], ["p", 0], ["and", 0], ["q", 0], ["are", 0], ["non", 0], ["negative", 0], ["integers", 0], ["and", 0], ["q", 0], ["ne", 0], ["0", 0], ["report", 0], ["the", 0], ["value", 0], ["of", 0], ["p", 0], ["cdot", 0], ["q", 0], ["1", 0], ["pmod", 0], ["998244353", 0], ["input", 4], ["the", 0], ["first", 0], ["line", 0], ["contains", 2], ["a", 2], ["single", 4], ["integer", 8], ["n", 10], ["1", 4], ["le", 0], ["n", 0], ["le", 0], ["2", 0], ["cdot", 0], ["10", 0], ["5", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["sequence", 0], ["the", 4], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 8], ["p", 10], ["1", 0], ["p", 0], ["2", 0], ["dots", 0], ["p", 0], ["n", 0], ["1", 0], ["le", 0], ["p", 0], ["i", 0], ["le", 0], ["n", 0], ["p", 0], ["i", 0], ["ne", 0], ["0", 0], ["—", 0], ["the", 0], ["initial", 0], ["sequence", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["all", 0], ["elements", 0], ["not", 0], ["equal", 0], ["to", 0], ["1", 0], ["are", 0], ["pairwise", 0], ["distinct", 0], ["output", 0], ["print", 0], ["a", 0], ["single", 0], ["integer", 0], ["—", 0], ["the", 0], ["expected", 0], ["total", 0], ["number", 0], ["of", 0], ["inversions", 0], ["in", 0], ["the", 0], ["resulting", 0], ["valid", 0], ["permutation", 0], ["it", 2], ["can", 2], ["be", 2], ["shown", 2], ["that", 2], ["it", 2], ["is", 2], ["in", 2], ["the", 2], ["form", 2], ["of", 2], ["frac", 2], ["p", 2], ["q", 2], ["where", 0], ["p", 0], ["and", 0], ["q", 0], ["are", 0], ["non", 0], ["negative", 0], ["integers", 0], ["and", 0], ["q", 0], ["ne", 0], ["0", 0], ["report", 0], ["the", 0], ["value", 0], ["of", 0], ["p", 0], ["cdot", 0], ["q", 0], ["1", 0], ["pmod", 0], ["998244353", 0], ["examples", 0], ["input", 0], ["3", 0], ["3", 0], ["1", 0], ["1", 0], ["output", 0], ["499122179", 0], ["input", 0], ["2", 0], ["1", 0], ["2", 0], ["output", 0], ["0", 0], ["input", 0], ["2", 0], ["1", 0], ["1", 0], ["output", 0], ["499122177", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["example", 0], ["two", 0], ["resulting", 0], ["valid", 0], ["permutations", 0], ["are", 0], ["possible", 0], ["3", 0], ["1", 0], ["2", 0], ["—", 0], ["2", 0], ["inversions", 0], ["3", 0], ["2", 0], ["1", 0], ["—", 0], ["3", 0], ["inversions", 0], ["the", 0], ["expected", 0], ["value", 0], ["is", 0], ["frac", 0], ["2", 0], ["cdot", 0], ["1", 0], ["3", 0], ["cdot", 0], ["1", 0], ["2", 0], ["2", 0], ["5", 0], ["in", 0], ["the", 0], ["second", 0], ["example", 0], ["no", 0], ["1", 0], ["are", 0], ["present", 0], ["thus", 0], ["the", 0], ["only", 0], ["valid", 0], ["permutation", 0], ["is", 0], ["possible", 0], ["—", 0], ["the", 0], ["given", 0], ["one", 0], ["it", 0], ["has", 0], ["0", 0], ["inversions", 0], ["in", 0], ["the", 0], ["third", 0], ["example", 0], ["there", 0], ["are", 0], ["two", 0], ["resulting", 0], ["valid", 0], ["permutations", 0], ["—", 0], ["one", 0], ["with", 0], ["0", 0], ["inversions", 0], ["and", 0], ["one", 0], ["with", 0], ["1", 0], ["inversion", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.10224438902743142, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.04476309226932668, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.26150121065375304, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11682808716707022, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.10224438902743142, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.04476309226932668, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.26150121065375304, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11682808716707022, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["mod", 0], ["998244353", 0], ["def", 0], ["power", 0], ["x", 0], ["n", 0], ["ans", 0], ["1", 0], ["while", 0], ["n", 0], ["if", 0], ["n", 0], ["1", 0], ["1", 0], ["ans", 0], ["ans", 0], ["x", 0], ["mod", 0], ["x", 0], ["x", 0], ["x", 0], ["mod", 0], ["n", 0], ["n", 0], ["2", 0], ["return", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["def", 0], ["add", 0], ["x", 0], ["v", 0], ["while", 0], ["x", 0], ["n", 0], ["b", 0], ["x", 0], ["b", 0], ["x", 0], ["v", 0], ["x", 0], ["x", 0], ["x", 0], ["x", 0], ["def", 0], ["get", 0], ["x", 0], ["ans", 0], ["0", 0], ["while", 0], ["x", 0], ["ans", 0], ["ans", 0], ["b", 0], ["x", 0], ["x", 0], ["x", 0], ["x", 0], ["x", 0], ["return", 0], ["ans", 0], ["anss", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["add", 0], ["a", 0], ["i", 0], ["1", 0], ["anss", 0], ["anss", 0], ["get", 0], ["n", 0], ["get", 0], ["a", 0], ["i", 0], ["anss", 0], ["anss", 0], ["mod", 0], ["total", 0], ["0", 0], ["sur", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["total", 0], ["total", 0], ["1", 0], ["else", 0], ["sur", 0], ["a", 0], ["i", 0], ["0", 0], ["if", 0], ["total", 0], ["0", 0], ["print", 0], ["anss", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["sur", 0], ["i", 0], ["sur", 0], ["i", 0], ["sur", 0], ["i", 0], ["1", 0], ["dead", 0], ["0", 0], ["ansa", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["ansa", 0], ["ansa", 0], ["sur", 0], ["a", 0], ["i", 0], ["total", 0], ["dead", 0], ["sur", 0], ["n", 0], ["sur", 0], ["a", 0], ["i", 0], ["dead", 0], ["else", 0], ["dead", 0], ["dead", 0], ["1", 0], ["ans", 0], ["ansa", 0], ["4", 0], ["anss", 0], ["4", 0], ["total", 0], ["total", 0], ["total", 0], ["total", 0], ["1", 0], ["mod", 0], ["ans", 0], ["ans", 0], ["power", 0], ["4", 0], ["total", 0], ["mod", 0], ["2", 0], ["mod", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["d", 0], ["j", 0], ["s", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l", 0], ["i", 0], ["0", 0], ["d", 0], ["l", 0], ["i", 0], ["i", 0], ["j", 0], ["append", 0], ["l", 0], ["i", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["else", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["def", 0], ["i", 0], ["j", 0], ["if", 0], ["len", 0], ["j", 0], ["1", 0], ["return", 0], ["j", 0], ["0", 0], ["else", 0], ["a", 0], ["j", 0], ["len", 0], ["j", 0], ["2", 0], ["b", 0], ["j", 0], ["len", 0], ["j", 0], ["2", 0], ["a", 0], ["ai", 0], ["i", 0], ["a", 0], ["b", 0], ["bi", 0], ["i", 0], ["b", 0], ["c", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["inversions", 0], ["ai", 0], ["bi", 0], ["while", 10], ["i", 1], ["len", 1], ["a", 1], ["and", 1], ["j", 1], ["len", 0], ["b", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["c", 0], ["append", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["else", 0], ["c", 0], ["append", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["inversions", 0], ["len", 0], ["a", 0], ["i", 0], ["c", 0], ["a", 0], ["i", 0], ["c", 0], ["b", 0], ["j", 0], ["return", 0], ["c", 0], ["inversions", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["i", 0], ["in", 0], ["d", 0], ["s", 0], ["append", 0], ["i", 0], ["total", 0], ["len", 0], ["s", 0], ["num", 0], ["1", 0], ["denom", 0], ["1", 0], ["if", 0], ["total", 0], ["0", 0], ["themostimportantsum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["j", 0], ["low", 0], ["0", 0], ["high", 0], ["total", 0], ["1", 0], ["while", 0], ["high", 0], ["low", 0], ["1", 0], ["guess", 0], ["high", 0], ["low", 0], ["2", 0], ["if", 0], ["s", 0], ["guess", 0], ["i", 0], ["high", 0], ["guess", 0], ["else", 0], ["low", 0], ["guess", 0], ["if", 0], ["s", 0], ["low", 0], ["i", 0], ["smaller", 0], ["low", 0], ["elif", 0], ["s", 0], ["high", 0], ["i", 0], ["smaller", 0], ["high", 0], ["else", 0], ["smaller", 0], ["high", 0], ["1", 0], ["d", 0], ["i", 0], ["is", 0], ["the", 0], ["position", 0], ["of", 0], ["i", 0], ["in", 0], ["the", 0], ["list", 0], ["t", 0], ["d", 0], ["i", 0], ["is", 0], ["how", 0], ["many", 0], ["1s", 0], ["there", 0], ["are", 0], ["to", 0], ["the", 0], ["left", 0], ["of", 0], ["it", 0], ["themostimportantsum", 0], ["t", 0], ["d", 0], ["i", 0], ["total", 0], ["smaller", 0], ["total", 0], ["t", 0], ["d", 0], ["i", 0], ["smaller", 0], ["num", 0], ["themostimportantsum", 0], ["total", 0], ["denom", 0], ["total", 0], ["num", 0], ["denom", 0], ["total", 0], ["total", 0], ["1", 0], ["2", 0], ["2", 0], ["num", 0], ["998244353", 0], ["denom", 0], ["2", 0], ["if", 0], ["num", 0], ["denom", 0], ["if", 0], ["i", 0], ["j", 0], ["1", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["i", 0], ["j", 0], ["1", 0], ["998244353", 0], ["else", 0], ["num", 0], ["denom", 0], ["i", 0], ["j", 0], ["1", 0], ["print", 0], ["num", 0], ["denom", 0], ["pow", 0], ["denom", 0], ["998244353", 0], ["998244351", 0], ["998244353", 0], ["998244353", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mod", 0], ["998244353", 0], ["inv", 0], ["none", 0], ["n", 0], ["1", 0], ["1", 0], ["aのリストを予め作っておく", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["inv", 0], ["i", 0], ["pow", 0], ["i", 0], ["mod", 0], ["2", 0], ["mod", 0], ["bla", 0], ["p", 0], ["count", 0], ["1", 0], ["if", 0], ["bla", 0], ["0", 0], ["or", 0], ["bla", 0], ["1", 0], ["ans", 0], ["0", 0], ["else", 0], ["left", 0], ["bla", 0], ["bla", 0], ["1", 0], ["2", 0], ["inv", 0], ["bla", 0], ["mod", 0], ["左側の個数の平均", 0], ["avep", 0], ["bla", 0], ["bla", 0], ["1", 0], ["2", 0], ["pow", 0], ["bla", 0], ["1", 0], ["mod", 0], ["2", 0], ["mod", 0], ["左側にあるものが自分より大きい確率の和", 0], ["ans", 0], ["left", 0], ["avep", 0], ["mod", 0], ["print", 0], ["ans", 0], ["left", 0], ["avep", 0], ["y", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["bla", 0], ["y", 0], ["y", 0], ["bla", 0], ["i", 0], ["mod", 0], ["kosuu", 0], ["pow", 0], ["y", 0], ["mod", 0], ["2", 0], ["mod", 0], ["blalist", 0], ["1", 0], ["n", 0], ["1", 0], ["nonbla", 0], ["blanum", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["p", 0], ["i", 0], ["1", 0], ["blalist", 0], ["p", 0], ["i", 0], ["0", 0], ["blanum", 0], ["i", 0], ["blanum", 0], ["i", 0], ["1", 0], ["nonbla", 0], ["append", 0], ["p", 0], ["i", 0], ["else", 0], ["blanum", 0], ["i", 0], ["blanum", 0], ["i", 0], ["1", 0], ["1", 0], ["print", 0], ["blalist", 0], ["blalist", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["blalist", 0], ["i", 0], ["blalist", 0], ["i", 0], ["1", 0], ["blalist", 0], ["i", 0], ["if", 0], ["bla", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["p", 0], ["i", 0], ["1", 0], ["ans", 0], ["ans", 0], ["blanum", 0], ["i", 0], ["bla", 0], ["blalist", 0], ["p", 0], ["i", 0], ["bla", 0], ["blanum", 0], ["i", 0], ["blalist", 0], ["p", 0], ["i", 0], ["inv", 0], ["bla", 0], ["mod", 0], ["print", 0], ["ans", 0], ["a", 0], ["nonbla", 0], ["if", 0], ["a", 0], ["print", 0], ["ans", 0], ["return", 0], ["n", 0], ["len", 0], ["a", 0], ["maxa", 0], ["max", 0], ["a", 0], ["mina", 0], ["min", 0], ["a", 0], ["bit", 0], ["0", 0], ["maxa", 0], ["mina", 0], ["2", 0], ["出現回数をbit", 0], ["indexed", 0], ["treeの形でもっておく", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["とbitを更新", 0], ["bitobje", 0], ["a", 0], ["i", 0], ["mina", 0], ["1", 0], ["x", 0], ["bitobje", 0], ["while", 0], ["x", 0], ["0", 0], ["ans", 0], ["ans", 0], ["bit", 0], ["x", 0], ["mod", 0], ["x", 0], ["x", 0], ["x", 0], ["print", 0], ["ans", 0], ["x2", 0], ["maxa", 0], ["mina", 0], ["1", 0], ["print", 0], ["x2", 0], ["while", 0], ["x2", 0], ["0", 0], ["print", 0], ["x2", 0], ["bit", 0], ["ans", 0], ["ans", 0], ["bit", 0], ["x2", 0], ["mod", 0], ["x2", 0], ["x2", 0], ["x2", 0], ["print", 0], ["ans", 0], ["y", 0], ["bitobje", 0], ["while", 0], ["y", 0], ["maxa", 0], ["mina", 0], ["1", 0], ["bit", 0], ["y", 0], ["1", 0], ["y", 0], ["y", 0], ["y", 0], ["print", 0], ["ans", 0], ["bit", 0], ["print", 0], ["ans", 0], ["k", 0], ["998244353", 0], ["def", 0], ["mu", 0], ["a", 0], ["n", 0], ["if", 0], ["n", 0], ["0", 0], ["return", 0], ["1", 0], ["q", 0], ["mu", 0], ["a", 0], ["n", 0], ["2", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["return", 0], ["q", 0], ["q", 0], ["k", 0], ["return", 0], ["q", 0], ["q", 0], ["k", 0], ["a", 0], ["k", 0], ["maxn", 0], ["200005", 0], ["dd", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["maxn", 0], ["p", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["maxn", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["maxn", 0], ["a", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["maxn", 0], ["fen", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["maxn", 0], ["def", 0], ["add", 0], ["u", 0], ["v", 0], ["i", 0], ["u", 0], ["while", 0], ["i", 0], ["200000", 0], ["fen", 0], ["i", 0], ["v", 0], ["i", 0], ["i", 0], ["i", 0], ["def", 0], ["get", 0], ["u", 0], ["res", 0], ["0", 0], ["i", 0], ["u", 0], ["while", 0], ["i", 0], ["0", 0], ["res", 0], ["fen", 0], ["i", 0], ["i", 0], ["i", 0], ["i", 0], ["return", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["data", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["p", 0], ["i", 0], ["int", 0], ["data", 0], ["i", 0], ["1", 0], ["if", 0], ["p", 0], ["i", 0], ["0", 0], ["dd", 0], ["p", 0], ["i", 0], ["1", 0], ["else", 0], ["cnt", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["dd", 0], ["i", 0], ["0", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["cnt1", 0], ["0", 0], ["p", 0], ["0", 0], ["den", 0], ["mu", 0], ["cnt", 0], ["k", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["p", 0], ["i", 0], ["1", 0], ["cnt1", 0], ["1", 0], ["else", 0], ["u", 0], ["cnt", 0], ["cnt1", 0], ["p", 0], ["p", 0], ["u", 0], ["s", 0], ["p", 0], ["i", 0], ["k", 0], ["den", 0], ["k", 0], ["k", 0], ["p", 0], ["p", 0], ["cnt1", 0], ["cnt", 0], ["s", 0], ["p", 0], ["i", 0], ["k", 0], ["den", 0], ["k", 0], ["k", 0], ["p", 0], ["p", 0], ["cnt", 0], ["cnt", 0], ["1", 0], ["mu", 0], ["4", 0], ["k", 0], ["2", 0], ["k", 0], ["m", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["p", 0], ["i", 0], ["0", 0], ["m", 0], ["1", 0], ["a", 0], ["m", 0], ["p", 0], ["i", 0], ["p1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["0", 0], ["1", 0], ["p1", 0], ["p1", 0], ["get", 0], ["a", 0], ["i", 0], ["k", 0], ["add", 0], ["a", 0], ["i", 0], ["1", 0], ["p", 0], ["p", 0], ["p1", 0], ["k", 0], ["print", 0], ["p", 0], ["def", 0], ["merge", 0], ["a", 0], ["b", 0], ["inda", 0], ["0", 0], ["indb", 0], ["0", 0], ["lena", 0], ["len", 0], ["a", 0], ["lenb", 0], ["len", 0], ["b", 0], ["d", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["1000", 0], ["a", 0], ["d", 0], ["b", 0], ["d", 0], ["c", 0], ["inversions", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["lena", 0], ["lenb", 0], ["if", 0], ["a", 0], ["inda", 0], ["b", 0], ["indb", 0], ["c", 0], ["append", 0], ["a", 0], ["inda", 0], ["inda", 0], ["1", 0], ["else", 0], ["c", 0], ["append", 0], ["b", 0], ["indb", 0], ["indb", 0], ["1", 0], ["inversions", 0], ["lena", 0], ["inda", 0], ["return", 0], ["c", 0], ["inversions", 0], ["def", 0], ["mergesort", 0], ["a", 0], ["if", 0], ["len", 0], ["a", 0], ["1", 0], ["return", 0], ["a", 0], ["0", 0], ["split", 0], ["len", 0], ["a", 0], ["2", 0], ["b", 0], ["a", 0], ["split", 0], ["c", 0], ["a", 0], ["split", 0], ["d", 0], ["mergesort", 0], ["b", 0], ["e", 0], ["mergesort", 0], ["c", 0], ["f", 0], ["merge", 0], ["d", 0], ["0", 0], ["e", 0], ["0", 0], ["return", 0], ["f", 0], ["0", 0], ["f", 0], ["1", 0], ["d", 0], ["1", 0], ["e", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["for", 0], ["guy", 0], ["in", 0], ["a", 0], ["if", 0], ["guy", 0], ["1", 0], ["b", 0], ["append", 0], ["guy", 0], ["invs", 0], ["mergesort", 0], ["b", 0], ["1", 0], ["negs", 0], ["len", 0], ["a", 0], ["len", 0], ["b", 0], ["pairs", 0], ["negs", 0], ["negs", 0], ["1", 0], ["2", 0], ["used", 0], ["0", 0], ["n", 0], ["for", 0], ["guy", 0], ["in", 0], ["a", 0], ["if", 0], ["guy", 0], ["1", 0], ["used", 0], ["guy", 0], ["1", 0], ["1", 0], ["unused", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["unused", 0], ["append", 0], ["unused", 0], ["1", 0], ["1", 0], ["used", 0], ["i", 0], ["negsseen", 0], ["0", 0], ["mix", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["negsseen", 0], ["1", 0], ["else", 0], ["mix", 0], ["unused", 0], ["a", 0], ["i", 0], ["1", 0], ["negs", 0], ["negsseen", 0], ["negsseen", 0], ["negs", 0], ["unused", 0], ["a", 0], ["i", 0], ["1", 0], ["num", 0], ["invs", 0], ["2", 0], ["negs", 0], ["pairs", 0], ["negs", 0], ["mix", 0], ["2", 0], ["denom", 0], ["2", 0], ["negs", 0], ["if", 0], ["negs", 0], ["0", 0], ["print", 0], ["invs", 0], ["998244353", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["denom", 0], ["if", 0], ["998244353", 0], ["i", 0], ["1", 0], ["denom", 0], ["0", 0], ["inv", 0], ["998244353", 0], ["i", 0], ["1", 0], ["denom", 0], ["break", 0], ["print", 0], ["num", 0], ["inv", 0], ["998244353", 0], ["base", 0], ["998244353", 0], ["def", 0], ["power", 0], ["x", 0], ["y", 0], ["if", 0], ["y", 0], ["0", 0], ["return", 0], ["1", 0], ["t", 0], ["power", 0], ["x", 0], ["y", 0], ["2", 0], ["t", 0], ["t", 0], ["t", 0], ["base", 0], ["if", 0], ["y", 0], ["2", 0], ["t", 0], ["t", 0], ["x", 0], ["base", 0], ["return", 0], ["t", 0], ["def", 0], ["inverse", 0], ["x", 0], ["return", 0], ["power", 0], ["x", 0], ["base", 0], ["2", 0], ["ft", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["200000", 0], ["ft", 0], ["append", 0], ["0", 0], ["def", 0], ["get", 0], ["i", 0], ["res", 0], ["0", 0], ["while", 0], ["i", 0], ["200000", 0], ["res", 0], ["ft", 0], ["i", 0], ["i", 0], ["i", 0], ["i", 0], ["return", 0], ["res", 0], ["def", 0], ["update", 0], ["i", 0], ["x", 0], ["while", 0], ["i", 0], ["ft", 0], ["i", 0], ["x", 0], ["i", 0], ["i", 0], ["i", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["0", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["neg", 0], ["0", 0], ["non", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["non", 0], ["append", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["non", 0], ["a", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["non", 0], ["i", 0], ["non", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["neg", 0], ["append", 0], ["neg", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["neg", 0], ["append", 0], ["neg", 0], ["i", 0], ["1", 0], ["m", 0], ["neg", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["ans", 0], ["get", 0], ["a", 0], ["i", 0], ["update", 0], ["a", 0], ["i", 0], ["1", 0], ["fm", 0], ["1", 0], ["fs", 0], ["fm", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["fs", 0], ["fm", 0], ["fm", 0], ["fm", 0], ["i", 0], ["base", 0], ["fs", 0], ["fs", 0], ["inverse", 0], ["fm", 0], ["base", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["less", 0], ["a", 0], ["i", 0], ["non", 0], ["a", 0], ["i", 0], ["more", 0], ["m", 0], ["less", 0], ["ans", 0], ["ans", 0], ["neg", 0], ["i", 0], ["more", 0], ["fs", 0], ["base", 0], ["ans", 0], ["ans", 0], ["m", 0], ["neg", 0], ["i", 0], ["less", 0], ["fs", 0], ["base", 0], ["ans", 0], ["ans", 0], ["m", 0], ["m", 0], ["1", 0], ["inverse", 0], ["4", 0], ["base", 0], ["print", 0], ["ans", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.004087193460490463, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0034741144414168934, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.012162162162162163, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.011554054054054056, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.004087193460490463, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0034741144414168934, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.012162162162162163, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.011554054054054056, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given two positive integers $a$ and $b$. In one move you can increase $a$ by $1$ (replace $a$ with $a+1$). Your task is to find the minimum number of moves you need to do in order to make $a$ divisible by $b$. It is possible, that you have to make $0$ moves, as $a$ is already divisible by $b$. You have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^9$).\n\n\n-----Output-----\n\nFor each test case print the answer — the minimum number of moves you need to do in order to make $a$ divisible by $b$.\n\n\n-----Example-----\nInput\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n\nOutput\n2\n5\n4\n333\n0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["q = int(input())\nfor _ in range(q):\n\ta, b = list(map(int, input().split()))\n\tprint((b - a % b) % b)\n", "#!usr/bin/env python3\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom itertools import permutations, accumulate\nimport sys\nimport math\nimport bisect\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\ndef S():\n\tres = list(sys.stdin.readline())\n\tif res[-1] == \"\\n\":\n\t\treturn res[:-1]\n\treturn res\ndef IR(n):\n\treturn [I() for i in range(n)]\ndef LIR(n):\n\treturn [LI() for i in range(n)]\ndef SR(n):\n\treturn [S() for i in range(n)]\ndef LSR(n):\n\treturn [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\ndef solve():\n\tt = I()\n\tfor _ in range(t):\n\t\ta,b = LI()\n\t\tprint(-a%b)\n\treturn\n\n#Solve\ndef __starting_point():\n\tsolve()\n\n__starting_point()\n", "def solve():\n\ta, b = list(map(int, input().split()))\n\tprint((b - a % b) % b)\n\n\nfor i in range(int(input())):\n\tsolve()\n", "for i in range(int(input())):\n\ta,b = map(int, input().split())\n\tif a % b == 0:\n\t\tprint(0)\n\telse:\n\t\tprint(b - a % b)\n", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\ta, b = map(int, input().split())\n\tprint(-a % b)\n", "import sys\ndef input():\n\treturn sys.stdin.readline()[:-1]\nt = int(input())\nfor _ in range(t):\n\ta, b = map(int, input().split())\n\tif a%b == 0:\n\t\tprint(0)\n\telse:\n\t\tprint(b - a%b)\n", "t = int(input())\nfor i in range(t):\n\ta, b = map(int, input().split())\n\tprint((b - a % b) % b)\n", "for _ in range(int(input())):\n\ta, b = list(map(int, input().split()))\n\tprint((b - a % b) % b)\n", "import sys\n \nRI = lambda : [int(x) for x in sys.stdin.readline().split()]\nri = lambda : sys.stdin.readline().strip()\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n \nfor i in range(int(ri())):\n\ta,b = RI()\n\n\ttemp = a%b\n\tif temp == 0:\n\t\tprint(0)\n\telse:\n\t\tprint(b-temp)\n\n\n", "\"\"\"\n\tTemplate written to be used by Python Programmers.\n\tUse at your own risk!!!!\n\tOwned by enraged(rating - 5 star at CodeChef and Specialist at Codeforces).\n\"\"\"\nimport sys\nfrom functools import lru_cache\nfrom heapq import merge, heapify, heappop, heappush\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf\nfrom collections import defaultdict as dd, deque, Counter as c\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\n# sys.setrecursionlimit(2*pow(10, 6))\n# sys.stdin = open(\"input.txt\", \"r\")\n# sys.stdout = open(\"output.txt\", \"w\")\nmod = pow(10, 9) + 7\nmod2 = 998244353\ndef data(): return sys.stdin.readline().strip()\ndef out(var): sys.stdout.write(str(var))\ndef outln(var): sys.stdout.write(str(var)+\"\\n\")\ndef l(): return list(sp())\ndef sl(): return list(ssp())\ndef sp(): return list(map(int, data().split()))\ndef ssp(): return list(map(str, data().split()))\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\n\n\nfor _ in range(int(data())):\n\ta, b = sp()\n\ttemp = ceil(a/b)\n\toutln(temp*b-a)\n", "t = int(input())\nfor _ in range(t):\n\tn, m = list(map(int, input().split()))\n\tprint((m - n % m) % m)\n", "#  =========     /\\       /|    |====/|\n#      |        /  \\       |    |   / |\n#      |       /____\\      |    |  /  |\n#      |      /      \\     |    | /   |\n#  ========= /        \\  =====  |/====|  \n#  code\n\n# MOD = 998244353\n# def pow(base , exp):\n#     if exp == -1:\n#         return pow(base , MOD - 2)\n#     res = 1\n#     base %= MOD\n#     while exp > 0:\n#         if exp % 2:\n#             res = (res * base) % MOD\n#         exp //= 2\n#         base = (base * base) % MOD\n    \n#     res %= MOD\n\t#   return res\n\ndef main():\n\tt = int(input())\n\tfor _ in range(t):\n\t\ta , b = map(int , input().split())\n\t\tif a % b == 0:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(b - a%b)\n\treturn\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "t=int(input())\nfor q in range(t):\n\ta,b=list(map(int,input().split()))\n\tprint((b-a%b)%b)\n", "t=int(input())\nfor i in range(t):\n\ta,b=list(map(int,input().split()))\n\tprint((b-a%b)%b)\n", "# from future import print_function,division\n# range = xrange\nimport sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(10**9)\nfrom sys import stdin, stdout\n\ndef main():\n\tfor _ in range(int(input())):\n\t\ta,b = [int(s) for s in input().split()]\n\t\tw = a//b\n\t\tw1  =a%b\n\t\tif w1==0:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(b-w1)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "for i in range(int(input())):\n\tn, m = list(map(int, input().split()))\n\tch = n % m\n\tif ch == 0:\n\t\tch = m\n\tprint(m - ch)\n", "t=int(input())\nwhile t:\n\ta,b=map(int,input().split())\n\tif(a%b==0):print(0)\n\telse:print(b-a%b)\n\tt-=1\n", "MOD = 1000000007\nMOD2 = 998244353\nii = lambda: int(input())\nsi = lambda: input()\ndgl = lambda: list(map(int, input()))\nf = lambda: map(int, input().split())\nil = lambda: list(map(int, input().split()))\nls = lambda: list(input())\nlet = 'abcdefghijklmnopqrstuvwxyz'\nfor _ in range(ii()):\n\ta,b=f()\n\tx=(b-(a%b))%b\n\tprint(x)\n", "t = int(input())\nfor i in range(t):\n\ta, b = map(int, input().split())\n\tprint((b - a % b) % b)\n", "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\n\nORDA = 97\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n\tif n < 2: return list()\n\tprime = [True for _ in range(n + 1)]\n\tp = 3\n\twhile p * p <= n:\n\t\tif prime[p]:\n\t\t\tfor i in range(p * 2, n + 1, p):\n\t\t\t\tprime[i] = False\n\t\tp += 2\n\tr = [2]\n\tfor p in range(3, n + 1, 2):\n\t\tif prime[p]:\n\t\t\tr.append(p)\n\treturn r\ndef divs(n, start=1):\n\tr = []\n\tfor i in range(start, int(math.sqrt(n) + 1)):\n\t\tif (n % i == 0):\n\t\t\tif (n / i == i):\n\t\t\t\tr.append(i)\n\t\t\telse:\n\t\t\t\tr.extend([i, n // i])\n\treturn r\ndef divn(n, primes):\n\tdivs_number = 1\n\tfor i in primes:\n\t\tif n == 1:\n\t\t\treturn divs_number\n\t\tt = 1\n\t\twhile n % i == 0:\n\t\t\tt += 1\n\t\t\tn //= i\n\t\tdivs_number *= t\ndef prime(n):\n\tif n == 2: return True\n\tif n % 2 == 0 or n <= 1: return False\n\tsqr = int(math.sqrt(n)) + 1\n\tfor d in range(3, sqr, 2):\n\t\tif n % d == 0: return False\n\treturn True\ndef convn(number, base):\n\tnewnumber = 0\n\twhile number > 0:\n\t\tnewnumber += number % base\n\t\tnumber //= base\n\treturn newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nfor _ in range(ii()):\n\ta, b = mi()\n\tprint(b - a % b) if a % b else print(0)\n", "n = int(input())\nfor i in range(n):\n\ta, b = map(int, input().split())\n\tc = a % b\n\tprint((b - c) % b)\n", "t = int(input())\nfor case_num in range(t):\n\ta, b = list(map(int, input().split(' ')))\n\tprint((b - a % b) % b)\n", "import sys\nimport os\nimport time\nimport collections\nfrom collections import Counter, deque\nimport itertools\nimport math\nimport timeit\nimport random\nimport string\n\n#########################\n# imgur.com/Pkt7iIf.png #\n#########################\n\ndef sieve(n):\n\tif n < 2: return list()\n\tprime = [True for _ in range(n + 1)]\n\tp = 3\n\twhile p * p <= n:\n\t\tif prime[p]:\n\t\t\tfor i in range(p * 2, n + 1, p):\n\t\t\t\tprime[i] = False\n\t\tp += 2\n\tr = [2]\n\tfor p in range(3, n + 1, 2):\n\t\tif prime[p]:\n\t\t\tr.append(p)\n\treturn r\n\ndef divs(n, start=1):\n\tdivisors = []\n\tfor i in range(start, int(math.sqrt(n) + 1)):\n\t\tif n % i == 0:\n\t\t\tif n / i == i:\n\t\t\t\tdivisors.append(i)\n\t\t\telse:\n\t\t\t\tdivisors.extend([i, n // i])\n\treturn divisors\n\ndef divn(n, primes):\n\tdivs_number = 1\n\tfor i in primes:\n\t\tif n == 1:\n\t\t\treturn divs_number\n\t\tt = 1\n\t\twhile n % i == 0:\n\t\t\tt += 1\n\t\t\tn //= i\n\t\tdivs_number *= t\n\ndef flin(d, x, default=-1):\n\tleft = right = -1\n\tfor i in range(len(d)):\n\t\tif d[i] == x:\n\t\t\tif left == -1: left = i\n\t\t\tright = i\n\tif left == -1:\n\t\treturn default, default\n\telse:\n\t\treturn left, right\n\ndef ceil(n, k): return n // k + (n % k != 0)\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef prr(a, sep=' '): print(sep.join(map(str, a)))\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\n\n\n# input = sys.stdin.readline\n\nfor _ in range(ii()):\n\ta, b = mi()\n\tt = ceil(a, b)\n\tprint(b*t - a)\n"], "id": "id9642"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9642", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["two", 0], ["positive", 0], ["integers", 0], ["a", 0], ["and", 0], ["b", 0], ["in", 0], ["one", 0], ["move", 0], ["you", 0], ["can", 0], ["increase", 0], ["a", 0], ["by", 0], ["1", 0], ["replace", 0], ["a", 0], ["with", 0], ["a", 0], ["1", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["find", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["moves", 0], ["you", 0], ["need", 0], ["to", 0], ["do", 0], ["in", 0], ["order", 0], ["to", 0], ["make", 0], ["a", 0], ["divisible", 0], ["by", 0], ["b", 0], ["it", 0], ["is", 0], ["possible", 0], ["that", 0], ["you", 0], ["have", 0], ["to", 0], ["make", 0], ["0", 0], ["moves", 0], ["as", 0], ["a", 0], ["is", 0], ["already", 0], ["divisible", 0], ["by", 0], ["b", 4], ["you", 8], ["have", 8], ["to", 8], ["answer", 8], ["t", 8], ["independent", 8], ["test", 8], ["cases", 8], ["input", 20], ["the", 46], ["first", 46], ["line", 27], ["of", 27], ["the", 27], ["input", 27], ["contains", 27], ["one", 27], ["integer", 26], ["t", 32], ["1", 22], ["le", 22], ["t", 22], ["le", 22], ["10", 28], ["4", 22], ["—", 10], ["the", 11], ["number", 11], ["of", 1], ["test", 0], ["cases", 0], ["then", 0], ["t", 0], ["test", 0], ["cases", 0], ["follow", 0], ["the", 0], ["only", 0], ["line", 0], ["of", 0], ["the", 0], ["test", 0], ["case", 0], ["contains", 0], ["two", 0], ["integers", 0], ["a", 0], ["and", 0], ["b", 0], ["1", 0], ["le", 0], ["a", 0], ["b", 0], ["le", 0], ["10", 0], ["9", 0], ["output", 0], ["for", 0], ["each", 0], ["test", 0], ["case", 0], ["print", 0], ["the", 0], ["answer", 0], ["—", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["moves", 0], ["you", 0], ["need", 0], ["to", 0], ["do", 0], ["in", 0], ["order", 0], ["to", 0], ["make", 0], ["a", 0], ["divisible", 0], ["by", 0], ["b", 0], ["example", 0], ["input", 0], ["5", 0], ["10", 0], ["4", 0], ["13", 0], ["9", 0], ["100", 0], ["13", 0], ["123", 0], ["456", 0], ["92", 0], ["46", 0], ["output", 0], ["2", 0], ["5", 0], ["4", 0], ["333", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.18518518518518517, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.019630970471348895, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.2413793103448276, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11637931034482758, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.06790123456790123, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.014506172839506174, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.2413793103448276, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11637931034482758, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["q", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["deque", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappush", 0], ["heappop", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["accumulate", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["bisect", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["ls", 0], ["return", 0], ["list", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["s", 0], ["res", 0], ["list", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["if", 0], ["res", 0], ["1", 0], ["n", 0], ["return", 0], ["res", 0], ["1", 0], ["return", 0], ["res", 0], ["def", 0], ["ir", 0], ["n", 0], ["return", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["lir", 0], ["n", 0], ["return", 0], ["li", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["sr", 0], ["n", 0], ["return", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["lsr", 0], ["n", 0], ["return", 0], ["ls", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sys", 0], ["setrecursionlimit", 0], ["1000000", 0], ["mod", 0], ["1000000007", 0], ["def", 0], ["solve", 0], ["t", 0], ["i", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["li", 0], ["print", 0], ["a", 0], ["b", 0], ["return", 0], ["solve", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["def", 0], ["solve", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["solve", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["b", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["a", 0], ["b", 0], ["import", 0], ["sys", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["1", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["b", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["import", 0], ["sys", 0], ["ri", 0], ["lambda", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["ri", 0], ["lambda", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["list2d", 0], ["a", 0], ["b", 0], ["c", 0], ["return", 0], ["c", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["def", 0], ["list3d", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["return", 0], ["d", 0], ["c", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["def", 0], ["list4d", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["return", 0], ["e", 0], ["d", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["c", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["def", 0], ["ceil", 0], ["x", 0], ["y", 0], ["1", 0], ["return", 0], ["int", 0], ["x", 0], ["y", 0], ["def", 0], ["int", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["map", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["list", 0], ["n", 0], ["none", 0], ["return", 0], ["list", 0], ["map", 0], ["if", 0], ["n", 0], ["is", 0], ["none", 0], ["else", 0], ["int", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["yes", 0], ["print", 0], ["yes", 0], ["def", 0], ["no", 0], ["print", 0], ["no", 0], ["def", 0], ["yes", 0], ["print", 0], ["yes", 0], ["def", 0], ["no", 0], ["print", 0], ["no", 0], ["inf", 0], ["10", 0], ["18", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["ri", 0], ["a", 0], ["b", 0], ["ri", 0], ["temp", 0], ["a", 0], ["b", 0], ["if", 0], ["temp", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["b", 0], ["temp", 0], ["template", 0], ["written", 0], ["to", 0], ["be", 0], ["used", 0], ["by", 0], ["python", 0], ["programmers", 0], ["use", 0], ["at", 0], ["your", 0], ["own", 0], ["risk", 0], ["owned", 0], ["by", 0], ["enraged", 0], ["rating", 0], ["5", 0], ["star", 0], ["at", 0], ["codechef", 0], ["and", 0], ["specialist", 0], ["at", 0], ["codeforces", 0], ["import", 0], ["sys", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["from", 0], ["heapq", 0], ["import", 0], ["merge", 0], ["heapify", 0], ["heappop", 0], ["heappush", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["floor", 0], ["gcd", 0], ["fabs", 0], ["factorial", 0], ["fmod", 0], ["sqrt", 0], ["inf", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["deque", 0], ["counter", 0], ["as", 0], ["c", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["as", 0], ["comb", 0], ["permutations", 0], ["as", 0], ["perm", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["as", 0], ["bl", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["bisect", 0], ["sys", 0], ["setrecursionlimit", 0], ["2", 0], ["pow", 0], ["10", 0], ["6", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["sys", 0], ["stdout", 0], ["open", 0], ["output", 0], ["txt", 0], ["w", 0], ["mod", 0], ["pow", 0], ["10", 0], ["9", 0], ["7", 0], ["mod2", 0], ["998244353", 0], ["def", 0], ["data", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["out", 0], ["var", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["var", 0], ["def", 0], ["outln", 0], ["var", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["var", 0], ["n", 0], ["def", 0], ["l", 0], ["return", 0], ["list", 0], ["sp", 0], ["def", 0], ["sl", 0], ["return", 0], ["list", 0], ["ssp", 0], ["def", 0], ["sp", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["data", 0], ["split", 0], ["def", 0], ["ssp", 0], ["return", 0], ["list", 0], ["map", 0], ["str", 0], ["data", 0], ["split", 0], ["def", 0], ["l1d", 0], ["n", 0], ["val", 0], ["0", 0], ["return", 0], ["val", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["l2d", 0], ["n", 0], ["m", 0], ["val", 0], ["0", 0], ["return", 0], ["l1d", 0], ["n", 0], ["val", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["data", 0], ["a", 0], ["b", 0], ["sp", 0], ["temp", 0], ["ceil", 0], ["a", 0], ["b", 0], ["outln", 0], ["temp", 0], ["b", 0], ["a", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["m", 0], ["n", 0], ["m", 0], ["m", 0], ["code", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["pow", 0], ["base", 0], ["exp", 0], ["if", 0], ["exp", 0], ["1", 0], ["return", 0], ["pow", 0], ["base", 0], ["mod", 0], ["2", 0], ["res", 0], ["1", 0], ["base", 0], ["mod", 0], ["while", 0], ["exp", 0], ["0", 0], ["if", 0], ["exp", 0], ["2", 0], ["res", 0], ["res", 0], ["base", 0], ["mod", 0], ["exp", 0], ["2", 0], ["base", 0], ["base", 0], ["base", 0], ["mod", 0], ["res", 0], ["mod", 0], ["return", 0], ["res", 0], ["def", 0], ["main", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["b", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["from", 0], ["future", 0], ["import", 0], ["print", 0], ["function", 0], ["division", 0], ["range", 0], ["xrange", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["def", 0], ["main", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["w", 0], ["a", 0], ["b", 0], ["w1", 0], ["a", 0], ["b", 0], ["if", 0], ["w1", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["b", 0], ["w1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ch", 0], ["n", 0], ["m", 0], ["if", 0], ["ch", 0], ["0", 0], ["ch", 0], ["m", 0], ["print", 0], ["m", 0], ["ch", 0], ["t", 0], ["int", 0], ["input", 0], ["while", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["b", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["t", 0], ["1", 0], ["mod", 0], ["1000000007", 0], ["mod2", 0], ["998244353", 0], ["ii", 0], ["lambda", 0], ["int", 0], ["input", 0], ["si", 0], ["lambda", 0], ["input", 0], ["dgl", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["f", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["il", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ls", 0], ["lambda", 0], ["list", 0], ["input", 0], ["let", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["for", 0], ["in", 0], ["range", 0], ["ii", 0], ["a", 0], ["b", 0], ["f", 0], ["x", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["print", 0], ["x", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["itertools", 0], ["import", 0], ["functools", 0], ["import", 0], ["collections", 0], ["import", 0], ["operator", 0], ["import", 0], ["fileinput", 0], ["import", 0], ["copy", 0], ["orda", 0], ["97", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["mi", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["lcm", 0], ["a", 0], ["b", 0], ["return", 0], ["abs", 0], ["a", 0], ["b", 0], ["math", 0], ["gcd", 0], ["a", 0], ["b", 0], ["def", 0], ["revn", 0], ["n", 0], ["return", 0], ["str", 0], ["n", 0], ["1", 0], ["def", 0], ["dd", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["int", 0], ["def", 0], ["ddl", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["def", 0], ["sieve", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["list", 0], ["prime", 0], ["true", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["p", 0], ["3", 0], ["while", 0], ["p", 0], ["p", 0], ["n", 0], ["if", 0], ["prime", 0], ["p", 2], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["p", 0], ["2", 0], ["n", 0], ["1", 0], ["p", 0], ["prime", 0], ["i", 0], ["false", 0], ["p", 0], ["2", 0], ["r", 0], ["2", 0], ["for", 0], ["p", 0], ["in", 0], ["range", 0], ["3", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["prime", 0], ["p", 0], ["r", 0], ["append", 0], ["p", 0], ["return", 0], ["r", 0], ["def", 0], ["divs", 0], ["n", 0], ["start", 0], ["1", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["if", 0], ["n", 0], ["i", 0], ["i", 0], ["r", 0], ["append", 0], ["i", 0], ["else", 0], ["r", 0], ["extend", 0], ["i", 0], ["n", 0], ["i", 0], ["return", 0], ["r", 0], ["def", 0], ["divn", 0], ["n", 0], ["primes", 0], ["divs", 0], ["number", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["primes", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["divs", 0], ["number", 0], ["t", 0], ["1", 0], ["while", 0], ["n", 0], ["i", 0], ["0", 0], ["t", 0], ["1", 0], ["n", 0], ["i", 0], ["divs", 0], ["number", 0], ["t", 0], ["def", 0], ["prime", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["true", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["or", 0], ["n", 0], ["1", 0], ["return", 0], ["false", 0], ["sqr", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["3", 0], ["sqr", 0], ["2", 0], ["if", 0], ["n", 0], ["d", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["def", 0], ["convn", 0], ["number", 0], ["base", 0], ["newnumber", 0], ["0", 0], ["while", 0], ["number", 0], ["0", 0], ["newnumber", 0], ["number", 0], ["base", 0], ["number", 0], ["base", 0], ["return", 0], ["newnumber", 0], ["def", 0], ["cdiv", 0], ["n", 0], ["k", 0], ["return", 0], ["n", 0], ["k", 0], ["n", 0], ["k", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["ii", 0], ["a", 0], ["b", 0], ["mi", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["b", 0], ["else", 0], ["print", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["a", 0], ["b", 0], ["print", 0], ["b", 0], ["c", 0], ["b", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["case", 0], ["num", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["import", 0], ["sys", 0], ["import", 0], ["os", 0], ["import", 0], ["time", 0], ["import", 0], ["collections", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["deque", 0], ["import", 0], ["itertools", 0], ["import", 0], ["math", 0], ["import", 0], ["timeit", 0], ["import", 0], ["random", 0], ["import", 0], ["string", 0], ["imgur", 0], ["com", 0], ["pkt7iif", 0], ["png", 0], ["def", 0], ["sieve", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["list", 0], ["prime", 0], ["true", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["p", 0], ["3", 0], ["while", 0], ["p", 0], ["p", 0], ["n", 0], ["if", 0], ["prime", 0], ["p", 2], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["p", 0], ["2", 0], ["n", 0], ["1", 0], ["p", 0], ["prime", 0], ["i", 0], ["false", 0], ["p", 0], ["2", 0], ["r", 0], ["2", 0], ["for", 0], ["p", 0], ["in", 0], ["range", 0], ["3", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["prime", 0], ["p", 0], ["r", 0], ["append", 0], ["p", 0], ["return", 0], ["r", 0], ["def", 0], ["divs", 0], ["n", 0], ["start", 0], ["1", 0], ["divisors", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["if", 0], ["n", 0], ["i", 0], ["i", 0], ["divisors", 0], ["append", 0], ["i", 0], ["else", 0], ["divisors", 0], ["extend", 0], ["i", 0], ["n", 0], ["i", 0], ["return", 0], ["divisors", 0], ["def", 0], ["divn", 0], ["n", 0], ["primes", 0], ["divs", 0], ["number", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["primes", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["divs", 0], ["number", 0], ["t", 0], ["1", 0], ["while", 0], ["n", 0], ["i", 0], ["0", 0], ["t", 0], ["1", 0], ["n", 0], ["i", 0], ["divs", 0], ["number", 0], ["t", 0], ["def", 0], ["flin", 0], ["d", 0], ["x", 0], ["default", 0], ["1", 0], ["left", 0], ["right", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["d", 0], ["if", 0], ["d", 0], ["i", 0], ["x", 0], ["if", 0], ["left", 0], ["1", 0], ["left", 0], ["i", 0], ["right", 0], ["i", 0], ["if", 0], ["left", 0], ["1", 0], ["return", 0], ["default", 0], ["default", 0], ["else", 0], ["return", 0], ["left", 0], ["right", 0], ["def", 0], ["ceil", 0], ["n", 0], ["k", 0], ["return", 0], ["n", 0], ["k", 0], ["n", 0], ["k", 0], ["0", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["mi", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["lcm", 0], ["a", 0], ["b", 0], ["return", 0], ["abs", 0], ["a", 0], ["b", 0], ["math", 0], ["gcd", 0], ["a", 0], ["b", 0], ["def", 0], ["prr", 0], ["a", 0], ["sep", 0], ["print", 0], ["sep", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["def", 0], ["dd", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["int", 0], ["def", 0], ["ddl", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["for", 0], ["in", 0], ["range", 0], ["ii", 0], ["a", 0], ["b", 0], ["mi", 0], ["t", 0], ["ceil", 0], ["a", 0], ["b", 0], ["print", 0], ["b", 0], ["t", 0], ["a", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.002600780234070221, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0013003901170351106, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.01806451612903226, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00903225806451613, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.002600780234070221, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0013003901170351106, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.01806451612903226, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00903225806451613, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nOne day Nikita found the string containing letters \"a\" and \"b\" only. \n\nNikita thinks that string is beautiful if it can be cut into 3 strings (possibly empty) without changing the order of the letters, where the 1-st and the 3-rd one contain only letters \"a\" and the 2-nd contains only letters \"b\".\n\nNikita wants to make the string beautiful by removing some (possibly none) of its characters, but without changing their order. What is the maximum length of the string he can get?\n\n\n-----Input-----\n\nThe first line contains a non-empty string of length not greater than 5 000 containing only lowercase English letters \"a\" and \"b\". \n\n\n-----Output-----\n\nPrint a single integer — the maximum possible size of beautiful string Nikita can get.\n\n\n-----Examples-----\nInput\nabba\n\nOutput\n4\nInput\nbab\n\nOutput\n2\n\n\n-----Note-----\n\nIt the first sample the string is already beautiful.\n\nIn the second sample he needs to delete one of \"b\" to make it beautiful.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["s=input()\ndp=[[0,0,0] for i in range(len(s))]\nfor i in range(len(s)):\n\tif s[i]=='a':\n\t\tdp[i][0]=dp[i-1][0]+1\n\t\tdp[i][1]=dp[i-1][1]\n\t\tdp[i][2]=max(dp[i-1][1]+1,dp[i-1][2]+1)\n\telse:\n\t\tdp[i][0]=dp[i-1][0]\n\t\tdp[i][1]=max(dp[i-1][0]+1,dp[i-1][1]+1)\n\t\tdp[i][2]=dp[i-1][2]\ne=len(s)-1\nprint(max(dp[e][0],dp[e][1],dp[e][2]))\n", "s = input()\n\nd = [[0 for i in range(len(s) + 5)] for j in range(3)]\n\nfor i in range(1, len(s) + 1):\n\td[0][i] = d[0][i - 1] + (s[i - 1] == 'b')\n\t\n\td[1][i] = d[1][i - 1] + (s[i - 1] == 'a')\n\td[1][i] = min(d[1][i], d[0][i - 1] + (s[i - 1] == 'a'))\n\t\n\td[2][i] = d[2][i - 1] + (s[i - 1] == 'b')\n\td[2][i] = min(d[2][i], d[1][i - 1] + (s[i - 1] == 'b'))\nn = len(s)\nprint(len(s) - min(d[0][n], d[1][n], d[2][n]))\n", "from sys import stdin, stdout\n\ns = stdin.readline().rstrip()\nn = len(s)\naCount=0\nbCount=0\naList=[0]\nbList=[0]\nfor i in range(n):\n\tif s[i]=='a':\n\t\taCount+=1\n\t\taList.append(aCount)\n\t\tbList.append(bCount)\n\telse:\n\t\tbCount+=1\n\t\taList.append(aCount)\n\t\tbList.append(bCount)\n\nbestScore = 0\nfor i in range(n+1):#start\n\tfor j in range(i,n+1):#end\n\t\tscore=0\n\t\tscore+=aList[i]\n\t\tscore+=bList[j]-bList[i]\n\t\tscore+=aCount-aList[j]\n\t\tif score>bestScore:\n\t\t\tbestScore=score\n\nprint(bestScore)\n", "from collections import defaultdict\nfrom itertools import groupby\n\n\ndef reverse_enumerate(seq):\n\tn = len(seq)\n\tfor i in range(n):\n\t\tyield n - 1 - i, seq[n - 1 - i]\n\n\nclass Symbol(object):\n\tdef __init__(self, symbol, iter=None):\n\t\tself.symbol = symbol\n\t\tself.size = sum(1 for _ in iter) if iter else 0\n\n\tdef __hash__(self):\n\t\treturn hash(self.symbol)\n\n\ndef solve(inp):\n\tsymbols = [Symbol(s, i) for s, i in groupby(inp)]\n\tlongest_end_a = defaultdict(int)\n\tlongest_start_a = defaultdict(int)\n\tlongest_end_b = defaultdict(int)\n\tn = len(symbols)\n\tif n == 1:\n\t\treturn len(inp)\n\tfor idx, symbol in reverse_enumerate(symbols):\n\t\tif symbol.symbol == \"a\":\n\t\t\tlongest_end_a[idx] = longest_end_a[idx + 1] + symbol.size\n\t\t\tlongest_end_b[idx] = longest_end_b[idx + 1]\n\t\telse:\n\t\t\tlongest_end_a[idx] = longest_end_a[idx + 1]\n\t\t\tlongest_end_b[idx] = longest_end_b[idx + 1] + symbol.size\n\tfor idx, symbol in enumerate(symbols):\n\t\tif symbol.symbol == \"a\":\n\t\t\tlongest_start_a[idx] = longest_start_a[idx - 1] + symbol.size\n\t\telse:\n\t\t\tlongest_start_a[idx] = longest_start_a[idx - 1]\n\treturn max(\n\t\tlongest_start_a[idx] + (longest_end_b[idx] - longest_end_b[second_idx]) + longest_end_a[second_idx]\n\t\tfor idx in range(n)\n\t\tfor second_idx in range(idx + 1, n + 1)\n\t)\n\n\ndef __starting_point():\n\tprint(solve(input()))\n\n__starting_point()\n", "from collections import defaultdict\nfrom itertools import groupby\n\n\ndef reverse_enumerate(seq):\n\tn = len(seq)\n\tfor i in range(n):\n\t\tyield n - 1 - i, seq[n - 1 - i]\n\n\nclass Symbol(object):\n\tdef __init__(self, symbol, iter=None):\n\t\tself.symbol = symbol\n\t\tself.size = sum(1 for _ in iter) if iter else 0\n\n\tdef __hash__(self):\n\t\treturn hash(self.symbol)\n\n\ndef solve(inp):\n\tsymbols = [Symbol(s, i) for s, i in groupby(inp)]\n\tlongest_end_a = defaultdict(int)\n\tlongest_start_a = defaultdict(int)\n\tlongest_end_b = defaultdict(int)\n\tn = len(symbols)\n\tif n == 1:\n\t\treturn len(inp)\n\tfor idx, symbol in reverse_enumerate(symbols):\n\t\tif symbol.symbol == \"a\":\n\t\t\tlongest_end_a[idx] = longest_end_a[idx + 1] + symbol.size\n\t\t\tlongest_end_b[idx] = longest_end_b[idx + 1]\n\t\telse:\n\t\t\tlongest_end_a[idx] = longest_end_a[idx + 1]\n\t\t\tlongest_end_b[idx] = longest_end_b[idx + 1] + symbol.size\n\tfor idx, symbol in enumerate(symbols):\n\t\tif symbol.symbol == \"a\":\n\t\t\tlongest_start_a[idx] = longest_start_a[idx - 1] + symbol.size\n\t\telse:\n\t\t\tlongest_start_a[idx] = longest_start_a[idx - 1]\n\treturn max(\n\t\tlongest_start_a[idx] + (longest_end_b[idx] - longest_end_b[second_idx]) + longest_end_a[second_idx]\n\t\tfor idx in range(n)\n\t\tfor second_idx in range(idx + 1, n + 1)\n\t)\n\n\ndef __starting_point():\n\tprint(solve(input()))\n__starting_point()\n", "str = input()\nl = len(str)\nok = 0\ntest1 = 0\ntest2 = 0\nfor i in range(l):\n\tif(str[i] == 'a'):\n\t\tok = ok + 1\n\t\ttest2 = max(test1+1,test2+1)\n\telse:\n\t\ttest1 = max(test1+1,ok+1)\nprint(max(test1,test2))\n", "s = input()\na, b = [0], [0]\na_count, b_count = 0, 0\nfor x in s:\n\tif x == 'a':\n\t\ta_count += 1\n\telse:\n\t\tb_count += 1\n\ta.append(a_count)\n\tb.append(b_count)\nbest = b_count\nfor i in range(len(a)):\n\tfor j in range(i, len(a)):\n\t\tbest = max(best, a[i] + (a_count-a[j]) + (b[j]-b[i]))\nprint(best)\n\n", "str = input()\nl = len(str)\nok = 0\ntest1 = 0\ntest2 = 0\nfor i in range(l):\n\tif(str[i] == 'a'):\n\t\tok = ok + 1\n\t\ttest2 = max(test1 + 1, test2 + 1)\n\telse:\n\t\ttest1 = max(test1 + 1,ok + 1)\nprint(max(test1, test2))\n", "s=input()\n\t#________b..._________\nback=0                  #itung a sampe ktemu b [a....]\nnow=0                   #setelah a../nggak, jumlah b [a...b.. / b...]\nafter_ab=0              #setelah a..b.. [a..b..a]\nfor i in s:\n    if i=='a':\n        back+=1\n        after_ab=max(after_ab,now)+1\n    else:\n        now=max(back,now)+1\nprint(max(back,max(now,after_ab)))\n        \n        \n", "s = input()\nsize = len(s)\na = [0]*(size+1)\nb = [0]*(size+1)\nfor i in range(size):\n\ta[i+1] = a[i] + (1 if s[i] == 'a' else 0)\n\tb[i+1] = b[i] + (1 if s[i] == 'b' else 0)\nans = 0\nfor i in range(size+1):\n\tfor j in range(i+1):\n\t\tval = b[i] - b[j] + a[j] + a[size] - a[i]\n\t\tans = max(val,ans)\nprint(ans)\n", "s = input()\nle = len(s)\nmx = 0\na = s.count('a')\nb = s.count('b')\nmx = max(mx, a)\nmx = max(mx, b)\ncnta = [0]*(le+1)\ncntb = [0]*(le+1)\ncnta[0] = 1 if s[0]=='a' else 0\ncntb[0] = 1-cnta[0]\n\nfor i in range(1,le):\n\tcnta[i] = cnta[i-1]\n\tcntb[i] = cntb[i-1]\n\tif s[i] == 'a':\n\t\tcnta[i] += 1\n\telse:\n\t\tcntb[i] += 1\n\nfor i in range(le):\n\tfor j in range(i+1, le):\n\t\tmx = max(mx, cnta[i]+b-cntb[i])\n\t\tmx = max(mx, cntb[i]+a-cnta[i])\n\t\tmx = max(mx, cnta[i]+cntb[j]-cntb[i]+a-cnta[j])\n\t\t\nprint(mx)\n", "strs=input()\narray=[]\nchar=[]\ncount=1\nchar.append(strs[0])\ni=1\nwhile(i<len(strs)):\n\tif(strs[i]==strs[i-1]):\n\t\tcount+=1\n\telse:\n\t\tarray.append(count)\n\t\tchar.append(strs[i])\n\t\tcount=1\n\ti+=1\narray.append(count)\nbback=[]\naback=[]\nbfront=[]\nafront=[]\ni=0\nwhile(i<len(array)):\n\tif(i==0):\n\t\tif(char[i]=='b'):\n\t\t\taback.append(0)\n\t\t\tbback.append(array[0])\n\t\telse:\n\t\t\tbback.append(0)\n\t\t\taback.append(array[0])\n\telse:\n\t\tif(char[i]=='b'):\n\t\t\taback.append(aback[i-1])\n\t\t\tbback.append(bback[i-1]+array[i])\n\t\telse:\n\t\t\taback.append(aback[i-1]+array[i])\n\t\t\tbback.append(bback[i-1])\n\ti+=1\ni=0\nwhile(i<len(array)):\n\tafront.append(aback[-1]-aback[i])\n\tbfront.append(bback[-1]-bback[i])\n\ti+=1\nif(len(array)==1):\n\tprint(array[0])\nelse:\n\tmaxm=-1\n\ti=0\n\twhile(i<len(array)):\n\t\tif(char[i]=='b'):\n\t\t\tj=i\n\t\t\twhile(j<len(array)):\n\t\t\t\tif(char[j]=='b'):\n\t\t\t\t\tif(j==i):\n\t\t\t\t\t\tans=aback[i]+array[i]+afront[i]\n\t\t\t\t\t\tif(ans>maxm):\n\t\t\t\t\t\t\tmaxm=ans\n\t\t\t\t\telse:\n\t\t\t\t\t\tans=aback[i]+array[i]+(bback[j]-bback[i])+afront[j]\n\t\t\t\t\t\tif(ans>maxm):\n\t\t\t\t\t\t\tmaxm=ans\n\t\t\t\tj+=1\n\t\ti+=1\n\tprint(maxm)\n", "str = input()\nl = len(str)\ncnt = 0\ndp1 = 0\ndp2 = 0\nfor i in range(l):\n\tif( str[i] == 'a' ):\n\t\tcnt+=1\n\t\tdp2 = max(dp1 + 1 , dp2 + 1)\n\telse:\n\t\tdp1 = max(dp1 + 1 , cnt+1 )\nprint(max(dp1,dp2))\n", "a = input()\n\ndp1 = 0\ndp2 = 0\ncnt = 0\n\nfor i in range(len(a)):\n\tif a[i] == 'a':\n\t\tcnt += 1\n\t\tdp2 = max(dp1 + 1, dp2 + 1)\n\telse:\n\t\tdp1 = max(dp1 + 1, cnt + 1)\n\nprint(max(dp1,dp2))\n", "a = input()\n\ndp1 = 0\ndp2 = 0\ncnt = 0\n\nfor i in range(len(a)):\n\tif a[i] == 'a':\n\t\tcnt += 1\n\t\tdp2 = max(dp1 + 1, dp2 + 1)\n\telse:\n\t\tdp1 = max(dp1 + 1, cnt + 1)\n\nprint(max(dp1,dp2))\n", "#!/usr/bin/env python3\n\nS = input()\nN = len(S)\nT = [[0]*(N+1) for _ in range(3)]\nfor i in range(1,N+1):\n\tT[0][i] = T[0][i-1] + int(S[i-1]=='a')\n\tT[1][i] = max(T[1][i-1] + int(S[i-1]=='b'), T[0][i])\n\tT[2][i] = max(T[2][i-1] + int(S[i-1]=='a'), T[1][i], T[0][i])\nprint(T[2][N])\n", "s = input()\na_count = 0\ndp1 = 0     # last letter is 'b'\ndp2 = 0     # last letter is 'a'\nfor i in range(len(s)):\n\tif(s[i]=='a'):\n\t\ta_count += 1\n\t\tdp2 = max(dp1,dp2)+1\n\telse:\n\t\tdp1 = max(a_count,dp1)+1\nprint(max(dp1,dp2))\n", "str = input()\nl = len(str)\nok = 0\ntest1 = 0\ntest2 = 0\nfor i in range(l):\n\tif(str[i] == 'a'):\n\t\tok = ok + 1\n\t\ttest2 = max(test1+1,test2+1)\n\telse:\n\t\ttest1 = max(test1+1,ok+1)\nprint(max(test1,test2))\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**15\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n\ts = [1 if c=='a' else 0 for c in S()]\n\tl = len(s)\n\ta = [0] * l\n\tb = [0] * l\n\tif s[0] == 1:\n\t\ta[0] = 1\n\telse:\n\t\tb[0] = 1\n\tfor i in range(1,l):\n\t\tif s[i] == 1:\n\t\t\ta[i] = a[i-1] + 1\n\t\t\tb[i] = b[i-1]\n\t\telse:\n\t\t\ta[i] = a[i-1]\n\t\t\tb[i] = b[i-1] + 1\n\n\tif b[-1] == 0:\n\t\treturn l\n\n\tr = 0\n\tfor i in range(0,l):\n\t\tif s[i] == 1:\n\t\t\tcontinue\n\t\tfor j in range(i,l):\n\t\t\tif s[j] == 1:\n\t\t\t\tcontinue\n\t\t\ttr = a[i] + b[j] - b[i] + 1 + a[-1] - a[j]\n\t\t\tif r < tr:\n\t\t\t\tr = tr\n\n\treturn r\n\n\nprint(main())\n\n\n", "s=input()\nn=len(s)\nf=[[0 for i in range(0,3)] for j in range(0,n)]\nfor i in range(0,n):\n\tif (i>0):\n\t\tf[i][0]=f[i-1][0]\n\t\tf[i][1]=f[i-1][1]\n\t\tf[i][2]=f[i-1][2]\n\tif (s[i]=='a'):\n\t\tf[i][0]+=1\n\t\tf[i][2]+=1\n\t\tf[i][2]=max(f[i][2],f[i][1]+1)\n\telse:\n\t\tf[i][1]+=1\n\t\tf[i][1]=max(f[i][1],f[i][0]+1)\nprint(max(f[n-1][0],max(f[n-1][1],f[n-1][2])))\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Oct 25 09:07:32 2017\n\n@author: savit\n\"\"\"\n\ns=input()\nstartpos=0\nmax1=0\ntemp=0\nbeststart=[]\nfor i in range(len(s)):\n\tif(s[i]=='a'):\n\t\t\n\t\ttemp+=1\n\t\tif(temp>max1):\n\t\t\tmax1=temp\n\t\t\tstartpos=i+1\n\telse:\n\t\ttemp-=1\n\tbeststart.append((max1,startpos))\n\t\nbeststart.append((0,-1))\nmax2=0\ntemp=0\nendpos=len(s)\nfor i in range(len(s)-1,-1,-1):\n\tif(s[i]=='a'):\n\t\ttemp+=(1 + (beststart[i-1][0]-beststart[i][0]))\n\t\tif(max2<temp):\n\t\t\tmax2=temp\n\t\t\tendpos=i\n\telse:\n\t\ttemp-=1\nans=0\nif(endpos!=len(s)):\n\t\n\tstartpos=beststart[endpos][1]\n\nif(startpos==-1):\n\tstartpos=0\n\n\nfor i in range(startpos):\n\tif(s[i]=='b'):\n\t\tans+=1\nfor i in range(startpos,endpos):\n\tif(s[i]=='a'):\n\t\tans+=1\nfor i in range(endpos,len(s)):\n\tif(s[i]=='b'):\n\t\tans+=1\n#print(startpos,endpos)\nprint(len(s)-ans)\n", "s = input()\nf = [0,0,0]\nfor i in s:\n\tif i=='a':\n\t\tf[2] = max(f)+1\n\t\tf[0]+=1\n\telse:\n\t\tf[1] = max(f[0],f[1])+1\nprint(max(f))    \n\t\n", "line = input()\n\ndp = 3 * [0]\n\nfor c in line:\n\tif c == 'a':\n\t\tdp[2] = max(dp) + 1\n\t\tdp[0] += 1\n\telif c == 'b':\n\t\tdp[1] = max(dp[:2]) + 1\n\nprint(max(dp))\n", "s = input()\nar = [0,0,0]\nfor i in s:\n\tif i == 'a':\n\t\tar[2] = max(ar)+1\n\t\tar[0] += 1\n\telse:\n\t\tar[1] = max(ar[0],ar[1]) + 1\nprint(max(ar))  \n", "# python3\n# utf-8\n\nstring = input()\nprefix___a_nr = [0]\nprefix___b_nr = [0]\nfor sym in string:\n\tcurr_a_nr = prefix___a_nr[-1]\n\tcurr_b_nr = prefix___b_nr[-1]\n\tif sym == 'a':\n\t\tcurr_a_nr += 1\n\telif sym == 'b':\n\t\tcurr_b_nr += 1\n\tprefix___a_nr.append(curr_a_nr)\n\tprefix___b_nr.append(curr_b_nr)\n\nans = 5000\nfor sep1 in range(len(string) + 1):\n\tfor sep2 in range(sep1, len(string) + 1):\n\t\tcurr_ans = 0\n\t\tcurr_ans += prefix___b_nr[sep1]\n\t\tcurr_ans += prefix___a_nr[sep2] - prefix___a_nr[sep1]\n\t\tcurr_ans += prefix___b_nr[-1] - prefix___b_nr[sep2]\n\t\tans = min(ans, curr_ans)\nprint(len(string) - ans)\n"], "id": "id8892"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8892", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["one", 0], ["day", 0], ["nikita", 0], ["found", 0], ["the", 0], ["string", 0], ["containing", 0], ["letters", 0], ["a", 0], ["and", 0], ["b", 0], ["only", 1], ["nikita", 1], ["thinks", 1], ["that", 1], ["string", 1], ["is", 1], ["beautiful", 1], ["if", 1], ["it", 1], ["can", 1], ["be", 1], ["cut", 1], ["into", 1], ["3", 1], ["strings", 1], ["possibly", 1], ["empty", 1], ["without", 1], ["changing", 1], ["the", 1], ["order", 1], ["of", 1], ["the", 1], ["letters", 1], ["where", 0], ["the", 0], ["1", 0], ["st", 0], ["and", 0], ["the", 0], ["3", 0], ["rd", 0], ["one", 0], ["contain", 0], ["only", 0], ["letters", 0], ["a", 0], ["and", 0], ["the", 0], ["2", 0], ["nd", 0], ["contains", 0], ["only", 0], ["letters", 0], ["b", 0], ["nikita", 1], ["wants", 1], ["to", 1], ["make", 1], ["the", 1], ["string", 1], ["beautiful", 1], ["by", 1], ["removing", 1], ["some", 1], ["possibly", 1], ["none", 1], ["of", 1], ["its", 1], ["characters", 1], ["but", 1], ["without", 1], ["changing", 1], ["their", 1], ["order", 0], ["what", 0], ["is", 0], ["the", 0], ["maximum", 0], ["length", 0], ["of", 0], ["the", 0], ["string", 0], ["he", 0], ["can", 0], ["get", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["a", 1], ["non", 1], ["empty", 1], ["string", 1], ["of", 0], ["length", 0], ["not", 0], ["greater", 0], ["than", 0], ["5", 0], ["000", 0], ["containing", 0], ["only", 0], ["lowercase", 0], ["english", 0], ["letters", 0], ["a", 0], ["and", 0], ["b", 0], ["output", 0], ["print", 1], ["a", 1], ["single", 1], ["integer", 0], ["—", 0], ["the", 0], ["maximum", 0], ["possible", 0], ["size", 0], ["of", 0], ["beautiful", 0], ["string", 0], ["nikita", 0], ["can", 0], ["get", 0], ["examples", 0], ["input", 0], ["abba", 0], ["output", 0], ["4", 0], ["input", 0], ["bab", 0], ["output", 0], ["2", 0], ["note", 0], ["it", 0], ["the", 0], ["first", 0], ["sample", 0], ["the", 0], ["string", 0], ["is", 0], ["already", 0], ["beautiful", 0], ["in", 0], ["the", 0], ["second", 0], ["sample", 0], ["he", 0], ["needs", 0], ["to", 0], ["delete", 0], ["one", 0], ["of", 0], ["b", 0], ["to", 0], ["make", 0], ["it", 0], ["beautiful", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3375, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3375, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5930232558139535, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5930232558139535, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3375, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3375, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5930232558139535, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5930232558139535, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["s", 0], ["input", 0], ["dp", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["dp", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["2", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["2", 0], ["1", 0], ["else", 0], ["dp", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["2", 0], ["dp", 0], ["i", 0], ["1", 0], ["2", 0], ["e", 0], ["len", 0], ["s", 0], ["1", 0], ["print", 0], ["max", 0], ["dp", 0], ["e", 0], ["0", 0], ["dp", 0], ["e", 0], ["1", 0], ["dp", 0], ["e", 0], ["2", 0], ["s", 0], ["input", 0], ["d", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["s", 0], ["1", 0], ["d", 0], ["0", 0], ["i", 0], ["d", 0], ["0", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["b", 0], ["d", 0], ["1", 0], ["i", 0], ["d", 0], ["1", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["d", 0], ["1", 0], ["i", 0], ["min", 0], ["d", 0], ["1", 0], ["i", 0], ["d", 0], ["0", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["d", 0], ["2", 0], ["i", 0], ["d", 0], ["2", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["b", 0], ["d", 0], ["2", 0], ["i", 0], ["min", 0], ["d", 0], ["2", 0], ["i", 0], ["d", 0], ["1", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["b", 0], ["n", 0], ["len", 0], ["s", 0], ["print", 0], ["len", 0], ["s", 0], ["min", 0], ["d", 0], ["0", 0], ["n", 0], ["d", 0], ["1", 0], ["n", 0], ["d", 0], ["2", 0], ["n", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["s", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["n", 0], ["len", 0], ["s", 0], ["acount", 0], ["0", 0], ["bcount", 0], ["0", 0], ["alist", 0], ["0", 0], ["blist", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["acount", 0], ["1", 0], ["alist", 0], ["append", 0], ["acount", 0], ["blist", 0], ["append", 0], ["bcount", 0], ["else", 0], ["bcount", 0], ["1", 0], ["alist", 0], ["append", 0], ["acount", 0], ["blist", 0], ["append", 0], ["bcount", 0], ["bestscore", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["start", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["1", 0], ["end", 0], ["score", 0], ["0", 0], ["score", 0], ["alist", 0], ["i", 0], ["score", 0], ["blist", 0], ["j", 0], ["blist", 0], ["i", 0], ["score", 0], ["acount", 0], ["alist", 0], ["j", 0], ["if", 0], ["score", 0], ["bestscore", 0], ["bestscore", 0], ["score", 0], ["print", 0], ["bestscore", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["from", 0], ["itertools", 0], ["import", 0], ["groupby", 0], ["def", 0], ["reverse", 0], ["enumerate", 0], ["seq", 0], ["n", 0], ["len", 0], ["seq", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["yield", 0], ["n", 0], ["1", 0], ["i", 0], ["seq", 0], ["n", 0], ["1", 0], ["i", 0], ["class", 0], ["symbol", 0], ["object", 0], ["def", 0], ["init", 0], ["self", 0], ["symbol", 0], ["iter", 0], ["none", 0], ["self", 0], ["symbol", 0], ["symbol", 0], ["self", 0], ["size", 0], ["sum", 0], ["1", 0], ["for", 0], ["in", 0], ["iter", 0], ["if", 0], ["iter", 0], ["else", 0], ["0", 0], ["def", 0], ["hash", 0], ["self", 0], ["return", 0], ["hash", 0], ["self", 0], ["symbol", 0], ["def", 0], ["solve", 0], ["inp", 0], ["symbols", 0], ["symbol", 0], ["s", 0], ["i", 0], ["for", 0], ["s", 0], ["i", 0], ["in", 0], ["groupby", 0], ["inp", 0], ["longest", 0], ["end", 0], ["a", 0], ["defaultdict", 0], ["int", 0], ["longest", 0], ["start", 0], ["a", 0], ["defaultdict", 0], ["int", 0], ["longest", 0], ["end", 0], ["b", 0], ["defaultdict", 0], ["int", 0], ["n", 0], ["len", 0], ["symbols", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["len", 0], ["inp", 0], ["for", 0], ["idx", 0], ["symbol", 0], ["in", 0], ["reverse", 0], ["enumerate", 0], ["symbols", 0], ["if", 0], ["symbol", 0], ["symbol", 0], ["a", 0], ["longest", 0], ["end", 0], ["a", 0], ["idx", 0], ["longest", 0], ["end", 0], ["a", 0], ["idx", 0], ["1", 0], ["symbol", 0], ["size", 0], ["longest", 0], ["end", 0], ["b", 0], ["idx", 0], ["longest", 0], ["end", 0], ["b", 0], ["idx", 0], ["1", 0], ["else", 0], ["longest", 0], ["end", 0], ["a", 0], ["idx", 0], ["longest", 0], ["end", 0], ["a", 0], ["idx", 0], ["1", 0], ["longest", 0], ["end", 0], ["b", 0], ["idx", 0], ["longest", 0], ["end", 0], ["b", 0], ["idx", 0], ["1", 0], ["symbol", 0], ["size", 0], ["for", 0], ["idx", 0], ["symbol", 0], ["in", 0], ["enumerate", 0], ["symbols", 0], ["if", 0], ["symbol", 0], ["symbol", 0], ["a", 0], ["longest", 0], ["start", 0], ["a", 0], ["idx", 0], ["longest", 0], ["start", 0], ["a", 0], ["idx", 0], ["1", 0], ["symbol", 0], ["size", 0], ["else", 0], ["longest", 0], ["start", 0], ["a", 0], ["idx", 0], ["longest", 0], ["start", 0], ["a", 0], ["idx", 0], ["1", 0], ["return", 0], ["max", 0], ["longest", 0], ["start", 0], ["a", 0], ["idx", 0], ["longest", 0], ["end", 0], ["b", 0], ["idx", 0], ["longest", 0], ["end", 0], ["b", 0], ["second", 0], ["idx", 0], ["longest", 0], ["end", 0], ["a", 0], ["second", 0], ["idx", 0], ["for", 0], ["idx", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["second", 0], ["idx", 0], ["in", 0], ["range", 0], ["idx", 0], ["1", 0], ["n", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["print", 0], ["solve", 0], ["input", 0], ["starting", 0], ["point", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["from", 0], ["itertools", 0], ["import", 0], ["groupby", 0], ["def", 0], ["reverse", 0], ["enumerate", 0], ["seq", 0], ["n", 0], ["len", 0], ["seq", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["yield", 0], ["n", 0], ["1", 0], ["i", 0], ["seq", 0], ["n", 0], ["1", 0], ["i", 0], ["class", 0], ["symbol", 0], ["object", 0], ["def", 0], ["init", 0], ["self", 0], ["symbol", 0], ["iter", 0], ["none", 0], ["self", 0], ["symbol", 0], ["symbol", 0], ["self", 0], ["size", 0], ["sum", 0], ["1", 0], ["for", 0], ["in", 0], ["iter", 0], ["if", 0], ["iter", 0], ["else", 0], ["0", 0], ["def", 0], ["hash", 0], ["self", 0], ["return", 0], ["hash", 0], ["self", 0], ["symbol", 0], ["def", 0], ["solve", 0], ["inp", 0], ["symbols", 0], ["symbol", 0], ["s", 0], ["i", 0], ["for", 0], ["s", 0], ["i", 0], ["in", 0], ["groupby", 0], ["inp", 0], ["longest", 0], ["end", 0], ["a", 0], ["defaultdict", 0], ["int", 0], ["longest", 0], ["start", 0], ["a", 0], ["defaultdict", 0], ["int", 0], ["longest", 0], ["end", 0], ["b", 0], ["defaultdict", 0], ["int", 0], ["n", 0], ["len", 0], ["symbols", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["len", 0], ["inp", 0], ["for", 0], ["idx", 0], ["symbol", 0], ["in", 0], ["reverse", 0], ["enumerate", 0], ["symbols", 0], ["if", 0], ["symbol", 0], ["symbol", 0], ["a", 0], ["longest", 0], ["end", 0], ["a", 0], ["idx", 0], ["longest", 0], ["end", 0], ["a", 0], ["idx", 0], ["1", 0], ["symbol", 0], ["size", 0], ["longest", 0], ["end", 0], ["b", 0], ["idx", 0], ["longest", 0], ["end", 0], ["b", 0], ["idx", 0], ["1", 0], ["else", 0], ["longest", 0], ["end", 0], ["a", 0], ["idx", 0], ["longest", 0], ["end", 0], ["a", 0], ["idx", 0], ["1", 0], ["longest", 0], ["end", 0], ["b", 0], ["idx", 0], ["longest", 0], ["end", 0], ["b", 0], ["idx", 0], ["1", 0], ["symbol", 0], ["size", 0], ["for", 0], ["idx", 0], ["symbol", 0], ["in", 0], ["enumerate", 0], ["symbols", 0], ["if", 0], ["symbol", 0], ["symbol", 0], ["a", 0], ["longest", 0], ["start", 0], ["a", 0], ["idx", 0], ["longest", 0], ["start", 0], ["a", 0], ["idx", 0], ["1", 0], ["symbol", 0], ["size", 0], ["else", 0], ["longest", 0], ["start", 0], ["a", 0], ["idx", 0], ["longest", 0], ["start", 0], ["a", 0], ["idx", 0], ["1", 0], ["return", 0], ["max", 0], ["longest", 0], ["start", 0], ["a", 0], ["idx", 0], ["longest", 0], ["end", 0], ["b", 0], ["idx", 0], ["longest", 0], ["end", 0], ["b", 0], ["second", 0], ["idx", 0], ["longest", 0], ["end", 0], ["a", 0], ["second", 0], ["idx", 0], ["for", 0], ["idx", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["second", 0], ["idx", 0], ["in", 0], ["range", 0], ["idx", 0], ["1", 0], ["n", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["print", 0], ["solve", 0], ["input", 0], ["starting", 0], ["point", 0], ["str", 0], ["input", 0], ["l", 0], ["len", 0], ["str", 0], ["ok", 0], ["0", 0], ["test1", 0], ["0", 0], ["test2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["str", 0], ["i", 0], ["a", 0], ["ok", 0], ["ok", 0], ["1", 0], ["test2", 0], ["max", 0], ["test1", 0], ["1", 0], ["test2", 0], ["1", 0], ["else", 0], ["test1", 0], ["max", 0], ["test1", 0], ["1", 0], ["ok", 0], ["1", 0], ["print", 0], ["max", 0], ["test1", 0], ["test2", 0], ["s", 0], ["input", 0], ["a", 0], ["b", 0], ["0", 0], ["0", 0], ["a", 0], ["count", 0], ["b", 0], ["count", 0], ["0", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["s", 0], ["if", 0], ["x", 0], ["a", 0], ["a", 0], ["count", 0], ["1", 0], ["else", 0], ["b", 0], ["count", 0], ["1", 0], ["a", 0], ["append", 0], ["a", 0], ["count", 0], ["b", 0], ["append", 0], ["b", 0], ["count", 0], ["best", 0], ["b", 0], ["count", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["a", 0], ["best", 0], ["max", 0], ["best", 0], ["a", 0], ["i", 0], ["a", 0], ["count", 0], ["a", 0], ["j", 0], ["b", 0], ["j", 0], ["b", 0], ["i", 0], ["print", 0], ["best", 0], ["str", 0], ["input", 0], ["l", 0], ["len", 0], ["str", 0], ["ok", 0], ["0", 0], ["test1", 0], ["0", 0], ["test2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["str", 0], ["i", 0], ["a", 0], ["ok", 0], ["ok", 0], ["1", 0], ["test2", 0], ["max", 0], ["test1", 0], ["1", 0], ["test2", 0], ["1", 0], ["else", 0], ["test1", 0], ["max", 0], ["test1", 0], ["1", 0], ["ok", 0], ["1", 0], ["print", 0], ["max", 0], ["test1", 0], ["test2", 0], ["s", 0], ["input", 0], ["b", 0], ["back", 0], ["0", 0], ["itung", 0], ["a", 0], ["sampe", 0], ["ktemu", 0], ["b", 0], ["a", 0], ["now", 0], ["0", 0], ["setelah", 0], ["a", 0], ["nggak", 0], ["jumlah", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["after", 0], ["ab", 0], ["0", 0], ["setelah", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["a", 0], ["back", 0], ["1", 0], ["after", 0], ["ab", 0], ["max", 0], ["after", 0], ["ab", 0], ["now", 0], ["1", 0], ["else", 0], ["now", 0], ["max", 0], ["back", 0], ["now", 0], ["1", 0], ["print", 0], ["max", 0], ["back", 0], ["max", 0], ["now", 0], ["after", 0], ["ab", 0], ["s", 0], ["input", 0], ["size", 0], ["len", 0], ["s", 0], ["a", 0], ["0", 0], ["size", 0], ["1", 0], ["b", 0], ["0", 0], ["size", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["size", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["else", 0], ["0", 0], ["b", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["b", 0], ["else", 0], ["0", 0], ["ans", 0], ["0", 1], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["size", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["val", 0], ["b", 0], ["i", 0], ["b", 0], ["j", 0], ["a", 0], ["j", 0], ["a", 0], ["size", 0], ["a", 0], ["i", 0], ["ans", 0], ["max", 0], ["val", 0], ["ans", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["le", 0], ["len", 0], ["s", 0], ["mx", 0], ["0", 0], ["a", 0], ["s", 0], ["count", 0], ["a", 0], ["b", 0], ["s", 0], ["count", 0], ["b", 0], ["mx", 0], ["max", 0], ["mx", 0], ["a", 0], ["mx", 0], ["max", 0], ["mx", 0], ["b", 0], ["cnta", 0], ["0", 0], ["le", 0], ["1", 0], ["cntb", 0], ["0", 0], ["le", 0], ["1", 0], ["cnta", 0], ["0", 0], ["1", 0], ["if", 0], ["s", 0], ["0", 0], ["a", 0], ["else", 0], ["0", 0], ["cntb", 0], ["0", 0], ["1", 0], ["cnta", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["le", 0], ["cnta", 0], ["i", 0], ["cnta", 0], ["i", 0], ["1", 0], ["cntb", 0], ["i", 0], ["cntb", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["cnta", 0], ["i", 0], ["1", 0], ["else", 0], ["cntb", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["le", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["le", 0], ["mx", 0], ["max", 0], ["mx", 0], ["cnta", 0], ["i", 0], ["b", 0], ["cntb", 0], ["i", 0], ["mx", 0], ["max", 0], ["mx", 0], ["cntb", 0], ["i", 0], ["a", 0], ["cnta", 0], ["i", 0], ["mx", 0], ["max", 0], ["mx", 0], ["cnta", 0], ["i", 0], ["cntb", 0], ["j", 0], ["cntb", 0], ["i", 0], ["a", 0], ["cnta", 0], ["j", 0], ["print", 0], ["mx", 0], ["strs", 0], ["input", 0], ["array", 0], ["char", 0], ["count", 0], ["1", 0], ["char", 0], ["append", 0], ["strs", 0], ["0", 0], ["i", 0], ["1", 0], ["while", 0], ["i", 0], ["len", 0], ["strs", 0], ["if", 0], ["strs", 0], ["i", 0], ["strs", 0], ["i", 0], ["1", 0], ["count", 0], ["1", 0], ["else", 0], ["array", 0], ["append", 0], ["count", 0], ["char", 0], ["append", 0], ["strs", 0], ["i", 0], ["count", 0], ["1", 0], ["i", 0], ["1", 0], ["array", 0], ["append", 0], ["count", 0], ["bback", 0], ["aback", 0], ["bfront", 0], ["afront", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["array", 0], ["if", 0], ["i", 0], ["0", 0], ["if", 0], ["char", 0], ["i", 0], ["b", 0], ["aback", 0], ["append", 0], ["0", 0], ["bback", 0], ["append", 0], ["array", 0], ["0", 0], ["else", 0], ["bback", 0], ["append", 0], ["0", 0], ["aback", 0], ["append", 0], ["array", 0], ["0", 0], ["else", 0], ["if", 0], ["char", 0], ["i", 0], ["b", 0], ["aback", 0], ["append", 0], ["aback", 0], ["i", 0], ["1", 0], ["bback", 0], ["append", 0], ["bback", 0], ["i", 0], ["1", 0], ["array", 0], ["i", 0], ["else", 0], ["aback", 0], ["append", 0], ["aback", 0], ["i", 0], ["1", 0], ["array", 0], ["i", 0], ["bback", 0], ["append", 0], ["bback", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["array", 0], ["afront", 0], ["append", 0], ["aback", 0], ["1", 0], ["aback", 0], ["i", 0], ["bfront", 0], ["append", 0], ["bback", 0], ["1", 0], ["bback", 0], ["i", 0], ["i", 0], ["1", 0], ["if", 0], ["len", 0], ["array", 0], ["1", 0], ["print", 0], ["array", 0], ["0", 0], ["else", 0], ["maxm", 0], ["1", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["array", 0], ["if", 0], ["char", 0], ["i", 0], ["b", 0], ["j", 0], ["i", 0], ["while", 0], ["j", 0], ["len", 0], ["array", 0], ["if", 0], ["char", 0], ["j", 0], ["b", 0], ["if", 0], ["j", 0], ["i", 0], ["ans", 0], ["aback", 0], ["i", 0], ["array", 0], ["i", 0], ["afront", 0], ["i", 0], ["if", 0], ["ans", 0], ["maxm", 0], ["maxm", 0], ["ans", 0], ["else", 0], ["ans", 0], ["aback", 0], ["i", 0], ["array", 0], ["i", 0], ["bback", 0], ["j", 0], ["bback", 0], ["i", 0], ["afront", 0], ["j", 0], ["if", 0], ["ans", 0], ["maxm", 0], ["maxm", 0], ["ans", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["print", 0], ["maxm", 0], ["str", 0], ["input", 0], ["l", 0], ["len", 0], ["str", 0], ["cnt", 0], ["0", 0], ["dp1", 0], ["0", 0], ["dp2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["str", 0], ["i", 0], ["a", 0], ["cnt", 0], ["1", 0], ["dp2", 0], ["max", 0], ["dp1", 0], ["1", 0], ["dp2", 0], ["1", 0], ["else", 0], ["dp1", 0], ["max", 0], ["dp1", 0], ["1", 0], ["cnt", 0], ["1", 0], ["print", 0], ["max", 0], ["dp1", 0], ["dp2", 0], ["a", 0], ["input", 0], ["dp1", 0], ["0", 0], ["dp2", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["cnt", 0], ["1", 0], ["dp2", 0], ["max", 0], ["dp1", 0], ["1", 0], ["dp2", 0], ["1", 0], ["else", 0], ["dp1", 0], ["max", 0], ["dp1", 0], ["1", 0], ["cnt", 0], ["1", 0], ["print", 0], ["max", 0], ["dp1", 0], ["dp2", 0], ["a", 0], ["input", 0], ["dp1", 0], ["0", 0], ["dp2", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["cnt", 0], ["1", 0], ["dp2", 0], ["max", 0], ["dp1", 0], ["1", 0], ["dp2", 0], ["1", 0], ["else", 0], ["dp1", 0], ["max", 0], ["dp1", 0], ["1", 0], ["cnt", 0], ["1", 0], ["print", 0], ["max", 0], ["dp1", 0], ["dp2", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["s", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["t", 0], ["0", 0], ["i", 0], ["t", 0], ["0", 0], ["i", 0], ["1", 0], ["int", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["t", 0], ["1", 0], ["i", 0], ["max", 0], ["t", 0], ["1", 0], ["i", 0], ["1", 0], ["int", 0], ["s", 0], ["i", 0], ["1", 0], ["b", 0], ["t", 0], ["0", 0], ["i", 0], ["t", 0], ["2", 0], ["i", 0], ["max", 0], ["t", 0], ["2", 0], ["i", 0], ["1", 0], ["int", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["t", 0], ["1", 0], ["i", 0], ["t", 0], ["0", 0], ["i", 0], ["print", 0], ["t", 0], ["2", 0], ["n", 0], ["s", 0], ["input", 0], ["a", 0], ["count", 0], ["0", 0], ["dp1", 0], ["0", 0], ["last", 0], ["letter", 0], ["is", 0], ["b", 0], ["dp2", 0], ["0", 0], ["last", 0], ["letter", 0], ["is", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["a", 0], ["count", 0], ["1", 0], ["dp2", 0], ["max", 0], ["dp1", 0], ["dp2", 0], ["1", 0], ["else", 0], ["dp1", 0], ["max", 0], ["a", 0], ["count", 0], ["dp1", 0], ["1", 0], ["print", 0], ["max", 0], ["dp1", 0], ["dp2", 0], ["str", 0], ["input", 0], ["l", 0], ["len", 0], ["str", 0], ["ok", 0], ["0", 0], ["test1", 0], ["0", 0], ["test2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["str", 0], ["i", 0], ["a", 0], ["ok", 0], ["ok", 0], ["1", 0], ["test2", 0], ["max", 0], ["test1", 0], ["1", 0], ["test2", 0], ["1", 0], ["else", 0], ["test1", 0], ["max", 0], ["test1", 0], ["1", 0], ["ok", 0], ["1", 0], ["print", 0], ["max", 0], ["test1", 0], ["test2", 0], ["import", 0], ["math", 0], ["string", 0], ["itertools", 0], ["fractions", 0], ["heapq", 0], ["collections", 0], ["re", 0], ["array", 0], ["bisect", 0], ["sys", 0], ["random", 0], ["time", 0], ["copy", 0], ["functools", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["inf", 0], ["10", 0], ["20", 0], ["eps", 0], ["1", 0], ["0", 0], ["10", 0], ["15", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["lf", 0], ["return", 0], ["float", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["ls", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["f", 0], ["return", 0], ["float", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["s", 0], ["return", 0], ["input", 0], ["def", 0], ["pf", 0], ["s", 0], ["return", 0], ["print", 0], ["s", 0], ["flush", 0], ["true", 0], ["def", 0], ["main", 0], ["s", 0], ["1", 0], ["if", 0], ["c", 0], ["a", 0], ["else", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["l", 0], ["len", 0], ["s", 0], ["a", 0], ["0", 0], ["l", 0], ["b", 0], ["0", 0], ["l", 0], ["if", 0], ["s", 0], ["0", 0], ["1", 0], ["a", 0], ["0", 0], ["1", 0], ["else", 0], ["b", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["l", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["else", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["b", 0], ["1", 0], ["0", 0], ["return", 0], ["l", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["l", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["continue", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["l", 0], ["if", 0], ["s", 0], ["j", 0], ["1", 0], ["continue", 0], ["tr", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["b", 0], ["i", 0], ["1", 0], ["a", 0], ["1", 0], ["a", 0], ["j", 0], ["if", 0], ["r", 0], ["tr", 0], ["r", 0], ["tr", 0], ["return", 0], ["r", 0], ["print", 0], ["main", 0], ["s", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["f", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["3", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["i", 0], ["0", 0], ["f", 0], ["i", 0], ["0", 0], ["f", 0], ["i", 0], ["1", 0], ["0", 0], ["f", 0], ["i", 0], ["1", 0], ["f", 0], ["i", 0], ["1", 0], ["1", 0], ["f", 0], ["i", 0], ["2", 0], ["f", 0], ["i", 0], ["1", 0], ["2", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["f", 0], ["i", 0], ["0", 0], ["1", 0], ["f", 0], ["i", 0], ["2", 0], ["1", 0], ["f", 0], ["i", 0], ["2", 0], ["max", 0], ["f", 0], ["i", 0], ["2", 0], ["f", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["f", 0], ["i", 0], ["1", 0], ["1", 0], ["f", 0], ["i", 0], ["1", 0], ["max", 0], ["f", 0], ["i", 0], ["1", 0], ["f", 0], ["i", 0], ["0", 0], ["1", 0], ["print", 0], ["max", 0], ["f", 0], ["n", 0], ["1", 0], ["0", 0], ["max", 0], ["f", 0], ["n", 0], ["1", 0], ["1", 0], ["f", 0], ["n", 0], ["1", 0], ["2", 0], ["coding", 0], ["utf", 0], ["8", 0], ["created", 0], ["on", 0], ["wed", 0], ["oct", 0], ["25", 0], ["09", 0], ["07", 0], ["32", 0], ["2017", 0], ["author", 0], ["savit", 0], ["s", 0], ["input", 0], ["startpos", 0], ["0", 0], ["max1", 0], ["0", 0], ["temp", 0], ["0", 0], ["beststart", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["temp", 0], ["1", 0], ["if", 0], ["temp", 0], ["max1", 0], ["max1", 0], ["temp", 0], ["startpos", 0], ["i", 0], ["1", 0], ["else", 0], ["temp", 0], ["1", 0], ["beststart", 0], ["append", 0], ["max1", 0], ["startpos", 0], ["beststart", 0], ["append", 0], ["0", 0], ["1", 0], ["max2", 0], ["0", 0], ["temp", 0], ["0", 0], ["endpos", 0], ["len", 0], ["s", 1], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["temp", 0], ["1", 0], ["beststart", 0], ["i", 0], ["1", 0], ["0", 0], ["beststart", 0], ["i", 0], ["0", 0], ["if", 0], ["max2", 0], ["temp", 0], ["max2", 0], ["temp", 0], ["endpos", 0], ["i", 0], ["else", 0], ["temp", 0], ["1", 0], ["ans", 0], ["0", 0], ["if", 0], ["endpos", 0], ["len", 0], ["s", 0], ["startpos", 0], ["beststart", 0], ["endpos", 0], ["1", 0], ["if", 0], ["startpos", 0], ["1", 0], ["startpos", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["startpos", 0], ["if", 0], ["s", 0], ["i", 0], ["b", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["startpos", 0], ["endpos", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["endpos", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["b", 0], ["ans", 0], ["1", 0], ["print", 0], ["startpos", 0], ["endpos", 0], ["print", 0], ["len", 0], ["s", 0], ["ans", 0], ["s", 0], ["input", 0], ["f", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["a", 0], ["f", 0], ["2", 0], ["max", 0], ["f", 0], ["1", 0], ["f", 0], ["0", 0], ["1", 0], ["else", 0], ["f", 0], ["1", 0], ["max", 0], ["f", 0], ["0", 0], ["f", 0], ["1", 0], ["1", 0], ["print", 0], ["max", 0], ["f", 0], ["line", 0], ["input", 0], ["dp", 0], ["3", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["line", 0], ["if", 0], ["c", 0], ["a", 0], ["dp", 0], ["2", 0], ["max", 0], ["dp", 0], ["1", 0], ["dp", 0], ["0", 0], ["1", 0], ["elif", 0], ["c", 0], ["b", 0], ["dp", 0], ["1", 0], ["max", 0], ["dp", 0], ["2", 0], ["1", 0], ["print", 0], ["max", 0], ["dp", 0], ["s", 0], ["input", 0], ["ar", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["a", 0], ["ar", 0], ["2", 0], ["max", 0], ["ar", 0], ["1", 0], ["ar", 0], ["0", 0], ["1", 0], ["else", 0], ["ar", 0], ["1", 0], ["max", 0], ["ar", 0], ["0", 0], ["ar", 0], ["1", 0], ["1", 0], ["print", 0], ["max", 0], ["ar", 0], ["python3", 0], ["utf", 0], ["8", 0], ["string", 0], ["input", 0], ["prefix", 0], ["a", 0], ["nr", 0], ["0", 0], ["prefix", 0], ["b", 0], ["nr", 0], ["0", 0], ["for", 0], ["sym", 0], ["in", 0], ["string", 0], ["curr", 0], ["a", 0], ["nr", 0], ["prefix", 0], ["a", 0], ["nr", 0], ["1", 0], ["curr", 0], ["b", 0], ["nr", 0], ["prefix", 0], ["b", 0], ["nr", 0], ["1", 0], ["if", 0], ["sym", 0], ["a", 0], ["curr", 0], ["a", 0], ["nr", 0], ["1", 0], ["elif", 0], ["sym", 0], ["b", 0], ["curr", 0], ["b", 0], ["nr", 0], ["1", 0], ["prefix", 0], ["a", 0], ["nr", 0], ["append", 0], ["curr", 0], ["a", 0], ["nr", 0], ["prefix", 0], ["b", 0], ["nr", 0], ["append", 0], ["curr", 0], ["b", 0], ["nr", 0], ["ans", 0], ["5000", 0], ["for", 0], ["sep1", 0], ["in", 0], ["range", 0], ["len", 0], ["string", 0], ["1", 0], ["for", 0], ["sep2", 0], ["in", 0], ["range", 0], ["sep1", 0], ["len", 0], ["string", 0], ["1", 0], ["curr", 0], ["ans", 0], ["0", 0], ["curr", 0], ["ans", 0], ["prefix", 0], ["b", 0], ["nr", 0], ["sep1", 0], ["curr", 0], ["ans", 0], ["prefix", 0], ["a", 0], ["nr", 0], ["sep2", 0], ["prefix", 0], ["a", 0], ["nr", 0], ["sep1", 0], ["curr", 0], ["ans", 0], ["prefix", 0], ["b", 0], ["nr", 0], ["1", 0], ["prefix", 0], ["b", 0], ["nr", 0], ["sep2", 0], ["ans", 0], ["min", 0], ["ans", 0], ["curr", 0], ["ans", 0], ["print", 0], ["len", 0], ["string", 0], ["ans", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.000888494002665482, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.000888494002665482, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.011489173663278833, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.011489173663278833, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.000888494002665482, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.000888494002665482, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.011489173663278833, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.011489173663278833, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given a string $s$ consisting of $n$ lowercase Latin letters. Polycarp wants to remove exactly $k$ characters ($k \\le n$) from the string $s$. Polycarp uses the following algorithm $k$ times:\n\n  if there is at least one letter 'a', remove the leftmost occurrence and stop the algorithm, otherwise go to next item;  if there is at least one letter 'b', remove the leftmost occurrence and stop the algorithm, otherwise go to next item;  ...  remove the leftmost occurrence of the letter 'z' and stop the algorithm. \n\nThis algorithm removes a single letter from the string. Polycarp performs this algorithm exactly $k$ times, thus removing exactly $k$ characters.\n\nHelp Polycarp find the resulting string.\n\n\n-----Input-----\n\nThe first line of input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 4 \\cdot 10^5$) — the length of the string and the number of letters Polycarp will remove.\n\nThe second line contains the string $s$ consisting of $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nPrint the string that will be obtained from $s$ after Polycarp removes exactly $k$ letters using the above algorithm $k$ times.\n\nIf the resulting string is empty, print nothing. It is allowed to print nothing or an empty line (line break).\n\n\n-----Examples-----\nInput\n15 3\ncccaabababaccbc\n\nOutput\ncccbbabaccbc\n\nInput\n15 9\ncccaabababaccbc\n\nOutput\ncccccc\n\nInput\n1 1\nu\n\nOutput\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from collections import Counter, defaultdict\nfrom string import ascii_lowercase as al\n\nn, k = list(map(int, input().split()))\ns = list(input())\n\nC = defaultdict(int, Counter(s))\nC_ = defaultdict(int)\n\nk_ = k\nfor char in al:\n\ttemp = min(C[char], k_)\n\n\tC_[char] += temp\n\tk_ -= temp\n\nfor i, el in enumerate(s):\n\tif C_[el] > 0:\n\t\ts[i] = ''\n\t\tC_[el] -= 1\n\nprint(''.join(s))\n", "n,k = map(int,input().split())\ns = input()\ndic = dict()\nfor item in s:\n\tif item not in dic:\n\t\tdic[item]=1\n\telse: dic[item]+=1\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nen = ''\n\nfor item in alphabet:\n\tif item not in dic: continue\n\tif dic[item]<=k: k-=dic[item]\n\telse: \n\t\ten = item\n\t\tbreak\nans = \"\"\n\nfor item in s:\n\tif item>en:\n\t\tans+=item\n\telif item==en and k==0: \n\t\tans+=item\n\telif item==en and k>0: k-=1\n\t\nif en==\"\": print()\nelse: print(ans)\n", "n,k=map(int,input().split())\na={'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\nb={'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\ns=input()\nfor i in s:\n\ta[i]+=1\nfor i in a:\n\tif a[i]<k:\n\t\tb[i]=a[i]\n\telse:\n\t\tb[i]=k\n\t\tbreak\n\tk-=a[i]\nfor i in s:\n\tif b[i]:\n\t\tb[i]-=1\n\telse:\n\t\tprint(i,end='')\n", "def main():\n\t[n, k] = map(int, input().split())\n\ts = input()\n\n\tchar_idxs = []\n\tfor idx, c in enumerate(s):\n\t\tchar_idxs.append((c, idx))\n\n\tchar_idxs.sort()\n\n\tchar_idxs = char_idxs[k:]\n\n\tchar_idxs.sort(key=lambda cidx: cidx[1]) \n\n\tlst = [c for c, idx in char_idxs]\n\n\tprint(\"\".join(lst))\n\nmain()\n", "n, k = [int(i) for i in input().split()]\ns = [0 for i in range(26)]\nt = ''\nfor i in input():\n\tt += i\n\ts[ord(i) - 97] += 1\nkar = 0\nkol = 0\nfor i in range(len(s)):\n\tif k > s[i]:\n\t\tkar += 1\n\t\tk -= s[i]\n\telse:\n\t\tkol = k\n\t\tbreak\nans = ''\nfor i in range(n):\n\tif ord(t[i]) - 97 == kar and kol > 0:\n\t\tkol -= 1\n\telif ord(t[i]) - 97 == kar:\n\t\tans += t[i]\n\tif ord(t[i]) - 97 > kar:\n\t\tans += t[i]\nprint(ans)\n", "import string\nfrom collections import Counter\n\nn, k = [int(i) for i in input().split()]\ns = input()\n\ncounter = Counter(s)\n\nfor char in string.ascii_lowercase:\n\tdelta = min(k, counter[char])\n\tk -= delta\n\tcounter[char] -= delta\n\ns2 = ''\nfor char in s[::-1]:\n\tif counter[char] > 0:\n\t\ts2 += char\n\t\tcounter[char] -= 1\n\nprint(s2[::-1])\n", "import re\nimport math\nimport decimal\nimport bisect\n\ndef read():\n\treturn input().strip()\n\ndef iread():\n\treturn int(input().strip())\n\ndef viread():\n\treturn list(map(int, input().strip().split()))\n\n# code goes here\nfrom collections import Counter\nn, k = viread()\ns = read()\nletters = Counter(s)\n# print(letters)\nfor l in sorted(letters.keys()):\n\t# print(letters[l], l + \"'s\")\n\tif letters[l] < k:\n\t\ts = re.sub(l, \"\", s)\n\t\tk -= letters[l]\n\t\t# print(s)\n\telse:\n\t\tnews = \"\"\n\t\thits = 0\n\t\tfor c in s:\n\t\t\t# print(\"looking at\", c)\n\t\t\t# print(\"hits is\", hits)\n\t\t\tif c == l:\n\t\t\t\thits += 1\n\t\t\t\t# print(\"hit!\")\n\t\t\tif c != l or hits > k:\n\t\t\t\tnews += c\n\t\t\t\t# print(news)\n\t\ts = news\n\t\tbreak\n\nprint(s)\n", "from collections import Counter as cc\nn, k = list(map(int, input().split()))\ns = input()\nc = cc(s)\nalpha = 'abcdefghijklmnopqrstuvwxyz'\nfor a in alpha:\n\tif k > c[a]:\n\t\tk -= c[a]\n\t\tc[a] = 0\n\telse:\n\t\tc[a] -= k\n\t\tk = 0\n\tif k == 0:\n\t\tbreak\nlst = []\nfor a in s[::-1]:\n\tif c[a] > 0:\n\t\tc[a] -= 1\n\t\tlst.append(a)\nprint(\"\".join(lst[::-1]))\n", "n, k = map(int, input().split())\nstring = list(input())\ntest = []\n\nif n != k:\n\ttest = [(i, c) for i, c in enumerate(string)]\n\ttest.sort(key=lambda a: a[1])\n\t\n\ttest = test[k:]\n\ttest.sort(key=lambda a: a[0])\n\t\n\tprint(''.join([v for _, v in test]))\n", "t = input().strip()\nt = [int(e) for e in t.split(\" \")]\nn = t[0]\nk = t[1]\n\ns = input()\nassert len(s) == n\n\nsum_l = [0 for i in range(26)]\nfor c in s:\n\tsum_l[ord(c) - ord('a')] += 1\n\nneed_l = [0 for i in range(26)]\nfor i in range(26):\n\tif k <= sum_l[i]:\n\t\tneed_l[i] = k\n\t\tbreak\n\telse:\n\t\tneed_l[i] = sum_l[i]\n\t\tk -= need_l[i]\n\nresult = []\nfor c in s:\n\tindex = ord(c) - ord('a')\n\tif need_l[index] > 0:\n\t\tneed_l[index] -= 1\n\telse:\n\t\tresult.append(c)\n\nprint(\"\".join(result))\n\n", "(n, k) = map(int, input().split())\n\nif k != n:\n\ts = input()\n\n\td = {}\n\tfor x in s:\n\t\tif not x in d:\n\t\t\td[x] = 0\n\t\td[x] += 1\n\n\tlst = sorted(d.keys())\n\n\tx = 0\n\twhile x < len(lst):\n\t\tif d[lst[x]] > k:\n\t\t\ti = k\n\t\t\tb = lst[x]\n\t\t\tbreak\n\t\telse:\n\t\t\tk -= d[lst[x]]\n\t\t\tx += 1\n\n\tacc = 0\n\tfor x in s:\n\t\tif x == b:\n\t\t\tacc += 1\n\t\t\tif acc > k:\n\t\t\t\tprint(x, end='')\n\t\telif x > b:\n\t\t\tprint(x, end='')\n\t\n", "#-*-coding:utf-8 -*-\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\ns = input()\n\nmp = defaultdict(int)\n\nfor i in s:\n\tmp[i] += 1\n\ncnt = defaultdict(int)\n\nmk = 'abcdefghijklmnopqrstuvwxyz'\n\nfor i in mk:\n\tif mp[i] == 0:\n\t\tcontinue\n\n\tcnt[i] += min(m, mp[i])\n\tm -= min(m, mp[i])\n\n\tif m == 0:\n\t\tbreak\n\nfor i in s:\n\tif cnt[i] > 0:\n\t\tcnt[i] -= 1\n\telse:\n\t\tprint(i, end='')\n\n\n\n\n\n\n\n", "n,k = list(map(int, input().split() ) )\ns=input()\nalph=[chr(ord('a')+i) for i in range(26)]\nfor a in alph:\n\tif k==0:\n\t\tbreak\n\tif s.count(a)<=k:\n\t\tk-=s.count(a)\n\t\ts=s.replace(a,'')\n\telse:\n\t\ts=s.replace(a,'', k)\n\t\tk=0\nprint(s)\n", "c = input().split(\" \")\na = int(c[0])\nb = int(c[1])\ninp = input(str())\ncount = [0 for i in range(26)]\nind = []\n\nfor i in range(a):\n\tcount[ord(inp[i])-ord('a')] += 1\n\nrunning = 0\nhit = -1\nfor i in range(26):\n\trunning += count[i]\n\tif running >= b:\n\t\thit = i\n\t\tbreak\n\n\nrem = running - b\ncounter = 0\n\nfor i in range(a-1, -1, -1):\n\tif ord(inp[i])-ord('a') > hit:\n\t\tind.append(i)\n\telif ord(inp[i])-ord('a') == hit and counter < rem:\n\t\tcounter += 1\n\t\tind.append(i)\n\telse:\n\t\tpass\n\nind = reversed(ind)\n\nans = \"\"\n\nfor i in ind:\n\tans += inp[i]\n\nprint(ans)\n", "n,k=list(map(int,input().split()))\na=list(input().strip())\ncount=[0]*26\naaa=ord('a')\nfor i in a:\n\tcount[ord(i)-aaa]+=1\ndeletables=-1\nfor i in range(26):\n\tif(count[i]>=k):\n\t\tcount=k\n\t\tele=i\n\t\tbreak\n\tdeletables=i\n\tk-=count[i]\nans=\"\"\nfor i in a:\n\tif(ord(i)-aaa<=deletables):\n\t\tcontinue\n\tif(chr(ele+aaa)==i):\n\t\tif(count>0):\n\t\t\tcount-=1\n\t\telse:\n\t\t\tans+=i\n\telse:\n\t\tans+=i\nprint(ans)\n", "n,k=list(map(int,input().split()))\ns=list(input())\ncnt={}\nd={}\nfor i,c in enumerate(s):\n\tif c not in cnt:\n\t\tcnt[c]=1\n\t\td[c]=[i]\n\telse:\n\t\tcnt[c]+=1\n\t\td[c].append(i)\nch=''\n\nfor c in sorted(cnt):\n\tif k-cnt[c]<=0:\n\t\tch=c\n\t\tbreak\n\tfor i in d[c]:\n\t\ts[i]=''\n\tk-=cnt[c]\nfor i in d[ch][:k]:\n\ts[i]=''\nprint(''.join(s))\n", "n,k=list(map(int,input().split()))\ns=input()\ni=ord('a')\nwhile 1:\n\tkm=s.count(chr(i))\n\tif k-km>0:\n\t\tk-=km\n\t\ti+=1\n\telse: break\nss=''\nfor j in range(n):\n\tif ord(s[j])>i: ss+=s[j]\n\telif ord(s[j])==i:\n\t\tif k>0: k-=1\n\t\telse: ss+=s[j]\nprint(ss)\n\t\n\n'''\n////////////////      //////        ///////      //             ///////     //  //   //\n////          //    ///   ///     ///    ///     //            ///  ///     ////     //\n////    ////       ///     ///   ///      ///    //           /////////     ////     ///////\n////     /////    ///       /// ///        ///   //          ///    ///     ////     //   //\n//////////////     ///////////   ///////////     //////     ///     ///     //  //   //   //\n'''\n\n", "tn,tk=input().split()\nn=int(tn)\nk=int(tk)\na=input()\nvis=[]\nt=[]\nfor i in range(n):\n\tt.append((a[i],i))\nt.sort()\nfor i in range(n):\n\tvis.append(0)\nfor i in range(k):\n\tvis[t[i][1]]=1\nfor i in range(n):\n\tif vis[i]:continue\n\tprint(a[i],end=\"\")\n", "import math;\nimport random;\nimport time;\nimport heapq;\ndef getIntList():\n\treturn list(map(int, input().split()));\ndef getTransIntList(n):\n\tfirst=getIntList();\n\tm=len(first);\n\tresult=[[0]*n for _ in range(m)];\n\tfor i in range(m):\n\t\tresult[i][0]=first[i];\n\tfor j in range(1, n):\n\t\tcurr=getIntList();\n\t\tfor i in range(m):\n\t\t\tresult[i][j]=curr[i];\n\treturn result;\nn, k =getIntList();\ns=input();\nd=dict();\nfor l in s:\n\td[l]=d.get(l,0)+1;\nordA=ord('a');\nordZ=ord('z');\ntrLeter='';\ncount=0;\nfor i in range(ordA, ordZ+1):\n\tl=chr(i);\n\tx=min(d.get(l, 0), k);\n\tif x==k:\n\t\ttrLeter=l;\n\t\tcount=x;\n\t\tbreak;\n\tk-=x;\nordTr=ord(trLeter);\nresult='';\nfor l in s:\n\tordL=ord(l);\n\tif ordL>=ordTr:\n\t\tif ordL==ordTr:\n\t\t\tcount-=1;\n\t\tif ordL==ordTr and count>=0:\n\t\t\tcontinue;\n\t\tresult+=l;\nprint(result);\n", "n,k=map(int,input().split())\ns = input().rstrip()\nfor i in range(ord('a'),ord('z')+1):\n\tif k <= 0:\n\t\tbreak\n\tif s.count(chr(i)) < k:\n\t\tk -= s.count(chr(i))\n\t\ts = s.replace(chr(i),'')\n\telse:\n\t\ts = s.replace(chr(i),'',k)\n\t\tk = 0\nprint(s)\n", "A = [int(i) for i in input().split()]\nn = A[0]\nk = A[1]\nS = input()\nA = {}\nfor i in range(26):\n\tA[chr(97+i)] = []\nfor i in range(len(S)):\n\tA[S[i]].append(i)\nfor i in range(26):\n\tA[chr(97+i)] = A[chr(97+i)][::-1]\n\nrem = set()\nfor i in range(26):\n\twhile len(A[chr(97+i)])>0 and k>0:\n\t\trem.add(A[chr(97+i)].pop())\n\t\tk = k-1\n\t\tif k == 0:\n\t\t\tbreak\n\n\n\nR = \"\"\nfor i in range(len(S)):\n\tif i not in rem:\n\t\tR += S[i]\nprint(R)\n", "n,k=list(map(int,input().strip().split()))\nr=input()\nr1=\"abcdefghijklmnopqrstuvwxyz\"\nl=[[] for i in range(26)]\nd={}\nfor u1 in range(26):\n\td[r1[u1]]=u1\nfor t in range(n):\n\tl[d[r[t]]].append(t)\nl1=[]\nfor x in l:\n\tfor y in x:\n\t\tl1.append(y)\ns=\"\"\nl2=[]\nfor o in range(k,n):\n\tl2.append(l1[o])\nl2.sort()\nfor i in l2:\n\ts=s+r[i]\nprint (s)\n", "n,k = map(int,input().split())\ns = input()\nalth = \"abcdefghijklmnopqrstuvwxyz\"\nchars = [0]*26\nchars2 = [0]*26\nfor i in range(n):\n\tchars[alth.find(s[i])] += 1\nfor i in range(26):\n\tif k <= 0:\n\t\tbreak\n\tchars2[i] = min(chars[i],k)\n\tk -= chars[i]\n\t\nfor i in range(n):\n\tif chars2[alth.find(s[i])] == 0:\n\t\tprint(s[i],end=\"\")\n\telse:\n\t\tchars2[alth.find(s[i])] -= 1\n", "n,k=list(map(int,input().split()))\na=str(input())\nif n!=k:\n\tb=[]\n\n\tfor i in range(n):\n\t\tb.append([ord(a[i]),i])\n\n\tb.sort()\n\n\tb=b[k:].copy()\n\n\t#print(b)\n\ta=['']*n\n\tfor i in b:\n\t\ta[i[1]]=chr(i[0])\n\n\n\n\n\tfini=''.join(a)\n\tprint(fini)\nelse:\n\tprint()\n", "n, k = [int(i) for i in input().split()]\ns = list(input())\nl = len(s)\nd = {}\nf = [True] * l\nfor i in range(l):\n\tif not s[i] in d:\n\t\td[s[i]] = []\n\td[s[i]].append(i)\n\nrule = []\nfor i in range(26):\n\twk1 = chr(i + 97)\n\tif wk1 in d:\n\t\trule.append(wk1)\n\t\t\ncurrent = 0\nposition = 0\nfor i in range(k):\n\tf[d[rule[current]][position]] = False\n\tposition += 1\n\tif position == len(d[rule[current]]):\n\t\tposition = 0\n\t\tcurrent += 1\n\tif current == len(rule):\n\t\tbreak\n\nfor i in range(l):\n\tif f[i]:\n\t\tprint(s[i], end = \"\")\nprint()\n"], "id": "id8118"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8118", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["string", 0], ["s", 0], ["consisting", 0], ["of", 0], ["n", 0], ["lowercase", 0], ["latin", 0], ["letters", 0], ["polycarp", 0], ["wants", 0], ["to", 0], ["remove", 0], ["exactly", 0], ["k", 0], ["characters", 0], ["k", 0], ["le", 0], ["n", 0], ["from", 0], ["the", 0], ["string", 0], ["s", 0], ["polycarp", 0], ["uses", 0], ["the", 0], ["following", 0], ["algorithm", 0], ["k", 0], ["times", 0], ["if", 0], ["there", 0], ["is", 0], ["at", 0], ["least", 0], ["one", 0], ["letter", 0], ["a", 0], ["remove", 0], ["the", 0], ["leftmost", 0], ["occurrence", 0], ["and", 0], ["stop", 0], ["the", 0], ["algorithm", 0], ["otherwise", 0], ["go", 0], ["to", 0], ["next", 0], ["item", 0], ["if", 0], ["there", 0], ["is", 0], ["at", 0], ["least", 0], ["one", 0], ["letter", 0], ["b", 0], ["remove", 0], ["the", 0], ["leftmost", 0], ["occurrence", 0], ["and", 0], ["stop", 0], ["the", 0], ["algorithm", 0], ["otherwise", 0], ["go", 0], ["to", 0], ["next", 0], ["item", 0], ["remove", 1], ["the", 1], ["leftmost", 1], ["occurrence", 1], ["of", 1], ["the", 1], ["letter", 1], ["z", 1], ["and", 1], ["stop", 1], ["the", 1], ["algorithm", 1], ["this", 1], ["algorithm", 1], ["removes", 1], ["a", 1], ["single", 1], ["letter", 1], ["from", 1], ["the", 1], ["string", 1], ["polycarp", 1], ["performs", 1], ["this", 1], ["algorithm", 1], ["exactly", 1], ["k", 1], ["times", 0], ["thus", 0], ["removing", 0], ["exactly", 0], ["k", 0], ["characters", 0], ["help", 0], ["polycarp", 0], ["find", 0], ["the", 0], ["resulting", 0], ["string", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["two", 1], ["integers", 1], ["n", 1], ["and", 1], ["k", 1], ["1", 1], ["le", 1], ["k", 1], ["le", 1], ["n", 1], ["le", 1], ["4", 1], ["cdot", 1], ["10", 1], ["5", 1], ["—", 1], ["the", 1], ["length", 1], ["of", 1], ["the", 1], ["string", 1], ["and", 1], ["the", 1], ["number", 1], ["of", 1], ["letters", 1], ["polycarp", 1], ["will", 1], ["remove", 1], ["the", 2], ["second", 0], ["line", 0], ["contains", 0], ["the", 0], ["string", 0], ["s", 0], ["consisting", 0], ["of", 0], ["n", 0], ["lowercase", 0], ["latin", 0], ["letters", 0], ["output", 0], ["print", 1], ["the", 1], ["string", 1], ["that", 1], ["will", 1], ["be", 1], ["obtained", 1], ["from", 1], ["s", 1], ["after", 1], ["polycarp", 1], ["removes", 1], ["exactly", 1], ["k", 1], ["letters", 1], ["using", 1], ["the", 1], ["above", 1], ["algorithm", 1], ["k", 1], ["times", 1], ["if", 1], ["the", 1], ["resulting", 1], ["string", 1], ["is", 1], ["empty", 1], ["print", 1], ["nothing", 1], ["it", 0], ["is", 0], ["allowed", 0], ["to", 0], ["print", 0], ["nothing", 0], ["or", 0], ["an", 0], ["empty", 0], ["line", 0], ["line", 0], ["break", 0], ["examples", 0], ["input", 0], ["15", 0], ["3", 0], ["cccaabababaccbc", 0], ["output", 0], ["cccbbabaccbc", 0], ["input", 0], ["15", 0], ["9", 0], ["cccaabababaccbc", 0], ["output", 0], ["cccccc", 0], ["input", 0], ["1", 0], ["1", 0], ["u", 0], ["output", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4144144144144144, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.41216216216216217, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5470085470085471, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5470085470085471, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4144144144144144, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.41216216216216217, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5470085470085471, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5470085470085471, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["defaultdict", 0], ["from", 0], ["string", 0], ["import", 0], ["ascii", 0], ["lowercase", 0], ["as", 0], ["al", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["input", 0], ["c", 0], ["defaultdict", 0], ["int", 0], ["counter", 0], ["s", 0], ["c", 0], ["defaultdict", 0], ["int", 0], ["k", 0], ["k", 0], ["for", 0], ["char", 0], ["in", 0], ["al", 0], ["temp", 0], ["min", 0], ["c", 0], ["char", 0], ["k", 0], ["c", 0], ["char", 0], ["temp", 0], ["k", 0], ["temp", 0], ["for", 0], ["i", 0], ["el", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["c", 0], ["el", 0], ["0", 0], ["s", 0], ["i", 0], ["c", 0], ["el", 0], ["1", 0], ["print", 0], ["join", 0], ["s", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["dic", 0], ["dict", 0], ["for", 0], ["item", 0], ["in", 0], ["s", 0], ["if", 0], ["item", 0], ["not", 0], ["in", 0], ["dic", 0], ["dic", 0], ["item", 0], ["1", 0], ["else", 0], ["dic", 0], ["item", 0], ["1", 0], ["alphabet", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["en", 0], ["for", 0], ["item", 0], ["in", 0], ["alphabet", 0], ["if", 0], ["item", 0], ["not", 0], ["in", 0], ["dic", 0], ["continue", 0], ["if", 0], ["dic", 0], ["item", 0], ["k", 0], ["k", 0], ["dic", 0], ["item", 0], ["else", 0], ["en", 0], ["item", 0], ["break", 0], ["ans", 0], ["for", 0], ["item", 0], ["in", 0], ["s", 0], ["if", 0], ["item", 0], ["en", 0], ["ans", 0], ["item", 0], ["elif", 0], ["item", 0], ["en", 0], ["and", 0], ["k", 0], ["0", 0], ["ans", 0], ["item", 0], ["elif", 0], ["item", 0], ["en", 0], ["and", 0], ["k", 0], ["0", 0], ["k", 0], ["1", 0], ["if", 0], ["en", 0], ["print", 0], ["else", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["a", 165], ["0", 137], ["b", 90], ["0", 87], ["c", 68], ["0", 65], ["d", 56], ["0", 56], ["e", 53], ["0", 53], ["f", 48], ["0", 48], ["g", 49], ["0", 49], ["h", 48], ["0", 48], ["i", 50], ["0", 56], ["j", 58], ["0", 56], ["k", 57], ["0", 57], ["l", 57], ["0", 58], ["m", 62], ["0", 62], ["n", 56], ["0", 56], ["o", 56], ["0", 57], ["p", 57], ["0", 57], ["q", 53], ["0", 54], ["r", 53], ["0", 52], ["s", 52], ["0", 52], ["t", 52], ["0", 50], ["u", 0], ["0", 0], ["v", 0], ["0", 0], ["w", 0], ["0", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["z", 0], ["0", 0], ["b", 0], ["a", 165], ["0", 137], ["b", 90], ["0", 87], ["c", 68], ["0", 65], ["d", 56], ["0", 56], ["e", 53], ["0", 53], ["f", 48], ["0", 48], ["g", 49], ["0", 49], ["h", 48], ["0", 48], ["i", 50], ["0", 56], ["j", 58], ["0", 56], ["k", 57], ["0", 57], ["l", 57], ["0", 58], ["m", 62], ["0", 62], ["n", 56], ["0", 56], ["o", 56], ["0", 57], ["p", 57], ["0", 57], ["q", 53], ["0", 54], ["r", 53], ["0", 52], ["s", 52], ["0", 52], ["t", 52], ["0", 50], ["u", 0], ["0", 0], ["v", 0], ["0", 0], ["w", 0], ["0", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["z", 0], ["0", 0], ["s", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["a", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["k", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["else", 0], ["b", 0], ["i", 0], ["k", 0], ["break", 0], ["k", 0], ["a", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["else", 0], ["print", 0], ["i", 0], ["end", 0], ["def", 0], ["main", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["char", 0], ["idxs", 0], ["for", 0], ["idx", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["char", 0], ["idxs", 0], ["append", 0], ["c", 0], ["idx", 0], ["char", 0], ["idxs", 0], ["sort", 0], ["char", 0], ["idxs", 0], ["char", 0], ["idxs", 0], ["k", 0], ["char", 0], ["idxs", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["cidx", 0], ["cidx", 0], ["1", 0], ["lst", 0], ["c", 0], ["for", 0], ["c", 0], ["idx", 0], ["in", 0], ["char", 0], ["idxs", 0], ["print", 0], ["join", 0], ["lst", 0], ["main", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["t", 0], ["i", 0], ["s", 0], ["ord", 0], ["i", 0], ["97", 0], ["1", 0], ["kar", 0], ["0", 0], ["kol", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["k", 0], ["s", 0], ["i", 0], ["kar", 0], ["1", 0], ["k", 0], ["s", 0], ["i", 0], ["else", 0], ["kol", 0], ["k", 0], ["break", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ord", 0], ["t", 0], ["i", 0], ["97", 0], ["kar", 0], ["and", 0], ["kol", 0], ["0", 0], ["kol", 0], ["1", 0], ["elif", 0], ["ord", 0], ["t", 0], ["i", 0], ["97", 0], ["kar", 0], ["ans", 0], ["t", 0], ["i", 0], ["if", 0], ["ord", 0], ["t", 0], ["i", 0], ["97", 0], ["kar", 0], ["ans", 0], ["t", 0], ["i", 0], ["print", 0], ["ans", 0], ["import", 0], ["string", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["counter", 0], ["counter", 0], ["s", 0], ["for", 0], ["char", 0], ["in", 0], ["string", 0], ["ascii", 0], ["lowercase", 0], ["delta", 0], ["min", 0], ["k", 0], ["counter", 0], ["char", 0], ["k", 0], ["delta", 0], ["counter", 0], ["char", 0], ["delta", 0], ["s2", 0], ["for", 0], ["char", 0], ["in", 0], ["s", 0], ["1", 0], ["if", 0], ["counter", 0], ["char", 0], ["0", 0], ["s2", 0], ["char", 0], ["counter", 0], ["char", 0], ["1", 0], ["print", 0], ["s2", 0], ["1", 0], ["import", 0], ["re", 0], ["import", 0], ["math", 0], ["import", 0], ["decimal", 0], ["import", 0], ["bisect", 0], ["def", 0], ["read", 0], ["return", 0], ["input", 0], ["strip", 0], ["def", 0], ["iread", 0], ["return", 0], ["int", 0], ["input", 0], ["strip", 0], ["def", 0], ["viread", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["code", 0], ["goes", 0], ["here", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["n", 0], ["k", 0], ["viread", 0], ["s", 0], ["read", 0], ["letters", 0], ["counter", 0], ["s", 0], ["print", 0], ["letters", 0], ["for", 0], ["l", 0], ["in", 0], ["sorted", 0], ["letters", 0], ["keys", 0], ["print", 0], ["letters", 0], ["l", 0], ["l", 0], ["s", 0], ["if", 0], ["letters", 0], ["l", 0], ["k", 0], ["s", 0], ["re", 0], ["sub", 0], ["l", 0], ["s", 0], ["k", 0], ["letters", 0], ["l", 0], ["print", 0], ["s", 0], ["else", 0], ["news", 0], ["hits", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["print", 0], ["looking", 0], ["at", 0], ["c", 0], ["print", 0], ["hits", 0], ["is", 0], ["hits", 0], ["if", 0], ["c", 0], ["l", 0], ["hits", 0], ["1", 0], ["print", 0], ["hit", 0], ["if", 0], ["c", 0], ["l", 0], ["or", 0], ["hits", 0], ["k", 0], ["news", 0], ["c", 0], ["print", 0], ["news", 0], ["s", 0], ["news", 0], ["break", 0], ["print", 0], ["s", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["as", 0], ["cc", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["c", 0], ["cc", 0], ["s", 0], ["alpha", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["for", 0], ["a", 0], ["in", 0], ["alpha", 0], ["if", 0], ["k", 0], ["c", 0], ["a", 0], ["k", 0], ["c", 0], ["a", 0], ["c", 0], ["a", 0], ["0", 0], ["else", 0], ["c", 0], ["a", 0], ["k", 0], ["k", 0], ["0", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["lst", 0], ["for", 0], ["a", 0], ["in", 0], ["s", 0], ["1", 0], ["if", 0], ["c", 0], ["a", 0], ["0", 0], ["c", 0], ["a", 0], ["1", 0], ["lst", 0], ["append", 0], ["a", 0], ["print", 0], ["join", 0], ["lst", 0], ["1", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["string", 0], ["list", 0], ["input", 0], ["test", 0], ["if", 0], ["n", 0], ["k", 0], ["test", 0], ["i", 0], ["c", 0], ["for", 0], ["i", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["string", 0], ["test", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["a", 0], ["a", 0], ["1", 0], ["test", 0], ["test", 0], ["k", 0], ["test", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["a", 0], ["a", 0], ["0", 0], ["print", 0], ["join", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["test", 0], ["t", 0], ["input", 0], ["strip", 0], ["t", 0], ["int", 0], ["e", 0], ["for", 0], ["e", 0], ["in", 0], ["t", 0], ["split", 0], ["n", 0], ["t", 0], ["0", 0], ["k", 0], ["t", 0], ["1", 0], ["s", 0], ["input", 0], ["assert", 0], ["len", 0], ["s", 0], ["n", 0], ["sum", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["sum", 0], ["l", 0], ["ord", 0], ["c", 0], ["ord", 0], ["a", 0], ["1", 0], ["need", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["if", 0], ["k", 0], ["sum", 0], ["l", 0], ["i", 0], ["need", 0], ["l", 0], ["i", 0], ["k", 0], ["break", 0], ["else", 0], ["need", 0], ["l", 0], ["i", 0], ["sum", 0], ["l", 0], ["i", 0], ["k", 0], ["need", 0], ["l", 0], ["i", 0], ["result", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["index", 0], ["ord", 0], ["c", 0], ["ord", 0], ["a", 0], ["if", 0], ["need", 0], ["l", 0], ["index", 0], ["0", 0], ["need", 0], ["l", 0], ["index", 0], ["1", 0], ["else", 0], ["result", 0], ["append", 0], ["c", 0], ["print", 0], ["join", 0], ["result", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["n", 0], ["s", 0], ["input", 0], ["d", 0], ["for", 0], ["x", 0], ["in", 0], ["s", 0], ["if", 0], ["not", 0], ["x", 0], ["in", 0], ["d", 0], ["d", 0], ["x", 0], ["0", 0], ["d", 0], ["x", 0], ["1", 0], ["lst", 0], ["sorted", 0], ["d", 0], ["keys", 0], ["x", 0], ["0", 0], ["while", 0], ["x", 0], ["len", 0], ["lst", 0], ["if", 0], ["d", 0], ["lst", 0], ["x", 0], ["k", 0], ["i", 0], ["k", 0], ["b", 0], ["lst", 0], ["x", 0], ["break", 0], ["else", 0], ["k", 0], ["d", 0], ["lst", 0], ["x", 0], ["x", 0], ["1", 0], ["acc", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["s", 0], ["if", 0], ["x", 0], ["b", 0], ["acc", 0], ["1", 0], ["if", 0], ["acc", 0], ["k", 0], ["print", 0], ["x", 0], ["end", 0], ["elif", 0], ["x", 0], ["b", 0], ["print", 0], ["x", 0], ["end", 0], ["coding", 0], ["utf", 0], ["8", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["mp", 0], ["defaultdict", 0], ["int", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["mp", 0], ["i", 0], ["1", 0], ["cnt", 0], ["defaultdict", 0], ["int", 0], ["mk", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["for", 0], ["i", 0], ["in", 0], ["mk", 0], ["if", 0], ["mp", 0], ["i", 0], ["0", 0], ["continue", 0], ["cnt", 0], ["i", 0], ["min", 0], ["m", 0], ["mp", 0], ["i", 0], ["m", 0], ["min", 0], ["m", 0], ["mp", 0], ["i", 0], ["if", 0], ["m", 0], ["0", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["cnt", 0], ["i", 0], ["0", 0], ["cnt", 0], ["i", 0], ["1", 0], ["else", 0], ["print", 0], ["i", 0], ["end", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["alph", 0], ["chr", 0], ["ord", 0], ["a", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["for", 0], ["a", 0], ["in", 0], ["alph", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["if", 0], ["s", 0], ["count", 0], ["a", 0], ["k", 0], ["k", 0], ["s", 0], ["count", 0], ["a", 0], ["s", 0], ["s", 0], ["replace", 0], ["a", 0], ["else", 0], ["s", 0], ["s", 0], ["replace", 0], ["a", 0], ["k", 0], ["k", 0], ["0", 0], ["print", 0], ["s", 0], ["c", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["c", 0], ["0", 0], ["b", 0], ["int", 0], ["c", 0], ["1", 0], ["inp", 0], ["input", 0], ["str", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["ind", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["count", 0], ["ord", 0], ["inp", 0], ["i", 0], ["ord", 0], ["a", 0], ["1", 0], ["running", 0], ["0", 0], ["hit", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["running", 0], ["count", 0], ["i", 0], ["if", 0], ["running", 0], ["b", 0], ["hit", 0], ["i", 0], ["break", 0], ["rem", 0], ["running", 0], ["b", 0], ["counter", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["ord", 0], ["inp", 0], ["i", 0], ["ord", 0], ["a", 0], ["hit", 0], ["ind", 0], ["append", 0], ["i", 0], ["elif", 0], ["ord", 0], ["inp", 0], ["i", 0], ["ord", 0], ["a", 0], ["hit", 0], ["and", 0], ["counter", 0], ["rem", 0], ["counter", 0], ["1", 0], ["ind", 0], ["append", 0], ["i", 0], ["else", 0], ["pass", 0], ["ind", 0], ["reversed", 0], ["ind", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["ind", 0], ["ans", 0], ["inp", 0], ["i", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["input", 0], ["strip", 0], ["count", 0], ["0", 0], ["26", 0], ["aaa", 0], ["ord", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["count", 0], ["ord", 0], ["i", 0], ["aaa", 0], ["1", 0], ["deletables", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["if", 0], ["count", 0], ["i", 0], ["k", 0], ["count", 0], ["k", 0], ["ele", 0], ["i", 0], ["break", 0], ["deletables", 0], ["i", 0], ["k", 0], ["count", 0], ["i", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["ord", 0], ["i", 0], ["aaa", 0], ["deletables", 0], ["continue", 0], ["if", 0], ["chr", 0], ["ele", 0], ["aaa", 0], ["i", 0], ["if", 0], ["count", 0], ["0", 0], ["count", 0], ["1", 0], ["else", 0], ["ans", 0], ["i", 0], ["else", 0], ["ans", 0], ["i", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["input", 0], ["cnt", 0], ["d", 0], ["for", 0], ["i", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["c", 0], ["not", 0], ["in", 0], ["cnt", 0], ["cnt", 0], ["c", 0], ["1", 0], ["d", 0], ["c", 0], ["i", 0], ["else", 0], ["cnt", 0], ["c", 0], ["1", 0], ["d", 0], ["c", 0], ["append", 0], ["i", 0], ["ch", 0], ["for", 0], ["c", 0], ["in", 0], ["sorted", 0], ["cnt", 0], ["if", 0], ["k", 0], ["cnt", 0], ["c", 0], ["0", 0], ["ch", 0], ["c", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["c", 0], ["s", 0], ["i", 0], ["k", 0], ["cnt", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["ch", 0], ["k", 0], ["s", 0], ["i", 0], ["print", 0], ["join", 0], ["s", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["i", 0], ["ord", 0], ["a", 0], ["while", 0], ["1", 0], ["km", 0], ["s", 0], ["count", 0], ["chr", 0], ["i", 0], ["if", 0], ["k", 0], ["km", 0], ["0", 0], ["k", 0], ["km", 0], ["i", 0], ["1", 0], ["else", 0], ["break", 0], ["ss", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ord", 0], ["s", 0], ["j", 0], ["i", 0], ["ss", 0], ["s", 0], ["j", 0], ["elif", 0], ["ord", 0], ["s", 0], ["j", 0], ["i", 0], ["if", 0], ["k", 0], ["0", 0], ["k", 0], ["1", 0], ["else", 0], ["ss", 0], ["s", 0], ["j", 0], ["print", 0], ["ss", 0], ["tn", 0], ["tk", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["tn", 0], ["k", 0], ["int", 0], ["tk", 0], ["a", 0], ["input", 0], ["vis", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["append", 0], ["a", 0], ["i", 0], ["i", 0], ["t", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["vis", 0], ["append", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["vis", 0], ["t", 0], ["i", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["vis", 0], ["i", 0], ["continue", 0], ["print", 0], ["a", 0], ["i", 0], ["end", 0], ["import", 0], ["math", 0], ["import", 0], ["random", 0], ["import", 0], ["time", 0], ["import", 0], ["heapq", 0], ["def", 0], ["getintlist", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["gettransintlist", 0], ["n", 0], ["first", 0], ["getintlist", 0], ["m", 0], ["len", 0], ["first", 0], ["result", 0], ["0", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["result", 0], ["i", 0], ["0", 0], ["first", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["curr", 0], ["getintlist", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["result", 0], ["i", 0], ["j", 0], ["curr", 0], ["i", 0], ["return", 0], ["result", 0], ["n", 0], ["k", 0], ["getintlist", 0], ["s", 0], ["input", 0], ["d", 0], ["dict", 0], ["for", 0], ["l", 0], ["in", 0], ["s", 0], ["d", 0], ["l", 0], ["d", 0], ["get", 0], ["l", 0], ["0", 0], ["1", 0], ["orda", 0], ["ord", 0], ["a", 0], ["ordz", 0], ["ord", 0], ["z", 0], ["trleter", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["orda", 0], ["ordz", 0], ["1", 0], ["l", 0], ["chr", 0], ["i", 0], ["x", 0], ["min", 0], ["d", 0], ["get", 0], ["l", 0], ["0", 0], ["k", 0], ["if", 0], ["x", 0], ["k", 0], ["trleter", 0], ["l", 0], ["count", 0], ["x", 0], ["break", 0], ["k", 0], ["x", 0], ["ordtr", 0], ["ord", 0], ["trleter", 0], ["result", 0], ["for", 0], ["l", 0], ["in", 0], ["s", 0], ["ordl", 0], ["ord", 0], ["l", 0], ["if", 0], ["ordl", 0], ["ordtr", 0], ["if", 0], ["ordl", 0], ["ordtr", 0], ["count", 0], ["1", 0], ["if", 0], ["ordl", 0], ["ordtr", 0], ["and", 0], ["count", 0], ["0", 0], ["continue", 0], ["result", 0], ["l", 0], ["print", 0], ["result", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["rstrip", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ord", 0], ["a", 0], ["ord", 0], ["z", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["if", 0], ["s", 0], ["count", 0], ["chr", 0], ["i", 0], ["k", 0], ["k", 0], ["s", 0], ["count", 0], ["chr", 0], ["i", 0], ["s", 0], ["s", 0], ["replace", 0], ["chr", 0], ["i", 0], ["else", 0], ["s", 0], ["s", 0], ["replace", 0], ["chr", 0], ["i", 0], ["k", 0], ["k", 0], ["0", 0], ["print", 0], ["s", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["a", 0], ["0", 0], ["k", 0], ["a", 0], ["1", 0], ["s", 0], ["input", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["a", 0], ["chr", 0], ["97", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["a", 0], ["s", 0], ["i", 0], ["append", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["a", 0], ["chr", 0], ["97", 0], ["i", 0], ["a", 0], ["chr", 0], ["97", 0], ["i", 0], ["1", 0], ["rem", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["while", 0], ["len", 0], ["a", 0], ["chr", 0], ["97", 0], ["i", 0], ["0", 0], ["and", 0], ["k", 0], ["0", 0], ["rem", 0], ["add", 0], ["a", 0], ["chr", 0], ["97", 0], ["i", 0], ["pop", 0], ["k", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["rem", 0], ["r", 0], ["s", 0], ["i", 0], ["print", 0], ["r", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["r", 0], ["input", 0], ["r1", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["d", 0], ["for", 0], ["u1", 0], ["in", 0], ["range", 0], ["26", 0], ["d", 0], ["r1", 0], ["u1", 0], ["u1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["d", 0], ["r", 0], ["t", 0], ["append", 0], ["t", 0], ["l1", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["for", 0], ["y", 0], ["in", 0], ["x", 0], ["l1", 0], ["append", 0], ["y", 0], ["s", 0], ["l2", 0], ["for", 0], ["o", 0], ["in", 0], ["range", 0], ["k", 0], ["n", 0], ["l2", 0], ["append", 0], ["l1", 0], ["o", 0], ["l2", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["l2", 0], ["s", 0], ["s", 0], ["r", 0], ["i", 0], ["print", 0], ["s", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["alth", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["chars", 0], ["0", 0], ["26", 0], ["chars2", 0], ["0", 0], ["26", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["chars", 0], ["alth", 0], ["find", 0], ["s", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["chars2", 0], ["i", 0], ["min", 0], ["chars", 0], ["i", 0], ["k", 0], ["k", 0], ["chars", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["chars2", 0], ["alth", 0], ["find", 0], ["s", 0], ["i", 0], ["0", 0], ["print", 0], ["s", 0], ["i", 0], ["end", 0], ["else", 0], ["chars2", 0], ["alth", 0], ["find", 0], ["s", 0], ["i", 0], ["1", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["str", 0], ["input", 0], ["if", 0], ["n", 0], ["k", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["b", 0], ["append", 0], ["ord", 0], ["a", 0], ["i", 0], ["i", 0], ["b", 0], ["sort", 0], ["b", 0], ["b", 0], ["k", 0], ["copy", 0], ["print", 0], ["b", 0], ["a", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["a", 0], ["i", 0], ["1", 0], ["chr", 0], ["i", 0], ["0", 0], ["fini", 0], ["join", 0], ["a", 0], ["print", 0], ["fini", 0], ["else", 0], ["print", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["input", 0], ["l", 0], ["len", 0], ["s", 0], ["d", 0], ["f", 0], ["true", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["not", 0], ["s", 0], ["i", 0], ["in", 0], ["d", 0], ["d", 0], ["s", 0], ["i", 0], ["d", 0], ["s", 0], ["i", 0], ["append", 0], ["i", 0], ["rule", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["wk1", 0], ["chr", 0], ["i", 0], ["97", 0], ["if", 0], ["wk1", 0], ["in", 0], ["d", 0], ["rule", 0], ["append", 0], ["wk1", 0], ["current", 0], ["0", 0], ["position", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["f", 0], ["d", 0], ["rule", 0], ["current", 0], ["position", 0], ["false", 0], ["position", 0], ["1", 0], ["if", 0], ["position", 0], ["len", 0], ["d", 0], ["rule", 0], ["current", 0], ["position", 0], ["0", 0], ["current", 0], ["1", 0], ["if", 0], ["current", 0], ["len", 0], ["rule", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["f", 0], ["i", 0], ["print", 0], ["s", 0], ["i", 0], ["end", 0], ["print", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.040878896269800714, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0007134621076199631, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.05281868969019807, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0010304782860606583, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nGiven is a directed graph G with N vertices and M edges.\n\nThe vertices are numbered 1 to N, and the i-th edge is directed from Vertex A_i to Vertex B_i.\n\nIt is guaranteed that the graph contains no self-loops or multiple edges.\nDetermine whether there exists an induced subgraph (see Notes) of G such that the in-degree and out-degree of every vertex are both 1. If the answer is yes, show one such subgraph.\n\nHere the null graph is not considered as a subgraph.\n\n-----Notes-----\nFor a directed graph G = (V, E), we call a directed graph G' = (V', E') satisfying the following conditions an induced subgraph of G:\n - V' is a (non-empty) subset of V.\n - E' is the set of all the edges in E that have both endpoints in V'.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 0 \\leq M \\leq 2000\n - 1 \\leq A_i,B_i \\leq N\n - A_i \\neq B_i\n - All pairs (A_i, B_i) are distinct.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 B_1\nA_2 B_2\n:\nA_M B_M\n\n-----Output-----\nIf there is no induced subgraph of G that satisfies the condition, print -1.\nOtherwise, print an induced subgraph of G that satisfies the condition, in the following format:\nK\nv_1\nv_2\n:\nv_K\n\nThis represents the induced subgraph of G with K vertices whose vertex set is \\{v_1, v_2, \\ldots, v_K\\}. (The order of v_1, v_2, \\ldots, v_K does not matter.)\nIf there are multiple subgraphs of G that satisfy the condition, printing any of them is accepted.\n\n-----Sample Input-----\n4 5\n1 2\n2 3\n2 4\n4 1\n4 3\n\n-----Sample Output-----\n3\n1\n2\n4\n\nThe induced subgraph of G whose vertex set is \\{1, 2, 4\\} has the edge set \\{(1, 2), (2, 4), (4, 1)\\}. The in-degree and out-degree of every vertex in this graph are both 1.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from collections import deque\n\nclass Graph(): #directed\n\tdef __init__(self, n, edge, indexed=1):\n\t\tself.n = n\n\t\tself.graph = [[] for _ in range(n)]\n\t\tfor e in edge:\n\t\t\tself.graph[e[0] - indexed].append(e[1] - indexed)\n\nINF = 10**18\n\nN, M = map(int, input().split())\nedge = [tuple(map(int, input().split())) for _ in range(M)]\n\ng = Graph(N, edge)\n\nloopsize = INF\n\nfor i in range(N):\n\troot = i\n\tqueue = deque([root])\n\tdist = [INF for _ in range(N)]\n\tdist[root] = 0\n\tprev = [None for _ in range(N)]\n\twhile queue:\n\t\tnode = queue.popleft()\n\t\tfor adj in g.graph[node]:\n\t\t\tif adj == root: #閉路を検出する\n\t\t\t\tdist[root] = dist[node] + 1\n\t\t\t\tprev[root] = node\n\t\t\t\tbreak\n\t\t\tif dist[adj] != INF:\n\t\t\t\tcontinue\n\t\t\tdist[adj] = dist[node] + 1\n\t\t\tprev[adj] = node\n\t\t\tqueue.append(adj)\n\t\telse:\n\t\t\tcontinue\n\t\tbreak\n\telse:\n\t\tcontinue\n\t#最小の閉路なら条件を満たす\n\tif loopsize > dist[root]:\n\t\tloopsize = dist[root]\n\t\tpath = [root]\n\t\tnode = root\n\t\twhile prev[node] != root:\n\t\t\tnode = prev[node]\n\t\t\tpath.append(node)\n\nif loopsize != INF:\n\tprint(loopsize)\n\tfor node in path:\n\t\tprint(node + 1)\nelse:\n\tprint(-1)\n", "import sys\nsys.setrecursionlimit(10**9)\n\nN, M = list(map(int, input().split()))\nadjL = [set() for _ in range(N)]\nfor _ in range(M):\n\tA, B = list(map(int, input().split()))\n\tA, B = A-1, B-1\n\tadjL[A].add(B)\n\ndef getCycle(adjL):\n\tdef dfs(vNow):\n\t\tif isAvails[vNow]:\n\t\t\tanss.append(vNow)\n\t\t\treturn vNow\n\t\tuseds[vNow] = True\n\t\tisAvails[vNow] = True\n\t\tfor v2 in adjL[vNow]:\n\t\t\tvRet = dfs(v2)\n\t\t\tif vRet == vNow or vRet == numV:\n\t\t\t\treturn numV\n\t\t\telif vRet != -1:\n\t\t\t\tanss.append(vNow)\n\t\t\t\treturn vRet\n\t\tisAvails[vNow] = False\n\t\treturn -1\n\n\tnumV = len(adjL)\n\tuseds = [False] * numV\n\tanss = []\n\tfor vSt in range(numV):\n\t\tisAvails = [False] * numV\n\t\tif useds[vSt]: continue\n\t\tvRet = dfs(vSt)\n\t\tif vRet == numV:\n\t\t\treturn anss[::-1]\n\treturn []\n\ncycle = getCycle(adjL)\n\nif not cycle:\n\tprint((-1))\n\treturn\n\nisAvails = [False] * N\nv2s = [-1] * N\nfor i in range(len(cycle)):\n\tisAvails[cycle[i]] = True\n\tv2s[cycle[i-1]] = cycle[i]\n\nwhile True:\n\tadjL2 = [set() for _ in range(N)]\n\ta, b = -1, -1\n\tfor v in cycle:\n\t\tfor v2 in adjL[v]:\n\t\t\tif isAvails[v2]:\n\t\t\t\tadjL2[v].add(v2)\n\t\t\t\tif v2s[v] != v2:\n\t\t\t\t\ta, b = v, v2\n\n\tif (a, b) == (-1, -1):\n\t\tprint((len(cycle)))\n\t\tprint(('\\n'.join([str(x+1) for x in cycle])))\n\t\tbreak\n\n\tadjL = adjL2\n\n\tcycle = []\n\tisAvails = [False] * N\n\tv2s[a] = b\n\tv = a\n\twhile not isAvails[v]:\n\t\tcycle.append(v)\n\t\tisAvails[v] = True\n\t\tv = v2s[v]\n", "# find a cycle\ndef find_cycle(g):\n\tn = len(g)\n\tused = [0]*n #0:not yet 1: visiting 2: visited\n\tfor v in range(n): #各点でDFS\n\t\tif used[v] == 2: continue\n\t\t#初期化\n\t\tstack = [v]\n\t\thist =[] #履歴\n\t\twhile stack:\n\t\t\tv = stack[-1]\n\t\t\tif used[v] == 1:\n\t\t\t\tused[v] = 2 #帰りがけの状態に\n\t\t\t\tstack.pop()\n\t\t\t\thist.pop()\n\t\t\t\tcontinue\n\t\t\thist.append(v)\n\t\t\tused[v] = 1 #行きがけの状態に\n\t\t\tfor c in g[v]:\n\t\t\t\tif used[c] == 2: continue\n\t\t\t\telif used[c] == 1: # cを始点とするサイクル発見！\n\t\t\t\t\treturn hist[hist.index(c):]\n\t\t\t\telse:\n\t\t\t\t\tstack.append(c)\n\treturn None\n\ndef find_minimal_cycle(g,cycle):\n\tn = len(g)\n\tis_in_cycle = [0]*n #サイクルに使われているか\n\tnxt = [-1]*n #次の頂点\n\t\n\tl = len(cycle)\n\tfor i,c in enumerate(cycle):\n\t\tis_in_cycle[c] = 1\n\t\tnxt[c] = cycle[i+1-l]\n\n\t# 極小サイクルを求める\n\tfor v in cycle:\n\t\tif is_in_cycle[v]:\n\t\t\tfor c in g[v]:\n\t\t\t\tif is_in_cycle[c] == 1: #もしショートカット v -> c があれば\n\t\t\t\t\tv0 = nxt[v] #以下サイクルのうち v から c までを削除\n\t\t\t\t\twhile v0 != c: \n\t\t\t\t\t\tis_in_cycle[v0] = 0 \n\t\t\t\t\t\tv0 = nxt[v0] \n\t\t\t\t\tnxt[v] = c # nxt を繋ぎ直す\n\t\n\t#極小サイクルの出力\n\ti = is_in_cycle.index(1)\n\tv = nxt[i]\n\thist = [i] #履歴\n\twhile v != i:\n\t\thist.append(v)\n\t\tv = nxt[v]\n\treturn hist\n\t\n\t\n\n#########################################################\n\n##########################################################\n# coding: utf-8\n# Your code here!\n\nimport sys\nsys.setrecursionlimit(10**6)\nreadline = sys.stdin.readline\n\nn,m = [int(i) for i in readline().split()]\ng = [[] for _ in range(n)]\n \nfor _ in range(m):\n\ta,b = [int(i)-1 for i in readline().split()]\n\tg[a].append(b)\n\ncycle = find_cycle(g)\n\nif cycle == None: print((-1))\nelse:\n\tres = find_minimal_cycle(g,cycle)\n\tprint((len(res)))\n\tfor i in res:\n\t\tprint((i+1))\n\n\n\n\n\n\n", "def main():\n\tfrom collections import deque\n\tn,m,*t=list(map(int,open(0).read().split()))\n\ti=[0]*n\n\to=[[]for _ in range(n)]\n\tfor a,b in zip(*[iter(t)]*2):\n\t\to[a-1]+=b-1,\n\t\ti[b-1]+=1\n\tq=deque(v for v,f in enumerate(i)if f<1)\n\tr=[]\n\twhile q:\n\t\tv=q.popleft()\n\t\tr+=v,\n\t\tfor w in o[v]:\n\t\t\ti[w]-=1\n\t\t\tif i[w]==0:q+=w,\n\tprint((-(len(r)==n)))\nmain()\n", "from collections import*\nn,m,*t=map(int,open(0).read().split())\ni,o=[0]*n,[[]for _ in range(n)]\nfor a,b in zip(*[iter(t)]*2):\n\to[a-1]+=b-1,\n\ti[b-1]+=1\nq=deque(v for v in range(n)if i[v]<1)\nr=[]\nwhile q:\n\tv=q.popleft()\n\tr+=v,\n\tfor w in o[v]:\n\t\ti[w]-=1\n\t\tif i[w]==0:q+=w,\nprint(-(len(r)==n))\n", "from collections import deque\nimport sys\nsys.setrecursionlimit(10**6)\n\nclass DirectedGraph:\n\tdef __init__(self, adj):\n\t\tself.n = len(adj)\n\t\tself.adj = adj\n\t\tself.is_asyclic = False\n\t\tself.max_path_len = None\n\n\tdef topological_sort(self):\n\t\tindegree = [0] * self.n\n\t\tfor i, vs in enumerate(self.adj):\n\t\t\tfor dest in vs:\n\t\t\t\tindegree[dest] += 1\n\t\tzero_v = []\n\t\tfor v, indeg in enumerate(indegree):\n\t\t\tif indeg == 0:\n\t\t\t\tzero_v.append(v)\n\t\tmax_path_len = 1\n\t\ttp_sorted = []\n\t\tto_be_added = []\n\t\twhile True:\n\t\t\twhile zero_v:\n\t\t\t\tv = zero_v.pop()\n\t\t\t\ttp_sorted.append(v)\n\t\t\t\tfor dest in self.adj[v]:\n\t\t\t\t\tindegree[dest] -= 1\n\t\t\t\t\tif indegree[dest] == 0:\n\t\t\t\t\t\tto_be_added.append(dest)\n\t\t\tif len(to_be_added) > 0:\n\t\t\t\tzero_v += to_be_added\n\t\t\t\tto_be_added = []\n\t\t\t\tmax_path_len += 1\n\t\t\telse:\n\t\t\t\tbreak\n\t\tif len(tp_sorted) == self.n:\n\t\t\tself.is_asyclic = True\n\t\t\tself.max_path_len = max_path_len\n\t\t\treturn tp_sorted\n\t\telse:\n\t\t\tself.is_asyclic = False\n\t\t\treturn None\n\n\tdef extract_cycle(self):\n\t\tself.seen = [0] * self.n\n\t\tself.checked = [0] * self.n\n\t\tself.hist = deque()\n\t\tself.node_in_cycle = -1\n\n\t\tdef dfs(v):\n\t\t\tself.seen[v] = 1\n\t\t\tself.hist.append(v)\n\t\t\tfor nv in self.adj[v]:\n\t\t\t\tif self.checked[nv]:\n\t\t\t\t\tcontinue\n\t\t\t\tif self.seen[nv] and not self.checked[nv]:\n\t\t\t\t\tself.node_in_cycle = nv\n\t\t\t\t\treturn\n\t\t\t\tdfs(nv)\n\t\t\t\tif self.node_in_cycle != -1:\n\t\t\t\t\treturn\n\t\t\tself.hist.pop()\n\t\t\tself.checked[v] = 1\n\n\t\tfor i in range(self.n):\n\t\t\tif not self.checked[i]:\n\t\t\t\tdfs(i)\n\t\t\tif self.node_in_cycle != -1:\n\t\t\t\tbreak\n\t\tif self.node_in_cycle == -1:\n\t\t\treturn []\n\t\telse:\n\t\t\tcycle = []\n\t\t\twhile self.hist:\n\t\t\t\tt = self.hist.pop()\n\t\t\t\tcycle.append(t)\n\t\t\t\tif t == self.node_in_cycle:\n\t\t\t\t\tbreak\n\t\t\tcycle.reverse()\n\t\t\treturn cycle\n\nn, m = [int(item) for item in input().split()]\nedge = [[] for _ in range(n)]\nfor i in range(m):\n\ta, b = [int(item) - 1 for item in input().split()]\n\tedge[a].append(b)\n\nDG = DirectedGraph(edge)\ncycle = DG.extract_cycle()\n\nif len(cycle) == 0:\n\tprint(-1)\n\treturn\n\nwhile True:\n\tin_cycle = set(cycle)\n\tdeg = [0] * n \n\tfor item in cycle:\n\t\tfor v in edge[item]:\n\t\t\tif v in in_cycle:\n\t\t\t\tdeg[v] += 1\n\t\n\tok = True\n\tfor i, item in enumerate(cycle):\n\t\tif deg[item] > 1:\n\t\t\tok = False\n\t\t\tcur_id = start = i\n\tif ok:\n\t\tprint(len(cycle))\n\t\tprint(\"\\n\".join([str(item + 1) for item in cycle]))\n\t\treturn\n\n\tncycle = []\n\tcur = cycle[cur_id]\n\twhile True:\n\t\tncycle.append(cur)\n\t\tif cycle[start] in edge[cur]:\n\t\t\tbreak\n\t\tcur_id = (cur_id + 1) % len(cycle)\n\t\tcur = cycle[cur_id]\n\tcycle = ncycle[:]\n", "from collections import deque\n\nn, m = list(map(int, input().split()))\nab = [list(map(int, input().split())) for _ in range(m)]\nINF = 10 ** 5\n\nadj = [[] for _ in range(n)]\nfor a, b in ab:\n\ta -= 1\n\tb -= 1\n\tadj[a].append(b)\n\nmn = INF\nfor s in range(n):\n\tdq = deque([s])\n\td = [-1] * n\n\tp = [-1] * n\n\td[s] = 0\n\tlast = []\n\n\twhile dq:\n\t\tu = dq.popleft()\n\t\tfor v in adj[u]:\n\t\t\tif d[v] == -1:\n\t\t\t\td[v] = d[u] + 1\n\t\t\t\tp[v] = u\n\t\t\t\tdq.append(v)\n\n\t\t\tif v == s:\n\t\t\t\tlast.append(u)\n\n\tfor v in last:\n\t\troute = [v]\n\t\twhile p[v] != s:\n\t\t\tv = p[v]\n\t\t\troute.append(v)\n\n\t\troute.append(s)\n\t\tsize = len(route)\n\t\tif size < mn:\n\t\t\tmn = size\n\t\t\tans = route[::-1]\n\nif mn != INF:\n\tprint(mn)\n\tfor e in ans:\n\t\tprint((e + 1))\nelse:\n\tprint((-1))\n", "import os\nimport sys\nfrom collections import deque\n\nif os.getenv(\"LOCAL\"):\n\tsys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN, M = list(map(int, sys.stdin.readline().split()))\nAB = [list(map(int, sys.stdin.readline().split())) for _ in range(M)]\ngraph = [[] for _ in range(N + 1)]\n\nfor a, b in AB:\n\tgraph[a].append(b)\n\n\ndef cycle_size(from_v):\n\t\"\"\"\n\tfrom_v に戻ってくるまでのステップ数\n\t:param from_v:\n\t:return:\n\t\"\"\"\n\tparents = [None] * len(graph)\n\tseen = [False] * len(graph)\n\tque = deque([(from_v, 0)])\n\twhile que:\n\t\tv, d = que.pop()\n\t\tfor u in graph[v]:\n\t\t\tif seen[u]:\n\t\t\t\tcontinue\n\t\t\tseen[u] = True\n\t\t\tque.appendleft((u, d + 1))\n\t\t\tparents[u] = v\n\t\t\tif u == from_v:\n\t\t\t\treturn d + 1, parents\n\treturn INF, parents\n\n\nmin_v = None\nmin_size = INF\nmin_parents = None\nfor v in range(1, N + 1):\n\tsize, parents = cycle_size(v)\n\tif size < min_size:\n\t\tmin_v = v\n\t\tmin_size = size\n\t\tmin_parents = parents\n\nif min_size < INF:\n\tprint(min_size)\n\tprint(min_v)\n\tv = min_parents[min_v]\n\twhile v != min_v:\n\t\tprint(v)\n\t\tv = min_parents[v]\nelse:\n\tprint((-1))\n", "import sys\nsys.setrecursionlimit(500000)\ndef scc(N, G, RG):\n\t# https://tjkendev.github.io/procon-library/python/graph/scc.html\n\torder = []\n\tused = [0]*N\n\tgroup = [None]*N\n\tdef dfs(s):\n\t\tused[s] = 1\n\t\tfor t in G[s]:\n\t\t\tif not used[t]:\n\t\t\t\tdfs(t)\n\t\torder.append(s)\n\tdef rdfs(s, col):\n\t\tgroup[s] = col\n\t\tused[s] = 1\n\t\tfor t in RG[s]:\n\t\t\tif not used[t]:\n\t\t\t\trdfs(t, col)\n\tfor i in range(N):\n\t\tif not used[i]:\n\t\t\tdfs(i)\n\tused = [0]*N\n\tlabel = 0\n\tfor s in reversed(order):\n\t\tif not used[s]:\n\t\t\trdfs(s, label)\n\t\t\tlabel += 1\n\treturn label, group\n\nfrom collections import Counter\nN, M = list(map(int, input().split()))\nE = [[] for _ in range(N+1)]\nE_set = [set() for _ in range(N+1)]\nE_rev = [[] for _ in range(N+1)]\nE_rev_set = [set() for _ in range(N+1)]\nfor _ in range(M):\n\ta, b = list(map(int, input().split()))\n\tE[a].append(b)\n\tE_set[a].add(b)\n\tE_rev[b].append(a)\n\tE_rev_set[b].add(a)\n\nlabel, group = scc(N+1, E, E_rev)\ncnt = Counter(group)\nClosed = [False] * (N+1)\n\ngrooo = [set() for _ in range(N+1)]\nfor v, gr in enumerate(group):\n\tgrooo[gr].add(v)\n\nfrom random import random\nhaaaaaaaaaaaaaaaaaaaaaaa = enumerate(group) if random() > 0.5 else list(zip(list(range(N, 0, -1)), group[::-1]))\n\n\nfor v, gr in haaaaaaaaaaaaaaaaaaaaaaa:\n\tif Closed[gr]:\n\t\tcontinue\n\tClosed[gr] = True\n\tif cnt[gr]==1:\n\t\tcontinue\n\n\t#print(gr, cnt[gr])\n\tgroo = grooo[gr]\n\n\tpath = [v]\n\tpath_set = {v}\n\twhile True:\n\t\t#print(\"v=\",v)\n\t\taaa = E_set[v]&path_set\n\t\tif aaa:\n\t\t\tbreak\n\t\tu = (groo&E_set[v]).pop()\n\t\t#print(\"u=\",u)\n\t\twhile E_rev_set[u]-{v} & path_set:\n\t\t\tpath_set.remove(path.pop())\n\t\tpath.append(u)\n\t\tpath_set.add(u)\n\t\tv = u\n\t\t#print(path)\n\tfor i, v in enumerate(path):\n\t\tif v in aaa:\n\t\t\taaa.remove(v)\n\t\t\tif len(aaa)==0:\n\t\t\t\tbreak\n\tans = path[i:]\n\tprint((len(ans)))\n\tprint((\"\\n\".join(map(str, ans))))\n\treturn\nprint((-1))\n", "def main():\n\tfrom collections import deque\n\tn,m,*t=map(int,open(0).read().split())\n\ti,o=[0]*n,[[]for _ in range(n)]\n\tfor a,b in zip(*[iter(t)]*2):\n\t\to[a-1]+=b-1,\n\t\ti[b-1]+=1\n\tq=deque(v for v in range(n)if i[v]<1)\n\tr=[]\n\twhile q:\n\t\tv=q.popleft()\n\t\tr+=v,\n\t\tfor w in o[v]:\n\t\t\ti[w]-=1\n\t\t\tif i[w]==0:q+=w,\n\tprint(-(len(r)==n))\nmain()\n", "from heapq import heappop, heappush\n\nn, m = map(int, input().split())\nxy = [tuple(int(x)-1 for x in input().split()) for _ in range(m)]\n\nR = [[] for _ in range(n)]\nh = [0] * n\n\nfor x, y in xy:\n\tR[x].append(y)\n\th[y] += 1\n\nS = []\n\nst = []\n\nfor i in range(n):\n\tif h[i] == 0:\n\t\theappush(st, i)\n\nwhile len(st) > 0:\n\ttemp = heappop(st)\n\tS.append(temp)\n\tfor x in R[temp]:\n\t\th[x] -= 1\n\t\tif h[x] == 0:\n\t\t\theappush(st, x)\n\nif len(S) != n:\n\tprint(-99999)\nelse:\n\tprint(-1)\n", "from collections import deque\n\n\ndef main():\n\t# N = int(input())\n\t# N,= [int(a) for a in input().split()]\n\t# N, M = [int(a) for a in input().split()]\n\n\t# a = []\n\t# # b = []\n\t# c = []\n\t#\n\t# for _ in range(M):\n\t#     aa, bb = [int(a) for a in input().split()]\n\t#     cc = [int(a) for a in input().split()]\n\t#     a.append(aa)\n\t#     # b.append(bb)\n\t#     c.append(cc)\n\tN, M = [int(a) for a in input().split()]\n\n\tAB = [\n\t\t[int(a) for a in input().split()]\n\t\tfor _ in range(M)\n\t]\n\n\tpp = [[] for _ in range(N)]\n\tfor a, b in AB:\n\t\tpp[a - 1].append(b - 1)\n\n\tstartpool = set(range(N))\n\n\tresult = None\n\n\twhile len(startpool) != 0:\n\t\tstart = min(startpool)\n\n\t\tq = deque([(start, [start])])\n\t\trenketu = {start}\n\t\twhile len(q) != 0:\n\t\t\tp, history = q.popleft()\n\t\t\ttarget = pp[p]\n\t\t\tfor t in target:\n\t\t\t\tif t in history:\n\t\t\t\t\tif result is None:\n\t\t\t\t\t\tresult = history\n\t\t\t\t\telif len(result) > len(history) - history.index(t):\n\t\t\t\t\t\tresult = history[history.index(t):]\n\t\t\t\tif t not in renketu:\n\t\t\t\t\tq.append([t, history + [t]])\n\n\t\t\t\trenketu.add(t)\n\t\tstartpool -= renketu\n\n\tif result is not None:\n\t\tprint((len(result)))\n\t\tfor a in result:\n\t\t\tprint((a + 1))\n\t\treturn\n\telse:\n\t\tprint((-1))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\nfrom collections import deque\ndef serp(s):\n\tprev = [-1]*n\n\tq=deque([s])\n\twhile q:\n\t\tv = q.pop()\n\t\tfor nv in e[v]:\n\t\t\tif nv==s: prev[nv]=v; return(s,prev)\n\t\t\tif prev[nv]<0: q+=nv,; prev[nv] =v\n\treturn(-1,prev)\nn,m,*t=map(int,open(0).read().split())\ne,ab = [[] for i in range(n)],[]\nfor a,b in zip(*[iter(t)]*2):\n\te[a-1]+= b-1,\n\tab += [(a-1,b-1)]\nfor v in range(n):\n\tv0,prev = serp(v)\n\tif v0>=0: break\nif v0<0: print(-1); return\nc=set()\nc.add(v0)\npv = prev[v0]\nwhile pv!=v0:\n\tc.add(pv)\n\tpv=prev[pv]\nfor a,b in ab:\n\tif a in c and b in c and prev[b]!=a:\n\t\tpv = prev[b]\n\t\twhile pv !=a:\n\t\t\tc.remove(pv)\n\t\t\tpv=prev[pv]\n\t\tprev[b]=a\nprint(len(c))\nfor i in c: print(i+1)\n", "#!/usr/bin/env python\n\nimport sys\nsys.setrecursionlimit(10 ** 6)\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nINF = float(\"inf\")\n\ndef main():\n\tN,M = map(int,input().split())\n\tG = [[] for _ in range(N)]\n\tAB = [tuple(map(int,input().split())) for _ in range(M)]\n\tfor a,b in AB:\n\t\tG[a-1].append(b-1)\n\n\tAns = [1]*(N+1)\n\t\n\t# 全ての頂点から, 閉路が存在しないかを確認する\n\tfor s in range(N):\n\t\tprev = [-1]*N\n\t\tdist = [-1]*N\n\t\tdist[s] = 0\n\t\tdq = deque([s])\n\t\twhile dq:\n\t\t\tv = dq.popleft()\n\t\t\tfor nv in G[v]:\n\t\t\t\tif dist[nv] == -1:\n\t\t\t\t\tdist[nv] = dist[v] + 1\n\t\t\t\t\tprev[nv] = v\n\t\t\t\t\tdq.append(nv)\n\t\t\t\t# 次が 0番目(開始地点) なら閉路あり\n\t\t\t\tif dist[nv] == 0 and prev[nv] == -1:\n\t\t\t\t\tprev[nv] = v\n\n\t\t# 開始地点の前 が -1でない => 閉路あり\n\t\tif prev[s] != -1:\n\t\t\tv = prev[s]\n\t\t\tans = set()\n\t\t\tfor _ in range(max(dist)+1):\n\t\t\t\tans.add(prev[v])\n\t\t\t\tv = prev[v]\n\t\t\tif len(Ans) > len(ans):\n\t\t\t\tAns = list(ans)\n\t\n\tif len(Ans) == N+1:\n\t\tprint(-1)\n\telse:\n\t\tprint(len(Ans))\n\t\tAns.sort()\n\t\tfor v in Ans:\n\t\t\tprint(v+1)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "from collections import deque\nn, m = list(map(int, input().split()))\ng = [[] for _ in range(n)]\nINF = float('inf')\nfor _ in range(m):\n\ta, b = list(map(int, input().split()))\n\ta -= 1\n\tb -= 1\n\tg[a].append(b)\n\nres = []\nshortest = n + 1\nfor s in range(n):\n\tdist = [-1] * n\n\tprev = [-1] * n\n\tq = deque()\n\tq.append(s)\n\tdist[s] = 0\n\twhile len(q) != 0:\n\t\tv = q.popleft()\n\t\tfor nv in g[v]:\n\t\t\tif dist[nv] == -1:\n\t\t\t\tdist[nv] = dist[v] + 1\n\t\t\t\tprev[nv] = v\n\t\t\t\tq.append(nv)\n\tfor t in range(n):\n\t\tif t == s:\n\t\t\tcontinue\n\t\tif dist[t] == -1:\n\t\t\tcontinue\n\t\tfor nt in g[t]:\n\t\t\tif nt == s:\n\t\t\t\ttemp = [s]\n\t\t\t\tcur = t\n\t\t\t\twhile cur != s:\n\t\t\t\t\ttemp.append(cur)\n\t\t\t\t\tcur = prev[cur]\n\t\t\t\tif shortest > len(temp):\n\t\t\t\t\tshortest = len(temp)\n\t\t\t\t\tres = temp\nif shortest == n + 1:\n\tprint((-1))\n\treturn\nprint((len(res)))\nfor v in res:\n\tprint((v + 1))\n\n# def bfs(sv):\n#     dist = [INF] * n\n#     pre = [-1] * n\n#     q = deque()\n#     q.append(sv)\n#     dist[sv] = 0\n#     while q:\n#         v = q.popleft()\n#         for nv in g[v]:\n#             if dist[nv] == INF:\n#                 continue\n#             pre[nv] = v\n#             dist[nv] = dist[v] + 1\n#             q.append(nv)\n#     print(dist)\n#     best = (INF, -1)\n#     for v in range(n):\n#         if v == sv:\n#             continue\n#         for nv in g[v]:\n#             if nv == sv:\n#                 best = min(best, (dist[nv], nv))\n#                 print(sv, best)\n#                 # print(best)\n#     if best[0] == INF:\n#         return [0] * (n + 1)\n#     print(pre)\n#     v = best[1]\n#     print('v', v)\n#     res = []\n#     while v != -1:\n#         res.append(v)\n#         v = pre[v]\n#     print('res', res)\n#     return res\n\n\n# ans = [0] * (n + 1)\n# for s in range(n):\n#     now = bfs(s)\n#     if len(now) < len(ans):\n#         print('aa')\n#         ans = now\n#         print(ans)\n# if len(ans) == n + 1:\n#     print(-1)\n#     return\n# print(len(ans))\n# for v in ans:\n#     print(v)\n", "def dfs(N, AB):\n\tstatus = [-1] * N\n\tfor i in range(N):\n\t\tif status[i] == 1:\n\t\t\tcontinue\n\t\tstack = [i]\n\t\tstatus[i] = 0\n\t\twhile stack:\n\t\t\tv = stack[-1]\n\t\t\tif AB[v]:\n\t\t\t\tn = AB[v].pop()\n\t\t\t\tif status[n] == -1:\n\t\t\t\t\tstack.append(n)\n\t\t\t\t\tstatus[n] = 0\n\t\t\t\telif status[n] == 0:\n\t\t\t\t\tidx = stack.index(n)\n\t\t\t\t\tcycle = stack[idx:]\n\t\t\t\t\t\n\t\t\t\t\treturn cycle\n\t\t\telse:                  \n\t\t\t\tstatus[v] = 1\n\t\t\t\tstack.pop()\n\n\treturn False\n\n\ndef find_smaller_cycle(cycle, AB):\n\ti = 0\n\twhile i < len(cycle):\n\t\tv = cycle[i]\n\t\tif AB[v]:\n\t\t\tn = AB[v].pop()\n\t\t\tif n in cycle:\n\t\t\t\tr = cycle.index(n)\n\t\t\t\tif i < r:\n\t\t\t\t\tcycle = cycle[:i+1] + cycle[r:]\n\t\t\t\telse:\n\t\t\t\t\tcycle = cycle[r:i+1]\n\t\t\t\ti = cycle.index(v)\n\t\telse:\n\t\t\ti += 1\n\t\t\t\n\treturn cycle\n\n\nN, M = [int(i) for i in input().split()]\n\nAB = [[] for _ in range(N)]\nfor _ in range(M):\n\tA, B = [int(i) - 1 for i in input().split()]\n\tAB[A].append(B)\n\t\t\t\t\t  \ncycle = dfs(N, AB)\nif not cycle:\n\tprint(-1)\nelse:\n\tcycle = find_smaller_cycle(cycle, AB)\n\t\t\t\n\tprint(len(cycle))\n\tfor v in cycle:\n\t\tprint(v + 1)\n", "def dfs(N, AB):\n\tstatus = [-1] * N\n\tfor i in range(N):\n\t\t\tif status[i] == 1:\n\t\t\t\t\tcontinue\n\t\t\tstack = [i]\n\t\t\tstatus[i] = 0\n\t\t\twhile stack:\n\t\t\t\t\tprint(\"stack:\", stack)\n\t\t\t\t\tv = stack[-1]\n\t\t\t\t\tif AB[v]:\n\t\t\t\t\t\t\tn = AB[v].pop()\n\t\t\t\t\t\t\tif status[n] == -1:\n\t\t\t\t\t\t\t\t\tstack.append(n)\n\t\t\t\t\t\t\t\t\tstatus[n] = 0\n\t\t\t\t\t\t\telif status[n] == 0:\n\t\t\t\t\t\t\t\t\tidx = stack.index(n)\n\t\t\t\t\t\t\t\t\tprint(\"stack:\", stack, \"n:\", n, \"idx:\", idx)\n\t\t\t\t\t\t\t\t\tcycle = stack[idx:]\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\treturn cycle\n\t\t\t\t\telse:                  \n\t\t\t\t\t\t\tstatus[v] = 1\n\t\t\t\t\t\t\tstack.pop()\n \n\treturn False\n\ndef dfs_2(N, AB):\n\tfor c in range(N):\n\t\tstack = [(c, [])]\n\t\twhile stack:\n\t\t\t# print(\"stack:\", stack)\n\t\t\tcurr, visited = stack.pop()\n\t\t\tif curr in visited:\n\t\t\t\t# print(\"cycle found:\", curr)\n\t\t\t\treturn visited\n\t\t\telse:\n\t\t\t\t# print(\"adding in visited:\", curr)\n\t\t\t\tfor i in AB[curr]:\n\t\t\t\t\tstack.append((i, visited+[curr]))\n\treturn False\n\n \n \ndef find_smaller_cycle(cycle, AB):\n\t\ti = 0\n\t\twhile i < len(cycle):\n\t\t\t\tv = cycle[i]\n\t\t\t\tif AB[v]:\n\t\t\t\t\t\tn = AB[v].pop()\n\t\t\t\t\t\tif n in cycle:\n\t\t\t\t\t\t\t\tr = cycle.index(n)\n\t\t\t\t\t\t\t\tif i < r:\n\t\t\t\t\t\t\t\t\t\tcycle = cycle[:i+1] + cycle[r:]\n\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\tcycle = cycle[r:i+1]\n\t\t\t\t\t\t\t\ti = cycle.index(v)\n\t\t\t\telse:\n\t\t\t\t\t\ti += 1\n\t\t\t\t\t\t\n\t\treturn cycle\n \n \nN, M = [int(i) for i in input().split()]\n \nAB = [[] for _ in range(N)]\nfor _ in range(M):\n\t\tA, B = [int(i) - 1 for i in input().split()]\n\t\tAB[A].append(B)\n\n# print(\"AB:\")\n# for i in AB:\n#   print(i)\ncycle = dfs_2(N, AB)\n# print(\"cycle:\", cycle)\nif not cycle:\n\t\tprint(-1)\nelse:\n\t\tcycle = find_smaller_cycle(cycle, AB)\n\t\t\t\t\t\t\n\t\tprint(len(cycle))\n\t\tfor v in cycle:\n\t\t\t\tprint(v + 1)\n", "\nfrom collections import deque\ndef resolve():\n\tN, M = list(map(int, input().split()))\n\tG = [[] for _ in range(N)]\n\tfor _ in range(M):\n\t\ta, b = [int(x) - 1 for x in input().split()]\n\t\tG[a].append(b)\n\n\tshortest = N + 1\n\tres = []\n\tfor s in range(N):\n\t\tdist = [-1] * N\n\t\tpre = [-1] * N\n\t\tq = deque()\n\t\tq.append(s)\n\t\tdist[s] = 0\n\t\twhile q:\n\t\t\tv = q.popleft()\n\t\t\tfor to in G[v]:\n\t\t\t\tif dist[to] == -1:\n\t\t\t\t\tdist[to] = dist[v] + 1\n\t\t\t\t\tpre[to] = v\n\t\t\t\t\tq.append(to)\n\n\t\tfor t in range(N):\n\t\t\tif t == s or dist[t] == -1:\n\t\t\t\tcontinue\n\t\t\tfor to in G[t]:\n\t\t\t\tif to == s:  # サイクルになっている頂点\n\t\t\t\t\ttmp = [s]\n\t\t\t\t\tcur = t\n\t\t\t\t\twhile cur != s:\n\t\t\t\t\t\ttmp.append(cur)\n\t\t\t\t\t\tcur = pre[cur]\n\t\t\t\t\tif shortest > len(tmp):\n\t\t\t\t\t\tshortest = len(tmp)\n\t\t\t\t\t\tres = tmp\n\n\tif shortest == N + 1:\n\t\tprint((-1))\n\telse:\n\t\tprint((len(res)))\n\t\tres.sort()\n\t\tfor v in res:\n\t\t\tprint((v + 1))\n\n\ndef __starting_point():\n\tresolve()\n\n__starting_point()\n", "N,M = map(int,input().split())\nAB = [tuple(map(int,input().split())) for i in range(M)]\nes = [[] for i in range(N)]\nfor a,b in AB:\n\ta,b = a-1,b-1\n\tes[a].append(b)\n\nfrom collections import deque\ntmpdist = N\nans = None\nfor to in range(N):\n\tfor fr in es[to]:\n\t\tdist = [N] * N\n\t\tdist[fr] = 0\n\t\tprev = [-1] * N\n\t\tq = deque([fr])\n\t\twhile q:\n\t\t\tv = q.popleft()\n\t\t\tif v==to: break\n\t\t\tfor w in es[v]:\n\t\t\t\tif dist[w] < N: continue\n\t\t\t\tif v==to and w==fr: continue\n\t\t\t\tdist[w] = dist[v] + 1\n\t\t\t\tprev[w] = v\n\t\t\t\tq.append(w)\n\t\telse:\n\t\t\tcontinue\n\t\tif dist[to] < tmpdist:\n\t\t\ttmpdist = dist[to]\n\t\t\tans = set()\n\t\t\tv = to\n\t\t\twhile 1:\n\t\t\t\tans.add(v+1)\n\t\t\t\tif prev[v] < 0: break\n\t\t\t\tv = prev[v]\nif ans is None:\n\tprint(-1)\nelse:\n\tprint(len(ans))\n\tprint(*ans, sep='\\n')\n", "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nfrom collections import deque\n\n\ndef find_shortest_cycle(G, s):\n\tdq = deque()\n\tN = len(G)\n\tINF = float('inf')\n\tdist = [INF] * N\n\tdist[s] = 0\n\tparent = [-1] * N\n\n\tans_last = None # sからループを探して見つかった時の、ループの最後の頂点番号\n\tdq.append(s)\n\t# BFSでループを見つける\n\twhile dq and ans_last is None:\n\t\tv = dq.popleft()\n\t\td = dist[v]\n\t\tfor n in G[v]:\n\t\t\t# 頂点vからいける頂点の中に開始点があったら、ループである\n\t\t\tif dist[n] == 0:\n\t\t\t\tans_last = v\n\t\t\t\tparent[n] = v\n\t\t\t\tbreak\n\t\t\t# まだ探索していない頂点なら次の探索候補にする\n\t\t\telif dist[n] == INF:\n\t\t\t\tdist[n] = d + 1\n\t\t\t\tparent[n] = v\n\t\t\t\tdq.append(n)\n\n\t# ループが見つかった場合\n\tif ans_last:\n\t\t# ループの最後の頂点から、元の頂点をたどり、そのルートを逆にする\n\t\tg = ans_last\n\t\troute = [g]\n\t\twhile g != s:\n\t\t\tg = parent[g]\n\t\t\troute.append(g)\n\t\treturn list(reversed(route))\n\t\n\t# 見つからなかった場合はNoneを返す\n\treturn None\n\ndef main():\n\tN, M, *A = map(int, read().split())\n\n\tG = [[] for i in range(N+1)]\n\tfor a, b in zip(A[::2], A[1::2]):\n\t\tG[a].append(b)\n\n\t# すべての頂点の入次数が 1、出次数が 1 であるような G の誘導部分グラフ\n\t# [すべての頂点の入次数が 1、出次数が 1 のグラフ] -> ループ\n\n\t# 有向グラフ G=(V,E) に対し、次のような条件を満たす有向グラフ G′=(V′,E′) を G の誘導部分グラフと呼ぶ。\n\t# V′ は V の (空でない) 部分集合である。\n\t# E′ は、E の辺であって両端点がともに V′ に含まれるものすべてを含む集合である。\n\n\t# -> ループでも、ショートカットできるようなループはだめ\n\n\t# 例: 1 -> 2 -> 3 -> 4 -> 5\n\t#     ^    |         ^    |\n\t#     |    ----------|    |\n\t#     ---------------------\n\t# V' = {1, 2, 3, 4, 5} としてしまうと、\n\t# E' = {(1->2), (2->3), (3->4), (2->4), (4->5), (5->1)}\n\t# となってしまい、この誘導部分グラフG'=(V', E')において、\n\t# 頂点2の出次数が2になってしまう。（頂点4の入次数も2になってしまう）\n\t# V' = {1, 2, 4, 5} とすれば、\n\t# E' = {(1->2), (2->4), (4->5), (5->1)}\n\t# となり、すべての頂点の入次数が 1、出次数が 1 となる\n\t\n\t# つまり、ショートカットできない最短のループを1つでも見つければよい\n\t\n\tmin_route = None\n\tfor s in range(1, N+1):\n\t\t# 各頂点を開始点にしてループを探す\n\t\troute = find_shortest_cycle(G, s)\n\t\t# ループが複数ある場合、短いほうを採用\n\t\tif route:\n\t\t\tif min_route is None or len(route) < len(min_route):\n\t\t\t\tmin_route = route\n\t\n\tif min_route:\n\t\tprint(len(min_route), *min_route, sep='\\n')\n\telse:\n\t\tprint(-1)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "import sys\ninput = lambda: sys.stdin.readline().rstrip()\ninpl = lambda: list(map(int,input().split()))\nN, M = inpl()\nuv = [ set() for _ in range(N)]\nvu = [ set() for _ in range(N)]\nfor _ in range(M):\n\tA, B = inpl()\n\tuv[A-1].add(B-1)\n\tvu[B-1].add(A-1)\n\nEMPTY, LOOP, TREE = 0, 1, 2\nENTER, EXIT = 0, 1\nstatus = [EMPTY] * N\nfor s in range(N):\n\tstates_pool = [(s,[],ENTER)]\n\twhile states_pool:\n\t\tu, chain, flag = states_pool.pop()\n\t\tif flag == EXIT or status[u] == TREE:\n\t\t\tstatus[u] = TREE\n\t\t\tcontinue\n\t\telif status[u] == LOOP:\n\t\t\tbreak\n\t\telse: # ENTER, EMPTY\n\t\t\tstatus[u] = LOOP\n\t\t\tstates_pool.append((u,chain,EXIT))\n\t\t\tnew_chain = chain.copy()\n\t\t\tnew_chain.append(u)\n\t\t\tfor c in uv[u]:\n\t\t\t\tstates_pool.append((c, new_chain, ENTER))\n\telse:\n\t\tcontinue\n\tbreak\nelse:\n\tprint(-1)\n\treturn\n\nn = 0\nwhile chain[n] != u:\n\tn += 1\nchain = chain[n:]\nL = len(chain)\nnextnode = [None]*N\nfor i in range(L-1):\n\tnextnode[chain[i]] = chain[i+1]\nnextnode[chain[L-1]] = chain[0]\npos = [None]*N\nfor p in range(len(chain)):\n\tpos[chain[p]] = p\ni = 0\nwhile i < L:\n\th = 1\n\tc = chain[(i+1)%L]\n\tfor j in uv[chain[i % L]]:\n\t\tp = pos[j]\n\t\tif p is None:\n\t\t\tcontinue\n\t\telse:\n\t\t\tif (p-i)%L > h:\n\t\t\t\th = (p-i)%L\n\t\t\t\tc = j\n\tnextnode[chain[i % L]] = c\n\ti += 1\n\twhile chain[i % L] != c:\n\t\tpos[chain[i % L]] = None\n\t\ti += 1\n\nloop = [c]\nk = c\nwhile nextnode[k] != c:\n\tk = nextnode[k]\n\tloop.append(k)\nprint(len(loop))\nfor l in loop:\n\tprint(l+1)\n", "import sys\nsys.setrecursionlimit(10**7)\ndef main():\n\tN, M = list(map(int, input().split()))\n\tl = [[] for _ in range(N)]\n\tfor _ in range(M):\n\t\ta, b = list(map(int, input().split()))\n\t\tl[a-1].append(b-1)\n\tc = [0] * N\n\tloop = []\n\tdef cyclic(n):\n\t\tif c[n] == 2:\n\t\t\treturn False\n\t\tif c[n] == 1:\n\t\t\tloop.append(n)\n\t\t\treturn True\n\t\tc[n] = 1\n\t\tfor i in l[n]:\n\t\t\tif cyclic(i):\n\t\t\t\tloop.append(n)\n\t\t\t\treturn True\n\t\tc[n] = 2\n\t\treturn False\n\tfor i in range(N):\n\t\tif cyclic(i):\n\t\t\tbreak\n\tif len(loop) == 0:\n\t\tprint((-1))\n\t\treturn\n\tprint((0))\n\treturn\nmain()\n", "import sys\nfrom collections import deque\n\n\ndef solve():\n\tN, M = map(int, input().split())\n\tedges = [set() for _ in range(N+1)]\n\tfor a, b in (map(int, line.split()) for line in sys.stdin):\n\t\tedges[a].add(b)\n\n\t# 答えが見つかるまで、スタート地点は全て試します\n\tfor start in range(1, N+1):\n\t\tvisited = [0]*(N+1)\n\n\t\tdq = deque([(start, {start})])\n\t\tvisited[start] = 1\n\n\t\twhile dq:\n\t\t\t# 点と、これまで通ってきた頂点を取り出す\n\t\t\tv, route = dq.popleft()\n\t\t\t# これまで通ってきた頂点集合と、行き先の頂点集合の積集合をとる\n\t\t\ts = route & edges[v]\n\t\t\t# s=={start}でなければuとおr sが空集合でも通る。sが何やらいろいろあると、通れない。\n\t\t\tif not (not s or s == {start}):\n\t\t\t\tcontinue\n\t\t\tfor dest in edges[v]:\n\t\t\t\t# startに戻ってきたら出力して終了\n\t\t\t\tif dest == start:\n\t\t\t\t\tprint(len(route))\n\t\t\t\t\tprint(*route, sep='\\n')\n\t\t\t\t\treturn\n\t\t\t\t# 訪問済みであれば、スルー\n\t\t\t\tif visited[dest]:\n\t\t\t\t\tcontinue\n\t\t\t\tvisited[dest] = 1\n\t\t\t\t# destを始点として、通ってきた頂点にdestを追加したもの\n\t\t\t\tdq.append((dest, route | {dest}))\n\n\tprint(-1)\n\n\ndef __starting_point():\n\tsolve()\n\n__starting_point()\n", "import sys\nfrom collections import deque\nN, M = map(int, input().split())\nedges = [[] for i in range(N)]\nAB = []\nfor _ in range(M):\n\ta, b = map(int, input().split())\n\tedges[a-1].append(b-1)\n\tAB.append((a-1, b-1))\ndef BFS(s):\n\tprev = [-1]*N\n\tque = deque([s])\n\twhile que:\n\t\tv = que.pop()\n\t\tfor nv in edges[v]:\n\t\t\tif nv == s:\n\t\t\t\tprev[nv] = v\n\t\t\t\treturn (s, prev)\n\t\t\tif prev[nv]<0:\n\t\t\t\tque.append(nv)\n\t\t\t\tprev[nv] = v\n\treturn (-1, prev)\nfor v in range(N):\n\tv0, prev = BFS(v)\n\tif v0>=0:\n\t\tbreak\nif v0<0:\n\tprint(-1)\n\treturn\ncircle = set()\ncircle.add(v0)\npv = prev[v0]\nwhile pv != v0:\n\tcircle.add(pv)\n\tpv = prev[pv]\nfor a, b in AB:\n\tif a in circle and b in circle and prev[b] != a:\n\t\tpv = prev[b]\n\t\twhile pv != a:\n\t\t\tcircle.remove(pv)\n\t\t\tpv = prev[pv]\n\t\tprev[b] = a\nprint(len(circle))\nfor i in circle:\n\tprint(i+1)\n", "import numpy as np\nfrom scipy.sparse.csgraph import dijkstra\n\ndef get_path(start, goal, pred):\n\treturn get_path_row(start, goal, pred[start])\n\ndef get_path_row(start, goal, pred_row):\n\tpath = []\n\ti = goal\n\twhile i != start and i >= 0:\n\t\tpath.append(i)\n\t\ti = pred_row[i]\n\tif i < 0:\n\t\treturn []\n\tpath.append(i)\n\treturn path[::-1]\nN, M = map(int,input().split())\ng = [[np.inf]*(2*N) for _ in range(2*N)]\nfor i in range(M):\n\ta,b = map(int,input().split())\n\ta -= 1\n\tb -= 1\n\tg[a][b] = 1\n\tg[a][b+N] = 1\n\tg[a+N][b] = 1\n\nans = np.inf\nj = -1\nd = dijkstra(g,return_predecessors=True)\n\nfor i in range(N):\n\tif d[0][i][i+N] < ans:\n\t\tans = int(d[0][i][i+N])\n\t\tj = i\n\nif ans != np.inf:\n\tpath = get_path(j,j+N,d[1])[::-1][:-1]\n\tpath = [node%N for node in path]\n\tprint(ans)\n\tfor node in path:\n\t\tprint(node+1)\nelse:\n\tprint(-1)\n", "from collections import*\nn,m=map(int,input().split())\nouts=defaultdict(list)\nins=defaultdict(int)\nfor _ in range(m):\n\ta,b=map(int,input().split())\n\touts[a-1]+=b-1,\n\tins[b-1]+=1\nq=deque(i for i in range(n)if ins[i]==0)\nres=[]\nwhile q:\n\tv=q.popleft()\n\tres+=v,\n\tfor w in outs[v]:\n\t\tins[w]-=1\n\t\tif ins[w]==0:\n\t\t\tq.append(w)\nprint(-(len(res)==n))\n", "import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nn, m = na()\ng = [[False] * n for _ in range(n)]\ngs = [[] for _ in range(n)]\nfor i in range(m):\n\ts, t = na()\n\tgs[s-1].append(t-1)\n\tg[s-1][t-1] = True\n\nans = 999999\nbest = None\nfor i in range(n):\n\tds = [9999999] * n\n\tprevs = [-1] * n\n\tds[i] = 0\n\tq = [i]\n\tqp = 0\n\twhile qp < len(q):\n\t\tcur = q[qp]\n\t\tqp += 1\n\t\tfor e in gs[cur]:\n\t\t\tif ds[e] > ds[cur] + 1:\n\t\t\t\tds[e] = ds[cur] + 1\n\t\t\t\tprevs[e] = cur\n\t\t\t\tq.append(e)\n\tfor j in range(n):\n\t\tif g[j][i]:\n\t\t\tif ds[j] + 1 < ans:\n\t\t\t\tans = ds[j] + 1\n\t\t\t\tbest = [0] * (ds[j]+1)\n\t\t\t\tbest[0] = i\n\t\t\t\tcur = j\n\t\t\t\tr = -1\n\t\t\t\twhile cur != i:\n\t\t\t\t\tbest[r] = cur\n\t\t\t\t\tr -= 1\n\t\t\t\t\tcur = prevs[cur]\n\nif not best:\n\tprint((-1))\nelse:\n\tprint(ans)\n\tfor x in best:\n\t\tprint((x+1))\n", "from collections import*\nn,m,*t=map(int,open(0).read().split())\ni,o,r=[0]*n,[[]for _ in'_'*n],[]\nfor a,b in zip(*[iter(t)]*2):\n\to[a-1]+=b-1,\n\ti[b-1]+=1\nq=deque(v for v in range(n)if i[v]<1)\nwhile q:\n\tv=q.popleft()\n\tr+=v,\n\tfor w in o[v]:\n\t\ti[w]-=1\n\t\tif i[w]==0:q+=w,\nprint(-(len(r)==n))\n", "import sys\nfrom collections import deque\n\n\ndef shave(fwd_link, bwd_link):\n\t# Vertices having no leaving link\n\tq = [v for v, links in enumerate(fwd_link) if not links]\n\twhile q:\n\t\tv = q.pop()\n\t\tfor u in bwd_link[v]:\n\t\t\tfwd_link[u].remove(v)\n\t\t\tif not fwd_link[u]:\n\t\t\t\tq.append(u)\n\t# Vertices having no entering link\n\tq = [v for v, links in enumerate(bwd_link) if not links]\n\twhile q:\n\t\tv = q.pop()\n\t\tfor u in fwd_link[v]:\n\t\t\tbwd_link[u].remove(v)\n\t\t\tif not bwd_link[u]:\n\t\t\t\tq.append(u)\n\n\ndef bfs(s, fwd_link):\n\tpredecessors = [-1] * n\n\tq = deque()\n\tfor v in fwd_link[s]:\n\t\tpredecessors[v] = s\n\t\tq.append((v, s))\n\tvisited = set()\n\twhile q:\n\t\tv, p = q.popleft()\n\t\tif v in visited:\n\t\t\tcontinue\n\t\tvisited.add(v)\n\t\tpredecessors[v] = p\n\n\t\tif v == s:\n\t\t\tbreak\n\n\t\tfor u in fwd_link[v]:\n\t\t\tif u not in visited:\n\t\t\t\tq.append((u, v))\n\n\tcircuit = {s}\n\tv = predecessors[s]\n\twhile v != s:\n\t\tcircuit.add(v)\n\t\tv = predecessors[v]\n\n\treturn predecessors, circuit\n\n\ndef check(predecessors, circuit, fwd_link):\n\tfor v in circuit:\n\t\tfwd_link[v].intersection_update(circuit)\n\t\tif len(fwd_link[v]) == 1:\n\t\t\tcontinue\n\t\tfor u in fwd_link[v]:\n\t\t\tif predecessors[u] != v:\n\t\t\t\treturn u\n\treturn -1\n\n\ndef print_ans(circuit):\n\tprint((len(circuit)))\n\tprint((*(v + 1 for v in circuit)))\n\n\ndef solve(fwd_link, bwd_link):\n\tshave(fwd_link, bwd_link)\n\ts = -1\n\tfor s, (f, b) in enumerate(zip(fwd_link, bwd_link)):\n\t\tif f and b:\n\t\t\tbreak\n\telse:\n\t\tprint((-1))\n\t\treturn\n\n\twhile True:\n\t\tpredecessors, circuit = bfs(s, fwd_link)\n\t\tres = check(predecessors, circuit, fwd_link)\n\t\tif res == -1:\n\t\t\tprint_ans(circuit)\n\t\t\tbreak\n\t\ts = res\n\n\nn, m = list(map(int, input().split()))\nfwd_link = [set() for _ in range(n)]\nbwd_link = [set() for _ in range(n)]\nfor line in sys.stdin:\n\ta, b = list(map(int, line.split()))\n\ta -= 1\n\tb -= 1\n\tfwd_link[a].add(b)\n\tbwd_link[b].add(a)\n\nsolve(fwd_link, bwd_link)\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\ndef SCC(N, edges):\n\t\"\"\" 強連結成分分解 \"\"\"\n\n\tnodes1 = [[] for i in range(N)]\n\tnodes2 = [[] for i in range(N)]\n\tfor u, v in edges:\n\t\tnodes1[u].append(v)\n\t\tnodes2[v].append(u)\n\n\tT = []\n\tvisited = [False] * N\n\tdef rec1(cur):\n\t\tvisited[cur] = True\n\t\tfor nxt in nodes1[cur]:\n\t\t\tif not visited[nxt]:\n\t\t\t\trec1(nxt)\n\t\t# 行き止まったところから順にTに入れていく\n\t\tT.append(cur)\n\n\t# グラフが連結とは限らないので全頂点やる\n\tfor u in range(N):\n\t\tif not visited[u]:\n\t\t\trec1(u)\n\n\tvisited = [False] * N\n\tgroup = [0] * N\n\tgrpcnt = 0\n\tdef rec2(cur):\n\t\tgroup[cur] = grpcnt\n\t\tvisited[cur] = True\n\t\tfor nxt in nodes2[cur]:\n\t\t\tif not visited[nxt]:\n\t\t\t\trec2(nxt)\n\n\t# 逆順で進めるところまで行く\n\tfor u in reversed(T):\n\t\tif not visited[u]:\n\t\t\trec2(u)\n\t\t\tgrpcnt += 1\n\treturn grpcnt, group\n\ndef bfs(N, nodes, src):\n\t\"\"\" BFS(一般グラフ、重みなし) \"\"\"\n\tfrom collections import deque\n\n\tque = deque([(src, -1, 0)])\n\tdist = [()] * N\n\tmn = INF\n\tend = -1\n\twhile que:\n\t\tu, prev, c = que.popleft()\n\t\t# 同じ強連結成分内のみでやる\n\t\tif group[u] != group[src]:\n\t\t\tcontinue\n\t\tif dist[u]:\n\t\t\t# 訪問済で始点に帰ってきたら、最短チェック\n\t\t\tif u == src:\n\t\t\t\tif c < mn:\n\t\t\t\t\tmn = c\n\t\t\t\t\tend = prev\n\t\t\tcontinue\n\t\tdist[u] = (c, prev)\n\t\tfor v in nodes[u]:\n\t\t\tque.append((v, u, c+1))\n\t# 経路、始点に戻ってくる最短距離、その直前の頂点を返す\n\treturn dist, mn, end\n\ndef get_route(s, t, res):\n\t\"\"\" s,t間の経路を取得 \"\"\"\n\tprev = t\n\tStoT = [t]\n\twhile prev != s:\n\t\tprev = res[prev][1]\n\t\tif prev == -1:\n\t\t\treturn None\n\t\tStoT.append(prev)\n\tStoT = StoT[::-1]\n\treturn StoT\n\nN, M = MAP()\nnodes = [[] for i in range(N)]\nedges = []\nfor i in range(M):\n\ta, b = MAP()\n\ta -= 1; b -= 1\n\tnodes[a].append(b)\n\tedges.append((a, b))\n\n# 強連結成分毎に見る\ngrpcnt, group = SCC(N, edges)\nans = INF\nfor i in range(N):\n\t# 経路、始点に戻ってくる最短距離、その直前の頂点\n\tdist, mn, end = bfs(N, nodes, i)\n\tif mn < ans:\n\t\tans = mn\n\t\troute = get_route(i, end, dist)\nif ans != INF:\n\tprint(ans)\n\t[print(u + 1) for u in route]\nelse:\n\t# そもそも閉路なし\n\tprint(-1)\n", "from collections import deque\n\nN, M = map(int, input().split())\nedge = [[] for _ in range(N)]\nfor _ in range(M):\n\tA,B = map(int, input().split())\n\tedge[A - 1].append(B - 1)\n\nans = []\nfor sta in range(N):\n\tprev = [-1] * N\n\tque = deque([sta])\n\n\twhile que:\n\t\tv = que.popleft()\n\t\tfor w in edge[v]:\n\t\t\tif w == sta: # 閉路発見\n\t\t\t\tpath = []\n\t\t\t\twhile v != -1:\n\t\t\t\t\tpath.append(v+1)\n\t\t\t\t\tv = prev[v]\n\t\t\t\tif (not ans) or (len(ans) > len(path)):\n\t\t\t\t\tans = path\n\t\t\t\tbreak\n\n\t\t\tif prev[w] != -1: continue\n\n\t\t\tprev[w] = v\n\t\t\tque.append(w)\n\nif ans:\n\tprint(len(ans))\n\tprint(*ans, sep='\\n')\nelse:\n\tprint(-1)\n", "import sys\nsys.setrecursionlimit(10**4)\ndef input():\n\treturn sys.stdin.readline()[:-1]\n\nn, m = map(int, input().split())\nadj = [[] for _ in range(n)]\nedges = []\nfor i in range(m):\n\ta, b = map(int, input().split())\n\tadj[a-1].append(b-1)\n\tedges.append((a-1, b-1))\n\nseen = [False for _ in range(n)]\nvisited = [False for _ in range(n)]\nbegin = -1\nhist = []\n\ndef dfs(x):\n\tnonlocal begin, hist\n\tif begin >= 0:\n\t\treturn\n\tseen[x] = True\n\thist.append(x)\n\tfor v in adj[x]:\n\t\tif visited[v]:\n\t\t\tcontinue\n\t\tif seen[v] == True and visited[v] == False:\n\t\t\tbegin = v\n\t\t\treturn\n\t\tdfs(v)\n\t\tif begin >= 0:\n\t\t\treturn\n\tvisited[x] = True\n\thist.pop()\n\treturn\n\nfor i in range(n):\n\tif begin < 0:\n\t\tdfs(i)\n\tif begin >= 0:\n\t\tbreak\n\nif begin < 0:\n\tprint(-1)\n\treturn\nelse:\n\tcycle = []\n\tincluded = [False for _ in range(n)]\n\tincluded[begin] = True\n\twhile hist and hist[-1] != begin:\n\t\tcycle.append(hist[-1])\n\t\tincluded[hist[-1]] = True\n\t\thist.pop()\n\tcycle.append(begin)\n\thist.pop()\n\n\twhile True:\n\t\tmeets = True\n\t\tl = len(cycle)\n\t\tind = [-1 for _ in range(n)]\n\t\tfor i in range(l):\n\t\t\tind[cycle[i]] = i\n\t\tfor i in range(l):\n\t\t\tif meets == False:\n\t\t\t\tbreak\n\t\t\tfor v in adj[cycle[(i+1)%l]]:\n\t\t\t\tif included[v] == True and v != cycle[i]:\n\t\t\t\t\tmeets = False\n\t\t\t\t\tnew_start_id, new_end_id = ind[v], (i+1)%l\n\t\t\t\t\tbreak\n\n\t\tif meets:\n\t\t\tprint(len(cycle))\n\t\t\tprint(*[c+1 for c in cycle], sep=\"\\n\")\n\t\t\tbreak\n\t\telse:\n\t\t\tnew_cycle = []\n\t\t\tincluded = [False for _ in range(n)]\n\t\t\tcur = new_end_id\n\t\t\twhile cur != new_start_id:\n\t\t\t\tnew_cycle.append(cycle[cur])\n\t\t\t\tincluded[cycle[cur]] = True\n\t\t\t\tcur = (cur+1)%l\n\t\t\tnew_cycle.append(cycle[new_start_id])\n\t\t\tcycle = new_cycle\n", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\ngraph = [[] for _ in range(n)]\nfor i in range(m):\n\ta, b = map(int, input().split())\n\ta -= 1\n\tb -= 1\n\tgraph[a].append(b)\n\ndist = [[-1] * n for _ in range(n)]\nfor i in range(n):\n\tqueue = deque([(i, 0)])\n\twhile queue:\n\t\tv, c = queue.popleft()\n\t\tfor v_next in graph[v]:\n\t\t\tif dist[i][v_next] == -1:\n\t\t\t\tdist[i][v_next] = c + 1\n\t\t\t\tqueue.append((v_next, c+1))\n\n# print(dist)\nans_len = n + 1\nfor i in range(n):\n\tif dist[i][i] != -1:\n\t\tans_len = min(ans_len, dist[i][i])\nif ans_len == n + 1:\n\tprint(-1)\nelse:\n\tfor i in range(n):\n\t\tif dist[i][i] == ans_len:\n\t\t\tstart_v = i\n\t\t\tbreak\n\n\tdist = [-1] * n\n\tprev_v = [-1] * n\n\tqueue = deque([(start_v, 0)])\n\twhile queue:\n\t\tv, c = queue.popleft()\n\t\tif v == start_v and c != 0:\n\t\t\tbreak\n\t\tfor v_next in graph[v]:\n\t\t\tif dist[v_next] == -1:\n\t\t\t\tdist[v_next] = c + 1\n\t\t\t\tprev_v[v_next] = v\n\t\t\t\tqueue.append((v_next, c+1))\n\n\tans = []\n\t# print(start_v)\n\t# print(dist)\n\t# print(prev_v)\n\tv = start_v\n\tfor i in range(ans_len):\n\t\tans.append(v+1)\n\t\tv = prev_v[v]\n\n\tprint(ans_len)\n\tprint(*ans, sep='\\n')\n", "from collections import deque\n\n     \ndef dfs(N, AB):\n\tstatus = [-1] * N\n\tfor i in range(N):\n\t\tif status[i] == 1:\n\t\t\tcontinue\n\t\tstack = [i]\n\t\tstatus[i] = 0\n\t\twhile stack:\n\t\t\tv = stack[-1]\n\t\t\tif AB[v]:\n\t\t\t\tn = AB[v].popleft()\n\t\t\t\tif status[n] == -1:\n\t\t\t\t\tstack.append(n)\n\t\t\t\t\tstatus[n] = 0\n\t\t\t\telse:\n\t\t\t\t\tif n in stack:\n\t\t\t\t\t\tidx = stack.index(n)\n\t\t\t\t\t\tcycle = stack[idx:]\n\t\t\t\t\t\treturn cycle\n\t\t\telse:                  \n\t\t\t\tstatus[v] = 1\n\t\t\t\tstack.pop()\n\treturn False\n\n\ndef find_smaller_cycle(cycle, AB):\n\ti = 0\n\twhile i < len(cycle):\n\t\tv = cycle[i]\n\t\tif AB[v]:\n\t\t\tn = AB[v].popleft()\n\t\t\tif n in cycle:\n\t\t\t\tr = cycle.index(n)\n\t\t\t\tif i < r:\n\t\t\t\t\tcycle = cycle[:i+1] + cycle[r:]\n\t\t\t\telse:\n\t\t\t\t\tcycle = cycle[r:i+1]\n\t\t\t\ti = cycle.index(v)\n\t\telse:\n\t\t\ti += 1\n\t\t\t\n\treturn cycle\n\n\nN, M = [int(i) for i in input().split()]\nAB = [deque() for _ in range(N)]\nfor _ in range(M):\n\tA, B = [int(i) - 1 for i in input().split()]\n\tAB[A].append(B)\n\t\t\t\t\t  \ncycle = dfs(N, AB)\nif not cycle:\n\tprint(-1)\nelse:\n\tcycle = find_smaller_cycle(cycle, AB)\n\t\t\t\n\tprint(len(cycle))\n\tfor v in cycle:\n\t\tprint(v + 1)\n", "from collections import deque\n\nn,m = map(int,input().split())\ng = [list() for _ in range(n+1)]\nen = [0]*(n+1)\nfor _ in range(m):\n\tu,v = map(int,input().split())\n\tg[u].append(v)\n\ten[v] += 1\nq = deque(i for i in range(1,n+1) if en[i] == 0)\ndone = list()\nwhile q:\n\tv = q.popleft()\n\tfor x in g[v]:\n\t\ten[x] -= 1\n\t\tif not en[x]:\n\t\t\tq.append(x)\n\tdone.append(v)\nprint(-1 if len(done) == n else 0)\n", "import sys\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n\ndef main():\n\tdef bfs(u):\n\t\tdist = [inf] * n\n\t\tcur = [u]\n\t\tpre = [-1] * n\n\t\tdist[u] = 0\n\t\td = 0\n\t\twhile cur:\n\t\t\td += 1\n\t\t\tnxt = []\n\t\t\tfor v in cur:\n\t\t\t\tfor kv in to[v]:\n\t\t\t\t\tif dist[kv] != inf: continue\n\t\t\t\t\tdist[kv] = d\n\t\t\t\t\tpre[kv] = v\n\t\t\t\t\tnxt.append(kv)\n\t\t\tcur = nxt\n\t\tmn = [inf, -1]\n\t\tfor v in range(n):\n\t\t\tif v == u: continue\n\t\t\tif u in to[v]:\n\t\t\t\tmn = min(mn, [dist[v], v])\n\n\t\t# print(dist)\n\t\t# print(mn)\n\t\t# print(pre)\n\t\tres = []\n\t\tv = mn[1]\n\t\tif mn[0] == inf:\n\t\t\treturn [0] * (n + 1)\n\t\tfor _ in range(mn[0] + 1):\n\t\t\tres.append(v)\n\t\t\tv = pre[v]\n\t\treturn res\n\n\tinf = 10 ** 9\n\tn, m = list(map(int, input().split()))\n\tto = defaultdict(set)\n\tfor _ in range(m):\n\t\tu, v = list(map(int, input().split()))\n\t\tto[u - 1].add(v - 1)\n\tans = [0] * (n + 1)\n\tfor u in range(n):\n\t\tres = bfs(u)\n\t\tif len(res) < len(ans):\n\t\t\tans = res\n\tif len(ans) == n + 1:\n\t\tprint((-1))\n\telse:\n\t\tprint((len(ans)))\n\t\tfor u in ans:\n\t\t\tprint((u + 1))\n\nmain()\n", "from collections import*\nn,m,*t=list(map(int,open(0).read().split()))\ni,o,r=[0]*n,[[]for _ in'_'*n],[]\nfor a,b in zip(*[iter(t)]*2):\n\to[a-1]+=b-1,\n\ti[b-1]+=1\nq=deque(v for v in range(n)if i[v]<1)\nwhile q:\n\tv=q.popleft()\n\tr+=v,\n\tfor w in o[v]:\n\t\ti[w]-=1\n\t\tif i[w]==0:q+=w,\nprint((-(len(r)==n)))\n", "from collections import deque\nimport sys\n\ninput = sys.stdin.buffer.readline\n\nn, m = map(int, input().split())\ngraph = [[] for _ in range(n + 1)]\nfor _ in range(m):\n\ta, b = map(int, input().split())\n\tgraph[a].append(b)\ninfi = 10 ** 10\n\n\ndef bfs(start):\n\t# res = 頂点数, サイクル最後の頂点、で持つ\n\tres = (infi, -1)\n\tdist = [-1] * (n + 1)\n\tpar = [-1] * (n + 1)\n\tque = deque([])\n\tque.append(start)\n\tdist[start] = 0\n\twhile que:\n\t\tv = que.popleft()\n\t\tfor u in graph[v]:\n\t\t\tif dist[u] >= 0:\n\t\t\t\tcontinue\n\t\t\tdist[u] = dist[v] + 1\n\t\t\tpar[u] = v\n\t\t\tque.append(u)\n\tfor i in range(1, n + 1):\n\t\tif i == start:\n\t\t\tcontinue\n\t\tif dist[i] == -1:\n\t\t\tcontinue\n\t\tif start in graph[i]:\n\t\t\tif res[0] > dist[i] + 1:\n\t\t\t\tres = (dist[i] + 1, i)\n\tif res[0] == infi:\n\t\treturn -1, []\n\tcycle_num = res[0]\n\tv = res[1]\n\tCYCLE = deque([])\n\twhile v > 0:\n\t\tCYCLE.appendleft(v)\n\t\tv = par[v]\n\n\treturn cycle_num, CYCLE\n\n\njisho = {}\nans = (-1, [])\ncycle_num = infi\nkouho_v = -1\nfor i in range(1, n + 1):\n\ttemp_num, temp_cycle = bfs(i)\n\tif temp_num == -1:\n\t\tcontinue\n\tif cycle_num > temp_num:\n\t\tcycle_num = min(cycle_num, temp_num)\n\t\tkouho_v = i\n\t\tjisho[i] = temp_cycle\n\nif kouho_v == -1:\n\tprint(-1)\n\treturn\nelse:\n\tans_num = cycle_num\n\tans_list = jisho[kouho_v]\n\tprint(cycle_num)\n\tprint(*ans_list, sep=\"\\n\")\n", "N,M = map(int,input().split())\nAB = [tuple(map(int,input().split())) for i in range(M)]\n\nes = [[] for _ in range(N)]\nfor a,b in AB:\n\ta,b = a-1,b-1\n\tes[a].append(b)\n\nfrom collections import deque\n\nmindist = N\nans = None\nfor g in range(N):\n\tfor s in es[g]:\n\t\tq = deque([s])\n\t\tdist = [N]*N\n\t\tdist[s] = 0\n\t\tprev = [-1]*N\n\t\twhile q:\n\t\t\tv = q.popleft()\n\t\t\tif v==g:\n\t\t\t\tbreak\n\t\t\tfor to in es[v]:\n\t\t\t\tif dist[to] <= dist[v] + 1: continue\n\t\t\t\tdist[to] = dist[v] + 1\n\t\t\t\tprev[to] = v\n\t\t\t\tq.append(to)\n\t\telse:\n\t\t\tcontinue\n\t\tif dist[g] >= mindist: continue\n\t\tmindist = dist[g]\n\t\tv = g\n\t\ttmp = [v+1]\n\t\twhile prev[v] >= 0:\n\t\t\tv = prev[v]\n\t\t\ttmp.append(v+1)\n\t\tans = tmp\n\nif ans:\n\tprint(len(ans))\n\tprint(*ans, sep='\\n')\nelse:\n\tprint(-1)\n", "import sys\nsys.setrecursionlimit(100000)\n\nN, M = list(map(int, input().split()))\nAB = [list(map(int, input().split())) for _ in range(M)]\n\nR = {}\nfor a, b in AB:\n\tif a in R:\n\t\tR[a].append(b)\n\telse:\n\t\tR[a] = [b]\n\ndef nasu(x, e):\n\tD[x] = 1\n\tif x not in R:\n\t\treturn []\n\tfor i in R[x]:\n\t\tif i == e:\n\t\t\treturn [i]\n\t\tif D[i] == 0:\n\t\t\tt = nasu(i, e)\n\t\t\tif t != []:\n\t\t\t\treturn [i] + t\n\treturn []\n\nfor i in range(1, N + 1):\n\tD = [0] * (N + 1)\n\tL = nasu(i, i)\n\tif L != []:\n\t\tbreak\nelse:\n\tprint(-1)\n\treturn\n\nD = [0] * (N + 1)\nfor i in L:\n\tD[i] = 1\n\nLEN = len(L)\nL = L + L\n\ni = 0\nwhile i < LEN:\n\tfor j in range(i + LEN - 1, i, -1):\n\t\tif D[L[j]] != 0 and L[j] in R[L[i]]:\n\t\t\tfor k in range(j - 1, i, -1):\n\t\t\t\tD[L[k]] = 0\n\t\t\ti = j\n\t\t\tbreak\n\nA = []\nfor i in range(LEN):\n\tif D[L[i]] == 1:\n\t\tA.append(L[i])\n\nprint(len(A))\nfor i in A:\n\tprint(i)\n", "from collections import deque\n\nN, M = map(int, input().split())\nedge = [[] for _ in range(N)]\nfor _ in range(M):\n\tA,B = map(int, input().split())\n\tedge[A - 1].append(B - 1)\n\nans = []\nfor sta in range(N):\n\tprev = [-1] * N\n\tque = deque([sta])\n\n\twhile que:\n\t\tv = que.popleft()\n\t\tfor w in edge[v]:\n\t\t\tif w == sta:\n\t\t\t\tpath = []\n\t\t\t\twhile v != -1:\n\t\t\t\t\tpath.append(v+1)\n\t\t\t\t\tv = prev[v]\n\t\t\t\tif (not ans) or (len(ans) > len(path)):\n\t\t\t\t\tans = path\n\t\t\t\tbreak\n\n\t\t\tif prev[w] != -1: continue\n\n\t\t\tprev[w] = v\n\t\t\tque.append(w)\n\nif ans:\n\tprint(len(ans))\n\tprint(*ans, sep='\\n')\nelse:\n\tprint(-1)\n", "from collections import deque\nN,M=map(int,input().split())\nG=[[] for i in range(N)]\nfor i in range(M):\n\ta,b=map(int,input().split())\n\tG[a-1].append(b-1)\ndeg=[0 for i in range(N)]\nfor i in range(N):\n\tfor p in G[i]:\n\t\tdeg[p]+=1\nq=deque(i for i in range(N) if deg[i]==0)\nres=[]\nwhile q:\n\tu=q.popleft()\n\tres.append(u)\n\tfor v in G[u]:\n\t\tdeg[v]-=1\n\t\tif deg[v]==0:\n\t\t\tq.append(v)\nif len(res)==N:\n\tprint(-1)\n\treturn\nX={i for i in range(N)}\nfor st in range(N):\n\tpre=[-1 for i in range(N)]\n\tq=deque([st])\n\tflag=0\n\twhile(q):\n\t\tr=q.popleft()\n\t\tfor p in G[r]:\n\t\t\tif pre[p]==-1:\n\t\t\t\tpre[p]=r\n\t\t\t\tq.append(p)\n\t\t\tif pre[st]!=-1:\n\t\t\t\tY={st}\n\t\t\t\ttmp=pre[st]\n\t\t\t\twhile(tmp!=st):\n\t\t\t\t\tY.add(tmp)\n\t\t\t\t\ttmp=pre[tmp]\n\t\t\t\tif len(Y)<len(X):\n\t\t\t\t\tX={i for i in Y}\n\t\t\t\tflag=1\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tbreak\nprint(len(X))\nfor i in X:\n\tprint(i+1)\n", "N,M = map(int, input().split())\nE = [[] for _ in range(N)]\nfor _ in range(M):\n\ta, b = map(int, input().split())\n\tE[a-1].append(b-1)\n\nfrom collections import deque\n\nd = N+1\nflag = False\nfor i in range(N):\n\tfor v in E[i]:\n\t\tq = deque()\n\t\tq.append(v)\n\t\tused = [N+1]*N\n\t\tused[v] = 1\n\t\twhile q:\n\t\t\ttemp = q.popleft()\n\t\t\tif used[temp] > d:\n\t\t\t\tbreak\n\t\t\tfor u in E[temp]:\n\t\t\t\tif u == i and d > used[temp]+1:\n\t\t\t\t\td = used[temp]+1\n\t\t\t\t\tmemo = [temp, u]\n\t\t\t\t\tq = deque()\n\t\t\t\t\tflag = True\n\t\t\t\t\tbreak\n\t\t\t\telif u == i:\n\t\t\t\t\tq = deque()\n\t\t\t\t\tbreak\n\t\t\t\tif used[u] < N+1:\n\t\t\t\t\tcontinue\n\t\t\t\tused[u] = used[temp]+1\n\t\t\t\tq.append(u)\n\nimport heapq\nif flag:\n\th = []\n\tdist = [N+1]*N\n\tdist[memo[1]] = 0\n\tfor v in E[memo[1]]:\n\t\theapq.heappush(h, (1, v))\n\twhile True:\n\t\ttemp = heapq.heappop(h)\n\t\tif dist[temp[1]] < N+1:\n\t\t\tcontinue\n\t\tdist[temp[1]] = temp[0]\n\t\tif temp[1] == memo[0]:\n\t\t\tbreak\n\t\tfor v in E[temp[1]]:\n\t\t\tif dist[v] < N+1:\n\t\t\t\tcontinue\n\t\t\theapq.heappush(h, (temp[0]+1, v))\n\tans = [memo[0]]\n\td = dist[memo[0]]-1\n\tprev = memo[0]\n\twhile d >= 0:\n\t\tfor i in range(N):\n\t\t\tif dist[i] == d and prev in E[i]:\n\t\t\t\tprev = i\n\t\t\t\tans.append(i)\n\t\t\t\td -= 1\n\t\t\t\tbreak\n\tprint(len(ans))\n\tfor i in ans:\n\t\tprint(i+1)\nelse:\n\tprint(-1)\n", "from collections import deque\n\nN, M = map(int, input().split())\n\nedges = [[] for _ in range(N)]\n\nfor _ in range(M):\n\tfr, to = map(int, input().split())\n\tfr -= 1\n\tto -= 1\n\tedges[fr].append(to)\n\nfor start in range(N):\n\tst = deque([(start, True)])\n\tL = deque()\n\tV = set()\n\n\twhile st:\n\t\tnow, isFirst = st.pop()\n\t\tif isFirst:\n\t\t\tL.append(now)\n\n\t\t\tif now in V:\n\t\t\t\tbreak\n\n\t\t\tV.add(now)\n\n\t\t\tst.append((now, False))\n\n\t\t\tfor to in edges[now]:\n\t\t\t\tst.append((to, True))\n\t\telse:\n\t\t\tL.pop()\n\t\t\tV.remove(now)\n\telse:\n\t\tcontinue\n\n\tprint(0)\n\tprint()\n\treturn\n\n\tloopStart = L[-1]\n\twhile L[0] != loopStart:\n\t\tL.popleft()\n\n\tprint(len(L) - 1)\n\tans = [v + 1 for v in L]\n\tprint(*ans[: -1], sep='\\n')\n\treturn\n\nprint(-1)\n", "def f_pure():\n\t# 参考: http://drken1215.hatenablog.com/entry/2019/09/29/012000\n\tfrom collections import deque\n\tN, M = [int(i) for i in input().split()]\n\n\tgraph = [[] for _ in range(N)]\n\tfor _ in range(M):\n\t\ta, b = [int(i) for i in input().split()]\n\t\tgraph[a - 1].append(b - 1)\n\n\tshortest = N + 1\n\tans = []\n\tfor s in range(N):\n\t\t# 頂点sから他の辺へ行くには何個の頂点を辿る必要があるか計算する\n\t\tdist = [-1] * N\n\t\tprevious = [-1] * N  # [n]: 頂点nへはどこから来たか\n\t\tqueue = deque([s])\n\t\tdist[s] = 0\n\t\twhile queue:\n\t\t\tv = queue.pop()\n\t\t\tfor next_node in graph[v]:\n\t\t\t\tif dist[next_node] == -1:\n\t\t\t\t\tdist[next_node] = dist[v] + 1\n\t\t\t\t\tprevious[next_node] = v\n\t\t\t\t\tqueue.appendleft(next_node)\n\n\t\tfor t in range(N):\n\t\t\tif t == s or dist[t] == -1:\n\t\t\t\tcontinue  # 頂点tは始点と同じ、または、始点から到達不可能\n\t\t\tfor next_node in graph[t]:\n\t\t\t\tif next_node == s:  # ループ完成\n\t\t\t\t\tans_tmp = [s]  # 解になりうる頂点集合\n\t\t\t\t\tcurrent_node = t\n\t\t\t\t\t# 頂点tからsまで巻き戻していく\n\t\t\t\t\twhile current_node != s:\n\t\t\t\t\t\tans_tmp.append(current_node)\n\t\t\t\t\t\tcurrent_node = previous[current_node]\n\t\t\t\t\t# 頂点集合の濃度が減少した\n\t\t\t\t\tif shortest > len(ans_tmp):\n\t\t\t\t\t\tshortest = len(ans_tmp)\n\t\t\t\t\t\tans = ans_tmp\n\n\tif shortest == N + 1:\n\t\treturn -1  # 閉路がなかった。条件を満たす頂点集合はない\n\treturn ' '.join(map(str, [len(ans)] + sorted(v + 1 for v in ans)))\n\nprint(f_pure())\n", "from collections import deque\n\nN, M = map(int, input().split())\n\nedges = [[] for _ in range(N)]\nedgesR = [[] for _ in range(N)]\n\nfor _ in range(M):\n\tfr, to = map(int, input().split())\n\tfr -= 1\n\tto -= 1\n\tedges[fr].append(to)\n\tedgesR[to].append(fr)\n\nfor start in range(N):\n\tst = deque([(start, True)])\n\tL = deque()\n\tV = set()\n\n\twhile st:\n\t\tnow, isFirst = st.pop()\n\t\tif isFirst:\n\t\t\tL.append(now)\n\n\t\t\tif now in V:\n\t\t\t\tbreak\n\n\t\t\tV.add(now)\n\n\t\t\tst.append((now, False))\n\n\t\t\tfor to in edges[now]:\n\t\t\t\tst.append((to, True))\n\t\telse:\n\t\t\tL.pop()\n\t\t\tV.remove(now)\n\telse:\n\t\tcontinue\n\n\tloopStart = L.pop()\n\twhile L[0] != loopStart:\n\t\tL.popleft()\n\tV = set(L)\n\tdist = [float('inf')] * N\n\tque = deque([(loopStart, 0)])\n\n\twhile que:\n\t\tnow, d = que.popleft()\n\n\t\tif dist[now] <= d:\n\t\t\tif now == loopStart:\n\t\t\t\tdist[loopStart] = d\n\t\t\t\tbreak\n\t\t\tcontinue\n\t\tdist[now] = d\n\n\t\tfor to in edges[now]:\n\t\t\tif to in V:\n\t\t\t\tque.append((to, d + 1))\n\n\tans = [loopStart]\n\tnow = loopStart\n\twhile dist[now] > 1:\n\t\tfor back in edgesR[now]:\n\t\t\tif dist[now] - 1 == dist[back]:\n\t\t\t\tans.append(back)\n\t\t\t\tnow = back\n\t\t\t\tbreak\n\n\tans = set([a + 1 for a in ans])\n\tprint(len(ans))\n\tprint(*ans, sep='\\n')\n\treturn\n\nprint(-1)\n", "import sys\nsys.setrecursionlimit(10**7)\nn,m=list(map(int,input().split()))\ng=[[] for _ in range(n)]\nfor _ in range(m):\n\tu,v=list(map(int,input().split()))\n\tu,v=u-1,v-1\n\tg[u].append(v)\nmi=set(range(n))\nflg=False\ndef func(path):\n\tchk=set(path)\n\tif len(path)!=2:\n\t\tfor i,v in enumerate(path):\n\t\t\tnvs=[nv for nv in g[v] if nv in chk]\n\t\t\tif len(nvs)==1:continue\n\t\t\tfor nv in nvs:\n\t\t\t\tif nv==path[(i+1)%len(path)]:continue\n\t\t\t\tary=[nv]\n\t\t\t\tfor j,vj in enumerate(path):\n\t\t\t\t\tif vj==nv:break\n\t\t\t\tif i>j:\n\t\t\t\t\tary=path[j:i+1]\n\t\t\t\telse:\n\t\t\t\t\tary=path[:i+1]+path[j:]\n\t\t\t\t#print(path,ary,i,j)\n\t\t\t\tfunc(ary)\n\tprint((len(path)))\n\tfor v in path:\n\t\tprint((v+1))\n\treturn\n\ndef dfs(v,seen):\n\tmi.discard(v)\n\tfor nv in g[v]:\n\t\tif seen[nv]!=-1:# 巡回閉路\n\t\t\tseen[nv]=v\n\t\t\tpath=[v]\n\t\t\tchk={v}\n\t\t\twhile seen[v] not in chk:\n\t\t\t\tv=seen[v]\n\t\t\t\tpath.append(v)\n\t\t\t\tchk.add(v)\n\t\t\tpath.reverse()\n\t\t\tfunc(path)\n\t\telse:\n\t\t\tseen[nv]=v\n\t\t\tdfs(nv,seen)\n\t\t\tseen[nv]=-1\nwhile mi:\n\tv=mi.pop()\n\tseen=[-1]*n\n\tdfs(v,seen)\nprint((-1))\nreturn\n", "import sys\nsys.setrecursionlimit(10**7)\n\ndef main():\n\tN, M = list(map(int, input().split()))\n\tV = [[] for _ in range(N)]\n\tfor _ in range(M):\n\t\ta, b = list(map(int, input().split()))\n\t\tV[a - 1].append(b - 1)\n\tC = [0] * N\n\tdef dfs(n):\n\t\tif C[n] == 2:\n\t\t\treturn False\n\t\tif C[n] == 1:\n\t\t\treturn True\n\t\tC[n] = 1\n\t\tfor i in V[n]:\n\t\t\tif dfs(i):\n\t\t\t\treturn True\n\t\tC[n] = 2\n\t\treturn False\n\tfor i in range(N):\n\t\tif dfs(i):\n\t\t\treturn 0\n\treturn -1\nprint((main()))\n", "import sys\nsys.setrecursionlimit(10000000)\ndef input():\n\treturn sys.stdin.readline()[:-1]\nfrom bisect import *\nfrom collections import *\nfrom heapq import *\nimport itertools\nimport math\nINF = 10**9\nMOD = 10**9+7\n\nN, M = map(int, input().split())\nes = [[] for i in range(N+1)]\nfor i in range(M):\n\ta, b = map(int, input().split())\n\tes[a].append(b)\nansr, ansd = -1, INF\nfor r in range(1, N+1):\n\td = [INF] * (N+1)\n\td[0] = 0\n\tdq = deque()\n\tfor w in es[r]:\n\t\tdq.append(w)\n\t\td[w] = 1\n\twhile len(dq) > 0:\n\t\tv = dq.popleft()\n\t\tif v == r:\n\t\t\tbreak\n\t\tnd = d[v]+1\n\t\tfor u in es[v]:\n\t\t\tif nd < d[u]:\n\t\t\t\td[u] = nd\n\t\t\t\tdq.append(u)\n\tif d[r] < ansd:\n\t\tansd = d[r]\n\t\tansr = r\nif ansr == -1:\n\tprint(-1)\nelse:\n\tvis = [0] * (N+1)\n\tvis[0] = 1\n\tp = [-1] * (N+1)\n\tdq = deque()\n\tfor v in es[ansr]:\n\t\tvis[v] = 1\n\t\tp[v] = 0\n\t\tdq.append(v)\n\twhile len(dq) > 0:\n\t\tv = dq.popleft()\n\t\tif v == ansr:\n\t\t\tbreak\n\t\tfor u in es[v]:\n\t\t\tif vis[u] == 0:\n\t\t\t\tvis[u] = 1\n\t\t\t\tp[u] = v\n\t\t\t\tdq.append(u)\n\tlst = []\n\tv = ansr\n\twhile p[v] != -1:\n\t\tlst.append(v)\n\t\tv = p[v]\n\tprint(len(lst))\n\tprint(*lst, sep = '\\n')\n", "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nfrom collections import deque\n\ndef shorten_cycle(G, route):\n\t# ループだとすでに分かってるルートに対して、\n\t# ショートカットが存在する場合はショートカットを行い、\n\t# ルートを短くする\n\n\t_next = {k: v for k, v in zip(route, route[1:]+route[:1])}\n\tv = route[0]\n\twhile True:\n\t\t# もしvからroute内の、次の点ではない点nにいける場合\n\t\tfor n in G[v]:\n\t\t\t# v -> x -> y -> n としていたところを、\n\t\t\t# v -> n とする\n\t\t\tif n in route and n != _next[v]:\n\t\t\t\tnew_route = [n]\n\t\t\t\ts = n\n\t\t\t\twhile s != v:\n\t\t\t\t\ts = _next[s]\n\t\t\t\t\tnew_route.append(s)\n\t\t\t\t_next[v] = n\n\t\t\t\t# 無駄な部分を削除した新しい経路に対して、調査を最初からやり直す\n\t\t\t\troute = new_route\n\t\t\t\tv = route[0]\n\t\t\t\tbreak\n\t\t# 点vにショートカットがない場合\n\t\telse:\n\t\t\t# 次の点が最初の点の場合は、もうこれ以上ショートカットできないので終わり\n\t\t\tv = _next[v]\n\t\t\tif v == route[0]:\n\t\t\t\tbreak\n\t\n\treturn route\n\ndef find_cycle(G, s):\n\tdq = deque()\n\tN = len(G)\n\tINF = float('inf')\n\tdist = [INF] * N\n\tdist[s] = 0\n\tparent = [-1] * N\n\n\tans_last = None # sからループを探して見つかった時の、ループの最後の頂点番号\n\tdq.append(s)\n\t# BFSでループを見つける\n\twhile dq and ans_last is None:\n\t\tv = dq.popleft()\n\t\td = dist[v]\n\t\tfor n in G[v]:\n\t\t\t# 頂点vからいける頂点の中に開始点があったら、ループである\n\t\t\tif dist[n] == 0:\n\t\t\t\tans_last = v\n\t\t\t\tparent[n] = v\n\t\t\t\tbreak\n\t\t\t# まだ探索していない頂点なら次の探索候補にする\n\t\t\telif dist[n] == INF:\n\t\t\t\tdist[n] = d + 1\n\t\t\t\tparent[n] = v\n\t\t\t\tdq.append(n)\n\n\t# ループが見つかった場合\n\tif ans_last:\n\t\t# ループの最後の頂点から、元の頂点をたどり、そのルートを逆にする\n\t\tg = ans_last\n\t\troute = [g]\n\t\twhile g != s:\n\t\t\tg = parent[g]\n\t\t\troute.append(g)\n\t\treturn list(reversed(route))\n\t\n\t# 見つからなかった場合はNoneを返す\n\treturn None\n\ndef main():\n\tN, M, *A = map(int, read().split())\n\n\tG = [[] for i in range(N+1)]\n\tfor a, b in zip(A[::2], A[1::2]):\n\t\tG[a].append(b)\n\n\t# すべての頂点の入次数が 1、出次数が 1 であるような G の誘導部分グラフ\n\t# [すべての頂点の入次数が 1、出次数が 1 のグラフ] -> ループ\n\n\t# 有向グラフ G=(V,E) に対し、次のような条件を満たす有向グラフ G′=(V′,E′) を G の誘導部分グラフと呼ぶ。\n\t# V′ は V の (空でない) 部分集合である。\n\t# E′ は、E の辺であって両端点がともに V′ に含まれるものすべてを含む集合である。\n\n\t# -> ループでも、ショートカットできるようなループはだめ\n\n\t# 例: 1 -> 2 -> 3 -> 4 -> 5\n\t#     ^    |         ^    |\n\t#     |    ----------|    |\n\t#     ---------------------\n\t# V' = {1, 2, 3, 4, 5} としてしまうと、\n\t# E' = {(1->2), (2->3), (3->4), (2->4), (4->5), (5->1)}\n\t# となってしまい、この誘導部分グラフG'=(V', E')において、\n\t# 頂点2の出次数が2になってしまう。（頂点4の入次数も2になってしまう）\n\t# V' = {1, 2, 4, 5} とすれば、\n\t# E' = {(1->2), (2->4), (4->5), (5->1)}\n\t# となり、すべての頂点の入次数が 1、出次数が 1 となる\n\t\n\t# つまり、ショートカットできない最短のループを1つでも見つければよい\n\t\n\tmin_route = None\n\tfor s in range(1, N+1):\n\t\t# 各頂点を開始点にしてループを探す\n\t\troute = find_cycle(G, s)\n\t\t# ループが見つかった場合、そこからショートカットできる経路を探して終了\n\t\tif route:\n\t\t\tmin_route = shorten_cycle(G, route)\n\t\t\tbreak\n\t\n\tif min_route:\n\t\tprint(len(min_route), *min_route, sep='\\n')\n\telse:\n\t\tprint(-1)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n, m = list(map(int, input().split()))\nedges = [[] for _ in range(n)]\n\nfor _ in range(m):\n\ta, b = list(map(int, input().split()))\n\tedges[a-1].append(b-1)\n\n\ndef get_first_cycle(n, edges):\n\tseen = [-1] * n  # seen: -1: 未確認, 0: 非cycleのnode, 1: cycle候補\n\tfor start in range(n):\n\t\tif seen[start] == 0:\n\t\t\tcontinue\n\t\tseen[start] = 1\n\t\tpath = [start]\n\t\twhile path:\n\t\t\tnow = path[-1]\n\t\t\tif not edges[now]:\n\t\t\t\tpath.pop()\n\t\t\t\tseen[now] = 0\n\t\t\t\tcontinue\n\n\t\t\tnext_node = edges[now].pop()\n\t\t\tif seen[next_node] == -1:\n\t\t\t\tpath.append(next_node)\n\t\t\t\tseen[next_node] = 1\n\n\t\t\telif seen[next_node] == 1:\n\t\t\t\tidx = path.index(next_node)\n\t\t\t\tcycle = path[idx:]\n\t\t\t\treturn cycle\n\treturn False\n\n\ncycle = get_first_cycle(n, edges)\nif not cycle:\n\tprint((-1))\n\treturn\n\nnodes = set(cycle)\nlength = len(cycle)\ni = 0\nwhile i < length:\n\tnow = cycle[i]\n\troutes = edges[now]\n\twhile routes:\n\t\tto = routes.pop()\n\t\tif to in nodes:\n\t\t\tupdate = True\n\t\t\tidx = cycle.index(to)\n\t\t\tcycle = cycle[:i+1] + cycle[idx:]\n\t\t\tnodes = set(cycle)\n\t\t\tlength = len(cycle)\n\t\t\tbreak\n\ti += 1\n\nprint((len(cycle)))\nfor node in cycle:\n\tprint((node+1))\n", "import sys\nfrom collections import deque\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n\tN, M, *AB = list(map(int, read().split()))\n\tG = [[] for _ in range(N)]\n\tfor a, b in zip(*[iter(AB)] * 2):\n\t\tG[a - 1].append(b - 1)\n\n\tans = []\n\tfor i in range(N):\n\t\tqueue = deque([i])\n\t\tdist = [-1] * N\n\t\tdist[i] = 0\n\t\tprev = [-1] * N\n\t\twhile queue:\n\t\t\tv = queue.popleft()\n\t\t\tfor nv in G[v]:\n\t\t\t\tif dist[nv] == -1:\n\t\t\t\t\tdist[nv] = dist[v] + 1\n\t\t\t\t\tprev[nv] = v\n\t\t\t\t\tqueue.append(nv)\n\t\tfor j in range(N):\n\t\t\tif i == j or dist[j] == -1 or i not in G[j]:\n\t\t\t\tcontinue\n\t\t\ttmp = []\n\t\t\tk = j\n\t\t\twhile k != -1:\n\t\t\t\ttmp.append(k)\n\t\t\t\tk = prev[k]\n\n\t\t\tif not ans or len(ans) > len(tmp):\n\t\t\t\tans = tmp\n\n\tif ans:\n\t\tprint((len(ans)))\n\t\tfor v in ans:\n\t\t\tprint((v + 1))\n\telse:\n\t\tprint((-1))\n\n\treturn\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "N,M = map(int,input().split())\nAB = [tuple(map(int,input().split())) for i in range(M)]\nes = [[] for i in range(N)]\nfor a,b in AB:\n\ta,b = a-1,b-1\n\tes[a].append(b)\n\nfrom collections import deque\nmindist = N\nopt = None\nfor g,tos in enumerate(es):\n\tfor s in tos:\n\t\tq = deque([(s,0)])\n\t\tprev = [-1]*N\n\t\tdist = [N]*N\n\t\tdist[s] = 0\n\t\twhile q:\n\t\t\tv,d = q.popleft()\n\t\t\tfor to in es[v]:\n\t\t\t\tif to==g: break\n\t\t\t\tif d+1 >= dist[to]: continue\n\t\t\t\tdist[to] = d+1\n\t\t\t\tprev[to] = v\n\t\t\t\tq.append((to,d+1))\n\t\t\telse:\n\t\t\t\tcontinue\n\t\t\tbreak\n\t\telse:\n\t\t\tcontinue\n\t\tif d+1 >= mindist: continue\n\t\tmindist = d+1\n\t\topt = [g,v]\n\t\twhile prev[opt[-1]] >= 0:\n\t\t\topt.append(prev[opt[-1]])\nif opt:\n\tans = [o+1 for o in opt]\n\tprint(len(ans))\n\tprint(*ans, sep='\\n')\nelse:\n\tprint(-1)\n", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 7)\n\nfrom scipy.sparse import csr_matrix\nfrom scipy.sparse.csgraph import connected_components\nimport numpy as np\nfrom collections import defaultdict\n\nN,M = map(int,readline().split())\n\nif M == 0:\n\tprint(-1)\n\treturn\n\nAB = [tuple(int(x) for x in line.split()) for line in readlines()]\n\nA,B = zip(*AB)\ngraph = csr_matrix(([1]*M,(A,B)),(N+1,N+1))\n_,comp = connected_components(graph,connection='strong')\n\nsize = np.bincount(comp)\n\nif size.max() == 1:\n\tprint(-1)\n\treturn\n\nn = np.where(size > 1)[0][0]\n\nV = set(np.where(comp == n)[0])\n\ngraph = [[] for _ in range(N+1)]\nfor a,b in AB:\n\tif a in V and b in V:\n\t\tgraph[a].append(b)\n\n# とりあえず1つサイクルを見つける\norder = defaultdict(int)\nx = V.pop()\nV.add(x)\nq = [x]\norder[x] = 1\npath = [x]\nflag = False\nwhile True:\n\ty = graph[x][0]\n\tif order[y] != 0:\n\t\tpath = path[order[y]-1:]\n\t\tbreak\n\tpath.append(y)\n\torder[y] = order[x] + 1\n\tx = y\n\nV = set(path)\nnext_v = {u:v for u,v in zip(path,path[1:])}; next_v[path[-1]] = path[0]\n\n# 辺を1つ追加しながら、小さいサイクルを見つける\nfor a,b in AB:\n\tif not (a in V and b in V):\n\t\tcontinue\n\t# 間の頂点を削除\n\tx = next_v[a]\n\twhile x != b:\n\t\tV.remove(x)\n\t\tx = next_v[x]\n\tnext_v[a] = b\n\nprint(len(V))\nprint(*V,sep='\\n')\n\n", "from sys import stdin\nimport sys\nimport numpy as np\nimport collections\nfrom functools import cmp_to_key\nimport heapq\nsys.setrecursionlimit(100000)\n\n##  input functions for me\ndef rsa(sep = ''):\n\tif sep == '' :\n\t\treturn input().split() \n\telse: return input().split(sep)\ndef rip(sep = ''):\n\tif sep == '' :\n\t\treturn list(map(int, input().split())) \n\telse: return list(map(int, input().split(sep)))\ndef ria(sep = ''): \n\treturn list(rip(sep))\ndef ri(): return int(input())\ndef rd(): return float(input())\ndef rs(): return input()\n##\n\ncompo = []\ncs = []\nN = 0\nM = 0\nA = None\nB = None\nE = None\n\ndef main():\n\tnonlocal compo,cs,N,M,A,B,E\n\tN, M = rip()\n\tA = [0] * M\n\tB = [0] * M\n\tfor i in range(M):\n\t\tA[i], B[i] = rip()\n\t\tA[i] -= 1\n\t\tB[i] -= 1\n\t\n\tE = [[] for i in range(N)]\n\tfor i in range(M):\n\t\tE[A[i]].append(B[i])\n\t\n\tcompo = [-1] * N\n\n\tdef dfs(cmp, route, hs):\n\t\tnonlocal compo,cs,N,M,A,B,E\n\t\tif(len(cs) > 0) : return\n\t\tnow = route[len(route) - 1]\n\t\tfor nxt in E[now]:\n\t\t\tif compo[nxt] == -1:\n\t\t\t\tcompo[nxt] = cmp\n\t\t\t\troute.append(nxt)\n\t\t\t\ths.add(nxt)\n\t\t\t\tdfs(cmp, route, hs)\n\t\t\t\ths.remove(nxt)\n\t\t\t\troute.pop(-1)\n\t\t\telif compo[nxt] == cmp:\n\t\t\t\tif nxt in hs:\n\t\t\t\t\tcs = route[route.index(nxt):]\n\t\t\t\treturn\n\t\t\telse:\n\t\t\t\treturn\n\n\n\tcs = []\n\tc = 0\n\tfor i in range(N):\n\t\tif(compo[i] != -1): continue\n\t\tc += 1\n\t\ta = []\n\t\ths = set()\n\t\ta.append(i)\n\t\ths.add(i)\n\t\tcompo[i] = c\n\t\tdfs(c, a, hs)\n\n\tif len(cs) == 0:\n\t\tprint((-1))\n\t\treturn\n\t\n\tl = cs\n\twhile(True):\n\t\tdi = dict()\n\t\tfor i in range(len(l)):\n\t\t\tdi[l[i]] = l[(i + 1) % len(l)]\n\t\tedx = -1\n\t\tfor i in range(M):\n\t\t\tif A[i] in di and B[i] in di:\n\t\t\t\tif di[A[i]] != B[i]:\n\t\t\t\t\tedx = i\n\t\t\t\t\tbreak\n\t\t\n\t\tif edx == -1:\n\t\t\tprint((len(l)))\n\t\t\tprint((\"\\n\".join([str(n + 1) for n in l])))\n\t\t\treturn\n\t\t\n\t\tdi[A[edx]] = B[edx]\n\t\tnl = [A[edx], B[edx]]\n\t\twhile True:\n\t\t\tnxt = di[nl[-1]]\n\t\t\tif nxt != nl[0]:\n\t\t\t\tnl.append(nxt)\n\t\t\telse:\n\t\t\t\tbreak\n\t\tl = nl\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "def main():\n\tn,m=map(int,input().split())\n\tab=[list(map(int,input().split())) for _ in [0]*m]\n\tg=[set() for _ in [0]*n]\n\tg2=[set() for _ in [0]*n]\n\t[g[a-1].add(b-1) for a,b in ab]\n\t[g2[b-1].add(a-1) for a,b in ab]\n\n\tdef bfs(start,graph):\n\t\ttemp=[[start,{start}]]\n\t\twhile temp:\n\t\t\ttemp2=[]\n\t\t\tfor j,k in temp:\n\t\t\t\tfor i in graph[j]:\n\t\t\t\t\tif i in k:\n\t\t\t\t\t\treturn j,k\n\t\t\t\t\telse:\n\t\t\t\t\t\ttemp2.append([i,k|{i}])\n\t\t\ttemp=temp2\n\t\treturn None,None\n\n\treturn_set_pre=set(range(n))\n\tfor i in range(n):\n\t\tnow,return_set=bfs(i,g)\n\t\tif return_set!=None:\n\t\t\tbreak\n\tif return_set==None:\n\t\tprint(-1)\n\t\treturn 0\n\twhile True:\n\t\tfor i in return_set_pre-return_set:\n\t\t\tg[i]={}\n\t\t\tg2[i]={}\n\t\tfor i in return_set:\n\t\t\tg[i]=g[i]&return_set\n\t\t\tg2[i]=g2[i]&return_set\n\t\tl1=len([1 for i in range(n) if len(g[i])==1])\n\t\tl2=len([1 for i in range(n) if len(g2[i])==1])\n\t\tl=len(return_set)\n\t\tif l==l1 and l==l2:\n\t\t\tbreak\n\t\treturn_set_pre=return_set\n\t\tnow,return_set=bfs(now,g2)\n\t\tfor i in return_set_pre-return_set:\n\t\t\tg[i]={}\n\t\t\tg2[i]={}\n\t\tfor i in return_set:\n\t\t\tg[i]=g[i]&return_set\n\t\t\tg2[i]=g2[i]&return_set\n\t\tl1=len([1 for i in range(n) if len(g[i])==1])\n\t\tl2=len([1 for i in range(n) if len(g2[i])==1])\n\t\tl=len(return_set)\n\t\tif l==l1 and l==l2:\n\t\t\tbreak\n\t\treturn_set_pre=return_set\n\t\tnow,return_set=bfs(now,g)\n\tprint(len(return_set))\n\tfor i in return_set:\n\t\tprint(i+1)\nmain()\n", "import sys\ninput = sys.stdin.readline\n\nN, M = list(map(int, input().split()))\ngraph = [[] for _ in range(N)]\nfor _ in range(M):\n\ta, b = list(map(int, input().split()))\n\tgraph[a-1].append(b-1)\n\nL = 10**14\nnum = -1\nfor n in range(N):\n\tq = [n]\n\tchecked = [False]*N\n\tchecked[n] = True\n\tbefore = [None]*N\n\tc = 0\n\tok = False\n\twhile q:\n\t\tc += 1\n\t\tqq = []\n\t\tfor p in q:\n\t\t\tfor np in graph[p]:\n\t\t\t\tif not checked[np]:\n\t\t\t\t\tbefore[np] = p\n\t\t\t\t\tqq.append(np)\n\t\t\t\t\tchecked[np] = True\n\t\t\t\telif np == n:\n\t\t\t\t\tbefore[np] = p\n\t\t\t\t\tok = True\n\t\t\t\t\tbreak\n\t\tif ok: break\n\t\tq = qq\n\t\n\tif ok and c < L:\n\t\tL = c\n\t\tnum = n\n\t\tans = []\n\t\tk = n\n\t\tfor _ in range(c):\n\t\t\tk = before[k]\n\t\t\tans.append(k+1)\n\nif num == -1:\n\tprint((-1))\nelse:\n\tprint((len(ans)))\n\tfor a in reversed(ans):\n\t\tprint(a)    \n", "import collections\n\nn,m=map(int,input().split())\ng=[[] for _ in range(n+1)]\ncand1=set()\ncand2=set()\nfor _ in range(m):\n\ta,b=map(int,input().split())\n\tg[a].append(b)\n\tcand1.add(a)\n\tcand2.add(b)\ncand=cand1&cand2\nans=-1\nfor i in range(1,n+1):\n\tif i not in cand:\n\t\tcontinue\n\telse:\n\t\tq=collections.deque()\n\t\tq.append((i,[i]))\n\t\tchecked=[0]*(n+1)\n\t\twhile len(q)!=0:\n\t\t\tv,chain=q.popleft()\n\t\t\tif v==i and len(chain)!=1:\n\t\t\t\tans=chain[:-1]\n\t\t\tfor u in g[v]:\n\t\t\t\tif u not in cand:\n\t\t\t\t\tcontinue\n\t\t\t\telif checked[u]==0:\n\t\t\t\t\tchecked[u]=1\n\t\t\t\t\tq.append((u,chain+[u]))\n\t\tcand.discard(i)\nif ans==-1:\n\tprint(ans)\nelse:\n\tprint(len(ans))\n\tfor v in ans:\n\t\tprint(v)\n", "from collections import*\nn,m,*t=map(int,open(0).read().split())\ni,o=[0]*n,[[]for _ in range(n)]\nfor a,b in zip(*[iter(t)]*2):\n\to[a-1]+=b-1,\n\ti[b-1]+=1\nq=deque(v for v in range(n)if i[v]<1)\nr=[]\nwhile q:\n\tv=q.popleft()\n\tr+=v,\n\tfor w in o[v]:\n\t\ti[w]-=1\n\t\tif i[w]==0:q+=w,\nprint(-(len(r)==n))\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Apr 20 20:47:47 2019\n\n@author: Owner\n\"\"\"\n\nimport numpy as np\nimport sys\nimport collections\nimport scipy.misc\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\nimport bisect\nimport heapq\n\n#素因数を並べる\ndef prime_decomposition(n):\n\ti = 2\n\ttable = []\n\twhile i * i <= n:\n\t\twhile n % i == 0:\n\t\t\tn /= i\n\t\t\ttable.append(int(i))\n\t\ti += 1\n\tif n > 1:\n\t\ttable.append(int(n))\n\treturn table   \n# 桁数を吐く\ndef digit(i):\n\t\tif i > 0:\n\t\t\t\treturn digit(i//10) + [i%10]\n\t\telse:\n\t\t\t\treturn []\n\t\t\ndef getNearestValueIndex(list, num):\n\t\t\"\"\"\n\t\t概要: リストからある値に最も近い値のインデックスを取得する関数\n\t\t@param list: データ配列\n\t\t@param num: 対象値\n\t\t@return 対象値に最も近い値\n\t\t\"\"\"\n\n\t\t# リスト要素と対象値の差分を計算し最小値のインデックスを取得\n\t\tidx = np.abs(np.asarray(list) - num).argmin()\n\t\treturn idx\n\ndef find_index(l, x, default=False):\n\t\tif x in l:\n\t\t\t\treturn l.index(x)\n\t\telse:\n\t\t\t\treturn default\n\nclass UnionFind(object):\n\t\tdef __init__(self, n=1):\n\t\t\t\tself.par = [i for i in range(n)]\n\t\t\t\tself.rank = [0 for _ in range(n)]\n\t\t\t\tself.size = [1 for _ in range(n)]\n\n\t\tdef find(self, x):\n\t\t\t\t\"\"\"\n\t\t\t\tx が属するグループを探索\n\t\t\t\t\"\"\"\n\t\t\t\tif self.par[x] == x:\n\t\t\t\t\t\treturn x\n\t\t\t\telse:\n\t\t\t\t\t\tself.par[x] = self.find(self.par[x])\n\t\t\t\t\t\treturn self.par[x]\n\n\t\tdef union(self, x, y):\n\t\t\t\t\"\"\"\n\t\t\t\tx と y のグループを結合\n\t\t\t\t\"\"\"\n\t\t\t\tx = self.find(x)\n\t\t\t\ty = self.find(y)\n\t\t\t\tif x != y:\n\t\t\t\t\t\tif self.rank[x] < self.rank[y]:\n\t\t\t\t\t\t\t\tx, y = y, x\n\t\t\t\t\t\tif self.rank[x] == self.rank[y]:\n\t\t\t\t\t\t\t\tself.rank[x] += 1\n\t\t\t\t\t\tself.par[y] = x\n\t\t\t\t\t\tself.size[x] += self.size[y]\n\n\t\tdef is_same(self, x, y):\n\t\t\t\t\"\"\"\n\t\t\t\tx と y が同じグループか否か\n\t\t\t\t\"\"\"\n\t\t\t\treturn self.find(x) == self.find(y)\n\n\t\tdef get_size(self, x):\n\t\t\t\t\"\"\"\n\t\t\t\tx が属するグループの要素数\n\t\t\t\t\"\"\"\n\t\t\t\tx = self.find(x)\n\t\t\t\treturn self.size[x]\n\t\t\n\n\"\"\"\nN, X = map(int, input().split())\n\nx = list(map(int, input().split()))\n\nP = [0]*N\nY = [0]*N\nfor n in range(N):\n\t\tP[n], Y[n] = map(int, input().split())\n\n# 多次元配列の宣言（あとでintにすること。）（タプルにすること。）\ndp = np.zeros((N+1, 4,4,4))\n\t\t\nall(nstr.count(c) for c in '753')\n\n# 複数配列を並び替え\nABT = zip(A, B, totAB)\nresult = 0\n# itemgetterには何番目の配列をキーにしたいか渡します\nsorted(ABT,key=itemgetter(2))\nA, B, totAB = zip(*ABT)\nA.sort(reverse=True)\n\n# 2進数のbit判定\n(x >> i) & 1\n\n# dp最小化問題\ndp = [np.inf]*N\nfor n in range(N):\n\t\tif n == 0:\n\t\t\t\tdp[n] = 0\n\t\telse:\n\t\t\t\tfor k in range(1,K+1):\n\t\t\t\t\t\tif n-k >= 0:\n\t\t\t\t\t\t\t\tdp[n] = min(dp[n], dp[n-k] + abs(h[n]-h[n-k]))\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tbreak\n# 累積和\nadd = 1 # 問題によって決まる\nres = 0\nsums = [0]*(len(nums)+1)\nfor i in range(len(nums)):\n\t\tsums[i+1] = sums[i] + nums[i]\nfor i in range(0, len(nums), 2):\n\t\tleft = i\n\t\tright = min(i+add, len(nums))\n\t\ttmp = sums[right] - sums[left]\n\t\tres = max(tmp, res)\n\n#２分探索\nli, ri = bisect.bisect_left(p_ac, l[i]-1), bisect.bisect_right(p_ac, r[i]-1)    \n\n#ソート関数\norg_list = [3, 1, 4, 5, 2]\nnew_list = sorted(org_list)\nprint(org_list)\nprint(new_list)\n# [3, 1, 4, 5, 2]\n# [1, 2, 3, 4, 5]\n\n#Distance Transformation\n\t\tfor h in range(0,H):\n\t\t\t\tfor w in range(0,W):\n\t\t\t\t\t\tif h == 0 and w == 0:\n\t\t\t\t\t\t\t\tpass\n\t\t\t\t\t\telif h == 0:\n\t\t\t\t\t\t\t\tD[H-h-1][W-w-1]= min(D[H-h-1][W-w-1], D[H-h-1][W-w]+1)\n\t\t\t\t\t\telif w == 0:   \n\t\t\t\t\t\t\t\tD[H-h-1][W-w-1]= min(D[H-h-1][W-w-1], D[H-h][W-w-1]+1)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tD[H-h-1][W-w-1]= min(D[H-h-1][W-w-1], D[H-h][W-w-1]+1, D[H-h-1][W-w]+1, D[H-h][W-w]+2)\n\t\t\t\t\t\td_max = max(D[H-h-1][W-w-1], d_max)\n\n\"\"\"\n\n\n\ndef bfs(n):\n\t\tclsd = set()\n\t\topnd = collections.deque()        \n\t\troot = [None]*N\n\t\td_list = [0]*N\n\t\topnd.append(n)\n\t\t\n\t\t#print(\"Let's BFS (\", n, \" times)\")\n\t\twhile len(opnd) != 0:\n\n\t\t\t\t#print(\"clsd: \", clsd)\n\t\t\t\t#print(\"opnd: \", opnd)\n\t\t\t\t\n\t\t\t\tnow = opnd.popleft()\n\t\t\t\tclsd.add(now)\n\t\t\t\t\n\t\t\t\tfor e in E[now]:\n\t\t\t\t\t\tif e in clsd:\n\t\t\t\t\t\t\t\tif e == n:\n\t\t\t\t\t\t\t\t\t\tres = [now]\n\t\t\t\t\t\t\t\t\t\t#print(\"root: \", root)\n\t\t\t\t\t\t\t\t\t\t#print(\"d_list: \", d_list)\n\t\t\t\t\t\t\t\t\t\tdist = d_list[now] + 1\n\t\t\t\t\t\t\t\t\t\twhile len(res) != dist:\n\t\t\t\t\t\t\t\t\t\t\t\t#   print(res, dist)\n\t\t\t\t\t\t\t\t\t\t\t\tres.append(root[res[-1]])\n\t\t\t\t\t\t\t\t\t\treturn [list(reversed(res)), dist]\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\topnd.append(e)\n\t\t\t\t\t\t\t\troot[e] = now\n\t\t\t\t\t\t\t\td_list[e] = d_list[root[e]]+1\n\t\treturn [[], inf] \n\n\nN, M = list(map(int, input().split()))\n\nE = [[] for n in range(N)]\n\n \nfor m in range(M):\n\t\te = list(map(int, input().split()))\n\t\tE[e[0]-1].append(e[1]-1)\n\ninf = 10**9\n\n\t\t\ndef main(): \n\t\tres = []\n\t\td_min = inf\n\t\tfor n in range(N):\n\t\t\t\tgraph, dist = bfs(n)\n\t\t\t\tif dist < d_min:\n\t\t\t\t\t\td_min = dist\n\t\t\t\t\t\tres = graph\n\t\tif d_min != inf:\n\t\t\t print(d_min)\n\t\t\t for n in range(d_min):\n\t\t\t\t\t print((res[n]+1))\n\t\telse:\n\t\t\t print((-1))\n\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\n\t\t\ndef __starting_point():\n\t\tmain()\n\n__starting_point()\n", "from collections import*\nn,m=map(int,input().split())\nouts=defaultdict(list)\nins=defaultdict(int)\nfor _ in range(m):\n\ta,b=map(int,input().split())\n\touts[a-1]+=b-1,\n\tins[b-1]+=1\nq=deque(i for i in range(n)if ins[i]==0)\nres=[]\nwhile q:\n\tv=q.popleft()\n\tres+=v,\n\tfor w in outs[v]:\n\t\tins[w]-=1\n\t\tif ins[w]==0:\n\t\t\tq.append(w)\nprint(-(len(res)==n))\n", "import sys\ninput = sys.stdin.readline\n\nN,M=list(map(int,input().split()))\n\nEIN=[0]*N\nEOUT=[0]*N\n\nEINLIST=[[] for i in range(N)]\nEOUTLIST=[[] for i in range(N)]\n\nfor i in range(M):\n\tx,y=list(map(int,input().split()))\n\tx-=1\n\ty-=1\n\n\tEOUT[x]+=1\n\tEIN[y]+=1\n\n\tEOUTLIST[x].append(y)\n\tEINLIST[y].append(x)\n\nfrom collections import deque\n\nQ=deque()\nUSE=[1]*N\n\nfor i in range(N):\n\tif EIN[i]==0 or EOUT[i]==0:\n\t\tQ.append(i)\n\t\tUSE[i]=0\n\nwhile Q:\n\tx=Q.pop()\n\n\tfor to in EOUTLIST[x]:\n\t\tif USE[to]==0:\n\t\t\tcontinue\n\t\tEIN[to]-=1\n\t\tif EIN[to]==0:\n\t\t\tQ.append(to)\n\t\t\tUSE[to]=0\n\n\tfor fr in EINLIST[x]:\n\t\tif USE[fr]==0:\n\t\t\tcontinue\n\t\tEOUT[fr]-=1\n\t\tif EOUT[fr]==0:\n\t\t\tQ.append(fr)\n\t\t\tUSE[fr]=0\n\t\t\t\ndef loopfind():\n\tfor i in range(N):\n\t\tif USE[i]==1:\n\t\t\tbreak\n\telse:\n\t\treturn []\n\t\n\tQ=deque()\n\tQ.append(i)\n\tUSESET={i}\n\tANS=[i]\n\n\twhile True:\n\t\tfor to in EOUTLIST[ANS[-1]]:\n\t\t\tif USE[to]==1:\n\t\t\t\tnextv=to\n\t\t\t\tbreak\n\n\t\tif nextv in USESET:\n\t\t\tbreak\n\t\telse:\n\t\t\tANS.append(nextv)\n\t\t\tUSESET.add(nextv)\n\n\tx=ANS.index(nextv)\n\treturn ANS[x:]\n\t\t\n\ndef shortcut(ANS):\n\t#print(ANS)\n\n\tANSSET=set(ANS)\n\tLEN=len(ANS)\n\tflag=0\n\n\tfor i in range(LEN):\n\t\tfor to in EOUTLIST[ANS[i]]:\n\t\t\tif to in ANSSET and ANS[(i+1)%LEN]!=to:\n\t\t\t\tflag=1\n\t\t\t\tx=ANS.index(to)\n\n\t\t\t\t#print(ANS,i,x)\n\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tbreak\n\t#print(flag)\n\n\tif flag:\n\t\tif x<i:\n\t\t\treturn shortcut(ANS[x:i+1])\n\t\telse:\n\t\t\treturn shortcut(ANS[x:]+ANS[:i+1])\n\n\telse:\n\t\treturn ANS\n\nANS=shortcut(loopfind())\nif len(ANS)==0:\n\tprint((-1))\nelse:\n\tprint((len(ANS)))\n\tfor ans in ANS:\n\t\tprint((ans+1))\n\t\t\n", "import sys\nfrom collections import deque\ninput = sys.stdin.readline        \n\ndef main():\n\n\tdef loopfind():\n\t\tfor i in range(N):\n\t\t\tif USE[i]==1:\n\t\t\t\tbreak\n\t\telse:\n\t\t\treturn []\n\t\t\n\t\tQ=deque()\n\t\tQ.append(i)\n\t\tUSESET={i}\n\t\tANS=[i]\n\n\t\twhile True:\n\t\t\tfor to in EOUTLIST[ANS[-1]]:\n\t\t\t\tif USE[to]==1:\n\t\t\t\t\tnextv=to\n\t\t\t\t\tbreak\n\n\t\t\tif nextv in USESET:\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tANS.append(nextv)\n\t\t\t\tUSESET.add(nextv)\n\n\t\tx=ANS.index(nextv)\n\t\treturn ANS[x:]\n\n\tdef shortcut(ANS):\n\t\t#print(ANS)\n\n\t\tANSSET=set(ANS)\n\t\tLEN=len(ANS)\n\t\tflag=0\n\n\t\tfor i in range(LEN):\n\t\t\tfor to in EOUTLIST[ANS[i]]:\n\t\t\t\tif to in ANSSET and ANS[(i+1)%LEN]!=to:\n\t\t\t\t\tflag=1\n\t\t\t\t\tx=ANS.index(to)\n\n\t\t\t\t\t#print(ANS,i,x)\n\n\t\t\t\t\tbreak\n\t\t\tif flag:\n\t\t\t\tbreak\n\t\t#print(flag)\n\n\t\tif flag:\n\t\t\tif x<i:\n\t\t\t\treturn shortcut(ANS[x:i+1])\n\t\t\telse:\n\t\t\t\treturn shortcut(ANS[x:]+ANS[:i+1])\n\n\t\telse:\n\t\t\treturn ANS\n\t\n\tN,M=map(int,input().split())\n\n\tEIN=[0]*N\n\tEOUT=[0]*N\n\n\tEINLIST=[[] for i in range(N)]\n\tEOUTLIST=[[] for i in range(N)]\n\n\tfor i in range(M):\n\t\tx,y=map(int,input().split())\n\t\tx-=1\n\t\ty-=1\n\n\t\tEOUT[x]+=1\n\t\tEIN[y]+=1\n\n\t\tEOUTLIST[x].append(y)\n\t\tEINLIST[y].append(x)\n\n\tQ=deque()\n\tUSE=[1]*N\n\n\tfor i in range(N):\n\t\tif EIN[i]==0 or EOUT[i]==0:\n\t\t\tQ.append(i)\n\t\t\tUSE[i]=0\n\n\twhile Q:\n\t\tx=Q.pop()\n\n\t\tfor to in EOUTLIST[x]:\n\t\t\tif USE[to]==0:\n\t\t\t\tcontinue\n\t\t\tEIN[to]-=1\n\t\t\tif EIN[to]==0:\n\t\t\t\tQ.append(to)\n\t\t\t\tUSE[to]=0\n\n\t\tfor fr in EINLIST[x]:\n\t\t\tif USE[fr]==0:\n\t\t\t\tcontinue\n\t\t\tEOUT[fr]-=1\n\t\t\tif EOUT[fr]==0:\n\t\t\t\tQ.append(fr)\n\t\t\t\tUSE[fr]=0\n\n\tANS=shortcut(loopfind())\n\tif len(ANS)==0:\n\t\tprint(-1)\n\telse:\n\t\tprint(len(ANS))\n\t\tfor ans in ANS:\n\t\t\tprint(ans+1)\n\nmain()\n", "#!/usr/bin/env python\n\nimport sys\nsys.setrecursionlimit(10 ** 6)\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nINF = float(\"inf\")\n\ndef main():\n\tN,M = map(int,input().split())\n\tG = [[] for _ in range(N)]\n\tAB = [tuple(map(int,input().split())) for _ in range(M)]\n\tfor a,b in AB:\n\t\tG[a-1].append(b-1)\n\n\tAns = [1]*(N+1)\n\t\n\t# 全ての頂点から, 閉路が存在しないかを確認する\n\tfor s in range(N):\n\t\tprev = [-1]*N\n\t\tdist = [-1]*N\n\t\tdist[s] = 0\n\t\tdq = deque([s])\n\t\twhile dq:\n\t\t\tv = dq.popleft()\n\t\t\tfor nv in G[v]:\n\t\t\t\tif dist[nv] == -1:\n\t\t\t\t\tdist[nv] = dist[v] + 1\n\t\t\t\t\tprev[nv] = v\n\t\t\t\t\tdq.append(nv)\n\t\t\t\t# 次が 0番目(開始地点) なら閉路あり\n\t\t\t\tif dist[nv] == 0:\n\t\t\t\t\tprev[nv] = v\n\n\t\t# 開始地点の前 が -1でない => 閉路あり\n\t\tif prev[s] != -1:\n\t\t\tv = prev[s]\n\t\t\tans = set()\n\t\t\tfor _ in range(max(dist)+1):\n\t\t\t\tans.add(prev[v])\n\t\t\t\tv = prev[v]\n\t\t\tif len(Ans) > len(ans):\n\t\t\t\tAns = list(ans)\n\t\n\tif len(Ans) == N+1:\n\t\tprint(-1)\n\telse:\n\t\tprint(len(Ans))\n\t\tAns.sort()\n\t\tfor v in Ans:\n\t\t\tprint(v+1)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "import queue\n\nimport sys\nsys.setrecursionlimit(10000)\n\nN, M = map(int, input().split())\nS = set(range(N))\n\nto = [[] for _ in range(N)]\nfor _ in range(M):\n\ta, b = [int(x)-1 for x in input().split()]\n\tto[a].append(b)\n\nvisit = [0] * N\ndef DFS(p, n):\n\tif visit[p] != 0:\n\t\treturn visit[p]\n\telse:\n\t\tvisit[p] = n + 1\n\t\tfor i in to[p]:\n\t\t\tr = DFS(i, n + 1)\n\t\t\tif r > 0:\n\t\t\t\treturn r\n\t\tvisit[p] = -1\n\t\treturn -1\n\nfor i in range(N):\n\tr = DFS(i,0)\n\tif r > 0:\n\t\tfor j in range(N):\n\t\t\tif visit[j] < r:\n\t\t\t\tS.discard(j)\n\t\tfor j in range(N):\n\t\t\tif j in S:\n\t\t\t\tfor k in to[j]:\n\t\t\t\t\tif k in S:\n\t\t\t\t\t\tif visit[k] < visit[j]:\n\t\t\t\t\t\t\tfor l in range(N):\n\t\t\t\t\t\t\t\tif visit[l] < visit[k] or visit[l] > visit[j]:\n\t\t\t\t\t\t\t\t\tS.discard(l)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tfor l in range(N):\n\t\t\t\t\t\t\t\tif visit[l] > visit[j] and visit[l] < visit[k]:\n\t\t\t\t\t\t\t\t\tS.discard(l)\n\t\tprint(len(S))\n\t\tfor j in list(S):\n\t\t\tprint(j+1)\n\t\tbreak\n\tif i == N-1:\n\t\tprint(-1)\n", "from collections import deque\n\nN, M = map(int, input().split())\n\nedges = [[] for _ in range(N)]\n\nfor _ in range(M):\n\tfr, to = map(int, input().split())\n\tfr -= 1\n\tto -= 1\n\tedges[fr].append(to)\n\nfor start in range(N):\n\tst = deque([(start, True)])\n\tL = deque()\n\tV = set()\n\n\twhile st:\n\t\tnow, isFirst = st.pop()\n\t\tif isFirst:\n\t\t\tL.append(now)\n\n\t\t\tif now in V:\n\t\t\t\tbreak\n\n\t\t\tV.add(now)\n\n\t\t\tst.append((now, False))\n\n\t\t\tfor to in edges[now]:\n\t\t\t\tst.append((to, True))\n\t\telse:\n\t\t\tL.pop()\n\t\t\tV.remove(now)\n\telse:\n\t\tcontinue\n\n\tloopStart = L.pop()\n\twhile L[0] != loopStart:\n\t\tL.popleft()\n\n\tans = []\n\tK = len(L)\n\tfor i, now in enumerate(L):\n\t\tfor to in edges[now]:\n\t\t\tif i + 1 >= K or to == L[i + 1]:\n\t\t\t\tans.append(now + 1)\n\t\t\t\tbreak\n\t\telse:\n\t\t\tbreak\n\telse:\n\t\tprint(0)\n\t\tprint()\n\t\t# print(len(ans))\n\t\t# print(*ans, sep='\\n')\n\t\treturn\n\nprint(-1)\n", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn, m = map(int, input().split())\nG = [[] for _ in range(n)]\nfor i in range(m):\n\ta, b = map(int, input().split())\n\ta -= 1\n\tb -= 1\n\tG[a].append(b)\nseen = [False]*n\ndef dfs(v):\n\tseen[v] = True\n\tfor nv in G[v]:\n\t\tnxt[v] = nv\n\t\tif seen[nv]:\n\t\t\treturn nv\n\t\ts = dfs(nv)\n\t\tif s != -1:\n\t\t\treturn s\n\tseen[v] = False\n\treturn -1\nfor i in range(n):\n\tnxt = [-1]*n\n\ts = dfs(i)\n\tif s != -1:\n\t\tbreak\nelse:\n\tprint(-1)\n\treturn\nwhile True:\n\tused = set()\n\tL = []\n\twhile s not in used:\n\t\tused.add(s)\n\t\tL.append(s)\n\t\ts = nxt[s]\n\tL.append(s)\n\tfor i in range(len(L)-1):\n\t\ta, b = L[i], L[i+1]\n\t\tfor nv in G[a]:\n\t\t\tif nv != b and nv in used:\n\t\t\t\tnxt[a] = nv\n\t\t\t\ts = a\n\t\t\t\tbreak\n\t\telse:\n\t\t\tcontinue\n\t\tbreak\n\telse:\n\t\tprint(len(used))\n\t\tfor v in used:\n\t\t\tprint(v+1)\n\t\tbreak\n", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n\tN, M, *AB = list(map(int, read().split()))\n\tG = [[] for _ in range(N)]\n\tfor a, b in zip(*[iter(AB)] * 2):\n\t\tG[a - 1].append(b - 1)\n\n\tdef dfs(v, p, seen, finished, hist):\n\t\tseen[v] = True\n\t\thist.append(v)\n\t\tfor nv in G[v]:\n\t\t\tif nv == p:\n\t\t\t\tcontinue\n\t\t\tif finished[nv]:\n\t\t\t\tcontinue\n\t\t\tif seen[nv] and not finished[nv]:\n\t\t\t\treturn nv\n\n\t\t\tpos = dfs(nv, v, seen, finished, hist)\n\t\t\tif pos != -1:\n\t\t\t\treturn pos\n\t\thist.pop()\n\t\tfinished[v] = True\n\t\treturn -1\n\n\tfor i in range(N):\n\t\tseen = [False] * N\n\t\tfinished = [False] * N\n\t\thist = []\n\t\tpos = dfs(i, -1, seen, finished, hist)\n\t\tif pos != -1:\n\t\t\tbreak\n\n\tif pos == -1:\n\t\tprint((-1))\n\t\treturn\n\n\tcycle = []\n\twhile hist:\n\t\tt = hist.pop()\n\t\tcycle.append(t)\n\t\tif t == pos:\n\t\t\tbreak\n\n\tcycle.reverse()\n\n\twhile True:\n\t\torder = [-1] * N\n\t\tfor i, v in enumerate(cycle):\n\t\t\torder[v] = i\n\n\t\tfor i, v in enumerate(cycle):\n\t\t\tord_from = ord_to = -1\n\t\t\tfor nv in G[v]:\n\t\t\t\tif v == nv or order[nv] == -1 or order[nv] == (order[v] + 1) % len(cycle):\n\t\t\t\t\tcontinue\n\t\t\t\tord_from, ord_to = i, order[nv]\n\t\t\t\tbreak\n\t\t\tif ord_from != -1:\n\t\t\t\tbreak\n\n\t\tif ord_from == -1:\n\t\t\tbreak\n\n\t\tif ord_from < ord_to:\n\t\t\tcycle = cycle[: ord_from + 1] + cycle[ord_to:]\n\t\telse:\n\t\t\tcycle = cycle[ord_to : ord_from + 1]\n\n\tprint((len(cycle)))\n\tfor v in cycle:\n\t\tprint((v + 1))\n\n\treturn\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from collections import*\nn,m,*t=map(int,open(0).read().split())\ni=[0]*n\no=[[]for _ in i]\nfor a,b in zip(*[iter(t)]*2):\n\to[a-1]+=b-1,\n\ti[b-1]+=1\nq,r=deque(v for v in range(n)if i[v]<1),[]\nwhile q:\n\tv=q.popleft()\n\tr+=v,\n\tfor w in o[v]:\n\t\ti[w]-=1\n\t\tif i[w]==0:q+=w,\nprint(-(len(r)==n))\n", "#!python3\n\nimport sys\nsys.setrecursionlimit(10 ** 6)\n\nLI = lambda: list(map(int, input().split()))\n\n# input\nN, M = LI()\nAB = [LI() for _ in range(M)]\n\n# params\nlink = [[] for _ in range(N)]\nfor a, b in AB:\n\tlink[a - 1].append(b - 1)\nimpossible = [False] * N\n\n\ndef joint(v, visit):\n\tif impossible[v]:\n\t\treturn None\n\tvisit = visit + [v]\n\tfor u in link[v]:\n\t\tif u in visit:\n\t\t\ti = visit.index(u)\n\t\t\treturn visit[i:]\n\t\tt = joint(u, visit)\n\t\tif t is not None:\n\t\t\treturn t\n\timpossible[v] = True\n\treturn None\n\n\ndef solve(l):\n\tn = len(l)\n\td = {l[i]: i for i in range(n)}\n\tfor i in range(n):\n\t\tx = l[i]\n\t\tfor y in link[x]:\n\t\t\tif y in d:\n\t\t\t\tj = d[y]\n\t\t\t\tif (i + 1) % n == j:\n\t\t\t\t\tcontinue\n\t\t\t\tif j < i:\n\t\t\t\t\tl = l[j : i + 1]\n\t\t\t\telse:\n\t\t\t\t\tl = l[: i + 1] + l[j:]\n\t\t\t\treturn solve(l)\n\treturn l\n\t\t\t\n\ndef main():\n\tt = None\n\tfor i in range(N):\n\t\tt = joint(i, [])\n\t\tif t is not None:\n\t\t\tbreak\n\tif t is None:\n\t\tprint((-1))\n\t\treturn\n\t\n\tans = solve(t)\n\tprint((len(ans)))\n\tfor x in ans:\n\t\tprint((x + 1))\n\t\t\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\nsys.setrecursionlimit(10 ** 6)\n\nn, m = map(int, input().split())\ne = [[] for _ in range(n)]\n\nfor _ in range(m):\n\ta, b = map(int, input().split())\n\te[a-1].append(b-1)\n\nc = [0] * n\nans = []\ndef search_path(p, temp):\n\tc[p] = 1\n\tfor x in e[p]:\n\t\tif x in temp:\n\t\t\tprint(-99999)\n\t\t\treturn\n\t\telse:\n\t\t\tsearch_path(x, temp + [x])\n\n\nt = 1\nfor i in range(n):\n\tif c[i] == 0:\n\t\tans = search_path(i, [i])\n\nprint(-1)\n", "from collections import deque\nimport sys\n\nN,M = list(map(int,input().split()))\n\nAB = []\nlis = [ [] for i in range(N)]\n\nfor i in range(M):\n\n\tA,B = list(map(int,input().split()))\n\n\tA -= 1\n\tB -= 1\n\n\tlis[A].append(B)\n\nq = deque([])\n\nfirst = [-1] * (N+1)\nfirst[0] = 0\nfirst[-1] = 0\n\nq.append( first )\n\nend = [True] * N\nend[0] = False\n\nwhile len(q) > 0:\n\n\tnow = q.pop()\n\tlasp = now[-1]\n\tnownum = now[lasp] \n\n\t#print (q,now,lasp,nownum)\n\n\tfor nex in lis[lasp]:\n\n\t\tif now[nex] == -1:\n\t\t\tncopy = now.copy()\n\t\t\tncopy[nex] = nownum + 1\n\t\t\tncopy[-1] = nex\n\t\t\tend[nex] = False\n\t\t\tq.append(ncopy)\n\n\t\telse:\n\n\t\t\tflag = True\n\n\t\t\tfor i in range(N):\n\n\t\t\t\tif now[i] >= 0:\n\n\t\t\t\t\tfor j in lis[i]:\n\n\t\t\t\t\t\tif (now[j] >= now[nex] and now[j] != now[i] + 1) and not (i == lasp and j == nex):\n\t\t\t\t\t\t\tflag = False\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\tif not flag:\n\t\t\t\t\tbreak\n\n\t\t\tif flag:\n\t\t\t\tans = []\n\n\t\t\t\tfor i in range(N):\n\t\t\t\t\tif now[i] >= now[nex]:\n\t\t\t\t\t\tans.append(i + 1)\n\n\t\t\t\tprint((len(ans)))\n\t\t\t\tfor i in ans:\n\t\t\t\t\tprint (i)\n\n\t\t\t\treturn\n\n\tif len(q) == 0:\n\t\tfor i in range(N):\n\t\t\tif end[i]:\n\n\t\t\t\tfirst = [-1] * (N+1)\n\t\t\t\tfirst[i] = 0\n\t\t\t\tfirst[-1] = i\n\t\t\t\tq.append(first)\n\t\t\t\tend[i] = False\n\t\t\t\tbreak\n\t\t\t#print (flag,nex,lasp)\n\nprint((-1))\n", "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nfrom collections import deque\n\n\ndef find_shortest_cycle(G, s):\n\tdq = deque()\n\tN = len(G)\n\tINF = float('inf')\n\tdist = [INF] * N\n\tdist[s] = 0\n\tparent = [-1] * N\n\n\tans_last = None # sからループを探して見つかった時の、ループの最後の頂点番号\n\tdq.append(s)\n\t# BFSで、最短のループを見つける\n\twhile dq and ans_last is None:\n\t\tv = dq.popleft()\n\t\td = dist[v]\n\t\tfor n in G[v]:\n\t\t\t# 頂点vからいける頂点の中に開始点があったら、ループである\n\t\t\tif dist[n] == 0:\n\t\t\t\tans_last = v\n\t\t\t\tparent[n] = v\n\t\t\t\tbreak\n\t\t\t# まだ探索していない頂点なら次の探索候補にする\n\t\t\telif dist[n] == INF:\n\t\t\t\tdist[n] = d + 1\n\t\t\t\tparent[n] = v\n\t\t\t\tdq.append(n)\n\n\t# ループが見つかった場合\n\tif ans_last:\n\t\t# ループの最後の頂点から、元の頂点をたどり、そのルートを逆にする\n\t\tg = ans_last\n\t\troute = [g]\n\t\twhile g != s:\n\t\t\tg = parent[g]\n\t\t\troute.append(g)\n\t\treturn list(reversed(route))\n\t\n\t# 見つからなかった場合はNoneを返す\n\treturn None\n\ndef main():\n\tN, M, *A = map(int, read().split())\n\n\tG = [[] for i in range(N+1)]\n\tfor a, b in zip(A[::2], A[1::2]):\n\t\tG[a].append(b)\n\n\t# すべての頂点の入次数が 1、出次数が 1 であるような G の誘導部分グラフ\n\t# [すべての頂点の入次数が 1、出次数が 1 のグラフ] -> ループ\n\n\t# 有向グラフ G=(V,E) に対し、次のような条件を満たす有向グラフ G′=(V′,E′) を G の誘導部分グラフと呼ぶ。\n\t# V′ は V の (空でない) 部分集合である。\n\t# E′ は、E の辺であって両端点がともに V′ に含まれるものすべてを含む集合である。\n\n\t# -> ループでも、ショートカットできるようなループはだめ\n\n\t# 例: 1 -> 2 -> 3 -> 4 -> 5\n\t#     ^    |         ^    |\n\t#     |    ----------|    |\n\t#     ---------------------\n\t# V' = {1, 2, 3, 4, 5} としてしまうと、\n\t# E' = {(1->2), (2->3), (3->4), (2->4), (4->5), (5->1)}\n\t# となってしまい、この誘導部分グラフG'=(V', E')において、\n\t# 頂点2の出次数が2になってしまう。（頂点4の入次数も2になってしまう）\n\t# V' = {1, 2, 4, 5} とすれば、\n\t# E' = {(1->2), (2->4), (4->5), (5->1)}\n\t# となり、すべての頂点の入次数が 1、出次数が 1 となる\n\t\n\t# つまり、ショートカットできない最短のループを1つでも見つければよい\n\t\n\tmin_route = None\n\tfor s in range(1, N+1):\n\t\t# 各頂点を開始点にしてループを探す\n\t\troute = find_shortest_cycle(G, s)\n\t\t# ループが複数ある場合、短いほうを採用\n\t\tif route:\n\t\t\tif min_route is None or len(route) < len(min_route):\n\t\t\t\tmin_route = route\n\t\n\tif min_route:\n\t\tprint(len(min_route), *min_route, sep='\\n')\n\telse:\n\t\tprint(-1)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "import sys\nsys.setrecursionlimit(10**7)\n\ndef main():\n\tN, M = list(map(int, input().split()))\n\tV = [[] for _ in range(N)]\n\tfor _ in range(M):\n\t\ta, b = list(map(int, input().split()))\n\t\tV[a - 1].append(b - 1)\n\tC = [0] * N\n\tloop = []\n\tdef dfs(n):\n\t\tif C[n] == 2:\n\t\t\treturn False\n\t\tif C[n] == 1:\n\t\t\tloop.append(n)\n\t\t\treturn True\n\t\tC[n] = 1\n\t\tfor i in V[n]:\n\t\t\tif dfs(i):\n\t\t\t\tloop.append(n)\n\t\t\t\treturn True\n\t\tC[n] = 2\n\t\treturn False\n\tfor i in range(N):\n\t\tif dfs(i):\n\t\t\tbreak\n\tif len(loop) == 0:\n\t\tprint('-1')\n\t\treturn\n\tfor i in range(1, len(loop)):\n\t\tif loop[i] == loop[0]:\n\t\t\tbreak\n\tloop = loop[:i][::-1]\n\n\tdef minimize(l):\n\t\ts = set(l)\n\t\tfor i in range(len(l)):\n\t\t\tfor j in V[l[i]]:\n\t\t\t\tif j == l[(i + 1) % len(l)]:\n\t\t\t\t\tcontinue\n\t\t\t\tif j in s:\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tcontinue\n\t\t\tbreak\n\t\telse:\n\t\t\treturn l\n\t\tI = {m: k for k, m in enumerate(l)}\n\t\tj = I[j]\n\t\tif i < j:\n\t\t\tl = l[0:i + 1] + l[j:]\n\t\telse:\n\t\t\tl = l[j:i + 1]\n\t\treturn l\n\twhile True:\n\t\tt = len(loop)\n\t\tloop = minimize(loop)\n\t\tif len(loop) == t:\n\t\t\tbreak\n\tprint(t)\n\tprint(('\\n'.join(str(i + 1) for i in loop)))\nmain()\n", "import sys\nimport io, os\ninput = sys.stdin.buffer.readline\n#input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\nn, m = map(int, input().split())\ng = [[] for _ in range(n)]\nedge = []\nfor i in range(m):\n\ta, b = map(int, input().split())\n\ta, b = a-1, b-1\n\tg[a].append(b)\n\tedge.append((a, b))\n\nfrom collections import deque\nINF = 10**18\ntemp= INF\nfor a, b in edge:\n\tq = deque([])\n\tq.append(b)\n\tvisit = [INF]*n\n\tvisit[b] = 0\n\tpar = [-1]*n\n\twhile q:\n\t\tv = q.popleft()\n\t\tfor u in g[v]:\n\t\t\tif visit[u] == INF:\n\t\t\t\tvisit[u] = visit[v]+1\n\t\t\t\tpar[u] = v\n\t\t\t\tq.append(u)\n\tif visit[a]+1 <= temp:\n\t\tans = []\n\t\tv = a\n\t\tans.append(v+1)\n\t\twhile par[v] != -1:\n\t\t\tv = par[v]\n\t\t\tans.append(v+1)\n\t\ttemp =  visit[a]+1\n\nif temp == INF:\n\tprint(-1)\nelse:\n\tif ans:\n\t\tprint(len(ans))\n\t\tprint(*ans, sep='\\n')\n\telse:\n\t\tprint(-1)\n", "from collections import deque\nn,m = list(map(int,input().split()))\npath = [set() for _ in range(n)]\npathr= [set() for _ in range(n)]\nfor _ in range(m):\n\ta,b = list(map(int,input().split()))\n\tpath[a-1].add(b-1)\n\tpathr[b-1].add(a-1)\n\ndef bfs(start):\n\tque = deque()\n\td = [1e100]*n\n\tfor i in path[start]:\n\t\tque.append(i)\n\t\td[i] = 1\n\twhile que:\n\t\tp = que.popleft()\n\t\tfor nxt in path[p]:\n\t\t\tif d[nxt] == 1e100:\n\t\t\t\tque.append(nxt)\n\t\t\td[nxt] = min(d[nxt], d[p] + 1)\n\tif d[start] == 1e100:\n\t\treturn [0] * (n+1)\n\tret = [0]*d[start]\n\tret[-1] = start\n\tnow = start\n\tfor i in range(d[start] - 1)[::-1]:\n\t\tfor p in pathr[now]:\n\t\t\tif d[p] == i+1:\n\t\t\t\tnow = p\n\t\t\t\tret[i] = now\n\t\t\t\tbreak\n\treturn ret\nans = [0]*(n+1)\nfor i in range(n):\n\ttmp = bfs(i)\n\tif len(ans) > len(tmp):\n\t\tans = tmp\nif len(ans) > n:\n  print((-1))\nelse:\n\tprint((len(ans)))\n\tfor i in ans:\n\t\tprint((i+1))\n", "def find_cycle(N, AB):\n\tfor c in range(N):\n\t\tstack = [(c, [])]\n\t\twhile stack:\n\t\t\t# print(\"stack:\", stack)\n\t\t\tcurr, visited = stack.pop()\n\t\t\tif curr in visited:\n\t\t\t\t# print(\"cycle found:\", curr)\n\t\t\t\treturn visited\n\t\t\telse:\n\t\t\t\t# print(\"adding in visited:\", curr)\n\t\t\t\tfor i in AB[curr]:\n\t\t\t\t\tstack.append((i, visited+[curr]))\n\treturn False\n\n \n \ndef find_smaller_cycle(cycle, AB):\n\t\ti = 0\n\t\twhile i < len(cycle):\n\t\t\t\tv = cycle[i]\n\t\t\t\tif AB[v]:\n\t\t\t\t\t\tn = AB[v].pop()\n\t\t\t\t\t\tif n in cycle:\n\t\t\t\t\t\t\t\tr = cycle.index(n)\n\t\t\t\t\t\t\t\tif i < r:\n\t\t\t\t\t\t\t\t\t\tcycle = cycle[:i+1] + cycle[r:]\n\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\tcycle = cycle[r:i+1]\n\t\t\t\t\t\t\t\ti = cycle.index(v)\n\t\t\t\telse:\n\t\t\t\t\t\ti += 1\n\t\t\t\t\t\t\n\t\treturn cycle\n \n \nN, M = [int(i) for i in input().split()]\n \nAB = [[] for _ in range(N)]\nfor _ in range(M):\n\t\tA, B = [int(i) - 1 for i in input().split()]\n\t\tAB[A].append(B)\n\ncycle = find_cycle(N, AB)\n# print(\"cycle:\", cycle)\nif not cycle:\n\t\tprint(-1)\nelse:\n\t\tcycle = find_smaller_cycle(cycle, AB)\n\t\t\t\t\t\t\n\t\tprint(len(cycle))\n\t\tfor v in cycle:\n\t\t\t\tprint(v + 1)\n", "import sys\nsys.setrecursionlimit(10 ** 7)\n\ndef solve(G, p, ans, st, fst, arr, x):\n\tarr[p] = x\n\tcnt_1 = 0\n\tz = -1\n\tfor nxt in G[p]:\n\t\tif nxt in st:\n\t\t\tcnt_1 += 1\n\t\t\tz = nxt\n\tcnt_2 = 0\n\tfor v in st:\n\t\tif p in G[v]:\n\t\t\tcnt_2 += 1\n\tif cnt_1 > 1 or cnt_2 > 1:\n\t\treturn False\n\telif cnt_1 == 1 and cnt_2 == 1:\n\t\tif fst in G[p]:\n\t\t\tfor v in st:\n\t\t\t\tans.append(v)\n\t\t\treturn True\n\t\telse:\n\t\t\tk = arr[z]\n\t\t\tfor v in st:\n\t\t\t\tif arr[v] >= k:\n\t\t\t\t\tans.append(v)\n\t\t\treturn True\n\tfor nxt in G[p]:\n\t\tst.add(nxt)\n\t\tif solve(G, nxt, ans, st, fst, arr, x+1):\n\t\t\treturn True\n\t\tst.remove(nxt)\n\tarr[p] = 0\n\treturn False\n\ndef main():\n\tn, m = map(int, input().split())\n\tG = [[] for _ in range(n+1)]\n\tfor _ in range(m):\n\t\ta, b = map(int, input().split())\n\t\tG[a].append(b)\n\tans = []\n\tf = False\n\tst = set()\n\tarr = [0]*(n+1)\n\tfor i in range(1, n+1):\n\t\tst.add(i)\n\t\tif solve(G, i, ans, st, i, arr, 1):\n\t\t\tf = True\n\t\t\tbreak\n\t\tst.remove(i)\n\tif f:\n\t\tprint(len(ans))\n\t\tans.sort()\n\t\tfor v in ans:\n\t\t\tprint(v)\n\telse:\n\t\tprint(-1)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "N, M = map(int, input().split())\ntree = dict(zip(range(1, N+1), [[] for i in range(N)]))\nfor i in range(M):\n\ta, b = map(int, input().split())\n\ttree[a].append(b)\n\n\nis_visited = [False]*(N+1)\nnum_visited = 0\ndef find_cycle(d):\n\tnonlocal is_visited\n\tnonlocal num_visited\n\tcycle = []\n\tl = 1001\n\twhile d:\n\t\tnode = d[-1]\n\t\tif tree[node]:\n\t\t\tchild = tree[node].pop()\n\t\t\tif not is_visited[child]:\n\t\t\t\tis_visited[child] = True\n\t\t\t\tnum_visited += 1\n\t\t\tif child in cycle and node in cycle:\n\t\t\t\tidn = cycle.index(node)\n\t\t\t\tidc = cycle.index(child)\n\t\t\t\tcycle = cycle[:idn+1] + cycle[idc:]\n\t\t\t\tl = len(cycle)\n\t\t\tif child in d:\n\t\t\t\tidx = d.index(child)\n\t\t\t\tif len(d) - idx < l:\n\t\t\t\t\tcycle = d[idx:]\n\t\t\t\t\tl = len(cycle)\n\t\t\telse:\n\t\t\t\td.append(child)\n\t\telse:\n\t\t\td.pop()\n\treturn cycle\n\n\nis_visited[0] = True\nnum_visited += 1\ni = 1\nwhile num_visited < N+1:\n\twhile is_visited[i]:\n\t\ti += 1\n\td = [i]\n\tis_visited[i] = True\n\tnum_visited += 1\n\tcycle = find_cycle(d)\n\tif cycle:\n\t\tprint(len(cycle))\n\t\tprint(*cycle, sep='\\n')\n\t\treturn\n\nprint(-1)\n", "from collections import deque\nN,M=list(map(int,input().split()))\nG=[[] for i in range(N)]\nfor i in range(M):\n\ta,b=list(map(int,input().split()))\n\tG[a-1].append(b-1)\nK=[0 for i in range(N)]\nfor i in range(N):\n\tfor p in G[i]:\n\t\tK[p]+=1\nq=deque(i for i in range(N) if K[i]==0)\nres=[]\nwhile q:\n\tv1=q.popleft()\n\tres.append(v1)\n\tfor v2 in G[v1]:\n\t\tK[v2]-=1\n\t\tif K[v2]==0:\n\t\t\tq.append(v2)\nif len(res)==N:\n\tprint((-1))\n\treturn\nX={i for i in range(N)}\nfor st in range(N):\n\tbefore=[-1 for i in range(N)]\n\tq=deque([st])\n\tflag=0\n\twhile(q):\n\t\tr=q.popleft()\n\t\tfor p in G[r]:\n\t\t\tif before[p]==-1:\n\t\t\t\tbefore[p]=r\n\t\t\t\tq.append(p)\n\t\t\tif before[st]!=-1:\n\t\t\t\tY={st}\n\t\t\t\ttmp=before[st]\n\t\t\t\twhile(tmp!=st):\n\t\t\t\t\tY.add(tmp)\n\t\t\t\t\ttmp=before[tmp]\n\t\t\t\tif len(Y)<len(X):\n\t\t\t\t\tX={i for i in Y}\n\t\t\t\tflag=1\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tbreak\nprint((len(X)))\nfor i in X:\n\tprint((i+1))\n", "import sys\nsys.setrecursionlimit(10 ** 6)\n\nn, m = list(map(int, input().split()))\ne = [[] for _ in range(n)]\n\nfor _ in range(m):\n\ta, b = list(map(int, input().split()))\n\te[a-1].append(b-1)\n\nc = [0] * n\nans = []\ndef search_path(p, temp):\n\tc[p] = 1\n\tfor x in e[p]:\n\t\tif x in temp:\n\t\t\tprint((-99999))\n\t\t\treturn\n\t\telse:\n\t\t\tsearch_path(x, temp + [x])\n\n\nt = 1\nfor i in range(n):\n\tif c[i] == 0:\n\t\tans = search_path(i, [i])\n\nprint((-1))\n", "import sys\nsys.setrecursionlimit(10**7)\ndef main():\n\tN, M = list(map(int, input().split()))\n\tl = [[] for _ in range(N)]\n\tfor _ in range(M):\n\t\ta, b = list(map(int, input().split()))\n\t\tl[a-1].append(b-1)\n\tc = [0] * N\n\tloop = []\n\tdef cyclic(n):\n\t\tif c[n] == 2:\n\t\t\treturn False\n\t\tif c[n] == 1:\n\t\t\tloop.append(n)\n\t\t\treturn True\n\t\tc[n] = 1\n\t\tfor i in l[n]:\n\t\t\tif cyclic(i):\n\t\t\t\tloop.append(n)\n\t\t\t\treturn True\n\t\tc[n] = 2\n\t\treturn False\n\tfor i in range(N):\n\t\tif cyclic(i):\n\t\t\tbreak\n\tif len(loop) == 0:\n\t\tprint((-1))\n\t\treturn\n\tloop.reverse()\n\tt = loop[-1]\n\tloop = loop[loop.index(t):]\n\tll = set(loop)\n\tflag = True\n\twhile flag:\n\t\tfor i, v in enumerate(loop[:-1]):\n\t\t\tflag2 = False\n\t\t\tfor j in l[v]:\n\t\t\t\tif j in ll and loop[i + 1] != j:\n\t\t\t\t\tif loop.index(j) == 0:\n\t\t\t\t\t\tloop = loop[:i+1] + [j]\n\t\t\t\t\telif loop.index(j) < i:\n\t\t\t\t\t\tloop = loop[loop.index(j):i+1] + [j]\n\t\t\t\t\telse:\n\t\t\t\t\t\tloop = loop[:i+1] + loop[loop.index(j):]\n\t\t\t\t\tll = set(loop)\n\t\t\t\t\tflag2 = True\n\t\t\t\t\tbreak\n\t\t\tif flag2:\n\t\t\t\tbreak\n\t\telse:\n\t\t\tflag = False\n\tloop = set(loop)\n\tprint((len(loop)))\n\tfor i in loop:\n\t\tprint((i+1))\n\treturn\nmain()\n", "from collections import deque\n\nINF = 10**18\nN, M = map(int, input().split())\n\ngraph = [[] for _ in range(N)]\n\nfor _ in range(M):\n\ta, b = map(int,input().split())\n\tgraph[a - 1].append(b - 1)\n\nloopsize = INF\n\nfor root in range(N):\n\tqueue = deque([root])\n\tdist = [INF for _ in range(N)]\n\tdist[root] = 0\n\tprev = [None for _ in range(N)]\n\twhile queue:\n\t\tnode = queue.popleft()\n\t\tfor adj in graph[node]:\n\t\t\tif adj == root:\n\t\t\t\tdist[root] = dist[node] + 1\n\t\t\t\tprev[root] = node\n\t\t\t\tbreak\n\t\t\tif dist[adj] != INF:\n\t\t\t\tcontinue\n\t\t\tdist[adj] = dist[node] + 1\n\t\t\tprev[adj] = node\n\t\t\tqueue.append(adj)\n\t\telse:\n\t\t\tcontinue\n\t\tbreak\n\telse:\n\t\tcontinue\n\tif loopsize > dist[root]:\n\t\tloopsize = dist[root]\n\t\tpath = [root]\n\t\tnode = root\n\t\twhile prev[node] != root:\n\t\t\tnode = prev[node]\n\t\t\tpath.append(node)\n\nif loopsize != INF:\n\tprint(loopsize)\n\tfor node in path:\n\t\tprint(node + 1)\nelse:\n\tprint(-1)\n", "import sys\nsys.setrecursionlimit(10**9)\nN,M=map(int,input().split())\n\ngraph=[set() for _ in range(N+1)]\nfor _ in range(M):\n\tA,B=map(int,input().split())\n\tgraph[A].add(B)\n#print(graph)\n\nvisited=[False]*(N+1)\ndef dfs(path):\n\tnonlocal cycle\n\tu=path[-1]\n\t\n\tvisited[u]=True  \n\tfor v in graph[u]:\n\t\tif visited[v]:\n\t\t\tcycle=list(path+[v])\n\t\t\treturn\n\t\telse:\n\t\t\tdfs(path+[v])      \n\t\tif cycle:\n\t\t\treturn    \n\tvisited[u]=False\n\t\ncycle=[]\nfor i in range(1,N+1):\n\tdfs([i])\n\tif cycle:\n\t\tbreak\nelse:\n\tprint(-1)\n\treturn\n\t\t\n#remove prefix  \nfor i in range(len(cycle)):\n\tif cycle[i]==cycle[-1]:\n\t\tcycle=cycle[i:]\n\t\tbreak\n#print(cycle)\n\ncycle_set=set(cycle)\nsubgraph=[set() for _ in range(N+1)]\nfor c in cycle_set:\n\tfor v in graph[c]:\n\t\tif v in cycle_set:\n\t\t\tsubgraph[c].add(v)\n#print(subgraph)    \n\n#visited=[False]*(N+1)\nex_path=[]\ndef dfs2(path,t):\n\tnonlocal ex_path\n\tu=path[-1]\n\tif u==t:\n\t\tex_path=path\n\t\treturn\n\t\n\tfor v in graph[u]:\n\t\tdfs2(path+[v],t)\n\t\tif ex_path:\n\t\t\treturn\n\ngraph=subgraph\nwhile True:\n\tfor i in range(len(cycle)-1):\n\t\tu=cycle[i]\n\t\tv=cycle[i+1]\n\t\tw=-1\n\t\tif len(graph[u])>1:\n\t\t\tfor x in graph[u]:\n\t\t\t\tif x!=v:\n\t\t\t\t\tw=x\n\t\t\t\t\tbreak\n\t\t\tbreak\n\telse:\n\t\tprint(len(cycle)-1)\n\t\tfor i in range(len(cycle)-1):\n\t\t\tprint(cycle[i])\n\t\treturn\n\t\t\n\t#print(u,v,w)\n\t#w->u\n\tdfs2([w],u)\n\tcycle=ex_path+[w]\n\t#print(cycle)\n\tcycle_set=set(cycle)\n\tsubgraph=[set() for _ in range(N+1)]\n\tfor c in cycle_set:\n\t\tfor v in graph[c]:\n\t\t\tif v in cycle_set:\n\t\t\t\tsubgraph[c].add(v)\n\t\t\t\t\n\tgraph=subgraph\n", "n,m=list(map(int,input().split()))\ng=[[] for _ in range(n)]\nfor _ in range(m):\n\tu,v=list(map(int,input().split()))\n\tu,v=u-1,v-1\n\tg[u].append(v)\n\nimport sys\nsys.setrecursionlimit(10**7)\n\ndef func(loop):\n\tsl=set(loop)\n\tk=len(loop)\n\tfor i in range(k):\n\t\tv=loop[i]\n\t\tfor nv in g[v]:\n\t\t\tif nv not in sl:continue\n\t\t\tif nv==loop[(i+1)%k]:continue\n\t\t\tj=[j for j in range(k) if loop[j]==nv][0]\n\t\t\tif i<j:\n\t\t\t\tary=loop[:i+1]+loop[j:]\n\t\t\telse:\n\t\t\t\tary=loop[j:i+1]\n\t\t\tfunc(ary)\n\tprint((len(loop)))\n\tfor x in loop:\n\t\tprint((x+1))\n\treturn\n\nmi=set(range(n))\ndef dfs(v,par):\n\tmi.discard(v)\n\tfor nv in g[v]:\n\t\tif par[nv]==-1:\n\t\t\tpar[nv]=v\n\t\t\tdfs(nv,par)\n\t\t\tpar[nv]=-1\n\t\telse:\n\t\t\tloop=[v]\n\t\t\twhile v!=nv:\n\t\t\t\tloop.append(par[v])\n\t\t\t\tv=par[v]\n\t\t\tloop.reverse()\n\t\t\tfunc(loop)\nwhile mi:\n\tv=mi.pop()\n\tdfs(v,[-1]*n)\nprint((-1))\n", "def cycle_detection(V, E, s):\n\tprev = [-1] * len(V)\n\tstack = [s]\n\twhile stack:\n\t\tv = stack.pop()\n\t\tfor u in E[v]:\n\t\t\tif u == s:\n\t\t\t\tprev[u] = v\n\t\t\t\treturn (s, prev)\n\t\t\tif prev[u] == -1:\n\t\t\t\tstack.append(u)\n\t\t\t\tprev[u] = v\n\treturn (-1, prev)\n\nN, M = map(int, input().split())\nV = list(range(N))\nE = [[] for _ in range(N)]\nedges = []\nfor _ in range(M):\n\ta, b = map(int, input().split())\n\tE[a-1].append(b-1)\n\tedges.append((a-1, b-1))\n\ndag = False\nfor v in range(N):\n\ts, prev = cycle_detection(V, E, v)\n\tif s != -1: break\nelse:\n\tdag = True\n\nif dag: print(-1)\nelse:\n\t# construct a directed cycle\n\tcycle = set()\n\tcycle.add(s)\n\tpv = prev[s]\n\twhile pv != s:\n\t\tcycle.add(pv)\n\t\tpv = prev[pv]\n\t# shrink the directed cycle\n\tfor a, b in edges:\n\t\tif a in cycle and b in cycle and prev[b] != a:\n\t\t\tpv = prev[b]\n\t\t\twhile pv != a:\n\t\t\t\tcycle.remove(pv)\n\t\t\t\tpv = prev[pv]\n\t\t\tprev[b] = a\n\tprint(len(cycle))\n\tprint(*[v + 1 for v in cycle], sep='\\n')\n", "import sys\n\nread = sys.stdin.read\n\nN, M = list(map(int, input().split()))\nif M != 0:\n\tAB = list(map(int, read().split()))\nelse:\n\tprint((-1))\n\treturn\n\ngraph = [[] for _ in range(N + 1)]\nA = AB[::2]\nB = AB[1::2]\nA_s = set(A)\n# 出次数が0の頂点はいらない。\nneedless = set(range(1, N + 1)) - A_s\n\nfor i, j in zip(A, B):\n\tif j not in needless:\n\t\tgraph[i].append(j)\n\n\n# cycleを少なくとも一つ検出する\ndef dfs(original_stack):\n\tchecked = [False] * (N + 1)\n\twhile original_stack:\n\t\tstart = original_stack.pop()\n\t\tif checked[start]:\n\t\t\tcontinue\n\t\tchecked[start] = True\n\t\tstack = [(start, [start])]\n\t\twhile stack:\n\t\t\tv, route = stack.pop()\n\t\t\tfor i in graph[v]:\n\t\t\t\tif i in route:\n\t\t\t\t\treturn route[route.index(i):]\n\t\t\t\telse:\n\t\t\t\t\tstack.append((i, route + [i]))\n\t\t\t\t\tchecked[i] = True\n\n\nv = dfs([i for i in range(1, N + 1) if graph[i]])\nif not v:\n\tprint((-1))\n\treturn\n\nwhile True:\n\tv_s = set(v)\n\tlength = len(v)\n\tfor i, (v_i, v_j) in enumerate(zip(v, v[1:] + [v[0]])):\n\t\tfor j in graph[v_i]:\n\t\t\tif j != v_j and j in v_s:\n\t\t\t\tidx = v.index(j)\n\t\t\t\tif i < idx:\n\t\t\t\t\tv = v[:i + 1] + v[idx:]\n\t\t\t\telse:\n\t\t\t\t\tv = v[idx:i + 1]\n\t\t\t\tbreak\n\t\telse:\n\t\t\tcontinue\n\t\tbreak\n\telse:\n\t\tprint((len(v)))\n\t\tprint(('\\n'.join(map(str, v))))\n\t\treturn\n", "def main():\n\tfrom collections import deque\n\tn,m,*t=map(int,open(0).read().split())\n\ti=[0]*n\n\to=[[]for _ in range(n)]\n\tfor a,b in zip(*[iter(t)]*2):\n\t\to[a-1]+=b-1,\n\t\ti[b-1]+=1\n\tq=deque(v for v,f in enumerate(i)if f<1)\n\tr=[]\n\twhile q:\n\t\tv=q.popleft()\n\t\tr+=v,\n\t\tfor w in o[v]:\n\t\t\ti[w]-=1\n\t\t\tif i[w]==0:q+=w,\n\tprint(-(len(r)==n))\nmain()\n", "import sys\nsys.setrecursionlimit(10000000)\nMOD = 10 ** 9 + 7\nINF = 10 ** 15\n\nfrom collections import deque,defaultdict,Counter\ndef main():\n\tN,M = map(int,input().split())\n\tG = [[] for _ in range(N)]\n\tG_rev = [[] for _ in range(N)]\n\tfor _ in range(M):\n\t\ta,b = map(int,input().split())\n\t\ta -= 1\n\t\tb -= 1\n\t\tG[a].append(b)\n\t\tG_rev[b].append(a)\n\t\n\ts,g = None,None\n\tans = INF\n\tq = deque([])\n\tfor i in range(N):\n\t\tq.append(i)\n\t\tdist = [-1] * N\n\t\tdist[i] = 0\n\t\twhile q:\n\t\t\tv = q.popleft()\n\t\t\tfor e in G[v]:\n\t\t\t\tif i == e:\n\t\t\t\t\tif ans > dist[v] + 1:\n\t\t\t\t\t\tans = dist[v] + 1\n\t\t\t\t\t\ts,g = i,v\n\t\t\t\telif dist[e] < 0:\n\t\t\t\t\tdist[e] = dist[v] + 1\n\t\t\t\t\tq.append(e)\n\n\tif ans == INF:\n\t\tprint(-1)\n\telse:\n\t\tprint(ans)\n\t\tq.append(s)\n\t\tdist = [-1] * N\n\t\tdist[s] = 0\n\t\twhile q:\n\t\t\tv = q.popleft()\n\t\t\tfor e in G[v]:\n\t\t\t\tif e == g:\n\t\t\t\t\tdist[g] = dist[v] + 1\n\t\t\t\t\tq.clear()\n\t\t\t\t\tbreak\n\t\t\t\telif dist[e] < 0:\n\t\t\t\t\tdist[e] = dist[v] + 1\n\t\t\t\t\tq.append(e)\n\t\troute = [g + 1]\n\t\tnow = g\n\t\twhile now != s:\n\t\t\tfor e in G_rev[now]:\n\t\t\t\tif dist[e] == dist[now] - 1:\n\t\t\t\t\tnow = e\n\t\t\t\t\tbreak\n\t\t\troute.append(now + 1)\n\t\tprint('\\n'.join(map(str,route)))\ndef __starting_point():\n\tmain()\n__starting_point()\n", "from sys import setrecursionlimit\nsetrecursionlimit(10000)\nN, M = list(map(int, input().split()))\ntable = [[] for _ in range(N)]\nfor _ in range(M):\n\ta, b = list(map(int, input().split()))\n\ttable[a-1].append(b-1)\n\nvisit = [False] * N\nvisit2 = [False] * N\ng = []\n\n\ndef dfs(v):\n\tg.append(v)\n\tif visit[v]:\n\t\treturn True\n\tvisit[v] = True\n\tvisit2[v] = True\n\tfor u in table[v]:\n\t\tif dfs(u):\n\t\t\treturn True\n\tg.pop()\n\tvisit[v] = False\n\treturn False\n\n\nfor i in range(N):\n\tg = []\n\tif not visit2[i]:\n\t\tif dfs(i):\n\t\t\tbreak\nelse:\n\tprint((-1))\n\treturn\nprint((0))\n# ans = [v+1 for v in g[g.index(g[-1]):-1]]\n# print(len(ans))\n# print(*ans, sep=\"\\n\")\n", "from collections import deque\nN,M=list(map(int,input().split()))\nG=[[] for i in range(N)]\nfor i in range(M):\n\ta,b=list(map(int,input().split()))\n\tG[a-1].append(b-1)\nK=[0 for i in range(N)]\nfor i in range(N):\n\tfor p in G[i]:\n\t\tK[p]+=1\nq=deque(i for i in range(N) if K[i]==0)\nres=[]\nwhile q:\n\tv1=q.popleft()\n\tres.append(v1)\n\tfor v2 in G[v1]:\n\t\tK[v2]-=1\n\t\tif K[v2]==0:\n\t\t\tq.append(v2)\nif len(res)==N:\n\tprint((-1))\nelse:\n\tprint((0))\n\n", "import sys\ninput = sys.stdin.buffer.readline\n\n#sys.setrecursionlimit(10**9)\n#from functools import lru_cache\n\ndef RD(): return input().rstrip().decode()\ndef II(): return int(input())\ndef FI(): return int(input())\ndef MI(): return map(int,input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int,input().split()))\ndef LF(): return list(map(float,input().split()))\ndef TI(): return tuple(map(int,input().split()))\n# rstrip().decode()\n\nfrom collections import deque\n\ndef main():\n\tn,m=MI()\n\tG=[[] for _ in range(n+1)]\n\n\tfor _ in range(m):\n\t\ta,b=MI()\n\t\tG[a].append(b)\n\n\tA=[10**5]*(n+1)\n\n\tfor i in range(1,n+1):\n\t\tQ=deque([[i,0]])\n\t\tD=[-1]*(n+1)\n\t\twhile Q:\n\t\t\t#print(Q)\n\t\t\tnow,d=Q.popleft()\n\t\t\tif now==i and d>0:\n\t\t\t\tA[i]=d\n\t\t\t\tbreak\n\t\t\tfor nx in G[now]:\n\t\t\t\tif D[nx]==-1:\n\t\t\t\t\tD[nx]=d+1\n\t\t\t\t\tQ.append([nx,d+1])\n\t#print(A)\n\n\tk=min(A)\n\t#print(k)\n\n\tif k==10**5:\n\t\tprint(-1)\n\t\treturn\n\n\ts=A.index(k)\n\t#print(s)\n\n\tA=[]\n\tQ=deque([[s,0]])\n\tD=[10**5]*(n+1)\n\n\twhile Q:\n\t\tnow,d=Q.pop()\n\t\tif now==s and d>0:\n\t\t\tbreak\n\t\tif d==k:\n\t\t\tcontinue\n\t\tA.append(now)\n\t\tfor nx in G[now]:\n\t\t\tif D[nx]>d+1:\n\t\t\t\tD[nx]=d+1\n\t\t\t\tQ.append([nx,d+1])\n\tD[s]=0\n\n\t#print(A)\n\t#print(D)\n\n\tans=[]\n\td=k-1\n\tfor i in reversed(A):\n\t\tif D[i]==d:\n\t\t\tans.append(i)\n\t\t\td-=1\n\n\tprint(k)\n\tprint(*ans[::-1],sep=\"\\n\")\n\n\n\n\n\n\n\n\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from collections import deque\n\nN, M, *AB = map(int, open(0).read().split())\n\nE = [[] for _ in range(N + 1)]\nfor a, b in zip(*[iter(AB)] * 2):\n\tE[a].append(b)\n\nshortest = N + 1\nans = []\nfor s in range(1, N + 1):\n\tD = [-1] * (N + 1)\n\tP = [-1] * (N + 1)\n\n\tD[s] = 0\n\tQ = deque([s])\n\twhile Q:\n\t\tp = Q.popleft()\n\t\tfor c in E[p]:\n\t\t\tif D[c] < 0:\n\t\t\t\tD[c] = D[p] + 1\n\t\t\t\tP[c] = p\n\t\t\t\tQ.append(c)\n\n\tfor t in range(1, N + 1):\n\t\tif t == s or D[t] < 0:\n\t\t\tcontinue\n\n\t\tfor v in E[t]:\n\t\t\tif v != s:\n\t\t\t\tcontinue\n\n\t\t\tT = [s]\n\t\t\tcur = t\n\t\t\twhile cur != s:\n\t\t\t\tT.append(cur)\n\t\t\t\tcur = P[cur]\n\n\t\t\tif shortest > len(T):\n\t\t\t\tshortest = len(T)\n\t\t\t\tans = T\n\nif shortest == N + 1:\n\tprint(-1)\nelse:\n\tprint(len(ans))\n\tprint(\"\\n\".join(map(str, ans)))\n", "from collections import*\nn,m,*t=map(int,open(0).read().split())\ni,o,r=[0]*n,[[]for _ in'_'*n],[]\nfor a,b in zip(*[iter(t)]*2):\n\to[a-1]+=b-1,\n\ti[b-1]+=1\nq=deque(v for v in range(n)if i[v]<1)\nwhile q:\n\tv=q.popleft()\n\tr+=v,\n\tfor w in o[v]:\n\t\ti[w]-=1\n\t\tif i[w]==0:q+=w,\nprint(-(len(r)==n))\n", "N,M=map(int,input().split())\nAB=[list(map(int,input().split())) for i in range(M)]\nc=[[] for i in range(N)]\nfor a,b in AB:\n\tc[a-1].append(b-1)\nfrom collections import deque\nimport sys\nsys.setrecursionlimit(10**9)\ndef f2(q):\n\ts=set(q)\n\tfor a,b in AB:\n\t\tif a in s and b in s:\n\t\t\ti=q.index(b)\n\t\t\tif q[i-1]!=a:\n\t\t\t\tbreak\n\tif a in s and b in s and q[i-1]!=a:\n\t\tq2=deque([a,b])\n\t\twhile q[(i+1)%len(q)]!=a:\n\t\t\tq2.append(q[(i+1)%len(q)])\n\t\t\ti+=1\n\t\tf2(q2)\n\tprint(len(q),*q,sep='\\n')\n\treturn\nv=[0]*N \nw=[0]*N\ndef f(p,v,q):\n\tv[p]=1\n\tw[p]=1\n\tq.append(p+1)\n\tfor n in c[p]:\n\t\tif v[n]:\n\t\t\tf2(q)\n\t\telse:\n\t\t\tf(n,v,q)\n\tq.pop()\n\tv[p]=0\nfor p in range(N):\n\tif w[p]==0:\n\t\tf(p,v,deque())\nprint(-1)\n", "import sys\nsys.setrecursionlimit(10 ** 6)\n\nn, m = list(map(int, input().split()))\ne = [[] for _ in range(n)]\n\nfor _ in range(m):\n\ta, b = list(map(int, input().split()))\n\te[a-1].append(b-1)\n\nc = [0] * n\nans = []\ndef search_path(p, temp):\n\tc[p] = 1\n\tfor x in e[p]:\n\t\tif x in temp:\n\t\t\tprint((-99999))\n\t\t\treturn\n\t\telse:\n\t\t\tsearch_path(x, temp + [x])\n\n\nt = 1\nfor i in range(n):\n\tif c[i] == 0:\n\t\tans = search_path(i, [i])\n\nprint((-1))\n", "import sys\nfrom copy import deepcopy as copy\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef main():\n\tn, m = list(map(int, input().split()))\n\t\n\ttree = [[] for _ in range(n)]\n\tedge = dict()\n\tfor i in range(m):\n\t\ta, b = list(map(int, input().split()))\n\t\ttree[a-1].append(b-1)\n\t\tedge[(a-1, b-1)] = i+1\n\t\n\tans = 0\n\tfor i in range(n):\n\t\tnot_yet = deque([i])\n\t\talready = [False]*n\n\t\tdist = [0]*n\n\t\tpar = [0]*n\n\t\talready[i] = True\n\t\tsub = []\n\t\t\n\t\twhile not_yet:\n\t\t\tkey = not_yet.popleft()\n\t\t\tfor v in tree[key]:\n\t\t\t\tif already[v]:\n\t\t\t\t\t\n\t\t\t\t\tif v == i:\n\t\t\t\t\t\tsub = [key+1]\n\t\t\t\t\t\tnow = key\n\t\t\t\t\t\twhile now != i:\n\t\t\t\t\t\t\tsub.append(par[now]+1)\n\t\t\t\t\t\t\tnow = par[now]\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcontinue\n\t\t\t\t\n\t\t\t\tnot_yet.append(v)\n\t\t\t\talready[v] = True\n\t\t\t\tdist[v] = dist[key] + 1\n\t\t\t\tpar[v] = key\n\t\t\tif sub:\n\t\t\t\tbreak\n\t\t\t\n\t\tif sub:\n\t\t\tif ans:\n\t\t\t\tif len(ans) > len(sub):\n\t\t\t\t\tans = copy(sub)\n\t\t\telse:\n\t\t\t\tans = copy(sub)\n\t\t\t\n\t\t\n\tif ans:\n\t\tprint((len(ans)))\n\t\tfor a in ans:\n\t\t\tprint(a)\n\telse:\n\t\tprint((-1))\n\t\t\n\t\n\t\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\nsys.setrecursionlimit(10 ** 6)\n\nn, m = list(map(int, input().split()))\ne = [[] for _ in range(n)]\n\nfor _ in range(m):\n\ta, b = list(map(int, input().split()))\n\te[a-1].append(b-1)\n\nc = [0] * n\nans = []\ndef search_path(p, temp):\n\tc[p] = 1\n\tfor x in e[p]:\n\t\tif x in temp:\n\t\t\tprint((-99999))\n\t\t\treturn\n\t\telse:\n\t\t\tsearch_path(x, temp + [x])\n\n\nt = 1\nfor i in range(n):\n\tif c[i] == 0:\n\t\tans = search_path(i, [i])\n\nprint((-1))\n"], "id": "id6697"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6697", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["given", 1], ["is", 1], ["a", 1], ["directed", 1], ["graph", 1], ["g", 1], ["with", 2], ["n", 3], ["vertices", 3], ["and", 1], ["m", 1], ["edges", 1], ["the", 1], ["vertices", 1], ["are", 1], ["numbered", 1], ["1", 1], ["to", 1], ["n", 1], ["and", 1], ["the", 1], ["i", 1], ["th", 1], ["edge", 1], ["is", 1], ["directed", 1], ["from", 1], ["vertex", 1], ["a", 1], ["i", 1], ["to", 1], ["vertex", 1], ["b", 1], ["i", 1], ["it", 1], ["is", 1], ["guaranteed", 1], ["that", 1], ["the", 1], ["graph", 1], ["contains", 1], ["no", 1], ["self", 1], ["loops", 1], ["or", 1], ["multiple", 1], ["edges", 1], ["determine", 1], ["whether", 1], ["there", 1], ["exists", 1], ["an", 1], ["induced", 1], ["subgraph", 1], ["see", 1], ["notes", 1], ["of", 1], ["g", 1], ["such", 1], ["that", 1], ["the", 1], ["in", 1], ["degree", 1], ["and", 1], ["out", 1], ["degree", 1], ["of", 1], ["every", 1], ["vertex", 1], ["are", 1], ["both", 1], ["1", 1], ["if", 1], ["the", 1], ["answer", 1], ["is", 1], ["yes", 1], ["show", 1], ["one", 1], ["such", 0], ["subgraph", 0], ["here", 0], ["the", 0], ["null", 0], ["graph", 0], ["is", 0], ["not", 0], ["considered", 0], ["as", 0], ["a", 0], ["subgraph", 0], ["notes", 0], ["for", 0], ["a", 0], ["directed", 0], ["graph", 0], ["g", 0], ["v", 0], ["e", 0], ["we", 0], ["call", 0], ["a", 0], ["directed", 0], ["graph", 0], ["g", 0], ["v", 0], ["e", 0], ["satisfying", 0], ["the", 0], ["following", 0], ["conditions", 0], ["an", 0], ["induced", 0], ["subgraph", 0], ["of", 0], ["g", 0], ["v", 0], ["is", 0], ["a", 0], ["non", 0], ["empty", 0], ["subset", 0], ["of", 0], ["v", 0], ["e", 0], ["is", 0], ["the", 0], ["set", 0], ["of", 0], ["all", 0], ["the", 0], ["edges", 0], ["in", 0], ["e", 0], ["that", 0], ["have", 0], ["both", 0], ["endpoints", 0], ["in", 0], ["v", 0], ["constraints", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["1000", 0], ["0", 0], ["leq", 0], ["m", 0], ["leq", 0], ["2000", 0], ["1", 3], ["leq", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["leq", 0], ["n", 0], ["a", 0], ["i", 0], ["neq", 0], ["b", 0], ["i", 0], ["all", 0], ["pairs", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["are", 0], ["distinct", 0], ["all", 0], ["values", 0], ["in", 0], ["input", 0], ["are", 0], ["integers", 0], ["input", 0], ["input", 0], ["is", 0], ["given", 0], ["from", 0], ["standard", 0], ["input", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["n", 0], ["m", 3], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["a", 0], ["2", 0], ["b", 0], ["2", 0], ["a", 0], ["m", 0], ["b", 0], ["m", 0], ["output", 0], ["if", 0], ["there", 0], ["is", 0], ["no", 0], ["induced", 0], ["subgraph", 0], ["of", 0], ["g", 0], ["that", 0], ["satisfies", 0], ["the", 0], ["condition", 0], ["print", 0], ["1", 0], ["otherwise", 0], ["print", 0], ["an", 0], ["induced", 0], ["subgraph", 0], ["of", 0], ["g", 0], ["that", 0], ["satisfies", 0], ["the", 0], ["condition", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["k", 0], ["v", 0], ["1", 0], ["v", 0], ["2", 0], ["v", 0], ["k", 0], ["this", 0], ["represents", 0], ["the", 0], ["induced", 0], ["subgraph", 0], ["of", 0], ["g", 0], ["with", 0], ["k", 0], ["vertices", 0], ["whose", 0], ["vertex", 0], ["set", 0], ["is", 0], ["v", 0], ["1", 0], ["v", 0], ["2", 0], ["ldots", 0], ["v", 0], ["k", 0], ["the", 0], ["order", 0], ["of", 0], ["v", 0], ["1", 0], ["v", 0], ["2", 0], ["ldots", 0], ["v", 0], ["k", 0], ["does", 0], ["not", 0], ["matter", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["subgraphs", 0], ["of", 0], ["g", 0], ["that", 0], ["satisfy", 0], ["the", 0], ["condition", 0], ["printing", 0], ["any", 0], ["of", 0], ["them", 0], ["is", 0], ["accepted", 0], ["sample", 0], ["input", 0], ["4", 0], ["5", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["2", 0], ["4", 0], ["4", 0], ["1", 0], ["4", 0], ["3", 0], ["sample", 0], ["output", 0], ["3", 0], ["1", 0], ["2", 0], ["4", 0], ["the", 0], ["induced", 0], ["subgraph", 0], ["of", 0], ["g", 0], ["whose", 0], ["vertex", 0], ["set", 0], ["is", 0], ["1", 0], ["2", 0], ["4", 0], ["has", 0], ["the", 0], ["edge", 0], ["set", 0], ["1", 0], ["2", 0], ["2", 0], ["4", 0], ["4", 0], ["1", 0], ["the", 0], ["in", 0], ["degree", 0], ["and", 0], ["out", 0], ["degree", 0], ["of", 0], ["every", 0], ["vertex", 0], ["in", 0], ["this", 0], ["graph", 0], ["are", 0], ["both", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2334293948126801, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.22430355427473578, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.32590529247910865, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.27762302692664775, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2334293948126801, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.22430355427473578, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.32590529247910865, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.27762302692664775, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["class", 0], ["graph", 0], ["directed", 0], ["def", 0], ["init", 0], ["self", 0], ["n", 0], ["edge", 0], ["indexed", 0], ["1", 0], ["self", 0], ["n", 0], ["n", 0], ["self", 0], ["graph", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["e", 0], ["in", 0], ["edge", 0], ["self", 0], ["graph", 0], ["e", 0], ["0", 0], ["indexed", 0], ["append", 0], ["e", 0], ["1", 0], ["indexed", 0], ["inf", 0], ["10", 0], ["18", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["edge", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["g", 0], ["graph", 0], ["n", 0], ["edge", 0], ["loopsize", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["root", 0], ["i", 0], ["queue", 0], ["deque", 0], ["root", 0], ["dist", 0], ["inf", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["dist", 0], ["root", 0], ["0", 0], ["prev", 0], ["none", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["while", 0], ["queue", 0], ["node", 0], ["queue", 0], ["popleft", 0], ["for", 0], ["adj", 0], ["in", 0], ["g", 0], ["graph", 0], ["node", 0], ["if", 0], ["adj", 0], ["root", 0], ["閉路を検出する", 0], ["dist", 0], ["root", 0], ["dist", 0], ["node", 0], ["1", 0], ["prev", 0], ["root", 0], ["node", 0], ["break", 0], ["if", 0], ["dist", 0], ["adj", 0], ["inf", 0], ["continue", 0], ["dist", 0], ["adj", 0], ["dist", 0], ["node", 0], ["1", 0], ["prev", 0], ["adj", 0], ["node", 0], ["queue", 0], ["append", 0], ["adj", 0], ["else", 0], ["continue", 0], ["break", 0], ["else", 0], ["continue", 0], ["最小の閉路なら条件を満たす", 0], ["if", 0], ["loopsize", 0], ["dist", 0], ["root", 0], ["loopsize", 0], ["dist", 0], ["root", 0], ["path", 0], ["root", 0], ["node", 0], ["root", 0], ["while", 0], ["prev", 0], ["node", 0], ["root", 0], ["node", 0], ["prev", 0], ["node", 0], ["path", 0], ["append", 0], ["node", 0], ["if", 0], ["loopsize", 0], ["inf", 0], ["print", 0], ["loopsize", 0], ["for", 0], ["node", 0], ["in", 0], ["path", 0], ["print", 0], ["node", 0], ["1", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["adjl", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["b", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["adjl", 0], ["a", 0], ["add", 0], ["b", 0], ["def", 0], ["getcycle", 0], ["adjl", 0], ["def", 0], ["dfs", 0], ["vnow", 0], ["if", 0], ["isavails", 0], ["vnow", 0], ["anss", 0], ["append", 0], ["vnow", 0], ["return", 0], ["vnow", 0], ["useds", 0], ["vnow", 0], ["true", 0], ["isavails", 0], ["vnow", 0], ["true", 0], ["for", 0], ["v2", 0], ["in", 0], ["adjl", 0], ["vnow", 0], ["vret", 0], ["dfs", 0], ["v2", 0], ["if", 0], ["vret", 0], ["vnow", 0], ["or", 0], ["vret", 0], ["numv", 0], ["return", 0], ["numv", 0], ["elif", 0], ["vret", 0], ["1", 0], ["anss", 0], ["append", 0], ["vnow", 0], ["return", 0], ["vret", 0], ["isavails", 0], ["vnow", 0], ["false", 0], ["return", 0], ["1", 0], ["numv", 0], ["len", 0], ["adjl", 0], ["useds", 0], ["false", 0], ["numv", 0], ["anss", 0], ["for", 0], ["vst", 0], ["in", 0], ["range", 0], ["numv", 0], ["isavails", 0], ["false", 0], ["numv", 0], ["if", 0], ["useds", 0], ["vst", 0], ["continue", 0], ["vret", 0], ["dfs", 0], ["vst", 0], ["if", 0], ["vret", 0], ["numv", 0], ["return", 0], ["anss", 0], ["1", 0], ["return", 0], ["cycle", 0], ["getcycle", 0], ["adjl", 0], ["if", 0], ["not", 0], ["cycle", 0], ["print", 0], ["1", 0], ["return", 0], ["isavails", 0], ["false", 0], ["n", 0], ["v2s", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["cycle", 0], ["isavails", 0], ["cycle", 0], ["i", 0], ["true", 0], ["v2s", 0], ["cycle", 0], ["i", 0], ["1", 0], ["cycle", 0], ["i", 0], ["while", 0], ["true", 0], ["adjl2", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["1", 0], ["1", 0], ["for", 0], ["v", 0], ["in", 0], ["cycle", 0], ["for", 0], ["v2", 0], ["in", 0], ["adjl", 0], ["v", 0], ["if", 0], ["isavails", 0], ["v2", 0], ["adjl2", 0], ["v", 0], ["add", 0], ["v2", 0], ["if", 0], ["v2s", 0], ["v", 0], ["v2", 0], ["a", 0], ["b", 0], ["v", 0], ["v2", 0], ["if", 0], ["a", 0], ["b", 0], ["1", 0], ["1", 0], ["print", 0], ["len", 0], ["cycle", 0], ["print", 0], ["n", 0], ["join", 0], ["str", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["cycle", 0], ["break", 0], ["adjl", 0], ["adjl2", 0], ["cycle", 0], ["isavails", 0], ["false", 0], ["n", 0], ["v2s", 0], ["a", 0], ["b", 0], ["v", 0], ["a", 0], ["while", 0], ["not", 0], ["isavails", 0], ["v", 0], ["cycle", 0], ["append", 0], ["v", 0], ["isavails", 0], ["v", 0], ["true", 0], ["v", 0], ["v2s", 0], ["v", 0], ["find", 0], ["a", 0], ["cycle", 0], ["def", 0], ["find", 0], ["cycle", 0], ["g", 0], ["n", 0], ["len", 0], ["g", 0], ["used", 0], ["0", 0], ["n", 0], ["0", 0], ["not", 0], ["yet", 0], ["1", 0], ["visiting", 0], ["2", 0], ["visited", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["各点でdfs", 0], ["if", 0], ["used", 0], ["v", 0], ["2", 0], ["continue", 0], ["初期化", 0], ["stack", 0], ["v", 0], ["hist", 0], ["履歴", 0], ["while", 0], ["stack", 0], ["v", 0], ["stack", 0], ["1", 0], ["if", 0], ["used", 0], ["v", 0], ["1", 0], ["used", 0], ["v", 0], ["2", 0], ["帰りがけの状態に", 0], ["stack", 0], ["pop", 0], ["hist", 0], ["pop", 0], ["continue", 0], ["hist", 0], ["append", 0], ["v", 0], ["used", 0], ["v", 0], ["1", 0], ["行きがけの状態に", 0], ["for", 0], ["c", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["used", 0], ["c", 0], ["2", 0], ["continue", 0], ["elif", 0], ["used", 0], ["c", 0], ["1", 0], ["cを始点とするサイクル発見！", 0], ["return", 0], ["hist", 0], ["hist", 0], ["index", 0], ["c", 0], ["else", 0], ["stack", 0], ["append", 0], ["c", 0], ["return", 0], ["none", 0], ["def", 0], ["find", 0], ["minimal", 0], ["cycle", 0], ["g", 0], ["cycle", 0], ["n", 0], ["len", 0], ["g", 0], ["is", 0], ["in", 0], ["cycle", 0], ["0", 0], ["n", 0], ["サイクルに使われているか", 0], ["nxt", 0], ["1", 0], ["n", 0], ["次の頂点", 0], ["l", 0], ["len", 0], ["cycle", 0], ["for", 0], ["i", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["cycle", 0], ["is", 0], ["in", 0], ["cycle", 0], ["c", 0], ["1", 0], ["nxt", 0], ["c", 0], ["cycle", 0], ["i", 0], ["1", 0], ["l", 0], ["極小サイクルを求める", 0], ["for", 0], ["v", 0], ["in", 0], ["cycle", 0], ["if", 0], ["is", 0], ["in", 0], ["cycle", 0], ["v", 0], ["for", 0], ["c", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["is", 0], ["in", 0], ["cycle", 0], ["c", 0], ["1", 0], ["もしショートカット", 0], ["v", 0], ["c", 0], ["があれば", 0], ["v0", 0], ["nxt", 0], ["v", 0], ["以下サイクルのうち", 0], ["v", 0], ["から", 0], ["c", 0], ["までを削除", 0], ["while", 0], ["v0", 0], ["c", 0], ["is", 0], ["in", 0], ["cycle", 0], ["v0", 0], ["0", 0], ["v0", 0], ["nxt", 0], ["v0", 0], ["nxt", 0], ["v", 0], ["c", 0], ["nxt", 0], ["を繋ぎ直す", 0], ["極小サイクルの出力", 0], ["i", 0], ["is", 0], ["in", 0], ["cycle", 0], ["index", 0], ["1", 0], ["v", 0], ["nxt", 0], ["i", 0], ["hist", 0], ["i", 0], ["履歴", 0], ["while", 0], ["v", 0], ["i", 0], ["hist", 0], ["append", 0], ["v", 0], ["v", 0], ["nxt", 0], ["v", 0], ["return", 0], ["hist", 0], ["coding", 0], ["utf", 0], ["8", 0], ["your", 0], ["code", 0], ["here", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["readline", 0], ["split", 0], ["g", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["int", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["readline", 0], ["split", 0], ["g", 0], ["a", 0], ["append", 0], ["b", 0], ["cycle", 0], ["find", 0], ["cycle", 0], ["g", 0], ["if", 0], ["cycle", 0], ["none", 0], ["print", 0], ["1", 0], ["else", 0], ["res", 0], ["find", 0], ["minimal", 0], ["cycle", 0], ["g", 0], ["cycle", 0], ["print", 0], ["len", 0], ["res", 0], ["for", 0], ["i", 0], ["in", 0], ["res", 0], ["print", 0], ["i", 0], ["1", 0], ["def", 0], ["main", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["m", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["open", 0], ["0", 0], ["read", 0], ["split", 0], ["i", 0], ["0", 0], ["n", 0], ["o", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["iter", 0], ["t", 0], ["2", 0], ["o", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["i", 0], ["b", 0], ["1", 0], ["1", 0], ["q", 0], ["deque", 0], ["v", 0], ["for", 0], ["v", 0], ["f", 0], ["in", 0], ["enumerate", 0], ["i", 0], ["if", 0], ["f", 0], ["1", 0], ["r", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["r", 0], ["v", 0], ["for", 0], ["w", 0], ["in", 0], ["o", 0], ["v", 0], ["i", 0], ["w", 0], ["1", 0], ["if", 0], ["i", 0], ["w", 0], ["0", 0], ["q", 0], ["w", 0], ["print", 0], ["len", 0], ["r", 0], ["n", 0], ["main", 0], ["from", 0], ["collections", 0], ["import", 0], ["n", 0], ["m", 0], ["t", 0], ["map", 0], ["int", 0], ["open", 0], ["0", 0], ["read", 0], ["split", 0], ["i", 0], ["o", 0], ["0", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["iter", 0], ["t", 0], ["2", 0], ["o", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["i", 0], ["b", 0], ["1", 0], ["1", 0], ["q", 0], ["deque", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["v", 0], ["1", 0], ["r", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["r", 0], ["v", 0], ["for", 0], ["w", 0], ["in", 0], ["o", 0], ["v", 0], ["i", 0], ["w", 0], ["1", 0], ["if", 0], ["i", 0], ["w", 0], ["0", 0], ["q", 0], ["w", 0], ["print", 0], ["len", 0], ["r", 0], ["n", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["class", 0], ["directedgraph", 0], ["def", 0], ["init", 0], ["self", 0], ["adj", 0], ["self", 0], ["n", 0], ["len", 0], ["adj", 0], ["self", 0], ["adj", 0], ["adj", 0], ["self", 0], ["is", 0], ["asyclic", 0], ["false", 0], ["self", 0], ["max", 0], ["path", 0], ["len", 0], ["none", 0], ["def", 0], ["topological", 0], ["sort", 0], ["self", 0], ["indegree", 0], ["0", 0], ["self", 0], ["n", 0], ["for", 0], ["i", 0], ["vs", 0], ["in", 0], ["enumerate", 0], ["self", 0], ["adj", 0], ["for", 0], ["dest", 0], ["in", 0], ["vs", 0], ["indegree", 0], ["dest", 0], ["1", 0], ["zero", 0], ["v", 0], ["for", 0], ["v", 0], ["indeg", 0], ["in", 0], ["enumerate", 0], ["indegree", 0], ["if", 0], ["indeg", 0], ["0", 0], ["zero", 0], ["v", 0], ["append", 0], ["v", 0], ["max", 0], ["path", 0], ["len", 0], ["1", 0], ["tp", 0], ["sorted", 0], ["to", 0], ["be", 0], ["added", 0], ["while", 0], ["true", 0], ["while", 0], ["zero", 0], ["v", 0], ["v", 0], ["zero", 0], ["v", 0], ["pop", 0], ["tp", 0], ["sorted", 0], ["append", 0], ["v", 0], ["for", 0], ["dest", 0], ["in", 0], ["self", 0], ["adj", 0], ["v", 0], ["indegree", 0], ["dest", 0], ["1", 0], ["if", 0], ["indegree", 0], ["dest", 0], ["0", 0], ["to", 0], ["be", 0], ["added", 0], ["append", 0], ["dest", 0], ["if", 0], ["len", 0], ["to", 0], ["be", 0], ["added", 0], ["0", 0], ["zero", 0], ["v", 0], ["to", 0], ["be", 0], ["added", 0], ["to", 0], ["be", 0], ["added", 0], ["max", 0], ["path", 0], ["len", 0], ["1", 0], ["else", 0], ["break", 0], ["if", 0], ["len", 0], ["tp", 0], ["sorted", 0], ["self", 0], ["n", 0], ["self", 0], ["is", 0], ["asyclic", 0], ["true", 0], ["self", 0], ["max", 0], ["path", 0], ["len", 0], ["max", 0], ["path", 0], ["len", 0], ["return", 0], ["tp", 0], ["sorted", 0], ["else", 0], ["self", 0], ["is", 0], ["asyclic", 0], ["false", 0], ["return", 0], ["none", 0], ["def", 0], ["extract", 0], ["cycle", 0], ["self", 0], ["self", 0], ["seen", 0], ["0", 0], ["self", 0], ["n", 0], ["self", 0], ["checked", 0], ["0", 0], ["self", 0], ["n", 0], ["self", 0], ["hist", 0], ["deque", 0], ["self", 0], ["node", 0], ["in", 0], ["cycle", 0], ["1", 0], ["def", 0], ["dfs", 0], ["v", 0], ["self", 0], ["seen", 0], ["v", 0], ["1", 0], ["self", 0], ["hist", 0], ["append", 0], ["v", 0], ["for", 0], ["nv", 0], ["in", 0], ["self", 0], ["adj", 0], ["v", 0], ["if", 0], ["self", 0], ["checked", 0], ["nv", 0], ["continue", 0], ["if", 0], ["self", 0], ["seen", 0], ["nv", 0], ["and", 0], ["not", 0], ["self", 0], ["checked", 0], ["nv", 0], ["self", 0], ["node", 0], ["in", 0], ["cycle", 0], ["nv", 0], ["return", 0], ["dfs", 0], ["nv", 0], ["if", 0], ["self", 0], ["node", 0], ["in", 0], ["cycle", 0], ["1", 0], ["return", 0], ["self", 0], ["hist", 0], ["pop", 0], ["self", 0], ["checked", 0], ["v", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["self", 0], ["n", 0], ["if", 0], ["not", 0], ["self", 0], ["checked", 0], ["i", 0], ["dfs", 0], ["i", 0], ["if", 0], ["self", 0], ["node", 0], ["in", 0], ["cycle", 0], ["1", 0], ["break", 0], ["if", 0], ["self", 0], ["node", 0], ["in", 0], ["cycle", 0], ["1", 0], ["return", 0], ["else", 0], ["cycle", 0], ["while", 0], ["self", 0], ["hist", 0], ["t", 0], ["self", 0], ["hist", 0], ["pop", 0], ["cycle", 0], ["append", 0], ["t", 0], ["if", 0], ["t", 0], ["self", 0], ["node", 0], ["in", 0], ["cycle", 0], ["break", 0], ["cycle", 0], ["reverse", 0], ["return", 0], ["cycle", 0], ["n", 0], ["m", 0], ["int", 0], ["item", 0], ["for", 0], ["item", 0], ["in", 0], ["input", 0], ["split", 0], ["edge", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["int", 0], ["item", 0], ["1", 0], ["for", 0], ["item", 0], ["in", 0], ["input", 0], ["split", 0], ["edge", 0], ["a", 0], ["append", 0], ["b", 0], ["dg", 0], ["directedgraph", 0], ["edge", 0], ["cycle", 0], ["dg", 0], ["extract", 0], ["cycle", 0], ["if", 0], ["len", 0], ["cycle", 0], ["0", 0], ["print", 0], ["1", 0], ["return", 0], ["while", 0], ["true", 0], ["in", 0], ["cycle", 0], ["set", 0], ["cycle", 0], ["deg", 0], ["0", 0], ["n", 0], ["for", 0], ["item", 0], ["in", 0], ["cycle", 0], ["for", 0], ["v", 0], ["in", 0], ["edge", 0], ["item", 0], ["if", 0], ["v", 0], ["in", 0], ["in", 0], ["cycle", 0], ["deg", 0], ["v", 0], ["1", 0], ["ok", 0], ["true", 0], ["for", 0], ["i", 0], ["item", 0], ["in", 0], ["enumerate", 0], ["cycle", 0], ["if", 0], ["deg", 0], ["item", 0], ["1", 0], ["ok", 0], ["false", 0], ["cur", 0], ["id", 0], ["start", 0], ["i", 0], ["if", 0], ["ok", 0], ["print", 0], ["len", 0], ["cycle", 0], ["print", 0], ["n", 0], ["join", 0], ["str", 0], ["item", 0], ["1", 0], ["for", 0], ["item", 0], ["in", 0], ["cycle", 0], ["return", 0], ["ncycle", 0], ["cur", 0], ["cycle", 0], ["cur", 0], ["id", 0], ["while", 0], ["true", 0], ["ncycle", 0], ["append", 0], ["cur", 0], ["if", 0], ["cycle", 0], ["start", 0], ["in", 0], ["edge", 0], ["cur", 0], ["break", 0], ["cur", 0], ["id", 0], ["cur", 0], ["id", 0], ["1", 0], ["len", 0], ["cycle", 0], ["cur", 0], ["cycle", 0], ["cur", 0], ["id", 0], ["cycle", 0], ["ncycle", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ab", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["inf", 0], ["10", 0], ["5", 0], ["adj", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ab", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["adj", 0], ["a", 0], ["append", 0], ["b", 0], ["mn", 0], ["inf", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["n", 0], ["dq", 0], ["deque", 0], ["s", 0], ["d", 0], ["1", 0], ["n", 0], ["p", 0], ["1", 0], ["n", 0], ["d", 0], ["s", 0], ["0", 0], ["last", 0], ["while", 0], ["dq", 0], ["u", 0], ["dq", 0], ["popleft", 0], ["for", 0], ["v", 0], ["in", 0], ["adj", 0], ["u", 0], ["if", 0], ["d", 0], ["v", 0], ["1", 0], ["d", 0], ["v", 0], ["d", 0], ["u", 0], ["1", 0], ["p", 0], ["v", 0], ["u", 0], ["dq", 0], ["append", 0], ["v", 0], ["if", 0], ["v", 0], ["s", 0], ["last", 0], ["append", 0], ["u", 0], ["for", 0], ["v", 0], ["in", 0], ["last", 0], ["route", 0], ["v", 0], ["while", 0], ["p", 0], ["v", 0], ["s", 0], ["v", 0], ["p", 0], ["v", 0], ["route", 0], ["append", 0], ["v", 0], ["route", 0], ["append", 0], ["s", 0], ["size", 0], ["len", 0], ["route", 0], ["if", 0], ["size", 0], ["mn", 0], ["mn", 0], ["size", 0], ["ans", 0], ["route", 0], ["1", 0], ["if", 0], ["mn", 0], ["inf", 0], ["print", 0], ["mn", 0], ["for", 0], ["e", 0], ["in", 0], ["ans", 0], ["print", 0], ["e", 0], ["1", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["os", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["if", 0], ["os", 0], ["getenv", 0], ["local", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["in", 0], ["txt", 0], ["r", 0], ["sys", 0], ["setrecursionlimit", 0], ["2147483647", 0], ["inf", 0], ["float", 0], ["inf", 0], ["iinf", 0], ["10", 0], ["18", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["ab", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["graph", 0], ["for", 0], ["in", 1], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ab", 0], ["graph", 0], ["a", 0], ["append", 0], ["b", 0], ["def", 0], ["cycle", 0], ["size", 0], ["from", 0], ["v", 0], ["from", 0], ["v", 0], ["に戻ってくるまでのステップ数", 0], ["param", 0], ["from", 0], ["v", 0], ["return", 0], ["parents", 0], ["none", 0], ["len", 0], ["graph", 0], ["seen", 0], ["false", 0], ["len", 0], ["graph", 0], ["que", 0], ["deque", 0], ["from", 0], ["v", 0], ["0", 0], ["while", 0], ["que", 0], ["v", 0], ["d", 0], ["que", 0], ["pop", 0], ["for", 0], ["u", 0], ["in", 0], ["graph", 0], ["v", 0], ["if", 0], ["seen", 0], ["u", 0], ["continue", 0], ["seen", 0], ["u", 0], ["true", 0], ["que", 0], ["appendleft", 0], ["u", 0], ["d", 0], ["1", 0], ["parents", 0], ["u", 0], ["v", 0], ["if", 0], ["u", 0], ["from", 0], ["v", 0], ["return", 0], ["d", 0], ["1", 0], ["parents", 0], ["return", 0], ["inf", 0], ["parents", 0], ["min", 0], ["v", 0], ["none", 0], ["min", 0], ["size", 0], ["inf", 0], ["min", 0], ["parents", 0], ["none", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["size", 0], ["parents", 0], ["cycle", 0], ["size", 0], ["v", 0], ["if", 0], ["size", 0], ["min", 0], ["size", 0], ["min", 0], ["v", 0], ["v", 0], ["min", 0], ["size", 0], ["size", 0], ["min", 0], ["parents", 0], ["parents", 0], ["if", 0], ["min", 0], ["size", 0], ["inf", 0], ["print", 0], ["min", 0], ["size", 0], ["print", 0], ["min", 0], ["v", 0], ["v", 0], ["min", 0], ["parents", 0], ["min", 0], ["v", 0], ["while", 0], ["v", 0], ["min", 0], ["v", 0], ["print", 0], ["v", 0], ["v", 0], ["min", 0], ["parents", 0], ["v", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["500000", 0], ["def", 0], ["scc", 0], ["n", 0], ["g", 0], ["rg", 0], ["https", 0], ["tjkendev", 0], ["github", 0], ["io", 0], ["procon", 0], ["library", 0], ["python", 0], ["graph", 0], ["scc", 0], ["html", 0], ["order", 0], ["used", 0], ["0", 0], ["n", 0], ["group", 0], ["none", 0], ["n", 0], ["def", 0], ["dfs", 0], ["s", 0], ["used", 0], ["s", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["g", 0], ["s", 0], ["if", 0], ["not", 0], ["used", 0], ["t", 0], ["dfs", 0], ["t", 0], ["order", 0], ["append", 0], ["s", 0], ["def", 0], ["rdfs", 0], ["s", 0], ["col", 0], ["group", 0], ["s", 0], ["col", 0], ["used", 0], ["s", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["rg", 0], ["s", 0], ["if", 0], ["not", 0], ["used", 0], ["t", 0], ["rdfs", 0], ["t", 0], ["col", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["used", 0], ["i", 0], ["dfs", 0], ["i", 0], ["used", 0], ["0", 0], ["n", 0], ["label", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["reversed", 0], ["order", 0], ["if", 0], ["not", 0], ["used", 0], ["s", 0], ["rdfs", 0], ["s", 0], ["label", 0], ["label", 0], ["1", 0], ["return", 0], ["label", 0], ["group", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["e", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["e", 0], ["set", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["e", 0], ["rev", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["e", 0], ["rev", 0], ["set", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["e", 0], ["a", 0], ["append", 0], ["b", 0], ["e", 0], ["set", 0], ["a", 0], ["add", 0], ["b", 0], ["e", 0], ["rev", 0], ["b", 0], ["append", 0], ["a", 0], ["e", 0], ["rev", 0], ["set", 0], ["b", 0], ["add", 0], ["a", 0], ["label", 0], ["group", 0], ["scc", 0], ["n", 0], ["1", 0], ["e", 0], ["e", 0], ["rev", 0], ["cnt", 0], ["counter", 0], ["group", 0], ["closed", 0], ["false", 0], ["n", 0], ["1", 0], ["grooo", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["v", 0], ["gr", 0], ["in", 0], ["enumerate", 0], ["group", 0], ["grooo", 0], ["gr", 0], ["add", 0], ["v", 0], ["from", 0], ["random", 0], ["import", 0], ["random", 0], ["haaaaaaaaaaaaaaaaaaaaaaa", 0], ["enumerate", 0], ["group", 0], ["if", 0], ["random", 0], ["0", 0], ["5", 0], ["else", 0], ["list", 0], ["zip", 0], ["list", 0], ["range", 0], ["n", 0], ["0", 0], ["1", 0], ["group", 0], ["1", 0], ["for", 0], ["v", 0], ["gr", 0], ["in", 0], ["haaaaaaaaaaaaaaaaaaaaaaa", 0], ["if", 0], ["closed", 0], ["gr", 0], ["continue", 0], ["closed", 0], ["gr", 0], ["true", 0], ["if", 0], ["cnt", 0], ["gr", 0], ["1", 0], ["continue", 0], ["print", 0], ["gr", 0], ["cnt", 0], ["gr", 0], ["groo", 0], ["grooo", 0], ["gr", 0], ["path", 0], ["v", 0], ["path", 0], ["set", 0], ["v", 0], ["while", 0], ["true", 0], ["print", 0], ["v", 0], ["v", 0], ["aaa", 0], ["e", 0], ["set", 0], ["v", 0], ["path", 0], ["set", 0], ["if", 0], ["aaa", 0], ["break", 0], ["u", 0], ["groo", 0], ["e", 0], ["set", 0], ["v", 0], ["pop", 0], ["print", 0], ["u", 0], ["u", 0], ["while", 0], ["e", 0], ["rev", 0], ["set", 0], ["u", 0], ["v", 0], ["path", 0], ["set", 0], ["path", 0], ["set", 0], ["remove", 0], ["path", 0], ["pop", 0], ["path", 0], ["append", 0], ["u", 0], ["path", 0], ["set", 0], ["add", 0], ["u", 0], ["v", 0], ["u", 0], ["print", 0], ["path", 0], ["for", 0], ["i", 0], ["v", 0], ["in", 0], ["enumerate", 0], ["path", 0], ["if", 0], ["v", 0], ["in", 0], ["aaa", 0], ["aaa", 0], ["remove", 0], ["v", 0], ["if", 0], ["len", 0], ["aaa", 0], ["0", 0], ["break", 0], ["ans", 0], ["path", 0], ["i", 0], ["print", 0], ["len", 0], ["ans", 0], ["print", 0], ["n", 0], ["join", 0], ["map", 0], ["str", 0], ["ans", 0], ["return", 0], ["print", 0], ["1", 0], ["def", 0], ["main", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["m", 0], ["t", 0], ["map", 0], ["int", 0], ["open", 0], ["0", 0], ["read", 0], ["split", 0], ["i", 0], ["o", 0], ["0", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["iter", 0], ["t", 0], ["2", 0], ["o", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["i", 0], ["b", 0], ["1", 0], ["1", 0], ["q", 0], ["deque", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["v", 0], ["1", 0], ["r", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["r", 0], ["v", 0], ["for", 0], ["w", 0], ["in", 0], ["o", 0], ["v", 0], ["i", 0], ["w", 0], ["1", 0], ["if", 0], ["i", 0], ["w", 0], ["0", 0], ["q", 0], ["w", 0], ["print", 0], ["len", 0], ["r", 0], ["n", 0], ["main", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappop", 0], ["heappush", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xy", 0], ["tuple", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["r", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["h", 0], ["0", 0], ["n", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["xy", 0], ["r", 0], ["x", 0], ["append", 0], ["y", 0], ["h", 0], ["y", 0], ["1", 0], ["s", 0], ["st", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["h", 0], ["i", 0], ["0", 0], ["heappush", 0], ["st", 0], ["i", 0], ["while", 0], ["len", 0], ["st", 0], ["0", 0], ["temp", 0], ["heappop", 0], ["st", 0], ["s", 0], ["append", 0], ["temp", 0], ["for", 0], ["x", 0], ["in", 0], ["r", 0], ["temp", 0], ["h", 0], ["x", 0], ["1", 0], ["if", 0], ["h", 0], ["x", 0], ["0", 0], ["heappush", 0], ["st", 0], ["x", 0], ["if", 0], ["len", 0], ["s", 0], ["n", 0], ["print", 0], ["99999", 0], ["else", 0], ["print", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["int", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["b", 0], ["c", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["aa", 0], ["bb", 0], ["int", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["input", 0], ["split", 0], ["cc", 0], ["int", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["append", 0], ["aa", 0], ["b", 0], ["append", 0], ["bb", 0], ["c", 0], ["append", 0], ["cc", 0], ["n", 0], ["m", 0], ["int", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["input", 0], ["split", 0], ["ab", 0], ["int", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["pp", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ab", 0], ["pp", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["startpool", 0], ["set", 0], ["range", 0], ["n", 0], ["result", 0], ["none", 0], ["while", 0], ["len", 0], ["startpool", 0], ["0", 0], ["start", 0], ["min", 0], ["startpool", 0], ["q", 0], ["deque", 0], ["start", 0], ["start", 0], ["renketu", 0], ["start", 0], ["while", 0], ["len", 0], ["q", 0], ["0", 0], ["p", 0], ["history", 0], ["q", 0], ["popleft", 0], ["target", 0], ["pp", 0], ["p", 0], ["for", 0], ["t", 0], ["in", 0], ["target", 0], ["if", 0], ["t", 0], ["in", 0], ["history", 0], ["if", 0], ["result", 0], ["is", 0], ["none", 0], ["result", 0], ["history", 0], ["elif", 0], ["len", 0], ["result", 0], ["len", 0], ["history", 0], ["history", 0], ["index", 0], ["t", 0], ["result", 0], ["history", 0], ["history", 0], ["index", 0], ["t", 0], ["if", 0], ["t", 0], ["not", 0], ["in", 0], ["renketu", 0], ["q", 0], ["append", 0], ["t", 0], ["history", 0], ["t", 0], ["renketu", 0], ["add", 0], ["t", 0], ["startpool", 0], ["renketu", 0], ["if", 0], ["result", 0], ["is", 0], ["not", 0], ["none", 0], ["print", 0], ["len", 0], ["result", 0], ["for", 0], ["a", 0], ["in", 0], ["result", 0], ["print", 0], ["a", 0], ["1", 0], ["return", 0], ["else", 0], ["print", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["serp", 0], ["s", 0], ["prev", 0], ["1", 0], ["n", 0], ["q", 0], ["deque", 0], ["s", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["pop", 0], ["for", 0], ["nv", 0], ["in", 0], ["e", 0], ["v", 0], ["if", 0], ["nv", 0], ["s", 0], ["prev", 0], ["nv", 0], ["v", 0], ["return", 0], ["s", 0], ["prev", 0], ["if", 0], ["prev", 0], ["nv", 0], ["0", 0], ["q", 0], ["nv", 0], ["prev", 0], ["nv", 0], ["v", 0], ["return", 0], ["1", 0], ["prev", 0], ["n", 0], ["m", 0], ["t", 0], ["map", 0], ["int", 0], ["open", 0], ["0", 0], ["read", 0], ["split", 0], ["e", 0], ["ab", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["iter", 0], ["t", 0], ["2", 0], ["e", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["ab", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["v0", 0], ["prev", 0], ["serp", 0], ["v", 0], ["if", 0], ["v0", 0], ["0", 0], ["break", 0], ["if", 0], ["v0", 0], ["0", 0], ["print", 0], ["1", 0], ["return", 0], ["c", 0], ["set", 0], ["c", 0], ["add", 0], ["v0", 0], ["pv", 0], ["prev", 0], ["v0", 0], ["while", 0], ["pv", 0], ["v0", 0], ["c", 0], ["add", 0], ["pv", 0], ["pv", 0], ["prev", 0], ["pv", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ab", 0], ["if", 0], ["a", 0], ["in", 0], ["c", 0], ["and", 0], ["b", 0], ["in", 0], ["c", 0], ["and", 0], ["prev", 0], ["b", 0], ["a", 0], ["pv", 0], ["prev", 0], ["b", 0], ["while", 0], ["pv", 0], ["a", 0], ["c", 0], ["remove", 0], ["pv", 0], ["pv", 0], ["prev", 0], ["pv", 0], ["prev", 0], ["b", 0], ["a", 0], ["print", 0], ["len", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["c", 0], ["print", 0], ["i", 0], ["1", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["inf", 0], ["float", 0], ["inf", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ab", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ab", 0], ["g", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["ans", 0], ["1", 0], ["n", 0], ["1", 0], ["全ての頂点から", 0], ["閉路が存在しないかを確認する", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["n", 0], ["prev", 0], ["1", 0], ["n", 0], ["dist", 0], ["1", 0], ["n", 0], ["dist", 0], ["s", 0], ["0", 0], ["dq", 0], ["deque", 0], ["s", 0], ["while", 0], ["dq", 0], ["v", 0], ["dq", 0], ["popleft", 0], ["for", 0], ["nv", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["dist", 0], ["nv", 0], ["1", 0], ["dist", 0], ["nv", 0], ["dist", 0], ["v", 0], ["1", 0], ["prev", 0], ["nv", 0], ["v", 0], ["dq", 0], ["append", 0], ["nv", 0], ["次が", 0], ["0番目", 0], ["開始地点", 0], ["なら閉路あり", 0], ["if", 0], ["dist", 0], ["nv", 0], ["0", 0], ["and", 0], ["prev", 0], ["nv", 0], ["1", 0], ["prev", 0], ["nv", 0], ["v", 0], ["開始地点の前", 0], ["が", 0], ["1でない", 0], ["閉路あり", 0], ["if", 0], ["prev", 0], ["s", 0], ["1", 0], ["v", 0], ["prev", 0], ["s", 0], ["ans", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["max", 0], ["dist", 0], ["1", 0], ["ans", 0], ["add", 0], ["prev", 0], ["v", 0], ["v", 0], ["prev", 0], ["v", 0], ["if", 0], ["len", 0], ["ans", 0], ["len", 0], ["ans", 0], ["ans", 0], ["list", 0], ["ans", 0], ["if", 0], ["len", 0], ["ans", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["ans", 0], ["ans", 0], ["sort", 0], ["for", 0], ["v", 0], ["in", 0], ["ans", 0], ["print", 0], ["v", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["inf", 0], ["float", 0], ["inf", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["g", 0], ["a", 0], ["append", 0], ["b", 0], ["res", 0], ["shortest", 0], ["n", 0], ["1", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["n", 0], ["dist", 0], ["1", 0], ["n", 0], ["prev", 0], ["1", 0], ["n", 0], ["q", 0], ["deque", 0], ["q", 0], ["append", 0], ["s", 0], ["dist", 0], ["s", 0], ["0", 0], ["while", 0], ["len", 0], ["q", 0], ["0", 0], ["v", 0], ["q", 0], ["popleft", 0], ["for", 0], ["nv", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["dist", 0], ["nv", 0], ["1", 0], ["dist", 0], ["nv", 0], ["dist", 0], ["v", 0], ["1", 0], ["prev", 0], ["nv", 0], ["v", 0], ["q", 0], ["append", 0], ["nv", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["t", 0], ["s", 0], ["continue", 0], ["if", 0], ["dist", 0], ["t", 0], ["1", 0], ["continue", 0], ["for", 0], ["nt", 0], ["in", 0], ["g", 0], ["t", 0], ["if", 0], ["nt", 0], ["s", 0], ["temp", 0], ["s", 0], ["cur", 0], ["t", 0], ["while", 0], ["cur", 0], ["s", 0], ["temp", 0], ["append", 0], ["cur", 0], ["cur", 0], ["prev", 0], ["cur", 0], ["if", 0], ["shortest", 0], ["len", 0], ["temp", 0], ["shortest", 0], ["len", 0], ["temp", 0], ["res", 0], ["temp", 0], ["if", 0], ["shortest", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["print", 0], ["len", 0], ["res", 0], ["for", 0], ["v", 0], ["in", 0], ["res", 0], ["print", 0], ["v", 0], ["1", 0], ["def", 0], ["bfs", 0], ["sv", 0], ["dist", 0], ["inf", 0], ["n", 0], ["pre", 0], ["1", 0], ["n", 0], ["q", 0], ["deque", 0], ["q", 0], ["append", 0], ["sv", 0], ["dist", 0], ["sv", 0], ["0", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["for", 0], ["nv", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["dist", 0], ["nv", 0], ["inf", 0], ["continue", 0], ["pre", 0], ["nv", 0], ["v", 0], ["dist", 0], ["nv", 0], ["dist", 0], ["v", 0], ["1", 0], ["q", 0], ["append", 0], ["nv", 0], ["print", 0], ["dist", 0], ["best", 0], ["inf", 0], ["1", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["v", 0], ["sv", 0], ["continue", 0], ["for", 0], ["nv", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["nv", 0], ["sv", 0], ["best", 0], ["min", 0], ["best", 0], ["dist", 0], ["nv", 0], ["nv", 0], ["print", 0], ["sv", 0], ["best", 0], ["print", 0], ["best", 0], ["if", 0], ["best", 0], ["0", 0], ["inf", 0], ["return", 0], ["0", 0], ["n", 0], ["1", 0], ["print", 0], ["pre", 0], ["v", 0], ["best", 0], ["1", 0], ["print", 0], ["v", 0], ["v", 0], ["res", 0], ["while", 0], ["v", 0], ["1", 0], ["res", 0], ["append", 0], ["v", 0], ["v", 0], ["pre", 0], ["v", 0], ["print", 0], ["res", 0], ["res", 0], ["return", 0], ["res", 0], ["ans", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["n", 0], ["now", 0], ["bfs", 0], ["s", 0], ["if", 0], ["len", 0], ["now", 0], ["len", 0], ["ans", 0], ["print", 0], ["aa", 0], ["ans", 0], ["now", 0], ["print", 0], ["ans", 0], ["if", 0], ["len", 0], ["ans", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["v", 0], ["in", 0], ["ans", 0], ["print", 0], ["v", 0], ["def", 0], ["dfs", 0], ["n", 0], ["ab", 0], ["status", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["status", 0], ["i", 0], ["1", 0], ["continue", 0], ["stack", 0], ["i", 0], ["status", 0], ["i", 0], ["0", 0], ["while", 0], ["stack", 0], ["v", 0], ["stack", 0], ["1", 0], ["if", 0], ["ab", 0], ["v", 0], ["n", 0], ["ab", 0], ["v", 0], ["pop", 0], ["if", 0], ["status", 0], ["n", 0], ["1", 0], ["stack", 0], ["append", 0], ["n", 0], ["status", 0], ["n", 0], ["0", 0], ["elif", 0], ["status", 0], ["n", 0], ["0", 0], ["idx", 0], ["stack", 0], ["index", 0], ["n", 0], ["cycle", 0], ["stack", 0], ["idx", 0], ["return", 0], ["cycle", 0], ["else", 0], ["status", 0], ["v", 0], ["1", 0], ["stack", 0], ["pop", 0], ["return", 0], ["false", 0], ["def", 0], ["find", 0], ["smaller", 0], ["cycle", 0], ["cycle", 0], ["ab", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["cycle", 0], ["v", 0], ["cycle", 0], ["i", 0], ["if", 0], ["ab", 0], ["v", 0], ["n", 0], ["ab", 0], ["v", 0], ["pop", 0], ["if", 0], ["n", 0], ["in", 0], ["cycle", 0], ["r", 0], ["cycle", 0], ["index", 0], ["n", 0], ["if", 0], ["i", 0], ["r", 0], ["cycle", 0], ["cycle", 0], ["i", 0], ["1", 0], ["cycle", 0], ["r", 0], ["else", 0], ["cycle", 0], ["cycle", 0], ["r", 0], ["i", 0], ["1", 0], ["i", 0], ["cycle", 0], ["index", 0], ["v", 0], ["else", 0], ["i", 0], ["1", 0], ["return", 0], ["cycle", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ab", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["int", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ab", 0], ["a", 0], ["append", 0], ["b", 0], ["cycle", 0], ["dfs", 0], ["n", 0], ["ab", 0], ["if", 0], ["not", 0], ["cycle", 0], ["print", 0], ["1", 0], ["else", 0], ["cycle", 0], ["find", 0], ["smaller", 0], ["cycle", 0], ["cycle", 0], ["ab", 0], ["print", 0], ["len", 0], ["cycle", 0], ["for", 0], ["v", 0], ["in", 0], ["cycle", 0], ["print", 0], ["v", 0], ["1", 0], ["def", 0], ["dfs", 0], ["n", 0], ["ab", 0], ["status", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["status", 0], ["i", 0], ["1", 0], ["continue", 0], ["stack", 0], ["i", 0], ["status", 0], ["i", 0], ["0", 0], ["while", 0], ["stack", 0], ["print", 0], ["stack", 0], ["stack", 0], ["v", 0], ["stack", 0], ["1", 0], ["if", 0], ["ab", 0], ["v", 0], ["n", 0], ["ab", 0], ["v", 0], ["pop", 0], ["if", 0], ["status", 0], ["n", 0], ["1", 0], ["stack", 0], ["append", 0], ["n", 0], ["status", 0], ["n", 0], ["0", 0], ["elif", 0], ["status", 0], ["n", 0], ["0", 0], ["idx", 0], ["stack", 0], ["index", 0], ["n", 0], ["print", 0], ["stack", 0], ["stack", 0], ["n", 0], ["n", 0], ["idx", 0], ["idx", 0], ["cycle", 0], ["stack", 0], ["idx", 0], ["return", 0], ["cycle", 0], ["else", 0], ["status", 0], ["v", 0], ["1", 0], ["stack", 0], ["pop", 0], ["return", 0], ["false", 0], ["def", 0], ["dfs", 0], ["2", 0], ["n", 0], ["ab", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["n", 0], ["stack", 0], ["c", 0], ["while", 0], ["stack", 0], ["print", 0], ["stack", 0], ["stack", 0], ["curr", 0], ["visited", 0], ["stack", 0], ["pop", 0], ["if", 0], ["curr", 0], ["in", 0], ["visited", 0], ["print", 0], ["cycle", 0], ["found", 0], ["curr", 0], ["return", 0], ["visited", 0], ["else", 0], ["print", 0], ["adding", 0], ["in", 0], ["visited", 0], ["curr", 0], ["for", 0], ["i", 0], ["in", 0], ["ab", 0], ["curr", 0], ["stack", 0], ["append", 0], ["i", 0], ["visited", 0], ["curr", 0], ["return", 0], ["false", 0], ["def", 0], ["find", 0], ["smaller", 0], ["cycle", 0], ["cycle", 0], ["ab", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["cycle", 0], ["v", 0], ["cycle", 0], ["i", 0], ["if", 0], ["ab", 0], ["v", 0], ["n", 0], ["ab", 0], ["v", 0], ["pop", 0], ["if", 0], ["n", 0], ["in", 0], ["cycle", 0], ["r", 0], ["cycle", 0], ["index", 0], ["n", 0], ["if", 0], ["i", 0], ["r", 0], ["cycle", 0], ["cycle", 0], ["i", 0], ["1", 0], ["cycle", 0], ["r", 0], ["else", 0], ["cycle", 0], ["cycle", 0], ["r", 0], ["i", 0], ["1", 0], ["i", 0], ["cycle", 0], ["index", 0], ["v", 0], ["else", 0], ["i", 0], ["1", 0], ["return", 0], ["cycle", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ab", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["int", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ab", 0], ["a", 0], ["append", 0], ["b", 0], ["print", 0], ["ab", 0], ["for", 0], ["i", 0], ["in", 0], ["ab", 0], ["print", 0], ["i", 0], ["cycle", 0], ["dfs", 0], ["2", 0], ["n", 0], ["ab", 0], ["print", 0], ["cycle", 0], ["cycle", 0], ["if", 0], ["not", 0], ["cycle", 0], ["print", 0], ["1", 0], ["else", 0], ["cycle", 0], ["find", 0], ["smaller", 0], ["cycle", 0], ["cycle", 0], ["ab", 0], ["print", 0], ["len", 0], ["cycle", 0], ["for", 0], ["v", 0], ["in", 0], ["cycle", 0], ["print", 0], ["v", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["resolve", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["g", 0], ["a", 0], ["append", 0], ["b", 0], ["shortest", 0], ["n", 0], ["1", 0], ["res", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["n", 0], ["dist", 0], ["1", 0], ["n", 0], ["pre", 0], ["1", 0], ["n", 0], ["q", 0], ["deque", 0], ["q", 0], ["append", 0], ["s", 0], ["dist", 0], ["s", 0], ["0", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["for", 0], ["to", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["dist", 0], ["to", 0], ["1", 0], ["dist", 0], ["to", 0], ["dist", 0], ["v", 0], ["1", 0], ["pre", 0], ["to", 0], ["v", 0], ["q", 0], ["append", 0], ["to", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["t", 0], ["s", 0], ["or", 0], ["dist", 0], ["t", 0], ["1", 0], ["continue", 0], ["for", 0], ["to", 0], ["in", 0], ["g", 0], ["t", 0], ["if", 0], ["to", 0], ["s", 0], ["サイクルになっている頂点", 0], ["tmp", 0], ["s", 0], ["cur", 0], ["t", 0], ["while", 0], ["cur", 0], ["s", 0], ["tmp", 0], ["append", 0], ["cur", 0], ["cur", 0], ["pre", 0], ["cur", 0], ["if", 0], ["shortest", 0], ["len", 0], ["tmp", 0], ["shortest", 0], ["len", 0], ["tmp", 0], ["res", 0], ["tmp", 0], ["if", 0], ["shortest", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["res", 0], ["res", 0], ["sort", 0], ["for", 0], ["v", 0], ["in", 0], ["res", 0], ["print", 0], ["v", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["resolve", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ab", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["es", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ab", 0], ["a", 0], ["b", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["es", 0], ["a", 0], ["append", 0], ["b", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["tmpdist", 0], ["n", 0], ["ans", 0], ["none", 0], ["for", 0], ["to", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["fr", 0], ["in", 0], ["es", 0], ["to", 0], ["dist", 0], ["n", 0], ["n", 0], ["dist", 0], ["fr", 0], ["0", 0], ["prev", 0], ["1", 0], ["n", 0], ["q", 0], ["deque", 0], ["fr", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["if", 0], ["v", 0], ["to", 0], ["break", 0], ["for", 0], ["w", 0], ["in", 0], ["es", 0], ["v", 0], ["if", 0], ["dist", 0], ["w", 0], ["n", 0], ["continue", 0], ["if", 0], ["v", 0], ["to", 0], ["and", 0], ["w", 0], ["fr", 0], ["continue", 0], ["dist", 0], ["w", 0], ["dist", 0], ["v", 0], ["1", 0], ["prev", 0], ["w", 0], ["v", 0], ["q", 0], ["append", 0], ["w", 0], ["else", 0], ["continue", 0], ["if", 0], ["dist", 0], ["to", 0], ["tmpdist", 0], ["tmpdist", 0], ["dist", 0], ["to", 0], ["ans", 0], ["set", 0], ["v", 0], ["to", 0], ["while", 0], ["1", 0], ["ans", 0], ["add", 0], ["v", 0], ["1", 0], ["if", 0], ["prev", 0], ["v", 0], ["0", 0], ["break", 0], ["v", 0], ["prev", 0], ["v", 0], ["if", 0], ["ans", 0], ["is", 0], ["none", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["ans", 0], ["print", 0], ["ans", 0], ["sep", 0], ["n", 0], ["import", 0], ["sys", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["read", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readlines", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["find", 0], ["shortest", 0], ["cycle", 0], ["g", 0], ["s", 0], ["dq", 0], ["deque", 0], ["n", 0], ["len", 0], ["g", 0], ["inf", 0], ["float", 0], ["inf", 0], ["dist", 0], ["inf", 0], ["n", 0], ["dist", 0], ["s", 0], ["0", 0], ["parent", 0], ["1", 0], ["n", 0], ["ans", 0], ["last", 0], ["none", 0], ["sからループを探して見つかった時の、ループの最後の頂点番号", 0], ["dq", 0], ["append", 0], ["s", 0], ["bfsでループを見つける", 0], ["while", 0], ["dq", 0], ["and", 0], ["ans", 0], ["last", 0], ["is", 0], ["none", 0], ["v", 0], ["dq", 0], ["popleft", 0], ["d", 0], ["dist", 0], ["v", 0], ["for", 0], ["n", 0], ["in", 0], ["g", 0], ["v", 0], ["頂点vからいける頂点の中に開始点があったら、ループである", 0], ["if", 0], ["dist", 0], ["n", 0], ["0", 0], ["ans", 0], ["last", 0], ["v", 0], ["parent", 0], ["n", 0], ["v", 0], ["break", 0], ["まだ探索していない頂点なら次の探索候補にする", 0], ["elif", 0], ["dist", 0], ["n", 0], ["inf", 0], ["dist", 0], ["n", 0], ["d", 0], ["1", 0], ["parent", 0], ["n", 0], ["v", 0], ["dq", 0], ["append", 0], ["n", 0], ["ループが見つかった場合", 0], ["if", 0], ["ans", 0], ["last", 0], ["ループの最後の頂点から、元の頂点をたどり、そのルートを逆にする", 0], ["g", 0], ["ans", 0], ["last", 0], ["route", 0], ["g", 0], ["while", 0], ["g", 0], ["s", 0], ["g", 0], ["parent", 0], ["g", 0], ["route", 0], ["append", 0], ["g", 0], ["return", 0], ["list", 0], ["reversed", 0], ["route", 0], ["見つからなかった場合はnoneを返す", 0], ["return", 0], ["none", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["a", 0], ["map", 0], ["int", 0], ["read", 0], ["split", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["2", 0], ["g", 0], ["a", 0], ["append", 0], ["b", 0], ["すべての頂点の入次数が", 0], ["1、出次数が", 0], ["1", 0], ["であるような", 0], ["g", 0], ["の誘導部分グラフ", 0], ["すべての頂点の入次数が", 0], ["1、出次数が", 0], ["1", 0], ["のグラフ", 0], ["ループ", 0], ["有向グラフ", 0], ["g", 0], ["v", 0], ["e", 0], ["に対し、次のような条件を満たす有向グラフ", 0], ["g′", 0], ["v′", 0], ["e′", 0], ["を", 0], ["g", 0], ["の誘導部分グラフと呼ぶ。", 0], ["v′", 0], ["は", 0], ["v", 0], ["の", 0], ["空でない", 0], ["部分集合である。", 0], ["e′", 0], ["は、e", 0], ["の辺であって両端点がともに", 0], ["v′", 0], ["に含まれるものすべてを含む集合である。", 0], ["ループでも、ショートカットできるようなループはだめ", 0], ["例", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["v", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["としてしまうと、", 0], ["e", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["4", 0], ["2", 0], ["4", 0], ["4", 0], ["5", 0], ["5", 0], ["1", 0], ["となってしまい、この誘導部分グラフg", 0], ["v", 0], ["e", 0], ["において、", 0], ["頂点2の出次数が2になってしまう。（頂点4の入次数も2になってしまう）", 0], ["v", 0], ["1", 0], ["2", 0], ["4", 0], ["5", 0], ["とすれば、", 0], ["e", 0], ["1", 0], ["2", 0], ["2", 0], ["4", 0], ["4", 0], ["5", 0], ["5", 0], ["1", 0], ["となり、すべての頂点の入次数が", 0], ["1、出次数が", 0], ["1", 0], ["となる", 0], ["つまり、ショートカットできない最短のループを1つでも見つければよい", 0], ["min", 0], ["route", 0], ["none", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["各頂点を開始点にしてループを探す", 0], ["route", 0], ["find", 0], ["shortest", 0], ["cycle", 0], ["g", 0], ["s", 0], ["ループが複数ある場合、短いほうを採用", 0], ["if", 0], ["route", 0], ["if", 0], ["min", 0], ["route", 0], ["is", 0], ["none", 0], ["or", 0], ["len", 0], ["route", 0], ["len", 0], ["min", 0], ["route", 0], ["min", 0], ["route", 0], ["route", 0], ["if", 0], ["min", 0], ["route", 0], ["print", 0], ["len", 0], ["min", 0], ["route", 0], ["min", 0], ["route", 0], ["sep", 0], ["n", 0], ["else", 0], ["print", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["input", 0], ["lambda", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["inpl", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["inpl", 0], ["uv", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["vu", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["inpl", 0], ["uv", 0], ["a", 0], ["1", 0], ["add", 0], ["b", 0], ["1", 0], ["vu", 0], ["b", 0], ["1", 0], ["add", 0], ["a", 0], ["1", 0], ["empty", 0], ["loop", 0], ["tree", 0], ["0", 0], ["1", 0], ["2", 0], ["enter", 0], ["exit", 0], ["0", 0], ["1", 0], ["status", 0], ["empty", 0], ["n", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["n", 0], ["states", 0], ["pool", 0], ["s", 0], ["enter", 0], ["while", 0], ["states", 0], ["pool", 0], ["u", 0], ["chain", 0], ["flag", 0], ["states", 0], ["pool", 0], ["pop", 0], ["if", 0], ["flag", 0], ["exit", 0], ["or", 0], ["status", 0], ["u", 0], ["tree", 0], ["status", 0], ["u", 0], ["tree", 0], ["continue", 0], ["elif", 0], ["status", 0], ["u", 0], ["loop", 0], ["break", 0], ["else", 0], ["enter", 0], ["empty", 0], ["status", 0], ["u", 0], ["loop", 0], ["states", 0], ["pool", 0], ["append", 0], ["u", 0], ["chain", 0], ["exit", 0], ["new", 0], ["chain", 0], ["chain", 0], ["copy", 0], ["new", 0], ["chain", 0], ["append", 0], ["u", 0], ["for", 0], ["c", 0], ["in", 0], ["uv", 0], ["u", 0], ["states", 0], ["pool", 0], ["append", 0], ["c", 0], ["new", 0], ["chain", 0], ["enter", 0], ["else", 0], ["continue", 0], ["break", 0], ["else", 0], ["print", 0], ["1", 0], ["return", 0], ["n", 0], ["0", 0], ["while", 0], ["chain", 0], ["n", 0], ["u", 0], ["n", 0], ["1", 0], ["chain", 0], ["chain", 0], ["n", 0], ["l", 0], ["len", 0], ["chain", 0], ["nextnode", 0], ["none", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["1", 0], ["nextnode", 0], ["chain", 0], ["i", 0], ["chain", 0], ["i", 0], ["1", 0], ["nextnode", 0], ["chain", 0], ["l", 0], ["1", 0], ["chain", 0], ["0", 0], ["pos", 0], ["none", 0], ["n", 0], ["for", 0], ["p", 0], ["in", 0], ["range", 0], ["len", 0], ["chain", 0], ["pos", 0], ["chain", 0], ["p", 0], ["p", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["l", 0], ["h", 0], ["1", 0], ["c", 0], ["chain", 0], ["i", 0], ["1", 0], ["l", 0], ["for", 0], ["j", 0], ["in", 0], ["uv", 0], ["chain", 0], ["i", 0], ["l", 0], ["p", 0], ["pos", 0], ["j", 0], ["if", 0], ["p", 0], ["is", 0], ["none", 0], ["continue", 0], ["else", 0], ["if", 0], ["p", 0], ["i", 0], ["l", 0], ["h", 0], ["h", 0], ["p", 0], ["i", 0], ["l", 0], ["c", 0], ["j", 0], ["nextnode", 0], ["chain", 0], ["i", 0], ["l", 0], ["c", 0], ["i", 0], ["1", 0], ["while", 0], ["chain", 0], ["i", 0], ["l", 0], ["c", 0], ["pos", 0], ["chain", 0], ["i", 0], ["l", 0], ["none", 0], ["i", 0], ["1", 0], ["loop", 0], ["c", 0], ["k", 0], ["c", 0], ["while", 0], ["nextnode", 0], ["k", 0], ["c", 0], ["k", 0], ["nextnode", 0], ["k", 0], ["loop", 0], ["append", 0], ["k", 0], ["print", 0], ["len", 0], ["loop", 0], ["for", 0], ["l", 0], ["in", 0], ["loop", 0], ["print", 0], ["l", 0], ["1", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["c", 0], ["0", 0], ["n", 0], ["loop", 0], ["def", 0], ["cyclic", 0], ["n", 0], ["if", 0], ["c", 0], ["n", 0], ["2", 0], ["return", 0], ["false", 0], ["if", 0], ["c", 0], ["n", 0], ["1", 0], ["loop", 0], ["append", 0], ["n", 0], ["return", 0], ["true", 0], ["c", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["n", 0], ["if", 0], ["cyclic", 0], ["i", 0], ["loop", 0], ["append", 0], ["n", 0], ["return", 0], ["true", 0], ["c", 0], ["n", 0], ["2", 0], ["return", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["cyclic", 0], ["i", 0], ["break", 0], ["if", 0], ["len", 0], ["loop", 0], ["0", 0], ["print", 0], ["1", 0], ["return", 0], ["print", 0], ["0", 0], ["return", 0], ["main", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["edges", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["map", 0], ["int", 0], ["line", 0], ["split", 0], ["for", 0], ["line", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["edges", 0], ["a", 0], ["add", 0], ["b", 0], ["答えが見つかるまで、スタート地点は全て試します", 0], ["for", 0], ["start", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["visited", 0], ["0", 0], ["n", 0], ["1", 0], ["dq", 0], ["deque", 0], ["start", 0], ["start", 0], ["visited", 0], ["start", 0], ["1", 0], ["while", 0], ["dq", 0], ["点と、これまで通ってきた頂点を取り出す", 0], ["v", 0], ["route", 0], ["dq", 0], ["popleft", 0], ["これまで通ってきた頂点集合と、行き先の頂点集合の積集合をとる", 0], ["s", 0], ["route", 0], ["edges", 0], ["v", 0], ["s", 0], ["start", 0], ["でなければuとおr", 0], ["sが空集合でも通る。sが何やらいろいろあると、通れない。", 0], ["if", 0], ["not", 0], ["not", 0], ["s", 0], ["or", 0], ["s", 0], ["start", 0], ["continue", 0], ["for", 0], ["dest", 0], ["in", 0], ["edges", 0], ["v", 0], ["startに戻ってきたら出力して終了", 0], ["if", 0], ["dest", 0], ["start", 0], ["print", 0], ["len", 0], ["route", 0], ["print", 0], ["route", 0], ["sep", 0], ["n", 0], ["return", 0], ["訪問済みであれば、スルー", 0], ["if", 0], ["visited", 0], ["dest", 0], ["continue", 0], ["visited", 0], ["dest", 0], ["1", 0], ["destを始点として、通ってきた頂点にdestを追加したもの", 0], ["dq", 0], ["append", 0], ["dest", 0], ["route", 0], ["dest", 0], ["print", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["edges", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ab", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["edges", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["ab", 0], ["append", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["def", 0], ["bfs", 0], ["s", 0], ["prev", 0], ["1", 0], ["n", 0], ["que", 0], ["deque", 0], ["s", 0], ["while", 0], ["que", 0], ["v", 0], ["que", 0], ["pop", 0], ["for", 0], ["nv", 0], ["in", 0], ["edges", 0], ["v", 0], ["if", 0], ["nv", 0], ["s", 0], ["prev", 0], ["nv", 0], ["v", 0], ["return", 0], ["s", 0], ["prev", 0], ["if", 0], ["prev", 0], ["nv", 0], ["0", 0], ["que", 0], ["append", 0], ["nv", 0], ["prev", 0], ["nv", 0], ["v", 0], ["return", 0], ["1", 0], ["prev", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["v0", 0], ["prev", 0], ["bfs", 0], ["v", 0], ["if", 0], ["v0", 0], ["0", 0], ["break", 0], ["if", 0], ["v0", 0], ["0", 0], ["print", 0], ["1", 0], ["return", 0], ["circle", 0], ["set", 0], ["circle", 0], ["add", 0], ["v0", 0], ["pv", 0], ["prev", 0], ["v0", 0], ["while", 0], ["pv", 0], ["v0", 0], ["circle", 0], ["add", 0], ["pv", 0], ["pv", 0], ["prev", 0], ["pv", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ab", 0], ["if", 0], ["a", 0], ["in", 0], ["circle", 0], ["and", 0], ["b", 0], ["in", 0], ["circle", 0], ["and", 0], ["prev", 0], ["b", 0], ["a", 0], ["pv", 0], ["prev", 0], ["b", 0], ["while", 0], ["pv", 0], ["a", 0], ["circle", 0], ["remove", 0], ["pv", 0], ["pv", 0], ["prev", 0], ["pv", 0], ["prev", 0], ["b", 0], ["a", 0], ["print", 0], ["len", 0], ["circle", 0], ["for", 0], ["i", 0], ["in", 0], ["circle", 0], ["print", 0], ["i", 0], ["1", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["from", 0], ["scipy", 0], ["sparse", 0], ["csgraph", 0], ["import", 0], ["dijkstra", 0], ["def", 0], ["get", 0], ["path", 0], ["start", 0], ["goal", 0], ["pred", 0], ["return", 0], ["get", 0], ["path", 0], ["row", 0], ["start", 0], ["goal", 0], ["pred", 0], ["start", 0], ["def", 0], ["get", 0], ["path", 0], ["row", 0], ["start", 0], ["goal", 0], ["pred", 0], ["row", 0], ["path", 0], ["i", 0], ["goal", 0], ["while", 0], ["i", 0], ["start", 0], ["and", 0], ["i", 0], ["0", 0], ["path", 0], ["append", 0], ["i", 0], ["i", 0], ["pred", 0], ["row", 0], ["i", 0], ["if", 0], ["i", 0], ["0", 0], ["return", 0], ["path", 0], ["append", 0], ["i", 0], ["return", 0], ["path", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["np", 0], ["inf", 0], ["2", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["g", 0], ["a", 0], ["b", 0], ["1", 0], ["g", 0], ["a", 0], ["b", 0], ["n", 0], ["1", 0], ["g", 0], ["a", 0], ["n", 0], ["b", 0], ["1", 0], ["ans", 0], ["np", 0], ["inf", 0], ["j", 0], ["1", 0], ["d", 0], ["dijkstra", 0], ["g", 0], ["return", 0], ["predecessors", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["d", 0], ["0", 0], ["i", 0], ["i", 0], ["n", 0], ["ans", 0], ["ans", 0], ["int", 0], ["d", 0], ["0", 0], ["i", 0], ["i", 0], ["n", 0], ["j", 0], ["i", 0], ["if", 0], ["ans", 0], ["np", 0], ["inf", 0], ["path", 0], ["get", 0], ["path", 0], ["j", 0], ["j", 0], ["n", 0], ["d", 0], ["1", 0], ["1", 0], ["1", 0], ["path", 0], ["node", 0], ["n", 0], ["for", 0], ["node", 0], ["in", 0], ["path", 0], ["print", 0], ["ans", 0], ["for", 0], ["node", 0], ["in", 0], ["path", 0], ["print", 0], ["node", 0], ["1", 0], ["else", 0], ["print", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["outs", 0], ["defaultdict", 0], ["list", 0], ["ins", 0], ["defaultdict", 0], ["int", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["outs", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["ins", 0], ["b", 0], ["1", 0], ["1", 0], ["q", 0], ["deque", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ins", 0], ["i", 0], ["0", 0], ["res", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["res", 0], ["v", 0], ["for", 0], ["w", 0], ["in", 0], ["outs", 0], ["v", 0], ["ins", 0], ["w", 0], ["1", 0], ["if", 0], ["ins", 0], ["w", 0], ["0", 0], ["q", 0], ["append", 0], ["w", 0], ["print", 0], ["len", 0], ["res", 0], ["n", 0], ["import", 0], ["sys", 0], ["stdin", 0], ["sys", 0], ["stdin", 0], ["ni", 0], ["lambda", 0], ["int", 0], ["ns", 0], ["na", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["ns", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["ignore", 0], ["trailing", 0], ["spaces", 0], ["n", 0], ["m", 0], ["na", 0], ["g", 0], ["false", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["gs", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["s", 0], ["t", 0], ["na", 0], ["gs", 0], ["s", 0], ["1", 0], ["append", 0], ["t", 0], ["1", 0], ["g", 0], ["s", 0], ["1", 0], ["t", 0], ["1", 0], ["true", 0], ["ans", 0], ["999999", 0], ["best", 0], ["none", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ds", 0], ["9999999", 0], ["n", 0], ["prevs", 0], ["1", 0], ["n", 0], ["ds", 0], ["i", 0], ["0", 0], ["q", 0], ["i", 0], ["qp", 0], ["0", 0], ["while", 0], ["qp", 0], ["len", 0], ["q", 0], ["cur", 0], ["q", 0], ["qp", 0], ["qp", 0], ["1", 0], ["for", 0], ["e", 0], ["in", 0], ["gs", 0], ["cur", 0], ["if", 0], ["ds", 0], ["e", 0], ["ds", 0], ["cur", 0], ["1", 0], ["ds", 0], ["e", 0], ["ds", 0], ["cur", 0], ["1", 0], ["prevs", 0], ["e", 0], ["cur", 0], ["q", 0], ["append", 0], ["e", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["g", 0], ["j", 0], ["i", 0], ["if", 0], ["ds", 0], ["j", 0], ["1", 0], ["ans", 0], ["ans", 0], ["ds", 0], ["j", 0], ["1", 0], ["best", 0], ["0", 0], ["ds", 0], ["j", 0], ["1", 0], ["best", 0], ["0", 0], ["i", 0], ["cur", 0], ["j", 0], ["r", 0], ["1", 0], ["while", 0], ["cur", 0], ["i", 0], ["best", 0], ["r", 0], ["cur", 0], ["r", 0], ["1", 0], ["cur", 0], ["prevs", 0], ["cur", 0], ["if", 0], ["not", 0], ["best", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["ans", 0], ["for", 0], ["x", 0], ["in", 0], ["best", 0], ["print", 0], ["x", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["n", 0], ["m", 0], ["t", 0], ["map", 0], ["int", 0], ["open", 0], ["0", 0], ["read", 0], ["split", 0], ["i", 0], ["o", 0], ["r", 0], ["0", 0], ["n", 0], ["for", 0], ["in", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["iter", 0], ["t", 0], ["2", 0], ["o", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["i", 0], ["b", 0], ["1", 0], ["1", 0], ["q", 0], ["deque", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["v", 0], ["1", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["r", 0], ["v", 0], ["for", 0], ["w", 0], ["in", 0], ["o", 0], ["v", 0], ["i", 0], ["w", 0], ["1", 0], ["if", 0], ["i", 0], ["w", 0], ["0", 0], ["q", 0], ["w", 0], ["print", 0], ["len", 0], ["r", 0], ["n", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["shave", 0], ["fwd", 0], ["link", 0], ["bwd", 0], ["link", 0], ["vertices", 0], ["having", 0], ["no", 0], ["leaving", 0], ["link", 0], ["q", 0], ["v", 0], ["for", 0], ["v", 0], ["links", 0], ["in", 0], ["enumerate", 0], ["fwd", 0], ["link", 0], ["if", 0], ["not", 0], ["links", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["pop", 0], ["for", 0], ["u", 0], ["in", 0], ["bwd", 0], ["link", 0], ["v", 0], ["fwd", 0], ["link", 0], ["u", 0], ["remove", 0], ["v", 0], ["if", 0], ["not", 0], ["fwd", 0], ["link", 0], ["u", 0], ["q", 0], ["append", 0], ["u", 0], ["vertices", 0], ["having", 0], ["no", 0], ["entering", 0], ["link", 0], ["q", 0], ["v", 0], ["for", 0], ["v", 0], ["links", 0], ["in", 0], ["enumerate", 0], ["bwd", 0], ["link", 0], ["if", 0], ["not", 0], ["links", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["pop", 0], ["for", 0], ["u", 0], ["in", 0], ["fwd", 0], ["link", 0], ["v", 0], ["bwd", 0], ["link", 0], ["u", 0], ["remove", 0], ["v", 0], ["if", 0], ["not", 0], ["bwd", 0], ["link", 0], ["u", 0], ["q", 0], ["append", 0], ["u", 0], ["def", 0], ["bfs", 0], ["s", 0], ["fwd", 0], ["link", 0], ["predecessors", 0], ["1", 0], ["n", 0], ["q", 0], ["deque", 0], ["for", 0], ["v", 0], ["in", 0], ["fwd", 0], ["link", 0], ["s", 0], ["predecessors", 0], ["v", 0], ["s", 0], ["q", 0], ["append", 0], ["v", 0], ["s", 0], ["visited", 0], ["set", 0], ["while", 0], ["q", 0], ["v", 0], ["p", 0], ["q", 0], ["popleft", 0], ["if", 0], ["v", 0], ["in", 0], ["visited", 0], ["continue", 0], ["visited", 0], ["add", 0], ["v", 0], ["predecessors", 0], ["v", 0], ["p", 0], ["if", 0], ["v", 0], ["s", 0], ["break", 0], ["for", 0], ["u", 0], ["in", 0], ["fwd", 0], ["link", 0], ["v", 0], ["if", 0], ["u", 0], ["not", 0], ["in", 0], ["visited", 0], ["q", 0], ["append", 0], ["u", 0], ["v", 0], ["circuit", 0], ["s", 0], ["v", 0], ["predecessors", 0], ["s", 0], ["while", 0], ["v", 0], ["s", 0], ["circuit", 0], ["add", 0], ["v", 0], ["v", 0], ["predecessors", 0], ["v", 0], ["return", 0], ["predecessors", 0], ["circuit", 0], ["def", 0], ["check", 0], ["predecessors", 0], ["circuit", 0], ["fwd", 0], ["link", 0], ["for", 0], ["v", 0], ["in", 0], ["circuit", 0], ["fwd", 0], ["link", 0], ["v", 0], ["intersection", 0], ["update", 0], ["circuit", 0], ["if", 0], ["len", 0], ["fwd", 0], ["link", 0], ["v", 0], ["1", 0], ["continue", 0], ["for", 0], ["u", 0], ["in", 0], ["fwd", 0], ["link", 0], ["v", 0], ["if", 0], ["predecessors", 0], ["u", 0], ["v", 0], ["return", 0], ["u", 0], ["return", 0], ["1", 0], ["def", 0], ["print", 0], ["ans", 0], ["circuit", 0], ["print", 0], ["len", 0], ["circuit", 0], ["print", 0], ["v", 0], ["1", 0], ["for", 0], ["v", 0], ["in", 0], ["circuit", 0], ["def", 0], ["solve", 0], ["fwd", 0], ["link", 0], ["bwd", 0], ["link", 0], ["shave", 0], ["fwd", 0], ["link", 0], ["bwd", 0], ["link", 0], ["s", 0], ["1", 0], ["for", 0], ["s", 0], ["f", 0], ["b", 0], ["in", 0], ["enumerate", 0], ["zip", 0], ["fwd", 0], ["link", 0], ["bwd", 0], ["link", 0], ["if", 0], ["f", 0], ["and", 0], ["b", 0], ["break", 0], ["else", 0], ["print", 0], ["1", 0], ["return", 0], ["while", 0], ["true", 0], ["predecessors", 0], ["circuit", 0], ["bfs", 0], ["s", 0], ["fwd", 0], ["link", 0], ["res", 0], ["check", 0], ["predecessors", 0], ["circuit", 0], ["fwd", 0], ["link", 0], ["if", 0], ["res", 0], ["1", 0], ["print", 0], ["ans", 0], ["circuit", 0], ["break", 0], ["s", 0], ["res", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["fwd", 0], ["link", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["bwd", 0], ["link", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["line", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["line", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["fwd", 0], ["link", 0], ["a", 0], ["add", 0], ["b", 0], ["bwd", 0], ["link", 0], ["b", 0], ["add", 0], ["a", 0], ["solve", 0], ["fwd", 0], ["link", 0], ["bwd", 0], ["link", 0], ["coding", 0], ["utf", 0], ["8", 0], ["import", 0], ["sys", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["list2d", 0], ["a", 0], ["b", 0], ["c", 0], ["return", 0], ["c", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["def", 0], ["list3d", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["return", 0], ["d", 0], ["c", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["def", 0], ["list4d", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["return", 0], ["e", 0], ["d", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["c", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["def", 0], ["ceil", 0], ["x", 0], ["y", 0], ["1", 0], ["return", 0], ["int", 0], ["x", 0], ["y", 0], ["def", 0], ["int", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["map", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["list", 0], ["n", 0], ["none", 0], ["return", 0], ["list", 0], ["map", 0], ["if", 0], ["n", 0], ["is", 0], ["none", 0], ["else", 0], ["int", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["yes", 0], ["print", 0], ["yes", 0], ["def", 0], ["no", 0], ["print", 0], ["no", 0], ["def", 0], ["yes", 0], ["print", 0], ["yes", 0], ["def", 0], ["no", 0], ["print", 0], ["no", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["inf", 0], ["10", 0], ["18", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["scc", 0], ["n", 0], ["edges", 0], ["強連結成分分解", 0], ["nodes1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["nodes2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["u", 0], ["v", 0], ["in", 0], ["edges", 0], ["nodes1", 0], ["u", 0], ["append", 0], ["v", 0], ["nodes2", 0], ["v", 0], ["append", 0], ["u", 0], ["t", 0], ["visited", 0], ["false", 0], ["n", 0], ["def", 0], ["rec1", 0], ["cur", 0], ["visited", 0], ["cur", 0], ["true", 0], ["for", 0], ["nxt", 0], ["in", 0], ["nodes1", 0], ["cur", 0], ["if", 0], ["not", 0], ["visited", 0], ["nxt", 0], ["rec1", 0], ["nxt", 0], ["行き止まったところから順にtに入れていく", 0], ["t", 0], ["append", 0], ["cur", 0], ["グラフが連結とは限らないので全頂点やる", 0], ["for", 0], ["u", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["visited", 0], ["u", 0], ["rec1", 0], ["u", 0], ["visited", 0], ["false", 0], ["n", 0], ["group", 0], ["0", 0], ["n", 0], ["grpcnt", 0], ["0", 0], ["def", 0], ["rec2", 0], ["cur", 0], ["group", 0], ["cur", 0], ["grpcnt", 0], ["visited", 0], ["cur", 0], ["true", 0], ["for", 0], ["nxt", 0], ["in", 0], ["nodes2", 0], ["cur", 0], ["if", 0], ["not", 0], ["visited", 0], ["nxt", 0], ["rec2", 0], ["nxt", 0], ["逆順で進めるところまで行く", 0], ["for", 0], ["u", 0], ["in", 0], ["reversed", 0], ["t", 0], ["if", 0], ["not", 0], ["visited", 0], ["u", 0], ["rec2", 0], ["u", 0], ["grpcnt", 0], ["1", 0], ["return", 0], ["grpcnt", 0], ["group", 0], ["def", 0], ["bfs", 0], ["n", 0], ["nodes", 0], ["src", 0], ["bfs", 0], ["一般グラフ、重みなし", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["que", 0], ["deque", 0], ["src", 0], ["1", 0], ["0", 0], ["dist", 0], ["n", 0], ["mn", 0], ["inf", 0], ["end", 0], ["1", 0], ["while", 0], ["que", 0], ["u", 0], ["prev", 0], ["c", 0], ["que", 0], ["popleft", 0], ["同じ強連結成分内のみでやる", 0], ["if", 0], ["group", 0], ["u", 0], ["group", 0], ["src", 0], ["continue", 0], ["if", 0], ["dist", 0], ["u", 0], ["訪問済で始点に帰ってきたら、最短チェック", 0], ["if", 0], ["u", 0], ["src", 0], ["if", 0], ["c", 0], ["mn", 0], ["mn", 0], ["c", 0], ["end", 0], ["prev", 0], ["continue", 0], ["dist", 0], ["u", 0], ["c", 0], ["prev", 0], ["for", 0], ["v", 0], ["in", 0], ["nodes", 0], ["u", 0], ["que", 0], ["append", 0], ["v", 0], ["u", 0], ["c", 0], ["1", 0], ["経路、始点に戻ってくる最短距離、その直前の頂点を返す", 0], ["return", 0], ["dist", 0], ["mn", 0], ["end", 0], ["def", 0], ["get", 0], ["route", 0], ["s", 0], ["t", 0], ["res", 0], ["s", 0], ["t間の経路を取得", 0], ["prev", 0], ["t", 0], ["stot", 0], ["t", 0], ["while", 0], ["prev", 0], ["s", 0], ["prev", 0], ["res", 0], ["prev", 0], ["1", 0], ["if", 0], ["prev", 0], ["1", 0], ["return", 0], ["none", 0], ["stot", 0], ["append", 0], ["prev", 0], ["stot", 0], ["stot", 0], ["1", 0], ["return", 0], ["stot", 0], ["n", 0], ["m", 0], ["map", 0], ["nodes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["edges", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["nodes", 0], ["a", 0], ["append", 0], ["b", 0], ["edges", 0], ["append", 0], ["a", 0], ["b", 0], ["強連結成分毎に見る", 0], ["grpcnt", 0], ["group", 0], ["scc", 0], ["n", 0], ["edges", 0], ["ans", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["経路、始点に戻ってくる最短距離、その直前の頂点", 0], ["dist", 0], ["mn", 0], ["end", 0], ["bfs", 0], ["n", 0], ["nodes", 0], ["i", 0], ["if", 0], ["mn", 0], ["ans", 0], ["ans", 0], ["mn", 0], ["route", 0], ["get", 0], ["route", 0], ["i", 0], ["end", 0], ["dist", 0], ["if", 0], ["ans", 0], ["inf", 0], ["print", 0], ["ans", 0], ["print", 0], ["u", 0], ["1", 0], ["for", 0], ["u", 0], ["in", 0], ["route", 0], ["else", 0], ["そもそも閉路なし", 0], ["print", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 1], ["m", 1], ["map", 1], ["int", 1], ["input", 1], ["split", 1], ["edge", 1], ["for", 1], ["in", 1], ["range", 1], ["n", 1], ["for", 1], ["in", 1], ["range", 1], ["m", 1], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["edge", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["ans", 0], ["for", 0], ["sta", 0], ["in", 0], ["range", 0], ["n", 0], ["prev", 0], ["1", 0], ["n", 0], ["que", 0], ["deque", 0], ["sta", 0], ["while", 0], ["que", 0], ["v", 0], ["que", 0], ["popleft", 0], ["for", 0], ["w", 0], ["in", 0], ["edge", 0], ["v", 0], ["if", 0], ["w", 0], ["sta", 0], ["閉路発見", 0], ["path", 0], ["while", 0], ["v", 0], ["1", 0], ["path", 0], ["append", 0], ["v", 0], ["1", 0], ["v", 0], ["prev", 0], ["v", 0], ["if", 0], ["not", 0], ["ans", 0], ["or", 0], ["len", 0], ["ans", 0], ["len", 0], ["path", 0], ["ans", 0], ["path", 0], ["break", 0], ["if", 0], ["prev", 0], ["w", 0], ["1", 0], ["continue", 0], ["prev", 0], ["w", 0], ["v", 0], ["que", 0], ["append", 0], ["w", 0], ["if", 0], ["ans", 0], ["print", 0], ["len", 0], ["ans", 0], ["print", 0], ["ans", 0], ["sep", 0], ["n", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["4", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["adj", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["edges", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["adj", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["edges", 0], ["append", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["seen", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["visited", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["begin", 0], ["1", 0], ["hist", 0], ["def", 0], ["dfs", 0], ["x", 0], ["nonlocal", 0], ["begin", 0], ["hist", 0], ["if", 0], ["begin", 0], ["0", 0], ["return", 0], ["seen", 0], ["x", 0], ["true", 0], ["hist", 0], ["append", 0], ["x", 0], ["for", 0], ["v", 0], ["in", 0], ["adj", 0], ["x", 0], ["if", 0], ["visited", 0], ["v", 0], ["continue", 0], ["if", 0], ["seen", 0], ["v", 0], ["true", 0], ["and", 0], ["visited", 0], ["v", 0], ["false", 0], ["begin", 0], ["v", 0], ["return", 0], ["dfs", 0], ["v", 0], ["if", 0], ["begin", 0], ["0", 0], ["return", 0], ["visited", 0], ["x", 0], ["true", 0], ["hist", 0], ["pop", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["begin", 0], ["0", 0], ["dfs", 0], ["i", 0], ["if", 0], ["begin", 0], ["0", 0], ["break", 0], ["if", 0], ["begin", 0], ["0", 0], ["print", 0], ["1", 0], ["return", 0], ["else", 0], ["cycle", 0], ["included", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["included", 0], ["begin", 0], ["true", 0], ["while", 0], ["hist", 0], ["and", 0], ["hist", 0], ["1", 0], ["begin", 0], ["cycle", 0], ["append", 0], ["hist", 0], ["1", 0], ["included", 0], ["hist", 0], ["1", 0], ["true", 0], ["hist", 0], ["pop", 0], ["cycle", 0], ["append", 0], ["begin", 0], ["hist", 0], ["pop", 0], ["while", 0], ["true", 0], ["meets", 0], ["true", 0], ["l", 0], ["len", 0], ["cycle", 0], ["ind", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["ind", 0], ["cycle", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["meets", 0], ["false", 0], ["break", 0], ["for", 0], ["v", 0], ["in", 0], ["adj", 0], ["cycle", 0], ["i", 0], ["1", 0], ["l", 0], ["if", 0], ["included", 0], ["v", 0], ["true", 0], ["and", 0], ["v", 0], ["cycle", 0], ["i", 0], ["meets", 0], ["false", 0], ["new", 0], ["start", 0], ["id", 0], ["new", 0], ["end", 0], ["id", 0], ["ind", 0], ["v", 0], ["i", 0], ["1", 0], ["l", 0], ["break", 0], ["if", 0], ["meets", 0], ["print", 0], ["len", 0], ["cycle", 0], ["print", 0], ["c", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["cycle", 0], ["sep", 0], ["n", 0], ["break", 0], ["else", 0], ["new", 0], ["cycle", 0], ["included", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["cur", 0], ["new", 0], ["end", 0], ["id", 0], ["while", 0], ["cur", 0], ["new", 0], ["start", 0], ["id", 0], ["new", 0], ["cycle", 0], ["append", 0], ["cycle", 0], ["cur", 0], ["included", 0], ["cycle", 0], ["cur", 0], ["true", 0], ["cur", 0], ["cur", 0], ["1", 0], ["l", 0], ["new", 0], ["cycle", 0], ["append", 0], ["cycle", 0], ["new", 0], ["start", 0], ["id", 0], ["cycle", 0], ["new", 0], ["cycle", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["graph", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["graph", 0], ["a", 0], ["append", 0], ["b", 0], ["dist", 0], ["1", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["queue", 0], ["deque", 0], ["i", 0], ["0", 0], ["while", 0], ["queue", 0], ["v", 0], ["c", 0], ["queue", 0], ["popleft", 0], ["for", 0], ["v", 0], ["next", 0], ["in", 0], ["graph", 0], ["v", 0], ["if", 0], ["dist", 0], ["i", 0], ["v", 0], ["next", 0], ["1", 0], ["dist", 0], ["i", 0], ["v", 0], ["next", 0], ["c", 0], ["1", 0], ["queue", 0], ["append", 0], ["v", 0], ["next", 0], ["c", 0], ["1", 0], ["print", 0], ["dist", 0], ["ans", 0], ["len", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["dist", 0], ["i", 0], ["i", 0], ["1", 0], ["ans", 0], ["len", 0], ["min", 0], ["ans", 0], ["len", 0], ["dist", 0], ["i", 0], ["i", 0], ["if", 0], ["ans", 0], ["len", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["dist", 0], ["i", 0], ["i", 0], ["ans", 0], ["len", 0], ["start", 0], ["v", 0], ["i", 0], ["break", 0], ["dist", 0], ["1", 0], ["n", 0], ["prev", 0], ["v", 0], ["1", 0], ["n", 0], ["queue", 0], ["deque", 0], ["start", 0], ["v", 0], ["0", 0], ["while", 0], ["queue", 0], ["v", 0], ["c", 0], ["queue", 0], ["popleft", 0], ["if", 0], ["v", 0], ["start", 0], ["v", 0], ["and", 0], ["c", 0], ["0", 0], ["break", 0], ["for", 0], ["v", 0], ["next", 0], ["in", 0], ["graph", 0], ["v", 0], ["if", 0], ["dist", 0], ["v", 0], ["next", 0], ["1", 0], ["dist", 0], ["v", 0], ["next", 0], ["c", 0], ["1", 0], ["prev", 0], ["v", 0], ["v", 0], ["next", 0], ["v", 0], ["queue", 0], ["append", 0], ["v", 0], ["next", 0], ["c", 0], ["1", 0], ["ans", 0], ["print", 0], ["start", 0], ["v", 0], ["print", 0], ["dist", 0], ["print", 0], ["prev", 0], ["v", 0], ["v", 0], ["start", 0], ["v", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ans", 0], ["len", 0], ["ans", 0], ["append", 0], ["v", 0], ["1", 0], ["v", 0], ["prev", 0], ["v", 0], ["v", 0], ["print", 0], ["ans", 0], ["len", 0], ["print", 0], ["ans", 0], ["sep", 0], ["n", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["dfs", 0], ["n", 0], ["ab", 0], ["status", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["status", 0], ["i", 0], ["1", 0], ["continue", 0], ["stack", 0], ["i", 0], ["status", 0], ["i", 0], ["0", 0], ["while", 0], ["stack", 0], ["v", 0], ["stack", 0], ["1", 0], ["if", 0], ["ab", 0], ["v", 0], ["n", 0], ["ab", 0], ["v", 0], ["popleft", 0], ["if", 0], ["status", 0], ["n", 0], ["1", 0], ["stack", 0], ["append", 0], ["n", 0], ["status", 0], ["n", 0], ["0", 0], ["else", 0], ["if", 0], ["n", 0], ["in", 0], ["stack", 0], ["idx", 0], ["stack", 0], ["index", 0], ["n", 0], ["cycle", 0], ["stack", 0], ["idx", 0], ["return", 0], ["cycle", 0], ["else", 0], ["status", 0], ["v", 0], ["1", 0], ["stack", 0], ["pop", 0], ["return", 0], ["false", 0], ["def", 0], ["find", 0], ["smaller", 0], ["cycle", 0], ["cycle", 0], ["ab", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["cycle", 0], ["v", 0], ["cycle", 0], ["i", 0], ["if", 0], ["ab", 0], ["v", 0], ["n", 0], ["ab", 0], ["v", 0], ["popleft", 0], ["if", 0], ["n", 0], ["in", 0], ["cycle", 0], ["r", 0], ["cycle", 0], ["index", 0], ["n", 0], ["if", 0], ["i", 0], ["r", 0], ["cycle", 0], ["cycle", 0], ["i", 0], ["1", 0], ["cycle", 0], ["r", 0], ["else", 0], ["cycle", 0], ["cycle", 0], ["r", 0], ["i", 0], ["1", 0], ["i", 0], ["cycle", 0], ["index", 0], ["v", 0], ["else", 0], ["i", 0], ["1", 0], ["return", 0], ["cycle", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ab", 0], ["deque", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["int", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ab", 0], ["a", 0], ["append", 0], ["b", 0], ["cycle", 0], ["dfs", 0], ["n", 0], ["ab", 0], ["if", 0], ["not", 0], ["cycle", 0], ["print", 0], ["1", 0], ["else", 0], ["cycle", 0], ["find", 0], ["smaller", 0], ["cycle", 0], ["cycle", 0], ["ab", 0], ["print", 0], ["len", 0], ["cycle", 0], ["for", 0], ["v", 0], ["in", 0], ["cycle", 0], ["print", 0], ["v", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["en", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["v", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["u", 0], ["append", 0], ["v", 0], ["en", 0], ["v", 0], ["1", 0], ["q", 0], ["deque", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["en", 0], ["i", 0], ["0", 0], ["done", 0], ["list", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["for", 0], ["x", 0], ["in", 0], ["g", 0], ["v", 0], ["en", 0], ["x", 0], ["1", 0], ["if", 0], ["not", 0], ["en", 0], ["x", 0], ["q", 0], ["append", 0], ["x", 0], ["done", 0], ["append", 0], ["v", 0], ["print", 0], ["1", 0], ["if", 0], ["len", 0], ["done", 0], ["n", 0], ["else", 0], ["0", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["main", 0], ["def", 0], ["bfs", 0], ["u", 0], ["dist", 0], ["inf", 0], ["n", 0], ["cur", 0], ["u", 0], ["pre", 0], ["1", 0], ["n", 0], ["dist", 0], ["u", 0], ["0", 0], ["d", 0], ["0", 0], ["while", 0], ["cur", 0], ["d", 0], ["1", 0], ["nxt", 0], ["for", 0], ["v", 0], ["in", 0], ["cur", 0], ["for", 0], ["kv", 0], ["in", 0], ["to", 0], ["v", 0], ["if", 0], ["dist", 0], ["kv", 0], ["inf", 0], ["continue", 0], ["dist", 0], ["kv", 0], ["d", 0], ["pre", 0], ["kv", 0], ["v", 0], ["nxt", 0], ["append", 0], ["kv", 0], ["cur", 0], ["nxt", 0], ["mn", 0], ["inf", 0], ["1", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["v", 0], ["u", 0], ["continue", 0], ["if", 0], ["u", 0], ["in", 0], ["to", 0], ["v", 0], ["mn", 0], ["min", 0], ["mn", 0], ["dist", 0], ["v", 0], ["v", 0], ["print", 0], ["dist", 0], ["print", 0], ["mn", 0], ["print", 0], ["pre", 0], ["res", 0], ["v", 0], ["mn", 0], ["1", 0], ["if", 0], ["mn", 0], ["0", 0], ["inf", 0], ["return", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["mn", 0], ["0", 0], ["1", 0], ["res", 0], ["append", 0], ["v", 0], ["v", 0], ["pre", 0], ["v", 0], ["return", 0], ["res", 0], ["inf", 0], ["10", 0], ["9", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["to", 0], ["defaultdict", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["to", 0], ["u", 0], ["1", 0], ["add", 0], ["v", 0], ["1", 0], ["ans", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["u", 0], ["in", 0], ["range", 0], ["n", 0], ["res", 0], ["bfs", 0], ["u", 0], ["if", 0], ["len", 0], ["res", 0], ["len", 0], ["ans", 0], ["ans", 0], ["res", 0], ["if", 0], ["len", 0], ["ans", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["u", 0], ["in", 0], ["ans", 0], ["print", 0], ["u", 0], ["1", 0], ["main", 0], ["from", 0], ["collections", 0], ["import", 0], ["n", 0], ["m", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["open", 0], ["0", 0], ["read", 0], ["split", 0], ["i", 0], ["o", 0], ["r", 0], ["0", 0], ["n", 0], ["for", 0], ["in", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["iter", 0], ["t", 0], ["2", 0], ["o", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["i", 0], ["b", 0], ["1", 0], ["1", 0], ["q", 0], ["deque", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["v", 0], ["1", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["r", 0], ["v", 0], ["for", 0], ["w", 0], ["in", 0], ["o", 0], ["v", 0], ["i", 0], ["w", 0], ["1", 0], ["if", 0], ["i", 0], ["w", 0], ["0", 0], ["q", 0], ["w", 0], ["print", 0], ["len", 0], ["r", 0], ["n", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["graph", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["graph", 0], ["a", 0], ["append", 0], ["b", 0], ["infi", 0], ["10", 0], ["10", 0], ["def", 0], ["bfs", 0], ["start", 0], ["res", 0], ["頂点数", 0], ["サイクル最後の頂点、で持つ", 0], ["res", 0], ["infi", 0], ["1", 0], ["dist", 0], ["1", 0], ["n", 0], ["1", 0], ["par", 0], ["1", 0], ["n", 0], ["1", 0], ["que", 0], ["deque", 0], ["que", 0], ["append", 0], ["start", 0], ["dist", 0], ["start", 0], ["0", 0], ["while", 0], ["que", 0], ["v", 0], ["que", 0], ["popleft", 0], ["for", 0], ["u", 0], ["in", 0], ["graph", 0], ["v", 0], ["if", 0], ["dist", 0], ["u", 0], ["0", 0], ["continue", 0], ["dist", 0], ["u", 0], ["dist", 0], ["v", 0], ["1", 0], ["par", 0], ["u", 0], ["v", 0], ["que", 0], ["append", 0], ["u", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["start", 0], ["continue", 0], ["if", 0], ["dist", 0], ["i", 0], ["1", 0], ["continue", 0], ["if", 0], ["start", 0], ["in", 0], ["graph", 0], ["i", 0], ["if", 0], ["res", 0], ["0", 0], ["dist", 0], ["i", 0], ["1", 0], ["res", 0], ["dist", 0], ["i", 0], ["1", 0], ["i", 0], ["if", 0], ["res", 0], ["0", 0], ["infi", 0], ["return", 0], ["1", 0], ["cycle", 0], ["num", 0], ["res", 0], ["0", 0], ["v", 0], ["res", 0], ["1", 0], ["cycle", 0], ["deque", 0], ["while", 0], ["v", 0], ["0", 0], ["cycle", 0], ["appendleft", 0], ["v", 0], ["v", 0], ["par", 0], ["v", 0], ["return", 0], ["cycle", 0], ["num", 0], ["cycle", 0], ["jisho", 0], ["ans", 0], ["1", 0], ["cycle", 0], ["num", 0], ["infi", 0], ["kouho", 0], ["v", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["temp", 0], ["num", 0], ["temp", 0], ["cycle", 0], ["bfs", 0], ["i", 0], ["if", 0], ["temp", 0], ["num", 0], ["1", 0], ["continue", 0], ["if", 0], ["cycle", 0], ["num", 0], ["temp", 0], ["num", 0], ["cycle", 0], ["num", 0], ["min", 0], ["cycle", 0], ["num", 0], ["temp", 0], ["num", 0], ["kouho", 0], ["v", 0], ["i", 0], ["jisho", 0], ["i", 0], ["temp", 0], ["cycle", 0], ["if", 0], ["kouho", 0], ["v", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["else", 0], ["ans", 0], ["num", 0], ["cycle", 0], ["num", 0], ["ans", 0], ["list", 0], ["jisho", 0], ["kouho", 0], ["v", 0], ["print", 0], ["cycle", 0], ["num", 0], ["print", 0], ["ans", 0], ["list", 0], ["sep", 0], ["n", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ab", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["es", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ab", 0], ["a", 0], ["b", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["es", 0], ["a", 0], ["append", 0], ["b", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["mindist", 0], ["n", 0], ["ans", 0], ["none", 0], ["for", 0], ["g", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["s", 0], ["in", 0], ["es", 0], ["g", 0], ["q", 0], ["deque", 0], ["s", 0], ["dist", 0], ["n", 0], ["n", 0], ["dist", 0], ["s", 0], ["0", 0], ["prev", 0], ["1", 0], ["n", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["if", 0], ["v", 0], ["g", 0], ["break", 0], ["for", 0], ["to", 0], ["in", 0], ["es", 0], ["v", 0], ["if", 0], ["dist", 0], ["to", 0], ["dist", 0], ["v", 0], ["1", 0], ["continue", 0], ["dist", 0], ["to", 0], ["dist", 0], ["v", 0], ["1", 0], ["prev", 0], ["to", 0], ["v", 0], ["q", 0], ["append", 0], ["to", 0], ["else", 0], ["continue", 0], ["if", 0], ["dist", 0], ["g", 0], ["mindist", 0], ["continue", 0], ["mindist", 0], ["dist", 0], ["g", 0], ["v", 0], ["g", 0], ["tmp", 0], ["v", 0], ["1", 0], ["while", 0], ["prev", 0], ["v", 0], ["0", 0], ["v", 0], ["prev", 0], ["v", 0], ["tmp", 0], ["append", 0], ["v", 0], ["1", 0], ["ans", 0], ["tmp", 0], ["if", 0], ["ans", 0], ["print", 0], ["len", 0], ["ans", 0], ["print", 0], ["ans", 0], ["sep", 0], ["n", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["100000", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ab", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["r", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ab", 0], ["if", 0], ["a", 0], ["in", 0], ["r", 0], ["r", 0], ["a", 0], ["append", 0], ["b", 0], ["else", 0], ["r", 0], ["a", 0], ["b", 0], ["def", 0], ["nasu", 0], ["x", 0], ["e", 0], ["d", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["not", 0], ["in", 0], ["r", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["r", 0], ["x", 0], ["if", 0], ["i", 0], ["e", 0], ["return", 0], ["i", 0], ["if", 0], ["d", 0], ["i", 0], ["0", 0], ["t", 0], ["nasu", 0], ["i", 0], ["e", 0], ["if", 0], ["t", 0], ["return", 0], ["i", 0], ["t", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["d", 0], ["0", 0], ["n", 0], ["1", 0], ["l", 0], ["nasu", 0], ["i", 0], ["i", 0], ["if", 0], ["l", 0], ["break", 0], ["else", 0], ["print", 0], ["1", 0], ["return", 0], ["d", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["d", 0], ["i", 0], ["1", 0], ["len", 0], ["len", 0], ["l", 0], ["l", 0], ["l", 0], ["l", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["1", 0], ["i", 0], ["1", 0], ["if", 0], ["d", 0], ["l", 0], ["j", 0], ["0", 0], ["and", 0], ["l", 0], ["j", 0], ["in", 0], ["r", 0], ["l", 0], ["i", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["d", 0], ["l", 0], ["k", 0], ["0", 0], ["i", 0], ["j", 0], ["break", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["if", 0], ["d", 0], ["l", 0], ["i", 0], ["1", 0], ["a", 0], ["append", 0], ["l", 0], ["i", 0], ["print", 0], ["len", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["print", 0], ["i", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 1], ["m", 1], ["map", 1], ["int", 1], ["input", 1], ["split", 1], ["edge", 1], ["for", 1], ["in", 1], ["range", 1], ["n", 1], ["for", 1], ["in", 1], ["range", 1], ["m", 1], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["edge", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["ans", 0], ["for", 0], ["sta", 0], ["in", 0], ["range", 0], ["n", 0], ["prev", 0], ["1", 0], ["n", 0], ["que", 0], ["deque", 0], ["sta", 0], ["while", 0], ["que", 0], ["v", 0], ["que", 0], ["popleft", 0], ["for", 0], ["w", 0], ["in", 0], ["edge", 0], ["v", 0], ["if", 0], ["w", 0], ["sta", 0], ["path", 0], ["while", 0], ["v", 0], ["1", 0], ["path", 0], ["append", 0], ["v", 0], ["1", 0], ["v", 0], ["prev", 0], ["v", 0], ["if", 0], ["not", 0], ["ans", 0], ["or", 0], ["len", 0], ["ans", 0], ["len", 0], ["path", 0], ["ans", 0], ["path", 0], ["break", 0], ["if", 0], ["prev", 0], ["w", 0], ["1", 0], ["continue", 0], ["prev", 0], ["w", 0], ["v", 0], ["que", 0], ["append", 0], ["w", 0], ["if", 0], ["ans", 0], ["print", 0], ["len", 0], ["ans", 0], ["print", 0], ["ans", 0], ["sep", 0], ["n", 0], ["else", 0], ["print", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["deg", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["p", 0], ["in", 0], ["g", 0], ["i", 0], ["deg", 0], ["p", 0], ["1", 0], ["q", 0], ["deque", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["deg", 0], ["i", 0], ["0", 0], ["res", 0], ["while", 0], ["q", 0], ["u", 0], ["q", 0], ["popleft", 0], ["res", 0], ["append", 0], ["u", 0], ["for", 0], ["v", 0], ["in", 0], ["g", 0], ["u", 0], ["deg", 0], ["v", 0], ["1", 0], ["if", 0], ["deg", 0], ["v", 0], ["0", 0], ["q", 0], ["append", 0], ["v", 0], ["if", 0], ["len", 0], ["res", 0], ["n", 0], ["print", 0], ["1", 0], ["return", 0], ["x", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["st", 0], ["in", 0], ["range", 0], ["n", 0], ["pre", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["q", 0], ["deque", 0], ["st", 0], ["flag", 0], ["0", 0], ["while", 0], ["q", 0], ["r", 0], ["q", 0], ["popleft", 0], ["for", 0], ["p", 0], ["in", 0], ["g", 0], ["r", 0], ["if", 0], ["pre", 0], ["p", 0], ["1", 0], ["pre", 0], ["p", 0], ["r", 0], ["q", 0], ["append", 0], ["p", 0], ["if", 0], ["pre", 0], ["st", 0], ["1", 0], ["y", 0], ["st", 0], ["tmp", 0], ["pre", 0], ["st", 0], ["while", 0], ["tmp", 0], ["st", 0], ["y", 0], ["add", 0], ["tmp", 0], ["tmp", 0], ["pre", 0], ["tmp", 0], ["if", 0], ["len", 0], ["y", 0], ["len", 0], ["x", 0], ["x", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["y", 0], ["flag", 0], ["1", 0], ["break", 0], ["if", 0], ["flag", 0], ["break", 0], ["print", 0], ["len", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["x", 0], ["print", 0], ["i", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["e", 0], ["for", 1], ["in", 1], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["e", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["d", 0], ["n", 0], ["1", 0], ["flag", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["v", 0], ["in", 0], ["e", 0], ["i", 0], ["q", 0], ["deque", 0], ["q", 0], ["append", 0], ["v", 0], ["used", 0], ["n", 0], ["1", 0], ["n", 0], ["used", 0], ["v", 0], ["1", 0], ["while", 0], ["q", 0], ["temp", 0], ["q", 0], ["popleft", 0], ["if", 0], ["used", 0], ["temp", 0], ["d", 0], ["break", 0], ["for", 0], ["u", 0], ["in", 0], ["e", 0], ["temp", 0], ["if", 0], ["u", 0], ["i", 0], ["and", 0], ["d", 0], ["used", 0], ["temp", 0], ["1", 0], ["d", 0], ["used", 0], ["temp", 0], ["1", 0], ["memo", 0], ["temp", 0], ["u", 0], ["q", 0], ["deque", 0], ["flag", 0], ["true", 0], ["break", 0], ["elif", 0], ["u", 0], ["i", 0], ["q", 0], ["deque", 0], ["break", 0], ["if", 0], ["used", 0], ["u", 0], ["n", 0], ["1", 0], ["continue", 0], ["used", 0], ["u", 0], ["used", 0], ["temp", 0], ["1", 0], ["q", 0], ["append", 0], ["u", 0], ["import", 0], ["heapq", 0], ["if", 0], ["flag", 0], ["h", 0], ["dist", 0], ["n", 0], ["1", 0], ["n", 0], ["dist", 0], ["memo", 0], ["1", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["e", 0], ["memo", 0], ["1", 0], ["heapq", 0], ["heappush", 0], ["h", 0], ["1", 0], ["v", 0], ["while", 0], ["true", 0], ["temp", 0], ["heapq", 0], ["heappop", 0], ["h", 0], ["if", 0], ["dist", 0], ["temp", 0], ["1", 0], ["n", 0], ["1", 0], ["continue", 0], ["dist", 0], ["temp", 0], ["1", 0], ["temp", 0], ["0", 0], ["if", 0], ["temp", 0], ["1", 0], ["memo", 0], ["0", 0], ["break", 0], ["for", 0], ["v", 0], ["in", 0], ["e", 0], ["temp", 0], ["1", 0], ["if", 0], ["dist", 0], ["v", 0], ["n", 0], ["1", 0], ["continue", 0], ["heapq", 0], ["heappush", 0], ["h", 0], ["temp", 0], ["0", 0], ["1", 0], ["v", 0], ["ans", 0], ["memo", 0], ["0", 0], ["d", 0], ["dist", 0], ["memo", 0], ["0", 0], ["1", 0], ["prev", 0], ["memo", 0], ["0", 0], ["while", 0], ["d", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["dist", 0], ["i", 0], ["d", 0], ["and", 0], ["prev", 0], ["in", 0], ["e", 0], ["i", 0], ["prev", 0], ["i", 0], ["ans", 0], ["append", 0], ["i", 0], ["d", 0], ["1", 0], ["break", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["print", 0], ["i", 0], ["1", 0], ["else", 0], ["print", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["edges", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["fr", 0], ["to", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["fr", 0], ["1", 0], ["to", 0], ["1", 0], ["edges", 0], ["fr", 0], ["append", 0], ["to", 0], ["for", 0], ["start", 0], ["in", 0], ["range", 0], ["n", 0], ["st", 0], ["deque", 0], ["start", 0], ["true", 0], ["l", 0], ["deque", 0], ["v", 0], ["set", 0], ["while", 0], ["st", 0], ["now", 0], ["isfirst", 0], ["st", 0], ["pop", 0], ["if", 0], ["isfirst", 0], ["l", 0], ["append", 0], ["now", 0], ["if", 0], ["now", 0], ["in", 0], ["v", 0], ["break", 0], ["v", 0], ["add", 0], ["now", 0], ["st", 0], ["append", 0], ["now", 0], ["false", 0], ["for", 0], ["to", 0], ["in", 0], ["edges", 0], ["now", 0], ["st", 0], ["append", 0], ["to", 0], ["true", 0], ["else", 0], ["l", 0], ["pop", 0], ["v", 0], ["remove", 0], ["now", 0], ["else", 0], ["continue", 0], ["print", 0], ["0", 0], ["print", 0], ["return", 0], ["loopstart", 0], ["l", 0], ["1", 0], ["while", 0], ["l", 0], ["0", 0], ["loopstart", 0], ["l", 0], ["popleft", 0], ["print", 0], ["len", 0], ["l", 0], ["1", 0], ["ans", 0], ["v", 0], ["1", 0], ["for", 0], ["v", 0], ["in", 0], ["l", 0], ["print", 0], ["ans", 0], ["1", 0], ["sep", 0], ["n", 0], ["return", 0], ["print", 0], ["1", 0], ["def", 0], ["f", 0], ["pure", 0], ["参考", 0], ["http", 0], ["drken1215", 0], ["hatenablog", 0], ["com", 0], ["entry", 0], ["2019", 0], ["09", 0], ["29", 0], ["012000", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["graph", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["graph", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["shortest", 0], ["n", 0], ["1", 0], ["ans", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["n", 0], ["頂点sから他の辺へ行くには何個の頂点を辿る必要があるか計算する", 0], ["dist", 0], ["1", 0], ["n", 0], ["previous", 0], ["1", 0], ["n", 0], ["n", 0], ["頂点nへはどこから来たか", 0], ["queue", 0], ["deque", 0], ["s", 0], ["dist", 0], ["s", 0], ["0", 0], ["while", 0], ["queue", 0], ["v", 0], ["queue", 0], ["pop", 0], ["for", 0], ["next", 0], ["node", 0], ["in", 0], ["graph", 0], ["v", 0], ["if", 0], ["dist", 0], ["next", 0], ["node", 0], ["1", 0], ["dist", 0], ["next", 0], ["node", 0], ["dist", 0], ["v", 0], ["1", 0], ["previous", 0], ["next", 0], ["node", 0], ["v", 0], ["queue", 0], ["appendleft", 0], ["next", 0], ["node", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["t", 0], ["s", 0], ["or", 0], ["dist", 0], ["t", 0], ["1", 0], ["continue", 0], ["頂点tは始点と同じ、または、始点から到達不可能", 0], ["for", 0], ["next", 0], ["node", 0], ["in", 0], ["graph", 0], ["t", 0], ["if", 0], ["next", 0], ["node", 0], ["s", 0], ["ループ完成", 0], ["ans", 0], ["tmp", 0], ["s", 0], ["解になりうる頂点集合", 0], ["current", 0], ["node", 0], ["t", 0], ["頂点tからsまで巻き戻していく", 0], ["while", 0], ["current", 0], ["node", 0], ["s", 0], ["ans", 0], ["tmp", 0], ["append", 0], ["current", 0], ["node", 0], ["current", 0], ["node", 0], ["previous", 0], ["current", 0], ["node", 0], ["頂点集合の濃度が減少した", 0], ["if", 0], ["shortest", 0], ["len", 0], ["ans", 0], ["tmp", 0], ["shortest", 0], ["len", 0], ["ans", 0], ["tmp", 0], ["ans", 0], ["ans", 0], ["tmp", 0], ["if", 0], ["shortest", 0], ["n", 0], ["1", 0], ["return", 0], ["1", 0], ["閉路がなかった。条件を満たす頂点集合はない", 0], ["return", 0], ["join", 0], ["map", 0], ["str", 0], ["len", 0], ["ans", 0], ["sorted", 0], ["v", 0], ["1", 0], ["for", 0], ["v", 0], ["in", 0], ["ans", 0], ["print", 0], ["f", 0], ["pure", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["edges", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["edgesr", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["fr", 0], ["to", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["fr", 0], ["1", 0], ["to", 0], ["1", 0], ["edges", 0], ["fr", 0], ["append", 0], ["to", 0], ["edgesr", 0], ["to", 0], ["append", 0], ["fr", 0], ["for", 0], ["start", 0], ["in", 0], ["range", 0], ["n", 0], ["st", 0], ["deque", 0], ["start", 0], ["true", 0], ["l", 0], ["deque", 0], ["v", 0], ["set", 0], ["while", 0], ["st", 0], ["now", 0], ["isfirst", 0], ["st", 0], ["pop", 0], ["if", 0], ["isfirst", 0], ["l", 0], ["append", 0], ["now", 0], ["if", 0], ["now", 0], ["in", 0], ["v", 0], ["break", 0], ["v", 0], ["add", 0], ["now", 0], ["st", 0], ["append", 0], ["now", 0], ["false", 0], ["for", 0], ["to", 0], ["in", 0], ["edges", 0], ["now", 0], ["st", 0], ["append", 0], ["to", 0], ["true", 0], ["else", 0], ["l", 0], ["pop", 0], ["v", 0], ["remove", 0], ["now", 0], ["else", 0], ["continue", 0], ["loopstart", 0], ["l", 0], ["pop", 0], ["while", 0], ["l", 0], ["0", 0], ["loopstart", 0], ["l", 0], ["popleft", 0], ["v", 0], ["set", 0], ["l", 0], ["dist", 0], ["float", 0], ["inf", 0], ["n", 0], ["que", 0], ["deque", 0], ["loopstart", 0], ["0", 0], ["while", 0], ["que", 0], ["now", 0], ["d", 0], ["que", 0], ["popleft", 0], ["if", 0], ["dist", 0], ["now", 0], ["d", 0], ["if", 0], ["now", 0], ["loopstart", 0], ["dist", 0], ["loopstart", 0], ["d", 0], ["break", 0], ["continue", 0], ["dist", 0], ["now", 0], ["d", 0], ["for", 0], ["to", 0], ["in", 0], ["edges", 0], ["now", 0], ["if", 0], ["to", 0], ["in", 0], ["v", 0], ["que", 0], ["append", 0], ["to", 0], ["d", 0], ["1", 0], ["ans", 0], ["loopstart", 0], ["now", 0], ["loopstart", 0], ["while", 0], ["dist", 0], ["now", 0], ["1", 0], ["for", 0], ["back", 0], ["in", 0], ["edgesr", 0], ["now", 0], ["if", 0], ["dist", 0], ["now", 0], ["1", 0], ["dist", 0], ["back", 0], ["ans", 0], ["append", 0], ["back", 0], ["now", 0], ["back", 0], ["break", 0], ["ans", 0], ["set", 0], ["a", 0], ["1", 0], ["for", 0], ["a", 0], ["in", 0], ["ans", 0], ["print", 0], ["len", 0], ["ans", 0], ["print", 0], ["ans", 0], ["sep", 0], ["n", 0], ["return", 0], ["print", 0], ["1", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["u", 0], ["v", 0], ["u", 0], ["1", 0], ["v", 0], ["1", 0], ["g", 0], ["u", 0], ["append", 0], ["v", 0], ["mi", 0], ["set", 0], ["range", 0], ["n", 0], ["flg", 0], ["false", 0], ["def", 0], ["func", 0], ["path", 0], ["chk", 0], ["set", 0], ["path", 0], ["if", 0], ["len", 0], ["path", 0], ["2", 0], ["for", 0], ["i", 0], ["v", 0], ["in", 0], ["enumerate", 0], ["path", 0], ["nvs", 0], ["nv", 0], ["for", 0], ["nv", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["nv", 0], ["in", 0], ["chk", 0], ["if", 0], ["len", 0], ["nvs", 0], ["1", 0], ["continue", 0], ["for", 0], ["nv", 0], ["in", 0], ["nvs", 0], ["if", 0], ["nv", 0], ["path", 0], ["i", 0], ["1", 0], ["len", 0], ["path", 0], ["continue", 0], ["ary", 0], ["nv", 0], ["for", 0], ["j", 0], ["vj", 0], ["in", 0], ["enumerate", 0], ["path", 0], ["if", 0], ["vj", 0], ["nv", 0], ["break", 0], ["if", 0], ["i", 0], ["j", 0], ["ary", 0], ["path", 0], ["j", 0], ["i", 0], ["1", 0], ["else", 0], ["ary", 0], ["path", 0], ["i", 0], ["1", 0], ["path", 0], ["j", 0], ["print", 0], ["path", 0], ["ary", 0], ["i", 0], ["j", 0], ["func", 0], ["ary", 0], ["print", 0], ["len", 0], ["path", 0], ["for", 0], ["v", 0], ["in", 0], ["path", 0], ["print", 0], ["v", 0], ["1", 0], ["return", 0], ["def", 0], ["dfs", 0], ["v", 0], ["seen", 0], ["mi", 0], ["discard", 0], ["v", 0], ["for", 0], ["nv", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["seen", 0], ["nv", 0], ["1", 0], ["巡回閉路", 0], ["seen", 0], ["nv", 0], ["v", 0], ["path", 0], ["v", 0], ["chk", 0], ["v", 0], ["while", 0], ["seen", 0], ["v", 0], ["not", 0], ["in", 0], ["chk", 0], ["v", 0], ["seen", 0], ["v", 0], ["path", 0], ["append", 0], ["v", 0], ["chk", 0], ["add", 0], ["v", 0], ["path", 0], ["reverse", 0], ["func", 0], ["path", 0], ["else", 0], ["seen", 0], ["nv", 0], ["v", 0], ["dfs", 0], ["nv", 0], ["seen", 0], ["seen", 0], ["nv", 0], ["1", 0], ["while", 0], ["mi", 0], ["v", 0], ["mi", 0], ["pop", 0], ["seen", 0], ["1", 0], ["n", 0], ["dfs", 0], ["v", 0], ["seen", 0], ["print", 0], ["1", 0], ["return", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["v", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["v", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["c", 0], ["0", 0], ["n", 0], ["def", 0], ["dfs", 0], ["n", 0], ["if", 0], ["c", 0], ["n", 0], ["2", 0], ["return", 0], ["false", 0], ["if", 0], ["c", 0], ["n", 0], ["1", 0], ["return", 0], ["true", 0], ["c", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["v", 0], ["n", 0], ["if", 0], ["dfs", 0], ["i", 0], ["return", 0], ["true", 0], ["c", 0], ["n", 0], ["2", 0], ["return", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["dfs", 0], ["i", 0], ["return", 0], ["0", 0], ["return", 0], ["1", 0], ["print", 0], ["main", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10000000", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["1", 0], ["from", 0], ["bisect", 0], ["import", 0], ["from", 0], ["collections", 0], ["import", 0], ["from", 0], ["heapq", 0], ["import", 0], ["import", 0], ["itertools", 0], ["import", 0], ["math", 0], ["inf", 0], ["10", 0], ["9", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["es", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["es", 0], ["a", 0], ["append", 0], ["b", 0], ["ansr", 0], ["ansd", 0], ["1", 0], ["inf", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["d", 0], ["inf", 0], ["n", 0], ["1", 0], ["d", 0], ["0", 0], ["0", 0], ["dq", 0], ["deque", 0], ["for", 0], ["w", 0], ["in", 0], ["es", 0], ["r", 0], ["dq", 0], ["append", 0], ["w", 0], ["d", 0], ["w", 0], ["1", 0], ["while", 0], ["len", 0], ["dq", 0], ["0", 0], ["v", 0], ["dq", 0], ["popleft", 0], ["if", 0], ["v", 0], ["r", 0], ["break", 0], ["nd", 0], ["d", 0], ["v", 0], ["1", 0], ["for", 0], ["u", 0], ["in", 0], ["es", 0], ["v", 0], ["if", 0], ["nd", 0], ["d", 0], ["u", 0], ["d", 0], ["u", 0], ["nd", 0], ["dq", 0], ["append", 0], ["u", 0], ["if", 0], ["d", 0], ["r", 0], ["ansd", 0], ["ansd", 0], ["d", 0], ["r", 0], ["ansr", 0], ["r", 0], ["if", 0], ["ansr", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["vis", 0], ["0", 0], ["n", 0], ["1", 0], ["vis", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["n", 0], ["1", 0], ["dq", 0], ["deque", 0], ["for", 0], ["v", 0], ["in", 0], ["es", 0], ["ansr", 0], ["vis", 0], ["v", 0], ["1", 0], ["p", 0], ["v", 0], ["0", 0], ["dq", 0], ["append", 0], ["v", 0], ["while", 0], ["len", 0], ["dq", 0], ["0", 0], ["v", 0], ["dq", 0], ["popleft", 0], ["if", 0], ["v", 0], ["ansr", 0], ["break", 0], ["for", 0], ["u", 0], ["in", 0], ["es", 0], ["v", 0], ["if", 0], ["vis", 0], ["u", 0], ["0", 0], ["vis", 0], ["u", 0], ["1", 0], ["p", 0], ["u", 0], ["v", 0], ["dq", 0], ["append", 0], ["u", 0], ["lst", 0], ["v", 0], ["ansr", 0], ["while", 0], ["p", 0], ["v", 0], ["1", 0], ["lst", 0], ["append", 0], ["v", 0], ["v", 0], ["p", 0], ["v", 0], ["print", 0], ["len", 0], ["lst", 0], ["print", 0], ["lst", 0], ["sep", 0], ["n", 0], ["import", 0], ["sys", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["read", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readlines", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["shorten", 0], ["cycle", 0], ["g", 0], ["route", 0], ["ループだとすでに分かってるルートに対して、", 0], ["ショートカットが存在する場合はショートカットを行い、", 0], ["ルートを短くする", 0], ["next", 0], ["k", 0], ["v", 0], ["for", 0], ["k", 0], ["v", 0], ["in", 0], ["zip", 0], ["route", 0], ["route", 0], ["1", 0], ["route", 0], ["1", 0], ["v", 0], ["route", 0], ["0", 0], ["while", 0], ["true", 0], ["もしvからroute内の、次の点ではない点nにいける場合", 0], ["for", 0], ["n", 0], ["in", 0], ["g", 0], ["v", 0], ["v", 0], ["x", 0], ["y", 0], ["n", 0], ["としていたところを、", 0], ["v", 0], ["n", 0], ["とする", 0], ["if", 0], ["n", 0], ["in", 0], ["route", 0], ["and", 0], ["n", 0], ["next", 0], ["v", 0], ["new", 0], ["route", 0], ["n", 0], ["s", 0], ["n", 0], ["while", 0], ["s", 0], ["v", 0], ["s", 0], ["next", 0], ["s", 0], ["new", 0], ["route", 0], ["append", 0], ["s", 0], ["next", 0], ["v", 0], ["n", 0], ["無駄な部分を削除した新しい経路に対して、調査を最初からやり直す", 0], ["route", 0], ["new", 0], ["route", 0], ["v", 0], ["route", 0], ["0", 0], ["break", 0], ["点vにショートカットがない場合", 0], ["else", 0], ["次の点が最初の点の場合は、もうこれ以上ショートカットできないので終わり", 0], ["v", 0], ["next", 0], ["v", 0], ["if", 0], ["v", 0], ["route", 0], ["0", 0], ["break", 0], ["return", 0], ["route", 0], ["def", 0], ["find", 0], ["cycle", 0], ["g", 0], ["s", 0], ["dq", 0], ["deque", 0], ["n", 0], ["len", 0], ["g", 0], ["inf", 0], ["float", 0], ["inf", 0], ["dist", 0], ["inf", 0], ["n", 0], ["dist", 0], ["s", 0], ["0", 0], ["parent", 0], ["1", 0], ["n", 0], ["ans", 0], ["last", 0], ["none", 0], ["sからループを探して見つかった時の、ループの最後の頂点番号", 0], ["dq", 0], ["append", 0], ["s", 0], ["bfsでループを見つける", 0], ["while", 0], ["dq", 0], ["and", 0], ["ans", 0], ["last", 0], ["is", 0], ["none", 0], ["v", 0], ["dq", 0], ["popleft", 0], ["d", 0], ["dist", 0], ["v", 0], ["for", 0], ["n", 0], ["in", 0], ["g", 0], ["v", 0], ["頂点vからいける頂点の中に開始点があったら、ループである", 0], ["if", 0], ["dist", 0], ["n", 0], ["0", 0], ["ans", 0], ["last", 0], ["v", 0], ["parent", 0], ["n", 0], ["v", 0], ["break", 0], ["まだ探索していない頂点なら次の探索候補にする", 0], ["elif", 0], ["dist", 0], ["n", 0], ["inf", 0], ["dist", 0], ["n", 0], ["d", 0], ["1", 0], ["parent", 0], ["n", 0], ["v", 0], ["dq", 0], ["append", 0], ["n", 0], ["ループが見つかった場合", 0], ["if", 0], ["ans", 0], ["last", 0], ["ループの最後の頂点から、元の頂点をたどり、そのルートを逆にする", 0], ["g", 0], ["ans", 0], ["last", 0], ["route", 0], ["g", 0], ["while", 0], ["g", 0], ["s", 0], ["g", 0], ["parent", 0], ["g", 0], ["route", 0], ["append", 0], ["g", 0], ["return", 0], ["list", 0], ["reversed", 0], ["route", 0], ["見つからなかった場合はnoneを返す", 0], ["return", 0], ["none", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["a", 0], ["map", 0], ["int", 0], ["read", 0], ["split", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["2", 0], ["g", 0], ["a", 0], ["append", 0], ["b", 0], ["すべての頂点の入次数が", 0], ["1、出次数が", 0], ["1", 0], ["であるような", 0], ["g", 0], ["の誘導部分グラフ", 0], ["すべての頂点の入次数が", 0], ["1、出次数が", 0], ["1", 0], ["のグラフ", 0], ["ループ", 0], ["有向グラフ", 0], ["g", 0], ["v", 0], ["e", 0], ["に対し、次のような条件を満たす有向グラフ", 0], ["g′", 0], ["v′", 0], ["e′", 0], ["を", 0], ["g", 0], ["の誘導部分グラフと呼ぶ。", 0], ["v′", 0], ["は", 0], ["v", 0], ["の", 0], ["空でない", 0], ["部分集合である。", 0], ["e′", 0], ["は、e", 0], ["の辺であって両端点がともに", 0], ["v′", 0], ["に含まれるものすべてを含む集合である。", 0], ["ループでも、ショートカットできるようなループはだめ", 0], ["例", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["v", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["としてしまうと、", 0], ["e", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["4", 0], ["2", 0], ["4", 0], ["4", 0], ["5", 0], ["5", 0], ["1", 0], ["となってしまい、この誘導部分グラフg", 0], ["v", 0], ["e", 0], ["において、", 0], ["頂点2の出次数が2になってしまう。（頂点4の入次数も2になってしまう）", 0], ["v", 0], ["1", 0], ["2", 0], ["4", 0], ["5", 0], ["とすれば、", 0], ["e", 0], ["1", 0], ["2", 0], ["2", 0], ["4", 0], ["4", 0], ["5", 0], ["5", 0], ["1", 0], ["となり、すべての頂点の入次数が", 0], ["1、出次数が", 0], ["1", 0], ["となる", 0], ["つまり、ショートカットできない最短のループを1つでも見つければよい", 0], ["min", 0], ["route", 0], ["none", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["各頂点を開始点にしてループを探す", 0], ["route", 0], ["find", 0], ["cycle", 0], ["g", 0], ["s", 0], ["ループが見つかった場合、そこからショートカットできる経路を探して終了", 0], ["if", 0], ["route", 0], ["min", 0], ["route", 0], ["shorten", 0], ["cycle", 0], ["g", 0], ["route", 0], ["break", 0], ["if", 0], ["min", 0], ["route", 0], ["print", 0], ["len", 0], ["min", 0], ["route", 0], ["min", 0], ["route", 0], ["sep", 0], ["n", 0], ["else", 0], ["print", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["edges", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["edges", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["def", 0], ["get", 0], ["first", 0], ["cycle", 0], ["n", 0], ["edges", 0], ["seen", 0], ["1", 0], ["n", 0], ["seen", 0], ["1", 0], ["未確認", 0], ["0", 0], ["非cycleのnode", 0], ["1", 0], ["cycle候補", 0], ["for", 0], ["start", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["seen", 0], ["start", 0], ["0", 0], ["continue", 0], ["seen", 0], ["start", 0], ["1", 0], ["path", 0], ["start", 0], ["while", 0], ["path", 0], ["now", 0], ["path", 0], ["1", 0], ["if", 0], ["not", 0], ["edges", 0], ["now", 0], ["path", 0], ["pop", 0], ["seen", 0], ["now", 0], ["0", 0], ["continue", 0], ["next", 0], ["node", 0], ["edges", 0], ["now", 0], ["pop", 0], ["if", 0], ["seen", 0], ["next", 0], ["node", 0], ["1", 0], ["path", 0], ["append", 0], ["next", 0], ["node", 0], ["seen", 0], ["next", 0], ["node", 0], ["1", 0], ["elif", 0], ["seen", 0], ["next", 0], ["node", 0], ["1", 0], ["idx", 0], ["path", 0], ["index", 0], ["next", 0], ["node", 0], ["cycle", 0], ["path", 0], ["idx", 0], ["return", 0], ["cycle", 0], ["return", 0], ["false", 0], ["cycle", 0], ["get", 0], ["first", 0], ["cycle", 0], ["n", 0], ["edges", 0], ["if", 0], ["not", 0], ["cycle", 0], ["print", 0], ["1", 0], ["return", 0], ["nodes", 0], ["set", 0], ["cycle", 0], ["length", 0], ["len", 0], ["cycle", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["length", 0], ["now", 0], ["cycle", 0], ["i", 0], ["routes", 0], ["edges", 0], ["now", 0], ["while", 0], ["routes", 0], ["to", 0], ["routes", 0], ["pop", 0], ["if", 0], ["to", 0], ["in", 0], ["nodes", 0], ["update", 0], ["true", 0], ["idx", 0], ["cycle", 0], ["index", 0], ["to", 0], ["cycle", 0], ["cycle", 0], ["i", 0], ["1", 0], ["cycle", 0], ["idx", 0], ["nodes", 0], ["set", 0], ["cycle", 0], ["length", 0], ["len", 0], ["cycle", 0], ["break", 0], ["i", 0], ["1", 0], ["print", 0], ["len", 0], ["cycle", 0], ["for", 0], ["node", 0], ["in", 0], ["cycle", 0], ["print", 0], ["node", 0], ["1", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["readlines", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["inf", 0], ["1", 0], ["60", 0], ["mod", 0], ["1000000007", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["ab", 0], ["list", 0], ["map", 0], ["int", 0], ["read", 0], ["split", 0], ["g", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["iter", 0], ["ab", 0], ["2", 0], ["g", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["queue", 0], ["deque", 0], ["i", 0], ["dist", 0], ["1", 0], ["n", 0], ["dist", 0], ["i", 0], ["0", 0], ["prev", 0], ["1", 0], ["n", 0], ["while", 0], ["queue", 0], ["v", 0], ["queue", 0], ["popleft", 0], ["for", 0], ["nv", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["dist", 0], ["nv", 0], ["1", 0], ["dist", 0], ["nv", 0], ["dist", 0], ["v", 0], ["1", 0], ["prev", 0], ["nv", 0], ["v", 0], ["queue", 0], ["append", 0], ["nv", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["j", 0], ["or", 0], ["dist", 0], ["j", 0], ["1", 0], ["or", 0], ["i", 0], ["not", 0], ["in", 0], ["g", 0], ["j", 0], ["continue", 0], ["tmp", 0], ["k", 0], ["j", 0], ["while", 0], ["k", 0], ["1", 0], ["tmp", 0], ["append", 0], ["k", 0], ["k", 0], ["prev", 0], ["k", 0], ["if", 0], ["not", 0], ["ans", 0], ["or", 0], ["len", 0], ["ans", 0], ["len", 0], ["tmp", 0], ["ans", 0], ["tmp", 0], ["if", 0], ["ans", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["v", 0], ["in", 0], ["ans", 0], ["print", 0], ["v", 0], ["1", 0], ["else", 0], ["print", 0], ["1", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ab", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["es", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ab", 0], ["a", 0], ["b", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["es", 0], ["a", 0], ["append", 0], ["b", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["mindist", 0], ["n", 0], ["opt", 0], ["none", 0], ["for", 0], ["g", 0], ["tos", 0], ["in", 0], ["enumerate", 0], ["es", 0], ["for", 0], ["s", 0], ["in", 0], ["tos", 0], ["q", 0], ["deque", 0], ["s", 0], ["0", 0], ["prev", 0], ["1", 0], ["n", 0], ["dist", 0], ["n", 0], ["n", 0], ["dist", 0], ["s", 0], ["0", 0], ["while", 0], ["q", 0], ["v", 0], ["d", 0], ["q", 0], ["popleft", 0], ["for", 0], ["to", 0], ["in", 0], ["es", 0], ["v", 0], ["if", 0], ["to", 0], ["g", 0], ["break", 0], ["if", 0], ["d", 0], ["1", 0], ["dist", 0], ["to", 0], ["continue", 0], ["dist", 0], ["to", 0], ["d", 0], ["1", 0], ["prev", 0], ["to", 0], ["v", 0], ["q", 0], ["append", 0], ["to", 0], ["d", 0], ["1", 0], ["else", 0], ["continue", 0], ["break", 0], ["else", 0], ["continue", 0], ["if", 0], ["d", 0], ["1", 0], ["mindist", 0], ["continue", 0], ["mindist", 0], ["d", 0], ["1", 0], ["opt", 0], ["g", 0], ["v", 0], ["while", 0], ["prev", 0], ["opt", 0], ["1", 0], ["0", 0], ["opt", 0], ["append", 0], ["prev", 0], ["opt", 0], ["1", 0], ["if", 0], ["opt", 0], ["ans", 0], ["o", 0], ["1", 0], ["for", 0], ["o", 0], ["in", 0], ["opt", 0], ["print", 0], ["len", 0], ["ans", 0], ["print", 0], ["ans", 0], ["sep", 0], ["n", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["sys", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["readlines", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["from", 3], ["scipy", 1], ["sparse", 0], ["import", 0], ["csr", 0], ["matrix", 0], ["from", 0], ["scipy", 0], ["sparse", 0], ["csgraph", 0], ["import", 0], ["connected", 0], ["components", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["if", 0], ["m", 0], ["0", 0], ["print", 0], ["1", 0], ["return", 0], ["ab", 0], ["tuple", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["line", 0], ["split", 0], ["for", 0], ["line", 0], ["in", 0], ["readlines", 0], ["a", 0], ["b", 0], ["zip", 0], ["ab", 0], ["graph", 0], ["csr", 0], ["matrix", 0], ["1", 0], ["m", 0], ["a", 0], ["b", 0], ["n", 0], ["1", 0], ["n", 0], ["1", 0], ["comp", 0], ["connected", 0], ["components", 0], ["graph", 0], ["connection", 0], ["strong", 0], ["size", 0], ["np", 0], ["bincount", 0], ["comp", 0], ["if", 0], ["size", 0], ["max", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["n", 0], ["np", 0], ["where", 0], ["size", 0], ["1", 0], ["0", 0], ["0", 0], ["v", 0], ["set", 0], ["np", 0], ["where", 0], ["comp", 0], ["n", 0], ["0", 0], ["graph", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ab", 0], ["if", 0], ["a", 0], ["in", 0], ["v", 0], ["and", 0], ["b", 0], ["in", 0], ["v", 0], ["graph", 0], ["a", 0], ["append", 0], ["b", 0], ["とりあえず1つサイクルを見つける", 0], ["order", 0], ["defaultdict", 0], ["int", 0], ["x", 0], ["v", 0], ["pop", 0], ["v", 0], ["add", 0], ["x", 0], ["q", 0], ["x", 0], ["order", 0], ["x", 0], ["1", 0], ["path", 0], ["x", 0], ["flag", 0], ["false", 0], ["while", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.002243502051983584, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0022070223438212496, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.007491660742604035, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.007455204972567032, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.002243502051983584, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0022070223438212496, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.007491660742604035, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.007455204972567032, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nRamu was a lazy farmer. He had inherited a fairly large farm and a nice house from his father. Ramu leased out the farm land to others and earned a rather handsome income. His father used to keep a buffalo at home and sell its milk but the buffalo died a few days after his father did.\nRamu too wanted to make some money from buffaloes, but in a quite a different way. He decided that his future lay in speculating on buffaloes. In the market in his village, buffaloes were bought and sold everyday. The price fluctuated over the year, but on any single day the price was always the same.\nHe decided that he would buy buffaloes when the price was low and sell them when the price was high and, in the process, accummulate great wealth. Unfortunately his house had space for just one buffalo and so he could own at most one buffalo at any time.\nBefore he entered the buffalo market, he decided to examine to examine the variation in the price of buffaloes over the last few days and determine the maximum profit he could have made. Suppose, the price of a buffalo over the last $10$ days varied as\n1012811111012151310101281111101215131010\\quad  12\\quad  8\\quad  11\\quad  11\\quad  10\\quad  12\\quad  15\\quad  13\\quad  10\nRamu is a lazy fellow and he reckoned that he would have been willing to visit the market at most $5$ times (each time to either buy or sell a buffalo) over the last $10$ days. Given this, the maximum profit he could have made is $9$ rupees. To achieve this, he buys a buffalo on day $1$, sells it on day $2$, buys one more on day $3$ and sells it on day $8$. If he was a little less lazy and was willing to visit the market $6$ times, then he could have made more money. He could have bought on day $1$, sold on day $2$, bought on day $3$, sold on day $4$, bought on day $6$ and sold on day $8$ to make a profit of $10$ rupees.\nYour task is help Ramu calculate the maximum amount he can earn by speculating on buffaloes, given a history of daily buffalo prices over a period and a limit on how many times Ramu is willing to go to the market during this period.\n\n-----Input:-----\n- The first line of the input contains two integers $N$ and $K$, where $N$ is the number of days for which the price data is available and $K$ is the maximum number of times that Ramu is willing to visit the cattle market. \n- The next $N$ lines (line $2, 3,...,N+1$) contain a single positive integer each. The integer on line $i+1$, $1 \\leq i \\leq N$, indicates the price of a buffalo on day $i$.\n\n-----Output:-----\nA single nonnegative integer indicating that maximum amount of profit that Ramu can make if he were to make at most $K$ trips to the market.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 400$.\n- $1 \\leq K \\leq 400$.\n- $0 \\leq$ price of a buffalo on any day $\\leq 1000$\n\n-----Sample Input 1:-----\n10 5\n10\n12\n8\n11\n11\n10\n12\n15\n13\n10\n\n-----Sample Output 1:-----\n9\n\n-----Sample Input 2:-----\n10 6\n10\n12\n8\n11\n11\n10\n12\n15\n13\n10\n\n-----Sample Output 2:-----\n10\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["\n\ntry:\n\tn,k = map(int,input().split())\n\tx = [int(input()) for _ in range(n)]\n\tk = k//2\n\tdp = [0]*(k+1)\n\tfor i in range(k+1):\n\t\tdp[i] = [0]*n\n\t#print(dp)\n\tfor i in range(1,k+1):\n\t\t#print(\"*\",dp[i-1][0])\n\t\tdiff = (-1)*x[0]\n\t\tfor j in range(1,n):\n\t\t\tdiff = max(dp[i-1][j]-x[j],diff)\n\t\t\tdp[i][j] = max(dp[i][j-1],diff+x[j])\n\tprint(dp[k][n-1])\nexcept:\n\tpass\n", "# cook your dish here\n# cook your dish here\ntry:\n\tn,k = map(int,input().split())\n\tx = [int(input()) for _ in range(n)]\n\tk = k//2\n\tdp = [0]*(k+1)\n\tfor i in range(k+1):\n\t\tdp[i] = [0]*n\n\t#print(dp)\n\tfor i in range(1,k+1):\n\t\t#print(\"*\",dp[i-1][0])\n\t\tdiff = (-1)*x[0]\n\t\tfor j in range(1,n):\n\t\t\tdiff = max(dp[i-1][j]-x[j],diff)\n\t\t\tdp[i][j] = max(dp[i][j-1],diff+x[j])\n\tprint(dp[k][n-1])\nexcept:\n\tpass\n", "# cook your dish here\n# cook your dish here\ntry:\n\tn,k = map(int,input().split())\n\tx = [int(input()) for _ in range(n)]\n\tk = k//2\n\tdp = [0]*(k+1)\n\tfor i in range(k+1):\n\t\tdp[i] = [0]*n\n\t#print(dp)\n\tfor i in range(1,k+1):\n\t\t#print(\"*\",dp[i-1][0])\n\t\tdiff = (-1)*x[0]\n\t\tfor j in range(1,n):\n\t\t\tdiff = max(dp[i-1][j]-x[j],diff)\n\t\t\tdp[i][j] = max(dp[i][j-1],diff+x[j])\n\tprint(dp[k][n-1])\nexcept:\n\tpass\n", "# cook your dish here\nn, k = map(int, input().split())\nk=min(k,n)\nif k%2==1:\n\tk-=1 \nif k==0:\n\tprint(0)\nelse:\n\thalf_k=k>>1\n\tprices=[]\n\tfor _ in range(n):\n\t\tprices.append(int(input()))\n\tminimi=[[0 for _ in range(n)] for _ in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(i,n):\n\t\t\tif i==j:\n\t\t\t\tminimi[i][j]=prices[j]\n\t\t\telse:\n\t\t\t\tminimi[i][j]=min(minimi[i][j-1], prices[j])\n\ttabella=[[0 for _ in range(n)] for _ in range(half_k)]\n\tfor j in range(1,n):\n\t\ttabella[0][j]=max(prices[j]-minimi[0][j-1], tabella[0][j-1])\n\tfor i in range(1,half_k):\n\t\tfor j in range(1,n):\n\t\t\ttabella[i][j]=max(tabella[i][j-1], tabella[i-1][j])\n\t\t\tappo=0\n\t\t\tfor k in range(j-1):\n\t\t\t\tappo=max(appo, tabella[i-1][k]+prices[j]-minimi[k+1][j-1])\n\t\t\ttabella[i][j]=max(tabella[i][j], appo)\n\tprint(tabella[-1][-1])\n", "# cook your dish here\ntry:\n\tn,k = map(int,input().split())\n\tx = [int(input()) for _ in range(n)]\n\tk = k//2\n\tdp = [0]*(k+1)\n\tfor i in range(k+1):\n\t\tdp[i] = [0]*n\n\t#print(dp)\n\tfor i in range(1,k+1):\n\t\t#print(\"*\",dp[i-1][0])\n\t\tdiff = (-1)*x[0]\n\t\tfor j in range(1,n):\n\t\t\tdiff = max(dp[i-1][j]-x[j],diff)\n\t\t\tdp[i][j] = max(dp[i][j-1],diff+x[j])\n\tprint(dp[k][n-1])\nexcept:\n\tpass\n", "try:\n\tn,k = list(map(int,input().split()))\n\tx = [int(input()) for _ in range(n)]\n\tk = k//2\n\tdp = [0]*(k+1)\n\tfor i in range(k+1):\n\t\tdp[i] = [0]*n\n\t#print(dp)\n\tfor i in range(1,k+1):\n\t\t#print(\"*\",dp[i-1][0])\n\t\tdiff = (-1)*x[0]\n\t\tfor j in range(1,n):\n\t\t\tdiff = max(dp[i-1][j]-x[j],diff)\n\t\t\tdp[i][j] = max(dp[i][j-1],diff+x[j])\n\tprint(dp[k][n-1])\nexcept:\n\tpass\n", "try:\n\tn,k = list(map(int,input().split()))\n\tx = [int(input()) for _ in range(n)]\n\tk = k//2\n\tdp = [0]*(k+1)\n\tfor i in range(k+1):\n\t\tdp[i] = [0]*n\n\t#print(dp)\n\tfor i in range(1,k+1):\n\t\t#print(\"*\",dp[i-1][0])\n\t\tdiff = (-1)*x[0]\n\t\tfor j in range(1,n):\n\t\t\tdiff = max(dp[i-1][j]-x[j],diff)\n\t\t\tdp[i][j] = max(dp[i][j-1],diff+x[j])\n\tprint(dp[k][n-1])\nexcept:\n\tpass\n", "# N,K = input().split() #N is the number of days    #K is the number of visits\n# N = int(N)\n# K = int(K)\n\n# cook your dish here\n# stock buy/sell to maximize profit\ntry:\n\tn,k = map(int,input().split())\n\tx = [int(input()) for _ in range(n)]\n\tk = k//2\n\tdp = [0]*(k+1)\n\tfor i in range(k+1):\n\t\tdp[i] = [0]*n\n\t#print(dp)\n\tfor i in range(1,k+1):\n\t\t#print(\"*\",dp[i-1][0])\n\t\tdiff = (-1)*x[0]\n\t\tfor j in range(1,n):\n\t\t\tdiff = max(dp[i-1][j]-x[j],diff)\n\t\t\tdp[i][j] = max(dp[i][j-1],diff+x[j])\n\tprint(dp[k][n-1])\nexcept:\n\tpass\n", "# cook your dish here\ndef max_profit(prices,n,k):\n\n\tprofit = [[0 for i in range(n)] for j in range(k+1)] \n\tfor i in range(1,k+1):\n\n\t\tdiff = (-1)*prices[0]\n\t\tfor j in range(1,n):\n\t\t\tdiff = max(profit[i-1][j]-prices[j],diff)\n\t\t\tprofit[i][j] = max(profit[i][j-1],diff+prices[j])\n\t\n\treturn profit[k][n-1]\n\t\ntry:\n\tn,k = map(int,input().split())\n\tprices = [int(input()) for _ in range(n)]\n\tprint(max_profit(prices,n,k//2))\n\nexcept:\n\tpass\n", "# cook your dish here\nn,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n\tl.append(int(input()))\ndef fip(p,no,kt):\n\tpr=[[0 for i in range(n+1)] for j in range(k+1)]\n\n\t#print(\"pr bef:\\n\",pr)\n\tfor i in range(1,k+1):\n\t\tpd=float('-inf')\n\t\t\n\t\tfor j in range(1,n):\n\n\t\t\t#print(\"\\ni,j:\",i,j,\"\\ncomparing:pd\",pd,\"--and pr[i-1][j-1]  - p[j                -1]\",pr[i-1][j-1],\"-\",p[j-1])\n\t\t\tpd=max(pd,pr[i-1][j-1]-p[j-1])\n\n\n\t\t\t#print(\"pr[i][j] by comparing : pr[i][j-1],p[j]+pd ka max:\",pr[i][j                -1],p[j],\"+\",pd)\n\t\t\tpr[i][j]=max(pr[i][j-1],p[j]+pd)\n\n\t\t\t#print(\"pr:\",pr)\n\n\n\n\t#print(\"pr aft:\\n\",pr)\n\treturn pr[k][n-1]\nprint(fip(l,n,k))\n", "# cook your dish here\n# stock buy/sell to maximize profit\ntry:\n\tn,k = map(int,input().split())\n\tx = [int(input()) for _ in range(n)]\n\tk = k//2\n\tdp = [0]*(k+1)\n\tfor i in range(k+1):\n\t\tdp[i] = [0]*n\n\t#print(dp)\n\tfor i in range(1,k+1):\n\t\t#print(\"*\",dp[i-1][0])\n\t\tdiff = (-1)*x[0]\n\t\tfor j in range(1,n):\n\t\t\tdiff = max(dp[i-1][j]-x[j],diff)\n\t\t\tdp[i][j] = max(dp[i][j-1],diff+x[j])\n\tprint(dp[k][n-1])\nexcept:\n\tpass\n", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n\tl.append(int(input()))\ndef fip(p,no,kt):\n\tpr=[[0 for i in range(n+1)] for j in range(k+1)]\n\n\t#print(\"pr bef:\\n\",pr)\n\tfor i in range(1,k+1):\n\t\tpd=float('-inf')\n\t\t\n\t\tfor j in range(1,n):\n\n\t\t\t#print(\"\\ni,j:\",i,j,\"\\ncomparing:pd\",pd,\"--and pr[i-1][j-1]  - p[j                -1]\",pr[i-1][j-1],\"-\",p[j-1])\n\t\t\tpd=max(pd,pr[i-1][j-1]-p[j-1])\n\n\n\t\t\t#print(\"pr[i][j] by comparing : pr[i][j-1],p[j]+pd ka max:\",pr[i][j                -1],p[j],\"+\",pd)\n\t\t\tpr[i][j]=max(pr[i][j-1],p[j]+pd)\n\n\t\t\t#print(\"pr:\",pr)\n\n\n\n\t#print(\"pr aft:\\n\",pr)\n\treturn pr[k][n-1]\nprint(fip(l,n,k))\n", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n\tl.append(int(input()))\ndef fip(p,no,kt):\n\tpr=[[0 for i in range(n+1)] for j in range(k+1)]\n\n\t#print(\"pr bef:\\n\",pr)\n\tfor i in range(1,k+1):\n\t\tpd=float('-inf')\n\t\t\n\t\tfor j in range(1,n):\n\n\t\t\t#print(\"\\ni,j:\",i,j,\"\\ncomparing:pd\",pd,\"--and pr[i-1][j-1]  - p[j                -1]\",pr[i-1][j-1],\"-\",p[j-1])\n\t\t\tpd=max(pd,pr[i-1][j-1]-p[j-1])\n\n\n\t\t\t#print(\"pr[i][j] by comparing : pr[i][j-1],p[j]+pd ka max:\",pr[i][j                -1],p[j],\"+\",pd)\n\t\t\tpr[i][j]=max(pr[i][j-1],p[j]+pd)\n\n\t\t\t#print(\"pr:\",pr)\n\n\n\n\t#print(\"pr aft:\\n\",pr)\n\treturn pr[k][n-1]\nprint(fip(l,n,k))\n", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n\tl.append(int(input()))\ndef fip(p,no,kt):\n\tpr=[[0 for i in range(n+1)] for j in range(k+1)]\n\n\t#print(\"pr bef:\\n\",pr)\n\tfor i in range(1,k+1):\n\t\tpd=float('-inf')\n\t\t\n\t\tfor j in range(1,n):\n\n\t\t\t#print(\"\\ni,j:\",i,j,\"\\ncomparing:pd\",pd,\"--and pr[i-1][j-1]  - p[j                -1]\",pr[i-1][j-1],\"-\",p[j-1])\n\t\t\tpd=max(pd,pr[i-1][j-1]-p[j-1])\n\n\n\t\t\t#print(\"pr[i][j] by comparing : pr[i][j-1],p[j]+pd ka max:\",pr[i][j                -1],p[j],\"+\",pd)\n\t\t\tpr[i][j]=max(pr[i][j-1],p[j]+pd)\n\n\t\t\t#print(\"pr:\",pr)\n\n\n\n\t#print(\"pr aft:\\n\",pr)\n\treturn pr[k][n-1]\nprint(fip(l,n,k))\n", "# cook your dish here\n# stock buy/sell to maximize profit\ntry:\n\tn,k = map(int,input().split())\n\tx = [int(input()) for _ in range(n)]\n\tk = k//2\n\tdp = [0]*(k+1)\n\tfor i in range(k+1):\n\t\tdp[i] = [0]*n\n\t#print(dp)\n\tfor i in range(1,k+1):\n\t\t#print(\"*\",dp[i-1][0])\n\t\tdiff = (-1)*x[0]\n\t\tfor j in range(1,n):\n\t\t\tdiff = max(dp[i-1][j]-x[j],diff)\n\t\t\tdp[i][j] = max(dp[i][j-1],diff+x[j])\n\tprint(dp[k][n-1])\nexcept:\n\tpass\n", "# cook your dish here\n# stock buy/sell to maximize profit\ntry:\n\tn,k = map(int,input().split())\n\tx = [int(input()) for _ in range(n)]\n\tk = k//2\n\tdp = [0]*(k+1)\n\tfor i in range(k+1):\n\t\tdp[i] = [0]*n\n\t#print(dp)\n\tfor i in range(1,k+1):\n\t\t#print(\"*\",dp[i-1][0])\n\t\tdiff = (-1)*x[0]\n\t\tfor j in range(1,n):\n\t\t\tdiff = max(dp[i-1][j]-x[j],diff)\n\t\t\tdp[i][j] = max(dp[i][j-1],diff+x[j])\n\tprint(dp[k][n-1])\nexcept:\n\tpass\n", "n,k=list(map(int,input().split()))\nk=k//2\nl=[]\nd={}\nfor i in range(n):\n\tl.append(int(input()))\nfor i in range(k+1):\n\td[i]=[0]*n\nfor i in range(1,k+1):\n\tmaxdiff=d[i-1][0]-l[0]\n\tfor j in range(1,n):\n\t\tmaxdiff=max(d[i-1][j]-l[j],maxdiff)\n\t\td[i][j]=max(d[i][j-1],maxdiff+l[j])\n#print(d)\nprint(d[k][-1])\n\n", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n\tl.append(int(input()))\ndef fip(p,no,kt):\n\tpr=[[0 for i in range(n+1)] for j in range(k+1)]\n\tfor i in range(1,k+1):\n\t\tpd=float('-inf')\n\t\t\n\t\tfor j in range(1,n):\n\t\t\tpd=max(pd,pr[i-1][j-1]-p[j-1])\n\t\t\tpr[i][j]=max(pr[i][j-1],p[j]+pd)\n\treturn pr[k][n-1]\nprint(fip(l,n,k))\n", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n\tl.append(int(input()))\ndef fip(p,no,kt):\n\tpr=[[0 for i in range(n+1)] for j in range(k+1)]\n\tfor i in range(1,k+1):\n\t\tpd=float('-inf')\n\t\t\n\t\tfor j in range(1,n):\n\t\t\tpd=max(pd,pr[i-1][j-1]-p[j-1])\n\t\t\tpr[i][j]=max(pr[i][j-1],p[j]+pd)\n\treturn pr[k][n-1]\nprint(fip(l,n,k))\n", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n\tl.append(int(input()))\ndef fip(p,no,kt):\n\tpr=[[0 for i in range(n+1)] for j in range(k+1)]\n\tfor i in range(1,k+1):\n\t\tpd=float('-inf')\n\t\t\n\t\tfor j in range(1,n):\n\t\t\tpd=max(pd,pr[i-1][j-1]-p[j-1])\n\t\t\tpr[i][j]=max(pr[i][j-1],p[j]+pd)\n\treturn pr[k][n-1]\nprint(fip(l,n,k))\n", "# cook your dish here\nn,k=list(map(int,input().split()))\nli=[]\nk=k//2\nfor i in range(n):\n\tli.append(int(input()))\ndef fip(p,no,kt):\n\tpr=[[0 for i in range(n+1)] for j in range(k+1)]\n\tfor i in range(1,k+1):\n\t\tpd=float('-inf')\n\t\t\n\t\tfor j in range(1,n):\n\t\t\tpd=max(pd,pr[i-1][j-1]-p[j-1])\n\t\t\tpr[i][j]=max(pr[i][j-1],p[j]+pd)\n\treturn pr[k][n-1]\nprint(fip(li,n,k))\n", "# cook your dish here\nn,k=list(map(int,input().split()))\nli=[]\nk=k//2\nfor i in range(n):\n\tli.append(int(input()))\ndef fip(p,no,kt):\n\tpr=[[0 for i in range(n+1)] for j in range(k+1)]\n\tfor i in range(1,k+1):\n\t\tpd=float('-inf')\n\t\t\n\t\tfor j in range(1,n):\n\t\t\tpd=max(pd,pr[i-1][j-1]-p[j-1])\n\t\t\tpr[i][j]=max(pr[i][j-1],p[j]+pd)\n\treturn pr[k][n-1]\nprint(fip(li,n,k))\n", "n,k=list(map(int,input().split()))\nli=[]\nk=k//2\nfor i in range(n):\n\tli.append(int(input()))\ndef fip(p,no,kt):\n\tpr=[[0 for i in range(n+1)] for j in range(k+1)]\n\tfor i in range(1,k+1):\n\t\tpd=float('-inf')\n\t\t\n\t\tfor j in range(1,n):\n\t\t\tpd=max(pd,pr[i-1][j-1]-p[j-1])\n\t\t\tpr[i][j]=max(pr[i][j-1],p[j]+pd)\n\treturn pr[k][n-1]\nprint(fip(li,n,k))\n"], "id": "id8771"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8771", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["ramu", 1], ["was", 1], ["a", 1], ["lazy", 1], ["farmer", 1], ["he", 1], ["had", 1], ["inherited", 1], ["a", 1], ["fairly", 1], ["large", 1], ["farm", 1], ["and", 1], ["a", 1], ["nice", 1], ["house", 1], ["from", 1], ["his", 1], ["father", 1], ["ramu", 1], ["leased", 1], ["out", 1], ["the", 1], ["farm", 1], ["land", 1], ["to", 1], ["others", 1], ["and", 1], ["earned", 1], ["a", 1], ["rather", 1], ["handsome", 1], ["income", 1], ["his", 1], ["father", 1], ["used", 1], ["to", 1], ["keep", 1], ["a", 1], ["buffalo", 1], ["at", 1], ["home", 1], ["and", 1], ["sell", 1], ["its", 1], ["milk", 1], ["but", 1], ["the", 1], ["buffalo", 1], ["died", 1], ["a", 1], ["few", 1], ["days", 1], ["after", 1], ["his", 1], ["father", 1], ["did", 1], ["ramu", 1], ["too", 1], ["wanted", 1], ["to", 1], ["make", 1], ["some", 1], ["money", 1], ["from", 1], ["buffaloes", 1], ["but", 1], ["in", 1], ["a", 1], ["quite", 1], ["a", 1], ["different", 1], ["way", 1], ["he", 1], ["decided", 1], ["that", 1], ["his", 1], ["future", 1], ["lay", 1], ["in", 1], ["speculating", 1], ["on", 1], ["buffaloes", 1], ["in", 1], ["the", 1], ["market", 1], ["in", 1], ["his", 1], ["village", 1], ["buffaloes", 1], ["were", 1], ["bought", 1], ["and", 1], ["sold", 1], ["everyday", 1], ["the", 1], ["price", 1], ["fluctuated", 1], ["over", 1], ["the", 1], ["year", 1], ["but", 1], ["on", 1], ["any", 1], ["single", 1], ["day", 1], ["the", 1], ["price", 1], ["was", 1], ["always", 1], ["the", 1], ["same", 1], ["he", 1], ["decided", 1], ["that", 1], ["he", 1], ["would", 1], ["buy", 1], ["buffaloes", 1], ["when", 1], ["the", 1], ["price", 1], ["was", 1], ["low", 1], ["and", 1], ["sell", 1], ["them", 1], ["when", 1], ["the", 1], ["price", 1], ["was", 1], ["high", 1], ["and", 1], ["in", 1], ["the", 1], ["process", 1], ["accummulate", 1], ["great", 1], ["wealth", 1], ["unfortunately", 1], ["his", 1], ["house", 1], ["had", 1], ["space", 1], ["for", 1], ["just", 1], ["one", 1], ["buffalo", 1], ["and", 0], ["so", 0], ["he", 0], ["could", 0], ["own", 0], ["at", 0], ["most", 0], ["one", 0], ["buffalo", 0], ["at", 0], ["any", 0], ["time", 0], ["before", 0], ["he", 0], ["entered", 0], ["the", 0], ["buffalo", 0], ["market", 0], ["he", 0], ["decided", 0], ["to", 0], ["examine", 0], ["to", 0], ["examine", 0], ["the", 0], ["variation", 0], ["in", 0], ["the", 0], ["price", 0], ["of", 0], ["buffaloes", 0], ["over", 0], ["the", 0], ["last", 0], ["few", 0], ["days", 0], ["and", 0], ["determine", 0], ["the", 0], ["maximum", 0], ["profit", 0], ["he", 0], ["could", 0], ["have", 0], ["made", 0], ["suppose", 0], ["the", 0], ["price", 0], ["of", 0], ["a", 0], ["buffalo", 0], ["over", 0], ["the", 0], ["last", 0], ["10", 0], ["days", 0], ["varied", 0], ["as", 0], ["1012811111012151310101281111101215131010", 0], ["quad", 0], ["12", 0], ["quad", 0], ["8", 0], ["quad", 0], ["11", 0], ["quad", 0], ["11", 0], ["quad", 0], ["10", 0], ["quad", 0], ["12", 0], ["quad", 0], ["15", 0], ["quad", 0], ["13", 0], ["quad", 0], ["10", 0], ["ramu", 1], ["is", 1], ["a", 1], ["lazy", 1], ["fellow", 1], ["and", 1], ["he", 1], ["reckoned", 1], ["that", 1], ["he", 1], ["would", 1], ["have", 1], ["been", 1], ["willing", 1], ["to", 1], ["visit", 1], ["the", 1], ["market", 1], ["at", 1], ["most", 1], ["5", 1], ["times", 1], ["each", 1], ["time", 1], ["to", 1], ["either", 1], ["buy", 1], ["or", 1], ["sell", 1], ["a", 1], ["buffalo", 1], ["over", 1], ["the", 1], ["last", 1], ["10", 1], ["days", 1], ["given", 1], ["this", 1], ["the", 1], ["maximum", 1], ["profit", 1], ["he", 1], ["could", 1], ["have", 1], ["made", 1], ["is", 1], ["9", 1], ["rupees", 1], ["to", 1], ["achieve", 1], ["this", 1], ["he", 1], ["buys", 1], ["a", 1], ["buffalo", 1], ["on", 1], ["day", 1], ["1", 1], ["sells", 1], ["it", 1], ["on", 1], ["day", 1], ["2", 1], ["buys", 1], ["one", 1], ["more", 1], ["on", 1], ["day", 1], ["3", 1], ["and", 1], ["sells", 1], ["it", 1], ["on", 1], ["day", 1], ["8", 1], ["if", 1], ["he", 1], ["was", 1], ["a", 1], ["little", 1], ["less", 1], ["lazy", 1], ["and", 1], ["was", 1], ["willing", 1], ["to", 1], ["visit", 1], ["the", 1], ["market", 1], ["6", 1], ["times", 1], ["then", 1], ["he", 1], ["could", 1], ["have", 1], ["made", 1], ["more", 1], ["money", 1], ["he", 1], ["could", 1], ["have", 1], ["bought", 1], ["on", 1], ["day", 1], ["1", 1], ["sold", 1], ["on", 1], ["day", 1], ["2", 1], ["bought", 1], ["on", 1], ["day", 1], ["3", 1], ["sold", 1], ["on", 1], ["day", 1], ["4", 1], ["bought", 1], ["on", 1], ["day", 1], ["6", 1], ["and", 1], ["sold", 1], ["on", 1], ["day", 1], ["8", 1], ["to", 1], ["make", 1], ["a", 1], ["profit", 1], ["of", 1], ["10", 1], ["rupees", 1], ["your", 1], ["task", 1], ["is", 1], ["help", 1], ["ramu", 1], ["calculate", 1], ["the", 1], ["maximum", 1], ["amount", 1], ["he", 1], ["can", 1], ["earn", 1], ["by", 1], ["speculating", 1], ["on", 1], ["buffaloes", 1], ["given", 1], ["a", 1], ["history", 1], ["of", 1], ["daily", 1], ["buffalo", 1], ["prices", 1], ["over", 1], ["a", 1], ["period", 1], ["and", 1], ["a", 1], ["limit", 1], ["on", 1], ["how", 1], ["many", 1], ["times", 0], ["ramu", 0], ["is", 0], ["willing", 0], ["to", 0], ["go", 0], ["to", 0], ["the", 0], ["market", 0], ["during", 0], ["this", 0], ["period", 0], ["input", 0], ["the", 5], ["first", 5], ["line", 5], ["of", 5], ["the", 5], ["input", 5], ["contains", 1], ["two", 1], ["integers", 1], ["n", 1], ["and", 1], ["k", 1], ["where", 1], ["n", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["days", 1], ["for", 1], ["which", 1], ["the", 1], ["price", 1], ["data", 1], ["is", 1], ["available", 1], ["and", 1], ["k", 1], ["is", 1], ["the", 1], ["maximum", 1], ["number", 1], ["of", 1], ["times", 1], ["that", 1], ["ramu", 1], ["is", 1], ["willing", 1], ["to", 1], ["visit", 1], ["the", 1], ["cattle", 1], ["market", 1], ["the", 1], ["next", 1], ["n", 1], ["lines", 1], ["line", 1], ["2", 1], ["3", 1], ["n", 1], ["1", 1], ["contain", 1], ["a", 0], ["single", 0], ["positive", 0], ["integer", 0], ["each", 0], ["the", 0], ["integer", 0], ["on", 0], ["line", 0], ["i", 0], ["1", 0], ["1", 0], ["leq", 0], ["i", 0], ["leq", 0], ["n", 0], ["indicates", 0], ["the", 0], ["price", 0], ["of", 0], ["a", 0], ["buffalo", 0], ["on", 0], ["day", 0], ["i", 0], ["output", 0], ["a", 1], ["single", 1], ["nonnegative", 1], ["integer", 1], ["indicating", 1], ["that", 1], ["maximum", 1], ["amount", 1], ["of", 1], ["profit", 1], ["that", 1], ["ramu", 1], ["can", 1], ["make", 1], ["if", 0], ["he", 0], ["were", 0], ["to", 0], ["make", 0], ["at", 0], ["most", 0], ["k", 0], ["trips", 0], ["to", 0], ["the", 0], ["market", 0], ["constraints", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["400", 0], ["1", 0], ["leq", 0], ["k", 0], ["leq", 0], ["400", 0], ["0", 0], ["leq", 0], ["price", 0], ["of", 0], ["a", 0], ["buffalo", 0], ["on", 0], ["any", 0], ["day", 0], ["leq", 0], ["1000", 0], ["sample", 0], ["input", 0], ["1", 0], ["10", 0], ["5", 0], ["10", 0], ["12", 0], ["8", 0], ["11", 0], ["11", 0], ["10", 0], ["12", 0], ["15", 0], ["13", 0], ["10", 0], ["sample", 0], ["output", 0], ["1", 0], ["9", 0], ["sample", 0], ["input", 0], ["2", 0], ["10", 0], ["6", 0], ["10", 0], ["12", 0], ["8", 0], ["11", 0], ["11", 0], ["10", 0], ["12", 0], ["15", 0], ["13", 0], ["10", 0], ["sample", 0], ["output", 0], ["2", 0], ["10", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6701940035273368, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6617283950617283, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7392055267702936, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7309153713298789, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6701940035273368, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6617283950617283, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7392055267702936, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7309153713298789, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["try", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["2", 0], ["dp", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["n", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["diff", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["diff", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["x", 0], ["j", 0], ["diff", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["diff", 0], ["x", 0], ["j", 0], ["print", 0], ["dp", 0], ["k", 0], ["n", 0], ["1", 0], ["except", 0], ["pass", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["try", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["2", 0], ["dp", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["n", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["diff", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["diff", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["x", 0], ["j", 0], ["diff", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["diff", 0], ["x", 0], ["j", 0], ["print", 0], ["dp", 0], ["k", 0], ["n", 0], ["1", 0], ["except", 0], ["pass", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["try", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["2", 0], ["dp", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["n", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["diff", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["diff", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["x", 0], ["j", 0], ["diff", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["diff", 0], ["x", 0], ["j", 0], ["print", 0], ["dp", 0], ["k", 0], ["n", 0], ["1", 0], ["except", 0], ["pass", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["min", 0], ["k", 0], ["n", 0], ["if", 0], ["k", 0], ["2", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["half", 0], ["k", 0], ["k", 0], ["1", 0], ["prices", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["prices", 0], ["append", 0], ["int", 0], ["input", 0], ["minimi", 0], ["0", 3], ["for", 5], ["in", 3], ["range", 3], ["n", 3], ["for", 5], ["in", 9], ["range", 6], ["n", 1], ["for", 8], ["i", 8], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["if", 0], ["i", 0], ["j", 0], ["minimi", 0], ["i", 0], ["j", 0], ["prices", 0], ["j", 0], ["else", 0], ["minimi", 0], ["i", 0], ["j", 0], ["min", 0], ["minimi", 0], ["i", 0], ["j", 0], ["1", 0], ["prices", 0], ["j", 0], ["tabella", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["half", 0], ["k", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["tabella", 0], ["0", 0], ["j", 0], ["max", 0], ["prices", 0], ["j", 0], ["minimi", 0], ["0", 0], ["j", 0], ["1", 0], ["tabella", 0], ["0", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["half", 0], ["k", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["tabella", 0], ["i", 0], ["j", 0], ["max", 0], ["tabella", 0], ["i", 0], ["j", 0], ["1", 0], ["tabella", 0], ["i", 0], ["1", 0], ["j", 0], ["appo", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["appo", 0], ["max", 0], ["appo", 0], ["tabella", 0], ["i", 0], ["1", 0], ["k", 0], ["prices", 0], ["j", 0], ["minimi", 0], ["k", 0], ["1", 0], ["j", 0], ["1", 0], ["tabella", 0], ["i", 0], ["j", 0], ["max", 0], ["tabella", 0], ["i", 0], ["j", 0], ["appo", 0], ["print", 0], ["tabella", 0], ["1", 0], ["1", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["try", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["2", 0], ["dp", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["n", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["diff", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["diff", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["x", 0], ["j", 0], ["diff", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["diff", 0], ["x", 0], ["j", 0], ["print", 0], ["dp", 0], ["k", 0], ["n", 0], ["1", 0], ["except", 0], ["pass", 0], ["try", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["2", 0], ["dp", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["n", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["diff", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["diff", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["x", 0], ["j", 0], ["diff", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["diff", 0], ["x", 0], ["j", 0], ["print", 0], ["dp", 0], ["k", 0], ["n", 0], ["1", 0], ["except", 0], ["pass", 0], ["try", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["2", 0], ["dp", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["n", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["diff", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["diff", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["x", 0], ["j", 0], ["diff", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["diff", 0], ["x", 0], ["j", 0], ["print", 0], ["dp", 0], ["k", 0], ["n", 0], ["1", 0], ["except", 0], ["pass", 0], ["n", 0], ["k", 0], ["input", 0], ["split", 0], ["n", 0], ["is", 0], ["the", 0], ["number", 0], ["of", 0], ["days", 0], ["k", 0], ["is", 0], ["the", 0], ["number", 0], ["of", 0], ["visits", 0], ["n", 0], ["int", 0], ["n", 0], ["k", 0], ["int", 0], ["k", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["stock", 0], ["buy", 0], ["sell", 0], ["to", 0], ["maximize", 0], ["profit", 0], ["try", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["2", 0], ["dp", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["n", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["diff", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["diff", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["x", 0], ["j", 0], ["diff", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["diff", 0], ["x", 0], ["j", 0], ["print", 0], ["dp", 0], ["k", 0], ["n", 0], ["1", 0], ["except", 0], ["pass", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["def", 0], ["max", 0], ["profit", 0], ["prices", 0], ["n", 0], ["k", 0], ["profit", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["diff", 0], ["1", 0], ["prices", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["diff", 0], ["max", 0], ["profit", 0], ["i", 0], ["1", 0], ["j", 0], ["prices", 0], ["j", 0], ["diff", 0], ["profit", 0], ["i", 0], ["j", 0], ["max", 0], ["profit", 0], ["i", 0], ["j", 0], ["1", 0], ["diff", 0], ["prices", 0], ["j", 0], ["return", 0], ["profit", 0], ["k", 0], ["n", 0], ["1", 0], ["try", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["prices", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["max", 0], ["profit", 0], ["prices", 0], ["n", 0], ["k", 0], ["2", 0], ["except", 0], ["pass", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["k", 0], ["2", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["def", 0], ["fip", 0], ["p", 0], ["no", 0], ["kt", 0], ["pr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["print", 0], ["pr", 0], ["bef", 0], ["n", 0], ["pr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["pd", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["print", 0], ["ni", 0], ["j", 0], ["i", 0], ["j", 0], ["ncomparing", 0], ["pd", 0], ["pd", 0], ["and", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pd", 0], ["max", 0], ["pd", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["print", 0], ["pr", 0], ["i", 0], ["j", 0], ["by", 0], ["comparing", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["ka", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["pr", 0], ["i", 0], ["j", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["print", 0], ["pr", 0], ["pr", 0], ["print", 0], ["pr", 0], ["aft", 0], ["n", 0], ["pr", 0], ["return", 0], ["pr", 0], ["k", 0], ["n", 0], ["1", 0], ["print", 0], ["fip", 0], ["l", 0], ["n", 0], ["k", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["stock", 0], ["buy", 0], ["sell", 0], ["to", 0], ["maximize", 0], ["profit", 0], ["try", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["2", 0], ["dp", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["n", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["diff", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["diff", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["x", 0], ["j", 0], ["diff", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["diff", 0], ["x", 0], ["j", 0], ["print", 0], ["dp", 0], ["k", 0], ["n", 0], ["1", 0], ["except", 0], ["pass", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["k", 0], ["2", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["def", 0], ["fip", 0], ["p", 0], ["no", 0], ["kt", 0], ["pr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["print", 0], ["pr", 0], ["bef", 0], ["n", 0], ["pr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["pd", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["print", 0], ["ni", 0], ["j", 0], ["i", 0], ["j", 0], ["ncomparing", 0], ["pd", 0], ["pd", 0], ["and", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pd", 0], ["max", 0], ["pd", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["print", 0], ["pr", 0], ["i", 0], ["j", 0], ["by", 0], ["comparing", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["ka", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["pr", 0], ["i", 0], ["j", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["print", 0], ["pr", 0], ["pr", 0], ["print", 0], ["pr", 0], ["aft", 0], ["n", 0], ["pr", 0], ["return", 0], ["pr", 0], ["k", 0], ["n", 0], ["1", 0], ["print", 0], ["fip", 0], ["l", 0], ["n", 0], ["k", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["k", 0], ["2", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["def", 0], ["fip", 0], ["p", 0], ["no", 0], ["kt", 0], ["pr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["print", 0], ["pr", 0], ["bef", 0], ["n", 0], ["pr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["pd", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["print", 0], ["ni", 0], ["j", 0], ["i", 0], ["j", 0], ["ncomparing", 0], ["pd", 0], ["pd", 0], ["and", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pd", 0], ["max", 0], ["pd", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["print", 0], ["pr", 0], ["i", 0], ["j", 0], ["by", 0], ["comparing", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["ka", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["pr", 0], ["i", 0], ["j", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["print", 0], ["pr", 0], ["pr", 0], ["print", 0], ["pr", 0], ["aft", 0], ["n", 0], ["pr", 0], ["return", 0], ["pr", 0], ["k", 0], ["n", 0], ["1", 0], ["print", 0], ["fip", 0], ["l", 0], ["n", 0], ["k", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["k", 0], ["2", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["def", 0], ["fip", 0], ["p", 0], ["no", 0], ["kt", 0], ["pr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["print", 0], ["pr", 0], ["bef", 0], ["n", 0], ["pr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["pd", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["print", 0], ["ni", 0], ["j", 0], ["i", 0], ["j", 0], ["ncomparing", 0], ["pd", 0], ["pd", 0], ["and", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pd", 0], ["max", 0], ["pd", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["print", 0], ["pr", 0], ["i", 0], ["j", 0], ["by", 0], ["comparing", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["ka", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["pr", 0], ["i", 0], ["j", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["print", 0], ["pr", 0], ["pr", 0], ["print", 0], ["pr", 0], ["aft", 0], ["n", 0], ["pr", 0], ["return", 0], ["pr", 0], ["k", 0], ["n", 0], ["1", 0], ["print", 0], ["fip", 0], ["l", 0], ["n", 0], ["k", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["stock", 0], ["buy", 0], ["sell", 0], ["to", 0], ["maximize", 0], ["profit", 0], ["try", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["2", 0], ["dp", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["n", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["diff", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["diff", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["x", 0], ["j", 0], ["diff", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["diff", 0], ["x", 0], ["j", 0], ["print", 0], ["dp", 0], ["k", 0], ["n", 0], ["1", 0], ["except", 0], ["pass", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["stock", 0], ["buy", 0], ["sell", 0], ["to", 0], ["maximize", 0], ["profit", 0], ["try", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["2", 0], ["dp", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["n", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["diff", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["diff", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["x", 0], ["j", 0], ["diff", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["diff", 0], ["x", 0], ["j", 0], ["print", 0], ["dp", 0], ["k", 0], ["n", 0], ["1", 0], ["except", 0], ["pass", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["k", 0], ["2", 0], ["l", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["d", 0], ["i", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["maxdiff", 0], ["d", 0], ["i", 0], ["1", 0], ["0", 0], ["l", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["maxdiff", 0], ["max", 0], ["d", 0], ["i", 0], ["1", 0], ["j", 0], ["l", 0], ["j", 0], ["maxdiff", 0], ["d", 0], ["i", 0], ["j", 0], ["max", 0], ["d", 0], ["i", 0], ["j", 0], ["1", 0], ["maxdiff", 0], ["l", 0], ["j", 0], ["print", 0], ["d", 0], ["print", 0], ["d", 0], ["k", 0], ["1", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["k", 0], ["2", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["def", 0], ["fip", 0], ["p", 0], ["no", 0], ["kt", 0], ["pr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["pd", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["pd", 0], ["max", 0], ["pd", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pr", 0], ["i", 0], ["j", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["return", 0], ["pr", 0], ["k", 0], ["n", 0], ["1", 0], ["print", 0], ["fip", 0], ["l", 0], ["n", 0], ["k", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["k", 0], ["2", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["def", 0], ["fip", 0], ["p", 0], ["no", 0], ["kt", 0], ["pr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["pd", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["pd", 0], ["max", 0], ["pd", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pr", 0], ["i", 0], ["j", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["return", 0], ["pr", 0], ["k", 0], ["n", 0], ["1", 0], ["print", 0], ["fip", 0], ["l", 0], ["n", 0], ["k", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["k", 0], ["2", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["def", 0], ["fip", 0], ["p", 0], ["no", 0], ["kt", 0], ["pr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["pd", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["pd", 0], ["max", 0], ["pd", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pr", 0], ["i", 0], ["j", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["return", 0], ["pr", 0], ["k", 0], ["n", 0], ["1", 0], ["print", 0], ["fip", 0], ["l", 0], ["n", 0], ["k", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["li", 0], ["k", 0], ["k", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["li", 0], ["append", 0], ["int", 0], ["input", 0], ["def", 0], ["fip", 0], ["p", 0], ["no", 0], ["kt", 0], ["pr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["pd", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["pd", 0], ["max", 0], ["pd", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pr", 0], ["i", 0], ["j", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["return", 0], ["pr", 0], ["k", 0], ["n", 0], ["1", 0], ["print", 0], ["fip", 0], ["li", 0], ["n", 0], ["k", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["li", 0], ["k", 0], ["k", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["li", 0], ["append", 0], ["int", 0], ["input", 0], ["def", 0], ["fip", 0], ["p", 0], ["no", 0], ["kt", 0], ["pr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["pd", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["pd", 0], ["max", 0], ["pd", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pr", 0], ["i", 0], ["j", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["return", 0], ["pr", 0], ["k", 0], ["n", 0], ["1", 0], ["print", 0], ["fip", 0], ["li", 0], ["n", 0], ["k", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["li", 0], ["k", 0], ["k", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["li", 0], ["append", 0], ["int", 0], ["input", 0], ["def", 0], ["fip", 0], ["p", 0], ["no", 0], ["kt", 0], ["pr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["pd", 0], ["float", 0], ["inf", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["pd", 0], ["max", 0], ["pd", 0], ["pr", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["1", 0], ["pr", 0], ["i", 0], ["j", 0], ["max", 0], ["pr", 0], ["i", 0], ["j", 0], ["1", 0], ["p", 0], ["j", 0], ["pd", 0], ["return", 0], ["pr", 0], ["k", 0], ["n", 0], ["1", 0], ["print", 0], ["fip", 0], ["li", 0], ["n", 0], ["k", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.004708904109589041, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0013960235920852358, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.009795570698466781, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.007524134014764337, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.004708904109589041, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0013960235920852358, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.009795570698466781, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.007524134014764337, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nIt was recycling day in Kekoland. To celebrate it Adil and Bera went to Central Perk where they can take bottles from the ground and put them into a recycling bin.\n\nWe can think Central Perk as coordinate plane. There are n bottles on the ground, the i-th bottle is located at position (x_{i}, y_{i}). Both Adil and Bera can carry only one bottle at once each. \n\nFor both Adil and Bera the process looks as follows:   Choose to stop or to continue to collect bottles.  If the choice was to continue then choose some bottle and walk towards it.  Pick this bottle and walk to the recycling bin.  Go to step 1. \n\nAdil and Bera may move independently. They are allowed to pick bottles simultaneously, all bottles may be picked by any of the two, it's allowed that one of them stays still while the other one continues to pick bottles.\n\nThey want to organize the process such that the total distance they walk (the sum of distance walked by Adil and distance walked by Bera) is minimum possible. Of course, at the end all bottles should lie in the recycling bin.\n\n\n-----Input-----\n\nFirst line of the input contains six integers a_{x}, a_{y}, b_{x}, b_{y}, t_{x} and t_{y} (0 ≤ a_{x}, a_{y}, b_{x}, b_{y}, t_{x}, t_{y} ≤ 10^9) — initial positions of Adil, Bera and recycling bin respectively.\n\nThe second line contains a single integer n (1 ≤ n ≤ 100 000) — the number of bottles on the ground.\n\nThen follow n lines, each of them contains two integers x_{i} and y_{i} (0 ≤ x_{i}, y_{i} ≤ 10^9) — position of the i-th bottle.\n\nIt's guaranteed that positions of Adil, Bera, recycling bin and all bottles are distinct.\n\n\n-----Output-----\n\nPrint one real number — the minimum possible total distance Adil and Bera need to walk in order to put all bottles into recycling bin. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}.\n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n\nOutput\n11.084259940083\n\nInput\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\nOutput\n33.121375178000\n\n\n\n-----Note-----\n\nConsider the first sample.\n\nAdil will use the following path: $(3,1) \\rightarrow(2,1) \\rightarrow(0,0) \\rightarrow(1,1) \\rightarrow(0,0)$.\n\nBera will use the following path: $(1,2) \\rightarrow(2,3) \\rightarrow(0,0)$.\n\nAdil's path will be $1 + \\sqrt{5} + \\sqrt{2} + \\sqrt{2}$ units long, while Bera's path will be $\\sqrt{2} + \\sqrt{13}$ units long.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from math import *\n\nax, ay, bx, by, cx, cy = [int(t) for t in input().split()]\nn = int(input())\ndist = 0\nmaxv = [[-inf, -inf], [-inf, -inf]]\nindex = [[0,0], [0,0]]\n\ndef update(d, idx, p):\n\tnonlocal maxv, index\n\tif d > maxv[p][0]:\n\t\tmaxv[p][1] = maxv[p][0]\n\t\tindex[p][1] = index[p][0]\n\t\tmaxv[p][0] = d\n\t\tindex[p][0] = idx\n\telif d > maxv[p][1]:\n\t\tmaxv[p][1] = d\n\t\tindex[p][1] = idx\n\nfor i in range(n):\n\tx, y = [int(t) for t in input().split()]\n\tbottle_recycle = sqrt((cx - x) ** 2 + (cy - y) ** 2)\n\tdist += bottle_recycle * 2\n\tdista = bottle_recycle - sqrt((ax - x) ** 2 + (ay - y) ** 2)\n\tdistb = bottle_recycle - sqrt((bx - x) ** 2 + (by - y) ** 2)\n\tupdate(dista, i, 0)\n\tupdate(distb, i, 1)\n\nans = dist - maxv[0][0]\nans = min(ans, dist - maxv[1][0])\nif(index[0][0] != index[1][0]):\n\tans = min(ans, dist - maxv[0][0] - maxv[1][0])\nelif(n > 1):\n\tans = min(ans, dist - maxv[0][1] - maxv[1][0], dist - maxv[0][0] - maxv[1][1])\nprint(ans)\n", "from math import *\n\nax, ay, bx, by, cx, cy = map(lambda t: int(t), input().split())\nn = int(input())\ndist = 0\nmaxv = [[-inf, -inf], [-inf, -inf]]\nindex = [[0,0], [0,0]]\n\ndef update(d, idx, p):\n\tnonlocal maxv, index\n\tif d > maxv[p][0]:\n\t\tmaxv[p][1] = maxv[p][0]\n\t\tindex[p][1] = index[p][0]\n\t\tmaxv[p][0] = d\n\t\tindex[p][0] = idx\n\telif d > maxv[p][1]:\n\t\tmaxv[p][1] = d\n\t\tindex[p][1] = idx\n\nfor i in range(n):\n\tx, y = map(lambda t: int(t), input().split())\n\tbottle_recycle = sqrt((cx - x) ** 2 + (cy - y) ** 2)\n\tdist += bottle_recycle * 2\n\tdista = bottle_recycle - sqrt((ax - x) ** 2 + (ay - y) ** 2)\n\tdistb = bottle_recycle - sqrt((bx - x) ** 2 + (by - y) ** 2)\n\tupdate(dista, i, 0)\n\tupdate(distb, i, 1)\n\nans = dist - maxv[0][0]\nans = min(ans, dist - maxv[1][0])\nif(index[0][0] != index[1][0]):\n\tans = min(ans, dist - maxv[0][0] - maxv[1][0])\nelif(n > 1):\n\tans = min(ans, dist - maxv[0][1] - maxv[1][0], dist - maxv[0][0] - maxv[1][1])\nprint(ans)\n", "def main():\n\tfrom math import hypot\n\tfrom sys import stdin\n\tax, ay, bx, by, tx, ty = list(map(float, input().split()))\n\tn, tot = int(input()), 0.\n\tm0 = m1 = m2 = m3 = -9e9\n\tj = k = 0\n\tfor i, s in enumerate(stdin.read().splitlines()):\n\t\tx, y = list(map(float, s.split()))\n\t\tr = hypot(tx - x, ty - y)\n\t\ttot += r\n\t\td = r - hypot(ax - x, ay - y)\n\t\tif m1 < d:\n\t\t\tif m0 < d:\n\t\t\t\tm0, m1, j = d, m0, i\n\t\t\telse:\n\t\t\t\tm1 = d\n\t\td = r - hypot(bx - x, by - y)\n\t\tif m3 < d:\n\t\t\tif m2 < d:\n\t\t\t\tm2, m3, k = d, m2, i\n\t\t\telse:\n\t\t\t\tm3 = d\n\tprint(tot * 2. - max((m0, m2) if min(m0, m2) < 0. else((m0 + m2) * (j != k), m0 + m3, m1 + m2, m0, m2)))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "def main():\n\tfrom math import hypot\n\tfrom sys import stdin\n\tax, ay, bx, by, tx, ty = list(map(float, input().split()))\n\ts, tot = input(), 0.\n\tm0 = m1 = m2 = m3 = -9e9\n\tj = k = 0\n\tfor i, s in enumerate(stdin.read().splitlines()):\n\t\tx, y = list(map(float, s.split()))\n\t\tr = hypot(tx - x, ty - y)\n\t\ttot += r\n\t\td = r - hypot(ax - x, ay - y)\n\t\tif m1 < d:\n\t\t\tif m0 < d:\n\t\t\t\tm0, m1, j = d, m0, i\n\t\t\telse:\n\t\t\t\tm1 = d\n\t\td = r - hypot(bx - x, by - y)\n\t\tif m3 < d:\n\t\t\tif m2 < d:\n\t\t\t\tm2, m3, k = d, m2, i\n\t\t\telse:\n\t\t\t\tm3 = d\n\tprint(tot * 2. - max((m0, m2, m0 + m2) if j != k else (m0, m2, m0 + m3, m1 + m2)))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from math import hypot\n\nax, ay, bx, by, tx, ty = map(int, input().split())\n\nn = int(input())\n\nans = 0\n\np1, p2, beg, end = [0]*n, [0]*n, [0]*n, [0]*n\n\ndef pref(x):\n\treturn beg[x] if x >= 0 else 0\n\ndef suff(x):\n\treturn end[x] if x < n else 0\n\ndef ex(x):\n\treturn max(pref(x-1), suff(x+1))\n\nfor i in range(n):\n\tx, y = map(int, input().split())\n\td = hypot(x-tx, y-ty)\n\td1 = hypot(x-ax, y-ay)\n\td2 = hypot(x-bx, y-by)\n\tans += d+d\n\tp1[i], p2[i] = d-d1, d-d2\n\nbeg[0] = p1[0]\nfor i in range(1, n):\n\tbeg[i] = max(beg[i-1], p1[i])\n\nend[n-1] = p1[n-1]\nfor i in range(n-2, -1, -1):\n\tend[i] = max(end[i+1], p1[i])\n\nres = 1e220\n\nfor i in range(0, n):\n\tres = min(res, min(ans-p2[i]-ex(i), ans-max(p1[i], p2[i])))\n\nprint(res)\n", "from math import hypot\n\nax, ay, bx, by, tx, ty = map(int, input().split())\n\nn = int(input())\n\nans = 0\n\np1, p2, beg, end = [0]*n, [0]*n, [0]*n, [0]*n\n\ndef pref(x):\n\treturn beg[x] if x >= 0 else 0\n\ndef suff(x):\n\treturn end[x] if x < n else 0\n\ndef ex(x):\n\treturn max(pref(x-1), suff(x+1))\n\nfor i in range(n):\n\tx, y = map(int, input().split())\n\td = hypot(x-tx, y-ty)\n\td1 = hypot(x-ax, y-ay)\n\td2 = hypot(x-bx, y-by)\n\tans += d+d\n\tp1[i], p2[i] = d-d1, d-d2\n\nbeg[0] = p1[0]\nfor i in range(1, n):\n\tbeg[i] = max(beg[i-1], p1[i])\n\nend[n-1] = p1[n-1]\nfor i in range(n-2, -1, -1):\n\tend[i] = max(end[i+1], p1[i])\n\nres = 1e220\n\nfor i in range(0, n):\n\tres = min(res, min(ans-p2[i]-ex(i), ans-max(p1[i], p2[i])))\n\nprint(res)\n", "from math import sqrt\n\nax, ay, bx, by, tx, ty = map(int, input().split())\n\nn = int(input())\n\nans = 0\n\np1, p2, beg, end = [0]*n, [0]*n, [0]*n, [0]*n\n\ndef sqr(x):\n\treturn x*x\n\ndef pref(x):\n\treturn beg[x] if x >= 0 else 0\n\ndef suff(x):\n\treturn end[x] if x < n else 0\n\ndef ex(x):\n\treturn max(pref(x-1), suff(x+1))\n\nfor i in range(n):\n\tx, y = map(int, input().split())\n\td = sqrt(sqr(x-tx) + sqr(y-ty))\n\td1 = sqrt(sqr(x-ax) + sqr(y-ay))\n\td2 = sqrt(sqr(x-bx) + sqr(y-by))\n\tans += d+d\n\tp1[i], p2[i] = d-d1, d-d2\n\nbeg[0] = p1[0]\nfor i in range(1, n):\n\tbeg[i] = max(beg[i-1], p1[i])\n\nend[n-1] = p1[n-1]\nfor i in range(n-2, -1, -1):\n\tend[i] = max(end[i+1], p1[i])\n\nres = 1e220\n\nfor i in range(0, n):\n\tres = min(res, min(ans-p2[i]-ex(i), ans-max(p1[i], p2[i])))\n\nprint(res)\n", "from math import sqrt\n\nax, ay, bx, by, tx, ty = map(int, input().split())\n\nn = int(input())\n\nans = 0\n\np1, p2, beg, end = [0]*n, [0]*n, [0]*n, [0]*n\n\ndef sqr(x):\n\treturn x*x\n\ndef pref(x):\n\treturn beg[x] if x >= 0 else 0\n\ndef suff(x):\n\treturn end[x] if x < n else 0\n\ndef ex(x):\n\treturn max(pref(x-1), suff(x+1))\n\nfor i in range(n):\n\tx, y = map(int, input().split())\n\td = sqrt(sqr(x-tx) + sqr(y-ty))\n\td1 = sqrt(sqr(x-ax) + sqr(y-ay))\n\td2 = sqrt(sqr(x-bx) + sqr(y-by))\n\tans += d+d\n\tp1[i], p2[i] = d-d1, d-d2\n\nbeg[0] = p1[0]\nfor i in range(1, n):\n\tbeg[i] = max(beg[i-1], p1[i])\n\nend[n-1] = p1[n-1]\nfor i in range(n-2, -1, -1):\n\tend[i] = max(end[i+1], p1[i])\n\nres = 1e220\n\nfor i in range(0, n):\n\tres = min(res, min(ans-p2[i]-ex(i), ans-max(p1[i], p2[i])))\n\nprint(res)\n", "import math, sys\n\nax,ay,bx,by,tx,ty = list(map(float, input().split()))\nn = int(input())\n\ndef dist(x1,y1,x2,y2):\n\treturn math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))\n\ncost = 0\nbottleCoord = []\nfor i in range(0,n):\n\tx,y = list(map(float, input().split()))\n\tcost += 2*dist(tx,ty,x,y)\n\tbottleCoord.append((x,y))\n\nasCost = [(0,-1)]\nbsCost = [(0,-1)]\n\nfor i in range(0,n):\n\tasCost.append((dist(ax,ay,bottleCoord[i][0],bottleCoord[i][1]) - dist(bottleCoord[i][0],bottleCoord[i][1],tx,ty),i))\n\tbsCost.append((dist(bx,by,bottleCoord[i][0],bottleCoord[i][1]) - dist(bottleCoord[i][0],bottleCoord[i][1],tx,ty),i))\n\nasCost.sort()\nbsCost.sort()\ncostTmpIndiv = sys.maxsize\n\nfor i in range(0,min(len(asCost),5)):\n\tfor j in range(0, min(len(bsCost),5)):\n\t\tif (asCost[i][1] != bsCost[j][1]):\n\t\t\tcostTmpIndiv = min(costTmpIndiv, asCost[i][0]+bsCost[j][0])\n\nprint(cost + costTmpIndiv)\n", "from math import sqrt\n\nax, ay, bx, by, tx, ty = list(map(int, input().split()))\nn = int(input())\nd = 0\nmina = (2*10**9,0,0)\nmina2 = (2*10**9,0,0)\nminb = (2*10**9,0,0)\nminb2 = (2*10**9,0,0)\nfor _ in range(n):\n\tx, y = list(map(int, input().split()))\n\tdt = sqrt((x-tx)**2+(y-ty)**2)\n\td += 2*dt\n\tda = sqrt((ax-x)**2+(ay-y)**2)\n\tdat = (da-dt,x,y)\n\tif dat[0] < mina[0]:\n\t\tmina, mina2 = dat, mina\n\telif dat[0] < mina2[0]:\n\t\tmina2 = dat\n\tdb = sqrt((bx-x)**2+(by-y)**2)\n\tdbt = (db-dt,x,y)\n\tif dbt[0] < minb[0]:\n\t\tminb, minb2 = dbt, minb\n\telif dbt[0] < minb2[0]:\n\t\tminb2 = dbt\nif n >= 2 and mina[0] < 0 and minb[0] < 0:\n\tif mina[1] != minb[1] or mina[2] != minb[2]:\n\t\td += mina[0] + minb[0]\n\telif mina2[0] < 0 and minb2[0] < 0:\n\t\td += min(mina[0]+minb2[0],mina2[0]+minb[0])\n\telif mina2[0] < 0:\n\t\td += min(mina[0],mina2[0]+minb[0])\n\telif minb2[0] < 0:\n\t\td += min(mina[0]+minb2[0],minb[0])\n\telse:\n\t\td += min(mina[0],minb[0])\nelse:\n\td += min(mina[0],minb[0])\nprint(d)\n", "read = lambda : map(int, input().split())\ndef dis(x1, y1, x2, y2):\n\treturn ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\nax, ay, bx, by, tx, ty = read()\nn = int(input())\na, b = [], []\nsum = 0\nfor i in range(n):\n\tx, y = read()\n\tdist = dis(tx, ty, x, y)\n\ta.append((dis(ax, ay, x, y) - dist, i))\n\tb.append((dis(bx, by, x, y) - dist, i))\n\tsum += dist * 2\na.sort()\nb.sort()\nif n > 1 and a[0][1] == b[0][1]:\n\tans = min(a[0][0], b[0][0], a[0][0] + b[1][0], a[1][0] + b[0][0])\nelse:\n\tans = min(a[0][0], b[0][0])\n\tif (n > 1) :\n\t\tans = min(a[0][0] + b[0][0], ans)\nprint(ans + sum)\n", "ax,ay,bx,by,tx,ty=list(map(int,input().split()))  #\n\nod=[]  #\nco=[] #\nobjects=int(input())#\nfor i in range(objects):#\n\tx,y=list(map(int,input().split()))#\n\tod.append(((tx-x)**2+(ty-y)**2)**0.5)#\n\tco.append([x,y])#\n\n\nasaved=[0,0]#\nasaved2=[0,0]#\nma=-(10**25)\n\nfor i in range(objects):\n\tx=co[i][0]\n\ty=co[i][1]\n\tsaved=od[i]-((ax-x)**2+(ay-y)**2)**0.5\n\tma=max(ma,saved)\n\tif saved>asaved[0]:\n\t\tasaved2[0]=asaved[0]\n\t\tasaved2[1]=asaved[1]\n\t\tasaved[0]=saved\n\t\tasaved[1]=i\n\telif saved>asaved2[0]:\n\t\tasaved2[0]=saved\n\t\tasaved2[1]=i\n\n\nbsaved=[0,0]#\nbsaved2=[0,0]#\nmb=-(10**25)\n\nfor i in range(objects):\n\tx=co[i][0]\n\ty=co[i][1]\n\tsaved=od[i]-((bx-x)**2+(by-y)**2)**0.5\n\tmb=max(mb,saved)\n\tif saved>bsaved[0]:\n\t\tbsaved2[1]=bsaved[1]\n\t\tbsaved2[0]=bsaved[0]\n\t\tbsaved[0]=saved\n\t\tbsaved[1]=i\n\telif saved>bsaved2[0]:\n\t\tbsaved2[0]=saved\n\t\tbsaved2[1]=i\n\n\ntot=2*sum(od)#\nif mb<0 and ma<0:\n\ttot-=max(mb,ma)\nelif bsaved[1]==asaved[1]:\n\ttot-=max(asaved[0]+bsaved2[0],asaved2[0]+bsaved[0])\nelse:\n\ttot-=asaved[0]+bsaved[0]\n\nprint(tot)#\n", "read = lambda : list(map(int, input().split()))\n\ndef dis(x1, y1, x2, y2):\n\n\treturn ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\n\nax, ay, bx, by, tx, ty = read()\n\nn = int(input())\n\na, b = [], []\n\nsum = 0\n\nfor i in range(n):\n\n\tx, y = read()\n\n\tdist = dis(tx, ty, x, y)\n\n\ta.append((dis(ax, ay, x, y) - dist, i))\n\n\tb.append((dis(bx, by, x, y) - dist, i))\n\n\tsum += dist * 2\n\na.sort()\n\nb.sort()\n\nif n > 1 and a[0][1] == b[0][1]:\n\n\tans = min(a[0][0], b[0][0], a[0][0] + b[1][0], a[1][0] + b[0][0])\n\nelse:\n\n\tans = min(a[0][0], b[0][0])\n\n\tif (n > 1) :\n\n\t\tans = min(a[0][0] + b[0][0], ans)\n\nprint(ans + sum)\n\n\n\n# Made By Mostafa_Khaled\n", "import math\n\nax, ay, bx, by, tx, ty = [int(coord) for coord in input().split()]\nn = int(input())\nx ,y = [], []\n\nminDis = 0\ndiff1 = []\ndiff2 = []\n\nfor i in range(n):\n\txi, yi = [int(coord) for coord in input().split()]\n\tx.append(xi)\n\ty.append(yi)\n\tdisBin = math.sqrt((xi-tx)**2 + (yi-ty)**2)\n\tdiff1.append(( math.sqrt((ax-xi)**2 + (ay-yi)**2) - disBin, i))\n\tdiff2.append(( math.sqrt((bx-xi)**2 + (by-yi)**2) - disBin, i))\n\tminDis += 2 * disBin\n\ndiff1.sort()\ndiff2.sort()\n\nans = min(minDis + diff1[0][0], minDis + diff2[0][0])\n\nif diff1[0][1] != diff2[0][1]:\n\tans = min(ans, minDis + diff1[0][0] + diff2[0][0])\n\nelif n>1:\n\tans = min(ans, minDis + diff1[0][0] + diff2[1][0])\n\tans = min(ans, minDis + diff1[1][0] + diff2[0][0])\n\nprint(ans)\n", "import math\nR = lambda: map(int, input().split())\nax, ay, bx, by, tx, ty = R()\nn = int(input())\ndp = [[0] * (n + 1) for i in range(4)]\nfor i in range(n):\n\tx, y = R()\n\tda, db, dt = ((x - ax) ** 2 + (y - ay) ** 2) ** 0.5, ((x - bx) ** 2 + (y - by) ** 2) ** 0.5, ((x - tx) ** 2 + (y - ty) ** 2) ** 0.5\n\tdp[0][i] = dp[0][i - 1] + dt * 2\n\tdp[1][i] = min(dp[0][i - 1] + db + dt, dp[1][i - 1] + dt * 2 if i else math.inf)\n\tdp[2][i] = min(dp[0][i - 1] + da + dt, dp[2][i - 1] + dt * 2 if i else math.inf)\n\tdp[3][i] = min(dp[1][i - 1] + da + dt, dp[2][i - 1] + db + dt, dp[3][i - 1] + dt * 2) if i else math.inf\nprint(min(dp[3][n - 1], dp[2][n - 1], dp[1][n - 1]))\n", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/16/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\nimport math\n\n\ndef dist(posa, posb):\n\treturn math.sqrt((posa[0] - posb[0]) ** 2 + (posa[1] - posb[1]) ** 2)\n\n\ndef solve(posa, posb, posc, bottles, N):\n\tif N == 1:\n\t\tprint(min(dist(posa, bottles[0]), dist(posb, bottles[0])) + dist(posc, bottles[0]))\n\t\treturn\n\t\n\tbottledist = [dist(posc, b) for b in bottles]\n\tda = [(dist(posa, bottles[i]) - bottledist[i], i) for i in range(N)]\n\tdb = [(dist(posb, bottles[i]) - bottledist[i], i) for i in range(N)]\n\tda.sort()\n\tdb.sort()\n\td = 2 * sum(bottledist)\n\tans = min(d + da[0][0], d + db[0][0])\n\tif da[0][1] != db[0][1]:\n\t\tans = min(ans, d + da[0][0] + db[0][0])\n\telse:\n\t\te = min(da[0][0] + db[1][0], da[1][0] + db[0][0])\n\t\tans = min(ans, d + e)\n\t\n\tprint(ans)\n\t\n\t\nax, ay, bx, by, cx, cy = list(map(int, input().split()))\nN = int(input())\nbottles = []\nfor i in range(N):\n\tx, y = list(map(int, input().split()))\n\tbottles.append((x, y))\n\nsolve((ax, ay), (bx, by), (cx, cy), bottles, N)\n", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/16/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\nimport math\n\n\ndef dist(posa, posb):\n\treturn math.sqrt((posa[0] - posb[0]) ** 2 + (posa[1] - posb[1]) ** 2)\n\n\ndef solve(posa, posb, posc, bottles, N):\n\tif N == 1:\n\t\tprint(min(dist(posa, bottles[0]), dist(posb, bottles[0])) + dist(posc, bottles[0]))\n\t\treturn\n\t\n\tbottledist = [dist(posc, b) for b in bottles]\n\tda = [(dist(posa, bottles[i]) - bottledist[i], i) for i in range(N)]\n\tdb = [(dist(posb, bottles[i]) - bottledist[i], i) for i in range(N)]\n\td = 2 * sum(bottledist)\n\t\n\theapq.heapify(da)\n\theapq.heapify(db)\n\ta0 = heapq.heappop(da)\n\tb0 = heapq.heappop(db)\n\tans = min(d + a0[0], d + b0[0])\n\tif a0[1] != b0[1]:\n\t\tans = min(ans, d + a0[0] + b0[0])\n\telse:\n\t\ta1 = heapq.heappop(da)\n\t\tb1 = heapq.heappop(db)\n\t\te = min(a0[0] + b1[0], a1[0] + b0[0])\n\t\tans = min(ans, d + e)\n\t\n\tprint(ans)\n\t\n\t\nax, ay, bx, by, cx, cy = list(map(int, input().split()))\nN = int(input())\nbottles = []\nfor i in range(N):\n\tx, y = list(map(int, input().split()))\n\tbottles.append((x, y))\n\nsolve((ax, ay), (bx, by), (cx, cy), bottles, N)\n", "ax,ay,bx,by,tx,ty=list(map(int,input().split()))\nn=int(input())\na,b=[],[]\nres=0\nfor i in range(n):\n\tx, y=list(map(int, input().split()))\n\tlt=((tx-x)*(tx-x)+(ty-y)*(ty-y))**0.5\n\tla=((ax-x)*(ax-x)+(ay-y)*(ay-y))**0.5\n\tlb=((bx-x)*(bx-x)+(by-y)*(by-y))**0.5\n\ta+=[(la-lt,i)]\n\tb+=[(lb-lt,i)]\n\tres+=lt\na.sort();b.sort()\nres*=2\nif a[0][1]==b[0][1] and n>1:\n\tres+=min(a[0][0],b[0][0],a[0][0]+b[1][0],a[1][0]+b[0][0])\nelse: \n\tif a[0][1]==b[0][1]:\n\t\tres+=min(a[0][0],b[0][0])\n\telse:\n\t\tres+=min(a[0][0],b[0][0],a[0][0]+b[0][0])\nprint(res)\n"], "id": "id6161"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6161", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["it", 1], ["was", 1], ["recycling", 1], ["day", 1], ["in", 1], ["kekoland", 1], ["to", 1], ["celebrate", 1], ["it", 1], ["adil", 1], ["and", 1], ["bera", 1], ["went", 1], ["to", 1], ["central", 1], ["perk", 1], ["where", 1], ["they", 1], ["can", 1], ["take", 1], ["bottles", 1], ["from", 1], ["the", 1], ["ground", 1], ["and", 1], ["put", 1], ["them", 1], ["into", 1], ["a", 1], ["recycling", 1], ["bin", 1], ["we", 1], ["can", 1], ["think", 1], ["central", 1], ["perk", 1], ["as", 1], ["coordinate", 1], ["plane", 1], ["there", 1], ["are", 1], ["n", 1], ["bottles", 0], ["on", 0], ["the", 0], ["ground", 0], ["the", 0], ["i", 0], ["th", 0], ["bottle", 0], ["is", 0], ["located", 0], ["at", 0], ["position", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["both", 0], ["adil", 0], ["and", 0], ["bera", 0], ["can", 0], ["carry", 0], ["only", 0], ["one", 0], ["bottle", 0], ["at", 0], ["once", 0], ["each", 0], ["for", 0], ["both", 0], ["adil", 0], ["and", 0], ["bera", 0], ["the", 0], ["process", 0], ["looks", 0], ["as", 0], ["follows", 0], ["choose", 1], ["to", 1], ["stop", 1], ["or", 1], ["to", 1], ["continue", 1], ["to", 1], ["collect", 1], ["bottles", 1], ["if", 1], ["the", 1], ["choice", 1], ["was", 1], ["to", 1], ["continue", 1], ["then", 1], ["choose", 1], ["some", 1], ["bottle", 1], ["and", 1], ["walk", 0], ["towards", 0], ["it", 0], ["pick", 0], ["this", 0], ["bottle", 0], ["and", 0], ["walk", 0], ["to", 0], ["the", 0], ["recycling", 0], ["bin", 0], ["go", 0], ["to", 0], ["step", 0], ["1", 0], ["adil", 1], ["and", 1], ["bera", 1], ["may", 1], ["move", 1], ["independently", 1], ["they", 1], ["are", 1], ["allowed", 1], ["to", 1], ["pick", 1], ["bottles", 0], ["simultaneously", 0], ["all", 0], ["bottles", 0], ["may", 0], ["be", 0], ["picked", 0], ["by", 0], ["any", 0], ["of", 0], ["the", 0], ["two", 0], ["it", 0], ["s", 0], ["allowed", 1], ["that", 1], ["one", 1], ["of", 1], ["them", 1], ["stays", 1], ["still", 1], ["while", 1], ["the", 1], ["other", 1], ["one", 1], ["continues", 1], ["to", 1], ["pick", 1], ["bottles", 1], ["they", 1], ["want", 1], ["to", 1], ["organize", 1], ["the", 1], ["process", 1], ["such", 1], ["that", 1], ["the", 1], ["total", 1], ["distance", 1], ["they", 1], ["walk", 1], ["the", 1], ["sum", 1], ["of", 1], ["distance", 1], ["walked", 1], ["by", 1], ["adil", 1], ["and", 1], ["distance", 1], ["walked", 1], ["by", 1], ["bera", 1], ["is", 1], ["minimum", 1], ["possible", 1], ["of", 1], ["course", 0], ["at", 0], ["the", 0], ["end", 0], ["all", 0], ["bottles", 0], ["should", 0], ["lie", 0], ["in", 0], ["the", 0], ["recycling", 0], ["bin", 0], ["input", 0], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["six", 0], ["integers", 0], ["a", 0], ["x", 0], ["a", 0], ["y", 0], ["b", 0], ["x", 0], ["b", 0], ["y", 0], ["t", 0], ["x", 0], ["and", 0], ["t", 0], ["y", 0], ["0", 0], ["≤", 0], ["a", 0], ["x", 0], ["a", 0], ["y", 0], ["b", 0], ["x", 0], ["b", 0], ["y", 0], ["t", 0], ["x", 0], ["t", 0], ["y", 0], ["≤", 0], ["10", 0], ["9", 0], ["—", 1], ["initial", 1], ["positions", 1], ["of", 1], ["adil", 1], ["bera", 1], ["and", 1], ["recycling", 1], ["bin", 1], ["respectively", 1], ["the", 5], ["second", 1], ["line", 4], ["contains", 19], ["a", 16], ["single", 16], ["integer", 1], ["n", 1], ["1", 1], ["≤", 1], ["n", 1], ["≤", 1], ["100", 1], ["000", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["bottles", 1], ["on", 1], ["the", 0], ["ground", 0], ["then", 0], ["follow", 0], ["n", 0], ["lines", 0], ["each", 0], ["of", 0], ["them", 0], ["contains", 0], ["two", 0], ["integers", 0], ["x", 0], ["i", 0], ["and", 0], ["y", 0], ["i", 0], ["0", 0], ["≤", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["≤", 0], ["10", 0], ["9", 0], ["—", 0], ["position", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["bottle", 0], ["it", 0], ["s", 0], ["guaranteed", 1], ["that", 0], ["positions", 0], ["of", 0], ["adil", 0], ["bera", 0], ["recycling", 0], ["bin", 0], ["and", 0], ["all", 0], ["bottles", 0], ["are", 0], ["distinct", 0], ["output", 0], ["print", 1], ["one", 1], ["real", 1], ["number", 1], ["—", 1], ["the", 1], ["minimum", 1], ["possible", 1], ["total", 1], ["distance", 1], ["adil", 1], ["and", 1], ["bera", 1], ["need", 1], ["to", 1], ["walk", 1], ["in", 1], ["order", 1], ["to", 1], ["put", 1], ["all", 1], ["bottles", 1], ["into", 1], ["recycling", 1], ["bin", 1], ["your", 13], ["answer", 17], ["will", 17], ["be", 16], ["considered", 15], ["correct", 5], ["if", 4], ["its", 4], ["absolute", 4], ["or", 4], ["relative", 4], ["error", 4], ["does", 4], ["not", 4], ["exceed", 4], ["10", 4], ["6", 4], ["namely", 4], ["let", 4], ["s", 4], ["assume", 5], ["that", 5], ["your", 5], ["answer", 5], ["is", 5], ["a", 5], ["and", 5], ["the", 5], ["answer", 5], ["of", 5], ["the", 5], ["jury", 0], ["is", 0], ["b", 0], ["the", 0], ["checker", 0], ["program", 0], ["will", 0], ["consider", 0], ["your", 0], ["answer", 0], ["correct", 0], ["if", 0], ["frac", 0], ["a", 0], ["b", 0], ["operatorname", 0], ["max", 0], ["1", 0], ["b", 0], ["leq", 0], ["10", 0], ["6", 0], ["examples", 0], ["input", 0], ["3", 0], ["1", 0], ["1", 0], ["2", 0], ["0", 0], ["0", 0], ["3", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["3", 0], ["output", 0], ["11", 0], ["084259940083", 0], ["input", 0], ["5", 0], ["0", 0], ["4", 0], ["2", 0], ["2", 0], ["0", 0], ["5", 0], ["5", 0], ["2", 0], ["3", 0], ["0", 0], ["5", 0], ["5", 0], ["3", 0], ["5", 0], ["3", 0], ["3", 0], ["output", 0], ["33", 0], ["121375178000", 0], ["note", 0], ["consider", 0], ["the", 0], ["first", 0], ["sample", 0], ["adil", 0], ["will", 0], ["use", 0], ["the", 0], ["following", 0], ["path", 0], ["3", 0], ["1", 0], ["rightarrow", 0], ["2", 0], ["1", 0], ["rightarrow", 0], ["0", 0], ["0", 0], ["rightarrow", 0], ["1", 0], ["1", 0], ["rightarrow", 0], ["0", 0], ["0", 0], ["bera", 0], ["will", 0], ["use", 0], ["the", 0], ["following", 0], ["path", 0], ["1", 0], ["2", 0], ["rightarrow", 0], ["2", 0], ["3", 0], ["rightarrow", 0], ["0", 0], ["0", 0], ["adil", 0], ["s", 0], ["path", 0], ["will", 0], ["be", 0], ["1", 0], ["sqrt", 0], ["5", 0], ["sqrt", 0], ["2", 0], ["sqrt", 0], ["2", 0], ["units", 0], ["long", 0], ["while", 0], ["bera", 0], ["s", 0], ["path", 0], ["will", 0], ["be", 0], ["sqrt", 0], ["2", 0], ["sqrt", 0], ["13", 0], ["units", 0], ["long", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4112903225806452, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.35252292012371067, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5669291338582677, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5669291338582677, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3951612903225806, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.35151209677419326, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5669291338582677, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5669291338582677, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["math", 0], ["import", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["cx", 0], ["cy", 0], ["int", 0], ["t", 0], ["for", 0], ["t", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["dist", 0], ["0", 0], ["maxv", 0], ["inf", 0], ["inf", 0], ["inf", 0], ["inf", 0], ["index", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["def", 0], ["update", 0], ["d", 0], ["idx", 0], ["p", 0], ["nonlocal", 0], ["maxv", 0], ["index", 0], ["if", 0], ["d", 0], ["maxv", 0], ["p", 0], ["0", 0], ["maxv", 0], ["p", 0], ["1", 0], ["maxv", 0], ["p", 0], ["0", 0], ["index", 0], ["p", 0], ["1", 0], ["index", 0], ["p", 0], ["0", 0], ["maxv", 0], ["p", 0], ["0", 0], ["d", 0], ["index", 0], ["p", 0], ["0", 0], ["idx", 0], ["elif", 0], ["d", 0], ["maxv", 0], ["p", 0], ["1", 0], ["maxv", 0], ["p", 0], ["1", 0], ["d", 0], ["index", 0], ["p", 0], ["1", 0], ["idx", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["int", 0], ["t", 0], ["for", 0], ["t", 0], ["in", 0], ["input", 0], ["split", 0], ["bottle", 0], ["recycle", 0], ["sqrt", 0], ["cx", 0], ["x", 0], ["2", 0], ["cy", 0], ["y", 0], ["2", 0], ["dist", 0], ["bottle", 0], ["recycle", 0], ["2", 0], ["dista", 0], ["bottle", 0], ["recycle", 0], ["sqrt", 0], ["ax", 0], ["x", 0], ["2", 0], ["ay", 0], ["y", 0], ["2", 0], ["distb", 0], ["bottle", 0], ["recycle", 0], ["sqrt", 0], ["bx", 0], ["x", 0], ["2", 0], ["by", 0], ["y", 0], ["2", 0], ["update", 0], ["dista", 0], ["i", 0], ["0", 0], ["update", 0], ["distb", 0], ["i", 0], ["1", 0], ["ans", 0], ["dist", 0], ["maxv", 0], ["0", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["dist", 0], ["maxv", 0], ["1", 0], ["0", 0], ["if", 0], ["index", 0], ["0", 0], ["0", 0], ["index", 0], ["1", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["dist", 0], ["maxv", 0], ["0", 0], ["0", 0], ["maxv", 0], ["1", 0], ["0", 0], ["elif", 0], ["n", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["dist", 0], ["maxv", 0], ["0", 0], ["1", 0], ["maxv", 0], ["1", 0], ["0", 0], ["dist", 0], ["maxv", 0], ["0", 0], ["0", 0], ["maxv", 0], ["1", 0], ["1", 0], ["print", 0], ["ans", 0], ["from", 0], ["math", 0], ["import", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["cx", 0], ["cy", 0], ["map", 0], ["lambda", 0], ["t", 0], ["int", 0], ["t", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["dist", 0], ["0", 0], ["maxv", 0], ["inf", 0], ["inf", 0], ["inf", 0], ["inf", 0], ["index", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["def", 0], ["update", 0], ["d", 0], ["idx", 0], ["p", 0], ["nonlocal", 0], ["maxv", 0], ["index", 0], ["if", 0], ["d", 0], ["maxv", 0], ["p", 0], ["0", 0], ["maxv", 0], ["p", 0], ["1", 0], ["maxv", 0], ["p", 0], ["0", 0], ["index", 0], ["p", 0], ["1", 0], ["index", 0], ["p", 0], ["0", 0], ["maxv", 0], ["p", 0], ["0", 0], ["d", 0], ["index", 0], ["p", 0], ["0", 0], ["idx", 0], ["elif", 0], ["d", 0], ["maxv", 0], ["p", 0], ["1", 0], ["maxv", 0], ["p", 0], ["1", 0], ["d", 0], ["index", 0], ["p", 0], ["1", 0], ["idx", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["lambda", 0], ["t", 0], ["int", 0], ["t", 0], ["input", 0], ["split", 0], ["bottle", 0], ["recycle", 0], ["sqrt", 0], ["cx", 0], ["x", 0], ["2", 0], ["cy", 0], ["y", 0], ["2", 0], ["dist", 0], ["bottle", 0], ["recycle", 0], ["2", 0], ["dista", 0], ["bottle", 0], ["recycle", 0], ["sqrt", 0], ["ax", 0], ["x", 0], ["2", 0], ["ay", 0], ["y", 0], ["2", 0], ["distb", 0], ["bottle", 0], ["recycle", 0], ["sqrt", 0], ["bx", 0], ["x", 0], ["2", 0], ["by", 0], ["y", 0], ["2", 0], ["update", 0], ["dista", 0], ["i", 0], ["0", 0], ["update", 0], ["distb", 0], ["i", 0], ["1", 0], ["ans", 0], ["dist", 0], ["maxv", 0], ["0", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["dist", 0], ["maxv", 0], ["1", 0], ["0", 0], ["if", 0], ["index", 0], ["0", 0], ["0", 0], ["index", 0], ["1", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["dist", 0], ["maxv", 0], ["0", 0], ["0", 0], ["maxv", 0], ["1", 0], ["0", 0], ["elif", 0], ["n", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["dist", 0], ["maxv", 0], ["0", 0], ["1", 0], ["maxv", 0], ["1", 0], ["0", 0], ["dist", 0], ["maxv", 0], ["0", 0], ["0", 0], ["maxv", 0], ["1", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["main", 0], ["from", 0], ["math", 0], ["import", 0], ["hypot", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["list", 0], ["map", 0], ["float", 0], ["input", 0], ["split", 0], ["n", 0], ["tot", 0], ["int", 0], ["input", 0], ["0", 0], ["m0", 0], ["m1", 0], ["m2", 0], ["m3", 0], ["9e9", 0], ["j", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["s", 0], ["in", 0], ["enumerate", 0], ["stdin", 0], ["read", 0], ["splitlines", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["float", 0], ["s", 0], ["split", 0], ["r", 0], ["hypot", 0], ["tx", 0], ["x", 0], ["ty", 0], ["y", 0], ["tot", 0], ["r", 0], ["d", 0], ["r", 0], ["hypot", 0], ["ax", 0], ["x", 0], ["ay", 0], ["y", 0], ["if", 0], ["m1", 0], ["d", 0], ["if", 0], ["m0", 0], ["d", 0], ["m0", 0], ["m1", 0], ["j", 0], ["d", 0], ["m0", 0], ["i", 0], ["else", 0], ["m1", 0], ["d", 0], ["d", 0], ["r", 0], ["hypot", 0], ["bx", 0], ["x", 0], ["by", 0], ["y", 0], ["if", 0], ["m3", 0], ["d", 0], ["if", 0], ["m2", 0], ["d", 0], ["m2", 0], ["m3", 0], ["k", 0], ["d", 0], ["m2", 0], ["i", 0], ["else", 0], ["m3", 0], ["d", 0], ["print", 0], ["tot", 0], ["2", 0], ["max", 0], ["m0", 0], ["m2", 0], ["if", 0], ["min", 0], ["m0", 0], ["m2", 0], ["0", 0], ["else", 0], ["m0", 0], ["m2", 0], ["j", 0], ["k", 0], ["m0", 0], ["m3", 0], ["m1", 0], ["m2", 0], ["m0", 0], ["m2", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["main", 0], ["from", 0], ["math", 0], ["import", 0], ["hypot", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["list", 0], ["map", 0], ["float", 0], ["input", 0], ["split", 0], ["s", 0], ["tot", 0], ["input", 0], ["0", 0], ["m0", 0], ["m1", 0], ["m2", 0], ["m3", 0], ["9e9", 0], ["j", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["s", 0], ["in", 0], ["enumerate", 0], ["stdin", 0], ["read", 0], ["splitlines", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["float", 0], ["s", 0], ["split", 0], ["r", 0], ["hypot", 0], ["tx", 0], ["x", 0], ["ty", 0], ["y", 0], ["tot", 0], ["r", 0], ["d", 0], ["r", 0], ["hypot", 0], ["ax", 0], ["x", 0], ["ay", 0], ["y", 0], ["if", 0], ["m1", 0], ["d", 0], ["if", 0], ["m0", 0], ["d", 0], ["m0", 0], ["m1", 0], ["j", 0], ["d", 0], ["m0", 0], ["i", 0], ["else", 0], ["m1", 0], ["d", 0], ["d", 0], ["r", 0], ["hypot", 0], ["bx", 0], ["x", 0], ["by", 0], ["y", 0], ["if", 0], ["m3", 0], ["d", 0], ["if", 0], ["m2", 0], ["d", 0], ["m2", 0], ["m3", 0], ["k", 0], ["d", 0], ["m2", 0], ["i", 0], ["else", 0], ["m3", 0], ["d", 0], ["print", 0], ["tot", 0], ["2", 0], ["max", 0], ["m0", 0], ["m2", 0], ["m0", 0], ["m2", 0], ["if", 0], ["j", 0], ["k", 0], ["else", 0], ["m0", 0], ["m2", 0], ["m0", 0], ["m3", 0], ["m1", 0], ["m2", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["math", 0], ["import", 0], ["hypot", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["0", 0], ["p1", 0], ["p2", 0], ["beg", 0], ["end", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["def", 0], ["pref", 0], ["x", 0], ["return", 0], ["beg", 0], ["x", 0], ["if", 0], ["x", 0], ["0", 0], ["else", 0], ["0", 0], ["def", 0], ["suff", 0], ["x", 0], ["return", 0], ["end", 0], ["x", 0], ["if", 0], ["x", 0], ["n", 0], ["else", 0], ["0", 0], ["def", 0], ["ex", 0], ["x", 0], ["return", 0], ["max", 0], ["pref", 0], ["x", 0], ["1", 0], ["suff", 0], ["x", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["hypot", 0], ["x", 0], ["tx", 0], ["y", 0], ["ty", 0], ["d1", 0], ["hypot", 0], ["x", 0], ["ax", 0], ["y", 0], ["ay", 0], ["d2", 0], ["hypot", 0], ["x", 0], ["bx", 0], ["y", 0], ["by", 0], ["ans", 0], ["d", 0], ["d", 0], ["p1", 0], ["i", 0], ["p2", 0], ["i", 0], ["d", 0], ["d1", 0], ["d", 0], ["d2", 0], ["beg", 0], ["0", 0], ["p1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["beg", 0], ["i", 0], ["max", 0], ["beg", 0], ["i", 0], ["1", 0], ["p1", 0], ["i", 0], ["end", 0], ["n", 0], ["1", 0], ["p1", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["end", 0], ["i", 0], ["max", 0], ["end", 0], ["i", 0], ["1", 0], ["p1", 0], ["i", 0], ["res", 0], ["1e220", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["res", 0], ["min", 0], ["res", 0], ["min", 0], ["ans", 0], ["p2", 0], ["i", 0], ["ex", 0], ["i", 0], ["ans", 0], ["max", 0], ["p1", 0], ["i", 0], ["p2", 0], ["i", 0], ["print", 0], ["res", 0], ["from", 0], ["math", 0], ["import", 0], ["hypot", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["0", 0], ["p1", 0], ["p2", 0], ["beg", 0], ["end", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["def", 0], ["pref", 0], ["x", 0], ["return", 0], ["beg", 0], ["x", 0], ["if", 0], ["x", 0], ["0", 0], ["else", 0], ["0", 0], ["def", 0], ["suff", 0], ["x", 0], ["return", 0], ["end", 0], ["x", 0], ["if", 0], ["x", 0], ["n", 0], ["else", 0], ["0", 0], ["def", 0], ["ex", 0], ["x", 0], ["return", 0], ["max", 0], ["pref", 0], ["x", 0], ["1", 0], ["suff", 0], ["x", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["hypot", 0], ["x", 0], ["tx", 0], ["y", 0], ["ty", 0], ["d1", 0], ["hypot", 0], ["x", 0], ["ax", 0], ["y", 0], ["ay", 0], ["d2", 0], ["hypot", 0], ["x", 0], ["bx", 0], ["y", 0], ["by", 0], ["ans", 0], ["d", 0], ["d", 0], ["p1", 0], ["i", 0], ["p2", 0], ["i", 0], ["d", 0], ["d1", 0], ["d", 0], ["d2", 0], ["beg", 0], ["0", 0], ["p1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["beg", 0], ["i", 0], ["max", 0], ["beg", 0], ["i", 0], ["1", 0], ["p1", 0], ["i", 0], ["end", 0], ["n", 0], ["1", 0], ["p1", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["end", 0], ["i", 0], ["max", 0], ["end", 0], ["i", 0], ["1", 0], ["p1", 0], ["i", 0], ["res", 0], ["1e220", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["res", 0], ["min", 0], ["res", 0], ["min", 0], ["ans", 0], ["p2", 0], ["i", 0], ["ex", 0], ["i", 0], ["ans", 0], ["max", 0], ["p1", 0], ["i", 0], ["p2", 0], ["i", 0], ["print", 0], ["res", 0], ["from", 0], ["math", 0], ["import", 0], ["sqrt", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["0", 0], ["p1", 0], ["p2", 0], ["beg", 0], ["end", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["def", 0], ["sqr", 0], ["x", 0], ["return", 0], ["x", 0], ["x", 0], ["def", 0], ["pref", 0], ["x", 0], ["return", 0], ["beg", 0], ["x", 0], ["if", 0], ["x", 0], ["0", 0], ["else", 0], ["0", 0], ["def", 0], ["suff", 0], ["x", 0], ["return", 0], ["end", 0], ["x", 0], ["if", 0], ["x", 0], ["n", 0], ["else", 0], ["0", 0], ["def", 0], ["ex", 0], ["x", 0], ["return", 0], ["max", 0], ["pref", 0], ["x", 0], ["1", 0], ["suff", 0], ["x", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["sqrt", 0], ["sqr", 0], ["x", 0], ["tx", 0], ["sqr", 0], ["y", 0], ["ty", 0], ["d1", 0], ["sqrt", 0], ["sqr", 0], ["x", 0], ["ax", 0], ["sqr", 0], ["y", 0], ["ay", 0], ["d2", 0], ["sqrt", 0], ["sqr", 0], ["x", 0], ["bx", 0], ["sqr", 0], ["y", 0], ["by", 0], ["ans", 0], ["d", 0], ["d", 0], ["p1", 0], ["i", 0], ["p2", 0], ["i", 0], ["d", 0], ["d1", 0], ["d", 0], ["d2", 0], ["beg", 0], ["0", 0], ["p1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["beg", 0], ["i", 0], ["max", 0], ["beg", 0], ["i", 0], ["1", 0], ["p1", 0], ["i", 0], ["end", 0], ["n", 0], ["1", 0], ["p1", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["end", 0], ["i", 0], ["max", 0], ["end", 0], ["i", 0], ["1", 0], ["p1", 0], ["i", 0], ["res", 0], ["1e220", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["res", 0], ["min", 0], ["res", 0], ["min", 0], ["ans", 0], ["p2", 0], ["i", 0], ["ex", 0], ["i", 0], ["ans", 0], ["max", 0], ["p1", 0], ["i", 0], ["p2", 0], ["i", 0], ["print", 0], ["res", 0], ["from", 0], ["math", 0], ["import", 0], ["sqrt", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["0", 0], ["p1", 0], ["p2", 0], ["beg", 0], ["end", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["def", 0], ["sqr", 0], ["x", 0], ["return", 0], ["x", 0], ["x", 0], ["def", 0], ["pref", 0], ["x", 0], ["return", 0], ["beg", 0], ["x", 0], ["if", 0], ["x", 0], ["0", 0], ["else", 0], ["0", 0], ["def", 0], ["suff", 0], ["x", 0], ["return", 0], ["end", 0], ["x", 0], ["if", 0], ["x", 0], ["n", 0], ["else", 0], ["0", 0], ["def", 0], ["ex", 0], ["x", 0], ["return", 0], ["max", 0], ["pref", 0], ["x", 0], ["1", 0], ["suff", 0], ["x", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["sqrt", 0], ["sqr", 0], ["x", 0], ["tx", 0], ["sqr", 0], ["y", 0], ["ty", 0], ["d1", 0], ["sqrt", 0], ["sqr", 0], ["x", 0], ["ax", 0], ["sqr", 0], ["y", 0], ["ay", 0], ["d2", 0], ["sqrt", 0], ["sqr", 0], ["x", 0], ["bx", 0], ["sqr", 0], ["y", 0], ["by", 0], ["ans", 0], ["d", 0], ["d", 0], ["p1", 0], ["i", 0], ["p2", 0], ["i", 0], ["d", 0], ["d1", 0], ["d", 0], ["d2", 0], ["beg", 0], ["0", 0], ["p1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["beg", 0], ["i", 0], ["max", 0], ["beg", 0], ["i", 0], ["1", 0], ["p1", 0], ["i", 0], ["end", 0], ["n", 0], ["1", 0], ["p1", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["end", 0], ["i", 0], ["max", 0], ["end", 0], ["i", 0], ["1", 0], ["p1", 0], ["i", 0], ["res", 0], ["1e220", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["res", 0], ["min", 0], ["res", 0], ["min", 0], ["ans", 0], ["p2", 0], ["i", 0], ["ex", 0], ["i", 0], ["ans", 0], ["max", 0], ["p1", 0], ["i", 0], ["p2", 0], ["i", 0], ["print", 0], ["res", 0], ["import", 0], ["math", 0], ["sys", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["list", 0], ["map", 0], ["float", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["def", 0], ["dist", 1], ["x1", 22], ["y1", 22], ["x2", 22], ["y2", 0], ["return", 0], ["math", 0], ["sqrt", 0], ["x1", 0], ["x2", 0], ["x1", 0], ["x2", 0], ["y1", 0], ["y2", 0], ["y1", 0], ["y2", 0], ["cost", 0], ["0", 0], ["bottlecoord", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["float", 0], ["input", 0], ["split", 0], ["cost", 0], ["2", 0], ["dist", 0], ["tx", 0], ["ty", 0], ["x", 0], ["y", 0], ["bottlecoord", 0], ["append", 0], ["x", 0], ["y", 0], ["ascost", 0], ["0", 0], ["1", 0], ["bscost", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["ascost", 0], ["append", 0], ["dist", 0], ["ax", 0], ["ay", 0], ["bottlecoord", 0], ["i", 0], ["0", 0], ["bottlecoord", 0], ["i", 0], ["1", 0], ["dist", 0], ["bottlecoord", 0], ["i", 0], ["0", 0], ["bottlecoord", 0], ["i", 0], ["1", 0], ["tx", 0], ["ty", 0], ["i", 0], ["bscost", 0], ["append", 0], ["dist", 0], ["bx", 0], ["by", 0], ["bottlecoord", 0], ["i", 0], ["0", 0], ["bottlecoord", 0], ["i", 0], ["1", 0], ["dist", 0], ["bottlecoord", 0], ["i", 0], ["0", 0], ["bottlecoord", 0], ["i", 0], ["1", 0], ["tx", 0], ["ty", 0], ["i", 0], ["ascost", 0], ["sort", 0], ["bscost", 0], ["sort", 0], ["costtmpindiv", 0], ["sys", 0], ["maxsize", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["min", 0], ["len", 0], ["ascost", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["min", 0], ["len", 0], ["bscost", 0], ["5", 0], ["if", 0], ["ascost", 0], ["i", 0], ["1", 0], ["bscost", 0], ["j", 0], ["1", 0], ["costtmpindiv", 0], ["min", 0], ["costtmpindiv", 0], ["ascost", 0], ["i", 0], ["0", 0], ["bscost", 0], ["j", 0], ["0", 0], ["print", 0], ["cost", 0], ["costtmpindiv", 0], ["from", 0], ["math", 0], ["import", 0], ["sqrt", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["0", 0], ["mina", 0], ["2", 0], ["10", 0], ["9", 0], ["0", 0], ["0", 0], ["mina2", 0], ["2", 0], ["10", 0], ["9", 0], ["0", 0], ["0", 0], ["minb", 0], ["2", 0], ["10", 0], ["9", 0], ["0", 0], ["0", 0], ["minb2", 0], ["2", 0], ["10", 0], ["9", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dt", 0], ["sqrt", 0], ["x", 0], ["tx", 0], ["2", 0], ["y", 0], ["ty", 0], ["2", 0], ["d", 0], ["2", 0], ["dt", 0], ["da", 0], ["sqrt", 0], ["ax", 0], ["x", 0], ["2", 0], ["ay", 0], ["y", 0], ["2", 0], ["dat", 0], ["da", 0], ["dt", 0], ["x", 0], ["y", 0], ["if", 0], ["dat", 0], ["0", 0], ["mina", 0], ["0", 0], ["mina", 0], ["mina2", 0], ["dat", 0], ["mina", 0], ["elif", 0], ["dat", 0], ["0", 0], ["mina2", 0], ["0", 0], ["mina2", 0], ["dat", 0], ["db", 0], ["sqrt", 0], ["bx", 0], ["x", 0], ["2", 0], ["by", 0], ["y", 0], ["2", 0], ["dbt", 0], ["db", 0], ["dt", 0], ["x", 0], ["y", 0], ["if", 0], ["dbt", 0], ["0", 0], ["minb", 0], ["0", 0], ["minb", 0], ["minb2", 0], ["dbt", 0], ["minb", 0], ["elif", 0], ["dbt", 0], ["0", 0], ["minb2", 0], ["0", 0], ["minb2", 0], ["dbt", 0], ["if", 0], ["n", 0], ["2", 0], ["and", 0], ["mina", 0], ["0", 0], ["0", 0], ["and", 0], ["minb", 0], ["0", 0], ["0", 0], ["if", 0], ["mina", 0], ["1", 0], ["minb", 0], ["1", 0], ["or", 0], ["mina", 0], ["2", 0], ["minb", 0], ["2", 0], ["d", 0], ["mina", 0], ["0", 0], ["minb", 0], ["0", 0], ["elif", 0], ["mina2", 0], ["0", 0], ["0", 0], ["and", 0], ["minb2", 0], ["0", 0], ["0", 0], ["d", 0], ["min", 0], ["mina", 0], ["0", 0], ["minb2", 0], ["0", 0], ["mina2", 0], ["0", 0], ["minb", 0], ["0", 0], ["elif", 0], ["mina2", 0], ["0", 0], ["0", 0], ["d", 0], ["min", 0], ["mina", 0], ["0", 0], ["mina2", 0], ["0", 0], ["minb", 0], ["0", 0], ["elif", 0], ["minb2", 0], ["0", 0], ["0", 0], ["d", 0], ["min", 0], ["mina", 0], ["0", 0], ["minb2", 0], ["0", 0], ["minb", 0], ["0", 0], ["else", 0], ["d", 0], ["min", 0], ["mina", 0], ["0", 0], ["minb", 0], ["0", 0], ["else", 0], ["d", 0], ["min", 0], ["mina", 0], ["0", 0], ["minb", 0], ["0", 0], ["print", 0], ["d", 0], ["read", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["dis", 0], ["x1", 0], ["y1", 0], ["x2", 0], ["y2", 0], ["return", 0], ["x1", 0], ["x2", 0], ["2", 0], ["y1", 0], ["y2", 0], ["2", 0], ["0", 0], ["5", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["read", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["read", 0], ["dist", 0], ["dis", 0], ["tx", 0], ["ty", 0], ["x", 0], ["y", 0], ["a", 0], ["append", 0], ["dis", 0], ["ax", 0], ["ay", 0], ["x", 0], ["y", 0], ["dist", 0], ["i", 0], ["b", 0], ["append", 0], ["dis", 0], ["bx", 0], ["by", 0], ["x", 0], ["y", 0], ["dist", 0], ["i", 0], ["sum", 0], ["dist", 0], ["2", 0], ["a", 0], ["sort", 0], ["b", 0], ["sort", 0], ["if", 0], ["n", 0], ["1", 0], ["and", 0], ["a", 0], ["0", 0], ["1", 0], ["b", 0], ["0", 0], ["1", 0], ["ans", 0], ["min", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 1], ["0", 1], ["0", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 0], ["1", 0], ["0", 0], ["a", 0], ["1", 0], ["0", 0], ["b", 0], ["0", 0], ["0", 0], ["else", 0], ["ans", 0], ["min", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 0], ["0", 0], ["0", 0], ["if", 0], ["n", 0], ["1", 0], ["ans", 0], ["min", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 0], ["0", 0], ["0", 0], ["ans", 0], ["print", 0], ["ans", 0], ["sum", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["od", 0], ["co", 0], ["objects", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["objects", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["od", 0], ["append", 0], ["tx", 0], ["x", 0], ["2", 0], ["ty", 0], ["y", 0], ["2", 0], ["0", 0], ["5", 0], ["co", 0], ["append", 0], ["x", 0], ["y", 0], ["asaved", 0], ["0", 0], ["0", 0], ["asaved2", 0], ["0", 0], ["0", 0], ["ma", 0], ["10", 0], ["25", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["objects", 0], ["x", 0], ["co", 0], ["i", 0], ["0", 0], ["y", 0], ["co", 0], ["i", 0], ["1", 0], ["saved", 0], ["od", 0], ["i", 0], ["ax", 0], ["x", 0], ["2", 0], ["ay", 0], ["y", 0], ["2", 0], ["0", 0], ["5", 0], ["ma", 0], ["max", 0], ["ma", 0], ["saved", 0], ["if", 0], ["saved", 0], ["asaved", 0], ["0", 0], ["asaved2", 0], ["0", 0], ["asaved", 0], ["0", 0], ["asaved2", 0], ["1", 0], ["asaved", 0], ["1", 0], ["asaved", 0], ["0", 0], ["saved", 0], ["asaved", 0], ["1", 0], ["i", 0], ["elif", 0], ["saved", 0], ["asaved2", 0], ["0", 0], ["asaved2", 0], ["0", 0], ["saved", 0], ["asaved2", 0], ["1", 0], ["i", 0], ["bsaved", 0], ["0", 0], ["0", 0], ["bsaved2", 0], ["0", 0], ["0", 0], ["mb", 0], ["10", 0], ["25", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["objects", 0], ["x", 0], ["co", 0], ["i", 0], ["0", 0], ["y", 0], ["co", 0], ["i", 0], ["1", 0], ["saved", 0], ["od", 0], ["i", 0], ["bx", 0], ["x", 0], ["2", 0], ["by", 0], ["y", 0], ["2", 0], ["0", 0], ["5", 0], ["mb", 0], ["max", 0], ["mb", 0], ["saved", 0], ["if", 0], ["saved", 0], ["bsaved", 0], ["0", 0], ["bsaved2", 0], ["1", 0], ["bsaved", 0], ["1", 0], ["bsaved2", 0], ["0", 0], ["bsaved", 0], ["0", 0], ["bsaved", 0], ["0", 0], ["saved", 0], ["bsaved", 0], ["1", 0], ["i", 0], ["elif", 0], ["saved", 0], ["bsaved2", 0], ["0", 0], ["bsaved2", 0], ["0", 0], ["saved", 0], ["bsaved2", 0], ["1", 0], ["i", 0], ["tot", 0], ["2", 0], ["sum", 0], ["od", 0], ["if", 0], ["mb", 0], ["0", 0], ["and", 0], ["ma", 0], ["0", 0], ["tot", 0], ["max", 0], ["mb", 0], ["ma", 0], ["elif", 0], ["bsaved", 0], ["1", 0], ["asaved", 0], ["1", 0], ["tot", 0], ["max", 0], ["asaved", 0], ["0", 0], ["bsaved2", 0], ["0", 0], ["asaved2", 0], ["0", 0], ["bsaved", 0], ["0", 0], ["else", 0], ["tot", 0], ["asaved", 0], ["0", 0], ["bsaved", 0], ["0", 0], ["print", 0], ["tot", 0], ["read", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["dis", 0], ["x1", 0], ["y1", 0], ["x2", 0], ["y2", 0], ["return", 0], ["x1", 0], ["x2", 0], ["2", 0], ["y1", 0], ["y2", 0], ["2", 0], ["0", 0], ["5", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["read", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["read", 0], ["dist", 0], ["dis", 0], ["tx", 0], ["ty", 0], ["x", 0], ["y", 0], ["a", 0], ["append", 0], ["dis", 0], ["ax", 0], ["ay", 0], ["x", 0], ["y", 0], ["dist", 0], ["i", 0], ["b", 0], ["append", 0], ["dis", 0], ["bx", 0], ["by", 0], ["x", 0], ["y", 0], ["dist", 0], ["i", 0], ["sum", 0], ["dist", 0], ["2", 0], ["a", 0], ["sort", 0], ["b", 0], ["sort", 0], ["if", 0], ["n", 0], ["1", 0], ["and", 0], ["a", 0], ["0", 0], ["1", 0], ["b", 0], ["0", 0], ["1", 0], ["ans", 0], ["min", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 1], ["0", 1], ["0", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 0], ["1", 0], ["0", 0], ["a", 0], ["1", 0], ["0", 0], ["b", 0], ["0", 0], ["0", 0], ["else", 0], ["ans", 0], ["min", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 0], ["0", 0], ["0", 0], ["if", 0], ["n", 0], ["1", 0], ["ans", 0], ["min", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 0], ["0", 0], ["0", 0], ["ans", 0], ["print", 0], ["ans", 0], ["sum", 0], ["made", 0], ["by", 0], ["mostafa", 0], ["khaled", 0], ["import", 0], ["math", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["int", 0], ["coord", 0], ["for", 0], ["coord", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["y", 0], ["mindis", 0], ["0", 0], ["diff1", 0], ["diff2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["xi", 0], ["yi", 0], ["int", 0], ["coord", 0], ["for", 0], ["coord", 0], ["in", 0], ["input", 0], ["split", 0], ["x", 0], ["append", 0], ["xi", 0], ["y", 0], ["append", 0], ["yi", 0], ["disbin", 0], ["math", 0], ["sqrt", 0], ["xi", 0], ["tx", 0], ["2", 0], ["yi", 0], ["ty", 0], ["2", 0], ["diff1", 0], ["append", 0], ["math", 0], ["sqrt", 0], ["ax", 0], ["xi", 0], ["2", 0], ["ay", 0], ["yi", 0], ["2", 0], ["disbin", 0], ["i", 0], ["diff2", 0], ["append", 0], ["math", 0], ["sqrt", 0], ["bx", 0], ["xi", 0], ["2", 0], ["by", 0], ["yi", 0], ["2", 0], ["disbin", 0], ["i", 0], ["mindis", 0], ["2", 0], ["disbin", 0], ["diff1", 0], ["sort", 0], ["diff2", 0], ["sort", 0], ["ans", 0], ["min", 0], ["mindis", 0], ["diff1", 0], ["0", 0], ["0", 0], ["mindis", 0], ["diff2", 0], ["0", 0], ["0", 0], ["if", 0], ["diff1", 0], ["0", 0], ["1", 0], ["diff2", 0], ["0", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["mindis", 0], ["diff1", 0], ["0", 0], ["0", 0], ["diff2", 0], ["0", 0], ["0", 0], ["elif", 0], ["n", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["mindis", 0], ["diff1", 0], ["0", 0], ["0", 0], ["diff2", 0], ["1", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["mindis", 0], ["diff1", 0], ["1", 0], ["0", 0], ["diff2", 0], ["0", 0], ["0", 0], ["print", 0], ["ans", 0], ["import", 0], ["math", 0], ["r", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["r", 0], ["n", 0], ["int", 0], ["input", 0], ["dp", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["r", 0], ["da", 0], ["db", 0], ["dt", 0], ["x", 0], ["ax", 0], ["2", 0], ["y", 0], ["ay", 0], ["2", 0], ["0", 0], ["5", 0], ["x", 0], ["bx", 0], ["2", 0], ["y", 0], ["by", 0], ["2", 0], ["0", 0], ["5", 0], ["x", 0], ["tx", 0], ["2", 0], ["y", 0], ["ty", 0], ["2", 0], ["0", 0], ["5", 0], ["dp", 0], ["0", 0], ["i", 0], ["dp", 0], ["0", 0], ["i", 0], ["1", 0], ["dt", 0], ["2", 0], ["dp", 0], ["1", 0], ["i", 0], ["min", 0], ["dp", 0], ["0", 0], ["i", 0], ["1", 0], ["db", 0], ["dt", 0], ["dp", 0], ["1", 0], ["i", 0], ["1", 0], ["dt", 0], ["2", 0], ["if", 0], ["i", 0], ["else", 0], ["math", 0], ["inf", 0], ["dp", 0], ["2", 0], ["i", 0], ["min", 0], ["dp", 0], ["0", 0], ["i", 0], ["1", 0], ["da", 0], ["dt", 0], ["dp", 0], ["2", 0], ["i", 0], ["1", 0], ["dt", 0], ["2", 0], ["if", 0], ["i", 0], ["else", 0], ["math", 0], ["inf", 0], ["dp", 0], ["3", 0], ["i", 0], ["min", 0], ["dp", 0], ["1", 0], ["i", 0], ["1", 0], ["da", 0], ["dt", 0], ["dp", 0], ["2", 0], ["i", 0], ["1", 0], ["db", 0], ["dt", 0], ["dp", 0], ["3", 0], ["i", 0], ["1", 0], ["dt", 0], ["2", 0], ["if", 0], ["i", 0], ["else", 0], ["math", 0], ["inf", 0], ["print", 0], ["min", 0], ["dp", 0], ["3", 0], ["n", 0], ["1", 0], ["dp", 0], ["2", 0], ["n", 0], ["1", 0], ["dp", 0], ["1", 0], ["n", 0], ["1", 0], ["coding", 0], ["utf", 0], ["8", 0], ["created", 0], ["by", 0], ["shuangquan", 0], ["huang", 0], ["at", 0], ["1", 0], ["16", 0], ["20", 0], ["import", 0], ["collections", 0], ["import", 0], ["time", 0], ["import", 0], ["os", 0], ["import", 0], ["sys", 0], ["import", 0], ["bisect", 0], ["import", 0], ["heapq", 0], ["from", 0], ["typing", 0], ["import", 0], ["list", 0], ["import", 0], ["math", 0], ["def", 0], ["dist", 0], ["posa", 0], ["posb", 0], ["return", 0], ["math", 0], ["sqrt", 0], ["posa", 0], ["0", 0], ["posb", 0], ["0", 0], ["2", 0], ["posa", 0], ["1", 0], ["posb", 0], ["1", 0], ["2", 0], ["def", 0], ["solve", 0], ["posa", 0], ["posb", 0], ["posc", 0], ["bottles", 0], ["n", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["min", 0], ["dist", 0], ["posa", 0], ["bottles", 0], ["0", 0], ["dist", 0], ["posb", 0], ["bottles", 0], ["0", 0], ["dist", 0], ["posc", 0], ["bottles", 0], ["0", 0], ["return", 0], ["bottledist", 0], ["dist", 0], ["posc", 0], ["b", 0], ["for", 0], ["b", 0], ["in", 0], ["bottles", 0], ["da", 0], ["dist", 0], ["posa", 0], ["bottles", 0], ["i", 0], ["bottledist", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["db", 0], ["dist", 0], ["posb", 0], ["bottles", 0], ["i", 0], ["bottledist", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["da", 0], ["sort", 0], ["db", 0], ["sort", 0], ["d", 0], ["2", 0], ["sum", 0], ["bottledist", 0], ["ans", 0], ["min", 0], ["d", 0], ["da", 0], ["0", 0], ["0", 0], ["d", 0], ["db", 0], ["0", 0], ["0", 0], ["if", 0], ["da", 0], ["0", 0], ["1", 0], ["db", 0], ["0", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["d", 0], ["da", 0], ["0", 0], ["0", 0], ["db", 0], ["0", 0], ["0", 0], ["else", 0], ["e", 0], ["min", 0], ["da", 0], ["0", 0], ["0", 0], ["db", 0], ["1", 0], ["0", 0], ["da", 0], ["1", 0], ["0", 0], ["db", 0], ["0", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["d", 0], ["e", 0], ["print", 0], ["ans", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["cx", 0], ["cy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["bottles", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bottles", 0], ["append", 0], ["x", 0], ["y", 0], ["solve", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["cx", 0], ["cy", 0], ["bottles", 0], ["n", 0], ["coding", 0], ["utf", 0], ["8", 0], ["created", 0], ["by", 0], ["shuangquan", 0], ["huang", 0], ["at", 0], ["1", 0], ["16", 0], ["20", 0], ["import", 0], ["collections", 0], ["import", 0], ["time", 0], ["import", 0], ["os", 0], ["import", 0], ["sys", 0], ["import", 0], ["bisect", 0], ["import", 0], ["heapq", 0], ["from", 0], ["typing", 0], ["import", 0], ["list", 0], ["import", 0], ["math", 0], ["def", 0], ["dist", 0], ["posa", 0], ["posb", 0], ["return", 0], ["math", 0], ["sqrt", 0], ["posa", 0], ["0", 0], ["posb", 0], ["0", 0], ["2", 0], ["posa", 0], ["1", 0], ["posb", 0], ["1", 0], ["2", 0], ["def", 0], ["solve", 0], ["posa", 0], ["posb", 0], ["posc", 0], ["bottles", 0], ["n", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["min", 0], ["dist", 0], ["posa", 0], ["bottles", 0], ["0", 0], ["dist", 0], ["posb", 0], ["bottles", 0], ["0", 0], ["dist", 0], ["posc", 0], ["bottles", 0], ["0", 0], ["return", 0], ["bottledist", 0], ["dist", 0], ["posc", 0], ["b", 0], ["for", 0], ["b", 0], ["in", 0], ["bottles", 0], ["da", 0], ["dist", 0], ["posa", 0], ["bottles", 0], ["i", 0], ["bottledist", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["db", 0], ["dist", 0], ["posb", 0], ["bottles", 0], ["i", 0], ["bottledist", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["2", 0], ["sum", 0], ["bottledist", 0], ["heapq", 0], ["heapify", 0], ["da", 0], ["heapq", 0], ["heapify", 0], ["db", 0], ["a0", 0], ["heapq", 0], ["heappop", 0], ["da", 0], ["b0", 0], ["heapq", 0], ["heappop", 0], ["db", 0], ["ans", 0], ["min", 0], ["d", 0], ["a0", 0], ["0", 0], ["d", 0], ["b0", 0], ["0", 0], ["if", 0], ["a0", 0], ["1", 0], ["b0", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["d", 0], ["a0", 0], ["0", 0], ["b0", 0], ["0", 0], ["else", 0], ["a1", 0], ["heapq", 0], ["heappop", 0], ["da", 0], ["b1", 0], ["heapq", 0], ["heappop", 0], ["db", 0], ["e", 0], ["min", 0], ["a0", 0], ["0", 0], ["b1", 0], ["0", 0], ["a1", 0], ["0", 0], ["b0", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["d", 0], ["e", 0], ["print", 0], ["ans", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["cx", 0], ["cy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["bottles", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bottles", 0], ["append", 0], ["x", 0], ["y", 0], ["solve", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["cx", 0], ["cy", 0], ["bottles", 0], ["n", 0], ["ax", 0], ["ay", 0], ["bx", 0], ["by", 0], ["tx", 0], ["ty", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lt", 0], ["tx", 0], ["x", 0], ["tx", 0], ["x", 0], ["ty", 0], ["y", 0], ["ty", 0], ["y", 0], ["0", 0], ["5", 0], ["la", 0], ["ax", 0], ["x", 0], ["ax", 0], ["x", 0], ["ay", 0], ["y", 0], ["ay", 0], ["y", 0], ["0", 0], ["5", 0], ["lb", 0], ["bx", 0], ["x", 0], ["bx", 0], ["x", 0], ["by", 0], ["y", 0], ["by", 0], ["y", 0], ["0", 0], ["5", 0], ["a", 0], ["la", 0], ["lt", 0], ["i", 0], ["b", 0], ["lb", 0], ["lt", 0], ["i", 0], ["res", 0], ["lt", 0], ["a", 0], ["sort", 0], ["b", 0], ["sort", 0], ["res", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["1", 0], ["b", 0], ["0", 0], ["1", 0], ["and", 0], ["n", 0], ["1", 0], ["res", 0], ["min", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 1], ["0", 1], ["0", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 0], ["1", 0], ["0", 0], ["a", 0], ["1", 0], ["0", 0], ["b", 0], ["0", 0], ["0", 0], ["else", 0], ["if", 0], ["a", 0], ["0", 0], ["1", 0], ["b", 0], ["0", 0], ["1", 0], ["res", 0], ["min", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 0], ["0", 0], ["0", 0], ["else", 0], ["res", 0], ["min", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 0], ["0", 0], ["0", 0], ["a", 0], ["0", 0], ["0", 0], ["b", 0], ["0", 0], ["0", 0], ["print", 0], ["res", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0033456005352960855, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0023875422001885705, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.019326891036321226, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.019326891036321226, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00234192037470726, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00234192037470726, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.019326891036321226, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.019326891036321226, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nInna is a great piano player and Dima is a modest guitar player. Dima has recently written a song and they want to play it together. Of course, Sereja wants to listen to the song very much. \n\nA song is a sequence of notes. Dima and Inna want to play each note at the same time. At that, they can play the i-th note at volume v (1 ≤ v ≤ a_{i}; v is an integer) both on the piano and the guitar. They should retain harmony, so the total volume with which the i-th note was played on the guitar and the piano must equal b_{i}. If Dima and Inna cannot play a note by the described rules, they skip it and Sereja's joy drops by 1. But if Inna and Dima play the i-th note at volumes x_{i} and y_{i} (x_{i} + y_{i} = b_{i}) correspondingly, Sereja's joy rises by x_{i}·y_{i}. \n\nSereja has just returned home from the university and his current joy is 0. Help Dima and Inna play the song so as to maximize Sereja's total joy after listening to the whole song!\n\n\n-----Input-----\n\nThe first line of the input contains integer n (1 ≤ n ≤ 10^5) — the number of notes in the song. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 10^6). The third line contains n integers b_{i} (1 ≤ b_{i} ≤ 10^6).\n\n\n-----Output-----\n\nIn a single line print an integer — the maximum possible joy Sereja feels after he listens to a song.\n\n\n-----Examples-----\nInput\n3\n1 1 2\n2 2 3\n\nOutput\n4\n\nInput\n1\n2\n5\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample, Dima and Inna play the first two notes at volume 1 (1 + 1 = 2, the condition holds), they should play the last note at volumes 1 and 2. Sereja's total joy equals: 1·1 + 1·1 + 1·2 = 4.\n\nIn the second sample, there is no such pair (x, y), that 1 ≤ x, y ≤ 2, x + y = 5, so Dima and Inna skip a note. Sereja's total joy equals -1.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, a, b = input(), map(int, input().split()), map(int, input().split())\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n\tif 2 * a[i] < b[i]:\n\t\ts -= 1\n\telse:\n\t\tx = b[i] // 2\n\t\ty = b[i] - x\n\t\tif x * y != 0:\n\t\t\ts += x * y\n\t\telse:\n\t\t\ts -= 1\nprint(s)\n\n# 10\n# 1 2 3 4 5 6 7 8 9 10\n# 1 2 3 4 5 6 7 8 9 10\n", "R = lambda:list(map(int, input().split()))\nn, = R()\na = R()\nb = R()\ns = 0\nfor i in range(n):\n\tif 2 * a[i] < b[i] or b[i] == 1:\n\t\ts -= 1\n\telse:\n\t\tx = b[i] // 2\n\t\ty = b[i] - x\n\t\ts += x * y\nprint(s)\n", "n = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n\tif 2 * a[i] >= b[i] and b[i] > 1:\n\t\tx = b[i] // 2\n\t\tans += (x * (b[i] - x))\n\telse:\n\t\tans -= 1\nprint(ans)\n", "n = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nsum = 0\nfor i in range(n):\n\tif b[i] == 1 or a[i] + a[i] < b[i]:\n\t\tsum = sum - 1\n\telse:\n\t\tsum = sum + (b[i] // 2) * (b[i] - b[i] // 2)\nprint(sum)\n", "from math import *\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nres = 0\nfor i in range(n):\n\tif 2 * a[i] < b[i] or b[i] == 1:\n\t\tres -= 1\n\telse: res += b[i] // 2 * (b[i] - (b[i] // 2))\nprint(res)\n", "n, a, b = input(), map(int, input().split()), map(int, input().split())\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n,j=int(input()),0\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nfor i in range(n):\n\tif b[i]>a[i]*2 or b[i]==1:j-=1\n\telse: j+=(b[i]//2)*(b[i]-b[i]//2)\nprint(j)\n#WA Test:3,4,5,Hoping for 6\n", "n = int(input())\na,b = list(map(int,input().split())), list(map(int,input().split()))\nr = 0\nfor i in range(n):\n\tif 2*a[i] >= b[i] and b[i]>1:\n\t\tx = b[i]//2\n\t\ty = b[i]-x\n\t\tr += x*y\n\telse:\n\t\tr -= 1\nprint(r)\n", "n = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nhappiness = 0\nfor i in range(n):\n\tif (b[i] + 1) // 2 <= a[i] and b[i] > 1:\n\t\thappiness += (b[i] // 2) * ((b[i] + 1) // 2)\n\telse:\n\t\thappiness -= 1\nprint(happiness)\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n", "n,j=int(input()),0\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nfor i in range(n):\n\tif b[i]>a[i]*2 or b[i]==1:j-=1\n\telse: j+=(b[i]//2)*(b[i]-b[i]//2)\nprint(j)\n", "n, a, b = input(), list(map(int, input().split())), list(map(int, input().split()))\n\nprint(sum((y // 2) * (y - y // 2) if y > 1 and 2 * x >= y else -1 for x, y in zip(a, b)))\n\n\n\n# Made By Mostafa_Khaled\n", "import math\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=int(0)\nfor i in range(n):\n\tif b[i]== 1:\n\t\tc-=1\n\telif a[i]*2 < b[i]:\n\t\tc-=1\n\telse:\n\t\tif b[i]%2 == 0:\n\t\t\tc+=int((b[i]/2)**2)\n\t\telse:\n\t\t\tc+=int((int(math.ceil(b[i]/2)))*(int(math.floor(b[i]/2))))\nprint(c)\n", "import math\nn = int(input())\naList = list(map(int,input().split()))\nbList = list(map(int,input().split()))\njoy = 0\nfor i in range(n):\n\tif bList[i] == 1:\n\t\tjoy = joy - 1\n\telse:\n\t\tif bList[i] % 2 == 0:\n\t\t\tb1 = bList[i] / 2\n\t\t\tb2 = bList[i] / 2\n\t\telse:\n\t\t\tb1 = math.floor(bList[i] / 2)\n\t\t\tb2 = math.ceil(bList[i] / 2)\n\t\tif b2 <= aList[i]:\n\t\t\tjoy = joy + b1 * b2\n\t\telse:\n\t\t\tjoy = joy - 1\nprint(int(joy))\n", "def great_sum_finder(num, rang):\n\tif abs(num - rang) > rang or num == 1:\n\t\treturn -1\n\tif rang == 1:\n\t\treturn 1\n\tif num < rang:\n\t\treturn great_sum_finder(num, num - 1)\n\treturn (num // 2) * (num - num // 2)\n\n\nn = int(input())\na = input().split()\nb = input().split()\na = list(map(int, a))\nb = list(map(int, b))\njoy = 0\nfor i in range(n):\n\tjoy += great_sum_finder(b[i], a[i])\nprint(joy)\n", "import math\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=int(0)\nfor i in range(n):\n\tif b[i]== 1:\n\t\tc-=1\n\telif a[i]*2 < b[i]:\n\t\tc-=1\n\telse:\n\t\tif b[i]%2 == 0:\n\t\t\tc+=int((b[i]/2)**2)\n\t\telse:\n\t\t\tc+=int((int(math.ceil(b[i]/2)))*(int(math.floor(b[i]/2))))\nprint(c)\n", "import math\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nres, v1, v2 = 0, 0, 0\nfor i in range(n):\n\tif b[i]>1 and b[i]<=2*a[i]:\n\t\tv1 = math.ceil(b[i]/2)\n\t\tv2 = b[i]-v1\n\t\tres += v1*v2\n\telse:\n\t\tres -= 1\nprint(res)\n"], "id": "id8288"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8288", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["inna", 1], ["is", 1], ["a", 1], ["great", 1], ["piano", 1], ["player", 1], ["and", 1], ["dima", 1], ["is", 1], ["a", 1], ["modest", 1], ["guitar", 1], ["player", 1], ["dima", 1], ["has", 1], ["recently", 1], ["written", 1], ["a", 1], ["song", 1], ["and", 1], ["they", 1], ["want", 1], ["to", 1], ["play", 1], ["it", 1], ["together", 1], ["of", 1], ["course", 1], ["sereja", 1], ["wants", 1], ["to", 1], ["listen", 1], ["to", 1], ["the", 1], ["song", 1], ["very", 1], ["much", 1], ["a", 1], ["song", 1], ["is", 1], ["a", 1], ["sequence", 1], ["of", 1], ["notes", 1], ["dima", 1], ["and", 1], ["inna", 1], ["want", 1], ["to", 1], ["play", 1], ["each", 1], ["note", 1], ["at", 1], ["the", 1], ["same", 1], ["time", 1], ["at", 1], ["that", 1], ["they", 1], ["can", 1], ["play", 0], ["the", 0], ["i", 0], ["th", 0], ["note", 0], ["at", 0], ["volume", 0], ["v", 0], ["1", 0], ["≤", 0], ["v", 0], ["≤", 0], ["a", 0], ["i", 0], ["v", 1], ["is", 1], ["an", 1], ["integer", 1], ["both", 1], ["on", 1], ["the", 1], ["piano", 1], ["and", 1], ["the", 1], ["guitar", 1], ["they", 1], ["should", 1], ["retain", 1], ["harmony", 1], ["so", 1], ["the", 1], ["total", 1], ["volume", 1], ["with", 1], ["which", 1], ["the", 1], ["i", 1], ["th", 0], ["note", 0], ["was", 0], ["played", 0], ["on", 0], ["the", 0], ["guitar", 0], ["and", 0], ["the", 0], ["piano", 0], ["must", 0], ["equal", 0], ["b", 0], ["i", 0], ["if", 1], ["dima", 1], ["and", 1], ["inna", 1], ["cannot", 1], ["play", 1], ["a", 1], ["note", 1], ["by", 1], ["the", 1], ["described", 1], ["rules", 1], ["they", 1], ["skip", 1], ["it", 1], ["and", 1], ["sereja", 1], ["s", 1], ["joy", 1], ["drops", 1], ["by", 1], ["1", 1], ["but", 0], ["if", 0], ["inna", 0], ["and", 0], ["dima", 0], ["play", 0], ["the", 0], ["i", 0], ["th", 0], ["note", 0], ["at", 0], ["volumes", 0], ["x", 0], ["i", 0], ["and", 0], ["y", 0], ["i", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["b", 0], ["i", 0], ["correspondingly", 0], ["sereja", 0], ["s", 0], ["joy", 0], ["rises", 0], ["by", 0], ["x", 0], ["i", 0], ["·y", 0], ["i", 0], ["sereja", 1], ["has", 1], ["just", 1], ["returned", 1], ["home", 1], ["from", 1], ["the", 1], ["university", 1], ["and", 1], ["his", 1], ["current", 1], ["joy", 1], ["is", 1], ["0", 1], ["help", 1], ["dima", 1], ["and", 1], ["inna", 1], ["play", 1], ["the", 1], ["song", 1], ["so", 1], ["as", 1], ["to", 0], ["maximize", 0], ["sereja", 0], ["s", 0], ["total", 0], ["joy", 0], ["after", 0], ["listening", 0], ["to", 0], ["the", 0], ["whole", 0], ["song", 0], ["input", 0], ["the", 1], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 1], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["—", 1], ["the", 1], ["number", 0], ["of", 0], ["notes", 0], ["in", 0], ["the", 0], ["song", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["a", 0], ["i", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["10", 0], ["6", 0], ["the", 0], ["third", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["b", 0], ["i", 0], ["1", 0], ["≤", 0], ["b", 0], ["i", 0], ["≤", 0], ["10", 0], ["6", 0], ["output", 0], ["in", 1], ["a", 1], ["single", 1], ["line", 1], ["print", 1], ["an", 1], ["integer", 1], ["—", 1], ["the", 0], ["maximum", 0], ["possible", 0], ["joy", 0], ["sereja", 0], ["feels", 0], ["after", 0], ["he", 0], ["listens", 0], ["to", 0], ["a", 0], ["song", 0], ["examples", 0], ["input", 0], ["3", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["2", 0], ["3", 0], ["output", 0], ["4", 0], ["input", 0], ["1", 0], ["2", 0], ["5", 0], ["output", 0], ["1", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["sample", 1], ["dima", 1], ["and", 1], ["inna", 1], ["play", 1], ["the", 1], ["first", 1], ["two", 1], ["notes", 1], ["at", 1], ["volume", 1], ["1", 1], ["1", 1], ["1", 1], ["2", 1], ["the", 1], ["condition", 1], ["holds", 1], ["they", 1], ["should", 1], ["play", 1], ["the", 1], ["last", 1], ["note", 1], ["at", 1], ["volumes", 1], ["1", 1], ["and", 1], ["2", 1], ["sereja", 1], ["s", 1], ["total", 1], ["joy", 1], ["equals", 1], ["1·1", 1], ["1·1", 1], ["1·2", 1], ["4", 1], ["in", 1], ["the", 1], ["second", 1], ["sample", 1], ["there", 1], ["is", 1], ["no", 1], ["such", 1], ["pair", 1], ["x", 1], ["y", 1], ["that", 1], ["1", 1], ["≤", 1], ["x", 1], ["y", 1], ["≤", 1], ["2", 1], ["x", 1], ["y", 1], ["5", 1], ["so", 1], ["dima", 0], ["and", 0], ["inna", 0], ["skip", 0], ["a", 0], ["note", 0], ["sereja", 0], ["s", 0], ["total", 0], ["joy", 0], ["equals", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5516304347826086, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5516304347826086, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7894736842105263, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7894736842105263, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5516304347826086, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5516304347826086, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7894736842105263, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7894736842105263, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["a", 0], ["b", 0], ["input", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["2", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["s", 0], ["1", 0], ["else", 0], ["x", 0], ["b", 0], ["i", 0], ["2", 0], ["y", 0], ["b", 0], ["i", 0], ["x", 0], ["if", 0], ["x", 0], ["y", 0], ["0", 0], ["s", 0], ["x", 0], ["y", 0], ["else", 0], ["s", 0], ["1", 0], ["print", 0], ["s", 0], ["10", 1587], ["1", 5598], ["2", 5623], ["3", 5591], ["4", 5556], ["5", 5531], ["6", 5530], ["7", 5537], ["8", 5382], ["9", 0], ["10", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["8", 0], ["9", 0], ["10", 0], ["r", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["r", 0], ["a", 0], ["r", 0], ["b", 0], ["r", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["2", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["or", 0], ["b", 0], ["i", 0], ["1", 0], ["s", 0], ["1", 0], ["else", 0], ["x", 0], ["b", 0], ["i", 0], ["2", 0], ["y", 0], ["b", 0], ["i", 0], ["x", 0], ["s", 0], ["x", 0], ["y", 0], ["print", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["2", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["and", 0], ["b", 0], ["i", 0], ["1", 0], ["x", 0], ["b", 0], ["i", 0], ["2", 0], ["ans", 0], ["x", 0], ["b", 0], ["i", 0], ["x", 0], ["else", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["or", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["sum", 0], ["sum", 0], ["1", 0], ["else", 0], ["sum", 0], ["sum", 0], ["b", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["sum", 0], ["from", 0], ["math", 0], ["import", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["2", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["or", 0], ["b", 0], ["i", 0], ["1", 0], ["res", 0], ["1", 0], ["else", 0], ["res", 0], ["b", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["res", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["j", 0], ["int", 0], ["input", 0], ["0", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["2", 0], ["or", 0], ["b", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["else", 0], ["j", 0], ["b", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["j", 0], ["wa", 0], ["test", 0], ["3", 0], ["4", 0], ["5", 0], ["hoping", 0], ["for", 0], ["6", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["2", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["and", 0], ["b", 0], ["i", 0], ["1", 0], ["x", 0], ["b", 0], ["i", 0], ["2", 0], ["y", 0], ["b", 0], ["i", 0], ["x", 0], ["r", 0], ["x", 0], ["y", 0], ["else", 0], ["r", 0], ["1", 0], ["print", 0], ["r", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["happiness", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["2", 0], ["a", 0], ["i", 0], ["and", 0], ["b", 0], ["i", 0], ["1", 0], ["happiness", 0], ["b", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["1", 0], ["2", 0], ["else", 0], ["happiness", 0], ["1", 0], ["print", 0], ["happiness", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["n", 0], ["j", 0], ["int", 0], ["input", 0], ["0", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["2", 0], ["or", 0], ["b", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["else", 0], ["j", 0], ["b", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["j", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sum", 0], ["y", 0], ["2", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["2", 0], ["x", 0], ["y", 0], ["else", 0], ["1", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["made", 0], ["by", 0], ["mostafa", 0], ["khaled", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["int", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["c", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["c", 0], ["1", 0], ["else", 0], ["if", 0], ["b", 0], ["i", 0], ["2", 0], ["0", 0], ["c", 0], ["int", 0], ["b", 0], ["i", 0], ["2", 0], ["2", 0], ["else", 0], ["c", 0], ["int", 0], ["int", 0], ["math", 0], ["ceil", 0], ["b", 0], ["i", 0], ["2", 0], ["int", 0], ["math", 0], ["floor", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["c", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["alist", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["blist", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["joy", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["blist", 0], ["i", 0], ["1", 0], ["joy", 0], ["joy", 0], ["1", 0], ["else", 0], ["if", 0], ["blist", 0], ["i", 0], ["2", 0], ["0", 0], ["b1", 0], ["blist", 0], ["i", 0], ["2", 0], ["b2", 0], ["blist", 0], ["i", 0], ["2", 0], ["else", 0], ["b1", 0], ["math", 0], ["floor", 0], ["blist", 0], ["i", 0], ["2", 0], ["b2", 0], ["math", 0], ["ceil", 0], ["blist", 0], ["i", 0], ["2", 0], ["if", 0], ["b2", 0], ["alist", 0], ["i", 0], ["joy", 0], ["joy", 0], ["b1", 0], ["b2", 0], ["else", 0], ["joy", 0], ["joy", 0], ["1", 0], ["print", 0], ["int", 0], ["joy", 0], ["def", 0], ["great", 0], ["sum", 0], ["finder", 0], ["num", 0], ["rang", 0], ["if", 0], ["abs", 0], ["num", 0], ["rang", 0], ["rang", 0], ["or", 0], ["num", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["rang", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["num", 0], ["rang", 0], ["return", 0], ["great", 0], ["sum", 0], ["finder", 0], ["num", 0], ["num", 0], ["1", 0], ["return", 0], ["num", 0], ["2", 0], ["num", 0], ["num", 0], ["2", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["split", 0], ["b", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["b", 0], ["joy", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["joy", 0], ["great", 0], ["sum", 0], ["finder", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["print", 0], ["joy", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["int", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["c", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["2", 0], ["b", 0], ["i", 0], ["c", 0], ["1", 0], ["else", 0], ["if", 0], ["b", 0], ["i", 0], ["2", 0], ["0", 0], ["c", 0], ["int", 0], ["b", 0], ["i", 0], ["2", 0], ["2", 0], ["else", 0], ["c", 0], ["int", 0], ["int", 0], ["math", 0], ["ceil", 0], ["b", 0], ["i", 0], ["2", 0], ["int", 0], ["math", 0], ["floor", 0], ["b", 0], ["i", 0], ["2", 0], ["print", 0], ["c", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["v1", 0], ["v2", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["and", 0], ["b", 0], ["i", 0], ["2", 0], ["a", 0], ["i", 0], ["v1", 0], ["math", 0], ["ceil", 0], ["b", 0], ["i", 0], ["2", 0], ["v2", 0], ["b", 0], ["i", 0], ["v1", 0], ["res", 0], ["v1", 0], ["v2", 0], ["else", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.007537688442211055, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 1.736582201155586e-06, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.017412935323383085, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 1.0972233978187202e-05, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given an array $a_1, a_2, \\dots , a_n$. Array is good if for each pair of indexes $i < j$ the condition $j - a_j \\ne i - a_i$ holds. Can you shuffle this array so that it becomes good? To shuffle an array means to reorder its elements arbitrarily (leaving the initial order is also an option).\n\nFor example, if $a = [1, 1, 3, 5]$, then shuffled arrays $[1, 3, 5, 1]$, $[3, 5, 1, 1]$ and $[5, 3, 1, 1]$ are good, but shuffled arrays $[3, 1, 5, 1]$, $[1, 1, 3, 5]$ and $[1, 1, 5, 3]$ aren't.\n\nIt's guaranteed that it's always possible to shuffle an array to meet this condition.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) — the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 100$) — the length of array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots , a_n$ ($1 \\le a_i \\le 100$).\n\n\n-----Output-----\n\nFor each test case print the shuffled version of the array $a$ which is good.\n\n\n-----Example-----\nInput\n3\n1\n7\n4\n1 1 3 5\n6\n3 2 1 5 6 4\n\nOutput\n7\n1 5 1 3\n2 4 6 1 3 5\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["q = int(input())\nfor irweewr in range(q):\n\tn = int(input())\n\tl = list(map(int,input().split()))\n\tl.sort()\n\tl.reverse()\n\tprint(*l)\n", "t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\ta = list(map(int,input().split()))\n\tprint(*sorted(a)[::-1])\n", "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\n\nORDA = 97\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n\tif n < 2: return list()\n\tprime = [True for _ in range(n + 1)]\n\tp = 3\n\twhile p * p <= n:\n\t\tif prime[p]:\n\t\t\tfor i in range(p * 2, n + 1, p):\n\t\t\t\tprime[i] = False\n\t\tp += 2\n\tr = [2]\n\tfor p in range(3, n + 1, 2):\n\t\tif prime[p]:\n\t\t\tr.append(p)\n\treturn r\ndef divs(n, start=1):\n\tr = []\n\tfor i in range(start, int(math.sqrt(n) + 1)):\n\t\tif (n % i == 0):\n\t\t\tif (n / i == i):\n\t\t\t\tr.append(i)\n\t\t\telse:\n\t\t\t\tr.extend([i, n // i])\n\treturn r\ndef divn(n, primes):\n\tdivs_number = 1\n\tfor i in primes:\n\t\tif n == 1:\n\t\t\treturn divs_number\n\t\tt = 1\n\t\twhile n % i == 0:\n\t\t\tt += 1\n\t\t\tn //= i\n\t\tdivs_number *= t\ndef prime(n):\n\tif n == 2: return True\n\tif n % 2 == 0 or n <= 1: return False\n\tsqr = int(math.sqrt(n)) + 1\n\tfor d in range(3, sqr, 2):\n\t\tif n % d == 0: return False\n\treturn True\ndef convn(number, base):\n\tnewnumber = 0\n\twhile number > 0:\n\t\tnewnumber += number % base\n\t\tnumber //= base\n\treturn newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nfor _ in range(ii()):\n\tn = ii()\n\ta = li()\n\ta.sort(reverse=True)\n\tprint(*a)\n", "t = int(input())\nfor i in range(t):\n\tn = int(input())\n\tmas = list(map(int, input().split()))\n\tmas.sort()\n\tmas.reverse()\n\tprint(*mas)\n", "from sys import stdin\n\nfor testcase in range(int(stdin.readline())):\n\tstdin.readline()\n\tprint(*reversed(sorted(map(int, stdin.readline().split()))))\n", "\n\nfor _ in range(int(input())):\n\tn=int(input())\n\ta=list(map(int,input().split()))\n\ta=sorted(a)\n\ta=a[::-1]\n\tprint(*a)\n", "import sys\n\n# inf = open('input.txt', 'r')\n# reader = (line.rstrip() for line in inf)\nreader = (line.rstrip() for line in sys.stdin)\ninput = reader.__next__\n\nt = int(input())\nfor _ in range(t):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\ta.sort(reverse=True)\n\tprint(*a)\n\n# inf.close()\n", "from sys import stdin,stdout                           #\nimport math                                            #\nimport heapq                                           #\n\t#\nt = 1                                                  #\ndef aint():                                            #\n\treturn int(input().strip())                        #\ndef lint():                                            #\n\treturn list(map(int,input().split()))              #\ndef fint():                                            #\n\treturn list(map(int,stdin.readline().split()))     #\n\t#\t\n########################################################\n\ndef main():\n\tn=aint()\n\tl=lint()\n\tl.sort()\n\tl=l[::-1]\n\tprint(*l)\n\nt=int(input())\n\n########################################################\nfor i in range(t):                                     #\n\tmain()                                             #\n", "t = int(input())\nfor tt in range(t):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\ta.sort()\n\ta = a[::-1]\n\tprint(*a)\n", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn = int(input())\n\ta = list(map(int,input().split()))\n\ta.sort(reverse=True)\n\tprint(' '.join(map(str,a)))\n", "t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\ta= list(map(int, input().split()))\n\ta.sort(reverse=True)\n\tprint(\" \".join([str(item) for item in a]))\n", "tests = int(input())\nwhile tests:\n\tn = int(input())\n\tarr = list(map(int, input().split()))\n\tarr.sort()\n\tarr.reverse()\n\tfor i in range(n):\n\t\tprint(arr[i], end=' ')\n\tprint()\n\ttests -= 1\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n\tn=int(input())\n\tA=list(map(int,input().split()))\n\tprint(*sorted(A,reverse=True))\n"], "id": "id9982"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9982", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["an", 0], ["array", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["dots", 0], ["a", 0], ["n", 0], ["array", 0], ["is", 0], ["good", 0], ["if", 0], ["for", 0], ["each", 0], ["pair", 0], ["of", 0], ["indexes", 0], ["i", 0], ["j", 0], ["the", 0], ["condition", 0], ["j", 0], ["a", 0], ["j", 0], ["ne", 0], ["i", 0], ["a", 0], ["i", 0], ["holds", 0], ["can", 0], ["you", 0], ["shuffle", 0], ["this", 0], ["array", 0], ["so", 0], ["that", 0], ["it", 0], ["becomes", 0], ["good", 0], ["to", 0], ["shuffle", 0], ["an", 0], ["array", 0], ["means", 0], ["to", 0], ["reorder", 0], ["its", 0], ["elements", 0], ["arbitrarily", 0], ["leaving", 0], ["the", 0], ["initial", 0], ["order", 0], ["is", 0], ["also", 0], ["an", 0], ["option", 0], ["for", 0], ["example", 0], ["if", 0], ["a", 0], ["1", 0], ["1", 0], ["3", 0], ["5", 0], ["then", 0], ["shuffled", 0], ["arrays", 0], ["1", 0], ["3", 0], ["5", 0], ["1", 0], ["3", 0], ["5", 0], ["1", 0], ["1", 0], ["and", 0], ["5", 0], ["3", 0], ["1", 0], ["1", 0], ["are", 0], ["good", 0], ["but", 0], ["shuffled", 0], ["arrays", 0], ["3", 0], ["1", 0], ["5", 0], ["1", 0], ["1", 0], ["1", 0], ["3", 0], ["5", 0], ["and", 0], ["1", 0], ["1", 0], ["5", 0], ["3", 0], ["aren", 0], ["t", 0], ["it", 0], ["s", 0], ["guaranteed", 0], ["that", 0], ["it", 0], ["s", 0], ["always", 0], ["possible", 0], ["to", 0], ["shuffle", 0], ["an", 0], ["array", 0], ["to", 0], ["meet", 0], ["this", 0], ["condition", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 7], ["one", 6], ["integer", 18], ["t", 4], ["1", 0], ["le", 0], ["t", 0], ["le", 0], ["100", 2], ["—", 6], ["the", 50], ["number", 0], ["of", 0], ["test", 5], ["cases", 2], ["the", 6], ["first", 6], ["line", 6], ["of", 0], ["each", 0], ["test", 0], ["case", 0], ["contains", 0], ["one", 0], ["integer", 0], ["n", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["100", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["array", 0], ["a", 0], ["the", 15], ["second", 15], ["line", 8], ["of", 8], ["each", 8], ["test", 14], ["case", 14], ["contains", 28], ["n", 30], ["integers", 35], ["a", 3], ["1", 0], ["a", 0], ["2", 0], ["dots", 0], ["a", 0], ["n", 0], ["1", 0], ["le", 0], ["a", 0], ["i", 0], ["le", 0], ["100", 0], ["output", 0], ["for", 0], ["each", 0], ["test", 0], ["case", 0], ["print", 0], ["the", 0], ["shuffled", 0], ["version", 0], ["of", 0], ["the", 0], ["array", 0], ["a", 0], ["which", 0], ["is", 0], ["good", 0], ["example", 0], ["input", 0], ["3", 0], ["1", 0], ["7", 0], ["4", 0], ["1", 0], ["1", 0], ["3", 0], ["5", 0], ["6", 0], ["3", 0], ["2", 0], ["1", 0], ["5", 0], ["6", 0], ["4", 0], ["output", 0], ["7", 0], ["1", 0], ["5", 0], ["1", 0], ["3", 0], ["2", 0], ["4", 0], ["6", 0], ["1", 0], ["3", 0], ["5", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.10043668122270742, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0156501698204755, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.21991701244813278, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.07548903378778896, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0611353711790393, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.013687876897483884, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.21161825726141079, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07493578344200749, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["q", 0], ["int", 0], ["input", 0], ["for", 0], ["irweewr", 0], ["in", 0], ["range", 0], ["q", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["sort", 0], ["l", 0], ["reverse", 0], ["print", 0], ["l", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sorted", 0], ["a", 0], ["1", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["itertools", 0], ["import", 0], ["functools", 0], ["import", 0], ["collections", 0], ["import", 0], ["operator", 0], ["import", 0], ["fileinput", 0], ["import", 0], ["copy", 0], ["orda", 0], ["97", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["mi", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["lcm", 0], ["a", 0], ["b", 0], ["return", 0], ["abs", 0], ["a", 0], ["b", 0], ["math", 0], ["gcd", 0], ["a", 0], ["b", 0], ["def", 0], ["revn", 0], ["n", 0], ["return", 0], ["str", 0], ["n", 0], ["1", 0], ["def", 0], ["dd", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["int", 0], ["def", 0], ["ddl", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["def", 0], ["sieve", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["list", 0], ["prime", 0], ["true", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["p", 0], ["3", 0], ["while", 0], ["p", 0], ["p", 0], ["n", 0], ["if", 0], ["prime", 0], ["p", 2], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["p", 0], ["2", 0], ["n", 0], ["1", 0], ["p", 0], ["prime", 0], ["i", 0], ["false", 0], ["p", 0], ["2", 0], ["r", 0], ["2", 0], ["for", 0], ["p", 0], ["in", 0], ["range", 0], ["3", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["prime", 0], ["p", 0], ["r", 0], ["append", 0], ["p", 0], ["return", 0], ["r", 0], ["def", 0], ["divs", 0], ["n", 0], ["start", 0], ["1", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["if", 0], ["n", 0], ["i", 0], ["i", 0], ["r", 0], ["append", 0], ["i", 0], ["else", 0], ["r", 0], ["extend", 0], ["i", 0], ["n", 0], ["i", 0], ["return", 0], ["r", 0], ["def", 0], ["divn", 0], ["n", 0], ["primes", 0], ["divs", 0], ["number", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["primes", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["divs", 0], ["number", 0], ["t", 0], ["1", 0], ["while", 0], ["n", 0], ["i", 0], ["0", 0], ["t", 0], ["1", 0], ["n", 0], ["i", 0], ["divs", 0], ["number", 0], ["t", 0], ["def", 0], ["prime", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["true", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["or", 0], ["n", 0], ["1", 0], ["return", 0], ["false", 0], ["sqr", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["3", 0], ["sqr", 0], ["2", 0], ["if", 0], ["n", 0], ["d", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["def", 0], ["convn", 0], ["number", 0], ["base", 0], ["newnumber", 0], ["0", 0], ["while", 0], ["number", 0], ["0", 0], ["newnumber", 0], ["number", 0], ["base", 0], ["number", 0], ["base", 0], ["return", 0], ["newnumber", 0], ["def", 0], ["cdiv", 0], ["n", 0], ["k", 0], ["return", 0], ["n", 0], ["k", 0], ["n", 0], ["k", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["ii", 0], ["n", 0], ["ii", 0], ["a", 0], ["li", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["print", 0], ["a", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["mas", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mas", 0], ["sort", 0], ["mas", 0], ["reverse", 0], ["print", 0], ["mas", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["for", 0], ["testcase", 0], ["in", 0], ["range", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["stdin", 0], ["readline", 0], ["print", 0], ["reversed", 0], ["sorted", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sorted", 0], ["a", 0], ["a", 0], ["a", 0], ["1", 0], ["print", 0], ["a", 0], ["import", 0], ["sys", 0], ["inf", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["reader", 0], ["line", 0], ["rstrip", 0], ["for", 0], ["line", 0], ["in", 0], ["inf", 0], ["reader", 0], ["line", 0], ["rstrip", 0], ["for", 0], ["line", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["input", 0], ["reader", 0], ["next", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["print", 0], ["a", 0], ["inf", 0], ["close", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["import", 0], ["math", 0], ["import", 0], ["heapq", 0], ["t", 0], ["1", 0], ["def", 0], ["aint", 0], ["return", 0], ["int", 0], ["input", 0], ["strip", 0], ["def", 0], ["lint", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["fint", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["main", 0], ["n", 0], ["aint", 0], ["l", 0], ["lint", 0], ["l", 0], ["sort", 0], ["l", 0], ["l", 0], ["1", 0], ["print", 0], ["l", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["main", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["tt", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["a", 0], ["a", 0], ["1", 0], ["print", 0], ["a", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["print", 0], ["join", 0], ["str", 0], ["item", 0], ["for", 0], ["item", 0], ["in", 0], ["a", 0], ["tests", 0], ["int", 0], ["input", 0], ["while", 0], ["tests", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["sort", 0], ["arr", 0], ["reverse", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["arr", 0], ["i", 0], ["end", 0], ["print", 0], ["tests", 0], ["1", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["tests", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sorted", 0], ["a", 0], ["reverse", 0], ["true", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0032626427406199023, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0016313213703099511, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.0224, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0112, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0032626427406199023, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0016313213703099511, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0224, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0112, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nAtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.\n\n-----Constraints-----\n - 1 ≤ N ≤ 10^5\n - 0 ≤ x_i ≤ 10^5\n - 0 ≤ y_i ≤ 10^5\n - 1 ≤ t_i ≤ 10^5\n - t_i < t_{i+1} (1 ≤ i ≤ N-1)\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nt_1 x_1 y_1\nt_2 x_2 y_2\n:\nt_N x_N y_N\n\n-----Output-----\nIf AtCoDeer can carry out his plan, print Yes; if he cannot, print No.\n\n-----Sample Input-----\n2\n3 1 2\n6 1 1\n\n-----Sample Output-----\nYes\n\nFor example, he can travel as follows: (0,0), (0,1), (1,1), (1,2), (1,1), (1,0), then (1,1).\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["N = int(input())\n\nT = 0\nX = 0\nY = 0\n\nfor i in range(N):\n\tt, x, y = list(map(int, input().split()))\n\tdt = t - T\n\tdx = abs(X - x)\n\tdy = abs(Y - y)\n\tdis = dx + dy\n\tif dt < dis:\n\t\tprint(\"No\")\n\t\tbreak\n\tif (dt - dis) % 2 == 1:\n\t\tprint(\"No\")\n\t\tbreak\n\tT = t\n\tX = x\n\tY = y\nelse:\n\tprint(\"Yes\")\n", "n=int(input())\nT=0; X=0; Y=0;\nans=\"Yes\"\nfor i in range(n):\n\tt,x,y=map(int,input().split())\n\ts=t-T\n\tif s >= abs(X-x)+abs(Y-y) and (s-abs(X-x)+abs(Y-y))%2==0:\n\t\tT,X,Y = t,x,y\n\telse:\n\t\tans=\"No\"\n\t\tbreak\nprint(ans)\n", "N = int(input())\n\nlocx = 0\nlocy =0\ntime = 0\nfor i in range(N):\n\tt,x,y = map(int,input().split())\n\ttime = t-time\n\tdis = abs(locx-x)+abs(locy-y)\n\tif (time-dis)<0 :\n\t\tprint(\"No\")\n\t\treturn\n\tif (time-dis)%2 == 1:\n\t\tprint(\"No\")\n\t\treturn\n\t\t\n\t\n\ttime = t\n\tlocx = x\n\tlocy = y\n\t\t\n\t\nelse :\n\tprint(\"Yes\")\n", "from collections import deque\nN = int(input())\ntxy = [map(int, input().split()) for _ in range(N)]\nt, x, y = [list(i) for i in zip(*txy)]\nt = deque(t)\nx = deque(x)\ny = deque(y)\nt.appendleft(0)\nx.appendleft(0)\ny.appendleft(0)\nfor i in range(N):\n\tdirect = t[i+1] - t[i] - abs(x[i+1] - x[i]) - abs(y[i+1] - y[i])\n\tif direct < 0 or direct % 2 != 0:\n\t\tprint(\"No\")\n\t\treturn\nprint(\"Yes\")\n", "n = int(input())\nxx = 0\nyy = 0\ntt = 0\nfor i in range(n):\n\tt, x, y = map(int, input().split())\n\td = abs(xx - x) + abs(yy - y)\n\tif t - tt < d or (t - tt - d) % 2 == 1:\n\t\tprint('No')\n\t\treturn\n\txx = x\n\tyy = y\n\ttt = t\nprint('Yes')\n", "N = int(input())\nT = []\nXY = []\nans = \"Yes\"\n\nfor i in range(N):\n\tt,x,y = map(int,input().split())\n\tT.append(t)\n\tXY.append([x,y])\n\nif T[0]>=abs(XY[0][0])+abs(XY[0][1]) and T[0]%2==(abs(XY[0][0])+abs(XY[0][1]))%2:\n\tNone\nelse:\n\tans = \"No\"\n\nfor i in range(1,N):\n\tdT=T[i]-T[i-1]\n\tdX=abs(XY[i][0]-XY[i-1][0])\n\tdY=abs(XY[i][1]-XY[i-1][1])\n\tif dT >= dX+dY and dT%2 == (dX+dY)%2:\n\t\tNone\n\telse:\n\t\tans = \"No\"\n\nprint(ans)\n", "def main():\n\tN = int(input())\n\ttxy = [list(map(int,input().split())) for _ in range(N)]\n\ttxy = [[0,0,0]] + txy\n\t#print(txy)\n\tfor i in range(N):\n\t\ttemp = txy[i+1][0] - txy[i][0] - abs(txy[i+1][1] - txy[i][1]) - abs(txy[i+1][2] - txy[i][2])  \n\t\tif not (temp % 2 == 0 and temp >= 0):\n\t\t\tprint(\"No\")\n\t\t\treturn\n\tprint(\"Yes\")\n\t\t\nmain()\n", "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\n\nn = int(input())\n\nt, x, y = 0, 0, 0\nfor i in range(n):\n\tt_new, x_new, y_new = list(map(int, input().split()))\n\n\ttime = t_new-t\n\tdis = abs(x_new-x)+abs(y_new-y)\n\n\tif time < dis:\n\t\tprint(\"No\")\n\t\treturn\n\tif time % 2 != dis % 2:\n\t\tprint(\"No\")\n\t\treturn\n\tt, x, y = t_new, x_new, y_new\nprint(\"Yes\")\n", "N = int(input())\nt = 0\nxy = [0,0]\nans = 'Yes'\nfor i in range(N):\n\tti,xi,yi = map(int,input().split())\n\tdt = ti - t\n\tdx = abs(xi - xy[0])\n\tdy = abs(yi - xy[1])\n\tif dt < dx+dy:\n\t\tans = 'No'\n\telif dt%2 != (dx+dy)%2:\n\t\tans = 'No'\n\tt = ti\n\txy = [xi,yi]\nprint(ans)\n", "n=int(input())\nn_list=[[0,0,0]]\nfor i in range(n):\n\tn_list.append(list(map(int,input().split())))\n\nfor t in range(n):\n\tdt=n_list[t+1][0]-n_list[t][0]\n\tdist=abs(n_list[t+1][1]-n_list[t][1])+abs(n_list[t+1][2]-n_list[t][2])\n\n\tif(dist>dt):\n\t\tcan='No'\n\t\tbreak\n\txy=n_list\n\tif(dist%2 != dt%2):\n\t\tcan='No'\n\t\tbreak\n\tcan='Yes'\nprint(can)\n", "# https://atcoder.jp/contests/abc086/tasks/arc089_a\nn = int(input())\ntxy = [list(map(int, input().split())) for _ in range(n)]\n\npx, py = (0, 0)\npt = 0\n\nfor t, x, y in txy:\n\tif not (x + y <= t and (x + y) % 2 == t % 2 and abs(x - px) + abs(y - py) <= t - pt):\n\t\tprint('No')\n\t\treturn\n\tpx, py = x, y\n\tpt = t\n\nprint('Yes')\n", "N = int(input())\ntxy = [[0,0,0]] + [list(map(int,input().split())) for _ in range(N)]\n\ncheck = True\nfor i in range(1,N+1):\n\tK = txy[i][0] - txy[i-1][0]\n\ttmp = K - abs(sum(txy[i][1:]) - sum(txy[i-1][1:]))\n\tif tmp < 0 or tmp % 2 == 1:\n\t\tcheck = False\n\t\tbreak\n\t\t\nprint(\"Yes\" if check else \"No\")\n", "N=int(input())\nt=[]\nx=[]\ny=[]\nfor i in range(N):\n\ttxy=list(map(int,input().split()))\n\tt.append(txy[0])\n\tx.append(txy[1])\n\ty.append(txy[2])\n\nnow_x=0\nnow_y=0\nnow_time=0\nisOK=True\nfor i in range(N):\n\tdist=(x[i]-now_x)**2+(y[i]-now_y)**2\n\ttime=t[i]-now_time\n\n\tif dist<=time**2 and dist%2 ==time%2:\n\t\tnow_x=x[i]\n\t\tnow_y=y[i]\n\t\tnow_time=t[i]\n\telse:\n\t\tisOK=False\n\t\tbreak\n\t\t\n\nif isOK:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "n=int(input())\nt=0\nx=0\ny=0\nfor i in range(n):\n\tt_,x_,y_=map(int,input().split())\n\tt=abs(t_-t)\n\tx=abs(x_-x)\n\ty=abs(y_-y)\n\tif x+y>t:\n\t\tprint('No')\n\t\treturn\n\tif t_%2!=(x_+y_)%2:\n\t\tprint('No')\n\t\treturn\n\t\nprint('Yes')\n", "N = int(input())\nt = [0] * (N+1)\nx = [0] * (N+1)\ny = [0] * (N+1)\nfor i in range(N):\n\tt[i+1], x[i+1], y[i+1] = map(int, input().split())\n\nf = True\nfor i in range(N):\n\tdt = t[i+1] - t[i]\n\tdist = abs(x[i+1]-x[i]) + abs(y[i+1]-y[i])\n\tif dt < dist:\n\t\tf = False\n\tif dist%2 != dt%2:\n\t\tf = False\n\nprint('Yes' if f else 'No')\n", "n = int(input())\n\nprev_t, prev_x, prev_y = 0, 0, 0\nfor _ in range(n):\n\tt, x, y = map(int, input().split())\n\tif (abs(x - prev_x) + abs(y - prev_y) <= t - prev_t and\n\t\t(abs(x - prev_x) + abs(y - prev_y)) % 2 == (t - prev_t) % 2):\n\t\tprev_t, prev_x, prev_y = t, x, y\n\t\tcontinue\n\telse:\n\t\tprint('No')\n\t\tbreak\nelse:\n\tprint('Yes')\n", "N = int(input())\nl = []\nnow = [0,0,0]\nans = 'Yes'\nfor _ in range(N):\n\tinp = list(map(int,input().split()))\n\tl.append(inp)\n\nfor i in range(N):\n\tshortest = abs(l[i][1] - now[1]) + abs(l[i][2] - now[2])\n\tif shortest > l[i][0]-now[0]:\n\t\tans = 'No'\n\t\tbreak\n\ta = l[i][0] -now[0]- shortest\n\tif a % 2 !=0:\n\t\tans = 'No'\n\t\tbreak\n\telse:\n\t\tnow = l[i]\nprint(ans)\n", "n = int(input())\nx,y,t=0,0,0\n\nfor i in range(n):\n\tmt,mx,my= map(int,input().split())\n\tft = mt - t\n\tfx = abs(x-mx)\n\tfy = abs(y-my)\n\tif fx + fy > ft:\n\t\tprint(\"No\")\n\t\treturn\n\telif (ft - (fx + fy)) % 2 == 0:\n\t\tpass\n\telse:\n\t\tprint(\"No\")\n\t\treturn\n\tx,y,t=mx,my,mt\nprint(\"Yes\")\n", "N = int(input())\nt, x, y = 0, 0, 0\nans = \"Yes\"\n\nfor i in range(N):\n\tnt, nx, ny = map(int,input().split())\n\tif ((nt - t) - abs(nx - x) - abs(ny - y))%2 != 0 or abs(nx - x) + abs(ny - y) > (nt - t):\n\t\tans = \"No\"\n\t\tbreak\n\telse:\n\t\tt = nt\n\t\tx = nx\n\t\ty = ny\n\nprint(ans)\n", "\nN = int(input())\n\nres = True\npre_t, pre_x, pre_y = 0, 0, 0\nfor _ in range(N):\n\tt, x, y = list(map(int, input().split()))\n\ttmp = (t - pre_t) - abs(x - pre_x) - abs(y - pre_y)\n\tif tmp < 0 or tmp % 2 == 1:\n\t\tres = False\n\t\tbreak\n\tpre_t = t\n\tpre_x = x\n\tpre_y = y\n\t\nprint(('Yes' if res else 'No'))\n", "n = int(input())\nx, y = 0, 0\nt = 0\nfor i in range(n):\n\tti, xi, yi = list(map(int, input().split()))\n\tl = abs(xi - x + yi - y)\n\tif l <= ti - t and l % 2 == (ti - t) % 2:\n\t\tx, y = xi, yi\n\t\tt = ti\n\telse:\n\t\tprint(\"No\")\n\t\tbreak\nelse:\n\tprint(\"Yes\")\n", "from collections import namedtuple\nplan = namedtuple('plan', ['time', 'x', 'y'])\n\ndef main():\n\twith open(0) as f:\n\t\tN = int(f.readline())\n\t\tplans = []\n\t\tfor _ in range(N):\n\t\t\tt, x, y = map(int, f.readline().split())\n\t\t\tplans.append(plan(t, x, y))\n\tcurrent = plan(0, 0, 0)\n\tfor p in plans:\n\t\tt = p.time - current.time\n\t\tway = abs(p.x-current.x) + abs(p.y-current.y)\n\t\tif t < way:\n\t\t\tprint('No')\n\t\t\treturn None\n\t\tif (t - way) & 1:\n\t\t\tprint('No')\n\t\t\treturn None\n\t\tcurrent = p\n\telse:\n\t\tprint('Yes')\n\nmain()\n", "#2パターンでのfail\n#①→偶奇がstepと位置で違う\n#単純に遠すぎる\nn = int(input())\n\nt_pre =0\nx_pre =0\ny_pre =0\nfor i in range(n):\n\tt,x,y = list(map(int,input().split()))\n\tif (t-t_pre)<abs(x-x_pre)+abs(y-y_pre):\n\t\tprint('No')\n\t\tbreak\n\tif t%2 != (x+y)%2:\n\t\tprint('No')\n\t\tbreak\n\tt_pre = t\n\tx_pre =x\n\ty_pre = y\n\t\n\tif i ==n-1:\n\t\tprint('Yes')\n", "N = int(input())\ntxy = [[0, 0, 0]]\nfor i in range(N):\n\ttxy.append(list(map(int, input().split())))\n\nfor i in range(N):\n\tdt = txy[i+1][0] - txy[i][0]\n\tdx = txy[i+1][1] - txy[i][1]\n\tdy = txy[i+1][2] - txy[i][2]\n\t\n\tif dt < abs(dx + dy):\n\t\tprint('No')\n\t\tbreak\n\telse:\n\t\tif (dt - (dx + dy)) % 2 != 0:\n\t\t\tprint('No')\n\t\t\tbreak\nelse:\n\tprint('Yes')\n", "import sys\n\ninput = sys.stdin.readline\n\ndef main():\n\tans = 'Yes'\n\tn = int(input())\n\tnow = [0,0]\n\tpt = 0\n\tfor i in range(n):\n\t\tt, x, y = map(int, input().split())\n\t\td = abs((x - now[0]) + (y - now[1]))\n\t\tif d > abs(t - pt) or (t - pt)%2 != d%2:\n\t\t\tans = \"No\"\n\t\t\tbreak\n\t\tnow = [x, y]\n\t\tpt = t\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n=int(input())\ns = 0\na = 0\nb = 0\nfor i in range(n):\n\tt,x,y=map(int,input().split())\n\tif t-s - abs(x-a) - abs(y-b)>=0 and (t-s - abs(x-a) - abs(y-b)) %2 == 0:\n\t\ts = t\n\t\ta = x\n\t\tb = y\n\telse:\n\t\tprint('No')\n\t\treturn\nprint('Yes')\n", "n = int(input())\nx0 = 0\ny0 = 0\nt0 = 0\nfor i in range(n):\n  \n\tt, x, y = map(int, input().split())\n\td = abs(x - x0) + abs (y - y0)\n\tif d > t - t0:\n\t\tprint('No')\n\t\treturn\n\telif (t - t0 - d) % 2 == 1:\n\t\tprint('No')\n\t\treturn\n\telse:\n\t\tx0 = x\n\t\ty0 = y\n\t\tt0 = t\n\nprint('Yes')\n", "n = int(input())\nrx = 0\nry = 0\nrt = 0\nok = True\nfor _ in range(n):\n\tt, x, y = map(int, input().split())\n\tdist = abs(x-rx) + abs(y-ry)\n\t#print(dist)\n\tif dist <= abs(t-rt) and (abs(t-rt)-dist)%2 == 0:\n\t\trx = x\n\t\try = y\n\t\trt = t\n\telse:\n\t\tprint(\"No\")\n\t\treturn\nprint(\"Yes\")\n", "N = int(input())\nA = [[0,0,0]]\nfor i in range(N):\n\tA.append(list(map(int, input().split())))\n\nflag = True\nfor i in range(N):\n\tif not flag:\n\t\tbreak\n\ttime = int(A[i+1][0]) - int(A[i][0])\n\tdist = abs(A[i+1][1] - A[i][1]) + abs(A[i+1][2] - A[i][2]) # x2-x1 + y2-y1\n\tif time < dist:\n\t\tflag = False\n\telif time % 2 != dist % 2:\n\t\tflag = False\n\nif flag:\n\tprint('Yes')\nelse:\n\tprint('No')\n", "import numpy as np\nN = int(input())\n\ntxy = [[0,0,0]]\nfor i in range(N):\n\ttxy.append(list(map(int,input().split())))\n\nout='Yes'\nfor i in range(1,N+1):\n\tx = np.array(txy[i])\n\ty = np.array(txy[i-1])\n\tmv = abs(x-y)\n\t# print(mv)\n\tdam = mv[0] - (mv[1] + mv[2])\n\tif dam%2==1 or dam<0:\n\t\tout='No'\n\nprint(out)\n", "N = int(input())\nP = [[0,0,0]]\nfor i in range(N):\n\tt,x,y = list(map(int,input().split()))\n\tP.append([t,x,y])\njudge = True\nfor i in range(1,N+1):\n\tdt = P[i][0] - P[i-1][0]\n\tdist = abs(P[i][1] - P[i-1][1]) + abs(P[i][2] - P[i-1][2])\n\tif (dt % 2 == 0 and dist % 2 == 0 and dist <= dt) or (dt % 2 == 1 and dist % 2 == 1 and dist <= dt):\n\t\tjudge = True\n\telse:\n\t\tjudge = False\nif judge:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "from sys import stdin, stdout # only need for big input\n\n\ndef solve():\n\tn = int(input()) \n\tpos = []\n\tfor _ in range(n):\n\t\tt, x, y = list(map(int, input().split()))\n\t\tpos.append((t,x,y))\n\n\tprev = (0, 0, 0)\n\n\tfor p in pos:\n\t\tdt = p[0] - prev[0]\n\t\tmove = abs(p[1] - prev[1]) + abs(p[2] - prev[2])\n\t\tif move > dt:\n\t\t\tprint(\"No\")\n\t\t\treturn\n\t\telse:\n\t\t\tif (dt - move) % 2 == 1:\n\t\t\t\tprint(\"No\")\n\t\t\t\treturn\n\t\t\tprev = p\n\n\tprint(\"Yes\")\n\n\t\n\t\n\ndef main():\n\tsolve()\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "N=int(input())\nT=[0]*(N+1);S=[0]*(N+1);f=0\nfor i in range(1,N+1):\n\tt,x,y=map(int,input().split())\n\tT[i]=t\n\tS[i]=[x,y]\nT[0]=0;S[0]=[0,0]\n\n#print(T)\n#print(S)\n\nfor i in range(1,N+1):\n\tif (T[i]-T[i-1])<(abs(S[i][0]-S[i-1][0])+abs(S[i][1]-S[i-1][1])):\n\t\tf=1\n\tif (T[i]-T[i-1])%2!=(abs(S[i][0]-S[i-1][0])+abs(S[i][1]-S[i-1][1]))%2:\n\t\tf=1\n\nprint(\"Yes\" if f==0 else \"No\")\n", "N = int(input())\nt, x, y = 0, 0, 0\nans = 'Yes'\n\nfor n in range(N):\n\tti,xi,yi = map(int,input().split())\n\tdist = abs(xi-x)+abs(yi-y)\n\tdt = ti-t\n\tif dist > dt or (dist-dt) % 2 != 0:\n\t\tans='No'\n\t\tbreak\n\tt,x,y = ti,xi,yi\nprint(ans)\n", "t, x, y = 0, 0, 0\n\nfor i in range(int(input())):\n\tt_n, x_n, y_n = map(int, input().split())\n\tdiff = abs(x - x_n) + abs(y - y_n)\n\tif diff > t_n - t or (t_n - t - diff) % 2 == 1:\n\t\tprint(\"No\")\n\t\treturn\n\tt, x, y = t_n, x_n, y_n\nprint(\"Yes\")\n", "# coding: utf-8\n\n\ndef main():\n\tN = int(input())\n\tans = 'Yes'\n\tt, x, y = 0, 0, 0\n\tfor _ in range(N):\n\t\tnt, nx, ny = list(map(int, input().split()))\n\t\td = abs(x - nx) + abs(y - ny)\n\t\tif d > nt - t or (nt - t - d) % 2 != 0:\n\t\t\tans = 'No'\n\t\t\tbreak\n\t\tt, x, y = nt, nx, ny\n\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "#!/user/bin/env pypy3\nimport sys\nfrom typing import NamedTuple, List\n\n\ndef fast_input():\n\treturn sys.stdin.readline()[:-1]\n\n\nclass Position(NamedTuple):\n\tt: int\n\tx: int\n\ty: int\n\n\tdef _calc_diff_move(self, position) -> int:\n\t\tdiff_x = self.x - position.x\n\t\tdiff_y = self.y - position.y\n\t\treturn abs(diff_x) + abs(diff_y)\n\n\tdef can_move_from(self, prev) -> bool:\n\t\tdiff_t = self.t - prev.t\n\t\tdiff_move = self._calc_diff_move(prev)\n\t\tif not diff_t % 2 == diff_move % 2:\n\t\t\treturn False\n\t\treturn diff_t >= diff_move\n\n\ndef result_format(b: bool) -> str:\n\treturn \"Yes\" if b else \"No\"\n\n\ndef solve(positions: List[Position]) -> bool:\n\tpositions = [Position(t=0, x=0, y=0)] + positions\n\tfor p_ind in range(len(positions) - 1):\n\t\tp_curr = positions[p_ind]\n\t\tp_next = positions[p_ind + 1]\n\t\tif not p_next.can_move_from(p_curr):\n\t\t\treturn False\n\treturn True\n\n\ndef main():\n\tn = int(fast_input())\n\tpositions = []\n\tfor _ in range(n):\n\t\tt, x, y = list(map(int, fast_input().split()))\n\t\tpositions.append(Position(t=t, x=x, y=y))\n\tresult = solve(positions)\n\tprint((result_format(result)))\n\n\nmain()\n", "import sys\nN = int(input())\nt_param = 0\nx_param = 0\ny_param = 0\n\nfor i in range(N):\n\tt, x, y = map(int, input().split())\n\tif (abs(x - x_param) + abs(y - y_param))  > (abs(t - t_param)) or ((x + y + t)%2) != 0 :\n\t\tprint('No')\n\t\treturn\n\tt_param = t\n\tx_param = x\n\ty_param = y\nprint('Yes')\n", "n = int(input())\nd = [list(map(int, input().split())) for _ in range(n)]\n\npT, pX, pY = 0, 0, 0\n\nfor i in range(n):\n\tcT, cX, cY = d[i]\n\tmvT, mvX, mvY = abs(cT-pT), abs(cX-pX), abs(cY-pY)\n\t\n\tdam = mvT - (mvX+mvY)\n\n\tif dam%2 == 1 or dam<0:\n\t\tprint('No')\n\t\treturn\n\n\tpT, pX, pY = d[i]\n\nprint('Yes')\n", "n = int(input())\n\ntxy = [list(map(int,input().split())) for _ in range(n)]\ntxy =[[0,0,0]] + txy\n\nfor i in range(n):\n\tmove = abs(txy[i+1][1]-txy[i][1])+abs(txy[i+1][2]-txy[i][2])\n\ttime = txy[i+1][0]-txy[i][0]\n\tif time % 2 ^ move % 2 == 1 or time < move:\n\t\tprint(\"No\")\n\t\treturn\n\nprint(\"Yes\")\n", "n_num = int(input())\nplan_list = [[0, (0, 0)]]\n\ndef movable(p1, p2):\n\ttime = p2[0] - p1[0]\n\tdistance = 0\n\t\n\tdistance += abs(p1[1][0] - p2[1][0])\n\tdistance += abs(p1[1][1] - p2[1][1])\n\t\n\tif distance > time:\n\t\treturn 0\n\telse:\n\t\tif (time - distance) % 2 != 0:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn 1\n\t\n\nfor _ in range(n_num):\n\tline = [int(i) for i in input().split()]\n\tplan_list.append([line[0], (line[1], line[2])])\n\t\nvector = (0, 0)\n\nflag = 0\nfor n in range(1, n_num+1):\n\tif movable(plan_list[n-1], plan_list[n]) == 0:\n\t\tflag = 1\n\t\nif flag == 1:\n\tprint('No')\nelse:\n\tprint('Yes')\n", "# 最短でたどり着いたとして目的の時間までの残り時間が奇数ならばNo\n# あとそもそも時間を使ってもたどりつけない場合もNo\nn = int(input())\npos = [0, 0]\ntime = 0\nfor _ in range(n):\n\tt, x, y = list(map(int, input().split()))\n\t# 最短でたどりつく時間\n\tdist = abs(pos[0] - x) + abs(pos[1] - y)\n\t# そもそもたどりつけない場合\n\tif t - time < dist:\n\t\tprint(\"No\")\n\t\treturn\n\t# 偶奇性\n\trest = t - time\n\tif rest % 2 != dist % 2:\n\t\tprint(\"No\")\n\t\treturn\n\ttime = t\n\tpos = [x, y]\nprint(\"Yes\")\n", "N = int(input())\n\nInput = []\nfor i in range(N):\n\tInput.append(list(map(int, input().split())))\n\nposition = {\"x\":0, \"y\":0}\npreT = 0\nfor i in range(N):\n\tT = Input[i][0]\n\tx = Input[i][1]\n\ty = Input[i][2]\n\n\tmove = abs(position[\"x\"] - x) + abs(position[\"y\"] - y)\n\tif move > (T - preT) or move % 2 != (T - preT) % 2:\n\t\tprint(\"No\")\n\t\treturn\n\n\tpreT = T\n\tposition[\"x\"] = x\n\tposition[\"y\"] = y\n\nprint(\"Yes\")\n", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\ndef main():\n\tn = i_input()\n\txb = 0\n\tyb = 0\n\ttb = 0\n\tfor i in range(n):\n\t\tt,x,y = i_map()\n\t\twalk = abs(x-xb) + abs(y-yb)\n\t\tif walk > t-tb: # 時間足りない\n\t\t\tprint(\"No\")\n\t\t\treturn\n\t\tif ((t-tb)-walk)%2 != 0: # 戻って来れん\n\t\t\tprint(\"No\")\n\t\t\treturn\n\t\txb = x\n\t\tyb = y\n\t\ttb = t\n\tprint(\"Yes\")\n\n\n\n\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n = int(input())\nl = [list(map(int, input().split())) for _ in range(n)]\n\nx = y = t = 0\nfor i in range(n):\n\tdx, dy, dt = l[i][1], l[i][2], l[i][0]\n\tdist = abs((dx - x) + (dy - y))\n\n\tif abs(dt - t) < dist:\n\t\tprint(\"No\")\n\t\treturn\n\tif abs(dt - t) % 2:\n\t\tif dist % 2 == 0:\n\t\t\tprint(\"No\")\n\t\t\treturn\n\telse:\n\t\tif dist % 2 == 1:\n\t\t\tprint(\"No\")\n\t\t\treturn\n\tx, y, t = dx, dy, dt\nprint(\"Yes\")\n", "N = int(input())\nt0, x0, y0 = 0, 0, 0\nfor i in range(N):\n\tt, x, y = list(map(int, input().split()))\n\tkyori = abs(x - x0) + abs(y - y0)\n\ttime = t - t0\n\tif (abs(kyori - time)) % 2 == 0 and time - kyori >= 0:\n\t\tt0, x0, y0 = t, x, y\n\telse:\n\t\tprint('No')\n\t\treturn\nprint('Yes')\n", "N = int(input())\nP = [(0,0,0)] + [tuple(int(x) for x in input().split()) for _ in range(N)]\n\ndef travelable(p,q):\n\ttime = q[0] - p[0]\n\tdist = abs(q[1]-p[1]) + abs(q[2]-p[2])\n\tif dist <= time and time%2 == dist%2:\n\t\treturn True\n\telse:\n\t\treturn False\nfrom itertools import zip_longest\nprint('Yes' if all(travelable(p,q) for p,q in zip_longest(P[:N],P[1:])) else 'No')\n", "N = int(input())\nt_x_y = [list(map(int, input().split())) for _ in range(N)]\nt_x_y.insert(0, [0, 0, 0])\n \nans = 'Yes'\nfor i in range(N):\n\tdt = t_x_y[i+1][0] - t_x_y[i][0]\n\tdist = abs(t_x_y[i+1][1] - t_x_y[i][1]) + abs(t_x_y[i+1][2] - t_x_y[i][2])\n\t\n\t# dt < dist が必要\n\tif dt < dist:\n\t\tans = 'No'\n\t\tbreak\n\telse:\n\t\t# dt >= dist の上で、dtとdistの偶奇が一致すればよい\n\t\tif (dt - dist) % 2 != 0:\n\t\t\tans = 'No'\n\t\t\tbreak\n\t\nprint(ans)\n", "N = int(input())\nt,x,y = 0,0,0\nfor i in range(N):\n\ta,b,c = t,x,y\n\tt,x,y = map(int,input().split())\n\td = abs(x-b)+abs(y-c)\n\te = t-a\n\tif d%2 != e%2 or d > e:\n\t\tprint(\"No\")\n\t\treturn\nprint(\"Yes\")\n", "import math\nn = int(input())\n#P position t time\nP = [0,0]\nt0 = 0\nfor _ in range(n):\n\tt,x,y = list(map(int, input().split( )))\n\tdt = t - t0\n\tdis = abs(x - P[0])  + abs(y - P[1])\n\tif dis > dt:\n\t\tprint('No')\n\t\treturn\n\telif (dt - dis)%2 == 1:\n\t\tprint('No')\n\t\treturn\n\tt0 = t\n\tP = [x,y]\nprint('Yes')\n\t\t\n", "N = int(input())\nT = [0, 0, 0]\nans = \"Yes\"\nfor _ in range(N):\n\tt = list(map(int, input().split()))\n\tk = abs((t[1]+t[2])-(T[1]+T[2]))\n\tn = t[0]-T[0]\n\tif n % 2 == 0:\n\t\tif k > n or k % 2 != 0:\n\t\t\tans = \"No\"\n\telse:\n\t\tif k > n or k % 2 == 0:\n\t\t\tans = \"No\"\n\tT = t\n\nprint(ans)\n", "N = int(input())\nL = []\nfor i in range(N):\n\tt = list(map(int, input().split()))\n\tL.append(t)\n\nL.insert(0, [0,0,0])\n\nfor i in range(1, N+1):\n\ttime = abs(L[i-1][0] - L[i][0])\n\tdistance = abs(L[i-1][1] - L[i][1]) + abs(L[i-1][2] - L[i][2])\n\tif (time < distance) or (time%2 != distance%2):\n\t\tprint('No')\n\t\treturn\n\nprint('Yes')\n", "n = int(input())\nl = [list(map(int, input().split())) for _ in range(n)]\n\nx = y = t = 0\nfor i in range(n):\n\tdx, dy, dt = l[i][1], l[i][2], l[i][0]\n\tdist = abs((dx - x) + (dy - y))\n\n\tif abs(dt - t) < dist or (dt - t - dist) % 2:\n\t\tprint(\"No\")\n\t\treturn\n\n\tx, y, t = dx, dy, dt\nprint(\"Yes\")\n", "n = int(input())\nbt = 0\nbx = 0\nby = 0\nfor _ in range(n):\n\tt, x, y = map(int, input().split())\n\tdt = abs(x - bx) + abs(y - by)\n\tif dt > t - bt or dt % 2 != (t - bt) % 2:\n\t\tprint(\"No\")\n\t\tbreak\n\tbt = t\n\tbx = x\n\tby = y\nelse:\n\tprint(\"Yes\")\n", "import sys\nN = int(input())\nd = [list(map(int,input().split())) for l in range(N)]\nd.insert(0,[0,0,0])\n#print(N)\n#print(d)\n\ndef get_length(l1,l2):\n\treturn abs(l1[1] - l2[1]) + abs(l1[2] - l2[2])\n\nfor cnt in range(N):\n\tlength = get_length(d[cnt],d[cnt+1])\n\ttime = abs(d[cnt][0]-d[cnt+1][0])\n\tif length <= time and abs(time - length) % 2 == 0:\n\t\tpass\n\telse:\n\t\tprint(\"No\")\n\t\treturn\n\nprint(\"Yes\")\n", "n=int(input())\na=[list(map(int,input().split())) for i in range(n)]\na.insert(0,[0,0,0])\nfor i in range(n):\n\tb=a[i+1][0]-a[i][0]\n\tc=abs(a[i+1][1]+a[i+1][2]-a[i][1]-a[i][2])\n\tif b<c or b%2!=c%2:\n\t\tprint(\"No\")\n\t\tbreak\nelse:\n\tprint(\"Yes\")\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep 21 23:53:42 2020\n\n@author: liang\n\"\"\"\n\nN = int(input())\n\nprev = (0, 0, 0)\n\nflag = True\n\nfor i in range(N):\n\tt, x, y = map(int, input().split())\n\tif t%2 != (x+y)%2:\n\t\tflag = False\n\tif abs(x+y - prev[1] - prev[2]) > t-prev[0]:\n\t\tflag = False\n\tprev = (t,x,y)\n\nif flag:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "n = int(input())\npt, px, py = 0,0,0\nf = 0\nfor i in range(n):\n\tt,x,y = map(int, input().split())\n\tgt = t-pt\n\tgx, gy = abs(x-px), abs(y-py)\n\tgt -= gx+gy\n\tif gt < 0 or gt%2==1:\n\t\tf=1\n\tpt,px,py = t,x,y\nif f:\n\tprint(\"No\")\nelse:\n\tprint(\"Yes\")\n", "N = int(input())\n\npx = 0\npy = 0\npt = 0\n\nfor _ in range(N):\n\tT, X, Y = (int(i) for i in input().split())\n\n\td = abs(X - px + Y - py)\n\tdt = (T - pt)\n\tif d > dt or (d % 2) != (dt % 2):\n\t\tprint('No')\n\t\timport sys\n\t\treturn\n\telse:\n\t\tpx = X\n\t\tpy = Y\n\t\tpt = T\n\nprint('Yes')\n", "n = int(input())\npt, px, py = 0, 0, 0\n\nfor _ in range(n):\n\tt, x, y = map(int, input().split())\n\td = abs(x-px) + abs(y-py)\n\tif d  > t-pt or (d + t-pt)%2 != 0:\n\t\tprint(\"No\")\n\t\treturn\n\tpt, px, py = t, x, y\nprint(\"Yes\")\n", "N = int(input())\n\nlocx = 0\nlocy =0\ntime = 0\nfor i in range(N):\n\tt,x,y = map(int,input().split())\n\tnowtime = t-time\n\tdis = abs(locx-x)+abs(locy-y)\n\tif (nowtime-dis)<0 :\n\t\tprint(\"No\")\n\t\treturn\n\tif (nowtime-dis)%2 == 1:\n\t\tprint(\"No\")\n\t\treturn\n\t\t\n\t\n\ttime = t\n\tlocx = x\n\tlocy = y\n\t\t\n\t\nelse :\n\tprint(\"Yes\")\n", "n=int(input())\n \nnum,a,b=0,0,0\n \nfor i in range(n):\n\tt,x,y=map(int,input().split())\n\tnum,a,b=abs(t-num),abs(x-a),abs(y-b)\n\tsu=a+b\n\tif num>=su and num%2 == su%2:\n\t\tans=\"Yes\"\n\telse:\n\t\tans=\"No\"\n\t\tbreak\n\t\t\t\nprint(ans)\n", "N = int(input())\nP = [list(map(int,input().split())) for i in range(N)] # list of [t, x, y]\npret = prex = prey = 0\nf = 1\nfor i in range(N):\n\tt = P[i][0]\n\tx = P[i][1]\n\ty = P[i][2]\n\ttd = t - pret\n\txd = abs(x - prex)\n\tyd = abs(y - prey)\n\tdiff = xd + yd # 最低かかるt\n\tif td < diff:\n\t\tf = 0\n\t\tbreak\n\tif (td - diff) % 2 == 0:\n\t\tpret = t\n\t\tprex = x\n\t\tprey = y\n\t\tcontinue\n\telse:\n\t\tf = 0\n\t\tbreak\nif f == 1:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "N = int(input())\ntxn = []\nfor i in range(N):\n\ttxn.append([int(i) for i in input().split()])\n\nima = [0,0,0]\nfor i in range(N):\n\tdist = abs(ima[1] - txn[i][1]) + abs(ima[2] - txn[i][2])\n\n\tif dist > (txn[i][0] - ima[0]) :\n\t\tprint(\"No\")\n\t\treturn\n\t\n\tif dist%2 != (txn[i][0] - ima[0])%2 :\n\t\tprint(\"No\")\n\t\treturn\n\t\n\tima = txn[i]\n\nprint(\"Yes\")\n", "N = int(input())\nP = [(0,0,0)] + [tuple(int(x) for x in input().split()) for _ in range(N)]\n\ndef travelable(p,q):\n\ttime = q[0] - p[0]\n\tdist = abs(q[1]-p[1]) + abs(q[2]-p[2])\n\tif dist <= time and time%2 == dist%2:\n\t\treturn True\n\telse:\n\t\treturn False\n\t\t\nprint('Yes' if all(travelable(p,q) for p,q in zip(P[:N],P[1:])) else 'No')\n", "N = int(input())\nsuccess = True\n\nt0,x0,y0 = 0,0,0\nfor i in range(N):\n\tt1,x1,y1 = map(int,input().split())\n\tdist = abs(x1-x0) + abs(y1-y0)\n\ttime = t1 - t0\n\t\n\tcheck1 = (time == dist)\n\tcheck2 = (time > dist) and ((time - dist) % 2 == 0)\n\tif not (check1 or check2):\n\t\tsuccess = False\n\t\tbreak\n\t\t\n\tt0,x0,y0 = t1,x1,y1\n\t\t\nif success:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "n=int(input())\n\ndef func(start,goal,t):\n\tdistance=abs(start[0]-goal[0])+abs(start[1]-goal[1])\n\tif distance<=t and (t-distance)%2==0:\n\t\treturn True\n\treturn False\nnow=0\ncan=1\nstart=[0,0]\nfor i in range(n):\n\tt,x,y=[int(i) for i in input().split()]\n\tgoal=[x,y]\n\tif not func(start,goal,t-now):\n\t\tcan=0\n\t\tbreak\n\telse:\n\t\tstart=goal\n\t\tnow=t\n\nif can==1:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "n = int(input())\nti, xi, yi = (0,0,0)\nfor i in range(n):\n\tti1, xi1, yi1 = list(map(int, input().split()))\n\tif abs(xi1-xi)+abs(yi1-yi) <= (ti1-ti) and (abs(xi1-xi)+abs(yi1-yi))%2 == (ti1-ti)%2:\n\t\txi = xi1\n\t\tyi = yi1\n\t\tti = ti1\n\t\tcontinue\n\telse:\n\t\tprint(\"No\")\n\t\treturn\nprint(\"Yes\")\n", "n=int(input())\na = [0]*(n+1)\na[0] = [0, 0, 0]\nfor i in range(n):\n\ta[i+1]=list(map(int,input().split()))\n\nflag = True\nfor i in range(n):\n\tif abs(a[i+1][1]-a[i][1])+abs(a[i+1][2]-a[i][2]) > (a[i+1][0]-a[i][0]):\n\t\tflag=False\n\telif (abs(a[i+1][1]-a[i][1])+abs(a[i+1][2]-a[i][2])-(a[i+1][0]-a[i][0]))%2==1:\n\t\tflag=False\n\nif flag:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "n=int(input())\n\nnum,a,b=0,0,0\n\nfor i in range(n):\n\tt,x,y=list(map(int,input().split()))\n\tnum,a,b=abs(t-num),abs(x-a),abs(y-b)\n\tsu=a+b\n\tif num>=su and num%2 == su%2:\n\t\tans=\"Yes\"\n\telse:\n\t\tans=\"No\"\n\t\tbreak\n\t\t\t\nprint(ans)\n", "N = int(input())\nT = []\nXY = []\n\n\ndef f(x1, y1, x2, y2):\n\treturn abs(x1 - x2) + abs(y1 - y2)\n\n\ncx, cy = 0, 0\nct = 0\nfor _ in range(N):\n\tt, x, y = list(map(int, input().split()))\n\td = f(cx, cy, x, y)\n\t# print(f'{ct=}, {t=}, {d=}')\n\tif d > t - ct:\n\t\tprint('No')\n\t\treturn\n\tif (t - ct - d) % 2 != 0:\n\t\tprint('No')\n\t\treturn\n\tcx, cy = x, y\n\tct = t\nprint('Yes')\n", "'''\nCreated on 2020/08/31\n\n@author: harurun\n'''\ndef main():\n\timport sys\n\tpin=sys.stdin.readline\n\tpout=sys.stdout.write\n\tperr=sys.stderr.write\n\n\tN=int(pin())\n\ttime=0\n\tnx=0\n\tny=0\n\tfor i in range(N):\n\t\tt,x,y=list(map(int,pin().split()))\n\t\td=abs(nx-x)+abs(ny-y)\n\t\ts=t-time\n\t\tif d<=s and s%2==d%2:\n\t\t\ttime=t\n\t\t\tnx=x\n\t\t\tny=y\n\t\telse:\n\t\t\tprint(\"No\")\n\t\t\treturn\n\tprint(\"Yes\")\n\treturn\nmain()\n#kaisetuAC\n", "n = int(input())\npx = py = pt = 0\nfor i in range(n):\n\tt,x,y = map(int,input().split())\n\td = abs(x - px) + abs(y - py)\n\tnt = t - pt\n\tif nt < d or d%2 != nt%2:\n\t\tprint(\"No\")\n\t\treturn\n\tpx = x\n\tpy = y\n\tpt = t\nprint(\"Yes\")\n", "n=int(input())\ntxy=[list(map(int,input().split())) for i in range(n)]\nx,y=0,0\nt=0\nfor i in range(n):\n\tif abs((x+y) - (txy[i][1]+txy[i][2]))%2 == abs(t-txy[i][0])%2 and abs(t-txy[i][0]) >= abs((x+y)-(txy[i][1]+txy[i][2])):\n\t\tx,y=txy[i][1],txy[i][2]\n\telse:\n\t\tprint(\"No\")\n\t\treturn\n\tt=txy[i][0]\nprint(\"Yes\")\n", "n=int(input())\na=[[0,0,0]]\n\nfor i in range(n):\n\ta.append(list(map(int, input().split(\" \"))))\nfor i in range(n):\n\tcheck =  a[i + 1][0] - a[i][0] - (abs(a[i+1][1]-a[i][1]) + abs(a[i+1][2]-a[i][2]))\n\tif check >= 0 and check % 2 == 0:\n\t\tcontinue\n\telse:\n\t\tprint(\"No\")\n\t\tbreak\nelse:\n\tprint(\"Yes\")\n", "# coding: utf-8\n\n\ndef main():\n\tN = int(input())\n\tans = 'Yes'\n\tt, x, y = 0, 0, 0\n\tfor _ in range(N):\n\t\tnt, nx, ny = list(map(int, input().split()))\n\t\td = abs(x - nx) + abs(y - ny)\n\t\tif d > nt - t or (nt - t - d) % 2 != 0:\n\t\t\tans = 'No'\n\t\t\tbreak\n\t\tt, x, y = nt, nx, ny\n\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n = int(input())\ns = [list(map(int,input().split())) for i in range(n)]\nstand = [0,0]\nprev = 0\n\nfor t,x,y in s:\n\tdiff = abs(x+y-sum(stand))\n\twalk = t-prev\n\tif diff<=walk and walk%2==diff%2:\n\t\tstand=[x,y]\n\t\tprev = t\n\telse:\n\t\tprint('No')\n\t\tbreak\nelse:\n\tprint('Yes')\n", "N = int(input())\nt0, x0, y0 = 0, 0, 0\nfor i in range(N):\n\tt, x, y = list(map(int, input().split()))\n\tkyori = abs(x - x0) + abs(y - y0)\n\ttime = abs(t0 - t)\n\tif abs(kyori - time) % 2 == 0 and time - kyori >= 0:\n\t\tt0, x0, y0 = t, x, y\n\telse:\n\t\tprint('No')\n\t\treturn\nprint('Yes')\n", "N = int(input())\n\na = [list(map(int, input().split())) for i in range(N)]\n\nfor i in range(N):\n\tif i == 0:\n\t\tif (a[i][0] - a[i][1] - a[i][2]) % 2 != 0 or (a[i][0] - a[i][1] - a[i][2]) < 0:\n\t\t\tprint(\"No\")\n\t\t\treturn\n\telse:\n\t\tif (a[i][0] - a[i][1] - a[i][2]) % 2 != 0 or (a[i][0]- a[i-1][0]) -( (a[i-1][1] + a[i-1][2] )-(a[i][1] + a[i][2])) < 0:\n\t\t\tprint(\"No\")\n\t\t\treturn\nprint(\"Yes\")\n", "N = int(input())\nt_x_y = [list(map(int, input().split())) for _ in range(N)]\nt_x_y.insert(0, [0, 0, 0])\n\nans = 'Yes'\nfor i in range(N):\n\tdt = t_x_y[i+1][0] - t_x_y[i][0]\n\tdist = abs(t_x_y[i+1][1] - t_x_y[i][1]) + abs(t_x_y[i+1][2] - t_x_y[i][2])\n\t\n\tif dt < dist:\n\t\tans = 'No'\n\t\tbreak\n\telse:\n\t\t# dt >= dist\n\t\tif (dt - dist) % 2 != 0:\n\t\t\tans = 'No'\n\t\t\tbreak\n\t\nprint(ans)\n", "N = int(input())\n\nt = [0]\nx = [0]\ny = [0]\nfor i in range(N):\n\tl = [int(c) for c in input().split()]\n\tt.append(l[0])\n\tx.append(l[1])\n\ty.append(l[2])\n\nfor i in range(N):\n\tmove = abs(x[i+1]-x[i]) + abs(y[i+1]-y[i])\n\ttime = t[i+1]-t[i]\n\tif time%2 ^ move%2 == 1 or time < move:\n\t\tprint(\"No\")\n\t\treturn\n\nprint(\"Yes\")\n", "n=int(input())\nbx=by=bt=0\nans='Yes'\n\nfor i in range(n):\n\tt,x,y=map(int, input().split())\n\tif t%2!=(x+y)%2:\n\t\tans='No'\n\tif abs(bx-x)+abs(by-y)>abs(bt-t):\n\t\tans='No'\n\tbx=x\n\tby=y\n\tbt=t\n\nprint(ans)\n", "n = int(input())\nl = [(0,0,0)]\nflag = 1\nfor i in range(n):\n\tl.append(list(map(int,input().split())))\nfor i in range(n):\n\td = abs(l[i+1][1] - l[i][1]) + abs(l[i+1][2] - l[i][2])\n\tif l[i+1][0] - l[i][0] >= d and (l[i+1][0] - l[i][0] - d) % 2 == 0:\n\t\tcontinue\n\telse:\n\t\tflag = 0\nif flag:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\n\t\n\n", "#!/user/bin/env pypy3\nimport sys\nfrom typing import NamedTuple, List\n\n\ndef fast_input():\n\treturn sys.stdin.readline()[:-1]\n\n\nclass Position(NamedTuple):\n\tt: int\n\tx: int\n\ty: int\n\n\tdef _calc_diff_move(self, position) -> int:\n\t\tdiff_x = self.x - position.x\n\t\tdiff_y = self.y - position.y\n\t\treturn abs(diff_x) + abs(diff_y)\n\n\tdef can_move_from(self, prev) -> bool:\n\t\tdiff_t = self.t - prev.t\n\t\tdiff_move = self._calc_diff_move(prev)\n\t\t# 奇数のときはその場禁止\n\t\tif not diff_t % 2 == diff_move % 2:\n\t\t\treturn False\n\t\treturn diff_t >= diff_move\n\n\ndef result_format(b: bool) -> str:\n\treturn \"Yes\" if b else \"No\"\n\n\ndef solve(positions: List[Position]) -> bool:\n\tpositions = [Position(t=0, x=0, y=0)] + positions\n\tfor p_ind in range(len(positions) - 1):\n\t\tp_curr = positions[p_ind]\n\t\tp_next = positions[p_ind + 1]\n\t\tif not p_next.can_move_from(p_curr):\n\t\t\treturn False\n\treturn True\n\n\ndef main():\n\tn = int(fast_input())\n\tpositions = []\n\tfor _ in range(n):\n\t\tt, x, y = list(map(int, fast_input().split()))\n\t\tpositions.append(Position(t=t, x=x, y=y))\n\tresult = solve(positions)\n\tprint((result_format(result)))\n\n\nmain()\n", "cnt = int(input())\n\nt_s, x_s, y_s = 0, 0, 0\nfor _ in range(cnt):\n\tt, x, y = map(int, input().split())\n\td_t, d_x, d_y = t-t_s, x-x_s, y-y_s\n\tz = abs(d_x + d_y)\n\tif z > d_t or (d_t - z)%2 == 1:\n\t\tprint(\"No\")\n\t\tbreak\n\tt_s, x_s, y_s = t, x, y\nelse:\n\tprint(\"Yes\")\n", "n=int(input())\nlocation=list(map(str,[input() for i in range(n)]))\nfail=0\nfor j in range(n):\n\tif j==0:\n\t\ta=[0,0,0]\n\telse:\n\t\ta=list(map(int, location[j-1].split()))\n\tb=list(map(int,location[j].split()))\n\tx=abs(a[1]-b[1])\n\ty=abs(a[2]-b[2])\n\tt=b[0]-a[0]\n\tif x+y<=t:\n\t\tif (x+y)%2==t%2:\n\t\t\tpass\n\t\telse:\n\t\t\tfail+=1\n\telse:\n\t\tfail+=1\nif fail==0:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "N=int(input())\nP=[(0,0,0)]\nfor i in range(N):\n\tt,x,y=map(int,input().split())\n\tP.append((t,x,y))\n\nT=[0]*N\ndist=[0]*N\n\nfor i in range(N):\n\tT[i]=P[i+1][0]-P[i][0]\n\tdist[i]=abs(P[i+1][1]-P[i][1])+abs(P[i+1][2]-P[i][2])\n\nans=1\nfor i in range(N):\n\tif dist[i]>T[i]:\n\t\tans=0\n\telse:\n\t\tm=T[i]-dist[i]\n\t\tif m%2==0:\n\t\t\tpass\n\t\telse:\n\t\t\tans=0\n\tif ans==0:\n\t\tbreak\nprint(\"Yes\" if ans==1 else \"No\")\n", "n = int(input())\n\nT = [0]\nX = [0]\nY = [0]\n\njudge = 'Yes'\n\nfor i in range(n):\n\tt, x, y = map(int,input().split())\n\tT.append(t)\n\tX.append(x)\n\tY.append(y)\n\nfor i in range(1, n+1):\n\tdelt_t = T[i] - T[i-1]\n\tt_parity = delt_t % 2\n\td = abs(X[i] - X[i -1]) + abs(Y[i] - Y[i - 1])\n\td_parity = d % 2\n\tif delt_t >= d and t_parity == d_parity:\n\t\tcontinue\n\telse:\n\t\tjudge = 'No'\n\t\tbreak\n\nprint(judge)\n", "n = int(input())\nrx = 0\nry = 0\nrt = 0\nok = True\nfor _ in range(n):\n\tt, x, y = map(int, input().split())\n\tdist = abs(x-rx) + abs(y-ry)\n\t#print(dist)\n\tif dist <= abs(t-rt) and (abs(t-rt)-dist)%2 == 0:\n\t\trx = x\n\t\try = y\n\t\trt = t\n\telse: ok = False\n\nif ok: print(\"Yes\")\nelse: print(\"No\")\n", "n=int(input())\narr=[[0,0,0]]+[list(map(int,input().split())) for _ in range(n)]\nfor i in range(n):\n\tt1,x1,y1=arr[i]\n\tt2,x2,y2=arr[i+1]\n\tif abs(x1-x2)+abs(y1-y2)>t2-t1:\n\t\tprint('No')\n\t\treturn\n\tif (abs(x1-x2)+abs(y1-y2))%2!=(t2-t1)%2:\n\t\tprint('No')\n\t\treturn\nprint('Yes')\n", "Row = int(input())\nList = []\nfor i in range (Row):\n\tList.append(list(map(int, input().split())))\nx = 0\ny = 0\nT = 0\nflag = True\nfor i in range(Row):\n\treqT = abs(List[i][1]-x)+abs(List[i][2]-y)\n\tchck= List[i][0] - T - reqT\n\tif chck < 0 or chck % 2 == 1:\n\t\tflag = False\n\t\tbreak\n\tx = List[i][1]\n\ty = List[i][2]\n\tT = List[i][0]\nif flag:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "N = int(input())\nl = [list(map(int, input().split())) for _ in range(N)]\n\npT, pX, pY = 0, 0, 0\n\nfor i in range(N):\n\tcT, cX, cY = l[i]\n\tmvT, mvX, mvY = abs(cT-pT), abs(cX-pX), abs(cY-pY)\n\t\n\tdam = mvT - (mvX+mvY)\n\n\tif dam %2 == 1 or dam < 0:\n\t\tprint('No')\n\t\treturn\n\n\tpT, pX, pY = l[i]\n\nprint('Yes')\n\n", "N = int(input())\npt, px, py = 0, 0, 0\ncan = True\nfor i in range(N):\n\tt, x, y = map(int, input().split())\n\tT, X, Y = t - pt, abs(x - px), abs(y - py)\n\tif T < X + Y or T % 2 != (X + Y) % 2:\n\t\tcan = False\n\tpt, px, py = t, x, y\nprint('Yes' if can else 'No')\n", "N=int(input())\nt=[0]\nx=[0]\ny=[0]\nfor _ in range(N):\n\ta,b,c=list(map(int,input().split()))\n\tt.append(a)\n\tx.append(b)\n\ty.append(c)\n\nfor i in range(N):\n\tX=abs(x[i+1]-x[i])+abs(y[i+1]-y[i])\n\tT=abs(t[i+1]-t[i])\n\tif X>T or X%2!=T%2:\n\t\tprint(\"No\")\n\t\tbreak\nelse:\n\tprint(\"Yes\")\n", "N = int(input())\n\nplan = []\n\nFeasible = True\n\nfor i in range(N):\n\tt,x,y = map(int,input().split())\n\tplan.append([t,x,y])\n\nt0,x0,y0 = 0,0,0\n\nfor t1,x1,y1 in plan:\n\tdx = x1-x0\n\tdy = y1-y0\n\tdt = t1-t0\n\tdist = abs(dx)+abs(dy)\n\td = dt - dist\n\t\n\tif dt < dist:\n\t\tFeasible = False\n\telif (dist+dt)%2 != 0:\n\t\tFeasible = False\n\tt0,x0,y0 = t1,x1,y1\nprint(\"Yes\" if Feasible else \"No\")\n", "n = int(input())\npt,px,py = 0, 0, 0\n\nfor _ in range(n):\n\tct,cx,cy = map(int,input().split())\n\tt = ct - pt\n\td = abs(cx-px) + abs(cy-py)\n\tif t < d or (t%2) != (d%2):\n\t\tprint('No')\n\t\tbreak\n\tpt,px,py = ct,cx,cy\nelse:\n\tprint('Yes')\n", "def check(dest,start):\n\tll = dest[1] - start[1] + dest[2]-start[2]\n\tif ll < 0:\n\t\tll = -ll\n\ttime = dest[0] - start[0]\n\ttmp = ll - time\n\tif tmp <= 0 and tmp%2 == 0 :\n\t\treturn True\n\telse:\n\t\treturn False\n\nn = int(input())\nstart = [0,0,0]\nfor i in range(n):\n\tdest = list(map(int, input().split()))\n\tif check(dest,start):\n\t\tstart = dest\n\telse:\n\t\tprint(\"No\")\n\t\treturn\n\nprint(\"Yes\")\n", "# -*- coding: utf-8 -*-\nimport numpy as np\nimport sys\nfrom collections import deque\nfrom collections import defaultdict\nimport heapq\nimport collections\nimport itertools\nimport bisect\nfrom scipy.special import comb\nimport copy\nsys.setrecursionlimit(10**6)\n\n\ndef zz():\n\treturn list(map(int, sys.stdin.readline().split()))\n\n\ndef z():\n\treturn int(sys.stdin.readline())\n\n\ndef S():\n\treturn sys.stdin.readline()[:-1]\n\n\ndef C(line):\n\treturn [sys.stdin.readline() for _ in range(line)]\n\n\nN = z()\nT, X, Y = [], [], []\npos_x, pos_y, now_t = 0, 0, 0\nfor i in range(N):\n\tt, x, y = zz()\n\tT.append(t)\n\tX.append(x)\n\tY.append(y)\nok = 1\nfor t, x, y in zip(T, X, Y):\n\tif (abs(x - pos_x) + abs(y - pos_y) > (t - now_t)):\n\t\tok = 0\n\t\tbreak\n\tif (((abs(x - pos_x) + abs(y - pos_y)) % 2) != ((t - now_t) % 2)):\n\t\tok = 0\n\t\tbreak\n\tpos_x, pos_y, now_t = x, y, t\nif(ok == 1):\n\tprint('Yes')\nelse:\n\tprint('No')\n", "n=int(input())\ntxylist=[[0,0,0]]\nfor i in range(n):\n\ttxy=list(map(int,input().split(\" \")))\n\ttxylist+=[txy]\nfor i in range(n):\n\tp=False\n\tt0,x0,y0=txylist[i]\n\tt1,x1,y1=txylist[i+1]\n\tt,x,y=t1-t0,x1-x0,y1-y0\n\ttt=abs(x)+abs(y)\n\tlegs=t-tt\n\tif legs>=0 and legs%2==0:\n\t\tp=True\n\telse:\n\t\tprint(\"No\")\n\t\tbreak\nif p==True:\n\tprint(\"Yes\")\n"], "id": "id7762"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7762", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["atcodeer", 1], ["the", 1], ["deer", 1], ["is", 1], ["going", 1], ["on", 1], ["a", 1], ["trip", 1], ["in", 1], ["a", 1], ["two", 1], ["dimensional", 1], ["plane", 1], ["in", 1], ["his", 1], ["plan", 1], ["he", 1], ["will", 1], ["depart", 1], ["from", 1], ["point", 1], ["0", 1], ["0", 1], ["at", 1], ["time", 1], ["0", 1], ["then", 1], ["for", 1], ["each", 1], ["i", 1], ["between", 1], ["1", 1], ["and", 1], ["n", 1], ["inclusive", 1], ["he", 1], ["will", 1], ["visit", 1], ["point", 1], ["x", 1], ["i", 1], ["y", 1], ["i", 1], ["at", 1], ["time", 1], ["t", 1], ["i", 1], ["if", 1], ["atcodeer", 1], ["is", 1], ["at", 1], ["point", 1], ["x", 1], ["y", 1], ["at", 1], ["time", 1], ["t", 1], ["he", 1], ["can", 1], ["be", 1], ["at", 1], ["one", 1], ["of", 1], ["the", 1], ["following", 1], ["points", 1], ["at", 1], ["time", 1], ["t", 1], ["1", 1], ["x", 11], ["1", 1], ["y", 1], ["x", 1], ["1", 1], ["y", 1], ["x", 1], ["y", 1], ["1", 1], ["and", 1], ["x", 1], ["y", 1], ["1", 1], ["note", 1], ["that", 1], ["he", 1], ["cannot", 1], ["stay", 0], ["at", 0], ["his", 0], ["place", 0], ["determine", 0], ["whether", 0], ["he", 0], ["can", 0], ["carry", 0], ["out", 0], ["his", 0], ["plan", 0], ["constraints", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["0", 0], ["≤", 0], ["x", 0], ["i", 0], ["≤", 0], ["10", 0], ["5", 0], ["0", 0], ["≤", 0], ["y", 0], ["i", 0], ["≤", 0], ["10", 0], ["5", 0], ["1", 0], ["≤", 0], ["t", 0], ["i", 0], ["≤", 0], ["10", 0], ["5", 0], ["t", 0], ["i", 0], ["t", 0], ["i", 0], ["1", 0], ["1", 0], ["≤", 0], ["i", 0], ["≤", 0], ["n", 0], ["1", 0], ["all", 0], ["input", 0], ["values", 0], ["are", 0], ["integers", 0], ["input", 0], ["input", 0], ["is", 0], ["given", 0], ["from", 0], ["standard", 0], ["input", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["n", 0], ["t", 8], ["1", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["t", 0], ["2", 0], ["x", 0], ["2", 0], ["y", 0], ["2", 0], ["t", 0], ["n", 0], ["x", 0], ["n", 0], ["y", 0], ["n", 0], ["output", 0], ["if", 1], ["atcodeer", 1], ["can", 0], ["carry", 0], ["out", 0], ["his", 0], ["plan", 0], ["print", 0], ["yes", 0], ["if", 0], ["he", 0], ["cannot", 0], ["print", 0], ["no", 0], ["sample", 0], ["input", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["6", 0], ["1", 0], ["1", 0], ["sample", 0], ["output", 0], ["yes", 0], ["for", 1], ["example", 1], ["he", 1], ["can", 1], ["travel", 1], ["as", 1], ["follows", 1], ["0", 1], ["0", 1], ["0", 1], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["then", 0], ["1", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.45248868778280543, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.44441587823940765, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6351931330472103, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5863733905579399, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4479638009049774, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4440045248868778, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6351931330472103, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5863733905579399, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["t", 0], ["0", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dt", 0], ["t", 0], ["t", 0], ["dx", 0], ["abs", 0], ["x", 0], ["x", 0], ["dy", 0], ["abs", 0], ["y", 0], ["y", 0], ["dis", 0], ["dx", 0], ["dy", 0], ["if", 0], ["dt", 0], ["dis", 0], ["print", 0], ["no", 0], ["break", 0], ["if", 0], ["dt", 0], ["dis", 0], ["2", 0], ["1", 0], ["print", 0], ["no", 0], ["break", 0], ["t", 0], ["t", 0], ["x", 0], ["x", 0], ["y", 0], ["y", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["0", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["t", 0], ["t", 0], ["if", 0], ["s", 0], ["abs", 0], ["x", 0], ["x", 0], ["abs", 0], ["y", 0], ["y", 0], ["and", 0], ["s", 0], ["abs", 0], ["x", 0], ["x", 0], ["abs", 0], ["y", 0], ["y", 0], ["2", 0], ["0", 0], ["t", 0], ["x", 0], ["y", 0], ["t", 0], ["x", 0], ["y", 0], ["else", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["locx", 0], ["0", 0], ["locy", 0], ["0", 0], ["time", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["time", 0], ["t", 0], ["time", 0], ["dis", 0], ["abs", 0], ["locx", 0], ["x", 0], ["abs", 0], ["locy", 0], ["y", 0], ["if", 0], ["time", 0], ["dis", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["time", 0], ["dis", 0], ["2", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["time", 0], ["t", 0], ["locx", 0], ["x", 0], ["locy", 0], ["y", 0], ["else", 0], ["print", 0], ["yes", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["int", 0], ["input", 0], ["txy", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["zip", 0], ["txy", 0], ["t", 0], ["deque", 0], ["t", 0], ["x", 0], ["deque", 0], ["x", 0], ["y", 0], ["deque", 0], ["y", 0], ["t", 0], ["appendleft", 0], ["0", 0], ["x", 0], ["appendleft", 0], ["0", 0], ["y", 0], ["appendleft", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["direct", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["abs", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["abs", 0], ["y", 0], ["i", 0], ["1", 0], ["y", 0], ["i", 0], ["if", 0], ["direct", 0], ["0", 0], ["or", 0], ["direct", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["xx", 0], ["0", 0], ["yy", 0], ["0", 0], ["tt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["abs", 0], ["xx", 0], ["x", 0], ["abs", 0], ["yy", 0], ["y", 0], ["if", 0], ["t", 0], ["tt", 0], ["d", 0], ["or", 0], ["t", 0], ["tt", 0], ["d", 0], ["2", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["xx", 0], ["x", 0], ["yy", 0], ["y", 0], ["tt", 0], ["t", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["xy", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["append", 0], ["t", 0], ["xy", 0], ["append", 0], ["x", 0], ["y", 0], ["if", 0], ["t", 0], ["0", 0], ["abs", 0], ["xy", 0], ["0", 0], ["0", 0], ["abs", 0], ["xy", 0], ["0", 0], ["1", 0], ["and", 0], ["t", 0], ["0", 0], ["2", 0], ["abs", 0], ["xy", 0], ["0", 0], ["0", 0], ["abs", 0], ["xy", 0], ["0", 0], ["1", 0], ["2", 0], ["none", 0], ["else", 0], ["ans", 0], ["no", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["dt", 0], ["t", 0], ["i", 0], ["t", 0], ["i", 0], ["1", 0], ["dx", 0], ["abs", 0], ["xy", 0], ["i", 0], ["0", 0], ["xy", 0], ["i", 0], ["1", 0], ["0", 0], ["dy", 0], ["abs", 0], ["xy", 0], ["i", 0], ["1", 0], ["xy", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["dt", 0], ["dx", 0], ["dy", 0], ["and", 0], ["dt", 0], ["2", 0], ["dx", 0], ["dy", 0], ["2", 0], ["none", 0], ["else", 0], ["ans", 0], ["no", 0], ["print", 0], ["ans", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["txy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["txy", 0], ["0", 0], ["0", 0], ["0", 0], ["txy", 0], ["print", 0], ["txy", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["temp", 0], ["txy", 0], ["i", 0], ["1", 0], ["0", 0], ["txy", 0], ["i", 0], ["0", 0], ["abs", 0], ["txy", 0], ["i", 0], ["1", 0], ["1", 0], ["txy", 0], ["i", 0], ["1", 0], ["abs", 0], ["txy", 0], ["i", 0], ["1", 0], ["2", 0], ["txy", 0], ["i", 0], ["2", 0], ["if", 0], ["not", 0], ["temp", 0], ["2", 0], ["0", 0], ["and", 0], ["temp", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["main", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["x", 0], ["y", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["new", 0], ["x", 0], ["new", 0], ["y", 0], ["new", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["time", 0], ["t", 0], ["new", 0], ["t", 0], ["dis", 0], ["abs", 0], ["x", 0], ["new", 0], ["x", 0], ["abs", 0], ["y", 0], ["new", 0], ["y", 0], ["if", 0], ["time", 0], ["dis", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["time", 0], ["2", 0], ["dis", 0], ["2", 0], ["print", 0], ["no", 0], ["return", 0], ["t", 0], ["x", 0], ["y", 0], ["t", 0], ["new", 0], ["x", 0], ["new", 0], ["y", 0], ["new", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["0", 0], ["xy", 0], ["0", 0], ["0", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ti", 0], ["xi", 0], ["yi", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dt", 0], ["ti", 0], ["t", 0], ["dx", 0], ["abs", 0], ["xi", 0], ["xy", 0], ["0", 0], ["dy", 0], ["abs", 0], ["yi", 0], ["xy", 0], ["1", 0], ["if", 0], ["dt", 0], ["dx", 0], ["dy", 0], ["ans", 0], ["no", 0], ["elif", 0], ["dt", 0], ["2", 0], ["dx", 0], ["dy", 0], ["2", 0], ["ans", 0], ["no", 0], ["t", 0], ["ti", 0], ["xy", 0], ["xi", 0], ["yi", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["n", 0], ["list", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["n", 0], ["list", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["n", 0], ["dt", 0], ["n", 0], ["list", 0], ["t", 0], ["1", 0], ["0", 0], ["n", 0], ["list", 0], ["t", 0], ["0", 0], ["dist", 0], ["abs", 0], ["n", 0], ["list", 0], ["t", 0], ["1", 0], ["1", 0], ["n", 0], ["list", 0], ["t", 0], ["1", 0], ["abs", 0], ["n", 0], ["list", 0], ["t", 0], ["1", 0], ["2", 0], ["n", 0], ["list", 0], ["t", 0], ["2", 0], ["if", 0], ["dist", 0], ["dt", 0], ["can", 0], ["no", 0], ["break", 0], ["xy", 0], ["n", 0], ["list", 0], ["if", 0], ["dist", 0], ["2", 0], ["dt", 0], ["2", 0], ["can", 0], ["no", 0], ["break", 0], ["can", 0], ["yes", 0], ["print", 0], ["can", 0], ["https", 0], ["atcoder", 0], ["jp", 0], ["contests", 0], ["abc086", 0], ["tasks", 0], ["arc089", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["txy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["px", 0], ["py", 0], ["0", 0], ["0", 0], ["pt", 0], ["0", 0], ["for", 0], ["t", 0], ["x", 0], ["y", 0], ["in", 0], ["txy", 0], ["if", 0], ["not", 0], ["x", 0], ["y", 0], ["t", 0], ["and", 0], ["x", 0], ["y", 0], ["2", 0], ["t", 0], ["2", 0], ["and", 0], ["abs", 0], ["x", 0], ["px", 0], ["abs", 0], ["y", 0], ["py", 0], ["t", 0], ["pt", 0], ["print", 0], ["no", 0], ["return", 0], ["px", 0], ["py", 0], ["x", 0], ["y", 0], ["pt", 0], ["t", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["txy", 0], ["0", 0], ["0", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["check", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["k", 0], ["txy", 0], ["i", 0], ["0", 0], ["txy", 0], ["i", 0], ["1", 0], ["0", 0], ["tmp", 0], ["k", 0], ["abs", 0], ["sum", 0], ["txy", 0], ["i", 0], ["1", 0], ["sum", 0], ["txy", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["tmp", 0], ["0", 0], ["or", 0], ["tmp", 0], ["2", 0], ["1", 0], ["check", 0], ["false", 0], ["break", 0], ["print", 0], ["yes", 0], ["if", 0], ["check", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["x", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["txy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["append", 0], ["txy", 0], ["0", 0], ["x", 0], ["append", 0], ["txy", 0], ["1", 0], ["y", 0], ["append", 0], ["txy", 0], ["2", 0], ["now", 0], ["x", 0], ["0", 0], ["now", 0], ["y", 0], ["0", 0], ["now", 0], ["time", 0], ["0", 0], ["isok", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dist", 0], ["x", 0], ["i", 0], ["now", 0], ["x", 0], ["2", 0], ["y", 0], ["i", 0], ["now", 0], ["y", 0], ["2", 0], ["time", 0], ["t", 0], ["i", 0], ["now", 0], ["time", 0], ["if", 0], ["dist", 0], ["time", 0], ["2", 0], ["and", 0], ["dist", 0], ["2", 0], ["time", 0], ["2", 0], ["now", 0], ["x", 0], ["x", 0], ["i", 0], ["now", 0], ["y", 0], ["y", 0], ["i", 0], ["now", 0], ["time", 0], ["t", 0], ["i", 0], ["else", 0], ["isok", 0], ["false", 0], ["break", 0], ["if", 0], ["isok", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["0", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["abs", 0], ["t", 0], ["t", 0], ["x", 0], ["abs", 0], ["x", 0], ["x", 0], ["y", 0], ["abs", 0], ["y", 0], ["y", 0], ["if", 0], ["x", 0], ["y", 0], ["t", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["t", 0], ["2", 0], ["x", 0], ["y", 0], ["2", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["x", 0], ["0", 0], ["n", 0], ["1", 0], ["y", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["1", 0], ["y", 0], ["i", 0], ["1", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dt", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["dist", 0], ["abs", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["abs", 0], ["y", 0], ["i", 0], ["1", 0], ["y", 0], ["i", 0], ["if", 0], ["dt", 0], ["dist", 0], ["f", 0], ["false", 0], ["if", 0], ["dist", 0], ["2", 0], ["dt", 0], ["2", 0], ["f", 0], ["false", 0], ["print", 0], ["yes", 0], ["if", 0], ["f", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["prev", 0], ["t", 0], ["prev", 0], ["x", 0], ["prev", 0], ["y", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["abs", 0], ["x", 0], ["prev", 0], ["x", 0], ["abs", 0], ["y", 0], ["prev", 0], ["y", 0], ["t", 0], ["prev", 0], ["t", 0], ["and", 0], ["abs", 0], ["x", 0], ["prev", 0], ["x", 0], ["abs", 0], ["y", 0], ["prev", 0], ["y", 0], ["2", 0], ["t", 0], ["prev", 0], ["t", 0], ["2", 0], ["prev", 0], ["t", 0], ["prev", 0], ["x", 0], ["prev", 0], ["y", 0], ["t", 0], ["x", 0], ["y", 0], ["continue", 0], ["else", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["now", 0], ["0", 0], ["0", 0], ["0", 0], ["ans", 0], ["yes", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["inp", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["append", 0], ["inp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["shortest", 0], ["abs", 0], ["l", 0], ["i", 0], ["1", 0], ["now", 0], ["1", 0], ["abs", 0], ["l", 0], ["i", 0], ["2", 0], ["now", 0], ["2", 0], ["if", 0], ["shortest", 0], ["l", 0], ["i", 0], ["0", 0], ["now", 0], ["0", 0], ["ans", 0], ["no", 0], ["break", 0], ["a", 0], ["l", 0], ["i", 0], ["0", 0], ["now", 0], ["0", 0], ["shortest", 0], ["if", 0], ["a", 0], ["2", 0], ["0", 0], ["ans", 0], ["no", 0], ["break", 0], ["else", 0], ["now", 0], ["l", 0], ["i", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["y", 0], ["t", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["mt", 0], ["mx", 0], ["my", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ft", 0], ["mt", 0], ["t", 0], ["fx", 0], ["abs", 0], ["x", 0], ["mx", 0], ["fy", 0], ["abs", 0], ["y", 0], ["my", 0], ["if", 0], ["fx", 0], ["fy", 0], ["ft", 0], ["print", 0], ["no", 0], ["return", 0], ["elif", 0], ["ft", 0], ["fx", 0], ["fy", 0], ["2", 0], ["0", 0], ["pass", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["x", 0], ["y", 0], ["t", 0], ["mx", 0], ["my", 0], ["mt", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["x", 0], ["y", 0], ["0", 0], ["0", 0], ["0", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["nt", 0], ["nx", 0], ["ny", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["nt", 0], ["t", 0], ["abs", 0], ["nx", 0], ["x", 0], ["abs", 0], ["ny", 0], ["y", 0], ["2", 0], ["0", 0], ["or", 0], ["abs", 0], ["nx", 0], ["x", 0], ["abs", 0], ["ny", 0], ["y", 0], ["nt", 0], ["t", 0], ["ans", 0], ["no", 0], ["break", 0], ["else", 0], ["t", 0], ["nt", 0], ["x", 0], ["nx", 0], ["y", 0], ["ny", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["res", 0], ["true", 0], ["pre", 0], ["t", 0], ["pre", 0], ["x", 0], ["pre", 0], ["y", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["tmp", 0], ["t", 0], ["pre", 0], ["t", 0], ["abs", 0], ["x", 0], ["pre", 0], ["x", 0], ["abs", 0], ["y", 0], ["pre", 0], ["y", 0], ["if", 0], ["tmp", 0], ["0", 0], ["or", 0], ["tmp", 0], ["2", 0], ["1", 0], ["res", 0], ["false", 0], ["break", 0], ["pre", 0], ["t", 0], ["t", 0], ["pre", 0], ["x", 0], ["x", 0], ["pre", 0], ["y", 0], ["y", 0], ["print", 0], ["yes", 0], ["if", 0], ["res", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["y", 0], ["0", 0], ["0", 0], ["t", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ti", 0], ["xi", 0], ["yi", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["abs", 0], ["xi", 0], ["x", 0], ["yi", 0], ["y", 0], ["if", 0], ["l", 0], ["ti", 0], ["t", 0], ["and", 0], ["l", 0], ["2", 0], ["ti", 0], ["t", 0], ["2", 0], ["x", 0], ["y", 0], ["xi", 0], ["yi", 0], ["t", 0], ["ti", 0], ["else", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["from", 0], ["collections", 0], ["import", 0], ["namedtuple", 0], ["plan", 0], ["namedtuple", 0], ["plan", 0], ["time", 0], ["x", 0], ["y", 0], ["def", 0], ["main", 0], ["with", 0], ["open", 0], ["0", 0], ["as", 0], ["f", 0], ["n", 0], ["int", 0], ["f", 0], ["readline", 0], ["plans", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["f", 0], ["readline", 0], ["split", 0], ["plans", 0], ["append", 0], ["plan", 0], ["t", 0], ["x", 0], ["y", 0], ["current", 0], ["plan", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["p", 0], ["in", 0], ["plans", 0], ["t", 0], ["p", 0], ["time", 0], ["current", 0], ["time", 0], ["way", 0], ["abs", 0], ["p", 0], ["x", 0], ["current", 0], ["x", 0], ["abs", 0], ["p", 0], ["y", 0], ["current", 0], ["y", 0], ["if", 0], ["t", 0], ["way", 0], ["print", 0], ["no", 0], ["return", 0], ["none", 0], ["if", 0], ["t", 0], ["way", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["none", 0], ["current", 0], ["p", 0], ["else", 0], ["print", 0], ["yes", 0], ["main", 0], ["2パターンでのfail", 0], ["①→偶奇がstepと位置で違う", 0], ["単純に遠すぎる", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["pre", 0], ["0", 0], ["x", 0], ["pre", 0], ["0", 0], ["y", 0], ["pre", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["t", 0], ["t", 0], ["pre", 0], ["abs", 0], ["x", 0], ["x", 0], ["pre", 0], ["abs", 0], ["y", 0], ["y", 0], ["pre", 0], ["print", 0], ["no", 0], ["break", 0], ["if", 0], ["t", 0], ["2", 0], ["x", 0], ["y", 0], ["2", 0], ["print", 0], ["no", 0], ["break", 0], ["t", 0], ["pre", 0], ["t", 0], ["x", 0], ["pre", 0], ["x", 0], ["y", 0], ["pre", 0], ["y", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["txy", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["txy", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dt", 0], ["txy", 0], ["i", 0], ["1", 0], ["0", 0], ["txy", 0], ["i", 0], ["0", 0], ["dx", 0], ["txy", 0], ["i", 0], ["1", 0], ["1", 0], ["txy", 0], ["i", 0], ["1", 0], ["dy", 0], ["txy", 0], ["i", 0], ["1", 0], ["2", 0], ["txy", 0], ["i", 0], ["2", 0], ["if", 0], ["dt", 0], ["abs", 0], ["dx", 0], ["dy", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["if", 0], ["dt", 0], ["dx", 0], ["dy", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["main", 0], ["ans", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["now", 0], ["0", 0], ["0", 0], ["pt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["abs", 0], ["x", 0], ["now", 0], ["0", 0], ["y", 0], ["now", 0], ["1", 0], ["if", 0], ["d", 0], ["abs", 0], ["t", 0], ["pt", 0], ["or", 0], ["t", 0], ["pt", 0], ["2", 0], ["d", 0], ["2", 0], ["ans", 0], ["no", 0], ["break", 0], ["now", 0], ["x", 0], ["y", 0], ["pt", 0], ["t", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["0", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["t", 0], ["s", 0], ["abs", 0], ["x", 0], ["a", 0], ["abs", 0], ["y", 0], ["b", 0], ["0", 0], ["and", 0], ["t", 0], ["s", 0], ["abs", 0], ["x", 0], ["a", 0], ["abs", 0], ["y", 0], ["b", 0], ["2", 0], ["0", 0], ["s", 0], ["t", 0], ["a", 0], ["x", 0], ["b", 0], ["y", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["x0", 0], ["0", 0], ["y0", 0], ["0", 0], ["t0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["abs", 0], ["x", 0], ["x0", 0], ["abs", 0], ["y", 0], ["y0", 0], ["if", 0], ["d", 0], ["t", 0], ["t0", 0], ["print", 0], ["no", 0], ["return", 0], ["elif", 0], ["t", 0], ["t0", 0], ["d", 0], ["2", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["x0", 0], ["x", 0], ["y0", 0], ["y", 0], ["t0", 0], ["t", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["rx", 0], ["0", 0], ["ry", 0], ["0", 0], ["rt", 0], ["0", 0], ["ok", 0], ["true", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dist", 0], ["abs", 0], ["x", 0], ["rx", 0], ["abs", 0], ["y", 0], ["ry", 0], ["print", 0], ["dist", 0], ["if", 0], ["dist", 0], ["abs", 0], ["t", 0], ["rt", 0], ["and", 0], ["abs", 0], ["t", 0], ["rt", 0], ["dist", 0], ["2", 0], ["0", 0], ["rx", 0], ["x", 0], ["ry", 0], ["y", 0], ["rt", 0], ["t", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["flag", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["flag", 0], ["break", 0], ["time", 0], ["int", 0], ["a", 0], ["i", 0], ["1", 0], ["0", 0], ["int", 0], ["a", 0], ["i", 0], ["0", 0], ["dist", 0], ["abs", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["abs", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["a", 0], ["i", 0], ["2", 0], ["x2", 0], ["x1", 0], ["y2", 0], ["y1", 0], ["if", 0], ["time", 0], ["dist", 0], ["flag", 0], ["false", 0], ["elif", 0], ["time", 0], ["2", 0], ["dist", 0], ["2", 0], ["flag", 0], ["false", 0], ["if", 0], ["flag", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["n", 0], ["int", 0], ["input", 0], ["txy", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["txy", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["out", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["x", 0], ["np", 0], ["array", 0], ["txy", 0], ["i", 0], ["y", 0], ["np", 0], ["array", 0], ["txy", 0], ["i", 0], ["1", 0], ["mv", 0], ["abs", 0], ["x", 0], ["y", 0], ["print", 0], ["mv", 0], ["dam", 0], ["mv", 0], ["0", 0], ["mv", 0], ["1", 0], ["mv", 0], ["2", 0], ["if", 0], ["dam", 0], ["2", 0], ["1", 0], ["or", 0], ["dam", 0], ["0", 0], ["out", 0], ["no", 0], ["print", 0], ["out", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["append", 0], ["t", 0], ["x", 0], ["y", 0], ["judge", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["dt", 0], ["p", 0], ["i", 0], ["0", 0], ["p", 0], ["i", 0], ["1", 0], ["0", 0], ["dist", 0], ["abs", 0], ["p", 0], ["i", 0], ["1", 0], ["p", 0], ["i", 0], ["1", 0], ["1", 0], ["abs", 0], ["p", 0], ["i", 0], ["2", 0], ["p", 0], ["i", 0], ["1", 0], ["2", 0], ["if", 0], ["dt", 0], ["2", 0], ["0", 0], ["and", 0], ["dist", 0], ["2", 0], ["0", 0], ["and", 0], ["dist", 0], ["dt", 0], ["or", 0], ["dt", 0], ["2", 0], ["1", 0], ["and", 0], ["dist", 0], ["2", 0], ["1", 0], ["and", 0], ["dist", 0], ["dt", 0], ["judge", 0], ["true", 0], ["else", 0], ["judge", 0], ["false", 0], ["if", 0], ["judge", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["only", 0], ["need", 0], ["for", 0], ["big", 0], ["input", 0], ["def", 0], ["solve", 0], ["n", 0], ["int", 0], ["input", 0], ["pos", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pos", 0], ["append", 0], ["t", 0], ["x", 0], ["y", 0], ["prev", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["p", 0], ["in", 0], ["pos", 0], ["dt", 0], ["p", 0], ["0", 0], ["prev", 0], ["0", 0], ["move", 0], ["abs", 0], ["p", 0], ["1", 0], ["prev", 0], ["1", 0], ["abs", 0], ["p", 0], ["2", 0], ["prev", 0], ["2", 0], ["if", 0], ["move", 0], ["dt", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["if", 0], ["dt", 0], ["move", 0], ["2", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["prev", 0], ["p", 0], ["print", 0], ["yes", 0], ["def", 0], ["main", 0], ["solve", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["s", 0], ["0", 0], ["n", 0], ["1", 0], ["f", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["i", 0], ["t", 0], ["s", 0], ["i", 0], ["x", 0], ["y", 0], ["t", 0], ["0", 0], ["0", 0], ["s", 0], ["0", 0], ["0", 0], ["0", 0], ["print", 0], ["t", 0], ["print", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["t", 0], ["i", 0], ["t", 0], ["i", 0], ["1", 0], ["abs", 0], ["s", 0], ["i", 0], ["0", 0], ["s", 0], ["i", 0], ["1", 0], ["0", 0], ["abs", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["1", 0], ["f", 0], ["1", 0], ["if", 0], ["t", 0], ["i", 0], ["t", 0], ["i", 0], ["1", 0], ["2", 0], ["abs", 0], ["s", 0], ["i", 0], ["0", 0], ["s", 0], ["i", 0], ["1", 0], ["0", 0], ["abs", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["1", 0], ["2", 0], ["f", 0], ["1", 0], ["print", 0], ["yes", 0], ["if", 0], ["f", 0], ["0", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["x", 0], ["y", 0], ["0", 0], ["0", 0], ["0", 0], ["ans", 0], ["yes", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["n", 0], ["ti", 0], ["xi", 0], ["yi", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dist", 0], ["abs", 0], ["xi", 0], ["x", 0], ["abs", 0], ["yi", 0], ["y", 0], ["dt", 0], ["ti", 0], ["t", 0], ["if", 0], ["dist", 0], ["dt", 0], ["or", 0], ["dist", 0], ["dt", 0], ["2", 0], ["0", 0], ["ans", 0], ["no", 0], ["break", 0], ["t", 0], ["x", 0], ["y", 0], ["ti", 0], ["xi", 0], ["yi", 0], ["print", 0], ["ans", 0], ["t", 0], ["x", 0], ["y", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["t", 0], ["n", 0], ["x", 0], ["n", 0], ["y", 0], ["n", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["diff", 0], ["abs", 0], ["x", 0], ["x", 0], ["n", 0], ["abs", 0], ["y", 0], ["y", 0], ["n", 0], ["if", 0], ["diff", 0], ["t", 0], ["n", 0], ["t", 0], ["or", 0], ["t", 0], ["n", 0], ["t", 0], ["diff", 0], ["2", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["t", 0], ["x", 0], ["y", 0], ["t", 0], ["n", 0], ["x", 0], ["n", 0], ["y", 0], ["n", 0], ["print", 0], ["yes", 0], ["coding", 0], ["utf", 0], ["8", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["yes", 0], ["t", 0], ["x", 0], ["y", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["nt", 0], ["nx", 0], ["ny", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["abs", 0], ["x", 0], ["nx", 0], ["abs", 0], ["y", 0], ["ny", 0], ["if", 0], ["d", 0], ["nt", 0], ["t", 0], ["or", 0], ["nt", 0], ["t", 0], ["d", 0], ["2", 0], ["0", 0], ["ans", 0], ["no", 0], ["break", 0], ["t", 0], ["x", 0], ["y", 0], ["nt", 0], ["nx", 0], ["ny", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["user", 0], ["bin", 0], ["env", 0], ["pypy3", 0], ["import", 0], ["sys", 0], ["from", 0], ["typing", 0], ["import", 0], ["namedtuple", 0], ["list", 0], ["def", 0], ["fast", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["1", 0], ["class", 0], ["position", 0], ["namedtuple", 0], ["t", 0], ["int", 0], ["x", 0], ["int", 0], ["y", 0], ["int", 0], ["def", 0], ["calc", 0], ["diff", 0], ["move", 0], ["self", 0], ["position", 0], ["int", 0], ["diff", 0], ["x", 0], ["self", 0], ["x", 0], ["position", 0], ["x", 0], ["diff", 0], ["y", 0], ["self", 0], ["y", 0], ["position", 0], ["y", 0], ["return", 0], ["abs", 0], ["diff", 0], ["x", 0], ["abs", 0], ["diff", 0], ["y", 0], ["def", 0], ["can", 0], ["move", 0], ["from", 0], ["self", 0], ["prev", 0], ["bool", 0], ["diff", 0], ["t", 0], ["self", 0], ["t", 0], ["prev", 0], ["t", 0], ["diff", 0], ["move", 0], ["self", 0], ["calc", 0], ["diff", 0], ["move", 0], ["prev", 0], ["if", 0], ["not", 0], ["diff", 0], ["t", 0], ["2", 0], ["diff", 0], ["move", 0], ["2", 0], ["return", 0], ["false", 0], ["return", 0], ["diff", 0], ["t", 0], ["diff", 0], ["move", 0], ["def", 0], ["result", 0], ["format", 0], ["b", 0], ["bool", 0], ["str", 0], ["return", 0], ["yes", 0], ["if", 0], ["b", 0], ["else", 0], ["no", 0], ["def", 0], ["solve", 0], ["positions", 0], ["list", 0], ["position", 0], ["bool", 0], ["positions", 0], ["position", 0], ["t", 0], ["0", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["positions", 0], ["for", 0], ["p", 0], ["ind", 0], ["in", 0], ["range", 0], ["len", 0], ["positions", 0], ["1", 0], ["p", 0], ["curr", 0], ["positions", 0], ["p", 0], ["ind", 0], ["p", 0], ["next", 0], ["positions", 0], ["p", 0], ["ind", 0], ["1", 0], ["if", 0], ["not", 0], ["p", 0], ["next", 0], ["can", 0], ["move", 0], ["from", 0], ["p", 0], ["curr", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["fast", 0], ["input", 0], ["positions", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["fast", 0], ["input", 0], ["split", 0], ["positions", 0], ["append", 0], ["position", 0], ["t", 0], ["t", 0], ["x", 0], ["x", 0], ["y", 0], ["y", 0], ["result", 0], ["solve", 0], ["positions", 0], ["print", 0], ["result", 0], ["format", 0], ["result", 0], ["main", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["param", 0], ["0", 0], ["x", 0], ["param", 0], ["0", 0], ["y", 0], ["param", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["abs", 0], ["x", 0], ["x", 0], ["param", 0], ["abs", 0], ["y", 0], ["y", 0], ["param", 0], ["abs", 0], ["t", 0], ["t", 0], ["param", 0], ["or", 0], ["x", 0], ["y", 0], ["t", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["t", 0], ["param", 0], ["t", 0], ["x", 0], ["param", 0], ["x", 0], ["y", 0], ["param", 0], ["y", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["pt", 0], ["px", 0], ["py", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ct", 0], ["cx", 0], ["cy", 0], ["d", 0], ["i", 0], ["mvt", 0], ["mvx", 0], ["mvy", 0], ["abs", 0], ["ct", 0], ["pt", 0], ["abs", 0], ["cx", 0], ["px", 0], ["abs", 0], ["cy", 0], ["py", 0], ["dam", 0], ["mvt", 0], ["mvx", 0], ["mvy", 0], ["if", 0], ["dam", 0], ["2", 0], ["1", 0], ["or", 0], ["dam", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["pt", 0], ["px", 0], ["py", 0], ["d", 0], ["i", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["txy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["txy", 0], ["0", 0], ["0", 0], ["0", 0], ["txy", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["move", 0], ["abs", 0], ["txy", 0], ["i", 0], ["1", 0], ["1", 0], ["txy", 0], ["i", 0], ["1", 0], ["abs", 0], ["txy", 0], ["i", 0], ["1", 0], ["2", 0], ["txy", 0], ["i", 0], ["2", 0], ["time", 0], ["txy", 0], ["i", 0], ["1", 0], ["0", 0], ["txy", 0], ["i", 0], ["0", 0], ["if", 0], ["time", 0], ["2", 0], ["move", 0], ["2", 0], ["1", 0], ["or", 0], ["time", 0], ["move", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["num", 0], ["int", 0], ["input", 0], ["plan", 0], ["list", 0], ["0", 0], ["0", 0], ["0", 0], ["def", 0], ["movable", 0], ["p1", 0], ["p2", 0], ["time", 0], ["p2", 0], ["0", 0], ["p1", 0], ["0", 0], ["distance", 0], ["0", 0], ["distance", 0], ["abs", 0], ["p1", 0], ["1", 0], ["0", 0], ["p2", 0], ["1", 0], ["0", 0], ["distance", 0], ["abs", 0], ["p1", 0], ["1", 0], ["1", 0], ["p2", 0], ["1", 0], ["1", 0], ["if", 0], ["distance", 0], ["time", 0], ["return", 0], ["0", 0], ["else", 0], ["if", 0], ["time", 0], ["distance", 0], ["2", 0], ["0", 0], ["return", 0], ["0", 0], ["else", 0], ["return", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["num", 0], ["line", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["plan", 0], ["list", 0], ["append", 0], ["line", 0], ["0", 0], ["line", 0], ["1", 0], ["line", 0], ["2", 0], ["vector", 0], ["0", 0], ["0", 0], ["flag", 0], ["0", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["num", 0], ["1", 0], ["if", 0], ["movable", 0], ["plan", 0], ["list", 0], ["n", 0], ["1", 0], ["plan", 0], ["list", 0], ["n", 0], ["0", 0], ["flag", 0], ["1", 0], ["if", 0], ["flag", 0], ["1", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["最短でたどり着いたとして目的の時間までの残り時間が奇数ならばno", 0], ["あとそもそも時間を使ってもたどりつけない場合もno", 0], ["n", 0], ["int", 0], ["input", 0], ["pos", 0], ["0", 0], ["0", 0], ["time", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["最短でたどりつく時間", 0], ["dist", 0], ["abs", 0], ["pos", 0], ["0", 0], ["x", 0], ["abs", 0], ["pos", 0], ["1", 0], ["y", 0], ["そもそもたどりつけない場合", 0], ["if", 0], ["t", 0], ["time", 0], ["dist", 0], ["print", 0], ["no", 0], ["return", 0], ["偶奇性", 0], ["rest", 0], ["t", 0], ["time", 0], ["if", 0], ["rest", 0], ["2", 0], ["dist", 0], ["2", 0], ["print", 0], ["no", 0], ["return", 0], ["time", 0], ["t", 0], ["pos", 0], ["x", 0], ["y", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["input", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["position", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["pret", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["input", 0], ["i", 0], ["0", 0], ["x", 0], ["input", 0], ["i", 0], ["1", 0], ["y", 0], ["input", 0], ["i", 0], ["2", 0], ["move", 0], ["abs", 0], ["position", 0], ["x", 0], ["x", 0], ["abs", 0], ["position", 0], ["y", 0], ["y", 0], ["if", 0], ["move", 0], ["t", 0], ["pret", 0], ["or", 0], ["move", 0], ["2", 0], ["t", 0], ["pret", 0], ["2", 0], ["print", 0], ["no", 0], ["return", 0], ["pret", 0], ["t", 0], ["position", 0], ["x", 0], ["x", 0], ["position", 0], ["y", 0], ["y", 0], ["print", 0], ["yes", 0], ["import", 0], ["math", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["pi", 0], ["sqrt", 0], ["inf", 0], ["float", 0], ["inf", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["import", 0], ["itertools", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["deque", 0], ["def", 0], ["i", 0], ["input", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["i", 0], ["map", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["i", 0], ["list", 0], ["return", 0], ["list", 0], ["i", 0], ["map", 0], ["def", 0], ["i", 0], ["row", 0], ["n", 0], ["return", 0], ["i", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["i", 0], ["row", 0], ["list", 0], ["n", 0], ["return", 0], ["i", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["s", 0], ["input", 0], ["return", 0], ["input", 0], ["def", 0], ["s", 0], ["map", 0], ["return", 0], ["input", 0], ["split", 0], ["def", 0], ["s", 0], ["list", 0], ["return", 0], ["list", 0], ["s", 0], ["map", 0], ["def", 0], ["s", 0], ["row", 0], ["n", 0], ["return", 0], ["s", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["s", 0], ["row", 0], ["str", 0], ["n", 0], ["return", 0], ["s", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["s", 0], ["row", 0], ["list", 0], ["n", 0], ["return", 0], ["list", 0], ["s", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["main", 0], ["n", 0], ["i", 0], ["input", 0], ["xb", 0], ["0", 0], ["yb", 0], ["0", 0], ["tb", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["map", 0], ["walk", 0], ["abs", 0], ["x", 0], ["xb", 0], ["abs", 0], ["y", 0], ["yb", 0], ["if", 0], ["walk", 0], ["t", 0], ["tb", 0], ["時間足りない", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["t", 0], ["tb", 0], ["walk", 0], ["2", 0], ["0", 0], ["戻って来れん", 0], ["print", 0], ["no", 0], ["return", 0], ["xb", 0], ["x", 0], ["yb", 0], ["y", 0], ["tb", 0], ["t", 0], ["print", 0], ["yes", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["t", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dx", 0], ["dy", 0], ["dt", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["i", 0], ["0", 0], ["dist", 0], ["abs", 0], ["dx", 0], ["x", 0], ["dy", 0], ["y", 0], ["if", 0], ["abs", 0], ["dt", 0], ["t", 0], ["dist", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["abs", 0], ["dt", 0], ["t", 0], ["2", 0], ["if", 0], ["dist", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["if", 0], ["dist", 0], ["2", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["x", 0], ["y", 0], ["t", 0], ["dx", 0], ["dy", 0], ["dt", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["t0", 0], ["x0", 0], ["y0", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["kyori", 0], ["abs", 0], ["x", 0], ["x0", 0], ["abs", 0], ["y", 0], ["y0", 0], ["time", 0], ["t", 0], ["t0", 0], ["if", 0], ["abs", 0], ["kyori", 0], ["time", 0], ["2", 0], ["0", 0], ["and", 0], ["time", 0], ["kyori", 0], ["0", 0], ["t0", 0], ["x0", 0], ["y0", 0], ["t", 0], ["x", 0], ["y", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["0", 0], ["0", 0], ["0", 0], ["tuple", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["travelable", 0], ["p", 0], ["q", 0], ["time", 0], ["q", 0], ["0", 0], ["p", 0], ["0", 0], ["dist", 0], ["abs", 0], ["q", 0], ["1", 0], ["p", 0], ["1", 0], ["abs", 0], ["q", 0], ["2", 0], ["p", 0], ["2", 0], ["if", 0], ["dist", 0], ["time", 0], ["and", 0], ["time", 0], ["2", 0], ["dist", 0], ["2", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["from", 0], ["itertools", 0], ["import", 0], ["zip", 0], ["longest", 0], ["print", 0], ["yes", 0], ["if", 0], ["all", 0], ["travelable", 0], ["p", 0], ["q", 0], ["for", 0], ["p", 0], ["q", 0], ["in", 0], ["zip", 0], ["longest", 0], ["p", 0], ["n", 0], ["p", 0], ["1", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["insert", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dt", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["0", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["0", 0], ["dist", 0], ["abs", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["1", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["abs", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["2", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["2", 0], ["dt", 0], ["dist", 0], ["が必要", 0], ["if", 0], ["dt", 0], ["dist", 0], ["ans", 0], ["no", 0], ["break", 0], ["else", 0], ["dt", 0], ["dist", 0], ["の上で、dtとdistの偶奇が一致すればよい", 0], ["if", 0], ["dt", 0], ["dist", 0], ["2", 0], ["0", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["x", 0], ["y", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["c", 0], ["t", 0], ["x", 0], ["y", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["abs", 0], ["x", 0], ["b", 0], ["abs", 0], ["y", 0], ["c", 0], ["e", 0], ["t", 0], ["a", 0], ["if", 0], ["d", 0], ["2", 0], ["e", 0], ["2", 0], ["or", 0], ["d", 0], ["e", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["position", 0], ["t", 0], ["time", 0], ["p", 0], ["0", 0], ["0", 0], ["t0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dt", 0], ["t", 0], ["t0", 0], ["dis", 0], ["abs", 0], ["x", 0], ["p", 0], ["0", 0], ["abs", 0], ["y", 0], ["p", 0], ["1", 0], ["if", 0], ["dis", 0], ["dt", 0], ["print", 0], ["no", 0], ["return", 0], ["elif", 0], ["dt", 0], ["dis", 0], ["2", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["t0", 0], ["t", 0], ["p", 0], ["x", 0], ["y", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["0", 0], ["0", 0], ["0", 0], ["ans", 0], ["yes", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["abs", 0], ["t", 0], ["1", 0], ["t", 0], ["2", 0], ["t", 0], ["1", 0], ["t", 0], ["2", 0], ["n", 0], ["t", 0], ["0", 0], ["t", 0], ["0", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["if", 0], ["k", 0], ["n", 0], ["or", 0], ["k", 0], ["2", 0], ["0", 0], ["ans", 0], ["no", 0], ["else", 0], ["if", 0], ["k", 0], ["n", 0], ["or", 0], ["k", 0], ["2", 0], ["0", 0], ["ans", 0], ["no", 0], ["t", 0], ["t", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["append", 0], ["t", 0], ["l", 0], ["insert", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["time", 0], ["abs", 0], ["l", 0], ["i", 0], ["1", 0], ["0", 0], ["l", 0], ["i", 0], ["0", 0], ["distance", 0], ["abs", 0], ["l", 0], ["i", 0], ["1", 0], ["1", 0], ["l", 0], ["i", 0], ["1", 0], ["abs", 0], ["l", 0], ["i", 0], ["1", 0], ["2", 0], ["l", 0], ["i", 0], ["2", 0], ["if", 0], ["time", 0], ["distance", 0], ["or", 0], ["time", 0], ["2", 0], ["distance", 0], ["2", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["t", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dx", 0], ["dy", 0], ["dt", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["i", 0], ["0", 0], ["dist", 0], ["abs", 0], ["dx", 0], ["x", 0], ["dy", 0], ["y", 0], ["if", 0], ["abs", 0], ["dt", 0], ["t", 0], ["dist", 0], ["or", 0], ["dt", 0], ["t", 0], ["dist", 0], ["2", 0], ["print", 0], ["no", 0], ["return", 0], ["x", 0], ["y", 0], ["t", 0], ["dx", 0], ["dy", 0], ["dt", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["bt", 0], ["0", 0], ["bx", 0], ["0", 0], ["by", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dt", 0], ["abs", 0], ["x", 0], ["bx", 0], ["abs", 0], ["y", 0], ["by", 0], ["if", 0], ["dt", 0], ["t", 0], ["bt", 0], ["or", 0], ["dt", 0], ["2", 0], ["t", 0], ["bt", 0], ["2", 0], ["print", 0], ["no", 0], ["break", 0], ["bt", 0], ["t", 0], ["bx", 0], ["x", 0], ["by", 0], ["y", 0], ["else", 0], ["print", 0], ["yes", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["l", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["insert", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["print", 0], ["n", 0], ["print", 0], ["d", 0], ["def", 0], ["get", 0], ["length", 0], ["l1", 0], ["l2", 0], ["return", 0], ["abs", 0], ["l1", 0], ["1", 0], ["l2", 0], ["1", 0], ["abs", 0], ["l1", 0], ["2", 0], ["l2", 0], ["2", 0], ["for", 0], ["cnt", 0], ["in", 0], ["range", 0], ["n", 0], ["length", 0], ["get", 0], ["length", 0], ["d", 0], ["cnt", 0], ["d", 0], ["cnt", 0], ["1", 0], ["time", 0], ["abs", 0], ["d", 0], ["cnt", 0], ["0", 0], ["d", 0], ["cnt", 0], ["1", 0], ["0", 0], ["if", 0], ["length", 0], ["time", 0], ["and", 0], ["abs", 0], ["time", 0], ["length", 0], ["2", 0], ["0", 0], ["pass", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["insert", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["b", 0], ["a", 0], ["i", 0], ["1", 0], ["0", 0], ["a", 0], ["i", 0], ["0", 0], ["c", 0], ["abs", 0], ["a", 1], ["i", 1], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["if", 0], ["b", 0], ["c", 0], ["or", 0], ["b", 0], ["2", 0], ["c", 0], ["2", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["coding", 0], ["utf", 0], ["8", 0], ["created", 0], ["on", 0], ["mon", 0], ["sep", 0], ["21", 0], ["23", 0], ["53", 0], ["42", 0], ["2020", 0], ["author", 0], ["liang", 0], ["n", 0], ["int", 0], ["input", 0], ["prev", 0], ["0", 0], ["0", 0], ["0", 0], ["flag", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["t", 0], ["2", 0], ["x", 0], ["y", 0], ["2", 0], ["flag", 0], ["false", 0], ["if", 0], ["abs", 0], ["x", 0], ["y", 0], ["prev", 0], ["1", 0], ["prev", 0], ["2", 0], ["t", 0], ["prev", 0], ["0", 0], ["flag", 0], ["false", 0], ["prev", 0], ["t", 0], ["x", 0], ["y", 0], ["if", 0], ["flag", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["pt", 0], ["px", 0], ["py", 0], ["0", 0], ["0", 0], ["0", 0], ["f", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["gt", 0], ["t", 0], ["pt", 0], ["gx", 0], ["gy", 0], ["abs", 0], ["x", 0], ["px", 0], ["abs", 0], ["y", 0], ["py", 0], ["gt", 0], ["gx", 0], ["gy", 0], ["if", 0], ["gt", 0], ["0", 0], ["or", 0], ["gt", 0], ["2", 0], ["1", 0], ["f", 0], ["1", 0], ["pt", 0], ["px", 0], ["py", 0], ["t", 0], ["x", 0], ["y", 0], ["if", 0], ["f", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["px", 0], ["0", 0], ["py", 0], ["0", 0], ["pt", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["d", 0], ["abs", 0], ["x", 0], ["px", 0], ["y", 0], ["py", 0], ["dt", 0], ["t", 0], ["pt", 0], ["if", 0], ["d", 0], ["dt", 0], ["or", 0], ["d", 0], ["2", 0], ["dt", 0], ["2", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["return", 0], ["else", 0], ["px", 0], ["x", 0], ["py", 0], ["y", 0], ["pt", 0], ["t", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["pt", 0], ["px", 0], ["py", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["abs", 0], ["x", 0], ["px", 0], ["abs", 0], ["y", 0], ["py", 0], ["if", 0], ["d", 0], ["t", 0], ["pt", 0], ["or", 0], ["d", 0], ["t", 0], ["pt", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["pt", 0], ["px", 0], ["py", 0], ["t", 0], ["x", 0], ["y", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["locx", 0], ["0", 0], ["locy", 0], ["0", 0], ["time", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["nowtime", 0], ["t", 0], ["time", 0], ["dis", 0], ["abs", 0], ["locx", 0], ["x", 0], ["abs", 0], ["locy", 0], ["y", 0], ["if", 0], ["nowtime", 0], ["dis", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["nowtime", 0], ["dis", 0], ["2", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["time", 0], ["t", 0], ["locx", 0], ["x", 0], ["locy", 0], ["y", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["num", 0], ["a", 0], ["b", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["num", 0], ["a", 0], ["b", 0], ["abs", 0], ["t", 0], ["num", 0], ["abs", 0], ["x", 0], ["a", 0], ["abs", 0], ["y", 0], ["b", 0], ["su", 0], ["a", 0], ["b", 0], ["if", 0], ["num", 0], ["su", 0], ["and", 0], ["num", 0], ["2", 0], ["su", 0], ["2", 0], ["ans", 0], ["yes", 0], ["else", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["list", 0], ["of", 0], ["t", 0], ["x", 0], ["y", 0], ["pret", 0], ["prex", 0], ["prey", 0], ["0", 0], ["f", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["p", 0], ["i", 0], ["0", 0], ["x", 0], ["p", 0], ["i", 0], ["1", 0], ["y", 0], ["p", 0], ["i", 0], ["2", 0], ["td", 0], ["t", 0], ["pret", 0], ["xd", 0], ["abs", 0], ["x", 0], ["prex", 0], ["yd", 0], ["abs", 0], ["y", 0], ["prey", 0], ["diff", 0], ["xd", 0], ["yd", 0], ["最低かかるt", 0], ["if", 0], ["td", 0], ["diff", 0], ["f", 0], ["0", 0], ["break", 0], ["if", 0], ["td", 0], ["diff", 0], ["2", 0], ["0", 0], ["pret", 0], ["t", 0], ["prex", 0], ["x", 0], ["prey", 0], ["y", 0], ["continue", 0], ["else", 0], ["f", 0], ["0", 0], ["break", 0], ["if", 0], ["f", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["txn", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["txn", 0], ["append", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ima", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dist", 0], ["abs", 0], ["ima", 0], ["1", 0], ["txn", 0], ["i", 0], ["1", 0], ["abs", 0], ["ima", 0], ["2", 0], ["txn", 0], ["i", 0], ["2", 0], ["if", 0], ["dist", 0], ["txn", 0], ["i", 0], ["0", 0], ["ima", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["dist", 0], ["2", 0], ["txn", 0], ["i", 0], ["0", 0], ["ima", 0], ["0", 0], ["2", 0], ["print", 0], ["no", 0], ["return", 0], ["ima", 0], ["txn", 0], ["i", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["0", 0], ["0", 0], ["0", 0], ["tuple", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["travelable", 0], ["p", 0], ["q", 0], ["time", 0], ["q", 0], ["0", 0], ["p", 0], ["0", 0], ["dist", 0], ["abs", 0], ["q", 0], ["1", 0], ["p", 0], ["1", 0], ["abs", 0], ["q", 0], ["2", 0], ["p", 0], ["2", 0], ["if", 0], ["dist", 0], ["time", 0], ["and", 0], ["time", 0], ["2", 0], ["dist", 0], ["2", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["print", 0], ["yes", 0], ["if", 0], ["all", 0], ["travelable", 0], ["p", 0], ["q", 0], ["for", 0], ["p", 0], ["q", 0], ["in", 0], ["zip", 0], ["p", 0], ["n", 0], ["p", 0], ["1", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["success", 0], ["true", 0], ["t0", 0], ["x0", 0], ["y0", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t1", 0], ["x1", 0], ["y1", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dist", 0], ["abs", 0], ["x1", 0], ["x0", 0], ["abs", 0], ["y1", 0], ["y0", 0], ["time", 0], ["t1", 0], ["t0", 0], ["check1", 0], ["time", 0], ["dist", 0], ["check2", 0], ["time", 0], ["dist", 0], ["and", 0], ["time", 0], ["dist", 0], ["2", 0], ["0", 0], ["if", 0], ["not", 0], ["check1", 0], ["or", 0], ["check2", 0], ["success", 0], ["false", 0], ["break", 0], ["t0", 0], ["x0", 0], ["y0", 0], ["t1", 0], ["x1", 0], ["y1", 0], ["if", 0], ["success", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["def", 0], ["func", 0], ["start", 0], ["goal", 0], ["t", 0], ["distance", 0], ["abs", 0], ["start", 0], ["0", 0], ["goal", 0], ["0", 0], ["abs", 0], ["start", 0], ["1", 0], ["goal", 0], ["1", 0], ["if", 0], ["distance", 0], ["t", 0], ["and", 0], ["t", 0], ["distance", 0], ["2", 0], ["0", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["now", 0], ["0", 0], ["can", 0], ["1", 0], ["start", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["goal", 0], ["x", 0], ["y", 0], ["if", 0], ["not", 0], ["func", 0], ["start", 0], ["goal", 0], ["t", 0], ["now", 0], ["can", 0], ["0", 0], ["break", 0], ["else", 0], ["start", 0], ["goal", 0], ["now", 0], ["t", 0], ["if", 0], ["can", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["ti", 0], ["xi", 0], ["yi", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ti1", 0], ["xi1", 0], ["yi1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["abs", 0], ["xi1", 0], ["xi", 0], ["abs", 0], ["yi1", 0], ["yi", 0], ["ti1", 0], ["ti", 0], ["and", 0], ["abs", 0], ["xi1", 0], ["xi", 0], ["abs", 0], ["yi1", 0], ["yi", 0], ["2", 0], ["ti1", 0], ["ti", 0], ["2", 0], ["xi", 0], ["xi1", 0], ["yi", 0], ["yi1", 0], ["ti", 0], ["ti1", 0], ["continue", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["0", 0], ["n", 0], ["1", 0], ["a", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["i", 0], ["1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["flag", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["abs", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["abs", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["a", 0], ["i", 0], ["2", 0], ["a", 0], ["i", 0], ["1", 0], ["0", 0], ["a", 0], ["i", 0], ["0", 0], ["flag", 0], ["false", 0], ["elif", 0], ["abs", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["abs", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["a", 0], ["i", 0], ["2", 0], ["a", 0], ["i", 0], ["1", 0], ["0", 0], ["a", 0], ["i", 0], ["0", 0], ["2", 0], ["1", 0], ["flag", 0], ["false", 0], ["if", 0], ["flag", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["num", 0], ["a", 0], ["b", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["num", 0], ["a", 0], ["b", 0], ["abs", 0], ["t", 0], ["num", 0], ["abs", 0], ["x", 0], ["a", 0], ["abs", 0], ["y", 0], ["b", 0], ["su", 0], ["a", 0], ["b", 0], ["if", 0], ["num", 0], ["su", 0], ["and", 0], ["num", 0], ["2", 0], ["su", 0], ["2", 0], ["ans", 0], ["yes", 0], ["else", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["xy", 0], ["def", 0], ["f", 0], ["x1", 0], ["y1", 0], ["x2", 0], ["y2", 0], ["return", 0], ["abs", 0], ["x1", 0], ["x2", 0], ["abs", 0], ["y1", 0], ["y2", 0], ["cx", 0], ["cy", 0], ["0", 0], ["0", 0], ["ct", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["f", 0], ["cx", 0], ["cy", 0], ["x", 0], ["y", 0], ["print", 0], ["f", 0], ["ct", 0], ["t", 0], ["d", 0], ["if", 0], ["d", 0], ["t", 0], ["ct", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["t", 0], ["ct", 0], ["d", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["cx", 0], ["cy", 0], ["x", 0], ["y", 0], ["ct", 0], ["t", 0], ["print", 0], ["yes", 0], ["created", 0], ["on", 0], ["2020", 0], ["08", 0], ["31", 0], ["author", 0], ["harurun", 0], ["def", 0], ["main", 0], ["import", 0], ["sys", 0], ["pin", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["pout", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["perr", 0], ["sys", 0], ["stderr", 0], ["write", 0], ["n", 0], ["int", 0], ["pin", 0], ["time", 0], ["0", 0], ["nx", 0], ["0", 0], ["ny", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["pin", 0], ["split", 0], ["d", 0], ["abs", 0], ["nx", 0], ["x", 0], ["abs", 0], ["ny", 0], ["y", 0], ["s", 0], ["t", 0], ["time", 0], ["if", 0], ["d", 0], ["s", 0], ["and", 0], ["s", 0], ["2", 0], ["d", 0], ["2", 0], ["time", 0], ["t", 0], ["nx", 0], ["x", 0], ["ny", 0], ["y", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["return", 0], ["main", 0], ["kaisetuac", 0], ["n", 0], ["int", 0], ["input", 0], ["px", 0], ["py", 0], ["pt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["abs", 0], ["x", 0], ["px", 0], ["abs", 0], ["y", 0], ["py", 0], ["nt", 0], ["t", 0], ["pt", 0], ["if", 0], ["nt", 0], ["d", 0], ["or", 0], ["d", 0], ["2", 0], ["nt", 0], ["2", 0], ["print", 0], ["no", 0], ["return", 0], ["px", 0], ["x", 0], ["py", 0], ["y", 0], ["pt", 0], ["t", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["txy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["0", 0], ["0", 0], ["t", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["abs", 0], ["x", 0], ["y", 0], ["txy", 0], ["i", 0], ["1", 0], ["txy", 0], ["i", 0], ["2", 0], ["2", 0], ["abs", 0], ["t", 0], ["txy", 0], ["i", 0], ["0", 0], ["2", 0], ["and", 0], ["abs", 0], ["t", 0], ["txy", 0], ["i", 0], ["0", 0], ["abs", 0], ["x", 0], ["y", 0], ["txy", 0], ["i", 0], ["1", 0], ["txy", 0], ["i", 0], ["2", 0], ["x", 0], ["y", 0], ["txy", 0], ["i", 0], ["1", 0], ["txy", 0], ["i", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["t", 0], ["txy", 0], ["i", 0], ["0", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["check", 0], ["a", 0], ["i", 0], ["1", 0], ["0", 0], ["a", 0], ["i", 0], ["0", 0], ["abs", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["abs", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["a", 0], ["i", 0], ["2", 0], ["if", 0], ["check", 0], ["0", 0], ["and", 0], ["check", 0], ["2", 0], ["0", 0], ["continue", 0], ["else", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["coding", 0], ["utf", 0], ["8", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["yes", 0], ["t", 0], ["x", 0], ["y", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["nt", 0], ["nx", 0], ["ny", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["abs", 0], ["x", 0], ["nx", 0], ["abs", 0], ["y", 0], ["ny", 0], ["if", 0], ["d", 0], ["nt", 0], ["t", 0], ["or", 0], ["nt", 0], ["t", 0], ["d", 0], ["2", 0], ["0", 0], ["ans", 0], ["no", 0], ["break", 0], ["t", 0], ["x", 0], ["y", 0], ["nt", 0], ["nx", 0], ["ny", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["stand", 0], ["0", 0], ["0", 0], ["prev", 0], ["0", 0], ["for", 0], ["t", 0], ["x", 0], ["y", 0], ["in", 0], ["s", 0], ["diff", 0], ["abs", 0], ["x", 0], ["y", 0], ["sum", 0], ["stand", 0], ["walk", 0], ["t", 0], ["prev", 0], ["if", 0], ["diff", 0], ["walk", 0], ["and", 0], ["walk", 0], ["2", 0], ["diff", 0], ["2", 0], ["stand", 0], ["x", 0], ["y", 0], ["prev", 0], ["t", 0], ["else", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["t0", 0], ["x0", 0], ["y0", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["kyori", 0], ["abs", 0], ["x", 0], ["x0", 0], ["abs", 0], ["y", 0], ["y0", 0], ["time", 0], ["abs", 0], ["t0", 0], ["t", 0], ["if", 0], ["abs", 0], ["kyori", 0], ["time", 0], ["2", 0], ["0", 0], ["and", 0], ["time", 0], ["kyori", 0], ["0", 0], ["t0", 0], ["x0", 0], ["y0", 0], ["t", 0], ["x", 0], ["y", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["0", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["2", 0], ["0", 0], ["or", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["2", 0], ["0", 0], ["or", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["0", 0], ["a", 1], ["i", 1], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["insert", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dt", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["0", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["0", 0], ["dist", 0], ["abs", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["1", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["abs", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["2", 0], ["t", 0], ["x", 0], ["y", 0], ["i", 0], ["2", 0], ["if", 0], ["dt", 0], ["dist", 0], ["ans", 0], ["no", 0], ["break", 0], ["else", 0], ["dt", 0], ["dist", 0], ["if", 0], ["dt", 0], ["dist", 0], ["2", 0], ["0", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["0", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["int", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["input", 0], ["split", 0], ["t", 0], ["append", 0], ["l", 0], ["0", 0], ["x", 0], ["append", 0], ["l", 0], ["1", 0], ["y", 0], ["append", 0], ["l", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["move", 0], ["abs", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["abs", 0], ["y", 0], ["i", 0], ["1", 0], ["y", 0], ["i", 0], ["time", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["if", 0], ["time", 0], ["2", 0], ["move", 0], ["2", 0], ["1", 0], ["or", 0], ["time", 0], ["move", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["bx", 0], ["by", 0], ["bt", 0], ["0", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["t", 0], ["2", 0], ["x", 0], ["y", 0], ["2", 0], ["ans", 0], ["no", 0], ["if", 0], ["abs", 0], ["bx", 0], ["x", 0], ["abs", 0], ["by", 0], ["y", 0], ["abs", 0], ["bt", 0], ["t", 0], ["ans", 0], ["no", 0], ["bx", 0], ["x", 0], ["by", 0], ["y", 0], ["bt", 0], ["t", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["0", 0], ["0", 0], ["0", 0], ["flag", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["abs", 0], ["l", 0], ["i", 0], ["1", 0], ["1", 0], ["l", 0], ["i", 0], ["1", 0], ["abs", 0], ["l", 0], ["i", 0], ["1", 0], ["2", 0], ["l", 0], ["i", 0], ["2", 0], ["if", 0], ["l", 0], ["i", 0], ["1", 0], ["0", 0], ["l", 0], ["i", 0], ["0", 0], ["d", 0], ["and", 0], ["l", 0], ["i", 0], ["1", 0], ["0", 0], ["l", 0], ["i", 0], ["0", 0], ["d", 0], ["2", 0], ["0", 0], ["continue", 0], ["else", 0], ["flag", 0], ["0", 0], ["if", 0], ["flag", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["user", 0], ["bin", 0], ["env", 0], ["pypy3", 0], ["import", 0], ["sys", 0], ["from", 0], ["typing", 0], ["import", 0], ["namedtuple", 0], ["list", 0], ["def", 0], ["fast", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["1", 0], ["class", 0], ["position", 0], ["namedtuple", 0], ["t", 0], ["int", 0], ["x", 0], ["int", 0], ["y", 0], ["int", 0], ["def", 0], ["calc", 0], ["diff", 0], ["move", 0], ["self", 0], ["position", 0], ["int", 0], ["diff", 0], ["x", 0], ["self", 0], ["x", 0], ["position", 0], ["x", 0], ["diff", 0], ["y", 0], ["self", 0], ["y", 0], ["position", 0], ["y", 0], ["return", 0], ["abs", 0], ["diff", 0], ["x", 0], ["abs", 0], ["diff", 0], ["y", 0], ["def", 0], ["can", 0], ["move", 0], ["from", 0], ["self", 0], ["prev", 0], ["bool", 0], ["diff", 0], ["t", 0], ["self", 0], ["t", 0], ["prev", 0], ["t", 0], ["diff", 0], ["move", 0], ["self", 0], ["calc", 0], ["diff", 0], ["move", 0], ["prev", 0], ["奇数のときはその場禁止", 0], ["if", 0], ["not", 0], ["diff", 0], ["t", 0], ["2", 0], ["diff", 0], ["move", 0], ["2", 0], ["return", 0], ["false", 0], ["return", 0], ["diff", 0], ["t", 0], ["diff", 0], ["move", 0], ["def", 0], ["result", 0], ["format", 0], ["b", 0], ["bool", 0], ["str", 0], ["return", 0], ["yes", 0], ["if", 0], ["b", 0], ["else", 0], ["no", 0], ["def", 0], ["solve", 0], ["positions", 0], ["list", 0], ["position", 0], ["bool", 0], ["positions", 0], ["position", 0], ["t", 0], ["0", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["positions", 0], ["for", 0], ["p", 0], ["ind", 0], ["in", 0], ["range", 0], ["len", 0], ["positions", 0], ["1", 0], ["p", 0], ["curr", 0], ["positions", 0], ["p", 0], ["ind", 0], ["p", 0], ["next", 0], ["positions", 0], ["p", 0], ["ind", 0], ["1", 0], ["if", 0], ["not", 0], ["p", 0], ["next", 0], ["can", 0], ["move", 0], ["from", 0], ["p", 0], ["curr", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["fast", 0], ["input", 0], ["positions", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["fast", 0], ["input", 0], ["split", 0], ["positions", 0], ["append", 0], ["position", 0], ["t", 0], ["t", 0], ["x", 0], ["x", 0], ["y", 0], ["y", 0], ["result", 0], ["solve", 0], ["positions", 0], ["print", 0], ["result", 0], ["format", 0], ["result", 0], ["main", 0], ["cnt", 0], ["int", 0], ["input", 0], ["t", 0], ["s", 0], ["x", 0], ["s", 0], ["y", 0], ["s", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["cnt", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["t", 0], ["d", 0], ["x", 0], ["d", 0], ["y", 0], ["t", 0], ["t", 0], ["s", 0], ["x", 0], ["x", 0], ["s", 0], ["y", 0], ["y", 0], ["s", 0], ["z", 0], ["abs", 0], ["d", 0], ["x", 0], ["d", 0], ["y", 0], ["if", 0], ["z", 0], ["d", 0], ["t", 0], ["or", 0], ["d", 0], ["t", 0], ["z", 0], ["2", 0], ["1", 0], ["print", 0], ["no", 0], ["break", 0], ["t", 0], ["s", 0], ["x", 0], ["s", 0], ["y", 0], ["s", 0], ["t", 0], ["x", 0], ["y", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["location", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["fail", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["j", 0], ["0", 0], ["a", 0], ["0", 0], ["0", 0], ["0", 0], ["else", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["location", 0], ["j", 0], ["1", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["location", 0], ["j", 0], ["split", 0], ["x", 0], ["abs", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["y", 0], ["abs", 0], ["a", 0], ["2", 0], ["b", 0], ["2", 0], ["t", 0], ["b", 0], ["0", 0], ["a", 0], ["0", 0], ["if", 0], ["x", 0], ["y", 0], ["t", 0], ["if", 0], ["x", 0], ["y", 0], ["2", 0], ["t", 0], ["2", 0], ["pass", 0], ["else", 0], ["fail", 0], ["1", 0], ["else", 0], ["fail", 0], ["1", 0], ["if", 0], ["fail", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["append", 0], ["t", 0], ["x", 0], ["y", 0], ["t", 0], ["0", 0], ["n", 0], ["dist", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["i", 0], ["p", 0], ["i", 0], ["1", 0], ["0", 0], ["p", 0], ["i", 0], ["0", 0], ["dist", 0], ["i", 0], ["abs", 0], ["p", 0], ["i", 0], ["1", 0], ["1", 0], ["p", 0], ["i", 0], ["1", 0], ["abs", 0], ["p", 0], ["i", 0], ["1", 0], ["2", 0], ["p", 0], ["i", 0], ["2", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["dist", 0], ["i", 0], ["t", 0], ["i", 0], ["ans", 0], ["0", 0], ["else", 0], ["m", 0], ["t", 0], ["i", 0], ["dist", 0], ["i", 0], ["if", 0], ["m", 0], ["2", 0], ["0", 0], ["pass", 0], ["else", 0], ["ans", 0], ["0", 0], ["if", 0], ["ans", 0], ["0", 0], ["break", 0], ["print", 0], ["yes", 0], ["if", 0], ["ans", 0], ["1", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["0", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["judge", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["append", 0], ["t", 0], ["x", 0], ["append", 0], ["x", 0], ["y", 0], ["append", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["delt", 0], ["t", 0], ["t", 0], ["i", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["parity", 0], ["delt", 0], ["t", 0], ["2", 0], ["d", 0], ["abs", 0], ["x", 0], ["i", 0], ["x", 0], ["i", 0], ["1", 0], ["abs", 0], ["y", 0], ["i", 0], ["y", 0], ["i", 0], ["1", 0], ["d", 0], ["parity", 0], ["d", 0], ["2", 0], ["if", 0], ["delt", 0], ["t", 0], ["d", 0], ["and", 0], ["t", 0], ["parity", 0], ["d", 0], ["parity", 0], ["continue", 0], ["else", 0], ["judge", 0], ["no", 0], ["break", 0], ["print", 0], ["judge", 0], ["n", 0], ["int", 0], ["input", 0], ["rx", 0], ["0", 0], ["ry", 0], ["0", 0], ["rt", 0], ["0", 0], ["ok", 0], ["true", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dist", 0], ["abs", 0], ["x", 0], ["rx", 0], ["abs", 0], ["y", 0], ["ry", 0], ["print", 0], ["dist", 0], ["if", 0], ["dist", 0], ["abs", 0], ["t", 0], ["rt", 0], ["and", 0], ["abs", 0], ["t", 0], ["rt", 0], ["dist", 0], ["2", 0], ["0", 0], ["rx", 0], ["x", 0], ["ry", 0], ["y", 0], ["rt", 0], ["t", 0], ["else", 0], ["ok", 0], ["false", 0], ["if", 0], ["ok", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["0", 0], ["0", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t1", 0], ["x1", 0], ["y1", 0], ["arr", 0], ["i", 0], ["t2", 0], ["x2", 0], ["y2", 0], ["arr", 0], ["i", 0], ["1", 0], ["if", 0], ["abs", 0], ["x1", 0], ["x2", 0], ["abs", 0], ["y1", 0], ["y2", 0], ["t2", 0], ["t1", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["abs", 0], ["x1", 0], ["x2", 0], ["abs", 0], ["y1", 0], ["y2", 0], ["2", 0], ["t2", 0], ["t1", 0], ["2", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["row", 0], ["int", 0], ["input", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["row", 0], ["list", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["t", 0], ["0", 0], ["flag", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["row", 0], ["reqt", 0], ["abs", 0], ["list", 0], ["i", 0], ["1", 0], ["x", 0], ["abs", 0], ["list", 0], ["i", 0], ["2", 0], ["y", 0], ["chck", 0], ["list", 0], ["i", 0], ["0", 0], ["t", 0], ["reqt", 0], ["if", 0], ["chck", 0], ["0", 0], ["or", 0], ["chck", 0], ["2", 0], ["1", 0], ["flag", 0], ["false", 0], ["break", 0], ["x", 0], ["list", 0], ["i", 0], ["1", 0], ["y", 0], ["list", 0], ["i", 0], ["2", 0], ["t", 0], ["list", 0], ["i", 0], ["0", 0], ["if", 0], ["flag", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["pt", 0], ["px", 0], ["py", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ct", 0], ["cx", 0], ["cy", 0], ["l", 0], ["i", 0], ["mvt", 0], ["mvx", 0], ["mvy", 0], ["abs", 0], ["ct", 0], ["pt", 0], ["abs", 0], ["cx", 0], ["px", 0], ["abs", 0], ["cy", 0], ["py", 0], ["dam", 0], ["mvt", 0], ["mvx", 0], ["mvy", 0], ["if", 0], ["dam", 0], ["2", 0], ["1", 0], ["or", 0], ["dam", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["pt", 0], ["px", 0], ["py", 0], ["l", 0], ["i", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["pt", 0], ["px", 0], ["py", 0], ["0", 0], ["0", 0], ["0", 0], ["can", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["x", 0], ["y", 0], ["t", 0], ["pt", 0], ["abs", 0], ["x", 0], ["px", 0], ["abs", 0], ["y", 0], ["py", 0], ["if", 0], ["t", 0], ["x", 0], ["y", 0], ["or", 0], ["t", 0], ["2", 0], ["x", 0], ["y", 0], ["2", 0], ["can", 0], ["false", 0], ["pt", 0], ["px", 0], ["py", 0], ["t", 0], ["x", 0], ["y", 0], ["print", 0], ["yes", 0], ["if", 0], ["can", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["0", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["append", 0], ["a", 0], ["x", 0], ["append", 0], ["b", 0], ["y", 0], ["append", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["abs", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["abs", 0], ["y", 0], ["i", 0], ["1", 0], ["y", 0], ["i", 0], ["t", 0], ["abs", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["if", 0], ["x", 0], ["t", 0], ["or", 0], ["x", 0], ["2", 0], ["t", 0], ["2", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["plan", 0], ["feasible", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["plan", 0], ["append", 0], ["t", 0], ["x", 0], ["y", 0], ["t0", 0], ["x0", 0], ["y0", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["t1", 0], ["x1", 0], ["y1", 0], ["in", 0], ["plan", 0], ["dx", 0], ["x1", 0], ["x0", 0], ["dy", 0], ["y1", 0], ["y0", 0], ["dt", 0], ["t1", 0], ["t0", 0], ["dist", 0], ["abs", 0], ["dx", 0], ["abs", 0], ["dy", 0], ["d", 0], ["dt", 0], ["dist", 0], ["if", 0], ["dt", 0], ["dist", 0], ["feasible", 0], ["false", 0], ["elif", 0], ["dist", 0], ["dt", 0], ["2", 0], ["0", 0], ["feasible", 0], ["false", 0], ["t0", 0], ["x0", 0], ["y0", 0], ["t1", 0], ["x1", 0], ["y1", 0], ["print", 0], ["yes", 0], ["if", 0], ["feasible", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["pt", 0], ["px", 0], ["py", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ct", 0], ["cx", 0], ["cy", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["ct", 0], ["pt", 0], ["d", 0], ["abs", 0], ["cx", 0], ["px", 0], ["abs", 0], ["cy", 0], ["py", 0], ["if", 0], ["t", 0], ["d", 0], ["or", 0], ["t", 0], ["2", 0], ["d", 0], ["2", 0], ["print", 0], ["no", 0], ["break", 0], ["pt", 0], ["px", 0], ["py", 0], ["ct", 0], ["cx", 0], ["cy", 0], ["else", 0], ["print", 0], ["yes", 0], ["def", 0], ["check", 0], ["dest", 0], ["start", 0], ["ll", 0], ["dest", 0], ["1", 0], ["start", 0], ["1", 0], ["dest", 0], ["2", 0], ["start", 0], ["2", 0], ["if", 0], ["ll", 0], ["0", 0], ["ll", 0], ["ll", 0], ["time", 0], ["dest", 0], ["0", 0], ["start", 0], ["0", 0], ["tmp", 0], ["ll", 0], ["time", 0], ["if", 0], ["tmp", 0], ["0", 0], ["and", 0], ["tmp", 0], ["2", 0], ["0", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["n", 0], ["int", 0], ["input", 0], ["start", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dest", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["check", 0], ["dest", 0], ["start", 0], ["start", 0], ["dest", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["coding", 0], ["utf", 0], ["8", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["import", 0], ["heapq", 0], ["import", 0], ["collections", 0], ["import", 0], ["itertools", 0], ["import", 0], ["bisect", 0], ["from", 0], ["scipy", 0], ["special", 0], ["import", 0], ["comb", 0], ["import", 0], ["copy", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["def", 0], ["zz", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["z", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["s", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["1", 0], ["def", 0], ["c", 0], ["line", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["for", 0], ["in", 0], ["range", 0], ["line", 0], ["n", 0], ["z", 0], ["t", 0], ["x", 0], ["y", 0], ["pos", 0], ["x", 0], ["pos", 0], ["y", 0], ["now", 0], ["t", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["zz", 0], ["t", 0], ["append", 0], ["t", 0], ["x", 0], ["append", 0], ["x", 0], ["y", 0], ["append", 0], ["y", 0], ["ok", 0], ["1", 0], ["for", 0], ["t", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["t", 0], ["x", 0], ["y", 0], ["if", 0], ["abs", 0], ["x", 0], ["pos", 0], ["x", 0], ["abs", 0], ["y", 0], ["pos", 0], ["y", 0], ["t", 0], ["now", 0], ["t", 0], ["ok", 0], ["0", 0], ["break", 0], ["if", 0], ["abs", 0], ["x", 0], ["pos", 0], ["x", 0], ["abs", 0], ["y", 0], ["pos", 0], ["y", 0], ["2", 0], ["t", 0], ["now", 0], ["t", 0], ["2", 0], ["ok", 0], ["0", 0], ["break", 0], ["pos", 0], ["x", 0], ["pos", 0], ["y", 0], ["now", 0], ["t", 0], ["x", 0], ["y", 0], ["t", 0], ["if", 0], ["ok", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["txylist", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["txy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["txylist", 0], ["txy", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["p", 0], ["false", 0], ["t0", 0], ["x0", 0], ["y0", 0], ["txylist", 0], ["i", 0], ["t1", 0], ["x1", 0], ["y1", 0], ["txylist", 0], ["i", 0], ["1", 0], ["t", 0], ["x", 0], ["y", 0], ["t1", 0], ["t0", 0], ["x1", 0], ["x0", 0], ["y1", 0], ["y0", 0], ["tt", 0], ["abs", 0], ["x", 0], ["abs", 0], ["y", 0], ["legs", 0], ["t", 0], ["tt", 0], ["if", 0], ["legs", 0], ["0", 0], ["and", 0], ["legs", 0], ["2", 0], ["0", 0], ["p", 0], ["true", 0], ["else", 0], ["print", 0], ["no", 0], ["break", 0], ["if", 0], ["p", 0], ["true", 0], ["print", 0], ["yes", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0005618766680713583, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0005618766680713583, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.003926518019913056, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.003926518019913056, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0005618766680713583, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0005618766680713583, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.003926518019913056, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.003926518019913056, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nCreatnx has $n$ mirrors, numbered from $1$ to $n$. Every day, Creatnx asks exactly one mirror \"Am I beautiful?\". The $i$-th mirror will tell Creatnx that he is beautiful with probability $\\frac{p_i}{100}$ for all $1 \\le i \\le n$.\n\nCreatnx asks the mirrors one by one, starting from the $1$-st mirror. Every day, if he asks $i$-th mirror, there are two possibilities:  The $i$-th mirror tells Creatnx that he is beautiful. In this case, if $i = n$ Creatnx will stop and become happy, otherwise he will continue asking the $i+1$-th mirror next day;  In the other case, Creatnx will feel upset. The next day, Creatnx will start asking from the $1$-st mirror again. \n\nYou need to calculate the expected number of days until Creatnx becomes happy.\n\nThis number should be found by modulo $998244353$. Formally, let $M = 998244353$. It can be shown that the answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1\\le n\\le 2\\cdot 10^5$) — the number of mirrors.\n\nThe second line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\leq p_i \\leq 100$).\n\n\n-----Output-----\n\nPrint the answer modulo $998244353$ in a single line.\n\n\n-----Examples-----\nInput\n1\n50\n\nOutput\n2\n\nInput\n3\n10 20 50\n\nOutput\n112\n\n\n\n-----Note-----\n\nIn the first test, there is only one mirror and it tells, that Creatnx is beautiful with probability $\\frac{1}{2}$. So, the expected number of days until Creatnx becomes happy is $2$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["\n#q = int(input())\n#x, y = map(int,input().split(' '))\n#print (' '.join(list(map(str, s))))\n\ndef extended_gcd(aa, bb):\n\tlastremainder, remainder = abs(aa), abs(bb)\n\tx, lastx, y, lasty = 0, 1, 1, 0\n\twhile remainder:\n\t\tlastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)\n\t\tx, lastx = lastx - quotient*x, x\n\t\ty, lasty = lasty - quotient*y, y\n\treturn lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)\n \ndef modinv(a, m):\n\tg, x, y = extended_gcd(a, m)\n\tif g != 1:\n\t\traise ValueError\n\treturn x % m\n\nm = 998244353\nn = int(input())\np = list(map(int,input().split(' ')))\n\nup = 0\nlow = 1\nfor i in range(n):\n\tup = up + low\n\tup = up * 100 % m\n\tlow = low * p[i] % m\n\t\nprint (up*modinv(low,m)%m)\n", "M = 998244353\n\ndef gcd(a, b):\n\tif (a == 0):\n\t\treturn 0, 1\n\n\tx, y = gcd(b % a, a)\n\n\treturn y - (b // a) * x, x\n\n\n\nk = input()\nprobs = list(map(int, input().split(' ')))\nnum, denum = 0, 1\nfor p in probs:\n\tnum = (num + denum) * 100 % M\n\tdenum = denum * p % M\n\n\t#print(num, denum)\n\ninv, _ = gcd(denum, M)\nprint(num * inv % M)\n\n\n#d[i + 1] = (d[i] + 1) * 100 / p\n", "mod = 998244353\n\ndef inv_mod(n) :\n\treturn pow(n, mod-2, mod)\n\ndef frac_mod(a, b) :\n\treturn a*inv_mod(b) % mod\n\nn = int(input())\na = input().split()\n\nres = 0\nfor v in a :\n\tres = (res+1) * 100 * inv_mod(int(v)) % mod\n\nprint(res)\n", "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nMOD = 998244353\n \nn = int(input())\na = [int(item) for item in input().split()]\nA = 0\nB = 0\nchild = 1\nbases = []\nbase = 1\nfor i in range(n + 10):\n\tbases.append(base)\n\tbase *= 100\n\tbase %= MOD\n\nfor i, item in enumerate(a):\n\tA += child * (100 - item) * bases[n-i-1]\n\tA %= MOD\n\tB += child * (100 - item) * bases[n-i-1] * (i + 1)\n\tB %= MOD\n\tchild *= item\n\tchild %= MOD\nB += child * n\nans = B * pow(bases[n]-A, MOD-2, MOD)\nans %= MOD\nprint(ans)\n", "mod = 998244353\n\ndef inv_mod(n):\n\treturn pow(n, mod - 2, mod)\n\nn = int(input())\np = [int(x) for x in input().split()]\n\nres = 0\nfor i in p:\n\tres = (res + 1) * 100 * inv_mod(i) % mod\n\nprint(res)\n", "import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ndef write(*args, sep=\"\\n\"):\n\tfor i in args:\n\t\tsys.stdout.write(\"{}{}\".format(i, sep))\nINF = float('inf')\nMOD = 998244353\nYES = \"YES\"\nNO = \"NO\"\n\nn = int(input())\np = [0] + read()\np = list(map(lambda x : x*pow(100, MOD-2, MOD)%MOD, p))\n\n\nA = [0] * (n+2)\n\nfor i in range(2, n+2):\n\tA[i] = (A[i-1] - 1) * pow(p[i-1], MOD-2, MOD) % MOD \n\nprint((-A[-1] + MOD) % MOD)\n", "\nM = 998244353\n\nn = int(input())\n\nexp = 0\nfor pi in map(int,input().split()):\n\texp = (exp+1) * 100 * pow(pi,M-2,M) % M\n\nprint(exp)\n\n", "mod = 998244353\n\ndef pow_(x, p, mod):\n\tif p == 1: return x % mod \n\t\n\ttmp  = pow_(x, p // 2, mod)\n\tif p % 2 == 0:\n\t\treturn (tmp * tmp) % mod\n\telse:\n\t\treturn (tmp * tmp * x) % mod\n\t\ndef reverse(x, mod):\n\treturn pow_(x, mod-2, mod)\n\nn     = int(input()) + 1\np     = [0] + list(map(int, input().split()))\ndp    = [0] * n\nrev   = [0] * 101 \n\nfor i in range(1, 101):\n\trev[i] = reverse(i, mod)\n\t\nfor i in range(1, n):\n\tdp[i]=(((dp[i-1]+1)*100 * rev[p[i]])) % mod \n\t\nprint(dp[-1])\n", "M = 998244353\n \nn = int(input())\n \nexp = 0\nfor pi in map(int,input().split()):\n\texp = (exp+1) * 100 * pow(pi,M-2,M) % M\n \nprint(exp)\n", "M = 998244353\n \ndef gcd(a, b):\n\tif (a == 0):\n\t\treturn 0, 1\n \n\tx, y = gcd(b % a, a)\n \n\treturn y - (b // a) * x, x\n \nk = input()\nprobs = list(map(int, input().split(' ')))\nnum, denum = 0, 1\nfor p in probs:\n\tnum = (num + denum) * 100 % M\n\tdenum = denum * p % M\n \ninv, _ = gcd(denum, M)\nprint(num * inv % M)\n", "import os\n\nN = int(3e5 + 233)\nMOD = 998244353\nans = []\nfor i in range(N):\n\tans.append(0)\n\ndef fp(x, y):\n\tres = 1\n\twhile y:\n\t\tif y&1:\n\t\t\tres = res * x\n\t\t\tres %= MOD\n\t\tx *= x\n\t\tx %= MOD\n\t\ty >>= 1\n\treturn res\n\ninv = fp(100, MOD-2)\nn = int(input())\ndig = list(map(int, input().split()))\nfor i in range(1, n+1):\n\tx = dig[i-1]\n\tx *= inv\n\tx %= MOD\n\tans[i] = (((1 + ans[i-1]) % MOD) * fp(x, MOD-2)) % MOD\nprint(ans[n])\n", "import sys\ninput=sys.stdin.readline\nn=int(input())\nL=map(int,input().split())\nk=0\nc=1\nm=998244353\ncounter=0\nfor i in L:\n\tk+=c*(pow(100,n-counter,m))\n\tk%=m\n\tc*=i\n\tc%=m\n\tcounter+=1\ndef modInverse(a, m) : \n\tm0 = m \n\ty = 0\n\tx = 1\n\tif (m == 1) : \n\t\treturn 0\n\twhile (a > 1) : \n\t\tq = a // m \n\t\tt = m \n\t\tm = a % m \n\t\ta = t \n\t\tt = y \n\t\ty = x - q * y \n\t\tx = t \n\tif (x < 0) : \n\t\tx = x + m0 \n\treturn x \np=k%m\nq=c%m\nprint((modInverse(q,m)*p)%m)\n", "from collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(list(set(reduce(list.__add__,([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n\ndef li():return [int(i) for i in input().rstrip('\\n').split(' ')]\ndef st():return input().rstrip('\\n')\ndef val():return int(input())\n\nn = val()\nexp = 0\nfor pi in li():\n\texp = (exp+1) * 100 * pow(pi,M-2,M) % M\n \nprint(exp)\n", "def solve():\n\ts = input()\n\tif 'aa' in s or 'bb' in s or 'cc' in s:\n\t\tprint(-1)\n\t\treturn\n\tsyms = s + '@'\n\tans = ['@']\n\tfor i, sym in enumerate(s):\n\t\tif sym != '?':\n\t\t\tans.append(sym)\n\t\t\tcontinue\n\t\tfor x in 'abc':\n\t\t\tif x != ans[-1] and x != syms[i + 1]:\n\t\t\t\tans.append(x)\n\t\t\t\tbreak\n\tprint(''.join(ans[1:]))\n\n\ndef solveb():\n\tn = int(input())\n\tperm = [int(x) for x in input().split()]\n\tnum___idx = [-1 for _ in range(n + 1)]\n\tfor i, num in enumerate(perm):\n\t\tnum___idx[num] = i\n\n\tcurr_max = -1\n\tcurr_min = 2 * n\n\tnum___pretty = [0 for _ in range(n + 1)]\n\tfor num in range(1, n + 1):\n\t\tcurr_max = max(num___idx[num], curr_max)\n\t\tcurr_min = min(num___idx[num], curr_min)\n\t\tif curr_max - curr_min + 1 == num:\n\t\t\tnum___pretty[num] = 1\n\tprint(*num___pretty[1:], sep='')\n\n\ndef solvec():\n\tn = int(input())\n\trank___problems_nr = [int(x) for x in input().split()]\n\tweird_prefsums = [0]\n\tlast_num = rank___problems_nr[0]\n\tfor num in rank___problems_nr:\n\t\tif num != last_num:\n\t\t\tlast_num = num\n\t\t\tweird_prefsums.append(weird_prefsums[-1])\n\t\tweird_prefsums[-1] += 1\n\n\tgold = weird_prefsums[0]\n\tsilvers = 0\n\ti = 1\n\tfor i in range(1, len(weird_prefsums)):\n\t\tx = weird_prefsums[i]\n\t\tif x - gold > gold:\n\t\t\tsilvers = x - gold\n\t\t\tbreak\n\n\tbronzes = 0\n\tfor j in range(i, len(weird_prefsums)):\n\t\tx = weird_prefsums[j]\n\t\tif x > n / 2:\n\t\t\tbreak\n\t\tif x - gold - silvers > gold:\n\t\t\tbronzes = x - gold - silvers\n\tif bronzes == 0 or silvers == 0:\n\t\tprint(0, 0, 0)\n\t\treturn\n\n\tprint(gold, silvers, bronzes)\n\n\ndef solved():\n\ta, b, c, d = (int(x) for x in input().split())\n\tab_len = min(a, b)\n\ta -= ab_len\n\tb -= ab_len\n\tcd_len = min(c, d)\n\tc -= cd_len\n\td -= cd_len\n\n\tif a == 1 and cd_len == 0 and d == 0 and c == 0:\n\t\tprint('YES')\n\t\tprint('0 1 ' * ab_len + '0')\n\t\treturn\n\tif d == 1 and ab_len == 0 and a == 0 and b == 0:\n\t\tprint('YES')\n\t\tprint('3 ' + '2 3 ' * cd_len)\n\t\treturn\n\tif a > 0 or d > 0:\n\t\tprint('NO')\n\t\treturn\n\n\tcb_len = min(b, c)\n\tb -= cb_len\n\tc -= cb_len\n\tif b > 1 or c > 1:\n\t\tprint('NO')\n\t\treturn\n\tprint('YES')\n\tprint('1 ' * b + '0 1 ' * ab_len + '2 1 ' * cb_len + '2 3 ' * cd_len + '2' * c)\n\n\ndef get_me(prob, mod):\n\t# return 100, prob\n\treturn (100 * pow(prob, mod - 2, mod)) % mod\n\n\ndef solvee():\n\tn = int(input())\n\tmod = 998244353\n\tidx___prob = [int(x) for x in input().split()]\n\tcurr_me = get_me(idx___prob[0], mod)\n\tfor prob in idx___prob[1:]:\n\t\tme = get_me(prob, mod)\n\t\tcurr_me *= me\n\t\tcurr_me %= mod\n\n\t\tcurr_me += me\n\t\tcurr_me %= mod\n\n\t# curr_q_me = pow(curr_q_me, mod - 2, mod)\n\n\tprint(curr_me)\n\n\ndef __starting_point():\n\tsolvee()\n\n__starting_point()\n", "from collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(list(set(reduce(list.__add__,([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split(' ')]\ndef st():return input().rstrip('\\n')\ndef val():return int(input())\n \nn = val()\nexp = 0\nfor pi in li():\n\texp = (exp+1) * 100 * pow(pi,M-2,M) % M\n \nprint(exp)\n#From SMMaster\n", "# 解説AC\nmod = 998244353\nn = int(input())\np = list(map(int, input().split()))\ni100 = pow(100, mod-2, mod)\np = [i*i100%mod for i in p]\n\ntop = 1\nfor i in range(n-2, -1, -1):\n\ttop *= p[i]\n\ttop += 1\n\ttop %= mod\n\nbot = 1\nfor i in range(n):\n\tbot *= p[i]\n\tbot %= mod\n\nans = top*pow(bot, mod-2, mod)%mod\nprint(ans)\n", "n = int(input())\np = list(map(int, input().split()))\n\nans = 0\nsize = 998244353\n\nfor p in p:\n\tans = (ans+1) % size\n\tans = (((ans*100) % size)*pow(p, size-2, size)) % size\n\nprint(ans)\n", "mod = 998244353\n \ndef inv_mod(n):\n\treturn pow(n, mod - 2, mod)\n \nn = int(input())\np = [int(x) for x in input().split()]\n \nres = 0\nfor i in p:\n\tres = (res + 1) * 100 * inv_mod(i) % mod\n \nprint(res)\n", "n = int(input())\nexp = 0 \nM = 998244353\nfor pi in map(int, input().split()):\n\texp = (exp+1)*100*pow(pi, M-2, M) %M\n\nprint(int(exp%M))\n", "import sys\ninput = sys.stdin.readline\n\nmod = 998244353 #出力の制限\n#互いに素なa,bについて、a*x+b*y=1の一つの解\ndef extgcd(a,b):\n\tr = [1,0,a]\n\tw = [0,1,b]\n\twhile w[2]!=1:\n\t\tq = r[2]//w[2]\n\t\tr2 = w\n\t\tw2 = [r[0]-q*w[0],r[1]-q*w[1],r[2]-q*w[2]]\n\t\tr = r2\n\t\tw = w2\n\t#[x,y]\n\treturn [w[0],w[1]]\n\n# aの逆元(mod m)を求める。(aとmは互いに素であることが前提)\ndef mod_inv(a,m=mod):\n\tx = extgcd(a,m)[0]\n\treturn (m+x%m)%m\n\nN = int(input())\nA = list(map(int, input().split()))\n\nK = 0\nP = 0\nQ = 1\nfor i, a in enumerate(A):\n\tp0 = a * mod_inv(100) % mod\n\tq0 = (100-a) * mod_inv(100) % mod\n\n\tP = (P + (i+1)*Q*q0) % mod\n\tK = (K + Q*q0) % mod\n\tQ = Q * p0 % mod\n\ninv = (mod + 1 - K) % mod\nw = (N*Q + P) % mod\nans = w * mod_inv(inv) % mod\nprint(ans)\n", "M = 998244353\n \nn = int(input())\n \nexp = 0\nfor pi in map(int,input().split()):\n\texp = (exp+1) * 100 * pow(pi,M-2,M) % M\n \nprint(exp)\n", "n=input()\nn=int(n)\nmd=998244353\nL=list(map(int,input().split()))\ndef inv(x):\n\tnonlocal md\n\treturn pow(x,md-2,md)\nml=1\nans=0\nfor el in reversed(L):\n\tml*=100\n\tml*=inv(el)\n\tml%=md\n\tans+=ml\n\tans%=md\nprint(ans)\n", "M = 998244353 \nn=input()\np=list(map(int, input().split(' ')))\nnum=0\ndenum=1\nfor i in p:\n\tnum=(num+denum)*100%M\n\tdenum=denum*i%M\n#print(num, denum)\nfrom math import gcd\ng=gcd(num,denum)\nnum=num//g\ndenum=denum//g\ndenum=pow(denum,M-2,M)\nprint(num*denum%M)\n", "MOD =  998244353\n\ndef power(x,y):\n\tres=1\n\twhile(y>0):\n\t\tif(y&1):\n\t\t\tres = x*res%MOD\n\t\ty = y >>1\n\t\tx = x*x%MOD\n\treturn res\n\n\n\nn = int(input())\n\n\n\nprob = input().split()\n\n\np = power(100,n)\nq = 1\n\nfor i in range(0,n-1):\n\tq = q*(int(prob[i]))%MOD\n\tp = (p + q*(power(100,n-i-1))%MOD)%MOD\nq = q*(int(prob[n-1]))%MOD\n\nprint(p*(power(q,MOD-2))%MOD)\n", "from sys import stdin\n\ninput = stdin.readline\n\nmod = 998244353\n\ninv = [0] * 103\ninv[1] = 1\nfor i in range(2, 101):\n\tinv[i] = (mod - mod // i) * inv[mod % i] % mod\n\nn = int(input())\n\nh = [0] * (n+3)\nh[0] = 1\nfor i in range(1, n+2):\n\th[i] = h[i-1]*100 % mod\n\n\np = list(map(int, input().split()))\ntot = 1 * h[n] % mod\nnow = 1\niv = 1\nfor i in range(n):\n\tif i == n-1:\n\t\tiv = iv*inv[p[i]] % mod\n\t\tcontinue\n\tnow = now*p[i] % mod\n\ttot += now * h[n-i-1] % mod\n\ttot %= mod\n\tiv = iv*inv[p[i]] % mod\n\nprint(tot*iv % mod)\n\n\n\n"], "id": "id8859"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8859", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["creatnx", 0], ["has", 0], ["n", 0], ["mirrors", 0], ["numbered", 0], ["from", 0], ["1", 0], ["to", 0], ["n", 0], ["every", 0], ["day", 0], ["creatnx", 0], ["asks", 0], ["exactly", 0], ["one", 0], ["mirror", 0], ["am", 0], ["i", 0], ["beautiful", 0], ["the", 0], ["i", 0], ["th", 0], ["mirror", 0], ["will", 0], ["tell", 0], ["creatnx", 0], ["that", 0], ["he", 0], ["is", 0], ["beautiful", 0], ["with", 0], ["probability", 0], ["frac", 0], ["p", 0], ["i", 0], ["100", 0], ["for", 0], ["all", 0], ["1", 0], ["le", 0], ["i", 0], ["le", 0], ["n", 0], ["creatnx", 0], ["asks", 0], ["the", 0], ["mirrors", 0], ["one", 0], ["by", 0], ["one", 0], ["starting", 0], ["from", 0], ["the", 0], ["1", 0], ["st", 0], ["mirror", 0], ["every", 0], ["day", 0], ["if", 0], ["he", 0], ["asks", 0], ["i", 0], ["th", 0], ["mirror", 0], ["there", 0], ["are", 0], ["two", 0], ["possibilities", 0], ["the", 0], ["i", 0], ["th", 0], ["mirror", 0], ["tells", 0], ["creatnx", 0], ["that", 0], ["he", 0], ["is", 0], ["beautiful", 0], ["in", 0], ["this", 0], ["case", 0], ["if", 0], ["i", 0], ["n", 0], ["creatnx", 0], ["will", 0], ["stop", 0], ["and", 0], ["become", 0], ["happy", 0], ["otherwise", 0], ["he", 0], ["will", 0], ["continue", 0], ["asking", 0], ["the", 0], ["i", 0], ["1", 0], ["th", 0], ["mirror", 0], ["next", 0], ["day", 0], ["in", 0], ["the", 0], ["other", 0], ["case", 0], ["creatnx", 0], ["will", 0], ["feel", 0], ["upset", 0], ["the", 0], ["next", 0], ["day", 0], ["creatnx", 0], ["will", 0], ["start", 0], ["asking", 0], ["from", 0], ["the", 0], ["1", 0], ["st", 0], ["mirror", 0], ["again", 0], ["you", 0], ["need", 0], ["to", 0], ["calculate", 0], ["the", 0], ["expected", 0], ["number", 0], ["of", 0], ["days", 0], ["until", 0], ["creatnx", 0], ["becomes", 0], ["happy", 0], ["this", 0], ["number", 0], ["should", 0], ["be", 0], ["found", 0], ["by", 0], ["modulo", 2], ["998244353", 2], ["formally", 2], ["let", 2], ["m", 2], ["998244353", 2], ["it", 2], ["can", 2], ["be", 2], ["shown", 2], ["that", 2], ["the", 2], ["answer", 2], ["can", 2], ["be", 2], ["expressed", 2], ["as", 4], ["an", 4], ["irreducible", 4], ["fraction", 4], ["frac", 4], ["p", 4], ["q", 4], ["where", 4], ["p", 4], ["and", 2], ["q", 2], ["are", 2], ["integers", 2], ["and", 2], ["q", 2], ["not", 2], ["equiv", 2], ["0", 2], ["pmod", 2], ["m", 2], ["output", 2], ["the", 2], ["integer", 2], ["equal", 2], ["to", 2], ["p", 4], ["cdot", 4], ["q", 4], ["1", 4], ["bmod", 4], ["m", 4], ["in", 4], ["other", 4], ["words", 4], ["output", 4], ["such", 4], ["an", 4], ["integer", 4], ["x", 4], ["that", 4], ["0", 0], ["le", 0], ["x", 0], ["m", 0], ["and", 0], ["x", 0], ["cdot", 0], ["q", 0], ["equiv", 0], ["p", 0], ["pmod", 0], ["m", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 12], ["one", 12], ["integer", 9], ["n", 11], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["2", 0], ["cdot", 0], ["10", 0], ["5", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["mirrors", 0], ["the", 1], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["p", 0], ["1", 0], ["p", 0], ["2", 0], ["ldots", 0], ["p", 0], ["n", 0], ["1", 0], ["leq", 0], ["p", 0], ["i", 0], ["leq", 0], ["100", 0], ["output", 0], ["print", 0], ["the", 0], ["answer", 0], ["modulo", 0], ["998244353", 0], ["in", 0], ["a", 0], ["single", 0], ["line", 0], ["examples", 0], ["input", 0], ["1", 0], ["50", 0], ["output", 0], ["2", 0], ["input", 0], ["3", 0], ["10", 0], ["20", 0], ["50", 0], ["output", 0], ["112", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["test", 0], ["there", 0], ["is", 0], ["only", 0], ["one", 0], ["mirror", 0], ["and", 0], ["it", 0], ["tells", 0], ["that", 0], ["creatnx", 0], ["is", 0], ["beautiful", 0], ["with", 0], ["probability", 0], ["frac", 0], ["1", 0], ["2", 0], ["so", 0], ["the", 0], ["expected", 0], ["number", 0], ["of", 0], ["days", 0], ["until", 0], ["creatnx", 0], ["becomes", 0], ["happy", 0], ["is", 0], ["2", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.19934640522875818, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.07636825774080674, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.3050314465408805, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.15321453529000714, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1895424836601307, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07552650689905592, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.29874213836477986, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.15269042627533208, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["q", 0], ["int", 0], ["input", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["join", 0], ["list", 0], ["map", 0], ["str", 0], ["s", 0], ["def", 3], ["extended", 3], ["gcd", 3], ["aa", 3], ["bb", 3], ["lastremainder", 4], ["remainder", 4], ["abs", 4], ["aa", 4], ["abs", 4], ["bb", 4], ["x", 4], ["lastx", 4], ["y", 4], ["lasty", 4], ["0", 4], ["1", 4], ["1", 4], ["0", 4], ["while", 4], ["remainder", 4], ["lastremainder", 4], ["quotient", 4], ["remainder", 4], ["remainder", 4], ["divmod", 4], ["lastremainder", 4], ["remainder", 4], ["x", 4], ["lastx", 4], ["lastx", 4], ["quotient", 4], ["x", 4], ["x", 4], ["y", 4], ["lasty", 4], ["lasty", 4], ["quotient", 4], ["y", 4], ["y", 4], ["return", 4], ["lastremainder", 4], ["lastx", 4], ["1", 4], ["if", 4], ["aa", 4], ["0", 4], ["else", 4], ["1", 3], ["lasty", 3], ["1", 3], ["if", 3], ["bb", 3], ["0", 3], ["else", 3], ["1", 3], ["def", 3], ["modinv", 3], ["a", 3], ["m", 3], ["g", 4], ["x", 4], ["y", 4], ["extended", 0], ["gcd", 0], ["a", 0], ["m", 0], ["if", 0], ["g", 0], ["1", 0], ["raise", 0], ["valueerror", 0], ["return", 0], ["x", 0], ["m", 0], ["m", 0], ["998244353", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["up", 0], ["0", 0], ["low", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["up", 0], ["up", 0], ["low", 0], ["up", 0], ["up", 0], ["100", 0], ["m", 0], ["low", 0], ["low", 0], ["p", 0], ["i", 0], ["m", 0], ["print", 0], ["up", 0], ["modinv", 0], ["low", 0], ["m", 0], ["m", 0], ["m", 0], ["998244353", 0], ["def", 0], ["gcd", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["0", 0], ["return", 0], ["0", 0], ["1", 0], ["x", 0], ["y", 0], ["gcd", 0], ["b", 0], ["a", 0], ["a", 0], ["return", 0], ["y", 0], ["b", 0], ["a", 0], ["x", 0], ["x", 0], ["k", 0], ["input", 0], ["probs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["num", 0], ["denum", 0], ["0", 0], ["1", 0], ["for", 0], ["p", 0], ["in", 0], ["probs", 0], ["num", 0], ["num", 0], ["denum", 0], ["100", 0], ["m", 0], ["denum", 0], ["denum", 0], ["p", 0], ["m", 0], ["print", 0], ["num", 0], ["denum", 0], ["inv", 0], ["gcd", 0], ["denum", 0], ["m", 0], ["print", 0], ["num", 0], ["inv", 0], ["m", 0], ["d", 0], ["i", 0], ["1", 0], ["d", 0], ["i", 0], ["1", 0], ["100", 0], ["p", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["inv", 0], ["mod", 0], ["n", 0], ["return", 0], ["pow", 0], ["n", 0], ["mod", 0], ["2", 0], ["mod", 0], ["def", 0], ["frac", 0], ["mod", 0], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["inv", 0], ["mod", 0], ["b", 0], ["mod", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["split", 0], ["res", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["a", 0], ["res", 0], ["res", 0], ["1", 0], ["100", 0], ["inv", 0], ["mod", 0], ["int", 0], ["v", 0], ["mod", 0], ["print", 0], ["res", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["mod", 0], ["998244353", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["item", 0], ["for", 0], ["item", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["child", 0], ["1", 0], ["bases", 0], ["base", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["10", 0], ["bases", 0], ["append", 0], ["base", 0], ["base", 0], ["100", 0], ["base", 0], ["mod", 0], ["for", 0], ["i", 0], ["item", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["a", 0], ["child", 0], ["100", 0], ["item", 0], ["bases", 0], ["n", 0], ["i", 0], ["1", 0], ["a", 0], ["mod", 0], ["b", 0], ["child", 0], ["100", 0], ["item", 0], ["bases", 0], ["n", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["b", 0], ["mod", 0], ["child", 0], ["item", 0], ["child", 0], ["mod", 0], ["b", 0], ["child", 0], ["n", 0], ["ans", 0], ["b", 0], ["pow", 0], ["bases", 0], ["n", 0], ["a", 0], ["mod", 0], ["2", 0], ["mod", 0], ["ans", 0], ["mod", 0], ["print", 0], ["ans", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["inv", 0], ["mod", 0], ["n", 0], ["return", 0], ["pow", 0], ["n", 0], ["mod", 0], ["2", 0], ["mod", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["p", 0], ["res", 0], ["res", 0], ["1", 0], ["100", 0], ["inv", 0], ["mod", 0], ["i", 0], ["mod", 0], ["print", 0], ["res", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["input", 0], ["lambda", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["read", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["write", 0], ["args", 0], ["sep", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["args", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["format", 0], ["i", 0], ["sep", 0], ["inf", 0], ["float", 0], ["inf", 0], ["mod", 0], ["998244353", 0], ["yes", 0], ["yes", 0], ["no", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["0", 0], ["read", 0], ["p", 0], ["list", 0], ["map", 0], ["lambda", 0], ["x", 0], ["x", 0], ["pow", 0], ["100", 0], ["mod", 0], ["2", 0], ["mod", 0], ["mod", 0], ["p", 0], ["a", 0], ["0", 0], ["n", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["2", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["pow", 0], ["p", 0], ["i", 0], ["1", 0], ["mod", 0], ["2", 0], ["mod", 0], ["mod", 0], ["print", 0], ["a", 0], ["1", 0], ["mod", 0], ["mod", 0], ["m", 0], ["998244353", 0], ["n", 0], ["int", 0], ["input", 0], ["exp", 0], ["0", 0], ["for", 0], ["pi", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["exp", 0], ["exp", 0], ["1", 0], ["100", 0], ["pow", 0], ["pi", 0], ["m", 0], ["2", 0], ["m", 0], ["m", 0], ["print", 0], ["exp", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["pow", 0], ["x", 0], ["p", 0], ["mod", 0], ["if", 0], ["p", 0], ["1", 0], ["return", 0], ["x", 0], ["mod", 0], ["tmp", 0], ["pow", 0], ["x", 0], ["p", 0], ["2", 0], ["mod", 0], ["if", 0], ["p", 0], ["2", 0], ["0", 0], ["return", 0], ["tmp", 0], ["tmp", 0], ["mod", 0], ["else", 0], ["return", 0], ["tmp", 0], ["tmp", 0], ["x", 0], ["mod", 0], ["def", 0], ["reverse", 0], ["x", 0], ["mod", 0], ["return", 0], ["pow", 0], ["x", 0], ["mod", 0], ["2", 0], ["mod", 0], ["n", 0], ["int", 0], ["input", 0], ["1", 0], ["p", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dp", 0], ["0", 0], ["n", 0], ["rev", 0], ["0", 0], ["101", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["101", 0], ["rev", 0], ["i", 0], ["reverse", 0], ["i", 0], ["mod", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["dp", 0], ["i", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["100", 0], ["rev", 0], ["p", 0], ["i", 0], ["mod", 0], ["print", 0], ["dp", 0], ["1", 0], ["m", 0], ["998244353", 0], ["n", 0], ["int", 0], ["input", 0], ["exp", 0], ["0", 0], ["for", 0], ["pi", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["exp", 0], ["exp", 0], ["1", 0], ["100", 0], ["pow", 0], ["pi", 0], ["m", 0], ["2", 0], ["m", 0], ["m", 0], ["print", 0], ["exp", 0], ["m", 0], ["998244353", 0], ["def", 0], ["gcd", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["0", 0], ["return", 0], ["0", 0], ["1", 0], ["x", 0], ["y", 0], ["gcd", 0], ["b", 0], ["a", 0], ["a", 0], ["return", 0], ["y", 0], ["b", 0], ["a", 0], ["x", 0], ["x", 0], ["k", 0], ["input", 0], ["probs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["num", 0], ["denum", 0], ["0", 0], ["1", 0], ["for", 0], ["p", 0], ["in", 0], ["probs", 0], ["num", 0], ["num", 0], ["denum", 0], ["100", 0], ["m", 0], ["denum", 0], ["denum", 0], ["p", 0], ["m", 0], ["inv", 0], ["gcd", 0], ["denum", 0], ["m", 0], ["print", 0], ["num", 0], ["inv", 0], ["m", 0], ["import", 0], ["os", 0], ["n", 0], ["int", 0], ["3e5", 0], ["233", 0], ["mod", 0], ["998244353", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["append", 0], ["0", 0], ["def", 0], ["fp", 0], ["x", 0], ["y", 0], ["res", 0], ["1", 0], ["while", 0], ["y", 0], ["if", 0], ["y", 0], ["1", 0], ["res", 0], ["res", 0], ["x", 0], ["res", 0], ["mod", 0], ["x", 0], ["x", 0], ["x", 0], ["mod", 0], ["y", 0], ["1", 0], ["return", 0], ["res", 0], ["inv", 0], ["fp", 0], ["100", 0], ["mod", 0], ["2", 0], ["n", 0], ["int", 0], ["input", 0], ["dig", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["x", 0], ["dig", 0], ["i", 0], ["1", 0], ["x", 0], ["inv", 0], ["x", 0], ["mod", 0], ["ans", 0], ["i", 0], ["1", 0], ["ans", 0], ["i", 0], ["1", 0], ["mod", 0], ["fp", 0], ["x", 0], ["mod", 0], ["2", 0], ["mod", 0], ["print", 0], ["ans", 0], ["n", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["0", 0], ["c", 0], ["1", 0], ["m", 0], ["998244353", 0], ["counter", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["k", 0], ["c", 0], ["pow", 0], ["100", 0], ["n", 0], ["counter", 0], ["m", 0], ["k", 0], ["m", 0], ["c", 0], ["i", 0], ["c", 0], ["m", 0], ["counter", 0], ["1", 0], ["def", 0], ["modinverse", 0], ["a", 0], ["m", 0], ["m0", 0], ["m", 0], ["y", 0], ["0", 0], ["x", 0], ["1", 0], ["if", 0], ["m", 0], ["1", 0], ["return", 0], ["0", 0], ["while", 0], ["a", 0], ["1", 0], ["q", 0], ["a", 0], ["m", 0], ["t", 0], ["m", 0], ["m", 0], ["a", 0], ["m", 0], ["a", 0], ["t", 0], ["t", 0], ["y", 0], ["y", 0], ["x", 0], ["q", 0], ["y", 0], ["x", 0], ["t", 0], ["if", 0], ["x", 0], ["0", 0], ["x", 0], ["x", 0], ["m0", 0], ["return", 0], ["x", 0], ["p", 0], ["k", 0], ["m", 0], ["q", 0], ["c", 0], ["m", 0], ["print", 0], ["modinverse", 0], ["q", 0], ["m", 0], ["p", 0], ["m", 0], ["from", 0], ["collections", 0], ["import", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["cmp", 0], ["to", 0], ["key", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["m", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["factors", 0], ["n", 0], ["return", 0], ["sorted", 0], ["list", 1], ["set", 13], ["reduce", 13], ["list", 13], ["add", 13], ["i", 16], ["n", 16], ["i", 16], ["for", 16], ["i", 16], ["in", 4], ["range", 0], ["1", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["def", 0], ["inv", 0], ["mod", 0], ["n", 0], ["return", 0], ["pow", 0], ["n", 0], ["mod", 0], ["2", 0], ["mod", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["split", 0], ["def", 0], ["st", 0], ["return", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["val", 0], ["return", 0], ["int", 0], ["input", 0], ["n", 0], ["val", 0], ["exp", 0], ["0", 0], ["for", 0], ["pi", 0], ["in", 0], ["li", 0], ["exp", 0], ["exp", 0], ["1", 0], ["100", 0], ["pow", 0], ["pi", 0], ["m", 0], ["2", 0], ["m", 0], ["m", 0], ["print", 0], ["exp", 0], ["def", 0], ["solve", 0], ["s", 0], ["input", 0], ["if", 0], ["aa", 0], ["in", 0], ["s", 0], ["or", 0], ["bb", 0], ["in", 0], ["s", 0], ["or", 0], ["cc", 0], ["in", 0], ["s", 0], ["print", 0], ["1", 0], ["return", 0], ["syms", 0], ["s", 0], ["ans", 0], ["for", 0], ["i", 0], ["sym", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["sym", 0], ["ans", 0], ["append", 0], ["sym", 0], ["continue", 0], ["for", 0], ["x", 0], ["in", 0], ["abc", 0], ["if", 0], ["x", 0], ["ans", 0], ["1", 0], ["and", 0], ["x", 0], ["syms", 0], ["i", 0], ["1", 0], ["ans", 0], ["append", 0], ["x", 0], ["break", 0], ["print", 0], ["join", 0], ["ans", 0], ["1", 0], ["def", 0], ["solveb", 0], ["n", 0], ["int", 0], ["input", 0], ["perm", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["num", 0], ["idx", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["num", 0], ["in", 0], ["enumerate", 0], ["perm", 0], ["num", 0], ["idx", 0], ["num", 0], ["i", 0], ["curr", 0], ["max", 0], ["1", 0], ["curr", 0], ["min", 0], ["2", 0], ["n", 0], ["num", 0], ["pretty", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["num", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["curr", 0], ["max", 0], ["max", 0], ["num", 0], ["idx", 0], ["num", 0], ["curr", 0], ["max", 0], ["curr", 0], ["min", 0], ["min", 0], ["num", 0], ["idx", 0], ["num", 0], ["curr", 0], ["min", 0], ["if", 0], ["curr", 0], ["max", 0], ["curr", 0], ["min", 0], ["1", 0], ["num", 0], ["num", 0], ["pretty", 0], ["num", 0], ["1", 0], ["print", 0], ["num", 0], ["pretty", 0], ["1", 0], ["sep", 0], ["def", 0], ["solvec", 0], ["n", 0], ["int", 0], ["input", 0], ["rank", 0], ["problems", 0], ["nr", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["weird", 0], ["prefsums", 0], ["0", 0], ["last", 0], ["num", 0], ["rank", 0], ["problems", 0], ["nr", 0], ["0", 0], ["for", 0], ["num", 0], ["in", 0], ["rank", 0], ["problems", 0], ["nr", 0], ["if", 0], ["num", 0], ["last", 0], ["num", 0], ["last", 0], ["num", 0], ["num", 0], ["weird", 0], ["prefsums", 0], ["append", 0], ["weird", 0], ["prefsums", 0], ["1", 0], ["weird", 0], ["prefsums", 0], ["1", 0], ["1", 0], ["gold", 0], ["weird", 0], ["prefsums", 0], ["0", 0], ["silvers", 0], ["0", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["weird", 0], ["prefsums", 0], ["x", 0], ["weird", 0], ["prefsums", 0], ["i", 0], ["if", 0], ["x", 0], ["gold", 0], ["gold", 0], ["silvers", 0], ["x", 0], ["gold", 0], ["break", 0], ["bronzes", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["weird", 0], ["prefsums", 0], ["x", 0], ["weird", 0], ["prefsums", 0], ["j", 0], ["if", 0], ["x", 0], ["n", 0], ["2", 0], ["break", 0], ["if", 0], ["x", 0], ["gold", 0], ["silvers", 0], ["gold", 0], ["bronzes", 0], ["x", 0], ["gold", 0], ["silvers", 0], ["if", 0], ["bronzes", 0], ["0", 0], ["or", 0], ["silvers", 0], ["0", 0], ["print", 0], ["0", 0], ["0", 0], ["0", 0], ["return", 0], ["print", 0], ["gold", 0], ["silvers", 0], ["bronzes", 0], ["def", 0], ["solved", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["ab", 0], ["len", 0], ["min", 0], ["a", 0], ["b", 0], ["a", 0], ["ab", 0], ["len", 0], ["b", 0], ["ab", 0], ["len", 0], ["cd", 0], ["len", 0], ["min", 0], ["c", 0], ["d", 0], ["c", 0], ["cd", 0], ["len", 0], ["d", 0], ["cd", 0], ["len", 0], ["if", 0], ["a", 0], ["1", 0], ["and", 0], ["cd", 0], ["len", 0], ["0", 0], ["and", 0], ["d", 0], ["0", 0], ["and", 0], ["c", 0], ["0", 0], ["print", 0], ["yes", 0], ["print", 0], ["0", 0], ["1", 0], ["ab", 0], ["len", 0], ["0", 0], ["return", 0], ["if", 0], ["d", 0], ["1", 0], ["and", 0], ["ab", 0], ["len", 0], ["0", 0], ["and", 0], ["a", 0], ["0", 0], ["and", 0], ["b", 0], ["0", 0], ["print", 0], ["yes", 0], ["print", 0], ["3", 0], ["2", 0], ["3", 0], ["cd", 0], ["len", 0], ["return", 0], ["if", 0], ["a", 0], ["0", 0], ["or", 0], ["d", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["cb", 0], ["len", 0], ["min", 0], ["b", 0], ["c", 0], ["b", 0], ["cb", 0], ["len", 0], ["c", 0], ["cb", 0], ["len", 0], ["if", 0], ["b", 0], ["1", 0], ["or", 0], ["c", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["print", 0], ["1", 0], ["b", 0], ["0", 0], ["1", 0], ["ab", 0], ["len", 0], ["2", 0], ["1", 0], ["cb", 0], ["len", 0], ["2", 0], ["3", 0], ["cd", 0], ["len", 0], ["2", 0], ["c", 0], ["def", 0], ["get", 0], ["me", 0], ["prob", 0], ["mod", 0], ["return", 0], ["100", 0], ["prob", 0], ["return", 0], ["100", 0], ["pow", 0], ["prob", 0], ["mod", 0], ["2", 0], ["mod", 0], ["mod", 0], ["def", 0], ["solvee", 0], ["n", 0], ["int", 0], ["input", 0], ["mod", 0], ["998244353", 0], ["idx", 0], ["prob", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["curr", 0], ["me", 0], ["get", 0], ["me", 0], ["idx", 0], ["prob", 0], ["0", 0], ["mod", 0], ["for", 0], ["prob", 0], ["in", 0], ["idx", 0], ["prob", 0], ["1", 0], ["me", 0], ["get", 0], ["me", 0], ["prob", 0], ["mod", 0], ["curr", 0], ["me", 0], ["me", 0], ["curr", 0], ["me", 0], ["mod", 0], ["curr", 0], ["me", 0], ["me", 0], ["curr", 0], ["me", 0], ["mod", 0], ["curr", 0], ["q", 0], ["me", 0], ["pow", 0], ["curr", 0], ["q", 0], ["me", 0], ["mod", 0], ["2", 0], ["mod", 0], ["print", 0], ["curr", 0], ["me", 0], ["def", 0], ["starting", 0], ["point", 0], ["solvee", 0], ["starting", 0], ["point", 0], ["from", 0], ["collections", 0], ["import", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["cmp", 0], ["to", 0], ["key", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["m", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["factors", 0], ["n", 0], ["return", 0], ["sorted", 0], ["list", 1], ["set", 13], ["reduce", 13], ["list", 13], ["add", 13], ["i", 16], ["n", 16], ["i", 16], ["for", 16], ["i", 16], ["in", 4], ["range", 0], ["1", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["def", 0], ["inv", 0], ["mod", 0], ["n", 0], ["return", 0], ["pow", 0], ["n", 0], ["mod", 0], ["2", 0], ["mod", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["split", 0], ["def", 0], ["st", 0], ["return", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["val", 0], ["return", 0], ["int", 0], ["input", 0], ["n", 0], ["val", 0], ["exp", 0], ["0", 0], ["for", 0], ["pi", 0], ["in", 0], ["li", 0], ["exp", 0], ["exp", 0], ["1", 0], ["100", 0], ["pow", 0], ["pi", 0], ["m", 0], ["2", 0], ["m", 0], ["m", 0], ["print", 0], ["exp", 0], ["from", 0], ["smmaster", 0], ["解説ac", 0], ["mod", 0], ["998244353", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i100", 0], ["pow", 0], ["100", 0], ["mod", 0], ["2", 0], ["mod", 0], ["p", 0], ["i", 0], ["i100", 0], ["mod", 0], ["for", 0], ["i", 0], ["in", 0], ["p", 0], ["top", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["top", 0], ["p", 0], ["i", 0], ["top", 0], ["1", 0], ["top", 0], ["mod", 0], ["bot", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["bot", 0], ["p", 0], ["i", 0], ["bot", 0], ["mod", 0], ["ans", 0], ["top", 0], ["pow", 0], ["bot", 0], ["mod", 0], ["2", 0], ["mod", 0], ["mod", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["size", 0], ["998244353", 0], ["for", 0], ["p", 0], ["in", 0], ["p", 0], ["ans", 0], ["ans", 0], ["1", 0], ["size", 0], ["ans", 0], ["ans", 0], ["100", 0], ["size", 0], ["pow", 0], ["p", 0], ["size", 0], ["2", 0], ["size", 0], ["size", 0], ["print", 0], ["ans", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["inv", 0], ["mod", 0], ["n", 0], ["return", 0], ["pow", 0], ["n", 0], ["mod", 0], ["2", 0], ["mod", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["p", 0], ["res", 0], ["res", 0], ["1", 0], ["100", 0], ["inv", 0], ["mod", 0], ["i", 0], ["mod", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["exp", 0], ["0", 0], ["m", 0], ["998244353", 0], ["for", 0], ["pi", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["exp", 0], ["exp", 0], ["1", 0], ["100", 0], ["pow", 0], ["pi", 0], ["m", 0], ["2", 0], ["m", 0], ["m", 0], ["print", 0], ["int", 0], ["exp", 0], ["m", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["mod", 0], ["998244353", 0], ["出力の制限", 0], ["互いに素なa", 0], ["bについて、a", 0], ["x", 0], ["b", 0], ["y", 0], ["1の一つの解", 0], ["def", 0], ["extgcd", 0], ["a", 0], ["b", 0], ["r", 0], ["1", 0], ["0", 0], ["a", 0], ["w", 0], ["0", 0], ["1", 0], ["b", 0], ["while", 0], ["w", 0], ["2", 0], ["1", 0], ["q", 0], ["r", 0], ["2", 0], ["w", 0], ["2", 0], ["r2", 0], ["w", 0], ["w2", 0], ["r", 0], ["0", 0], ["q", 0], ["w", 0], ["0", 0], ["r", 0], ["1", 0], ["q", 0], ["w", 0], ["1", 0], ["r", 0], ["2", 0], ["q", 0], ["w", 0], ["2", 0], ["r", 0], ["r2", 0], ["w", 0], ["w2", 0], ["x", 0], ["y", 0], ["return", 0], ["w", 0], ["0", 0], ["w", 0], ["1", 0], ["aの逆元", 0], ["mod", 0], ["m", 0], ["を求める。", 0], ["aとmは互いに素であることが前提", 0], ["def", 0], ["mod", 0], ["inv", 0], ["a", 0], ["m", 0], ["mod", 0], ["x", 0], ["extgcd", 0], ["a", 0], ["m", 0], ["0", 0], ["return", 0], ["m", 0], ["x", 0], ["m", 0], ["m", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["0", 0], ["p", 0], ["0", 0], ["q", 0], ["1", 0], ["for", 0], ["i", 0], ["a", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["p0", 0], ["a", 0], ["mod", 0], ["inv", 0], ["100", 0], ["mod", 0], ["q0", 0], ["100", 0], ["a", 0], ["mod", 0], ["inv", 0], ["100", 0], ["mod", 0], ["p", 0], ["p", 0], ["i", 0], ["1", 0], ["q", 0], ["q0", 0], ["mod", 0], ["k", 0], ["k", 0], ["q", 0], ["q0", 0], ["mod", 0], ["q", 0], ["q", 0], ["p0", 0], ["mod", 0], ["inv", 0], ["mod", 0], ["1", 0], ["k", 0], ["mod", 0], ["w", 0], ["n", 0], ["q", 0], ["p", 0], ["mod", 0], ["ans", 0], ["w", 0], ["mod", 0], ["inv", 0], ["inv", 0], ["mod", 0], ["print", 0], ["ans", 0], ["m", 0], ["998244353", 0], ["n", 0], ["int", 0], ["input", 0], ["exp", 0], ["0", 0], ["for", 0], ["pi", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["exp", 0], ["exp", 0], ["1", 0], ["100", 0], ["pow", 0], ["pi", 0], ["m", 0], ["2", 0], ["m", 0], ["m", 0], ["print", 0], ["exp", 0], ["n", 0], ["input", 0], ["n", 0], ["int", 0], ["n", 0], ["md", 0], ["998244353", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["inv", 0], ["x", 0], ["nonlocal", 0], ["md", 0], ["return", 0], ["pow", 0], ["x", 0], ["md", 0], ["2", 0], ["md", 0], ["ml", 0], ["1", 0], ["ans", 0], ["0", 0], ["for", 0], ["el", 0], ["in", 0], ["reversed", 0], ["l", 0], ["ml", 0], ["100", 0], ["ml", 0], ["inv", 0], ["el", 0], ["ml", 0], ["md", 0], ["ans", 0], ["ml", 0], ["ans", 0], ["md", 0], ["print", 0], ["ans", 0], ["m", 0], ["998244353", 0], ["n", 0], ["input", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["num", 0], ["0", 0], ["denum", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["p", 0], ["num", 0], ["num", 0], ["denum", 0], ["100", 0], ["m", 0], ["denum", 0], ["denum", 0], ["i", 0], ["m", 0], ["print", 0], ["num", 0], ["denum", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["g", 0], ["gcd", 0], ["num", 0], ["denum", 0], ["num", 0], ["num", 0], ["g", 0], ["denum", 0], ["denum", 0], ["g", 0], ["denum", 0], ["pow", 0], ["denum", 0], ["m", 0], ["2", 0], ["m", 0], ["print", 0], ["num", 0], ["denum", 0], ["m", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["power", 0], ["x", 0], ["y", 0], ["res", 0], ["1", 0], ["while", 0], ["y", 0], ["0", 0], ["if", 0], ["y", 0], ["1", 0], ["res", 0], ["x", 0], ["res", 0], ["mod", 0], ["y", 0], ["y", 0], ["1", 0], ["x", 0], ["x", 0], ["x", 0], ["mod", 0], ["return", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["prob", 0], ["input", 0], ["split", 0], ["p", 0], ["power", 0], ["100", 0], ["n", 0], ["q", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["q", 0], ["q", 0], ["int", 0], ["prob", 0], ["i", 0], ["mod", 0], ["p", 0], ["p", 0], ["q", 0], ["power", 0], ["100", 0], ["n", 0], ["i", 0], ["1", 0], ["mod", 0], ["mod", 0], ["q", 0], ["q", 0], ["int", 0], ["prob", 0], ["n", 0], ["1", 0], ["mod", 0], ["print", 0], ["p", 0], ["power", 0], ["q", 0], ["mod", 0], ["2", 0], ["mod", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["stdin", 0], ["readline", 0], ["mod", 0], ["998244353", 0], ["inv", 0], ["0", 0], ["103", 0], ["inv", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["101", 0], ["inv", 0], ["i", 0], ["mod", 0], ["mod", 0], ["i", 0], ["inv", 0], ["mod", 0], ["i", 0], ["mod", 0], ["n", 0], ["int", 0], ["input", 0], ["h", 0], ["0", 0], ["n", 0], ["3", 0], ["h", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["2", 0], ["h", 0], ["i", 0], ["h", 0], ["i", 0], ["1", 0], ["100", 0], ["mod", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["tot", 0], ["1", 0], ["h", 0], ["n", 0], ["mod", 0], ["now", 0], ["1", 0], ["iv", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["iv", 0], ["iv", 0], ["inv", 0], ["p", 0], ["i", 0], ["mod", 0], ["continue", 0], ["now", 0], ["now", 0], ["p", 0], ["i", 0], ["mod", 0], ["tot", 0], ["now", 0], ["h", 0], ["n", 0], ["i", 0], ["1", 0], ["mod", 0], ["tot", 0], ["mod", 0], ["iv", 0], ["iv", 0], ["inv", 0], ["p", 0], ["i", 0], ["mod", 0], ["print", 0], ["tot", 0], ["iv", 0], ["mod", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.03955328059562587, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.009728734891601342, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.05599259602036094, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.032855159648310955, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.031177291763610983, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.009151543353497753, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.05599259602036094, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.032855159648310955, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n - Let the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\n - The set of the squares painted white is divided into exactly A connected components.\n - The set of the squares painted black is divided into exactly B connected components.\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.\n\n-----Notes-----\nTwo squares painted white, c_1 and c_2, are called connected when the square c_2 can be reached from the square c_1 passing only white squares by repeatedly moving up, down, left or right to an adjacent square.\nA set of squares painted white, S, forms a connected component when the following conditions are met:\n - Any two squares in S are connected.\n - No pair of a square painted white that is not included in S and a square included in S is connected.\nA connected component of squares painted black is defined similarly.\n\n-----Constraints-----\n - 1 \\leq A \\leq 500\n - 1 \\leq B \\leq 500\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nOutput should be in the following format:\n - In the first line, print integers h and w representing the size of the grid you constructed, with a space in between.\n - Then, print h more lines. The i-th (1 \\leq i \\leq h) of these lines should contain a string s_i as follows:\n - If the square at the i-th row and j-th column (1 \\leq j \\leq w) in the grid is painted white, the j-th character in s_i should be ..\n - If the square at the i-th row and j-th column (1 \\leq j \\leq w) in the grid is painted black, the j-th character in s_i should be #.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n3 3\n##.\n..#\n#.#\n\nThis output corresponds to the grid below:\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["\n\n\n\n\nA,B = list(map(int, input().split()))\n\nS = [[\".\" if h < 50 else \"#\" for _ in range(100) ] for h in range(100)]\n\nend_black = False\nfor i in range(0,50,2):\n\tif end_black:\n\t\tbreak\n\tfor j in range(100):\n\t\tif B <= 1:\n\t\t\tend_black = True\n\t\t\tbreak\n\t\t\n\t\tif j % 2 == 0:\n\t\t\tS[i][j] = \"#\"\n\t\t\tB -= 1\n\n\nend_white = False\nfor i in range(53,100, 2):\n\tif end_white:\n\t\tbreak\n\tfor j in range(100):\n\t\tif A <= 1:\n\t\t\tend_white = True\n\t\t\tbreak\n\t\t\n\t\tif j % 2 == 0:\n\t\t\tS[i][j] = \".\"\n\t\t\tA -= 1\n\nprint((100,100))\nfor i in range(100):\n\tprint((\"\".join(S[i])))\n\n", "#!/usr/bin python3\n# -*- coding: utf-8 -*-\n\na, b = list(map(int, input().split()))\nretBW = [['#']*100 for i in range(50)]\nretWB = [['.']*100 for i in range(50)]\nfor i in range(0, 50, 2):\n\tfor j in range(0, 100, 2):\n\t\tif a>1:\n\t\t\tretBW[i][j]='.'\n\t\t\ta -= 1\n\nfor i in range(1, 50, 2):\n\tfor j in range(0, 100, 2):\n\t\tif b>1:\n\t\t\tretWB[i][j]='#'\n\t\t\tb -= 1\n\nprint('100 100')\nfor x in retBW:\n\tprint((''.join(x)))\nfor x in retWB:\n\tprint((''.join(x)))\n", "A,B = list(map(int,input().split()))\nMAX = 100\nans = []\nfor i in range(MAX): #下地として上半分は白、下半分は黒。\n\tif i < MAX//2:\n\t\ttemp = [\".\"]*MAX\n\telse:\n\t\ttemp = [\"#\"]*MAX\n\tans.append(temp)\n#print(ans)\nA-=1;B-=1\nh = 0; w = 0\nfor j in range(B): #上半分に黒を置く。\n\tans[h][w] = \"#\"\n\tw += 2\n\tif w > MAX-1:\n\t\th += 2\n\t\tw = 0\n\n#print(ans)\nh = MAX//2+1; w = 0\nfor j in range(A):\n\tans[h][w] = \".\"\n\tw += 2\n\tif w > MAX-1:\n\t\th += 2\n\t\tw = 0\nL = [MAX,MAX]\nprint((*L))\nfor i in range(MAX):\n\toutput = \"\".join(ans[i])\n\tprint(output)\n", "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush,heapify\nimport sys,bisect,math,itertools,fractions\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\na,b = inpl()\nif a == b == 1:\n\tprint(1,2)\n\tprint('.#')\n\treturn\nrev = False\nif a < b:\n\trev = True\n\ta,b = b,a\na -= 1\nres = [[None] * 100 for _ in range(100)]\nr = 0\nok = True\nwhile ok:\n\tfor c in range(100):\n\t\tif r%2:\n\t\t\tres[r][c] = 0\n\t\telse:\n\t\t\tif not ok or c%2:\n\t\t\t\tres[r][c] = 1\n\t\t\t\tb -= 1\n\t\t\t\tif b == 0:\n\t\t\t\t\tok = False\n\t\t\telse:\n\t\t\t\tres[r][c] = 0\n\tr += 1\nfor c in range(100):\n\tres[r][c] = 1 if c == 99 else 0\nr += 1\nfor c in range(100):\n\tres[r][c] = 1\nr += 1\nok = True\nwhile ok:\n\tfor c in range(100):\n\t\tif r%2:\n\t\t\tres[r][c] = 1\n\t\telse:\n\t\t\tif not ok or c%2:\n\t\t\t\tres[r][c] = 0\n\t\t\t\ta -= 1\n\t\t\t\tif a <= 0:\n\t\t\t\t\tok = False\n\t\t\telse:\n\t\t\t\tres[r][c] = 1\n\tr += 1\nfor i in range(r,100):\n\tfor j in range(100):\n\t\tres[i][j] = res[i-1][j]\nprint(100,100)\nfor i in range(100):\n\tfor j in range(100):\n\t\tif rev:\n\t\t\tres[i][j] = '.' if res[i][j] else '#'\n\t\telse:\n\t\t\tres[i][j] = '#' if res[i][j] else '.'\n\tprint(''.join(res[i]))\n", "A,B = map(int,input().split())\nT = [[\".\" for _ in range(100)] for _ in range(100)]\nfor i in range(50,100):\n\tfor j in range(100):\n\t\tT[i][j] = \"#\"\ncnt = 1\nif B>1:\n\tflag = 0\n\tfor i in range(1,49,2):\n\t\tfor j in range(1,100,2):\n\t\t\tT[i][j] = \"#\"\n\t\t\tcnt += 1\n\t\t\tif cnt==B:\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\tif flag==1:break\ncnt = 1\nif A>1:\n\tflag = 0\n\tfor i in range(51,99,2):\n\t\tfor j in range(1,100,2):\n\t\t\tT[i][j] = \".\"\n\t\t\tcnt += 1\n\t\t\tif cnt==A:\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\tif flag==1:break\nprint(100,100)\nfor i in range(100):\n\tprint(\"\".join(T[i]))\n", "import sys\nimport math\nimport copy\nimport random\nfrom heapq import heappush, heappop, heapify\nfrom functools import cmp_to_key\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, Counter\n# sys.setrecursionlimit(1000000)\n\n# input aliases\ninput = sys.stdin.readline\ngetS = lambda: input().strip()\ngetN = lambda: int(input())\ngetList = lambda: list(map(int, input().split()))\ngetZList = lambda: [int(x) - 1 for x in input().split()]\n\nINF = float(\"inf\")\nMOD = 10**9 + 7\ndivide = lambda x: pow(x, MOD-2, MOD)\n\ndef nck(n, k, kaijyo):\n\treturn (npk(n, k, kaijyo) * divide(kaijyo[k])) % MOD\n\ndef npk(n, k, kaijyo):\n\tif k == 0 or k == n:\n\t\treturn n % MOD\n\treturn (kaijyo[n] * divide(kaijyo[n-k])) % MOD\n\ndef fact_and_inv(SIZE):\n\tinv = [0] * SIZE  # inv[j] = j^{-1} mod MOD\n\tfac = [0] * SIZE  # fac[j] = j! mod MOD\n\tfinv = [0] * SIZE  # finv[j] = (j!)^{-1} mod MOD\n\tinv[1] = 1\n\tfac[0] = fac[1] = 1\n\tfinv[0] = finv[1] = 1\n\tfor i in range(2, SIZE):\n\t\tinv[i] = MOD - (MOD // i) * inv[MOD % i] % MOD\n\t\tfac[i] = fac[i - 1] * i % MOD\n\t\tfinv[i] = finv[i - 1] * inv[i] % MOD\n\n\treturn fac, finv\n\ndef renritsu(A, Y):\n\t# example 2x + y = 3, x + 3y = 4\n\t# A = [[2,1], [1,3]])\n\t# Y = [[3],[4]] または [3,4]\n\tA = np.matrix(A)\n\tY = np.matrix(Y)\n\tY = np.reshape(Y, (-1, 1))\n\tX = np.linalg.solve(A, Y)\n\n\t# [1.0, 1.0]\n\treturn X.flatten().tolist()[0]\n\nclass TwoDimGrid:\n\t# 2次元座標 -> 1次元\n\tdef __init__(self, h, w, wall=\"#\"):\n\t\tself.h = h\n\t\tself.w = w\n\t\tself.size = (h+2) * (w+2)\n\t\tself.wall = wall\n\t\tself.get_grid()\n\t\t# self.init_cost()\n\n\tdef get_grid(self):\n\t\tgrid = [self.wall * (self.w + 2)]\n\t\tfor i in range(self.h):\n\t\t\tgrid.append(self.wall + getS() + self.wall)\n\n\t\tgrid.append(self.wall * (self.w + 2))\n\t\tself.grid = grid\n\tdef init_cost(self):\n\t\tself.cost = [INF] * self.size\n\n\tdef pos(self, x, y):\n\t\t# 壁も含めて0-indexed 元々の座標だけ考えると1-indexed\n\t\treturn y * (self.w + 2) + x\n\tdef getgrid(self, x, y):\n\t\treturn self.grid[y][x]\n\tdef get(self, x, y):\n\t\treturn self.cost[self.pos(x, y)]\n\tdef set(self, x, y, v):\n\t\tself.cost[self.pos(x, y)] = v\n\t\treturn\n\tdef show(self):\n\t\tfor i in range(self.h+2):\n\t\t\tprint(self.cost[(self.w + 2) * i:(self.w + 2) * (i+1)])\n\tdef showsome(self, tgt):\n\t\tfor t in tgt:\n\t\t\tprint(t)\n\t\treturn\n\tdef showsomejoin(self, tgt):\n\t\tfor t in tgt:\n\t\t\tprint(\"\".join(t))\n\t\treturn\n\n\tdef search(self):\n\t\tgrid = self.grid\n\t\tmove = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\t\tmove_eight = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n\t\t# for i in range(1, self.h+1):\n\t\t#     for j in range(1, self.w+1):\n\t\t#         cx, cy = j, i\n\t\t#         for dx, dy in move_eight:\n\t\t#             nx, ny = dx + cx, dy + cy\n\ndef solve():\n\ta, b = getList()\n\tprint(100, 100)\n\tfor i in range(100):\n\t\ttmp = []\n\t\tfor j in range(100):\n\t\t\tif i < 50:\n\t\t\t\tif j % 2 == 1 or i % 2 == 1 or  a <= 1:\n\t\t\t\t\ttmp.append(\"#\")\n\t\t\t\telse:\n\t\t\t\t\ttmp.append(\".\")\n\t\t\t\t\ta -= 1\n\t\t\telse:\n\t\t\t\tif j % 2 == 1 or i % 2 == 0 or b <= 1:\n\t\t\t\t\ttmp.append(\".\")\n\t\t\t\telse:\n\t\t\t\t\ttmp.append(\"#\")\n\t\t\t\t\tb -= 1\n\n\t\tprint(\"\".join(tmp))\n\n\n\n\n\ndef main():\n\tn = getN()\n\tfor _ in range(n):\n\t\ts = \"\".join([random.choice([\"F\", \"T\"]) for i in range(20)])\n\t\tprint(s)\n\t\tsolve(s, 1, 0)\n\n\treturn\ndef __starting_point():\n\t# main()\n\tsolve()\n__starting_point()\n", "def main():\n\tA, B = map(int, input().split())\n\tboard = [[\"#\"]*100 for _ in range(50)] + [[\".\"]*100 for _ in range(50)]\n\t\n\twc = 1\n\tfor i in range(0, 50, 2):\n\t\tfor j in range(0, 100, 2):\n\t\t\tif wc >= A:\n\t\t\t\tbreak\n\t\t\tboard[i][j] = \".\"\n\t\t\twc += 1\n\t\tif wc >= A:\n\t\t\t\tbreak\n\t\n\tbc = 1\n\tfor i in range(51, 100, 2):\n\t\tfor j in range(0, 100, 2):\n\t\t\tif bc >= B:\n\t\t\t\tbreak\n\t\t\tboard[i][j] = \"#\"\n\t\t\tbc += 1\n\t\tif bc >= B:\n\t\t\t\tbreak\n\n\tprint(100, 100)\n\tfor r in board:\n\t\tprint(*r, sep=\"\")\n\nmain()\n", "field = [['#']*100 for _ in range(50)] + [['.']*100 for _ in range(50)]\n\na, b = list(map(int, input().split()))\na-=1\nb-=1\nx = 0\ny = 0\nfor _ in range(a):\n\tfield[x][y] = '.'\n\ty += 2\n\tif y >= 100:\n\t\ty = 0\n\t\tx += 2\n\nx = 99\ny = 0\nfor _ in range(b):\n\tfield[x][y] = '#'\n\ty += 2\n\tif y >= 100:\n\t\ty = 0\n\t\tx -= 2\n\nprint((100,100))\n\t\t\nfor row in field:\n\tprint((\"\".join(row)))\n\n\t\t\n", "A, B = map(int, input().split())\n\ngrid = []\nfor _ in range(50):\n\tgrid.append([\"#\"] * 100)\nfor _ in range(50):\n\tgrid.append([\".\"] * 100)\n\n\ndiv, mod = divmod(A - 1, 50)\nfor d in range(div):\n\th = 0 + d * 2\n\tfor w in range(0, 100, 2):\n\t\tgrid[h][w] = \".\"\nif mod:\n\th = 0 + div * 2\n\tfor w in range(0, mod * 2, 2):\n\t\tgrid[h][w] = \".\"\n\ndiv, mod = divmod(B - 1, 50)\nfor d in range(div):\n\th = 51 + d * 2\n\tfor w in range(0, 100, 2):\n\t\tgrid[h][w] = \"#\"\nif mod:\n\th = 51 + div * 2\n\tfor w in range(0, mod * 2, 2):\n\t\tgrid[h][w] = \"#\"\n\nprint(100, 100)\nfor g in grid:\n\tprint(\"\".join(g))\n", "a,b=map(int,input().split())\nd=[[\"#\"]*100 for i in range(100)]\na-=1\nb-=1\nfor i in range(50,100):\n\tfor j in range(100):\n\t\td[i][j]=\".\"\nfor i in range(0,50,2):\n\tfor j in range(0,100,2):\n\t\tif a==0:\n\t\t\tbreak\n\t\td[i][j]=\".\"\n\t\ta-=1\n\tif a==0:\n\t\tbreak\nfor i in range(99,49,-2):\n\tfor j in range(0,100,2):\n\t\tif b==0:\n\t\t\tbreak\n\t\td[i][j]=\"#\"\n\t\tb-=1\nprint(100,100)\nfor i in d:\n\tprint(*i,sep=\"\")\n", "a, b = map(int, input().split())\n\nans = [[\"#\" if i < 50 else \".\" for _ in range(100)] for i in range(100)]\n\nfor i in range(a - 1):\n\trows = i // 50\n\tclms = (i % 50) * 2 + (rows % 2)\n\tans[rows * 2][clms] = \".\"\n\nfor i in range(b - 1):\n\trows = i // 50\n\tclms = (i % 50) * 2 + (rows % 2)\n\tans[99 - rows * 2][clms] = \"#\"\n\t\nprint(100, 100)\nfor a in ans:\n\tprint(\"\".join(a))\n", "A,B = map(int,input().split())\n\na = 626 - A\nb = 530 - B\n\nH,W = 99,99\nS = [[\".\"]*W for _ in range(H)]\nfor i in range(H):\n\tfor j in range(W):\n\n\t\tif i == 0 or i == H-1:\n\t\t\tS[i][j] = \"#\"\n\t\t\tcontinue\n\t\tif j == 0 or j == W-1:\n\t\t\tS[i][j] = \"#\"\n\t\t\tcontinue\n\n\t\tif i%4 == 0 or i%4 == 2:\n\t\t\tif j%4 == 3:\n\t\t\t\tS[i][j] = \".\"\n\t\t\telse:\n\t\t\t\tS[i][j] = \"#\"\n\t\telif i%4 == 1:\n\t\t\tif j%4 == 0 or j%4 == 2:\n\t\t\t\tS[i][j] = \"#\"\n\nh,w = 1,1\nwhile a != 0:\n\tS[h][w] = \"#\"\n\ta -= 1\n\tw += 4\n\tif w >= W:\n\t\tw = 1\n\t\th += 4\n\nh,w = 4,3\nwhile b != 0:\n\tS[h][w] = \"#\"\n\tb -= 1\n\tw += 4\n\tif b == 0:\n\t\tbreak\n\tif w >= W-4:\n\t\th += 3\n\t\tS[h][0] = \"#\"\n\t\tw = 3\n\t\th += 1\n\nprint(99,99)\nfor i in range(H):\n\toutput = \"\".join(S[i])\n\tprint(output)\n", "def printrow(num, s, t):\n\tfor i in range(50):\n\t\tfor j in range(100):\n\t\t\tres = ((i + j) % 3 == 0) & ((num - 1) * i > 0)\n\t\t\tprint(s if res else t, end='')\n\t\t\tnum -= res\n\t\tprint()\n\na, b = map(int, input().split())\n\nprint(100, 100)\nprintrow(b, '#', '.')\nprintrow(a, '.', '#')\n", "A,B = map(int,input().split())\nGrid = []\nfor i in range(100):\n\tGrid += [[0]*100]\nacgrid= []\nfor _ in range(50):\n\tacgrid.append(1)\n\tacgrid.append(-1)\nwhite = 1\nblack = 1\nif A == 1 and B == 0:\n\tGrid = [1,-1]\nelse:\n\ti = 0\n\twhile True:\n\t\tif white + 50 > A:\n\t\t\tbreak\n\t\telse:\n\t\t\tGrid[i] = acgrid\n\t\t\tGrid[i+1] = [-1]*100\n\t\t\ti += 2\n\t\t\twhite += 50\n\tfor j in range(50):\n\t\tif white != A:\n\t\t\tGrid[i][2*j] = 1\n\t\t\tGrid[i][2*j+1] = -1\n\t\t\twhite += 1\n\t\telse:\n\t\t\tGrid[i][2*j] = -1\n\t\t\tGrid[i][2*j+1] = -1\n\ti += 1\n\tGrid[i] = [-1]*100\n\ti += 1\n\tGrid[i] = [1]*100\n\ti += 1\n\twhile True:\n\t\tif black + 50 > B:\n\t\t\tbreak\n\t\telse:\n\t\t\tGrid[i] = acgrid\n\t\t\tGrid[i+1] = [1]*100\n\t\t\ti += 2\n\t\t\tblack += 50\n\tfor j in range(50):\n\t\tif black != B:\n\t\t\tGrid[i][2*j] = 1\n\t\t\tGrid[i][2*j+1] = -1\n\t\t\tblack += 1\n\t\telse:\n\t\t\tGrid[i][2*j] = 1\n\t\t\tGrid[i][2*j+1] = 1\nnum = []\nans = []\nfor box in Grid:\n\tif box[0] == 0:\n\t\tbreak\n\telse:\n\t\tst = ''\n\t\tfor s in box:\n\t\t\tif s == 1:\n\t\t\t\tst += '.'\n\t\t\telif s == -1:\n\t\t\t\tst += '#'\n\t\tans.append(st)\nnum.append(len(ans))\nnum.append(len(ans[0]))\nprint(num[0],num[1])\nfor st in ans:\n\tprint(st)\n", "a,b=list(map(int,input().split()))\ngrid=[[\".\" for i in range(100)] for j in range(50)]+[[\"#\" for i in range(100)] for j in range(50)]\nwhite=0;black=0\nfor i in range(49):\n\tif black==b-1:break\n\tif i%2==0:continue\n\tfor j in range(100):\n\t\tif i%2==j%2:\n\t\t\tgrid[i][j]=\"#\"\n\t\t\tblack+=1\n\t\tif black==b-1:break\n\t\nfor i in range(50,100):\n\tif white==a-1:break\n\tif i%2==0:continue\n\tfor j in range(100):\n\t\tif i%2==j%2:\n\t\t\tgrid[i][j]=\".\"\n\t\t\twhite+=1\n\t\tif white==a-1:break\nprint((100,100))\nfor i in range(100):\n\tstri=\"\"\n\tfor j in grid[i]:\n\t\tstri+=j\n\tprint(stri)\n", "a,b = list(map(int,input().split()))\nls = [['#']*99 for i in range(49)] + [['.']*99 for i in range(49)]\ni,j = 0,0\nfor c in range(a - 1):\n\tls[i][j] = '.'\n\tif j >= 97:\n\t\tj = 0;i += 2\n\telse:\n\t\tj += 2\ni,j = 51,0\nfor c in range(b - 1):\n\tls[i][j] = '#'\n\tif j >= 97:\n\t\tj = 0;i += 2\n\telse:\n\t\tj += 2\nprint(98,99)\nfor j in range(98):\n\tprint(''.join(ls[j]))\n", "import sys\nreadline = sys.stdin.readline\n\nA,B = list(map(int,readline().split()))\n\ngrid = []\nfor i in range(50):\n\tgrid.append([\"#\"] * 100)\n\t\nfor i in range(50):\n\tgrid.append([\".\"] * 100)\n\t\n# 前半の黒い部分からA-1箇所を白く塗る\ncnt = 0\nfor i in range(50):\n\tif cnt >= A - 1:\n\t\tbreak\n\tfor j in range((i % 2) * 2,len(grid[i]),4):\n\t\tif cnt >= A - 1:\n\t\t\tbreak\n\t\tgrid[i][j] = \".\"\n\t\tcnt += 1\n\t\t\t\ncnt = 0\nfor i in range(51,100):\n\tif cnt >= B - 1:\n\t\tbreak\n\tfor j in range((i % 2) * 2,len(grid[i]),4):\n\t\tif cnt >= B - 1:\n\t\t\tbreak\n\t\tgrid[i][j] = \"#\"\n\t\tcnt += 1\n\nprint((100,100))\nfor g in grid:\n\tprint((\"\".join(g)))\n", "# ARC093D\n\na,b = map(int, input().split())\n\nif a<=b:\n\tm = \".\"\n\tM = \"#\"\n\tmc = a\n\tMc = b\nelse:\n\tm = \"#\"\n\tM = \".\"\n\tmc = b\n\tMc = a\n\t\ns = [[m]*100 for _ in range(100)]\ntmp = [[M,M,M,m],\n\t\t[M,m,M,m],\n\t  [M,M,M,m],\n\t  [m,m,m,m]]\ntmp2 = [[M,m,m,m],\n\t\t[m,m,m,m],\n\t  [m,m,m,m],\n\t  [m,m,m,m]]\ni = 0\nfor i in range(mc-1):\n\tu,v = (i*4)//100, (i*4)%100\n\tu *= 4\n\tfor x in range(4):\n\t\tfor y in range(4):\n\t\t\ts[u+x][v+y] = tmp[x][y]\n\nfor j in range(i+1, i+1+(Mc-(mc-1))):\n\tu,v = (j*4)//100, (j*4)%100\n\tu *= 4\n\tfor x in range(4):\n\t\tfor y in range(4):\n\t\t\ts[u+x][v+y] = tmp2[x][y]\nprint(100,100)\nprint(\"\\n\".join([\"\".join(item) for item in s]))\n", "w,b = list(map(int,input().split()))\ngrid = []\nfor i in range(50):\n\tgrid.append([\".\"]*100)\nfor i in range(50):\n\tgrid.append([\"#\"]*100)\nw -= 1\nb -= 1\ncnt = 0\ni = 0\nj = 0\nwhile cnt < b:\n\tgrid[i][j] = \"#\"\n\tif j == 98:\n\t\ti += 2\n\t\tj = 1\n\telif j == 99:\n\t\ti += 2\n\t\tj = 0\n\telse:\n\t\tj += 2\n\tcnt += 1\n\ncnt = 0\ni = 51\nj = 0\nwhile cnt < w:\n\tgrid[i][j] = \".\"\n\tif j == 98:\n\t\ti += 2\n\t\tj = 1\n\telif j == 99:\n\t\ti += 2\n\t\tj = 0\n\telse:\n\t\tj += 2\n\tcnt += 1\nprint((100,100))\nfor i in range(len(grid)):\n\tprint((\"\".join(grid[i])))\n\n", "A,B=map(int,input().split())\n\nU=[['#' for j in range(100)] for i in range(50)]\nfor w in range(A-1):\n\ts=w//50;t=w%50\n\tU[s*2][t*2]='.'\n\nD=[['.' for j in range(100)] for i in range(50)]\nfor b in range(B-1):\n\tu=b//50;v=b%50\n\tD[u*2+1][v*2]='#'\n\nprint(100,100)\nfor Ui in U:\n\tprint(''.join(Ui))\nfor Di in D:\n\tprint(''.join(Di))\n", "def main():\n\tA, B = list(map(int, input().split()))\n\t# A -> 0, B -> 1\n\tN = 100\n\tS = [[\"#\"]*N for _ in range(N//2)] + [[\".\"]*N for _ in range(N//2,N)]\n\ta = A-1\n\tb = B-1\n\tfor i in range(1,N//2-1,2):\n\t\tfor j in range(0,N,2):\n\t\t\tif a > 0:\n\t\t\t\tS[i][j] = \".\"\n\t\t\t\ta -= 1\n\t\t\telse:\n\t\t\t\tbreak\n\t\tif a <= 0:\n\t\t\tbreak\n\tfor i in range(N//2+1,N,2):\n\t\tfor j in range(0,N,2):\n\t\t\tif b > 0:\n\t\t\t\tS[i][j] = \"#\"\n\t\t\t\tb -= 1\n\t\t\telse:\n\t\t\t\tbreak\n\t\tif b <= 0:\n\t\t\tbreak\n\tprint((N,N))\n\tprint((\"\\n\".join([\"\".join(S[i]) for i in range(N)])))\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from math import gcd\n\nfrom math import factorial as f\n\nfrom math import ceil, floor, sqrt\nimport math\n\nimport bisect\nimport re\nimport heapq\n\nfrom copy import deepcopy\nimport itertools\nfrom itertools import permutations\n\nii = lambda: int(input())\nmi = lambda: list(map(int, input().split()))\nli = lambda: list(map(int, input().split()))\n\nyes = \"Yes\"\nno = \"No\"\n\n\ndef main():\n\ta, b = mi()\n\tprint((100, 100))\n\tans = [[] for i in range(100)]\n\tfor i in range(50):\n\t\tfor j in range(100):\n\t\t\tans[i].append('#')\n\tfor i in range(50, 100):\n\t\tfor j in range(100):\n\t\t\tans[i].append('.')\n\n\tfor i in range(a - 1):\n\t\tans[2 * (i // 50)][2 * (i % 50)] = '.'\n\tfor i in range(b - 1):\n\t\tans[99 - 2 * (i // 50)][2 * (i % 50)] = '#'\n\n\tfor i in range(100):\n\t\tprint((''.join(ans[i])))\n\n\nmain()\n", "a,b=map(int,input().split())\nmat=[['.']*50+['#']*50 for _ in range(100)]\nfor i in range(a-1):\n\tc=51+2*(i%24)\n\td=1+2*(i//24)\n\tmat[d][c]='.'\nfor i in range(b-1):\n\tc=1+2*(i%24)\n\td=1+2*(i//24)\n\tmat[d][c]='#'\nprint(100,100)\nfor x in mat:print(*x,sep='')\n", "def fill(X, c, start):\n\tfor i in range(X):\n\t\tq, r = divmod(i, 49)\n\t\ti = q * 2 + start\n\t\tj = r * 2 + 1 if q % 2 else r * 2 + 2\n\t\tans[i][j] = c\n\n\nA, B = map(int, input().split())\nH, W = 100, 100\nans = [list(\"#\" * W) if i < W // 2 else list(\".\" * W) for i in range(H)]\nfill(A - 1, \".\", 1)\nfill(B - 1, \"#\", H // 2 + 1)\nprint(H, W)\n[print(\"\".join(row)) for row in ans]\n", "A, B = list(map(int,input().split()))\nH = 100\nW = 20\ndef const(s1, s2, ct):\n\tans = [[s1]*W for _ in range(H)]\n\tfor i in range(ct):\n\t\tans[(i//(W//2)) * 2][(i%(W//2)) * 2] = s2\n\treturn ans\n\nans1 = const(\"#\", \".\", A-1)\nans2 = const(\".\", \"#\", B-1)\n#print(ans1)\n#print(ans2)\nans = []\nfor i in range(H):\n\tS1 = ans1[i]\n\tS2 = ans2[i][::-1]\n\tans.append(S1+S2)\n#print(\"\".join([\"#\",\".\"])) \n\nprint((H, len(ans[0])))\nfor a in ans:\n\t#print(type(a))\n\tprint((\"\".join(a)))\n", "def main():\n\tA, B = (int(i) for i in input().split())\n\tgrid = [[\"#\" if i < 50 else \".\"]*100 for i in range(100)]\n\n\tfor h in range(49):\n\t\tif h % 2 == 1:\n\t\t\tcontinue\n\t\tfor w in range(0, 100, 2):\n\t\t\tif A > 1:\n\t\t\t\tgrid[h][w] = \".\"\n\t\t\t\tA -= 1\n\t\t\telse:\n\t\t\t\tbreak\n\tfor h in range(51, 100):\n\t\tif h % 2 == 0:\n\t\t\tcontinue\n\t\tfor w in range(0, 100, 2):\n\t\t\tif B > 1:\n\t\t\t\tgrid[h][w] = \"#\"\n\t\t\t\tB -= 1\n\t\t\telse:\n\t\t\t\tbreak\n\tprint((100, 100))\n\tfor r in grid:\n\t\tprint((\"\".join(r)))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from sys import stdout\nprintn = lambda x: stdout.write(str(x))\ninn = lambda : int(input())\ninl   = lambda: list(map(int, input().split()))\ninm   = lambda:      list(map(int, input().split()))\nins = lambda : input().strip()\nDBG = True # and False\nBIG = 999999999\nR = 10**9 + 7\n\ndef ddprint(x):\n\tif DBG:\n\t\tprint(x)\n\na,b = inm()\nc = [ ['#']*50 for i in range(45) ]\nc.extend([ ['.']*50 for i in range(45) ])\nfor z in range(a-1):\n\t\tc[(z//25)*2][(z%25)*2] = '.'\nfor z in range(b-1):\n\t\tc[(z//25)*2+50][(z%25)*2] = '#'\nprint('90 50')\nfor i in range(90):\n\t\tprint((''.join(c[i])))\n", "import sys\ninput = sys.stdin.readline\n\n\ndef main():\n\tA, B = [int(x) for x in input().split()]\n\n\tcommon = min(A, B)\n\n\tans = [[\"-\"] * 100 for j in range(100)]\n\n\tif A == B == 1:\n\t\tprint(1, 2)\n\t\tprint(\".#\")\n\t\treturn\n\n\treverse = False\n\tif B == 1:\n\t\treverse = True\n\t\tA, B = B, A\n\n\tA -= 1\n\tB -= 1\n\tBorg = B\n\tAorg = A\n\n\tArow = -(-A // 50) * 2\n\tBrow = -(-B // 50) * 2\n\n\tfor i in range(Brow):\n\t\tif i % 2 == 0:\n\t\t\tfor j in range(100):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\tif Borg <= 0:\n\t\t\t\t\t\tans[i][j] = \".\"\n\t\t\t\t\telse:\n\t\t\t\t\t\tans[i][j] = \"#\"\n\t\t\t\t\t\tBorg -= 1\n\t\t\t\telse:\n\t\t\t\t\tans[i][j] = \".\"\n\t\telse:\n\t\t\tfor j in range(100):\n\t\t\t\tans[i][j] = \".\"\n\n\tfor i in range(Brow, Brow + Arow):\n\t\tif (i - Brow) % 2 == 0:\n\t\t\tfor j in range(100):\n\t\t\t\tans[i][j] = \"#\"\n\t\telse:\n\t\t\tfor j in range(100):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\tif Aorg <= 0:\n\t\t\t\t\t\tans[i][j] = \"#\"\n\t\t\t\t\telse:\n\t\t\t\t\t\tans[i][j] = \".\"\n\t\t\t\t\t\tAorg -= 1\n\t\t\t\telse:\n\t\t\t\t\tans[i][j] = \"#\"\n\n\tfor i in range(Brow + Arow, 100):\n\t\tfor j in range(100):\n\t\t\tans[i][j] = \"#\"\n\n\tprint(100, 100)\n\tif reverse:\n\t\tfor i in range(100):\n\t\t\tfor j in range(100):\n\t\t\t\tif ans[i][j] ==  \"#\":\n\t\t\t\t\tprint(\".\", end=\"\")\n\t\t\t\telse:\n\t\t\t\t\tprint(\"#\", end=\"\")\n\t\t\tprint()\n\telse:\n\t\tfor a in ans:\n\t\t\tprint(\"\".join(a))\n\n\n\n\n\ndef __starting_point():\n\tmain()\n\n\n__starting_point()\n", "from math import gcd\n\nfrom math import factorial as f\n\nfrom math import ceil, floor, sqrt\nimport math\n\nimport bisect\nimport re\nimport heapq\n\nfrom copy import deepcopy\nimport itertools\nfrom itertools import permutations\n\n\nii = lambda: int(input())\nmi = lambda: list(map(int, input().split()))\nli = lambda: list(map(int, input().split()))\n\nyes = \"Yes\"\nno = \"No\"\n\n\ndef main():\n\ta, b = mi()\n\tprint((100, 100))\n\tans = [[] for i in range(100)]\n\tfor i in range(50):\n\t\tfor j in range(100):\n\t\t\tans[i].append('#')\n\tfor i in range(50, 100):\n\t\tfor j in range(100):\n\t\t\tans[i].append('.')\n\n\tfor i in range(a - 1):\n\t\tans[2 * (i // 50)][2 * (i % 50)] = '.'\n\tfor i in range(b - 1):\n\t\tans[99 - 2 * (i // 50)][2 * (i % 50)] = '#'\n\n\tfor i in range(100):\n\t\tprint((''.join(ans[i])))\n\n\nmain()\n", "a,b=list(map(lambda x:int(x)-1,input().split()))\nm=[[0]*50+[1]*50 for i in range(100)]\nx,y=-2,0\nfor i in range(a):\n\tx+=2\n\tif x==50:\n\t\tx=0\n\t\ty+=2\n\tm[y][x]=1\nx,y=49,0\nfor i in range(b):\n\tx+=2\n\tif x==101:\n\t\tx=51\n\t\ty+=2\n\tm[y][x]=0\n\nprint(100,100)\nfor i in range(100):\n\tfor j in range(100):\n\t\tprint(\".\"*m[i][j]+\"#\"*(1-m[i][j]),end=\"\")\n\tprint()\n", "A,B = list(map(int,input().split()))\ngrid = []\nfor i in range(50):\n\tgrid.append([\".\"]*(100))\nfor i in range(50):\n\tgrid.append([\"#\"]*(100))\n\nA -= 1\nB -= 1\n\nfor i in range(0,50,2):\n\tfor j in range(0,100,2):\n\t\tif B == 0:\n\t\t\tbreak\n\t\tgrid[i][j] = \"#\"\n\t\tB -= 1\n\telse:\n\t\tcontinue\n\tbreak\n\ngrid = grid[::-1]\nfor i in range(0,50,2):\n\tfor j in range(0,100,2):\n\t\tif A == 0:\n\t\t\tbreak\n\t\tgrid[i][j] = \".\"\n\t\tA -= 1\n\telse:\n\t\tcontinue\n\tbreak\n\nprint(\"100 100\")\nfor row in grid:\n\tprint((\"\".join(row)))\n", "a,b= map(int,input().split())\nline=''.join(['.#']*50)\ndot=['.','#']\ncl=[''.join(['.']*100),''.join(['#']*100)]\nba=[b-1,a-1]\nans=[]\ny=ans.append\nfor c in [0,1]:\n\ty(cl[c])\n\tfor i in range(ba[c]//50):\n\t\ty(line)\n\t\ty(cl[c])\n\ty(''.join(['.#']*(ba[c]%50))+cl[c][(ba[c]%50)*2:])\n\ty(cl[c])\nprint(len(ans),100)\nfor l in ans:print(''.join(l))\n", "import sys\nimport numpy as np\n\nstdin = sys.stdin\n\nri = lambda: int(rs())\nrl = lambda: list(map(int, stdin.readline().split()))  # applies to only numbers\nrs = lambda: stdin.readline().rstrip()  # ignores trailing space\n\nA, B = rl()\ngrid = [['.'] * 100 for _ in range(50)] + [['#'] * 100 for _ in range(50)]\nfor i in range(B-1):\n\trow, column = divmod(i, 50)\n\trow *= 2\n\tcolumn *= 2\n\tgrid[row][column] = '#'\n\nfor i in range(A-1):\n\trow, column = divmod(i, 50)\n\trow *= 2\n\tcolumn *= 2\n\tgrid[99-row][column] = '.'\nprint(100,100)\nfor x in grid:\n\tprint(*x, sep='')\n#56\n", "def main():\n\ta, b = map(int, input().split())\n\tk = 50\n\tgw = [['.'] * 2 * k for _ in range(k)]\n\tgb = [['#'] * 2 * k for _ in range(k)]\n\tfor i in range(b - 1):\n\t\th = (i // k) * 2\n\t\tw = (i % k) * 2\n\t\tgw[h][w] = '#'\n\tfor i in range(a - 1):\n\t\th = (i // k) * 2 + 1\n\t\tw = (i % k) * 2 + 1\n\t\tgb[-h][-w] = '.'\n\tans = gw + gb\n\tprint(2 * k, 2 * k)\n\tfor l in ans:\n\t\tprint(*l, sep='')\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "A,B = map(int,input().split())\n\na = 626 - A\nb = 530 - B\n\nH,W = 99,99\nS = [[\".\"]*W for _ in range(H)]\nfor i in range(H):\n\tfor j in range(W):\n\n\t\tif i == 0 or i == H-1:\n\t\t\tS[i][j] = \"#\"\n\t\t\tcontinue\n\t\tif j == 0 or j == W-1:\n\t\t\tS[i][j] = \"#\"\n\t\t\tcontinue\n\n\t\tif i%4 == 0 or i%4 == 2:\n\t\t\tif j%4 == 3:\n\t\t\t\tS[i][j] = \".\"\n\t\t\telse:\n\t\t\t\tS[i][j] = \"#\"\n\t\telif i%4 == 1:\n\t\t\tif j%4 == 0 or j%4 == 2:\n\t\t\t\tS[i][j] = \"#\"\n\nh,w = 1,1\nwhile a != 0:\n\tS[h][w] = \"#\"\n\ta -= 1\n\tw += 4\n\tif w >= W:\n\t\tw = 1\n\t\th += 4\n\nh,w = 4,3\nwhile b != 0:\n\tS[h][w] = \"#\"\n\tb -= 1\n\tw += 4\n\tif b == 0:\n\t\tbreak\n\tif w >= W-4:\n\t\th += 3\n\t\tS[h][0] = \"#\"\n\t\tw = 3\n\t\th += 1\n\nprint(99,99)\nfor i in range(H):\n\toutput = \"\".join(S[i])\n\tprint(output)\n", "import sys\nimport math\nimport collections\nimport bisect\nimport itertools\n\n# import numpy as np\n\nsys.setrecursionlimit(10 ** 7)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nni = lambda: int(sys.stdin.readline().rstrip())\nns = lambda: map(int, sys.stdin.readline().rstrip().split())\nna = lambda: list(map(int, sys.stdin.readline().rstrip().split()))\nna1 = lambda: list(map(lambda x: int(x) - 1, sys.stdin.readline().rstrip().split()))\n\n\n# ===CODE===\n\ndef main():\n\tw, b = ns()\n\tl = 100\n\tmat = [[\"#\" for _ in range(l)] for __ in range(l)]\n\n\tif w == 1 and b == 1:\n\t\tmat[0][0] = \".\"\n\n\tcnt = 0\n\tbreakflg = False\n\ttmp = 1 if b > 1 else 0\n\tflg = False\n\tfor i in range(0, l - 3, 3):\n\t\tfor j in range(0, l - 3, 3):\n\t\t\tif not flg:\n\t\t\t\tif cnt < w - tmp:\n\t\t\t\t\taround = \"#\"\n\t\t\t\t\tcenter = \".\"\n\t\t\t\telse:\n\t\t\t\t\tflg = True\n\t\t\t\t\tbreak\n\n\t\t\tif flg:\n\t\t\t\tif cnt < w - tmp + b - 1:\n\t\t\t\t\taround = \".\"\n\t\t\t\t\tcenter = \"#\"\n\t\t\t\telse:\n\t\t\t\t\tbreakflg = True\n\t\t\t\t\tbreak\n\n\n\n\n\t\t\tfor n in range(3):\n\t\t\t\tfor m in range(3):\n\t\t\t\t\tmat[i + n][j + m] = center if n == 1 and m == 1 else around\n\t\t\tcnt += 1\n\t\tif breakflg:\n\t\t\tbreak\n\n\tprint(l, l)\n\tfor mi in mat:\n\t\tprint(*mi, sep=\"\")\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "b, a = list(map(int, input().split()))\n\nwhite = '.' * 100\nblack = '#' * 100\nwb = '.#' * 50\n\nban = []\n\nnum_b = b - 1\nnum_a = a - 1\n\ngyo_b = num_b // 50\nret_b = num_b % 50\n\ngyo_a = num_a // 50\nret_a = num_a % 50\n\nfor i in range(gyo_a):\n\tban.append(wb)\n\tban.append(white)\n\nban.append(('.#' * ret_a + ('..' * (50 - ret_a))))\nban.append(white)\n\nfor i in range(50 - 2 * (gyo_a + 1)):\n\tban.append(white)\n\nfor i in range(50 - 2 * (gyo_b + 1)):\n\tban.append(black)\n\nfor i in range(gyo_b):\n\tban.append(wb)\n\tban.append(black)\n\nban.append('.#' * ret_b + '##' * (50 - ret_b))\nban.append(black)\n\nprint((100, 100))\n\nfor item in ban:\n\tprint((''.join(item)))\n", "a, b = list(map(int, input().split()))\na -= 1\nb -= 1\nans = [[\"#\" for _ in range(90)] for _ in range(40)] + [[\".\" for _ in range(90)] for _ in range(40)]\npos = 0\nfor i in range(a):\n\tx = pos % 90\n\ty = (pos // 90) * 2\n\tans[y][x] = \".\"\n\tpos += 2\n\npos = 0\nfor j in range(b):\n\tx = pos % 90\n\ty = 45 +  (pos // 90) * 2\n\tans[y][x] = \"#\"\n\tpos += 2\n\t\nprint((80, 90))\nfor row in ans:\n\tprint((\"\".join(row)))\n", "#!/usr/bin/env python3\nimport sys\n\nsys.setrecursionlimit(10 ** 8)\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nA, B = map(int, readline().split())\n\n\ndef solve():\n\tW = 100\n\thw = B // 25 + 2\n\thb = A // 25 + 2\n\tH = hw + hb\n\tgrid = [[i >= hw] * W for i in range(H)]  # true => black\n\n\tdef paint_black():\n\t\tblack = 1\n\t\tfor r in range(0, hw - 1, 2):\n\t\t\tfor c in range(0, W, 2):\n\t\t\t\tif black == B:\n\t\t\t\t\treturn\n\t\t\t\tgrid[r][c] = True\n\t\t\t\tblack += 1\n\n\tdef paint_white():\n\t\twhite = 1\n\t\tfor r in range(hw + 1, H, 2):\n\t\t\tfor c in range(0, W, 2):\n\t\t\t\tif white == A:\n\t\t\t\t\treturn\n\t\t\t\tgrid[r][c] = False\n\t\t\t\twhite += 1\n\n\tpaint_black()\n\tpaint_white()\n\treturn grid\n\n\ndef print_grid(grid):\n\th, w = len(grid), len(grid[0])\n\tprint(h, w)\n\tfor r in range(h):\n\t\tfor c in range(w):\n\t\t\tif grid[r][c]:\n\t\t\t\tprint(\"#\", end=\"\")\n\t\t\telse:\n\t\t\t\tprint(\".\", end=\"\")\n\t\tprint()\n\n\ndef __starting_point():\n\tprint_grid(solve())\n\n__starting_point()\n", "#!/usr/bin/env python3\nimport sys\n\nsys.setrecursionlimit(10 ** 8)\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nA, B = map(int, readline().split())\ncolor_flipped = False\nif A < B:\n\tA, B = B, A\n\tcolor_flipped = True\n\n\ndef solve():\n\thb = min(B, 12)\n\th = (hb * 2 + 1) * 3\n\tw = 100\n\t# If not flipped, False -> White (A), True -> Black (B)\n\tgrid = [[True] * w for _ in range(h)]\n\tblack = 1\n\twhite = 0\n\tfor i in range(hb):\n\t\tif black == B:\n\t\t\tbreak\n\t\tblack += 1\n\t\twhite += 1\n\t\tfor c in range(w):\n\t\t\tfor j in range(3):\n\t\t\t\tgrid[6 * i + j + 3][c] = False\n\n\tdef paint_white(i):\n\t\tnonlocal white\n\t\tfor c in range(0, w, 2):\n\t\t\tif white == A:\n\t\t\t\treturn\n\t\t\tgrid[6 * i + 1][c] = False\n\t\t\twhite += 1\n\n\tdef paint_black(i):\n\t\tnonlocal black\n\t\tfor c in range(0, w, 2):\n\t\t\tif black == B:\n\t\t\t\treturn\n\t\t\tgrid[6 * i + 4][c] = True\n\t\t\tblack += 1\n\n\tfor i in range(hb):\n\t\tpaint_white(i)\n\t\tpaint_black(i)\n\tassert black == B\n\twhile white < A:\n\t\tgrid.append([True] * w)\n\t\tgrid.append([True] * w)\n\t\tfor c in range(0, w, 2):\n\t\t\tif white == A:\n\t\t\t\tbreak\n\t\t\twhite += 1\n\t\t\tgrid[-1][c] = False\n\n\treturn grid\n\n\ndef print_grid(grid):\n\th, w = len(grid), len(grid[0])\n\tprint(h, w)\n\tfor r in range(h):\n\t\tfor c in range(w):\n\t\t\tif grid[r][c] ^ color_flipped:\n\t\t\t\tprint(\"#\", end=\"\")\n\t\t\telse:\n\t\t\t\tprint(\".\", end=\"\")\n\t\tprint()\n\n\ndef __starting_point():\n\tprint_grid(solve())\n\n__starting_point()\n", "a, b = map(int, input().split())\nprint(100, 100)\n\nfor i in range(50):\n\ts = []\n\tfor j in range(100):\n\t\tif (i + j) % 3 == 0 and (b - 1) * i > 0:\n\t\t\ts.append('#')\n\t\t\tb -= 1\n\t\telse:\n\t\t\ts.append('.')\n\tprint(*s, sep='')\n\nfor i in range(50):\n\ts = []\n\tfor j in range(100):\n\t\tif (i + j) % 3 == 0 and (a - 1) * i > 0:\n\t\t\ts.append('.')\n\t\t\ta -= 1\n\t\telse:\n\t\t\ts.append('#')\n\tprint(*s, sep='')\n", "import sys\nsys.setrecursionlimit(10 ** 7)\ndef getnum(t=int): return t(sys.stdin.buffer.readline())\ndef numline(t=int): return map(t, sys.stdin.buffer.readline().split())\ndef numread(t=int): return map(t, sys.stdin.buffer.read().split())\ndef getstr(): return sys.stdin.readline().strip()\ndef strline(): return sys.stdin.readline().strip().split()\ndef strread(): return sys.stdin.read().strip().split()\n\n#from numba import njit, b1, i4, i8, f8, jit\n#import numpy as np\n\n\ndef main():\n\tA, B = numline()\n\tS = [list('.' * 50 + '#' * 50) for _ in range(50)]\n\twhites = 1\n\tblacks = 1\n\tfor i in range(1, 49, 2):\n\t\tif blacks == B:break\n\t\tfor j in range(1, 49, 2):\n\t\t\tif blacks == B: break\n\t\t\tS[i][j] = '#'\n\t\t\tblacks += 1\n\n\tfor i in range(1, 49, 2):\n\t\tif whites == A: break\n\t\tfor j in range(51, 99, 2):\n\t\t\tif whites == A: break\n\t\t\tS[i][j] = '.'\n\t\t\twhites += 1\n\n\tprint(50, 100)\n\tfor s in S:\n\t\tprint(''.join(s))\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "a, b = map(int, input().split())\nL = [[\"#\"]*100 for _ in range(50)] + [[\".\"]*100 for _ in range(50)]\nqa, ra = divmod(a-1, 50)\nfor i in range(qa):\n\tL[i*2] = [\"#\" if j%2 else \".\" for j in range(100)]\nL[qa*2] = [\"#\" if j%2 else \".\" for j in range(ra*2)] + [\"#\"]*(100-ra*2)\nqb, rb = divmod(b-1, 50)\nfor i in range(qb):\n\tL[51+i*2] = [\".\" if j%2 else \"#\" for j in range(100)]\nL[51+qb*2] = [\".\" if j%2 else \"#\" for j in range(rb*2)] + [\".\"]*(100-rb*2)\nprint(100, 100)\nfor l in L:\n\tprint(*l, sep=\"\")\n", "a,b = map(int,input().split())\ns = [['.']*99 if i<50 else ['#']*99 for i in range(100)]\nprint(100,99)\nfor i in range(b-1):\n\trow = ((i*2)//99)*2\n\tcol = (i*2)%99\n\ts[row][col] = '#'\nfor i in range(a-1):\n\trow = ((i*2)//99)*2+51\n\tcol = (i*2)%99\n\ts[row][col] = '.'\nfor i in s:\n\tfor j in i:\n\t\tprint(j,end='')\n\tprint()\n\n", "# -*- coding: utf-8 -*-\n\n#############\n# Libraries #\n#############\n\nimport sys\ninput = sys.stdin.readline\n\nimport math\n#from math import gcd\nimport bisect\nimport heapq\nfrom collections import defaultdict\nfrom collections import deque\nfrom collections import Counter\nfrom functools import lru_cache\n\n#############\n# Constants #\n#############\n\nMOD = 10**9+7\nINF = float('inf')\nAZ = \"abcdefghijklmnopqrstuvwxyz\"\n\n#############\n# Functions #\n#############\n\n######INPUT######\ndef I(): return int(input().strip())\ndef S(): return input().strip()\ndef IL(): return list(map(int,input().split()))\ndef SL(): return list(map(str,input().split()))\ndef ILs(n): return list(int(input()) for _ in range(n))\ndef SLs(n): return list(input().strip() for _ in range(n))\ndef ILL(n): return [list(map(int, input().split())) for _ in range(n)]\ndef SLL(n): return [list(map(str, input().split())) for _ in range(n)]\n\n######OUTPUT######\ndef P(arg): print(arg); return\ndef Y(): print(\"Yes\"); return\ndef N(): print(\"No\"); return\ndef E(): return()\ndef PE(arg): print(arg); return()\ndef YE(): print(\"Yes\"); return()\ndef NE(): print(\"No\"); return()\n\n#####Shorten#####\ndef DD(arg): return defaultdict(arg)\n\n#####Inverse#####\ndef inv(n): return pow(n, MOD-2, MOD)\n\n######Combination######\nkaijo_memo = []\ndef kaijo(n):\n\tif(len(kaijo_memo) > n): return kaijo_memo[n]\n\tif(len(kaijo_memo) == 0): kaijo_memo.append(1)\n\twhile(len(kaijo_memo) <= n): kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)\n\treturn kaijo_memo[n]\n\ngyaku_kaijo_memo = []\ndef gyaku_kaijo(n):\n\tif(len(gyaku_kaijo_memo) > n): return gyaku_kaijo_memo[n]\n\tif(len(gyaku_kaijo_memo) == 0): gyaku_kaijo_memo.append(1)\n\twhile(len(gyaku_kaijo_memo) <= n): gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)\n\treturn gyaku_kaijo_memo[n]\n\ndef nCr(n,r):\n\tif n == r: return 1\n\tif n < r or r < 0: return 0\n\tret = 1\n\tret = ret * kaijo(n) % MOD\n\tret = ret * gyaku_kaijo(r) % MOD\n\tret = ret * gyaku_kaijo(n-r) % MOD\n\treturn ret\n\n######Factorization######\ndef factorization(n):\n\tarr = []\n\ttemp = n\n\tfor i in range(2, int(-(-n**0.5//1))+1):\n\t\tif temp%i==0:\n\t\t\tcnt=0\n\t\t\twhile temp%i==0: \n\t\t\t\tcnt+=1 \n\t\t\t\ttemp //= i\n\t\t\tarr.append([i, cnt])\n\tif temp!=1: arr.append([temp, 1])\n\tif arr==[]: arr.append([n, 1])\n\treturn arr\n\n#####MakeDivisors######\ndef make_divisors(n):\n\tdivisors = []\n\tfor i in range(1, int(n**0.5)+1):\n\t\tif n % i == 0:\n\t\t\tdivisors.append(i)\n\t\t\tif i != n // i: \n\t\t\t\tdivisors.append(n//i)\n\treturn divisors\n\n#####MakePrimes######\ndef make_primes(N):\n\tmax = int(math.sqrt(N))\n\tseachList = [i for i in range(2,N+1)]\n\tprimeNum = []\n\twhile seachList[0] <= max:\n\t\tprimeNum.append(seachList[0])\n\t\ttmp = seachList[0]\n\t\tseachList = [i for i in seachList if i % tmp != 0]\n\tprimeNum.extend(seachList)\n\treturn primeNum\n\n#####GCD#####\ndef gcd(a, b):\n\t\twhile b: a, b = b, a % b\n\t\treturn a\n\n#####LCM#####\ndef lcm(a, b):\n\t\treturn a * b // gcd (a, b)\n\n#####BitCount#####\ndef count_bit(n):\n\tcount = 0\n\twhile n:\n\t\tn &= n-1\n\t\tcount += 1\n\treturn count\n\n#####ChangeBase#####\ndef base_10_to_n(X, n):\n\tif X//n: return base_10_to_n(X//n, n)+[X%n]\n\treturn [X%n]\n\ndef base_n_to_10(X, n):\n\treturn sum(int(str(X)[-i-1])*n**i for i in range(len(str(X))))\n\ndef base_10_to_n_without_0(X, n):\n\tX -= 1\n\tif X//n: return base_10_to_n_without_0(X//n, n)+[X%n]\n\treturn [X%n]\n\n#####IntLog#####\ndef int_log(n, a):\n\tcount = 0\n\twhile n>=a:\n\t\tn //= a\n\t\tcount += 1\n\treturn count\n\n#############\n# Main Code #\n#############\n\nA,B = IL()\nprint(100,100)\nA =[\"#\"]*(25*50-(A-1))+[\".\"]*(A-1) \nB =[\"#\"]*(B-1)+[\".\"]*(25*50-(B-1))\nfor j in range(25):\n\tfor i in range(50):\n\t\tprint(A.pop(),end=\"\")\n\t\tif i == 49:\n\t\t\tprint(\"#\")\n\t\telse:\n\t\t\tprint(\"#\",end=\"\")\n\tprint(\"#\"*100)\nfor j in range(25):\n\tprint(\".\"*100)\n\tfor i in range(50):\n\t\tprint(B.pop(),end=\"\")\n\t\tif i == 49:\n\t\t\tprint(\".\")\n\t\telse:\n\t\t\tprint(\".\",end=\"\")\n", "a, b = list(map(int, input().split()))\n\nprint('100 100')\n\nflip = a > b\n\nif flip:\n\ta, b = b, a\n\nf = [['#' for _ in range(100)] for __ in range(100)]\n\ni, j = (0, 0)\n\nfor _ in range(b-1):\n\tf[i][j+1] = '.'\n\tf[i+1][j+1] = '.'\n\tf[i+1][j] = '.'\n\n\tj += 2\n\n\tif j > 98:\n\t\tj = 0\n\t\ti += 2\n\ni, j = (99, 0)\n\nif b == 1:\n\ta += 1\n\nfor _ in range(a-1):\n\tf[i][j] = '.'\n\tj += 2\n\n\tif j > 98:\n\t\tj = 0\n\t\ti -= 2\n\nif flip:\n\tfor i in range(100):\n\t\tf[i] = list(['.' if x == '#' else '#' for x in f[i]])\n\nfor row in f:\n\tprint((''.join(row)))\n", "w,b=map(int, input().split())\nA,B,C,D=['##'],['..'],['#.'],['.#']\nw-=1\nb-=1\nprint(100,50)\nfor i in range(100):\n\tif i<50:\n\t\tif i%2==1:\n\t\t\tprint(*A*25,sep='')\n\t\telif w>=25 and i%2==0:\n\t\t\tprint(*C*25,sep='')\n\t\t\tw-=25\n\t\telse:\n\t\t\tE=C*w+A*(25-w)\n\t\t\tprint(*E,sep='')\n\t\t\tw=0\n\telse:\n\t\tif i%2==0:\n\t\t\tprint(*B*25,sep='')\n\t\telif b>=25 and i%2==1:\n\t\t\tprint(*D*25,sep='')\n\t\t\tb-=25\n\t\telse:\n\t\t\tF=D*b+B*(25-b)\n\t\t\tprint(*F,sep='')\n\t\t\tb=0\n", "A, B = list(map(int, input().split()))\n\nans = [['#'] * 100 for _ in range(50)] + [['.'] * 100 for _ in range(50)]\nA -= 1\nB -= 1\n\nfor h in range(0, 100, 2):\n\tif A == 0:\n\t\tbreak\n\tfor w in range(0, 100, 2):\n\t\tans[h][w] = '.'\n\t\tA -= 1\n\t\tif A == 0:\n\t\t\tbreak\n\nfor h in range(0, 100, 2)[::-1]:\n\tif B == 0:\n\t\tbreak\n\tfor w in range(0, 100, 2):\n\t\tans[h][w] = '#'\n\t\tB -= 1\n\t\tif B == 0:\n\t\t\tbreak\n\nprint((100, 100))\nfor a in ans:\n\tprint((''.join(a)))\n", "A,B=map(int,input().split())\n\nmat=[]\nfor i in range(100):\n\tarray=[\".\"]*20+[\"#\"]*20\n\tmat.append(array)\n\nfor i in range(B-1):\n\tj=2*(i//10)\n\tk=2*(i%10)\n\tmat[j][k]=\"#\"\nfor i in range(A-1):\n\tj=2*(i//10)\n\tk=2*(i%10)+21\n\tmat[j][k]=\".\"\n\t\nprint(100,40)\nfor i in range(100):\n\tprint(\"\".join(mat[i]))\n", "A,B=list(map(int, input().split()))\nh=w=100\nans=[['' for _ in range(w)] for __ in range(h)]\nfor i in range(h//2):\n\tfor j in range(w):\n\t\tif i&1 and j&1 and A-1>0:\n\t\t\tans[i][j]='.'\n\t\t\tA-=1\n\t\telse:\n\t\t\tans[i][j]='#'\nfor i in range(h-1,h//2-1,-1):\n\tfor j in range(w):\n\t\tif i&1 and j&1 and B-1>0:\n\t\t\tans[i][j]='#'\n\t\t\tB-=1\n\t\telse:\n\t\t\tans[i][j]='.'\n\nprint((h,w))\nfor r in ans:\n\tprint((''.join(r)))\n", "A, B = list(map(int, input().split()))\n\nN = 100\n\nA -= 1\nB -= 1\n\nS = []\nfor i in range(N // 2):\n\tS.append(list(\".\" * N))\nfor i in range(50):\n\tS.append(list(\"#\" * N))\n\nflag = 0\nfor i in range(1, N // 2, 2):\n\tfor j in range(1, N, 2):\n\t\tif B == 0:\n\t\t\tflag = 1\n\t\t\tbreak\n\t\telse:\n\t\t\tS[i][j] = \"#\"\n\t\t\tB -= 1\n\tif flag:\n\t\tbreak\n\nflag = 0\nfor i in range(N // 2 + 1, N, 2):\n\tfor j in range(1, N, 2):\n\t\tif A == 0:\n\t\t\tflag = 1\n\t\t\tbreak\n\t\telse:\n\t\t\tS[i][j] = \".\"\n\t\t\tA -= 1\n\tif flag:\n\t\tbreak\n\nprint((N, N))\nfor i in range(N):\n\tprint((\"\".join(S[i])))\n", "# -*- coding: utf-8 -*-\n\n#############\n# Libraries #\n#############\n\nimport sys\ninput = sys.stdin.readline\n\nimport math\n#from math import gcd\nimport bisect\nimport heapq\nfrom collections import defaultdict\nfrom collections import deque\nfrom collections import Counter\nfrom functools import lru_cache\n\n#############\n# Constants #\n#############\n\nMOD = 10**9+7\nINF = float('inf')\nAZ = \"abcdefghijklmnopqrstuvwxyz\"\n\n#############\n# Functions #\n#############\n\n######INPUT######\ndef I(): return int(input().strip())\ndef S(): return input().strip()\ndef IL(): return list(map(int,input().split()))\ndef SL(): return list(map(str,input().split()))\ndef ILs(n): return list(int(input()) for _ in range(n))\ndef SLs(n): return list(input().strip() for _ in range(n))\ndef ILL(n): return [list(map(int, input().split())) for _ in range(n)]\ndef SLL(n): return [list(map(str, input().split())) for _ in range(n)]\n\n######OUTPUT######\ndef P(arg): print(arg); return\ndef Y(): print(\"Yes\"); return\ndef N(): print(\"No\"); return\ndef E(): return()\ndef PE(arg): print(arg); return()\ndef YE(): print(\"Yes\"); return()\ndef NE(): print(\"No\"); return()\n\n#####Shorten#####\ndef DD(arg): return defaultdict(arg)\n\n#####Inverse#####\ndef inv(n): return pow(n, MOD-2, MOD)\n\n######Combination######\nkaijo_memo = []\ndef kaijo(n):\n\tif(len(kaijo_memo) > n): return kaijo_memo[n]\n\tif(len(kaijo_memo) == 0): kaijo_memo.append(1)\n\twhile(len(kaijo_memo) <= n): kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)\n\treturn kaijo_memo[n]\n\ngyaku_kaijo_memo = []\ndef gyaku_kaijo(n):\n\tif(len(gyaku_kaijo_memo) > n): return gyaku_kaijo_memo[n]\n\tif(len(gyaku_kaijo_memo) == 0): gyaku_kaijo_memo.append(1)\n\twhile(len(gyaku_kaijo_memo) <= n): gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)\n\treturn gyaku_kaijo_memo[n]\n\ndef nCr(n,r):\n\tif n == r: return 1\n\tif n < r or r < 0: return 0\n\tret = 1\n\tret = ret * kaijo(n) % MOD\n\tret = ret * gyaku_kaijo(r) % MOD\n\tret = ret * gyaku_kaijo(n-r) % MOD\n\treturn ret\n\n######Factorization######\ndef factorization(n):\n\tarr = []\n\ttemp = n\n\tfor i in range(2, int(-(-n**0.5//1))+1):\n\t\tif temp%i==0:\n\t\t\tcnt=0\n\t\t\twhile temp%i==0: \n\t\t\t\tcnt+=1 \n\t\t\t\ttemp //= i\n\t\t\tarr.append([i, cnt])\n\tif temp!=1: arr.append([temp, 1])\n\tif arr==[]: arr.append([n, 1])\n\treturn arr\n\n#####MakeDivisors######\ndef make_divisors(n):\n\tdivisors = []\n\tfor i in range(1, int(n**0.5)+1):\n\t\tif n % i == 0:\n\t\t\tdivisors.append(i)\n\t\t\tif i != n // i: \n\t\t\t\tdivisors.append(n//i)\n\treturn divisors\n\n#####MakePrimes######\ndef make_primes(N):\n\tmax = int(math.sqrt(N))\n\tseachList = [i for i in range(2,N+1)]\n\tprimeNum = []\n\twhile seachList[0] <= max:\n\t\tprimeNum.append(seachList[0])\n\t\ttmp = seachList[0]\n\t\tseachList = [i for i in seachList if i % tmp != 0]\n\tprimeNum.extend(seachList)\n\treturn primeNum\n\n#####GCD#####\ndef gcd(a, b):\n\t\twhile b: a, b = b, a % b\n\t\treturn a\n\n#####LCM#####\ndef lcm(a, b):\n\t\treturn a * b // gcd (a, b)\n\n#####BitCount#####\ndef count_bit(n):\n\tcount = 0\n\twhile n:\n\t\tn &= n-1\n\t\tcount += 1\n\treturn count\n\n#####ChangeBase#####\ndef base_10_to_n(X, n):\n\tif X//n: return base_10_to_n(X//n, n)+[X%n]\n\treturn [X%n]\n\ndef base_n_to_10(X, n):\n\treturn sum(int(str(X)[-i-1])*n**i for i in range(len(str(X))))\n\ndef base_10_to_n_without_0(X, n):\n\tX -= 1\n\tif X//n: return base_10_to_n_without_0(X//n, n)+[X%n]\n\treturn [X%n]\n\n#####IntLog#####\ndef int_log(n, a):\n\tcount = 0\n\twhile n>=a:\n\t\tn //= a\n\t\tcount += 1\n\treturn count\n\n#############\n# Main Code #\n#############\n\nA,B = IL()\nprint(100,100)\n\nfor i in range(25):\n\tP = 50\n\twhile P:\n\t\tif A>1:\n\t\t\tif P != 1:\n\t\t\t\tprint(\".#\",end=\"\")\n\t\t\t\tA -= 1\n\t\t\telse:\n\t\t\t\tprint(\".#\")\n\t\t\t\tA -= 1\n\t\telse:\n\t\t\tif P != 1:\n\t\t\t\tprint(\"##\",end=\"\")\n\t\t\telse:\n\t\t\t\tprint(\"##\")\n\t\tP -= 1\n\tprint(\"#\"*100)\n\nfor i in range(25):\n\tP = 50\n\tprint(\".\"*100)\n\twhile P:\n\t\tif B>1:\n\t\t\tif P != 1:\n\t\t\t\tprint(\".#\",end=\"\")\n\t\t\t\tB -= 1\n\t\t\telse:\n\t\t\t\tprint(\".#\")\n\t\t\t\tB -= 1\n\t\telse:\n\t\t\tif P != 1:\n\t\t\t\tprint(\"..\",end=\"\")\n\t\t\telse:\n\t\t\t\tprint(\"..\")\n\t\tP -= 1\n", "import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nin_n = lambda: int(readline())\nin_nn = lambda: list(map(int, readline().split()))\nin_s = lambda: readline().rstrip().decode('utf-8')\nin_nl = lambda: list(map(int, readline().split()))\nin_nl2 = lambda H: [in_nl() for _ in range(H)]\nin_map = lambda: [s == ord('.') for s in readline() if s != ord('\\n')]\nin_map2 = lambda H: [in_map() for _ in range(H)]\nin_all = lambda: list(map(int, read().split()))\n\n\ndef main():\n\n\tA, B = in_nn()\n\n\tgrid = [[''] * 100 for _ in range(100)]\n\tfor y in range(100):\n\t\tfor x in range(100):\n\t\t\tif 0 <= y < 50:\n\t\t\t\tgrid[y][x] = '#'\n\t\t\telse:\n\t\t\t\tgrid[y][x] = '.'\n\n\tfor y in range(49):\n\t\tfor x in range(100):\n\t\t\tif y % 2 == 0 and x % 2 == 0:\n\t\t\t\tif A > 1:\n\t\t\t\t\tgrid[y][x] = '.'\n\t\t\t\t\tA -= 1\n\n\tfor y in range(51, 100):\n\t\tfor x in range(100):\n\t\t\tif y % 2 == 1 and x % 2 == 0:\n\t\t\t\tif B > 1:\n\t\t\t\t\tgrid[y][x] = '#'\n\t\t\t\t\tB -= 1\n\n\tprint((100, 100))\n\tfor y in range(100):\n\t\tprint((''.join(grid[y])))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "a,b = map(int,input().split())\nprint(\"40 100\")\n\nkuro = [[\"#\" for i in range(100)] for j in range(20)]\nsiro = [[\".\" for i in range(100)] for j in range(20)]\n\ncou = 0\nflag = False\nfor i in range(0,20,2):\n\tif flag:\n\t\tbreak\n\tfor j in range(0,100,2):\n\t\tif cou >= a-1:\n\t\t\tflag = True\n\t\t\tbreak\n\t\telif cou < a-1:\n\t\t\tcou += 1\n\t\t\tkuro[i][j] = \".\"\n\ncou = 0\nflag = False\nfor i in range(1,20,2):\n\tif flag:\n\t\tbreak\n\tfor j in range(0,100,2):\n\t\tif cou >= b-1:\n\t\t\tflag = True\n\t\t\tbreak\n\t\telif cou < b-1:\n\t\t\tcou += 1\n\t\t\tsiro[i][j] = \"#\"\n\nfor i in range(20):\n\tfor j in range(100):\n\t\tprint(kuro[i][j],end=\"\")\n\tprint()\nfor i in range(20):\n\tfor j in range(100):\n\t\tprint(siro[i][j],end=\"\")\n\tprint()\n", "B,A = map(int,input().split())\n\nH = W = 100\nans = [['.#'[i//50]]*W for i in range(H)]\n\nA -= 1\nB -= 1\nfor i in range(10):\n\tk = min(A,50)\n\tA -= k\n\tfor j in range(k):\n\t\tans[i*2][j*2] = '#'\n\tif A==0: break\nfor i in range(10):\n\tk = min(B,50)\n\tB -= k\n\tfor j in range(k):\n\t\tans[51+i*2][j*2] = '.'\n\tif B==0: break\n\nprint(H,W)\nfor row in ans:\n\tprint(''.join(row))\n", "\nG=[[\"#\"]*100 for i in range(100)]\nfor i in range(50,100):\n\tfor j in range(100):\n\t\tG[i][j]=\".\"\n\nA,B=map(int,input().split())   \nA-=1\nB-=1\n\ni,j=0,0\n\nwhile(A>0):\n\tG[i][j]=\".\"\n\tA-=1\n\tj+=2\n\tif j>99:\n\t\tj=0\n\t\ti+=2\ni,j=99,0\nwhile(B>0):\n\tG[i][j]=\"#\"\n\tB-=1\n\tj+=2\n\tif j>99:\n\t\tj=0\n\t\ti-=2\n\t\t\n\t\t\nprint(100,100)\nfor i in range(100):\n\tprint(\"\".join(G[i]))\n", "import sys\ninput = sys.stdin.buffer.readline\n\n#sys.setrecursionlimit(10**9)\n#from functools import lru_cache\n\ndef RD(): return sys.stdin.read()\ndef II(): return int(input())\ndef MI(): return map(int,input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int,input().split()))\ndef LF(): return list(map(float,input().split()))\ndef TI(): return tuple(map(int,input().split()))\n# rstrip().decode()\n\ndef main():\n\ta,b=MI()\n\n\tG=[]\n\n\tfor _ in range(25):\n\t\tG+=[list(\"...#\")*25,list(\".#.#\")*25,list(\"...#\")*25,list(\"####\")*25]\n\n\t#print(G)\n\n\n\n\tfor i in range(25):\n\t\tfor j in range(24):\n\t\t\tif a<25**2:\n\t\t\t\tG[4*i][4*j+3]=\".\"\n\t\t\t\ta+=1\n\t\t\telse:\n\t\t\t\tbreak\n\n\n\tfor i in range(25):\n\t\tif a<25**2:\n\t\t\tG[4*i+3][0]=\".\"\n\t\t\ta+=1\n\t\telse:\n\t\t\tbreak\n\n\tfor i in range(25):\n\t\tfor j in range(25):\n\t\t\tif b<25**2+1:\n\t\t\t\tG[4*i+1][4*j+1]=\".\"\n\t\t\t\tb+=1\n\n\tprint(100,100)\n\n\n\n\n\n\n\n\tfor i in G:\n\t\tprint(*i,sep=\"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "def examA():\n\tC = [SI()for _ in range(3)]\n\tans = C[0][0]+C[1][1]+C[2][2]\n\tprint(ans)\n\treturn\n\ndef examB():\n\tN, M = LI()\n\tP = [0]*N\n\tS = [LSI()for _ in range(M)]\n\tpena = 0\n\tac = set()\n\tfor p,s in S:\n\t\tp = int(p)-1\n\t\tif s==\"WA\":\n\t\t\tP[p] += 1\n\t\telse:\n\t\t\tif p in ac:\n\t\t\t\tcontinue\n\t\t\tac.add(p)\n\t\t\tpena += P[p]\n\n\tprint(len(ac),pena)\n\treturn\n\ndef examC():\n\tW, H, N = LI()\n\tlx, rx, ly, ry = 0, W, 0, H\n\tA = [LI()for _ in range(N)]\n\tfor x,y,a in A:\n\t\tif a==1:\n\t\t\tlx = max(lx,x)\n\t\telif a==2:\n\t\t\trx = min(rx,x)\n\t\telif a==3:\n\t\t\tly = max(ly,y)\n\t\telif a==4:\n\t\t\try = min(ry,y)\n\tans = max(0,rx-lx)*max(0,ry-ly)\n\tprint(ans)\n\treturn\n\ndef examD():\n\tN, H = LI()\n\tB = [0]*N\n\tmaxa = 0\n\tans = 0\n\tfor i in range(N):\n\t\ta, B[i] = LI()\n\t\tif a>maxa:\n\t\t\tmaxa = a\n\tB.sort(reverse=True)\n\tfor b in B:\n\t\tif b<maxa:\n\t\t\tbreak\n\t\tH -= b\n\t\tans += 1\n\t\tif H<=0:\n\t\t\tprint(ans)\n\t\t\treturn\n\tans += -(-H//maxa)\n\tprint(ans)\n\treturn\n\ndef examE():\n\tA, B = LI()\n\tans = [[\"#\"]*100 for _ in range(50)] + [[\".\"]*100 for _ in range(50)]\n\ti = 0; j = 0\n\tfor _ in range(A-1):\n\t\tans[i][j] = \".\"\n\t\tj += 2\n\t\tif j>=100:\n\t\t\tj = 0; i += 2\n\ti = 0; j = 0\n\tfor _ in range(B-1):\n\t\tans[99-i][j] = \"#\"\n\t\tj += 2\n\t\tif j>=100:\n\t\t\tj = 0; i += 2\n\tprint(100,100)\n\tfor v in ans:\n\t\tprint(\"\".join(map(str,v)))\n\treturn\n\ndef examF():\n\tans = 0\n\tprint(ans)\n\treturn\n\nimport sys,bisect,itertools,heapq,math,random\nfrom copy import deepcopy\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(readline())\ndef LI(): return list(map(int,readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nnonlocal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\ndef __starting_point():\n\texamE()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"\n__starting_point()\n", "A,B = list(map(int,input().split()))\nwhite = [['.']*100 for _ in range(50)]\nblack = [['#']*100 for _ in range(50)]\n\nflag = True\nif B != 1:\n\tfor h in range(0,50,2):\n\t\tif flag:\n\t\t\tfor w in range(0,100,2):\n\t\t\t\twhite[h][w] = '#'\n\t\t\t\tB-=1\n\t\t\t\tif B == 1:\n\t\t\t\t\tflag = False\n\t\t\t\tif flag == False:\n\t\t\t\t\tbreak\n\t\tif flag == False:\n\t\t\tbreak\n\nflag = True\nif A != 1:\n\tfor h in range(1,50,2):\n\t\tif flag:\n\t\t\tfor w in range(0,100,2):\n\t\t\t\tblack[h][w] = '.'\n\t\t\t\tA-=1\n\t\t\t\tif A == 1:\n\t\t\t\t\tflag = False\n\t\t\t\tif flag == False:\n\t\t\t\t\tbreak\n\t\tif flag == False:\n\t\t\tbreak\nprint((100,100))\nfor w in white:\n\tprint((\"\".join(w)))\nfor b in black:\n\tprint((\"\".join(b)))\n", "import sys\n\nA, B = map(int, sys.stdin.readline().split())\n\n\"\"\"\n..........\n..........\n..........\nに、連結にならないように黒を置いていく\n白の場合も白黒を逆にして同じことをやれば良い\n\"\"\"\nA -= 1\nB -= 1\nprint(100, 100)\nfor i in range(100):\n\tfor j in range(100):\n\t\t# 黒一面に白を入れていく\n\t\tif i < 50:\n\t\t\tif A > 0 and i % 2 == 0 and j % 2 == 0:\n\t\t\t\tprint(\".\", end=\"\")\n\t\t\t\tA -= 1\n\t\t\telse:\n\t\t\t\tprint(\"#\", end=\"\")\n\t\t# 白一面に黒を入れていく\n\t\telif 50 <= i:\n\t\t\tif B > 0 and i % 2 == 1 and j % 2 == 0:\n\t\t\t\tprint(\"#\", end=\"\")\n\t\t\t\tB -= 1\n\t\t\telse:\n\t\t\t\tprint(\".\", end=\"\")\n\t\tif j == 99:\n\t\t\tprint(\"\")\n", "ma = lambda :map(int,input().split())\nlma = lambda :list(map(int,input().split()))\ntma = lambda :tuple(map(int,input().split()))\nni = lambda:int(input())\nyn = lambda fl:print(\"Yes\") if fl else print(\"No\")\nimport collections\nimport math\nimport itertools\nimport heapq as hq\nceil = math.ceil\na,b = ma()\nwh= \".\"\nbl = \"#\"\nif a>b:\n\ta,b = b,a\n\twh,bl=bl,wh\narea = [[wh]*100 for i in range(100)]\ndef cycle(y,x,f=True):\n\tfor i in range(y,y+3):\n\t\tfor j in range(x,x+3):\n\t\t\tarea[i][j]=bl\n\tif f:\n\t\tarea[y+1][x+1] = wh\ndef solve():\n\tcnt=0\n\tiy = 0\n\tix = 0\n\twhile cnt<b:\n\t\tif cnt+1<a:\n\t\t\tcycle(iy,ix)\n\t\telse:\n\t\t\tcycle(iy,ix,f=False)\n\t\tix+=4\n\t\tif ix>=95:\n\t\t\tix = 0\n\t\t\tiy+=4\n\t\tcnt+=1\n\nsolve()\nprint(100,100)\nfor ar in area:\n\tprint(\"\".join(ar))\n", "# input()\n# int(input())\n# map(int, input().split())\n# list(map(int, input().split()))\n# list(map(int, list(input()))) # スペースがない数字リストを読み込み\nimport math\nimport fractions\nimport sys\nimport bisect\nimport heapq  # 優先度付きキュー(最小値取り出し)\nimport collections\nfrom collections import Counter\nfrom collections import deque\nimport pprint\nimport itertools\nfrom functools import lru_cache\n\nsr = lambda: input()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n\"\"\"nを素因数分解\"\"\"\n\"\"\"2以上の整数n => [[素因数, 指数], ...]の2次元リスト\"\"\"\ndef factorization(n):\n\tarr = []\n\ttemp = n\n\tif n == 1:\n\t\treturn arr\n\n\tfor i in range(2, int(-(-n ** 0.5 // 1)) + 1):\n\t\tif temp % i == 0:\n\t\t\tcnt = 0\n\t\t\twhile temp % i == 0:\n\t\t\t\tcnt += 1\n\t\t\t\ttemp //= i\n\t\t\tarr.append([i, cnt])\n\n\tif temp != 1:\n\t\tarr.append([temp, 1])\n\n\tif arr == []:\n\t\tarr.append([n, 1])\n\n\treturn arr\n\n\n# a^n\ndef power(a, n, mod):\n\tx = 1\n\twhile n:\n\t\tif n & 1:\n\t\t\tx *= a % mod\n\t\tn >>= 1\n\t\ta *= a % mod\n\treturn x % mod\n\n\n# n*(n-1)*...*(l+1)*l\ndef kaijo(n, l, mod):\n\tif n == 0:\n\t\treturn 1\n\ta = n\n\ttmp = n - 1\n\twhile (tmp >= l):\n\t\ta = a * tmp % mod\n\t\ttmp -= 1\n\treturn a\n\n# Union Find\nclass UnionFind():\n\tdef __init__(self, n):\n\t\tself.n = n\n\t\tself.parents = [-1] * n\n\n\tdef find(self, x):\n\t\tif self.parents[x] < 0:\n\t\t\treturn x\n\t\telse:\n\t\t\tself.parents[x] = self.find(self.parents[x])\n\t\t\treturn self.parents[x]\n\n\tdef union(self, x, y):\n\t\tx = self.find(x)\n\t\ty = self.find(y)\n\n\t\tif x == y:\n\t\t\treturn\n\n\t\tif self.parents[x] > self.parents[y]:\n\t\t\tx, y = y, x\n\n\t\tself.parents[x] += self.parents[y]\n\t\tself.parents[y] = x\n\n\tdef size(self, x):\n\t\treturn -self.parents[self.find(x)]\n\n\tdef same(self, x, y):\n\t\treturn self.find(x) == self.find(y)\n\n\tdef members(self, x):\n\t\troot = self.find(x)\n\t\treturn [i for i in range(self.n) if self.find(i) == root]\n\n\tdef roots(self):\n\t\treturn [i for i, x in enumerate(self.parents) if x < 0]\n\n\tdef group_count(self):\n\t\treturn len(self.roots())\n\n\tdef all_group_members(self):\n\t\treturn {r: self.members(r) for r in self.roots()}\n\n\tdef __str__(self):\n\t\treturn '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n# 約数生成\ndef make_divisors(n):\n\tdivisors = []\n\tfor i in range(1, int(n**0.5)+1):\n\t\tif n % i == 0:\n\t\t\tdivisors.append(i)\n\t\t\tif i != n // i:\n\t\t\t\tdivisors.append(n//i)\n\n\tdivisors.sort()\n\treturn divisors\n\n# 区間更新のみ\nclass kukankousin:\n\tdef __init__(self, n):\n\t\tself.n = n\n\t\tself.N0 = 2**(self.n-1).bit_length()\n\t\tself.data = [None]*(2*self.N0)\n\t\tself.INF = (-1, 2**31-1)\n\n\t# 区間[l, r+1)の値をxに書き換える\n\t# xは(t, value)という値にする (新しい値ほどtは大きくなる)\n\tdef update(self, l, r, x):\n\t\tL=l+self.N0;\n\t\tR=r+self.N0\n\t\twhile L<R:\n\t\t\tif R & 1:\n\t\t\t\tR-=1\n\t\t\t\tself.data[R-1]=x\n\n\t\t\tif L & 1:\n\t\t\t\tself.data[L-1]=x\n\t\t\t\tL+=1\n\t\t\tL>>=1;\n\t\t\tR>>=1\n\n\n\t# a_iの現在の値を取得\n\tdef _query(self, k):\n\t\tk+=self.N0-1\n\t\ts=self.INF\n\t\twhile k>=0:\n\t\t\tif self.data[k]:\n\t\t\t\ts=max(s, self.data[k])\n\t\t\tk=(k-1)//2\n\t\treturn s\n\n\n\t# これを呼び出す\n\tdef query(self, k):\n\t\treturn self._query(k)[1]\n\n\ninf = 10 ** 18\nmod = 10 ** 9 + 7\n# mod = 998244353\n\n# Press the green button in the gutter to run the script.\ndef __starting_point():\n\ta,b = lr()\n\th,w = 96,99\n\tm = [['#' for j in range(w)] for i in range(h)]\n\tfor i in range(48,h):\n\t\tfor j in range(w):\n\t\t\tm[i][j] = '.'\n\n\tfor k in range(a-1):\n\t\ty = k//33\n\t\tx = k%33\n\t\ty = y*3+1\n\t\tx = x*3+1\n\t\tm[y][x] = '.'\n\n\tfor k in range(b-1):\n\t\ty = 16+k//33\n\t\tx = k%33\n\t\ty = y*3+1\n\t\tx = x*3+1\n\t\tm[y][x] = '#'\n\n\tprint(h,w)\n\tfor l in m:\n\t\tprint(*l, sep='')\n__starting_point()\n", "A,B = list(map(int,input().split()))\nh,w = 100,100\n\nGrid = [list('#'*w) for _ in range(50)] + [list('.'*h) for _ in range(50)]\n\nA -= 1\nB -= 1\nfor i in range(0,50,2):\n\tfor j in range(0,100,2):\n\t\tif A > 0:\n\t\t\tGrid[i][j] = '.'\n\t\t\tA -= 1\n\t\telse:\n\t\t\tbreak\n\telse:\n\t\tcontinue\n\tbreak\n\nfor i in range(99,50,-2):\n\tfor j in range(0,100,2):\n\t\tif B > 0:\n\t\t\tGrid[i][j] = '#'\n\t\t\tB -= 1\n\t\telse:\n\t\t\tbreak\n\telse:\n\t\tcontinue\n\tbreak\n\nprint((100,100))\nfor i in range(100):\n\tprint((''.join(Grid[i])))\n", "# coding: utf-8\n# Your code here!\nimport sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\na,b = list(map(int,readline().split()))\nh = w = 100\nres = [[0]*w for _ in range(50)] + [[1]*w for _ in range(50)]\na -= 1\nb -= 1\n\nq = a//50\nr = a%50\nfor i in range(q):\n\tres[2*i][::2] = [1]*50\nres[2*q][:2*r:2] = [1]*r\n\nq = b//50\nr = b%50\nfor i in range(q):\n\tres[2*i+51][::2] = [0]*50\nres[2*q+51][:2*r:2] = [0]*r\n\n# 0: 黒: #\nprint((h,w))\nfor ri in res:\n\tprint((\"\".join(\"#\" if rij==0 else \".\" for rij in ri)))\n\n\n\n", "A, B = list(map(int, input().split()))\nz = ([\"#\"]*100 + [\"\\n\"])*50\n\nfor a in range(A-1):\n\tj = a%50\n\tz[(j*2)+((a//50)%2)+202*(a//50)] = \".\"\nz2 = ([\".\"]*100 + [\"\\n\"])*50\n\nfor a in range(B-1):\n\tj = a%50\n\tz2[(j*2)+((a//50)%2)+101+202*(a//50)] = \"#\"\nprint((100, 100))\nprint((\"\".join(z)+\"\".join(z2)))\n", "from pprint import pprint\n\n\ndef create(A,B):\n\tis_swapped = False\n\tif(A > B): \n\t\tlarger = A\n\t\tA = B\n\t\tB = larger\n\t\tis_swapped = True\n\t# A is smaller\n\tH,W = 99,99\n\tdp = [['.' for i in range(W)] for j in range(H)]\n\tNdot = 1; Nsharp = 0\n\tfor i in range(1,H-1,2):\n\t\tfor j in range(1,W-1,2):\n\t\t\tdp[i][j] = '#'\n\t\t\tNsharp += 1  \n\t#pprint(dp)\n\t#print(Ndot,Nsharp)\n\n\tNfill = 0\n\tfor i in range(1,H-2,4):\n\t\tfor j in range(1,W-2,4):\n\t\t\tif(Nfill == A):\n\t\t\t\tbreak\n\t\t\tdp[i+1][j] = '#'\n\t\t\tdp[i][j+1] = '#'\n\t\t\tdp[i+2][j+1] = '#'\n\t\t\tdp[i+1][j+2] = '#'\n\t\t\tNdot += 1\n\t\t\tNsharp -= 3\n\t\t\tNfill += 1\n\t#pprint(dp)\n\n\t#Delete Isolated #\n\tfor i in range(H):\n\t\tfor j in range(W):\n\t\t\tif(Nsharp == B):\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tif(i == 0 or i == H-1 or j == 0 or j == W-1):\n\t\t\t\t\tcontinue\n\t\t\t\telse:\n\t\t\t\t\tif(dp[i][j] == '#' and dp[i-1][j] == '.' and dp[i+1][j] == '.' and dp[i][j-1] == '.' and dp[i][j+1] == '.'):\n\t\t\t\t\t\tdp[i][j] = '.'\n\t\t\t\t\t\tNsharp -= 1\n\t#pprint(dp)\n\t#print(Ndot,Nsharp)\n\n\tif(Ndot > A):\n\t\tdp[2][1] = '.'\n\t\tNdot -= 1\n\n\t#pprint(dp)\n\t#print(Ndot,Nsharp)\n\n\n\tif(is_swapped):\n\t\tfor i in range(H):\n\t\t\tfor j in range(W):\n\t\t\t\tif(dp[i][j] == '.'):\n\t\t\t\t\tdp[i][j] = '#'\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = '.'\n\n\tAns = ''\n\tfor row in dp:\n\t\ttmp = ''.join(row)\n\t\ttmp += '\\n'\n\t\tAns += tmp\n\tprint(*[H,W])\n\tprint(Ans)\n\na,b = map(int,input().split())\ncreate(a,b)\n", "a, b = map(int, input().split())\nd = [[\"#\" if i < 50 else \".\" for _ in range(100)] for i in range(100)]\nfor i in range(a - 1):\n\td[(i // 50) * 4][(i % 50) * 2] = \".\"\nfor i in range(b - 1):\n\td[99 - (i // 50) * 2][(i % 50) * 2] = \"#\"\nprint(100, 100)\nfor i in range(100):\n\tprint(*d[i], sep=\"\")\n", "def printrow(num, s, t):\n\tfor i in range(50):\n\t\tres = []\n\t\tfor j in range(100):\n\t\t\tif (i + j) % 3 == 0 and (num - 1) * i > 0:\n\t\t\t\tres.append(s)\n\t\t\t\tnum -= 1\n\t\t\telse:\n\t\t\t\tres.append(t)\n\t\tprint(*res, sep='')\n\na, b = map(int, input().split())\n\nprint(100, 100)\nprintrow(b, '#', '.')\nprintrow(a, '.', '#')\n", "# input = sys.stdin.readline\nfrom bisect import *\nfrom collections import *\nfrom heapq import *\n# import functools\n# import itertools\n# import math\n\nA,B=list(map(int,input().split()))\nA-=1\nB-=1\nlst=[[\"#\" if m<50 else \".\" for i in range(100)] for m in range(100)]\nfor h in range(0,100,2):\n\tfor w in range(0,100,2):\n\t\tif A==0:\n\t\t\tbreak\n\t\tlst[h][w]=\".\"\n\t\tA-=1\n\n\tif A==0:\n\t\tbreak\nfor h in range(99,-1,-2):\n\tfor w in range(0,100,2):\n\t\tif B==0:\n\t\t\tbreak\n\t\tlst[h][w]=\"#\"\n\t\tB-=1\n\n\tif B==0:\n\t\tbreak\nprint((100,100))\nfor i in range(100):\n\tprint((\"\".join(lst[i])))\n", "#!python3\n\n# input\nA, B = list(map(int, input().split()))\n\n\ndef paint1(ans):\n\ta = 1\n\tfor i in range(0, 49, 2):\n\t\tfor j in range(0, 100, 2):\n\t\t\tif a == A:\n\t\t\t\treturn\n\t\t\tans[i][j] = \".\"\n\t\t\ta += 1\n\n\ndef paint2(ans):\n\tb = 1\n\tfor i in range(51, 100, 2):\n\t\tfor j in range(0, 100, 2):\n\t\t\tif b == B:\n\t\t\t\treturn\n\t\t\tans[i][j] = \"#\"\n\t\t\tb += 1\n\n\ndef main():\n\tans = [[\"#\"] * 100 for _ in range(50)] + [[\".\"] * 100 for _ in range(50)]\n\tpaint1(ans)\n\tpaint2(ans)\n\n\tprint((100, 100))\n\tfor r in ans:\n\t\tprint((\"\".join(r)))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "a, b = map(int, input().split())\nprint(41, 100)\nfor _ in range(10):\n\tfor _ in range(50):\n\t\tprint('.', end='')\n\t\tif b>1:\n\t\t\tprint('#', end='')\n\t\t\tb -= 1\n\t\telse:\n\t\t\tprint('.', end='')\n\tprint()\n\tprint('.'*100)\nprint('#'*100)\nfor _ in range(10):\n\tfor _ in range(50):\n\t\tprint('#', end='')\n\t\tif a>1:\n\t\t\tprint('.', end='')\n\t\t\ta -= 1\n\t\telse:\n\t\t\tprint('#', end='')\n\tprint()\n\tprint('#'*100)\n", "A,B = map(int,input().split())\nh = 96\nw = 99\nS = [[\".\" for _ in range(w)] for _ in range(h)]\nfor i in range(48,h):\n\tfor j in range(w):\n\t\tS[i][j] = \"#\"\ncnt = 0\nwhile cnt<B-1:\n\tfor i in range(16):\n\t\tfor j in range(33):\n\t\t\tS[3*i+1][3*j+1]=\"#\"\n\t\t\tcnt += 1\n\t\t\tif cnt==B-1:break\n\t\tif cnt==B-1:break\n\tif cnt==B-1:break\ncnt = 0\nwhile cnt<A-1:\n\tfor i in range(16):\n\t\tfor j in range(33):\n\t\t\tS[48+3*i+1][3*j+1]=\".\"\n\t\t\tcnt += 1\n\t\t\tif cnt==A-1:break\n\t\tif cnt==A-1:break\n\tif cnt==A-1:break\nprint(h,w)\nfor i in range(h):\n\tprint(\"\".join(S[i]))\n", "A,B = map(int,input().split())\nT = [[\".\" for _ in range(100)] for _ in range(100)]\nfor i in range(50,100):\n\tfor j in range(100):\n\t\tT[i][j]=\"#\"\ncnt = 1\nfor i in range(1,48,2):\n\tfor j in range(1,100,2):\n\t\tif cnt<B:\n\t\t\tT[i][j] = \"#\"\n\t\t\tcnt += 1\ncnt = 1\nfor i in range(51,100,2):\n\tfor j in range(1,100,2):\n\t\tif cnt<A:\n\t\t\tT[i][j] = \".\"\n\t\t\tcnt += 1\nprint(100,100)\nfor i in range(100):\n\tprint(\"\".join(T[i]))\n", "ab = list(map(int, input().split()))\n\ng = [['#']*100 for _ in range(50)] + [['.']*100 for _ in range(50)]\nfor k in range(2):\n\tcnt = 0\n\tflag = False\n\tc = '.' if k == 0 else '#'\n\tfor i in range(51*k, 50*(k+1), 2):\n\t\tfor j in range(0, 100, 2):\n\t\t\tif cnt == ab[k]-1:\n\t\t\t\tflag = True\n\t\t\t\tbreak\n\t\t\tg[i][j] = c\n\t\t\tcnt += 1\n\t\tif flag:\n\t\t\tbreak\nprint((100, 100))\nfor i in g:\n\tprint((''.join(i)))\n", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n\ta, b = list(map(int, input().split()))\n\tres = [[\"\"] * 100 for _ in range(100)]\n\tfor i in range(100):\n\t\tfor j in range(100):\n\t\t\tres[i][j] = \".\" if i < 50 else \"#\"\n\n\tb -= 1\n\tfor i in range(0, 50, 2):\n\t\tfor j in range(0, 100, 2):\n\t\t\tif b == 0:\n\t\t\t\tbreak\n\t\t\tres[i][j] = \"#\"\n\t\t\tb -= 1\n\t\telse:\n\t\t\tcontinue\n\t\tbreak\n\n\ta -= 1\n\tfor i in reversed(list(range(50, 100, 2))):\n\t\tfor j in range(0, 100, 2):\n\t\t\tif a == 0:\n\t\t\t\tbreak\n\t\t\tres[i][j] = \".\"\n\t\t\ta -= 1\n\t\telse:\n\t\t\tcontinue\n\t\tbreak\n\n\tprint((100, 100))\n\tfor i in res:\n\t\tprint((\"\".join(i)))\n\n\ndef __starting_point():\n\tresolve()\n\n__starting_point()\n", "ansl1 = list(\"#\" * (100 * 25))\nansl2 = list(\".\" * (100 * 25))\n\na,b = map(int,input().split())\n\nfor i in range(a-1):\n\tansl1[2*i] = \".\"\n\nfor i in range(b-1):\n\tansl2[2*i] = \"#\"\nprint(100, 100)\n\nfor i in range(25):\n\tprint(\"\".join(ansl1[(i*100):(i*100)+100]))\n\tprint(\"#\"*100)\n\nfor j in range(24, -1, -1):\n\tprint(\"\".join(ansl2[(j*100):(j*100)+100]))\n\tprint(\".\" * 100)\n", "def main():\n\tBK = '#'\n\tWH = '.'\n\n\tA, B = map(int, input().split())\n\n\tg = []\n\tfor _ in range(50):\n\t\tg.append([BK] * 100)  # 100にし忘れていた\n\tfor _ in range(50):\n\t\tg.append([WH] * 100)\n\n\tr, c = 1, 1\n\tfor _ in range(A - 1):\n\t\tg[r][c] = WH\n\t\tc += 2\n\t\tif c > 99:\n\t\t\tc = 1\n\t\t\tr += 2\n\n\tr, c = 51, 1\n\tfor _ in range(B - 1):\n\t\tg[r][c] = BK\n\t\tc += 2\n\t\tif c > 99:\n\t\t\tc = 1\n\t\t\tr += 2\n\n\tprint(100, 100)\n\tfor row in g:\n\t\tprint(*row, sep='')\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\ndef input(): return sys.stdin.readline().strip()\ndef mapint(): return map(int, input().split())\nsys.setrecursionlimit(10**9)\n\nA, B = mapint()\nprint(100, 100)\n\nwhite_grid = [['.']*100 for _ in range(50)]\nblack_grid = [['#']*100 for _ in range(50)]\n\nw, b = A-1, B-1\nfor i in range(0, 50, 2):\n\tfor j in range(0, 100, 2):\n\t\tif b:\n\t\t\twhite_grid[i][j] = '#'\n\t\t\tb -= 1\n\t\telse:\n\t\t\tbreak\n\telse:\n\t\tcontinue\n\tbreak\n\nfor i in range(1, 50, 2):\n\tfor j in range(0, 100, 2):\n\t\tif w:\n\t\t\tblack_grid[i][j] = '.'\n\t\t\tw -= 1\n\t\telse:\n\t\t\tbreak\n\telse:\n\t\tcontinue\n\tbreak\n\nfor w in white_grid:\n\tprint(''.join(w))\nfor b in black_grid:\n\tprint(''.join(b))\n", "# editorial参照\n# 格子まで詰め込もうとしたのが困難\n# 十分大きい黒白の塊一つに孤立した白黒の点を取る\n\n#最初のに出力h,w追加\na,b = list(map(int, input().split( )))\nk=50\nW = [[\".\"]*(k*2) for i in range(k)] \nB = [[\"#\"]*(k*2) for i in range(k)]\n\nfor i in range(b-1):\n\tw = (i//k)*2\n\th = (i%k)*2\n\tW[w][h]=\"#\"\n\n\nfor i in range(a-1):\n\tw = (i//k)*2+1\n\th = (i%k)*2+1\n\tB[-w][-h]=\".\"\nans = [''.join(W[i]) for i in range(k)]+ [''.join(B[i]) for i in range(k)]\nprint((100,100))\nprint(('\\n'.join(ans)))\n\n\n\t\n", "import sys\ninput = sys.stdin.readline\nA, B = map(int, input().split())\na = [[\"#\"] * 100 for _ in range(100)]\nfor i in range(100):\n\ta[i][0] = \".\"\nfor i in range(0, 100, 2):\n\tfor j in range(1, 99):\n\t\ta[i][j] = \".\"\nfor i in range(0, 100, 2):\n\tfor j in range(1, 99, 2):\n\t\tif A <= 1: break\n\t\tA -= 1\n\t\ta[i][j] = \"#\"\nfor i in range(99, -1, -2):\n\tfor j in range(98, 0, -2):\n\t\tif B <= 1: break\n\t\tB -= 1\n\t\ta[i][j] = \".\"\nprint(100, 100)\nfor r in a: print(\"\".join(r))\n", "# editorial参照\n# 格子まで詰め込もうとしたのが困難\n# 十分大きい黒白の塊一つに孤立した白黒の点を取る\n\n\na,b = list(map(int, input().split( )))\nk=50\nW = [[\".\"]*(k*2) for i in range(k)] \nB = [[\"#\"]*(k*2) for i in range(k)]\nfor i in range(b-1):\n\th = (i//k)*2\n\tw = (i%k)*2\n\tW[h][w]=\"#\"\n\n\n\nfor i in range(a-1):\n\th = (i//k)*2+1\n\tw = (i%k)*2+1\n\tB[-h][-w]=\".\"\n\t\nans = [''.join(W[i]) for i in range(k)]+ [''.join(B[i]) for i in range(k)]\nprint((100,100))\nprint(('\\n'.join(ans)))\n", "import bisect\nimport functools\nimport heapq\nimport itertools\nimport sys\nimport math\nimport random\nimport time\nfrom collections import Counter, deque, defaultdict\nfrom functools import reduce\nfrom operator import xor, itemgetter\nfrom pprint import pprint\nfrom types import FunctionType\nfrom typing import List, Any\nfrom sys import stdin\n\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 9)\n\ndef inp(): return stdin.readline().rstrip()\ndef lmi(): return list(map(int, stdin.readline().split()))\ndef narray(*shape, init: Any = 0):\n\tif shape: return [narray(*shape[1:], init=init) for _ in range(shape[0])]\n\tif callable(init): return init()\n\treturn init\n\n\ndef main():\n\tA, B = lmi()\n\tH, W = 100, 100\n\tgrid = narray(H, W)\n\twhite, black = A, B\n\twhite -= 1\n\tfor i in range(0, H, 4):\n\t\tfor j in range(0, W, 4):\n\t\t\tif white == 0 and black == 0:\n\t\t\t\tbreak\n\t\t\telif black == 0:\n\t\t\t\tif i > 0:\n\t\t\t\t\t# up\n\t\t\t\t\tfor yd, xd in ((-1, 0), (-1, 1), (-1, 2)):\n\t\t\t\t\t\tyy = i + yd\n\t\t\t\t\t\txx = j + xd\n\t\t\t\t\t\tgrid[yy][xx] = 1\n\t\t\t\telif j > 0:\n\t\t\t\t\t# left\n\t\t\t\t\tfor yd, xd in ((0, -1), (1, -1), (2, -1)):\n\t\t\t\t\t\tyy = i + yd\n\t\t\t\t\t\txx = j + xd\n\t\t\t\t\t\tgrid[yy][xx] = 1\n\t\t\telif white == 0:\n\t\t\t\t# center\n\t\t\t\tyy = i + 1\n\t\t\t\txx = j + 1\n\t\t\t\tgrid[yy][xx] = 1\n\t\t\tfor yd, xd in ((0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)):\n\t\t\t\tyy = i + yd\n\t\t\t\txx = j + xd\n\t\t\t\tgrid[yy][xx] = 1\n\t\t\twhite = max(0, white - 1)\n\t\t\tblack = max(0, black - 1)\n\n\tprint((100, 100))\n\tfor line in grid:\n\t\tprint((''.join('#' if c else '.' for c in line)))\n\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\ndef main():\n\tinput = sys.stdin.readline\n\tA, B = list(map(int, input().split()))\n\th, w = 100, 100\n\tG = [[0] * w for _ in range(h)]\n\tfor i in range(50):\n\t\tfor j in range(w):\n\t\t\tG[i][j] = 1\n\tA, B = A - 1, B - 1\n\tfor i in range(0, 50, 2):\n\t\tif A <= 0: break\n\t\tfor j in range(0, 100, 2):\n\t\t\tif A <= 0: break\n\t\t\tG[i][j] = 0\n\t\t\tA -= 1\n\tfor i in range(99, 50, -2):\n\t\tif B <= 0: break\n\t\tfor j in range(0, 100, 2):\n\t\t\tif B <= 0: break\n\t\t\tG[i][j] = 1\n\t\t\tB -= 1\n\tprint((h, w))\n\tfor i in range(h):\n\t\tprint((''.join(['.' if G[i][j] == 0 else '#' for j in range(w)])))\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "A,B = map(int, input().split())\n\nw = '.'\nb = '#'\n\nans = [ [b]* 20 + [w] * 20 for _ in range(100)]\n\nfor i in range(A-1):\n\tx = 2 * (i//50)\n\ty = (i%50) * 2\n\tans[y][x] = w\n\t\nfor i in range(B-1):\n\tx = 2 * (i//50) + 21\n\ty = (i%50) * 2\n\tans[y][x] = b\n\t\nprint('100 40')\nfor i in range(100):\n\tprint(''.join(ans[i]))\n", "\"\"\"\n感想\n\n- 最大ケースでビッシリつめて市松模様にしないといけないかと思った\n-\n\"\"\"\nA, B = list(map(int, input().split()))\nM = [['.']*100 for _ in range(50)] + [['#']*100 for _ in range(50)]\nA -= 1\nB -= 1\nfor i in range(B):\n\ti *= 2\n\tM[(i//50)*2][i%50] = '#'\n\nfor i in range(A):\n\ti *= 2\n\tM[51+(i//50)*2][i%50] = '.'\nprint((100, 100))\nfor m in M:\n\tprint((''.join(m)))\n", "K = 33\nL = K * 2\ns = [['#' for j in range(L)] for i in range(K)]\nt = [['.' for j in range(L)] for i in range(K)]\n\nA, B = map(int, input().split())\n\ndef color(s, j0, i1, c):\n\tj = j0\n\tk = j0 * 2\n\tfor i in range(1, i1):\n\t\tif L <= k:\n\t\t\tj += 1\n\t\t\tk = (j & 1) << 1\n\t\ts[j][k] = c\n\t\tk += 4\n\ncolor(s, 0, A, '.')\ncolor(t, 1, B, '#')\n\nprint(L, L)\nf = lambda s : print('\\n'.join((map(lambda s : ''.join(s), s))))\nf(s)\nf(t)\n", "a, b = map(int, input().split())\n\nans = [[\"#\" if i < 50 else \".\" for _ in range(100)] for i in range(100)]\n\nfor i in range(a - 1):\n\trows =  (i // 50) * 2\n\tclms = (i % 50) * 2\n\tans[rows * 2][clms] = \".\"\n\nfor i in range(b - 1):\n\trows = (i // 50) * 2\n\tclms = (i % 50) * 2\n\tans[99 - rows][clms] = \"#\"\n\t\nprint(100, 100)\nfor a in ans:\n\tprint(\"\".join(a))\n", "a,b=map(int,input().split())\nm=[[0 for _ in range(100)] for _ in range(100)]\n#paint lower half as 1 \nfor i in range(50,100):\n\tfor j in range(100):\n\t\tm[i][j]=1\na-=1 #0 means black\nb-=1 #1 means white \n#paint chess board like pattern of b white dots in upper half\nfor i in range(0,48,2):\n\tif b==0:\n\t\tbreak\n\tfor j in range(0,100,2):\n\t\tm[i][j]=1\n\t\tb-=1\n\t\tif b==0:\n\t\t\tbreak\n\t \n#now paint a black dots in lower half\nfor i in range(99,50,-2):\n\tif a==0:\n\t\tbreak\n\tfor j in range(0,100,2):\n\t\tm[i][j]=0\n\t\ta-=1\n\t\tif a==0:\n\t\t\tbreak\nprint(100,100)\nfor i in range(100):\n\tfor j in range(100):\n\t\tif m[i][j]==0:\n\t\t\tprint('.',end='')\n\t\telse:\n\t\t\tprint('#',end='')\n\tprint()\n\n", "a,b=map(int,input().split())\nn=100\n\ngrid=[[\"#\"]*n for _ in range(n//2)]+[[\".\"]*n for _ in range(n//2)]\n\nk=0\ncnt=0\nfor i in range(a-1):\n\tgrid[k][2*i-cnt]=\".\"\n\tif (2*i)%100==n-2:\n\t\tk+=2\n\t\tcnt+=n\n\nk=n//2+1\ncnt=0\nfor i in range(b-1):\n\tgrid[k][2*i-cnt]=\"#\"\n\tif (2*i)%100==n-2:\n\t\tk+=2\n\t\tcnt+=n\nprint(100,100)\nfor i in grid:\n\tprint(\"\".join(i))\n", "\"\"\"\n\nWは100で固定する。\n1行目でできるかぎり連結成分の数が多くなるようにする。\n\n\nW=100で固定し、白黒格子上になるように列を組む。\n白と黒どちらかが規定数をオーバーしたら次の行で調整を入れて数を減らす。\nここでは、白が規定数に達したと仮定しよう。\n白色の数に調整を入れたら、次の行では\n\"\"\"\nA,B = list(map(int,input().split()))\nN = 100\nn = N//2\ngrid = [[\"#\"]*N for _ in range(N)]\nfor i in range(n,N):\n\tfor j in range(N):\n\t\tgrid[i][j] = \".\"\n\nA -= 1\nB -= 1\n\nfor i in range(0,A//n*2,2):\n\tfor j in range(0,N,2):\n\t\tgrid[i][j] = \".\"\n\nfor j in range(0,A%n*2,2):\n\tgrid[A//n*2][j] = \".\"\n\ngrid = grid[::-1]\nfor i in range(0,B//n*2,2):\n\tfor j in range(0,N,2):\n\t\tgrid[i][j] = \"#\"\n\nfor j in range(0,B%n*2,2):\n\tgrid[B//n*2][j] = \"#\"\n\nprint((\" \".join([str(N),str(N)])))\nfor i in range(N):\n\tprint((\"\".join(grid[i])))\n", "a,b=map(int,input().split())\ncntA,cntB=0,0\nprint(100,100)\nflag=False\nif a>=b:\n\tarr=[['#']*100 for i in range(100)]\n\tl=[]\n\tcntB=1\n\tfor i in range(2,99,4):\n\t\tif flag:break\n\t\tfor j in range(2,99,4):\n\t\t\tl.append((i,j))\n\t\t\tfor y in range(i-1,i+2):\n\t\t\t\tfor x in range(j-1,j+2):\n\t\t\t\t\tarr[y][x]='.'\n\t\t\tcntA+=1\n\t\t\tif cntA==a:\n\t\t\t\tflag=True\n\t\t\t\tbreak\n\twhile cntB<b:\n\t\tcntB+=1\n\t\ts,t=l.pop()\n\t\tarr[s][t]='#'\n\tfor i in range(100):\n\t\tprint(''.join(arr[i]))\nelse:\n\tarr=[['.']*100 for i in range(100)]\n\tl=[]\n\tcntA=1\n\tfor i in range(2,99,4):\n\t\tif flag:break\n\t\tfor j in range(2,99,4):\n\t\t\tl.append((i,j))\n\t\t\tfor y in range(i-1,i+2):\n\t\t\t\tfor x in range(j-1,j+2):\n\t\t\t\t\tarr[y][x]='#'\n\t\t\tcntB+=1\n\t\t\tif cntB==b:\n\t\t\t\tflag=True\n\t\t\t\tbreak\n\twhile cntA<a:\n\t\tcntA+=1\n\t\ts,t=l.pop()\n\t\tarr[s][t]='.'\n\tfor i in range(100):\n\t\tprint(''.join(arr[i]))\n", "A, B = list(map(int, input().split()))\n\nans = [['#'] * 100 for _ in range(50)] + [['.'] * 100 for _ in range(50)]\nA -= 1\nB -= 1\n\nfor h in range(0, 50, 2):\n\tfor w in range(0, 100, 2):\n\t\tif A == 0:\n\t\t\tbreak\n\t\tans[h][w] = '.'\n\t\tA -= 1\n\nfor h in range(0, 50, 2):\n\tfor w in range(0, 100, 2):\n\t\tif B == 0:\n\t\t\tbreak\n\t\tans[-(h + 1)][w] = '#'\n\t\tB -= 1\n\nprint((100, 100))\nfor a in ans:\n\tprint((''.join(a)))\n", "a,b=map(int,input().split())\nprint(100,100)\nans=[list(\"#\"*100)for _ in range(50)]+[list(\".\"*100)for _ in range(50)]\nfor i in range(a-1):\n\th=(i//50)*2\n\tw=(i%50)*2\n\tans[h][w]=\".\"\nfor i in range(b-1):\n\th=(i//50)*2+51\n\tw=(i%50)*2\n\tans[h][w]=\"#\"\nfor i in ans:print(\"\".join(i))\n", "A, B = list(map(int, input().split()))\nh, w = 99, 99\n\na = '.'\nb = '#'\n\nif A > B:\n\ta, b = b, a\n\tB, A = A, B\nA -= 1\nANS = [[b]*w for i in range(h)]\nB -= 1\nidx = 0\n\nfor i in range(w):\n\tANS[0][i] = a\nfor i in range(49):\n\tANS[i][0] = a\n\tANS[i][-1] = a\nwhile(B):\n\tidx += 1\n\tfor i in range(1, w, 2):\n\t\tif B == 0:\n\t\t\tANS[idx][i] = a\n\t\t\tANS[idx][i+1] = a\n\t\telse:\n\t\t\tANS[idx][i] = b\n\t\t\tANS[idx][i+1] = a\n\t\t\tB -= 1\n\tidx += 1\n\tfor i in range(w):\n\t\tANS[idx][i] = a\nidx += 1\n\n\nfor i in range(idx, 49):\n\tfor j in range(w):\n\t\tANS[i][j] = a\n\nfor i in range(w):\n\tANS[49][i] = b\nfor i in range(49, h):\n\tANS[i][0] = b\n\tANS[i][-1] = b\nidx = 49\nwhile(A):\n\tidx += 1\n\tfor i in range(1, w, 2):\n\t\tif A == 0:\n\t\t\tANS[idx][i] = b\n\t\t\tANS[idx][i+1] = b\n\t\telse:\n\t\t\tANS[idx][i] = a\n\t\t\tANS[idx][i+1] = b\n\t\t\tA -= 1\n\tidx += 1\n\tfor i in range(w):\n\t\tANS[idx][i] = b\n\nfor i in range(idx, h):\n\tfor j in range(w):\n\t\tANS[i][j] = b\n\nprint((h, w))\n\nfor i in range(h):\n\tprint((\"\".join(ANS[i])))\n", "A,B = list(map(int,input().split()))\nif A==1:\n\tC = [[\".\" for _ in range(100)] for _ in range(100)]\n\tcnt = 0\n\tflag=0\n\tfor i in range(0,100,2):\n\t\tfor j in range(0,100,2):\n\t\t\tC[i][j] = \"#\"\n\t\t\tcnt += 1\n\t\t\tif cnt==B:\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\tif flag==1:\n\t\t\tbreak\nelif B==1:\n\tC = [[\"#\" for _ in range(100)] for _ in range(100)]\n\tcnt = 0\n\tflag = 0\n\tfor i in range(0,100,2):\n\t\tfor j in range(0,100,2):\n\t\t\tC[i][j] = \".\"\n\t\t\tcnt += 1\n\t\t\tif cnt==A:\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\tif flag==1:\n\t\t\tbreak\nelse:\n\tC = [[\".\" for _ in range(100)] for _ in range(100)]\n\tfor i in range(50,100):\n\t\tfor j in range(100):\n\t\t\tC[i][j] = \"#\"\n\tfor i in range(1,49):\n\t\tfor j in range(1,99):\n\t\t\tC[i][j] = \"#\"\n\tcnt = 0\n\tflag = 0\n\tfor i in range(2,47,2):\n\t\tfor j in range(2,97,2):\n\t\t\tif cnt==A-2:\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\t\tC[i][j] = \".\"\n\t\t\tcnt += 1\n\t\tif flag==1:break\n\tfor i in range(51,99):\n\t\tfor j in range(1,99):\n\t\t\tC[i][j] = \".\"\n\tcnt = 0\n\tflag = 0\n\tfor i in range(52,97,2):\n\t\tfor j in range(2,97,2):\n\t\t\tif cnt==B-2:\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\t\tC[i][j] = \"#\"\n\t\t\tcnt += 1\n\t\tif flag==1:break\nprint((100,100))\nfor i in range(100):\n\tprint((\"\".join(C[i])))\n", "\nimport sys\nsys.setrecursionlimit(1 << 25)\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef read_ints():\n\treturn list(map(int, read().split()))\n\n\ndef read_a_int():\n\treturn int(read())\n\n\ndef read_tuple(H):\n\t'''\n\tH is number of rows\n\t'''\n\tret = []\n\tfor _ in range(H):\n\t\tret.append(tuple(map(int, read().split())))\n\treturn ret\n\n\ndef read_col(H):\n\t'''\n\tH is number of rows\n\tA列、B列が与えられるようなとき\n\tex1)A,B=read_col(H)    ex2) A,=read_col(H) #一列の場合\n\t'''\n\tret = []\n\tfor _ in range(H):\n\t\tret.append(list(map(int, read().split())))\n\treturn tuple(map(list, zip(*ret)))\n\n\ndef read_matrix(H):\n\t'''\n\tH is number of rows\n\t'''\n\tret = []\n\tfor _ in range(H):\n\t\tret.append(list(map(int, read().split())))\n\treturn ret\n\t# return [list(map(int, read().split())) for _ in range(H)] # 内包表記はpypyでは遅いため\n\n\nMOD = 10**9 + 7\nINF = 2**31  # 2147483648 > 10**9\n# default import\nfrom collections import defaultdict, Counter, deque\nfrom operator import itemgetter\nfrom itertools import product, permutations, combinations\nfrom bisect import bisect_left, bisect_right  # , insort_left, insort_right\n# https://atcoder.jp/contests/arc093/tasks/arc093_b\n\n# 条件を満たすものを出力しろ\n# 連結成分が指定されている\n# 100*100のマスに限定して考えれば簡単。\n# 50*100のマスの中で499個の島を作ることはできるよね？(2行あたり25個作れるはず, 40行もあれば十分作れる)\n\nA, B = read_ints()\nA -= 1\nB -= 1\nprint(100, 100)\n\n# 黒の中に白の個島を作る\nfor _ in range(25):\n\tfor _ in range(50):\n\t\tif A > 0:\n\t\t\tprint('#.', end='')\n\t\t\tA -= 1\n\t\telse:\n\t\t\tprint('##', end='')\n\tprint()\n\tprint('#' * 100)  # 隔離\n\n# 白の中に黒の個島を作る\nfor _ in range(25):\n\tprint('.' * 100)  # 隔離\n\tfor _ in range(50):\n\t\tif B > 0:\n\t\t\tprint('#.', end='')\n\t\t\tB -= 1\n\t\telse:\n\t\t\tprint('..', end='')\n\tprint()\n", "import math\n#import numpy as np\nimport queue\nfrom collections import deque,defaultdict\nimport heapq as hpq\nfrom sys import stdin,setrecursionlimit\n#from scipy.sparse.csgraph import dijkstra\n#from scipy.sparse import csr_matrix\nipt = stdin.readline\nsetrecursionlimit(10**7)\n\ndef main():\n\ta,b = list(map(int,ipt().split()))\n\tif a == 1 and b == 1:\n\t\tprint((1,2))\n\t\tprint(\".#\")\n\t\treturn()\n\tprint((100,100))\n\ta -= 1\n\tb -= 1\n\tni = 0\n\twhile a >= 50:\n\t\tprint((\".#\"*50))\n\t\tprint((\"#\"*100))\n\t\tni += 2\n\t\ta -= 50\n\tprint((\".#\"*a+\"##\"*(50-a)))\n\tprint((\"#\"*100))\n\tni += 2\n\tfor i in range(50-ni):\n\t\tprint((\"#\"*100))\n\tni = 0\n\twhile b >= 50:\n\t\tprint((\".\"*100))\n\t\tprint((\".#\"*50))\n\t\tni += 2\n\t\tb -= 50\n\tprint((\".\"*100))\n\tprint((\".#\"*b+\"..\"*(50-b)))\n\tni += 2\n\tfor i in range(50-ni):\n\t\tprint((\".\"*100))\n\n\n\n\treturn\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\ninf = float('inf')\nmod = 10 ** 9 + 7\n\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(A, B):\n\tans = [['#' for _ in range(101)] for _ in range(101)]\n\tB -= 1\n\tfor i in range(1, 101, 4):\n\t\tfor j in range(1, 101, 4):\n\t\t\tif A + B == 0:\n\t\t\t\tbreak\n\t\t\tif A > 0 and B > 0:\n\t\t\t\tans[i][j] = '.'\n\t\t\t\tans[i][j + 1] = '.'\n\t\t\t\tans[i][j + 2] = '.'\n\t\t\t\tans[i + 1][j] = '.'\n\t\t\t\tans[i + 1][j + 2] = '.'\n\t\t\t\tans[i + 2][j] = '.'\n\t\t\t\tans[i + 2][j + 1] = '.'\n\t\t\t\tans[i + 2][j + 2] = '.'\n\t\t\t\tA -= 1\n\t\t\t\tB -= 1\n\t\t\telif A > 0:\n\t\t\t\tans[i][j] = '.'\n\t\t\t\tA -= 1\n\t\t\telif B > 0:\n\t\t\t\tif j == 1:\n\t\t\t\t\tans[i - 1][j] = '.'\n\t\t\t\t\tans[i - 1][j + 1] = '.'\n\t\t\t\t\tans[i - 1][j + 2] = '.'\n\t\t\t\tans[i][j - 1] = '.'\n\t\t\t\tans[i + 1][j - 1] = '.'\n\t\t\t\tans[i + 2][j - 1] = '.'\n\t\t\t\tans[i][j] = '.'\n\t\t\t\tans[i][j + 1] = '.'\n\t\t\t\tans[i][j + 2] = '.'\n\t\t\t\tans[i + 1][j] = '.'\n\t\t\t\tans[i + 1][j + 2] = '.'\n\t\t\t\tans[i + 2][j] = '.'\n\t\t\t\tans[i + 2][j + 1] = '.'\n\t\t\t\tans[i + 2][j + 2] = '.'\n\t\t\t\tB -= 1\n\t\tif A + B == 0:\n\t\t\tbreak\n\n\tprint((100, 100))\n\tfor anss in ans[1:]:\n\t\tprint((''.join(anss[1:])))\n\n\ndef __starting_point():\n\tA, B = list(map(int, input().split()))\n\tsolve(A, B)\n\n\t# # test\n\t# from random import randint\n\t# import tool.testcase as tt\n\t# from tool.testcase import random_str, random_ints\n\t# solve()\n\n__starting_point()\n", "import sys\n# import math\n# import bisect\n# import numpy as np\n# from decimal import Decimal\n# from numba import njit, i8, u1, b1 #JIT compiler\n# from itertools import combinations, product\n# from collections import Counter, deque, defaultdict\n\n# sys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = 10 ** 9\nPI = 3.14159265358979323846\n\ndef read_str():      return sys.stdin.readline().strip()\ndef read_int():      return int(sys.stdin.readline().strip())\ndef read_ints():     return map(int, sys.stdin.readline().strip().split())\ndef read_ints2(x):   return map(lambda num: int(num) - x, sys.stdin.readline().strip().split())\ndef read_str_list(): return list(sys.stdin.readline().strip().split())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef GCD(a: int, b: int) -> int: return b if a%b==0 else GCD(b, a%b)\ndef LCM(a: int, b: int) -> int: return (a * b) // GCD(a, b)\n\ndef Main():\n\ta, b = read_ints()\n\tprint(100, 100)\n\tgrid = [['#']*100 for _ in range(50)] + [['.']*100 for _ in range(50)]\n\tfor i in range(~-a):\n\t\tx, y = divmod(i, 49)\n\t\tgrid[x * 2 + 1][y * 2 + 1] = '.'\n\tfor i in range(~-b):\n\t\tx, y = divmod(i, 49)\n\t\tgrid[x * 2 + 51][y * 2 + 1] = '#'\n\tprint(*[''.join(g) for g in grid], sep='\\n')\n\ndef __starting_point():\n\tMain()\n__starting_point()\n", "print('97 97')\nA,B=map(int,input().split())\nif A>B:\n\tchar=['.','#']\n\tM=A\n\tm=B\nelse:\n\tchar=['#','.']\n\tM=B\n\tm=A\n\nfor i in range(1,98):\n\tstr=''\n\tfor j in range(1,98):\n\t\tif i%4==1 or j%4==1:\n\t\t\tstr+=char[1]\n\t\telif M<((i-1)//4)*24+((j-1)//4)+1:\n\t\t\tstr+=char[1]\n\t\telif i%4==j%4==3 and m>((i-1)//4)*24+((j-1)//4)+1:\n\t\t\tstr+=char[1]\n\t\telse:\n\t\t\tstr+=char[0]\n\tprint(str)\n"], "id": "id9256"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9256", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["two", 0], ["integers", 0], ["a", 0], ["and", 0], ["b", 0], ["print", 0], ["a", 0], ["grid", 0], ["where", 0], ["each", 0], ["square", 0], ["is", 0], ["painted", 0], ["white", 0], ["or", 0], ["black", 0], ["that", 0], ["satisfies", 0], ["the", 0], ["following", 0], ["conditions", 0], ["in", 0], ["the", 0], ["format", 0], ["specified", 0], ["in", 0], ["output", 0], ["section", 0], ["let", 1], ["the", 1], ["size", 1], ["of", 1], ["the", 1], ["grid", 1], ["be", 1], ["h", 1], ["times", 1], ["w", 1], ["h", 1], ["vertical", 1], ["w", 1], ["horizontal", 1], ["both", 1], ["h", 1], ["and", 1], ["w", 1], ["are", 1], ["at", 1], ["most", 1], ["100", 1], ["the", 1], ["set", 1], ["of", 1], ["the", 1], ["squares", 1], ["painted", 1], ["white", 1], ["is", 1], ["divided", 1], ["into", 1], ["exactly", 1], ["a", 1], ["connected", 1], ["components", 1], ["the", 1], ["set", 1], ["of", 1], ["the", 1], ["squares", 1], ["painted", 1], ["black", 1], ["is", 1], ["divided", 1], ["into", 1], ["exactly", 1], ["b", 1], ["connected", 1], ["components", 1], ["it", 1], ["can", 1], ["be", 1], ["proved", 1], ["that", 1], ["there", 1], ["always", 1], ["exist", 1], ["one", 1], ["or", 1], ["more", 1], ["solutions", 1], ["under", 1], ["the", 1], ["conditions", 1], ["specified", 1], ["in", 1], ["constraints", 1], ["section", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["solutions", 0], ["any", 0], ["of", 0], ["them", 0], ["may", 0], ["be", 0], ["printed", 0], ["notes", 0], ["two", 1], ["squares", 1], ["painted", 1], ["white", 1], ["c", 1], ["1", 1], ["and", 1], ["c", 1], ["2", 1], ["are", 1], ["called", 1], ["connected", 1], ["when", 1], ["the", 1], ["square", 1], ["c", 1], ["2", 1], ["can", 1], ["be", 1], ["reached", 1], ["from", 1], ["the", 1], ["square", 1], ["c", 1], ["1", 1], ["passing", 1], ["only", 1], ["white", 1], ["squares", 1], ["by", 0], ["repeatedly", 0], ["moving", 0], ["up", 0], ["down", 0], ["left", 0], ["or", 0], ["right", 0], ["to", 0], ["an", 0], ["adjacent", 0], ["square", 0], ["a", 0], ["set", 0], ["of", 0], ["squares", 0], ["painted", 0], ["white", 0], ["s", 0], ["forms", 0], ["a", 0], ["connected", 0], ["component", 0], ["when", 0], ["the", 0], ["following", 0], ["conditions", 0], ["are", 0], ["met", 0], ["any", 1], ["two", 1], ["squares", 1], ["in", 1], ["s", 1], ["are", 1], ["connected", 1], ["no", 1], ["pair", 1], ["of", 1], ["a", 1], ["square", 1], ["painted", 1], ["white", 1], ["that", 1], ["is", 1], ["not", 1], ["included", 1], ["in", 1], ["s", 1], ["and", 1], ["a", 1], ["square", 1], ["included", 1], ["in", 1], ["s", 1], ["is", 0], ["connected", 0], ["a", 0], ["connected", 0], ["component", 0], ["of", 0], ["squares", 0], ["painted", 0], ["black", 0], ["is", 0], ["defined", 0], ["similarly", 0], ["constraints", 0], ["1", 0], ["leq", 0], ["a", 0], ["leq", 0], ["500", 0], ["1", 0], ["leq", 0], ["b", 0], ["leq", 0], ["500", 0], ["input", 0], ["input", 0], ["is", 0], ["given", 0], ["from", 0], ["standard", 0], ["input", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["a", 0], ["b", 0], ["output", 0], ["output", 0], ["should", 0], ["be", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["in", 1], ["the", 1], ["first", 1], ["line", 1], ["print", 1], ["integers", 1], ["h", 1], ["and", 1], ["w", 1], ["representing", 1], ["the", 0], ["size", 0], ["of", 0], ["the", 0], ["grid", 0], ["you", 0], ["constructed", 0], ["with", 0], ["a", 0], ["space", 0], ["in", 0], ["between", 0], ["then", 0], ["print", 0], ["h", 0], ["more", 0], ["lines", 0], ["the", 0], ["i", 0], ["th", 0], ["1", 0], ["leq", 0], ["i", 0], ["leq", 0], ["h", 0], ["of", 0], ["these", 0], ["lines", 0], ["should", 0], ["contain", 0], ["a", 0], ["string", 0], ["s", 0], ["i", 0], ["as", 0], ["follows", 0], ["if", 2], ["the", 2], ["square", 2], ["at", 2], ["the", 2], ["i", 2], ["th", 2], ["row", 2], ["and", 2], ["j", 2], ["th", 1], ["column", 1], ["1", 1], ["leq", 1], ["j", 1], ["leq", 1], ["w", 1], ["in", 1], ["the", 1], ["grid", 1], ["is", 1], ["painted", 1], ["white", 1], ["the", 1], ["j", 1], ["th", 1], ["character", 1], ["in", 1], ["s", 1], ["i", 1], ["should", 1], ["be", 1], ["if", 2], ["the", 2], ["square", 2], ["at", 2], ["the", 2], ["i", 2], ["th", 2], ["row", 2], ["and", 2], ["j", 2], ["th", 1], ["column", 1], ["1", 1], ["leq", 1], ["j", 1], ["leq", 1], ["w", 1], ["in", 1], ["the", 1], ["grid", 1], ["is", 0], ["painted", 0], ["black", 0], ["the", 0], ["j", 0], ["th", 0], ["character", 0], ["in", 0], ["s", 0], ["i", 0], ["should", 0], ["be", 0], ["sample", 0], ["input", 0], ["2", 0], ["3", 0], ["sample", 0], ["output", 0], ["3", 0], ["3", 0], ["this", 0], ["output", 0], ["corresponds", 0], ["to", 0], ["the", 0], ["grid", 0], ["below", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5082417582417582, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4807692307692308, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.651595744680851, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6382978723404256, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5082417582417582, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4807692307692308, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.651595744680851, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6382978723404256, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["if", 0], ["h", 0], ["50", 0], ["else", 0], ["for", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["100", 0], ["end", 0], ["black", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["50", 0], ["2", 0], ["if", 0], ["end", 0], ["black", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["b", 0], ["1", 0], ["end", 0], ["black", 0], ["true", 0], ["break", 0], ["if", 0], ["j", 0], ["2", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["b", 0], ["1", 0], ["end", 0], ["white", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["53", 0], ["100", 0], ["2", 0], ["if", 0], ["end", 0], ["white", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["a", 0], ["1", 0], ["end", 0], ["white", 0], ["true", 0], ["break", 0], ["if", 0], ["j", 0], ["2", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["a", 0], ["1", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["join", 0], ["s", 0], ["i", 0], ["usr", 0], ["bin", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["retbw", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["retwb", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["50", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["a", 0], ["1", 0], ["retbw", 0], ["i", 0], ["j", 0], ["a", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["50", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["b", 0], ["1", 0], ["retwb", 0], ["i", 0], ["j", 0], ["b", 0], ["1", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["x", 0], ["in", 0], ["retbw", 0], ["print", 0], ["join", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["retwb", 0], ["print", 0], ["join", 0], ["x", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["max", 0], ["100", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["max", 0], ["下地として上半分は白、下半分は黒。", 0], ["if", 0], ["i", 0], ["max", 0], ["2", 0], ["temp", 0], ["max", 0], ["else", 0], ["temp", 0], ["max", 0], ["ans", 0], ["append", 0], ["temp", 0], ["print", 0], ["ans", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["h", 0], ["0", 0], ["w", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["上半分に黒を置く。", 0], ["ans", 0], ["h", 0], ["w", 0], ["w", 0], ["2", 0], ["if", 0], ["w", 0], ["max", 0], ["1", 0], ["h", 0], ["2", 0], ["w", 0], ["0", 0], ["print", 0], ["ans", 0], ["h", 0], ["max", 0], ["2", 0], ["1", 0], ["w", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["a", 0], ["ans", 0], ["h", 0], ["w", 0], ["w", 0], ["2", 0], ["if", 0], ["w", 0], ["max", 0], ["1", 0], ["h", 0], ["2", 0], ["w", 0], ["0", 0], ["l", 0], ["max", 0], ["max", 0], ["print", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["max", 0], ["output", 0], ["join", 0], ["ans", 0], ["i", 0], ["print", 0], ["output", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["defaultdict", 0], ["deque", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappop", 0], ["heappush", 0], ["heapify", 0], ["import", 0], ["sys", 0], ["bisect", 0], ["math", 0], ["itertools", 0], ["fractions", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["8", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["inf", 0], ["float", 0], ["inf", 0], ["def", 0], ["inp", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["inpl", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["a", 0], ["b", 0], ["inpl", 0], ["if", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["1", 0], ["2", 0], ["print", 0], ["return", 0], ["rev", 0], ["false", 0], ["if", 0], ["a", 0], ["b", 0], ["rev", 0], ["true", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["a", 0], ["1", 0], ["res", 0], ["none", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["100", 0], ["r", 0], ["0", 0], ["ok", 0], ["true", 0], ["while", 0], ["ok", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["r", 0], ["2", 0], ["res", 0], ["r", 0], ["c", 0], ["0", 0], ["else", 0], ["if", 0], ["not", 0], ["ok", 0], ["or", 0], ["c", 0], ["2", 0], ["res", 0], ["r", 0], ["c", 0], ["1", 0], ["b", 0], ["1", 0], ["if", 0], ["b", 0], ["0", 0], ["ok", 0], ["false", 0], ["else", 0], ["res", 0], ["r", 0], ["c", 0], ["0", 0], ["r", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["100", 0], ["res", 0], ["r", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["99", 0], ["else", 0], ["0", 0], ["r", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["100", 0], ["res", 0], ["r", 0], ["c", 0], ["1", 0], ["r", 0], ["1", 0], ["ok", 0], ["true", 0], ["while", 0], ["ok", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["r", 0], ["2", 0], ["res", 0], ["r", 0], ["c", 0], ["1", 0], ["else", 0], ["if", 0], ["not", 0], ["ok", 0], ["or", 0], ["c", 0], ["2", 0], ["res", 0], ["r", 0], ["c", 0], ["0", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["ok", 0], ["false", 0], ["else", 0], ["res", 0], ["r", 0], ["c", 0], ["1", 0], ["r", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["res", 0], ["i", 0], ["j", 0], ["res", 0], ["i", 0], ["1", 0], ["j", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["rev", 0], ["res", 0], ["i", 0], ["j", 0], ["if", 0], ["res", 0], ["i", 0], ["j", 0], ["else", 0], ["else", 0], ["res", 0], ["i", 0], ["j", 0], ["if", 0], ["res", 0], ["i", 0], ["j", 0], ["else", 0], ["print", 0], ["join", 0], ["res", 0], ["i", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["for", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["t", 0], ["i", 0], ["j", 0], ["cnt", 0], ["1", 0], ["if", 0], ["b", 0], ["1", 0], ["flag", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["49", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["100", 0], ["2", 0], ["t", 0], ["i", 0], ["j", 0], ["cnt", 0], ["1", 0], ["if", 0], ["cnt", 0], ["b", 0], ["flag", 0], ["1", 0], ["break", 0], ["if", 0], ["flag", 0], ["1", 0], ["break", 0], ["cnt", 0], ["1", 0], ["if", 0], ["a", 0], ["1", 0], ["flag", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["51", 0], ["99", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["100", 0], ["2", 0], ["t", 0], ["i", 0], ["j", 0], ["cnt", 0], ["1", 0], ["if", 0], ["cnt", 0], ["a", 0], ["flag", 0], ["1", 0], ["break", 0], ["if", 0], ["flag", 0], ["1", 0], ["break", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["join", 0], ["t", 0], ["i", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["copy", 0], ["import", 0], ["random", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappush", 0], ["heappop", 0], ["heapify", 0], ["from", 0], ["functools", 0], ["import", 0], ["cmp", 0], ["to", 0], ["key", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["bisect", 0], ["right", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["deque", 0], ["counter", 0], ["sys", 0], ["setrecursionlimit", 0], ["1000000", 0], ["input", 0], ["aliases", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["gets", 0], ["lambda", 0], ["input", 0], ["strip", 0], ["getn", 0], ["lambda", 0], ["int", 0], ["input", 0], ["getlist", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["getzlist", 0], ["lambda", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["inf", 0], ["float", 0], ["inf", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["divide", 0], ["lambda", 0], ["x", 0], ["pow", 0], ["x", 0], ["mod", 0], ["2", 0], ["mod", 0], ["def", 0], ["nck", 0], ["n", 0], ["k", 0], ["kaijyo", 0], ["return", 0], ["npk", 0], ["n", 0], ["k", 0], ["kaijyo", 0], ["divide", 0], ["kaijyo", 0], ["k", 0], ["mod", 0], ["def", 0], ["npk", 0], ["n", 0], ["k", 0], ["kaijyo", 0], ["if", 0], ["k", 0], ["0", 0], ["or", 0], ["k", 0], ["n", 0], ["return", 0], ["n", 0], ["mod", 0], ["return", 0], ["kaijyo", 0], ["n", 0], ["divide", 0], ["kaijyo", 0], ["n", 0], ["k", 0], ["mod", 0], ["def", 0], ["fact", 0], ["and", 0], ["inv", 0], ["size", 0], ["inv", 0], ["0", 0], ["size", 0], ["inv", 0], ["j", 0], ["j", 0], ["1", 0], ["mod", 0], ["mod", 0], ["fac", 0], ["0", 0], ["size", 0], ["fac", 0], ["j", 0], ["j", 0], ["mod", 0], ["mod", 0], ["finv", 0], ["0", 0], ["size", 0], ["finv", 0], ["j", 0], ["j", 0], ["1", 0], ["mod", 0], ["mod", 0], ["inv", 0], ["1", 0], ["1", 0], ["fac", 0], ["0", 0], ["fac", 0], ["1", 0], ["1", 0], ["finv", 0], ["0", 0], ["finv", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["size", 0], ["inv", 0], ["i", 0], ["mod", 0], ["mod", 0], ["i", 0], ["inv", 0], ["mod", 0], ["i", 0], ["mod", 0], ["fac", 0], ["i", 0], ["fac", 0], ["i", 0], ["1", 0], ["i", 0], ["mod", 0], ["finv", 0], ["i", 0], ["finv", 0], ["i", 0], ["1", 0], ["inv", 0], ["i", 0], ["mod", 0], ["return", 0], ["fac", 0], ["finv", 0], ["def", 0], ["renritsu", 0], ["a", 0], ["y", 0], ["example", 0], ["2x", 0], ["y", 0], ["3", 0], ["x", 0], ["3y", 0], ["4", 0], ["a", 0], ["2", 0], ["1", 0], ["1", 0], ["3", 0], ["y", 0], ["3", 0], ["4", 0], ["または", 0], ["3", 0], ["4", 0], ["a", 0], ["np", 0], ["matrix", 0], ["a", 0], ["y", 0], ["np", 0], ["matrix", 0], ["y", 0], ["y", 0], ["np", 0], ["reshape", 0], ["y", 0], ["1", 0], ["1", 0], ["x", 0], ["np", 0], ["linalg", 0], ["solve", 0], ["a", 0], ["y", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["return", 0], ["x", 0], ["flatten", 0], ["tolist", 0], ["0", 0], ["class", 0], ["twodimgrid", 0], ["2次元座標", 0], ["1次元", 0], ["def", 0], ["init", 0], ["self", 0], ["h", 0], ["w", 0], ["wall", 0], ["self", 0], ["h", 0], ["h", 0], ["self", 0], ["w", 0], ["w", 0], ["self", 0], ["size", 0], ["h", 0], ["2", 0], ["w", 0], ["2", 0], ["self", 0], ["wall", 0], ["wall", 0], ["self", 0], ["get", 0], ["grid", 0], ["self", 0], ["init", 0], ["cost", 0], ["def", 0], ["get", 0], ["grid", 0], ["self", 0], ["grid", 0], ["self", 0], ["wall", 0], ["self", 0], ["w", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["self", 0], ["h", 0], ["grid", 0], ["append", 0], ["self", 0], ["wall", 0], ["gets", 0], ["self", 0], ["wall", 0], ["grid", 0], ["append", 0], ["self", 0], ["wall", 0], ["self", 0], ["w", 0], ["2", 0], ["self", 0], ["grid", 0], ["grid", 0], ["def", 0], ["init", 0], ["cost", 0], ["self", 0], ["self", 0], ["cost", 0], ["inf", 0], ["self", 0], ["size", 0], ["def", 0], ["pos", 0], ["self", 0], ["x", 0], ["y", 0], ["壁も含めて0", 0], ["indexed", 0], ["元々の座標だけ考えると1", 0], ["indexed", 0], ["return", 0], ["y", 0], ["self", 0], ["w", 0], ["2", 0], ["x", 0], ["def", 0], ["getgrid", 0], ["self", 0], ["x", 0], ["y", 0], ["return", 0], ["self", 0], ["grid", 0], ["y", 0], ["x", 0], ["def", 0], ["get", 0], ["self", 0], ["x", 0], ["y", 0], ["return", 0], ["self", 0], ["cost", 0], ["self", 0], ["pos", 0], ["x", 0], ["y", 0], ["def", 0], ["set", 0], ["self", 0], ["x", 0], ["y", 0], ["v", 0], ["self", 0], ["cost", 0], ["self", 0], ["pos", 0], ["x", 0], ["y", 0], ["v", 0], ["return", 0], ["def", 0], ["show", 0], ["self", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["self", 0], ["h", 0], ["2", 0], ["print", 0], ["self", 0], ["cost", 0], ["self", 0], ["w", 0], ["2", 0], ["i", 0], ["self", 0], ["w", 0], ["2", 0], ["i", 0], ["1", 0], ["def", 0], ["showsome", 0], ["self", 0], ["tgt", 0], ["for", 0], ["t", 0], ["in", 0], ["tgt", 0], ["print", 0], ["t", 0], ["return", 0], ["def", 0], ["showsomejoin", 0], ["self", 0], ["tgt", 0], ["for", 0], ["t", 0], ["in", 0], ["tgt", 0], ["print", 0], ["join", 0], ["t", 0], ["return", 0], ["def", 0], ["search", 0], ["self", 0], ["grid", 0], ["self", 0], ["grid", 0], ["move", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["move", 0], ["eight", 0], ["0", 119], ["1", 137], ["0", 221], ["1", 376], ["1", 2], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["self", 0], ["h", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["self", 0], ["w", 0], ["1", 0], ["cx", 0], ["cy", 0], ["j", 0], ["i", 0], ["for", 0], ["dx", 0], ["dy", 0], ["in", 0], ["move", 0], ["eight", 0], ["nx", 0], ["ny", 0], ["dx", 0], ["cx", 0], ["dy", 0], ["cy", 0], ["def", 0], ["solve", 0], ["a", 0], ["b", 0], ["getlist", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["tmp", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["i", 0], ["50", 0], ["if", 0], ["j", 0], ["2", 0], ["1", 0], ["or", 0], ["i", 0], ["2", 0], ["1", 0], ["or", 0], ["a", 0], ["1", 0], ["tmp", 0], ["append", 0], ["else", 0], ["tmp", 0], ["append", 0], ["a", 0], ["1", 0], ["else", 0], ["if", 0], ["j", 0], ["2", 0], ["1", 0], ["or", 0], ["i", 0], ["2", 0], ["0", 0], ["or", 0], ["b", 0], ["1", 0], ["tmp", 0], ["append", 0], ["else", 0], ["tmp", 0], ["append", 0], ["b", 0], ["1", 0], ["print", 0], ["join", 0], ["tmp", 0], ["def", 0], ["main", 0], ["n", 0], ["getn", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["join", 0], ["random", 0], ["choice", 0], ["f", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["20", 0], ["print", 0], ["s", 0], ["solve", 0], ["s", 0], ["1", 0], ["0", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["solve", 0], ["starting", 0], ["point", 0], ["def", 0], ["main", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["board", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["wc", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["50", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["wc", 0], ["a", 0], ["break", 0], ["board", 0], ["i", 0], ["j", 0], ["wc", 0], ["1", 0], ["if", 0], ["wc", 0], ["a", 0], ["break", 0], ["bc", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["51", 0], ["100", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["bc", 0], ["b", 0], ["break", 0], ["board", 0], ["i", 0], ["j", 0], ["bc", 0], ["1", 0], ["if", 0], ["bc", 0], ["b", 0], ["break", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["r", 0], ["in", 0], ["board", 0], ["print", 0], ["r", 0], ["sep", 0], ["main", 0], ["field", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["a", 0], ["field", 0], ["x", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["100", 0], ["y", 0], ["0", 0], ["x", 0], ["2", 0], ["x", 0], ["99", 0], ["y", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["b", 0], ["field", 0], ["x", 0], ["y", 0], ["y", 0], ["2", 0], ["if", 0], ["y", 0], ["100", 0], ["y", 0], ["0", 0], ["x", 0], ["2", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["row", 0], ["in", 0], ["field", 0], ["print", 0], ["join", 0], ["row", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["grid", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["grid", 0], ["append", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["grid", 0], ["append", 0], ["100", 0], ["div", 0], ["mod", 0], ["divmod", 0], ["a", 0], ["1", 0], ["50", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["div", 0], ["h", 0], ["0", 0], ["d", 0], ["2", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["grid", 0], ["h", 0], ["w", 0], ["if", 0], ["mod", 0], ["h", 0], ["0", 0], ["div", 0], ["2", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["0", 0], ["mod", 0], ["2", 0], ["2", 0], ["grid", 0], ["h", 0], ["w", 0], ["div", 0], ["mod", 0], ["divmod", 0], ["b", 0], ["1", 0], ["50", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["div", 0], ["h", 0], ["51", 0], ["d", 0], ["2", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["grid", 0], ["h", 0], ["w", 0], ["if", 0], ["mod", 0], ["h", 0], ["51", 0], ["div", 0], ["2", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["0", 0], ["mod", 0], ["2", 0], ["2", 0], ["grid", 0], ["h", 0], ["w", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["g", 0], ["in", 0], ["grid", 0], ["print", 0], ["join", 0], ["g", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["d", 0], ["i", 0], ["j", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["50", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["break", 0], ["d", 0], ["i", 0], ["j", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["99", 0], ["49", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["b", 0], ["0", 0], ["break", 0], ["d", 0], ["i", 0], ["j", 0], ["b", 0], ["1", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["print", 0], ["i", 0], ["sep", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["if", 0], ["i", 0], ["50", 0], ["else", 0], ["for", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["rows", 0], ["i", 0], ["50", 0], ["clms", 0], ["i", 0], ["50", 0], ["2", 0], ["rows", 0], ["2", 0], ["ans", 0], ["rows", 0], ["2", 0], ["clms", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["rows", 0], ["i", 0], ["50", 0], ["clms", 0], ["i", 0], ["50", 0], ["2", 0], ["rows", 0], ["2", 0], ["ans", 0], ["99", 0], ["rows", 0], ["2", 0], ["clms", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["a", 0], ["in", 0], ["ans", 0], ["print", 0], ["join", 0], ["a", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["626", 0], ["a", 0], ["b", 0], ["530", 0], ["b", 0], ["h", 0], ["w", 0], ["99", 0], ["99", 0], ["s", 0], ["w", 0], ["for", 0], ["in", 0], ["range", 0], ["h", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["w", 0], ["if", 0], ["i", 0], ["0", 0], ["or", 0], ["i", 0], ["h", 0], ["1", 0], ["s", 0], ["i", 0], ["j", 0], ["continue", 0], ["if", 0], ["j", 0], ["0", 0], ["or", 0], ["j", 0], ["w", 0], ["1", 0], ["s", 0], ["i", 0], ["j", 0], ["continue", 0], ["if", 0], ["i", 0], ["4", 0], ["0", 0], ["or", 0], ["i", 0], ["4", 0], ["2", 0], ["if", 0], ["j", 0], ["4", 0], ["3", 0], ["s", 0], ["i", 0], ["j", 0], ["else", 0], ["s", 0], ["i", 0], ["j", 0], ["elif", 0], ["i", 0], ["4", 0], ["1", 0], ["if", 0], ["j", 0], ["4", 0], ["0", 0], ["or", 0], ["j", 0], ["4", 0], ["2", 0], ["s", 0], ["i", 0], ["j", 0], ["h", 0], ["w", 0], ["1", 0], ["1", 0], ["while", 0], ["a", 0], ["0", 0], ["s", 0], ["h", 0], ["w", 0], ["a", 0], ["1", 0], ["w", 0], ["4", 0], ["if", 0], ["w", 0], ["w", 0], ["w", 0], ["1", 0], ["h", 0], ["4", 0], ["h", 0], ["w", 0], ["4", 0], ["3", 0], ["while", 0], ["b", 0], ["0", 0], ["s", 0], ["h", 0], ["w", 0], ["b", 0], ["1", 0], ["w", 0], ["4", 0], ["if", 0], ["b", 0], ["0", 0], ["break", 0], ["if", 0], ["w", 0], ["w", 0], ["4", 0], ["h", 0], ["3", 0], ["s", 0], ["h", 0], ["0", 0], ["w", 0], ["3", 0], ["h", 0], ["1", 0], ["print", 0], ["99", 0], ["99", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["output", 0], ["join", 0], ["s", 0], ["i", 0], ["print", 0], ["output", 0], ["def", 0], ["printrow", 0], ["num", 0], ["s", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["res", 0], ["i", 0], ["j", 0], ["3", 0], ["0", 0], ["num", 0], ["1", 0], ["i", 0], ["0", 0], ["print", 0], ["s", 0], ["if", 0], ["res", 0], ["else", 0], ["t", 0], ["end", 0], ["num", 0], ["res", 0], ["print", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["100", 0], ["100", 0], ["printrow", 0], ["b", 0], ["printrow", 0], ["a", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["grid", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["grid", 0], ["0", 0], ["100", 0], ["acgrid", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["acgrid", 0], ["append", 0], ["1", 0], ["acgrid", 0], ["append", 0], ["1", 0], ["white", 0], ["1", 0], ["black", 0], ["1", 0], ["if", 0], ["a", 0], ["1", 0], ["and", 0], ["b", 0], ["0", 0], ["grid", 0], ["1", 0], ["1", 0], ["else", 0], ["i", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["white", 0], ["50", 0], ["a", 0], ["break", 0], ["else", 0], ["grid", 0], ["i", 0], ["acgrid", 0], ["grid", 0], ["i", 0], ["1", 0], ["1", 0], ["100", 0], ["i", 0], ["2", 0], ["white", 0], ["50", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["50", 0], ["if", 0], ["white", 0], ["a", 0], ["grid", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["grid", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["1", 0], ["white", 0], ["1", 0], ["else", 0], ["grid", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["grid", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["1", 0], ["i", 0], ["1", 0], ["grid", 0], ["i", 0], ["1", 0], ["100", 0], ["i", 0], ["1", 0], ["grid", 0], ["i", 0], ["1", 0], ["100", 0], ["i", 0], ["1", 0], ["while", 0], ["true", 0], ["if", 0], ["black", 0], ["50", 0], ["b", 0], ["break", 0], ["else", 0], ["grid", 0], ["i", 0], ["acgrid", 0], ["grid", 0], ["i", 0], ["1", 0], ["1", 0], ["100", 0], ["i", 0], ["2", 0], ["black", 0], ["50", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["50", 0], ["if", 0], ["black", 0], ["b", 0], ["grid", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["grid", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["1", 0], ["black", 0], ["1", 0], ["else", 0], ["grid", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["grid", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["1", 0], ["num", 0], ["ans", 0], ["for", 0], ["box", 0], ["in", 0], ["grid", 0], ["if", 0], ["box", 0], ["0", 0], ["0", 0], ["break", 0], ["else", 0], ["st", 0], ["for", 0], ["s", 0], ["in", 0], ["box", 0], ["if", 0], ["s", 0], ["1", 0], ["st", 0], ["elif", 0], ["s", 0], ["1", 0], ["st", 0], ["ans", 0], ["append", 0], ["st", 0], ["num", 0], ["append", 0], ["len", 0], ["ans", 0], ["num", 0], ["append", 0], ["len", 0], ["ans", 0], ["0", 0], ["print", 0], ["num", 0], ["0", 0], ["num", 0], ["1", 0], ["for", 0], ["st", 0], ["in", 0], ["ans", 0], ["print", 0], ["st", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["grid", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["50", 0], ["white", 0], ["0", 0], ["black", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["49", 0], ["if", 0], ["black", 0], ["b", 0], ["1", 0], ["break", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["continue", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["i", 0], ["2", 0], ["j", 0], ["2", 0], ["grid", 0], ["i", 0], ["j", 0], ["black", 0], ["1", 0], ["if", 0], ["black", 0], ["b", 0], ["1", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["if", 0], ["white", 0], ["a", 0], ["1", 0], ["break", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["continue", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["i", 0], ["2", 0], ["j", 0], ["2", 0], ["grid", 0], ["i", 0], ["j", 0], ["white", 0], ["1", 0], ["if", 0], ["white", 0], ["a", 0], ["1", 0], ["break", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["stri", 0], ["for", 0], ["j", 0], ["in", 0], ["grid", 0], ["i", 0], ["stri", 0], ["j", 0], ["print", 0], ["stri", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ls", 0], ["99", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["49", 0], ["99", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["49", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["ls", 0], ["i", 0], ["j", 0], ["if", 0], ["j", 0], ["97", 0], ["j", 0], ["0", 0], ["i", 0], ["2", 0], ["else", 0], ["j", 0], ["2", 0], ["i", 0], ["j", 0], ["51", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["ls", 0], ["i", 0], ["j", 0], ["if", 0], ["j", 0], ["97", 0], ["j", 0], ["0", 0], ["i", 0], ["2", 0], ["else", 0], ["j", 0], ["2", 0], ["print", 0], ["98", 0], ["99", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["98", 0], ["print", 0], ["join", 0], ["ls", 0], ["j", 0], ["import", 0], ["sys", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["grid", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["grid", 0], ["append", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["grid", 0], ["append", 0], ["100", 0], ["前半の黒い部分からa", 0], ["1箇所を白く塗る", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["if", 0], ["cnt", 0], ["a", 0], ["1", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["2", 0], ["2", 0], ["len", 0], ["grid", 0], ["i", 0], ["4", 0], ["if", 0], ["cnt", 0], ["a", 0], ["1", 0], ["break", 0], ["grid", 0], ["i", 0], ["j", 0], ["cnt", 0], ["1", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["51", 0], ["100", 0], ["if", 0], ["cnt", 0], ["b", 0], ["1", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["2", 0], ["2", 0], ["len", 0], ["grid", 0], ["i", 0], ["4", 0], ["if", 0], ["cnt", 0], ["b", 0], ["1", 0], ["break", 0], ["grid", 0], ["i", 0], ["j", 0], ["cnt", 0], ["1", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["g", 0], ["in", 0], ["grid", 0], ["print", 0], ["join", 0], ["g", 0], ["arc093d", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["b", 0], ["m", 0], ["m", 0], ["mc", 0], ["a", 0], ["mc", 0], ["b", 0], ["else", 0], ["m", 0], ["m", 0], ["mc", 0], ["b", 0], ["mc", 0], ["a", 0], ["s", 0], ["m", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["100", 0], ["tmp", 0], ["m", 23090], ["m", 23090], ["m", 23090], ["m", 23090], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["tmp2", 0], ["m", 23090], ["m", 23090], ["m", 23090], ["m", 23090], ["m", 8], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["m", 0], ["i", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["mc", 0], ["1", 0], ["u", 0], ["v", 0], ["i", 0], ["4", 0], ["100", 0], ["i", 0], ["4", 0], ["100", 0], ["u", 0], ["4", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["4", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["4", 0], ["s", 0], ["u", 0], ["x", 0], ["v", 0], ["y", 0], ["tmp", 0], ["x", 0], ["y", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["mc", 0], ["mc", 0], ["1", 0], ["u", 0], ["v", 0], ["j", 0], ["4", 0], ["100", 0], ["j", 0], ["4", 0], ["100", 0], ["u", 0], ["4", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["4", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["4", 0], ["s", 0], ["u", 0], ["x", 0], ["v", 0], ["y", 0], ["tmp2", 0], ["x", 0], ["y", 0], ["print", 0], ["100", 0], ["100", 0], ["print", 0], ["n", 0], ["join", 0], ["join", 0], ["item", 0], ["for", 0], ["item", 0], ["in", 0], ["s", 0], ["w", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["grid", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["grid", 0], ["append", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["grid", 0], ["append", 0], ["100", 0], ["w", 0], ["1", 0], ["b", 0], ["1", 0], ["cnt", 0], ["0", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["while", 0], ["cnt", 0], ["b", 0], ["grid", 0], ["i", 0], ["j", 0], ["if", 0], ["j", 0], ["98", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["elif", 0], ["j", 0], ["99", 0], ["i", 0], ["2", 0], ["j", 0], ["0", 0], ["else", 0], ["j", 0], ["2", 0], ["cnt", 0], ["1", 0], ["cnt", 0], ["0", 0], ["i", 0], ["51", 0], ["j", 0], ["0", 0], ["while", 0], ["cnt", 0], ["w", 0], ["grid", 0], ["i", 0], ["j", 0], ["if", 0], ["j", 0], ["98", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["elif", 0], ["j", 0], ["99", 0], ["i", 0], ["2", 0], ["j", 0], ["0", 0], ["else", 0], ["j", 0], ["2", 0], ["cnt", 0], ["1", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["grid", 0], ["print", 0], ["join", 0], ["grid", 0], ["i", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["u", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["s", 0], ["w", 0], ["50", 0], ["t", 0], ["w", 0], ["50", 0], ["u", 0], ["s", 0], ["2", 0], ["t", 0], ["2", 0], ["d", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["for", 0], ["b", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["u", 0], ["b", 0], ["50", 0], ["v", 0], ["b", 0], ["50", 0], ["d", 0], ["u", 0], ["2", 0], ["1", 0], ["v", 0], ["2", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["ui", 0], ["in", 0], ["u", 0], ["print", 0], ["join", 0], ["ui", 0], ["for", 0], ["di", 0], ["in", 0], ["d", 0], ["print", 0], ["join", 0], ["di", 0], ["def", 0], ["main", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["b", 0], ["1", 0], ["n", 0], ["100", 0], ["s", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["n", 0], ["a", 0], ["a", 0], ["1", 0], ["b", 0], ["b", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["2", 0], ["1", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["a", 0], ["1", 0], ["else", 0], ["break", 0], ["if", 0], ["a", 0], ["0", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["n", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["2", 0], ["if", 0], ["b", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["b", 0], ["1", 0], ["else", 0], ["break", 0], ["if", 0], ["b", 0], ["0", 0], ["break", 0], ["print", 0], ["n", 0], ["n", 0], ["print", 0], ["n", 0], ["join", 0], ["join", 0], ["s", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["from", 0], ["math", 0], ["import", 0], ["factorial", 0], ["as", 0], ["f", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["floor", 0], ["sqrt", 0], ["import", 0], ["math", 0], ["import", 0], ["bisect", 0], ["import", 0], ["re", 0], ["import", 0], ["heapq", 0], ["from", 0], ["copy", 0], ["import", 0], ["deepcopy", 0], ["import", 0], ["itertools", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["ii", 0], ["lambda", 0], ["int", 0], ["input", 0], ["mi", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["li", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["yes", 0], ["yes", 0], ["no", 0], ["no", 0], ["def", 0], ["main", 0], ["a", 0], ["b", 0], ["mi", 0], ["print", 0], ["100", 0], ["100", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["ans", 0], ["i", 0], ["append", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["ans", 0], ["i", 0], ["append", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["ans", 0], ["2", 0], ["i", 0], ["50", 0], ["2", 0], ["i", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["ans", 0], ["99", 0], ["2", 0], ["i", 0], ["50", 0], ["2", 0], ["i", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["join", 0], ["ans", 0], ["i", 0], ["main", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mat", 0], ["50", 0], ["50", 0], ["for", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["c", 0], ["51", 0], ["2", 0], ["i", 0], ["24", 0], ["d", 0], ["1", 0], ["2", 0], ["i", 0], ["24", 0], ["mat", 0], ["d", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["c", 0], ["1", 0], ["2", 0], ["i", 0], ["24", 0], ["d", 0], ["1", 0], ["2", 0], ["i", 0], ["24", 0], ["mat", 0], ["d", 0], ["c", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["x", 0], ["in", 0], ["mat", 0], ["print", 0], ["x", 0], ["sep", 0], ["def", 0], ["fill", 0], ["x", 0], ["c", 0], ["start", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["x", 0], ["q", 0], ["r", 0], ["divmod", 0], ["i", 0], ["49", 0], ["i", 0], ["q", 0], ["2", 0], ["start", 0], ["j", 0], ["r", 0], ["2", 0], ["1", 0], ["if", 0], ["q", 0], ["2", 0], ["else", 0], ["r", 0], ["2", 0], ["2", 0], ["ans", 0], ["i", 0], ["j", 0], ["c", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["w", 0], ["100", 0], ["100", 0], ["ans", 0], ["list", 0], ["w", 0], ["if", 0], ["i", 0], ["w", 0], ["2", 0], ["else", 0], ["list", 0], ["w", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["fill", 0], ["a", 0], ["1", 0], ["1", 0], ["fill", 0], ["b", 0], ["1", 0], ["h", 0], ["2", 0], ["1", 0], ["print", 0], ["h", 0], ["w", 0], ["print", 0], ["join", 0], ["row", 0], ["for", 0], ["row", 0], ["in", 0], ["ans", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["100", 0], ["w", 0], ["20", 0], ["def", 0], ["const", 0], ["s1", 0], ["s2", 0], ["ct", 0], ["ans", 0], ["s1", 0], ["w", 0], ["for", 0], ["in", 0], ["range", 0], ["h", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ct", 0], ["ans", 0], ["i", 0], ["w", 0], ["2", 0], ["2", 0], ["i", 0], ["w", 0], ["2", 0], ["2", 0], ["s2", 0], ["return", 0], ["ans", 0], ["ans1", 0], ["const", 0], ["a", 0], ["1", 0], ["ans2", 0], ["const", 0], ["b", 0], ["1", 0], ["print", 0], ["ans1", 0], ["print", 0], ["ans2", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["s1", 0], ["ans1", 0], ["i", 0], ["s2", 0], ["ans2", 0], ["i", 0], ["1", 0], ["ans", 0], ["append", 0], ["s1", 0], ["s2", 0], ["print", 0], ["join", 0], ["print", 0], ["h", 0], ["len", 0], ["ans", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["ans", 0], ["print", 0], ["type", 0], ["a", 0], ["print", 0], ["join", 0], ["a", 0], ["def", 0], ["main", 0], ["a", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["grid", 0], ["if", 0], ["i", 0], ["50", 0], ["else", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["49", 0], ["if", 0], ["h", 0], ["2", 0], ["1", 0], ["continue", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["a", 0], ["1", 0], ["grid", 0], ["h", 0], ["w", 0], ["a", 0], ["1", 0], ["else", 0], ["break", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["51", 0], ["100", 0], ["if", 0], ["h", 0], ["2", 0], ["0", 0], ["continue", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["b", 0], ["1", 0], ["grid", 0], ["h", 0], ["w", 0], ["b", 0], ["1", 0], ["else", 0], ["break", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["r", 0], ["in", 0], ["grid", 0], ["print", 0], ["join", 0], ["r", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdout", 0], ["printn", 0], ["lambda", 0], ["x", 0], ["stdout", 0], ["write", 0], ["str", 0], ["x", 0], ["inn", 0], ["lambda", 0], ["int", 0], ["input", 0], ["inl", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["inm", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ins", 0], ["lambda", 0], ["input", 0], ["strip", 0], ["dbg", 0], ["true", 0], ["and", 0], ["false", 0], ["big", 0], ["999999999", 0], ["r", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["ddprint", 0], ["x", 0], ["if", 0], ["dbg", 0], ["print", 0], ["x", 0], ["a", 0], ["b", 0], ["inm", 0], ["c", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["45", 0], ["c", 0], ["extend", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["45", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["c", 0], ["z", 0], ["25", 0], ["2", 0], ["z", 0], ["25", 0], ["2", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["c", 0], ["z", 0], ["25", 0], ["2", 0], ["50", 0], ["z", 0], ["25", 0], ["2", 0], ["print", 0], ["90", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["90", 0], ["print", 0], ["join", 0], ["c", 0], ["i", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["main", 0], ["a", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["common", 0], ["min", 0], ["a", 0], ["b", 0], ["ans", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["1", 0], ["2", 0], ["print", 0], ["return", 0], ["reverse", 0], ["false", 0], ["if", 0], ["b", 0], ["1", 0], ["reverse", 0], ["true", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["borg", 0], ["b", 0], ["aorg", 0], ["a", 0], ["arow", 0], ["a", 0], ["50", 0], ["2", 0], ["brow", 0], ["b", 0], ["50", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["brow", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["j", 0], ["2", 0], ["0", 0], ["if", 0], ["borg", 0], ["0", 0], ["ans", 0], ["i", 0], ["j", 0], ["else", 0], ["ans", 0], ["i", 0], ["j", 0], ["borg", 0], ["1", 0], ["else", 0], ["ans", 0], ["i", 0], ["j", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["ans", 0], ["i", 0], ["j", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["brow", 0], ["brow", 0], ["arow", 0], ["if", 0], ["i", 0], ["brow", 0], ["2", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["ans", 0], ["i", 0], ["j", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["j", 0], ["2", 0], ["0", 0], ["if", 0], ["aorg", 0], ["0", 0], ["ans", 0], ["i", 0], ["j", 0], ["else", 0], ["ans", 0], ["i", 0], ["j", 0], ["aorg", 0], ["1", 0], ["else", 0], ["ans", 0], ["i", 0], ["j", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["brow", 0], ["arow", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["ans", 0], ["i", 0], ["j", 0], ["print", 0], ["100", 0], ["100", 0], ["if", 0], ["reverse", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["ans", 0], ["i", 0], ["j", 0], ["print", 0], ["end", 0], ["else", 0], ["print", 0], ["end", 0], ["print", 0], ["else", 0], ["for", 0], ["a", 0], ["in", 0], ["ans", 0], ["print", 0], ["join", 0], ["a", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["from", 0], ["math", 0], ["import", 0], ["factorial", 0], ["as", 0], ["f", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["floor", 0], ["sqrt", 0], ["import", 0], ["math", 0], ["import", 0], ["bisect", 0], ["import", 0], ["re", 0], ["import", 0], ["heapq", 0], ["from", 0], ["copy", 0], ["import", 0], ["deepcopy", 0], ["import", 0], ["itertools", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["ii", 0], ["lambda", 0], ["int", 0], ["input", 0], ["mi", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["li", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["yes", 0], ["yes", 0], ["no", 0], ["no", 0], ["def", 0], ["main", 0], ["a", 0], ["b", 0], ["mi", 0], ["print", 0], ["100", 0], ["100", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["ans", 0], ["i", 0], ["append", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["ans", 0], ["i", 0], ["append", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["ans", 0], ["2", 0], ["i", 0], ["50", 0], ["2", 0], ["i", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["ans", 0], ["99", 0], ["2", 0], ["i", 0], ["50", 0], ["2", 0], ["i", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["join", 0], ["ans", 0], ["i", 0], ["main", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["lambda", 0], ["x", 0], ["int", 0], ["x", 0], ["1", 0], ["input", 0], ["split", 0], ["m", 0], ["0", 0], ["50", 0], ["1", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["x", 0], ["y", 0], ["2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["2", 0], ["if", 0], ["x", 0], ["50", 0], ["x", 0], ["0", 0], ["y", 0], ["2", 0], ["m", 0], ["y", 0], ["x", 0], ["1", 0], ["x", 0], ["y", 0], ["49", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["x", 0], ["2", 0], ["if", 0], ["x", 0], ["101", 0], ["x", 0], ["51", 0], ["y", 0], ["2", 0], ["m", 0], ["y", 0], ["x", 0], ["0", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["m", 0], ["i", 0], ["j", 0], ["1", 0], ["m", 0], ["i", 0], ["j", 0], ["end", 0], ["print", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["grid", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["grid", 0], ["append", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["grid", 0], ["append", 0], ["100", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["50", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["b", 0], ["0", 0], ["break", 0], ["grid", 0], ["i", 0], ["j", 0], ["b", 0], ["1", 0], ["else", 0], ["continue", 0], ["break", 0], ["grid", 0], ["grid", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["50", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["break", 0], ["grid", 0], ["i", 0], ["j", 0], ["a", 0], ["1", 0], ["else", 0], ["continue", 0], ["break", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["row", 0], ["in", 0], ["grid", 0], ["print", 0], ["join", 0], ["row", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["line", 0], ["join", 0], ["50", 0], ["dot", 0], ["cl", 0], ["join", 0], ["100", 0], ["join", 0], ["100", 0], ["ba", 0], ["b", 0], ["1", 0], ["a", 0], ["1", 0], ["ans", 0], ["y", 0], ["ans", 0], ["append", 0], ["for", 0], ["c", 0], ["in", 0], ["0", 0], ["1", 0], ["y", 0], ["cl", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ba", 0], ["c", 0], ["50", 0], ["y", 0], ["line", 0], ["y", 0], ["cl", 0], ["c", 0], ["y", 0], ["join", 0], ["ba", 0], ["c", 0], ["50", 0], ["cl", 0], ["c", 0], ["ba", 0], ["c", 0], ["50", 0], ["2", 0], ["y", 0], ["cl", 0], ["c", 0], ["print", 0], ["len", 0], ["ans", 0], ["100", 0], ["for", 0], ["l", 0], ["in", 0], ["ans", 0], ["print", 0], ["join", 0], ["l", 0], ["import", 0], ["sys", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["stdin", 0], ["sys", 0], ["stdin", 0], ["ri", 0], ["lambda", 0], ["int", 0], ["rs", 0], ["rl", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["applies", 0], ["to", 0], ["only", 0], ["numbers", 0], ["rs", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["ignores", 0], ["trailing", 0], ["space", 0], ["a", 0], ["b", 0], ["rl", 0], ["grid", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["row", 0], ["column", 0], ["divmod", 0], ["i", 0], ["50", 0], ["row", 0], ["2", 0], ["column", 0], ["2", 0], ["grid", 0], ["row", 0], ["column", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["row", 0], ["column", 0], ["divmod", 0], ["i", 0], ["50", 0], ["row", 0], ["2", 0], ["column", 0], ["2", 0], ["grid", 0], ["99", 0], ["row", 0], ["column", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["x", 0], ["in", 0], ["grid", 0], ["print", 0], ["x", 0], ["sep", 0], ["56", 0], ["def", 0], ["main", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["50", 0], ["gw", 0], ["2", 0], ["k", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["gb", 0], ["2", 0], ["k", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["h", 0], ["i", 0], ["k", 0], ["2", 0], ["w", 0], ["i", 0], ["k", 0], ["2", 0], ["gw", 0], ["h", 0], ["w", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["h", 0], ["i", 0], ["k", 0], ["2", 0], ["1", 0], ["w", 0], ["i", 0], ["k", 0], ["2", 0], ["1", 0], ["gb", 0], ["h", 0], ["w", 0], ["ans", 0], ["gw", 0], ["gb", 0], ["print", 0], ["2", 0], ["k", 0], ["2", 0], ["k", 0], ["for", 0], ["l", 0], ["in", 0], ["ans", 0], ["print", 0], ["l", 0], ["sep", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["626", 0], ["a", 0], ["b", 0], ["530", 0], ["b", 0], ["h", 0], ["w", 0], ["99", 0], ["99", 0], ["s", 0], ["w", 0], ["for", 0], ["in", 0], ["range", 0], ["h", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["w", 0], ["if", 0], ["i", 0], ["0", 0], ["or", 0], ["i", 0], ["h", 0], ["1", 0], ["s", 0], ["i", 0], ["j", 0], ["continue", 0], ["if", 0], ["j", 0], ["0", 0], ["or", 0], ["j", 0], ["w", 0], ["1", 0], ["s", 0], ["i", 0], ["j", 0], ["continue", 0], ["if", 0], ["i", 0], ["4", 0], ["0", 0], ["or", 0], ["i", 0], ["4", 0], ["2", 0], ["if", 0], ["j", 0], ["4", 0], ["3", 0], ["s", 0], ["i", 0], ["j", 0], ["else", 0], ["s", 0], ["i", 0], ["j", 0], ["elif", 0], ["i", 0], ["4", 0], ["1", 0], ["if", 0], ["j", 0], ["4", 0], ["0", 0], ["or", 0], ["j", 0], ["4", 0], ["2", 0], ["s", 0], ["i", 0], ["j", 0], ["h", 0], ["w", 0], ["1", 0], ["1", 0], ["while", 0], ["a", 0], ["0", 0], ["s", 0], ["h", 0], ["w", 0], ["a", 0], ["1", 0], ["w", 0], ["4", 0], ["if", 0], ["w", 0], ["w", 0], ["w", 0], ["1", 0], ["h", 0], ["4", 0], ["h", 0], ["w", 0], ["4", 0], ["3", 0], ["while", 0], ["b", 0], ["0", 0], ["s", 0], ["h", 0], ["w", 0], ["b", 0], ["1", 0], ["w", 0], ["4", 0], ["if", 0], ["b", 0], ["0", 0], ["break", 0], ["if", 0], ["w", 0], ["w", 0], ["4", 0], ["h", 0], ["3", 0], ["s", 0], ["h", 0], ["0", 0], ["w", 0], ["3", 0], ["h", 0], ["1", 0], ["print", 0], ["99", 0], ["99", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["output", 0], ["join", 0], ["s", 0], ["i", 0], ["print", 0], ["output", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["collections", 0], ["import", 0], ["bisect", 0], ["import", 0], ["itertools", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["inf", 0], ["10", 0], ["16", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["mod", 0], ["998244353", 0], ["ni", 0], ["lambda", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["ns", 0], ["lambda", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["na", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["na1", 0], ["lambda", 0], ["list", 0], ["map", 0], ["lambda", 0], ["x", 0], ["int", 0], ["x", 0], ["1", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["code", 0], ["def", 0], ["main", 0], ["w", 0], ["b", 0], ["ns", 0], ["l", 0], ["100", 0], ["mat", 0], ["for", 0], ["in", 0], ["range", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["w", 0], ["1", 0], ["and", 0], ["b", 0], ["1", 0], ["mat", 0], ["0", 0], ["0", 0], ["cnt", 0], ["0", 0], ["breakflg", 0], ["false", 0], ["tmp", 0], ["1", 0], ["if", 0], ["b", 0], ["1", 0], ["else", 0], ["0", 0], ["flg", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["l", 0], ["3", 0], ["3", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["l", 0], ["3", 0], ["3", 0], ["if", 0], ["not", 0], ["flg", 0], ["if", 0], ["cnt", 0], ["w", 0], ["tmp", 0], ["around", 0], ["center", 0], ["else", 0], ["flg", 0], ["true", 0], ["break", 0], ["if", 0], ["flg", 0], ["if", 0], ["cnt", 0], ["w", 0], ["tmp", 0], ["b", 0], ["1", 0], ["around", 0], ["center", 0], ["else", 0], ["breakflg", 0], ["true", 0], ["break", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["3", 0], ["for", 0], ["m", 0], ["in", 0], ["range", 0], ["3", 0], ["mat", 0], ["i", 0], ["n", 0], ["j", 0], ["m", 0], ["center", 0], ["if", 0], ["n", 0], ["1", 0], ["and", 0], ["m", 0], ["1", 0], ["else", 0], ["around", 0], ["cnt", 0], ["1", 0], ["if", 0], ["breakflg", 0], ["break", 0], ["print", 0], ["l", 0], ["l", 0], ["for", 0], ["mi", 0], ["in", 0], ["mat", 0], ["print", 0], ["mi", 0], ["sep", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["b", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["white", 0], ["100", 0], ["black", 0], ["100", 0], ["wb", 0], ["50", 0], ["ban", 0], ["num", 0], ["b", 0], ["b", 0], ["1", 0], ["num", 0], ["a", 0], ["a", 0], ["1", 0], ["gyo", 0], ["b", 0], ["num", 0], ["b", 0], ["50", 0], ["ret", 0], ["b", 0], ["num", 0], ["b", 0], ["50", 0], ["gyo", 0], ["a", 0], ["num", 0], ["a", 0], ["50", 0], ["ret", 0], ["a", 0], ["num", 0], ["a", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["gyo", 0], ["a", 0], ["ban", 0], ["append", 0], ["wb", 0], ["ban", 0], ["append", 0], ["white", 0], ["ban", 0], ["append", 0], ["ret", 0], ["a", 0], ["50", 0], ["ret", 0], ["a", 0], ["ban", 0], ["append", 0], ["white", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["2", 0], ["gyo", 0], ["a", 0], ["1", 0], ["ban", 0], ["append", 0], ["white", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["2", 0], ["gyo", 0], ["b", 0], ["1", 0], ["ban", 0], ["append", 0], ["black", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["gyo", 0], ["b", 0], ["ban", 0], ["append", 0], ["wb", 0], ["ban", 0], ["append", 0], ["black", 0], ["ban", 0], ["append", 0], ["ret", 0], ["b", 0], ["50", 0], ["ret", 0], ["b", 0], ["ban", 0], ["append", 0], ["black", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["item", 0], ["in", 0], ["ban", 0], ["print", 0], ["join", 0], ["item", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["90", 0], ["for", 0], ["in", 0], ["range", 0], ["40", 0], ["for", 0], ["in", 0], ["range", 0], ["90", 0], ["for", 0], ["in", 0], ["range", 0], ["40", 0], ["pos", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["pos", 0], ["90", 0], ["y", 0], ["pos", 0], ["90", 0], ["2", 0], ["ans", 0], ["y", 0], ["x", 0], ["pos", 0], ["2", 0], ["pos", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["x", 0], ["pos", 0], ["90", 0], ["y", 0], ["45", 0], ["pos", 0], ["90", 0], ["2", 0], ["ans", 0], ["y", 0], ["x", 0], ["pos", 0], ["2", 0], ["print", 0], ["80", 0], ["90", 0], ["for", 0], ["row", 0], ["in", 0], ["ans", 0], ["print", 0], ["join", 0], ["row", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["8", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["read", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readlines", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["def", 0], ["solve", 0], ["w", 0], ["100", 0], ["hw", 0], ["b", 0], ["25", 0], ["2", 0], ["hb", 0], ["a", 0], ["25", 0], ["2", 0], ["h", 0], ["hw", 0], ["hb", 0], ["grid", 0], ["i", 0], ["hw", 0], ["w", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["true", 0], ["black", 0], ["def", 0], ["paint", 0], ["black", 0], ["black", 0], ["1", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["0", 0], ["hw", 0], ["1", 0], ["2", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["0", 0], ["w", 0], ["2", 0], ["if", 0], ["black", 0], ["b", 0], ["return", 0], ["grid", 0], ["r", 0], ["c", 0], ["true", 0], ["black", 0], ["1", 0], ["def", 0], ["paint", 0], ["white", 0], ["white", 0], ["1", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["hw", 0], ["1", 0], ["h", 0], ["2", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["0", 0], ["w", 0], ["2", 0], ["if", 0], ["white", 0], ["a", 0], ["return", 0], ["grid", 0], ["r", 0], ["c", 0], ["false", 0], ["white", 0], ["1", 0], ["paint", 0], ["black", 0], ["paint", 0], ["white", 0], ["return", 0], ["grid", 0], ["def", 0], ["print", 0], ["grid", 0], ["grid", 0], ["h", 0], ["w", 0], ["len", 0], ["grid", 0], ["len", 0], ["grid", 0], ["0", 0], ["print", 0], ["h", 0], ["w", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["h", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["w", 0], ["if", 0], ["grid", 0], ["r", 0], ["c", 0], ["print", 0], ["end", 0], ["else", 0], ["print", 0], ["end", 0], ["print", 0], ["def", 0], ["starting", 0], ["point", 0], ["print", 0], ["grid", 0], ["solve", 0], ["starting", 0], ["point", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["8", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["read", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readlines", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["color", 0], ["flipped", 0], ["false", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["color", 0], ["flipped", 0], ["true", 0], ["def", 0], ["solve", 0], ["hb", 0], ["min", 0], ["b", 0], ["12", 0], ["h", 0], ["hb", 0], ["2", 0], ["1", 0], ["3", 0], ["w", 0], ["100", 0], ["if", 0], ["not", 0], ["flipped", 0], ["false", 0], ["white", 0], ["a", 0], ["true", 0], ["black", 0], ["b", 0], ["grid", 0], ["true", 0], ["w", 0], ["for", 0], ["in", 0], ["range", 0], ["h", 0], ["black", 0], ["1", 0], ["white", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["hb", 0], ["if", 0], ["black", 0], ["b", 0], ["break", 0], ["black", 0], ["1", 0], ["white", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["w", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["grid", 0], ["6", 0], ["i", 0], ["j", 0], ["3", 0], ["c", 0], ["false", 0], ["def", 0], ["paint", 0], ["white", 0], ["i", 0], ["nonlocal", 0], ["white", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["0", 0], ["w", 0], ["2", 0], ["if", 0], ["white", 0], ["a", 0], ["return", 0], ["grid", 0], ["6", 0], ["i", 0], ["1", 0], ["c", 0], ["false", 0], ["white", 0], ["1", 0], ["def", 0], ["paint", 0], ["black", 0], ["i", 0], ["nonlocal", 0], ["black", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["0", 0], ["w", 0], ["2", 0], ["if", 0], ["black", 0], ["b", 0], ["return", 0], ["grid", 0], ["6", 0], ["i", 0], ["4", 0], ["c", 0], ["true", 0], ["black", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["hb", 0], ["paint", 0], ["white", 0], ["i", 0], ["paint", 0], ["black", 0], ["i", 0], ["assert", 0], ["black", 0], ["b", 0], ["while", 0], ["white", 0], ["a", 0], ["grid", 0], ["append", 0], ["true", 0], ["w", 0], ["grid", 0], ["append", 0], ["true", 0], ["w", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["0", 0], ["w", 0], ["2", 0], ["if", 0], ["white", 0], ["a", 0], ["break", 0], ["white", 0], ["1", 0], ["grid", 0], ["1", 0], ["c", 0], ["false", 0], ["return", 0], ["grid", 0], ["def", 0], ["print", 0], ["grid", 0], ["grid", 0], ["h", 0], ["w", 0], ["len", 0], ["grid", 0], ["len", 0], ["grid", 0], ["0", 0], ["print", 0], ["h", 0], ["w", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["h", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["w", 0], ["if", 0], ["grid", 0], ["r", 0], ["c", 0], ["color", 0], ["flipped", 0], ["print", 0], ["end", 0], ["else", 0], ["print", 0], ["end", 0], ["print", 0], ["def", 0], ["starting", 0], ["point", 0], ["print", 0], ["grid", 0], ["solve", 0], ["starting", 0], ["point", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["i", 0], ["j", 0], ["3", 0], ["0", 0], ["and", 0], ["b", 0], ["1", 0], ["i", 0], ["0", 0], ["s", 0], ["append", 0], ["b", 0], ["1", 0], ["else", 0], ["s", 0], ["append", 0], ["print", 0], ["s", 0], ["sep", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["i", 0], ["j", 0], ["3", 0], ["0", 0], ["and", 0], ["a", 0], ["1", 0], ["i", 0], ["0", 0], ["s", 0], ["append", 0], ["a", 0], ["1", 0], ["else", 0], ["s", 0], ["append", 0], ["print", 0], ["s", 0], ["sep", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["def", 0], ["getnum", 0], ["t", 0], ["int", 0], ["return", 0], ["t", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["def", 0], ["numline", 0], ["t", 0], ["int", 0], ["return", 0], ["map", 0], ["t", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["split", 0], ["def", 0], ["numread", 0], ["t", 0], ["int", 0], ["return", 0], ["map", 0], ["t", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["read", 0], ["split", 0], ["def", 0], ["getstr", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["strline", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["def", 0], ["strread", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["strip", 0], ["split", 0], ["from", 0], ["numba", 0], ["import", 0], ["njit", 0], ["b1", 0], ["i4", 0], ["i8", 0], ["f8", 0], ["jit", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["def", 0], ["main", 0], ["a", 0], ["b", 0], ["numline", 0], ["s", 0], ["list", 0], ["50", 0], ["50", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["whites", 0], ["1", 0], ["blacks", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["49", 0], ["2", 0], ["if", 0], ["blacks", 0], ["b", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["49", 0], ["2", 0], ["if", 0], ["blacks", 0], ["b", 0], ["break", 0], ["s", 0], ["i", 0], ["j", 0], ["blacks", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["49", 0], ["2", 0], ["if", 0], ["whites", 0], ["a", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["51", 0], ["99", 0], ["2", 0], ["if", 0], ["whites", 0], ["a", 0], ["break", 0], ["s", 0], ["i", 0], ["j", 0], ["whites", 0], ["1", 0], ["print", 0], ["50", 0], ["100", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["print", 0], ["join", 0], ["s", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["qa", 0], ["ra", 0], ["divmod", 0], ["a", 0], ["1", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["qa", 0], ["l", 0], ["i", 0], ["2", 0], ["if", 0], ["j", 0], ["2", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["l", 0], ["qa", 0], ["2", 0], ["if", 0], ["j", 0], ["2", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["ra", 0], ["2", 0], ["100", 0], ["ra", 0], ["2", 0], ["qb", 0], ["rb", 0], ["divmod", 0], ["b", 0], ["1", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["qb", 0], ["l", 0], ["51", 0], ["i", 0], ["2", 0], ["if", 0], ["j", 0], ["2", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["l", 0], ["51", 0], ["qb", 0], ["2", 0], ["if", 0], ["j", 0], ["2", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["rb", 0], ["2", 0], ["100", 0], ["rb", 0], ["2", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["l", 0], ["in", 0], ["l", 0], ["print", 0], ["l", 0], ["sep", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["99", 0], ["if", 0], ["i", 0], ["50", 0], ["else", 0], ["99", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["100", 0], ["99", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["row", 0], ["i", 0], ["2", 0], ["99", 0], ["2", 0], ["col", 0], ["i", 0], ["2", 0], ["99", 0], ["s", 0], ["row", 0], ["col", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["row", 0], ["i", 0], ["2", 0], ["99", 0], ["2", 0], ["51", 0], ["col", 0], ["i", 0], ["2", 0], ["99", 0], ["s", 0], ["row", 0], ["col", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["i", 0], ["print", 0], ["j", 0], ["end", 0], ["print", 0], ["coding", 0], ["utf", 0], ["8", 0], ["libraries", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["import", 0], ["math", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["import", 0], ["bisect", 0], ["import", 0], ["heapq", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["constants", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["inf", 0], ["float", 0], ["inf", 0], ["az", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["functions", 0], ["input", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["input", 0], ["strip", 0], ["def", 0], ["s", 0], ["return", 0], ["input", 0], ["strip", 0], ["def", 0], ["il", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["sl", 0], ["return", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["split", 0], ["def", 0], ["ils", 0], ["n", 0], ["return", 0], ["list", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["sls", 0], ["n", 0], ["return", 0], ["list", 0], ["input", 0], ["strip", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["ill", 0], ["n", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["sll", 0], ["n", 0], ["return", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["output", 0], ["def", 0], ["p", 0], ["arg", 0], ["print", 0], ["arg", 0], ["return", 0], ["def", 0], ["y", 0], ["print", 0], ["yes", 0], ["return", 0], ["def", 0], ["n", 0], ["print", 0], ["no", 0], ["return", 0], ["def", 0], ["e", 0], ["return", 0], ["def", 0], ["pe", 0], ["arg", 0], ["print", 0], ["arg", 0], ["return", 0], ["def", 0], ["ye", 0], ["print", 0], ["yes", 0], ["return", 0], ["def", 0], ["ne", 0], ["print", 0], ["no", 0], ["return", 0], ["shorten", 0], ["def", 0], ["dd", 0], ["arg", 0], ["return", 0], ["defaultdict", 0], ["arg", 0], ["inverse", 0], ["def", 0], ["inv", 0], ["n", 0], ["return", 0], ["pow", 0], ["n", 0], ["mod", 0], ["2", 0], ["mod", 0], ["combination", 0], ["kaijo", 0], ["memo", 0], ["def", 0], ["kaijo", 0], ["n", 0], ["if", 0], ["len", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["return", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["if", 0], ["len", 0], ["kaijo", 0], ["memo", 0], ["0", 0], ["kaijo", 0], ["memo", 0], ["append", 0], ["1", 0], ["while", 0], ["len", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["kaijo", 0], ["memo", 0], ["append", 0], ["kaijo", 0], ["memo", 0], ["1", 0], ["len", 0], ["kaijo", 0], ["memo", 0], ["mod", 0], ["return", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["def", 0], ["gyaku", 0], ["kaijo", 0], ["n", 0], ["if", 0], ["len", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["return", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["if", 0], ["len", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["0", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["append", 0], ["1", 0], ["while", 0], ["len", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["append", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["1", 0], ["pow", 0], ["len", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["mod", 0], ["2", 0], ["mod", 0], ["mod", 0], ["return", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["def", 0], ["ncr", 0], ["n", 0], ["r", 0], ["if", 0], ["n", 0], ["r", 0], ["return", 0], ["1", 0], ["if", 0], ["n", 0], ["r", 0], ["or", 0], ["r", 0], ["0", 0], ["return", 0], ["0", 0], ["ret", 0], ["1", 0], ["ret", 0], ["ret", 0], ["kaijo", 0], ["n", 0], ["mod", 0], ["ret", 0], ["ret", 0], ["gyaku", 0], ["kaijo", 0], ["r", 0], ["mod", 0], ["ret", 0], ["ret", 0], ["gyaku", 0], ["kaijo", 0], ["n", 0], ["r", 0], ["mod", 0], ["return", 0], ["ret", 0], ["factorization", 0], ["def", 0], ["factorization", 0], ["n", 0], ["arr", 0], ["temp", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["1", 0], ["if", 0], ["temp", 0], ["i", 0], ["0", 0], ["cnt", 0], ["0", 0], ["while", 0], ["temp", 0], ["i", 0], ["0", 0], ["cnt", 0], ["1", 0], ["temp", 0], ["i", 0], ["arr", 0], ["append", 0], ["i", 0], ["cnt", 0], ["if", 0], ["temp", 0], ["1", 0], ["arr", 0], ["append", 0], ["temp", 0], ["1", 0], ["if", 0], ["arr", 0], ["arr", 0], ["append", 0], ["n", 0], ["1", 0], ["return", 0], ["arr", 0], ["makedivisors", 0], ["def", 0], ["make", 0], ["divisors", 0], ["n", 0], ["divisors", 0], ["for", 16], ["i", 16], ["in", 0], ["range", 0], ["1", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["divisors", 0], ["append", 0], ["i", 0], ["if", 0], ["i", 0], ["n", 0], ["i", 0], ["divisors", 0], ["append", 0], ["n", 0], ["i", 0], ["return", 0], ["divisors", 0], ["makeprimes", 0], ["def", 0], ["make", 0], ["primes", 0], ["n", 0], ["max", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["seachlist", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["primenum", 0], ["while", 0], ["seachlist", 0], ["0", 0], ["max", 0], ["primenum", 0], ["append", 0], ["seachlist", 0], ["0", 0], ["tmp", 0], ["seachlist", 0], ["0", 0], ["seachlist", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["seachlist", 0], ["if", 0], ["i", 0], ["tmp", 0], ["0", 0], ["primenum", 0], ["extend", 0], ["seachlist", 0], ["return", 0], ["primenum", 0], ["gcd", 0], ["def", 11], ["gcd", 0], ["a", 0], ["b", 0], ["while", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["lcm", 0], ["def", 0], ["lcm", 0], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["b", 0], ["gcd", 0], ["a", 0], ["b", 0], ["bitcount", 0], ["def", 0], ["count", 0], ["bit", 0], ["n", 0], ["count", 0], ["0", 0], ["while", 0], ["n", 0], ["n", 0], ["n", 0], ["1", 0], ["count", 0], ["1", 0], ["return", 0], ["count", 0], ["changebase", 0], ["def", 0], ["base", 0], ["10", 0], ["to", 0], ["n", 0], ["x", 0], ["n", 0], ["if", 0], ["x", 0], ["n", 0], ["return", 0], ["base", 0], ["10", 0], ["to", 0], ["n", 0], ["x", 0], ["n", 0], ["n", 0], ["x", 0], ["n", 0], ["return", 0], ["x", 0], ["n", 0], ["def", 0], ["base", 0], ["n", 0], ["to", 0], ["10", 0], ["x", 0], ["n", 0], ["return", 0], ["sum", 0], ["int", 0], ["str", 0], ["x", 0], ["i", 0], ["1", 0], ["n", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["str", 0], ["x", 0], ["def", 0], ["base", 0], ["10", 0], ["to", 0], ["n", 0], ["without", 0], ["0", 0], ["x", 0], ["n", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["n", 0], ["return", 0], ["base", 0], ["10", 0], ["to", 0], ["n", 0], ["without", 0], ["0", 0], ["x", 0], ["n", 0], ["n", 0], ["x", 0], ["n", 0], ["return", 0], ["x", 0], ["n", 0], ["intlog", 0], ["def", 0], ["int", 0], ["log", 0], ["n", 0], ["a", 0], ["count", 0], ["0", 0], ["while", 0], ["n", 0], ["a", 0], ["n", 0], ["a", 0], ["count", 0], ["1", 0], ["return", 0], ["count", 0], ["main", 0], ["code", 0], ["a", 0], ["b", 0], ["il", 0], ["print", 0], ["100", 0], ["100", 0], ["a", 0], ["25", 0], ["50", 0], ["a", 0], ["1", 0], ["a", 0], ["1", 0], ["b", 0], ["b", 0], ["1", 0], ["25", 0], ["50", 0], ["b", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["25", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["print", 0], ["a", 0], ["pop", 0], ["end", 0], ["if", 0], ["i", 0], ["49", 0], ["print", 0], ["else", 0], ["print", 0], ["end", 0], ["print", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["25", 0], ["print", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["print", 0], ["b", 0], ["pop", 0], ["end", 0], ["if", 0], ["i", 0], ["49", 0], ["print", 0], ["else", 0], ["print", 0], ["end", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["100", 0], ["100", 0], ["flip", 0], ["a", 0], ["b", 0], ["if", 0], ["flip", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["f", 0], ["for", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["100", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 1], ["f", 2], ["i", 0], ["j", 0], ["1", 0], ["f", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["f", 0], ["i", 0], ["1", 0], ["j", 0], ["j", 0], ["2", 0], ["if", 0], ["j", 0], ["98", 0], ["j", 0], ["0", 0], ["i", 0], ["2", 0], ["i", 0], ["j", 0], ["99", 0], ["0", 0], ["if", 0], ["b", 0], ["1", 0], ["a", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["f", 0], ["i", 0], ["j", 0], ["j", 0], ["2", 0], ["if", 0], ["j", 0], ["98", 0], ["j", 0], ["0", 0], ["i", 0], ["2", 0], ["if", 0], ["flip", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["f", 0], ["i", 0], ["list", 0], ["if", 0], ["x", 0], ["else", 0], ["for", 0], ["x", 0], ["in", 0], ["f", 0], ["i", 0], ["for", 0], ["row", 0], ["in", 0], ["f", 0], ["print", 0], ["join", 0], ["row", 0], ["w", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["w", 0], ["1", 0], ["b", 0], ["1", 0], ["print", 0], ["100", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["i", 0], ["50", 0], ["if", 0], ["i", 0], ["2", 0], ["1", 0], ["print", 0], ["a", 0], ["25", 0], ["sep", 0], ["elif", 0], ["w", 0], ["25", 0], ["and", 0], ["i", 0], ["2", 0], ["0", 0], ["print", 0], ["c", 0], ["25", 0], ["sep", 0], ["w", 0], ["25", 0], ["else", 0], ["e", 0], ["c", 0], ["w", 0], ["a", 0], ["25", 0], ["w", 0], ["print", 0], ["e", 0], ["sep", 0], ["w", 0], ["0", 0], ["else", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["print", 0], ["b", 0], ["25", 0], ["sep", 0], ["elif", 0], ["b", 0], ["25", 0], ["and", 0], ["i", 0], ["2", 0], ["1", 0], ["print", 0], ["d", 0], ["25", 0], ["sep", 0], ["b", 0], ["25", 0], ["else", 0], ["f", 0], ["d", 0], ["b", 0], ["b", 0], ["25", 0], ["b", 0], ["print", 0], ["f", 0], ["sep", 0], ["b", 0], ["0", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["break", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["ans", 0], ["h", 0], ["w", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["break", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["1", 0], ["if", 0], ["b", 0], ["0", 0], ["break", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["ans", 0], ["h", 0], ["w", 0], ["b", 0], ["1", 0], ["if", 0], ["b", 0], ["0", 0], ["break", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["a", 0], ["in", 0], ["ans", 0], ["print", 0], ["join", 0], ["a", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mat", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["array", 0], ["20", 0], ["20", 0], ["mat", 0], ["append", 0], ["array", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["j", 0], ["2", 0], ["i", 0], ["10", 0], ["k", 0], ["2", 0], ["i", 0], ["10", 0], ["mat", 0], ["j", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["j", 0], ["2", 0], ["i", 0], ["10", 0], ["k", 0], ["2", 0], ["i", 0], ["10", 0], ["21", 0], ["mat", 0], ["j", 0], ["k", 0], ["print", 0], ["100", 0], ["40", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["join", 0], ["mat", 0], ["i", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["w", 0], ["100", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["w", 0], ["for", 0], ["in", 0], ["range", 0], ["h", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["w", 0], ["if", 0], ["i", 0], ["1", 0], ["and", 0], ["j", 0], ["1", 0], ["and", 0], ["a", 0], ["1", 0], ["0", 0], ["ans", 0], ["i", 0], ["j", 0], ["a", 0], ["1", 0], ["else", 0], ["ans", 0], ["i", 0], ["j", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["1", 0], ["h", 0], ["2", 0], ["1", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["w", 0], ["if", 0], ["i", 0], ["1", 0], ["and", 0], ["j", 0], ["1", 0], ["and", 0], ["b", 0], ["1", 0], ["0", 0], ["ans", 0], ["i", 0], ["j", 0], ["b", 0], ["1", 0], ["else", 0], ["ans", 0], ["i", 0], ["j", 0], ["print", 0], ["h", 0], ["w", 0], ["for", 0], ["r", 0], ["in", 0], ["ans", 0], ["print", 0], ["join", 0], ["r", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["100", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["s", 0], ["append", 0], ["list", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["s", 0], ["append", 0], ["list", 0], ["n", 0], ["flag", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["2", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["2", 0], ["if", 0], ["b", 0], ["0", 0], ["flag", 0], ["1", 0], ["break", 0], ["else", 0], ["s", 0], ["i", 0], ["j", 0], ["b", 0], ["1", 0], ["if", 0], ["flag", 0], ["break", 0], ["flag", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["n", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["flag", 0], ["1", 0], ["break", 0], ["else", 0], ["s", 0], ["i", 0], ["j", 0], ["a", 0], ["1", 0], ["if", 0], ["flag", 0], ["break", 0], ["print", 0], ["n", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["join", 0], ["s", 0], ["i", 0], ["coding", 0], ["utf", 0], ["8", 0], ["libraries", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["import", 0], ["math", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["import", 0], ["bisect", 0], ["import", 0], ["heapq", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["constants", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["inf", 0], ["float", 0], ["inf", 0], ["az", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["functions", 0], ["input", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["input", 0], ["strip", 0], ["def", 0], ["s", 0], ["return", 0], ["input", 0], ["strip", 0], ["def", 0], ["il", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["sl", 0], ["return", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["split", 0], ["def", 0], ["ils", 0], ["n", 0], ["return", 0], ["list", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["sls", 0], ["n", 0], ["return", 0], ["list", 0], ["input", 0], ["strip", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["ill", 0], ["n", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["sll", 0], ["n", 0], ["return", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["output", 0], ["def", 0], ["p", 0], ["arg", 0], ["print", 0], ["arg", 0], ["return", 0], ["def", 0], ["y", 0], ["print", 0], ["yes", 0], ["return", 0], ["def", 0], ["n", 0], ["print", 0], ["no", 0], ["return", 0], ["def", 0], ["e", 0], ["return", 0], ["def", 0], ["pe", 0], ["arg", 0], ["print", 0], ["arg", 0], ["return", 0], ["def", 0], ["ye", 0], ["print", 0], ["yes", 0], ["return", 0], ["def", 0], ["ne", 0], ["print", 0], ["no", 0], ["return", 0], ["shorten", 0], ["def", 0], ["dd", 0], ["arg", 0], ["return", 0], ["defaultdict", 0], ["arg", 0], ["inverse", 0], ["def", 0], ["inv", 0], ["n", 0], ["return", 0], ["pow", 0], ["n", 0], ["mod", 0], ["2", 0], ["mod", 0], ["combination", 0], ["kaijo", 0], ["memo", 0], ["def", 0], ["kaijo", 0], ["n", 0], ["if", 0], ["len", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["return", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["if", 0], ["len", 0], ["kaijo", 0], ["memo", 0], ["0", 0], ["kaijo", 0], ["memo", 0], ["append", 0], ["1", 0], ["while", 0], ["len", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["kaijo", 0], ["memo", 0], ["append", 0], ["kaijo", 0], ["memo", 0], ["1", 0], ["len", 0], ["kaijo", 0], ["memo", 0], ["mod", 0], ["return", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["def", 0], ["gyaku", 0], ["kaijo", 0], ["n", 0], ["if", 0], ["len", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["return", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["if", 0], ["len", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["0", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["append", 0], ["1", 0], ["while", 0], ["len", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["append", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["1", 0], ["pow", 0], ["len", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["mod", 0], ["2", 0], ["mod", 0], ["mod", 0], ["return", 0], ["gyaku", 0], ["kaijo", 0], ["memo", 0], ["n", 0], ["def", 0], ["ncr", 0], ["n", 0], ["r", 0], ["if", 0], ["n", 0], ["r", 0], ["return", 0], ["1", 0], ["if", 0], ["n", 0], ["r", 0], ["or", 0], ["r", 0], ["0", 0], ["return", 0], ["0", 0], ["ret", 0], ["1", 0], ["ret", 0], ["ret", 0], ["kaijo", 0], ["n", 0], ["mod", 0], ["ret", 0], ["ret", 0], ["gyaku", 0], ["kaijo", 0], ["r", 0], ["mod", 0], ["ret", 0], ["ret", 0], ["gyaku", 0], ["kaijo", 0], ["n", 0], ["r", 0], ["mod", 0], ["return", 0], ["ret", 0], ["factorization", 0], ["def", 0], ["factorization", 0], ["n", 0], ["arr", 0], ["temp", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["1", 0], ["if", 0], ["temp", 0], ["i", 0], ["0", 0], ["cnt", 0], ["0", 0], ["while", 0], ["temp", 0], ["i", 0], ["0", 0], ["cnt", 0], ["1", 0], ["temp", 0], ["i", 0], ["arr", 0], ["append", 0], ["i", 0], ["cnt", 0], ["if", 0], ["temp", 0], ["1", 0], ["arr", 0], ["append", 0], ["temp", 0], ["1", 0], ["if", 0], ["arr", 0], ["arr", 0], ["append", 0], ["n", 0], ["1", 0], ["return", 0], ["arr", 0], ["makedivisors", 0], ["def", 0], ["make", 0], ["divisors", 0], ["n", 0], ["divisors", 0], ["for", 16], ["i", 16], ["in", 0], ["range", 0], ["1", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["divisors", 0], ["append", 0], ["i", 0], ["if", 0], ["i", 0], ["n", 0], ["i", 0], ["divisors", 0], ["append", 0], ["n", 0], ["i", 0], ["return", 0], ["divisors", 0], ["makeprimes", 0], ["def", 0], ["make", 0], ["primes", 0], ["n", 0], ["max", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["seachlist", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["primenum", 0], ["while", 0], ["seachlist", 0], ["0", 0], ["max", 0], ["primenum", 0], ["append", 0], ["seachlist", 0], ["0", 0], ["tmp", 0], ["seachlist", 0], ["0", 0], ["seachlist", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["seachlist", 0], ["if", 0], ["i", 0], ["tmp", 0], ["0", 0], ["primenum", 0], ["extend", 0], ["seachlist", 0], ["return", 0], ["primenum", 0], ["gcd", 0], ["def", 11], ["gcd", 0], ["a", 0], ["b", 0], ["while", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["lcm", 0], ["def", 0], ["lcm", 0], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["b", 0], ["gcd", 0], ["a", 0], ["b", 0], ["bitcount", 0], ["def", 0], ["count", 0], ["bit", 0], ["n", 0], ["count", 0], ["0", 0], ["while", 0], ["n", 0], ["n", 0], ["n", 0], ["1", 0], ["count", 0], ["1", 0], ["return", 0], ["count", 0], ["changebase", 0], ["def", 0], ["base", 0], ["10", 0], ["to", 0], ["n", 0], ["x", 0], ["n", 0], ["if", 0], ["x", 0], ["n", 0], ["return", 0], ["base", 0], ["10", 0], ["to", 0], ["n", 0], ["x", 0], ["n", 0], ["n", 0], ["x", 0], ["n", 0], ["return", 0], ["x", 0], ["n", 0], ["def", 0], ["base", 0], ["n", 0], ["to", 0], ["10", 0], ["x", 0], ["n", 0], ["return", 0], ["sum", 0], ["int", 0], ["str", 0], ["x", 0], ["i", 0], ["1", 0], ["n", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["str", 0], ["x", 0], ["def", 0], ["base", 0], ["10", 0], ["to", 0], ["n", 0], ["without", 0], ["0", 0], ["x", 0], ["n", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["n", 0], ["return", 0], ["base", 0], ["10", 0], ["to", 0], ["n", 0], ["without", 0], ["0", 0], ["x", 0], ["n", 0], ["n", 0], ["x", 0], ["n", 0], ["return", 0], ["x", 0], ["n", 0], ["intlog", 0], ["def", 0], ["int", 0], ["log", 0], ["n", 0], ["a", 0], ["count", 0], ["0", 0], ["while", 0], ["n", 0], ["a", 0], ["n", 0], ["a", 0], ["count", 0], ["1", 0], ["return", 0], ["count", 0], ["main", 0], ["code", 0], ["a", 0], ["b", 0], ["il", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["25", 0], ["p", 0], ["50", 0], ["while", 0], ["p", 0], ["if", 0], ["a", 0], ["1", 0], ["if", 0], ["p", 0], ["1", 0], ["print", 0], ["end", 0], ["a", 0], ["1", 0], ["else", 0], ["print", 0], ["a", 0], ["1", 0], ["else", 0], ["if", 0], ["p", 0], ["1", 0], ["print", 0], ["end", 0], ["else", 0], ["print", 0], ["p", 0], ["1", 0], ["print", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["25", 0], ["p", 0], ["50", 0], ["print", 0], ["100", 0], ["while", 0], ["p", 0], ["if", 0], ["b", 0], ["1", 0], ["if", 0], ["p", 0], ["1", 0], ["print", 0], ["end", 0], ["b", 0], ["1", 0], ["else", 0], ["print", 0], ["b", 0], ["1", 0], ["else", 0], ["if", 0], ["p", 0], ["1", 0], ["print", 0], ["end", 0], ["else", 0], ["print", 0], ["p", 0], ["1", 0], ["import", 0], ["sys", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["read", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readlines", 0], ["in", 0], ["n", 0], ["lambda", 0], ["int", 0], ["readline", 0], ["in", 0], ["nn", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["in", 0], ["s", 0], ["lambda", 0], ["readline", 0], ["rstrip", 0], ["decode", 0], ["utf", 0], ["8", 0], ["in", 0], ["nl", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["in", 0], ["nl2", 0], ["lambda", 0], ["h", 0], ["in", 0], ["nl", 0], ["for", 0], ["in", 0], ["range", 0], ["h", 0], ["in", 0], ["map", 0], ["lambda", 0], ["s", 0], ["ord", 0], ["for", 0], ["s", 0], ["in", 0], ["readline", 0], ["if", 0], ["s", 0], ["ord", 0], ["n", 0], ["in", 0], ["map2", 0], ["lambda", 0], ["h", 0], ["in", 0], ["map", 0], ["for", 0], ["in", 0], ["range", 0], ["h", 0], ["in", 0], ["all", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["read", 0], ["split", 0], ["def", 0], ["main", 0], ["a", 0], ["b", 0], ["in", 0], ["nn", 0], ["grid", 0], ["100", 0], ["for", 0], ["in", 1], ["range", 0], ["100", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["0", 0], ["y", 0], ["50", 0], ["grid", 0], ["y", 0], ["x", 0], ["else", 0], ["grid", 0], ["y", 0], ["x", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["49", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["y", 0], ["2", 0], ["0", 0], ["and", 0], ["x", 0], ["2", 0], ["0", 0], ["if", 0], ["a", 0], ["1", 0], ["grid", 0], ["y", 0], ["x", 0], ["a", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["51", 0], ["100", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["100", 0], ["if", 0], ["y", 0], ["2", 0], ["1", 0], ["and", 0], ["x", 0], ["2", 0], ["0", 0], ["if", 0], ["b", 0], ["1", 0], ["grid", 0], ["y", 0], ["x", 0], ["b", 0], ["1", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["join", 0], ["grid", 0], ["y", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["40", 0], ["100", 0], ["kuro", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["20", 0], ["siro", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["20", 0], ["cou", 0], ["0", 0], ["flag", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["20", 0], ["2", 0], ["if", 0], ["flag", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["cou", 0], ["a", 0], ["1", 0], ["flag", 0], ["true", 0], ["break", 0], ["elif", 0], ["cou", 0], ["a", 0], ["1", 0], ["cou", 0], ["1", 0], ["kuro", 0], ["i", 0], ["j", 0], ["cou", 0], ["0", 0], ["flag", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["20", 0], ["2", 0], ["if", 0], ["flag", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["cou", 0], ["b", 0], ["1", 0], ["flag", 0], ["true", 0], ["break", 0], ["elif", 0], ["cou", 0], ["b", 0], ["1", 0], ["cou", 0], ["1", 0], ["siro", 0], ["i", 0], ["j", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["20", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["kuro", 0], ["i", 0], ["j", 0], ["end", 0], ["print", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["20", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["siro", 0], ["i", 0], ["j", 0], ["end", 0], ["print", 0], ["b", 0], ["a", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["w", 0], ["100", 0], ["ans", 0], ["i", 0], ["50", 0], ["w", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["10", 0], ["k", 0], ["min", 0], ["a", 0], ["50", 0], ["a", 0], ["k", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["ans", 0], ["i", 0], ["2", 0], ["j", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["10", 0], ["k", 0], ["min", 0], ["b", 0], ["50", 0], ["b", 0], ["k", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["ans", 0], ["51", 0], ["i", 0], ["2", 0], ["j", 0], ["2", 0], ["if", 0], ["b", 0], ["0", 0], ["break", 0], ["print", 0], ["h", 0], ["w", 0], ["for", 0], ["row", 0], ["in", 0], ["ans", 0], ["print", 0], ["join", 0], ["row", 0], ["g", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["g", 0], ["i", 0], ["j", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["while", 0], ["a", 0], ["0", 0], ["g", 0], ["i", 0], ["j", 0], ["a", 0], ["1", 0], ["j", 0], ["2", 0], ["if", 0], ["j", 0], ["99", 0], ["j", 0], ["0", 0], ["i", 0], ["2", 0], ["i", 0], ["j", 0], ["99", 0], ["0", 0], ["while", 0], ["b", 0], ["0", 0], ["g", 0], ["i", 0], ["j", 0], ["b", 0], ["1", 0], ["j", 0], ["2", 0], ["if", 0], ["j", 0], ["99", 0], ["j", 0], ["0", 0], ["i", 0], ["2", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["join", 0], ["g", 0], ["i", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["def", 0], ["rd", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["mi", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["mf", 0], ["return", 0], ["map", 0], ["float", 0], ["input", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["lf", 0], ["return", 0], ["list", 0], ["map", 0], ["float", 0], ["input", 0], ["split", 0], ["def", 0], ["ti", 0], ["return", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["rstrip", 0], ["decode", 0], ["def", 0], ["main", 0], ["a", 0], ["b", 0], ["mi", 0], ["g", 0], ["for", 0], ["in", 0], ["range", 0], ["25", 0], ["g", 0], ["list", 0], ["25", 0], ["list", 0], ["25", 0], ["list", 0], ["25", 0], ["list", 0], ["25", 0], ["print", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["25", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["24", 0], ["if", 0], ["a", 0], ["25", 0], ["2", 0], ["g", 0], ["4", 0], ["i", 0], ["4", 0], ["j", 0], ["3", 0], ["a", 0], ["1", 0], ["else", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["25", 0], ["if", 0], ["a", 0], ["25", 0], ["2", 0], ["g", 0], ["4", 0], ["i", 0], ["3", 0], ["0", 0], ["a", 0], ["1", 0], ["else", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["25", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["25", 0], ["if", 0], ["b", 0], ["25", 0], ["2", 0], ["1", 0], ["g", 0], ["4", 0], ["i", 0], ["1", 0], ["4", 0], ["j", 0], ["1", 0], ["b", 0], ["1", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["g", 0], ["print", 0], ["i", 0], ["sep", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["exama", 0], ["c", 0], ["si", 0], ["for", 0], ["in", 0], ["range", 0], ["3", 0], ["ans", 0], ["c", 0], ["0", 0], ["0", 0], ["c", 0], ["1", 0], ["1", 0], ["c", 0], ["2", 0], ["2", 0], ["print", 0], ["ans", 0], ["return", 0], ["def", 0], ["examb", 0], ["n", 0], ["m", 0], ["li", 0], ["p", 0], ["0", 0], ["n", 0], ["s", 0], ["lsi", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["pena", 0], ["0", 0], ["ac", 0], ["set", 0], ["for", 0], ["p", 0], ["s", 0], ["in", 0], ["s", 0], ["p", 0], ["int", 0], ["p", 0], ["1", 0], ["if", 0], ["s", 0], ["wa", 0], ["p", 0], ["p", 0], ["1", 0], ["else", 0], ["if", 0], ["p", 0], ["in", 0], ["ac", 0], ["continue", 0], ["ac", 0], ["add", 0], ["p", 0], ["pena", 0], ["p", 0], ["p", 0], ["print", 0], ["len", 0], ["ac", 0], ["pena", 0], ["return", 0], ["def", 0], ["examc", 0], ["w", 0], ["h", 0], ["n", 0], ["li", 0], ["lx", 0], ["rx", 0], ["ly", 0], ["ry", 0], ["0", 0], ["w", 0], ["0", 0], ["h", 0], ["a", 0], ["li", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["x", 0], ["y", 0], ["a", 0], ["in", 0], ["a", 0], ["if", 0], ["a", 0], ["1", 0], ["lx", 0], ["max", 0], ["lx", 0], ["x", 0], ["elif", 0], ["a", 0], ["2", 0], ["rx", 0], ["min", 0], ["rx", 0], ["x", 0], ["elif", 0], ["a", 0], ["3", 0], ["ly", 0], ["max", 0], ["ly", 0], ["y", 0], ["elif", 0], ["a", 0], ["4", 0], ["ry", 0], ["min", 0], ["ry", 0], ["y", 0], ["ans", 0], ["max", 0], ["0", 0], ["rx", 0], ["lx", 0], ["max", 0], ["0", 0], ["ry", 0], ["ly", 0], ["print", 0], ["ans", 0], ["return", 0], ["def", 0], ["examd", 0], ["n", 0], ["h", 0], ["li", 0], ["b", 0], ["0", 0], ["n", 0], ["maxa", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["i", 0], ["li", 0], ["if", 0], ["a", 0], ["maxa", 0], ["maxa", 0], ["a", 0], ["b", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["for", 0], ["b", 0], ["in", 0], ["b", 0], ["if", 0], ["b", 0], ["maxa", 0], ["break", 0], ["h", 0], ["b", 0], ["ans", 0], ["1", 0], ["if", 0], ["h", 0], ["0", 0], ["print", 0], ["ans", 0], ["return", 0], ["ans", 0], ["h", 0], ["maxa", 0], ["print", 0], ["ans", 0], ["return", 0], ["def", 0], ["exame", 0], ["a", 0], ["b", 0], ["li", 0], ["ans", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["ans", 0], ["i", 0], ["j", 0], ["j", 0], ["2", 0], ["if", 0], ["j", 0], ["100", 0], ["j", 0], ["0", 0], ["i", 0], ["2", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["ans", 0], ["99", 0], ["i", 0], ["j", 0], ["j", 0], ["2", 0], ["if", 0], ["j", 0], ["100", 0], ["j", 0], ["0", 0], ["i", 0], ["2", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["v", 0], ["in", 0], ["ans", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["v", 0], ["return", 0], ["def", 0], ["examf", 0], ["ans", 0], ["0", 0], ["print", 0], ["ans", 0], ["return", 0], ["import", 0], ["sys", 0], ["bisect", 0], ["itertools", 0], ["heapq", 0], ["math", 0], ["random", 0], ["from", 0], ["copy", 0], ["import", 0], ["deepcopy", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappop", 0], ["heappush", 0], ["heapify", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["defaultdict", 0], ["deque", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["read", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["buffer", 0], ["readlines", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["readline", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["def", 0], ["lsi", 0], ["return", 0], ["list", 0], ["map", 0], ["str", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["ls", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["si", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["nonlocal", 0], ["mod", 0], ["mod2", 0], ["inf", 0], ["alphabet", 0], ["ep", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["mod2", 0], ["998244353", 0], ["inf", 0], ["10", 0], ["18", 0], ["ep", 0], ["10", 0], ["12", 0], ["alphabet", 0], ["chr", 0], ["ord", 0], ["a", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["def", 0], ["starting", 0], ["point", 0], ["exame", 0], ["142", 0], ["12", 0], ["9", 0], ["1445", 0], ["0", 0], ["1", 0], ["asd", 0], ["dfg", 0], ["hj", 0], ["o", 0], ["o", 0], ["aidn", 0], ["starting", 0], ["point", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["white", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["black", 0], ["100", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["flag", 0], ["true", 0], ["if", 0], ["b", 0], ["1", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["0", 0], ["50", 0], ["2", 0], ["if", 0], ["flag", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["white", 0], ["h", 0], ["w", 0], ["b", 0], ["1", 0], ["if", 0], ["b", 0], ["1", 0], ["flag", 0], ["false", 0], ["if", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["false", 0], ["break", 0], ["flag", 0], ["true", 0], ["if", 0], ["a", 0], ["1", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["1", 0], ["50", 0], ["2", 0], ["if", 0], ["flag", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["black", 0], ["h", 0], ["w", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["1", 0], ["flag", 0], ["false", 0], ["if", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["false", 0], ["break", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["w", 0], ["in", 0], ["white", 0], ["print", 0], ["join", 0], ["w", 0], ["for", 0], ["b", 0], ["in", 0], ["black", 0], ["print", 0], ["join", 0], ["b", 0], ["import", 0], ["sys", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["に、連結にならないように黒を置いていく", 0], ["白の場合も白黒を逆にして同じことをやれば良い", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["黒一面に白を入れていく", 0], ["if", 0], ["i", 0], ["50", 0], ["if", 0], ["a", 0], ["0", 0], ["and", 0], ["i", 0], ["2", 0], ["0", 0], ["and", 0], ["j", 0], ["2", 0], ["0", 0], ["print", 0], ["end", 0], ["a", 0], ["1", 0], ["else", 0], ["print", 0], ["end", 0], ["白一面に黒を入れていく", 0], ["elif", 0], ["50", 0], ["i", 0], ["if", 0], ["b", 0], ["0", 0], ["and", 0], ["i", 0], ["2", 0], ["1", 0], ["and", 0], ["j", 0], ["2", 0], ["0", 0], ["print", 0], ["end", 0], ["b", 0], ["1", 0], ["else", 0], ["print", 0], ["end", 0], ["if", 0], ["j", 0], ["99", 0], ["print", 0], ["ma", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lma", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["tma", 0], ["lambda", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ni", 0], ["lambda", 0], ["int", 0], ["input", 0], ["yn", 0], ["lambda", 0], ["fl", 0], ["print", 0], ["yes", 0], ["if", 0], ["fl", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["collections", 0], ["import", 0], ["math", 0], ["import", 0], ["itertools", 0], ["import", 0], ["heapq", 0], ["as", 0], ["hq", 0], ["ceil", 0], ["math", 0], ["ceil", 0], ["a", 0], ["b", 0], ["ma", 0], ["wh", 0], ["bl", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["wh", 0], ["bl", 0], ["bl", 0], ["wh", 0], ["area", 0], ["wh", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["def", 0], ["cycle", 0], ["y", 0], ["x", 0], ["f", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["y", 0], ["y", 0], ["3", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["x", 0], ["x", 0], ["3", 0], ["area", 0], ["i", 0], ["j", 0], ["bl", 0], ["if", 0], ["f", 0], ["area", 0], ["y", 0], ["1", 0], ["x", 0], ["1", 0], ["wh", 0], ["def", 0], ["solve", 0], ["cnt", 0], ["0", 0], ["iy", 0], ["0", 0], ["ix", 0], ["0", 0], ["while", 0], ["cnt", 0], ["b", 0], ["if", 0], ["cnt", 0], ["1", 0], ["a", 0], ["cycle", 0], ["iy", 0], ["ix", 0], ["else", 0], ["cycle", 0], ["iy", 0], ["ix", 0], ["f", 0], ["false", 0], ["ix", 0], ["4", 0], ["if", 0], ["ix", 0], ["95", 0], ["ix", 0], ["0", 0], ["iy", 0], ["4", 0], ["cnt", 0], ["1", 0], ["solve", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["ar", 0], ["in", 0], ["area", 0], ["print", 0], ["join", 0], ["ar", 0], ["input", 0], ["int", 0], ["input", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["list", 0], ["input", 0], ["スペースがない数字リストを読み込み", 0], ["import", 0], ["math", 0], ["import", 0], ["fractions", 0], ["import", 0], ["sys", 0], ["import", 0], ["bisect", 0], ["import", 0], ["heapq", 0], ["優先度付きキュー", 0], ["最小値取り出し", 0], ["import", 0], ["collections", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["import", 0], ["pprint", 0], ["import", 0], ["itertools", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["sr", 0], ["lambda", 0], ["input", 0], ["ir", 0], ["lambda", 0], ["int", 0], ["sr", 0], ["lr", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["sr", 0], ["split", 0], ["nを素因数分解", 0], ["2以上の整数n", 0], ["素因数", 0], ["指数", 0], ["の2次元リスト", 0], ["def", 0], ["factorization", 0], ["n", 0], ["arr", 0], ["temp", 0], ["n", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["arr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["1", 0], ["if", 0], ["temp", 0], ["i", 0], ["0", 0], ["cnt", 0], ["0", 0], ["while", 0], ["temp", 0], ["i", 0], ["0", 0], ["cnt", 0], ["1", 0], ["temp", 0], ["i", 0], ["arr", 0], ["append", 0], ["i", 0], ["cnt", 0], ["if", 0], ["temp", 0], ["1", 0], ["arr", 0], ["append", 0], ["temp", 0], ["1", 0], ["if", 0], ["arr", 0], ["arr", 0], ["append", 0], ["n", 0], ["1", 0], ["return", 0], ["arr", 0], ["a", 0], ["n", 0], ["def", 0], ["power", 0], ["a", 0], ["n", 0], ["mod", 0], ["x", 0], ["1", 0], ["while", 0], ["n", 0], ["if", 0], ["n", 0], ["1", 0], ["x", 0], ["a", 0], ["mod", 0], ["n", 0], ["1", 0], ["a", 0], ["a", 0], ["mod", 0], ["return", 0], ["x", 0], ["mod", 0], ["n", 0], ["n", 0], ["1", 0], ["l", 0], ["1", 0], ["l", 0], ["def", 0], ["kaijo", 0], ["n", 0], ["l", 0], ["mod", 0], ["if", 0], ["n", 0], ["0", 0], ["return", 0], ["1", 0], ["a", 0], ["n", 0], ["tmp", 0], ["n", 0], ["1", 0], ["while", 0], ["tmp", 0], ["l", 0], ["a", 0], ["a", 0], ["tmp", 0], ["mod", 0], ["tmp", 0], ["1", 0], ["return", 0], ["a", 0], ["union", 0], ["find", 0], ["class", 1], ["unionfind", 1], ["def", 1], ["init", 1], ["self", 1], ["n", 1], ["self", 1], ["n", 1], ["n", 1], ["self", 1], ["parents", 1], ["1", 1], ["n", 1], ["def", 1], ["find", 1], ["self", 1], ["x", 1], ["if", 1], ["self", 1], ["parents", 1], ["x", 1], ["0", 1], ["return", 1], ["x", 1], ["else", 1], ["self", 1], ["parents", 1], ["x", 1], ["self", 1], ["find", 1], ["self", 1], ["parents", 1], ["x", 1], ["return", 1], ["self", 1], ["parents", 1], ["x", 1], ["def", 1], ["union", 1], ["self", 2], ["x", 2], ["y", 2], ["x", 2], ["self", 2], ["find", 1], ["x", 1], ["y", 1], ["self", 1], ["find", 1], ["y", 1], ["if", 1], ["x", 1], ["y", 1], ["return", 1], ["if", 1], ["self", 1], ["parents", 1], ["x", 1], ["self", 1], ["parents", 1], ["y", 1], ["x", 1], ["y", 1], ["y", 1], ["x", 1], ["self", 1], ["parents", 1], ["x", 1], ["self", 1], ["parents", 1], ["y", 1], ["self", 1], ["parents", 1], ["y", 1], ["x", 1], ["def", 1], ["size", 1], ["self", 1], ["x", 1], ["return", 1], ["self", 1], ["parents", 1], ["self", 1], ["find", 1], ["x", 1], ["def", 2], ["same", 1], ["self", 1], ["x", 1], ["y", 1], ["return", 1], ["self", 1], ["find", 1], ["x", 1], ["self", 1], ["find", 1], ["y", 1], ["def", 1], ["members", 1], ["self", 1], ["x", 1], ["root", 1], ["self", 1], ["find", 1], ["x", 1], ["return", 1], ["i", 2], ["for", 2], ["i", 2], ["in", 2], ["range", 1], ["self", 1], ["n", 1], ["if", 1], ["self", 1], ["find", 1], ["i", 1], ["root", 1], ["def", 1], ["roots", 1], ["self", 1], ["return", 1], ["i", 1], ["for", 1], ["i", 1], ["x", 1], ["in", 1], ["enumerate", 1], ["self", 1], ["parents", 1], ["if", 1], ["x", 1], ["0", 1], ["def", 1], ["group", 0], ["count", 0], ["self", 0], ["return", 0], ["len", 0], ["self", 0], ["roots", 0], ["def", 0], ["all", 0], ["group", 0], ["members", 0], ["self", 0], ["return", 0], ["r", 0], ["self", 0], ["members", 0], ["r", 0], ["for", 0], ["r", 0], ["in", 0], ["self", 0], ["roots", 0], ["def", 0], ["str", 0], ["self", 0], ["return", 0], ["n", 0], ["join", 0], ["format", 0], ["r", 0], ["self", 0], ["members", 0], ["r", 0], ["for", 0], ["r", 0], ["in", 0], ["self", 0], ["roots", 0], ["約数生成", 0], ["def", 0], ["make", 0], ["divisors", 0], ["n", 0], ["divisors", 0], ["for", 16], ["i", 16], ["in", 0], ["range", 0], ["1", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["divisors", 0], ["append", 0], ["i", 0], ["if", 0], ["i", 0], ["n", 0], ["i", 0], ["divisors", 0], ["append", 0], ["n", 0], ["i", 0], ["divisors", 0], ["sort", 0], ["return", 0], ["divisors", 0], ["区間更新のみ", 0], ["class", 0], ["kukankousin", 0], ["def", 0], ["init", 0], ["self", 0], ["n", 0], ["self", 0], ["n", 0], ["n", 0], ["self", 0], ["n0", 0], ["2", 0], ["self", 0], ["n", 0], ["1", 0], ["bit", 0], ["length", 0], ["self", 0], ["data", 0], ["none", 0], ["2", 0], ["self", 0], ["n0", 0], ["self", 0], ["inf", 0], ["1", 0], ["2", 0], ["31", 0], ["1", 0], ["区間", 0], ["l", 0], ["r", 0], ["1", 0], ["の値をxに書き換える", 0], ["xは", 0], ["t", 0], ["value", 0], ["という値にする", 0], ["新しい値ほどtは大きくなる", 0], ["def", 0], ["update", 0], ["self", 0], ["l", 0], ["r", 0], ["x", 0], ["l", 0], ["l", 0], ["self", 0], ["n0", 0], ["r", 0], ["r", 0], ["self", 0], ["n0", 0], ["while", 0], ["l", 0], ["r", 0], ["if", 0], ["r", 0], ["1", 0], ["r", 0], ["1", 0], ["self", 0], ["data", 0], ["r", 0], ["1", 0], ["x", 0], ["if", 0], ["l", 0], ["1", 0], ["self", 0], ["data", 0], ["l", 0], ["1", 0], ["x", 0], ["l", 0], ["1", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["a", 0], ["iの現在の値を取得", 0], ["def", 0], ["query", 0], ["self", 0], ["k", 0], ["k", 0], ["self", 0], ["n0", 0], ["1", 0], ["s", 0], ["self", 0], ["inf", 0], ["while", 0], ["k", 0], ["0", 0], ["if", 0], ["self", 0], ["data", 0], ["k", 0], ["s", 0], ["max", 0], ["s", 0], ["self", 0], ["data", 0], ["k", 0], ["k", 0], ["k", 0], ["1", 0], ["2", 0], ["return", 0], ["s", 0], ["これを呼び出す", 0], ["def", 0], ["query", 0], ["self", 0], ["k", 0], ["return", 0], ["self", 0], ["query", 0], ["k", 0], ["1", 0], ["inf", 0], ["10", 0], ["18", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["mod", 0], ["998244353", 0], ["press", 0], ["the", 0], ["green", 0], ["button", 0], ["in", 0], ["the", 0], ["gutter", 0], ["to", 0], ["run", 0], ["the", 0], ["script", 0], ["def", 0], ["starting", 0], ["point", 0], ["a", 0], ["b", 0], ["lr", 0], ["h", 0], ["w", 0], ["96", 0], ["99", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["w", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["48", 0], ["h", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["w", 0], ["m", 0], ["i", 0], ["j", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["y", 0], ["k", 0], ["33", 0], ["x", 0], ["k", 0], ["33", 0], ["y", 0], ["y", 0], ["3", 0], ["1", 0], ["x", 0], ["x", 0], ["3", 0], ["1", 0], ["m", 0], ["y", 0], ["x", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["y", 0], ["16", 0], ["k", 0], ["33", 0], ["x", 0], ["k", 0], ["33", 0], ["y", 0], ["y", 0], ["3", 0], ["1", 0], ["x", 0], ["x", 0], ["3", 0], ["1", 0], ["m", 0], ["y", 0], ["x", 0], ["print", 0], ["h", 0], ["w", 0], ["for", 0], ["l", 0], ["in", 0], ["m", 0], ["print", 0], ["l", 0], ["sep", 0], ["starting", 0], ["point", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["w", 0], ["100", 0], ["100", 0], ["grid", 0], ["list", 0], ["w", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["list", 0], ["h", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["50", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["grid", 0], ["i", 0], ["j", 0], ["a", 0], ["1", 0], ["else", 0], ["break", 0], ["else", 0], ["continue", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["99", 0], ["50", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["100", 0], ["2", 0], ["if", 0], ["b", 0], ["0", 0], ["grid", 0], ["i", 0], ["j", 0], ["b", 0], ["1", 0], ["else", 0], ["break", 0], ["else", 0], ["continue", 0], ["break", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["join", 0], ["grid", 0], ["i", 0], ["coding", 0], ["utf", 0], ["8", 0], ["your", 0], ["code", 0], ["here", 0], ["import", 0], ["sys", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["h", 0], ["w", 0], ["100", 0], ["res", 0], ["0", 0], ["w", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["1", 0], ["w", 0], ["for", 0], ["in", 0], ["range", 0], ["50", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["q", 0], ["a", 0], ["50", 0], ["r", 0], ["a", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["res", 0], ["2", 0], ["i", 0], ["2", 0], ["1", 0], ["50", 0], ["res", 0], ["2", 0], ["q", 0], ["2", 0], ["r", 0], ["2", 0], ["1", 0], ["r", 0], ["q", 0], ["b", 0], ["50", 0], ["r", 0], ["b", 0], ["50", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["res", 0], ["2", 0], ["i", 0], ["51", 0], ["2", 0], ["0", 0], ["50", 0], ["res", 0], ["2", 0], ["q", 0], ["51", 0], ["2", 0], ["r", 0], ["2", 0], ["0", 0], ["r", 0], ["0", 0], ["黒", 0], ["print", 0], ["h", 0], ["w", 0], ["for", 0], ["ri", 0], ["in", 0], ["res", 0], ["print", 0], ["join", 0], ["if", 0], ["rij", 0], ["0", 0], ["else", 0], ["for", 0], ["rij", 0], ["in", 0], ["ri", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["z", 0], ["100", 0], ["n", 0], ["50", 0], ["for", 0], ["a", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["j", 0], ["a", 0], ["50", 0], ["z", 0], ["j", 0], ["2", 0], ["a", 0], ["50", 0], ["2", 0], ["202", 0], ["a", 0], ["50", 0], ["z2", 0], ["100", 0], ["n", 0], ["50", 0], ["for", 0], ["a", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["j", 0], ["a", 0], ["50", 0], ["z2", 0], ["j", 0], ["2", 0], ["a", 0], ["50", 0], ["2", 0], ["101", 0], ["202", 0], ["a", 0], ["50", 0], ["print", 0], ["100", 0], ["100", 0], ["print", 0], ["join", 0], ["z", 0], ["join", 0], ["z2", 0], ["from", 0], ["pprint", 0], ["import", 0], ["pprint", 0], ["def", 0], ["create", 0], ["a", 0], ["b", 0], ["is", 0], ["swapped", 0], ["false", 0], ["if", 0], ["a", 0], ["b", 0], ["larger", 0], ["a", 0], ["a", 0], ["b", 0], ["b", 0], ["larger", 0], ["is", 0], ["swapped", 0], ["true", 0], ["a", 0], ["is", 0], ["smaller", 0], ["h", 0], ["w", 0], ["99", 0], ["99", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["w", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["h", 0], ["ndot", 0], ["1", 0], ["nsharp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["h", 0], ["1", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["w", 0], ["1", 0], ["2", 0], ["dp", 0], ["i", 0], ["j", 0], ["nsharp", 0], ["1", 0], ["pprint", 0], ["dp", 0], ["print", 0], ["ndot", 0], ["nsharp", 0], ["nfill", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["h", 0], ["2", 0], ["4", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["w", 0], ["2", 0], ["4", 0], ["if", 0], ["nfill", 0], ["a", 0], ["break", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["dp", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["2", 0], ["ndot", 0], ["1", 0], ["nsharp", 0], ["3", 0], ["nfill", 0], ["1", 0], ["pprint", 0], ["dp", 0], ["delete", 0], ["isolated", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["w", 0], ["if", 0], ["nsharp", 0], ["b", 0], ["break", 0], ["else", 0], ["if", 0], ["i", 0], ["0", 0], ["or", 0], ["i", 0], ["h", 0], ["1", 0], ["or", 0], ["j", 0], ["0", 0], ["or", 0], ["j", 0], ["w", 0], ["1", 0], ["continue", 0], ["else", 0], ["if", 0], ["dp", 0], ["i", 0], ["j", 0], ["and", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["and", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["and", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["and", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["dp", 0], ["i", 0], ["j", 0], ["nsharp", 0], ["1", 0], ["pprint", 0], ["dp", 0], ["print", 0], ["ndot", 0], ["nsharp", 0], ["if", 0], ["ndot", 0], ["a", 0], ["dp", 0], ["2", 0], ["1", 0], ["ndot", 0], ["1", 0], ["pprint", 0], ["dp", 0], ["print", 0], ["ndot", 0], ["nsharp", 0], ["if", 0], ["is", 0], ["swapped", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["w", 0], ["if", 0], ["dp", 0], ["i", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["else", 0], ["dp", 0], ["i", 0], ["j", 0], ["ans", 0], ["for", 0], ["row", 0], ["in", 0], ["dp", 0], ["tmp", 0], ["join", 0], ["row", 0], ["tmp", 0], ["n", 0], ["ans", 0], ["tmp", 0], ["print", 0], ["h", 0], ["w", 0], ["print", 0], ["ans", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["create", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["if", 0], ["i", 0], ["50", 0], ["else", 0], ["for", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["d", 0], ["i", 0], ["50", 0], ["4", 0], ["i", 0], ["50", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["d", 0], ["99", 0], ["i", 0], ["50", 0], ["2", 0], ["i", 0], ["50", 0], ["2", 0], ["print", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["print", 0], ["d", 0], ["i", 0], ["sep", 0], ["def", 0], ["printrow", 0], ["num", 0], ["s", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50", 0], ["res", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.012390774960607363, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.010233933761388071, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.024402461714612852, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.01689910662550796, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.010671823520985533, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.01017941555651053, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.017818806354658653, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.016539645055102335, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nRecently Pashmak has been employed in a transportation company. The company has k buses and has a contract with a school which has n students. The school planned to take the students to d different places for d days (each day in one place). Each day the company provides all the buses for the trip. Pashmak has to arrange the students in the buses. He wants to arrange the students in a way that no two students become close friends. In his ridiculous idea, two students will become close friends if and only if they are in the same buses for all d days.\n\nPlease help Pashmak with his weird idea. Assume that each bus has an unlimited capacity.\n\n\n-----Input-----\n\nThe first line of input contains three space-separated integers n, k, d (1 ≤ n, d ≤ 1000; 1 ≤ k ≤ 10^9).\n\n\n-----Output-----\n\nIf there is no valid arrangement just print -1. Otherwise print d lines, in each of them print n integers. The j-th integer of the i-th line shows which bus the j-th student has to take on the i-th day. You can assume that the buses are numbered from 1 to k.\n\n\n-----Examples-----\nInput\n3 2 2\n\nOutput\n1 1 2 \n1 2 1 \n\nInput\n3 2 1\n\nOutput\n-1\n\n\n\n-----Note-----\n\nNote that two students become close friends only if they share a bus each day. But the bus they share can differ from day to day.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["3\n\nimport sys\n\n# 1 <= n, d <= 1000, 1 <= k <= 10**9\nn, k, d = list(map(int, sys.stdin.readline().split()))\n\nno_sol = False\nsolution = [[1 for j in range(n)] for i in range(d)]\n\n\ndef schedule(i, j, level):\n\tnonlocal no_sol\n\tif level >= d:\n\t\tno_sol = True\n\t\treturn\n\tcount = j - i\n\tchunk = count // k\n\textra = count % k\n\tr = i\n\tfor t in range(min(k, count)):\n\t\tsize = chunk + (1 if t < extra else 0)\n\t\tfor z in range(size):\n\t\t\tsolution[level][r+z] = t+1\n\t\tif size > 1:\n\t\t\tschedule(r, r + size, level + 1)\n\t\tr += size\n\nif k == 1:\n\tif n > 1:\n\t\tno_sol = True\nelse:\n\tschedule(0, n, 0)\n\nif no_sol:\n\tprint(-1)\nelse:\n\tfor l in solution:\n\t\tprint(' '.join(str(x) for x in l))\n", "n, k, d = list(map(int, input().split()))\nif k < n ** (1 / d):\n\tprint(-1)\nelse:\n\tk1 = 1\n\tfor i in range(d):\n\t\tprint(\" \".join(map(str, [(j // k1 % k) + 1 for j in range(n)])))\n\t\tk1 = k * k1\n", "n,k,d = map(int, input().split())\nif (n > k ** d):\n\tprint(-1)\n\treturn\nfor i in range(d):\n\tpower = k**i\n\tresArray = [((j // power) % k +1) for j in range(n)]\n\t#for j in range(n//(k**i)+1):\n\t#    resArray.extend([(j % k) + 1] * (k ** i))\n\tprint(' '.join(map(str,resArray)))\n", "In = lambda :  list(map(int,input().split()))\nn , k ,d = In()\nif(n > k**d):\n\tprint(-1)\nelse :\n\tk1 = 1\n\tfor i in range(d):\n\t\tprint(\" \".join(map(str, [(j // k1 % k) + 1 for j in range(n)])))\n\t\tk1 = k1 * k;\n", "n,k,d = map(int, input().split())\nif (n > k ** d):\n\tprint(-1)\n\treturn\nfor i in range(d):\n\tpower = k**i\n\tresArray = [((j // power) % k +1) for j in range(n)]\n\tprint(' '.join(map(str,resArray)))\n", "import fileinput\nimport math\n\nfor line in fileinput.input():   \n\tinp = [ int(i) for i in line.split()]\n\nn = inp[0]\nk = inp[1]\nd = inp[2]\n\n\nif n > k ** d:\n\tprint(-1)\nelse:\n\tfor i in range(d):\n\t\tpr = k**i\n\t\tresults = [(j//pr % k) + 1 for j in range(n)]\n\t\tprint(' '.join(map(str,results)))\n", "def f(t):\n\ti = -1\n\tt[i] += 1\n\twhile t[i] > k:\n\t\tt[i] = 1\n\t\ti -= 1\n\t\tt[i] += 1\n\treturn list(map(str, t))\nn, k, d = map(int, input().split())\nif k ** d < n: print(-1)\nelse:\n\tt = [1] * d\n\tt[-1] = 0\n\ts = [f(t) for i in range(n)]\n\tprint('\\n'.join([' '.join(t) for t in zip(*s)]))\n", "m=list(input().split())\nn=int(m[0])\nk=int(m[1])\nd=int(m[2])\n\nif n==1:\n\tfor i in range(d):\n\t\tprint(\"1\")\n\treturn\nif k==1:\n\tprint(\"-1\")\n\treturn\nif k>=n:\n\tm=list(i for i in range(n))\n\to=\"\"\n\tfor j in range(1,n+1):\n\t\to+=\" \"+str(j)\n\to=o[1:] \n\tfor i in range(d):\n\t\tprint(o)\n\treturn\nif d==1:\n\tprint('-1')\n\treturn\nif d>=n:\n\tm=list(\"1\" for i in range(n))\n\tfor i in range(n):\n\t\tm[i]=\"2\"\n\t\t#print(m)\n\t\to=str(m[0])\n\t\tfor j in range(1,n):\n\t\t\to+=\" \"+str(m[j])\n\t\tprint(o)\n\t\t#m[i]=\"1\"\n\tfor i in range(n,d):\n\t\t#print(m)\n\t\tprint(o)\n\treturn\n\nfrom math import ceil, floor\ntc=ceil(n/k) #days\ntf=floor(n/k) #len k\n\nif n>(k**d):\n\tprint('-1')\n\treturn\n\nsc=1\nfor stp in range(1,d+1):\n\to=\"\"\n\tkc=0\n\t\n\twhile kc<n:\n\t\tfor kk in range(1,k+1):\n\t\t\tfor i in range (sc):\n\t\t\t\tif kc<n:\n\t\t\t\t\to+=' '+str(kk)\n\t\t\t\t\tkc+=1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\tsc*=k #change from 2\n\tprint(o[1:])\n", "#!/usr/bin/env python3\n\nn, k, d = list(map(int, input().split()))\nif k ** d < n:\n\tprint(-1)\nelse:\n\tfor i in range(d):\n\t\tp = k ** i\n\t\tarr = [j // p % k + 1 for j in range(n)]\n\t\tprint(' '.join(map(str, arr)))\n", "#http://codeforces.com/problemset/problem/459/C\n\n# Input of the values\nn, k, d = list(map(int, input().split()))\n\n#Convention : \tBusses are numbered from 1 to k\n#\t\t\t\tStudents are numbered from 0 to k - 1\n# \t\t\t\tDays are numbered from 0 to k - 1\n\n# Variable for success\nsuccess = True\n\n# answer is a  2-d array that stores the bus number each student used on a particular day\n# Students are numbered from 0 to n-1\nanswer = [[] for x in range(n)]\n\n# Initialising the first students details manually\n# The first student uses the bus 1 for all of the days\nanswer[0] = [1 for x in range(d)]\n\n# we will be filling the details for each and every student and \n# would print -1 only if we cannot allot any bus number to the next student\nfor i_th_student in range(1,n):\n\t\n\t#answer for previous value\n\ti_minus_one_student = answer[i_th_student - 1]\n\n\t# Answer to the current student\n\tcurrent_student = list(i_minus_one_student)\n\n\t# Days are also numbered from 0 to d-1\n\tfor i_th_day in reversed(list(range(d))):\n\n\t\t# the condition to change the bus number \n\t\tif i_minus_one_student[i_th_day] < k :\n\n\t\t\tcurrent_student[i_th_day] += 1\n\n\t\t\t# all the numbers next to it are reset\n\t\t\tfor i in range(i_th_day + 1, d):\n\t\t\t\tcurrent_student[i] = 1\n\t\t\t\n\t\t\tbreak\n\t\n\t#Save the value\n\tanswer[i_th_student] = current_student\n\t\n\t#Failed\n\tif current_student == i_minus_one_student:\n\t\tsuccess = False\n\t\tbreak\n\n# printing the output\nif not(success):\n\tprint (\"-1\")\n\nelse:\n\t# ans_trans is used for giving the output fast\n\tanswer_trans= [[] for i in range(d)]\n\tfor y in range(n):\n\t\ti = 0\n\t\tfor x in answer[y]:\n\t\t\tanswer_trans[i].append(x)\n\t\t\ti += 1\n\tfor bla in answer_trans:\n\t\tprint(' '.join(map(str, bla)))\n", "load = [int(i) for i in input().split()]\n\nn = load[0]\nk = load[1]\nd = load[2]\n\np = 1\nfor i in range(d):\n\tp *= k\n\tif p >= n:\n\t\tbreak\n\nif n > p:\n\tprint(-1)\nelse:\n\tnums = [i for i in range(n)]\n\tfor i in range(d):\n\t\tbuff = \"\"\n\t\tfor j in range(n):\n\t\t\tbuff += str(nums[j] % k + 1) + ' '\n\t\t\tnums[j] //= k\n\t\tprint(buff)\n\n\t\n", "def f(t):\n\ti = -1\n\tt[i] += 1\n\twhile t[i] > k:\n\t\tt[i] = 1\n\t\ti -= 1\n\t\tt[i] += 1\n\treturn list(map(str, t))\nn, k, d = map(int, input().split())\nif k ** d < n: print(-1)\nelse:\n\tt = [1] * d\n\tt[-1] = 0\n\ts = [f(t) for i in range(n)]\n\tprint('\\n'.join([' '.join(t) for t in zip(*s)]))\n", "3\n\nimport sys\n\nn, k, d = list(map(int, sys.stdin.readline().split()))\n\nx = 1\nwhile x ** d < n:\n\tx += 1\n\t\nif x > k:\n\tsys.stdout.write(\"-1\\n\")\n\treturn\n\t\nans = [[1 for i in range(d)] for j in range(n)]\nfor i in range(1, n):\n\tfor j in range(d): \n\t\tans[i][j] = ans[i - 1][j]\n\tans[i][d - 1] += 1\n\tmemo = 0\n\tfor j in range(d - 1, -1, -1):\n\t\tans[i][j] += memo\n\t\tmemo = 0\n\t\tif ans[i][j] > x:\n\t\t\tmemo = ans[i][j] - x\n\t\t\tans[i][j] = 1\n\t\t\t\nfor i in range(d):\n\tsys.stdout.write(' '.join([str(ans[j][i]) for j in range(n)]) + '\\n')\n", "3\n\nimport sys\n\nn, k, d = list(map(int, sys.stdin.readline().split()))\n\nx = 1\nwhile x ** d < n:\n\tx += 1\n\t\nif x > k:\n\tsys.stdout.write(\"-1\\n\")\n\treturn\n\t\nans = [[1 for i in range(n)] for j in range(d)]\nfor i in range(1, n):\n\tfor j in range(d): \n\t\tans[j][i] = ans[j][i - 1]\n\tans[d - 1][i] += 1\n\tmemo = 0\n\tfor j in range(d - 1, -1, -1):\n\t\tans[j][i] += memo\n\t\tmemo = 0\n\t\tif ans[j][i] > x:\n\t\t\tmemo = ans[j][i] - x\n\t\t\tans[j][i] = 1\n\t\t\t\nfor i in range(d):\n\tsys.stdout.write(' '.join(map(str, ans[i])) + '\\n')\n", "n, k, d = [int(k) for k in input().split()]\nbase_rep = [[0 for _ in range(d)] for _ in range(n)]\n\n\nif k**d  < n:\n\tprint(-1)\nelse:\n\tfor j in range(n):\n\t\tnum = j\n\t\ti=0\n\t\twhile num >= k**i:\n\t\t   i+=1\n\t\ti-=1\n\t\t#print(i)\n\t\twhile num:\n\t\t\tbase_rep[j-1][i] = num//k**i\n\t\t\tnum = num % k**i\n\t\t\ti -=1\n\tfor i in range(d):\n\t\ts =\"\"\n\t\tfor j in range(n):\n\t\t\ts += str(base_rep[j][i]+1) + \" \"\n\t\tprint(s)\n", "def add1(array, base):\n\tarray[-1] += 1\n\tarray = [0] + array\n\tk= len(array)-1\n\twhile array[k]>=base:\n\t\tarray[k] -= base\n\t\tarray[k-1] += 1\n\t\tk -= 1\n\tif array[0] == 0:\n\t\treturn array[1:]\n\treturn array\n\n\nn, k, d = list(map(int, input().split(' ')))\nif n == 1:\n\tfor i in range(d):\n\t\tprint(1)\n\tquit()\nif n > k**d:\n\tprint(\"-1\")\n\n\tquit()\narr = []\narray = [0]*d\nfor i in range(n):\n\tarr.append(array)\n\tarray = add1(array[:], k)\n\nnew = [[0]*len(arr) for _ in range(len(arr[0]))]\nfor i in range(len(arr)):\n\tfor j in range(len(arr[0])):\n\t\tnew[j][i] = arr[i][j]+1\n\nfor i in new:\n\tprint(' '.join([str(x) for x in i]))\n", "n,k,d=list(map(int,input().split()))\nif n>k**d:print((-1));return\nK=1\nfor j in range(d):\n\tprint(\" \".join([str(i//K%k +1) for i in range(n)]))\n\tK*=k\n", "a = input()\nb = a.split()\nn = int(b[0])\nk = int(b[1])\nd = int(b[2])\nif n > k**d:\n\tprint(-1)\n\treturn\ntable = [[1]*d]\nfor i in range(n - 1):\n\tv = list(table[-1])\n\tj = len(v)-1\n\twhile v[j]==k:\n\t\tv[j]=1\n\t\tj = j - 1\n\tv[j] = v[j] + 1\n\ttable.append(v)\ncurrent_power = 1\nanswer = [0] * n\nfor m in range(0, d):\n\tcurrent_value = 1\n\tfor s in range(0, n):\n\t\tif s % current_power == 0 and s > 0:\n\t\t\tcurrent_value = current_value % k + 1\n\t\tanswer[s] = str(current_value)\n\tcurrent_power *= k\n\tprint(\" \".join(answer))\n", "a = input()\nb = a.split()\nn = int(b[0])\nk = int(b[1])\nd = int(b[2])\nraw = [' ']*n\nif n > k**d:\n\tprint(-1)\n\treturn\ntable = [[1]*d]\np = 1\nfor i in range(d):\n\tcv = 1\n\tfor j in range(n):\n\t\tif j % p == 0 and j != 0:\n\t\t\tcv = cv + 1\n\t\t\tif cv == k+1:\n\t\t\t\tcv = 1\n\t\traw[j]= str(cv)\n\tprint(' '.join(raw))\n\tp = p * k\n", "n,k,d=map(int,input().split())\nif n>k**d:print(-1);return\nK=1\nfor j in range(d):\n\tprint(\" \".join([str(i//K%k +1) for i in range(n)]))\n\tK*=k\n", "# -*- coding: utf-8 -*-\nimport sys\n\ndef main():\n\tn,k,d = map(int,sys.stdin.readline().split())\n\n\tblocksize = n\n\n\tfor i in range(d):\n\t\tblocksize = blocksize//k + (blocksize%k != 0)\n\t# print(blocksize)\n\n\tif(blocksize > 1):\n\t\tprint(\"-1\")\n\t\treturn\n\n\tfor days in range(d):\n\t\ti = 0\n\t\tbus = 1\n\t\twhile i < n:\n\t\t\tfor j in range(blocksize):\n\t\t\t\tsys.stdout.write(str(bus) + ' ')\n\t\t\t\ti += 1\n\t\t\t\tif i == n: break\n\t\t\tbus += 1\n\t\t\tif(bus > k): bus = 1\n\t\tblocksize *= k\n\t\tsys.stdout.write('\\n')\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n,k,d=map(int,input().split())\nif n>k**d:print(-1);return\nK=1\nfor j in range(d):\n\tprint(\" \".join([str(i//K%k +1) for i in range(n)]))\n\tK*=k\n", "import math \nn,k,d = list(map(int,input().split()))\n# if math.log(n)>d*math.log(k): chadar%\nif n>k**d:\n\tprint(-1)\nelse:\n\t# no pgh shit \n\tt = 1\n\tfor i in range(d):\n\t\tli = []\n\t\tfor j in range(n):\n\t\t\tli.append((j//t)%k+1)\n\t\tprint(*li)\n\t\tt*=k\n", "n,k,d=list(map(int,input().split()))\nif n>k**d:print((-1));return\nK=1\nfor j in range(d):\n\tprint(\" \".join([str(i//K%k +1) for i in range(n)]))\n\tK*=k\n\n", "n,k,d=list(map(int,input().split()))\nif n>k**d:print((-1));return\nK=1\nfor j in range(d):\n\tprint(\" \".join([str(i//K%k +1) for i in range(n)]))\n\tK*=k\n\n"], "id": "id9718"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9718", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["recently", 0], ["pashmak", 0], ["has", 0], ["been", 0], ["employed", 0], ["in", 0], ["a", 0], ["transportation", 0], ["company", 0], ["the", 0], ["company", 0], ["has", 0], ["k", 0], ["buses", 0], ["and", 0], ["has", 0], ["a", 0], ["contract", 0], ["with", 0], ["a", 0], ["school", 0], ["which", 0], ["has", 0], ["n", 1], ["students", 1], ["the", 1], ["school", 1], ["planned", 0], ["to", 0], ["take", 0], ["the", 0], ["students", 0], ["to", 0], ["d", 0], ["different", 0], ["places", 0], ["for", 0], ["d", 0], ["days", 0], ["each", 0], ["day", 0], ["in", 0], ["one", 0], ["place", 0], ["each", 0], ["day", 0], ["the", 0], ["company", 0], ["provides", 0], ["all", 0], ["the", 0], ["buses", 0], ["for", 0], ["the", 0], ["trip", 0], ["pashmak", 0], ["has", 0], ["to", 0], ["arrange", 0], ["the", 0], ["students", 0], ["in", 0], ["the", 0], ["buses", 0], ["he", 0], ["wants", 0], ["to", 0], ["arrange", 0], ["the", 0], ["students", 0], ["in", 0], ["a", 0], ["way", 0], ["that", 0], ["no", 0], ["two", 0], ["students", 0], ["become", 0], ["close", 0], ["friends", 0], ["in", 0], ["his", 0], ["ridiculous", 0], ["idea", 0], ["two", 1], ["students", 1], ["will", 1], ["become", 1], ["close", 1], ["friends", 1], ["if", 1], ["and", 1], ["only", 0], ["if", 0], ["they", 0], ["are", 0], ["in", 0], ["the", 0], ["same", 0], ["buses", 0], ["for", 0], ["all", 0], ["d", 0], ["days", 0], ["please", 0], ["help", 0], ["pashmak", 0], ["with", 0], ["his", 0], ["weird", 0], ["idea", 0], ["assume", 0], ["that", 0], ["each", 0], ["bus", 0], ["has", 0], ["an", 0], ["unlimited", 0], ["capacity", 0], ["input", 1], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["three", 1], ["space", 1], ["separated", 1], ["integers", 1], ["n", 1], ["k", 0], ["d", 0], ["1", 0], ["≤", 0], ["n", 0], ["d", 0], ["≤", 0], ["1000", 0], ["1", 0], ["≤", 0], ["k", 0], ["≤", 0], ["10", 0], ["9", 0], ["output", 1], ["if", 1], ["there", 1], ["is", 1], ["no", 1], ["valid", 1], ["arrangement", 1], ["just", 1], ["print", 1], ["1", 1], ["otherwise", 1], ["print", 1], ["d", 1], ["lines", 1], ["in", 1], ["each", 1], ["of", 1], ["them", 1], ["print", 1], ["n", 1], ["integers", 1], ["the", 1], ["j", 1], ["th", 1], ["integer", 1], ["of", 1], ["the", 1], ["i", 1], ["th", 1], ["line", 1], ["shows", 1], ["which", 1], ["bus", 1], ["the", 1], ["j", 1], ["th", 1], ["student", 1], ["has", 1], ["to", 1], ["take", 1], ["on", 1], ["the", 1], ["i", 1], ["th", 1], ["day", 1], ["you", 0], ["can", 0], ["assume", 0], ["that", 0], ["the", 0], ["buses", 0], ["are", 0], ["numbered", 0], ["from", 0], ["1", 0], ["to", 0], ["k", 0], ["examples", 0], ["input", 1], ["3", 1], ["2", 1], ["2", 1], ["output", 1], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["input", 0], ["3", 0], ["2", 0], ["1", 0], ["output", 0], ["1", 0], ["note", 0], ["note", 0], ["that", 0], ["two", 0], ["students", 0], ["become", 0], ["close", 0], ["friends", 0], ["only", 0], ["if", 0], ["they", 0], ["share", 0], ["a", 0], ["bus", 0], ["each", 0], ["day", 0], ["but", 0], ["the", 0], ["bus", 0], ["they", 0], ["share", 0], ["can", 0], ["differ", 0], ["from", 0], ["day", 0], ["to", 0], ["day", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3008130081300813, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3008130081300813, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5193798449612403, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5193798449612403, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3008130081300813, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3008130081300813, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5193798449612403, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5193798449612403, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["3", 0], ["import", 0], ["sys", 0], ["1", 0], ["n", 0], ["d", 0], ["1000", 0], ["1", 0], ["k", 0], ["10", 0], ["9", 0], ["n", 0], ["k", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["no", 0], ["sol", 0], ["false", 0], ["solution", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["def", 0], ["schedule", 0], ["i", 0], ["j", 0], ["level", 0], ["nonlocal", 0], ["no", 0], ["sol", 0], ["if", 0], ["level", 0], ["d", 0], ["no", 0], ["sol", 0], ["true", 0], ["return", 0], ["count", 0], ["j", 0], ["i", 0], ["chunk", 0], ["count", 0], ["k", 0], ["extra", 0], ["count", 0], ["k", 0], ["r", 0], ["i", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["min", 0], ["k", 0], ["count", 0], ["size", 0], ["chunk", 0], ["1", 0], ["if", 0], ["t", 0], ["extra", 0], ["else", 0], ["0", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["size", 0], ["solution", 0], ["level", 0], ["r", 0], ["z", 0], ["t", 0], ["1", 0], ["if", 0], ["size", 0], ["1", 0], ["schedule", 0], ["r", 0], ["r", 0], ["size", 0], ["level", 0], ["1", 0], ["r", 0], ["size", 0], ["if", 0], ["k", 0], ["1", 0], ["if", 0], ["n", 0], ["1", 0], ["no", 0], ["sol", 0], ["true", 0], ["else", 0], ["schedule", 0], ["0", 0], ["n", 0], ["0", 0], ["if", 0], ["no", 0], ["sol", 0], ["print", 0], ["1", 0], ["else", 0], ["for", 0], ["l", 0], ["in", 0], ["solution", 0], ["print", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["n", 0], ["k", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["n", 0], ["1", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["k1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["j", 0], ["k1", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["k1", 0], ["k", 0], ["k1", 0], ["n", 0], ["k", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["power", 0], ["k", 0], ["i", 0], ["resarray", 0], ["j", 0], ["power", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["i", 0], ["1", 0], ["resarray", 0], ["extend", 0], ["j", 0], ["k", 0], ["1", 0], ["k", 0], ["i", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["resarray", 0], ["in", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["d", 0], ["in", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["k1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["j", 0], ["k1", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["k1", 0], ["k1", 0], ["k", 0], ["n", 0], ["k", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["power", 0], ["k", 0], ["i", 0], ["resarray", 0], ["j", 0], ["power", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["resarray", 0], ["import", 0], ["fileinput", 0], ["import", 0], ["math", 0], ["for", 0], ["line", 0], ["in", 0], ["fileinput", 0], ["input", 0], ["inp", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["line", 0], ["split", 0], ["n", 0], ["inp", 0], ["0", 0], ["k", 0], ["inp", 0], ["1", 0], ["d", 0], ["inp", 0], ["2", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["pr", 0], ["k", 0], ["i", 0], ["results", 0], ["j", 0], ["pr", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["results", 0], ["def", 0], ["f", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["while", 0], ["t", 0], ["i", 0], ["k", 0], ["t", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["return", 0], ["list", 0], ["map", 0], ["str", 0], ["t", 0], ["n", 0], ["k", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["d", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["t", 0], ["1", 0], ["d", 0], ["t", 0], ["1", 0], ["0", 0], ["s", 0], ["f", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["n", 0], ["join", 0], ["join", 0], ["t", 0], ["for", 0], ["t", 0], ["in", 0], ["zip", 0], ["s", 0], ["m", 0], ["list", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["m", 0], ["0", 0], ["k", 0], ["int", 0], ["m", 0], ["1", 0], ["d", 0], ["int", 0], ["m", 0], ["2", 0], ["if", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["k", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["k", 0], ["n", 0], ["m", 0], ["list", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["o", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["o", 0], ["str", 0], ["j", 0], ["o", 0], ["o", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["print", 0], ["o", 0], ["return", 0], ["if", 0], ["d", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["d", 0], ["n", 0], ["m", 0], ["list", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["m", 0], ["i", 0], ["2", 0], ["print", 0], ["m", 0], ["o", 0], ["str", 0], ["m", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["o", 0], ["str", 0], ["m", 0], ["j", 0], ["print", 0], ["o", 0], ["m", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["print", 0], ["m", 0], ["print", 0], ["o", 0], ["return", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["floor", 0], ["tc", 0], ["ceil", 0], ["n", 0], ["k", 0], ["days", 0], ["tf", 0], ["floor", 0], ["n", 0], ["k", 0], ["len", 0], ["k", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["return", 0], ["sc", 0], ["1", 0], ["for", 0], ["stp", 0], ["in", 0], ["range", 0], ["1", 0], ["d", 0], ["1", 0], ["o", 0], ["kc", 0], ["0", 0], ["while", 0], ["kc", 0], ["n", 0], ["for", 0], ["kk", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["sc", 0], ["if", 0], ["kc", 0], ["n", 0], ["o", 0], ["str", 0], ["kk", 0], ["kc", 0], ["1", 0], ["else", 0], ["break", 0], ["sc", 0], ["k", 0], ["change", 0], ["from", 0], ["2", 0], ["print", 0], ["o", 0], ["1", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["n", 0], ["k", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["d", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["p", 0], ["k", 0], ["i", 0], ["arr", 0], ["j", 0], ["p", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["arr", 0], ["http", 0], ["codeforces", 0], ["com", 0], ["problemset", 0], ["problem", 0], ["459", 0], ["c", 0], ["input", 0], ["of", 0], ["the", 0], ["values", 0], ["n", 0], ["k", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["convention", 0], ["busses", 0], ["are", 0], ["numbered", 0], ["from", 0], ["1", 0], ["to", 0], ["k", 0], ["students", 0], ["are", 0], ["numbered", 0], ["from", 0], ["0", 0], ["to", 0], ["k", 0], ["1", 0], ["days", 0], ["are", 0], ["numbered", 0], ["from", 0], ["0", 0], ["to", 0], ["k", 0], ["1", 0], ["variable", 0], ["for", 0], ["success", 0], ["success", 0], ["true", 0], ["answer", 0], ["is", 0], ["a", 0], ["2", 0], ["d", 0], ["array", 0], ["that", 0], ["stores", 0], ["the", 0], ["bus", 0], ["number", 0], ["each", 0], ["student", 0], ["used", 0], ["on", 0], ["a", 0], ["particular", 0], ["day", 0], ["students", 0], ["are", 0], ["numbered", 0], ["from", 0], ["0", 0], ["to", 0], ["n", 0], ["1", 0], ["answer", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["initialising", 0], ["the", 0], ["first", 0], ["students", 0], ["details", 0], ["manually", 0], ["the", 0], ["first", 0], ["student", 0], ["uses", 0], ["the", 0], ["bus", 0], ["1", 0], ["for", 0], ["all", 0], ["of", 0], ["the", 0], ["days", 0], ["answer", 0], ["0", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["d", 0], ["we", 0], ["will", 0], ["be", 0], ["filling", 0], ["the", 0], ["details", 0], ["for", 0], ["each", 0], ["and", 0], ["every", 0], ["student", 0], ["and", 0], ["would", 0], ["print", 0], ["1", 0], ["only", 0], ["if", 0], ["we", 0], ["cannot", 0], ["allot", 0], ["any", 0], ["bus", 0], ["number", 0], ["to", 0], ["the", 0], ["next", 0], ["student", 0], ["for", 0], ["i", 0], ["th", 0], ["student", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["answer", 0], ["for", 0], ["previous", 0], ["value", 0], ["i", 0], ["minus", 0], ["one", 0], ["student", 0], ["answer", 0], ["i", 0], ["th", 0], ["student", 0], ["1", 0], ["answer", 0], ["to", 0], ["the", 0], ["current", 0], ["student", 0], ["current", 0], ["student", 0], ["list", 0], ["i", 0], ["minus", 0], ["one", 0], ["student", 0], ["days", 0], ["are", 0], ["also", 0], ["numbered", 0], ["from", 0], ["0", 0], ["to", 0], ["d", 0], ["1", 0], ["for", 0], ["i", 0], ["th", 0], ["day", 0], ["in", 0], ["reversed", 0], ["list", 0], ["range", 0], ["d", 0], ["the", 0], ["condition", 0], ["to", 0], ["change", 0], ["the", 0], ["bus", 0], ["number", 0], ["if", 0], ["i", 0], ["minus", 0], ["one", 0], ["student", 0], ["i", 0], ["th", 0], ["day", 0], ["k", 0], ["current", 0], ["student", 0], ["i", 0], ["th", 0], ["day", 0], ["1", 0], ["all", 0], ["the", 0], ["numbers", 0], ["next", 0], ["to", 0], ["it", 0], ["are", 0], ["reset", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["i", 0], ["th", 0], ["day", 0], ["1", 0], ["d", 0], ["current", 0], ["student", 0], ["i", 0], ["1", 0], ["break", 0], ["save", 0], ["the", 0], ["value", 0], ["answer", 0], ["i", 0], ["th", 0], ["student", 0], ["current", 0], ["student", 0], ["failed", 0], ["if", 0], ["current", 0], ["student", 0], ["i", 0], ["minus", 0], ["one", 0], ["student", 0], ["success", 0], ["false", 0], ["break", 0], ["printing", 0], ["the", 0], ["output", 0], ["if", 0], ["not", 0], ["success", 0], ["print", 0], ["1", 0], ["else", 0], ["ans", 0], ["trans", 0], ["is", 0], ["used", 0], ["for", 0], ["giving", 0], ["the", 0], ["output", 0], ["fast", 0], ["answer", 0], ["trans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["n", 0], ["i", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["answer", 0], ["y", 0], ["answer", 0], ["trans", 0], ["i", 0], ["append", 0], ["x", 0], ["i", 0], ["1", 0], ["for", 0], ["bla", 0], ["in", 0], ["answer", 0], ["trans", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["bla", 0], ["load", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["load", 0], ["0", 0], ["k", 0], ["load", 0], ["1", 0], ["d", 0], ["load", 0], ["2", 0], ["p", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["p", 0], ["k", 0], ["if", 0], ["p", 0], ["n", 0], ["break", 0], ["if", 0], ["n", 0], ["p", 0], ["print", 0], ["1", 0], ["else", 0], ["nums", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["buff", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["buff", 0], ["str", 0], ["nums", 0], ["j", 0], ["k", 0], ["1", 0], ["nums", 0], ["j", 0], ["k", 0], ["print", 0], ["buff", 0], ["def", 0], ["f", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["while", 0], ["t", 0], ["i", 0], ["k", 0], ["t", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["return", 0], ["list", 0], ["map", 0], ["str", 0], ["t", 0], ["n", 0], ["k", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["d", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["t", 0], ["1", 0], ["d", 0], ["t", 0], ["1", 0], ["0", 0], ["s", 0], ["f", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["n", 0], ["join", 0], ["join", 0], ["t", 0], ["for", 0], ["t", 0], ["in", 0], ["zip", 0], ["s", 0], ["3", 0], ["import", 0], ["sys", 0], ["n", 0], ["k", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["x", 0], ["1", 0], ["while", 0], ["x", 0], ["d", 0], ["n", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["k", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["1", 0], ["n", 0], ["return", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["d", 0], ["ans", 0], ["i", 0], ["j", 0], ["ans", 0], ["i", 0], ["1", 0], ["j", 0], ["ans", 0], ["i", 0], ["d", 0], ["1", 0], ["1", 0], ["memo", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["d", 0], ["1", 0], ["1", 0], ["1", 0], ["ans", 0], ["i", 0], ["j", 0], ["memo", 0], ["memo", 0], ["0", 0], ["if", 0], ["ans", 0], ["i", 0], ["j", 0], ["x", 0], ["memo", 0], ["ans", 0], ["i", 0], ["j", 0], ["x", 0], ["ans", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["join", 0], ["str", 0], ["ans", 0], ["j", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["n", 0], ["3", 0], ["import", 0], ["sys", 0], ["n", 0], ["k", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["x", 0], ["1", 0], ["while", 0], ["x", 0], ["d", 0], ["n", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["k", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["1", 0], ["n", 0], ["return", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["d", 0], ["ans", 0], ["j", 0], ["i", 0], ["ans", 0], ["j", 0], ["i", 0], ["1", 0], ["ans", 0], ["d", 0], ["1", 0], ["i", 0], ["1", 0], ["memo", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["d", 0], ["1", 0], ["1", 0], ["1", 0], ["ans", 0], ["j", 0], ["i", 0], ["memo", 0], ["memo", 0], ["0", 0], ["if", 0], ["ans", 0], ["j", 0], ["i", 0], ["x", 0], ["memo", 0], ["ans", 0], ["j", 0], ["i", 0], ["x", 0], ["ans", 0], ["j", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["join", 0], ["map", 0], ["str", 0], ["ans", 0], ["i", 0], ["n", 0], ["n", 0], ["k", 0], ["d", 0], ["int", 0], ["k", 0], ["for", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["base", 0], ["rep", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["d", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["k", 0], ["d", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["num", 0], ["j", 0], ["i", 0], ["0", 0], ["while", 0], ["num", 0], ["k", 0], ["i", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["while", 0], ["num", 0], ["base", 0], ["rep", 0], ["j", 0], ["1", 0], ["i", 0], ["num", 0], ["k", 0], ["i", 0], ["num", 0], ["num", 0], ["k", 0], ["i", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["str", 0], ["base", 0], ["rep", 0], ["j", 0], ["i", 0], ["1", 0], ["print", 0], ["s", 0], ["def", 0], ["add1", 0], ["array", 0], ["base", 0], ["array", 0], ["1", 0], ["1", 0], ["array", 0], ["0", 0], ["array", 0], ["k", 0], ["len", 0], ["array", 0], ["1", 0], ["while", 0], ["array", 0], ["k", 0], ["base", 0], ["array", 0], ["k", 0], ["base", 0], ["array", 0], ["k", 0], ["1", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["array", 0], ["0", 0], ["0", 0], ["return", 0], ["array", 0], ["1", 0], ["return", 0], ["array", 0], ["n", 0], ["k", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["print", 0], ["1", 0], ["quit", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["quit", 0], ["arr", 0], ["array", 0], ["0", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["arr", 0], ["append", 0], ["array", 0], ["array", 0], ["add1", 0], ["array", 0], ["k", 0], ["new", 0], ["0", 0], ["len", 0], ["arr", 0], ["for", 0], ["in", 0], ["range", 0], ["len", 0], ["arr", 0], ["0", 2], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["arr", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["arr", 0], ["0", 0], ["new", 0], ["j", 0], ["i", 0], ["arr", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["new", 0], ["print", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["i", 0], ["n", 0], ["k", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["return", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["d", 0], ["print", 0], ["join", 0], ["str", 0], ["i", 0], ["k", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["a", 0], ["input", 0], ["b", 0], ["a", 0], ["split", 0], ["n", 0], ["int", 0], ["b", 0], ["0", 0], ["k", 0], ["int", 0], ["b", 0], ["1", 0], ["d", 0], ["int", 0], ["b", 0], ["2", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["return", 0], ["table", 0], ["1", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["v", 0], ["list", 0], ["table", 0], ["1", 0], ["j", 0], ["len", 0], ["v", 0], ["1", 0], ["while", 0], ["v", 0], ["j", 0], ["k", 0], ["v", 0], ["j", 0], ["1", 0], ["j", 0], ["j", 0], ["1", 0], ["v", 0], ["j", 0], ["v", 0], ["j", 0], ["1", 0], ["table", 0], ["append", 0], ["v", 0], ["current", 0], ["power", 0], ["1", 0], ["answer", 0], ["0", 0], ["n", 0], ["for", 0], ["m", 0], ["in", 0], ["range", 0], ["0", 0], ["d", 0], ["current", 0], ["value", 0], ["1", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["s", 0], ["current", 0], ["power", 0], ["0", 0], ["and", 0], ["s", 0], ["0", 0], ["current", 0], ["value", 0], ["current", 0], ["value", 0], ["k", 0], ["1", 0], ["answer", 0], ["s", 0], ["str", 0], ["current", 0], ["value", 0], ["current", 0], ["power", 0], ["k", 0], ["print", 0], ["join", 0], ["answer", 0], ["a", 0], ["input", 0], ["b", 0], ["a", 0], ["split", 0], ["n", 0], ["int", 0], ["b", 0], ["0", 0], ["k", 0], ["int", 0], ["b", 0], ["1", 0], ["d", 0], ["int", 0], ["b", 0], ["2", 0], ["raw", 0], ["n", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["return", 0], ["table", 0], ["1", 0], ["d", 0], ["p", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["cv", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["j", 0], ["p", 0], ["0", 0], ["and", 0], ["j", 0], ["0", 0], ["cv", 0], ["cv", 0], ["1", 0], ["if", 0], ["cv", 0], ["k", 0], ["1", 0], ["cv", 0], ["1", 0], ["raw", 0], ["j", 0], ["str", 0], ["cv", 0], ["print", 0], ["join", 0], ["raw", 0], ["p", 0], ["p", 0], ["k", 0], ["n", 0], ["k", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["return", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["d", 0], ["print", 0], ["join", 0], ["str", 0], ["i", 0], ["k", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["coding", 0], ["utf", 0], ["8", 0], ["import", 0], ["sys", 0], ["def", 0], ["main", 0], ["n", 0], ["k", 0], ["d", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["blocksize", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["blocksize", 0], ["blocksize", 0], ["k", 0], ["blocksize", 0], ["k", 0], ["0", 0], ["print", 0], ["blocksize", 0], ["if", 0], ["blocksize", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["for", 0], ["days", 0], ["in", 0], ["range", 0], ["d", 0], ["i", 0], ["0", 0], ["bus", 0], ["1", 0], ["while", 0], ["i", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["blocksize", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["bus", 0], ["i", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["break", 0], ["bus", 0], ["1", 0], ["if", 0], ["bus", 0], ["k", 0], ["bus", 0], ["1", 0], ["blocksize", 0], ["k", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["n", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["k", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["return", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["d", 0], ["print", 0], ["join", 0], ["str", 0], ["i", 0], ["k", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["import", 0], ["math", 0], ["n", 0], ["k", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["math", 0], ["log", 0], ["n", 0], ["d", 0], ["math", 0], ["log", 0], ["k", 0], ["chadar", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["no", 0], ["pgh", 0], ["shit", 0], ["t", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["li", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["li", 0], ["append", 0], ["j", 0], ["t", 0], ["k", 0], ["1", 0], ["print", 0], ["li", 0], ["t", 0], ["k", 0], ["n", 0], ["k", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["return", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["d", 0], ["print", 0], ["join", 0], ["str", 0], ["i", 0], ["k", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["n", 0], ["k", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["d", 0], ["print", 0], ["1", 0], ["return", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["d", 0], ["print", 0], ["join", 0], ["str", 0], ["i", 0], ["k", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0010075566750629723, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0007556675062972292, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.007010515773660491, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.006760140210315473, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0010075566750629723, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0007556675062972292, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.007010515773660491, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.006760140210315473, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\n=====Problem Statement=====\nThe provided code stub will read in a dictionary containing key/value pairs of name:[marks] for a list of students. Print the average of the marks array for the student name provided, showing 2 places after the decimal.\n\n=====Example=====\nmarks key:value pairs are\n'alpha': [20,30,40]\n'beta': [30,50,70]\nquery_name = 'beta'\nThe query_name is 'beta'. beta's average score is (30+50+70)/3 = 50\n\n=====Input Format=====\nThe first line contains the integer n, the number of students' records. The next n lines contain the names and marks obtained by a student, each value separated by a space. The final line contains query_name, the name of a student to query.\n\n=====Constraints=====\n2≤n≤10\n0≤marks[i]≤100\nlength of marks arrays = 3\n\n=====Output Format=====\nPrint one line: The average of the marks obtained by the particular student correct to 2 decimal places.\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["# Enter your code here. Read input from STDIN. Print output to STDOUT\nn=int(input())\nar={}\nfor i in range(0,n):\n\ts=input()\n\tss=s.split(\" \")\n\tn=ss[0]\n\tm1=float(ss[1])\n\tm2=float(ss[2])\n\tm3=float(ss[3])\n\tm_avg=(m1+m2+m3)/3.0\n\tar[n]=\"%.2f\" % m_avg\ns_name=input()\nprint((ar[s_name]))\n", "def get_avg(marks, student):\n\treturn (sum(marks[student])/len(marks[student]))\n\ndef __starting_point():\n\tn = int(input())\n\tstudent_marks = {}\n\tfor _ in range(n):\n\t\tname, *line = input().split()\n\t\tscores = list(map(float, line))\n\t\tstudent_marks[name] = scores\n\tquery_name = input()\n\tprint((\"{:.2f}\".format(get_avg(student_marks, query_name))))\n\n__starting_point()\n"], "id": "id8170"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8170", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["problem", 0], ["statement", 0], ["the", 0], ["provided", 0], ["code", 0], ["stub", 0], ["will", 0], ["read", 0], ["in", 0], ["a", 0], ["dictionary", 0], ["containing", 0], ["key", 0], ["value", 0], ["pairs", 0], ["of", 0], ["name", 0], ["marks", 0], ["for", 0], ["a", 0], ["list", 0], ["of", 0], ["students", 0], ["print", 0], ["the", 0], ["average", 0], ["of", 0], ["the", 0], ["marks", 0], ["array", 0], ["for", 0], ["the", 0], ["student", 0], ["name", 0], ["provided", 0], ["showing", 0], ["2", 0], ["places", 0], ["after", 0], ["the", 0], ["decimal", 0], ["example", 0], ["marks", 0], ["key", 0], ["value", 0], ["pairs", 0], ["are", 0], ["alpha", 0], ["20", 0], ["30", 0], ["40", 0], ["beta", 0], ["30", 0], ["50", 0], ["70", 0], ["query", 0], ["name", 0], ["beta", 0], ["the", 0], ["query", 0], ["name", 0], ["is", 0], ["beta", 0], ["beta", 0], ["s", 0], ["average", 0], ["score", 0], ["is", 0], ["30", 0], ["50", 0], ["70", 0], ["3", 0], ["50", 0], ["input", 0], ["format", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["the", 0], ["integer", 0], ["n", 0], ["the", 0], ["number", 0], ["of", 0], ["students", 0], ["records", 0], ["the", 0], ["next", 0], ["n", 0], ["lines", 0], ["contain", 0], ["the", 0], ["names", 0], ["and", 0], ["marks", 0], ["obtained", 0], ["by", 0], ["a", 0], ["student", 0], ["each", 0], ["value", 0], ["separated", 0], ["by", 0], ["a", 0], ["space", 0], ["the", 0], ["final", 0], ["line", 0], ["contains", 0], ["query", 0], ["name", 0], ["the", 0], ["name", 0], ["of", 0], ["a", 0], ["student", 0], ["to", 0], ["query", 0], ["constraints", 0], ["2≤n≤10", 0], ["0≤marks", 0], ["i", 0], ["≤100", 0], ["length", 0], ["of", 0], ["marks", 0], ["arrays", 0], ["3", 0], ["output", 1], ["format", 1], ["print", 1], ["one", 1], ["line", 1], ["the", 1], ["average", 1], ["of", 1], ["the", 0], ["marks", 0], ["obtained", 0], ["by", 0], ["the", 0], ["particular", 0], ["student", 0], ["correct", 0], ["to", 0], ["2", 0], ["decimal", 0], ["places", 0], ["if", 3], ["name", 3], ["main", 3], ["n", 3], ["int", 3], ["input", 3], ["student", 3], ["marks", 3], ["for", 3], ["in", 3], ["range", 3], ["n", 3], ["name", 3], ["line", 3], ["input", 3], ["split", 3], ["scores", 0], ["list", 0], ["map", 0], ["float", 0], ["line", 0], ["student", 0], ["marks", 0], ["name", 0], ["scores", 0], ["query", 0], ["name", 0], ["input", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.13636363636363635, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.07575757575757582, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.2553191489361702, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2553191489361702, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.13636363636363635, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07575757575757582, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.2553191489361702, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2553191489361702, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 2], ["enter", 4], ["your", 0], ["code", 0], ["here", 0], ["read", 0], ["input", 0], ["from", 0], ["stdin", 0], ["print", 0], ["output", 0], ["to", 0], ["stdout", 0], ["n", 0], ["int", 0], ["input", 0], ["ar", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["s", 0], ["input", 0], ["ss", 0], ["s", 0], ["split", 0], ["n", 0], ["ss", 0], ["0", 0], ["m1", 0], ["float", 0], ["ss", 0], ["1", 0], ["m2", 0], ["float", 0], ["ss", 0], ["2", 0], ["m3", 0], ["float", 0], ["ss", 0], ["3", 0], ["m", 0], ["avg", 0], ["m1", 0], ["m2", 0], ["m3", 0], ["3", 0], ["0", 0], ["ar", 0], ["n", 0], ["2f", 0], ["m", 0], ["avg", 0], ["s", 0], ["name", 0], ["input", 0], ["print", 0], ["ar", 0], ["s", 0], ["name", 0], ["def", 0], ["get", 0], ["avg", 0], ["marks", 0], ["student", 0], ["return", 0], ["sum", 0], ["marks", 0], ["student", 0], ["len", 0], ["marks", 0], ["student", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 3], ["int", 3], ["input", 3], ["student", 3], ["marks", 3], ["for", 3], ["in", 3], ["range", 3], ["n", 3], ["name", 3], ["line", 3], ["input", 3], ["split", 3], ["scores", 0], ["list", 0], ["map", 0], ["float", 0], ["line", 0], ["student", 0], ["marks", 0], ["name", 0], ["scores", 0], ["query", 0], ["name", 0], ["input", 0], ["print", 0], ["2f", 0], ["format", 0], ["get", 0], ["avg", 0], ["student", 0], ["marks", 0], ["query", 0], ["name", 0], ["starting", 0], ["point", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.14705882352941177, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.04983660130718954, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.34210526315789475, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1345029239766083, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.14705882352941177, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.04983660130718954, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.34210526315789475, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1345029239766083, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nIn late autumn evening n robots gathered in the cheerful company of friends. Each robot has a unique identifier — an integer from 1 to 10^9.\n\nAt some moment, robots decided to play the game \"Snowball\". Below there are the rules of this game. First, all robots stand in a row. Then the first robot says his identifier. After that the second robot says the identifier of the first robot and then says his own identifier. Then the third robot says the identifier of the first robot, then says the identifier of the second robot and after that says his own. This process continues from left to right until the n-th robot says his identifier.\n\nYour task is to determine the k-th identifier to be pronounced.\n\n\n-----Input-----\n\nThe first line contains two positive integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ min(2·10^9, n·(n + 1) / 2).\n\nThe second line contains the sequence id_1, id_2, ..., id_{n} (1 ≤ id_{i} ≤ 10^9) — identifiers of roborts. It is guaranteed that all identifiers are different.\n\n\n-----Output-----\n\nPrint the k-th pronounced identifier (assume that the numeration starts from 1).\n\n\n-----Examples-----\nInput\n2 2\n1 2\n\nOutput\n1\n\nInput\n4 5\n10 4 18 3\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample identifiers of robots will be pronounced in the following order: 1, 1, 2. As k = 2, the answer equals to 1.\n\nIn the second test case identifiers of robots will be pronounced in the following order: 10, 10, 4, 10, 4, 18, 10, 4, 18, 3. As k = 5, the answer equals to 4.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n,k = list(map(int, input().split()))\nL = list(map(int, input().split()))\ni = 1\nwhile k > 0:\n\tk = k - i\n\ti += 1\nk = k + i - 1\nprint(L[k-1])\n", "#!/usr/bin/env python3\n\ntry:\n\twhile True:\n\t\tn, k = list(map(int, input().split()))\n\t\ta = list(map(int, input().split()))\n\t\tfor i in range(1, n + 1):\n\t\t\tif k <= i:\n\t\t\t\tprint(a[k - 1])\n\t\t\t\tbreak\n\n\t\t\tk -= i\n\nexcept EOFError:\n\tpass\n", "n, k = map(int, input().split())\nIDs = list(map(int, input().split()))\n\nans = 0\nfor i in range(1, n+1) :\n\tif i < k :\n\t\tk -= i\n\telse :\n\t\tans = IDs[k-1]\n\t\tbreak\n\nprint(ans)\n", "n, k = list(map(int, input().split()))\nk -= 1\na = list(map(int, input().split()))\ntri = [1]\n\nfor x in range(2, n + 1):\n\ttri.append(tri[-1] + x)\n\nif k == 0:\n\tprint(a[0])\nelse:\n\tlo = 0\n\thi = len(tri) - 1\n\twhile lo + 1 < hi:\n\t\tmid = (lo + hi) // 2\n\t\tif tri[mid] > k:\n\t\t\thi = mid\n\t\telse:\n\t\t\tlo = mid\n\n\t# in bucket hi\n\tindex = k - tri[hi - 1]\n\tprint(a[index])\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nl, r = 0, n\nwhile (r - l > 1):\n\tm = (r + l) // 2\n\ts = m * (m + 1) // 2\n\tif (s < k):\n\t\tl = m\n\telse:\n\t\tr = m\nk -= l * (l + 1) // 2\nprint(a[k - 1])\n", "n, k = list(map(int, input().split()))\nl = [0] + list(map(int, input().split()))\nm = 0\nfor i in range(1, n + 1):\n\tif i * (i + 1) < k + k:\n\t\tm = i\n\telse:\n\t\tbreak\nprint(l[k - (m * (m + 1) >> 1)])\n\t\t\n", "n, k = map(int, input().split())\nc, id = 1, list(map(int, input().split()))\nwhile k > c:\n\tk, c = k - c, c + 1\nprint(id[k - 1])\n", "import sys\nimport math\nimport itertools as it\nimport operator as op\nimport fractions as fr\n\n\nn,k = map(int, sys.stdin.readline().split())\nids = list(map(int, sys.stdin.readline().split()))\n\np = 1\nwhile k >= p+1:\n\tk -= p\n\tp += 1\n\nprint(ids[k-1])\n", "def solve(n,k):\n\ttmp = 0\n\ti = 0\n\twhile (tmp < k):\n\t\ti += 1\n\t\ttmp += i\n\ttmp -= i\n\treturn (k-tmp-1)\n\t\ndata = input().split()\ndata2 = input().split()\nind = solve(int(data[0]), int(data[1]))\nprint(data2[ind])\n", "n,k = map(int,input().split())\nnums = list(map(int,input().split()))\nnow = 0\ni = 0\nwhile 1==1:\n\ti+=1\n\tnow+=i\n\tif now>=k:\n\t\tnow-=i\n\t\tk-=now\n\t\tbreak\nprint(nums[k-1])\n", "import math\nn, k = [int(x) for x in input().split()]\nID = [int(x) for x in input().split()]\nm = math.floor(((1 + 8*(k-1))**0.5 - 1) / 2)\nprint(ID[k-1 - m*(m+1)//2])\n", "n, k = list(map(int, input().split()))\nxs = list(map(int, input().split()))\n\ni = 0\nwhile k > 0:\n\ti += 1\n\th = k\n\tk -= i\n\nprint(xs[h - 1])\n", "n,k=map(int,input().split())\nl=list(map(int,input().split()))\nt=0\nfor i in range(n):\n\tif t+i+1>=k: break\n\telse: t+=i+1\nprint(l[k-t-1])\n", "n, k = list(map(int, input().split()))\n\n\na = [int(s) for s in input().split()]\n\nfrom math import sqrt\nfrom math import ceil\n\np = ceil((sqrt(1 + 8*k) - 1) / 2)\n\nprint(a[k - p*(p-1)//2 - 1])\n", "import math\ndef __starting_point():\n\t#n, m = list(map(int, input().split()))\n\tn, k = list(map(int, input().split()))\n\tA = list(map(int, input().split()))\n\tx = int((-1 + math.sqrt(1 + 8 * k)) / 2)\n\tif k == (1 + x) * x // 2:\n\t\tprint(A[x - 1])\n\telse:\n\t\tprint(A[k - (1 + x) * x // 2 - 1])\n\t\n\n__starting_point()\n", "s = input().split()\nn, k = int(s[0]), int(s[1])\n\nid = list(map(lambda x: int(x), input().split()))\n\nc = 1\nd = 1\n\nwhile c + d <= k:\n\tc += d\n\td += 1\n\nprint(id[k-c])\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ni = 1\nwhile i * (i + 1) < 2 * k:\n\ti += 1\ni -= 1\nprint(a[k - 1 - i * (i + 1) // 2])\n", "from sys import stdin, stdout\nn, k = map(int, stdin.readline().split())\nnumber = [0]\nfor i in range(n):\n\tnumber.append(number[-1] + i + 1)\n\tif number[-1] >= k:\n\t\tind = i\n\t\tcnt = number[-2]\n\t\tbreak\n\t\nvalues = list(map(int, stdin.readline().split()))\nfor i in range(ind + 1):\n\tif cnt + i + 1 == k:\n\t\tstdout.write(str(values[i]))\n\t\tbreak\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ni = 1\nwhile k>i:\n\tk-=i\n\ti+=1\nprint(a[k-1])\n", "import math\nn, k = list(map(int, input().split()))\nlst = list(map(int, input().split()))\nl = 1\nr = min(2 * (10 ** 9) + 1, n * (n + 1) / 2)\nwhile (r > l):\n\tm = math.floor((l + r) / 2)\n\tif (m + 1) / 2 * m < k:\n\t\tl = m + 1\n\telse:\n\t\tr = m\nprint(lst[k  - int(l * (l - 1) / 2) - 1])\n", "n,k=list(map(int,input().split()))\nid=[int(i) for i in input().split()]\ni=0\ns=i*(i+1)//2\nwhile s<=k:\n\ti+=1\n\ts=i*(i+1)//2\n\t\ns=(i-1)*i//2\n\nk=k-s\nif k==0:\n\tprint(id[i-2])\nelse:\n\tprint(id[k-1])\n", "n, k = input().split(' ')\nn = int(n)\nk = int(k)\nd = input().split(' ')\ni = 0\n\nwhile True:\n\ti += 1\n\tp = int((i) * (i+1) / 2)\n\tif k <= p :\n\t\tprint(d[k-(p-i)-1])\n\t\tbreak\n", "read = lambda: list(map(int, input().split()))\nn, k = read()\na = list(read())\ns = 0\nfor i in range(n):\n\ts += i + 1\n\tif s >= k:\n\t\ts -= i + 1\n\t\tind = i\n\t\tbreak\nans = a[k - s - 1]\nprint(ans)\n", "n, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\nans = n - 1\nfor i in range(1, n + 1):\n\tif (1 + i) * i // 2 >= k:\n\t\tans = i - 1\n\t\tbreak\nprint(arr[k - (1 + ans) * ans // 2 - 1])\n", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nb=list()\nc=1\nd=w=0\nfor i in range(100000):\n\tb.append(c)\n\tif c==k:\n\t\tw=i\n\t\tbreak\n\telif c>k:\n\t\tw=i-1\n\t\tbreak\n\td+=1\n\tc+=d\nprint(a[k-b[w]])\n"], "id": "id8848"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8848", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["in", 2], ["late", 2], ["autumn", 2], ["evening", 2], ["n", 2], ["robots", 2], ["gathered", 2], ["in", 2], ["the", 2], ["cheerful", 2], ["company", 2], ["of", 2], ["friends", 2], ["each", 0], ["robot", 0], ["has", 0], ["a", 0], ["unique", 0], ["identifier", 0], ["—", 0], ["an", 0], ["integer", 0], ["from", 0], ["1", 0], ["to", 0], ["10", 0], ["9", 0], ["at", 2], ["some", 2], ["moment", 2], ["robots", 2], ["decided", 2], ["to", 2], ["play", 2], ["the", 2], ["game", 2], ["snowball", 2], ["below", 2], ["there", 2], ["are", 2], ["the", 2], ["rules", 2], ["of", 2], ["this", 2], ["game", 2], ["first", 2], ["all", 2], ["robots", 2], ["stand", 2], ["in", 2], ["a", 2], ["row", 2], ["then", 2], ["the", 2], ["first", 2], ["robot", 2], ["says", 2], ["his", 2], ["identifier", 2], ["after", 2], ["that", 2], ["the", 2], ["second", 2], ["robot", 2], ["says", 2], ["the", 2], ["identifier", 2], ["of", 2], ["the", 2], ["first", 2], ["robot", 2], ["and", 2], ["then", 2], ["says", 2], ["his", 2], ["own", 2], ["identifier", 2], ["then", 2], ["the", 2], ["third", 2], ["robot", 2], ["says", 2], ["the", 2], ["identifier", 2], ["of", 2], ["the", 2], ["first", 2], ["robot", 2], ["then", 2], ["says", 2], ["the", 2], ["identifier", 2], ["of", 2], ["the", 2], ["second", 2], ["robot", 2], ["and", 2], ["after", 2], ["that", 2], ["says", 2], ["his", 2], ["own", 2], ["this", 2], ["process", 2], ["continues", 2], ["from", 2], ["left", 2], ["to", 2], ["right", 2], ["until", 2], ["the", 2], ["n", 2], ["th", 2], ["robot", 2], ["says", 2], ["his", 2], ["identifier", 2], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["determine", 0], ["the", 0], ["k", 0], ["th", 0], ["identifier", 0], ["to", 0], ["be", 0], ["pronounced", 0], ["input", 0], ["the", 3], ["first", 3], ["line", 2], ["contains", 2], ["two", 2], ["positive", 2], ["integers", 5], ["n", 5], ["and", 4], ["k", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["100", 0], ["000", 0], ["1", 0], ["≤", 0], ["k", 0], ["≤", 0], ["min", 0], ["2·10", 0], ["9", 0], ["n·", 0], ["n", 0], ["1", 0], ["2", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["the", 0], ["sequence", 0], ["id", 0], ["1", 0], ["id", 0], ["2", 0], ["id", 0], ["n", 0], ["1", 0], ["≤", 0], ["id", 0], ["i", 0], ["≤", 0], ["10", 0], ["9", 0], ["—", 0], ["identifiers", 0], ["of", 0], ["roborts", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["all", 0], ["identifiers", 0], ["are", 0], ["different", 0], ["output", 0], ["print", 2], ["the", 0], ["k", 0], ["th", 0], ["pronounced", 0], ["identifier", 0], ["assume", 0], ["that", 0], ["the", 0], ["numeration", 0], ["starts", 0], ["from", 0], ["1", 0], ["examples", 0], ["input", 0], ["2", 0], ["2", 0], ["1", 0], ["2", 0], ["output", 0], ["1", 0], ["input", 0], ["4", 0], ["5", 0], ["10", 0], ["4", 0], ["18", 0], ["3", 0], ["output", 0], ["4", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["sample", 2], ["identifiers", 2], ["of", 2], ["robots", 2], ["will", 2], ["be", 2], ["pronounced", 2], ["in", 2], ["the", 2], ["following", 2], ["order", 2], ["1", 2], ["1", 2], ["2", 2], ["as", 2], ["k", 2], ["2", 2], ["the", 2], ["answer", 2], ["equals", 2], ["to", 2], ["1", 2], ["in", 2], ["the", 2], ["second", 2], ["test", 2], ["case", 2], ["identifiers", 2], ["of", 2], ["robots", 2], ["will", 2], ["be", 2], ["pronounced", 2], ["in", 2], ["the", 2], ["following", 2], ["order", 2], ["10", 2], ["10", 2], ["4", 2], ["10", 2], ["4", 2], ["18", 2], ["10", 0], ["4", 0], ["18", 0], ["3", 0], ["as", 0], ["k", 0], ["5", 0], ["the", 0], ["answer", 0], ["equals", 0], ["to", 0], ["4", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5740072202166066, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2827316486161252, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7577854671280276, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3777393310265283, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5740072202166066, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2827316486161252, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7577854671280276, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3777393310265283, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["1", 0], ["while", 0], ["k", 0], ["0", 0], ["k", 0], ["k", 0], ["i", 0], ["i", 0], ["1", 0], ["k", 0], ["k", 0], ["i", 0], ["1", 0], ["print", 0], ["l", 0], ["k", 0], ["1", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["try", 0], ["while", 0], ["true", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["k", 0], ["i", 0], ["print", 0], ["a", 0], ["k", 0], ["1", 0], ["break", 0], ["k", 0], ["i", 0], ["except", 0], ["eoferror", 0], ["pass", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ids", 0], ["list", 1], ["map", 1], ["int", 1], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["k", 0], ["k", 0], ["i", 0], ["else", 0], ["ans", 0], ["ids", 0], ["k", 0], ["1", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["1", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["tri", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["tri", 0], ["append", 0], ["tri", 0], ["1", 0], ["x", 0], ["if", 0], ["k", 0], ["0", 0], ["print", 0], ["a", 0], ["0", 0], ["else", 0], ["lo", 0], ["0", 0], ["hi", 0], ["len", 0], ["tri", 0], ["1", 0], ["while", 0], ["lo", 0], ["1", 0], ["hi", 0], ["mid", 0], ["lo", 0], ["hi", 0], ["2", 0], ["if", 0], ["tri", 0], ["mid", 0], ["k", 0], ["hi", 0], ["mid", 0], ["else", 0], ["lo", 0], ["mid", 0], ["in", 0], ["bucket", 0], ["hi", 0], ["index", 0], ["k", 0], ["tri", 0], ["hi", 0], ["1", 0], ["print", 0], ["a", 0], ["index", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["r", 0], ["0", 0], ["n", 0], ["while", 0], ["r", 0], ["l", 0], ["1", 0], ["m", 0], ["r", 0], ["l", 0], ["2", 0], ["s", 0], ["m", 0], ["m", 0], ["1", 0], ["2", 0], ["if", 0], ["s", 0], ["k", 0], ["l", 0], ["m", 0], ["else", 0], ["r", 0], ["m", 0], ["k", 0], ["l", 0], ["l", 0], ["1", 0], ["2", 0], ["print", 0], ["a", 0], ["k", 0], ["1", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["i", 0], ["1", 0], ["k", 0], ["k", 0], ["m", 0], ["i", 0], ["else", 0], ["break", 0], ["print", 0], ["l", 0], ["k", 0], ["m", 0], ["m", 0], ["1", 0], ["1", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["id", 0], ["1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["while", 0], ["k", 0], ["c", 0], ["k", 0], ["c", 0], ["k", 0], ["c", 0], ["c", 0], ["1", 0], ["print", 0], ["id", 0], ["k", 0], ["1", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["itertools", 0], ["as", 0], ["it", 0], ["import", 0], ["operator", 0], ["as", 0], ["op", 0], ["import", 0], ["fractions", 0], ["as", 0], ["fr", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["ids", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["p", 0], ["1", 0], ["while", 0], ["k", 0], ["p", 0], ["1", 0], ["k", 0], ["p", 0], ["p", 0], ["1", 0], ["print", 0], ["ids", 0], ["k", 0], ["1", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["tmp", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["tmp", 0], ["k", 0], ["i", 0], ["1", 0], ["tmp", 0], ["i", 0], ["tmp", 0], ["i", 0], ["return", 0], ["k", 0], ["tmp", 0], ["1", 0], ["data", 0], ["input", 0], ["split", 0], ["data2", 0], ["input", 0], ["split", 0], ["ind", 0], ["solve", 0], ["int", 0], ["data", 0], ["0", 0], ["int", 0], ["data", 0], ["1", 0], ["print", 0], ["data2", 0], ["ind", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["nums", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["now", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["1", 0], ["1", 0], ["i", 0], ["1", 0], ["now", 0], ["i", 0], ["if", 0], ["now", 0], ["k", 0], ["now", 0], ["i", 0], ["k", 0], ["now", 0], ["break", 0], ["print", 0], ["nums", 0], ["k", 0], ["1", 0], ["import", 0], ["math", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["id", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["m", 0], ["math", 0], ["floor", 0], ["1", 0], ["8", 0], ["k", 0], ["1", 0], ["0", 0], ["5", 0], ["1", 0], ["2", 0], ["print", 0], ["id", 0], ["k", 0], ["1", 0], ["m", 0], ["m", 0], ["1", 0], ["2", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["0", 0], ["while", 0], ["k", 0], ["0", 0], ["i", 0], ["1", 0], ["h", 0], ["k", 0], ["k", 0], ["i", 0], ["print", 0], ["xs", 0], ["h", 0], ["1", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["t", 0], ["i", 0], ["1", 0], ["k", 0], ["break", 0], ["else", 0], ["t", 0], ["i", 0], ["1", 0], ["print", 0], ["l", 0], ["k", 0], ["t", 0], ["1", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["from", 0], ["math", 0], ["import", 0], ["sqrt", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["p", 0], ["ceil", 0], ["sqrt", 0], ["1", 0], ["8", 0], ["k", 0], ["1", 0], ["2", 0], ["print", 0], ["a", 0], ["k", 0], ["p", 0], ["p", 0], ["1", 0], ["2", 0], ["1", 0], ["import", 0], ["math", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["1", 0], ["math", 0], ["sqrt", 0], ["1", 0], ["8", 0], ["k", 0], ["2", 0], ["if", 0], ["k", 0], ["1", 0], ["x", 0], ["x", 0], ["2", 0], ["print", 0], ["a", 0], ["x", 0], ["1", 0], ["else", 0], ["print", 0], ["a", 0], ["k", 0], ["1", 0], ["x", 0], ["x", 0], ["2", 0], ["1", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["int", 0], ["s", 0], ["0", 0], ["int", 0], ["s", 0], ["1", 0], ["id", 0], ["list", 0], ["map", 0], ["lambda", 0], ["x", 0], ["int", 0], ["x", 0], ["input", 0], ["split", 0], ["c", 0], ["1", 0], ["d", 0], ["1", 0], ["while", 0], ["c", 0], ["d", 0], ["k", 0], ["c", 0], ["d", 0], ["d", 0], ["1", 0], ["print", 0], ["id", 0], ["k", 0], ["c", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["1", 0], ["while", 0], ["i", 0], ["i", 0], ["1", 0], ["2", 0], ["k", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["print", 0], ["a", 0], ["k", 0], ["1", 0], ["i", 0], ["i", 0], ["1", 0], ["2", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["number", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["number", 0], ["append", 0], ["number", 0], ["1", 0], ["i", 0], ["1", 0], ["if", 0], ["number", 0], ["1", 0], ["k", 0], ["ind", 0], ["i", 0], ["cnt", 0], ["number", 0], ["2", 0], ["break", 0], ["values", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ind", 0], ["1", 0], ["if", 0], ["cnt", 0], ["i", 0], ["1", 0], ["k", 0], ["stdout", 0], ["write", 0], ["str", 0], ["values", 0], ["i", 0], ["break", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["1", 0], ["while", 0], ["k", 0], ["i", 0], ["k", 0], ["i", 0], ["i", 0], ["1", 0], ["print", 0], ["a", 0], ["k", 0], ["1", 0], ["import", 0], ["math", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lst", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["1", 0], ["r", 0], ["min", 0], ["2", 0], ["10", 0], ["9", 0], ["1", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["while", 0], ["r", 0], ["l", 0], ["m", 0], ["math", 0], ["floor", 0], ["l", 0], ["r", 0], ["2", 0], ["if", 0], ["m", 0], ["1", 0], ["2", 0], ["m", 0], ["k", 0], ["l", 0], ["m", 0], ["1", 0], ["else", 0], ["r", 0], ["m", 0], ["print", 0], ["lst", 0], ["k", 0], ["int", 0], ["l", 0], ["l", 0], ["1", 0], ["2", 0], ["1", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["id", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["i", 0], ["0", 0], ["s", 0], ["i", 0], ["i", 0], ["1", 0], ["2", 0], ["while", 0], ["s", 0], ["k", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["i", 0], ["1", 0], ["2", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["2", 0], ["k", 0], ["k", 0], ["s", 0], ["if", 0], ["k", 0], ["0", 0], ["print", 0], ["id", 0], ["i", 0], ["2", 0], ["else", 0], ["print", 0], ["id", 0], ["k", 0], ["1", 0], ["n", 0], ["k", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["k", 0], ["int", 0], ["k", 0], ["d", 0], ["input", 0], ["split", 0], ["i", 0], ["0", 0], ["while", 0], ["true", 0], ["i", 0], ["1", 0], ["p", 0], ["int", 0], ["i", 0], ["i", 0], ["1", 0], ["2", 0], ["if", 0], ["k", 0], ["p", 0], ["print", 0], ["d", 0], ["k", 0], ["p", 0], ["i", 0], ["1", 0], ["break", 0], ["read", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["read", 0], ["a", 0], ["list", 0], ["read", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["k", 0], ["s", 0], ["i", 0], ["1", 0], ["ind", 0], ["i", 0], ["break", 0], ["ans", 0], ["a", 0], ["k", 0], ["s", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["1", 0], ["i", 0], ["i", 0], ["2", 0], ["k", 0], ["ans", 0], ["i", 0], ["1", 0], ["break", 0], ["print", 0], ["arr", 0], ["k", 0], ["1", 0], ["ans", 0], ["ans", 0], ["2", 0], ["1", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["c", 0], ["1", 0], ["d", 0], ["w", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100000", 0], ["b", 0], ["append", 0], ["c", 0], ["if", 0], ["c", 0], ["k", 0], ["w", 0], ["i", 0], ["break", 0], ["elif", 0], ["c", 0], ["k", 0], ["w", 0], ["i", 0], ["1", 0], ["break", 0], ["d", 0], ["1", 0], ["c", 0], ["d", 0], ["print", 0], ["a", 0], ["k", 0], ["b", 0], ["w", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0029498525073746312, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0029498525073746312, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.014577259475218658, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.014577259475218658, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0029498525073746312, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0029498525073746312, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.014577259475218658, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.014577259475218658, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nInna likes sweets and a game called the \"Candy Matrix\". Today, she came up with the new game \"Candy Matrix 2: Reload\".\n\nThe field for the new game is a rectangle table of size n × m. Each line of the table contains one cell with a dwarf figurine, one cell with a candy, the other cells of the line are empty. The game lasts for several moves. During each move the player should choose all lines of the matrix where dwarf is not on the cell with candy and shout \"Let's go!\". After that, all the dwarves from the chosen lines start to simultaneously move to the right. During each second, each dwarf goes to the adjacent cell that is located to the right of its current cell. The movement continues until one of the following events occurs:\n\n  some dwarf in one of the chosen lines is located in the rightmost cell of his row;  some dwarf in the chosen lines is located in the cell with the candy. \n\nThe point of the game is to transport all the dwarves to the candy cells.\n\nInna is fabulous, as she came up with such an interesting game. But what about you? Your task is to play this game optimally well. Specifically, you should say by the given game field what minimum number of moves the player needs to reach the goal of the game.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 ≤ n ≤ 1000; 2 ≤ m ≤ 1000). \n\nNext n lines each contain m characters — the game field for the \"Candy Martix 2: Reload\". Character \"*\" represents an empty cell of the field, character \"G\" represents a dwarf and character \"S\" represents a candy. The matrix doesn't contain other characters. It is guaranteed that each line contains exactly one character \"G\" and one character \"S\".\n\n\n-----Output-----\n\nIn a single line print a single integer — either the minimum number of moves needed to achieve the aim of the game, or -1, if the aim cannot be achieved on the given game field.\n\n\n-----Examples-----\nInput\n3 4\n*G*S\nG**S\n*G*S\n\nOutput\n2\n\nInput\n1 3\nS*G\n\nOutput\n-1\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\n\nH, W = list(map(int, input().split()))\nL = set()\nfor y in range(H):\n\trow = input().strip()\n\ti_sweet = row.find('S')\n\ti_gnome = row.find('G')\n\tif i_sweet == -1 or i_gnome > i_sweet:\n\t\tprint(-1)\n\t\treturn\n\tL.add(i_sweet - i_gnome)\nprint(len(L))\n", "#!/usr/bin/env python3\n\ndef read_ints():\n\treturn list(map(int, input().strip().split()))\n\nn, m = read_ints()\n\nbest = 0\nopts = set()\n\nfor _ in range(n):\n\tx = input()\n\tg = x.find('G')\n\ts = x.find('S')\n\n\tif s<g:\n\t\tbest = float('inf')\n\t\tbreak\n\telse:\n\t\topts.add(max(best, s-g))\n\nif best == float('inf'):\n\tprint(-1)\nelse:\n\tprint(len(opts))\n\n", "n, m = map(int, input().split())\ndist_w = 2001\ndist_s = -1\nflag = False\nans = set()\nfor i in range(n): \n\ts = input()\n\tgnome = s.find(\"G\")\n\tsweet = s.find(\"S\")\n\tif gnome > sweet:\n\t\tflag = True\n\t\tbreak\n\tans.add(sweet - gnome)\nif flag:\n\tprint(-1)\nelse:\n\tprint(len(ans))\n", "n, m = map(int, input().split())\nc = 0\ng = 0\nt = set()\nf = False\nfor i in range(n):\n\ts = input().strip()\n\tfor j in range(len(s)):\n\t\tif s[j] == 'G':\n\t\t\tg = j\n\t\telif s[j] == 'S':\n\t\t\tc = j\n\tif g - c > 0:\n\t\tprint(-1)\n\t\tf = True\n\t\tbreak\n\tt.add(c - g)\nif not f:\n\tprint(len(t))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nn, m = list(map(int, input().split(' ')))\ndistances = [0] * 1000\n\nfor l in [input() for _ in range(n)]:\n\tdistance = l.index('S') - l.index('G')\n\tif distance < 0:\n\t\tprint(-1)\n\t\treturn\n\tdistances[distance] = 1\n\nprint(distances.count(1))\n", "N = 1000\ndis = set([])\nn, m = list(map(int, input().split(' ')))\nf = False\nfor i in range(n):\n\ts = input()\n\tdist = s.index('S') - s.index('G')\n\t#print(dist)\n\tif dist < 0:\n\t\tf = True\n\t\tbreak\n\tif dist not in dis:\n\t\tdis.add(dist)\nif f:\n\tprint(-1)\nelse:\n\tprint(len(dis))\n", "def dist(s):\n\treturn s.find(\"S\") - s.find(\"G\") - 1\n\na, b = map(int, input().split())\ndists = [dist(input()) for i in range(a)]\nif min(dists) < 0:\n\tprint(-1)\nelse:\n\tprint(len(set(dists)))\n", "n, m = list(map(int, input().split()))\nd = [0] * m\nfor i in range(n):\n\tt = input()\n\td[t[t.find('G') + 1: ].find('S')] = 1\nif d[-1]: print(-1)\nelse: print(sum(d))\n", "import sys\n\ntry:\n\tsys.stdin = open('input.txt', 'r')\n\tsys.stdout = open('output.txt', 'w')\nexcept:\n\tpass\n\nn, m = (int(i) for i in input().split())\nstr = [input() for i in range(0, n)]\narr = []\nfor i in range(0, n):\n\tt1, t2 = 0, 0\n\tfor j in range(0, m):\n\t\tif str[i][j] == 'G':\n\t\t\tt1 = j\n\t\telif str[i][j] == 'S':\n\t\t\tt2 = j\n\tif t1 > t2:\n\t\tprint(-1)\n\t\treturn\n\tif t1 < t2:\n\t\tarr.append(t2 - t1)\narr.sort()\nanswer = 0\nif (len(arr) > 0):\n\tanswer += 1\nfor i in range(1, len(arr)):\n\tif arr[i] != arr[i - 1]:\n\t\tanswer += 1\nprint(answer)\n", "h, w = list(map(int, input().split()))\n\nans = set()\ngood = True\nfor i in range(h):\n\ts = input()\n\tpg = -1\n\tps = -1\n\tfor j in range(w):\n\t\tif s[j] == 'G':\n\t\t\tpg = j\n\t\telif s[j] == 'S':\n\t\t\tps = j\n\tif ps < pg:\n\t\tgood = False\n\tans.add(ps - pg)\n\t\nif not good:\n\tprint(-1)\nelse:\n\tprint(len(ans))\n", "n,m=list(map(int,input().split()))\n\nli=[0]*1002\nfor i in range(0,n):\n\ta=input()\n\tpG=0\n\tpS=0\n\tfor j in range(0,m):\n\t\tif a[j]=='G':\n\t\t\tpG=j\n\t\telif a[j]=='S':\n\t\t\tpS=j\n\tif pS<pG:\n\t\tprint(-1)\n\t\tbreak\n\tli[pS-pG]=1;\nelse:\n\tans=0\n\tfor i in range(1,1002):\n\t\tans+=li[i]\n\tprint(ans)\n\t\n", "n, m = map(int, input().split())\nc = set(s.find(\"S\") - s.find(\"G\") for s in (input() for _ in range(n)))\nif all(a >= 0 for a in c):\n\tc.discard(0)\n\tprint(len(c))\nelse:\n\tprint(-1)\n", "n, m = map(int, input().split())\nc = set(s.find(\"S\") - s.find(\"G\") for s in (input() for _ in range(n)))\nprint(-1 if any(a < 0 for a in c) else len(c))\n", "ds = set()\nn, m = map(int, input().split())\nfor i in range(n):\n\tr = input()\n\td = r.index('S') - r.index('G')\n\tif d < 0:\n\t\tprint(-1)\n\t\treturn\n\tds.add(d)\nprint(len(ds))\n", "n, m = (int(x) for x in input().split())\nst = set()\nfor i in range(n):\n\ts = input()\n\tg = s.index('G')\n\ts = s.index('S')\n\tif g > s:\n\t\tprint(-1)\n\t\treturn\n\tst.add(s - g)\nprint(len(st))\n", "def main():\n\tn, _ = list(map(int, input().split()))\n\tres = set()\n\tfor _ in range(n):\n\t\ta = input()\n\t\ts, g = a.find(\"S\"), a.find(\"G\")\n\t\tif s < g:\n\t\t\tprint(-1)\n\t\t\treturn\n\t\tres.add(s - g)\n\tprint(len(res))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "s=set()\nn,m=input().split(\" \")\nn=int(n)\nm=int(m)\nfor i in range(n):\n\ttest=input()\n\tif(test.find(\"S\")-test.find(\"G\")<0):\n\t\tprint(-1)\n\t\treturn\n\t\tbreak\n\telse:\n\t\ts.add(int(test.find('S')-test.find(\"G\")))\nprint(len(s))\n", "'''\nCreated on 27.4.2016\n\n@author: Ivan\n'''\nimport sys\ndef main():\n\tline = input()\n\tparts = line.split(\" \")\n\ta = int(parts[0])\n\tb = int(parts[1])\n\tlist = []\n\tfor i in range(0, a):\n\t\tlist.append(input())\n\tpairs = []\n\tres = 0\n\tfor l in list:\n\t\tx = l.find(\"G\")\n\t\ty = l.find(\"S\")\n\t\tprint()\n\t\tif y < x:\n\t\t\tprint(\"-1\")\n\t\t\treturn\n\t\tpairs.append((y - x))\n\tpairs = set(pairs)\n\tprint(str(len(pairs)))\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n,m=list(map(int,input().split()))\nsol=True\ndst=set()\nfor _ in range(n):\n\tl=input()\n\tg=s=0\n\tfor j in range(m):\n\t\tif l[j]=='G':\n\t\t\tg=j\n\t\tif l[j]=='S':\n\t\t\ts=j\n\tif s<g:\n\t\tsol=False\n\telse:\n\t\tdst.add(g-s)\nprint(len(dst) if sol else -1)\n", "n,m=list(map(int,input().split()))\ndst=set()\nfor _ in range(n):\n\tl=input()\n\ts=l.find('S')\n\tg=l.find('G')\n\tif s<g:\n\t\tprint(-1)\n\t\treturn\n\telse:\n\t\tdst.add(g-s)\nprint(len(dst))\n", "n, m = list(map(int, input().split()))\nbad = False\nd = set()\nfor i in range(n):\n\tinp = list(input())\n\ts = inp.index(\"S\")\n\tg = inp.index(\"G\")\n\tif s < g:\n\t\tbad = True\n\telse:\n\t\td.add(s - g)\n\nif bad:\n\tprint(-1)\nelse:\n\tprint(len(d))\n", "n,m=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\tp=input()\n\tfor i in range(len(p)):\n\t\tif p[i]=='G':\n\t\t\tx=i\n\t\telif p[i]=='S':\n\t\t\ty=i\n\ts.append([x,y])\nans=0\np=[]\nfor i in s:\n\tif i[0]>i[1]:\n\t\tprint(-1)\n\t\treturn\n\telif i[0]<i[1]:\n\t\tp.append(i[1]-i[0])\nt=0\np=set(p)\nprint(len(p)) \n", "n, m = map(int, input().split())\nc = set(s.find(\"S\") - s.find(\"G\") for s in (input() for _ in range(n)))\nprint(-1 if any(a < 0 for a in c) else len(c))\n", "import math\ndef solution():\n\tn,m = [int(x) for x in input().split(' ')]\n\tmatrix = []\n\ts = []\n\tfor i in range(n):\n\t\tline = list(input())\n\t\tmatrix.append(line)\n\t\tcoo = line.index('S') - line.index('G')\n\t\tif coo<0:\n\t\t\treturn -1\n\t\ts.append(coo)\n\ts = set(s)\n\treturn len(s)\n\nprint(solution())\n", "n, m = map(int, input().split())\n\ndistances_map = {}\nnum_distances = 0\n\nfor i in range(n):\n\tline = input()\n\tindexG = 0\n\tindexS = 0\n\tfor j in range(len(line)):\n\t\tif (line[j] == \"G\"):\n\t\t\tindexG = j\n\t\telif (line[j] == \"S\"):\n\t\t\tindexS = j\n\n\tdist = indexS - indexG\n\tif (dist < 0):\n\t\tnum_distances = -1\n\t\tbreak\n\telif (dist not in distances_map):\n\t\tdistances_map[dist] = 1\n\t\tnum_distances += 1\n\nprint (num_distances)\n"], "id": "id5854"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5854", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["inna", 0], ["likes", 0], ["sweets", 0], ["and", 0], ["a", 0], ["game", 0], ["called", 0], ["the", 0], ["candy", 0], ["matrix", 0], ["today", 0], ["she", 0], ["came", 0], ["up", 0], ["with", 0], ["the", 0], ["new", 0], ["game", 0], ["candy", 0], ["matrix", 0], ["2", 0], ["reload", 0], ["the", 1], ["field", 1], ["for", 1], ["the", 0], ["new", 0], ["game", 0], ["is", 0], ["a", 0], ["rectangle", 0], ["table", 0], ["of", 0], ["size", 0], ["n", 0], ["×", 0], ["m", 0], ["each", 0], ["line", 0], ["of", 0], ["the", 0], ["table", 0], ["contains", 0], ["one", 0], ["cell", 0], ["with", 0], ["a", 0], ["dwarf", 0], ["figurine", 0], ["one", 0], ["cell", 0], ["with", 0], ["a", 0], ["candy", 0], ["the", 0], ["other", 0], ["cells", 0], ["of", 0], ["the", 0], ["line", 0], ["are", 0], ["empty", 0], ["the", 0], ["game", 0], ["lasts", 0], ["for", 0], ["several", 0], ["moves", 0], ["during", 1], ["each", 1], ["move", 1], ["the", 1], ["player", 1], ["should", 1], ["choose", 1], ["all", 1], ["lines", 1], ["of", 0], ["the", 0], ["matrix", 0], ["where", 0], ["dwarf", 0], ["is", 0], ["not", 0], ["on", 0], ["the", 0], ["cell", 0], ["with", 0], ["candy", 0], ["and", 0], ["shout", 0], ["let", 0], ["s", 0], ["go", 0], ["after", 0], ["that", 0], ["all", 0], ["the", 0], ["dwarves", 0], ["from", 0], ["the", 0], ["chosen", 0], ["lines", 0], ["start", 0], ["to", 0], ["simultaneously", 0], ["move", 0], ["to", 0], ["the", 0], ["right", 0], ["during", 0], ["each", 0], ["second", 0], ["each", 0], ["dwarf", 0], ["goes", 0], ["to", 0], ["the", 0], ["adjacent", 0], ["cell", 0], ["that", 0], ["is", 0], ["located", 0], ["to", 0], ["the", 0], ["right", 0], ["of", 0], ["its", 0], ["current", 0], ["cell", 0], ["the", 0], ["movement", 0], ["continues", 0], ["until", 0], ["one", 0], ["of", 0], ["the", 0], ["following", 0], ["events", 0], ["occurs", 0], ["some", 0], ["dwarf", 0], ["in", 0], ["one", 0], ["of", 0], ["the", 0], ["chosen", 0], ["lines", 0], ["is", 0], ["located", 0], ["in", 0], ["the", 0], ["rightmost", 0], ["cell", 0], ["of", 0], ["his", 0], ["row", 0], ["some", 0], ["dwarf", 0], ["in", 0], ["the", 0], ["chosen", 0], ["lines", 0], ["is", 0], ["located", 0], ["in", 0], ["the", 0], ["cell", 0], ["with", 0], ["the", 0], ["candy", 0], ["the", 0], ["point", 0], ["of", 0], ["the", 0], ["game", 0], ["is", 0], ["to", 0], ["transport", 0], ["all", 0], ["the", 0], ["dwarves", 0], ["to", 0], ["the", 0], ["candy", 0], ["cells", 0], ["inna", 0], ["is", 0], ["fabulous", 0], ["as", 0], ["she", 0], ["came", 0], ["up", 0], ["with", 0], ["such", 0], ["an", 0], ["interesting", 0], ["game", 0], ["but", 0], ["what", 0], ["about", 0], ["you", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["play", 0], ["this", 0], ["game", 0], ["optimally", 0], ["well", 0], ["specifically", 0], ["you", 0], ["should", 0], ["say", 0], ["by", 0], ["the", 0], ["given", 0], ["game", 0], ["field", 0], ["what", 0], ["minimum", 0], ["number", 0], ["of", 0], ["moves", 0], ["the", 0], ["player", 0], ["needs", 0], ["to", 0], ["reach", 0], ["the", 0], ["goal", 0], ["of", 0], ["the", 0], ["game", 0], ["input", 0], ["the", 26], ["first", 14], ["line", 12], ["of", 3], ["the", 0], ["input", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["m", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["1000", 0], ["2", 0], ["≤", 0], ["m", 0], ["≤", 0], ["1000", 0], ["next", 1], ["n", 1], ["lines", 1], ["each", 1], ["contain", 1], ["m", 1], ["characters", 1], ["—", 1], ["the", 1], ["game", 1], ["field", 1], ["for", 1], ["the", 1], ["candy", 1], ["martix", 1], ["2", 1], ["reload", 1], ["character", 1], ["represents", 1], ["an", 1], ["empty", 1], ["cell", 1], ["of", 1], ["the", 1], ["field", 0], ["character", 0], ["g", 0], ["represents", 0], ["a", 0], ["dwarf", 0], ["and", 0], ["character", 0], ["s", 0], ["represents", 0], ["a", 0], ["candy", 0], ["the", 0], ["matrix", 0], ["doesn", 0], ["t", 0], ["contain", 0], ["other", 0], ["characters", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["each", 0], ["line", 0], ["contains", 0], ["exactly", 0], ["one", 0], ["character", 0], ["g", 0], ["and", 0], ["one", 0], ["character", 0], ["s", 0], ["output", 0], ["in", 0], ["a", 0], ["single", 0], ["line", 0], ["print", 0], ["a", 0], ["single", 0], ["integer", 0], ["—", 0], ["either", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["moves", 0], ["needed", 0], ["to", 0], ["achieve", 0], ["the", 0], ["aim", 0], ["of", 0], ["the", 0], ["game", 0], ["or", 0], ["1", 0], ["if", 0], ["the", 0], ["aim", 0], ["cannot", 0], ["be", 0], ["achieved", 0], ["on", 0], ["the", 0], ["given", 0], ["game", 0], ["field", 0], ["examples", 0], ["input", 0], ["3", 0], ["4", 0], ["g", 0], ["s", 0], ["g", 0], ["s", 0], ["g", 0], ["s", 0], ["output", 0], ["2", 0], ["input", 0], ["1", 0], ["3", 0], ["s", 0], ["g", 0], ["output", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1078167115902965, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.09845433093411529, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.2297650130548303, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.19980824223644078, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.09973045822102426, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.09793351302785265, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.22193211488250653, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.19930374238468243, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["h", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["set", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["h", 0], ["row", 0], ["input", 0], ["strip", 0], ["i", 0], ["sweet", 0], ["row", 0], ["find", 0], ["s", 0], ["i", 0], ["gnome", 0], ["row", 0], ["find", 0], ["g", 0], ["if", 0], ["i", 0], ["sweet", 0], ["1", 0], ["or", 0], ["i", 0], ["gnome", 0], ["i", 0], ["sweet", 0], ["print", 0], ["1", 0], ["return", 0], ["l", 0], ["add", 0], ["i", 0], ["sweet", 0], ["i", 0], ["gnome", 0], ["print", 0], ["len", 0], ["l", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["def", 0], ["read", 0], ["ints", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["n", 0], ["m", 0], ["read", 0], ["ints", 0], ["best", 0], ["0", 0], ["opts", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["input", 0], ["g", 0], ["x", 0], ["find", 0], ["g", 0], ["s", 0], ["x", 0], ["find", 0], ["s", 0], ["if", 0], ["s", 0], ["g", 0], ["best", 0], ["float", 0], ["inf", 0], ["break", 0], ["else", 0], ["opts", 0], ["add", 0], ["max", 0], ["best", 0], ["s", 0], ["g", 0], ["if", 0], ["best", 0], ["float", 0], ["inf", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["opts", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dist", 0], ["w", 0], ["2001", 0], ["dist", 0], ["s", 0], ["1", 0], ["flag", 0], ["false", 0], ["ans", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["gnome", 0], ["s", 0], ["find", 0], ["g", 0], ["sweet", 0], ["s", 0], ["find", 0], ["s", 0], ["if", 0], ["gnome", 0], ["sweet", 0], ["flag", 0], ["true", 0], ["break", 0], ["ans", 0], ["add", 0], ["sweet", 0], ["gnome", 0], ["if", 0], ["flag", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["g", 0], ["0", 0], ["t", 0], ["set", 0], ["f", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["strip", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["j", 0], ["g", 0], ["g", 0], ["j", 0], ["elif", 0], ["s", 0], ["j", 0], ["s", 0], ["c", 0], ["j", 0], ["if", 0], ["g", 0], ["c", 0], ["0", 0], ["print", 0], ["1", 0], ["f", 0], ["true", 0], ["break", 0], ["t", 0], ["add", 0], ["c", 0], ["g", 0], ["if", 0], ["not", 0], ["f", 0], ["print", 0], ["len", 0], ["t", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["distances", 0], ["0", 0], ["1000", 0], ["for", 0], ["l", 0], ["in", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["distance", 0], ["l", 0], ["index", 0], ["s", 0], ["l", 0], ["index", 0], ["g", 0], ["if", 0], ["distance", 0], ["0", 0], ["print", 0], ["1", 0], ["return", 0], ["distances", 0], ["distance", 0], ["1", 0], ["print", 0], ["distances", 0], ["count", 0], ["1", 0], ["n", 0], ["1000", 0], ["dis", 0], ["set", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["dist", 0], ["s", 0], ["index", 0], ["s", 0], ["s", 0], ["index", 0], ["g", 0], ["print", 0], ["dist", 0], ["if", 0], ["dist", 0], ["0", 0], ["f", 0], ["true", 0], ["break", 0], ["if", 0], ["dist", 0], ["not", 0], ["in", 0], ["dis", 0], ["dis", 0], ["add", 0], ["dist", 0], ["if", 0], ["f", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["dis", 0], ["def", 0], ["dist", 0], ["s", 0], ["return", 0], ["s", 0], ["find", 0], ["s", 0], ["s", 0], ["find", 0], ["g", 0], ["1", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dists", 0], ["dist", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["if", 0], ["min", 0], ["dists", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["set", 0], ["dists", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["0", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["input", 0], ["d", 0], ["t", 0], ["t", 0], ["find", 0], ["g", 0], ["1", 0], ["find", 0], ["s", 0], ["1", 0], ["if", 0], ["d", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["sum", 0], ["d", 0], ["import", 0], ["sys", 0], ["try", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["sys", 0], ["stdout", 0], ["open", 0], ["output", 0], ["txt", 0], ["w", 0], ["except", 0], ["pass", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["str", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["arr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["t1", 0], ["t2", 0], ["0", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["m", 0], ["if", 0], ["str", 0], ["i", 0], ["j", 0], ["g", 0], ["t1", 0], ["j", 0], ["elif", 0], ["str", 0], ["i", 0], ["j", 0], ["s", 0], ["t2", 0], ["j", 0], ["if", 0], ["t1", 0], ["t2", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["t1", 0], ["t2", 0], ["arr", 0], ["append", 0], ["t2", 0], ["t1", 0], ["arr", 0], ["sort", 0], ["answer", 0], ["0", 0], ["if", 0], ["len", 0], ["arr", 0], ["0", 0], ["answer", 0], ["1", 1], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["arr", 0], ["if", 0], ["arr", 0], ["i", 0], ["arr", 0], ["i", 0], ["1", 0], ["answer", 0], ["1", 0], ["print", 0], ["answer", 0], ["h", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["set", 0], ["good", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["h", 0], ["s", 0], ["input", 0], ["pg", 0], ["1", 0], ["ps", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["w", 0], ["if", 0], ["s", 0], ["j", 0], ["g", 0], ["pg", 0], ["j", 0], ["elif", 0], ["s", 0], ["j", 0], ["s", 0], ["ps", 0], ["j", 0], ["if", 0], ["ps", 0], ["pg", 0], ["good", 0], ["false", 0], ["ans", 0], ["add", 0], ["ps", 0], ["pg", 0], ["if", 0], ["not", 0], ["good", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["ans", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["li", 0], ["0", 0], ["1002", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["a", 0], ["input", 0], ["pg", 0], ["0", 0], ["ps", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["m", 0], ["if", 0], ["a", 0], ["j", 0], ["g", 0], ["pg", 0], ["j", 0], ["elif", 0], ["a", 0], ["j", 0], ["s", 0], ["ps", 0], ["j", 0], ["if", 0], ["ps", 0], ["pg", 0], ["print", 0], ["1", 0], ["break", 0], ["li", 0], ["ps", 0], ["pg", 0], ["1", 0], ["else", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["1002", 0], ["ans", 0], ["li", 0], ["i", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["set", 0], ["s", 0], ["find", 0], ["s", 0], ["s", 0], ["find", 0], ["g", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["all", 0], ["a", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["c", 0], ["c", 0], ["discard", 0], ["0", 0], ["print", 0], ["len", 0], ["c", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["set", 0], ["s", 0], ["find", 0], ["s", 0], ["s", 0], ["find", 0], ["g", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["1", 0], ["if", 0], ["any", 0], ["a", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["c", 0], ["else", 0], ["len", 0], ["c", 0], ["ds", 0], ["set", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["r", 0], ["input", 0], ["d", 0], ["r", 0], ["index", 0], ["s", 0], ["r", 0], ["index", 0], ["g", 0], ["if", 0], ["d", 0], ["0", 0], ["print", 0], ["1", 0], ["return", 0], ["ds", 0], ["add", 0], ["d", 0], ["print", 0], ["len", 0], ["ds", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["st", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["g", 0], ["s", 0], ["index", 0], ["g", 0], ["s", 0], ["s", 0], ["index", 0], ["s", 0], ["if", 0], ["g", 0], ["s", 0], ["print", 0], ["1", 0], ["return", 0], ["st", 0], ["add", 0], ["s", 0], ["g", 0], ["print", 0], ["len", 0], ["st", 0], ["def", 0], ["main", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["input", 0], ["s", 0], ["g", 0], ["a", 0], ["find", 0], ["s", 0], ["a", 0], ["find", 0], ["g", 0], ["if", 0], ["s", 0], ["g", 0], ["print", 0], ["1", 0], ["return", 0], ["res", 0], ["add", 0], ["s", 0], ["g", 0], ["print", 0], ["len", 0], ["res", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["s", 0], ["set", 0], ["n", 0], ["m", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["m", 0], ["int", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["test", 0], ["input", 0], ["if", 0], ["test", 0], ["find", 0], ["s", 0], ["test", 0], ["find", 0], ["g", 0], ["0", 0], ["print", 0], ["1", 0], ["return", 0], ["break", 0], ["else", 0], ["s", 0], ["add", 0], ["int", 0], ["test", 0], ["find", 0], ["s", 0], ["test", 0], ["find", 0], ["g", 0], ["print", 0], ["len", 0], ["s", 0], ["created", 0], ["on", 0], ["27", 0], ["4", 0], ["2016", 0], ["author", 0], ["ivan", 0], ["import", 0], ["sys", 0], ["def", 0], ["main", 0], ["line", 0], ["input", 0], ["parts", 0], ["line", 0], ["split", 0], ["a", 0], ["int", 0], ["parts", 0], ["0", 0], ["b", 0], ["int", 0], ["parts", 0], ["1", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["a", 0], ["list", 0], ["append", 0], ["input", 0], ["pairs", 0], ["res", 0], ["0", 0], ["for", 0], ["l", 0], ["in", 0], ["list", 0], ["x", 0], ["l", 0], ["find", 0], ["g", 0], ["y", 0], ["l", 0], ["find", 0], ["s", 0], ["print", 0], ["if", 0], ["y", 0], ["x", 0], ["print", 0], ["1", 0], ["return", 0], ["pairs", 0], ["append", 0], ["y", 0], ["x", 0], ["pairs", 0], ["set", 0], ["pairs", 0], ["print", 0], ["str", 0], ["len", 0], ["pairs", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sol", 0], ["true", 0], ["dst", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["input", 0], ["g", 0], ["s", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["l", 0], ["j", 0], ["g", 0], ["g", 0], ["j", 0], ["if", 0], ["l", 0], ["j", 0], ["s", 0], ["s", 0], ["j", 0], ["if", 0], ["s", 0], ["g", 0], ["sol", 0], ["false", 0], ["else", 0], ["dst", 0], ["add", 0], ["g", 0], ["s", 0], ["print", 0], ["len", 0], ["dst", 0], ["if", 0], ["sol", 0], ["else", 0], ["1", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dst", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["input", 0], ["s", 0], ["l", 0], ["find", 0], ["s", 0], ["g", 0], ["l", 0], ["find", 0], ["g", 0], ["if", 0], ["s", 0], ["g", 0], ["print", 0], ["1", 0], ["return", 0], ["else", 0], ["dst", 0], ["add", 0], ["g", 0], ["s", 0], ["print", 0], ["len", 0], ["dst", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bad", 0], ["false", 0], ["d", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["inp", 0], ["list", 0], ["input", 0], ["s", 0], ["inp", 0], ["index", 0], ["s", 0], ["g", 0], ["inp", 0], ["index", 0], ["g", 0], ["if", 0], ["s", 0], ["g", 0], ["bad", 0], ["true", 0], ["else", 0], ["d", 0], ["add", 0], ["s", 0], ["g", 0], ["if", 0], ["bad", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["d", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["p", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["p", 0], ["if", 0], ["p", 0], ["i", 0], ["g", 0], ["x", 0], ["i", 0], ["elif", 0], ["p", 0], ["i", 0], ["s", 0], ["y", 0], ["i", 0], ["s", 0], ["append", 0], ["x", 0], ["y", 0], ["ans", 0], ["0", 0], ["p", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["elif", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["p", 0], ["append", 0], ["i", 0], ["1", 0], ["i", 0], ["0", 0], ["t", 0], ["0", 0], ["p", 0], ["set", 0], ["p", 0], ["print", 0], ["len", 0], ["p", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["set", 0], ["s", 0], ["find", 0], ["s", 0], ["s", 0], ["find", 0], ["g", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["1", 0], ["if", 0], ["any", 0], ["a", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["c", 0], ["else", 0], ["len", 0], ["c", 0], ["import", 0], ["math", 0], ["def", 0], ["solution", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["matrix", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["line", 0], ["list", 0], ["input", 0], ["matrix", 0], ["append", 0], ["line", 0], ["coo", 0], ["line", 0], ["index", 0], ["s", 0], ["line", 0], ["index", 0], ["g", 0], ["if", 0], ["coo", 0], ["0", 0], ["return", 0], ["1", 0], ["s", 0], ["append", 0], ["coo", 0], ["s", 0], ["set", 0], ["s", 0], ["return", 0], ["len", 0], ["s", 0], ["print", 0], ["solution", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["distances", 0], ["map", 0], ["num", 0], ["distances", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["line", 0], ["input", 0], ["indexg", 0], ["0", 0], ["indexs", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["line", 0], ["if", 0], ["line", 0], ["j", 0], ["g", 0], ["indexg", 0], ["j", 0], ["elif", 0], ["line", 0], ["j", 0], ["s", 0], ["indexs", 0], ["j", 0], ["dist", 0], ["indexs", 0], ["indexg", 0], ["if", 0], ["dist", 0], ["0", 0], ["num", 0], ["distances", 0], ["1", 0], ["break", 0], ["elif", 0], ["dist", 0], ["not", 0], ["in", 0], ["distances", 0], ["map", 0], ["distances", 0], ["map", 0], ["dist", 0], ["1", 0], ["num", 0], ["distances", 0], ["1", 0], ["print", 0], ["num", 0], ["distances", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0015822784810126582, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0011867088607594937, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.0109717868338558, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0109717868338558, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0015822784810126582, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0011867088607594937, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0109717868338558, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0109717868338558, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given a positive integer $n$. In one move, you can increase $n$ by one (i.e. make $n := n + 1$). Your task is to find the minimum number of moves you need to perform in order to make the sum of digits of $n$ be less than or equal to $s$.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) — the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains two integers $n$ and $s$ ($1 \\le n \\le 10^{18}$; $1 \\le s \\le 162$).\n\n\n-----Output-----\n\nFor each test case, print the answer: the minimum number of moves you need to perform in order to make the sum of digits of $n$ be less than or equal to $s$.\n\n\n-----Example-----\nInput\n5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n\nOutput\n8\n0\n500\n2128012501878\n899999999999999999\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\n\n\ndef read_int():\n\treturn int(sys.stdin.readline())\n\n\ndef read_ints():\n\treturn list(map(int, sys.stdin.readline().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n\tn, s = read_ints()\n\ta = [0] + [int(i) for i in str(n)]\n\tds = sum(a)\n\tcost = 0\n\tidx = len(a) - 1\n\tradix = 1\n\twhile ds > s:\n\t\tif a[idx] > 0:\n\t\t\tcost += (10 - a[idx]) * radix\n\t\t\tds -= a[idx]\n\t\t\ta[idx] = 0\n\t\t\tds += 1\n\t\t\ta[idx - 1] += 1\n\t\t\ti = idx - 1\n\t\t\twhile a[i] >= 10:\n\t\t\t\ta[i - 1] += 1\n\t\t\t\ta[i] -= 10\n\t\t\t\tds -= 9\n\t\t\t\ti -= 1\n\t\tradix *= 10\n\t\tidx -= 1\n\tprint(cost)\n", "tx=int(input())\nfor i in range(tx):\n\ta,b=[int(i) for i in input().split()]\n\tk=a\n\tt=1\n\tt2=0\n\ts=str(a)\n\tfor i in s:\n\t\tt2+=ord(i)-ord('0')\n\twhile t<=pow(10,18):\n\t\tif t>1:a+=t-(a % t)\n\t\tt2=0\n\t\ts=str(a)\n\t\tfor i in s:\n\t\t\tt2+=ord(i)-ord('0')\n\t\tif t2<=b:\n\t\t\tprint(a-k)\n\t\t\tbreak\n\t\tt*=10\n", "# d-decrease-the-sum-of-digits.yml\n\ndef dsum(x):\n\tres = 0\n\twhile x:\n\t\tres += x % 10\n\t\tx //= 10\n\treturn res\n\nfor _ in range(int(input())):\n\tn, s = list(map(int, input().split()))\n\t# print(f'init: n={n}, s={s}')\n\n\tp = 1\n\tans = 0\n\tcsum = dsum(n)\n\t# its=10\n\twhile csum > s:\n\t\t# print(f'n={n}')\n\t\tadd = 10 * p - n % (10 * p)\n\t\tif add == 10 * p: add = 0\n\t\tans += add\n\t\tn += add\n\t\tcsum = dsum(n)\n\t\tp *= 10\n\t\t# print(f'n={n},p={p},csum={csum},add={add}')\n\n\t\t# its-=1\n\t\t# assert its\n\n\tprint(ans)\n", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\ndef givesum(n):return sum([int(i) for i in str(n)])\n\nfor _ in range(val()):\n\tn, s = li()\n\tans = 0\n\tcurr = 10\n\twhile givesum(n) > s:\n\t\ttemp = n % curr\n\t\tn += curr - temp\n\t\tans += curr - temp\n\t\tcurr *= 10\n\tprint(ans)\n", "for _ in range(int(input())):\n\ts,k=list(map(str,input().split()))\n\tk=int(k)\n\tsu=0\n\tfor i in range(len(s)):\n\t\tsu+=int(s[i])\n\t\tif su>=k:\n\t\t\tans=int(s[i:])    \n\t\t\tans=int(\"1\"+(len(s)-i)*\"0\")-ans\n\t\t\t# print(ans)\n\t\t\tbreak\n\tsu=0    \n\tfor i in range(len(s)):\n\t\tsu+=int(s[i])\n\tif su<=k:\n\t\tprint(0)\n\telse:\n\t\tprint(ans)\n", "# Fast IO (be careful about bytestring)\n\n# import os,io\n# input=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\nfor _ in range(int(input())):\n\tn,s = list(map(int,input().split()))\n\tlenN = len(str(n))\n\tsumDigit = 0\n\tnCpy = n\n\tfor j in range(lenN):\n\t\tsumDigit += nCpy % 10\n\t\tnCpy //= 10\n\tif sumDigit <= s:\n\t\tprint(0)\n\telse:\n\t\tfor j in range(lenN):\n\t\t\tnewN = (n // (10 ** (j+1)) + 1) * 10 ** (j + 1)\n\t\t\tnCpy = newN\n\t\t\tsumDigit = 0\n\t\t\tfor j in range(lenN):\n\t\t\t\tsumDigit += nCpy % 10\n\t\t\t\tnCpy //= 10\n\t\t\tif sumDigit <= s:\n\t\t\t\tprint(newN - n)\n\t\t\t\tbreak\n", "def main():\n\tt = int(input())\n\tfor _ in range(t):\n\t\tn, s = input().split(\" \")\n\t\ts = int(s)\n\t\ttotal = 0\n\t\tfor nn in n:\n\t\t\ttotal += int(nn)\n\t\tans = 0\n\t\tp = 1\n\t\tten = 1\n\t\tcarry = False\n\t\twhile total > s:\n\t\t\tnum = int(n[-p])\n\t\t\tif carry:\n\t\t\t\tnum += 1\n\t\t\tif num == 0:\n\t\t\t\tcarry = False\n\t\t\telse:\n\t\t\t\tans += ten * (10 - num)\n\t\t\t\ttotal -= num - 1\n\t\t\t\tcarry = True\n\t\t\tten *= 10\n\t\t\tp += 1\n\t\tprint(ans)\n\t\t  \n\t\t\nmain()\n", "for _ in range(int(input())):\n\ta,b=map(int,input().split())\n\tbb=b\n\tcan=0\n\td=10000000000000000000\n\twhile(d>0):\n\t\tbb=bb-(a//d)%10\n\t\td=d//10\n\tif(bb>=0):\n\t\tcan=1\n\td=10000000000000000000\n\tt=0\n\twhile(d>0 and b-(a//d)%10>=1):\n\t\tb=b-(a//d)%10\n\t\tt=(a//d+1)*d\n\t\td=d//10\n\tif(can):print(0)\n\telse:print(t-a)\n\tt=0\n", "import sys\n\ninput = sys.stdin.readline\n\n\n############ ---- Input Functions ---- ############\ndef inp():\n\treturn (int(input()))\n\n\ndef inlt():\n\treturn (list(map(int, input().split())))\n\n\ndef insr():\n\ts = input()\n\treturn (list(s[:len(s) - 1]))\n\n\ndef invr():\n\treturn (list(map(int, input().split())))\n\ndef digitSum(x):\n\tc = 0\n\twhile x:\n\t\tc += x%10\n\t\tx //= 10\n\treturn c\n\ndef solve(x,y):\n\tif digitSum(x) <= y:\n\t\treturn 0\n\t# Try next power of 10\n\txStr = str(x)\n\tattempt = 10 ** len(xStr) - x\n\n\tfor i in range(len(xStr)):\n\t\tnewNumber = int(xStr[:i+1]) + 1\n\t\tnewNumber *= 10 ** (len(xStr) - i-1)\n\t\tif digitSum(newNumber) <= y:\n\t\t\tattempt = newNumber - x\n\treturn attempt\n\nlines = inp()\nfor i in range(lines):\n\tv = inlt()\n\tprint(solve(*v))\n", "for _ in range(int(input())):\n\tn,s=map(int,input().split())\n\tsavn=n\n\tcd=1\n\twhile cd<=n:\n\t\tif sum(map(int,str(n)))<=s:break\n\t\tcc=n//cd%10\n\t\tif cc==0:cd*=10;continue\n\t\tn+=(10-cc)*cd\n\t\tcd*=10\n\tprint(n-savn)\n", "z = int(input())\n\ndef sm(x):\n\tans = 0\n\twhile x>0:\n\t\tans += x%10\n\t\tx //= 10\n\treturn ans\n\nfor _ in range(z):\n\tn, s = list(map(int, input().split()))\n\tans = 10000000000000000000000000000\n\tif sm(n) <= s:\n\t\tprint(0)\n\t\tcontinue\n\tgoal = n\n\tfor i in range(len(str(n))+1):\n\t\tgoal = int(str(n)[:len(str(n))-i] + '0'*i) + 10**i\n\t\tif sm(goal) <= s:\n\t\t\tans = min(ans, goal-n)\n\tprint(ans)\n", "def ssum(s):\n\treturn sum(map(int, list(s)))\nfor _ in range(int(input())):\n\tn, s = list(map(int, input().split()))\n\tns = str(n)\n\tif ssum(ns) <= s:\n\t\tprint(0)\n\t\tcontinue\n\n\tans = float(\"inf\")\n\tfor i in range(0, len(ns)):\n\t\tx = 1\n\t\tif i > 0:\n\t\t\tx = int(ns[:i])+1\n\t\tacc = 0\n\t\twhile x > 0:\n\t\t\tacc += x % 10\n\t\t\tx //= 10\n\t\tif acc > s:\n\t\t\tcontinue\n\t\ty = 10**(len(ns)-i) - int(ns[i:])\n\t\tans = min(ans, y)\n\tprint(ans)\n", "import sys\nfrom math import ceil\ninput = sys.stdin.readline\nt = int(input())\ndef f(n):\n\tr = 0\n\twhile n:\n\t\tr += n%10\n\t\tn //= 10\n\treturn r\nfor tc in range(t):\n\tn, s = list(map(int, input().strip().split()))\n\tif f(n) <= s:\n\t\tprint(0)\n\t\tcontinue\n\tb = 1\n\tans = int(1e20)\n\twhile b <= n*10:\n\t\trn = n//b*b+b\n\t\t# print(rn, f(rn))\n\t\tif f(rn) <= s: ans = min(ans, rn-n)\n\t\tb *= 10\n\tprint(ans)\n", "import sys, math\nimport io, os\n#data = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n# from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var): sys.stdout.write(' '.join(map(str, var)) + '\\n')\ndef out(var): sys.stdout.write(str(var) + '\\n')\nfrom decimal import Decimal\n# from fractions import Fraction\n# sys.setrecursionlimit(100000)\nmod = int(1e9) + 7\nINF=2**32\n\ndef cal(n):\n\tans=0\n\twhile n:\n\t\tans+=n%10\n\t\tn//=10\n\treturn ans\n\nfor t in range(int(data())):\n   n,s=mdata()\n   ans=0\n   t=1\n   while cal(n)>s:\n\t   last=n%10\n\t   n//=10\n\t   if last!=0:\n\t\t   ans+=t*(10-last)\n\t\t   n+=1\n\t   t*=10\n   out(ans)\n", "'''\nAuthor: AsilenceBTF\nBlog: asilencebtf.top\nDate: 2020-05-28 13:02:12\nLastEditTime: 2020-09-04 23:11:19\n'''\n\ndef f(n):\n\tres = 0\n\twhile n > 0 : \n\t\tres = res + 1\n\t\tn = n // 10\n\treturn res\ndef check(n):\n\tres = 0\n\twhile n > 0:\n\t\tres = res + (n%10)\n\t\tn = n // 10\n\treturn res\nfor _ in range(int(input())):\n\tn, s = list(map(int, input().split()))\n\tlen = f(n)\n\tans = pow(10, 20)\n\tif check(n) <= s:\n\t\tans = 0 \n\tfor i in range(0, len):\n\t\tp = n // pow(10, i + 1)\n\t\tp = p * pow(10, i + 1)\n\t\tp = p + pow(10, i + 1)\n\t\tif check(p) <= s:\n\t\t\tif ans > (p - n):\n\t\t\t\tans = p - n \n\tprint(ans)\n\t\n\n", "import bisect\nimport copy\nimport fractions\nimport functools\nimport heapq\nimport math\nimport random\nimport sys\n\n\ndef __starting_point():\n\n\tT = int(input())\n\n\tfor t in range(T):\n\t\tN, S = tuple(map(int, input().split()))\n\n\t\tif sum(int(dig) for dig in str(N)) <= S:\n\t\t\tprint('0')\n\t\t\tcontinue\n\n\t\t# So we start counting digits from left to right\n\t\t# The first digits where the sum is greater than or equal to S and every digit following\n\t\t# needs to be set to 0, and the last digit we safely counted gets incremented\n\t\t# Our answer is the difference between this number and N\n\n\t\tstr_N = '0' + str(N)\n\n\t\ttotal = 0\n\t\ti = 0\n\t\twhile total < S:\n\t\t\ttotal += int(str_N[i])\n\t\t\ti += 1\n\n\t\ttarget = (int(str_N[:i-1]) + 1) * (10 ** (len(str_N) - i + 1))\n\t\tprint(str(target - N))\n\n__starting_point()\n", "for t in range(int(input())):\n\t# n,s = map(int,input().split())\n\tn,s = input().split()\n\ts = int(s)\n\n\tnn =['0','0','0'] + list(n)\n\n\tsu = 0\n\tfor i in n:\n\t\tsu += int(i)\n\n\tptr = 1\n\t# cost = 0\n\twhile su>s:\n\t\tsu-=int(nn[-ptr])\n\t\tsu+=1\n\t\tnn[-ptr]='0'\n\t\tnn[-ptr-1]=str(1+int(nn[-ptr-1]))\n\n\t\titr = 1\n\t\twhile int(nn[-ptr-itr]) >=10:\n\t\t\tsu-=10\n\t\t\tsu+=int(nn[-ptr-itr])//10\n\t\t\tnn[-ptr-itr-1]=str(int(nn[-ptr-itr-1])+int(nn[-ptr-itr])//10)\n\t\t\tnn[-ptr-itr]=str(int(nn[-ptr-1])%10)\n\t\t\titr+=1\n\t\t# if int(nn[-ptr-1])>=10:\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\tptr+=1\n\n\tprint(int(''.join(nn))-int(n))\n\n\t# nn = n\n\t# ctr = 0\n\t# cost = []\n\t# su = 0\n\t# while nn:\n\t#     su += nn%10\n\t#     cost.append((10-nn%10)*10**ctr)\n\t#     nn//=10\n\t#     ctr+=1\n\n\t# ptr = 1\n\t# while su>s:\n\t#     su-=n%10**ptr\n\t#     su+=1\n\t#     n\n", "def solve(n, s):\n\tdns = [ord(x)-ord('0') for x in str(n)]\n\tif sum(dns) <= s:\n\t\treturn 0\n\tm = len(dns)\n\tfor i, d in enumerate(dns):\n\t\tif d >= s:\n\t\t\treturn 10**(m-i) - (n % (10**(m-i)))\n\t\ts -= d\n\treturn 42\n\n\nfor _ in range(int(input())):\n\tn, s = [int(x) for x in input().split()]\n\tprint(solve(n, s))\n", "import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef SI():\n\treturn sys.stdin.readline().strip()\ndef findSum(n,s):\n\tsu = 0\n\tind = -1\n\tfor i in range(len(n)):\n\t\tsu+=int(n[i])\n\t\tif su>s:\n\t\t\tind = i\n\t\t\tbreak\n\treturn ind\nt = II()\nfor q in range(t):\n\tn,s = MI()\n\tn = str(n)\n\tans = 0\n\tind = findSum(n,s)\n\twhile ind!=-1:\n\t\tf = n[:ind]\n\t\tif f == \"\":\n\t\t\tf = \"0\"\n\t\tse = \"0\"+\"0\"*(len(n)-ind-1)\n\t\tf = str(int(f)+1)+se\n\t\tans+=int(f)-int(n)\n\t\tn = f\n\t\tind = findSum(n,s)\n\tprint(ans)\n\n\t\n", "import math\n\ndef checksum(n):\n\treturn sum([int(x) for x in str(n)])\n\nfor _ in range(int(input())):\n\tn,s = [int(p) for p in input().split()]\n\tmoves = 0\n\tif checksum(n)<=s:\n\t\tprint(0)\n\telse:\n\t\tpow = 10\n\t\twhile True:\n\t\t\t# print(n)\n\t\t\tclosest = pow*((n+pow-1)//pow)\n\t\t\t# print(closest)\n\t\t\tmoves += (closest-n)\n\t\t\tn = closest\n\t\t\tif checksum(n)<=s:\n\t\t\t\tbreak\n\t\t\tpow*=10\n\t\tprint(moves)\n", "for tc in range(int(input())):\n    \n\tn, s = [int(x) for x in input().split()]\n\t\n\tsumOf = sum(int(x) for x in str(n))\n\t\n\tcost = 0\n\t\n\tcarry = False\n\t\n\tfor pos, char in enumerate(reversed('0' + str(n))):\n\t\tif sumOf <= s: break\n\t\t\n\t\tdigit = int(char)\n\t\t\n\t\tif carry: digit += 1\n\t\t\n\t\tif digit != 0: \n\t\t\tcarry = True\n\t\t\n\t\t\tcost += (10 - digit) * (10 ** pos)\n\t\t\n\t\t\tsumOf -= digit - 1\n\t\t\n\t\n\tprint(cost) \n", "from math import ceil\nfrom collections import deque\n\ndef sm(n):\n\tret = 0\n\twhile n>0:\n\t\tret += n%10\n\t\tn //= 10\n\treturn ret\n\nfor _ in range(int(input())):\n\tn, s = [int(i) for i in input().split()]\n\ttemp = n\n\twhile sm(n)>s:\n\t\tj = 10\n\t\twhile n%j == 0:\n\t\t\tj *= 10\n\t\tn += j-n%j\n\tprint(n - temp)\n", "\nt = int(input())\ndef dgt_sum(num):\n\treturn sum([int(x) for x in str(num)])\n\ndef clps(val, left=0):\n\tif len(str(val)) == 1:\n\t\treturn 1, left + 1\n\n\n\treturn int(str(val)[:-1]) + 1, left + 1\n\n\ndef solve(n, s):\n\tn_str =str(n)\n\t_s = 0\n\ttarget = n\n\tfor i, d in enumerate(n_str):\n\t\td = int(d)\n\t\t_s+=d\n\t\tif _s > s:\n\t\t\tcl = int(n_str[:i+1]), 0\n\t\t\twhile dgt_sum(cl[0]) > s:\n\t\t\t\tcl = clps(*cl)\n\n\t\t\ttarget = cl[0] * pow(10, cl[1] + len(n_str) -i-1)\n\t\t\tbreak\n\n\treturn target - n\n\n\n\nfor _ in range(t):\n\tn,s = [int(x) for x in input().split(' ')]\n\tprint(solve(n,s))\n", "#!/usr/bin/env pypy3\n\ndef ans(n, s):\n\tn = str(n)\n\n\tif sum(map(int, n)) <= s:\n\t\treturn 0\n\n\tcandidates = set()\n\tfor i in range(1,len(n)):\n\t\tna, nb = n[:i], n[i:]\n\t\tna = str(int(na)+1)\n\t\tnb = \"0\"*len(nb)\n\t\tif sum(map(int, na)) + sum(map(int, nb)) <= s:\n\t\t\tcandidates.add(int(na+nb) - int(n))\n\n\tbig = \"1\" + \"0\"*len(n)\n\tcandidates.add(int(big) - int(n))\n\n\tsmall = \"1\" + \"0\"*(len(n)-1)\n\tif int(small) - int(n) >= 0:\n\t\tcandidates.add(int(small) - int(n))\n\n\treturn min(candidates)\n\ndef ans_slow(n, s):\n\tfor i in range(0, 10**200):\n\t\tbig = n+i\n\t\tbig = str(big)\n\t\tif sum(map(int, big)) <= s:\n\t\t\treturn i\n\nimport sys\n\n# print(ans(2,2))\n# print(ans_slow(2,2))\n\n# return\n\n# for s in range(1, 162):\n# \tfor n in range(1, 10000):\n# \t\tif ans(n,s) != ans_slow(n, s):\n# \t\t\tprint(n, s)\n\n# return\n\nT = int(input())\nfor t in range(T):\n\tn,s = input().split()\n\tn = int(n)\n\ts = int(s)\n\n\tprint(ans(n, s))\n"], "id": "id9062"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9062", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["positive", 0], ["integer", 0], ["n", 0], ["in", 0], ["one", 0], ["move", 0], ["you", 0], ["can", 0], ["increase", 0], ["n", 0], ["by", 0], ["one", 0], ["i", 0], ["e", 0], ["make", 0], ["n", 0], ["n", 0], ["1", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["find", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["moves", 0], ["you", 0], ["need", 0], ["to", 0], ["perform", 0], ["in", 0], ["order", 0], ["to", 0], ["make", 0], ["the", 0], ["sum", 0], ["of", 0], ["digits", 0], ["of", 0], ["n", 0], ["be", 0], ["less", 0], ["than", 0], ["or", 0], ["equal", 0], ["to", 0], ["s", 0], ["you", 8], ["have", 8], ["to", 8], ["answer", 8], ["t", 8], ["independent", 8], ["test", 8], ["cases", 8], ["input", 20], ["the", 46], ["first", 46], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["one", 0], ["integer", 0], ["t", 0], ["1", 0], ["le", 0], ["t", 0], ["le", 0], ["2", 0], ["cdot", 6], ["10", 28], ["4", 22], ["—", 10], ["the", 11], ["number", 11], ["of", 1], ["test", 0], ["cases", 0], ["then", 0], ["t", 0], ["test", 0], ["cases", 0], ["follow", 0], ["the", 0], ["only", 0], ["line", 0], ["of", 0], ["the", 0], ["test", 0], ["case", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["s", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["10", 0], ["18", 0], ["1", 0], ["le", 0], ["s", 0], ["le", 0], ["162", 0], ["output", 0], ["for", 0], ["each", 0], ["test", 0], ["case", 0], ["print", 0], ["the", 0], ["answer", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["moves", 0], ["you", 0], ["need", 0], ["to", 0], ["perform", 0], ["in", 0], ["order", 0], ["to", 0], ["make", 0], ["the", 0], ["sum", 0], ["of", 0], ["digits", 0], ["of", 0], ["n", 0], ["be", 0], ["less", 0], ["than", 0], ["or", 0], ["equal", 0], ["to", 0], ["s", 0], ["example", 0], ["input", 0], ["5", 0], ["2", 0], ["1", 0], ["1", 0], ["1", 0], ["500", 0], ["4", 0], ["217871987498122", 0], ["10", 0], ["100000000000000001", 0], ["1", 0], ["output", 0], ["8", 0], ["0", 0], ["500", 0], ["2128012501878", 0], ["899999999999999999", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.10778443113772455, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.015707376889360747, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.2346368715083799, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.09427374301675978, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0658682634730539, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.013572854291417165, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.2346368715083799, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.09427374301675978, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["def", 0], ["read", 0], ["int", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["read", 0], ["ints", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["t", 0], ["read", 0], ["int", 0], ["for", 0], ["case", 0], ["num", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["s", 0], ["read", 0], ["ints", 0], ["a", 0], ["0", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["str", 0], ["n", 0], ["ds", 0], ["sum", 0], ["a", 0], ["cost", 0], ["0", 0], ["idx", 0], ["len", 0], ["a", 0], ["1", 0], ["radix", 0], ["1", 0], ["while", 0], ["ds", 0], ["s", 0], ["if", 0], ["a", 0], ["idx", 0], ["0", 0], ["cost", 0], ["10", 0], ["a", 0], ["idx", 0], ["radix", 0], ["ds", 0], ["a", 0], ["idx", 0], ["a", 0], ["idx", 0], ["0", 0], ["ds", 0], ["1", 0], ["a", 0], ["idx", 0], ["1", 0], ["1", 0], ["i", 0], ["idx", 0], ["1", 0], ["while", 0], ["a", 0], ["i", 0], ["10", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["10", 0], ["ds", 0], ["9", 0], ["i", 0], ["1", 0], ["radix", 0], ["10", 0], ["idx", 0], ["1", 0], ["print", 0], ["cost", 0], ["tx", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["tx", 0], ["a", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["k", 0], ["a", 0], ["t", 0], ["1", 0], ["t2", 0], ["0", 0], ["s", 0], ["str", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["t2", 0], ["ord", 0], ["i", 0], ["ord", 0], ["0", 0], ["while", 0], ["t", 0], ["pow", 0], ["10", 0], ["18", 0], ["if", 0], ["t", 0], ["1", 0], ["a", 0], ["t", 0], ["a", 0], ["t", 0], ["t2", 0], ["0", 0], ["s", 0], ["str", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["t2", 0], ["ord", 0], ["i", 0], ["ord", 0], ["0", 0], ["if", 0], ["t2", 0], ["b", 0], ["print", 0], ["a", 0], ["k", 0], ["break", 0], ["t", 0], ["10", 0], ["d", 0], ["decrease", 0], ["the", 0], ["sum", 0], ["of", 0], ["digits", 0], ["yml", 0], ["def", 0], ["dsum", 0], ["x", 0], ["res", 0], ["0", 0], ["while", 0], ["x", 0], ["res", 0], ["x", 0], ["10", 0], ["x", 0], ["10", 0], ["return", 0], ["res", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["f", 0], ["init", 0], ["n", 0], ["n", 0], ["s", 0], ["s", 0], ["p", 0], ["1", 0], ["ans", 0], ["0", 0], ["csum", 0], ["dsum", 0], ["n", 0], ["its", 0], ["10", 0], ["while", 0], ["csum", 0], ["s", 0], ["print", 0], ["f", 0], ["n", 0], ["n", 0], ["add", 0], ["10", 0], ["p", 0], ["n", 0], ["10", 0], ["p", 0], ["if", 0], ["add", 0], ["10", 0], ["p", 0], ["add", 0], ["0", 0], ["ans", 0], ["add", 0], ["n", 0], ["add", 0], ["csum", 0], ["dsum", 0], ["n", 0], ["p", 0], ["10", 0], ["print", 0], ["f", 0], ["n", 0], ["n", 0], ["p", 0], ["p", 0], ["csum", 0], ["csum", 0], ["add", 0], ["add", 0], ["its", 0], ["1", 0], ["assert", 0], ["its", 0], ["print", 0], ["ans", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["as", 0], ["bl", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappush", 0], ["heappop", 0], ["heapify", 0], ["import", 0], ["math", 0], ["from", 0], ["collections", 0], ["import", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["cmp", 0], ["to", 0], ["key", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["from", 0], ["itertools", 0], ["import", 0], ["accumulate", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["m", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["factors", 0], ["n", 0], ["return", 0], ["sorted", 0], ["set", 13], ["reduce", 13], ["list", 13], ["add", 13], ["i", 16], ["n", 16], ["i", 16], ["for", 16], ["i", 16], ["in", 4], ["range", 0], ["1", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["def", 0], ["inv", 0], ["mod", 0], ["n", 0], ["return", 0], ["pow", 0], ["n", 0], ["mod", 0], ["2", 0], ["mod", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["split", 0], ["def", 0], ["st", 0], ["return", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["val", 0], ["return", 0], ["int", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["li2", 0], ["return", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["li3", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["givesum", 0], ["n", 0], ["return", 0], ["sum", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["str", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["val", 0], ["n", 0], ["s", 0], ["li", 0], ["ans", 0], ["0", 0], ["curr", 0], ["10", 0], ["while", 0], ["givesum", 0], ["n", 0], ["s", 0], ["temp", 0], ["n", 0], ["curr", 0], ["n", 0], ["curr", 0], ["temp", 0], ["ans", 0], ["curr", 0], ["temp", 0], ["curr", 0], ["10", 0], ["print", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["s", 0], ["k", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["split", 0], ["k", 0], ["int", 0], ["k", 0], ["su", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["su", 0], ["int", 0], ["s", 0], ["i", 0], ["if", 0], ["su", 0], ["k", 0], ["ans", 0], ["int", 0], ["s", 0], ["i", 0], ["ans", 0], ["int", 0], ["1", 0], ["len", 0], ["s", 0], ["i", 0], ["0", 0], ["ans", 0], ["print", 0], ["ans", 0], ["break", 0], ["su", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["su", 0], ["int", 0], ["s", 0], ["i", 0], ["if", 0], ["su", 0], ["k", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["ans", 0], ["fast", 0], ["io", 0], ["be", 0], ["careful", 0], ["about", 0], ["bytestring", 0], ["import", 0], ["os", 0], ["io", 0], ["input", 0], ["io", 0], ["bytesio", 0], ["os", 0], ["read", 0], ["0", 0], ["os", 0], ["fstat", 0], ["0", 0], ["st", 0], ["size", 0], ["readline", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lenn", 0], ["len", 0], ["str", 0], ["n", 0], ["sumdigit", 0], ["0", 0], ["ncpy", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["lenn", 0], ["sumdigit", 0], ["ncpy", 0], ["10", 0], ["ncpy", 0], ["10", 0], ["if", 0], ["sumdigit", 0], ["s", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["lenn", 0], ["newn", 0], ["n", 0], ["10", 0], ["j", 0], ["1", 0], ["1", 0], ["10", 0], ["j", 0], ["1", 0], ["ncpy", 0], ["newn", 0], ["sumdigit", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["lenn", 0], ["sumdigit", 0], ["ncpy", 0], ["10", 0], ["ncpy", 0], ["10", 0], ["if", 0], ["sumdigit", 0], ["s", 0], ["print", 0], ["newn", 0], ["n", 0], ["break", 0], ["def", 0], ["main", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["s", 0], ["input", 0], ["split", 0], ["s", 0], ["int", 0], ["s", 0], ["total", 0], ["0", 0], ["for", 0], ["nn", 0], ["in", 0], ["n", 0], ["total", 0], ["int", 0], ["nn", 0], ["ans", 0], ["0", 0], ["p", 0], ["1", 0], ["ten", 0], ["1", 0], ["carry", 0], ["false", 0], ["while", 0], ["total", 0], ["s", 0], ["num", 0], ["int", 0], ["n", 0], ["p", 0], ["if", 0], ["carry", 0], ["num", 0], ["1", 0], ["if", 0], ["num", 0], ["0", 0], ["carry", 0], ["false", 0], ["else", 0], ["ans", 0], ["ten", 0], ["10", 0], ["num", 0], ["total", 0], ["num", 0], ["1", 0], ["carry", 0], ["true", 0], ["ten", 0], ["10", 0], ["p", 0], ["1", 0], ["print", 0], ["ans", 0], ["main", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bb", 0], ["b", 0], ["can", 0], ["0", 0], ["d", 0], ["10000000000000000000", 0], ["while", 0], ["d", 0], ["0", 0], ["bb", 0], ["bb", 0], ["a", 0], ["d", 0], ["10", 0], ["d", 0], ["d", 0], ["10", 0], ["if", 0], ["bb", 0], ["0", 0], ["can", 0], ["1", 0], ["d", 0], ["10000000000000000000", 0], ["t", 0], ["0", 0], ["while", 0], ["d", 0], ["0", 0], ["and", 0], ["b", 0], ["a", 0], ["d", 0], ["10", 0], ["1", 0], ["b", 0], ["b", 0], ["a", 0], ["d", 0], ["10", 0], ["t", 0], ["a", 0], ["d", 0], ["1", 0], ["d", 0], ["d", 0], ["d", 0], ["10", 0], ["if", 0], ["can", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["t", 0], ["a", 0], ["t", 0], ["0", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["input", 0], ["functions", 0], ["def", 0], ["inp", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["inlt", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["insr", 0], ["s", 0], ["input", 0], ["return", 0], ["list", 0], ["s", 0], ["len", 0], ["s", 0], ["1", 0], ["def", 0], ["invr", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["digitsum", 0], ["x", 0], ["c", 0], ["0", 0], ["while", 0], ["x", 0], ["c", 0], ["x", 0], ["10", 0], ["x", 0], ["10", 0], ["return", 0], ["c", 0], ["def", 0], ["solve", 0], ["x", 0], ["y", 0], ["if", 0], ["digitsum", 0], ["x", 0], ["y", 0], ["return", 0], ["0", 0], ["try", 0], ["next", 0], ["power", 0], ["of", 0], ["10", 0], ["xstr", 0], ["str", 0], ["x", 0], ["attempt", 0], ["10", 0], ["len", 0], ["xstr", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["xstr", 0], ["newnumber", 0], ["int", 0], ["xstr", 0], ["i", 0], ["1", 0], ["1", 0], ["newnumber", 0], ["10", 0], ["len", 0], ["xstr", 0], ["i", 0], ["1", 0], ["if", 0], ["digitsum", 0], ["newnumber", 0], ["y", 0], ["attempt", 0], ["newnumber", 0], ["x", 0], ["return", 0], ["attempt", 0], ["lines", 0], ["inp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["lines", 0], ["v", 0], ["inlt", 0], ["print", 0], ["solve", 0], ["v", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["savn", 0], ["n", 0], ["cd", 0], ["1", 0], ["while", 0], ["cd", 0], ["n", 0], ["if", 0], ["sum", 0], ["map", 0], ["int", 0], ["str", 0], ["n", 0], ["s", 0], ["break", 0], ["cc", 0], ["n", 0], ["cd", 0], ["10", 0], ["if", 0], ["cc", 0], ["0", 0], ["cd", 0], ["10", 0], ["continue", 0], ["n", 0], ["10", 0], ["cc", 0], ["cd", 0], ["cd", 0], ["10", 0], ["print", 0], ["n", 0], ["savn", 0], ["z", 0], ["int", 0], ["input", 0], ["def", 0], ["sm", 0], ["x", 0], ["ans", 0], ["0", 0], ["while", 0], ["x", 0], ["0", 0], ["ans", 0], ["x", 0], ["10", 0], ["x", 0], ["10", 0], ["return", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["z", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["10000000000000000000000000000", 0], ["if", 0], ["sm", 0], ["n", 0], ["s", 0], ["print", 0], ["0", 0], ["continue", 0], ["goal", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["str", 0], ["n", 0], ["1", 0], ["goal", 0], ["int", 0], ["str", 0], ["n", 0], ["len", 0], ["str", 0], ["n", 0], ["i", 0], ["0", 0], ["i", 0], ["10", 0], ["i", 0], ["if", 0], ["sm", 0], ["goal", 0], ["s", 0], ["ans", 0], ["min", 0], ["ans", 0], ["goal", 0], ["n", 0], ["print", 0], ["ans", 0], ["def", 0], ["ssum", 0], ["s", 0], ["return", 0], ["sum", 0], ["map", 0], ["int", 0], ["list", 0], ["s", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ns", 0], ["str", 0], ["n", 0], ["if", 0], ["ssum", 0], ["ns", 0], ["s", 0], ["print", 0], ["0", 0], ["continue", 0], ["ans", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["ns", 0], ["x", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["x", 0], ["int", 0], ["ns", 0], ["i", 0], ["1", 0], ["acc", 0], ["0", 0], ["while", 0], ["x", 0], ["0", 0], ["acc", 0], ["x", 0], ["10", 0], ["x", 0], ["10", 0], ["if", 0], ["acc", 0], ["s", 0], ["continue", 0], ["y", 0], ["10", 0], ["len", 0], ["ns", 0], ["i", 0], ["int", 0], ["ns", 0], ["i", 0], ["ans", 0], ["min", 0], ["ans", 0], ["y", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["t", 0], ["int", 0], ["input", 0], ["def", 0], ["f", 0], ["n", 0], ["r", 0], ["0", 0], ["while", 0], ["n", 0], ["r", 0], ["n", 0], ["10", 0], ["n", 0], ["10", 0], ["return", 0], ["r", 0], ["for", 0], ["tc", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["if", 0], ["f", 0], ["n", 0], ["s", 0], ["print", 0], ["0", 0], ["continue", 0], ["b", 0], ["1", 0], ["ans", 0], ["int", 0], ["1e20", 0], ["while", 0], ["b", 0], ["n", 0], ["10", 0], ["rn", 0], ["n", 0], ["b", 0], ["b", 0], ["b", 0], ["print", 0], ["rn", 0], ["f", 0], ["rn", 0], ["if", 0], ["f", 0], ["rn", 0], ["s", 0], ["ans", 0], ["min", 0], ["ans", 0], ["rn", 0], ["n", 0], ["b", 0], ["10", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["math", 0], ["import", 0], ["io", 0], ["os", 0], ["data", 0], ["io", 0], ["bytesio", 0], ["os", 0], ["read", 0], ["0", 0], ["os", 0], ["fstat", 0], ["0", 0], ["st", 0], ["size", 0], ["readline", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["as", 0], ["bl", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["insort", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heapify", 0], ["heappush", 0], ["heappop", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["deque", 0], ["counter", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["combinations", 0], ["def", 0], ["data", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["mdata", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["data", 0], ["split", 0], ["def", 0], ["outl", 0], ["var", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["join", 0], ["map", 0], ["str", 0], ["var", 0], ["n", 0], ["def", 0], ["out", 0], ["var", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["var", 0], ["n", 0], ["from", 0], ["decimal", 0], ["import", 0], ["decimal", 0], ["from", 0], ["fractions", 0], ["import", 0], ["fraction", 0], ["sys", 0], ["setrecursionlimit", 0], ["100000", 0], ["mod", 0], ["int", 0], ["1e9", 0], ["7", 0], ["inf", 0], ["2", 0], ["32", 0], ["def", 0], ["cal", 0], ["n", 0], ["ans", 0], ["0", 0], ["while", 0], ["n", 0], ["ans", 0], ["n", 0], ["10", 0], ["n", 0], ["10", 0], ["return", 0], ["ans", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["int", 0], ["data", 0], ["n", 0], ["s", 0], ["mdata", 0], ["ans", 0], ["0", 0], ["t", 0], ["1", 0], ["while", 0], ["cal", 0], ["n", 0], ["s", 0], ["last", 0], ["n", 0], ["10", 0], ["n", 0], ["10", 0], ["if", 0], ["last", 0], ["0", 0], ["ans", 0], ["t", 0], ["10", 0], ["last", 0], ["n", 0], ["1", 0], ["t", 0], ["10", 0], ["out", 0], ["ans", 0], ["author", 0], ["asilencebtf", 0], ["blog", 0], ["asilencebtf", 0], ["top", 0], ["date", 0], ["2020", 0], ["05", 0], ["28", 0], ["13", 0], ["02", 0], ["12", 0], ["lastedittime", 0], ["2020", 0], ["09", 0], ["04", 0], ["23", 0], ["11", 0], ["19", 0], ["def", 0], ["f", 0], ["n", 0], ["res", 0], ["0", 0], ["while", 0], ["n", 0], ["0", 0], ["res", 0], ["res", 0], ["1", 0], ["n", 0], ["n", 0], ["10", 0], ["return", 0], ["res", 0], ["def", 0], ["check", 0], ["n", 0], ["res", 0], ["0", 0], ["while", 0], ["n", 0], ["0", 0], ["res", 0], ["res", 0], ["n", 0], ["10", 0], ["n", 0], ["n", 0], ["10", 0], ["return", 0], ["res", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["len", 0], ["f", 0], ["n", 0], ["ans", 0], ["pow", 0], ["10", 0], ["20", 0], ["if", 0], ["check", 0], ["n", 0], ["s", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["p", 0], ["n", 0], ["pow", 0], ["10", 0], ["i", 0], ["1", 0], ["p", 0], ["p", 0], ["pow", 0], ["10", 0], ["i", 0], ["1", 0], ["p", 0], ["p", 0], ["pow", 0], ["10", 0], ["i", 0], ["1", 0], ["if", 0], ["check", 0], ["p", 0], ["s", 0], ["if", 0], ["ans", 0], ["p", 0], ["n", 0], ["ans", 0], ["p", 0], ["n", 0], ["print", 0], ["ans", 0], ["import", 0], ["bisect", 0], ["import", 0], ["copy", 0], ["import", 0], ["fractions", 0], ["import", 0], ["functools", 0], ["import", 0], ["heapq", 0], ["import", 0], ["math", 0], ["import", 0], ["random", 0], ["import", 0], ["sys", 0], ["def", 0], ["starting", 0], ["point", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["s", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["int", 0], ["dig", 0], ["for", 0], ["dig", 0], ["in", 0], ["str", 0], ["n", 0], ["s", 0], ["print", 0], ["0", 0], ["continue", 0], ["so", 0], ["we", 0], ["start", 0], ["counting", 0], ["digits", 0], ["from", 0], ["left", 0], ["to", 0], ["right", 0], ["the", 0], ["first", 0], ["digits", 0], ["where", 0], ["the", 0], ["sum", 0], ["is", 0], ["greater", 0], ["than", 0], ["or", 0], ["equal", 0], ["to", 0], ["s", 0], ["and", 0], ["every", 0], ["digit", 0], ["following", 0], ["needs", 0], ["to", 0], ["be", 0], ["set", 0], ["to", 0], ["0", 0], ["and", 0], ["the", 0], ["last", 0], ["digit", 0], ["we", 0], ["safely", 0], ["counted", 0], ["gets", 0], ["incremented", 0], ["our", 0], ["answer", 0], ["is", 0], ["the", 0], ["difference", 0], ["between", 0], ["this", 0], ["number", 0], ["and", 0], ["n", 0], ["str", 0], ["n", 0], ["0", 0], ["str", 0], ["n", 0], ["total", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["total", 0], ["s", 0], ["total", 0], ["int", 0], ["str", 0], ["n", 0], ["i", 0], ["i", 0], ["1", 0], ["target", 0], ["int", 0], ["str", 0], ["n", 0], ["i", 0], ["1", 0], ["1", 0], ["10", 0], ["len", 0], ["str", 0], ["n", 0], ["i", 0], ["1", 0], ["print", 0], ["str", 0], ["target", 0], ["n", 0], ["starting", 0], ["point", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["s", 0], ["input", 0], ["split", 0], ["s", 0], ["int", 0], ["s", 0], ["nn", 0], ["0", 0], ["0", 0], ["0", 0], ["list", 0], ["n", 0], ["su", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["n", 0], ["su", 0], ["int", 0], ["i", 0], ["ptr", 0], ["1", 0], ["cost", 0], ["0", 0], ["while", 0], ["su", 0], ["s", 0], ["su", 0], ["int", 0], ["nn", 0], ["ptr", 0], ["su", 0], ["1", 0], ["nn", 0], ["ptr", 0], ["0", 0], ["nn", 0], ["ptr", 0], ["1", 0], ["str", 0], ["1", 0], ["int", 0], ["nn", 0], ["ptr", 0], ["1", 0], ["itr", 0], ["1", 0], ["while", 0], ["int", 0], ["nn", 0], ["ptr", 0], ["itr", 0], ["10", 0], ["su", 0], ["10", 0], ["su", 0], ["int", 0], ["nn", 0], ["ptr", 0], ["itr", 0], ["10", 0], ["nn", 0], ["ptr", 0], ["itr", 0], ["1", 0], ["str", 0], ["int", 0], ["nn", 0], ["ptr", 0], ["itr", 0], ["1", 0], ["int", 0], ["nn", 0], ["ptr", 0], ["itr", 0], ["10", 0], ["nn", 0], ["ptr", 0], ["itr", 0], ["str", 0], ["int", 0], ["nn", 0], ["ptr", 0], ["1", 0], ["10", 0], ["itr", 0], ["1", 0], ["if", 0], ["int", 0], ["nn", 0], ["ptr", 0], ["1", 0], ["10", 0], ["ptr", 0], ["1", 0], ["print", 0], ["int", 0], ["join", 0], ["nn", 0], ["int", 0], ["n", 0], ["nn", 0], ["n", 0], ["ctr", 0], ["0", 0], ["cost", 0], ["su", 0], ["0", 0], ["while", 0], ["nn", 0], ["su", 0], ["nn", 0], ["10", 0], ["cost", 0], ["append", 0], ["10", 0], ["nn", 0], ["10", 0], ["10", 0], ["ctr", 0], ["nn", 0], ["10", 0], ["ctr", 0], ["1", 0], ["ptr", 0], ["1", 0], ["while", 0], ["su", 0], ["s", 0], ["su", 0], ["n", 0], ["10", 0], ["ptr", 0], ["su", 0], ["1", 0], ["n", 0], ["def", 0], ["solve", 0], ["n", 0], ["s", 0], ["dns", 0], ["ord", 0], ["x", 0], ["ord", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["str", 0], ["n", 0], ["if", 0], ["sum", 0], ["dns", 0], ["s", 0], ["return", 0], ["0", 0], ["m", 0], ["len", 0], ["dns", 0], ["for", 0], ["i", 0], ["d", 0], ["in", 0], ["enumerate", 0], ["dns", 0], ["if", 0], ["d", 0], ["s", 0], ["return", 0], ["10", 0], ["m", 0], ["i", 0], ["n", 0], ["10", 0], ["m", 0], ["i", 0], ["s", 0], ["d", 0], ["return", 0], ["42", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["s", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["solve", 0], ["n", 0], ["s", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["mi", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["si", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["findsum", 0], ["n", 0], ["s", 0], ["su", 0], ["0", 0], ["ind", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["n", 0], ["su", 0], ["int", 0], ["n", 0], ["i", 0], ["if", 0], ["su", 0], ["s", 0], ["ind", 0], ["i", 0], ["break", 0], ["return", 0], ["ind", 0], ["t", 0], ["ii", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["s", 0], ["mi", 0], ["n", 0], ["str", 0], ["n", 0], ["ans", 0], ["0", 0], ["ind", 0], ["findsum", 0], ["n", 0], ["s", 0], ["while", 0], ["ind", 0], ["1", 0], ["f", 0], ["n", 0], ["ind", 0], ["if", 0], ["f", 0], ["f", 0], ["0", 0], ["se", 0], ["0", 0], ["0", 0], ["len", 0], ["n", 0], ["ind", 0], ["1", 0], ["f", 0], ["str", 0], ["int", 0], ["f", 0], ["1", 0], ["se", 0], ["ans", 0], ["int", 0], ["f", 0], ["int", 0], ["n", 0], ["n", 0], ["f", 0], ["ind", 0], ["findsum", 0], ["n", 0], ["s", 0], ["print", 0], ["ans", 0], ["import", 0], ["math", 0], ["def", 0], ["checksum", 0], ["n", 0], ["return", 0], ["sum", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["str", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["s", 0], ["int", 0], ["p", 0], ["for", 0], ["p", 0], ["in", 0], ["input", 0], ["split", 0], ["moves", 0], ["0", 0], ["if", 0], ["checksum", 0], ["n", 0], ["s", 0], ["print", 0], ["0", 0], ["else", 0], ["pow", 0], ["10", 0], ["while", 0], ["true", 0], ["print", 0], ["n", 0], ["closest", 0], ["pow", 0], ["n", 0], ["pow", 0], ["1", 0], ["pow", 0], ["print", 0], ["closest", 0], ["moves", 0], ["closest", 0], ["n", 0], ["n", 0], ["closest", 0], ["if", 0], ["checksum", 0], ["n", 0], ["s", 0], ["break", 0], ["pow", 0], ["10", 0], ["print", 0], ["moves", 0], ["for", 0], ["tc", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["s", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["sumof", 0], ["sum", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["str", 0], ["n", 0], ["cost", 0], ["0", 0], ["carry", 0], ["false", 0], ["for", 0], ["pos", 0], ["char", 0], ["in", 0], ["enumerate", 0], ["reversed", 0], ["0", 0], ["str", 0], ["n", 0], ["if", 0], ["sumof", 0], ["s", 0], ["break", 0], ["digit", 0], ["int", 0], ["char", 0], ["if", 0], ["carry", 0], ["digit", 0], ["1", 0], ["if", 0], ["digit", 0], ["0", 0], ["carry", 0], ["true", 0], ["cost", 0], ["10", 0], ["digit", 0], ["10", 0], ["pos", 0], ["sumof", 0], ["digit", 0], ["1", 0], ["print", 0], ["cost", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["sm", 0], ["n", 0], ["ret", 0], ["0", 0], ["while", 0], ["n", 0], ["0", 0], ["ret", 0], ["n", 0], ["10", 0], ["n", 0], ["10", 0], ["return", 0], ["ret", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["s", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["temp", 0], ["n", 0], ["while", 0], ["sm", 0], ["n", 0], ["s", 0], ["j", 0], ["10", 0], ["while", 0], ["n", 0], ["j", 0], ["0", 0], ["j", 0], ["10", 0], ["n", 0], ["j", 0], ["n", 0], ["j", 0], ["print", 0], ["n", 0], ["temp", 0], ["t", 0], ["int", 0], ["input", 0], ["def", 0], ["dgt", 0], ["sum", 0], ["num", 0], ["return", 0], ["sum", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["str", 0], ["num", 0], ["def", 0], ["clps", 0], ["val", 0], ["left", 0], ["0", 0], ["if", 0], ["len", 0], ["str", 0], ["val", 0], ["1", 0], ["return", 0], ["1", 0], ["left", 0], ["1", 0], ["return", 0], ["int", 0], ["str", 0], ["val", 0], ["1", 0], ["1", 0], ["left", 0], ["1", 0], ["def", 0], ["solve", 0], ["n", 0], ["s", 0], ["n", 0], ["str", 0], ["str", 0], ["n", 0], ["s", 0], ["0", 0], ["target", 0], ["n", 0], ["for", 0], ["i", 0], ["d", 0], ["in", 0], ["enumerate", 0], ["n", 0], ["str", 0], ["d", 0], ["int", 0], ["d", 0], ["s", 0], ["d", 0], ["if", 0], ["s", 0], ["s", 0], ["cl", 0], ["int", 0], ["n", 0], ["str", 0], ["i", 0], ["1", 0], ["0", 0], ["while", 0], ["dgt", 0], ["sum", 0], ["cl", 0], ["0", 0], ["s", 0], ["cl", 0], ["clps", 0], ["cl", 0], ["target", 0], ["cl", 0], ["0", 0], ["pow", 0], ["10", 0], ["cl", 0], ["1", 0], ["len", 0], ["n", 0], ["str", 0], ["i", 0], ["1", 0], ["break", 0], ["return", 0], ["target", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["s", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["solve", 0], ["n", 0], ["s", 0], ["usr", 0], ["bin", 0], ["env", 0], ["pypy3", 0], ["def", 0], ["ans", 0], ["n", 0], ["s", 0], ["n", 0], ["str", 0], ["n", 0], ["if", 0], ["sum", 0], ["map", 0], ["int", 0], ["n", 0], ["s", 0], ["return", 0], ["0", 0], ["candidates", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["n", 0], ["na", 0], ["nb", 0], ["n", 0], ["i", 0], ["n", 0], ["i", 0], ["na", 0], ["str", 0], ["int", 0], ["na", 0], ["1", 0], ["nb", 0], ["0", 0], ["len", 0], ["nb", 0], ["if", 0], ["sum", 0], ["map", 0], ["int", 0], ["na", 0], ["sum", 0], ["map", 0], ["int", 0], ["nb", 0], ["s", 0], ["candidates", 0], ["add", 0], ["int", 0], ["na", 0], ["nb", 0], ["int", 0], ["n", 0], ["big", 0], ["1", 0], ["0", 0], ["len", 0], ["n", 0], ["candidates", 0], ["add", 0], ["int", 0], ["big", 0], ["int", 0], ["n", 0], ["small", 0], ["1", 0], ["0", 0], ["len", 0], ["n", 0], ["1", 0], ["if", 0], ["int", 0], ["small", 0], ["int", 0], ["n", 0], ["0", 0], ["candidates", 0], ["add", 0], ["int", 0], ["small", 0], ["int", 0], ["n", 0], ["return", 0], ["min", 0], ["candidates", 0], ["def", 0], ["ans", 0], ["slow", 0], ["n", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["10", 0], ["200", 0], ["big", 0], ["n", 0], ["i", 0], ["big", 0], ["str", 0], ["big", 0], ["if", 0], ["sum", 0], ["map", 0], ["int", 0], ["big", 0], ["s", 0], ["return", 0], ["i", 0], ["import", 0], ["sys", 0], ["print", 0], ["ans", 0], ["2", 0], ["2", 0], ["print", 0], ["ans", 0], ["slow", 0], ["2", 0], ["2", 0], ["return", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["1", 0], ["162", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["1", 0], ["10000", 0], ["if", 0], ["ans", 0], ["n", 0], ["s", 0], ["ans", 0], ["slow", 0], ["n", 0], ["s", 0], ["print", 0], ["n", 0], ["s", 0], ["return", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["s", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["s", 0], ["int", 0], ["s", 0], ["print", 0], ["ans", 0], ["n", 0], ["s", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00432152117545376, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00037605544844092814, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.009458297506448839, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0016948872279912693, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.000432152117545376, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.000108038029386344, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.005588993981083405, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0013972484952708513, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nChef likes arrays a lot. Today, he found an array A consisting of N positive integers.\nLet L denote the sorted (in non-increasing order) list of size N*(N+1)/2 containing the sums of all possible contiguous subarrays of A. Chef is interested in finding the first K elements from the list L. Can you help him in accomplishing this task?\n\n-----Input-----\nThere is only a single test case per input file.\nThe first line of input contains two space separated integer numbers N and K denoting the size of the array and the number of the maximal sums you need to find.\nThe following line contains N space separated integer numbers denoting the array A.\n\n-----Output-----\nOutput K space separated integers where the ith integer denotes the ith element of L.\n\n-----Constraints-----\n- 1 ≤ N ≤ 105\n- 1 ≤ K ≤ min(N*(N+1)/2, 105)\n- 1 ≤ Ai ≤ 109\n\n-----Subtasks-----\n- Subtask 1 (47 pts) : 1 ≤ N ≤ 1000, 1 ≤ K ≤ min{N*(N+1)/2, 105}\n- Subtask 2 (53 pts) : 1 ≤ N ≤ 105, 1 ≤ K ≤ min{N*(N+1)/2, 105}\n\n-----Example-----\nInput 13 4\n1 3 4\n\nOutput 18 7 4 4\n\nInput 23 3\n10 2 7\n\nOutput 219 12 10\n\n-----Explanation-----\nTest 1:\n\nThe first 4 elements of it are [8, 7, 4, 4].\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["\n\nimport heapq\n\n\ndef contig(p, A):\n\tans = []\n\tn = len(A)\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif i == j:\n\t\t\t\tans.append(p[i])\n\t\t\telse:\n\t\t\t\tans.append(p[j] - p[i])\n\treturn ans\n\n\ndef solver(N, K, A):\n\ta = []\n\tprefix = [A[0]]\n\tfor x in A[1:]:\n\t\tprefix.append(prefix[-1] + x)\n\n\treturn heapq.nlargest(K, contig(prefix, A))\n\n\ndef __starting_point():\n\tN, K = list(map(int, input().split()))\n\tA = list(map(int, input().split()))\n\n\tprint(' '.join([str(i) for i in solver(N, K, A)]))\n\n__starting_point()\n", "__author__ = 'Deepak'\nn,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nm=1\nd=[]\nwhile(m<=len(a)):\n\tfor j in range(len(a)-m+1):\n\t\td.append(sum(list(a[j:j+m])))\n\tm+=1\n#print d\nd.sort(reverse=True)\nfor i in range(k):\n\tprint(d[i], end=' ')\n", "n,k=list(map(int, input().split()))\na=list(map(int,input().split()))\ns=[]\nc=0\nfor i in range(1,n):\n\ta[i]+=a[i-1]\nfor i in range(n,0,-1):\n\tj=n\n\twhile j-i!=0:\n\t\tld=j-i\n\t\tm=a[ld-1]\n\t\ts.append(a[ld+i-1]-m)\n\t\tj-=1\n\ts.append(a[i-1])\ns.sort()\nfor i in range(len(s)-1, len(s)-k-1,-1):\n\tprint(s[i], end=' ')\n", "def maxKSums():\n\tn, k = list(map(int, input().split()))\n\ta = list(map(int, input().split()))\n\tsubSum = []\n\tfor i in range(n):\n\t\tsumd = 0\n\t\tfor j in range(i, n):\n\t\t\tsumd += a[j]\n\t\t\tsubSum.append(sumd)\n\tsubSum.sort(reverse=True)\n\tprint(\" \".join(map(str, subSum[:k])))\n\nmaxKSums()\n", "def maxKSums():\n\tn, k = list(map(int, input().split()))\n\ta = list(map(int, input().split()))\n\tsubSum = []\n\tfor i in range(n):\n\t\tsumd = 0\n\t\tfor j in range(i, n):\n\t\t\tsumd += a[j]\n\t\t\tsubSum.append(sumd)\n\tsubSum.sort(reverse=True)\n\tfor i in range(k):\n\t\tprint(subSum[i], end=' ')\n\nmaxKSums()\n", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nans=\"\"\nb=[]\nfor i in range(n):\n\tfor j in range(i+1,n+1):\n\t\tb.append(sum(a[i:j]))\nb.sort()\nfor i in range(k):\n\tans+= str(b[len(b)-i-1])+\" \"\nprint(ans)\n\t\n", "import math\n\n\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nlt=[]\nln=len(y)\nfor j in range(ln):\n\tb=0\n\twhile(b<(ln-j)):\n\t\tlt.append(sum(y[b:b+j+1]))\n\t\t#print sum(y[b:b+j])\n\t\tb+=1\nlt.sort()\nlt.reverse()\nfor k in range(x[1]):\n\tprint(lt[k], end=' ')\n\t\n\t\n\t\t\t\n\t\t\n", "n, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\nans = []\nfor i in range(1, n+1):\n\tfor j in range(n-i+1):\n\t\tans.append(sum(arr[j:j+i]))\nans.sort()\nans\nprint(str(list(reversed(ans[-k:]))).replace(\",\", \"\")[1:-1])\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ncom = []\nfor i in range(n+1):\n\tfor j in range(i+1,n+1):\n\t\tcom.append(sum(a[i:j]))\ncom = sorted(com, reverse = True)\nfor i in com[:k]:\n\tprint(i, end=' ')\nprint(\"\")\n"], "id": "id5195"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5195", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["chef", 1], ["likes", 1], ["arrays", 1], ["a", 1], ["lot", 1], ["today", 1], ["he", 1], ["found", 1], ["an", 1], ["array", 1], ["a", 1], ["consisting", 1], ["of", 1], ["n", 1], ["positive", 1], ["integers", 1], ["let", 1], ["l", 1], ["denote", 1], ["the", 1], ["sorted", 1], ["in", 1], ["non", 1], ["increasing", 1], ["order", 1], ["list", 1], ["of", 1], ["size", 1], ["n", 1], ["n", 1], ["1", 1], ["2", 1], ["containing", 1], ["the", 1], ["sums", 1], ["of", 1], ["all", 1], ["possible", 1], ["contiguous", 1], ["subarrays", 1], ["of", 1], ["a", 1], ["chef", 1], ["is", 1], ["interested", 1], ["in", 1], ["finding", 1], ["the", 1], ["first", 1], ["k", 1], ["elements", 1], ["from", 0], ["the", 0], ["list", 0], ["l", 0], ["can", 0], ["you", 0], ["help", 0], ["him", 0], ["in", 0], ["accomplishing", 0], ["this", 0], ["task", 0], ["input", 0], ["there", 1], ["is", 1], ["only", 1], ["a", 1], ["single", 1], ["test", 1], ["case", 1], ["per", 1], ["input", 1], ["file", 1], ["the", 2], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["two", 1], ["space", 1], ["separated", 1], ["integer", 1], ["numbers", 1], ["n", 1], ["and", 1], ["k", 1], ["denoting", 1], ["the", 1], ["size", 1], ["of", 1], ["the", 1], ["array", 1], ["and", 1], ["the", 1], ["number", 1], ["of", 1], ["the", 1], ["maximal", 1], ["sums", 1], ["you", 1], ["need", 1], ["to", 1], ["find", 1], ["the", 1], ["following", 1], ["line", 0], ["contains", 0], ["n", 0], ["space", 0], ["separated", 0], ["integer", 0], ["numbers", 0], ["denoting", 0], ["the", 0], ["array", 0], ["a", 0], ["output", 0], ["output", 1], ["k", 1], ["space", 1], ["separated", 0], ["integers", 0], ["where", 0], ["the", 0], ["ith", 0], ["integer", 0], ["denotes", 0], ["the", 0], ["ith", 0], ["element", 0], ["of", 0], ["l", 0], ["constraints", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["105", 0], ["1", 0], ["≤", 0], ["k", 0], ["≤", 0], ["min", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["105", 0], ["1", 0], ["≤", 0], ["ai", 0], ["≤", 0], ["109", 0], ["subtasks", 0], ["subtask", 0], ["1", 0], ["47", 0], ["pts", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["1000", 0], ["1", 0], ["≤", 0], ["k", 0], ["≤", 0], ["min", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["105", 0], ["subtask", 0], ["2", 0], ["53", 0], ["pts", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["105", 0], ["1", 0], ["≤", 0], ["k", 0], ["≤", 0], ["min", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["105", 0], ["example", 0], ["input", 0], ["13", 0], ["4", 0], ["1", 0], ["3", 0], ["4", 0], ["output", 0], ["18", 0], ["7", 0], ["4", 0], ["4", 0], ["input", 0], ["23", 0], ["3", 0], ["10", 0], ["2", 0], ["7", 0], ["output", 0], ["219", 0], ["12", 0], ["10", 0], ["explanation", 0], ["test", 0], ["1", 0], ["the", 0], ["first", 0], ["4", 0], ["elements", 0], ["of", 0], ["it", 0], ["are", 0], ["8", 0], ["7", 0], ["4", 0], ["4", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.42358078602620086, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.42139737991266374, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5518672199170125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5518672199170125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.42358078602620086, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.42139737991266374, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5518672199170125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5518672199170125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["import", 0], ["heapq", 0], ["def", 0], ["contig", 0], ["p", 0], ["a", 0], ["ans", 0], ["n", 1], ["len", 0], ["a", 0], ["for", 8], ["i", 8], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["if", 0], ["i", 0], ["j", 0], ["ans", 0], ["append", 0], ["p", 0], ["i", 0], ["else", 0], ["ans", 0], ["append", 0], ["p", 0], ["j", 0], ["p", 0], ["i", 0], ["return", 0], ["ans", 0], ["def", 0], ["solver", 0], ["n", 0], ["k", 0], ["a", 0], ["a", 0], ["prefix", 0], ["a", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["1", 0], ["prefix", 0], ["append", 0], ["prefix", 0], ["1", 0], ["x", 0], ["return", 0], ["heapq", 0], ["nlargest", 0], ["k", 0], ["contig", 0], ["prefix", 0], ["a", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["join", 0], ["str", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["solver", 0], ["n", 0], ["k", 0], ["a", 0], ["starting", 0], ["point", 0], ["author", 0], ["deepak", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["1", 0], ["d", 0], ["while", 0], ["m", 0], ["len", 0], ["a", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["m", 0], ["1", 0], ["d", 0], ["append", 0], ["sum", 0], ["list", 0], ["a", 0], ["j", 0], ["j", 0], ["m", 0], ["m", 0], ["1", 0], ["print", 0], ["d", 0], ["d", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["print", 0], ["d", 0], ["i", 0], ["end", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["0", 0], ["1", 0], ["j", 0], ["n", 0], ["while", 0], ["j", 0], ["i", 0], ["0", 0], ["ld", 0], ["j", 0], ["i", 0], ["m", 0], ["a", 0], ["ld", 0], ["1", 0], ["s", 0], ["append", 0], ["a", 0], ["ld", 0], ["i", 0], ["1", 0], ["m", 0], ["j", 0], ["1", 0], ["s", 0], ["append", 0], ["a", 0], ["i", 0], ["1", 0], ["s", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["len", 0], ["s", 0], ["k", 0], ["1", 0], ["1", 0], ["print", 0], ["s", 0], ["i", 0], ["end", 0], ["def", 0], ["maxksums", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["subsum", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sumd", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["sumd", 0], ["a", 0], ["j", 0], ["subsum", 0], ["append", 0], ["sumd", 0], ["subsum", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["subsum", 0], ["k", 0], ["maxksums", 0], ["def", 0], ["maxksums", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["subsum", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sumd", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["sumd", 0], ["a", 0], ["j", 0], ["subsum", 0], ["append", 0], ["sumd", 0], ["subsum", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["print", 0], ["subsum", 0], ["i", 0], ["end", 0], ["maxksums", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["b", 0], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["1", 0], ["b", 0], ["append", 0], ["sum", 0], ["a", 0], ["i", 0], ["j", 0], ["b", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["ans", 0], ["str", 0], ["b", 0], ["len", 0], ["b", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["math", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lt", 0], ["ln", 0], ["len", 0], ["y", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["ln", 0], ["b", 0], ["0", 0], ["while", 0], ["b", 0], ["ln", 0], ["j", 0], ["lt", 0], ["append", 0], ["sum", 0], ["y", 0], ["b", 0], ["b", 0], ["j", 0], ["1", 0], ["print", 0], ["sum", 0], ["y", 0], ["b", 0], ["b", 0], ["j", 0], ["b", 0], ["1", 0], ["lt", 0], ["sort", 0], ["lt", 0], ["reverse", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["x", 0], ["1", 0], ["print", 0], ["lt", 0], ["k", 0], ["end", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["i", 0], ["1", 0], ["ans", 0], ["append", 0], ["sum", 0], ["arr", 0], ["j", 0], ["j", 0], ["i", 0], ["ans", 0], ["sort", 0], ["ans", 0], ["print", 0], ["str", 0], ["list", 0], ["reversed", 0], ["ans", 0], ["k", 0], ["replace", 0], ["1", 0], ["1", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["com", 0], ["for", 91], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["1", 0], ["com", 0], ["append", 0], ["sum", 0], ["a", 0], ["i", 0], ["j", 0], ["com", 0], ["sorted", 0], ["com", 0], ["reverse", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["com", 0], ["k", 0], ["print", 0], ["i", 0], ["end", 0], ["print", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.009708737864077669, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0034193961378427397, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.08159392789373814, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.04486310653293575, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.007766990291262136, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0033980582524271844, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.056925996204933584, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.04459203036053131, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nIn this problem at each moment you have a set of intervals. You can move from interval (a, b) from our set to interval (c, d) from our set if and only if c < a < d or c < b < d. Also there is a path from interval I_1 from our set to interval I_2 from our set if there is a sequence of successive moves starting from I_1 so that we can reach I_2.\n\nYour program should handle the queries of the following two types:  \"1 x y\" (x < y) — add the new interval (x, y) to the set of intervals. The length of the new interval is guaranteed to be strictly greater than all the previous intervals. \"2 a b\" (a ≠ b) — answer the question: is there a path from a-th (one-based) added interval to b-th (one-based) added interval? \n\nAnswer all the queries. Note, that initially you have an empty set of intervals.\n\n\n-----Input-----\n\nThe first line of the input contains integer n denoting the number of queries, (1 ≤ n ≤ 100). Each of the following lines contains a query as described above. All numbers in the input are integers and don't exceed 10^9 by their absolute value.\n\nIt's guaranteed that all queries are correct.\n\n\n-----Output-----\n\nFor each query of the second type print \"YES\" or \"NO\" on a separate line depending on the answer.\n\n\n-----Examples-----\nInput\n5\n1 1 5\n1 5 11\n2 1 2\n1 2 9\n2 1 2\n\nOutput\nNO\nYES\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["#!/usr/bin/env python3\n\ndef is_conn(i1, i2):\n\ta, b = i1\n\tc, d = i2\n\treturn (c < a < d or c < b < d)\n\nneighbors = {}\nintervals = []\n\nn = int(input())\nfor i in range(0, n):\n\tq, x, y = [int(j) for j in input().split()]\n\tif q == 1:\n\t\t# we add to the interval\n\t\tourint = (x,y)\n\t\tintervals.append(ourint)\n\t\tneighbors[ourint] = []\n\t\t# and check for edges\n\t\tfor interval in intervals:\n\t\t\t# if they are connected, join them\n\t\t\tif is_conn(interval, ourint):\n\t\t\t\tneighbors[interval].append(ourint)\n\t\t\tif is_conn(ourint, interval):\n\t\t\t\tneighbors[ourint].append(interval)\n\t\t\n\tif q == 2:\n\t\t# we check whether there is a path from x to y\n\t\t# this is easy version, bfs should be enough\n\t\tx -= 1\n\t\ty -= 1\n\t\ta = intervals[x]\n\t\tb = intervals[y]\n\t\t\n\t\tvisited = {a}\n\t\tquery = [a]\n\t\twhile len(query) > 0:\n\t\t\t\tj = query[0]\n\t\t\t\tquery = query[1:]\n\t\t\t\tfor nei in neighbors[j]:\n\t\t\t\t\t\tif not nei in visited:\n\t\t\t\t\t\t\t\tquery.append(nei)\n\t\t\t\t\t\t\t\tvisited = visited | {nei}\n\n\t\tif b in visited:\n\t\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\t\tprint(\"NO\")     \n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\n", "def DFS(v,b,visited):\n\tvisited.add(v)\n\tnonlocal count,matrix,ok\n\tif v==b:\n\t\tok = True\n\t\treturn\n\tfor i in range(count):\n\t\tif matrix[v][i]==1 and v!=i and i not in visited:\n\t\t\tDFS(i,b,visited)\n\n\nn  =  int(input())\nmatrix = [[0]*111 for i in range(111)]\ncount = 0\nok = False\nintervals = []\nfor i in range(n):\n\tt,a,b  = list(map(int,input().split()))\n\tif t==1:\n\t\tintervals.append((a,b))\n\t\tfor l in range(count):\n\t\t\tc,d = intervals[l]\n\t\t\tif c<a<d or c<b<d:\n\t\t\t\tmatrix[count][l]=1\n\t\t\tif a<c<b or a<d<b:\n\t\t\t\tmatrix[l][count]=1\n\t\tcount+=1\n\tif t==2:\n\t\tvisited = set()\n\t\tok = False\n\t\tres = DFS(a-1,b-1,visited)\n\t\tif ok:print(\"YES\")\n\t\telse:print(\"NO\")\n\n", "flag=False;\ndef main():\n\tintset=[]\n\tqr=int(input())\n\tfor i in range(qr):\n\t\tqqss=str(input())\n\t\tqqss=qqss.split(\" \")\n\t\tif qqss[0]==\"1\":\n\t\t\ta=int(qqss[1])\n\t\t\tb=int(qqss[2])\n\t\t\tintset.append([a,b]);\n\t\telse:\n\t\t\tsi=int(qqss[1])\n\t\t\tfi=int(qqss[2])\n\t\t\tsi-=1\n\t\t\tfi-=1\n\t\t\tv=[False for x in range(len(intset))]\n\t\t\tprintIsPath(intset,si,fi,v)\n\ndef printIsPath(iset,a,b,v):\n\tast=iset[a][0]\n\taen=iset[a][1]\n\tbst=iset[b][0]\n\tben=iset[b][1]\n\tif bst < ast < ben or bst < aen < ben:\n\t\tprint (\"YES\")\n\t\treturn;\n\tv[a]=True\n\tnonlocal flag;\n\tflag=False\n\tfor i in range(len(iset)):\n\t\tmst=iset[i][0]\n\t\tmen=iset[i][1]\n\t\tif  (mst < ast < men or mst < aen < men) and not v[i]:\n\t\t\tif searchFinal(iset,i,b,v):\n\t\t\t\treturn;\n\tif not flag:\n\t\tprint (\"NO\")\n\ndef searchFinal(iset,i,f,v):\n\tv[i]=True;\n\tif i==f:\n\t\tprint (\"YES\")\n\t\tnonlocal flag;\n\t\tflag=True;\n\t\treturn True\n\tist=iset[i][0]\n\tien=iset[i][1]\n\tfor j in range(len(iset)):\n\t\tjst=iset[j][0]\n\t\tjen=iset[j][1]\n\t\tif not v[j] and (jst < ist < jen or jst < ien < jen):\n\t\t\tsearchFinal(iset,j,f,v)\n\nmain()\n", "data = []\nfor _ in range(int(input())):\n\tcmd = list(map(int, input().split()))\n\tif cmd[0] == 1:\n\t\tdata.append(cmd[1:])\n\telse:\n\t\tdone = [False] * (len(data) + 1)\n\t\tque = [cmd[1] - 1]\n\t\twhile len(que):\n\t\t\tp = que[0]\n\t\t\tdel que[0]\n\t\t\tfor i, v in enumerate(data):\n\t\t\t\tif (v[0] < data[p][0] < v[1] or v[0] < data[p][1] < v[1]) and not done[i]:\n\t\t\t\t\tdone[i] = True\n\t\t\t\t\tque.append(i)\n\t\tprint(\"YES\" if done[cmd[2] - 1] else \"NO\")\n\n\n", "def get_operations():\n\tn = int(input())\n\treturn [tuple(int(k) for k in input().split()) for _ in range(n)]\n\ndef can_move(a, b):\n\tx1, y1 = a\n\tx2, y2 = b\n\treturn (x2 < x1 and x1 < y2) or (x2 < y1 and y1 < y2)\n\ndef can_reach(intervals, x, y, mask = []):\n\tif not mask:\n\t\tmask = [False] * len(intervals)\n\tif x == y:\n\t\treturn True\n\tmask[x] = True\n\txs = [k for k in range(len(intervals)) if not mask[k] and can_move(intervals[x], intervals[k])]\n\treturn any(can_reach(intervals, k, y, mask) for k in xs)\n\ndef solve(operations):\n\tintervals = []\n\tresults = []\n\tfor op in operations:\n\t\tt, x, y = op\n\t\tif t == 1:\n\t\t\tintervals.append(tuple([x, y]))\n\t\telse:\n\t\t\tresults.append(can_reach(intervals, x - 1, y - 1))\n\treturn results\n\ndef __starting_point():\n\toperations = get_operations()\n\tresults = solve(operations)\n\tfor res in results:\n\t\tprint('YES' if res else 'NO')\n\n__starting_point()\n", "path = []\nn = int(input())\nfor it in range(0, n):\n\tdata = list(map(int, input().split(' ')))\n\tif data[0] == 1:\n\t\tpath.append(data[1:])\n\telse:\n\t\tvis = [False] * (len(path) + 1)\n\t\tque = [data[1] - 1]\n\t\twhile len(que):\n\t\t\tp = que[0]\n\t\t\tdel que[0]\n\t\t\tfor i, v in enumerate(path):\n\t\t\t\tif (v[0] < path[p][0] < v[1] or v[0] < path[p][1] < v[1]) and not vis[i]:\n\t\t\t\t\tvis[i] = True\n\t\t\t\t\tque.append(i)\n\t\tprint('YES' if vis[data[2] -1] else 'NO')\n", "n = int(input())\nxy = []\nadjlist = []\n\ndef dfs(visit,cur,dest):\n\tvisit[cur] = True\n\tif cur==dest: return True\n\telse:\n\t\tfound = False\n\t\tfor v in adjlist[cur] :\n\t\t\tif not visit[v] :\n\t\t\t\tfound = found or dfs(visit,v,dest)\n\t\treturn found\n\nfor tc in range(0,n):\n\tq, a, b = [int(x)-1 for x in input().split()]\n\tif q == 0:\n\t\tadjlist.append([])\n\t\tfor i in range(0,len(xy)):\n\t\t\tx,y = xy[i]\n\t\t\tif (a<x<b or a<y<b):\n\t\t\t\tadjlist[i].append(len(xy))\n\t\t\tif (x<a<y or x<b<y):\n\t\t\t\tadjlist[len(xy)].append(i)\n\t\txy.append((a,b))\n\telif q == 1:\n\t\tvisit = [False for x in range(0,len(xy))]\n\t\tif dfs(visit,a,b):\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n", "class Interval:\n\tdef __init__(self, a, b):\n\t\tself.interval_a = a\n\t\tself.interval_b = b\n\n\tdef can_go(self, interval):\n\t\treturn (interval.interval_a < self.interval_a < interval.interval_b) or (\n\t\t\tinterval.interval_a < self.interval_b < interval.interval_b)\n\n\nintervals = []\nmatrix = []\n\n\ndef dfs(a, b, visited, matrix):\n\tif a == b:\n\t\treturn True\n\n\tans = False\n\tvisited[a] = True\n\tfor i in range(len(matrix)):\n\t\tif matrix[a][i] and not visited[i]:\n\t\t\tans = ans or dfs(i, b, visited, matrix)\n\treturn ans\n\n\nfor i in range(int(input())):\n\tt, a, b = list(map(int, input().split()))\n\tif t == 1:\n\t\tnewInterval = Interval(a, b)\n\t\tintervals.append(newInterval)\n\t\tfor row in range(len(matrix)):\n\t\t\tmatrix[row].append(intervals[row].can_go(newInterval))\n\t\tmatrix.append([])\n\t\tfor col in range(len(matrix)):\n\t\t\tmatrix[len(matrix) - 1].append(newInterval.can_go(intervals[col]))\n\tif t == 2:\n\t\tvisited = []\n\t\tfor i in range(len(intervals)):\n\t\t\tvisited.append(False)\n\t\tif dfs(a - 1, b - 1, visited, matrix):\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\n\n\n\n\n\n\n", "s, t, i = {}, [], 1\nfor n in range(int(input())):\n\tc, a, b = map(int, input().split())\n\tif c > 1: print('YES' if b in s[a] else 'NO')\n\telse:\n\t\ts[i] = {i}\n\t\tfor j, (x, y) in enumerate(t, 1):\n\t\t\tif x < a < y or x < b < y: s[i].update(s[j])\n\t\tr = set(j for j, (x, y) in enumerate(t, 1) if a < x < b or a < y < b)\n\t\tfor j in range(1, len(t) + 1):\n\t\t\tif r & s[j]: s[j].update(s[i])\n\t\tt.append((a, b))\n\t\ti += 1\n", "s, t, i = {}, [], 1\nfor n in range(int(input())):\n\tc, a, b = map(int, input().split())\n\tif c > 1: print('YES' if b in s[a] else 'NO')\n\telse:\n\t\ts[i] = [i]\n\t\tfor j, (x, y) in enumerate(t, 1):\n\t\t\tif x < a < y or x < b < y: s[i].extend(s[j])\n\t\ts[i] = set(s[i])\n\t\tr = [j for j, (x, y) in enumerate(t, 1) if a < x < b or a < y < b]\n\t\tfor j in range(1, len(t) + 1):\n\t\t\tif any(k in s[j] for k in r): s[j].update(s[i])\n\t\tt.append((a, b))\n\t\ti += 1\n", "def recursive_dfs(graph, start, path=[]):\n\t'''recursive depth first search from start'''\n\tpath=path+[start]\n\tfor node in graph[start]:\n\t\tif not node in path:\n\t\t\tpath=recursive_dfs(graph, node, path)\n\treturn path\n\ndef conn(x, y):\n\t\ta, b = x[0], x[1]\n\t\tc, d = y[0], y[1]\n\t\treturn c < a < d or c < b < d\n\nadj = {}\nvert = []\nn = int(input())\nfor i in range(n):\n\t\ta, b, c = list(map(int, input().split(' ')))\n\t\tif a == 1:\n\t\t\t\tincoming = (b, c)\n\t\t\t\tadj[incoming] = []\n\t\t\t\tfor vertex in vert:\n\t\t\t\t\t\tif conn(vertex, incoming):\n\t\t\t\t\t\t\t\tadj[vertex].append(incoming)\n\t\t\t\t\t\tif conn(incoming, vertex):\n\t\t\t\t\t\t\t\tadj[incoming].append(vertex)\n\t\t\t\tvert.append(incoming)\n\t\t\t\t\n\t\tif a == 2:\n\t\t\t\tcheck = vert[b-1]\n\t\t\t\tin_chk = vert[c-1]\n\t\t\t\tif in_chk in recursive_dfs(adj, check):\n\t\t\t\t\t\tprint(\"YES\")\n\t\t\t\telse:\n\t\t\t\t\t\tprint(\"NO\")\n", "s, t, i = {}, [], 1\nfor n in range(int(input())):\n\tc, a, b = map(int, input().split())\n\tif c > 1: print('YES' if b in s[a] else 'NO')\n\telse:\n\t\ts[i] = [i]\n\t\tfor j, (x, y) in enumerate(t, 1):\n\t\t\tif x < a < y or x < b < y: s[i].extend(s[j])\n\t\ts[i] = set(s[i])\n\t\tr = [j for j, (x, y) in enumerate(t, 1) if a < x < b or a < y < b]\n\t\tfor j in range(1, len(t) + 1):\n\t\t\tif any(k in s[j] for k in r): s[j].update(s[i])\n\t\tt.append((a, b))\n\t\ti += 1\n", "visited = [0 for i in range(110)]\ndef reset():\n\tnonlocal N,visited\n\tfor i in range(N):\n\t\tvisited[i] = 0\n\ndef dfs(s,e):\n\t#print(s,e)\n\tnonlocal N,nodes,visited\n\tif(s==e):\n\t\treturn True\n\tif(visited[s]==1):\n\t\treturn False\n\tvisited[s]=1\n\tans = False\n\tfor i in range(N):\n\t\tif(i==s):\n\t\t\tcontinue\n\t\ta = nodes[s][0]\n\t\tb = nodes[s][1]\n\t\tc = nodes[i][0]\n\t\td = nodes[i][1]\n\t\tif((c<a and a<d) or (c<b and b<d)):\n\t\t\tans = ans or dfs(i,e) \n\treturn ans\n\nnodes = []\nN = 0\nM = int(input())\nfor k in range(M):\n\tcom,u,v = tuple(int(i) for i in input().split())\n\n\tif(com==1):\n\t\tV = [u,v]\n\t\tnodes.append(V)\n\t\tN+=1\n\telse:\n\t\tu-=1\n\t\tv-=1\n\t\treset()\n\t\tif(dfs(u,v)):\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n", "visited=[False]*105\np={}\ndef dfs(i):\n\tnonlocal visited\n\tnonlocal p\n\tif visited[i]==True:\n\t\treturn\n\tvisited[i]=True\n\tfor j in p[i]:\n\t\tdfs(j)\n\ndef main():\n\tnonlocal visited\n\tnonlocal p\n\tmode=\"filee\"\n\tif mode==\"file\":f=open(\"test.txt\",\"r\")\n\tget = lambda :[int(x) for x in (f.readline() if mode==\"file\" else input()).split()]\n\t[n]=get()\n\tg=[[0]]\n\tle = 0\n\tfor z in range(n):\n\t\t[t,x,y]=get()\n\t\tif t==1:\n\t\t\tg.append([x,y])\n\t\t\tle+=1\n\t\t\tp[le]=[]\n\t\t\tfor i in range(1,le):\n\t\t\t\t[a,b] = [g[i][0],g[i][1]]\n\t\t\t\tif (x<a and a<y) or (x<b and b<y):\n\t\t\t\t\tp[i].append(le)\n\t\t\t\tif (a<x and x<b) or (a<y and y<b):\n\t\t\t\t\tp[le].append(i)\n\t\telse:\n\t\t\tfor i in range(105):\n\t\t\t\tvisited[i]=False\n\t\t\tdfs(x)\n\t\t\tprint(\"YES\" if visited[y]==True else \"NO\")    \n\n\tif mode==\"file\":f.close()\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from operator import xor\n\ndef dfs(d, start, finish):\n\tvisited = []\n\ttemp = []\n\twhile True:\n\t\tif start not in visited:\n\t\t\tvisited.append(start)\n\t\t\t[temp.append(item) for item in d[start]]\n\t\tif not temp:\n\t\t\treturn False\n\t\ttemp.reverse()\n\t\tstart = temp.pop()\n\t\ttemp.reverse()\n\t\tif start == finish:\n\t\t\treturn True\n\nn = int(input())\ndict = {}\nlist = []\nfor i in range(n):\n\tline = [int(item) for item in input().split()]\n\tif line[0] == 1:\n\t\tdict[(line[1], line[2])] = set()\n\t\tlist.append((line[1], line[2]))\n\t\tfor (a, b) in dict:\n\t\t\tif xor(line[1] < a and a < line[2], line[1] < b and b < line[2]):\n\t\t\t\tdict[(line[1], line[2])].add((a,b))\n\t\t\t\tdict[(a,b)].add((line[1], line[2]))\n\t\t\tif a > line[1] and b < line[2]:\n\t\t\t\tdict[(a,b)].add((line[1], line[2]))\n\telse:\n\t\tfirst = list[line[1]-1]\n\t\tfinish = list[line[2]-1]\n\t\tif dfs(dict, first, finish):\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n", "def dfs(a, b, v, e):\n\tif a == b:\n\t\treturn True\n\tv[a] = True\n\tfor x in e[a]:\n\t\tif not v[x] and dfs(x, b, v, e):\n\t\t\treturn True\n\treturn False\na, e = [], []    \nfor i in range(int(input())):\n\tt, x, y = map(int, input().split())\n\tif t == 1:\n\t\ta.append((x, y))\n\t\te.append([])\n\t\tfor i, ai in enumerate(a):\n\t\t\tif x in range(ai[0] + 1, ai[1]) or y in range(ai[0] + 1, ai[1]):\n\t\t\t\te[-1].append(i)\n\t\t\tif ai[0] in range(x + 1, y) or ai[1] in range(x + 1, y):\n\t\t\t\te[i].append(len(a) - 1)\n\telse:\n\t\tprint('YES' if dfs(x - 1, y - 1, [False] * len(a), e) else 'NO')\n", "visited = [0 for i in range(110)]\n\ndef reset():\n\tnonlocal N , visited\n\tfor i in range(N):\n\t\tvisited[i] = 0\n\ndef dfs(s, e):\n\tnonlocal N, nodes, visited\n\tif s == e:\n\t\treturn True\n\tif visited[s] == 1:\n\t\treturn False\n\n\tvisited[s] = 1\n\tans  = False\n\n\tfor i in range(N):\n\t\tif i == s:\n\t\t\tcontinue\n\n\t\ta = nodes[s][0]\n\t\tb = nodes[s][1]\n\t\tc = nodes[i][0]\n\t\td = nodes[i][1]\n\n\t\tif (c<a and a<d) or (c<b and b<d):\n\t\t\tans = ans or dfs(i ,e)\n\n\treturn ans\n\nnodes = []\nN = 0\nM = int(input())\n\nfor k in range(M):\n\tcon , u , v = tuple(int(i) for i in input().split())\n\n\tif con == 1:\n\t\tV = [u,v]\n\t\tnodes.append(V)\n\t\tN += 1\n\n\telse:\n\t\t u -= 1\n\t\t v -= 1\n\t\t reset()\n\t\t if dfs(u ,v):\n\t\t\t print(\"YES\")\n\t\t else:\n\t\t\t print(\"NO\")\n", "from collections import deque\n\ndef solve():\n\tt = int(input().rstrip())\n\tnodes = []\n\tgraph = {}\n\tfor _ in range(t):\n\t\tk, x, y = list(map(int, input().rstrip().split()))\n\t\tif k == 1:\n\t\t\tnodes.append((x,y)) \n\t\t\tif (x,y) not in graph:\n\t\t\t\tgraph[(x,y)] = []\n\t\t\tfor a, b in graph:\n\t\t\t\tif a < x < b or a < y < b:\n\t\t\t\t\tgraph[(x,y)].append((a,b))\n\t\t\t\tif x < a < y or x < b < y:\n\t\t\t\t\tgraph[(a,b)].append((x,y))\n\t\telif k == 2:\n\t\t\ta, b = nodes[x-1]\n\t\t\tc, d = nodes[y-1]\n\t\t\tstack = deque()\n\t\t\tstack.append((a,b))\n\t\t\tseen = set()\n\t\t\twhile len(stack) > 0 and (c, d) not in seen:\n\t\t\t\tcur, dest = stack.pop()\n\t\t\t\tseen.add((cur, dest))\n\t\t\t\tfor m, n in graph[(cur, dest)]:\n\t\t\t\t\tif (m, n) not in seen:\n\t\t\t\t\t\tstack.append((m, n))\n\t\t\tif (c, d) in seen:\n\t\t\t\tprint('YES')\n\t\t\telse:\n\t\t\t\tprint('NO')\n\n\ndef __starting_point():\n\tsolve()\n\n__starting_point()\n", "from collections import deque\nfrom sys import stdin\n\nN = int(stdin.readline().rstrip())\nnodes = []\nadj_list = []\nfor n in range(0, N):\n\ttype, a, b = map(int, stdin.readline().rstrip().split())\n\tif type == 1:\n\t\tadj_list.append([])\n\t\tfor index in range(0, len(nodes)):\n\t\t\t(c, d) = nodes[index]\n\t\t\tif c < a < d or c < b < d:\n\t\t\t\tadj_list[len(nodes)].append(index)\n\t\t\tif a < c < b or a < d < b:\n\t\t\t\tadj_list[index].append(len(nodes))\n\t\tnodes.append((a, b))\n\telse:\n\t\tqueue = deque()\n\t\tvisited = [False] * len(nodes)\n\t\ta -= 1\n\t\tb -= 1\n\t\tqueue.append(a)\n\t\tpath = False\n\t\twhile queue:\n\t\t\tc = queue.popleft()\n\t\t\tif c == b:\n\t\t\t\tpath = True\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tfor d in adj_list[c]:\n\t\t\t\t\tif not visited[d]:\n\t\t\t\t\t\tqueue.append(d)\n\t\t\t\t\t\tvisited[d] = True\n\t\tif path:\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n", "def in_interval(w, x, y, z):\n\tif (w > y and w < z) or (x > y and x < z):\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef step_through(a, b, c, d, temp):\n\tx = None\n\tfor interval in temp:\n\t\te = int(interval[0])\n\t\tf = int(interval[1])\n\t\tif in_interval(a,b,c,d):\n\t\t\treturn True\n\t\telif in_interval(a,b,e,f):\n\t\t\tx = interval\n\t\t\ttemp.remove(interval)\n\t\t\tif step_through(e,f,c,d,temp):\n\t\t\t\treturn True\n\tif(x != None):\n\t\ttemp.append(x)\n\treturn False\n\nn = int(input())\nset_of_intervals = []\nfor i in range (n):\n\tline = input().split()\n\n\tif line[0] == \"1\":\n\t\tset_of_intervals.append([line[1], line[2]])\n\telse:\n\t\ta = int(set_of_intervals[int(line[1]) - 1][0])\n\t\tb = int(set_of_intervals[int(line[1]) - 1][1])\n\t\tc = int(set_of_intervals[int(line[2]) - 1][0])\n\t\td = int(set_of_intervals[int(line[2]) - 1][1])\n\n\t\ttemp = set_of_intervals[:]\n\t\ttemp.pop(int(line[1]) - 1)\n\t\tif(step_through(a,b,c,d, temp)):\n\t\t\tprint (\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n", "def input_tuple(f):\n\treturn tuple(map(f, input().rstrip().split()))\n\ndef make_edge(i1, i2, adj_list):\n\ti, a, b = i1\n\tj, c, d = i2\n\tif c < a < d or c < b < d:\n\t\tadj_list[i].append(j)\n\ndef dfs(curr, dest, seen, intervals):\n\ti, a, b = curr\n\tif i == dest:\n\t\treturn True\n\tseen.add(i)\n\tfor j, c, d in intervals:\n\t\tif j in seen:\n\t\t\tcontinue\n\t\tif c < a < d or c < b < d:\n\t\t\tif dfs((j, c, d), dest, seen, intervals):\n\t\t\t\treturn True\n\treturn False\n\ndef __starting_point():\n\tintervals = []\n\tnum_queries = int(input().rstrip())\n\ti = 1\n\tfor _ in range(num_queries):\n\t\tt, a, b = input_tuple(int)\n\t\tif t == 1:\n\t\t\tintervals.append((i, a, b))\n\t\t\ti += 1\n\t\telif t == 2:\n\t\t\tif dfs(intervals[a-1], b, set(), intervals):\n\t\t\t\tprint('YES')\n\t\t\telse:\n\t\t\t\tprint('NO')\n\n__starting_point()\n", "path = []\nn = int(input())\nfor it in range(0, n):\n\tdata = list(map(int, input().split(' ')))\n\tif data[0] == 1:\n\t\tpath.append(data[1:])\n\telse:\n\t\tvis = [False] * (len(path) + 1)\n\t\tque = [data[1] - 1]\n\t\twhile len(que):\n\t\t\tp = que[0]\n\t\t\tdel que[0]\n\t\t\tfor i, v in enumerate(path):\n\t\t\t\tif (v[0] < path[p][0] < v[1] or v[0] < path[p][1] < v[1]) and not vis[i]:\n\t\t\t\t\tvis[i] = True\n\t\t\t\t\tque.append(i)\n\t\tprint('YES' if vis[data[2] -1] else 'NO')\n", "# intervals and visited intervals have the same key\n# which is the order in which intervals were queried\n\ncounter = 1\nqueries = int(input())\nvisited_intervals = [0] * (queries + 1)\n\nintervals = {}\n\ndef get_interval():\n\treturn tuple(map(int, input().split()))\n\ndef reset_search_data():\n\tnonlocal queries\n\tnonlocal visited_intervals\n\tdel visited_intervals\n\tvisited_intervals = [0] * queries\n\ndef solve():\n\n\tnonlocal counter\n\tnonlocal visited_intervals\n\n\tfor _ in range (queries):\n\t\tquery = get_interval()\n\t\tif query[0] == 1:\n\t\t   intervals[counter] = query\n\t\t   counter += 1\n\t\telif query[0] == 2:\n\t\t\tq = []\n\t\t\tq.append(query[1])\n\t\t\t# start new search\n\t\t\treset_search_data()\n\t\t\twhile len(q) > 0:\n\t\t\t\tq_interval = q.pop(0)\n\t\t\t\tfor index in intervals:\n\t\t\t\t\tc = intervals[index][1]\n\t\t\t\t\td = intervals[index][2]\n\t\t\t\t\ta = intervals[q_interval][1]\n\t\t\t\t\tb = intervals[q_interval][2]\n\t\t\t\t\tif c < a < d or c < b < d:\n\t\t\t\t\t\tif visited_intervals[index] == 0:\n\t\t\t\t\t\t\t#print (\"TRUE\", c, a , d, \" \", c ,b ,d )\n\t\t\t\t\t\t\t#print(\"marking \", index)\n\t\t\t\t\t\t\tvisited_intervals[index] = 1\n\t\t\t\t\t\t\t#print (\"visited\", index)\n\t\t\t\t\t\t\tq.append(index)\n\t\t\tif visited_intervals[query[2]] == 1:\n\t\t\t\tprint (\"YES\")\n\t\t\telse:\n\t\t\t\tprint (\"NO\")\nsolve()\n", "def graphAdd(u, v, G):\n\tfor a, b in G:\n\t\tif (a<u and u<b) or (a<v and v<b):\n\t\t\tconnect(G, u, v, a, b)\n\t\tif (u<a and a<v) or (u<b and b<v):\n\t\t\tconnect(G, a, b, u, v)\n\ndef connect(G, u, v, w, x):\n\tG[(u, v)][(w, x)] = 1\n\ndef queueSort(G, l, u, v):\n\tstart = l[u-1]\n\tvisited = dict()\n\tvisited[start] = 1\n\tend = l[v-1]\n\n\tq = [start]\n\n\twhile q != []:\n\t\tcur = q.pop(0)\n\t\tfor a, b in G[cur]:\n\t\t\tif ((a, b) == end):\n\t\t\t\treturn \"YES\"\n\t\t\tif ((a,b) not in visited):\n\t\t\t\tvisited[(a,b)] = 1\n\t\t\t\tq.append((a,b))\n\treturn \"NO\"\n\nnumTest = int(input())\n\nG = dict()\nl = list()\n\nwhile(numTest>0):\n\n\tinputList= list(map(int, input().split()))\n\ta = inputList[0]\n\tb = inputList[1]\n\tc = inputList[2]\n\n\tif a == 1:\n\t\tG[(b, c)] = {}\n\t\tgraphAdd(b, c, G)\n\t\tl.append((b,c))\n\telse:\n\t\tprint(queueSort(G, l, b, c))\n\n\tnumTest -= 1\n", "\"\"\"\nSolution to the 320B problem on CodeForces.\n\n# pylint: disable = C0325\n# pylint: disable = W0611\n\"\"\"\n\nfrom collections import deque\n\ndef filter_intervals(intv, input_list):\n\t\"\"\"\n\tFilters the list for all the intervals that are valid.\n\t\"\"\"\n\treturn ((x, y) for x, y in input_list if (int(intv[0]) > int(x) and int(intv[0]) < int(y)) or \\\n\t\t\t\t\t\t\t\t\t\t\t (int(intv[1]) > int(x) and int(intv[1]) < int(y)))\n\ndef interval_search(intv, target, input_list):\n\t\"\"\"\n\tFinds if a path exists from one interval to another.\n\t\"\"\"\n\tvisited = set()\n\td = deque()\n\td.append(intv)\n\twhile d:\n\t\tintv = d.pop()\n\t\tif intv == target:\n\t\t\treturn True\n\t\tif intv not in visited:\n\t\t\tvisited.add(intv)\n\t\t\tfor interval in filter_intervals(intv, input_list):\n\t\t\t\tif interval not in visited:\n\t\t\t\t\td.append(interval)\n\treturn False\n\ndef main():\n\t\"\"\"\n\tDocstring or main.\n\t\"\"\"\n\tnum_inputs = int(input())\n\tinterval_list = []\n\tfor _ in range(num_inputs):\n\t\tinput_type, beg, end = input().split()\n\t\tbeg = int(beg)\n\t\tend = int(end)\n\t\tif int(input_type) == 1:\n\t\t\tinterval_list.append((beg, end))\n\t\telse:\n\t\t\tif interval_search(interval_list[beg-1], interval_list[end-1], interval_list):\n\t\t\t\tprint(\"YES\")\n\t\t\telse:\n\t\t\t\tprint(\"NO\")\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n"], "id": "id5352"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5352", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["in", 0], ["this", 0], ["problem", 0], ["at", 0], ["each", 0], ["moment", 0], ["you", 0], ["have", 0], ["a", 0], ["set", 0], ["of", 0], ["intervals", 0], ["you", 0], ["can", 0], ["move", 0], ["from", 0], ["interval", 0], ["a", 0], ["b", 0], ["from", 0], ["our", 0], ["set", 0], ["to", 0], ["interval", 0], ["c", 0], ["d", 0], ["from", 0], ["our", 0], ["set", 0], ["if", 0], ["and", 0], ["only", 0], ["if", 0], ["c", 0], ["a", 0], ["d", 0], ["or", 0], ["c", 0], ["b", 0], ["d", 0], ["also", 0], ["there", 0], ["is", 0], ["a", 0], ["path", 0], ["from", 0], ["interval", 0], ["i", 0], ["1", 0], ["from", 0], ["our", 0], ["set", 0], ["to", 0], ["interval", 0], ["i", 0], ["2", 0], ["from", 0], ["our", 0], ["set", 0], ["if", 0], ["there", 0], ["is", 0], ["a", 0], ["sequence", 0], ["of", 0], ["successive", 0], ["moves", 0], ["starting", 0], ["from", 0], ["i", 0], ["1", 0], ["so", 0], ["that", 0], ["we", 0], ["can", 0], ["reach", 0], ["i", 0], ["2", 0], ["your", 0], ["program", 0], ["should", 0], ["handle", 0], ["the", 0], ["queries", 0], ["of", 0], ["the", 0], ["following", 0], ["two", 0], ["types", 0], ["1", 0], ["x", 0], ["y", 0], ["x", 0], ["y", 0], ["—", 0], ["add", 0], ["the", 0], ["new", 0], ["interval", 0], ["x", 0], ["y", 0], ["to", 0], ["the", 0], ["set", 0], ["of", 0], ["intervals", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["new", 0], ["interval", 0], ["is", 0], ["guaranteed", 0], ["to", 0], ["be", 0], ["strictly", 0], ["greater", 0], ["than", 0], ["all", 0], ["the", 0], ["previous", 0], ["intervals", 1], ["2", 1], ["a", 1], ["b", 1], ["a", 1], ["≠", 1], ["b", 0], ["—", 0], ["answer", 0], ["the", 0], ["question", 0], ["is", 0], ["there", 0], ["a", 0], ["path", 0], ["from", 0], ["a", 0], ["th", 0], ["one", 0], ["based", 0], ["added", 0], ["interval", 0], ["to", 0], ["b", 0], ["th", 0], ["one", 0], ["based", 0], ["added", 0], ["interval", 0], ["answer", 0], ["all", 0], ["the", 0], ["queries", 0], ["note", 0], ["that", 0], ["initially", 0], ["you", 0], ["have", 0], ["an", 0], ["empty", 0], ["set", 0], ["of", 0], ["intervals", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["integer", 0], ["n", 0], ["denoting", 0], ["the", 0], ["number", 0], ["of", 0], ["queries", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["100", 0], ["each", 1], ["of", 1], ["the", 1], ["following", 1], ["lines", 1], ["contains", 1], ["a", 1], ["query", 1], ["as", 1], ["described", 1], ["above", 0], ["all", 0], ["numbers", 0], ["in", 0], ["the", 0], ["input", 0], ["are", 0], ["integers", 0], ["and", 0], ["don", 0], ["t", 0], ["exceed", 0], ["10", 0], ["9", 0], ["by", 0], ["their", 0], ["absolute", 0], ["value", 0], ["it", 0], ["s", 0], ["guaranteed", 0], ["that", 0], ["all", 0], ["queries", 0], ["are", 0], ["correct", 0], ["output", 0], ["for", 1], ["each", 1], ["query", 1], ["of", 1], ["the", 1], ["second", 1], ["type", 1], ["print", 0], ["yes", 0], ["or", 0], ["no", 0], ["on", 0], ["a", 0], ["separate", 0], ["line", 0], ["depending", 0], ["on", 0], ["the", 0], ["answer", 0], ["examples", 0], ["input", 0], ["5", 0], ["1", 0], ["1", 0], ["5", 0], ["1", 0], ["5", 0], ["11", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["9", 0], ["2", 0], ["1", 0], ["2", 0], ["output", 0], ["no", 0], ["yes", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08812260536398467, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08812260536398467, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.21611721611721613, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.21611721611721613, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08812260536398467, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08812260536398467, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.21611721611721613, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.21611721611721613, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["def", 0], ["is", 0], ["conn", 0], ["i1", 0], ["i2", 0], ["a", 0], ["b", 0], ["i1", 0], ["c", 0], ["d", 0], ["i2", 0], ["return", 0], ["c", 0], ["a", 0], ["d", 0], ["or", 0], ["c", 0], ["b", 0], ["d", 0], ["neighbors", 0], ["intervals", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["q", 0], ["x", 0], ["y", 0], ["int", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["q", 0], ["1", 0], ["we", 0], ["add", 0], ["to", 0], ["the", 0], ["interval", 0], ["ourint", 0], ["x", 0], ["y", 0], ["intervals", 0], ["append", 0], ["ourint", 0], ["neighbors", 0], ["ourint", 0], ["and", 0], ["check", 0], ["for", 0], ["edges", 0], ["for", 0], ["interval", 0], ["in", 0], ["intervals", 0], ["if", 0], ["they", 0], ["are", 0], ["connected", 0], ["join", 0], ["them", 0], ["if", 0], ["is", 0], ["conn", 0], ["interval", 0], ["ourint", 0], ["neighbors", 0], ["interval", 0], ["append", 0], ["ourint", 0], ["if", 0], ["is", 0], ["conn", 0], ["ourint", 0], ["interval", 0], ["neighbors", 0], ["ourint", 0], ["append", 0], ["interval", 0], ["if", 0], ["q", 0], ["2", 0], ["we", 0], ["check", 0], ["whether", 0], ["there", 0], ["is", 0], ["a", 0], ["path", 0], ["from", 0], ["x", 0], ["to", 0], ["y", 0], ["this", 0], ["is", 0], ["easy", 0], ["version", 0], ["bfs", 0], ["should", 0], ["be", 0], ["enough", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["a", 0], ["intervals", 0], ["x", 0], ["b", 0], ["intervals", 0], ["y", 0], ["visited", 0], ["a", 0], ["query", 0], ["a", 0], ["while", 0], ["len", 0], ["query", 0], ["0", 0], ["j", 0], ["query", 0], ["0", 0], ["query", 0], ["query", 0], ["1", 0], ["for", 0], ["nei", 0], ["in", 0], ["neighbors", 0], ["j", 0], ["if", 0], ["not", 0], ["nei", 0], ["in", 0], ["visited", 0], ["query", 0], ["append", 0], ["nei", 0], ["visited", 0], ["visited", 0], ["nei", 0], ["if", 0], ["b", 0], ["in", 0], ["visited", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["dfs", 0], ["v", 0], ["b", 0], ["visited", 0], ["visited", 0], ["add", 0], ["v", 0], ["nonlocal", 0], ["count", 0], ["matrix", 0], ["ok", 0], ["if", 0], ["v", 0], ["b", 0], ["ok", 0], ["true", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["count", 0], ["if", 0], ["matrix", 0], ["v", 0], ["i", 0], ["1", 0], ["and", 0], ["v", 0], ["i", 0], ["and", 0], ["i", 0], ["not", 0], ["in", 0], ["visited", 0], ["dfs", 0], ["i", 0], ["b", 0], ["visited", 0], ["n", 0], ["int", 0], ["input", 0], ["matrix", 0], ["0", 0], ["111", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["111", 0], ["count", 0], ["0", 0], ["ok", 0], ["false", 0], ["intervals", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["t", 0], ["1", 0], ["intervals", 0], ["append", 0], ["a", 0], ["b", 0], ["for", 0], ["l", 0], ["in", 0], ["range", 0], ["count", 0], ["c", 0], ["d", 0], ["intervals", 0], ["l", 0], ["if", 0], ["c", 0], ["a", 0], ["d", 0], ["or", 0], ["c", 0], ["b", 0], ["d", 0], ["matrix", 0], ["count", 0], ["l", 0], ["1", 0], ["if", 0], ["a", 0], ["c", 0], ["b", 0], ["or", 0], ["a", 0], ["d", 0], ["b", 0], ["matrix", 0], ["l", 0], ["count", 0], ["1", 0], ["count", 0], ["1", 0], ["if", 0], ["t", 0], ["2", 0], ["visited", 0], ["set", 0], ["ok", 0], ["false", 0], ["res", 0], ["dfs", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["visited", 0], ["if", 0], ["ok", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["flag", 0], ["false", 0], ["def", 0], ["main", 0], ["intset", 0], ["qr", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["qr", 0], ["qqss", 0], ["str", 0], ["input", 0], ["qqss", 0], ["qqss", 0], ["split", 0], ["if", 0], ["qqss", 0], ["0", 0], ["1", 0], ["a", 0], ["int", 0], ["qqss", 0], ["1", 0], ["b", 0], ["int", 0], ["qqss", 0], ["2", 0], ["intset", 0], ["append", 0], ["a", 0], ["b", 0], ["else", 0], ["si", 0], ["int", 0], ["qqss", 0], ["1", 0], ["fi", 0], ["int", 0], ["qqss", 0], ["2", 0], ["si", 0], ["1", 0], ["fi", 0], ["1", 0], ["v", 0], ["false", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["len", 0], ["intset", 0], ["printispath", 0], ["intset", 0], ["si", 0], ["fi", 0], ["v", 0], ["def", 0], ["printispath", 0], ["iset", 0], ["a", 0], ["b", 0], ["v", 0], ["ast", 0], ["iset", 0], ["a", 0], ["0", 0], ["aen", 0], ["iset", 0], ["a", 0], ["1", 0], ["bst", 0], ["iset", 0], ["b", 0], ["0", 0], ["ben", 0], ["iset", 0], ["b", 0], ["1", 0], ["if", 0], ["bst", 0], ["ast", 0], ["ben", 0], ["or", 0], ["bst", 0], ["aen", 0], ["ben", 0], ["print", 0], ["yes", 0], ["return", 0], ["v", 0], ["a", 0], ["true", 0], ["nonlocal", 0], ["flag", 0], ["flag", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["iset", 0], ["mst", 0], ["iset", 0], ["i", 0], ["0", 0], ["men", 0], ["iset", 0], ["i", 0], ["1", 0], ["if", 0], ["mst", 0], ["ast", 0], ["men", 0], ["or", 0], ["mst", 0], ["aen", 0], ["men", 0], ["and", 0], ["not", 0], ["v", 0], ["i", 0], ["if", 0], ["searchfinal", 0], ["iset", 0], ["i", 0], ["b", 0], ["v", 0], ["return", 0], ["if", 0], ["not", 0], ["flag", 0], ["print", 0], ["no", 0], ["def", 0], ["searchfinal", 0], ["iset", 0], ["i", 0], ["f", 0], ["v", 0], ["v", 0], ["i", 0], ["true", 0], ["if", 0], ["i", 0], ["f", 0], ["print", 0], ["yes", 0], ["nonlocal", 0], ["flag", 0], ["flag", 0], ["true", 0], ["return", 0], ["true", 0], ["ist", 0], ["iset", 0], ["i", 0], ["0", 0], ["ien", 0], ["iset", 0], ["i", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["iset", 0], ["jst", 0], ["iset", 0], ["j", 0], ["0", 0], ["jen", 0], ["iset", 0], ["j", 0], ["1", 0], ["if", 0], ["not", 0], ["v", 0], ["j", 0], ["and", 0], ["jst", 0], ["ist", 0], ["jen", 0], ["or", 0], ["jst", 0], ["ien", 0], ["jen", 0], ["searchfinal", 0], ["iset", 0], ["j", 0], ["f", 0], ["v", 0], ["main", 0], ["data", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["cmd", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["cmd", 0], ["0", 0], ["1", 0], ["data", 0], ["append", 0], ["cmd", 0], ["1", 0], ["else", 0], ["done", 0], ["false", 0], ["len", 0], ["data", 0], ["1", 0], ["que", 0], ["cmd", 0], ["1", 0], ["1", 0], ["while", 0], ["len", 0], ["que", 0], ["p", 0], ["que", 0], ["0", 0], ["del", 0], ["que", 0], ["0", 0], ["for", 0], ["i", 0], ["v", 0], ["in", 0], ["enumerate", 0], ["data", 0], ["if", 0], ["v", 0], ["0", 0], ["data", 0], ["p", 0], ["0", 0], ["v", 0], ["1", 0], ["or", 0], ["v", 0], ["0", 0], ["data", 0], ["p", 0], ["1", 0], ["v", 0], ["1", 0], ["and", 0], ["not", 0], ["done", 0], ["i", 0], ["done", 0], ["i", 0], ["true", 0], ["que", 0], ["append", 0], ["i", 0], ["print", 0], ["yes", 0], ["if", 0], ["done", 0], ["cmd", 0], ["2", 0], ["1", 0], ["else", 0], ["no", 0], ["def", 0], ["get", 0], ["operations", 0], ["n", 0], ["int", 0], ["input", 0], ["return", 0], ["tuple", 0], ["int", 0], ["k", 0], ["for", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["can", 0], ["move", 0], ["a", 0], ["b", 0], ["x1", 0], ["y1", 0], ["a", 0], ["x2", 0], ["y2", 0], ["b", 0], ["return", 0], ["x2", 0], ["x1", 0], ["and", 0], ["x1", 0], ["y2", 0], ["or", 0], ["x2", 0], ["y1", 0], ["and", 0], ["y1", 0], ["y2", 0], ["def", 0], ["can", 0], ["reach", 0], ["intervals", 0], ["x", 0], ["y", 0], ["mask", 0], ["if", 0], ["not", 0], ["mask", 0], ["mask", 0], ["false", 0], ["len", 0], ["intervals", 0], ["if", 0], ["x", 0], ["y", 0], ["return", 0], ["true", 0], ["mask", 0], ["x", 0], ["true", 0], ["xs", 0], ["k", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["len", 0], ["intervals", 0], ["if", 0], ["not", 0], ["mask", 0], ["k", 0], ["and", 0], ["can", 0], ["move", 0], ["intervals", 0], ["x", 0], ["intervals", 0], ["k", 0], ["return", 0], ["any", 0], ["can", 0], ["reach", 0], ["intervals", 0], ["k", 0], ["y", 0], ["mask", 0], ["for", 0], ["k", 0], ["in", 0], ["xs", 0], ["def", 0], ["solve", 0], ["operations", 0], ["intervals", 0], ["results", 0], ["for", 0], ["op", 0], ["in", 0], ["operations", 0], ["t", 0], ["x", 0], ["y", 0], ["op", 0], ["if", 0], ["t", 0], ["1", 0], ["intervals", 0], ["append", 0], ["tuple", 0], ["x", 0], ["y", 0], ["else", 0], ["results", 0], ["append", 0], ["can", 0], ["reach", 0], ["intervals", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["return", 0], ["results", 0], ["def", 0], ["starting", 0], ["point", 0], ["operations", 0], ["get", 0], ["operations", 0], ["results", 0], ["solve", 0], ["operations", 0], ["for", 0], ["res", 0], ["in", 0], ["results", 0], ["print", 0], ["yes", 0], ["if", 0], ["res", 0], ["else", 0], ["no", 0], ["starting", 0], ["point", 0], ["path", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["it", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["data", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["data", 0], ["0", 0], ["1", 0], ["path", 0], ["append", 0], ["data", 0], ["1", 0], ["else", 0], ["vis", 0], ["false", 0], ["len", 0], ["path", 0], ["1", 0], ["que", 0], ["data", 0], ["1", 0], ["1", 0], ["while", 0], ["len", 0], ["que", 0], ["p", 0], ["que", 0], ["0", 0], ["del", 0], ["que", 0], ["0", 0], ["for", 0], ["i", 0], ["v", 0], ["in", 0], ["enumerate", 0], ["path", 0], ["if", 0], ["v", 0], ["0", 0], ["path", 0], ["p", 0], ["0", 0], ["v", 0], ["1", 0], ["or", 0], ["v", 0], ["0", 0], ["path", 0], ["p", 0], ["1", 0], ["v", 0], ["1", 0], ["and", 0], ["not", 0], ["vis", 0], ["i", 0], ["vis", 0], ["i", 0], ["true", 0], ["que", 0], ["append", 0], ["i", 0], ["print", 0], ["yes", 0], ["if", 0], ["vis", 0], ["data", 0], ["2", 0], ["1", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["xy", 0], ["adjlist", 0], ["def", 0], ["dfs", 0], ["visit", 0], ["cur", 0], ["dest", 0], ["visit", 0], ["cur", 0], ["true", 0], ["if", 0], ["cur", 0], ["dest", 0], ["return", 0], ["true", 0], ["else", 0], ["found", 0], ["false", 0], ["for", 0], ["v", 0], ["in", 0], ["adjlist", 0], ["cur", 0], ["if", 0], ["not", 0], ["visit", 0], ["v", 0], ["found", 0], ["found", 0], ["or", 0], ["dfs", 0], ["visit", 0], ["v", 0], ["dest", 0], ["return", 0], ["found", 0], ["for", 0], ["tc", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["q", 0], ["a", 0], ["b", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["q", 0], ["0", 0], ["adjlist", 0], ["append", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["xy", 0], ["x", 0], ["y", 0], ["xy", 0], ["i", 0], ["if", 0], ["a", 0], ["x", 0], ["b", 0], ["or", 0], ["a", 0], ["y", 0], ["b", 0], ["adjlist", 0], ["i", 0], ["append", 0], ["len", 0], ["xy", 0], ["if", 0], ["x", 0], ["a", 0], ["y", 0], ["or", 0], ["x", 0], ["b", 0], ["y", 0], ["adjlist", 0], ["len", 0], ["xy", 0], ["append", 0], ["i", 0], ["xy", 0], ["append", 0], ["a", 0], ["b", 0], ["elif", 0], ["q", 0], ["1", 0], ["visit", 0], ["false", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["xy", 0], ["if", 0], ["dfs", 0], ["visit", 0], ["a", 0], ["b", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["class", 0], ["interval", 0], ["def", 0], ["init", 0], ["self", 0], ["a", 0], ["b", 0], ["self", 0], ["interval", 0], ["a", 0], ["a", 0], ["self", 0], ["interval", 0], ["b", 0], ["b", 0], ["def", 0], ["can", 0], ["go", 0], ["self", 0], ["interval", 0], ["return", 0], ["interval", 0], ["interval", 0], ["a", 0], ["self", 0], ["interval", 0], ["a", 0], ["interval", 0], ["interval", 0], ["b", 0], ["or", 0], ["interval", 0], ["interval", 0], ["a", 0], ["self", 0], ["interval", 0], ["b", 0], ["interval", 0], ["interval", 0], ["b", 0], ["intervals", 0], ["matrix", 0], ["def", 0], ["dfs", 0], ["a", 0], ["b", 0], ["visited", 0], ["matrix", 0], ["if", 0], ["a", 0], ["b", 0], ["return", 0], ["true", 0], ["ans", 0], ["false", 0], ["visited", 0], ["a", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["matrix", 0], ["if", 0], ["matrix", 0], ["a", 0], ["i", 0], ["and", 0], ["not", 0], ["visited", 0], ["i", 0], ["ans", 0], ["ans", 0], ["or", 0], ["dfs", 0], ["i", 0], ["b", 0], ["visited", 0], ["matrix", 0], ["return", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["t", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["t", 0], ["1", 0], ["newinterval", 0], ["interval", 0], ["a", 0], ["b", 0], ["intervals", 0], ["append", 0], ["newinterval", 0], ["for", 0], ["row", 0], ["in", 0], ["range", 0], ["len", 0], ["matrix", 0], ["matrix", 0], ["row", 0], ["append", 0], ["intervals", 0], ["row", 0], ["can", 0], ["go", 0], ["newinterval", 0], ["matrix", 0], ["append", 0], ["for", 0], ["col", 0], ["in", 0], ["range", 0], ["len", 0], ["matrix", 0], ["matrix", 0], ["len", 0], ["matrix", 0], ["1", 0], ["append", 0], ["newinterval", 0], ["can", 0], ["go", 0], ["intervals", 0], ["col", 0], ["if", 0], ["t", 0], ["2", 0], ["visited", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["intervals", 0], ["visited", 0], ["append", 0], ["false", 0], ["if", 0], ["dfs", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["visited", 0], ["matrix", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["t", 0], ["i", 0], ["1", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["c", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["c", 0], ["1", 0], ["print", 0], ["yes", 0], ["if", 0], ["b", 0], ["in", 0], ["s", 0], ["a", 0], ["else", 0], ["no", 0], ["else", 0], ["s", 0], ["i", 0], ["i", 0], ["for", 0], ["j", 0], ["x", 0], ["y", 0], ["in", 0], ["enumerate", 0], ["t", 0], ["1", 0], ["if", 0], ["x", 0], ["a", 0], ["y", 0], ["or", 0], ["x", 0], ["b", 0], ["y", 0], ["s", 0], ["i", 0], ["update", 0], ["s", 0], ["j", 0], ["r", 0], ["set", 0], ["j", 0], ["for", 0], ["j", 0], ["x", 0], ["y", 0], ["in", 0], ["enumerate", 0], ["t", 0], ["1", 0], ["if", 0], ["a", 0], ["x", 0], ["b", 0], ["or", 0], ["a", 0], ["y", 0], ["b", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["t", 0], ["1", 0], ["if", 0], ["r", 0], ["s", 0], ["j", 0], ["s", 0], ["j", 0], ["update", 0], ["s", 0], ["i", 0], ["t", 0], ["append", 0], ["a", 0], ["b", 0], ["i", 0], ["1", 0], ["s", 0], ["t", 0], ["i", 0], ["1", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["c", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["c", 0], ["1", 0], ["print", 0], ["yes", 0], ["if", 0], ["b", 0], ["in", 0], ["s", 0], ["a", 0], ["else", 0], ["no", 0], ["else", 0], ["s", 0], ["i", 0], ["i", 0], ["for", 0], ["j", 0], ["x", 0], ["y", 0], ["in", 0], ["enumerate", 0], ["t", 0], ["1", 0], ["if", 0], ["x", 0], ["a", 0], ["y", 0], ["or", 0], ["x", 0], ["b", 0], ["y", 0], ["s", 0], ["i", 0], ["extend", 0], ["s", 0], ["j", 0], ["s", 0], ["i", 0], ["set", 0], ["s", 0], ["i", 0], ["r", 0], ["j", 0], ["for", 0], ["j", 0], ["x", 0], ["y", 0], ["in", 0], ["enumerate", 0], ["t", 0], ["1", 0], ["if", 0], ["a", 0], ["x", 0], ["b", 0], ["or", 0], ["a", 0], ["y", 0], ["b", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["t", 0], ["1", 0], ["if", 0], ["any", 0], ["k", 0], ["in", 0], ["s", 0], ["j", 0], ["for", 0], ["k", 0], ["in", 0], ["r", 0], ["s", 0], ["j", 0], ["update", 0], ["s", 0], ["i", 0], ["t", 0], ["append", 0], ["a", 0], ["b", 0], ["i", 0], ["1", 0], ["def", 0], ["recursive", 0], ["dfs", 0], ["graph", 0], ["start", 0], ["path", 0], ["recursive", 0], ["depth", 0], ["first", 0], ["search", 0], ["from", 0], ["start", 0], ["path", 1], ["path", 1], ["start", 0], ["for", 0], ["node", 0], ["in", 0], ["graph", 0], ["start", 0], ["if", 0], ["not", 0], ["node", 0], ["in", 0], ["path", 0], ["path", 0], ["recursive", 0], ["dfs", 0], ["graph", 0], ["node", 0], ["path", 0], ["return", 0], ["path", 0], ["def", 0], ["conn", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["c", 0], ["d", 0], ["y", 0], ["0", 0], ["y", 0], ["1", 0], ["return", 0], ["c", 0], ["a", 0], ["d", 0], ["or", 0], ["c", 0], ["b", 0], ["d", 0], ["adj", 0], ["vert", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["1", 0], ["incoming", 0], ["b", 0], ["c", 0], ["adj", 0], ["incoming", 0], ["for", 0], ["vertex", 0], ["in", 0], ["vert", 0], ["if", 0], ["conn", 0], ["vertex", 0], ["incoming", 0], ["adj", 0], ["vertex", 0], ["append", 0], ["incoming", 0], ["if", 0], ["conn", 0], ["incoming", 0], ["vertex", 0], ["adj", 0], ["incoming", 0], ["append", 0], ["vertex", 0], ["vert", 0], ["append", 0], ["incoming", 0], ["if", 0], ["a", 0], ["2", 0], ["check", 0], ["vert", 0], ["b", 0], ["1", 0], ["in", 0], ["chk", 0], ["vert", 0], ["c", 0], ["1", 0], ["if", 0], ["in", 0], ["chk", 0], ["in", 0], ["recursive", 0], ["dfs", 0], ["adj", 0], ["check", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["t", 0], ["i", 0], ["1", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["c", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["c", 0], ["1", 0], ["print", 0], ["yes", 0], ["if", 0], ["b", 0], ["in", 0], ["s", 0], ["a", 0], ["else", 0], ["no", 0], ["else", 0], ["s", 0], ["i", 0], ["i", 0], ["for", 0], ["j", 0], ["x", 0], ["y", 0], ["in", 0], ["enumerate", 0], ["t", 0], ["1", 0], ["if", 0], ["x", 0], ["a", 0], ["y", 0], ["or", 0], ["x", 0], ["b", 0], ["y", 0], ["s", 0], ["i", 0], ["extend", 0], ["s", 0], ["j", 0], ["s", 0], ["i", 0], ["set", 0], ["s", 0], ["i", 0], ["r", 0], ["j", 0], ["for", 0], ["j", 0], ["x", 0], ["y", 0], ["in", 0], ["enumerate", 0], ["t", 0], ["1", 0], ["if", 0], ["a", 0], ["x", 0], ["b", 0], ["or", 0], ["a", 0], ["y", 0], ["b", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["t", 0], ["1", 0], ["if", 0], ["any", 0], ["k", 0], ["in", 0], ["s", 0], ["j", 0], ["for", 0], ["k", 0], ["in", 0], ["r", 0], ["s", 0], ["j", 0], ["update", 0], ["s", 0], ["i", 0], ["t", 0], ["append", 0], ["a", 0], ["b", 0], ["i", 0], ["1", 0], ["visited", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["110", 0], ["def", 0], ["reset", 0], ["nonlocal", 0], ["n", 0], ["visited", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["visited", 0], ["i", 0], ["0", 0], ["def", 0], ["dfs", 0], ["s", 0], ["e", 0], ["print", 0], ["s", 0], ["e", 0], ["nonlocal", 0], ["n", 0], ["nodes", 0], ["visited", 0], ["if", 0], ["s", 0], ["e", 0], ["return", 0], ["true", 0], ["if", 0], ["visited", 0], ["s", 0], ["1", 0], ["return", 0], ["false", 0], ["visited", 0], ["s", 0], ["1", 0], ["ans", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["s", 0], ["continue", 0], ["a", 0], ["nodes", 0], ["s", 0], ["0", 0], ["b", 0], ["nodes", 0], ["s", 0], ["1", 0], ["c", 0], ["nodes", 0], ["i", 0], ["0", 0], ["d", 0], ["nodes", 0], ["i", 0], ["1", 0], ["if", 0], ["c", 0], ["a", 0], ["and", 0], ["a", 0], ["d", 0], ["or", 0], ["c", 0], ["b", 0], ["and", 0], ["b", 0], ["d", 0], ["ans", 0], ["ans", 0], ["or", 0], ["dfs", 0], ["i", 0], ["e", 0], ["return", 0], ["ans", 0], ["nodes", 0], ["n", 0], ["0", 0], ["m", 0], ["int", 0], ["input", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["m", 0], ["com", 0], ["u", 0], ["v", 0], ["tuple", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["com", 0], ["1", 0], ["v", 0], ["u", 0], ["v", 0], ["nodes", 0], ["append", 0], ["v", 0], ["n", 0], ["1", 0], ["else", 0], ["u", 0], ["1", 0], ["v", 0], ["1", 0], ["reset", 0], ["if", 0], ["dfs", 0], ["u", 0], ["v", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["visited", 0], ["false", 0], ["105", 0], ["p", 0], ["def", 0], ["dfs", 0], ["i", 0], ["nonlocal", 0], ["visited", 0], ["nonlocal", 0], ["p", 0], ["if", 0], ["visited", 0], ["i", 0], ["true", 0], ["return", 0], ["visited", 0], ["i", 0], ["true", 0], ["for", 0], ["j", 0], ["in", 0], ["p", 0], ["i", 0], ["dfs", 0], ["j", 0], ["def", 0], ["main", 0], ["nonlocal", 0], ["visited", 0], ["nonlocal", 0], ["p", 0], ["mode", 0], ["filee", 0], ["if", 0], ["mode", 0], ["file", 0], ["f", 0], ["open", 0], ["test", 0], ["txt", 0], ["r", 0], ["get", 0], ["lambda", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["f", 0], ["readline", 0], ["if", 0], ["mode", 0], ["file", 0], ["else", 0], ["input", 0], ["split", 0], ["n", 0], ["get", 0], ["g", 0], ["0", 0], ["le", 0], ["0", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["x", 0], ["y", 0], ["get", 0], ["if", 0], ["t", 0], ["1", 0], ["g", 0], ["append", 0], ["x", 0], ["y", 0], ["le", 0], ["1", 0], ["p", 0], ["le", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["le", 0], ["a", 0], ["b", 0], ["g", 0], ["i", 0], ["0", 0], ["g", 0], ["i", 0], ["1", 0], ["if", 0], ["x", 0], ["a", 0], ["and", 0], ["a", 0], ["y", 0], ["or", 0], ["x", 0], ["b", 0], ["and", 0], ["b", 0], ["y", 0], ["p", 0], ["i", 0], ["append", 0], ["le", 0], ["if", 0], ["a", 0], ["x", 0], ["and", 0], ["x", 0], ["b", 0], ["or", 0], ["a", 0], ["y", 0], ["and", 0], ["y", 0], ["b", 0], ["p", 0], ["le", 0], ["append", 0], ["i", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["105", 0], ["visited", 0], ["i", 0], ["false", 0], ["dfs", 0], ["x", 0], ["print", 0], ["yes", 0], ["if", 0], ["visited", 0], ["y", 0], ["true", 0], ["else", 0], ["no", 0], ["if", 0], ["mode", 0], ["file", 0], ["f", 0], ["close", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["operator", 0], ["import", 0], ["xor", 0], ["def", 0], ["dfs", 0], ["d", 0], ["start", 0], ["finish", 0], ["visited", 0], ["temp", 0], ["while", 0], ["true", 0], ["if", 0], ["start", 0], ["not", 0], ["in", 0], ["visited", 0], ["visited", 0], ["append", 0], ["start", 0], ["temp", 0], ["append", 0], ["item", 0], ["for", 0], ["item", 0], ["in", 0], ["d", 0], ["start", 0], ["if", 0], ["not", 0], ["temp", 0], ["return", 0], ["false", 0], ["temp", 0], ["reverse", 0], ["start", 0], ["temp", 0], ["pop", 0], ["temp", 0], ["reverse", 0], ["if", 0], ["start", 0], ["finish", 0], ["return", 0], ["true", 0], ["n", 0], ["int", 0], ["input", 0], ["dict", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["line", 0], ["int", 0], ["item", 0], ["for", 0], ["item", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["line", 0], ["0", 0], ["1", 0], ["dict", 0], ["line", 0], ["1", 0], ["line", 0], ["2", 0], ["set", 0], ["list", 0], ["append", 0], ["line", 0], ["1", 0], ["line", 0], ["2", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["dict", 0], ["if", 0], ["xor", 0], ["line", 0], ["1", 0], ["a", 0], ["and", 0], ["a", 0], ["line", 0], ["2", 0], ["line", 0], ["1", 0], ["b", 0], ["and", 0], ["b", 0], ["line", 0], ["2", 0], ["dict", 0], ["line", 0], ["1", 0], ["line", 0], ["2", 0], ["add", 0], ["a", 0], ["b", 0], ["dict", 0], ["a", 0], ["b", 0], ["add", 0], ["line", 0], ["1", 0], ["line", 0], ["2", 0], ["if", 0], ["a", 0], ["line", 0], ["1", 0], ["and", 0], ["b", 0], ["line", 0], ["2", 0], ["dict", 0], ["a", 0], ["b", 0], ["add", 0], ["line", 0], ["1", 0], ["line", 0], ["2", 0], ["else", 0], ["first", 0], ["list", 0], ["line", 0], ["1", 0], ["1", 0], ["finish", 0], ["list", 0], ["line", 0], ["2", 0], ["1", 0], ["if", 0], ["dfs", 0], ["dict", 0], ["first", 0], ["finish", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["dfs", 0], ["a", 0], ["b", 0], ["v", 0], ["e", 0], ["if", 0], ["a", 0], ["b", 0], ["return", 0], ["true", 0], ["v", 0], ["a", 0], ["true", 0], ["for", 0], ["x", 0], ["in", 0], ["e", 0], ["a", 0], ["if", 0], ["not", 0], ["v", 0], ["x", 0], ["and", 0], ["dfs", 0], ["x", 0], ["b", 0], ["v", 0], ["e", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["a", 0], ["e", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["t", 0], ["1", 0], ["a", 0], ["append", 0], ["x", 0], ["y", 0], ["e", 0], ["append", 0], ["for", 0], ["i", 0], ["ai", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["if", 0], ["x", 0], ["in", 0], ["range", 0], ["ai", 0], ["0", 0], ["1", 0], ["ai", 0], ["1", 0], ["or", 0], ["y", 0], ["in", 0], ["range", 0], ["ai", 0], ["0", 0], ["1", 0], ["ai", 0], ["1", 0], ["e", 0], ["1", 0], ["append", 0], ["i", 0], ["if", 0], ["ai", 0], ["0", 0], ["in", 0], ["range", 0], ["x", 0], ["1", 0], ["y", 0], ["or", 0], ["ai", 0], ["1", 0], ["in", 0], ["range", 0], ["x", 0], ["1", 0], ["y", 0], ["e", 0], ["i", 0], ["append", 0], ["len", 0], ["a", 0], ["1", 0], ["else", 0], ["print", 0], ["yes", 0], ["if", 0], ["dfs", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["false", 0], ["len", 0], ["a", 0], ["e", 0], ["else", 0], ["no", 0], ["visited", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["110", 0], ["def", 0], ["reset", 0], ["nonlocal", 0], ["n", 0], ["visited", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["visited", 0], ["i", 0], ["0", 0], ["def", 0], ["dfs", 0], ["s", 0], ["e", 0], ["nonlocal", 0], ["n", 0], ["nodes", 0], ["visited", 0], ["if", 0], ["s", 0], ["e", 0], ["return", 0], ["true", 0], ["if", 0], ["visited", 0], ["s", 0], ["1", 0], ["return", 0], ["false", 0], ["visited", 0], ["s", 0], ["1", 0], ["ans", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["s", 0], ["continue", 0], ["a", 0], ["nodes", 0], ["s", 0], ["0", 0], ["b", 0], ["nodes", 0], ["s", 0], ["1", 0], ["c", 0], ["nodes", 0], ["i", 0], ["0", 0], ["d", 0], ["nodes", 0], ["i", 0], ["1", 0], ["if", 0], ["c", 0], ["a", 0], ["and", 0], ["a", 0], ["d", 0], ["or", 0], ["c", 0], ["b", 0], ["and", 0], ["b", 0], ["d", 0], ["ans", 0], ["ans", 0], ["or", 0], ["dfs", 0], ["i", 0], ["e", 0], ["return", 0], ["ans", 0], ["nodes", 0], ["n", 0], ["0", 0], ["m", 0], ["int", 0], ["input", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["m", 0], ["con", 0], ["u", 0], ["v", 0], ["tuple", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["con", 0], ["1", 0], ["v", 0], ["u", 0], ["v", 0], ["nodes", 0], ["append", 0], ["v", 0], ["n", 0], ["1", 0], ["else", 0], ["u", 0], ["1", 0], ["v", 0], ["1", 0], ["reset", 0], ["if", 0], ["dfs", 0], ["u", 0], ["v", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["solve", 0], ["t", 0], ["int", 0], ["input", 0], ["rstrip", 0], ["nodes", 0], ["graph", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["k", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["rstrip", 0], ["split", 0], ["if", 0], ["k", 0], ["1", 0], ["nodes", 0], ["append", 0], ["x", 0], ["y", 0], ["if", 0], ["x", 0], ["y", 0], ["not", 0], ["in", 0], ["graph", 0], ["graph", 0], ["x", 0], ["y", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["graph", 0], ["if", 0], ["a", 0], ["x", 0], ["b", 0], ["or", 0], ["a", 0], ["y", 0], ["b", 0], ["graph", 0], ["x", 0], ["y", 0], ["append", 0], ["a", 0], ["b", 0], ["if", 0], ["x", 0], ["a", 0], ["y", 0], ["or", 0], ["x", 0], ["b", 0], ["y", 0], ["graph", 0], ["a", 0], ["b", 0], ["append", 0], ["x", 0], ["y", 0], ["elif", 0], ["k", 0], ["2", 0], ["a", 0], ["b", 0], ["nodes", 0], ["x", 0], ["1", 0], ["c", 0], ["d", 0], ["nodes", 0], ["y", 0], ["1", 0], ["stack", 0], ["deque", 0], ["stack", 0], ["append", 0], ["a", 0], ["b", 0], ["seen", 0], ["set", 0], ["while", 0], ["len", 0], ["stack", 0], ["0", 0], ["and", 0], ["c", 0], ["d", 0], ["not", 0], ["in", 0], ["seen", 0], ["cur", 0], ["dest", 0], ["stack", 0], ["pop", 0], ["seen", 0], ["add", 0], ["cur", 0], ["dest", 0], ["for", 0], ["m", 0], ["n", 0], ["in", 0], ["graph", 0], ["cur", 0], ["dest", 0], ["if", 0], ["m", 0], ["n", 0], ["not", 0], ["in", 0], ["seen", 0], ["stack", 0], ["append", 0], ["m", 0], ["n", 0], ["if", 0], ["c", 0], ["d", 0], ["in", 0], ["seen", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["nodes", 0], ["adj", 0], ["list", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["type", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["if", 0], ["type", 0], ["1", 0], ["adj", 0], ["list", 0], ["append", 0], ["for", 0], ["index", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["nodes", 0], ["c", 0], ["d", 0], ["nodes", 0], ["index", 0], ["if", 0], ["c", 0], ["a", 0], ["d", 0], ["or", 0], ["c", 0], ["b", 0], ["d", 0], ["adj", 0], ["list", 0], ["len", 0], ["nodes", 0], ["append", 0], ["index", 0], ["if", 0], ["a", 0], ["c", 0], ["b", 0], ["or", 0], ["a", 0], ["d", 0], ["b", 0], ["adj", 0], ["list", 0], ["index", 0], ["append", 0], ["len", 0], ["nodes", 0], ["nodes", 0], ["append", 0], ["a", 0], ["b", 0], ["else", 0], ["queue", 0], ["deque", 0], ["visited", 0], ["false", 0], ["len", 0], ["nodes", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["queue", 0], ["append", 0], ["a", 0], ["path", 0], ["false", 0], ["while", 0], ["queue", 0], ["c", 0], ["queue", 0], ["popleft", 0], ["if", 0], ["c", 0], ["b", 0], ["path", 0], ["true", 0], ["break", 0], ["else", 0], ["for", 0], ["d", 0], ["in", 0], ["adj", 0], ["list", 0], ["c", 0], ["if", 0], ["not", 0], ["visited", 0], ["d", 0], ["queue", 0], ["append", 0], ["d", 0], ["visited", 0], ["d", 0], ["true", 0], ["if", 0], ["path", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["in", 0], ["interval", 0], ["w", 0], ["x", 0], ["y", 0], ["z", 0], ["if", 0], ["w", 0], ["y", 0], ["and", 0], ["w", 0], ["z", 0], ["or", 0], ["x", 0], ["y", 0], ["and", 0], ["x", 0], ["z", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["def", 0], ["step", 0], ["through", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["temp", 0], ["x", 0], ["none", 0], ["for", 0], ["interval", 0], ["in", 0], ["temp", 0], ["e", 0], ["int", 0], ["interval", 0], ["0", 0], ["f", 0], ["int", 0], ["interval", 0], ["1", 0], ["if", 0], ["in", 0], ["interval", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["return", 0], ["true", 0], ["elif", 0], ["in", 0], ["interval", 0], ["a", 0], ["b", 0], ["e", 0], ["f", 0], ["x", 0], ["interval", 0], ["temp", 0], ["remove", 0], ["interval", 0], ["if", 0], ["step", 0], ["through", 0], ["e", 0], ["f", 0], ["c", 0], ["d", 0], ["temp", 0], ["return", 0], ["true", 0], ["if", 0], ["x", 0], ["none", 0], ["temp", 0], ["append", 0], ["x", 0], ["return", 0], ["false", 0], ["n", 0], ["int", 0], ["input", 0], ["set", 0], ["of", 0], ["intervals", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["line", 0], ["input", 0], ["split", 0], ["if", 0], ["line", 0], ["0", 0], ["1", 0], ["set", 0], ["of", 0], ["intervals", 0], ["append", 0], ["line", 0], ["1", 0], ["line", 0], ["2", 0], ["else", 0], ["a", 0], ["int", 0], ["set", 0], ["of", 0], ["intervals", 0], ["int", 0], ["line", 0], ["1", 0], ["1", 0], ["0", 0], ["b", 0], ["int", 0], ["set", 0], ["of", 0], ["intervals", 0], ["int", 0], ["line", 0], ["1", 0], ["1", 0], ["1", 0], ["c", 0], ["int", 0], ["set", 0], ["of", 0], ["intervals", 0], ["int", 0], ["line", 0], ["2", 0], ["1", 0], ["0", 0], ["d", 0], ["int", 0], ["set", 0], ["of", 0], ["intervals", 0], ["int", 0], ["line", 0], ["2", 0], ["1", 0], ["1", 0], ["temp", 0], ["set", 0], ["of", 0], ["intervals", 0], ["temp", 0], ["pop", 0], ["int", 0], ["line", 0], ["1", 0], ["1", 0], ["if", 0], ["step", 0], ["through", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["temp", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["input", 0], ["tuple", 0], ["f", 0], ["return", 0], ["tuple", 0], ["map", 0], ["f", 0], ["input", 0], ["rstrip", 0], ["split", 0], ["def", 0], ["make", 0], ["edge", 0], ["i1", 0], ["i2", 0], ["adj", 0], ["list", 0], ["i", 0], ["a", 0], ["b", 0], ["i1", 0], ["j", 0], ["c", 0], ["d", 0], ["i2", 0], ["if", 0], ["c", 0], ["a", 0], ["d", 0], ["or", 0], ["c", 0], ["b", 0], ["d", 0], ["adj", 0], ["list", 0], ["i", 0], ["append", 0], ["j", 0], ["def", 0], ["dfs", 0], ["curr", 0], ["dest", 0], ["seen", 0], ["intervals", 0], ["i", 0], ["a", 0], ["b", 0], ["curr", 0], ["if", 0], ["i", 0], ["dest", 0], ["return", 0], ["true", 0], ["seen", 0], ["add", 0], ["i", 0], ["for", 0], ["j", 0], ["c", 0], ["d", 0], ["in", 0], ["intervals", 0], ["if", 0], ["j", 0], ["in", 0], ["seen", 0], ["continue", 0], ["if", 0], ["c", 0], ["a", 0], ["d", 0], ["or", 0], ["c", 0], ["b", 0], ["d", 0], ["if", 0], ["dfs", 0], ["j", 0], ["c", 0], ["d", 0], ["dest", 0], ["seen", 0], ["intervals", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["def", 0], ["starting", 0], ["point", 0], ["intervals", 0], ["num", 0], ["queries", 0], ["int", 0], ["input", 0], ["rstrip", 0], ["i", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["num", 0], ["queries", 0], ["t", 0], ["a", 0], ["b", 0], ["input", 0], ["tuple", 0], ["int", 0], ["if", 0], ["t", 0], ["1", 0], ["intervals", 0], ["append", 0], ["i", 0], ["a", 0], ["b", 0], ["i", 0], ["1", 0], ["elif", 0], ["t", 0], ["2", 0], ["if", 0], ["dfs", 0], ["intervals", 0], ["a", 0], ["1", 0], ["b", 0], ["set", 0], ["intervals", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["starting", 0], ["point", 0], ["path", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["it", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["data", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["data", 0], ["0", 0], ["1", 0], ["path", 0], ["append", 0], ["data", 0], ["1", 0], ["else", 0], ["vis", 0], ["false", 0], ["len", 0], ["path", 0], ["1", 0], ["que", 0], ["data", 0], ["1", 0], ["1", 0], ["while", 0], ["len", 0], ["que", 0], ["p", 0], ["que", 0], ["0", 0], ["del", 0], ["que", 0], ["0", 0], ["for", 0], ["i", 0], ["v", 0], ["in", 0], ["enumerate", 0], ["path", 0], ["if", 0], ["v", 0], ["0", 0], ["path", 0], ["p", 0], ["0", 0], ["v", 0], ["1", 0], ["or", 0], ["v", 0], ["0", 0], ["path", 0], ["p", 0], ["1", 0], ["v", 0], ["1", 0], ["and", 0], ["not", 0], ["vis", 0], ["i", 0], ["vis", 0], ["i", 0], ["true", 0], ["que", 0], ["append", 0], ["i", 0], ["print", 0], ["yes", 0], ["if", 0], ["vis", 0], ["data", 0], ["2", 0], ["1", 0], ["else", 0], ["no", 0], ["intervals", 0], ["and", 0], ["visited", 0], ["intervals", 0], ["have", 0], ["the", 0], ["same", 0], ["key", 0], ["which", 0], ["is", 0], ["the", 0], ["order", 0], ["in", 0], ["which", 0], ["intervals", 0], ["were", 0], ["queried", 0], ["counter", 0], ["1", 0], ["queries", 0], ["int", 0], ["input", 0], ["visited", 0], ["intervals", 0], ["0", 0], ["queries", 0], ["1", 0], ["intervals", 0], ["def", 0], ["get", 0], ["interval", 0], ["return", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["reset", 0], ["search", 0], ["data", 0], ["nonlocal", 0], ["queries", 0], ["nonlocal", 0], ["visited", 0], ["intervals", 0], ["del", 0], ["visited", 0], ["intervals", 0], ["visited", 0], ["intervals", 0], ["0", 0], ["queries", 0], ["def", 0], ["solve", 0], ["nonlocal", 0], ["counter", 0], ["nonlocal", 0], ["visited", 0], ["intervals", 0], ["for", 0], ["in", 0], ["range", 0], ["queries", 0], ["query", 0], ["get", 0], ["interval", 0], ["if", 0], ["query", 0], ["0", 0], ["1", 0], ["intervals", 0], ["counter", 0], ["query", 0], ["counter", 0], ["1", 0], ["elif", 0], ["query", 0], ["0", 0], ["2", 0], ["q", 0], ["q", 0], ["append", 0], ["query", 0], ["1", 0], ["start", 0], ["new", 0], ["search", 0], ["reset", 0], ["search", 0], ["data", 0], ["while", 0], ["len", 0], ["q", 0], ["0", 0], ["q", 0], ["interval", 0], ["q", 0], ["pop", 0], ["0", 0], ["for", 0], ["index", 0], ["in", 0], ["intervals", 0], ["c", 0], ["intervals", 0], ["index", 0], ["1", 0], ["d", 0], ["intervals", 0], ["index", 0], ["2", 0], ["a", 0], ["intervals", 0], ["q", 0], ["interval", 0], ["1", 0], ["b", 0], ["intervals", 0], ["q", 0], ["interval", 0], ["2", 0], ["if", 0], ["c", 0], ["a", 0], ["d", 0], ["or", 0], ["c", 0], ["b", 0], ["d", 0], ["if", 0], ["visited", 0], ["intervals", 0], ["index", 0], ["0", 0], ["print", 0], ["true", 0], ["c", 0], ["a", 0], ["d", 0], ["c", 0], ["b", 0], ["d", 0], ["print", 0], ["marking", 0], ["index", 0], ["visited", 0], ["intervals", 0], ["index", 0], ["1", 0], ["print", 0], ["visited", 0], ["index", 0], ["q", 0], ["append", 0], ["index", 0], ["if", 0], ["visited", 0], ["intervals", 0], ["query", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["solve", 0], ["def", 0], ["graphadd", 0], ["u", 0], ["v", 0], ["g", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["g", 0], ["if", 0], ["a", 0], ["u", 0], ["and", 0], ["u", 0], ["b", 0], ["or", 0], ["a", 0], ["v", 0], ["and", 0], ["v", 0], ["b", 0], ["connect", 0], ["g", 0], ["u", 0], ["v", 0], ["a", 0], ["b", 0], ["if", 0], ["u", 0], ["a", 0], ["and", 0], ["a", 0], ["v", 0], ["or", 0], ["u", 0], ["b", 0], ["and", 0], ["b", 0], ["v", 0], ["connect", 0], ["g", 0], ["a", 0], ["b", 0], ["u", 0], ["v", 0], ["def", 0], ["connect", 0], ["g", 0], ["u", 0], ["v", 0], ["w", 0], ["x", 0], ["g", 0], ["u", 0], ["v", 0], ["w", 0], ["x", 0], ["1", 0], ["def", 0], ["queuesort", 0], ["g", 0], ["l", 0], ["u", 0], ["v", 0], ["start", 0], ["l", 0], ["u", 0], ["1", 0], ["visited", 0], ["dict", 0], ["visited", 0], ["start", 0], ["1", 0], ["end", 0], ["l", 0], ["v", 0], ["1", 0], ["q", 0], ["start", 0], ["while", 0], ["q", 0], ["cur", 0], ["q", 0], ["pop", 0], ["0", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["g", 0], ["cur", 0], ["if", 0], ["a", 0], ["b", 0], ["end", 0], ["return", 0], ["yes", 0], ["if", 0], ["a", 0], ["b", 0], ["not", 0], ["in", 0], ["visited", 0], ["visited", 0], ["a", 0], ["b", 0], ["1", 0], ["q", 0], ["append", 0], ["a", 0], ["b", 0], ["return", 0], ["no", 0], ["numtest", 0], ["int", 0], ["input", 0], ["g", 0], ["dict", 0], ["l", 0], ["list", 0], ["while", 0], ["numtest", 0], ["0", 0], ["inputlist", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["inputlist", 0], ["0", 0], ["b", 0], ["inputlist", 0], ["1", 0], ["c", 0], ["inputlist", 0], ["2", 0], ["if", 0], ["a", 0], ["1", 0], ["g", 0], ["b", 0], ["c", 0], ["graphadd", 0], ["b", 0], ["c", 0], ["g", 0], ["l", 0], ["append", 0], ["b", 0], ["c", 0], ["else", 0], ["print", 0], ["queuesort", 0], ["g", 0], ["l", 0], ["b", 0], ["c", 0], ["numtest", 0], ["1", 0], ["solution", 0], ["to", 0], ["the", 0], ["320b", 0], ["problem", 0], ["on", 0], ["codeforces", 0], ["pylint", 0], ["disable", 0], ["c0325", 0], ["pylint", 0], ["disable", 0], ["w0611", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["filter", 0], ["intervals", 0], ["intv", 0], ["input", 0], ["list", 0], ["filters", 0], ["the", 0], ["list", 0], ["for", 0], ["all", 0], ["the", 0], ["intervals", 0], ["that", 0], ["are", 0], ["valid", 0], ["return", 0], ["x", 0], ["y", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["input", 0], ["list", 0], ["if", 0], ["int", 0], ["intv", 0], ["0", 0], ["int", 0], ["x", 0], ["and", 0], ["int", 0], ["intv", 0], ["0", 0], ["int", 0], ["y", 0], ["or", 0], ["int", 0], ["intv", 0], ["1", 0], ["int", 0], ["x", 0], ["and", 0], ["int", 0], ["intv", 0], ["1", 0], ["int", 0], ["y", 0], ["def", 0], ["interval", 0], ["search", 0], ["intv", 0], ["target", 0], ["input", 0], ["list", 0], ["finds", 0], ["if", 0], ["a", 0], ["path", 0], ["exists", 0], ["from", 0], ["one", 0], ["interval", 0], ["to", 0], ["another", 0], ["visited", 0], ["set", 0], ["d", 0], ["deque", 0], ["d", 0], ["append", 0], ["intv", 0], ["while", 0], ["d", 0], ["intv", 0], ["d", 0], ["pop", 0], ["if", 0], ["intv", 0], ["target", 0], ["return", 0], ["true", 0], ["if", 0], ["intv", 0], ["not", 0], ["in", 0], ["visited", 0], ["visited", 0], ["add", 0], ["intv", 0], ["for", 0], ["interval", 0], ["in", 0], ["filter", 0], ["intervals", 0], ["intv", 0], ["input", 0], ["list", 0], ["if", 0], ["interval", 0], ["not", 0], ["in", 0], ["visited", 0], ["d", 0], ["append", 0], ["interval", 0], ["return", 0], ["false", 0], ["def", 0], ["main", 0], ["docstring", 0], ["or", 0], ["main", 0], ["num", 0], ["inputs", 0], ["int", 0], ["input", 0], ["interval", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["num", 0], ["inputs", 0], ["input", 0], ["type", 0], ["beg", 0], ["end", 0], ["input", 0], ["split", 0], ["beg", 0], ["int", 0], ["beg", 0], ["end", 0], ["int", 0], ["end", 0], ["if", 0], ["int", 0], ["input", 0], ["type", 0], ["1", 0], ["interval", 0], ["list", 0], ["append", 0], ["beg", 0], ["end", 0], ["else", 0], ["if", 0], ["interval", 0], ["search", 0], ["interval", 0], ["list", 0], ["beg", 0], ["1", 0], ["interval", 0], ["list", 0], ["end", 0], ["1", 0], ["interval", 0], ["list", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0005832604257801109, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0005832604257801109, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.004068584713746004, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.004068584713746004, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0005832604257801109, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0005832604257801109, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.004068584713746004, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.004068584713746004, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nGiven a collection of distinct integers, return all possible permutations.\n\nExample:\n\n\nInput: [1,2,3]\nOutput:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["class Solution:\n\tdef permute(self, nums):\n\t    \"\"\"\n\t    :type nums: List[int]\n\t    :rtype: List[List[int]]\n\t    \"\"\"\n\t    all_permutes = []\n\t    self.permute_nums(all_permutes, nums, [])\n\t    return all_permutes\n\t\n\tdef permute_nums(self, all_permutes, nums, cur_permute):\n\t    if len(nums) == 0:\n\t\t   all_permutes.append(cur_permute)\n\t\t   return\n \n\t    for i in range(len(nums)):\n\t\t   num = nums[i]\n \n\t\t   self.permute_nums(all_permutes, nums[0:i] + nums[i+1:len(nums)], cur_permute + [num])\n", "class Solution:\n\tdef permute(self, nums):\n\t    \"\"\"\n\t    :type nums: List[int]\n\t    :rtype: List[List[int]]\n\t    \"\"\"\n\t    if not nums:\n\t\t   return []\n \n\t    nums.sort()\n\t    res = [nums[:]]\n\t    n = len(nums)\n\t    i = n-1\n\t    while i > 0:\n\t\t   if nums[i-1] < nums[i]:\n\t\t\t  j = n-1\n\t\t\t  while nums[j] < nums[i-1]:\n\t\t\t\t j -= 1\n\t\t\t  nums[i-1], nums[j] = nums[j], nums[i-1]\n\t\t\t  nums[i:] = sorted(nums[i:])\n\t\t\t  res.append(nums[:])\n\t\t\t  i = n-1\n\t\t   else:\n\t\t\t  i -= 1\n \n\t    return res\n\t\n\t\n", "class Solution:\n \n\tdef permute(self, nums):\n\t    \"\"\"\n\t    :type nums: List[int]\n\t    :rtype: List[List[int]]\n\t    \"\"\"\n\t    \n\t    res = []\n\t    \n\t    self.dfs(nums, [], res)\n\t    \n\t    return res\n\t\t   \n\tdef dfs(self, nums, path, res):\n\t    if not nums:\n\t\t   res.append(path)\n\t    \n\t    for i in range(len(nums)):\n\t\t   self.dfs(nums[:i] + nums[i+1:], path+[nums[i]], res)\n", "class Solution:\n\tdef permute(self, nums):\n\t    \"\"\"\n\t    :type nums: List[int]\n\t    :rtype: List[List[int]]\n\t    \"\"\"\n\t    self.res = []\n\t    if not nums or len(nums) == 0:\n\t\t   return self.res\n\t    self.dfs(0, [], nums)\n\t    return self.res\n\t    \n\tdef dfs(self, i, path, remaining):\n\t    if len(remaining) == 0:\n\t\t   self.res.append(path)\n\t    for i in range(len(remaining)):\n\t\t   self.dfs(i+1, path + [remaining[i]], remaining[0:i]+remaining[i+1:])\n", "class Solution:\n\tdef permute(self, nums):\n\t    \"\"\"\n\t    :type nums: List[int]\n\t    :rtype: List[List[int]]\n\t    \"\"\"\n\t    res = []\n\t    print(nums)\n\t    \n\t    def swap(a, i, j):\n\t\t   temp = a[i]\n\t\t   a[i] = a[j]\n\t\t   a[j] = temp\n\t    \n\t    def helper(index, path):\n\t\t   if index == len(nums) - 1:\n\t\t\t  res.append(path.copy())\n\t\t   for i in range(index, len(nums)):\n\t\t\t  swap(path, index, i)\n\t\t\t  helper(index + 1, path.copy())\n\t\t   \n\t    helper(0, nums)\n\t    print(nums)\n\t    return res\n"], "id": "id8731"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8731", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["given", 5], ["a", 5], ["collection", 5], ["of", 5], ["distinct", 5], ["integers", 5], ["return", 5], ["all", 5], ["possible", 5], ["permutations", 5], ["example", 5], ["input", 8], ["1", 8], ["2", 8], ["3", 8], ["output", 9], ["1", 465], ["2", 453], ["3", 458], ["1", 313], ["3", 314], ["2", 314], ["2", 2], ["1", 0], ["3", 0], ["2", 0], ["3", 0], ["1", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["2", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["permute", 0], ["self", 0], ["nums", 0], ["list", 0], ["int", 0], ["list", 0], ["list", 0], ["int", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5227272727272727, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0756185653479165, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.625, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.19464285714285717, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.38636363636363635, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07525252525252525, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.625, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.19464285714285717, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["class", 3], ["solution", 3], ["def", 0], ["permute", 0], ["self", 0], ["nums", 0], ["type", 0], ["nums", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["list", 0], ["int", 0], ["all", 0], ["permutes", 0], ["self", 0], ["permute", 0], ["nums", 0], ["all", 0], ["permutes", 0], ["nums", 0], ["return", 0], ["all", 0], ["permutes", 0], ["def", 0], ["permute", 0], ["nums", 0], ["self", 0], ["all", 0], ["permutes", 0], ["nums", 0], ["cur", 0], ["permute", 0], ["if", 0], ["len", 0], ["nums", 0], ["0", 0], ["all", 0], ["permutes", 0], ["append", 0], ["cur", 0], ["permute", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["nums", 0], ["num", 0], ["nums", 0], ["i", 0], ["self", 0], ["permute", 0], ["nums", 0], ["all", 0], ["permutes", 0], ["nums", 0], ["0", 0], ["i", 0], ["nums", 0], ["i", 0], ["1", 0], ["len", 0], ["nums", 0], ["cur", 0], ["permute", 0], ["num", 0], ["class", 3], ["solution", 3], ["def", 3], ["permute", 3], ["self", 5], ["nums", 5], ["type", 1], ["nums", 1], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["list", 0], ["int", 0], ["if", 0], ["not", 0], ["nums", 0], ["return", 0], ["nums", 0], ["sort", 0], ["res", 0], ["nums", 0], ["n", 0], ["len", 0], ["nums", 0], ["i", 0], ["n", 0], ["1", 0], ["while", 0], ["i", 0], ["0", 0], ["if", 0], ["nums", 0], ["i", 0], ["1", 0], ["nums", 0], ["i", 0], ["j", 0], ["n", 0], ["1", 0], ["while", 0], ["nums", 0], ["j", 0], ["nums", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["nums", 0], ["i", 0], ["1", 0], ["nums", 0], ["j", 0], ["nums", 0], ["j", 0], ["nums", 0], ["i", 0], ["1", 0], ["nums", 0], ["i", 0], ["sorted", 0], ["nums", 0], ["i", 0], ["res", 0], ["append", 0], ["nums", 0], ["i", 0], ["n", 0], ["1", 0], ["else", 0], ["i", 0], ["1", 0], ["return", 0], ["res", 0], ["class", 3], ["solution", 3], ["def", 1], ["permute", 0], ["self", 0], ["nums", 0], ["type", 0], ["nums", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["list", 0], ["int", 0], ["res", 0], ["self", 0], ["dfs", 0], ["nums", 0], ["res", 0], ["return", 0], ["res", 0], ["def", 0], ["dfs", 0], ["self", 0], ["nums", 0], ["path", 0], ["res", 0], ["if", 0], ["not", 0], ["nums", 0], ["res", 0], ["append", 0], ["path", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["nums", 0], ["self", 0], ["dfs", 0], ["nums", 0], ["i", 0], ["nums", 0], ["i", 0], ["1", 0], ["path", 0], ["nums", 0], ["i", 0], ["res", 0], ["class", 3], ["solution", 3], ["def", 0], ["permute", 0], ["self", 0], ["nums", 0], ["type", 0], ["nums", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["list", 0], ["int", 0], ["self", 0], ["res", 0], ["if", 0], ["not", 0], ["nums", 0], ["or", 0], ["len", 0], ["nums", 0], ["0", 0], ["return", 0], ["self", 0], ["res", 0], ["self", 0], ["dfs", 0], ["0", 0], ["nums", 0], ["return", 0], ["self", 0], ["res", 0], ["def", 0], ["dfs", 0], ["self", 0], ["i", 0], ["path", 0], ["remaining", 0], ["if", 0], ["len", 0], ["remaining", 0], ["0", 0], ["self", 0], ["res", 0], ["append", 0], ["path", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["remaining", 0], ["self", 0], ["dfs", 0], ["i", 0], ["1", 0], ["path", 0], ["remaining", 0], ["i", 0], ["remaining", 0], ["0", 0], ["i", 0], ["remaining", 0], ["i", 0], ["1", 0], ["class", 3], ["solution", 3], ["def", 1], ["permute", 0], ["self", 0], ["nums", 0], ["type", 0], ["nums", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["list", 0], ["int", 0], ["res", 0], ["print", 0], ["nums", 0], ["def", 0], ["swap", 0], ["a", 2], ["i", 0], ["j", 0], ["temp", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["a", 0], ["j", 0], ["temp", 0], ["def", 0], ["helper", 0], ["index", 0], ["path", 0], ["if", 0], ["index", 0], ["len", 0], ["nums", 0], ["1", 0], ["res", 0], ["append", 0], ["path", 0], ["copy", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["index", 0], ["len", 0], ["nums", 0], ["swap", 0], ["path", 0], ["index", 0], ["i", 0], ["helper", 0], ["index", 0], ["1", 0], ["path", 0], ["copy", 0], ["helper", 0], ["0", 0], ["nums", 0], ["print", 0], ["nums", 0], ["return", 0], ["res", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.060126582278481014, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.02816455696202531, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.2774390243902439, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.18038617886178873, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.060126582278481014, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.02816455696202531, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.2774390243902439, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.18038617886178873, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nIt seems like the year of 2013 came only yesterday. Do you know a curious fact? The year of 2013 is the first year after the old 1987 with only distinct digits.\n\nNow you are suggested to solve the following problem: given a year number, find the minimum year number which is strictly larger than the given one and has only distinct digits.\n\n\n-----Input-----\n\nThe single line contains integer y (1000 ≤ y ≤ 9000) — the year number.\n\n\n-----Output-----\n\nPrint a single integer — the minimum year number that is strictly larger than y and all it's digits are distinct. It is guaranteed that the answer exists.\n\n\n-----Examples-----\nInput\n1987\n\nOutput\n2013\n\nInput\n2013\n\nOutput\n2014\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["def find(ins):\n\tins += 1\n\t\n\ttest = [int(i) for i in str(ins)]\n\t\n\tinlist = []\n\t\n\tfor i in test:\n\t\tif i in inlist:\n\t\t\t\n\t\t\ttest = find(ins)\n\t\t\tbreak\n\t\t\t\n\t\telse:\n\t\t\tinlist.append(i)\n\t\n\treturn ''.join(str(x) for x in test)\n\t\nins = int(input())\nprint(find(ins))\n", "y = int(input())\ny = y+1\ndef isDistinct(year):\n\tsy = str(year)\n\tli = []\n\tfor i in sy:\n\t\tif(i in li):\n\t\t\treturn False\n\t\tli.append(i)\n\treturn True\n\nwhile(not isDistinct(y)):\n\ty = y+1\n\nprint(y)\n", "y = int(input())\ny = y+1\ndef isDistinct(year):\n\tsy = str(year)\n\tli = []\n\tfor i in sy:\n\t\tif(i in li):\n\t\t\treturn False\n\t\tli.append(i)\n\treturn True\n\nwhile(not isDistinct(y)):\n\ty = y+1\n\nprint(y)\n", "import sys\ninp = sys.stdin\ny = int(inp.readline()) + 1\n\ndef check_dif(num):\n\ts = str(num)\n\tok = 1\n\tfor i in range(len(s)):\n\t\tif s[i] in s[i + 1:]:\n\t\t\tok = 0\n\treturn ok\n\nwhile check_dif(y) == 0:\n\ty += 1\nprint(y)\n", "n = int(input()) + 1\nwhile len(set(str(n))) != 4:\n\tn += 1\nprint(n)\n", "y = int(input()) + 1 #scott wait you don't even right? you can do like list(str(y)) or something\nwhile len(set(str(y))) != len(str(y)): y+=1 #scott\nprint(y) #steven remember ++ doesn't exist\n", "# http://codeforces.com/problemset/problem/271/A you start this should be like a 2-liner with python?\n\n#sry i see it now\n\n\ndef check(x): # let's practice writing functions though and yeah i think list == array so not list prolly\n# http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/functions.html\n\treturn len(set(str(x)))==len(str(x)) # should work??\ny = int(input()) + 1 #scott wait you don't even right? you can do like list(str(y)) or something\n\nwhile not check(y): y+=1 #scott\n\nprint(y) #steven remember ++ doesn't exist\n", "# http://codeforces.com/problemset/problem/271/A you start this should be like a 2-liner with python?\n\n#sry i see it now\n\n\ndef check(x): # let's practice writing functions though and yeah i think list == array so not list prolly\n# http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/functions.html\n\treturn len(set(str(x)))==len(str(x)) # should work??\ny = int(input()) + 1 #scott wait you don't even right? you can do like list(str(y)) or something\n\nwhile check(y) == 0:  y+=1 #scott\n\nprint(y) #steven remember ++ doesn't exist\n#oh wait it might be the == false might need to be FALSE or something stupid like that also ! does not exist\n#oh ic\n", "# http://codeforces.com/problemset/problem/271/A you start this should be like a 2-liner with python?\n\n#sry i see it now\n\n\ndef check(x): # let's practice writing functions though and yeah i think list == array so not list prolly\n# http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/functions.html\n\treturn len(set(str(x)))==len(str(x)) # should work??\ny = int(input()) + 1 #scott wait you don't even right? you can do like list(str(y)) or something\n\nwhile check(y) == False: y+=1 #scott\n\nprint(y) #steven remember ++ doesn't exist\n", "# http://codeforces.com/problemset/problem/271/A you start this should be like a 2-liner with python?\n\n#sry i see it now\n\n\ndef check(x): # let's practice writing functions though and yeah i think list == array so not list prolly\n# http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/functions.html\n\treturn len(set(str(x)))==len(str(x)) # should work??\ny = int(input()) + 1 #scott wait you don't even right? you can do like list(str(y)) or something\n\nwhile check(y) is False: y+=1 #scott\n\nprint(y) #steven remember ++ doesn't exist\n", "n=input()\nyear=int(n)\nyear+=1\nn=list(str(year))\nwhile(not(n.count(n[0])==n.count(n[1])==n.count(n[2])==n.count(n[3])==1)):\n\tyear+=1\n\tn=list(str(year))\n\nprint(year)\n", "3\n\ny = int(input())\nans = y + 1\nwhile True:\n\tif len(set(list(str(ans)))) == 4:\n\t\tbreak\n\tans += 1\nprint(ans)\n", "n = int(input()) + 1\nwhile len(set(str(n))) != 4: n += 1\nprint(n)\n", "def is_distinct(year):\n\tyears = str(year)\n\ts = set()\n\tfor c in years:\n\t\tif c in s:\n\t\t\treturn False\n\t\telse:\n\t\t\ts.add(c)\n\treturn True\n\ndef upper_distinct(year):\n\tyear += 1\n\twhile(True):\n\t\tif is_distinct(year):\n\t\t\treturn year\n\t\telse:\n\t\t\tyear += 1\n\t\t\t\n\n\ndef main():\n\tfirst_line = input()\n\tfirst_line = first_line.split()\n\t\n\tyear = int(first_line[0])\n\tprint(upper_distinct(year))\n\t\n\n\n\t\n\t\n\t\nmain()\n", "y=int(input())+1\nwhile(len(set(str(y)))!=len(str(y))):\n\ty+=1\nprint(y)\n", "import sys\n\ndef year():\n\tlistyear = []\n\tyear = input().split()\n\tk = True\n\tfor i in range(len(year[0])):\n\t\tlistyear.append(int(year[0][i]))\n\tlistyear.reverse()\n\treturn(listyear)\n\ndef nextyear(listyear):\n\tif listyear[0] == 9:\n\t\tlistyear[0] = 0\n\t\tif listyear[1] == 9:\n\t\t\tlistyear[1] = 0\n\t\t\tif listyear[2] == 9:\n\t\t\t\tlistyear[2] = 0\n\t\t\t\tif listyear[3] == 9:\n\t\t\t\t\tlistyear[3] = 0\n\t\t\t\telse:\n\t\t\t\t\tlistyear[3] += 1\n\t\t\telse:\n\t\t\t\tlistyear[2] += 1\n\t\telse:\n\t\t\tlistyear[1] += 1\n\telse:\n\t\tlistyear[0] += 1\n\treturn listyear\n\ndef rightyear(listyear):\n\tnextyear(listyear)\n\twhile len(set(listyear)) != 4:\n\t\tlistyear = nextyear(listyear)\n\tlistyear.reverse()\n\n\tfor i in listyear:\n\t\tprint(i,end=\"\")\n\t\nrightyear(year())\n", "n = int(input())\nwhile True:\n\tn += 1\n\tc = set(str(n))\n\tif len(c) == len(str(n)):\n\t\tprint(n)\n\t\tbreak\n\n", "year = int(input())\n\nfor i in range(year + 1, 9013):\n\tif i % 10 != i // 1000 and i % 10 != i % 1000 // 100 and i % 10 != i % 100 // 10 and i // 1000 != i % 1000 // 100 and i // 1000 != i % 100 // 10 and i % 100 // 10 != i % 1000 // 100:\n\t\tprint(i)\n\t\tbreak\n", "n = int(input()) + 1\nwhile len(set(str(n))) != 4:\n\tn += 1\nprint(n)\n", "def cnt(n):\n\ta = [0] * 10\n\tc = 0\n\tb = 0\n\twhile n != 0:\n\t\ta[n % 10] += 1\n\t\tif a[n % 10] == 1:\n\t\t\tc += 1\n\t\tn //= 10\n\t\tb += 1\n\tif b == c:\n\t\treturn True\n\telse:\n\t\treturn False\n\nn = int(input().strip())\ni = 1\nwhile not cnt(n + i):\n\ti += 1\nprint(n + i)\n", "y=int(input())\n\ndef is_b_year(x):\n\ts=set()\n\tfor c in str(x):\n\t\ts.add(c)\n\tif len(s) == 4:\n\t\treturn True\n\telse :\n\t\treturn False\n\nfor x in range(y+1,2**31-1):\n\tif is_b_year(x):\n\t\tprint(x)\n\t\tbreak\n\t\n\t\n\t\n\n", "year = int(input())\n\nfor i in range(year + 1, 10000):\n\ty = i\n\ta = y // 1000\n\ty = y - a * 1000\n\tb = y // 100\n\ty = y - b * 100\n\tc = y // 10\n\ty = y - c * 10\n\tlst = [a, b, c, y]\n\tlst.sort()\n\tif lst[0] != lst[1] and lst[1] != lst[2] and lst[2] != lst[3]:\n\t\tprint(i)\n\t\tbreak\n", "for i in range(int(input()) + 1, 10000):\n\tif len(set(list(str(i)))) == 4:\n\t\tprint(i)\n\t\tbreak\n", "def isUnique(num):\n\tstring=str(num)\n\td={'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0}\n\tfor i in string:\n\t\tif d[i]==0:\n\t\t\td[i]=1\n\t\telif d[i]==1:\n\t\t\treturn 0\n\treturn 1\n\nstring=input()\nnum=int(string)\nwhile 1:\n\tnum+=1\n\tif isUnique(num):break\nprint(num)\n", "yearsnn = int(input())\ncont = 0\nwhile True:\n\tif years[cont] > n:\n\t\tprint(years[cont])\n\t\tbreak\n\telse:\n\t\tcont+=1\n"], "id": "id5890"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5890", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["it", 1], ["seems", 1], ["like", 1], ["the", 1], ["year", 1], ["of", 1], ["2013", 1], ["came", 1], ["only", 1], ["yesterday", 1], ["do", 1], ["you", 1], ["know", 1], ["a", 1], ["curious", 1], ["fact", 1], ["the", 1], ["year", 1], ["of", 1], ["2013", 1], ["is", 0], ["the", 0], ["first", 0], ["year", 0], ["after", 0], ["the", 0], ["old", 0], ["1987", 0], ["with", 0], ["only", 0], ["distinct", 0], ["digits", 0], ["now", 0], ["you", 0], ["are", 0], ["suggested", 0], ["to", 0], ["solve", 0], ["the", 0], ["following", 0], ["problem", 0], ["given", 1], ["a", 1], ["year", 1], ["number", 1], ["find", 1], ["the", 1], ["minimum", 1], ["year", 1], ["number", 1], ["which", 1], ["is", 0], ["strictly", 0], ["larger", 0], ["than", 0], ["the", 0], ["given", 0], ["one", 0], ["and", 0], ["has", 0], ["only", 0], ["distinct", 0], ["digits", 0], ["input", 0], ["the", 0], ["single", 1], ["line", 1], ["contains", 0], ["integer", 0], ["y", 0], ["1000", 0], ["≤", 0], ["y", 0], ["≤", 0], ["9000", 0], ["—", 0], ["the", 0], ["year", 0], ["number", 0], ["output", 0], ["print", 1], ["a", 1], ["single", 1], ["integer", 1], ["—", 1], ["the", 1], ["minimum", 1], ["year", 1], ["number", 1], ["that", 1], ["is", 1], ["strictly", 1], ["larger", 1], ["than", 1], ["y", 1], ["and", 1], ["all", 1], ["it", 0], ["s", 0], ["digits", 0], ["are", 0], ["distinct", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["the", 0], ["answer", 0], ["exists", 0], ["examples", 0], ["input", 0], ["1987", 0], ["output", 0], ["2013", 0], ["input", 0], ["2013", 0], ["output", 0], ["2014", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4188034188034188, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4188034188034188, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.751937984496124, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.751937984496124, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4188034188034188, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4188034188034188, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.751937984496124, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.751937984496124, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["def", 0], ["find", 0], ["ins", 0], ["ins", 0], ["1", 0], ["test", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["str", 0], ["ins", 0], ["inlist", 0], ["for", 0], ["i", 0], ["in", 0], ["test", 0], ["if", 0], ["i", 0], ["in", 0], ["inlist", 0], ["test", 0], ["find", 0], ["ins", 0], ["break", 0], ["else", 0], ["inlist", 0], ["append", 0], ["i", 0], ["return", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["test", 0], ["ins", 0], ["int", 0], ["input", 0], ["print", 0], ["find", 0], ["ins", 0], ["y", 0], ["int", 0], ["input", 0], ["y", 0], ["y", 0], ["1", 0], ["def", 0], ["isdistinct", 0], ["year", 0], ["sy", 0], ["str", 0], ["year", 0], ["li", 0], ["for", 0], ["i", 0], ["in", 0], ["sy", 0], ["if", 0], ["i", 0], ["in", 0], ["li", 0], ["return", 0], ["false", 0], ["li", 0], ["append", 0], ["i", 0], ["return", 0], ["true", 0], ["while", 0], ["not", 0], ["isdistinct", 0], ["y", 0], ["y", 0], ["y", 0], ["1", 0], ["print", 0], ["y", 0], ["y", 0], ["int", 0], ["input", 0], ["y", 0], ["y", 0], ["1", 0], ["def", 0], ["isdistinct", 0], ["year", 0], ["sy", 0], ["str", 0], ["year", 0], ["li", 0], ["for", 0], ["i", 0], ["in", 0], ["sy", 0], ["if", 0], ["i", 0], ["in", 0], ["li", 0], ["return", 0], ["false", 0], ["li", 0], ["append", 0], ["i", 0], ["return", 0], ["true", 0], ["while", 0], ["not", 0], ["isdistinct", 0], ["y", 0], ["y", 0], ["y", 0], ["1", 0], ["print", 0], ["y", 0], ["import", 0], ["sys", 0], ["inp", 0], ["sys", 0], ["stdin", 0], ["y", 0], ["int", 0], ["inp", 0], ["readline", 0], ["1", 0], ["def", 0], ["check", 0], ["dif", 0], ["num", 0], ["s", 0], ["str", 0], ["num", 0], ["ok", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["s", 0], ["i", 0], ["1", 0], ["ok", 0], ["0", 0], ["return", 0], ["ok", 0], ["while", 0], ["check", 0], ["dif", 0], ["y", 0], ["0", 0], ["y", 0], ["1", 0], ["print", 0], ["y", 0], ["n", 0], ["int", 0], ["input", 0], ["1", 0], ["while", 0], ["len", 0], ["set", 0], ["str", 0], ["n", 0], ["4", 0], ["n", 0], ["1", 0], ["print", 0], ["n", 0], ["y", 0], ["int", 0], ["input", 0], ["1", 0], ["scott", 0], ["wait", 0], ["you", 0], ["don", 0], ["t", 0], ["even", 0], ["right", 0], ["you", 0], ["can", 0], ["do", 0], ["like", 0], ["list", 0], ["str", 0], ["y", 0], ["or", 0], ["something", 0], ["while", 0], ["len", 0], ["set", 0], ["str", 0], ["y", 0], ["len", 0], ["str", 0], ["y", 0], ["y", 0], ["1", 0], ["scott", 0], ["print", 0], ["y", 0], ["steven", 0], ["remember", 0], ["doesn", 0], ["t", 0], ["exist", 0], ["http", 0], ["codeforces", 0], ["com", 0], ["problemset", 0], ["problem", 0], ["271", 0], ["a", 0], ["you", 0], ["start", 0], ["this", 0], ["should", 0], ["be", 0], ["like", 0], ["a", 0], ["2", 0], ["liner", 0], ["with", 0], ["python", 0], ["sry", 0], ["i", 0], ["see", 0], ["it", 0], ["now", 0], ["def", 0], ["check", 0], ["x", 0], ["let", 0], ["s", 0], ["practice", 0], ["writing", 0], ["functions", 0], ["though", 0], ["and", 0], ["yeah", 0], ["i", 0], ["think", 0], ["list", 0], ["array", 0], ["so", 0], ["not", 0], ["list", 0], ["prolly", 0], ["http", 2], ["anh", 0], ["cs", 0], ["luc", 0], ["edu", 0], ["python", 0], ["hands", 0], ["on", 0], ["3", 0], ["1", 0], ["handsonhtml", 0], ["functions", 0], ["html", 0], ["return", 0], ["len", 0], ["set", 0], ["str", 0], ["x", 0], ["len", 0], ["str", 0], ["x", 0], ["should", 0], ["work", 0], ["y", 0], ["int", 0], ["input", 0], ["1", 0], ["scott", 0], ["wait", 0], ["you", 0], ["don", 0], ["t", 0], ["even", 0], ["right", 0], ["you", 0], ["can", 0], ["do", 0], ["like", 0], ["list", 0], ["str", 0], ["y", 0], ["or", 0], ["something", 0], ["while", 0], ["not", 0], ["check", 0], ["y", 0], ["y", 0], ["1", 0], ["scott", 0], ["print", 0], ["y", 0], ["steven", 0], ["remember", 0], ["doesn", 0], ["t", 0], ["exist", 0], ["http", 0], ["codeforces", 0], ["com", 0], ["problemset", 0], ["problem", 0], ["271", 0], ["a", 0], ["you", 0], ["start", 0], ["this", 0], ["should", 0], ["be", 0], ["like", 0], ["a", 0], ["2", 0], ["liner", 0], ["with", 0], ["python", 0], ["sry", 0], ["i", 0], ["see", 0], ["it", 0], ["now", 0], ["def", 0], ["check", 0], ["x", 0], ["let", 0], ["s", 0], ["practice", 0], ["writing", 0], ["functions", 0], ["though", 0], ["and", 0], ["yeah", 0], ["i", 0], ["think", 0], ["list", 0], ["array", 0], ["so", 0], ["not", 0], ["list", 0], ["prolly", 0], ["http", 2], ["anh", 0], ["cs", 0], ["luc", 0], ["edu", 0], ["python", 0], ["hands", 0], ["on", 0], ["3", 0], ["1", 0], ["handsonhtml", 0], ["functions", 0], ["html", 0], ["return", 0], ["len", 0], ["set", 0], ["str", 0], ["x", 0], ["len", 0], ["str", 0], ["x", 0], ["should", 0], ["work", 0], ["y", 0], ["int", 0], ["input", 0], ["1", 0], ["scott", 0], ["wait", 0], ["you", 0], ["don", 0], ["t", 0], ["even", 0], ["right", 0], ["you", 0], ["can", 0], ["do", 0], ["like", 0], ["list", 0], ["str", 0], ["y", 0], ["or", 0], ["something", 0], ["while", 0], ["check", 0], ["y", 0], ["0", 0], ["y", 0], ["1", 0], ["scott", 0], ["print", 0], ["y", 0], ["steven", 0], ["remember", 0], ["doesn", 0], ["t", 0], ["exist", 0], ["oh", 0], ["wait", 0], ["it", 0], ["might", 0], ["be", 0], ["the", 0], ["false", 0], ["might", 0], ["need", 0], ["to", 0], ["be", 0], ["false", 0], ["or", 0], ["something", 0], ["stupid", 0], ["like", 0], ["that", 0], ["also", 0], ["does", 0], ["not", 0], ["exist", 0], ["oh", 0], ["ic", 0], ["http", 0], ["codeforces", 0], ["com", 0], ["problemset", 0], ["problem", 0], ["271", 0], ["a", 0], ["you", 0], ["start", 0], ["this", 0], ["should", 0], ["be", 0], ["like", 0], ["a", 0], ["2", 0], ["liner", 0], ["with", 0], ["python", 0], ["sry", 0], ["i", 0], ["see", 0], ["it", 0], ["now", 0], ["def", 0], ["check", 0], ["x", 0], ["let", 0], ["s", 0], ["practice", 0], ["writing", 0], ["functions", 0], ["though", 0], ["and", 0], ["yeah", 0], ["i", 0], ["think", 0], ["list", 0], ["array", 0], ["so", 0], ["not", 0], ["list", 0], ["prolly", 0], ["http", 2], ["anh", 0], ["cs", 0], ["luc", 0], ["edu", 0], ["python", 0], ["hands", 0], ["on", 0], ["3", 0], ["1", 0], ["handsonhtml", 0], ["functions", 0], ["html", 0], ["return", 0], ["len", 0], ["set", 0], ["str", 0], ["x", 0], ["len", 0], ["str", 0], ["x", 0], ["should", 0], ["work", 0], ["y", 0], ["int", 0], ["input", 0], ["1", 0], ["scott", 0], ["wait", 0], ["you", 0], ["don", 0], ["t", 0], ["even", 0], ["right", 0], ["you", 0], ["can", 0], ["do", 0], ["like", 0], ["list", 0], ["str", 0], ["y", 0], ["or", 0], ["something", 0], ["while", 0], ["check", 0], ["y", 0], ["false", 0], ["y", 0], ["1", 0], ["scott", 0], ["print", 0], ["y", 0], ["steven", 0], ["remember", 0], ["doesn", 0], ["t", 0], ["exist", 0], ["http", 0], ["codeforces", 0], ["com", 0], ["problemset", 0], ["problem", 0], ["271", 0], ["a", 0], ["you", 0], ["start", 0], ["this", 0], ["should", 0], ["be", 0], ["like", 0], ["a", 0], ["2", 0], ["liner", 0], ["with", 0], ["python", 0], ["sry", 0], ["i", 0], ["see", 0], ["it", 0], ["now", 0], ["def", 0], ["check", 0], ["x", 0], ["let", 0], ["s", 0], ["practice", 0], ["writing", 0], ["functions", 0], ["though", 0], ["and", 0], ["yeah", 0], ["i", 0], ["think", 0], ["list", 0], ["array", 0], ["so", 0], ["not", 0], ["list", 0], ["prolly", 0], ["http", 2], ["anh", 0], ["cs", 0], ["luc", 0], ["edu", 0], ["python", 0], ["hands", 0], ["on", 0], ["3", 0], ["1", 0], ["handsonhtml", 0], ["functions", 0], ["html", 0], ["return", 0], ["len", 0], ["set", 0], ["str", 0], ["x", 0], ["len", 0], ["str", 0], ["x", 0], ["should", 0], ["work", 0], ["y", 0], ["int", 0], ["input", 0], ["1", 0], ["scott", 0], ["wait", 0], ["you", 0], ["don", 0], ["t", 0], ["even", 0], ["right", 0], ["you", 0], ["can", 0], ["do", 0], ["like", 0], ["list", 0], ["str", 0], ["y", 0], ["or", 0], ["something", 0], ["while", 0], ["check", 0], ["y", 0], ["is", 0], ["false", 0], ["y", 0], ["1", 0], ["scott", 0], ["print", 0], ["y", 0], ["steven", 0], ["remember", 0], ["doesn", 0], ["t", 0], ["exist", 0], ["n", 0], ["input", 0], ["year", 0], ["int", 0], ["n", 0], ["year", 0], ["1", 0], ["n", 0], ["list", 0], ["str", 0], ["year", 0], ["while", 0], ["not", 0], ["n", 0], ["count", 0], ["n", 0], ["0", 0], ["n", 0], ["count", 0], ["n", 0], ["1", 0], ["n", 0], ["count", 0], ["n", 0], ["2", 0], ["n", 0], ["count", 0], ["n", 0], ["3", 0], ["1", 0], ["year", 0], ["1", 0], ["n", 0], ["list", 0], ["str", 0], ["year", 0], ["print", 0], ["year", 0], ["3", 0], ["y", 0], ["int", 0], ["input", 0], ["ans", 0], ["y", 0], ["1", 0], ["while", 0], ["true", 0], ["if", 0], ["len", 0], ["set", 0], ["list", 0], ["str", 0], ["ans", 0], ["4", 0], ["break", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["1", 0], ["while", 0], ["len", 0], ["set", 0], ["str", 0], ["n", 0], ["4", 0], ["n", 0], ["1", 0], ["print", 0], ["n", 0], ["def", 0], ["is", 0], ["distinct", 0], ["year", 0], ["years", 0], ["str", 0], ["year", 0], ["s", 0], ["set", 0], ["for", 0], ["c", 0], ["in", 0], ["years", 0], ["if", 0], ["c", 0], ["in", 0], ["s", 0], ["return", 0], ["false", 0], ["else", 0], ["s", 0], ["add", 0], ["c", 0], ["return", 0], ["true", 0], ["def", 0], ["upper", 0], ["distinct", 0], ["year", 0], ["year", 0], ["1", 0], ["while", 0], ["true", 0], ["if", 0], ["is", 0], ["distinct", 0], ["year", 0], ["return", 0], ["year", 0], ["else", 0], ["year", 0], ["1", 0], ["def", 0], ["main", 0], ["first", 0], ["line", 0], ["input", 0], ["first", 0], ["line", 0], ["first", 0], ["line", 0], ["split", 0], ["year", 0], ["int", 0], ["first", 0], ["line", 0], ["0", 0], ["print", 0], ["upper", 0], ["distinct", 0], ["year", 0], ["main", 0], ["y", 0], ["int", 0], ["input", 0], ["1", 0], ["while", 0], ["len", 0], ["set", 0], ["str", 0], ["y", 0], ["len", 0], ["str", 0], ["y", 0], ["y", 0], ["1", 0], ["print", 0], ["y", 0], ["import", 0], ["sys", 0], ["def", 0], ["year", 0], ["listyear", 0], ["year", 0], ["input", 0], ["split", 0], ["k", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["year", 0], ["0", 0], ["listyear", 0], ["append", 0], ["int", 0], ["year", 0], ["0", 0], ["i", 0], ["listyear", 0], ["reverse", 0], ["return", 0], ["listyear", 0], ["def", 0], ["nextyear", 0], ["listyear", 0], ["if", 0], ["listyear", 0], ["0", 0], ["9", 0], ["listyear", 0], ["0", 0], ["0", 0], ["if", 0], ["listyear", 0], ["1", 0], ["9", 0], ["listyear", 0], ["1", 0], ["0", 0], ["if", 0], ["listyear", 0], ["2", 0], ["9", 0], ["listyear", 0], ["2", 0], ["0", 0], ["if", 0], ["listyear", 0], ["3", 0], ["9", 0], ["listyear", 0], ["3", 0], ["0", 0], ["else", 0], ["listyear", 0], ["3", 0], ["1", 0], ["else", 0], ["listyear", 0], ["2", 0], ["1", 0], ["else", 0], ["listyear", 0], ["1", 0], ["1", 0], ["else", 0], ["listyear", 0], ["0", 0], ["1", 0], ["return", 0], ["listyear", 0], ["def", 0], ["rightyear", 0], ["listyear", 0], ["nextyear", 0], ["listyear", 0], ["while", 0], ["len", 0], ["set", 0], ["listyear", 0], ["4", 0], ["listyear", 0], ["nextyear", 0], ["listyear", 0], ["listyear", 0], ["reverse", 0], ["for", 0], ["i", 0], ["in", 0], ["listyear", 0], ["print", 0], ["i", 0], ["end", 0], ["rightyear", 0], ["year", 0], ["n", 0], ["int", 0], ["input", 0], ["while", 0], ["true", 0], ["n", 0], ["1", 0], ["c", 0], ["set", 0], ["str", 0], ["n", 0], ["if", 0], ["len", 0], ["c", 0], ["len", 0], ["str", 0], ["n", 0], ["print", 0], ["n", 0], ["break", 0], ["year", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["year", 0], ["1", 0], ["9013", 0], ["if", 0], ["i", 0], ["10", 0], ["i", 0], ["1000", 0], ["and", 0], ["i", 0], ["10", 0], ["i", 0], ["1000", 0], ["100", 0], ["and", 0], ["i", 0], ["10", 0], ["i", 0], ["100", 0], ["10", 0], ["and", 0], ["i", 0], ["1000", 0], ["i", 0], ["1000", 0], ["100", 0], ["and", 0], ["i", 0], ["1000", 0], ["i", 0], ["100", 0], ["10", 0], ["and", 0], ["i", 0], ["100", 0], ["10", 0], ["i", 0], ["1000", 0], ["100", 0], ["print", 0], ["i", 0], ["break", 0], ["n", 0], ["int", 0], ["input", 0], ["1", 0], ["while", 0], ["len", 0], ["set", 0], ["str", 0], ["n", 0], ["4", 0], ["n", 0], ["1", 0], ["print", 0], ["n", 0], ["def", 0], ["cnt", 0], ["n", 0], ["a", 0], ["0", 0], ["10", 0], ["c", 0], ["0", 0], ["b", 0], ["0", 0], ["while", 0], ["n", 0], ["0", 0], ["a", 0], ["n", 0], ["10", 0], ["1", 0], ["if", 0], ["a", 0], ["n", 0], ["10", 0], ["1", 0], ["c", 0], ["1", 0], ["n", 0], ["10", 0], ["b", 0], ["1", 0], ["if", 0], ["b", 0], ["c", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["n", 0], ["int", 0], ["input", 0], ["strip", 0], ["i", 0], ["1", 0], ["while", 0], ["not", 0], ["cnt", 0], ["n", 0], ["i", 0], ["i", 0], ["1", 0], ["print", 0], ["n", 0], ["i", 0], ["y", 0], ["int", 0], ["input", 0], ["def", 0], ["is", 0], ["b", 0], ["year", 0], ["x", 0], ["s", 0], ["set", 0], ["for", 0], ["c", 0], ["in", 0], ["str", 0], ["x", 0], ["s", 0], ["add", 0], ["c", 0], ["if", 0], ["len", 0], ["s", 0], ["4", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["y", 0], ["1", 0], ["2", 0], ["31", 0], ["1", 0], ["if", 0], ["is", 0], ["b", 0], ["year", 0], ["x", 0], ["print", 0], ["x", 0], ["break", 0], ["year", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["year", 0], ["1", 0], ["10000", 0], ["y", 0], ["i", 0], ["a", 0], ["y", 0], ["1000", 0], ["y", 0], ["y", 0], ["a", 0], ["1000", 0], ["b", 0], ["y", 0], ["100", 0], ["y", 0], ["y", 0], ["b", 0], ["100", 0], ["c", 0], ["y", 0], ["10", 0], ["y", 0], ["y", 0], ["c", 0], ["10", 0], ["lst", 0], ["a", 0], ["b", 0], ["c", 0], ["y", 0], ["lst", 0], ["sort", 0], ["if", 0], ["lst", 0], ["0", 0], ["lst", 0], ["1", 0], ["and", 0], ["lst", 0], ["1", 0], ["lst", 0], ["2", 0], ["and", 0], ["lst", 0], ["2", 0], ["lst", 0], ["3", 0], ["print", 0], ["i", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["1", 0], ["10000", 0], ["if", 0], ["len", 0], ["set", 0], ["list", 0], ["str", 0], ["i", 0], ["4", 0], ["print", 0], ["i", 0], ["break", 0], ["def", 0], ["isunique", 0], ["num", 0], ["string", 0], ["str", 0], ["num", 0], ["d", 75], ["0", 7045], ["0", 10291], ["1", 11767], ["0", 11959], ["2", 11552], ["0", 11021], ["3", 10327], ["0", 2638], ["4", 2], ["0", 0], ["5", 0], ["0", 0], ["6", 0], ["0", 0], ["7", 0], ["0", 0], ["8", 0], ["0", 0], ["9", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["string", 0], ["if", 0], ["d", 0], ["i", 0], ["0", 0], ["d", 0], ["i", 0], ["1", 0], ["elif", 0], ["d", 0], ["i", 0], ["1", 0], ["return", 0], ["0", 0], ["return", 0], ["1", 0], ["string", 0], ["input", 0], ["num", 0], ["int", 0], ["string", 0], ["while", 0], ["1", 0], ["num", 0], ["1", 0], ["if", 0], ["isunique", 0], ["num", 0], ["break", 0], ["print", 0], ["num", 0], ["years", 0], ["1023", 0], ["1024", 0], ["1025", 0], ["1026", 0], ["1027", 0], ["1028", 0], ["1029", 0], ["1032", 0], ["1034", 0], ["1035", 0], ["1036", 0], ["1037", 0], ["1038", 0], ["1039", 0], ["1042", 0], ["1043", 0], ["1045", 0], ["1046", 0], ["1047", 0], ["1048", 0], ["1049", 0], ["1052", 0], ["1053", 0], ["1054", 0], ["1056", 0], ["1057", 0], ["1058", 0], ["1059", 0], ["1062", 0], ["1063", 0], ["1064", 0], ["1065", 0], ["1067", 0], ["1068", 0], ["1069", 0], ["1072", 0], ["1073", 0], ["1074", 0], ["1075", 0], ["1076", 0], ["1078", 0], ["1079", 0], ["1082", 0], ["1083", 0], ["1084", 0], ["1085", 0], ["1086", 0], ["1087", 0], ["1089", 0], ["1092", 0], ["1093", 0], ["1094", 0], ["1095", 0], ["1096", 0], ["1097", 0], ["1098", 0], ["1203", 0], ["1204", 0], ["1205", 0], ["1206", 0], ["1207", 0], ["1208", 0], ["1209", 0], ["1230", 0], ["1234", 0], ["1235", 0], ["1236", 0], ["1237", 0], ["1238", 0], ["1239", 0], ["1240", 0], ["1243", 0], ["1245", 0], ["1246", 0], ["1247", 0], ["1248", 0], ["1249", 0], ["1250", 0], ["1253", 0], ["1254", 0], ["1256", 0], ["1257", 0], ["1258", 0], ["1259", 0], ["1260", 0], ["1263", 0], ["1264", 0], ["1265", 0], ["1267", 0], ["1268", 0], ["1269", 0], ["1270", 0], ["1273", 0], ["1274", 0], ["1275", 0], ["1276", 0], ["1278", 0], ["1279", 0], ["1280", 0], ["1283", 0], ["1284", 0], ["1285", 0], ["1286", 0], ["1287", 0], ["1289", 0], ["1290", 0], ["1293", 0], ["1294", 0], ["1295", 0], ["1296", 0], ["1297", 0], ["1298", 0], ["1302", 0], ["1304", 0], ["1305", 0], ["1306", 0], ["1307", 0], ["1308", 0], ["1309", 0], ["1320", 0], ["1324", 0], ["1325", 0], ["1326", 0], ["1327", 0], ["1328", 0], ["1329", 0], ["1340", 0], ["1342", 0], ["1345", 0], ["1346", 0], ["1347", 0], ["1348", 0], ["1349", 0], ["1350", 0], ["1352", 0], ["1354", 0], ["1356", 0], ["1357", 0], ["1358", 0], ["1359", 0], ["1360", 0], ["1362", 0], ["1364", 0], ["1365", 0], ["1367", 0], ["1368", 0], ["1369", 0], ["1370", 0], ["1372", 0], ["1374", 0], ["1375", 0], ["1376", 0], ["1378", 0], ["1379", 0], ["1380", 0], ["1382", 0], ["1384", 0], ["1385", 0], ["1386", 0], ["1387", 0], ["1389", 0], ["1390", 0], ["1392", 0], ["1394", 0], ["1395", 0], ["1396", 0], ["1397", 0], ["1398", 0], ["1402", 0], ["1403", 0], ["1405", 0], ["1406", 0], ["1407", 0], ["1408", 0], ["1409", 0], ["1420", 0], ["1423", 0], ["1425", 0], ["1426", 0], ["1427", 0], ["1428", 0], ["1429", 0], ["1430", 0], ["1432", 0], ["1435", 0], ["1436", 0], ["1437", 0], ["1438", 0], ["1439", 0], ["1450", 0], ["1452", 0], ["1453", 0], ["1456", 0], ["1457", 0], ["1458", 0], ["1459", 0], ["1460", 0], ["1462", 0], ["1463", 0], ["1465", 0], ["1467", 0], ["1468", 0], ["1469", 0], ["1470", 0], ["1472", 0], ["1473", 0], ["1475", 0], ["1476", 0], ["1478", 0], ["1479", 0], ["1480", 0], ["1482", 0], ["1483", 0], ["1485", 0], ["1486", 0], ["1487", 0], ["1489", 0], ["1490", 0], ["1492", 0], ["1493", 0], ["1495", 0], ["1496", 0], ["1497", 0], ["1498", 0], ["1502", 0], ["1503", 0], ["1504", 0], ["1506", 0], ["1507", 0], ["1508", 0], ["1509", 0], ["1520", 0], ["1523", 0], ["1524", 0], ["1526", 0], ["1527", 0], ["1528", 0], ["1529", 0], ["1530", 0], ["1532", 0], ["1534", 0], ["1536", 0], ["1537", 0], ["1538", 0], ["1539", 0], ["1540", 0], ["1542", 0], ["1543", 0], ["1546", 0], ["1547", 0], ["1548", 0], ["1549", 0], ["1560", 0], ["1562", 0], ["1563", 0], ["1564", 0], ["1567", 0], ["1568", 0], ["1569", 0], ["1570", 0], ["1572", 0], ["1573", 0], ["1574", 0], ["1576", 0], ["1578", 0], ["1579", 0], ["1580", 0], ["1582", 0], ["1583", 0], ["1584", 0], ["1586", 0], ["1587", 0], ["1589", 0], ["1590", 0], ["1592", 0], ["1593", 0], ["1594", 0], ["1596", 0], ["1597", 0], ["1598", 0], ["1602", 0], ["1603", 0], ["1604", 0], ["1605", 0], ["1607", 0], ["1608", 0], ["1609", 0], ["1620", 0], ["1623", 0], ["1624", 0], ["1625", 0], ["1627", 0], ["1628", 0], ["1629", 0], ["1630", 0], ["1632", 0], ["1634", 0], ["1635", 0], ["1637", 0], ["1638", 0], ["1639", 0], ["1640", 0], ["1642", 0], ["1643", 0], ["1645", 0], ["1647", 0], ["1648", 0], ["1649", 0], ["1650", 0], ["1652", 0], ["1653", 0], ["1654", 0], ["1657", 0], ["1658", 0], ["1659", 0], ["1670", 0], ["1672", 0], ["1673", 0], ["1674", 0], ["1675", 0], ["1678", 0], ["1679", 0], ["1680", 0], ["1682", 0], ["1683", 0], ["1684", 0], ["1685", 0], ["1687", 0], ["1689", 0], ["1690", 0], ["1692", 0], ["1693", 0], ["1694", 0], ["1695", 0], ["1697", 0], ["1698", 0], ["1702", 0], ["1703", 0], ["1704", 0], ["1705", 0], ["1706", 0], ["1708", 0], ["1709", 0], ["1720", 0], ["1723", 0], ["1724", 0], ["1725", 0], ["1726", 0], ["1728", 0], ["1729", 0], ["1730", 0], ["1732", 0], ["1734", 0], ["1735", 0], ["1736", 0], ["1738", 0], ["1739", 0], ["1740", 0], ["1742", 0], ["1743", 0], ["1745", 0], ["1746", 0], ["1748", 0], ["1749", 0], ["1750", 0], ["1752", 0], ["1753", 0], ["1754", 0], ["1756", 0], ["1758", 0], ["1759", 0], ["1760", 0], ["1762", 0], ["1763", 0], ["1764", 0], ["1765", 0], ["1768", 0], ["1769", 0], ["1780", 0], ["1782", 0], ["1783", 0], ["1784", 0], ["1785", 0], ["1786", 0], ["1789", 0], ["1790", 0], ["1792", 0], ["1793", 0], ["1794", 0], ["1795", 0], ["1796", 0], ["1798", 0], ["1802", 0], ["1803", 0], ["1804", 0], ["1805", 0], ["1806", 0], ["1807", 0], ["1809", 0], ["1820", 0], ["1823", 0], ["1824", 0], ["1825", 0], ["1826", 0], ["1827", 0], ["1829", 0], ["1830", 0], ["1832", 0], ["1834", 0], ["1835", 0], ["1836", 0], ["1837", 0], ["1839", 0], ["1840", 0], ["1842", 0], ["1843", 0], ["1845", 0], ["1846", 0], ["1847", 0], ["1849", 0], ["1850", 0], ["1852", 0], ["1853", 0], ["1854", 0], ["1856", 0], ["1857", 0], ["1859", 0], ["1860", 0], ["1862", 0], ["1863", 0], ["1864", 0], ["1865", 0], ["1867", 0], ["1869", 0], ["1870", 0], ["1872", 0], ["1873", 0], ["1874", 0], ["1875", 0], ["1876", 0], ["1879", 0], ["1890", 0], ["1892", 0], ["1893", 0], ["1894", 0], ["1895", 0], ["1896", 0], ["1897", 0], ["1902", 0], ["1903", 0], ["1904", 0], ["1905", 0], ["1906", 0], ["1907", 0], ["1908", 0], ["1920", 0], ["1923", 0], ["1924", 0], ["1925", 0], ["1926", 0], ["1927", 0], ["1928", 0], ["1930", 0], ["1932", 0], ["1934", 0], ["1935", 0], ["1936", 0], ["1937", 0], ["1938", 0], ["1940", 0], ["1942", 0], ["1943", 0], ["1945", 0], ["1946", 0], ["1947", 0], ["1948", 0], ["1950", 0], ["1952", 0], ["1953", 0], ["1954", 0], ["1956", 0], ["1957", 0], ["1958", 0], ["1960", 0], ["1962", 0], ["1963", 0], ["1964", 0], ["1965", 0], ["1967", 0], ["1968", 0], ["1970", 0], ["1972", 0], ["1973", 0], ["1974", 0], ["1975", 0], ["1976", 0], ["1978", 0], ["1980", 0], ["1982", 0], ["1983", 0], ["1984", 0], ["1985", 0], ["1986", 0], ["1987", 0], ["2013", 0], ["2014", 0], ["2015", 0], ["2016", 0], ["2017", 0], ["2018", 0], ["2019", 0], ["2031", 0], ["2034", 0], ["2035", 0], ["2036", 0], ["2037", 0], ["2038", 0], ["2039", 0], ["2041", 0], ["2043", 0], ["2045", 0], ["2046", 0], ["2047", 0], ["2048", 0], ["2049", 0], ["2051", 0], ["2053", 0], ["2054", 0], ["2056", 0], ["2057", 0], ["2058", 0], ["2059", 0], ["2061", 0], ["2063", 0], ["2064", 0], ["2065", 0], ["2067", 0], ["2068", 0], ["2069", 0], ["2071", 0], ["2073", 0], ["2074", 0], ["2075", 0], ["2076", 0], ["2078", 0], ["2079", 0], ["2081", 0], ["2083", 0], ["2084", 0], ["2085", 0], ["2086", 0], ["2087", 0], ["2089", 0], ["2091", 0], ["2093", 0], ["2094", 0], ["2095", 0], ["2096", 0], ["2097", 0], ["2098", 0], ["2103", 0], ["2104", 0], ["2105", 0], ["2106", 0], ["2107", 0], ["2108", 0], ["2109", 0], ["2130", 0], ["2134", 0], ["2135", 0], ["2136", 0], ["2137", 0], ["2138", 0], ["2139", 0], ["2140", 0], ["2143", 0], ["2145", 0], ["2146", 0], ["2147", 0], ["2148", 0], ["2149", 0], ["2150", 0], ["2153", 0], ["2154", 0], ["2156", 0], ["2157", 0], ["2158", 0], ["2159", 0], ["2160", 0], ["2163", 0], ["2164", 0], ["2165", 0], ["2167", 0], ["2168", 0], ["2169", 0], ["2170", 0], ["2173", 0], ["2174", 0], ["2175", 0], ["2176", 0], ["2178", 0], ["2179", 0], ["2180", 0], ["2183", 0], ["2184", 0], ["2185", 0], ["2186", 0], ["2187", 0], ["2189", 0], ["2190", 0], ["2193", 0], ["2194", 0], ["2195", 0], ["2196", 0], ["2197", 0], ["2198", 0], ["2301", 0], ["2304", 0], ["2305", 0], ["2306", 0], ["2307", 0], ["2308", 0], ["2309", 0], ["2310", 0], ["2314", 0], ["2315", 0], ["2316", 0], ["2317", 0], ["2318", 0], ["2319", 0], ["2340", 0], ["2341", 0], ["2345", 0], ["2346", 0], ["2347", 0], ["2348", 0], ["2349", 0], ["2350", 0], ["2351", 0], ["2354", 0], ["2356", 0], ["2357", 0], ["2358", 0], ["2359", 0], ["2360", 0], ["2361", 0], ["2364", 0], ["2365", 0], ["2367", 0], ["2368", 0], ["2369", 0], ["2370", 0], ["2371", 0], ["2374", 0], ["2375", 0], ["2376", 0], ["2378", 0], ["2379", 0], ["2380", 0], ["2381", 0], ["2384", 0], ["2385", 0], ["2386", 0], ["2387", 0], ["2389", 0], ["2390", 0], ["2391", 0], ["2394", 0], ["2395", 0], ["2396", 0], ["2397", 0], ["2398", 0], ["2401", 0], ["2403", 0], ["2405", 0], ["2406", 0], ["2407", 0], ["2408", 0], ["2409", 0], ["2410", 0], ["2413", 0], ["2415", 0], ["2416", 0], ["2417", 0], ["2418", 0], ["2419", 0], ["2430", 0], ["2431", 0], ["2435", 0], ["2436", 0], ["2437", 0], ["2438", 0], ["2439", 0], ["2450", 0], ["2451", 0], ["2453", 0], ["2456", 0], ["2457", 0], ["2458", 0], ["2459", 0], ["2460", 0], ["2461", 0], ["2463", 0], ["2465", 0], ["2467", 0], ["2468", 0], ["2469", 0], ["2470", 0], ["2471", 0], ["2473", 0], ["2475", 0], ["2476", 0], ["2478", 0], ["2479", 0], ["2480", 0], ["2481", 0], ["2483", 0], ["2485", 0], ["2486", 0], ["2487", 0], ["2489", 0], ["2490", 0], ["2491", 0], ["2493", 0], ["2495", 0], ["2496", 0], ["2497", 0], ["2498", 0], ["2501", 4], ["2503", 0], ["2504", 0], ["2506", 0], ["2507", 0], ["2508", 0], ["2509", 0], ["2510", 0], ["2513", 0], ["2514", 0], ["2516", 0], ["2517", 0], ["2518", 0], ["2519", 4], ["2530", 4], ["2531", 4], ["2534", 0], ["2536", 0], ["2537", 0], ["2538", 0], ["2539", 0], ["2540", 0], ["2541", 0], ["2543", 0], ["2546", 0], ["2547", 0], ["2548", 0], ["2549", 0], ["2560", 0], ["2561", 0], ["2563", 0], ["2564", 0], ["2567", 0], ["2568", 0], ["2569", 0], ["2570", 0], ["2571", 0], ["2573", 0], ["2574", 0], ["2576", 0], ["2578", 0], ["2579", 0], ["2580", 0], ["2581", 0], ["2583", 0], ["2584", 0], ["2586", 0], ["2587", 0], ["2589", 0], ["2590", 0], ["2591", 0], ["2593", 0], ["2594", 0], ["2596", 0], ["2597", 0], ["2598", 0], ["2601", 0], ["2603", 0], ["2604", 0], ["2605", 0], ["2607", 0], ["2608", 0], ["2609", 0], ["2610", 0], ["2613", 0], ["2614", 0], ["2615", 0], ["2617", 0], ["2618", 0], ["2619", 0], ["2630", 0], ["2631", 0], ["2634", 0], ["2635", 0], ["2637", 0], ["2638", 0], ["2639", 0], ["2640", 0], ["2641", 0], ["2643", 0], ["2645", 0], ["2647", 0], ["2648", 0], ["2649", 0], ["2650", 0], ["2651", 0], ["2653", 0], ["2654", 0], ["2657", 0], ["2658", 0], ["2659", 0], ["2670", 0], ["2671", 0], ["2673", 0], ["2674", 0], ["2675", 0], ["2678", 0], ["2679", 0], ["2680", 0], ["2681", 0], ["2683", 0], ["2684", 0], ["2685", 0], ["2687", 0], ["2689", 0], ["2690", 0], ["2691", 0], ["2693", 0], ["2694", 0], ["2695", 0], ["2697", 0], ["2698", 0], ["2701", 0], ["2703", 0], ["2704", 0], ["2705", 0], ["2706", 0], ["2708", 0], ["2709", 0], ["2710", 0], ["2713", 0], ["2714", 0], ["2715", 0], ["2716", 0], ["2718", 0], ["2719", 0], ["2730", 0], ["2731", 0], ["2734", 0], ["2735", 0], ["2736", 0], ["2738", 0], ["2739", 0], ["2740", 0], ["2741", 0], ["2743", 0], ["2745", 0], ["2746", 0], ["2748", 0], ["2749", 0], ["2750", 0], ["2751", 0], ["2753", 0], ["2754", 0], ["2756", 0], ["2758", 0], ["2759", 0], ["2760", 0], ["2761", 0], ["2763", 0], ["2764", 0], ["2765", 0], ["2768", 0], ["2769", 0], ["2780", 0], ["2781", 0], ["2783", 0], ["2784", 0], ["2785", 0], ["2786", 0], ["2789", 0], ["2790", 0], ["2791", 0], ["2793", 0], ["2794", 0], ["2795", 0], ["2796", 0], ["2798", 0], ["2801", 0], ["2803", 0], ["2804", 0], ["2805", 0], ["2806", 0], ["2807", 0], ["2809", 0], ["2810", 0], ["2813", 0], ["2814", 0], ["2815", 0], ["2816", 0], ["2817", 0], ["2819", 0], ["2830", 0], ["2831", 0], ["2834", 0], ["2835", 0], ["2836", 0], ["2837", 0], ["2839", 0], ["2840", 0], ["2841", 0], ["2843", 0], ["2845", 0], ["2846", 0], ["2847", 0], ["2849", 0], ["2850", 0], ["2851", 0], ["2853", 0], ["2854", 0], ["2856", 0], ["2857", 0], ["2859", 0], ["2860", 0], ["2861", 0], ["2863", 0], ["2864", 0], ["2865", 0], ["2867", 0], ["2869", 0], ["2870", 0], ["2871", 0], ["2873", 0], ["2874", 0], ["2875", 0], ["2876", 0], ["2879", 0], ["2890", 0], ["2891", 0], ["2893", 0], ["2894", 0], ["2895", 0], ["2896", 0], ["2897", 0], ["2901", 0], ["2903", 0], ["2904", 0], ["2905", 0], ["2906", 0], ["2907", 0], ["2908", 0], ["2910", 0], ["2913", 0], ["2914", 0], ["2915", 0], ["2916", 0], ["2917", 0], ["2918", 0], ["2930", 0], ["2931", 0], ["2934", 0], ["2935", 0], ["2936", 0], ["2937", 0], ["2938", 0], ["2940", 0], ["2941", 0], ["2943", 0], ["2945", 0], ["2946", 0], ["2947", 0], ["2948", 0], ["2950", 0], ["2951", 0], ["2953", 0], ["2954", 0], ["2956", 0], ["2957", 0], ["2958", 0], ["2960", 0], ["2961", 0], ["2963", 0], ["2964", 0], ["2965", 0], ["2967", 0], ["2968", 0], ["2970", 0], ["2971", 0], ["2973", 0], ["2974", 0], ["2975", 0], ["2976", 0], ["2978", 0], ["2980", 0], ["2981", 0], ["2983", 0], ["2984", 0], ["2985", 0], ["2986", 0], ["2987", 0], ["3012", 0], ["3014", 0], ["3015", 0], ["3016", 0], ["3017", 0], ["3018", 0], ["3019", 0], ["3021", 0], ["3024", 0], ["3025", 0], ["3026", 0], ["3027", 0], ["3028", 0], ["3029", 0], ["3041", 0], ["3042", 0], ["3045", 0], ["3046", 0], ["3047", 0], ["3048", 0], ["3049", 0], ["3051", 0], ["3052", 0], ["3054", 0], ["3056", 0], ["3057", 0], ["3058", 0], ["3059", 0], ["3061", 0], ["3062", 0], ["3064", 0], ["3065", 0], ["3067", 0], ["3068", 0], ["3069", 0], ["3071", 0], ["3072", 0], ["3074", 0], ["3075", 0], ["3076", 0], ["3078", 0], ["3079", 0], ["3081", 0], ["3082", 0], ["3084", 0], ["3085", 0], ["3086", 0], ["3087", 0], ["3089", 0], ["3091", 0], ["3092", 0], ["3094", 0], ["3095", 0], ["3096", 0], ["3097", 0], ["3098", 0], ["3102", 0], ["3104", 0], ["3105", 0], ["3106", 0], ["3107", 0], ["3108", 0], ["3109", 0], ["3120", 0], ["3124", 0], ["3125", 0], ["3126", 0], ["3127", 0], ["3128", 0], ["3129", 0], ["3140", 0], ["3142", 0], ["3145", 0], ["3146", 0], ["3147", 0], ["3148", 0], ["3149", 0], ["3150", 0], ["3152", 0], ["3154", 0], ["3156", 0], ["3157", 0], ["3158", 0], ["3159", 0], ["3160", 0], ["3162", 0], ["3164", 0], ["3165", 0], ["3167", 0], ["3168", 0], ["3169", 0], ["3170", 0], ["3172", 0], ["3174", 0], ["3175", 0], ["3176", 0], ["3178", 0], ["3179", 0], ["3180", 0], ["3182", 0], ["3184", 0], ["3185", 0], ["3186", 0], ["3187", 0], ["3189", 0], ["3190", 0], ["3192", 0], ["3194", 0], ["3195", 0], ["3196", 0], ["3197", 0], ["3198", 0], ["3201", 0], ["3204", 2], ["3205", 0], ["3206", 0], ["3207", 0], ["3208", 0], ["3209", 0], ["3210", 0], ["3214", 0], ["3215", 0], ["3216", 0], ["3217", 0], ["3218", 0], ["3219", 0], ["3240", 0], ["3241", 0], ["3245", 0], ["3246", 0], ["3247", 0], ["3248", 0], ["3249", 0], ["3250", 0], ["3251", 0], ["3254", 0], ["3256", 0], ["3257", 0], ["3258", 0], ["3259", 0], ["3260", 0], ["3261", 0], ["3264", 0], ["3265", 0], ["3267", 0], ["3268", 0], ["3269", 0], ["3270", 0], ["3271", 0], ["3274", 0], ["3275", 0], ["3276", 0], ["3278", 0], ["3279", 0], ["3280", 0], ["3281", 0], ["3284", 0], ["3285", 0], ["3286", 0], ["3287", 0], ["3289", 0], ["3290", 0], ["3291", 0], ["3294", 0], ["3295", 0], ["3296", 0], ["3297", 0], ["3298", 0], ["3401", 0], ["3402", 0], ["3405", 0], ["3406", 0], ["3407", 0], ["3408", 0], ["3409", 0], ["3410", 0], ["3412", 0], ["3415", 0], ["3416", 0], ["3417", 0], ["3418", 0], ["3419", 0], ["3420", 0], ["3421", 0], ["3425", 0], ["3426", 0], ["3427", 0], ["3428", 0], ["3429", 0], ["3450", 0], ["3451", 0], ["3452", 0], ["3456", 0], ["3457", 0], ["3458", 0], ["3459", 0], ["3460", 0], ["3461", 0], ["3462", 0], ["3465", 0], ["3467", 0], ["3468", 0], ["3469", 0], ["3470", 0], ["3471", 0], ["3472", 0], ["3475", 0], ["3476", 0], ["3478", 0], ["3479", 0], ["3480", 0], ["3481", 0], ["3482", 0], ["3485", 0], ["3486", 0], ["3487", 0], ["3489", 0], ["3490", 0], ["3491", 0], ["3492", 0], ["3495", 0], ["3496", 0], ["3497", 0], ["3498", 0], ["3501", 0], ["3502", 0], ["3504", 0], ["3506", 0], ["3507", 0], ["3508", 0], ["3509", 0], ["3510", 0], ["3512", 0], ["3514", 0], ["3516", 0], ["3517", 0], ["3518", 0], ["3519", 0], ["3520", 0], ["3521", 0], ["3524", 0], ["3526", 0], ["3527", 0], ["3528", 0], ["3529", 0], ["3540", 0], ["3541", 0], ["3542", 0], ["3546", 0], ["3547", 0], ["3548", 0], ["3549", 0], ["3560", 0], ["3561", 0], ["3562", 0], ["3564", 0], ["3567", 0], ["3568", 0], ["3569", 0], ["3570", 0], ["3571", 0], ["3572", 0], ["3574", 0], ["3576", 0], ["3578", 0], ["3579", 0], ["3580", 0], ["3581", 0], ["3582", 0], ["3584", 0], ["3586", 0], ["3587", 0], ["3589", 0], ["3590", 0], ["3591", 0], ["3592", 0], ["3594", 0], ["3596", 0], ["3597", 0], ["3598", 0], ["3601", 0], ["3602", 0], ["3604", 0], ["3605", 0], ["3607", 0], ["3608", 0], ["3609", 0], ["3610", 0], ["3612", 0], ["3614", 0], ["3615", 0], ["3617", 0], ["3618", 0], ["3619", 0], ["3620", 0], ["3621", 0], ["3624", 0], ["3625", 0], ["3627", 0], ["3628", 0], ["3629", 0], ["3640", 0], ["3641", 0], ["3642", 0], ["3645", 0], ["3647", 0], ["3648", 0], ["3649", 0], ["3650", 0], ["3651", 0], ["3652", 0], ["3654", 0], ["3657", 0], ["3658", 0], ["3659", 0], ["3670", 0], ["3671", 0], ["3672", 0], ["3674", 0], ["3675", 0], ["3678", 0], ["3679", 0], ["3680", 0], ["3681", 0], ["3682", 0], ["3684", 0], ["3685", 0], ["3687", 0], ["3689", 0], ["3690", 0], ["3691", 0], ["3692", 0], ["3694", 0], ["3695", 0], ["3697", 0], ["3698", 0], ["3701", 0], ["3702", 0], ["3704", 0], ["3705", 0], ["3706", 0], ["3708", 0], ["3709", 0], ["3710", 0], ["3712", 0], ["3714", 0], ["3715", 0], ["3716", 0], ["3718", 0], ["3719", 0], ["3720", 0], ["3721", 0], ["3724", 0], ["3725", 0], ["3726", 0], ["3728", 0], ["3729", 0], ["3740", 0], ["3741", 0], ["3742", 0], ["3745", 0], ["3746", 0], ["3748", 0], ["3749", 0], ["3750", 0], ["3751", 0], ["3752", 0], ["3754", 0], ["3756", 0], ["3758", 0], ["3759", 0], ["3760", 0], ["3761", 0], ["3762", 0], ["3764", 0], ["3765", 0], ["3768", 0], ["3769", 0], ["3780", 0], ["3781", 0], ["3782", 0], ["3784", 0], ["3785", 0], ["3786", 0], ["3789", 0], ["3790", 0], ["3791", 0], ["3792", 0], ["3794", 0], ["3795", 0], ["3796", 0], ["3798", 0], ["3801", 0], ["3802", 0], ["3804", 0], ["3805", 0], ["3806", 0], ["3807", 0], ["3809", 0], ["3810", 0], ["3812", 0], ["3814", 0], ["3815", 0], ["3816", 0], ["3817", 0], ["3819", 0], ["3820", 0], ["3821", 0], ["3824", 0], ["3825", 0], ["3826", 0], ["3827", 0], ["3829", 0], ["3840", 0], ["3841", 0], ["3842", 0], ["3845", 0], ["3846", 0], ["3847", 0], ["3849", 0], ["3850", 0], ["3851", 0], ["3852", 0], ["3854", 0], ["3856", 0], ["3857", 0], ["3859", 0], ["3860", 0], ["3861", 0], ["3862", 0], ["3864", 0], ["3865", 0], ["3867", 0], ["3869", 0], ["3870", 0], ["3871", 0], ["3872", 0], ["3874", 0], ["3875", 0], ["3876", 0], ["3879", 0], ["3890", 0], ["3891", 0], ["3892", 0], ["3894", 0], ["3895", 0], ["3896", 0], ["3897", 0], ["3901", 0], ["3902", 0], ["3904", 0], ["3905", 0], ["3906", 0], ["3907", 0], ["3908", 0], ["3910", 0], ["3912", 0], ["3914", 0], ["3915", 0], ["3916", 0], ["3917", 0], ["3918", 0], ["3920", 0], ["3921", 0], ["3924", 0], ["3925", 0], ["3926", 0], ["3927", 0], ["3928", 0], ["3940", 0], ["3941", 0], ["3942", 0], ["3945", 0], ["3946", 0], ["3947", 0], ["3948", 0], ["3950", 0], ["3951", 0], ["3952", 0], ["3954", 0], ["3956", 0], ["3957", 0], ["3958", 0], ["3960", 0], ["3961", 0], ["3962", 0], ["3964", 0], ["3965", 0], ["3967", 0], ["3968", 0], ["3970", 0], ["3971", 0], ["3972", 0], ["3974", 0], ["3975", 0], ["3976", 0], ["3978", 0], ["3980", 0], ["3981", 0], ["3982", 0], ["3984", 0], ["3985", 0], ["3986", 0], ["3987", 0], ["4012", 0], ["4013", 0], ["4015", 0], ["4016", 0], ["4017", 0], ["4018", 0], ["4019", 0], ["4021", 0], ["4023", 0], ["4025", 0], ["4026", 0], ["4027", 0], ["4028", 0], ["4029", 0], ["4031", 0], ["4032", 0], ["4035", 0], ["4036", 0], ["4037", 0], ["4038", 0], ["4039", 0], ["4051", 0], ["4052", 0], ["4053", 0], ["4056", 0], ["4057", 0], ["4058", 0], ["4059", 0], ["4061", 0], ["4062", 0], ["4063", 0], ["4065", 0], ["4067", 0], ["4068", 0], ["4069", 0], ["4071", 0], ["4072", 0], ["4073", 0], ["4075", 0], ["4076", 0], ["4078", 0], ["4079", 0], ["4081", 0], ["4082", 0], ["4083", 0], ["4085", 0], ["4086", 0], ["4087", 0], ["4089", 0], ["4091", 0], ["4092", 0], ["4093", 0], ["4095", 0], ["4096", 0], ["4097", 0], ["4098", 0], ["4102", 0], ["4103", 0], ["4105", 0], ["4106", 0], ["4107", 0], ["4108", 0], ["4109", 0], ["4120", 0], ["4123", 0], ["4125", 0], ["4126", 0], ["4127", 0], ["4128", 0], ["4129", 0], ["4130", 0], ["4132", 0], ["4135", 0], ["4136", 0], ["4137", 0], ["4138", 0], ["4139", 0], ["4150", 0], ["4152", 0], ["4153", 0], ["4156", 0], ["4157", 0], ["4158", 0], ["4159", 0], ["4160", 0], ["4162", 0], ["4163", 0], ["4165", 0], ["4167", 0], ["4168", 0], ["4169", 0], ["4170", 0], ["4172", 0], ["4173", 0], ["4175", 0], ["4176", 0], ["4178", 0], ["4179", 0], ["4180", 0], ["4182", 0], ["4183", 0], ["4185", 0], ["4186", 0], ["4187", 0], ["4189", 0], ["4190", 0], ["4192", 0], ["4193", 0], ["4195", 0], ["4196", 0], ["4197", 0], ["4198", 0], ["4201", 0], ["4203", 0], ["4205", 0], ["4206", 0], ["4207", 0], ["4208", 0], ["4209", 0], ["4210", 0], ["4213", 0], ["4215", 0], ["4216", 0], ["4217", 0], ["4218", 0], ["4219", 0], ["4230", 0], ["4231", 0], ["4235", 0], ["4236", 0], ["4237", 0], ["4238", 0], ["4239", 0], ["4250", 0], ["4251", 0], ["4253", 0], ["4256", 0], ["4257", 0], ["4258", 0], ["4259", 0], ["4260", 0], ["4261", 0], ["4263", 0], ["4265", 0], ["4267", 0], ["4268", 0], ["4269", 0], ["4270", 0], ["4271", 0], ["4273", 0], ["4275", 0], ["4276", 0], ["4278", 0], ["4279", 0], ["4280", 0], ["4281", 0], ["4283", 0], ["4285", 0], ["4286", 0], ["4287", 0], ["4289", 0], ["4290", 0], ["4291", 0], ["4293", 0], ["4295", 0], ["4296", 0], ["4297", 0], ["4298", 0], ["4301", 0], ["4302", 0], ["4305", 0], ["4306", 0], ["4307", 0], ["4308", 0], ["4309", 0], ["4310", 0], ["4312", 0], ["4315", 0], ["4316", 0], ["4317", 0], ["4318", 0], ["4319", 0], ["4320", 0], ["4321", 0], ["4325", 0], ["4326", 0], ["4327", 0], ["4328", 0], ["4329", 0], ["4350", 0], ["4351", 0], ["4352", 0], ["4356", 0], ["4357", 0], ["4358", 0], ["4359", 0], ["4360", 0], ["4361", 0], ["4362", 0], ["4365", 0], ["4367", 0], ["4368", 0], ["4369", 0], ["4370", 0], ["4371", 0], ["4372", 0], ["4375", 0], ["4376", 0], ["4378", 0], ["4379", 0], ["4380", 0], ["4381", 0], ["4382", 0], ["4385", 0], ["4386", 0], ["4387", 0], ["4389", 0], ["4390", 0], ["4391", 0], ["4392", 0], ["4395", 0], ["4396", 0], ["4397", 0], ["4398", 0], ["4501", 0], ["4502", 0], ["4503", 0], ["4506", 0], ["4507", 0], ["4508", 0], ["4509", 0], ["4510", 0], ["4512", 0], ["4513", 0], ["4516", 0], ["4517", 0], ["4518", 0], ["4519", 0], ["4520", 0], ["4521", 0], ["4523", 0], ["4526", 0], ["4527", 0], ["4528", 0], ["4529", 0], ["4530", 0], ["4531", 0], ["4532", 0], ["4536", 0], ["4537", 0], ["4538", 0], ["4539", 0], ["4560", 0], ["4561", 0], ["4562", 0], ["4563", 0], ["4567", 0], ["4568", 0], ["4569", 0], ["4570", 0], ["4571", 0], ["4572", 0], ["4573", 0], ["4576", 0], ["4578", 0], ["4579", 0], ["4580", 0], ["4581", 0], ["4582", 0], ["4583", 0], ["4586", 0], ["4587", 0], ["4589", 0], ["4590", 0], ["4591", 0], ["4592", 0], ["4593", 0], ["4596", 0], ["4597", 0], ["4598", 0], ["4601", 0], ["4602", 0], ["4603", 0], ["4605", 0], ["4607", 0], ["4608", 0], ["4609", 0], ["4610", 0], ["4612", 0], ["4613", 0], ["4615", 0], ["4617", 0], ["4618", 0], ["4619", 0], ["4620", 0], ["4621", 0], ["4623", 0], ["4625", 0], ["4627", 0], ["4628", 0], ["4629", 0], ["4630", 0], ["4631", 0], ["4632", 0], ["4635", 0], ["4637", 0], ["4638", 0], ["4639", 0], ["4650", 0], ["4651", 0], ["4652", 0], ["4653", 0], ["4657", 0], ["4658", 0], ["4659", 0], ["4670", 0], ["4671", 0], ["4672", 0], ["4673", 0], ["4675", 0], ["4678", 0], ["4679", 0], ["4680", 0], ["4681", 0], ["4682", 0], ["4683", 0], ["4685", 0], ["4687", 0], ["4689", 0], ["4690", 0], ["4691", 0], ["4692", 0], ["4693", 0], ["4695", 0], ["4697", 0], ["4698", 0], ["4701", 0], ["4702", 0], ["4703", 0], ["4705", 0], ["4706", 0], ["4708", 0], ["4709", 0], ["4710", 0], ["4712", 0], ["4713", 0], ["4715", 0], ["4716", 0], ["4718", 0], ["4719", 0], ["4720", 0], ["4721", 0], ["4723", 0], ["4725", 0], ["4726", 0], ["4728", 0], ["4729", 0], ["4730", 0], ["4731", 0], ["4732", 0], ["4735", 0], ["4736", 0], ["4738", 0], ["4739", 0], ["4750", 0], ["4751", 0], ["4752", 0], ["4753", 0], ["4756", 0], ["4758", 0], ["4759", 0], ["4760", 0], ["4761", 0], ["4762", 0], ["4763", 0], ["4765", 0], ["4768", 0], ["4769", 0], ["4780", 0], ["4781", 0], ["4782", 0], ["4783", 0], ["4785", 0], ["4786", 0], ["4789", 0], ["4790", 0], ["4791", 0], ["4792", 0], ["4793", 0], ["4795", 0], ["4796", 0], ["4798", 0], ["4801", 0], ["4802", 0], ["4803", 0], ["4805", 0], ["4806", 0], ["4807", 0], ["4809", 0], ["4810", 0], ["4812", 0], ["4813", 0], ["4815", 0], ["4816", 0], ["4817", 0], ["4819", 0], ["4820", 0], ["4821", 0], ["4823", 0], ["4825", 0], ["4826", 0], ["4827", 0], ["4829", 0], ["4830", 0], ["4831", 0], ["4832", 0], ["4835", 0], ["4836", 0], ["4837", 0], ["4839", 0], ["4850", 0], ["4851", 0], ["4852", 0], ["4853", 0], ["4856", 0], ["4857", 0], ["4859", 0], ["4860", 0], ["4861", 0], ["4862", 0], ["4863", 0], ["4865", 0], ["4867", 0], ["4869", 0], ["4870", 0], ["4871", 0], ["4872", 0], ["4873", 0], ["4875", 0], ["4876", 0], ["4879", 0], ["4890", 0], ["4891", 0], ["4892", 0], ["4893", 0], ["4895", 0], ["4896", 0], ["4897", 0], ["4901", 0], ["4902", 0], ["4903", 0], ["4905", 0], ["4906", 0], ["4907", 0], ["4908", 0], ["4910", 0], ["4912", 0], ["4913", 0], ["4915", 0], ["4916", 0], ["4917", 0], ["4918", 0], ["4920", 0], ["4921", 0], ["4923", 0], ["4925", 0], ["4926", 0], ["4927", 0], ["4928", 0], ["4930", 0], ["4931", 0], ["4932", 0], ["4935", 0], ["4936", 0], ["4937", 0], ["4938", 0], ["4950", 0], ["4951", 0], ["4952", 0], ["4953", 0], ["4956", 0], ["4957", 0], ["4958", 0], ["4960", 0], ["4961", 0], ["4962", 0], ["4963", 0], ["4965", 0], ["4967", 0], ["4968", 0], ["4970", 0], ["4971", 0], ["4972", 0], ["4973", 0], ["4975", 0], ["4976", 0], ["4978", 0], ["4980", 0], ["4981", 0], ["4982", 0], ["4983", 0], ["4985", 0], ["4986", 0], ["4987", 0], ["5012", 0], ["5013", 0], ["5014", 0], ["5016", 0], ["5017", 0], ["5018", 0], ["5019", 0], ["5021", 0], ["5023", 0], ["5024", 0], ["5026", 0], ["5027", 0], ["5028", 0], ["5029", 0], ["5031", 0], ["5032", 0], ["5034", 0], ["5036", 0], ["5037", 0], ["5038", 0], ["5039", 0], ["5041", 0], ["5042", 0], ["5043", 0], ["5046", 0], ["5047", 0], ["5048", 0], ["5049", 0], ["5061", 0], ["5062", 0], ["5063", 0], ["5064", 0], ["5067", 0], ["5068", 0], ["5069", 0], ["5071", 0], ["5072", 0], ["5073", 0], ["5074", 0], ["5076", 0], ["5078", 0], ["5079", 0], ["5081", 0], ["5082", 0], ["5083", 0], ["5084", 0], ["5086", 0], ["5087", 0], ["5089", 0], ["5091", 0], ["5092", 0], ["5093", 0], ["5094", 0], ["5096", 0], ["5097", 0], ["5098", 0], ["5102", 0], ["5103", 0], ["5104", 0], ["5106", 0], ["5107", 0], ["5108", 0], ["5109", 0], ["5120", 0], ["5123", 0], ["5124", 0], ["5126", 0], ["5127", 0], ["5128", 0], ["5129", 0], ["5130", 0], ["5132", 0], ["5134", 0], ["5136", 0], ["5137", 0], ["5138", 0], ["5139", 0], ["5140", 0], ["5142", 0], ["5143", 0], ["5146", 0], ["5147", 0], ["5148", 0], ["5149", 0], ["5160", 0], ["5162", 0], ["5163", 0], ["5164", 0], ["5167", 0], ["5168", 0], ["5169", 0], ["5170", 0], ["5172", 0], ["5173", 0], ["5174", 0], ["5176", 0], ["5178", 0], ["5179", 0], ["5180", 0], ["5182", 0], ["5183", 0], ["5184", 0], ["5186", 0], ["5187", 0], ["5189", 0], ["5190", 0], ["5192", 0], ["5193", 0], ["5194", 0], ["5196", 0], ["5197", 0], ["5198", 0], ["5201", 0], ["5203", 0], ["5204", 0], ["5206", 0], ["5207", 0], ["5208", 0], ["5209", 0], ["5210", 0], ["5213", 0], ["5214", 0], ["5216", 0], ["5217", 0], ["5218", 0], ["5219", 0], ["5230", 0], ["5231", 0], ["5234", 0], ["5236", 0], ["5237", 0], ["5238", 0], ["5239", 0], ["5240", 0], ["5241", 0], ["5243", 0], ["5246", 0], ["5247", 0], ["5248", 0], ["5249", 0], ["5260", 0], ["5261", 0], ["5263", 0], ["5264", 0], ["5267", 0], ["5268", 0], ["5269", 0], ["5270", 0], ["5271", 0], ["5273", 0], ["5274", 0], ["5276", 0], ["5278", 0], ["5279", 0], ["5280", 0], ["5281", 0], ["5283", 0], ["5284", 0], ["5286", 0], ["5287", 0], ["5289", 0], ["5290", 0], ["5291", 0], ["5293", 0], ["5294", 0], ["5296", 0], ["5297", 0], ["5298", 0], ["5301", 0], ["5302", 0], ["5304", 0], ["5306", 0], ["5307", 0], ["5308", 0], ["5309", 0], ["5310", 0], ["5312", 0], ["5314", 0], ["5316", 0], ["5317", 0], ["5318", 0], ["5319", 0], ["5320", 0], ["5321", 0], ["5324", 0], ["5326", 0], ["5327", 0], ["5328", 0], ["5329", 0], ["5340", 0], ["5341", 0], ["5342", 0], ["5346", 0], ["5347", 0], ["5348", 0], ["5349", 0], ["5360", 0], ["5361", 0], ["5362", 0], ["5364", 0], ["5367", 0], ["5368", 0], ["5369", 0], ["5370", 0], ["5371", 0], ["5372", 0], ["5374", 0], ["5376", 0], ["5378", 0], ["5379", 0], ["5380", 0], ["5381", 0], ["5382", 0], ["5384", 0], ["5386", 0], ["5387", 0], ["5389", 0], ["5390", 0], ["5391", 0], ["5392", 0], ["5394", 0], ["5396", 0], ["5397", 0], ["5398", 0], ["5401", 0], ["5402", 0], ["5403", 0], ["5406", 0], ["5407", 0], ["5408", 0], ["5409", 0], ["5410", 0], ["5412", 0], ["5413", 0], ["5416", 0], ["5417", 0], ["5418", 0], ["5419", 0], ["5420", 0], ["5421", 0], ["5423", 0], ["5426", 0], ["5427", 0], ["5428", 0], ["5429", 0], ["5430", 0], ["5431", 0], ["5432", 0], ["5436", 0], ["5437", 0], ["5438", 0], ["5439", 0], ["5460", 0], ["5461", 0], ["5462", 0], ["5463", 0], ["5467", 0], ["5468", 0], ["5469", 0], ["5470", 0], ["5471", 0], ["5472", 0], ["5473", 0], ["5476", 0], ["5478", 0], ["5479", 0], ["5480", 0], ["5481", 0], ["5482", 0], ["5483", 0], ["5486", 0], ["5487", 0], ["5489", 0], ["5490", 0], ["5491", 0], ["5492", 0], ["5493", 0], ["5496", 0], ["5497", 0], ["5498", 0], ["5601", 0], ["5602", 0], ["5603", 0], ["5604", 0], ["5607", 0], ["5608", 0], ["5609", 0], ["5610", 0], ["5612", 0], ["5613", 0], ["5614", 0], ["5617", 0], ["5618", 0], ["5619", 0], ["5620", 0], ["5621", 0], ["5623", 0], ["5624", 0], ["5627", 0], ["5628", 0], ["5629", 0], ["5630", 0], ["5631", 0], ["5632", 0], ["5634", 0], ["5637", 0], ["5638", 0], ["5639", 0], ["5640", 0], ["5641", 0], ["5642", 0], ["5643", 0], ["5647", 0], ["5648", 0], ["5649", 0], ["5670", 0], ["5671", 0], ["5672", 0], ["5673", 0], ["5674", 0], ["5678", 0], ["5679", 0], ["5680", 0], ["5681", 0], ["5682", 0], ["5683", 0], ["5684", 0], ["5687", 0], ["5689", 0], ["5690", 0], ["5691", 0], ["5692", 0], ["5693", 0], ["5694", 0], ["5697", 0], ["5698", 0], ["5701", 0], ["5702", 0], ["5703", 0], ["5704", 0], ["5706", 0], ["5708", 0], ["5709", 0], ["5710", 0], ["5712", 0], ["5713", 0], ["5714", 0], ["5716", 0], ["5718", 0], ["5719", 0], ["5720", 0], ["5721", 0], ["5723", 0], ["5724", 0], ["5726", 0], ["5728", 0], ["5729", 0], ["5730", 0], ["5731", 0], ["5732", 0], ["5734", 0], ["5736", 0], ["5738", 0], ["5739", 0], ["5740", 0], ["5741", 0], ["5742", 0], ["5743", 0], ["5746", 0], ["5748", 0], ["5749", 0], ["5760", 0], ["5761", 0], ["5762", 0], ["5763", 0], ["5764", 0], ["5768", 0], ["5769", 0], ["5780", 0], ["5781", 0], ["5782", 0], ["5783", 0], ["5784", 0], ["5786", 0], ["5789", 0], ["5790", 0], ["5791", 0], ["5792", 0], ["5793", 0], ["5794", 0], ["5796", 0], ["5798", 0], ["5801", 0], ["5802", 0], ["5803", 0], ["5804", 0], ["5806", 0], ["5807", 0], ["5809", 0], ["5810", 0], ["5812", 0], ["5813", 0], ["5814", 0], ["5816", 0], ["5817", 0], ["5819", 0], ["5820", 0], ["5821", 0], ["5823", 0], ["5824", 0], ["5826", 0], ["5827", 0], ["5829", 0], ["5830", 0], ["5831", 0], ["5832", 0], ["5834", 0], ["5836", 0], ["5837", 0], ["5839", 0], ["5840", 0], ["5841", 0], ["5842", 0], ["5843", 0], ["5846", 0], ["5847", 0], ["5849", 0], ["5860", 0], ["5861", 0], ["5862", 0], ["5863", 0], ["5864", 0], ["5867", 0], ["5869", 0], ["5870", 0], ["5871", 0], ["5872", 0], ["5873", 0], ["5874", 0], ["5876", 0], ["5879", 0], ["5890", 0], ["5891", 0], ["5892", 0], ["5893", 0], ["5894", 0], ["5896", 0], ["5897", 0], ["5901", 0], ["5902", 0], ["5903", 0], ["5904", 0], ["5906", 0], ["5907", 0], ["5908", 0], ["5910", 0], ["5912", 0], ["5913", 0], ["5914", 0], ["5916", 0], ["5917", 0], ["5918", 0], ["5920", 0], ["5921", 0], ["5923", 0], ["5924", 0], ["5926", 0], ["5927", 0], ["5928", 0], ["5930", 0], ["5931", 0], ["5932", 0], ["5934", 0], ["5936", 0], ["5937", 0], ["5938", 0], ["5940", 0], ["5941", 0], ["5942", 0], ["5943", 0], ["5946", 0], ["5947", 0], ["5948", 0], ["5960", 0], ["5961", 0], ["5962", 0], ["5963", 0], ["5964", 0], ["5967", 0], ["5968", 0], ["5970", 0], ["5971", 0], ["5972", 0], ["5973", 0], ["5974", 0], ["5976", 0], ["5978", 0], ["5980", 0], ["5981", 0], ["5982", 0], ["5983", 0], ["5984", 0], ["5986", 0], ["5987", 0], ["6012", 0], ["6013", 0], ["6014", 0], ["6015", 0], ["6017", 0], ["6018", 0], ["6019", 0], ["6021", 0], ["6023", 0], ["6024", 0], ["6025", 0], ["6027", 0], ["6028", 0], ["6029", 0], ["6031", 0], ["6032", 0], ["6034", 0], ["6035", 0], ["6037", 0], ["6038", 0], ["6039", 0], ["6041", 0], ["6042", 0], ["6043", 0], ["6045", 0], ["6047", 0], ["6048", 0], ["6049", 0], ["6051", 0], ["6052", 0], ["6053", 0], ["6054", 0], ["6057", 0], ["6058", 0], ["6059", 0], ["6071", 0], ["6072", 0], ["6073", 0], ["6074", 0], ["6075", 0], ["6078", 0], ["6079", 0], ["6081", 0], ["6082", 0], ["6083", 0], ["6084", 0], ["6085", 0], ["6087", 0], ["6089", 0], ["6091", 0], ["6092", 0], ["6093", 0], ["6094", 0], ["6095", 0], ["6097", 0], ["6098", 0], ["6102", 0], ["6103", 0], ["6104", 0], ["6105", 0], ["6107", 0], ["6108", 0], ["6109", 0], ["6120", 0], ["6123", 0], ["6124", 0], ["6125", 0], ["6127", 0], ["6128", 0], ["6129", 0], ["6130", 0], ["6132", 0], ["6134", 0], ["6135", 0], ["6137", 0], ["6138", 0], ["6139", 0], ["6140", 0], ["6142", 0], ["6143", 0], ["6145", 0], ["6147", 0], ["6148", 0], ["6149", 0], ["6150", 0], ["6152", 0], ["6153", 0], ["6154", 0], ["6157", 0], ["6158", 0], ["6159", 0], ["6170", 0], ["6172", 0], ["6173", 0], ["6174", 0], ["6175", 0], ["6178", 0], ["6179", 0], ["6180", 0], ["6182", 0], ["6183", 0], ["6184", 0], ["6185", 0], ["6187", 0], ["6189", 0], ["6190", 0], ["6192", 0], ["6193", 0], ["6194", 0], ["6195", 0], ["6197", 0], ["6198", 0], ["6201", 0], ["6203", 0], ["6204", 0], ["6205", 0], ["6207", 0], ["6208", 0], ["6209", 0], ["6210", 0], ["6213", 0], ["6214", 0], ["6215", 0], ["6217", 0], ["6218", 0], ["6219", 0], ["6230", 0], ["6231", 0], ["6234", 0], ["6235", 0], ["6237", 0], ["6238", 0], ["6239", 0], ["6240", 0], ["6241", 0], ["6243", 0], ["6245", 0], ["6247", 0], ["6248", 0], ["6249", 0], ["6250", 0], ["6251", 0], ["6253", 0], ["6254", 0], ["6257", 0], ["6258", 0], ["6259", 0], ["6270", 0], ["6271", 0], ["6273", 0], ["6274", 0], ["6275", 0], ["6278", 0], ["6279", 0], ["6280", 0], ["6281", 0], ["6283", 0], ["6284", 0], ["6285", 0], ["6287", 0], ["6289", 0], ["6290", 0], ["6291", 0], ["6293", 0], ["6294", 0], ["6295", 0], ["6297", 0], ["6298", 0], ["6301", 0], ["6302", 0], ["6304", 0], ["6305", 0], ["6307", 0], ["6308", 0], ["6309", 0], ["6310", 0], ["6312", 0], ["6314", 0], ["6315", 0], ["6317", 0], ["6318", 0], ["6319", 0], ["6320", 0], ["6321", 0], ["6324", 0], ["6325", 0], ["6327", 0], ["6328", 0], ["6329", 0], ["6340", 0], ["6341", 0], ["6342", 0], ["6345", 0], ["6347", 0], ["6348", 0], ["6349", 0], ["6350", 0], ["6351", 0], ["6352", 0], ["6354", 0], ["6357", 0], ["6358", 0], ["6359", 0], ["6370", 0], ["6371", 0], ["6372", 0], ["6374", 0], ["6375", 0], ["6378", 0], ["6379", 0], ["6380", 0], ["6381", 0], ["6382", 0], ["6384", 0], ["6385", 0], ["6387", 0], ["6389", 0], ["6390", 0], ["6391", 0], ["6392", 0], ["6394", 0], ["6395", 0], ["6397", 0], ["6398", 0], ["6401", 0], ["6402", 0], ["6403", 0], ["6405", 0], ["6407", 0], ["6408", 0], ["6409", 0], ["6410", 0], ["6412", 0], ["6413", 0], ["6415", 0], ["6417", 0], ["6418", 0], ["6419", 0], ["6420", 0], ["6421", 0], ["6423", 0], ["6425", 0], ["6427", 0], ["6428", 0], ["6429", 0], ["6430", 0], ["6431", 0], ["6432", 0], ["6435", 0], ["6437", 0], ["6438", 0], ["6439", 0], ["6450", 0], ["6451", 0], ["6452", 0], ["6453", 0], ["6457", 0], ["6458", 0], ["6459", 0], ["6470", 0], ["6471", 0], ["6472", 0], ["6473", 0], ["6475", 0], ["6478", 0], ["6479", 0], ["6480", 0], ["6481", 0], ["6482", 0], ["6483", 0], ["6485", 0], ["6487", 0], ["6489", 0], ["6490", 0], ["6491", 0], ["6492", 0], ["6493", 0], ["6495", 0], ["6497", 0], ["6498", 0], ["6501", 0], ["6502", 0], ["6503", 0], ["6504", 0], ["6507", 0], ["6508", 0], ["6509", 0], ["6510", 0], ["6512", 0], ["6513", 0], ["6514", 0], ["6517", 0], ["6518", 0], ["6519", 0], ["6520", 0], ["6521", 0], ["6523", 0], ["6524", 0], ["6527", 0], ["6528", 0], ["6529", 0], ["6530", 0], ["6531", 0], ["6532", 0], ["6534", 0], ["6537", 0], ["6538", 0], ["6539", 0], ["6540", 0], ["6541", 0], ["6542", 0], ["6543", 0], ["6547", 0], ["6548", 0], ["6549", 0], ["6570", 0], ["6571", 0], ["6572", 0], ["6573", 0], ["6574", 0], ["6578", 0], ["6579", 0], ["6580", 0], ["6581", 0], ["6582", 0], ["6583", 0], ["6584", 0], ["6587", 0], ["6589", 0], ["6590", 0], ["6591", 0], ["6592", 0], ["6593", 0], ["6594", 0], ["6597", 0], ["6598", 0], ["6701", 0], ["6702", 0], ["6703", 0], ["6704", 0], ["6705", 0], ["6708", 0], ["6709", 0], ["6710", 0], ["6712", 0], ["6713", 0], ["6714", 0], ["6715", 0], ["6718", 0], ["6719", 0], ["6720", 0], ["6721", 0], ["6723", 0], ["6724", 0], ["6725", 0], ["6728", 0], ["6729", 0], ["6730", 0], ["6731", 0], ["6732", 0], ["6734", 0], ["6735", 0], ["6738", 0], ["6739", 0], ["6740", 0], ["6741", 0], ["6742", 0], ["6743", 0], ["6745", 0], ["6748", 0], ["6749", 0], ["6750", 0], ["6751", 0], ["6752", 0], ["6753", 0], ["6754", 0], ["6758", 0], ["6759", 0], ["6780", 0], ["6781", 0], ["6782", 0], ["6783", 0], ["6784", 0], ["6785", 0], ["6789", 0], ["6790", 0], ["6791", 0], ["6792", 0], ["6793", 0], ["6794", 0], ["6795", 0], ["6798", 0], ["6801", 0], ["6802", 0], ["6803", 0], ["6804", 0], ["6805", 0], ["6807", 0], ["6809", 0], ["6810", 0], ["6812", 0], ["6813", 0], ["6814", 0], ["6815", 0], ["6817", 0], ["6819", 0], ["6820", 0], ["6821", 0], ["6823", 0], ["6824", 0], ["6825", 0], ["6827", 0], ["6829", 0], ["6830", 0], ["6831", 0], ["6832", 0], ["6834", 0], ["6835", 0], ["6837", 0], ["6839", 0], ["6840", 0], ["6841", 0], ["6842", 0], ["6843", 0], ["6845", 0], ["6847", 0], ["6849", 0], ["6850", 0], ["6851", 0], ["6852", 0], ["6853", 0], ["6854", 0], ["6857", 0], ["6859", 0], ["6870", 0], ["6871", 0], ["6872", 0], ["6873", 0], ["6874", 0], ["6875", 0], ["6879", 0], ["6890", 0], ["6891", 0], ["6892", 0], ["6893", 0], ["6894", 0], ["6895", 0], ["6897", 0], ["6901", 0], ["6902", 0], ["6903", 0], ["6904", 0], ["6905", 0], ["6907", 0], ["6908", 0], ["6910", 0], ["6912", 0], ["6913", 0], ["6914", 0], ["6915", 0], ["6917", 0], ["6918", 0], ["6920", 0], ["6921", 0], ["6923", 0], ["6924", 0], ["6925", 0], ["6927", 0], ["6928", 0], ["6930", 0], ["6931", 0], ["6932", 0], ["6934", 0], ["6935", 0], ["6937", 0], ["6938", 0], ["6940", 0], ["6941", 0], ["6942", 0], ["6943", 0], ["6945", 0], ["6947", 0], ["6948", 0], ["6950", 0], ["6951", 0], ["6952", 0], ["6953", 0], ["6954", 0], ["6957", 0], ["6958", 0], ["6970", 0], ["6971", 0], ["6972", 0], ["6973", 0], ["6974", 0], ["6975", 0], ["6978", 0], ["6980", 0], ["6981", 0], ["6982", 0], ["6983", 0], ["6984", 0], ["6985", 0], ["6987", 0], ["7012", 0], ["7013", 0], ["7014", 0], ["7015", 0], ["7016", 0], ["7018", 0], ["7019", 0], ["7021", 0], ["7023", 0], ["7024", 0], ["7025", 0], ["7026", 0], ["7028", 0], ["7029", 0], ["7031", 0], ["7032", 0], ["7034", 0], ["7035", 0], ["7036", 0], ["7038", 0], ["7039", 0], ["7041", 0], ["7042", 0], ["7043", 0], ["7045", 0], ["7046", 0], ["7048", 0], ["7049", 0], ["7051", 0], ["7052", 0], ["7053", 0], ["7054", 0], ["7056", 0], ["7058", 0], ["7059", 0], ["7061", 0], ["7062", 0], ["7063", 0], ["7064", 0], ["7065", 0], ["7068", 0], ["7069", 0], ["7081", 0], ["7082", 0], ["7083", 0], ["7084", 0], ["7085", 0], ["7086", 0], ["7089", 0], ["7091", 0], ["7092", 0], ["7093", 0], ["7094", 0], ["7095", 0], ["7096", 0], ["7098", 0], ["7102", 0], ["7103", 0], ["7104", 0], ["7105", 0], ["7106", 0], ["7108", 0], ["7109", 0], ["7120", 0], ["7123", 0], ["7124", 0], ["7125", 0], ["7126", 0], ["7128", 0], ["7129", 0], ["7130", 0], ["7132", 0], ["7134", 0], ["7135", 0], ["7136", 0], ["7138", 0], ["7139", 0], ["7140", 0], ["7142", 0], ["7143", 0], ["7145", 0], ["7146", 0], ["7148", 0], ["7149", 0], ["7150", 0], ["7152", 0], ["7153", 0], ["7154", 0], ["7156", 0], ["7158", 0], ["7159", 0], ["7160", 0], ["7162", 0], ["7163", 0], ["7164", 0], ["7165", 0], ["7168", 0], ["7169", 0], ["7180", 0], ["7182", 0], ["7183", 0], ["7184", 0], ["7185", 0], ["7186", 0], ["7189", 0], ["7190", 0], ["7192", 0], ["7193", 0], ["7194", 0], ["7195", 0], ["7196", 0], ["7198", 0], ["7201", 0], ["7203", 0], ["7204", 0], ["7205", 0], ["7206", 0], ["7208", 0], ["7209", 0], ["7210", 0], ["7213", 0], ["7214", 0], ["7215", 0], ["7216", 0], ["7218", 0], ["7219", 0], ["7230", 0], ["7231", 0], ["7234", 0], ["7235", 0], ["7236", 0], ["7238", 0], ["7239", 0], ["7240", 0], ["7241", 0], ["7243", 0], ["7245", 0], ["7246", 0], ["7248", 0], ["7249", 0], ["7250", 0], ["7251", 0], ["7253", 0], ["7254", 0], ["7256", 0], ["7258", 0], ["7259", 0], ["7260", 0], ["7261", 0], ["7263", 0], ["7264", 0], ["7265", 0], ["7268", 0], ["7269", 0], ["7280", 0], ["7281", 0], ["7283", 0], ["7284", 0], ["7285", 0], ["7286", 0], ["7289", 0], ["7290", 0], ["7291", 0], ["7293", 0], ["7294", 0], ["7295", 0], ["7296", 0], ["7298", 0], ["7301", 0], ["7302", 0], ["7304", 0], ["7305", 0], ["7306", 0], ["7308", 0], ["7309", 0], ["7310", 0], ["7312", 0], ["7314", 0], ["7315", 0], ["7316", 0], ["7318", 0], ["7319", 0], ["7320", 0], ["7321", 0], ["7324", 0], ["7325", 0], ["7326", 0], ["7328", 0], ["7329", 0], ["7340", 0], ["7341", 0], ["7342", 0], ["7345", 0], ["7346", 0], ["7348", 0], ["7349", 0], ["7350", 0], ["7351", 0], ["7352", 0], ["7354", 0], ["7356", 0], ["7358", 0], ["7359", 0], ["7360", 0], ["7361", 0], ["7362", 0], ["7364", 0], ["7365", 0], ["7368", 0], ["7369", 0], ["7380", 0], ["7381", 0], ["7382", 0], ["7384", 0], ["7385", 0], ["7386", 0], ["7389", 0], ["7390", 0], ["7391", 0], ["7392", 0], ["7394", 0], ["7395", 0], ["7396", 0], ["7398", 0], ["7401", 0], ["7402", 0], ["7403", 0], ["7405", 0], ["7406", 0], ["7408", 0], ["7409", 0], ["7410", 0], ["7412", 0], ["7413", 0], ["7415", 0], ["7416", 0], ["7418", 0], ["7419", 0], ["7420", 0], ["7421", 0], ["7423", 0], ["7425", 0], ["7426", 0], ["7428", 0], ["7429", 0], ["7430", 0], ["7431", 0], ["7432", 0], ["7435", 0], ["7436", 0], ["7438", 0], ["7439", 0], ["7450", 0], ["7451", 0], ["7452", 0], ["7453", 0], ["7456", 0], ["7458", 0], ["7459", 0], ["7460", 0], ["7461", 0], ["7462", 0], ["7463", 0], ["7465", 0], ["7468", 0], ["7469", 0], ["7480", 0], ["7481", 0], ["7482", 0], ["7483", 0], ["7485", 0], ["7486", 0], ["7489", 0], ["7490", 0], ["7491", 0], ["7492", 0], ["7493", 0], ["7495", 0], ["7496", 0], ["7498", 0], ["7501", 0], ["7502", 0], ["7503", 0], ["7504", 0], ["7506", 0], ["7508", 0], ["7509", 0], ["7510", 0], ["7512", 0], ["7513", 0], ["7514", 0], ["7516", 0], ["7518", 0], ["7519", 0], ["7520", 0], ["7521", 0], ["7523", 0], ["7524", 0], ["7526", 0], ["7528", 0], ["7529", 0], ["7530", 0], ["7531", 0], ["7532", 0], ["7534", 0], ["7536", 0], ["7538", 0], ["7539", 0], ["7540", 0], ["7541", 0], ["7542", 0], ["7543", 0], ["7546", 0], ["7548", 0], ["7549", 0], ["7560", 0], ["7561", 0], ["7562", 0], ["7563", 0], ["7564", 0], ["7568", 0], ["7569", 0], ["7580", 0], ["7581", 0], ["7582", 0], ["7583", 0], ["7584", 0], ["7586", 0], ["7589", 0], ["7590", 0], ["7591", 0], ["7592", 0], ["7593", 0], ["7594", 0], ["7596", 0], ["7598", 0], ["7601", 0], ["7602", 0], ["7603", 0], ["7604", 0], ["7605", 0], ["7608", 0], ["7609", 0], ["7610", 0], ["7612", 0], ["7613", 0], ["7614", 0], ["7615", 0], ["7618", 0], ["7619", 0], ["7620", 0], ["7621", 0], ["7623", 0], ["7624", 0], ["7625", 0], ["7628", 0], ["7629", 0], ["7630", 0], ["7631", 0], ["7632", 0], ["7634", 0], ["7635", 0], ["7638", 0], ["7639", 0], ["7640", 0], ["7641", 0], ["7642", 0], ["7643", 0], ["7645", 0], ["7648", 0], ["7649", 0], ["7650", 0], ["7651", 0], ["7652", 0], ["7653", 0], ["7654", 0], ["7658", 0], ["7659", 0], ["7680", 0], ["7681", 0], ["7682", 0], ["7683", 0], ["7684", 0], ["7685", 0], ["7689", 0], ["7690", 0], ["7691", 0], ["7692", 0], ["7693", 0], ["7694", 0], ["7695", 0], ["7698", 0], ["7801", 0], ["7802", 0], ["7803", 0], ["7804", 0], ["7805", 0], ["7806", 0], ["7809", 0], ["7810", 0], ["7812", 0], ["7813", 0], ["7814", 0], ["7815", 0], ["7816", 0], ["7819", 0], ["7820", 0], ["7821", 0], ["7823", 0], ["7824", 0], ["7825", 0], ["7826", 0], ["7829", 0], ["7830", 0], ["7831", 0], ["7832", 0], ["7834", 0], ["7835", 0], ["7836", 0], ["7839", 0], ["7840", 0], ["7841", 0], ["7842", 0], ["7843", 0], ["7845", 0], ["7846", 0], ["7849", 0], ["7850", 0], ["7851", 0], ["7852", 0], ["7853", 0], ["7854", 0], ["7856", 0], ["7859", 0], ["7860", 0], ["7861", 0], ["7862", 0], ["7863", 0], ["7864", 0], ["7865", 0], ["7869", 0], ["7890", 0], ["7891", 0], ["7892", 0], ["7893", 0], ["7894", 0], ["7895", 0], ["7896", 0], ["7901", 0], ["7902", 0], ["7903", 0], ["7904", 0], ["7905", 0], ["7906", 0], ["7908", 0], ["7910", 0], ["7912", 0], ["7913", 0], ["7914", 0], ["7915", 0], ["7916", 0], ["7918", 0], ["7920", 0], ["7921", 0], ["7923", 0], ["7924", 0], ["7925", 0], ["7926", 0], ["7928", 0], ["7930", 0], ["7931", 0], ["7932", 0], ["7934", 0], ["7935", 0], ["7936", 0], ["7938", 0], ["7940", 0], ["7941", 0], ["7942", 0], ["7943", 0], ["7945", 0], ["7946", 0], ["7948", 0], ["7950", 0], ["7951", 0], ["7952", 0], ["7953", 0], ["7954", 0], ["7956", 0], ["7958", 0], ["7960", 0], ["7961", 0], ["7962", 0], ["7963", 0], ["7964", 0], ["7965", 0], ["7968", 0], ["7980", 0], ["7981", 0], ["7982", 0], ["7983", 0], ["7984", 0], ["7985", 0], ["7986", 0], ["8012", 0], ["8013", 0], ["8014", 0], ["8015", 0], ["8016", 0], ["8017", 0], ["8019", 0], ["8021", 0], ["8023", 0], ["8024", 0], ["8025", 0], ["8026", 0], ["8027", 0], ["8029", 0], ["8031", 0], ["8032", 0], ["8034", 0], ["8035", 0], ["8036", 0], ["8037", 0], ["8039", 0], ["8041", 0], ["8042", 0], ["8043", 0], ["8045", 0], ["8046", 0], ["8047", 0], ["8049", 0], ["8051", 0], ["8052", 0], ["8053", 0], ["8054", 0], ["8056", 0], ["8057", 0], ["8059", 0], ["8061", 0], ["8062", 0], ["8063", 0], ["8064", 0], ["8065", 0], ["8067", 0], ["8069", 0], ["8071", 0], ["8072", 0], ["8073", 0], ["8074", 0], ["8075", 0], ["8076", 0], ["8079", 0], ["8091", 0], ["8092", 0], ["8093", 0], ["8094", 0], ["8095", 0], ["8096", 0], ["8097", 0], ["8102", 0], ["8103", 0], ["8104", 0], ["8105", 0], ["8106", 0], ["8107", 0], ["8109", 0], ["8120", 0], ["8123", 0], ["8124", 0], ["8125", 0], ["8126", 0], ["8127", 0], ["8129", 0], ["8130", 0], ["8132", 0], ["8134", 0], ["8135", 0], ["8136", 0], ["8137", 0], ["8139", 0], ["8140", 0], ["8142", 0], ["8143", 0], ["8145", 0], ["8146", 0], ["8147", 0], ["8149", 0], ["8150", 0], ["8152", 0], ["8153", 0], ["8154", 0], ["8156", 0], ["8157", 0], ["8159", 0], ["8160", 0], ["8162", 0], ["8163", 0], ["8164", 0], ["8165", 0], ["8167", 0], ["8169", 0], ["8170", 0], ["8172", 0], ["8173", 0], ["8174", 0], ["8175", 0], ["8176", 0], ["8179", 0], ["8190", 0], ["8192", 0], ["8193", 0], ["8194", 0], ["8195", 0], ["8196", 0], ["8197", 0], ["8201", 0], ["8203", 0], ["8204", 0], ["8205", 0], ["8206", 0], ["8207", 0], ["8209", 0], ["8210", 0], ["8213", 0], ["8214", 0], ["8215", 0], ["8216", 0], ["8217", 0], ["8219", 0], ["8230", 0], ["8231", 0], ["8234", 0], ["8235", 0], ["8236", 0], ["8237", 0], ["8239", 0], ["8240", 0], ["8241", 0], ["8243", 0], ["8245", 0], ["8246", 0], ["8247", 0], ["8249", 0], ["8250", 0], ["8251", 0], ["8253", 0], ["8254", 0], ["8256", 0], ["8257", 0], ["8259", 0], ["8260", 0], ["8261", 0], ["8263", 0], ["8264", 0], ["8265", 0], ["8267", 0], ["8269", 0], ["8270", 0], ["8271", 0], ["8273", 0], ["8274", 0], ["8275", 0], ["8276", 0], ["8279", 0], ["8290", 0], ["8291", 0], ["8293", 0], ["8294", 0], ["8295", 0], ["8296", 0], ["8297", 0], ["8301", 0], ["8302", 0], ["8304", 0], ["8305", 0], ["8306", 0], ["8307", 0], ["8309", 0], ["8310", 0], ["8312", 0], ["8314", 0], ["8315", 0], ["8316", 0], ["8317", 0], ["8319", 0], ["8320", 0], ["8321", 0], ["8324", 0], ["8325", 0], ["8326", 0], ["8327", 0], ["8329", 0], ["8340", 0], ["8341", 0], ["8342", 0], ["8345", 0], ["8346", 0], ["8347", 0], ["8349", 0], ["8350", 0], ["8351", 0], ["8352", 0], ["8354", 0], ["8356", 0], ["8357", 0], ["8359", 0], ["8360", 0], ["8361", 0], ["8362", 0], ["8364", 0], ["8365", 0], ["8367", 0], ["8369", 0], ["8370", 0], ["8371", 0], ["8372", 0], ["8374", 0], ["8375", 0], ["8376", 0], ["8379", 0], ["8390", 0], ["8391", 0], ["8392", 0], ["8394", 0], ["8395", 0], ["8396", 0], ["8397", 0], ["8401", 0], ["8402", 0], ["8403", 0], ["8405", 0], ["8406", 0], ["8407", 0], ["8409", 0], ["8410", 0], ["8412", 0], ["8413", 0], ["8415", 0], ["8416", 0], ["8417", 0], ["8419", 0], ["8420", 0], ["8421", 0], ["8423", 0], ["8425", 0], ["8426", 0], ["8427", 0], ["8429", 0], ["8430", 0], ["8431", 0], ["8432", 0], ["8435", 0], ["8436", 0], ["8437", 0], ["8439", 0], ["8450", 0], ["8451", 0], ["8452", 0], ["8453", 0], ["8456", 0], ["8457", 0], ["8459", 0], ["8460", 0], ["8461", 0], ["8462", 0], ["8463", 0], ["8465", 0], ["8467", 0], ["8469", 0], ["8470", 0], ["8471", 0], ["8472", 0], ["8473", 0], ["8475", 0], ["8476", 0], ["8479", 0], ["8490", 0], ["8491", 0], ["8492", 0], ["8493", 0], ["8495", 0], ["8496", 0], ["8497", 0], ["8501", 0], ["8502", 0], ["8503", 0], ["8504", 0], ["8506", 0], ["8507", 0], ["8509", 0], ["8510", 0], ["8512", 0], ["8513", 0], ["8514", 0], ["8516", 0], ["8517", 0], ["8519", 0], ["8520", 0], ["8521", 0], ["8523", 0], ["8524", 0], ["8526", 0], ["8527", 0], ["8529", 0], ["8530", 0], ["8531", 0], ["8532", 0], ["8534", 0], ["8536", 0], ["8537", 0], ["8539", 0], ["8540", 0], ["8541", 0], ["8542", 0], ["8543", 0], ["8546", 0], ["8547", 0], ["8549", 0], ["8560", 0], ["8561", 0], ["8562", 0], ["8563", 0], ["8564", 0], ["8567", 0], ["8569", 0], ["8570", 0], ["8571", 0], ["8572", 0], ["8573", 0], ["8574", 0], ["8576", 0], ["8579", 0], ["8590", 0], ["8591", 0], ["8592", 0], ["8593", 0], ["8594", 0], ["8596", 0], ["8597", 0], ["8601", 0], ["8602", 0], ["8603", 0], ["8604", 0], ["8605", 0], ["8607", 0], ["8609", 0], ["8610", 0], ["8612", 0], ["8613", 0], ["8614", 0], ["8615", 0], ["8617", 0], ["8619", 0], ["8620", 0], ["8621", 0], ["8623", 0], ["8624", 0], ["8625", 0], ["8627", 0], ["8629", 0], ["8630", 0], ["8631", 0], ["8632", 0], ["8634", 0], ["8635", 0], ["8637", 0], ["8639", 0], ["8640", 0], ["8641", 0], ["8642", 0], ["8643", 0], ["8645", 0], ["8647", 0], ["8649", 0], ["8650", 0], ["8651", 0], ["8652", 0], ["8653", 0], ["8654", 0], ["8657", 0], ["8659", 0], ["8670", 0], ["8671", 0], ["8672", 0], ["8673", 0], ["8674", 0], ["8675", 0], ["8679", 0], ["8690", 0], ["8691", 0], ["8692", 0], ["8693", 0], ["8694", 0], ["8695", 0], ["8697", 0], ["8701", 0], ["8702", 0], ["8703", 0], ["8704", 0], ["8705", 0], ["8706", 0], ["8709", 0], ["8710", 0], ["8712", 0], ["8713", 0], ["8714", 0], ["8715", 0], ["8716", 0], ["8719", 0], ["8720", 0], ["8721", 0], ["8723", 0], ["8724", 0], ["8725", 0], ["8726", 0], ["8729", 0], ["8730", 0], ["8731", 0], ["8732", 0], ["8734", 0], ["8735", 0], ["8736", 0], ["8739", 0], ["8740", 0], ["8741", 0], ["8742", 0], ["8743", 0], ["8745", 0], ["8746", 0], ["8749", 0], ["8750", 0], ["8751", 0], ["8752", 0], ["8753", 0], ["8754", 0], ["8756", 0], ["8759", 0], ["8760", 0], ["8761", 0], ["8762", 0], ["8763", 0], ["8764", 0], ["8765", 0], ["8769", 0], ["8790", 0], ["8791", 0], ["8792", 0], ["8793", 0], ["8794", 0], ["8795", 0], ["8796", 0], ["8901", 0], ["8902", 0], ["8903", 0], ["8904", 0], ["8905", 0], ["8906", 0], ["8907", 0], ["8910", 0], ["8912", 0], ["8913", 0], ["8914", 0], ["8915", 0], ["8916", 0], ["8917", 0], ["8920", 0], ["8921", 0], ["8923", 0], ["8924", 0], ["8925", 0], ["8926", 0], ["8927", 0], ["8930", 0], ["8931", 0], ["8932", 0], ["8934", 0], ["8935", 0], ["8936", 0], ["8937", 0], ["8940", 0], ["8941", 0], ["8942", 0], ["8943", 0], ["8945", 0], ["8946", 0], ["8947", 0], ["8950", 0], ["8951", 0], ["8952", 0], ["8953", 0], ["8954", 0], ["8956", 0], ["8957", 0], ["8960", 0], ["8961", 0], ["8962", 0], ["8963", 0], ["8964", 0], ["8965", 0], ["8967", 0], ["8970", 0], ["8971", 0], ["8972", 0], ["8973", 0], ["8974", 0], ["8975", 0], ["8976", 0], ["9012", 0], ["n", 0], ["int", 0], ["input", 0], ["cont", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["years", 0], ["cont", 0], ["n", 0], ["print", 0], ["years", 0], ["cont", 0], ["break", 0], ["else", 0], ["cont", 0], ["1", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0036238794583253863, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0007656674160377937, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.021883920076117985, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.008776403425309227, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0019073049780659929, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0007629219912263971, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.02017126546146527, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.008753568030447193, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given a string S consisting of lowercase English letters. Determine whether all the characters in S are different.\n\n-----Constraints-----\n - 2 ≤ |S| ≤ 26, where |S| denotes the length of S.\n - S consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nIf all the characters in S are different, print yes (case-sensitive); otherwise, print no.\n\n-----Sample Input-----\nuncopyrightable\n\n-----Sample Output-----\nyes\n\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys, math\nfrom itertools import combinations as c, product as p\nfrom collections import deque\nsys.setrecursionlimit(10**9)\nINF = float('inf')\nMOD = 10**9 + 7\n#MOD = 998244353\n\n\ndef si(): return input()\ndef ii(): return int(input())\ndef fi(): return float(input())\ndef lstr(): return input().split()\ndef lint(): return list(map(int, input().split()))\ndef lintdec(): return list(map(lambda x:int(x) - 1, input().split()))\ndef lnstr(n): return [input() for _ in range(n)]\ndef lnint(n): return [int(input()) for _ in range(n)]\ndef lint_list(n): return [lint() for _ in range(n)]\n\n\n\n############################################################\nS = si()\nprint('yes' if len(set(S)) == len(S) else 'no')\n", "s = input()\ns = sorted(s)\ndif = True\nfor i in range(len(s)-1):\n\tif s[i] == s[i+1]:\n\t\tdif = False\nprint(\"yes\" if dif else \"no\")\n", "s = input()\nprint('yes') if len(set(list(s))) == len(s) else print('no')\n", "s=input()\nt=True\nfor i in s:\n\tif s.count(i) != 1:\n\t\tt=False\nprint(\"yes\" if t else \"no\")\n", "s=str(input())\nt=[]\nt.append(s[0])\nfor i in range(1,len(s)):\n\tif s[i] in t:\n\t\tprint(\"no\")\n\t\treturn\n\tt.append(s[i])\n\nprint(\"yes\")\n", "s=input()\nif len(s)==len(set(s)):\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "s = input()\nans = \"yes\" if len(set(s)) == len(s) else \"no\"\nprint(ans)\n", "s = input()\nl = []\nfor i in range(len(s)):\n\tif not s[i] in l:\n\t\tl.append(s[i])\n\telse :\n\t\tprint('no')\n\t\treturn\nprint('yes')\n\n", "s = str(input())\nL = []\nfor i in s:\n\tif i in L:\n\t\tprint('no')\n\t\treturn\n\telse:\n\t\tL.append(i)\nprint('yes')\n", "s = input()\nres = \"yes\"\nfor i in range(len(s)):\n\tfor j in range(i+1,len(s)):\n\t\tif s[i] == s[j]:\n\t\t\tres = \"no\"\nprint(res)\n", "s = input()\nse = set(s)\nprint(\"yes\" if len(s) == len(se) else \"no\")\n", "def main():\n\ts = input()\n\tans = 'no'\n\tif len(set(s)) == len(s):\n\t\tans = 'yes'\n\tprint(ans)\n\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "S=input()\nfor c in S:\n\tif S.count(c)>1:\n\t\tprint(\"no\")\n\t\tbreak\nelse:\n\tprint(\"yes\")\n", "s = list(map(str, input()))\n\nif len(s) == len(set(s)):\n\tprint('yes')\nelse:\n\tprint('no')\n", "s = [c for c in input()]\n\nif len(set(s)) < len(s):\n\tprint('no')\nelse:\n\tprint('yes')\n", "import sys\nimport copy\nimport math\nimport itertools\nimport numpy as np\n\nS = input()\nfor i in range(len(S)):\n\tif S.count(S[i])>1:\n\t\tprint(\"no\")\n\t\treturn\n\nprint(\"yes\")\n", "s=list(input())\nl=len(s)\nk=set(s)\nif l != len(k):\n\tprint('no')\nelse:\n\tprint('yes')\n", "s = input()\nprint('yes' if len(list(s)) == len(set(s)) else 'no')\n", "# ABC063\nfrom collections import Counter\n\nS = input()\ncount = Counter(S)\n\nfor cnt in count.values():\n\tif cnt != 1:\n\t\tprint('no')\n\t\treturn\nelse:\n\tprint('yes')\n", "#-*-coding:utf-8-*-\nimport sys\ninput=sys.stdin.readline\n\ndef main():\n\ts = input().rstrip()\n\tstring_dict={}\n\n\tfor i in s:\n\t\tif i not in string_dict:\n\t\t\td = {i:1}\n\t\t\tstring_dict.update(d) \n\t\telse:\n\t\t\tprint(\"no\")\n\t\t\treturn\n\tprint(\"yes\")\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "# 31\nS = str(input())\n\nlist = []\nans = 'yes'\nfor s in S:\n\tfor past in list:\n\t\tif s == past: \n\t\t\tans = 'no'\n\t\t\tbreak\n\tif ans == 'no': break\n\tlist.append(s)\n\nprint(ans)\n", "s = input()\nif len(s) == len(list(set(list(s)))):\n\tprint('yes')\nelse:\n\tprint('no')\n", "S = input()\n\nn1 = len(S)\nn2 = len(set(S))\n\nif n1 == n2: print('yes')\nelse: print('no')\n", "S = input()\nls = []\ncheck = True\nfor i in range(len(S)):\n\tif S[i] in ls:\n\t\tcheck = False\n\t\tbreak\n\tls.append(S[i])\n\t\nprint(\"yes\" if check else \"no\")\n", "S = input()\n\ndef duplicate(seq):\n\tseen = []\n\tunique = [x for x in seq if x not in seen and not seen.append(x)]\n\treturn len(seq) != len(unique)\n\nif duplicate(S):\n\tprint('no')\nelse:\n\tprint('yes')\n", "string = input()\nprint('yes') if len(string) == len(set(string)) else print('no')\n    \n", "S = input()\n\n\nprint(\"yes\" if len(set(S)) == len(S) else \"no\")\n", "a=[0]*26\nS=input()\ni=0\nwhile True:\n\tif i==len(S):\n\t\tprint(\"yes\")\n\t\tbreak\n\tb=ord(S[i])-97\n\tif a[b]==1:\n\t\tprint(\"no\")\n\t\tbreak\n\telse:\n\t\ta[b]=1\n\t\ti+=1\n", "data=list(input())\nc=0\nfor i in range(0,len(data)-1):\n\tfor j in range(i+1,len(data)):\n\t\tif data[i]==data[j]:\n\t\t\tc=c+1\nif c==0:\n\tprint('yes')\nelse:\n\tprint('no')\n", "S=input()\nprint(\"yes\" if len(S)==len(set(S)) else \"no\")\n", "# 「ABC-154-C」の類題\nS = input()\n \nn1 = len(S)\nn2 = len(set(S))\n \nif n1 == n2: print('yes')\nelse: print('no')\n", "s = str(input())\nchars = set()\nans = 'yes'\nfor c in s:\n\tif c in chars:\n\t\tans = 'no'\n\t\tbreak\n\tchars.add(c)\nprint(ans)\n", "S = input()\nans = \"\"\n\nfor s in S:\n\tif S.count(s) > 1:\n\t\tans = \"no\"\n\t\tbreak\n\telse:\n\t\tans = \"yes\"\n\nprint(ans)\n", "S = input()\nT = sorted(S)\nU = set(T)\nU = sorted(U)\nif T == U:\n\tprint('yes')\nelse:\n\tprint('no')\n", "s = input()\nprint(\"yes\") if len(set(s)) == len(s) else print(\"no\")\n", "def main():\n\ts = input()\n\tanswer = 'yes'\n\n\tfor i in range(len(s)-1):\n\t\tif s[i] in s[i+1:]:\n\t\t\tanswer = 'no'\n\tprint(answer)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "s = input()\nx = 0\nfor i in s:\n\tc = 0\n\tfor j in s:\n\t\tif i == j:\n\t\t\tc += 1\n\tif c != 1:\n\t\tprint(\"no\")\n\t\tbreak\n\telse:\n\t\tx += 1\n\t\tif x == len(s):\n\t\t\tprint(\"yes\")\n\t\t\tbreak\n", "u = input()\nfor i in range(len(u)):\n\tfor j in range(i+1,len(u)):\n\t\tif u[i]==u[j]:\n\t\t\tprint(\"no\")\n\t\t\treturn\nprint(\"yes\")\n", "s = input()\nl = []\nfor i in s:\n\tif i in l:\n\t\tprint('no')\n\t\treturn\n\telse:\n\t\tl.append(i)\nprint('yes')\n", "from collections import Counter\n\nstring = Counter(input())\n\nfor _ in string.values():\n\tif _ > 1:\n\t\tprint(\"no\")\n\t\tbreak\nelse:\n\tprint(\"yes\")\n", "s = input()\nbool = True\nfor i in range(len(s) - 1):\n\tfor j in range(i + 1,len(s)):\n\t\tif s[i] == s[j]:\n\t\t\tbool = False\nif bool:\n\tprint('yes')\nelse:\n\tprint('no')\n", "s = list(map(str,input()))\nprint(\"yes\" if len(s) == len(set(s)) else \"no\")\n", "from collections import deque\nd = deque()\nfor s in input():\n\tif s in d:\n\t\tprint('no')\n\t\treturn\n\telse: \n\t\td.append(s)\nprint('yes')\n", "# -*- coding:utf-8 -*-\nS = input()\n\npast = []\nans = \"yes\"\n\nfor s in S:\n\tif s not in past:\n\t\tpast.append(s)\n\telse:\n\t\tans = \"no\"\n\t\tbreak\n\nprint(ans)\n", "s = input()\nword = []\n\nfor i in s:\n\tif (i not in word):\n\t\tword.append(i)\n\telse:\n\t\tprint('no')\n\t\treturn\n\nprint('yes')\n", "s = input()\nprint(\"yes\" if len(s) == len(set(s)) else \"no\")\n", "import sys\nS = input()\n\nfor s in S:\n\tif S.count(s) > 1:\n\t\tprint('no')\n\t\treturn\n\t\t\nprint('yes')\n", "a=input()\nb=[]\nc=0\nfor i in range(len(a)):\n\tb.append(a[i])\nb.sort()\nfor i in range(len(a)-1):\n\tif b[i]==b[i+1]:\n\t\tc=c+1\nif c==0:\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "s=input()\nt=set()\nfor x in s:\n\tif x in t:\n\t\tprint('no')\n\t\treturn\n\telse:\n\t\tt.add(x)\nprint('yes')\n", "s = input()\nprint(\"yes\" if len(s) == len(set(s)) else \"no\")\n", "S = input()\n\nfor i in range(len(S)):\n\tif S[i] in S[i+1:]:\n\t\tprint('no')\n\t\tbreak\nelse:\n\tprint('yes')\n", "S=list(input())\nS.sort()\ncount = 0\nfor i in range(len(S)-1):\n\tif S[i] == S[i+1]:\n\t\tcount += 1\nif count == 0:\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "from typing import List\n\n\nS = list(input())  # type: List[str]\nif len(S) == len(set(S)):\n\tprint('yes')\nelse:\n\tprint('no')\n", "def main():\n\ts = input()\n\tif len(set(s)) == len(s):\n\t\tprint('yes')\n\telse:\n\t\tprint('no')\n\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "s = input()\na = \"\"\nfor i in s:\n\tif a.find(i) == -1:\n\t\ta += i\n\telse:\n\t\tprint(\"no\")\n\t\tbreak\nelse:\n\tprint(\"yes\")\n", "s = list(input())\nwhile s:\n\tc = s.pop()\n\tif c in s:\n\t\tprint('no')\n\t\treturn\nprint('yes')\n", "S=input()\nfor i in range(len(S)) :\n\tfor j in range(i+1,len(S)) :\n\t\tif S[i]==S[j] :\n\t\t\tprint(\"no\")\n\t\t\treturn\nprint(\"yes\")\n", "S = input()\nprint(\"yes\") if len(S) == len(set(list(S))) else print(\"no\")\n", "S = str(input())\ndata1 = []\nfor i in range(len(S)):\n\tdata1.append(S[i])\ndata2 = list(set(data1))\n\nif len(data1) == len(data2):\n\tprint('yes')\nelse:\n\tprint('no')\n", "s=input()\ns=sorted(s)\nfor i in range(len(s)-1):\n\tif s[i]==s[i+1]:\n\t\tprint(\"no\")\n\t\treturn\nprint(\"yes\")\n", "# import math\n# import statistics\na=input()\n#b,c=int(input()),int(input())\nc=[]\nfor i in a:\n\tc.append(i)\n#e1,e2,e3,e4 = map(int,input().split())\n#f = list(map(int,input().split()))\n#g = [input() for _ in range(a)]\n\nd=set(c)\n\nif len(d)<len(c):\n\t print(\"no\")\nelse:\n\t print(\"yes\")\n", "#n = int(input())\n#a, b = map(int,input().split())\n#l = list(map(int,input().split()))\n#l = [list(map(int,input().split())) for i in range(n)]\ns = list(input())\nif len(s) == len(set(s)):\n\tprint('yes')\nelse:\n\tprint('no')\n", "s = input()\nletters = []\nans = 'yes'\nfor i in s:\n\tif i in letters:\n\t\tans = 'no'\n\t\tbreak\n\telse:\n\t\tletters.append(i)\nprint(ans)\n", "s = input()\nl = list(set(s))\nif len(s) == len(l):\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "s = input()\nprint(\"yes\" if len(s)==len(set(s)) else \"no\")\n", "S=input()\na=[0]*26\nnum=ord('a')\nfor i in range(len(S)):\n\ttmp=ord(S[i])-num\n\tif a[tmp]:\n\t\tprint('no')\n\t\tbreak\n\ta[tmp]=1\nelse:\n\tprint('yes')\n", "s = str(input())\n\nif len(s) == len(set(s)):\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "S = input()\nprint('yes' if len(set(S)) == len(S) else 'no')\n", "from collections import defaultdict\nimport sys\ns = input()\nn = len(s)\ndic = defaultdict(int)\n\nfor i in range(n):\n\tdic[s[i]] += 1\n\tif dic[s[i]]==2:\n\t\tprint(\"no\")\n\t\treturn\n\nprint('yes')\n", "S = list(input())\n\nS.sort()\n\nfor i in range(len(S)-1):\n\tif S[i] == S[i+1]:\n\t\tprint('no')\n\t\treturn\n\t\nprint('yes')\n\n", "S = input()\nif len(set(S)) == len(S):\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "s = str(input())\n\nif len(s) == len(set(s)):\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "s = input()\nfor i in range(len(s)-1):\n\tfor j in range(i+1,len(s)):\n\t\tif s[i] == s[j]:\n\t\t\tprint('no')\n\t\t\treturn\nprint('yes')\n", "s = input()\n\nlst1 = []\nfor i in range(len(s)):\n\tlst1.append(s[i])\nlst1.sort()\n\nlst2 = list(set(lst1))\nlst2.sort()\n\nif lst1 == lst2:\n\tprint('yes')\nelse:\n\tprint('no')\n", "s=input()\nprint(\"yes\" if len(s)==len(set(s)) else \"no\")\n", "S = input()\n\nif len(set(S)) == len(S):\n\tprint('yes')\n\t\nelse:\n\tprint('no')\n", "#ABC063\ns = input()\nprint(\"yes\" if len(set(s))==len(s) else \"no\")\n", "s = list(input())\nif len(s) == len(set(s)):\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "s = input()\nprint((\"yes\" if len(set(s)) == len(s) else \"no\"))\n", "# coding: utf-8\n\nstr = input()\ncount = 0\ntable = list(str)\nfor i in range(len(str) - 1):\n\tfor j in range(i+1, len(str)):\n\t\tif table[i] == table[j]:\n\t\t\tcount += 1\nif count == 0:\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "s = input()\n\nst = set()\nfor c in s:\n\tif c in st:\n\t\tprint(\"no\")\n\t\treturn\n\tst.add(c)\n\nprint(\"yes\")\n", "S = list(input())\nans = \"yes\"\nfor i in range(len(S)):\n\tch = S[i]\n\tS[i] = \"-1\"\n\tif ch in S:\n\t\tans = \"no\"\n\t\tbreak\nprint(ans)\n", "def answer(s: str) -> str:\n\treturn 'yes' if len(s) == len(set(s)) else 'no'\n\n\ndef main():\n\ts = input()\n\tprint(answer(s))\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "s=input()\nprint(\"yes\" if len(s)==len(set(s))  else \"no\")\n", "s=input()\nfor i in s:\n\tif s.count(i) != 1:\n\t\tprint(\"no\")\n\t\treturn\nprint('yes')\n", "S = input()\ndata = set()\nfor s in S:\n\tif s not in data:\n\t\tdata.add(s)\n\telse:\n\t\tprint(\"no\")\n\t\treturn\nprint(\"yes\")\n", "l = list(input())\ns = set(l)\nif len(s) == len(l):\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "s = list(input())\nn = len(s)\ns = set(s)\nnn = len(s)\n\nif n == nn:\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "import collections\ns = input()\nc = collections.Counter(s)\n\nif all(x == 1 for x in c.values()):\n\tprint('yes')\nelse:\n\tprint('no')\n", "s = list(input())\nif len(s) == len(set(s)):\n\tprint('yes')\nelse:\n\tprint('no')\n", "s=input()\nn=len(s)\nfor i in range(n):\n\tif s.count(s[i])!=1:\n\t\tprint('no')\n\t\treturn\nprint('yes')\n", "S = list(input())\ns = set(S)\nif(len(S)==len(s)):\n\tprint('yes')\nelse:\n\tprint('no')\n", "S = input()\nprint('yes' if len(S) == len(set(S)) else 'no')\n", "s = input()\n\nif len(set(s)) == len(s):\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "s = list(input())\nif len(s) == len(set(s)):\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n", "s = list(input())\n\nfor i in s:\n\tif s.count(i) > 1:\n\t\tprint('no')\n\t\tbreak\nelse:\n\tprint('yes')\n", "s = input()\nif len(s) == len(set(s)):\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")\n"], "id": "id6109"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6109", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["string", 1], ["s", 1], ["consisting", 1], ["of", 1], ["lowercase", 0], ["english", 0], ["letters", 0], ["determine", 0], ["whether", 0], ["all", 0], ["the", 0], ["characters", 0], ["in", 0], ["s", 0], ["are", 0], ["different", 0], ["constraints", 0], ["2", 0], ["≤", 0], ["s", 0], ["≤", 0], ["26", 0], ["where", 0], ["s", 0], ["denotes", 0], ["the", 0], ["length", 0], ["of", 0], ["s", 0], ["s", 0], ["consists", 0], ["of", 0], ["lowercase", 0], ["english", 0], ["letters", 0], ["input", 0], ["input", 0], ["is", 0], ["given", 0], ["from", 0], ["standard", 0], ["input", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["s", 0], ["output", 0], ["if", 1], ["all", 1], ["the", 1], ["characters", 0], ["in", 0], ["s", 0], ["are", 0], ["different", 0], ["print", 0], ["yes", 0], ["case", 0], ["sensitive", 0], ["otherwise", 0], ["print", 0], ["no", 0], ["sample", 0], ["input", 0], ["uncopyrightable", 0], ["sample", 0], ["output", 0], ["yes", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1527777777777778, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1527777777777778, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4166666666666667, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4166666666666667, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1527777777777778, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1527777777777778, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4166666666666667, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4166666666666667, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["math", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["as", 0], ["c", 0], ["product", 0], ["as", 0], ["p", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["inf", 0], ["float", 0], ["inf", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["si", 0], ["return", 0], ["input", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["fi", 0], ["return", 0], ["float", 0], ["input", 0], ["def", 0], ["lstr", 0], ["return", 0], ["input", 0], ["split", 0], ["def", 0], ["lint", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["lintdec", 0], ["return", 0], ["list", 0], ["map", 0], ["lambda", 0], ["x", 0], ["int", 0], ["x", 0], ["1", 0], ["input", 0], ["split", 0], ["def", 0], ["lnstr", 0], ["n", 0], ["return", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["lnint", 0], ["n", 0], ["return", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["lint", 0], ["list", 0], ["n", 0], ["return", 0], ["lint", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["si", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["else", 0], ["no", 0], ["s", 0], ["input", 0], ["s", 0], ["sorted", 0], ["s", 0], ["dif", 0], ["true", 0], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["dif", 0], ["false", 0], ["print", 0], ["yes", 0], ["if", 0], ["dif", 0], ["else", 0], ["no", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["set", 0], ["list", 0], ["s", 0], ["len", 0], ["s", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["t", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["count", 0], ["i", 0], ["1", 0], ["t", 0], ["false", 0], ["print", 0], ["yes", 0], ["if", 0], ["t", 0], ["else", 0], ["no", 0], ["s", 0], ["str", 0], ["input", 0], ["t", 0], ["t", 0], ["append", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["t", 0], ["print", 0], ["no", 0], ["return", 0], ["t", 0], ["append", 0], ["s", 0], ["i", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["ans", 0], ["yes", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["else", 0], ["no", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["not", 0], ["s", 0], ["i", 0], ["in", 0], ["l", 0], ["l", 0], ["append", 0], ["s", 0], ["i", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["s", 0], ["str", 0], ["input", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["l", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["l", 0], ["append", 0], ["i", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["res", 0], ["yes", 0], ["for", 5], ["i", 5], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["j", 0], ["res", 0], ["no", 0], ["print", 0], ["res", 0], ["s", 0], ["input", 0], ["se", 0], ["set", 0], ["s", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["se", 0], ["else", 0], ["no", 0], ["def", 0], ["main", 0], ["s", 0], ["input", 0], ["ans", 0], ["no", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["ans", 0], ["yes", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["count", 0], ["c", 0], ["1", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["s", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["input", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["import", 0], ["sys", 0], ["import", 0], ["copy", 0], ["import", 0], ["math", 0], ["import", 0], ["itertools", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["s", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["count", 0], ["s", 0], ["i", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["s", 0], ["list", 0], ["input", 0], ["l", 0], ["len", 0], ["s", 0], ["k", 0], ["set", 0], ["s", 0], ["if", 0], ["l", 0], ["len", 0], ["k", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["list", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["else", 0], ["no", 0], ["abc063", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["s", 0], ["input", 0], ["count", 0], ["counter", 0], ["s", 0], ["for", 0], ["cnt", 0], ["in", 0], ["count", 0], ["values", 0], ["if", 0], ["cnt", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["print", 0], ["yes", 0], ["coding", 0], ["utf", 0], ["8", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["main", 0], ["s", 0], ["input", 0], ["rstrip", 0], ["string", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["string", 0], ["dict", 0], ["d", 0], ["i", 0], ["1", 0], ["string", 0], ["dict", 0], ["update", 0], ["d", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["31", 0], ["s", 0], ["str", 0], ["input", 0], ["list", 0], ["ans", 0], ["yes", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["for", 0], ["past", 0], ["in", 0], ["list", 0], ["if", 0], ["s", 0], ["past", 0], ["ans", 0], ["no", 0], ["break", 0], ["if", 0], ["ans", 0], ["no", 0], ["break", 0], ["list", 0], ["append", 0], ["s", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["list", 0], ["set", 0], ["list", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["n1", 0], ["len", 0], ["s", 0], ["n2", 0], ["len", 0], ["set", 0], ["s", 0], ["if", 0], ["n1", 0], ["n2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["ls", 0], ["check", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["ls", 0], ["check", 0], ["false", 0], ["break", 0], ["ls", 0], ["append", 0], ["s", 0], ["i", 0], ["print", 0], ["yes", 0], ["if", 0], ["check", 0], ["else", 0], ["no", 0], ["s", 0], ["input", 0], ["def", 0], ["duplicate", 0], ["seq", 0], ["seen", 0], ["unique", 0], ["x", 82], ["for", 0], ["x", 0], ["in", 0], ["seq", 0], ["if", 0], ["x", 0], ["not", 0], ["in", 0], ["seen", 0], ["and", 0], ["not", 0], ["seen", 0], ["append", 0], ["x", 0], ["return", 0], ["len", 0], ["seq", 0], ["len", 0], ["unique", 0], ["if", 0], ["duplicate", 0], ["s", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["string", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["string", 0], ["len", 0], ["set", 0], ["string", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["else", 0], ["no", 0], ["a", 0], ["0", 0], ["26", 0], ["s", 0], ["input", 0], ["i", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["i", 0], ["len", 0], ["s", 0], ["print", 0], ["yes", 0], ["break", 0], ["b", 0], ["ord", 0], ["s", 0], ["i", 0], ["97", 0], ["if", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["a", 0], ["b", 0], ["1", 0], ["i", 0], ["1", 0], ["data", 0], ["list", 0], ["input", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["data", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["len", 0], ["data", 0], ["if", 0], ["data", 0], ["i", 0], ["data", 0], ["j", 0], ["c", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["else", 0], ["no", 0], ["「abc", 0], ["154", 0], ["c」の類題", 0], ["s", 0], ["input", 0], ["n1", 0], ["len", 0], ["s", 0], ["n2", 0], ["len", 0], ["set", 0], ["s", 0], ["if", 0], ["n1", 0], ["n2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["str", 0], ["input", 0], ["chars", 0], ["set", 0], ["ans", 0], ["yes", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["c", 0], ["in", 0], ["chars", 0], ["ans", 0], ["no", 0], ["break", 0], ["chars", 0], ["add", 0], ["c", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["ans", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["count", 0], ["s", 0], ["1", 0], ["ans", 0], ["no", 0], ["break", 0], ["else", 0], ["ans", 0], ["yes", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["t", 0], ["sorted", 0], ["s", 0], ["u", 0], ["set", 0], ["t", 0], ["u", 0], ["sorted", 0], ["u", 0], ["if", 0], ["t", 0], ["u", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["main", 0], ["s", 0], ["input", 0], ["answer", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["s", 0], ["i", 0], ["1", 0], ["answer", 0], ["no", 0], ["print", 0], ["answer", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["c", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["j", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["1", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["len", 0], ["s", 0], ["print", 0], ["yes", 0], ["break", 0], ["u", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["u", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["len", 0], ["u", 0], ["if", 0], ["u", 0], ["i", 0], ["u", 0], ["j", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["l", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["l", 0], ["append", 0], ["i", 0], ["print", 0], ["yes", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["string", 0], ["counter", 0], ["input", 0], ["for", 0], ["in", 0], ["string", 0], ["values", 0], ["if", 0], ["1", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["bool", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["j", 0], ["bool", 0], ["false", 0], ["if", 0], ["bool", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["else", 0], ["no", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["d", 0], ["deque", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["if", 0], ["s", 0], ["in", 0], ["d", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["d", 0], ["append", 0], ["s", 0], ["print", 0], ["yes", 0], ["coding", 0], ["utf", 0], ["8", 0], ["s", 0], ["input", 0], ["past", 0], ["ans", 0], ["yes", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["not", 0], ["in", 0], ["past", 0], ["past", 0], ["append", 0], ["s", 0], ["else", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["word", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["word", 0], ["word", 0], ["append", 0], ["i", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["else", 0], ["no", 0], ["import", 0], ["sys", 0], ["s", 0], ["input", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["count", 0], ["s", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["a", 0], ["input", 0], ["b", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["b", 0], ["append", 0], ["a", 0], ["i", 0], ["b", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["1", 0], ["if", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["c", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["t", 0], ["set", 0], ["for", 0], ["x", 0], ["in", 0], ["s", 0], ["if", 0], ["x", 0], ["in", 0], ["t", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["t", 0], ["add", 0], ["x", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["else", 0], ["no", 0], ["s", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["s", 0], ["i", 0], ["1", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["s", 0], ["list", 0], ["input", 0], ["s", 0], ["sort", 0], ["count", 0], ["0", 0], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["typing", 0], ["import", 0], ["list", 0], ["s", 0], ["list", 0], ["input", 0], ["type", 0], ["list", 0], ["str", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["main", 0], ["s", 0], ["input", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["a", 0], ["find", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["else", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["s", 0], ["list", 0], ["input", 0], ["while", 0], ["s", 0], ["c", 0], ["s", 0], ["pop", 0], ["if", 0], ["c", 0], ["in", 0], ["s", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["for", 5], ["i", 5], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["j", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["list", 0], ["s", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["str", 0], ["input", 0], ["data1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["data1", 0], ["append", 0], ["s", 0], ["i", 0], ["data2", 0], ["list", 0], ["set", 0], ["data1", 0], ["if", 0], ["len", 0], ["data1", 0], ["len", 0], ["data2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["s", 0], ["sorted", 0], ["s", 1], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["import", 0], ["math", 0], ["import", 0], ["statistics", 0], ["a", 0], ["input", 0], ["b", 0], ["c", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["c", 0], ["append", 0], ["i", 0], ["e1", 0], ["e2", 0], ["e3", 0], ["e4", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["a", 0], ["d", 0], ["set", 0], ["c", 0], ["if", 0], ["len", 0], ["d", 0], ["len", 0], ["c", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["list", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["letters", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["letters", 0], ["ans", 0], ["no", 0], ["break", 0], ["else", 0], ["letters", 0], ["append", 0], ["i", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["l", 0], ["list", 0], ["set", 0], ["s", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["l", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["else", 0], ["no", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["26", 0], ["num", 0], ["ord", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["tmp", 0], ["ord", 0], ["s", 0], ["i", 0], ["num", 0], ["if", 0], ["a", 0], ["tmp", 0], ["print", 0], ["no", 0], ["break", 0], ["a", 0], ["tmp", 0], ["1", 0], ["else", 0], ["print", 0], ["yes", 0], ["s", 0], ["str", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["else", 0], ["no", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["import", 0], ["sys", 0], ["s", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["dic", 0], ["defaultdict", 0], ["int", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dic", 0], ["s", 0], ["i", 0], ["1", 0], ["if", 0], ["dic", 0], ["s", 0], ["i", 0], ["2", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["s", 0], ["list", 0], ["input", 0], ["s", 0], ["sort", 0], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["str", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["j", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["lst1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["lst1", 0], ["append", 0], ["s", 0], ["i", 0], ["lst1", 0], ["sort", 0], ["lst2", 0], ["list", 0], ["set", 0], ["lst1", 0], ["lst2", 0], ["sort", 0], ["if", 0], ["lst1", 0], ["lst2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["else", 0], ["no", 0], ["s", 0], ["input", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["abc063", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["else", 0], ["no", 0], ["s", 0], ["list", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["else", 0], ["no", 0], ["coding", 0], ["utf", 0], ["8", 0], ["str", 0], ["input", 0], ["count", 0], ["0", 0], ["table", 0], ["list", 0], ["str", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["str", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["len", 0], ["str", 0], ["if", 0], ["table", 0], ["i", 0], ["table", 0], ["j", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["st", 0], ["set", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["c", 0], ["in", 0], ["st", 0], ["print", 0], ["no", 0], ["return", 0], ["st", 0], ["add", 0], ["c", 0], ["print", 0], ["yes", 0], ["s", 0], ["list", 0], ["input", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["ch", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["if", 0], ["ch", 0], ["in", 0], ["s", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["def", 0], ["answer", 0], ["s", 0], ["str", 0], ["str", 0], ["return", 0], ["yes", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["else", 0], ["no", 0], ["def", 0], ["main", 0], ["s", 0], ["input", 0], ["print", 0], ["answer", 0], ["s", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["else", 0], ["no", 0], ["s", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["count", 0], ["i", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["data", 0], ["set", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["not", 0], ["in", 0], ["data", 0], ["data", 0], ["add", 0], ["s", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["l", 0], ["list", 0], ["input", 0], ["s", 0], ["set", 0], ["l", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["l", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["list", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["s", 0], ["set", 0], ["s", 0], ["nn", 0], ["len", 0], ["s", 0], ["if", 0], ["n", 0], ["nn", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["collections", 0], ["s", 0], ["input", 0], ["c", 0], ["collections", 0], ["counter", 0], ["s", 0], ["if", 0], ["all", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["c", 0], ["values", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["list", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["count", 0], ["s", 0], ["i", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["s", 0], ["list", 0], ["input", 0], ["s", 0], ["set", 0], ["s", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["input", 0], ["print", 0], ["yes", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["else", 0], ["no", 0], ["s", 0], ["input", 0], ["if", 0], ["len", 0], ["set", 0], ["s", 0], ["len", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["list", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["list", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["count", 0], ["i", 0], ["1", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["s", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["len", 0], ["set", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00463821892393321, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0026958233404226436, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.043357933579335796, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.027102646026460255, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.004174397031539889, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.002690166975881262, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.03736162361623616, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.027029520295202943, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nVova promised himself that he would never play computer games... But recently Firestorm — a well-known game developing company — published their newest game, World of Farcraft, and it became really popular. Of course, Vova started playing it.\n\nNow he tries to solve a quest. The task is to come to a settlement named Overcity and spread a rumor in it.\n\nVova knows that there are n characters in Overcity. Some characters are friends to each other, and they share information they got. Also Vova knows that he can bribe each character so he or she starts spreading the rumor; i-th character wants c_{i} gold in exchange for spreading the rumor. When a character hears the rumor, he tells it to all his friends, and they start spreading the rumor to their friends (for free), and so on.\n\nThe quest is finished when all n characters know the rumor. What is the minimum amount of gold Vova needs to spend in order to finish the quest?\n\nTake a look at the notes if you think you haven't understood the problem completely.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of characters in Overcity and the number of pairs of friends.\n\nThe second line contains n integer numbers c_{i} (0 ≤ c_{i} ≤ 10^9) — the amount of gold i-th character asks to start spreading the rumor.\n\nThen m lines follow, each containing a pair of numbers (x_{i}, y_{i}) which represent that characters x_{i} and y_{i} are friends (1 ≤ x_{i}, y_{i} ≤ n, x_{i} ≠ y_{i}). It is guaranteed that each pair is listed at most once.\n\n\n-----Output-----\n\nPrint one number — the minimum amount of gold Vova has to spend in order to finish the quest.\n\n\n-----Examples-----\nInput\n5 2\n2 5 3 4 8\n1 4\n4 5\n\nOutput\n10\n\nInput\n10 0\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n55\n\nInput\n10 5\n1 6 2 7 3 8 4 9 5 10\n1 2\n3 4\n5 6\n7 8\n9 10\n\nOutput\n15\n\n\n\n-----Note-----\n\nIn the first example the best decision is to bribe the first character (he will spread the rumor to fourth character, and the fourth one will spread it to fifth). Also Vova has to bribe the second and the third characters, so they know the rumor.\n\nIn the second example Vova has to bribe everyone.\n\nIn the third example the optimal decision is to bribe the first, the third, the fifth, the seventh and the ninth characters.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["#python3\n# utf-8\n\nnodes_nr, edges_nr = (int(x) for x in input().split())\nnode_idx___cost = [int(x) for x in input().split()]\nnode_idx___neigh_idxes = [[] for x in range(nodes_nr)]\nfor _ in range(edges_nr):\n\tnode1_idx, node2_idx = (int(x) - 1 for x in input().split())\n\tnode_idx___neigh_idxes[node1_idx].append(node2_idx)\n\tnode_idx___neigh_idxes[node2_idx].append(node1_idx)\n\nnode_idx___is_visited = [False for x in range(nodes_nr)]\n\nans = 0\nfor node_idx in range(nodes_nr):\n\tif node_idx___is_visited[node_idx]:\n\t\tcontinue\n\tstack = [node_idx]\n\tnode_idx___is_visited[node_idx] = True\n\tcheapest_cost = node_idx___cost[node_idx]\n\twhile stack:\n\t\tcurr_node_idx = stack.pop()\n\t\tfor neigh_idx in node_idx___neigh_idxes[curr_node_idx]:\n\t\t\tif node_idx___is_visited[neigh_idx]:\n\t\t\t\tcontinue\n\t\t\tstack.append(neigh_idx)\n\t\t\tcheapest_cost = min(cheapest_cost, node_idx___cost[neigh_idx])\n\t\t\tnode_idx___is_visited[neigh_idx] = True\n\tans += cheapest_cost\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\n\"\"\"\ncreated by shhuan at 2017/11/23 23:13\n\n\"\"\"\n\nN, M = list(map(int, input().split()))\ncost = [0] + [int(x) for x in input().split()]\n#\n# N, M = random.randint(1, 10**5), random.randint(0, 10**5)\n# cost = [0] + [random.randint(0, 10**9) for _ in range(N)]\n\nG = collections.defaultdict(list)\n\nfor i in range(M):\n\ta, b = list(map(int, input().split()))\n\t# a, b = random.randint(1, N), random.randint(1, N)\n\tG[a].append(b)\n\tG[b].append(a)\n\n\ngroup = [0] * (N+1)\ngi = 1\n\n# def dfs(u, fa, gi):\n#     group[u] = gi\n#     for v in G[u]:\n#         if v != fa and group[v] == 0:\n#             dfs(v, u, gi)\n\ndef makeGroup(u, gi):\n\tq = [u]\n\twhile q:\n\t\tu = q.pop()\n\t\tgroup[u] = gi\n\t\tfor v in G[u]:\n\t\t\tif group[v] == 0:\n\t\t\t\tq.append(v)\n\n\nfor i in range(1, N+1):\n\tif not group[i]:\n\t\tgi += 1\n\t\tmakeGroup(i, gi)\n\nfor i in range(1, N+1):\n\tif group[i] == 0:\n\t\tgi += 1\n\t\tgroup[i] = gi\n\nminCost = {}\nfor i in range(1, N+1):\n\tg = group[i]\n\tc = cost[i]\n\tif g not in minCost:\n\t\tminCost[g] = c\n\telse:\n\t\tminCost[g] = min(minCost[g], c)\n\nprint(sum(list(minCost.values()) or [0]))\n\n\n", "\nfrom collections import deque\n\nstart = list(map(int, (input().strip().split())))\ncost = list(map(int, (input().strip().split())))\ndp = dict()\nfor _ in range(start[1]):\n\tk = list(map(int, (input().strip().split())))\n\tif k[0] - 1 not in dp:\n\t\tdp[k[0] - 1] = dict()\n\tif k[1] - 1 not in dp:\n\t\tdp[k[1] - 1] = dict()\n\tdp[k[0] - 1][k[1] - 1] = 0\n\tdp[k[1] - 1][k[0] - 1] = 0\n\ncounted = dict()\nanswer = 0\nfor index, value in enumerate(cost):\n\tif index not in dp:\n\t\tanswer += value\n\telif index in counted:\n\t\tcontinue\n\telse:\n\t\tnow = index\n\t\tplus = value\n\t\tcounted[index] = 0\n\t\tdec = deque()\n\t\tfor key in dp[now]:\n\t\t\tdec.append(key)\n\t\twhile len(dec) > 0:\n\t\t\tk = dec.popleft()\n\t\t\tif k in counted:\n\t\t\t\tcontinue\n\t\t\tplus = min(plus, cost[k])\n\t\t\tcounted[k] = 0\n\t\t\tif k in dp:\n\t\t\t\tfor key in dp[k]:\n\t\t\t\t\tdec.append(key)\n\t\tanswer += plus\nprint(answer)\n", "def bfs(i):\n\tnonlocal p, f, v\n\n\tq = [i]\n\tqi = 0\n\t\n\tv[i] = 1\n  \n\tbest = p[i]\n\n\twhile qi < len(q):\n\t\tj = q[qi]\n\t\tif p[j] < best:\n\t\t\tbest = p[j]\n\t\tfor k in f[j]:\n\t\t\tif v[k] != 1:\n\t\t\t\tq.append(k)\n\t\t\t\tv[k] = 1\n\t\tqi += 1\n\n\treturn best\n\nn, m = [int(i) for i in input().split(\" \")]\n\np = [int(i) for i in input().split(\" \")]\nv = [0]*n\nf = {}\n\nfor a in range(n):\n\tf[a] = []\n\nfor a in range(m):\n\tx, y = [int(i) for i in input().split(\" \")]\n\tf[x-1].append(y-1)\n\tf[y-1].append(x-1)\n\ncost = 0\nfor i in range(n):\n\tif v[i] == 0:\n\t\tcost += bfs(i)\n\nprint(cost)\n\n\n", "from collections import defaultdict\n\nclass Graph(object):\n\tdef __init__(self, connections, directed=False):\n\t\tself._graph = defaultdict(set)\n\t\tself._directed = directed\n\t\tself.add_connections(connections)\n\n\tdef add_connections(self, connections):\n\t\tfor node1, node2 in connections:\n\t\t\tself.add(node1, node2)\n\n\tdef add(self, node1, node2):\n\t\tself._graph[node1].add(node2)\n\t\tif not self._directed:\n\t\t\tself._graph[node2].add(node1)\n\n\tdef __str__(self):\n\t\treturn '{}({})'.format(self.__class__.__name__, dict(self._graph))\n\t\n\tdef __getitem__(self, index):\n\t\treturn self._graph[index]\n\ndef bfs(graph, start):\n    visited, queue = set(), [start]\n    while queue:\n        vertex = queue.pop(0)\n        if vertex not in visited:\n            visited.add(vertex)\n            queue.extend(graph[vertex] - visited)\n    return visited\n    \nn, m = list(map(int, input().split()))\ng = list(map(int, input().split()))\nf = [list(map(int, input().split()))for _ in range(m)]\nv = Graph(f)\nfg = []\nvi = [False]*n\nfor i in range(0, n):\n\tif vi[i]:\n\t\tcontinue\n\tcc = bfs(v, i+1)\n\tfor e in cc:\n\t\tvi[e-1] = True\n\tfg.append(cc)\nprint(sum(min(g[e-1] for e in _g) for _g in fg))\n\n", "def dfs(graph, start):\n\tvisited, stack = set(), [start]\n\twhile stack:\n\t\tvertex = stack.pop()\n\t\tif vertex not in visited:\n\t\t\tvisited.add(vertex)\n\t\t\tstack.extend(graph[vertex] - visited)\n\treturn visited, min([prices[v] for v in visited])\n\n\nn, m = list(map(int, input().split()))\nprices = [0] + list(map(int, input().split()))\nfriendship = {x: set() for x in range(1, n+1)}\nfor _ in range(m):\n\tx, y = list(map(int, input().split()))\n\tfriendship[x].add(y)\n\tfriendship[y].add(x)\n# print(friendship)\ncitizens = set(range(1, n+1))\nans = 0\nwhile citizens:\n\tv = citizens.pop()\n\tvisited, p = dfs(friendship, v)\n\tcitizens.difference_update(visited)\n\tans += p\nprint(ans)\n\n", "from collections import deque\n\nn,m=list(map(int,input().split()))\nc=list(map(int,input().split()))\nadj=[[] for _ in range(100000)]\nfor _ in range(m):\n\tx,y=list(map(int,input().split()))\n\tx-=1\n\ty-=1\n\tadj[x].append(y)\n\tadj[y].append(x)\nans=0\nused=[False]*n\nfor i in range(n):\n\tif used[i]:\n\t\tcontinue\n\ts=[c[i]]\n\tused[i]=True\n\tq=deque([])\n\tq.append(i)\n\twhile len(q)>0:\n\t\tu=q.popleft()\n\t\tfor j in range(len(adj[u])):\n\t\t\tv=adj[u][j]\n\t\t\tif not used[v]:\n\t\t\t\tused[v]=True\n\t\t\t\ts.append(c[v])\n\t\t\t\tq.append(v)\n\tans+=min(s)\nprint(ans)\n", "n, m = list(map(int, input().split()))\nvs = list(map(int, input().split()))\nif m == 0:\n\tprint(sum(vs))\n\treturn\n# n = 100000\n# m = n - 1\n# vs = [0] * n\nes = {i: [] for i in range(n)}\nvisited = {i: False for i in range(n)}\ncomps = []\n\n\n# def dfs(vv, compp):\n#     # nonlocal visited, es\n#     if visited[vv]:\n#         return\n#     visited[vv] = True\n#     compp.append(vv)\n#     neighs = es[vv]\n#     for neigh in neighs:\n#         if visited[neigh] or neigh == vv:\n#             continue\n#         dfs(neigh, compp)\n\n\nfor i in range(m):\n\tf, t = list(map(int, input().split()))\n\t# f, t = i + 1, i + 2\n\tes[f-1].append(t-1)\n\tes[t-1].append(f-1)\n\nfor v in range(n):\n\tif visited[v]:\n\t\tcontinue\n\tcomp = []\n\tdeque = [v]\n\twhile deque:\n\t\tv_temp = deque.pop(0)\n\t\tif visited[v_temp]:\n\t\t\tcontinue\n\t\tvisited[v_temp] = True\n\t\tcomp.append(v_temp)\n\t\tfor neigh in es[v_temp]:\n\t\t\tif visited[neigh] or neigh == v_temp:\n\t\t\t\tcontinue\n\t\t\tdeque.append(neigh)\n\tcomps.append(comp)\n# print(es)\nres = 0\nfor comp in comps:\n\tif not comp:\n\t\tcontinue\n\tres += min(vs[i] for i in comp)\n\nprint(res)\n", "\nfrom collections import deque\n\nclass Person:\n\tdef __init__(self):\n\t\tself.friends = []\n\t\tself.taken = False\n\t\tself.price = 0\n\ndef fill(person):\n\tqueue = deque([])\n\tqueue.append(person)\n\tminimum = person.price\n\n\twhile queue:\n\t\tp = queue.popleft()\n\t\tp.taken = True\n\t\tminimum = min(minimum, p.price)\n\t\tfor f in p.friends:\n\t\t\tif not f.taken:\n\t\t\t\tqueue.append(f)\n\treturn minimum\n\n\nN, M = map(int, input().split())\n\npeople = [Person() for _ in range(0, N)]\n\nprices = list(map(int, input().split()))\nfor i in range(0, N):\n\tpeople[i].price = prices[i]\n\nfor _ in range(0, M):\n\tu, v = map(int, input().split())\n\tpeople[u-1].friends.append(people[v-1])\n\tpeople[v-1].friends.append(people[u-1])\n\ncost = 0\nfor p in people:\n\tif not p.taken:\n\t\tcost += fill(p)\n\nprint(cost)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Nov 19 07:28:11 2017\n\n@author: fei\n\"\"\"\nn, m = [int(i) for i in input().split(' ')]\nc = [int(i) for i in input().split(' ')]\nchars = [[] for _ in range(n)]\nfor _ in range(m):\n\tp, q = [int(i) for i in input().split(' ')]\n\tp = p - 1\n\tq = q - 1\n\tchars[p].append(q)\n\tchars[q].append(p)\n\ndef dfs(i, nodes):\n\tif Visited[i]:\n\t\treturn\n\tVisited[i] = True\n\tnodes.append(i)\n\tfor j in chars[i]:\n\t\tdfs(j, nodes)\n\nVisited = [False for i in range(n)]\nGraph = []\nC = 0\nfor i in range(n):\n\tif not Visited[i]:\n\t\tnodes = []\n\t\tnodes.append(i)\n\t\ttmp = 10000000000\n\t\twhile len(nodes) > 0:\n\t\t\tu = nodes.pop()\n\t\t\tif Visited[u] == False:\n\t\t\t\tVisited[u] = True\n\t\t\t\ttmp = min(tmp, c[u])\n\t\t\t\tfor j in chars[u]:\n\t\t\t\t\tnodes.append(j)\n\t\tC += tmp\n\t\tGraph.append(nodes)\n\nprint(C)\n", "import threading, sys\nsys.setrecursionlimit(10 ** 9)\nthreading.stack_size(67108864)\n\ndef main():\n\tn, m = [int(x) for x in input().split()]\n\tc = [int(x) for x in input().split()]\n\tgraph = {int(x) + 1:[] for x in range(n)}\n\t\n\tfor i in range(m):\n\t\tff, sf = [int(x) for x in input().split()]\n\t\tgraph[ff].append(sf)\n\t\tgraph[sf].append(ff)\n\t\t\n\tcomps = {}\n\tcl = [-1] * n\n\t\n\tdef dfs(v, c, p):\n\t\tcl[v - 1] = c\n\t\tif c not in comps:\n\t\t\tcomps[c] = []\n\t\tcomps[c].append(v)\n\t\tfor i in graph[v]:\n\t\t\tif i != p:\n\t\t\t\tif cl[i - 1] == -1:\n\t\t\t\t\tdfs(i, c, v)\n\t\n\tcc = 1\n\tfor i in range(n):\n\t\tif cl[i] == -1:\n\t\t\tdfs(i + 1, cc, -1)\n\t\t\tcc += 1\n\t\t\t\n\tprice = 0\n\t\n\tfor i in comps:\n\t\tminp = 999999999999999\n\t\tfor j in comps[i]:\n\t\t\tminp = min(c[j - 1], minp)\n\t\tprice += minp\n\tprint(price)\n\t\nthread = threading.Thread(target=main)\nthread.start()\n", "from sys import setrecursionlimit\nimport threading\nsetrecursionlimit(10 ** 9)\nthreading.stack_size(67108864)\n\ndef main():\n\tdef dfs(v,cv):\n\t\tcolor[v]=cv\n\t\tfor u in d[v]:\n\t\t\tif color[u]==0:\n\t\t\t\tdfs(u,cv)\n\n\tn,m=map(int,input().split())\n\tc=list(map(int,input().split()))\n\td={x:[] for x in range(n+1)}\n\tfor i in range(m):\n\t\tx,y=map(int,input().split())\n\t\td[x].append(y)\n\t\td[y].append(x)\n\tcolor=[0]*(n+1)\n\tcv=1\n\tfor i in range(1,n+1):\n\t\tif color[i]==0:\n\t\t\tdfs(i,cv)\n\t\t\tcv+=1\n\ts={}\n\tfor i in range(1,n+1):\n\t\tif color[i] in s:\n\t\t\ts[color[i]].append(c[i-1])\n\t\telse:\n\t\t\ts[color[i]]=[c[i-1]]\n\tx=0\n\tfor i in s:\n\t\tx+=min(s[i])\n\tprint(x)\nthread = threading.Thread(target=main)\nthread.start()\n", "from collections import defaultdict as dd\ng=dd(list)\ndef addE(u,v):\n\tg[u].append(v)\n\tg[v].append(u)\n\ndef dfs(v):\n\tstck=[]\n\tstck.append(v)\n\tcost1=cost[v-1]\n\tvisited[v]=True\n\twhile len(stck)!=0:\n\t\tcur=stck.pop()\n\t\tfor ch in g[cur]:\n\t\t\tif visited[ch]:\n\t\t\t\tcontinue\n\t\t\tcost1=min(cost1,cost[ch-1])\n\t\t\tstck.append(ch)\n\t\t\tvisited[ch]=True\n\treturn cost1\n\n\n\nn,m=list(map(int,input().split()))\ncost=[int(x) for x in input().split()]\nvisited=[False]*(n+1)\nfor i in range(m):\n\tu,v=list(map(int,input().split()))\n\taddE(u,v)\nans=0\nfor i in range(1,n+1):\n\tif not visited[i]:\n\t\tans+=dfs(i)\n\t\n\nfor i in range(1,n+1):\n\tif not visited[i]:\n\t\tans+=cost[i-1]\nprint(ans)\n", "import sys, threading\nsys.setrecursionlimit(100010)\nthreading.stack_size(67108864)\n\nres = 0\n\ndef main():\n\tn,m=list(map(int,input().split()))\n\tc=[int(c) for c in input().split()]\n\tg={}\n\t\n\t\n\tflag=[0 for i in range(n) ]\n\t\n\t \n\tfor i in range(n):\n\t\tg[i]=[]\n\t\t\n\tfor i in range(m):\n\t\tp,o=list(map(int ,input().split()))\n\t\to-=1\n\t\tp-=1\n\t\tg[o].append(p)\n\t\tg[p].append(o)\n\t\t\n\tdef glu(v,p,k):\n\t\tnonlocal res\n\t\tif flag[v]==0:\n\t\t\tflag[v]=k\n\t\t\tfor i in g[v]:\n\t\t\t\tif i!=p:\n\t\t\t\t\tglu(i,v,k)\n\tk=1\n\tfor i in range(n):\n\t\tl=flag[i]\n\t\tglu(i,-1,k)\n\t\tif l==0:\n\t\t\tk+=1\n\tmn={}\n\tfor i in range(max(flag)):\n\t\tmn[i]=10**9 \n\tfor i in range(n):\n\t\tif mn[flag[i]-1]>=c[i]:\n\t\t\tmn[flag[i]-1]=c[i]\n\tsu=0\n\tfor i in range(len(mn)):\n\t\t\tsu+=mn[i]    \n\tprint(su)    \n\t\n\t\n\nthread = threading.Thread(target=main)\nthread.start()\n", "import sys, threading\nsys.setrecursionlimit(100010)\nthreading.stack_size(67108864)\n#sys.stdin=open(\"input.txt\",\"r\")\n\n\ndef main():\n\tn,m=list(map(int,input().split()))\n\tc=list(map(int,input().split()))\n\tedge=[[] for i in range(n)]\n\tfor i in range(m):\n\t\tu,v=list(map(int,input().split()))\n\t\tu-=1\n\t\tv-=1\n\t\tedge[u].append(v)\n\t\tedge[v].append(u)\n\tflag=[0]*n\n\n\tdef dfs(u,k):\n\t\tflag[u]=k;\n\t\tfor v in edge[u]:\n\t\t\tif(flag[v]==0):\n\t\t\t\tdfs(v,k)\n\n\tcnt = 0\n\tfor u in range(n):\n\t\tif(flag[u]==0):\n\t\t\tcnt+=1\n\t\t\tdfs(u,cnt)\n\n\tmn=[0x3f3f3f3f]*(cnt+1)\n\n\tfor u in range(n):\n\t\tmn[flag[u]]=min(mn[flag[u]],c[u])\n\n\tprint(sum(mn[1:]))\n\nthread=threading.Thread(target=main)\nthread.start()\n\n\n", "from collections import defaultdict\nmerge_matrix = defaultdict(list)\nn, m = list(map(int, input().split()))\nprice_list = [int(x) for x in input().split()]\nsummary = 0\nvisited = set()\n\n\ndef dfs(edge):\n\tqueue = []\n\tvisited.add(edge)\n\tqueue.append(edge)\n\tlowest_cost = price_list[edge-1]\n\twhile len(queue) > 0:\n\t\tcur_edge = queue.pop()\n\t\tfor i in merge_matrix[cur_edge]:\n\t\t\tif i not in visited:\n\t\t\t\tlowest_cost = min(lowest_cost, price_list[i - 1])\n\t\t\t\tqueue.append(i)\n\t\t\t\tvisited.add(i)\n\treturn lowest_cost\n\n\nfor i in range(m):\n\tx, y = list(map(int, input().split()))\n\tmerge_matrix[x].append(y)\n\tmerge_matrix[y].append(x)\nfor i in range(1, n+1):\n\tif i not in visited:\n\t\tsummary += dfs(i)\nfor i in range(1, n+1):\n\tif i not in visited:\n\t\tsummary += price_list[i-1]\nprint(summary)\n", "R=lambda:list(map(int,input().split()))\nn,m=R()\np=[i for i in range(n+1)]\n\ndef find(i):\n\twhile p[i] != i:\n\t\tp[i] = p[p[i]]\n\t\ti = p[i]\n\treturn i\n\t\nc=[0]+list(R())\nfor _ in range(m):\n\tx,y=list(map(find,R()))\n\tif c[x]<c[y]:\n\t\tx,y=y,x\n\tp[x]=y\nprint(sum(c[i] for i in range(n+1) if p[i]==i))\n", "n, m = map(int, input().split())\nc = list(map(int, input().split()))\ng = [[] for i in range(n)]\nfor i in range(m):\n\ta,b = map(int, input().split())\n\tg[a-1].append(b-1)\n\tg[b-1].append(a-1)\n\nvs = [False for i in range(n)]\nans = 0\nfor i in range(n):\n\tif vs[i]:\n\t\tcontinue\n\tq = [i]\n\tvs[i] = True\n\tm = c[i]\n\twhile len(q) > 0:\n\t\tv = q[0]\n\t\tdel q[0]\n\t\tfor u in g[v]:\n\t\t\tif not vs[u]:\n\t\t\t\tvs[u] = True\n\t\t\t\tq.append(u)\n\t\t\t\tm = min(m, c[u])\n\tans += m\n\t\nprint(ans)\n", "def get():\n\treturn list(map(int, input().split()))\n\ndef dfs(i):\n\tv = c[i]\n\tq = [i]\n\twhile q:\n\t\tj = q.pop()\n\t\tb[j] = 1\n\t\tv = min(v, c[j])\n\t\tfor k in a[j]:\n\t\t\tif b[k] == 0:\n\t\t\t\tq.append(k)\n\treturn v\n\t\nn, m = get()\nc = get()\na = [list() for _ in range(n)]\nfor _ in range(m):\n\tx, y = get()\n\ta[x-1].append(y-1)\n\ta[y-1].append(x-1)\n\nb = [0] * n\nans = 0\nfor i in range(n):\n\tif b[i] == 0:\n\t\tans += dfs(i)\n\nprint(ans)\n", "from collections import deque\n\n\ndef dfs(n):\n\t\"\"\"\n\tTraverse graph using DFS\n\t@return: minimum gold value of connected group\n\t\"\"\"\n\tnonlocal visited\n\tminimum = -1\n\tqueue = deque([n])\n\twhile queue:\n\t\tnode = queue.popleft()\n\t\tvisited[node] = True\n\t\tif minimum == -1:\n\t\t\tminimum = gold[node]\n\t\telse:\n\t\t\tminimum = min(minimum, gold[node])\n\t\tfor neighbor in adj_list[node]:\n\t\t\tif not visited[neighbor - 1]:\n\t\t\t\tqueue.append(neighbor - 1)\n\treturn minimum\n\n\nn, m = list(map(int, input().split()))\ngold = list(map(int, input().split()))\nadj_list = [list() for _ in range(n)]\nfor _ in range(m):\n\tx, y = list(map(int, input().split()))\n\tadj_list[x - 1].append(y)\n\tadj_list[y - 1].append(x)\nvisited = [False for _ in range(n)]\ntotal = 0\nfor i in range(n):\n\tif not visited[i]:\n\t\ttotal += dfs(i)\nprint(total)\n", "n, m = list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nfa = [0] + [i + 1 for i in range(n)]\n\ndef findFa(x):\n\ts = []\n\twhile fa[x] != x:\n\t\ts.append(x)\n\t\tx = fa[x]\n\tfor v in s:\n\t\tfa[v] = x\n\treturn x\n\nwhile m:\n\tu, v = list(map(int, input().split()))\n\tu = findFa(u)\n\tv = findFa(v)\n\tif u != v:\n\t\tfa[v] = u\n\t\ta[u] = min(a[u], a[v])\n\tm -= 1\nres = 0\nfor i in range(1, n + 1):\n\tif findFa(i) == i:\n\t\tres += a[fa[i]]\nprint(res)\n\n", "def dfs(graph, start):\n\tvisited, stack = set(), [start]\n\twhile stack:\n\t\tvertex = stack.pop()\n\t\tif vertex not in visited:\n\t\t\tvisited.add(vertex)\n\t\t\tstack.extend(graph[vertex] - visited)\n\treturn visited, min([prices[v] for v in visited])\n\n\nn, m = list(map(int, input().split())); ans = 0\nprices = [None] + list(map(int, input().split()))\nfriendship = {x: set() for x in range(1, n+1)}\n\nfor _ in range(m):\n\tx, y = list(map(int, input().split()))\n\tfriendship[x].add(y)\n\tfriendship[y].add(x)\ncitizens = set(range(1, n+1))\n\nwhile citizens:\n\tv = citizens.pop()\n\tvisited, p = dfs(friendship, v)\n\tcitizens.difference_update(visited)\n\tans += p\nprint(ans)\n"], "id": "id6957"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6957", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["vova", 2], ["promised", 2], ["himself", 2], ["that", 2], ["he", 2], ["would", 2], ["never", 2], ["play", 2], ["computer", 2], ["games", 2], ["but", 2], ["recently", 2], ["firestorm", 2], ["—", 2], ["a", 2], ["well", 2], ["known", 2], ["game", 2], ["developing", 2], ["company", 2], ["—", 2], ["published", 2], ["their", 2], ["newest", 2], ["game", 2], ["world", 2], ["of", 2], ["farcraft", 2], ["and", 2], ["it", 2], ["became", 2], ["really", 2], ["popular", 2], ["of", 2], ["course", 2], ["vova", 2], ["started", 2], ["playing", 2], ["it", 2], ["now", 2], ["he", 2], ["tries", 2], ["to", 2], ["solve", 2], ["a", 2], ["quest", 2], ["the", 2], ["task", 2], ["is", 2], ["to", 2], ["come", 2], ["to", 2], ["a", 2], ["settlement", 2], ["named", 2], ["overcity", 2], ["and", 2], ["spread", 2], ["a", 2], ["rumor", 2], ["in", 2], ["it", 2], ["vova", 2], ["knows", 2], ["that", 2], ["there", 2], ["are", 2], ["n", 2], ["characters", 2], ["in", 2], ["overcity", 2], ["some", 2], ["characters", 2], ["are", 2], ["friends", 2], ["to", 2], ["each", 2], ["other", 2], ["and", 2], ["they", 2], ["share", 2], ["information", 2], ["they", 2], ["got", 2], ["also", 2], ["vova", 2], ["knows", 2], ["that", 2], ["he", 2], ["can", 2], ["bribe", 2], ["each", 2], ["character", 2], ["so", 0], ["he", 0], ["or", 0], ["she", 0], ["starts", 0], ["spreading", 0], ["the", 0], ["rumor", 0], ["i", 0], ["th", 0], ["character", 0], ["wants", 0], ["c", 0], ["i", 0], ["gold", 2], ["in", 2], ["exchange", 2], ["for", 2], ["spreading", 2], ["the", 2], ["rumor", 2], ["when", 2], ["a", 2], ["character", 2], ["hears", 2], ["the", 2], ["rumor", 2], ["he", 2], ["tells", 2], ["it", 2], ["to", 2], ["all", 2], ["his", 2], ["friends", 2], ["and", 2], ["they", 2], ["start", 2], ["spreading", 2], ["the", 2], ["rumor", 2], ["to", 2], ["their", 2], ["friends", 2], ["for", 2], ["free", 2], ["and", 2], ["so", 2], ["on", 2], ["the", 2], ["quest", 2], ["is", 2], ["finished", 2], ["when", 2], ["all", 2], ["n", 2], ["characters", 2], ["know", 2], ["the", 2], ["rumor", 2], ["what", 2], ["is", 2], ["the", 2], ["minimum", 2], ["amount", 2], ["of", 2], ["gold", 2], ["vova", 2], ["needs", 2], ["to", 2], ["spend", 2], ["in", 2], ["order", 2], ["to", 2], ["finish", 2], ["the", 2], ["quest", 2], ["take", 2], ["a", 2], ["look", 2], ["at", 2], ["the", 0], ["notes", 0], ["if", 0], ["you", 0], ["think", 0], ["you", 0], ["haven", 0], ["t", 0], ["understood", 0], ["the", 0], ["problem", 0], ["completely", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 0], ["contains", 0], ["two", 0], ["integer", 0], ["numbers", 0], ["n", 0], ["and", 0], ["m", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["0", 0], ["≤", 0], ["m", 0], ["≤", 0], ["10", 0], ["5", 0], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["characters", 2], ["in", 2], ["overcity", 2], ["and", 2], ["the", 2], ["number", 0], ["of", 0], ["pairs", 0], ["of", 0], ["friends", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["integer", 0], ["numbers", 0], ["c", 0], ["i", 0], ["0", 0], ["≤", 0], ["c", 0], ["i", 0], ["≤", 0], ["10", 0], ["9", 0], ["—", 2], ["the", 2], ["amount", 2], ["of", 2], ["gold", 2], ["i", 2], ["th", 2], ["character", 2], ["asks", 2], ["to", 2], ["start", 2], ["spreading", 2], ["the", 0], ["rumor", 0], ["then", 0], ["m", 0], ["lines", 0], ["follow", 0], ["each", 0], ["containing", 0], ["a", 0], ["pair", 0], ["of", 0], ["numbers", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["which", 0], ["represent", 0], ["that", 0], ["characters", 0], ["x", 0], ["i", 0], ["and", 0], ["y", 0], ["i", 0], ["are", 0], ["friends", 0], ["1", 0], ["≤", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["≤", 0], ["n", 0], ["x", 0], ["i", 0], ["≠", 0], ["y", 0], ["i", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["each", 0], ["pair", 0], ["is", 0], ["listed", 0], ["at", 0], ["most", 0], ["once", 0], ["output", 0], ["print", 2], ["one", 2], ["number", 2], ["—", 2], ["the", 2], ["minimum", 2], ["amount", 2], ["of", 0], ["gold", 0], ["vova", 0], ["has", 0], ["to", 0], ["spend", 0], ["in", 0], ["order", 0], ["to", 0], ["finish", 0], ["the", 0], ["quest", 0], ["examples", 0], ["input", 0], ["5", 0], ["2", 0], ["2", 0], ["5", 0], ["3", 0], ["4", 0], ["8", 0], ["1", 0], ["4", 0], ["4", 0], ["5", 0], ["output", 0], ["10", 0], ["input", 0], ["10", 0], ["0", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["8", 0], ["9", 0], ["10", 0], ["output", 0], ["55", 0], ["input", 0], ["10", 0], ["5", 6], ["1", 1], ["6", 1], ["2", 1], ["7", 0], ["3", 0], ["8", 0], ["4", 0], ["9", 2], ["5", 0], ["10", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["8", 0], ["9", 0], ["10", 0], ["output", 0], ["15", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["example", 2], ["the", 2], ["best", 2], ["decision", 2], ["is", 2], ["to", 2], ["bribe", 2], ["the", 2], ["first", 2], ["character", 2], ["he", 2], ["will", 2], ["spread", 2], ["the", 2], ["rumor", 2], ["to", 2], ["fourth", 2], ["character", 2], ["and", 2], ["the", 2], ["fourth", 2], ["one", 2], ["will", 2], ["spread", 2], ["it", 2], ["to", 2], ["fifth", 2], ["also", 2], ["vova", 2], ["has", 2], ["to", 2], ["bribe", 2], ["the", 2], ["second", 2], ["and", 2], ["the", 2], ["third", 2], ["characters", 2], ["so", 2], ["they", 2], ["know", 2], ["the", 2], ["rumor", 2], ["in", 2], ["the", 2], ["second", 2], ["example", 2], ["vova", 2], ["has", 2], ["to", 2], ["bribe", 2], ["everyone", 2], ["in", 2], ["the", 2], ["third", 2], ["example", 2], ["the", 2], ["optimal", 2], ["decision", 2], ["is", 2], ["to", 2], ["bribe", 2], ["the", 0], ["first", 0], ["the", 0], ["third", 0], ["the", 0], ["fifth", 0], ["the", 0], ["seventh", 0], ["and", 0], ["the", 0], ["ninth", 0], ["characters", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5717439293598234, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2884473877851362, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7720430107526882, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.40681003584229386, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5717439293598234, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2884473877851362, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7720430107526882, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.40681003584229386, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["python3", 0], ["utf", 0], ["8", 0], ["nodes", 0], ["nr", 0], ["edges", 0], ["nr", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["node", 0], ["idx", 0], ["cost", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["node", 0], ["idx", 0], ["neigh", 0], ["idxes", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["nodes", 0], ["nr", 0], ["for", 0], ["in", 0], ["range", 0], ["edges", 0], ["nr", 0], ["node1", 0], ["idx", 0], ["node2", 0], ["idx", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["node", 0], ["idx", 0], ["neigh", 0], ["idxes", 0], ["node1", 0], ["idx", 0], ["append", 0], ["node2", 0], ["idx", 0], ["node", 0], ["idx", 0], ["neigh", 0], ["idxes", 0], ["node2", 0], ["idx", 0], ["append", 0], ["node1", 0], ["idx", 0], ["node", 0], ["idx", 0], ["is", 0], ["visited", 0], ["false", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["nodes", 0], ["nr", 0], ["ans", 0], ["0", 0], ["for", 0], ["node", 0], ["idx", 0], ["in", 0], ["range", 0], ["nodes", 0], ["nr", 0], ["if", 0], ["node", 0], ["idx", 0], ["is", 0], ["visited", 0], ["node", 0], ["idx", 0], ["continue", 0], ["stack", 0], ["node", 0], ["idx", 0], ["node", 0], ["idx", 0], ["is", 0], ["visited", 0], ["node", 0], ["idx", 0], ["true", 0], ["cheapest", 0], ["cost", 0], ["node", 0], ["idx", 0], ["cost", 0], ["node", 0], ["idx", 0], ["while", 0], ["stack", 0], ["curr", 0], ["node", 0], ["idx", 0], ["stack", 0], ["pop", 0], ["for", 0], ["neigh", 0], ["idx", 0], ["in", 0], ["node", 0], ["idx", 0], ["neigh", 0], ["idxes", 0], ["curr", 0], ["node", 0], ["idx", 0], ["if", 0], ["node", 0], ["idx", 0], ["is", 0], ["visited", 0], ["neigh", 0], ["idx", 0], ["continue", 0], ["stack", 0], ["append", 0], ["neigh", 0], ["idx", 0], ["cheapest", 0], ["cost", 0], ["min", 0], ["cheapest", 0], ["cost", 0], ["node", 0], ["idx", 0], ["cost", 0], ["neigh", 0], ["idx", 0], ["node", 0], ["idx", 0], ["is", 0], ["visited", 0], ["neigh", 0], ["idx", 0], ["true", 0], ["ans", 0], ["cheapest", 0], ["cost", 0], ["print", 0], ["ans", 0], ["coding", 0], ["utf", 0], ["8", 0], ["import", 0], ["math", 0], ["import", 0], ["collections", 0], ["import", 0], ["bisect", 0], ["import", 0], ["heapq", 0], ["import", 0], ["time", 0], ["import", 0], ["random", 0], ["import", 0], ["itertools", 0], ["import", 0], ["sys", 0], ["created", 0], ["by", 0], ["shhuan", 0], ["at", 0], ["2017", 0], ["11", 0], ["23", 0], ["23", 0], ["13", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cost", 0], ["0", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["random", 0], ["randint", 0], ["1", 0], ["10", 0], ["5", 0], ["random", 0], ["randint", 0], ["0", 0], ["10", 0], ["5", 0], ["cost", 0], ["0", 0], ["random", 0], ["randint", 0], ["0", 0], ["10", 0], ["9", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["g", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["b", 0], ["random", 0], ["randint", 0], ["1", 0], ["n", 0], ["random", 0], ["randint", 0], ["1", 0], ["n", 0], ["g", 0], ["a", 0], ["append", 0], ["b", 0], ["g", 0], ["b", 0], ["append", 0], ["a", 0], ["group", 0], ["0", 0], ["n", 0], ["1", 0], ["gi", 0], ["1", 0], ["def", 0], ["dfs", 0], ["u", 0], ["fa", 0], ["gi", 0], ["group", 0], ["u", 0], ["gi", 0], ["for", 0], ["v", 0], ["in", 0], ["g", 0], ["u", 0], ["if", 0], ["v", 0], ["fa", 0], ["and", 0], ["group", 0], ["v", 0], ["0", 0], ["dfs", 0], ["v", 0], ["u", 0], ["gi", 0], ["def", 0], ["makegroup", 0], ["u", 0], ["gi", 0], ["q", 0], ["u", 0], ["while", 0], ["q", 0], ["u", 0], ["q", 0], ["pop", 0], ["group", 0], ["u", 0], ["gi", 0], ["for", 0], ["v", 0], ["in", 0], ["g", 0], ["u", 0], ["if", 0], ["group", 0], ["v", 0], ["0", 0], ["q", 0], ["append", 0], ["v", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["group", 0], ["i", 0], ["gi", 0], ["1", 0], ["makegroup", 0], ["i", 0], ["gi", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["group", 0], ["i", 0], ["0", 0], ["gi", 0], ["1", 0], ["group", 0], ["i", 0], ["gi", 0], ["mincost", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["g", 0], ["group", 0], ["i", 0], ["c", 0], ["cost", 0], ["i", 0], ["if", 0], ["g", 0], ["not", 0], ["in", 0], ["mincost", 0], ["mincost", 0], ["g", 0], ["c", 0], ["else", 0], ["mincost", 0], ["g", 0], ["min", 0], ["mincost", 0], ["g", 0], ["c", 0], ["print", 0], ["sum", 0], ["list", 0], ["mincost", 0], ["values", 0], ["or", 0], ["0", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["start", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["cost", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["dp", 0], ["dict", 0], ["for", 0], ["in", 0], ["range", 0], ["start", 0], ["1", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["if", 0], ["k", 0], ["0", 0], ["1", 0], ["not", 0], ["in", 0], ["dp", 0], ["dp", 0], ["k", 0], ["0", 0], ["1", 0], ["dict", 0], ["if", 0], ["k", 0], ["1", 0], ["1", 0], ["not", 0], ["in", 0], ["dp", 0], ["dp", 0], ["k", 0], ["1", 0], ["1", 0], ["dict", 0], ["dp", 0], ["k", 0], ["0", 0], ["1", 0], ["k", 0], ["1", 0], ["1", 0], ["0", 0], ["dp", 0], ["k", 0], ["1", 0], ["1", 0], ["k", 0], ["0", 0], ["1", 0], ["0", 0], ["counted", 0], ["dict", 0], ["answer", 0], ["0", 0], ["for", 0], ["index", 0], ["value", 0], ["in", 0], ["enumerate", 0], ["cost", 0], ["if", 0], ["index", 0], ["not", 0], ["in", 0], ["dp", 0], ["answer", 0], ["value", 0], ["elif", 0], ["index", 0], ["in", 0], ["counted", 0], ["continue", 0], ["else", 0], ["now", 0], ["index", 0], ["plus", 0], ["value", 0], ["counted", 0], ["index", 0], ["0", 0], ["dec", 0], ["deque", 0], ["for", 0], ["key", 0], ["in", 0], ["dp", 0], ["now", 0], ["dec", 0], ["append", 0], ["key", 0], ["while", 0], ["len", 0], ["dec", 0], ["0", 0], ["k", 0], ["dec", 0], ["popleft", 0], ["if", 0], ["k", 0], ["in", 0], ["counted", 0], ["continue", 0], ["plus", 0], ["min", 0], ["plus", 0], ["cost", 0], ["k", 0], ["counted", 0], ["k", 0], ["0", 0], ["if", 0], ["k", 0], ["in", 0], ["dp", 0], ["for", 0], ["key", 0], ["in", 0], ["dp", 0], ["k", 0], ["dec", 0], ["append", 0], ["key", 0], ["answer", 0], ["plus", 0], ["print", 0], ["answer", 0], ["def", 0], ["bfs", 0], ["i", 0], ["nonlocal", 0], ["p", 0], ["f", 0], ["v", 0], ["q", 0], ["i", 0], ["qi", 0], ["0", 0], ["v", 0], ["i", 0], ["1", 0], ["best", 0], ["p", 0], ["i", 0], ["while", 0], ["qi", 0], ["len", 0], ["q", 0], ["j", 0], ["q", 0], ["qi", 0], ["if", 0], ["p", 0], ["j", 0], ["best", 0], ["best", 0], ["p", 0], ["j", 0], ["for", 0], ["k", 0], ["in", 0], ["f", 0], ["j", 0], ["if", 0], ["v", 0], ["k", 0], ["1", 0], ["q", 0], ["append", 0], ["k", 0], ["v", 0], ["k", 0], ["1", 0], ["qi", 0], ["1", 0], ["return", 0], ["best", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["p", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["v", 0], ["0", 0], ["n", 0], ["f", 0], ["for", 0], ["a", 0], ["in", 0], ["range", 0], ["n", 0], ["f", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["f", 0], ["x", 0], ["1", 0], ["append", 0], ["y", 0], ["1", 0], ["f", 0], ["y", 0], ["1", 0], ["append", 0], ["x", 0], ["1", 0], ["cost", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["v", 0], ["i", 0], ["0", 0], ["cost", 0], ["bfs", 0], ["i", 0], ["print", 0], ["cost", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["class", 0], ["graph", 0], ["object", 0], ["def", 0], ["init", 0], ["self", 0], ["connections", 0], ["directed", 0], ["false", 0], ["self", 0], ["graph", 0], ["defaultdict", 0], ["set", 0], ["self", 0], ["directed", 0], ["directed", 0], ["self", 0], ["add", 0], ["connections", 0], ["connections", 0], ["def", 0], ["add", 0], ["connections", 0], ["self", 0], ["connections", 0], ["for", 6], ["node1", 6], ["node2", 6], ["in", 0], ["connections", 0], ["self", 0], ["add", 0], ["node1", 0], ["node2", 0], ["def", 0], ["add", 0], ["self", 0], ["node1", 0], ["node2", 0], ["self", 0], ["graph", 0], ["node1", 0], ["add", 0], ["node2", 0], ["if", 0], ["not", 0], ["self", 0], ["directed", 0], ["self", 0], ["graph", 0], ["node2", 0], ["add", 0], ["node1", 0], ["def", 0], ["str", 0], ["self", 0], ["return", 0], ["format", 0], ["self", 0], ["class", 0], ["name", 0], ["dict", 0], ["self", 0], ["graph", 0], ["def", 0], ["getitem", 0], ["self", 0], ["index", 0], ["return", 0], ["self", 0], ["graph", 0], ["index", 0], ["def", 3], ["bfs", 3], ["graph", 4], ["start", 4], ["visited", 4], ["queue", 4], ["set", 4], ["start", 4], ["while", 5], ["queue", 5], ["vertex", 6], ["queue", 6], ["pop", 5], ["0", 5], ["if", 5], ["vertex", 5], ["not", 5], ["in", 0], ["visited", 0], ["visited", 0], ["add", 0], ["vertex", 0], ["queue", 0], ["extend", 0], ["graph", 0], ["vertex", 0], ["visited", 0], ["return", 0], ["visited", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["v", 0], ["graph", 0], ["f", 0], ["fg", 0], ["vi", 0], ["false", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["vi", 0], ["i", 0], ["continue", 0], ["cc", 0], ["bfs", 0], ["v", 0], ["i", 0], ["1", 0], ["for", 0], ["e", 0], ["in", 0], ["cc", 0], ["vi", 0], ["e", 0], ["1", 0], ["true", 0], ["fg", 0], ["append", 0], ["cc", 0], ["print", 0], ["sum", 0], ["min", 0], ["g", 0], ["e", 0], ["1", 0], ["for", 0], ["e", 0], ["in", 0], ["g", 0], ["for", 0], ["g", 0], ["in", 0], ["fg", 0], ["def", 3], ["dfs", 2], ["graph", 3], ["start", 3], ["visited", 3], ["stack", 3], ["set", 3], ["start", 3], ["while", 10], ["stack", 8], ["vertex", 11], ["stack", 9], ["pop", 9], ["if", 9], ["vertex", 9], ["not", 9], ["in", 0], ["visited", 0], ["visited", 0], ["add", 0], ["vertex", 0], ["stack", 0], ["extend", 0], ["graph", 0], ["vertex", 0], ["visited", 0], ["return", 0], ["visited", 0], ["min", 0], ["prices", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["visited", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["prices", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["friendship", 0], ["x", 0], ["set", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["friendship", 0], ["x", 0], ["add", 0], ["y", 0], ["friendship", 0], ["y", 0], ["add", 0], ["x", 0], ["print", 0], ["friendship", 0], ["citizens", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["ans", 0], ["0", 0], ["while", 0], ["citizens", 0], ["v", 0], ["citizens", 0], ["pop", 0], ["visited", 0], ["p", 0], ["dfs", 0], ["friendship", 0], ["v", 0], ["citizens", 0], ["difference", 0], ["update", 0], ["visited", 0], ["ans", 0], ["p", 0], ["print", 0], ["ans", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["adj", 0], ["for", 0], ["in", 0], ["range", 0], ["100000", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["adj", 0], ["x", 0], ["append", 0], ["y", 0], ["adj", 0], ["y", 0], ["append", 0], ["x", 0], ["ans", 0], ["0", 0], ["used", 0], ["false", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["used", 0], ["i", 0], ["continue", 0], ["s", 0], ["c", 0], ["i", 0], ["used", 0], ["i", 0], ["true", 0], ["q", 0], ["deque", 0], ["q", 0], ["append", 0], ["i", 0], ["while", 0], ["len", 0], ["q", 0], ["0", 0], ["u", 0], ["q", 0], ["popleft", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["adj", 0], ["u", 0], ["v", 0], ["adj", 0], ["u", 0], ["j", 0], ["if", 0], ["not", 0], ["used", 0], ["v", 0], ["used", 0], ["v", 0], ["true", 0], ["s", 0], ["append", 0], ["c", 0], ["v", 0], ["q", 0], ["append", 0], ["v", 0], ["ans", 0], ["min", 0], ["s", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["vs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["m", 0], ["0", 0], ["print", 0], ["sum", 0], ["vs", 0], ["return", 0], ["n", 0], ["100000", 0], ["m", 0], ["n", 0], ["1", 0], ["vs", 0], ["0", 0], ["n", 0], ["es", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["visited", 0], ["i", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["comps", 0], ["def", 0], ["dfs", 0], ["vv", 0], ["compp", 0], ["nonlocal", 0], ["visited", 0], ["es", 0], ["if", 0], ["visited", 0], ["vv", 0], ["return", 0], ["visited", 0], ["vv", 0], ["true", 0], ["compp", 0], ["append", 0], ["vv", 0], ["neighs", 0], ["es", 0], ["vv", 0], ["for", 0], ["neigh", 0], ["in", 0], ["neighs", 0], ["if", 0], ["visited", 0], ["neigh", 0], ["or", 0], ["neigh", 0], ["vv", 0], ["continue", 0], ["dfs", 0], ["neigh", 0], ["compp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["f", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["t", 0], ["i", 0], ["1", 0], ["i", 0], ["2", 0], ["es", 0], ["f", 0], ["1", 0], ["append", 0], ["t", 0], ["1", 0], ["es", 0], ["t", 0], ["1", 0], ["append", 0], ["f", 0], ["1", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["visited", 0], ["v", 0], ["continue", 0], ["comp", 0], ["deque", 0], ["v", 0], ["while", 0], ["deque", 0], ["v", 0], ["temp", 0], ["deque", 0], ["pop", 0], ["0", 0], ["if", 0], ["visited", 0], ["v", 0], ["temp", 0], ["continue", 0], ["visited", 0], ["v", 0], ["temp", 0], ["true", 0], ["comp", 0], ["append", 0], ["v", 0], ["temp", 0], ["for", 0], ["neigh", 0], ["in", 0], ["es", 0], ["v", 0], ["temp", 0], ["if", 0], ["visited", 0], ["neigh", 0], ["or", 0], ["neigh", 0], ["v", 0], ["temp", 0], ["continue", 0], ["deque", 0], ["append", 0], ["neigh", 0], ["comps", 0], ["append", 0], ["comp", 0], ["print", 0], ["es", 0], ["res", 0], ["0", 0], ["for", 0], ["comp", 0], ["in", 0], ["comps", 0], ["if", 0], ["not", 0], ["comp", 0], ["continue", 0], ["res", 0], ["min", 0], ["vs", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["comp", 0], ["print", 0], ["res", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["class", 0], ["person", 0], ["def", 0], ["init", 0], ["self", 0], ["self", 0], ["friends", 0], ["self", 0], ["taken", 0], ["false", 0], ["self", 0], ["price", 0], ["0", 0], ["def", 0], ["fill", 0], ["person", 0], ["queue", 0], ["deque", 0], ["queue", 0], ["append", 0], ["person", 0], ["minimum", 0], ["person", 0], ["price", 0], ["while", 0], ["queue", 0], ["p", 0], ["queue", 0], ["popleft", 0], ["p", 0], ["taken", 0], ["true", 0], ["minimum", 0], ["min", 0], ["minimum", 0], ["p", 0], ["price", 0], ["for", 0], ["f", 0], ["in", 0], ["p", 0], ["friends", 0], ["if", 0], ["not", 0], ["f", 0], ["taken", 0], ["queue", 0], ["append", 0], ["f", 0], ["return", 0], ["minimum", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["people", 0], ["person", 0], ["for", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["prices", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["people", 0], ["i", 0], ["price", 0], ["prices", 0], ["i", 0], ["for", 0], ["in", 0], ["range", 0], ["0", 0], ["m", 0], ["u", 0], ["v", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["people", 0], ["u", 0], ["1", 0], ["friends", 0], ["append", 0], ["people", 0], ["v", 0], ["1", 0], ["people", 0], ["v", 0], ["1", 0], ["friends", 0], ["append", 0], ["people", 0], ["u", 0], ["1", 0], ["cost", 0], ["0", 0], ["for", 0], ["p", 0], ["in", 0], ["people", 0], ["if", 0], ["not", 0], ["p", 0], ["taken", 0], ["cost", 0], ["fill", 0], ["p", 0], ["print", 0], ["cost", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["created", 0], ["on", 0], ["sun", 0], ["nov", 0], ["19", 0], ["07", 0], ["28", 0], ["11", 0], ["2017", 0], ["author", 0], ["fei", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["chars", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["p", 0], ["q", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["p", 0], ["p", 0], ["1", 0], ["q", 0], ["q", 0], ["1", 0], ["chars", 0], ["p", 0], ["append", 0], ["q", 0], ["chars", 0], ["q", 0], ["append", 0], ["p", 0], ["def", 0], ["dfs", 0], ["i", 0], ["nodes", 0], ["if", 0], ["visited", 0], ["i", 0], ["return", 0], ["visited", 0], ["i", 0], ["true", 0], ["nodes", 0], ["append", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["chars", 0], ["i", 0], ["dfs", 0], ["j", 0], ["nodes", 0], ["visited", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["graph", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["visited", 0], ["i", 0], ["nodes", 0], ["nodes", 0], ["append", 0], ["i", 0], ["tmp", 0], ["10000000000", 0], ["while", 0], ["len", 0], ["nodes", 0], ["0", 0], ["u", 0], ["nodes", 0], ["pop", 0], ["if", 0], ["visited", 0], ["u", 0], ["false", 0], ["visited", 0], ["u", 0], ["true", 0], ["tmp", 0], ["min", 0], ["tmp", 0], ["c", 0], ["u", 0], ["for", 0], ["j", 0], ["in", 0], ["chars", 0], ["u", 0], ["nodes", 0], ["append", 0], ["j", 0], ["c", 0], ["tmp", 0], ["graph", 0], ["append", 0], ["nodes", 0], ["print", 0], ["c", 0], ["import", 0], ["threading", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["threading", 0], ["stack", 0], ["size", 0], ["67108864", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["c", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["graph", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["ff", 0], ["sf", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["graph", 0], ["ff", 0], ["append", 0], ["sf", 0], ["graph", 0], ["sf", 0], ["append", 0], ["ff", 0], ["comps", 0], ["cl", 0], ["1", 0], ["n", 0], ["def", 0], ["dfs", 0], ["v", 0], ["c", 0], ["p", 0], ["cl", 0], ["v", 0], ["1", 0], ["c", 0], ["if", 0], ["c", 0], ["not", 0], ["in", 0], ["comps", 0], ["comps", 0], ["c", 0], ["comps", 0], ["c", 0], ["append", 0], ["v", 0], ["for", 0], ["i", 0], ["in", 0], ["graph", 0], ["v", 0], ["if", 0], ["i", 0], ["p", 0], ["if", 0], ["cl", 0], ["i", 0], ["1", 0], ["1", 0], ["dfs", 0], ["i", 0], ["c", 0], ["v", 0], ["cc", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["cl", 0], ["i", 0], ["1", 0], ["dfs", 0], ["i", 0], ["1", 0], ["cc", 0], ["1", 0], ["cc", 0], ["1", 0], ["price", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["comps", 0], ["minp", 0], ["999999999999999", 0], ["for", 0], ["j", 0], ["in", 0], ["comps", 0], ["i", 0], ["minp", 0], ["min", 0], ["c", 0], ["j", 0], ["1", 0], ["minp", 0], ["price", 0], ["minp", 0], ["print", 0], ["price", 0], ["thread", 0], ["threading", 0], ["thread", 0], ["target", 0], ["main", 0], ["thread", 0], ["start", 0], ["from", 0], ["sys", 0], ["import", 0], ["setrecursionlimit", 0], ["import", 0], ["threading", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["threading", 0], ["stack", 0], ["size", 0], ["67108864", 0], ["def", 0], ["main", 0], ["def", 0], ["dfs", 0], ["v", 0], ["cv", 0], ["color", 0], ["v", 0], ["cv", 0], ["for", 0], ["u", 0], ["in", 0], ["d", 0], ["v", 0], ["if", 0], ["color", 0], ["u", 0], ["0", 0], ["dfs", 0], ["u", 0], ["cv", 0], ["n", 1], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["x", 0], ["append", 0], ["y", 0], ["d", 0], ["y", 0], ["append", 0], ["x", 0], ["color", 0], ["0", 0], ["n", 0], ["1", 0], ["cv", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["color", 0], ["i", 0], ["0", 0], ["dfs", 0], ["i", 0], ["cv", 0], ["cv", 0], ["1", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["color", 0], ["i", 0], ["in", 0], ["s", 0], ["s", 0], ["color", 0], ["i", 0], ["append", 0], ["c", 0], ["i", 0], ["1", 0], ["else", 0], ["s", 0], ["color", 0], ["i", 0], ["c", 0], ["i", 0], ["1", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["x", 0], ["min", 0], ["s", 0], ["i", 0], ["print", 0], ["x", 0], ["thread", 0], ["threading", 0], ["thread", 0], ["target", 0], ["main", 0], ["thread", 0], ["start", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["g", 0], ["dd", 0], ["list", 0], ["def", 0], ["adde", 0], ["u", 0], ["v", 0], ["g", 0], ["u", 0], ["append", 0], ["v", 0], ["g", 0], ["v", 0], ["append", 0], ["u", 0], ["def", 0], ["dfs", 0], ["v", 0], ["stck", 0], ["stck", 0], ["append", 0], ["v", 0], ["cost1", 0], ["cost", 0], ["v", 0], ["1", 0], ["visited", 0], ["v", 0], ["true", 0], ["while", 0], ["len", 0], ["stck", 0], ["0", 0], ["cur", 0], ["stck", 0], ["pop", 0], ["for", 0], ["ch", 0], ["in", 0], ["g", 0], ["cur", 0], ["if", 0], ["visited", 0], ["ch", 0], ["continue", 0], ["cost1", 0], ["min", 0], ["cost1", 0], ["cost", 0], ["ch", 0], ["1", 0], ["stck", 0], ["append", 0], ["ch", 0], ["visited", 0], ["ch", 0], ["true", 0], ["return", 0], ["cost1", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cost", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["visited", 0], ["false", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["adde", 0], ["u", 0], ["v", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["visited", 0], ["i", 0], ["ans", 0], ["dfs", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["visited", 0], ["i", 0], ["ans", 0], ["cost", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["threading", 0], ["sys", 0], ["setrecursionlimit", 0], ["100010", 0], ["threading", 0], ["stack", 0], ["size", 0], ["67108864", 0], ["res", 0], ["0", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["int", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["input", 0], ["split", 0], ["g", 0], ["flag", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["g", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["p", 0], ["o", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["o", 0], ["1", 0], ["p", 0], ["1", 0], ["g", 0], ["o", 0], ["append", 0], ["p", 0], ["g", 0], ["p", 0], ["append", 0], ["o", 0], ["def", 0], ["glu", 0], ["v", 0], ["p", 0], ["k", 0], ["nonlocal", 0], ["res", 0], ["if", 0], ["flag", 0], ["v", 0], ["0", 0], ["flag", 0], ["v", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["i", 0], ["p", 0], ["glu", 0], ["i", 0], ["v", 0], ["k", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["flag", 0], ["i", 0], ["glu", 0], ["i", 0], ["1", 0], ["k", 0], ["if", 0], ["l", 0], ["0", 0], ["k", 0], ["1", 0], ["mn", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["max", 0], ["flag", 0], ["mn", 0], ["i", 0], ["10", 0], ["9", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["mn", 0], ["flag", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["mn", 0], ["flag", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["su", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["mn", 0], ["su", 0], ["mn", 0], ["i", 0], ["print", 0], ["su", 0], ["thread", 0], ["threading", 0], ["thread", 0], ["target", 0], ["main", 0], ["thread", 0], ["start", 0], ["import", 0], ["sys", 0], ["threading", 0], ["sys", 0], ["setrecursionlimit", 0], ["100010", 0], ["threading", 0], ["stack", 0], ["size", 0], ["67108864", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["edge", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["u", 0], ["1", 0], ["v", 0], ["1", 0], ["edge", 0], ["u", 0], ["append", 0], ["v", 0], ["edge", 0], ["v", 0], ["append", 0], ["u", 0], ["flag", 0], ["0", 0], ["n", 0], ["def", 0], ["dfs", 0], ["u", 0], ["k", 0], ["flag", 0], ["u", 0], ["k", 0], ["for", 0], ["v", 0], ["in", 0], ["edge", 0], ["u", 0], ["if", 0], ["flag", 0], ["v", 0], ["0", 0], ["dfs", 0], ["v", 0], ["k", 0], ["cnt", 0], ["0", 0], ["for", 0], ["u", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["flag", 0], ["u", 0], ["0", 0], ["cnt", 0], ["1", 0], ["dfs", 0], ["u", 0], ["cnt", 0], ["mn", 0], ["0x3f3f3f3f", 0], ["cnt", 0], ["1", 0], ["for", 0], ["u", 0], ["in", 0], ["range", 0], ["n", 0], ["mn", 0], ["flag", 0], ["u", 0], ["min", 0], ["mn", 0], ["flag", 0], ["u", 0], ["c", 0], ["u", 0], ["print", 0], ["sum", 0], ["mn", 0], ["1", 0], ["thread", 0], ["threading", 0], ["thread", 0], ["target", 0], ["main", 0], ["thread", 0], ["start", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["merge", 0], ["matrix", 0], ["defaultdict", 0], ["list", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["price", 0], ["list", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["summary", 0], ["0", 0], ["visited", 0], ["set", 0], ["def", 0], ["dfs", 0], ["edge", 0], ["queue", 0], ["visited", 0], ["add", 0], ["edge", 0], ["queue", 0], ["append", 0], ["edge", 0], ["lowest", 0], ["cost", 0], ["price", 0], ["list", 0], ["edge", 0], ["1", 0], ["while", 0], ["len", 0], ["queue", 0], ["0", 0], ["cur", 0], ["edge", 0], ["queue", 0], ["pop", 0], ["for", 0], ["i", 0], ["in", 0], ["merge", 0], ["matrix", 0], ["cur", 0], ["edge", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["visited", 0], ["lowest", 0], ["cost", 0], ["min", 0], ["lowest", 0], ["cost", 0], ["price", 0], ["list", 0], ["i", 0], ["1", 0], ["queue", 0], ["append", 0], ["i", 0], ["visited", 0], ["add", 0], ["i", 0], ["return", 0], ["lowest", 0], ["cost", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["merge", 0], ["matrix", 0], ["x", 0], ["append", 0], ["y", 0], ["merge", 0], ["matrix", 0], ["y", 0], ["append", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["visited", 0], ["summary", 0], ["dfs", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["visited", 0], ["summary", 0], ["price", 0], ["list", 0], ["i", 0], ["1", 0], ["print", 0], ["summary", 0], ["r", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["r", 0], ["p", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["def", 0], ["find", 0], ["i", 0], ["while", 0], ["p", 0], ["i", 0], ["i", 0], ["p", 0], ["i", 0], ["p", 0], ["p", 0], ["i", 0], ["i", 0], ["p", 0], ["i", 0], ["return", 0], ["i", 0], ["c", 0], ["0", 0], ["list", 0], ["r", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["find", 0], ["r", 0], ["if", 0], ["c", 0], ["x", 0], ["c", 0], ["y", 0], ["x", 0], ["y", 0], ["y", 0], ["x", 0], ["p", 0], ["x", 0], ["y", 0], ["print", 0], ["sum", 0], ["c", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["p", 0], ["i", 0], ["i", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["g", 0], ["b", 0], ["1", 0], ["append", 0], ["a", 0], ["1", 0], ["vs", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["vs", 0], ["i", 0], ["continue", 0], ["q", 0], ["i", 0], ["vs", 0], ["i", 0], ["true", 0], ["m", 0], ["c", 0], ["i", 0], ["while", 0], ["len", 0], ["q", 0], ["0", 0], ["v", 0], ["q", 0], ["0", 0], ["del", 0], ["q", 0], ["0", 0], ["for", 0], ["u", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["not", 0], ["vs", 0], ["u", 0], ["vs", 0], ["u", 0], ["true", 0], ["q", 0], ["append", 0], ["u", 0], ["m", 0], ["min", 0], ["m", 0], ["c", 0], ["u", 0], ["ans", 0], ["m", 0], ["print", 0], ["ans", 0], ["def", 0], ["get", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["dfs", 0], ["i", 0], ["v", 0], ["c", 0], ["i", 0], ["q", 0], ["i", 0], ["while", 0], ["q", 0], ["j", 0], ["q", 0], ["pop", 0], ["b", 0], ["j", 0], ["1", 0], ["v", 0], ["min", 0], ["v", 0], ["c", 0], ["j", 0], ["for", 0], ["k", 0], ["in", 0], ["a", 0], ["j", 0], ["if", 0], ["b", 0], ["k", 0], ["0", 0], ["q", 0], ["append", 0], ["k", 0], ["return", 0], ["v", 0], ["n", 0], ["m", 0], ["get", 0], ["c", 0], ["get", 0], ["a", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["get", 0], ["a", 0], ["x", 0], ["1", 0], ["append", 0], ["y", 0], ["1", 0], ["a", 0], ["y", 0], ["1", 0], ["append", 0], ["x", 0], ["1", 0], ["b", 0], ["0", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["0", 0], ["ans", 0], ["dfs", 0], ["i", 0], ["print", 0], ["ans", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["dfs", 0], ["n", 0], ["traverse", 0], ["graph", 0], ["using", 0], ["dfs", 0], ["return", 0], ["minimum", 0], ["gold", 0], ["value", 0], ["of", 0], ["connected", 0], ["group", 0], ["nonlocal", 0], ["visited", 0], ["minimum", 0], ["1", 0], ["queue", 0], ["deque", 0], ["n", 0], ["while", 0], ["queue", 0], ["node", 0], ["queue", 0], ["popleft", 0], ["visited", 0], ["node", 0], ["true", 0], ["if", 0], ["minimum", 0], ["1", 0], ["minimum", 0], ["gold", 0], ["node", 0], ["else", 0], ["minimum", 0], ["min", 0], ["minimum", 0], ["gold", 0], ["node", 0], ["for", 0], ["neighbor", 0], ["in", 0], ["adj", 0], ["list", 0], ["node", 0], ["if", 0], ["not", 0], ["visited", 0], ["neighbor", 0], ["1", 0], ["queue", 0], ["append", 0], ["neighbor", 0], ["1", 0], ["return", 0], ["minimum", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["gold", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["adj", 0], ["list", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["adj", 0], ["list", 0], ["x", 0], ["1", 0], ["append", 0], ["y", 0], ["adj", 0], ["list", 0], ["y", 0], ["1", 0], ["append", 0], ["x", 0], ["visited", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["total", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["visited", 0], ["i", 0], ["total", 0], ["dfs", 0], ["i", 0], ["print", 0], ["total", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["fa", 0], ["0", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["findfa", 0], ["x", 0], ["s", 0], ["while", 0], ["fa", 0], ["x", 0], ["x", 0], ["s", 0], ["append", 0], ["x", 0], ["x", 0], ["fa", 0], ["x", 0], ["for", 0], ["v", 0], ["in", 0], ["s", 0], ["fa", 0], ["v", 0], ["x", 0], ["return", 0], ["x", 0], ["while", 0], ["m", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["u", 0], ["findfa", 0], ["u", 0], ["v", 0], ["findfa", 0], ["v", 0], ["if", 0], ["u", 0], ["v", 0], ["fa", 0], ["v", 0], ["u", 0], ["a", 0], ["u", 0], ["min", 0], ["a", 0], ["u", 0], ["a", 0], ["v", 0], ["m", 0], ["1", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["findfa", 0], ["i", 0], ["i", 0], ["res", 0], ["a", 0], ["fa", 0], ["i", 0], ["print", 0], ["res", 0], ["def", 3], ["dfs", 2], ["graph", 3], ["start", 3], ["visited", 3], ["stack", 3], ["set", 3], ["start", 3], ["while", 10], ["stack", 8], ["vertex", 11], ["stack", 9], ["pop", 9], ["if", 9], ["vertex", 9], ["not", 9], ["in", 0], ["visited", 0], ["visited", 0], ["add", 0], ["vertex", 0], ["stack", 0], ["extend", 0], ["graph", 0], ["vertex", 0], ["visited", 0], ["return", 0], ["visited", 0], ["min", 0], ["prices", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["visited", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["prices", 0], ["none", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["friendship", 0], ["x", 0], ["set", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["friendship", 0], ["x", 0], ["add", 0], ["y", 0], ["friendship", 0], ["y", 0], ["add", 0], ["x", 0], ["citizens", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["while", 0], ["citizens", 0], ["v", 0], ["citizens", 0], ["pop", 0], ["visited", 0], ["p", 0], ["dfs", 0], ["friendship", 0], ["v", 0], ["citizens", 0], ["difference", 0], ["update", 0], ["visited", 0], ["ans", 0], ["p", 0], ["print", 0], ["ans", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.018033344675059543, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0043584879073140384, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.03829210437139952, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0179035355246809, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.01735284110241579, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.004296623946164606, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.03829210437139952, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0179035355246809, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nDevu has an array A consisting of N positive integers. He would like to perform following operation on array.\n\n- Pick some two elements a, b in the array (a could be same as b, but their corresponding indices in the array should not be same).\nRemove both the elements a and b and instead add a number x such that x lies between min(a, b) and max(a, b), both inclusive, (i.e. min(a, b) ≤ x ≤ max(a, b)).\n\nNow, as you know after applying the above operation N - 1 times, Devu will end up with a single number in the array. He is wondering whether it is possible to do the operations in such a way that he ends up a number t. \n\nHe asks your help in answering Q such queries, each of them will contain an integer t and you have to tell whether it is possible to end up t. \n\n-----Input-----\nThere is only one test case per test file.\nFirst line of the input contains two space separated integers N, Q denoting number of elements in A and number of queries for which Devu asks your help, respectively\nSecond line contains N space separated integers denoting the content of array A.\n\nEach of the next Q lines, will contain a single integer t corresponding to the query.\n\n-----Output-----\nOutput Q lines, each containing \"Yes\" or \"No\" (both without quotes) corresponding to the answer of corresponding query.\n\n-----Constraints-----\n- 1 ≤ N, Q ≤ 105\n- 0 ≤ t ≤ 109\n\n-----Subtasks-----\nSubtask #1 : 30 points\n- 1 ≤ Ai ≤ 2\n\nSubtask #2 : 70 points\n- 1 ≤ Ai ≤ 109\n\n-----Example-----\nInput 1:\n1 2\n1\n1\n2\n\nOutput:\nYes\nNo\n\nInput 2:\n2 4\n1 3\n1\n2\n3\n4\n\nOutput:\nYes\nYes\nYes\nNo\n\n-----Explanation-----\nIn the first example, Devu can't apply any operation. So the final element in the array will be 1 itself. \n\nIn the second example,\nDevu can replace 1 and 3 with any of the numbers among 1, 2, 3. Hence final element of the array could be 1, 2 or 3.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n,m=[int(x) for x in input().split()]\nk=[int(x) for x in input().split()]\na=min(k)\nb=max(k)\nfor i in range(m):\n\tc=int(input())\n\tif c>=a and c<=b:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\n", "n,m=[int(x) for x in input().split()]\nt=[int(x) for x in input().split()]\np=min(t)\nq=max(t)\nfor i in range(m):\n\tr=int(input())\n\tif r>=p and r<=q:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\n", "n,m=[int(x) for x in input().split()]\nk=[int(x) for x in input().split()]\na=min(k)\nb=max(k)\nfor i in range(m):\n\tc=int(input())\n\tif c>=a and c<=b:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\n", "# cook your dish here\nn,k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nl = min(a)\nh = max(a)\nfor i in range(k) :\n\tq = int(input())\n\tif q>= l and q<=h :\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "# cook your dish here\nn,m=map(int,input().split())\na=[int(x) for x in input().split()]\nmh=min(a)\nmp=max(a)\nfor i in range(m):\n\tb=int(input())\n\tif(b<=mp and b>=mh):\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "# cook your dish here\nn,q=map(int,input().split())\nl=[int(x) for x in input().split()]\nmn=min(l)\nmx=max(l)\nfor i in range(q):\n\tk=int(input())\n\tif(k<=mx and k>=mn):\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "# cook your dish here\nn,q=map(int,input().split())\nl=list(map(int,input().split()))\nmini=min(l)\nmaxi=max(l)\nfor i in range(q):\n\tm=int(input())\n\tif m<=maxi and m>=mini:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "n,q=map(int,input().split())\na=list(map(int,input().split()))\na.sort()\nstart=a[0]\nend=a[n-1]\nfor i in range(q):\n\tnum=int(input())\n\tif(start<=num<=end):\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "\ndef chk(a,q,n):\n\tl = a[0]\n\tm = a[n - 1]\n\tif q >= l and q <= m :\n\t\treturn(\"Yes\")\n\treturn \"No\"\ndef main():\n\tn,q=list(map(int,input().split()))\n\tA = list(map(int,input().split()))\n\tA.sort()\n\twhile(q > 0):\n\t\tq-=1\n\t\tques = int(input())\n\t\tprint(chk(A,ques,n))\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "\ndef chk(a,q):\n\tl = a[0]\n\tm = a[len(a) - 1]\n\tif q >= l and q <= m :\n\t\treturn(\"Yes\")\n\treturn \"No\"\ndef main():\n\tn,q=list(map(int,input().split()))\n\tA = list(map(int,input().split()))\n\tA.sort()\n\twhile(q > 0):\n\t\tq-=1\n\t\tques = int(input())\n\t\tprint(chk(A,ques))\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n,q = list(map(int, input().split()))\na = [int(i) for i in input().split()]\np = min(a)\nz = max(a)\nfor i in range(q):\n\tt = int(input())\n\tif p<=t<=z:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\n", "import collections\nfrom collections import defaultdict\nimport math\n\n\n#for _ in range(int(input())):\n#n=int(input())\n#s=input()\n#n,m=[int(x) for x in input().split()]\nn,z=[int(x) for x in input().split()]\na=[int(x) for x in input().split()]\np=min(a) \nq=max(a)\nfor i in range(z):\n\tif p<=int(input())<=q:\n\t\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\") \n", "# cook your dish here\nn,q=list(map(int,input().split()))\nl=list(map(int,input().split()))\nmi=min(l)\nmx=max(l)\nfor i in range(q):\n\tm=int(input())\n\tif m<=mx and m>=mi:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "n,q=list(map(int,input().split()))\nl=list(map(int,input().split()))\nmi=min(l)\nmx=max(l)\nfor i in range(q):\n\tm=int(input())\n\tif m<=mx and m>=mi:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "n,q = list(map(int,input().split()))\nl = list(map(int,input().split()))\na = max(l)\nb = min(l)\nfor i in range(q):\n\ty = int(input())\n\tif y>=b and y<=a:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "n,q=list(map(int,input().split()))\na=list(map(int,input().split()))\nx=max(a)\ny=min(a)\nfor i in range(q):\n\tp=int(input())\n\tif p<=x and p>=y:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\n", "n, q = map(int, input().split())\narr = list(map(int, input().split()))\nmaximum = max(arr)\nminimum = min(arr)\nfor i in range(q):\n\tt = int(input())\n\tif t >= minimum and t <= maximum:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "n,q=list(map(int,input().split()))\na1=list(map(int,input().split()))\nb=min(a1)\nc=max(a1)\nfor i in range(q):\n\ts=int(input())\n\tif(s>=b and s<=c):\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "def query(ar, k, a, b):\n\treturn \"Yes\" if k <= a and k >= b else \"No\"\n\t\ndef __starting_point():\n\tn, t = map(int, input().split())\n\tar = list(map(int, input().split()))\n\tlarge, small = max(ar), min(ar)\n\tfor i in range(t):\n\t\tk = int(input())\n\t\tprint(query(ar, k, large, small))\n__starting_point()\n", "# cook your dish here\n\ndef query(ar, k, a, b):\n\treturn \"Yes\" if k <= a and k >= b else \"No\"\n\t\ndef __starting_point():\n\tn, t = map(int, input().split())\n\tar = list(map(int, input().split()))\n\tlarge, small = max(ar), min(ar)\n\tfor i in range(t):\n\t\tk = int(input())\n\t\tprint(query(ar, k, large, small))\n__starting_point()\n", "n,q=list(map(int,(input()).split()))\nnumbers=list(map(int,(input()).split()))\nb=min(numbers)\nc=max(numbers)\nfor _ in range(q):\n\tt=int(input())\n\tif t>=b and t<=c:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "# cook your dish here\nn,q=list(map(int,(input()).split()))\na=list(map(int,(input()).split()))\nb=min(a)\nc=max(a)\nfor i in range(q):\n\tt=int(input())\n\tif t>=b and t<=c:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "# cook your dish here\nn,q=list(map(int,(input()).split()))\na=list(map(int,(input()).split()))\nb=min(a)\nc=max(a)\nfor i in range(q):\n\tt=int(input())\n\tif t>=b and t<=c:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "# cook your dish here\nn,q=list(map(int,(input()).split()))\na=list(map(int,(input()).split()))\nl=[]\nfor j in range(1,max(a)+1):\n\tif min(a)<=j and j<=max(a):\n\t\tl.append(j)\nfor i in range(q):\n\tt=int(input())\n\tif t in l:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "x,y=map(int,input().split())\nl=list(map(int,input().split()))\nk=min(l)\nl=max(l)\nfor i in range(y):\n\ta=int(input())\n\tif a>=k and a<=l:print('Yes')\n\telse:print('No')\n"], "id": "id6916"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6916", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["devu", 1], ["has", 1], ["an", 1], ["array", 1], ["a", 1], ["consisting", 1], ["of", 1], ["n", 1], ["positive", 1], ["integers", 1], ["he", 1], ["would", 1], ["like", 1], ["to", 1], ["perform", 1], ["following", 1], ["operation", 1], ["on", 1], ["array", 1], ["pick", 1], ["some", 1], ["two", 1], ["elements", 1], ["a", 1], ["b", 1], ["in", 1], ["the", 1], ["array", 1], ["a", 1], ["could", 1], ["be", 1], ["same", 1], ["as", 1], ["b", 1], ["but", 1], ["their", 1], ["corresponding", 1], ["indices", 1], ["in", 1], ["the", 1], ["array", 1], ["should", 1], ["not", 1], ["be", 1], ["same", 1], ["remove", 1], ["both", 1], ["the", 1], ["elements", 1], ["a", 1], ["and", 1], ["b", 1], ["and", 1], ["instead", 1], ["add", 1], ["a", 1], ["number", 1], ["x", 1], ["such", 1], ["that", 1], ["x", 1], ["lies", 1], ["between", 1], ["min", 1], ["a", 1], ["b", 1], ["and", 1], ["max", 1], ["a", 1], ["b", 1], ["both", 1], ["inclusive", 1], ["i", 1], ["e", 1], ["min", 1], ["a", 1], ["b", 1], ["≤", 1], ["x", 1], ["≤", 1], ["max", 1], ["a", 1], ["b", 1], ["now", 1], ["as", 1], ["you", 1], ["know", 1], ["after", 1], ["applying", 1], ["the", 1], ["above", 1], ["operation", 1], ["n", 1], ["1", 1], ["times", 1], ["devu", 1], ["will", 1], ["end", 1], ["up", 1], ["with", 1], ["a", 1], ["single", 1], ["number", 1], ["in", 1], ["the", 1], ["array", 1], ["he", 1], ["is", 1], ["wondering", 1], ["whether", 1], ["it", 1], ["is", 1], ["possible", 1], ["to", 1], ["do", 1], ["the", 1], ["operations", 1], ["in", 1], ["such", 1], ["a", 1], ["way", 1], ["that", 1], ["he", 1], ["ends", 1], ["up", 1], ["a", 1], ["number", 1], ["t", 1], ["he", 1], ["asks", 1], ["your", 1], ["help", 1], ["in", 1], ["answering", 1], ["q", 1], ["such", 1], ["queries", 1], ["each", 1], ["of", 1], ["them", 1], ["will", 1], ["contain", 1], ["an", 1], ["integer", 1], ["t", 1], ["and", 1], ["you", 0], ["have", 0], ["to", 0], ["tell", 0], ["whether", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["end", 0], ["up", 0], ["t", 0], ["input", 0], ["there", 0], ["is", 0], ["only", 0], ["one", 0], ["test", 0], ["case", 0], ["per", 0], ["test", 0], ["file", 0], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["two", 0], ["space", 0], ["separated", 0], ["integers", 0], ["n", 0], ["q", 0], ["denoting", 0], ["number", 0], ["of", 0], ["elements", 0], ["in", 0], ["a", 0], ["and", 0], ["number", 0], ["of", 0], ["queries", 0], ["for", 0], ["which", 0], ["devu", 0], ["asks", 0], ["your", 0], ["help", 0], ["respectively", 0], ["second", 1], ["line", 1], ["contains", 1], ["n", 1], ["space", 1], ["separated", 1], ["integers", 1], ["denoting", 1], ["the", 1], ["content", 1], ["of", 1], ["array", 1], ["a", 1], ["each", 1], ["of", 1], ["the", 1], ["next", 1], ["q", 1], ["lines", 0], ["will", 0], ["contain", 0], ["a", 0], ["single", 0], ["integer", 0], ["t", 0], ["corresponding", 0], ["to", 0], ["the", 0], ["query", 0], ["output", 0], ["output", 1], ["q", 1], ["lines", 1], ["each", 1], ["containing", 1], ["yes", 1], ["or", 0], ["no", 0], ["both", 0], ["without", 0], ["quotes", 0], ["corresponding", 0], ["to", 0], ["the", 0], ["answer", 0], ["of", 0], ["corresponding", 0], ["query", 0], ["constraints", 0], ["1", 0], ["≤", 0], ["n", 0], ["q", 0], ["≤", 0], ["105", 0], ["0", 0], ["≤", 0], ["t", 0], ["≤", 0], ["109", 0], ["subtasks", 0], ["subtask", 0], ["1", 0], ["30", 0], ["points", 0], ["1", 0], ["≤", 0], ["ai", 0], ["≤", 0], ["2", 0], ["subtask", 0], ["2", 0], ["70", 0], ["points", 0], ["1", 0], ["≤", 0], ["ai", 0], ["≤", 0], ["109", 0], ["example", 0], ["input", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["1", 0], ["2", 0], ["output", 0], ["yes", 0], ["no", 0], ["input", 0], ["2", 0], ["2", 0], ["4", 0], ["1", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["output", 0], ["yes", 0], ["yes", 0], ["yes", 0], ["no", 0], ["explanation", 0], ["in", 1], ["the", 1], ["first", 1], ["example", 1], ["devu", 1], ["can", 1], ["t", 1], ["apply", 1], ["any", 1], ["operation", 1], ["so", 1], ["the", 1], ["final", 1], ["element", 1], ["in", 1], ["the", 1], ["array", 1], ["will", 1], ["be", 1], ["1", 1], ["itself", 1], ["in", 1], ["the", 1], ["second", 1], ["example", 1], ["devu", 1], ["can", 1], ["replace", 1], ["1", 1], ["and", 1], ["3", 1], ["with", 1], ["any", 1], ["of", 1], ["the", 1], ["numbers", 1], ["among", 1], ["1", 1], ["2", 1], ["3", 1], ["hence", 0], ["final", 0], ["element", 0], ["of", 0], ["the", 0], ["array", 0], ["could", 0], ["be", 0], ["1", 0], ["2", 0], ["or", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5932203389830508, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5932203389830508, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7049180327868853, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7049180327868853, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5932203389830508, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5932203389830508, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7049180327868853, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7049180327868853, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["min", 0], ["k", 0], ["b", 0], ["max", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["c", 0], ["int", 0], ["input", 0], ["if", 0], ["c", 0], ["a", 0], ["and", 0], ["c", 0], ["b", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["m", 0], ["int", 1], ["x", 1], ["for", 1], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["t", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["p", 0], ["min", 0], ["t", 0], ["q", 0], ["max", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["r", 0], ["int", 0], ["input", 0], ["if", 0], ["r", 0], ["p", 0], ["and", 0], ["r", 0], ["q", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["min", 0], ["k", 0], ["b", 0], ["max", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["c", 0], ["int", 0], ["input", 0], ["if", 0], ["c", 0], ["a", 0], ["and", 0], ["c", 0], ["b", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["l", 0], ["min", 0], ["a", 0], ["h", 0], ["max", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["q", 0], ["int", 0], ["input", 0], ["if", 0], ["q", 0], ["l", 0], ["and", 0], ["q", 0], ["h", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["mh", 0], ["min", 0], ["a", 0], ["mp", 0], ["max", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["b", 0], ["int", 0], ["input", 0], ["if", 0], ["b", 0], ["mp", 0], ["and", 0], ["b", 0], ["mh", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["mn", 0], ["min", 0], ["l", 0], ["mx", 0], ["max", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["k", 0], ["mx", 0], ["and", 0], ["k", 0], ["mn", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mini", 0], ["min", 0], ["l", 0], ["maxi", 0], ["max", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["m", 0], ["int", 0], ["input", 0], ["if", 0], ["m", 0], ["maxi", 0], ["and", 0], ["m", 0], ["mini", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["start", 0], ["a", 0], ["0", 0], ["end", 0], ["a", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["num", 0], ["int", 0], ["input", 0], ["if", 0], ["start", 0], ["num", 0], ["end", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["chk", 0], ["a", 0], ["q", 0], ["n", 0], ["l", 0], ["a", 0], ["0", 0], ["m", 0], ["a", 0], ["n", 0], ["1", 0], ["if", 0], ["q", 0], ["l", 0], ["and", 0], ["q", 0], ["m", 0], ["return", 0], ["yes", 0], ["return", 0], ["no", 0], ["def", 0], ["main", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["while", 0], ["q", 0], ["0", 0], ["q", 0], ["1", 0], ["ques", 0], ["int", 0], ["input", 0], ["print", 0], ["chk", 0], ["a", 0], ["ques", 0], ["n", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["chk", 0], ["a", 0], ["q", 0], ["l", 0], ["a", 0], ["0", 0], ["m", 0], ["a", 0], ["len", 0], ["a", 0], ["1", 0], ["if", 0], ["q", 0], ["l", 0], ["and", 0], ["q", 0], ["m", 0], ["return", 0], ["yes", 0], ["return", 0], ["no", 0], ["def", 0], ["main", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["while", 0], ["q", 0], ["0", 0], ["q", 0], ["1", 0], ["ques", 0], ["int", 0], ["input", 0], ["print", 0], ["chk", 0], ["a", 0], ["ques", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["p", 0], ["min", 0], ["a", 0], ["z", 0], ["max", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["t", 0], ["int", 0], ["input", 0], ["if", 0], ["p", 0], ["t", 0], ["z", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["collections", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["import", 0], ["math", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["z", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["p", 0], ["min", 0], ["a", 0], ["q", 0], ["max", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["z", 0], ["if", 0], ["p", 0], ["int", 0], ["input", 0], ["q", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mi", 0], ["min", 0], ["l", 0], ["mx", 0], ["max", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["m", 0], ["int", 0], ["input", 0], ["if", 0], ["m", 0], ["mx", 0], ["and", 0], ["m", 0], ["mi", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mi", 0], ["min", 0], ["l", 0], ["mx", 0], ["max", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["m", 0], ["int", 0], ["input", 0], ["if", 0], ["m", 0], ["mx", 0], ["and", 0], ["m", 0], ["mi", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["max", 0], ["l", 0], ["b", 0], ["min", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["y", 0], ["int", 0], ["input", 0], ["if", 0], ["y", 0], ["b", 0], ["and", 0], ["y", 0], ["a", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["max", 0], ["a", 0], ["y", 0], ["min", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["p", 0], ["int", 0], ["input", 0], ["if", 0], ["p", 0], ["x", 0], ["and", 0], ["p", 0], ["y", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["maximum", 0], ["max", 0], ["arr", 0], ["minimum", 0], ["min", 0], ["arr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["t", 0], ["int", 0], ["input", 0], ["if", 0], ["t", 0], ["minimum", 0], ["and", 0], ["t", 0], ["maximum", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["min", 0], ["a1", 0], ["c", 0], ["max", 0], ["a1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["s", 0], ["int", 0], ["input", 0], ["if", 0], ["s", 0], ["b", 0], ["and", 0], ["s", 0], ["c", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["query", 0], ["ar", 0], ["k", 0], ["a", 0], ["b", 0], ["return", 0], ["yes", 0], ["if", 0], ["k", 0], ["a", 0], ["and", 0], ["k", 0], ["b", 0], ["else", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ar", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["large", 0], ["small", 0], ["max", 0], ["ar", 0], ["min", 0], ["ar", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["k", 0], ["int", 0], ["input", 0], ["print", 0], ["query", 0], ["ar", 0], ["k", 0], ["large", 0], ["small", 0], ["starting", 0], ["point", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["def", 0], ["query", 0], ["ar", 0], ["k", 0], ["a", 0], ["b", 0], ["return", 0], ["yes", 0], ["if", 0], ["k", 0], ["a", 0], ["and", 0], ["k", 0], ["b", 0], ["else", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ar", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["large", 0], ["small", 0], ["max", 0], ["ar", 0], ["min", 0], ["ar", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["k", 0], ["int", 0], ["input", 0], ["print", 0], ["query", 0], ["ar", 0], ["k", 0], ["large", 0], ["small", 0], ["starting", 0], ["point", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["numbers", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["min", 0], ["numbers", 0], ["c", 0], ["max", 0], ["numbers", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["t", 0], ["int", 0], ["input", 0], ["if", 0], ["t", 0], ["b", 0], ["and", 0], ["t", 0], ["c", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["min", 0], ["a", 0], ["c", 0], ["max", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["t", 0], ["int", 0], ["input", 0], ["if", 0], ["t", 0], ["b", 0], ["and", 0], ["t", 0], ["c", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["min", 0], ["a", 0], ["c", 0], ["max", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["t", 0], ["int", 0], ["input", 0], ["if", 0], ["t", 0], ["b", 0], ["and", 0], ["t", 0], ["c", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["max", 0], ["a", 0], ["1", 0], ["if", 0], ["min", 0], ["a", 0], ["j", 0], ["and", 0], ["j", 0], ["max", 0], ["a", 0], ["l", 0], ["append", 0], ["j", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["t", 0], ["int", 0], ["input", 0], ["if", 0], ["t", 0], ["in", 0], ["l", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["min", 0], ["l", 0], ["l", 0], ["max", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["y", 0], ["a", 0], ["int", 0], ["input", 0], ["if", 0], ["a", 0], ["k", 0], ["and", 0], ["a", 0], ["l", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0027347310847766638, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0027347310847766638, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.013525698827772768, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.013525698827772768, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0027347310847766638, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0027347310847766638, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.013525698827772768, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.013525698827772768, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\n— This is not playing but duty as allies of justice, Nii-chan!\n\n— Not allies but justice itself, Onii-chan!\n\nWith hands joined, go everywhere at a speed faster than our thoughts! This time, the Fire Sisters — Karen and Tsukihi — is heading for somewhere they've never reached — water-surrounded islands!\n\nThere are three clusters of islands, conveniently coloured red, blue and purple. The clusters consist of a, b and c distinct islands respectively.\n\nBridges have been built between some (possibly all or none) of the islands. A bridge bidirectionally connects two different islands and has length 1. For any two islands of the same colour, either they shouldn't be reached from each other through bridges, or the shortest distance between them is at least 3, apparently in order to prevent oddities from spreading quickly inside a cluster.\n\nThe Fire Sisters are ready for the unknown, but they'd also like to test your courage. And you're here to figure out the number of different ways to build all bridges under the constraints, and give the answer modulo 998 244 353. Two ways are considered different if a pair of islands exist, such that there's a bridge between them in one of them, but not in the other.\n\n\n-----Input-----\n\nThe first and only line of input contains three space-separated integers a, b and c (1 ≤ a, b, c ≤ 5 000) — the number of islands in the red, blue and purple clusters, respectively.\n\n\n-----Output-----\n\nOutput one line containing an integer — the number of different ways to build bridges, modulo 998 244 353.\n\n\n-----Examples-----\nInput\n1 1 1\n\nOutput\n8\n\nInput\n1 2 2\n\nOutput\n63\n\nInput\n1 3 5\n\nOutput\n3264\n\nInput\n6 2 9\n\nOutput\n813023575\n\n\n\n-----Note-----\n\nIn the first example, there are 3 bridges that can possibly be built, and no setup of bridges violates the restrictions. Thus the answer is 2^3 = 8.\n\nIn the second example, the upper two structures in the figure below are instances of valid ones, while the lower two are invalid due to the blue and purple clusters, respectively. [Image]\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["m = 998244353\nn = 5050\nmi = [1] * n\nfor i in range(2, n):\n\tmi[i] = (-(m//i) * mi[m%i]) % m;\nf = [1] * n\ng = [1] * n\nfor i in range(2, n):\n\tf[i] = (f[i-1] * i) % m\n\tg[i] = (g[i-1] * mi[i]) % m\n\t\ndef calc(x, y):\n\ts = 1\n\tp = f[x] * f[y]\n\tfor i in range(1, min(x, y)+1):\n\t\tden = g[i] * g[x-i] * g[y-i]\n\t\ts += p * den % m\n\treturn s\n\na, b, c = map(int, input().split())\nans = calc(a, b) * calc(b, c) * calc(c, a) % m\nprint(ans)\n", "a,b,c = list(map(int, input().split(' ')))\n\n\nMOD = 998244353\n\ndef d(a, b):\n\ts = 1\n\tfor i in range(a, b+1):\n\t\ts*=i\n\t\ts%=MOD\n\treturn s\n\n\n\n\ndef cnk(n,k):\n\ts = 1\n\tfor i in range(n-k+1, n+1):\n\t\ts*=i\n\tfor i in range(1,k+1):\n\t\ts/=i\n\treturn s\n\n\ndef factorial(n):\n\ts = 1\n\tfor i in range(1, n+1):\n\t\ts*=i\t\n\treturn s\n\n\n\ndef pow(a, b):\n\tc = 1\n\n\twhile b>0:\n\t\tif b%2==0:\n\t\t\tb//=2\n\t\t\ta *=a\n\t\t\ta%=MOD\n\t\telse:\n\t\t\tb-=1\n\t\t\tc*=a\n\t\t\tc%=MOD\n\treturn c\n\n\ndef inv(i):\n\treturn pow(i, MOD-2)\n\"\"\"\ndef factinv(i):\n\n\treturn 1.0/factorial(i)\n\n\"\"\"\nfi = [1, 1]\ndef sp(n, m):\n\ts = 1\n\td1 = 1\n\td2 = 1\n\t#print(d1,d2,\"!\")\n\tfor i in range(1, n+1):\n\t\td1*=n-i+1\n\t\td2*=m-i+1\n\n\t\t#print(i, d1,d2)\n\t\td1%=MOD\n\t\td2%=MOD\n\t\ts+= d1*d2 *(fi[i]%MOD)\n\t\t#print(d1*d2 *(fi[i]%MOD))\n\t\ts%= MOD\n\n\treturn s\n\n\n\ns = 1\nfor i in range(2, max(a,max(b,c))+1):\n\ts *=i\n\ts %= MOD\n\tfi.append(inv(s))\n\n\nprint((sp(a,b)*sp(a,c)*sp(b,c))%MOD)\n#print(sp(1,2))\n#print(sp(2,2))\n#print()\n", "import math\nf = 998244353\n            \ndef matchings(a,b):\n\tm = max(a,b)\n\tn = min(a,b)\n\t\n\tt = 1\n\tp = 1\n\tfor i in range(0,n):\n\t\tp *= (n-i)*(m-i)\n\t\tp //= i+1\n\t\tt += p\n\tt = t % f\n\treturn(t)\n\ninputs = [int(x) for x in input().split(\" \")]\nk = matchings(inputs[0],inputs[1])*matchings(inputs[0],inputs[2])*matchings(inputs[2],inputs[1]) % f\nprint(k)\n", "import math\nf = 998244353\n            \ndef calc(a,b):\n\tm = max(a,b)\n\tn = min(a,b)\n\t\n\tt = 1\n\tp = 1\n\tfor i in range(0,n):\n\t\tp *= (n-i)*(m-i)\n\t\tp //= i+1\n\t\tt += p\n\tt = t % f\n\treturn(t)\n\na, b, c = map(int, input().split())\nans = calc(a, b) * calc(b, c) * calc(c, a) % f\nprint(ans)\n", "def gcd(a, b,):\n\tif b == 0:\n\t\treturn a, 1, 0\n\td, x_, y_  = gcd(b, a % b)\n\treturn d, y_, x_ - (a // b) * y_\n\n\ndef co(a, i):\n\treturn (f[a]*g[i]%998244353*g[a-i])%998244353\n\n\na, b, c = map(int, input().split())\nr = 0\nf = [1]\ng = []\nfor i in range(1, 5005):\n\tf.append(f[-1]*i%998244353)\ng = [(gcd(i, 998244353)[1]) for i in f]\nfor i in range(min(a, b)+1):\n\tr+=(co(a, i)*co(b, i)%998244353*f[i])%998244353\nh = 0\nfor i in range(min(a, c)+1):\n\th+=(co(a, i)*co(c, i)%998244353*f[i])%998244353\nv = 0\nfor i in range(min(c, b)+1):\n\tv+=(co(c, i)*co(b, i)%998244353*f[i])%998244353\nprint((r*h*v)%998244353)\n", "def gcd(a, b,):\n\tif b == 0:\n\t\treturn a, 1, 0\n\td, x_, y_  = gcd(b, a % b)\n\treturn d, y_, x_ - (a // b) * y_\n\n\na, b, c = map(int, input().split())\nr = 0\nf = [1]\ng = []\nfor i in range(1, 5005):\n\tf.append(f[-1]*i%998244353)\ng = [(gcd(i, 998244353)[1]) for i in f]\nfor i in range(min(a, b)+1):\n\tr+=(f[a]*g[i]*g[a-i]*f[b]*g[b-i])%998244353\nh = 0\nfor i in range(min(a, c)+1):\n\th+=(f[a]*g[i]*g[a-i]*f[c]*g[c-i])%998244353\nv = 0\nfor i in range(min(c, b)+1):\n\tv+=(f[c]*g[i]*g[c-i]*f[b]*g[b-i])%998244353\nprint((r*h*v)%998244353)\n", "def gcd(a, b,):\n\tif b == 0:\n\t\treturn a, 1, 0\n\td, x_, y_  = gcd(b, a % b)\n\treturn d, y_, x_ - (a // b) * y_\n\n\na, b, c = map(int, input().split())\nr = 0\nf = [1]\ng = []\nfor i in range(1, 5005):\n\tf.append(f[-1]*i%998244353)\ng = [(gcd(i, 998244353)[1]) for i in f]\nfor i in range(min(a, b)+1):\n\tr+=(f[a]*g[i]*g[a-i]*f[b]*g[b-i])%998244353\nh = 0\nfor i in range(min(a, c)+1):\n\th+=(f[a]*g[i]*g[a-i]*f[c]*g[c-i])%998244353\nv = 0\nfor i in range(min(c, b)+1):\n\tv+=(f[c]*g[i]*g[c-i]*f[b]*g[b-i])%998244353\nprint((r*h*v)%998244353)\n", "a, b, c = list(map(int, input().split()))\nmd = 998244353\n\ndef solve(x, y, z):\n\tres1 = 0\n\tres2 = 0\n\tres3 = 0\n\n\ta, b, c = sorted([x, y, z])\n\n\ttmpA, tmpB, tmpC, tmpK = 1, 1, 1, 1\n\n\tfor k in range(a + 1):\n\t\td = pow(tmpK, md - 2, md)\n\t\tres1 += (tmpA * tmpB * d) % md\n\t\tres2 += (tmpA * tmpC * d) % md\n\t\ttmpA *= a - k\n\t\ttmpA %= md\n\t\ttmpB *= b - k\n\t\ttmpB %= md\n\t\ttmpC *= c - k\n\t\ttmpC %= md\n\t\ttmpK *= k + 1\n\t\ttmpK %= md\n\n\t\tres1 = res1 % md\n\t\tres2 = res2 % md\n\n\ttmpB, tmpC, tmpK = 1, 1, 1\n\n\tfor k in range(b + 1):\n\t\td = pow(tmpK, md - 2, md)\n\t\tres3 += (tmpB * tmpC * d) % md\n\t\ttmpB *= b - k\n\t\ttmpB %= md\n\t\ttmpC *= c - k\n\t\ttmpC %= md\n\t\ttmpK *= k + 1\n\t\ttmpK %= md\n\n\t\tres3 = res3 % md\n\n\treturn (res1 * res2 * res3) % md\n\n\nres = solve(a, b, c) % 998244353\n\nprint(res)\n", "MOD = 998244353\ndef w(a, b):\n\t# SUM (k = 0..min) C(a, k) * C(b, k) * k!\n\trt, ca, cb, fl = 1, 1, 1, 1\n\tfor k in range(1, min(a, b) + 1):\n\t\tfl = fl * k % MOD\n\t\tca = ca * (a - k + 1) // k\n\t\tcb = cb * (b - k + 1) // k\n\t\trt = (rt + ((ca % MOD) * (cb % MOD) % MOD) * fl % MOD) % MOD\n\treturn rt\n\na, b, c = map(int, input().split())\nprint(((w(a, b) % MOD) * w(b, c) % MOD) * w(c, a) % MOD)\n", "a, b, c = [int(i) for i in input().split()]\nn = max(a, b, c) + 1\nmod = 998244353\nf = [0] * (n + 1)\nf[0] = 1\nfor i in range(1, n + 1):\n\tf[i] = (f[i-1] * i) % mod\n\ndef f_pow(a, k):\n\tif k == 0:\n\t\treturn 1\n\tif k % 2 == 1:\n\t\treturn f_pow(a, k - 1) * a % mod\n\telse:\n\t\treturn f_pow(a * a % mod, k // 2) % mod\n\ndef C(n, k):\n\td = f[k] * f[n - k] % mod\n\treturn f[n] * f_pow(d, mod - 2) % mod\n\t \nans, cur = 1, 0\n\nfor i in range(min(a, b) + 1):\n\tcur += C(a, i) * C(b, i) * f[i]\n\tcur %= mod\nans, cur = (ans * cur) % mod, 0\n\nfor i in range(min(b, c) + 1):\n\tcur += C(b, i) * C(c, i) * f[i]\n\tcur %= mod\nans, cur = (ans * cur) % mod, 0\n\nfor i in range(min(a, c) + 1):\n\tcur += C(a, i) * C(c, i) * f[i]\n\tcur %= mod\n\t\nprint((ans * cur) % mod)\n", "a, b, c = [int(i) for i in input().split()]\nn = max(a, b, c) + 1\nmod = 998244353\nf = [0] * (n + 1)\nf[0] = 1\nfor i in range(1, n + 1):\n\tf[i] = (f[i-1] * i) % mod\n\ndef f_pow(a, k):\n\tif k == 0:\n\t\treturn 1\n\tif k % 2 == 1:\n\t\treturn f_pow(a, k - 1) * a % mod\n\telse:\n\t\treturn f_pow(a * a % mod, k // 2) % mod\n\ndef C(n, k):\n\td = f[k] * f[n - k] % mod\n\treturn f[n] * f_pow(d, mod - 2) % mod\n\t \nans, cur = 1, 0\n\nfor i in range(min(a, b) + 1):\n\tcur += C(a, i) * C(b, i) * f[i]\n\tcur %= mod\nans, cur = (ans * cur) % mod, 0\n\nfor i in range(min(b, c) + 1):\n\tcur += C(b, i) * C(c, i) * f[i]\n\tcur %= mod\nans, cur = (ans * cur) % mod, 0\n\nfor i in range(min(a, c) + 1):\n\tcur += C(a, i) * C(c, i) * f[i]\n\tcur %= mod\n\t\nprint((ans * cur) % mod)\n", "import sys;\nimport time;\n\nmod=998244353\ndef calc(a,b):\n\tif(a<b):\n\t\ta,b=b,a;\n\ts=0;\n\tt=1;\n\tfor i in range(b+1):\n\t\ts=s+t;\n\t\tt=t*(a-i)//(i+1)*(b-i);\n\treturn s;\n\t\t\n(a,b,c)=list(map(int,sys.stdin.readline().split()));\nstart=time.time();\nprint(((calc(a,b)*calc(b,c)*calc(c,a))%mod));\nend=time.time();\n#print(end-start);\n", "MOD = 998244353\n\ndef getAns(a,b):\n\tif(a<b):\n\t\ta,b=b,a;\n\ts=0;\n\ttotal=1;\n\tfor i in range(b+1):\n\t\ts=s+total;\n\t\ttotal=total*(a-i)//(i+1)*(b-i);\n\treturn s;\n\nx = [int(i) for i in input().split()]\nx.sort()\nprint((getAns(x[2],x[1]) * getAns(x[1],x[0]) * getAns(x[2],x[0]))%MOD)\n", "mod = 998244353\nmaxn = 1005\n'''\ndef q_mod(a,b):\n\tans = 1\n\ta %= mod\n\twhile b != 0:\n\t\tif b&1 == 1:\n\t\t\tans = ans * a % mod\n\t\t\tb -= 1\n\t\tb >>= 1\n\t\ta = a * a % mod\n\treturn ans\n\ndef C(n,m):\n\tif m >n :\n\t\treturn 0\n\tans = 1\n\tfor i in range(1,m+1):\n\t\ta = (n + i - m) % mod\n\t\tb = i % mod\n\t\tans = ans * (a * q_mod(b , mod-2) % mod ) % mod\n\treturn ans \n\ndef Lucas(n,m):\n\tif m == 0:\n\t\treturn 1\n\treturn  C(n % mod,m % mod) * Lucas(int(n/mod) , int(m/mod)) % mod\n'''\n'''\nC = [ ([0]*maxn) for i in range(maxn)]\n\nfor i in range(2,maxn):\n\tfor j in range(i+1):\n\t\tif j == 0 or j == i:\n\t\t\tC[i][j] = 1\n\t\t\tcontinue;\n\t\tC[i][j] = (C[i-1][j] + C[i-1][j-1]) % mod\n\n\ndef A(n,m):\n\tj = 0\n\tans = 1\n\tfor i in range(0,n+1):\n\t\tif j == m:\n\t\t\tbreak\n\t\tj += 1\n\t\tans = (ans * (n - i)) % mod\n\treturn ans\n\n'''\n\ndef solve(n,m):\n\tif n > m:\n\t\tn , m = m , n\n\tans , s = 0 , 1\n\tfor i in range(0,n+1):\n\t\tans = ans + s\n\t\ts =s * (n - i) // (i + 1) * (m - i)\n\treturn ans\n\t\t\n\nwhile True:\n\ttry:\n\t\ta,b,c= list(map(int ,input().split()))\n\t\tprint(solve(a,b) * solve(a,c)* solve(b,c) % mod)\n\texcept:\n\t\tbreak\n\n", "def pwm(a,pw,mod):\n\tans = 1\n\twhile pw:\n\t\tif pw&1:\n\t\t\tans*=a\n\t\t\tans%=mod\n\t\ta*=a\n\t\tpw>>=1\n\t\ta%=mod\n\treturn ans\n\ndef precalc(mod):\n\trfact[0]=1\n\tfor i in range(1,5432):\n\t\tfact[i]=(fact[i-1]*i)%mod\n\t\trfact[i]=pwm(fact[i],mod-2,mod)\n\ndef cnk(n,k,mod):\n\treturn (fact[n]*rfact[k]*rfact[n-k])%mod\n\t\ndef calc(a,b,mod):\n\tans = 0\n\tfor k in range(min(a,b)+1):\n\t\tans+=(cnk(a,k,mod)*cnk(b,k,mod)*fact[k])\n\t\t#print(a,b,cnk(a,k,mod),cnk(b,k,mod))\n\t\tans%=mod\n\treturn ans\n\nfact = [1]*5432\nrfact = [0]*5432\nmod = 998244353\nprecalc(mod)\na,b,c = (int(z) for z in input().split())\nres=calc(a,b,mod)*calc(a,c,mod)*calc(b,c,mod)\nres%=mod\nprint(res)\n", "import math\n\nmod = 998244353\n\nfactmod = [0]*5001\n\nfactmod[0] = 1\nfor i in range(1, 5001):\n\tfactmod[i] = (factmod[i-1] * i) % mod\n\n\t\ndef nCk(n,k):\n\t'''if k > n//2:\n\t\tk=n-k\n\tret = 1\n\tfor i in range(1, k+1):\n\t\tret = ret * (n-i+1) // i\n\treturn ret\t'''\n\tif n==a:\n\t\treturn aCks[k]\n\tif n==b:\n\t\treturn bCks[k]\n\tif n==c:\n\t\treturn cCks[k]\n\txxx\n\t\n\t#return math.factorial(n) // math.factorial(k) // math.factorial(n-k)\n\ndef calc(x,y):\n\tnonlocal mod\n\tx,y = min(x,y), max(x,y)\n\tsm = 0\n\tfor i in range(x+1):\n\t\t\n\t\tsm += ((nCk(x, i)) % mod) * ((nCk(y, i)) % mod) * ((factmod[i]) % mod)\n\t\tsm = sm % mod\n\treturn sm\n\n#print(factmod[5], nCk(5, 3))\n\na,b,c = list(map(int, input().split()))\n\naCks = [1]*(a+1)\nfor i in range(1, a):\n\taCks[i] = aCks[i-1] * (a-i+1) // (i)\naCks = [aCks[i] % mod for i in range(len(aCks))]\n#print(aCks[:a+1])\n\nbCks = [1]*(b+1)\nfor i in range(1, b):\n\tbCks[i] = bCks[i-1] * (b-i+1) // (i)\nbCks = [bCks[i] % mod for i in range(len(bCks))]\n\ncCks = [1]*(c+1)\nfor i in range(1, c):\n\tcCks[i] = cCks[i-1] * (c-i+1) // (i)\ncCks = [cCks[i] % mod for i in range(len(cCks))]\n\n#print(aCks)\n#print(bCks)\n#print(cCks)\n\t\n\nprint((calc(a,b)*calc(b,c)*calc(a,c)) % mod)\n\n", "f=[1]*50001\nmod=998244353\nfor i in range(1,5001):\n\tf[i]=(f[i-1]*i)%mod\na,b,c=(int(i) for i in input().split())\ndef pwr(b,e):\n\tif(b==0): return 0\n\tif(e==0): return 1\n\tif(e%2==0):\n\t\tz=pwr(b,e/2)%mod\n\t\treturn (z*z)%mod\n\treturn (b*pwr(b,e-1))%mod\ndef nCr(n,r):\n\tden=(f[r]*f[n-r])%mod\n\treturn (f[n]*pwr(den,mod-2))%mod\ndef g(x,y):\n\tmn=min([x,y])\n\tsm=0\n\tnonlocal mod\n\tfor i in range(0,mn+1):\n\t\tsm+=(nCr(x,i)*nCr(y,i)*f[i])%mod\n\t\tsm=sm%mod\n\treturn sm\nans=g(a,b)*g(b,c)*g(c,a)\nans=ans%mod\nprint(int(ans))\n\t\n", "a, b, c = list(map(int, input().split(' ')))\np = 998244353\n\ndef calc (a, b) :\n\tif a > b:\n\t\ta, b = b, a\n\tans = 0\n\ttmp = 1\n\tfor i in range(a + 1):\n\t\tans = (ans + tmp) % p\n\t\ttmp = tmp * (a - i) * (b - i) * pow(i + 1, p - 2, p) % p\n\treturn ans\n\nans = calc(a, b) * calc(b, c) * calc(a, c) % p\n\nprint(ans)\n", "a, b, c = map(int, input().split(' '))\np = 998244353\n\ndef calc (a, b) :\n\tif a > b:\n\t\ta, b = b, a\n\tans = 0\n\ttmp = 1\n\tfor i in range(a + 1):\n\t\tans = (ans + tmp) % p\n\t\ttmp = tmp * (a - i) * (b - i) * pow(i + 1, p - 2, p) % p\n\treturn ans\n\nans = calc(a, b) * calc(b, c) * calc(a, c) % p\n\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\n\n\"\"\"\ncreated by shhuan at 2017/10/6 22:19\n\n\"\"\"\n\nt0 = time.time()\na, b, c = list(map(int, input().split()))\n\ndef ct(a, b):\n\tif a > b:\n\t\ta, b = b, a\n\tL=998244353\n\ts=1\n\tsx=1\n\tfor k in range(1,a+1):\n\t\ts = s*(a+1-k)*(b+1-k)//k\n\t\tsx += s % L\n\treturn sx\n\nL=998244353\n\nprint(ct(a,b)*ct(a,c)*ct(b,c)%L)\n\n# print(time.time()-t0)\n\n# p = [[0 for _ in range(MAXN)] for _ in range(MAXN)]\n# for i in range(1, MAXN):\n#     p[i][0] = 1\n#     for j in range(1, i+1):\n#         p[i][j] = (p[i-1][j-1]+p[i-1][j]) % MOD\n# print(time.time() - t0)\n# pre = [0] * MAXN\n# pre[0] = 1\n# for i in range(1, MAXN):\n#     pre[i] = (i*pre[i-1]) % MOD\n#\n#\n# def solve(x, y):\n#     ans = 0\n#     for k in range(min(x, y)+1):\n#         d = pre[k]\n#         d = (d*p[x][k]) % MOD\n#         d = (d*p[y][k]) % MOD\n#         ans = (ans+d) % MOD\n#\n#     return ans\n#\n# ans = 1\n# ans = (ans * solve(a, b)) % MOD\n# ans = (ans * solve(b, c)) % MOD\n# ans = (ans * solve(a, c)) % MOD\n# print(ans)\n#\n# print(time.time() - t0)\n", "\"\"\"http://codeforces.com/problemset/problem/869/C\"\"\"\n\ndef calc(x,y):\n\tsi, ans = 1, 1\n\tn,m = min(x,y), max(x,y)\n\tfor i in range(1,n+1):\n\t\tsi = (si * (n-i+1) * (m-i+1) // i)\n\t\tans = (ans + si)\n\treturn ans % MOD\n\n\nMOD = 998244353\na,b,c = list(map(int, input().split()))\nrb = calc(a,b)\nrp = calc(a,c)\nbp = calc(b,c)\nres = rb*rp*bp % MOD\nprint(res)\n\n", "a, b, c = map(int, input().split())\nM = 998244353\ndef calc(a, b) :\n\tif a > b:\n\t\ta, b = b, a\n\tans = 0\n\tt = 1\n\tfor i in range(a + 1):\n\t\tans = (ans + t) % M\n\t\tt = t * (a - i) * (b - i) * pow(i + 1, M - 2, M) % M\n\treturn ans\nans = calc(a, b) * calc(b, c) * calc(a, c) % M\nprint(ans)\n", "mod = 998244353\n\ndef binpow(num, p):\n\tif(p == 0):\n\t\treturn 1\n\tif(p % 2 == 0):\n\t\treturn binpow((num * num) % mod, p // 2)\n\treturn (num * binpow(num, p - 1)) % mod\n\ndef rev(num):\n\treturn binpow(num, mod - 2)\n\ndef solve(a, b):\n\tresult = 1\n\tprev = 1\n\tfor k in range(1, min(a, b) + 1):\n\t\tnow = (prev * (a - (k - 1)) * (b - (k - 1)) * rev(k)) % mod\n\t\tresult  = (result + now) % mod\n\t\tprev = now\n\treturn (result) % mod\n\na, b, c = list(map(int, input().split()))\n\nres1 = solve(a, b)\nres2 = solve(b, c)\nres3 = solve(a, c)\n\nprint((res1 * res2 * res3) % mod)\n"], "id": "id8098"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8098", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["—", 0], ["this", 0], ["is", 0], ["not", 0], ["playing", 0], ["but", 0], ["duty", 0], ["as", 0], ["allies", 0], ["of", 0], ["justice", 0], ["nii", 0], ["chan", 0], ["—", 0], ["not", 0], ["allies", 0], ["but", 0], ["justice", 0], ["itself", 0], ["onii", 0], ["chan", 0], ["with", 1], ["hands", 1], ["joined", 1], ["go", 1], ["everywhere", 1], ["at", 1], ["a", 1], ["speed", 1], ["faster", 1], ["than", 1], ["our", 1], ["thoughts", 1], ["this", 1], ["time", 1], ["the", 0], ["fire", 0], ["sisters", 0], ["—", 0], ["karen", 0], ["and", 0], ["tsukihi", 0], ["—", 0], ["is", 0], ["heading", 0], ["for", 0], ["somewhere", 0], ["they", 0], ["ve", 0], ["never", 1], ["reached", 1], ["—", 1], ["water", 1], ["surrounded", 1], ["islands", 1], ["there", 1], ["are", 1], ["three", 1], ["clusters", 1], ["of", 1], ["islands", 1], ["conveniently", 1], ["coloured", 1], ["red", 1], ["blue", 1], ["and", 1], ["purple", 1], ["the", 1], ["clusters", 1], ["consist", 1], ["of", 1], ["a", 1], ["b", 1], ["and", 1], ["c", 1], ["distinct", 1], ["islands", 1], ["respectively", 1], ["bridges", 1], ["have", 1], ["been", 1], ["built", 1], ["between", 1], ["some", 1], ["possibly", 1], ["all", 1], ["or", 1], ["none", 1], ["of", 1], ["the", 1], ["islands", 1], ["a", 1], ["bridge", 1], ["bidirectionally", 1], ["connects", 1], ["two", 1], ["different", 1], ["islands", 1], ["and", 1], ["has", 1], ["length", 0], ["1", 0], ["for", 0], ["any", 0], ["two", 0], ["islands", 0], ["of", 0], ["the", 0], ["same", 0], ["colour", 0], ["either", 0], ["they", 0], ["shouldn", 0], ["t", 0], ["be", 1], ["reached", 1], ["from", 1], ["each", 1], ["other", 1], ["through", 1], ["bridges", 1], ["or", 1], ["the", 1], ["shortest", 1], ["distance", 1], ["between", 1], ["them", 1], ["is", 1], ["at", 1], ["least", 1], ["3", 1], ["apparently", 1], ["in", 1], ["order", 1], ["to", 1], ["prevent", 1], ["oddities", 1], ["from", 1], ["spreading", 1], ["quickly", 1], ["inside", 0], ["a", 0], ["cluster", 0], ["the", 0], ["fire", 0], ["sisters", 0], ["are", 0], ["ready", 0], ["for", 0], ["the", 0], ["unknown", 0], ["but", 0], ["they", 0], ["d", 0], ["also", 0], ["like", 0], ["to", 0], ["test", 0], ["your", 0], ["courage", 0], ["and", 0], ["you", 0], ["re", 0], ["here", 1], ["to", 1], ["figure", 1], ["out", 1], ["the", 1], ["number", 1], ["of", 1], ["different", 1], ["ways", 1], ["to", 1], ["build", 1], ["all", 1], ["bridges", 1], ["under", 1], ["the", 1], ["constraints", 1], ["and", 1], ["give", 1], ["the", 1], ["answer", 1], ["modulo", 1], ["998", 1], ["244", 1], ["353", 1], ["two", 1], ["ways", 0], ["are", 0], ["considered", 0], ["different", 0], ["if", 0], ["a", 0], ["pair", 0], ["of", 0], ["islands", 0], ["exist", 0], ["such", 0], ["that", 0], ["there", 0], ["s", 0], ["a", 1], ["bridge", 0], ["between", 0], ["them", 0], ["in", 0], ["one", 0], ["of", 0], ["them", 0], ["but", 0], ["not", 0], ["in", 0], ["the", 0], ["other", 0], ["input", 0], ["the", 1], ["first", 1], ["and", 1], ["only", 1], ["line", 1], ["of", 1], ["input", 3], ["contains", 3], ["three", 5], ["space", 5], ["separated", 1], ["integers", 1], ["a", 1], ["b", 1], ["and", 1], ["c", 1], ["1", 1], ["≤", 1], ["a", 1], ["b", 1], ["c", 1], ["≤", 1], ["5", 1], ["000", 1], ["—", 1], ["the", 1], ["number", 0], ["of", 0], ["islands", 0], ["in", 0], ["the", 0], ["red", 0], ["blue", 0], ["and", 0], ["purple", 0], ["clusters", 0], ["respectively", 0], ["output", 0], ["output", 1], ["one", 1], ["line", 1], ["containing", 1], ["an", 0], ["integer", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["different", 0], ["ways", 0], ["to", 0], ["build", 0], ["bridges", 0], ["modulo", 0], ["998", 0], ["244", 0], ["353", 0], ["examples", 0], ["input", 0], ["1", 0], ["1", 0], ["1", 0], ["output", 0], ["8", 0], ["input", 0], ["1", 0], ["2", 0], ["2", 0], ["output", 0], ["63", 0], ["input", 0], ["1", 0], ["3", 0], ["5", 0], ["output", 0], ["3264", 0], ["input", 0], ["6", 0], ["2", 0], ["9", 0], ["output", 0], ["813023575", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["example", 0], ["there", 0], ["are", 0], ["3", 0], ["bridges", 0], ["that", 0], ["can", 0], ["possibly", 0], ["be", 0], ["built", 0], ["and", 0], ["no", 0], ["setup", 0], ["of", 0], ["bridges", 0], ["violates", 0], ["the", 0], ["restrictions", 0], ["thus", 0], ["the", 0], ["answer", 0], ["is", 0], ["2", 0], ["3", 0], ["8", 0], ["in", 0], ["the", 0], ["second", 0], ["example", 0], ["the", 0], ["upper", 0], ["two", 0], ["structures", 0], ["in", 0], ["the", 0], ["figure", 0], ["below", 0], ["are", 0], ["instances", 0], ["of", 0], ["valid", 0], ["ones", 0], ["while", 0], ["the", 0], ["lower", 0], ["two", 0], ["are", 0], ["invalid", 0], ["due", 0], ["to", 0], ["the", 0], ["blue", 0], ["and", 0], ["purple", 0], ["clusters", 0], ["respectively", 0], ["image", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4106145251396648, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.40242085661080074, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6243243243243243, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6243243243243243, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4106145251396648, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.40242085661080074, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6243243243243243, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6243243243243243, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["m", 0], ["998244353", 0], ["n", 0], ["5050", 0], ["mi", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["mi", 0], ["i", 0], ["m", 0], ["i", 0], ["mi", 0], ["m", 0], ["i", 0], ["m", 0], ["f", 0], ["1", 0], ["n", 0], ["g", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["f", 0], ["i", 0], ["f", 0], ["i", 0], ["1", 0], ["i", 0], ["m", 0], ["g", 0], ["i", 0], ["g", 0], ["i", 0], ["1", 0], ["mi", 0], ["i", 0], ["m", 0], ["def", 0], ["calc", 0], ["x", 0], ["y", 0], ["s", 0], ["1", 0], ["p", 0], ["f", 0], ["x", 0], ["f", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["min", 0], ["x", 0], ["y", 0], ["1", 0], ["den", 0], ["g", 0], ["i", 0], ["g", 0], ["x", 0], ["i", 0], ["g", 0], ["y", 0], ["i", 0], ["s", 0], ["p", 0], ["den", 0], ["m", 0], ["return", 0], ["s", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["calc", 0], ["a", 0], ["b", 0], ["calc", 0], ["b", 0], ["c", 0], ["calc", 0], ["c", 0], ["a", 0], ["m", 0], ["print", 0], ["ans", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["d", 0], ["a", 0], ["b", 0], ["s", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["b", 0], ["1", 0], ["s", 0], ["i", 0], ["s", 0], ["mod", 0], ["return", 0], ["s", 0], ["def", 0], ["cnk", 0], ["n", 0], ["k", 0], ["s", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["1", 0], ["n", 0], ["1", 0], ["s", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["s", 0], ["i", 0], ["return", 0], ["s", 0], ["def", 0], ["factorial", 0], ["n", 0], ["s", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["s", 0], ["i", 0], ["return", 0], ["s", 0], ["def", 0], ["pow", 0], ["a", 0], ["b", 0], ["c", 0], ["1", 0], ["while", 0], ["b", 0], ["0", 0], ["if", 0], ["b", 0], ["2", 0], ["0", 0], ["b", 0], ["2", 0], ["a", 0], ["a", 0], ["a", 0], ["mod", 0], ["else", 0], ["b", 0], ["1", 0], ["c", 0], ["a", 0], ["c", 0], ["mod", 0], ["return", 0], ["c", 0], ["def", 0], ["inv", 0], ["i", 0], ["return", 0], ["pow", 0], ["i", 0], ["mod", 0], ["2", 0], ["def", 0], ["factinv", 0], ["i", 0], ["return", 0], ["1", 0], ["0", 0], ["factorial", 0], ["i", 0], ["fi", 0], ["1", 0], ["1", 0], ["def", 0], ["sp", 0], ["n", 0], ["m", 0], ["s", 0], ["1", 0], ["d1", 0], ["1", 0], ["d2", 0], ["1", 0], ["print", 0], ["d1", 0], ["d2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["d1", 0], ["n", 0], ["i", 0], ["1", 0], ["d2", 0], ["m", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["d1", 0], ["d2", 0], ["d1", 0], ["mod", 0], ["d2", 0], ["mod", 0], ["s", 0], ["d1", 0], ["d2", 0], ["fi", 0], ["i", 0], ["mod", 0], ["print", 0], ["d1", 0], ["d2", 0], ["fi", 0], ["i", 0], ["mod", 0], ["s", 0], ["mod", 0], ["return", 0], ["s", 0], ["s", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["max", 0], ["a", 0], ["max", 0], ["b", 0], ["c", 0], ["1", 0], ["s", 0], ["i", 0], ["s", 0], ["mod", 0], ["fi", 0], ["append", 0], ["inv", 0], ["s", 0], ["print", 0], ["sp", 0], ["a", 0], ["b", 0], ["sp", 0], ["a", 0], ["c", 0], ["sp", 0], ["b", 0], ["c", 0], ["mod", 0], ["print", 0], ["sp", 0], ["1", 0], ["2", 0], ["print", 0], ["sp", 0], ["2", 0], ["2", 0], ["print", 0], ["import", 0], ["math", 0], ["f", 0], ["998244353", 0], ["def", 0], ["matchings", 0], ["a", 0], ["b", 0], ["m", 0], ["max", 0], ["a", 0], ["b", 0], ["n", 0], ["min", 0], ["a", 0], ["b", 0], ["t", 0], ["1", 0], ["p", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["p", 0], ["n", 0], ["i", 0], ["m", 0], ["i", 0], ["p", 0], ["i", 0], ["1", 0], ["t", 0], ["p", 0], ["t", 0], ["t", 0], ["f", 0], ["return", 0], ["t", 0], ["inputs", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["k", 0], ["matchings", 0], ["inputs", 0], ["0", 0], ["inputs", 0], ["1", 0], ["matchings", 0], ["inputs", 0], ["0", 0], ["inputs", 0], ["2", 0], ["matchings", 0], ["inputs", 0], ["2", 0], ["inputs", 0], ["1", 0], ["f", 0], ["print", 0], ["k", 0], ["import", 0], ["math", 0], ["f", 0], ["998244353", 0], ["def", 0], ["calc", 0], ["a", 0], ["b", 0], ["m", 0], ["max", 0], ["a", 0], ["b", 0], ["n", 0], ["min", 0], ["a", 0], ["b", 0], ["t", 0], ["1", 0], ["p", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["p", 0], ["n", 0], ["i", 0], ["m", 0], ["i", 0], ["p", 0], ["i", 0], ["1", 0], ["t", 0], ["p", 0], ["t", 0], ["t", 0], ["f", 0], ["return", 0], ["t", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["calc", 0], ["a", 0], ["b", 0], ["calc", 0], ["b", 0], ["c", 0], ["calc", 0], ["c", 0], ["a", 0], ["f", 0], ["print", 0], ["ans", 0], ["def", 0], ["gcd", 0], ["a", 0], ["b", 0], ["if", 0], ["b", 0], ["0", 0], ["return", 0], ["a", 0], ["1", 0], ["0", 0], ["d", 0], ["x", 0], ["y", 0], ["gcd", 0], ["b", 0], ["a", 0], ["b", 0], ["return", 0], ["d", 0], ["y", 0], ["x", 0], ["a", 0], ["b", 0], ["y", 0], ["def", 0], ["co", 0], ["a", 0], ["i", 0], ["return", 0], ["f", 0], ["a", 0], ["g", 0], ["i", 0], ["998244353", 0], ["g", 0], ["a", 0], ["i", 0], ["998244353", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["r", 0], ["0", 0], ["f", 0], ["1", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["5005", 0], ["f", 0], ["append", 0], ["f", 0], ["1", 0], ["i", 0], ["998244353", 0], ["g", 0], ["gcd", 0], ["i", 0], ["998244353", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["f", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["a", 0], ["b", 0], ["1", 0], ["r", 0], ["co", 0], ["a", 0], ["i", 0], ["co", 0], ["b", 0], ["i", 0], ["998244353", 0], ["f", 0], ["i", 0], ["998244353", 0], ["h", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["a", 0], ["c", 0], ["1", 0], ["h", 0], ["co", 0], ["a", 0], ["i", 0], ["co", 0], ["c", 0], ["i", 0], ["998244353", 0], ["f", 0], ["i", 0], ["998244353", 0], ["v", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["c", 0], ["b", 0], ["1", 0], ["v", 0], ["co", 0], ["c", 0], ["i", 0], ["co", 0], ["b", 0], ["i", 0], ["998244353", 0], ["f", 0], ["i", 0], ["998244353", 0], ["print", 0], ["r", 0], ["h", 0], ["v", 0], ["998244353", 0], ["def", 0], ["gcd", 0], ["a", 0], ["b", 0], ["if", 0], ["b", 0], ["0", 0], ["return", 0], ["a", 0], ["1", 0], ["0", 0], ["d", 0], ["x", 0], ["y", 0], ["gcd", 0], ["b", 0], ["a", 0], ["b", 0], ["return", 0], ["d", 0], ["y", 0], ["x", 0], ["a", 0], ["b", 0], ["y", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["r", 0], ["0", 0], ["f", 0], ["1", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["5005", 0], ["f", 0], ["append", 0], ["f", 0], ["1", 0], ["i", 0], ["998244353", 0], ["g", 0], ["gcd", 0], ["i", 0], ["998244353", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["f", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["a", 0], ["b", 0], ["1", 0], ["r", 0], ["f", 0], ["a", 0], ["g", 0], ["i", 0], ["g", 0], ["a", 0], ["i", 0], ["f", 0], ["b", 0], ["g", 0], ["b", 0], ["i", 0], ["998244353", 0], ["h", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["a", 0], ["c", 0], ["1", 0], ["h", 0], ["f", 0], ["a", 0], ["g", 0], ["i", 0], ["g", 0], ["a", 0], ["i", 0], ["f", 0], ["c", 0], ["g", 0], ["c", 0], ["i", 0], ["998244353", 0], ["v", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["c", 0], ["b", 0], ["1", 0], ["v", 0], ["f", 0], ["c", 0], ["g", 0], ["i", 0], ["g", 0], ["c", 0], ["i", 0], ["f", 0], ["b", 0], ["g", 0], ["b", 0], ["i", 0], ["998244353", 0], ["print", 0], ["r", 0], ["h", 0], ["v", 0], ["998244353", 0], ["def", 0], ["gcd", 0], ["a", 0], ["b", 0], ["if", 0], ["b", 0], ["0", 0], ["return", 0], ["a", 0], ["1", 0], ["0", 0], ["d", 0], ["x", 0], ["y", 0], ["gcd", 0], ["b", 0], ["a", 0], ["b", 0], ["return", 0], ["d", 0], ["y", 0], ["x", 0], ["a", 0], ["b", 0], ["y", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["r", 0], ["0", 0], ["f", 0], ["1", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["5005", 0], ["f", 0], ["append", 0], ["f", 0], ["1", 0], ["i", 0], ["998244353", 0], ["g", 0], ["gcd", 0], ["i", 0], ["998244353", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["f", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["a", 0], ["b", 0], ["1", 0], ["r", 0], ["f", 0], ["a", 0], ["g", 0], ["i", 0], ["g", 0], ["a", 0], ["i", 0], ["f", 0], ["b", 0], ["g", 0], ["b", 0], ["i", 0], ["998244353", 0], ["h", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["a", 0], ["c", 0], ["1", 0], ["h", 0], ["f", 0], ["a", 0], ["g", 0], ["i", 0], ["g", 0], ["a", 0], ["i", 0], ["f", 0], ["c", 0], ["g", 0], ["c", 0], ["i", 0], ["998244353", 0], ["v", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["c", 0], ["b", 0], ["1", 0], ["v", 0], ["f", 0], ["c", 0], ["g", 0], ["i", 0], ["g", 0], ["c", 0], ["i", 0], ["f", 0], ["b", 0], ["g", 0], ["b", 0], ["i", 0], ["998244353", 0], ["print", 0], ["r", 0], ["h", 0], ["v", 0], ["998244353", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["md", 0], ["998244353", 0], ["def", 0], ["solve", 0], ["x", 0], ["y", 0], ["z", 0], ["res1", 0], ["0", 0], ["res2", 0], ["0", 0], ["res3", 0], ["0", 0], ["a", 0], ["b", 0], ["c", 0], ["sorted", 0], ["x", 0], ["y", 0], ["z", 0], ["tmpa", 0], ["tmpb", 0], ["tmpc", 0], ["tmpk", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["d", 0], ["pow", 0], ["tmpk", 0], ["md", 0], ["2", 0], ["md", 0], ["res1", 0], ["tmpa", 0], ["tmpb", 0], ["d", 0], ["md", 0], ["res2", 0], ["tmpa", 0], ["tmpc", 0], ["d", 0], ["md", 0], ["tmpa", 0], ["a", 0], ["k", 0], ["tmpa", 0], ["md", 0], ["tmpb", 0], ["b", 0], ["k", 0], ["tmpb", 0], ["md", 0], ["tmpc", 0], ["c", 0], ["k", 0], ["tmpc", 0], ["md", 0], ["tmpk", 0], ["k", 0], ["1", 0], ["tmpk", 0], ["md", 0], ["res1", 0], ["res1", 0], ["md", 0], ["res2", 0], ["res2", 0], ["md", 0], ["tmpb", 0], ["tmpc", 0], ["tmpk", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["d", 0], ["pow", 0], ["tmpk", 0], ["md", 0], ["2", 0], ["md", 0], ["res3", 0], ["tmpb", 0], ["tmpc", 0], ["d", 0], ["md", 0], ["tmpb", 0], ["b", 0], ["k", 0], ["tmpb", 0], ["md", 0], ["tmpc", 0], ["c", 0], ["k", 0], ["tmpc", 0], ["md", 0], ["tmpk", 0], ["k", 0], ["1", 0], ["tmpk", 0], ["md", 0], ["res3", 0], ["res3", 0], ["md", 0], ["return", 0], ["res1", 0], ["res2", 0], ["res3", 0], ["md", 0], ["res", 0], ["solve", 0], ["a", 0], ["b", 0], ["c", 0], ["998244353", 0], ["print", 0], ["res", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["w", 0], ["a", 0], ["b", 0], ["sum", 0], ["k", 0], ["0", 0], ["min", 0], ["c", 0], ["a", 0], ["k", 0], ["c", 0], ["b", 0], ["k", 0], ["k", 0], ["rt", 0], ["ca", 0], ["cb", 0], ["fl", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["1", 0], ["min", 0], ["a", 0], ["b", 0], ["1", 0], ["fl", 0], ["fl", 0], ["k", 0], ["mod", 0], ["ca", 0], ["ca", 0], ["a", 0], ["k", 0], ["1", 0], ["k", 0], ["cb", 0], ["cb", 0], ["b", 0], ["k", 0], ["1", 0], ["k", 0], ["rt", 0], ["rt", 0], ["ca", 0], ["mod", 0], ["cb", 0], ["mod", 0], ["mod", 0], ["fl", 0], ["mod", 0], ["mod", 0], ["return", 0], ["rt", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["w", 0], ["a", 0], ["b", 0], ["mod", 0], ["w", 0], ["b", 0], ["c", 0], ["mod", 0], ["w", 0], ["c", 0], ["a", 0], ["mod", 0], ["a", 0], ["b", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["max", 0], ["a", 0], ["b", 0], ["c", 0], ["1", 0], ["mod", 0], ["998244353", 0], ["f", 0], ["0", 0], ["n", 0], ["1", 0], ["f", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["f", 0], ["i", 0], ["f", 0], ["i", 0], ["1", 0], ["i", 0], ["mod", 0], ["def", 0], ["f", 0], ["pow", 0], ["a", 0], ["k", 0], ["if", 0], ["k", 0], ["0", 0], ["return", 0], ["1", 0], ["if", 0], ["k", 0], ["2", 0], ["1", 0], ["return", 0], ["f", 0], ["pow", 0], ["a", 0], ["k", 0], ["1", 0], ["a", 0], ["mod", 0], ["else", 0], ["return", 0], ["f", 0], ["pow", 0], ["a", 0], ["a", 0], ["mod", 0], ["k", 0], ["2", 0], ["mod", 0], ["def", 0], ["c", 0], ["n", 0], ["k", 0], ["d", 0], ["f", 0], ["k", 0], ["f", 0], ["n", 0], ["k", 0], ["mod", 0], ["return", 0], ["f", 0], ["n", 0], ["f", 0], ["pow", 0], ["d", 0], ["mod", 0], ["2", 0], ["mod", 0], ["ans", 0], ["cur", 0], ["1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["a", 0], ["b", 0], ["1", 0], ["cur", 0], ["c", 0], ["a", 0], ["i", 0], ["c", 0], ["b", 0], ["i", 0], ["f", 0], ["i", 0], ["cur", 0], ["mod", 0], ["ans", 0], ["cur", 0], ["ans", 0], ["cur", 0], ["mod", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["b", 0], ["c", 0], ["1", 0], ["cur", 0], ["c", 0], ["b", 0], ["i", 0], ["c", 0], ["c", 0], ["i", 0], ["f", 0], ["i", 0], ["cur", 0], ["mod", 0], ["ans", 0], ["cur", 0], ["ans", 0], ["cur", 0], ["mod", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["a", 0], ["c", 0], ["1", 0], ["cur", 0], ["c", 0], ["a", 0], ["i", 0], ["c", 0], ["c", 0], ["i", 0], ["f", 0], ["i", 0], ["cur", 0], ["mod", 0], ["print", 0], ["ans", 0], ["cur", 0], ["mod", 0], ["a", 0], ["b", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["max", 0], ["a", 0], ["b", 0], ["c", 0], ["1", 0], ["mod", 0], ["998244353", 0], ["f", 0], ["0", 0], ["n", 0], ["1", 0], ["f", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["f", 0], ["i", 0], ["f", 0], ["i", 0], ["1", 0], ["i", 0], ["mod", 0], ["def", 0], ["f", 0], ["pow", 0], ["a", 0], ["k", 0], ["if", 0], ["k", 0], ["0", 0], ["return", 0], ["1", 0], ["if", 0], ["k", 0], ["2", 0], ["1", 0], ["return", 0], ["f", 0], ["pow", 0], ["a", 0], ["k", 0], ["1", 0], ["a", 0], ["mod", 0], ["else", 0], ["return", 0], ["f", 0], ["pow", 0], ["a", 0], ["a", 0], ["mod", 0], ["k", 0], ["2", 0], ["mod", 0], ["def", 0], ["c", 0], ["n", 0], ["k", 0], ["d", 0], ["f", 0], ["k", 0], ["f", 0], ["n", 0], ["k", 0], ["mod", 0], ["return", 0], ["f", 0], ["n", 0], ["f", 0], ["pow", 0], ["d", 0], ["mod", 0], ["2", 0], ["mod", 0], ["ans", 0], ["cur", 0], ["1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["a", 0], ["b", 0], ["1", 0], ["cur", 0], ["c", 0], ["a", 0], ["i", 0], ["c", 0], ["b", 0], ["i", 0], ["f", 0], ["i", 0], ["cur", 0], ["mod", 0], ["ans", 0], ["cur", 0], ["ans", 0], ["cur", 0], ["mod", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["b", 0], ["c", 0], ["1", 0], ["cur", 0], ["c", 0], ["b", 0], ["i", 0], ["c", 0], ["c", 0], ["i", 0], ["f", 0], ["i", 0], ["cur", 0], ["mod", 0], ["ans", 0], ["cur", 0], ["ans", 0], ["cur", 0], ["mod", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["a", 0], ["c", 0], ["1", 0], ["cur", 0], ["c", 0], ["a", 0], ["i", 0], ["c", 0], ["c", 0], ["i", 0], ["f", 0], ["i", 0], ["cur", 0], ["mod", 0], ["print", 0], ["ans", 0], ["cur", 0], ["mod", 0], ["import", 0], ["sys", 0], ["import", 0], ["time", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["calc", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["s", 0], ["0", 0], ["t", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["s", 0], ["s", 0], ["t", 0], ["t", 0], ["t", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["return", 0], ["s", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["start", 0], ["time", 0], ["time", 0], ["print", 0], ["calc", 0], ["a", 0], ["b", 0], ["calc", 0], ["b", 0], ["c", 0], ["calc", 0], ["c", 0], ["a", 0], ["mod", 0], ["end", 0], ["time", 0], ["time", 0], ["print", 0], ["end", 0], ["start", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["getans", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["s", 0], ["0", 0], ["total", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["b", 0], ["1", 0], ["s", 0], ["s", 0], ["total", 0], ["total", 0], ["total", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["return", 0], ["s", 0], ["x", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["x", 0], ["sort", 0], ["print", 0], ["getans", 0], ["x", 0], ["2", 0], ["x", 0], ["1", 0], ["getans", 0], ["x", 0], ["1", 0], ["x", 0], ["0", 0], ["getans", 0], ["x", 0], ["2", 0], ["x", 0], ["0", 0], ["mod", 0], ["mod", 0], ["998244353", 0], ["maxn", 0], ["1005", 0], ["def", 0], ["q", 0], ["mod", 0], ["a", 0], ["b", 0], ["ans", 0], ["1", 0], ["a", 0], ["mod", 0], ["while", 0], ["b", 0], ["0", 0], ["if", 0], ["b", 0], ["1", 0], ["1", 0], ["ans", 0], ["ans", 0], ["a", 0], ["mod", 0], ["b", 0], ["1", 0], ["b", 0], ["1", 0], ["a", 0], ["a", 0], ["a", 0], ["mod", 0], ["return", 0], ["ans", 0], ["def", 0], ["c", 0], ["n", 0], ["m", 0], ["if", 0], ["m", 0], ["n", 0], ["return", 0], ["0", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["a", 0], ["n", 0], ["i", 0], ["m", 0], ["mod", 0], ["b", 0], ["i", 0], ["mod", 0], ["ans", 0], ["ans", 0], ["a", 0], ["q", 0], ["mod", 0], ["b", 0], ["mod", 0], ["2", 0], ["mod", 0], ["mod", 0], ["return", 0], ["ans", 0], ["def", 0], ["lucas", 0], ["n", 0], ["m", 0], ["if", 0], ["m", 0], ["0", 0], ["return", 0], ["1", 0], ["return", 0], ["c", 0], ["n", 0], ["mod", 0], ["m", 0], ["mod", 0], ["lucas", 0], ["int", 0], ["n", 0], ["mod", 0], ["int", 0], ["m", 0], ["mod", 0], ["mod", 0], ["c", 0], ["0", 0], ["maxn", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["maxn", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["maxn", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["if", 0], ["j", 0], ["0", 0], ["or", 0], ["j", 0], ["i", 0], ["c", 0], ["i", 0], ["j", 0], ["1", 0], ["continue", 0], ["c", 0], ["i", 0], ["j", 0], ["c", 0], ["i", 0], ["1", 0], ["j", 0], ["c", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["mod", 0], ["def", 0], ["a", 0], ["n", 0], ["m", 0], ["j", 0], ["0", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["if", 0], ["j", 0], ["m", 0], ["break", 0], ["j", 0], ["1", 0], ["ans", 0], ["ans", 0], ["n", 0], ["i", 0], ["mod", 0], ["return", 0], ["ans", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["if", 0], ["n", 0], ["m", 0], ["n", 0], ["m", 0], ["m", 0], ["n", 0], ["ans", 0], ["s", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["ans", 0], ["ans", 0], ["s", 0], ["s", 0], ["s", 0], ["n", 0], ["i", 0], ["i", 0], ["1", 0], ["m", 0], ["i", 0], ["return", 0], ["ans", 0], ["while", 0], ["true", 0], ["try", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["solve", 0], ["a", 0], ["b", 0], ["solve", 0], ["a", 0], ["c", 0], ["solve", 0], ["b", 0], ["c", 0], ["mod", 0], ["except", 0], ["break", 0], ["def", 0], ["pwm", 0], ["a", 0], ["pw", 0], ["mod", 0], ["ans", 0], ["1", 0], ["while", 0], ["pw", 0], ["if", 0], ["pw", 0], ["1", 0], ["ans", 0], ["a", 0], ["ans", 0], ["mod", 0], ["a", 0], ["a", 0], ["pw", 0], ["1", 0], ["a", 0], ["mod", 0], ["return", 0], ["ans", 0], ["def", 0], ["precalc", 0], ["mod", 0], ["rfact", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["5432", 0], ["fact", 0], ["i", 0], ["fact", 0], ["i", 0], ["1", 0], ["i", 0], ["mod", 0], ["rfact", 0], ["i", 0], ["pwm", 0], ["fact", 0], ["i", 0], ["mod", 0], ["2", 0], ["mod", 0], ["def", 0], ["cnk", 0], ["n", 0], ["k", 0], ["mod", 0], ["return", 0], ["fact", 0], ["n", 0], ["rfact", 0], ["k", 0], ["rfact", 0], ["n", 0], ["k", 0], ["mod", 0], ["def", 0], ["calc", 0], ["a", 0], ["b", 0], ["mod", 0], ["ans", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["min", 0], ["a", 0], ["b", 0], ["1", 0], ["ans", 0], ["cnk", 0], ["a", 0], ["k", 0], ["mod", 0], ["cnk", 0], ["b", 0], ["k", 0], ["mod", 0], ["fact", 0], ["k", 0], ["print", 0], ["a", 0], ["b", 0], ["cnk", 0], ["a", 0], ["k", 0], ["mod", 0], ["cnk", 0], ["b", 0], ["k", 0], ["mod", 0], ["ans", 0], ["mod", 0], ["return", 0], ["ans", 0], ["fact", 0], ["1", 0], ["5432", 0], ["rfact", 0], ["0", 0], ["5432", 0], ["mod", 0], ["998244353", 0], ["precalc", 0], ["mod", 0], ["a", 0], ["b", 0], ["c", 0], ["int", 0], ["z", 0], ["for", 0], ["z", 0], ["in", 0], ["input", 0], ["split", 0], ["res", 0], ["calc", 0], ["a", 0], ["b", 0], ["mod", 0], ["calc", 0], ["a", 0], ["c", 0], ["mod", 0], ["calc", 0], ["b", 0], ["c", 0], ["mod", 0], ["res", 0], ["mod", 0], ["print", 0], ["res", 0], ["import", 0], ["math", 0], ["mod", 0], ["998244353", 0], ["factmod", 0], ["0", 0], ["5001", 0], ["factmod", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["5001", 0], ["factmod", 0], ["i", 0], ["factmod", 0], ["i", 0], ["1", 0], ["i", 0], ["mod", 0], ["def", 0], ["nck", 0], ["n", 0], ["k", 0], ["if", 0], ["k", 0], ["n", 0], ["2", 0], ["k", 0], ["n", 0], ["k", 0], ["ret", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["ret", 0], ["ret", 0], ["n", 0], ["i", 0], ["1", 0], ["i", 0], ["return", 0], ["ret", 0], ["if", 0], ["n", 0], ["a", 0], ["return", 0], ["acks", 0], ["k", 0], ["if", 0], ["n", 0], ["b", 0], ["return", 0], ["bcks", 0], ["k", 0], ["if", 0], ["n", 0], ["c", 0], ["return", 0], ["ccks", 0], ["k", 0], ["xxx", 0], ["return", 0], ["math", 0], ["factorial", 0], ["n", 0], ["math", 0], ["factorial", 0], ["k", 0], ["math", 0], ["factorial", 0], ["n", 0], ["k", 0], ["def", 0], ["calc", 0], ["x", 0], ["y", 0], ["nonlocal", 0], ["mod", 0], ["x", 0], ["y", 0], ["min", 0], ["x", 0], ["y", 0], ["max", 0], ["x", 0], ["y", 0], ["sm", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["x", 0], ["1", 0], ["sm", 0], ["nck", 0], ["x", 0], ["i", 0], ["mod", 0], ["nck", 0], ["y", 0], ["i", 0], ["mod", 0], ["factmod", 0], ["i", 0], ["mod", 0], ["sm", 0], ["sm", 0], ["mod", 0], ["return", 0], ["sm", 0], ["print", 0], ["factmod", 0], ["5", 0], ["nck", 0], ["5", 0], ["3", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["acks", 0], ["1", 0], ["a", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["a", 0], ["acks", 0], ["i", 0], ["acks", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["acks", 0], ["acks", 0], ["i", 0], ["mod", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["acks", 0], ["print", 0], ["acks", 0], ["a", 0], ["1", 0], ["bcks", 0], ["1", 0], ["b", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["b", 0], ["bcks", 0], ["i", 0], ["bcks", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["i", 0], ["bcks", 0], ["bcks", 0], ["i", 0], ["mod", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["bcks", 0], ["ccks", 0], ["1", 0], ["c", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["c", 0], ["ccks", 0], ["i", 0], ["ccks", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["i", 0], ["ccks", 0], ["ccks", 0], ["i", 0], ["mod", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ccks", 0], ["print", 0], ["acks", 0], ["print", 0], ["bcks", 0], ["print", 0], ["ccks", 0], ["print", 0], ["calc", 0], ["a", 0], ["b", 0], ["calc", 0], ["b", 0], ["c", 0], ["calc", 0], ["a", 0], ["c", 0], ["mod", 0], ["f", 0], ["1", 0], ["50001", 0], ["mod", 0], ["998244353", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["5001", 0], ["f", 0], ["i", 0], ["f", 0], ["i", 0], ["1", 0], ["i", 0], ["mod", 0], ["a", 0], ["b", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["pwr", 0], ["b", 0], ["e", 0], ["if", 0], ["b", 0], ["0", 0], ["return", 0], ["0", 0], ["if", 0], ["e", 0], ["0", 0], ["return", 0], ["1", 0], ["if", 0], ["e", 0], ["2", 0], ["0", 0], ["z", 0], ["pwr", 0], ["b", 0], ["e", 0], ["2", 0], ["mod", 0], ["return", 0], ["z", 0], ["z", 0], ["mod", 0], ["return", 0], ["b", 0], ["pwr", 0], ["b", 0], ["e", 0], ["1", 0], ["mod", 0], ["def", 0], ["ncr", 0], ["n", 0], ["r", 0], ["den", 0], ["f", 0], ["r", 0], ["f", 0], ["n", 0], ["r", 0], ["mod", 0], ["return", 0], ["f", 0], ["n", 0], ["pwr", 0], ["den", 0], ["mod", 0], ["2", 0], ["mod", 0], ["def", 0], ["g", 0], ["x", 0], ["y", 0], ["mn", 0], ["min", 0], ["x", 0], ["y", 0], ["sm", 0], ["0", 0], ["nonlocal", 0], ["mod", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["mn", 0], ["1", 0], ["sm", 0], ["ncr", 0], ["x", 0], ["i", 0], ["ncr", 0], ["y", 0], ["i", 0], ["f", 0], ["i", 0], ["mod", 0], ["sm", 0], ["sm", 0], ["mod", 0], ["return", 0], ["sm", 0], ["ans", 0], ["g", 0], ["a", 0], ["b", 0], ["g", 0], ["b", 0], ["c", 0], ["g", 0], ["c", 0], ["a", 0], ["ans", 0], ["ans", 0], ["mod", 0], ["print", 0], ["int", 0], ["ans", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["998244353", 0], ["def", 0], ["calc", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["ans", 0], ["0", 0], ["tmp", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["ans", 0], ["ans", 0], ["tmp", 0], ["p", 0], ["tmp", 0], ["tmp", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["pow", 0], ["i", 0], ["1", 0], ["p", 0], ["2", 0], ["p", 0], ["p", 0], ["return", 0], ["ans", 0], ["ans", 0], ["calc", 0], ["a", 0], ["b", 0], ["calc", 0], ["b", 0], ["c", 0], ["calc", 0], ["a", 0], ["c", 0], ["p", 0], ["print", 0], ["ans", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["998244353", 0], ["def", 0], ["calc", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["ans", 0], ["0", 0], ["tmp", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["ans", 0], ["ans", 0], ["tmp", 0], ["p", 0], ["tmp", 0], ["tmp", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["pow", 0], ["i", 0], ["1", 0], ["p", 0], ["2", 0], ["p", 0], ["p", 0], ["return", 0], ["ans", 0], ["ans", 0], ["calc", 0], ["a", 0], ["b", 0], ["calc", 0], ["b", 0], ["c", 0], ["calc", 0], ["a", 0], ["c", 0], ["p", 0], ["print", 0], ["ans", 0], ["coding", 0], ["utf", 0], ["8", 0], ["import", 0], ["math", 0], ["import", 0], ["collections", 0], ["import", 0], ["bisect", 0], ["import", 0], ["heapq", 0], ["import", 0], ["time", 0], ["import", 0], ["random", 0], ["created", 0], ["by", 0], ["shhuan", 0], ["at", 0], ["2017", 0], ["10", 0], ["6", 0], ["22", 0], ["19", 0], ["t0", 0], ["time", 0], ["time", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["ct", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["l", 0], ["998244353", 0], ["s", 0], ["1", 0], ["sx", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["1", 0], ["a", 0], ["1", 0], ["s", 0], ["s", 0], ["a", 0], ["1", 0], ["k", 0], ["b", 0], ["1", 0], ["k", 0], ["k", 0], ["sx", 0], ["s", 0], ["l", 0], ["return", 0], ["sx", 0], ["l", 0], ["998244353", 0], ["print", 0], ["ct", 0], ["a", 0], ["b", 0], ["ct", 0], ["a", 0], ["c", 0], ["ct", 0], ["b", 0], ["c", 0], ["l", 0], ["print", 0], ["time", 0], ["time", 0], ["t0", 0], ["p", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["maxn", 0], ["for", 0], ["in", 0], ["range", 0], ["maxn", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["maxn", 0], ["p", 0], ["i", 0], ["0", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["i", 0], ["1", 1], ["p", 0], ["i", 0], ["j", 0], ["p", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["p", 0], ["i", 0], ["1", 0], ["j", 0], ["mod", 0], ["print", 0], ["time", 0], ["time", 0], ["t0", 0], ["pre", 0], ["0", 0], ["maxn", 0], ["pre", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["maxn", 0], ["pre", 0], ["i", 0], ["i", 0], ["pre", 0], ["i", 0], ["1", 0], ["mod", 0], ["def", 0], ["solve", 0], ["x", 0], ["y", 0], ["ans", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["min", 0], ["x", 0], ["y", 0], ["1", 0], ["d", 0], ["pre", 0], ["k", 0], ["d", 0], ["d", 0], ["p", 0], ["x", 0], ["k", 0], ["mod", 0], ["d", 0], ["d", 0], ["p", 0], ["y", 0], ["k", 0], ["mod", 0], ["ans", 0], ["ans", 0], ["d", 0], ["mod", 0], ["return", 0], ["ans", 0], ["ans", 0], ["1", 0], ["ans", 0], ["ans", 0], ["solve", 0], ["a", 0], ["b", 0], ["mod", 0], ["ans", 0], ["ans", 0], ["solve", 0], ["b", 0], ["c", 0], ["mod", 0], ["ans", 0], ["ans", 0], ["solve", 0], ["a", 0], ["c", 0], ["mod", 0], ["print", 0], ["ans", 0], ["print", 0], ["time", 0], ["time", 0], ["t0", 0], ["http", 0], ["codeforces", 0], ["com", 0], ["problemset", 0], ["problem", 0], ["869", 0], ["c", 0], ["def", 0], ["calc", 0], ["x", 0], ["y", 0], ["si", 0], ["ans", 0], ["1", 0], ["1", 0], ["n", 0], ["m", 0], ["min", 0], ["x", 0], ["y", 0], ["max", 0], ["x", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["si", 0], ["si", 0], ["n", 0], ["i", 0], ["1", 0], ["m", 0], ["i", 0], ["1", 0], ["i", 0], ["ans", 0], ["ans", 0], ["si", 0], ["return", 0], ["ans", 0], ["mod", 0], ["mod", 0], ["998244353", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["rb", 0], ["calc", 0], ["a", 0], ["b", 0], ["rp", 0], ["calc", 0], ["a", 0], ["c", 0], ["bp", 0], ["calc", 0], ["b", 0], ["c", 0], ["res", 0], ["rb", 0], ["rp", 0], ["bp", 0], ["mod", 0], ["print", 0], ["res", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["998244353", 0], ["def", 0], ["calc", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["ans", 0], ["0", 0], ["t", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["ans", 0], ["ans", 0], ["t", 0], ["m", 0], ["t", 0], ["t", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["pow", 0], ["i", 0], ["1", 0], ["m", 0], ["2", 0], ["m", 0], ["m", 0], ["return", 0], ["ans", 0], ["ans", 0], ["calc", 0], ["a", 0], ["b", 0], ["calc", 0], ["b", 0], ["c", 0], ["calc", 0], ["a", 0], ["c", 0], ["m", 0], ["print", 0], ["ans", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["binpow", 0], ["num", 0], ["p", 0], ["if", 0], ["p", 0], ["0", 0], ["return", 0], ["1", 0], ["if", 0], ["p", 0], ["2", 0], ["0", 0], ["return", 0], ["binpow", 0], ["num", 0], ["num", 0], ["mod", 0], ["p", 0], ["2", 0], ["return", 0], ["num", 0], ["binpow", 0], ["num", 0], ["p", 0], ["1", 0], ["mod", 0], ["def", 0], ["rev", 0], ["num", 0], ["return", 0], ["binpow", 0], ["num", 0], ["mod", 0], ["2", 0], ["def", 0], ["solve", 0], ["a", 0], ["b", 0], ["result", 0], ["1", 0], ["prev", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["1", 0], ["min", 0], ["a", 0], ["b", 0], ["1", 0], ["now", 0], ["prev", 0], ["a", 0], ["k", 0], ["1", 0], ["b", 0], ["k", 0], ["1", 0], ["rev", 0], ["k", 0], ["mod", 0], ["result", 0], ["result", 0], ["now", 0], ["mod", 0], ["prev", 0], ["now", 0], ["return", 0], ["result", 0], ["mod", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res1", 0], ["solve", 0], ["a", 0], ["b", 0], ["res2", 0], ["solve", 0], ["b", 0], ["c", 0], ["res3", 0], ["solve", 0], ["a", 0], ["c", 0], ["print", 0], ["res1", 0], ["res2", 0], ["res3", 0], ["mod", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00035161744022503517, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00035161744022503517, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.004551820728291317, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.004551820728291317, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00035161744022503517, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00035161744022503517, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.004551820728291317, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.004551820728291317, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nGiven a collection of intervals, merge all overlapping intervals.\n\nExample 1:\n\n\nInput: [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\n\n\nExample 2:\n\n\nInput: [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considerred overlapping.\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["# Definition for an interval.\n\t# class Interval:\n\t#     def __init__(self, s=0, e=0):\n\t#         self.start = s\n\t#         self.end = e\n\t\n\tclass Solution:\n\t\t\t\t\tdef merge(self, intervals):\n\t\t\t\t\t\t\tnew_intervals = []\n\t\t\t\t\t\t\tfor interval in sorted(intervals, key=lambda i: i.start):\n\t\t\t\t\t\t\t\t\tif new_intervals and interval.start <= new_intervals[-1].end:\n\t\t\t\t\t\t\t\t\t\t\tnew_intervals[-1].end = max(new_intervals[-1].end, interval.end)\n\t\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t\tnew_intervals.append(interval)\n\t\t\t\t\t\t\treturn new_intervals\n", "# Definition for an interval.\n\t# class Interval:\n\t#     def __init__(self, s=0, e=0):\n\t#         self.start = s\n\t#         self.end = e\n\t\n\tclass Solution:\n\t\t\t\t\tdef merge(self, intervals):\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t:type intervals: List[Interval]\n\t\t\t\t\t\t\t\t\t:rtype: List[Interval]\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\tif len(intervals) < 2:\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn intervals\n\t\t\t\t\t\t\t\t\tintervals = sorted(intervals, key=lambda s: s.start)\n\t\t\t\t\t\t\t\t\trs = []\n\t\t\t\t\t\t\t\t\tcur = intervals[0]\n\t\t\t\t\t\t\t\t\tfor r in intervals[1:]:\n\t\t\t\t\t\t\t\t\t\t\t\t\tif r.start <= cur.end:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcur.end = max(r.end, cur.end)\n\t\t\t\t\t\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trs.append(cur)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcur = r\n\t\t\t\t\t\t\t\t\trs.append(cur)\n\t\t\t\t\t\t\t\t\treturn rs\n\t\t\t\t\t\t\t\t\t\n", "class Solution:\n\tdef merge(self, intervals):\n\t    \"\"\"\n\t    :type intervals: List[Interval]\n\t    :rtype: List[Interval]\n\t    \"\"\"\n\t    inters = sorted(intervals, key=lambda intval: intval.start)\n\t    ret = []\n\t    n = len(intervals)\n\t    if n == 0:\n\t\t   return ret\n\t    s = inters[0].start\n\t    e = inters[0].end\n\t    for i in range(1, n):\n\t\t   if inters[i].start <= e:\n\t\t\t  e = max(inters[i].end, e)\n\t\t   else:\n\t\t\t  ret.append(Interval(s, e))\n\t\t\t  s = inters[i].start\n\t\t\t  e = inters[i].end\n\t    ret.append(Interval(s,e))\n\t    return ret\n", "# Definition for an interval.\n\t# class Interval:\n\t#     def __init__(self, s=0, e=0):\n\t#         self.start = s\n\t#         self.end = e\n\t\n\tclass Solution:\n\t\t\t\t\tdef merge(self, intervals):\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t:type intervals: List[Interval]\n\t\t\t\t\t\t\t\t\t:rtype: List[Interval]\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\tstart = sorted([interval.start for interval in intervals])\n\t\t\t\t\t\t\t\t\tend = sorted([interval.end for interval in intervals])\n\t\t\t\t\t\t\t\t\tif not start:\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn end\n\t\t\t\t\t\t\t\t\tif not end:\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn start\n\t\t\t\t\t\t\t\t\tresult = list()\n\t\t\t\t\t\t\t\t\tmake_interval = 1\n\t\t\t\t\t\t\t\t\ti, j = 1, 0\n\t\t\t\t\t\t\t\t\tfirst_start = 0\n\t\t\t\t\t\t\t\t\twhile i < len(start) and j < len(end):\n\t\t\t\t\t\t\t\t\t\t\t\t\tif start[i] <= end [j]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmake_interval += 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti += 1\n\t\t\t\t\t\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmake_interval -= 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif make_interval == 0:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresult.append([start[first_start], end[j]])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfirst_start = i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tj += 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif j < len(end) :\n\t\t\t\t\t\t\t\t\t\t\t\t\tresult.append([start[first_start], end[-1]])\n\t\t\t\t\t\t\t\t\treturn result\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n", "# Definition for an interval.\n\t# class Interval:\n\t#     def __init__(self, s=0, e=0):\n\t#         self.start = s\n\t#         self.end = e\n\t\n\tclass Solution:\n\t\t\t\t\tdef merge(self, intervals):\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t:type intervals: List[Interval]\n\t\t\t\t\t\t\t\t\t:rtype: List[Interval]\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\tlength=len(intervals)\n\t\t\t\t\t\t\t\t\tif length==1 or length==0: return intervals\n\t\t\t\t\t\t\t\t\tintervals.sort(key=lambda l:l.start)\n\t\t\t\t\t\t\t\t\tresult=[]\n\t\t\t\t\t\t\t\t\tcurr=intervals.pop(0)\n\t\t\t\t\t\t\t\t\twhile intervals:\n\t\t\t\t\t\t\t\t\t\t\t\t\tnext_int=intervals.pop(0)\n\t\t\t\t\t\t\t\t\t\t\t\t\tif curr.end>=next_int.start:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurr.end=max(next_int.end,curr.end)\n\t\t\t\t\t\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresult.append(curr)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurr=next_int\n\t\t\t\t\t\t\t\t\tresult.append(curr)\n\t\t\t\t\t\t\t\t\treturn result\n\t\t\t\t\t\n", "# Definition for an interval.\n\t# class Interval:\n\t#     def __init__(self, s=0, e=0):\n\t#         self.start = s\n\t#         self.end = e\n\t\n\tclass Solution:\n\t\t\t\t\tdef merge(self, intervals):\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t:type intervals: List[Interval]\n\t\t\t\t\t\t\t\t\t:rtype: List[Interval]\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\tlength=len(intervals)\n\t\t\t\t\t\t\t\t\tif length==1 or length==0: return intervals\n\t\t\t\t\t\t\t\t\tintervals.sort(key=lambda l:l.start)\n\t\t\t\t\t\t\t\t\tresult=[]\n\t\t\t\t\t\t\t\t\tcurr=intervals.pop(0)\n\t\t\t\t\t\t\t\t\twhile intervals:\n\t\t\t\t\t\t\t\t\t\t\t\t\tnext_int=intervals.pop(0)\n\t\t\t\t\t\t\t\t\t\t\t\t\tif curr.end>=next_int.start:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif curr.end<next_int.end:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurr.end=next_int.end\n\t\t\t\t\t\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresult.append(curr)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurr=next_int\n\t\t\t\t\t\t\t\t\tresult.append(curr)\n\t\t\t\t\t\t\t\t\treturn result\n\t\t\t\t\t\n", "# Definition for an interval.\n\t# class Interval:\n\t#     def __init__(self, s=0, e=0):\n\t#         self.start = s\n\t#         self.end = e\n\t\n\tclass Solution:\n\t\t\t\t\tdef merge(self, intervals):\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t:type intervals: List[Interval]\n\t\t\t\t\t\t\t\t\t:rtype: List[Interval]\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\tif not intervals: return []\n\t\t\t\t\t\t\t\t\tintervals = sorted(intervals, key=lambda x: (x.start, x.end))\n\t\t\t\t\t\t\t\t\tres = [Interval(intervals[0].start, intervals[0].end), ]\n\t\t\t\t\t\t\t\t\tfor i in range(1, len(intervals)):\n\t\t\t\t\t\t\t\t\t\t\t\t\tif intervals[i].start <= res[len(res) - 1].end:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tres[len(res) - 1].start = min(res[len(res) - 1].start, intervals[i].start)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tres[len(res) - 1].end = max(res[len(res) - 1].end, intervals[i].end)\n\t\t\t\t\t\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tres.append(Interval(intervals[i].start, intervals[i].end))\n\t\t\t\t\t\t\t\t\treturn res\n", "# Definition for an interval.\n\t# class Interval:\n\t#     def __init__(self, s=0, e=0):\n\t#         self.start = s\n\t#         self.end = e\n\t\n\tclass Solution:\n\t\t\t\t\tdef merge(self, intervals):\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t:type intervals: List[Interval]\n\t\t\t\t\t\t\t\t\t:rtype: List[Interval]\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\tif not intervals:\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn []\n\t\t\t\t\t\t\t\t\tintervals.sort(key=lambda a: (a.start, a.end))\n\t\t\t\t\t\t\t\t\tptr = 0\n\t\t\t\t\t\t\t\t\twhile ptr < len(intervals) - 1:\n\t\t\t\t\t\t\t\t\t\t\t\t\tif intervals[ptr].end >= intervals[ptr+1].start:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tp = intervals.pop(ptr + 1)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tintervals[ptr].end = max(intervals[ptr].end, p.end)\n\t\t\t\t\t\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tptr += 1\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\treturn intervals\n", "# Definition for an interval.\n\t# class Interval:\n\t#     def __init__(self, s=0, e=0):\n\t#         self.start = s\n\t#         self.end = e\n\t\n\tclass Solution:\n\t\t\t\t\tdef merge(self, intervals):\n\t\t\t\t\t\t\t\t\tsi = sorted(intervals, key=lambda x: (x.start, x.end))\n\t\t\t\t\t\t\t\t\tcur = 1  # index of current tuple\n\t\t\t\t\t\t\t\t\twhile cur < len(si):\n\t\t\t\t\t\t\t\t\t\t\t\t\t# check intersection of current and previous tuple\n\t\t\t\t\t\t\t\t\t\t\t\t\t# if end of previous is less than begin of current\n\t\t\t\t\t\t\t\t\t\t\t\t\t# there are the intersection, we should merge them\n\t\t\t\t\t\t\t\t\t\t\t\t\t# into the bigger interval\n\t\t\t\t\t\t\t\t\t\t\t\t\tif si[cur - 1].end >= si[cur].start:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# change end of the interval(tuple)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsi[cur - 1] = Interval(si[cur - 1].start, max(si[cur - 1].end, si[cur].end))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# delete unnecessary interval(tuple)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdel si[cur]\n\t\t\t\t\t\t\t\t\t\t\t\t\t# there are no intersection, go to the next tuple\n\t\t\t\t\t\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcur += 1\n\t\t\t\t\t\t\t\t\treturn si\n\t\t\t\t\t\t\t\t\t\n", "# Definition for an interval.\n\t# class Interval:\n\t#     def __init__(self, s=0, e=0):\n\t#         self.start = s\n\t#         self.end = e\n\t\n\tclass Solution:\n\t\t\t\t\tdef merge(self, intervals):\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t:type intervals: List[Interval]\n\t\t\t\t\t\t\t\t\t:rtype: List[Interval]\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t'''\n\t\t\t\t\t\t\t\t\t先按照每个会议的开始时间排序，用一个数列来保存会议，条件是\n\t\t\t\t\t\t\t\t\t如果当前会议的开始时间比数列中最后一个会议的结束时间还晚，另起炉灶。\n\t\t\t\t\t\t\t\t\t如果开始时间比结束时间还早，挤进去！比较会议的结束时间，更新。\n\t\t\t\t\t\t\t\t\t'''\n\t\t\t\t\t\t\t\t\tintervals.sort(key=lambda x : x.start)\n\t\t\t\t\t\t\t\t\tres = []\n\t\t\t\t\t\t\t\t\tfor interval in intervals:\n\t\t\t\t\t\t\t\t\t\t\t\t\t# 如果res 是空的，初始化的情况，要把第一个会议加进去！\n\t\t\t\t\t\t\t\t\t\t\t\t\tif not res or interval.start > res[-1].end:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tres.append(interval)\n\t\t\t\t\t\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tres[-1].end = max(interval.end, res[-1].end)\n\t\t\t\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t\t\t\n", "# Definition for an interval.\n\t# class Interval:\n\t#     def __init__(self, s=0, e=0):\n\t#         self.start = s\n\t#         self.end = e\n\t\n\tclass Solution:\n\t\t\t\t\tdef merge(self, intervals):\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t:type intervals: List[Interval]\n\t\t\t\t\t\t\t\t\t:rtype: List[Interval]\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\tlength=len(intervals)\n\t\t\t\t\t\t\t\t\tif length==1 or length==0: return intervals\n\t\t\t\t\t\t\t\t\tintervals.sort(key=lambda l:l.start)\n\t\t\t\t\t\t\t\t\tindex=0\n\t\t\t\t\t\t\t\t\twhile index<len(intervals)-1:\n\t\t\t\t\t\t\t\t\t\t\t\t\tcurr=intervals[index]\n\t\t\t\t\t\t\t\t\t\t\t\t\tif curr.end>=intervals[index+1].start:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tintervals.pop(index)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext_int=intervals.pop(index)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif curr.end<next_int.end:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurr.end=next_int.end\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tintervals.insert(index,curr)\n\t\t\t\t\t\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex+=1\n\t\t\t\t\t\t\t\t\treturn intervals\n\t\t\t\t\t\n"], "id": "id8009"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8009", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["given", 8], ["a", 8], ["collection", 8], ["of", 8], ["intervals", 8], ["merge", 8], ["all", 8], ["overlapping", 8], ["intervals", 8], ["example", 9], ["1", 9], ["input", 9], ["1", 11], ["3", 11], ["2", 11], ["6", 11], ["8", 11], ["10", 11], ["15", 11], ["18", 11], ["output", 11], ["1", 11], ["6", 11], ["8", 11], ["10", 11], ["15", 11], ["18", 11], ["explanation", 12], ["since", 12], ["intervals", 9], ["1", 9], ["3", 9], ["and", 8], ["2", 8], ["6", 8], ["overlaps", 8], ["merge", 8], ["them", 8], ["into", 8], ["1", 8], ["6", 8], ["example", 9], ["2", 9], ["input", 9], ["1", 10], ["4", 10], ["4", 10], ["5", 2], ["output", 2], ["1", 0], ["5", 0], ["explanation", 0], ["intervals", 0], ["1", 0], ["4", 0], ["and", 0], ["4", 0], ["5", 0], ["are", 0], ["considerred", 0], ["overlapping", 0], ["class", 0], ["solution", 0], ["def", 0], ["merge", 0], ["self", 0], ["intervals", 0], ["list", 0], ["list", 0], ["int", 0], ["list", 0], ["list", 0], ["int", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6805555555555556, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08444865319865316, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7261904761904762, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.15327380952380953, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4444444444444444, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.06319444444444446, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7261904761904762, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.15327380952380953, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 1], ["definition", 19], ["for", 19], ["an", 18], ["interval", 18], ["class", 28], ["interval", 28], ["def", 56], ["init", 30], ["self", 28], ["s", 6], ["0", 4], ["e", 4], ["0", 4], ["self", 0], ["start", 0], ["s", 0], ["self", 0], ["end", 0], ["e", 0], ["class", 0], ["solution", 0], ["def", 0], ["merge", 0], ["self", 0], ["intervals", 0], ["new", 0], ["intervals", 0], ["for", 0], ["interval", 0], ["in", 0], ["sorted", 0], ["intervals", 0], ["key", 0], ["lambda", 0], ["i", 0], ["i", 0], ["start", 0], ["if", 0], ["new", 0], ["intervals", 0], ["and", 0], ["interval", 0], ["start", 0], ["new", 0], ["intervals", 0], ["1", 0], ["end", 0], ["new", 0], ["intervals", 0], ["1", 0], ["end", 0], ["max", 0], ["new", 0], ["intervals", 0], ["1", 0], ["end", 0], ["interval", 0], ["end", 0], ["else", 0], ["new", 0], ["intervals", 0], ["append", 0], ["interval", 0], ["return", 0], ["new", 0], ["intervals", 0], ["definition", 19], ["for", 19], ["an", 18], ["interval", 18], ["class", 28], ["interval", 28], ["def", 56], ["init", 30], ["self", 28], ["s", 6], ["0", 4], ["e", 4], ["0", 4], ["self", 0], ["start", 0], ["s", 0], ["self", 0], ["end", 0], ["e", 0], ["class", 1], ["solution", 1], ["def", 2], ["merge", 2], ["self", 1], ["intervals", 1], ["type", 1], ["intervals", 1], ["list", 0], ["interval", 0], ["rtype", 0], ["list", 0], ["interval", 0], ["if", 0], ["len", 0], ["intervals", 0], ["2", 0], ["return", 0], ["intervals", 0], ["intervals", 0], ["sorted", 0], ["intervals", 0], ["key", 0], ["lambda", 0], ["s", 0], ["s", 0], ["start", 0], ["rs", 0], ["cur", 0], ["intervals", 0], ["0", 0], ["for", 0], ["r", 0], ["in", 0], ["intervals", 0], ["1", 0], ["if", 0], ["r", 0], ["start", 0], ["cur", 0], ["end", 0], ["cur", 0], ["end", 0], ["max", 0], ["r", 0], ["end", 0], ["cur", 0], ["end", 0], ["else", 0], ["rs", 0], ["append", 0], ["cur", 0], ["cur", 0], ["r", 0], ["rs", 0], ["append", 0], ["cur", 0], ["return", 0], ["rs", 0], ["class", 1], ["solution", 0], ["def", 0], ["merge", 0], ["self", 0], ["intervals", 0], ["type", 0], ["intervals", 0], ["list", 0], ["interval", 0], ["rtype", 0], ["list", 0], ["interval", 0], ["inters", 0], ["sorted", 0], ["intervals", 0], ["key", 0], ["lambda", 0], ["intval", 0], ["intval", 0], ["start", 0], ["ret", 0], ["n", 0], ["len", 0], ["intervals", 0], ["if", 0], ["n", 0], ["0", 0], ["return", 0], ["ret", 0], ["s", 0], ["inters", 0], ["0", 0], ["start", 0], ["e", 0], ["inters", 0], ["0", 0], ["end", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["inters", 0], ["i", 0], ["start", 0], ["e", 0], ["e", 0], ["max", 0], ["inters", 0], ["i", 0], ["end", 0], ["e", 0], ["else", 0], ["ret", 0], ["append", 0], ["interval", 0], ["s", 0], ["e", 0], ["s", 0], ["inters", 0], ["i", 0], ["start", 0], ["e", 0], ["inters", 0], ["i", 0], ["end", 0], ["ret", 0], ["append", 0], ["interval", 0], ["s", 0], ["e", 0], ["return", 0], ["ret", 0], ["definition", 19], ["for", 19], ["an", 18], ["interval", 18], ["class", 28], ["interval", 28], ["def", 56], ["init", 30], ["self", 28], ["s", 6], ["0", 4], ["e", 4], ["0", 4], ["self", 0], ["start", 0], ["s", 0], ["self", 0], ["end", 0], ["e", 0], ["class", 1], ["solution", 0], ["def", 0], ["merge", 0], ["self", 0], ["intervals", 0], ["type", 0], ["intervals", 0], ["list", 0], ["interval", 0], ["rtype", 0], ["list", 0], ["interval", 0], ["start", 0], ["sorted", 0], ["interval", 0], ["start", 0], ["for", 0], ["interval", 0], ["in", 0], ["intervals", 0], ["end", 0], ["sorted", 0], ["interval", 0], ["end", 0], ["for", 0], ["interval", 0], ["in", 0], ["intervals", 0], ["if", 0], ["not", 0], ["start", 0], ["return", 0], ["end", 0], ["if", 0], ["not", 0], ["end", 0], ["return", 0], ["start", 0], ["result", 0], ["list", 0], ["make", 0], ["interval", 0], ["1", 0], ["i", 0], ["j", 0], ["1", 0], ["0", 0], ["first", 0], ["start", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["start", 0], ["and", 0], ["j", 0], ["len", 0], ["end", 0], ["if", 0], ["start", 0], ["i", 0], ["end", 0], ["j", 0], ["make", 0], ["interval", 0], ["1", 0], ["i", 0], ["1", 0], ["else", 0], ["make", 0], ["interval", 0], ["1", 0], ["if", 0], ["make", 0], ["interval", 0], ["0", 0], ["result", 0], ["append", 0], ["start", 0], ["first", 0], ["start", 0], ["end", 0], ["j", 0], ["first", 0], ["start", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["j", 0], ["len", 0], ["end", 0], ["result", 0], ["append", 0], ["start", 0], ["first", 0], ["start", 0], ["end", 0], ["1", 0], ["return", 0], ["result", 0], ["definition", 19], ["for", 19], ["an", 18], ["interval", 18], ["class", 28], ["interval", 28], ["def", 56], ["init", 30], ["self", 28], ["s", 6], ["0", 4], ["e", 4], ["0", 4], ["self", 0], ["start", 0], ["s", 0], ["self", 0], ["end", 0], ["e", 0], ["class", 1], ["solution", 0], ["def", 0], ["merge", 0], ["self", 0], ["intervals", 0], ["type", 0], ["intervals", 0], ["list", 0], ["interval", 0], ["rtype", 0], ["list", 0], ["interval", 0], ["length", 0], ["len", 0], ["intervals", 0], ["if", 0], ["length", 0], ["1", 0], ["or", 0], ["length", 0], ["0", 0], ["return", 0], ["intervals", 0], ["intervals", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["l", 0], ["l", 0], ["start", 0], ["result", 0], ["curr", 0], ["intervals", 0], ["pop", 0], ["0", 0], ["while", 0], ["intervals", 0], ["next", 0], ["int", 0], ["intervals", 0], ["pop", 0], ["0", 0], ["if", 0], ["curr", 0], ["end", 0], ["next", 0], ["int", 0], ["start", 0], ["curr", 0], ["end", 0], ["max", 0], ["next", 0], ["int", 0], ["end", 0], ["curr", 0], ["end", 0], ["else", 0], ["result", 0], ["append", 0], ["curr", 0], ["curr", 0], ["next", 0], ["int", 0], ["result", 0], ["append", 0], ["curr", 0], ["return", 0], ["result", 0], ["definition", 19], ["for", 19], ["an", 18], ["interval", 18], ["class", 28], ["interval", 28], ["def", 56], ["init", 30], ["self", 28], ["s", 6], ["0", 4], ["e", 4], ["0", 4], ["self", 0], ["start", 0], ["s", 0], ["self", 0], ["end", 0], ["e", 0], ["class", 1], ["solution", 0], ["def", 0], ["merge", 0], ["self", 0], ["intervals", 0], ["type", 0], ["intervals", 0], ["list", 0], ["interval", 0], ["rtype", 0], ["list", 0], ["interval", 0], ["length", 0], ["len", 0], ["intervals", 0], ["if", 0], ["length", 0], ["1", 0], ["or", 0], ["length", 0], ["0", 0], ["return", 0], ["intervals", 0], ["intervals", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["l", 0], ["l", 0], ["start", 0], ["result", 0], ["curr", 0], ["intervals", 0], ["pop", 0], ["0", 0], ["while", 0], ["intervals", 0], ["next", 0], ["int", 0], ["intervals", 0], ["pop", 0], ["0", 0], ["if", 0], ["curr", 0], ["end", 0], ["next", 0], ["int", 0], ["start", 0], ["if", 0], ["curr", 0], ["end", 0], ["next", 0], ["int", 0], ["end", 0], ["curr", 0], ["end", 0], ["next", 0], ["int", 0], ["end", 0], ["else", 0], ["result", 0], ["append", 0], ["curr", 0], ["curr", 0], ["next", 0], ["int", 0], ["result", 0], ["append", 0], ["curr", 0], ["return", 0], ["result", 0], ["definition", 19], ["for", 19], ["an", 18], ["interval", 18], ["class", 28], ["interval", 28], ["def", 56], ["init", 30], ["self", 28], ["s", 6], ["0", 4], ["e", 4], ["0", 4], ["self", 0], ["start", 0], ["s", 0], ["self", 0], ["end", 0], ["e", 0], ["class", 1], ["solution", 1], ["def", 3], ["merge", 3], ["self", 3], ["intervals", 2], ["type", 0], ["intervals", 0], ["list", 0], ["interval", 0], ["rtype", 0], ["list", 0], ["interval", 0], ["if", 0], ["not", 0], ["intervals", 0], ["return", 0], ["intervals", 0], ["sorted", 0], ["intervals", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["start", 0], ["x", 0], ["end", 0], ["res", 0], ["interval", 0], ["intervals", 1], ["0", 1], ["start", 1], ["intervals", 1], ["0", 1], ["end", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["intervals", 0], ["if", 0], ["intervals", 0], ["i", 0], ["start", 0], ["res", 0], ["len", 0], ["res", 0], ["1", 0], ["end", 0], ["res", 0], ["len", 0], ["res", 0], ["1", 0], ["start", 0], ["min", 0], ["res", 0], ["len", 0], ["res", 0], ["1", 0], ["start", 0], ["intervals", 0], ["i", 0], ["start", 0], ["res", 0], ["len", 0], ["res", 0], ["1", 0], ["end", 0], ["max", 0], ["res", 0], ["len", 0], ["res", 0], ["1", 0], ["end", 0], ["intervals", 0], ["i", 0], ["end", 0], ["else", 0], ["res", 0], ["append", 0], ["interval", 0], ["intervals", 0], ["i", 0], ["start", 0], ["intervals", 0], ["i", 0], ["end", 0], ["return", 0], ["res", 0], ["definition", 19], ["for", 19], ["an", 18], ["interval", 18], ["class", 28], ["interval", 28], ["def", 56], ["init", 30], ["self", 28], ["s", 6], ["0", 4], ["e", 4], ["0", 4], ["self", 0], ["start", 0], ["s", 0], ["self", 0], ["end", 0], ["e", 0], ["class", 1], ["solution", 1], ["def", 3], ["merge", 3], ["self", 3], ["intervals", 2], ["type", 0], ["intervals", 0], ["list", 0], ["interval", 0], ["rtype", 0], ["list", 0], ["interval", 0], ["if", 0], ["not", 0], ["intervals", 0], ["return", 0], ["intervals", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["a", 0], ["a", 0], ["start", 0], ["a", 0], ["end", 0], ["ptr", 0], ["0", 0], ["while", 0], ["ptr", 0], ["len", 0], ["intervals", 0], ["1", 0], ["if", 0], ["intervals", 0], ["ptr", 0], ["end", 0], ["intervals", 0], ["ptr", 0], ["1", 0], ["start", 0], ["p", 0], ["intervals", 0], ["pop", 0], ["ptr", 0], ["1", 0], ["intervals", 0], ["ptr", 0], ["end", 0], ["max", 0], ["intervals", 0], ["ptr", 0], ["end", 0], ["p", 0], ["end", 0], ["else", 0], ["ptr", 0], ["1", 0], ["return", 0], ["intervals", 0], ["definition", 19], ["for", 19], ["an", 18], ["interval", 18], ["class", 28], ["interval", 28], ["def", 56], ["init", 30], ["self", 28], ["s", 6], ["0", 4], ["e", 4], ["0", 4], ["self", 0], ["start", 0], ["s", 0], ["self", 0], ["end", 0], ["e", 0], ["class", 0], ["solution", 0], ["def", 0], ["merge", 0], ["self", 0], ["intervals", 0], ["si", 0], ["sorted", 0], ["intervals", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["start", 0], ["x", 0], ["end", 0], ["cur", 0], ["1", 0], ["index", 0], ["of", 0], ["current", 0], ["tuple", 0], ["while", 0], ["cur", 0], ["len", 0], ["si", 0], ["check", 0], ["intersection", 0], ["of", 0], ["current", 0], ["and", 0], ["previous", 0], ["tuple", 0], ["if", 0], ["end", 0], ["of", 0], ["previous", 0], ["is", 0], ["less", 0], ["than", 0], ["begin", 0], ["of", 0], ["current", 0], ["there", 0], ["are", 0], ["the", 0], ["intersection", 0], ["we", 0], ["should", 0], ["merge", 0], ["them", 0], ["into", 0], ["the", 0], ["bigger", 0], ["interval", 0], ["if", 0], ["si", 0], ["cur", 0], ["1", 0], ["end", 0], ["si", 0], ["cur", 0], ["start", 0], ["change", 0], ["end", 0], ["of", 0], ["the", 0], ["interval", 0], ["tuple", 0], ["si", 0], ["cur", 0], ["1", 0], ["interval", 0], ["si", 0], ["cur", 0], ["1", 0], ["start", 0], ["max", 0], ["si", 0], ["cur", 0], ["1", 0], ["end", 0], ["si", 0], ["cur", 0], ["end", 0], ["delete", 0], ["unnecessary", 0], ["interval", 0], ["tuple", 0], ["del", 0], ["si", 0], ["cur", 0], ["there", 0], ["are", 0], ["no", 0], ["intersection", 0], ["go", 0], ["to", 0], ["the", 0], ["next", 0], ["tuple", 0], ["else", 0], ["cur", 0], ["1", 0], ["return", 0], ["si", 0], ["definition", 19], ["for", 19], ["an", 18], ["interval", 18], ["class", 28], ["interval", 28], ["def", 56], ["init", 30], ["self", 28], ["s", 6], ["0", 4], ["e", 4], ["0", 4], ["self", 0], ["start", 0], ["s", 0], ["self", 0], ["end", 0], ["e", 0], ["class", 1], ["solution", 0], ["def", 0], ["merge", 0], ["self", 0], ["intervals", 0], ["type", 0], ["intervals", 0], ["list", 0], ["interval", 0], ["rtype", 0], ["list", 0], ["interval", 0], ["先按照每个会议的开始时间排序，用一个数列来保存会议，条件是", 0], ["如果当前会议的开始时间比数列中最后一个会议的结束时间还晚，另起炉灶。", 0], ["如果开始时间比结束时间还早，挤进去！比较会议的结束时间，更新。", 0], ["intervals", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["start", 0], ["res", 0], ["for", 0], ["interval", 0], ["in", 0], ["intervals", 0], ["如果res", 0], ["是空的，初始化的情况，要把第一个会议加进去！", 0], ["if", 0], ["not", 0], ["res", 0], ["or", 0], ["interval", 0], ["start", 0], ["res", 0], ["1", 0], ["end", 0], ["res", 0], ["append", 0], ["interval", 0], ["else", 0], ["res", 0], ["1", 0], ["end", 0], ["max", 0], ["interval", 0], ["end", 0], ["res", 0], ["1", 0], ["end", 0], ["return", 0], ["res", 0], ["definition", 19], ["for", 19], ["an", 18], ["interval", 18], ["class", 28], ["interval", 28], ["def", 56], ["init", 30], ["self", 28], ["s", 6], ["0", 4], ["e", 4], ["0", 4], ["self", 0], ["start", 0], ["s", 0], ["self", 0], ["end", 0], ["e", 0], ["class", 1], ["solution", 0], ["def", 0], ["merge", 0], ["self", 0], ["intervals", 0], ["type", 0], ["intervals", 0], ["list", 0], ["interval", 0], ["rtype", 0], ["list", 0], ["interval", 0], ["length", 0], ["len", 0], ["intervals", 0], ["if", 0], ["length", 0], ["1", 0], ["or", 0], ["length", 0], ["0", 0], ["return", 0], ["intervals", 0], ["intervals", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["l", 0], ["l", 0], ["start", 0], ["index", 0], ["0", 0], ["while", 0], ["index", 0], ["len", 0], ["intervals", 0], ["1", 0], ["curr", 0], ["intervals", 0], ["index", 0], ["if", 0], ["curr", 0], ["end", 0], ["intervals", 0], ["index", 0], ["1", 0], ["start", 0], ["intervals", 0], ["pop", 0], ["index", 0], ["next", 0], ["int", 0], ["intervals", 0], ["pop", 0], ["index", 0], ["if", 0], ["curr", 0], ["end", 0], ["next", 0], ["int", 0], ["end", 0], ["curr", 0], ["end", 0], ["next", 0], ["int", 0], ["end", 0], ["intervals", 0], ["insert", 0], ["index", 0], ["curr", 0], ["else", 0], ["index", 0], ["1", 0], ["return", 0], ["intervals", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.16330645161290322, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.03922756319562349, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.35258964143426297, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.20388184105682505, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07258064516129033, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0354502688172043, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.27191235059760954, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.19945219123505975, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\n=====Function Descriptions=====\nObjective\nToday, we're learning about a new data type: sets.\n\nConcept\n\nIf the inputs are given on one line separated by a space character, use split() to get the separate values in the form of a list:\n\n>> a = raw_input()\n5 4 3 2\n>> lis = a.split()\n>> print (lis)\n['5', '4', '3', '2']\n\nIf the list values are all integer types, use the map() method to convert all the strings to integers.\n\n>> newlis = list(map(int, lis))\n>> print (newlis)\n[5, 4, 3, 2]\n\nSets are an unordered bag of unique values. A single set contains values of any immutable data type.\n\nCREATING SETS\n\n>> myset = {1, 2} # Directly assigning values to a set\n>> myset = set()  # Initializing a set\n>> myset = set(['a', 'b']) # Creating a set from a list\n>> myset\n{'a', 'b'}\n\n\nMODIFYING SETS\n\nUsing the add() function:\n\n>> myset.add('c')\n>> myset\n{'a', 'c', 'b'}\n>> myset.add('a') # As 'a' already exists in the set, nothing happens\n>> myset.add((5, 4))\n>> myset\n{'a', 'c', 'b', (5, 4)}\n\n\nUsing the update() function:\n\n>> myset.update([1, 2, 3, 4]) # update() only works for iterable objects\n>> myset\n{'a', 1, 'c', 'b', 4, 2, (5, 4), 3}\n>> myset.update({1, 7, 8})\n>> myset\n{'a', 1, 'c', 'b', 4, 7, 8, 2, (5, 4), 3}\n>> myset.update({1, 6}, [5, 13])\n>> myset\n{'a', 1, 'c', 'b', 4, 5, 6, 7, 8, 2, (5, 4), 13, 3}\n\n\nREMOVING ITEMS\n\nBoth the discard() and remove() functions take a single value as an argument and removes that value from the set. If that value is not present, discard() does nothing, but remove() will raise a KeyError exception.\n\n>> myset.discard(10)\n>> myset\n{'a', 1, 'c', 'b', 4, 5, 7, 8, 2, 12, (5, 4), 13, 11, 3}\n>> myset.remove(13)\n>> myset\n{'a', 1, 'c', 'b', 4, 5, 7, 8, 2, 12, (5, 4), 11, 3}\n\n\nCOMMON SET OPERATIONS Using union(), intersection() and difference() functions.\n\n>> a = {2, 4, 5, 9}\n>> b = {2, 4, 11, 12}\n>> a.union(b) # Values which exist in a or b\n{2, 4, 5, 9, 11, 12}\n>> a.intersection(b) # Values which exist in a and b\n{2, 4}\n>> a.difference(b) # Values which exist in a but not in b\n{9, 5}\n\n\nThe union() and intersection() functions are symmetric methods:\n\n>> a.union(b) == b.union(a)\nTrue\n>> a.intersection(b) == b.intersection(a)\nTrue\n>> a.difference(b) == b.difference(a)\nFalse\n\nThese other built-in data structures in Python are also useful.\n\n=====Problem Statement=====\nGiven 2 sets of integers, M and N, print their symmetric difference in ascending order. The term symmetric difference indicates those values that exist in either M or N but do not exist in both.\n\n=====Input Format=====\nThe first line of input contains an integer, M.\nThe second line contains M space-separated integers.\nThe third line contains an integer, N.\nThe fourth line contains N space-separated integers. \n\n=====Output Format=====\nOutput the symmetric difference integers in ascending order, one per line.\n\n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["# Enter your code here. Read input from STDIN. Print output to STDOUT\nm=int(input())\nset_a_str_ar=input().strip().split()\nset_a_ar=list(map(int,set_a_str_ar))\nn=int(input())\nset_b_str_ar=input().strip().split()\nset_b_ar=list(map(int,set_b_str_ar))\n\nset_a_set=set(set_a_ar)\nset_b_set=set(set_b_ar)\nset_a_dif_set=set_a_set.difference(set_b_set)\nset_b_dif_set=set_b_set.difference(set_a_set)\nres_set=set_a_dif_set.union(set_b_dif_set)\nres_ar=list(res_set)\nres_ar.sort()\nfor i in res_ar:\n\tprint(i)\n", "#!/usr/bin/env python3\n\n\ndef __starting_point():\n\tM = int(input().strip())\n\tset_m = set(map(int, input().strip().split(' ')))\n\t\n\tN = int(input().strip())\n\tset_n = set(map(int, input().strip().split(' ')))\n\t\n\tfor el in sorted(set_m ^ set_n):\n\t\tprint(el)\n\n__starting_point()\n"], "id": "id7383"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7383", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["function", 0], ["descriptions", 0], ["objective", 0], ["today", 0], ["we", 0], ["re", 0], ["learning", 0], ["about", 0], ["a", 0], ["new", 0], ["data", 0], ["type", 0], ["sets", 0], ["concept", 0], ["if", 0], ["the", 0], ["inputs", 0], ["are", 0], ["given", 0], ["on", 0], ["one", 0], ["line", 0], ["separated", 0], ["by", 0], ["a", 0], ["space", 0], ["character", 0], ["use", 0], ["split", 0], ["to", 0], ["get", 0], ["the", 0], ["separate", 0], ["values", 0], ["in", 0], ["the", 0], ["form", 0], ["of", 0], ["a", 0], ["list", 0], ["a", 0], ["raw", 0], ["input", 0], ["5", 0], ["4", 0], ["3", 0], ["2", 0], ["lis", 0], ["a", 0], ["split", 0], ["print", 0], ["lis", 0], ["5", 0], ["4", 0], ["3", 0], ["2", 0], ["if", 0], ["the", 0], ["list", 0], ["values", 0], ["are", 0], ["all", 0], ["integer", 0], ["types", 0], ["use", 0], ["the", 0], ["map", 0], ["method", 0], ["to", 0], ["convert", 0], ["all", 0], ["the", 0], ["strings", 0], ["to", 0], ["integers", 0], ["newlis", 0], ["list", 0], ["map", 0], ["int", 0], ["lis", 0], ["print", 0], ["newlis", 0], ["5", 0], ["4", 0], ["3", 0], ["2", 0], ["sets", 0], ["are", 0], ["an", 0], ["unordered", 0], ["bag", 0], ["of", 0], ["unique", 0], ["values", 0], ["a", 0], ["single", 0], ["set", 0], ["contains", 0], ["values", 0], ["of", 0], ["any", 0], ["immutable", 0], ["data", 0], ["type", 0], ["creating", 0], ["sets", 0], ["myset", 0], ["1", 0], ["2", 0], ["directly", 0], ["assigning", 0], ["values", 0], ["to", 0], ["a", 0], ["set", 0], ["myset", 0], ["set", 0], ["initializing", 0], ["a", 0], ["set", 0], ["myset", 0], ["set", 0], ["a", 0], ["b", 0], ["creating", 0], ["a", 0], ["set", 0], ["from", 0], ["a", 0], ["list", 0], ["myset", 0], ["a", 0], ["b", 0], ["modifying", 0], ["sets", 0], ["using", 0], ["the", 0], ["add", 0], ["function", 0], ["myset", 0], ["add", 0], ["c", 0], ["myset", 0], ["a", 0], ["c", 0], ["b", 0], ["myset", 0], ["add", 0], ["a", 0], ["as", 0], ["a", 0], ["already", 0], ["exists", 0], ["in", 0], ["the", 0], ["set", 0], ["nothing", 0], ["happens", 0], ["myset", 0], ["add", 0], ["5", 0], ["4", 0], ["myset", 0], ["a", 0], ["c", 0], ["b", 0], ["5", 0], ["4", 0], ["using", 0], ["the", 0], ["update", 0], ["function", 0], ["myset", 0], ["update", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["update", 0], ["only", 0], ["works", 0], ["for", 0], ["iterable", 0], ["objects", 0], ["myset", 0], ["a", 0], ["1", 0], ["c", 0], ["b", 0], ["4", 0], ["2", 0], ["5", 0], ["4", 0], ["3", 0], ["myset", 0], ["update", 0], ["1", 0], ["7", 0], ["8", 0], ["myset", 0], ["a", 0], ["1", 0], ["c", 0], ["b", 0], ["4", 0], ["7", 0], ["8", 0], ["2", 0], ["5", 0], ["4", 0], ["3", 0], ["myset", 0], ["update", 0], ["1", 0], ["6", 0], ["5", 0], ["13", 0], ["myset", 0], ["a", 0], ["1", 0], ["c", 0], ["b", 0], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["8", 0], ["2", 0], ["5", 0], ["4", 0], ["13", 0], ["3", 0], ["removing", 0], ["items", 0], ["both", 1], ["the", 1], ["discard", 1], ["and", 1], ["remove", 1], ["functions", 1], ["take", 1], ["a", 3], ["single", 3], ["value", 1], ["as", 1], ["an", 1], ["argument", 1], ["and", 1], ["removes", 1], ["that", 1], ["value", 1], ["from", 1], ["the", 1], ["set", 1], ["if", 1], ["that", 1], ["value", 1], ["is", 1], ["not", 0], ["present", 0], ["discard", 0], ["does", 0], ["nothing", 0], ["but", 0], ["remove", 0], ["will", 0], ["raise", 0], ["a", 0], ["keyerror", 0], ["exception", 0], ["myset", 0], ["discard", 0], ["10", 0], ["myset", 0], ["a", 0], ["1", 0], ["c", 0], ["b", 0], ["4", 0], ["5", 0], ["7", 0], ["8", 0], ["2", 0], ["12", 0], ["5", 0], ["4", 0], ["13", 0], ["11", 0], ["3", 0], ["myset", 0], ["remove", 0], ["13", 0], ["myset", 0], ["a", 0], ["1", 0], ["c", 0], ["b", 0], ["4", 0], ["5", 0], ["7", 0], ["8", 0], ["2", 0], ["12", 0], ["5", 0], ["4", 0], ["11", 0], ["3", 0], ["common", 0], ["set", 0], ["operations", 0], ["using", 0], ["union", 0], ["intersection", 0], ["and", 0], ["difference", 0], ["functions", 0], ["a", 1], ["2", 1], ["4", 1], ["5", 1], ["9", 1], ["b", 1], ["2", 1], ["4", 1], ["11", 0], ["12", 0], ["a", 0], ["union", 0], ["b", 0], ["values", 0], ["which", 0], ["exist", 0], ["in", 0], ["a", 0], ["or", 0], ["b", 0], ["2", 0], ["4", 0], ["5", 0], ["9", 0], ["11", 0], ["12", 0], ["a", 0], ["intersection", 0], ["b", 0], ["values", 0], ["which", 0], ["exist", 0], ["in", 0], ["a", 0], ["and", 0], ["b", 0], ["2", 0], ["4", 0], ["a", 0], ["difference", 0], ["b", 0], ["values", 0], ["which", 0], ["exist", 0], ["in", 0], ["a", 0], ["but", 0], ["not", 0], ["in", 0], ["b", 0], ["9", 0], ["5", 0], ["the", 0], ["union", 0], ["and", 0], ["intersection", 0], ["functions", 0], ["are", 0], ["symmetric", 0], ["methods", 0], ["a", 0], ["union", 0], ["b", 0], ["b", 0], ["union", 0], ["a", 0], ["true", 0], ["a", 0], ["intersection", 0], ["b", 0], ["b", 0], ["intersection", 0], ["a", 0], ["true", 0], ["a", 0], ["difference", 0], ["b", 0], ["b", 0], ["difference", 0], ["a", 0], ["false", 0], ["these", 0], ["other", 0], ["built", 0], ["in", 0], ["data", 0], ["structures", 0], ["in", 0], ["python", 0], ["are", 0], ["also", 0], ["useful", 0], ["problem", 0], ["statement", 0], ["given", 1], ["2", 1], ["sets", 2], ["of", 2], ["integers", 2], ["m", 2], ["and", 2], ["n", 2], ["print", 2], ["their", 2], ["symmetric", 2], ["difference", 2], ["in", 2], ["ascending", 2], ["order", 1], ["the", 1], ["term", 1], ["symmetric", 1], ["difference", 1], ["indicates", 1], ["those", 1], ["values", 1], ["that", 1], ["exist", 1], ["in", 1], ["either", 1], ["m", 1], ["or", 1], ["n", 1], ["but", 2], ["do", 2], ["not", 2], ["exist", 2], ["in", 2], ["both", 2], ["input", 2], ["format", 2], ["the", 2], ["first", 2], ["line", 2], ["of", 2], ["input", 2], ["contains", 2], ["an", 2], ["integer", 2], ["m", 2], ["the", 2], ["second", 2], ["line", 2], ["contains", 2], ["m", 2], ["space", 2], ["separated", 2], ["integers", 2], ["the", 2], ["third", 2], ["line", 2], ["contains", 2], ["an", 2], ["integer", 2], ["n", 2], ["the", 2], ["fourth", 2], ["line", 2], ["contains", 2], ["n", 2], ["space", 2], ["separated", 2], ["integers", 2], ["output", 2], ["format", 0], ["output", 0], ["the", 0], ["symmetric", 0], ["difference", 0], ["integers", 0], ["in", 0], ["ascending", 0], ["order", 0], ["one", 0], ["per", 0], ["line", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.20773930753564154, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.15105227427019685, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.27435387673956263, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.27435387673956263, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.20773930753564154, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.15105227427019685, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.27435387673956263, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.27435387673956263, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 2], ["enter", 0], ["your", 0], ["code", 0], ["here", 0], ["read", 0], ["input", 0], ["from", 0], ["stdin", 0], ["print", 0], ["output", 0], ["to", 0], ["stdout", 0], ["m", 0], ["int", 0], ["input", 0], ["set", 0], ["a", 0], ["str", 0], ["ar", 0], ["input", 0], ["strip", 0], ["split", 0], ["set", 0], ["a", 0], ["ar", 0], ["list", 0], ["map", 0], ["int", 0], ["set", 0], ["a", 0], ["str", 0], ["ar", 0], ["n", 0], ["int", 0], ["input", 0], ["set", 0], ["b", 0], ["str", 0], ["ar", 0], ["input", 0], ["strip", 0], ["split", 0], ["set", 0], ["b", 0], ["ar", 0], ["list", 0], ["map", 0], ["int", 0], ["set", 0], ["b", 0], ["str", 0], ["ar", 0], ["set", 0], ["a", 0], ["set", 0], ["set", 0], ["set", 0], ["a", 0], ["ar", 0], ["set", 0], ["b", 0], ["set", 0], ["set", 0], ["set", 0], ["b", 0], ["ar", 0], ["set", 0], ["a", 0], ["dif", 0], ["set", 0], ["set", 0], ["a", 0], ["set", 0], ["difference", 0], ["set", 0], ["b", 0], ["set", 0], ["set", 0], ["b", 0], ["dif", 0], ["set", 0], ["set", 0], ["b", 0], ["set", 0], ["difference", 0], ["set", 0], ["a", 0], ["set", 0], ["res", 0], ["set", 0], ["set", 0], ["a", 0], ["dif", 0], ["set", 0], ["union", 0], ["set", 0], ["b", 0], ["dif", 0], ["set", 0], ["res", 0], ["ar", 0], ["list", 0], ["res", 0], ["set", 0], ["res", 0], ["ar", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["res", 0], ["ar", 0], ["print", 0], ["i", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["def", 0], ["starting", 0], ["point", 0], ["m", 0], ["int", 0], ["input", 0], ["strip", 0], ["set", 0], ["m", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["strip", 0], ["set", 0], ["n", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["for", 0], ["el", 0], ["in", 0], ["sorted", 0], ["set", 0], ["m", 0], ["set", 0], ["n", 0], ["print", 0], ["el", 0], ["starting", 0], ["point", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.006802721088435374, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.003401360544217687, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.08176100628930817, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.040880503144654086, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.006802721088435374, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.003401360544217687, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.08176100628930817, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.040880503144654086, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given two integers $n$ and $m$ ($m < n$). Consider a convex regular polygon of $n$ vertices. Recall that a regular polygon is a polygon that is equiangular (all angles are equal in measure) and equilateral (all sides have the same length). [Image] Examples of convex regular polygons \n\nYour task is to say if it is possible to build another convex regular polygon with $m$ vertices such that its center coincides with the center of the initial polygon and each of its vertices is some vertex of the initial polygon.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given as two space-separated integers $n$ and $m$ ($3 \\le m < n \\le 100$) — the number of vertices in the initial polygon and the number of vertices in the polygon you want to build.\n\n\n-----Output-----\n\nFor each test case, print the answer — \"YES\" (without quotes), if it is possible to build another convex regular polygon with $m$ vertices such that its center coincides with the center of the initial polygon and each of its vertices is some vertex of the initial polygon and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n2\n6 3\n7 3\n\nOutput\nYES\nNO\n\n\n\n-----Note----- $0$ The first test case of the example \n\nIt can be shown that the answer for the second test case of the example is \"NO\".\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["t = int(input())\nfor tt in range(t):\n\tx, y = map(int, input().split())\n\tprint('YES' if x % y == 0 else \"NO\")\n", "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\n\nORDA = 97\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n\tif n < 2: return list()\n\tprime = [True for _ in range(n + 1)]\n\tp = 3\n\twhile p * p <= n:\n\t\tif prime[p]:\n\t\t\tfor i in range(p * 2, n + 1, p):\n\t\t\t\tprime[i] = False\n\t\tp += 2\n\tr = [2]\n\tfor p in range(3, n + 1, 2):\n\t\tif prime[p]:\n\t\t\tr.append(p)\n\treturn r\ndef divs(n, start=1):\n\tr = []\n\tfor i in range(start, int(math.sqrt(n) + 1)):\n\t\tif (n % i == 0):\n\t\t\tif (n / i == i):\n\t\t\t\tr.append(i)\n\t\t\telse:\n\t\t\t\tr.extend([i, n // i])\n\treturn r\ndef divn(n, primes):\n\tdivs_number = 1\n\tfor i in primes:\n\t\tif n == 1:\n\t\t\treturn divs_number\n\t\tt = 1\n\t\twhile n % i == 0:\n\t\t\tt += 1\n\t\t\tn //= i\n\t\tdivs_number *= t\ndef prime(n):\n\tif n == 2: return True\n\tif n % 2 == 0 or n <= 1: return False\n\tsqr = int(math.sqrt(n)) + 1\n\tfor d in range(3, sqr, 2):\n\t\tif n % d == 0: return False\n\treturn True\ndef convn(number, base):\n\tnewnumber = 0\n\twhile number > 0:\n\t\tnewnumber += number % base\n\t\tnumber //= base\n\treturn newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nfor _ in range(ii()):\n\tn, m = mi()\n\tprint('NO') if n % m else print('YES')\n", "from math import *\n\nzzz = int(input())\nfor zz in range(zzz):\n\tn, m = list(map(int, input().split()))\n\tprint('YES' if n/m == int(n/m)else 'NO' )\n\n", "for i in range(int(input())):\n\tn, m = list(map(int, input().split()))\n\tif n % m == 0:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n", "n = int(input())\nfor i in range(n):\n\ta,b = list(map(int,input().split()))\n\tif a % b == 0:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n", "for _ in range(int(input())):\n\tn, m = map(int, input().split())\n\tif n % m:\n\t\tprint('NO')\n\telse:\n\t\tprint('YES')\n", "t = int(input())\nfor i in range(t):\n\tn,m = list(map(int, input().split()))\n\tif n % m == 0:\n\t\tprint (\"YES\")\n\telse:\n\t\tprint (\"NO\")\n", "t = int(input())\nfor i in range(t):\n\ta, b = map(int, input().split())\n\tif (a % b == 0):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n", "\n\nfor _ in range(int(input())):\n\tn,m=map(int,input().split())\n\n\tif(n%m==0):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "n = int(input())\nfor i in range(n):\n\ta, b = list(map(int, input().split()))\n\tif a % b == 0:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "import math, collections, sys\ninput = sys.stdin.readline\ndef solve():\n\tn, m= map(int, input().split())\n\tif n%m:\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"YES\")\nfor _ in range(int(input())):\n\tsolve()\n", "q = int(input())\nfor irweewr in range(q):\n\tn, m = map(int,input().split())\n\tif n%m == 0:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n"], "id": "id9334"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9334", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["m", 0], ["m", 0], ["n", 0], ["consider", 0], ["a", 0], ["convex", 0], ["regular", 0], ["polygon", 0], ["of", 0], ["n", 0], ["vertices", 0], ["recall", 0], ["that", 0], ["a", 17], ["regular", 15], ["polygon", 15], ["is", 19], ["a", 20], ["polygon", 20], ["that", 20], ["is", 17], ["equiangular", 21], ["all", 21], ["angles", 23], ["are", 0], ["equal", 0], ["in", 0], ["measure", 0], ["and", 0], ["equilateral", 0], ["all", 0], ["sides", 0], ["have", 0], ["the", 0], ["same", 0], ["length", 0], ["image", 0], ["examples", 0], ["of", 0], ["convex", 0], ["regular", 0], ["polygons", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["say", 0], ["if", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["build", 0], ["another", 0], ["convex", 0], ["regular", 0], ["polygon", 0], ["with", 0], ["m", 0], ["vertices", 0], ["such", 0], ["that", 0], ["its", 0], ["center", 0], ["coincides", 0], ["with", 0], ["the", 0], ["center", 0], ["of", 0], ["the", 0], ["initial", 0], ["polygon", 0], ["and", 0], ["each", 0], ["of", 0], ["its", 0], ["vertices", 0], ["is", 0], ["some", 0], ["vertex", 0], ["of", 0], ["the", 0], ["initial", 0], ["polygon", 0], ["you", 8], ["have", 8], ["to", 8], ["answer", 8], ["t", 8], ["independent", 8], ["test", 8], ["cases", 8], ["input", 20], ["the", 46], ["first", 46], ["line", 27], ["of", 27], ["the", 27], ["input", 27], ["contains", 27], ["one", 27], ["integer", 26], ["t", 32], ["1", 4], ["le", 4], ["t", 4], ["le", 4], ["10", 4], ["4", 4], ["—", 4], ["the", 4], ["number", 4], ["of", 4], ["test", 4], ["cases", 4], ["the", 0], ["next", 0], ["t", 0], ["lines", 0], ["describe", 0], ["test", 0], ["cases", 0], ["each", 0], ["test", 0], ["case", 0], ["is", 0], ["given", 0], ["as", 0], ["two", 0], ["space", 0], ["separated", 0], ["integers", 0], ["n", 0], ["and", 0], ["m", 0], ["3", 0], ["le", 0], ["m", 0], ["n", 0], ["le", 0], ["100", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["vertices", 0], ["in", 0], ["the", 0], ["initial", 0], ["polygon", 0], ["and", 0], ["the", 0], ["number", 0], ["of", 0], ["vertices", 0], ["in", 0], ["the", 0], ["polygon", 0], ["you", 0], ["want", 0], ["to", 0], ["build", 0], ["output", 0], ["for", 0], ["each", 0], ["test", 0], ["case", 0], ["print", 0], ["the", 0], ["answer", 0], ["—", 0], ["yes", 0], ["without", 0], ["quotes", 0], ["if", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["build", 0], ["another", 0], ["convex", 0], ["regular", 0], ["polygon", 0], ["with", 0], ["m", 0], ["vertices", 0], ["such", 0], ["that", 0], ["its", 0], ["center", 0], ["coincides", 0], ["with", 0], ["the", 0], ["center", 0], ["of", 0], ["the", 0], ["initial", 0], ["polygon", 0], ["and", 0], ["each", 0], ["of", 0], ["its", 0], ["vertices", 0], ["is", 0], ["some", 0], ["vertex", 0], ["of", 0], ["the", 0], ["initial", 0], ["polygon", 0], ["and", 0], ["no", 0], ["otherwise", 0], ["example", 0], ["input", 0], ["2", 0], ["6", 0], ["3", 0], ["7", 0], ["3", 0], ["output", 0], ["yes", 0], ["no", 0], ["note", 0], ["0", 0], ["the", 0], ["first", 0], ["test", 0], ["case", 0], ["of", 0], ["the", 0], ["example", 0], ["it", 0], ["can", 0], ["be", 0], ["shown", 0], ["that", 0], ["the", 0], ["answer", 0], ["for", 0], ["the", 0], ["second", 0], ["test", 0], ["case", 0], ["of", 0], ["the", 0], ["example", 0], ["is", 0], ["no", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1640625, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.01944429823736413, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.2462686567164179, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.03694212759730758, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.078125, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.015625, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.16044776119402984, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.03125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["t", 0], ["int", 0], ["input", 0], ["for", 0], ["tt", 0], ["in", 0], ["range", 0], ["t", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["yes", 0], ["if", 0], ["x", 0], ["y", 0], ["0", 0], ["else", 0], ["no", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["itertools", 0], ["import", 0], ["functools", 0], ["import", 0], ["collections", 0], ["import", 0], ["operator", 0], ["import", 0], ["fileinput", 0], ["import", 0], ["copy", 0], ["orda", 0], ["97", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["mi", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["lcm", 0], ["a", 0], ["b", 0], ["return", 0], ["abs", 0], ["a", 0], ["b", 0], ["math", 0], ["gcd", 0], ["a", 0], ["b", 0], ["def", 0], ["revn", 0], ["n", 0], ["return", 0], ["str", 0], ["n", 0], ["1", 0], ["def", 0], ["dd", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["int", 0], ["def", 0], ["ddl", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["def", 0], ["sieve", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["list", 0], ["prime", 0], ["true", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["p", 0], ["3", 0], ["while", 0], ["p", 0], ["p", 0], ["n", 0], ["if", 0], ["prime", 0], ["p", 2], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["p", 0], ["2", 0], ["n", 0], ["1", 0], ["p", 0], ["prime", 0], ["i", 0], ["false", 0], ["p", 0], ["2", 0], ["r", 0], ["2", 0], ["for", 0], ["p", 0], ["in", 0], ["range", 0], ["3", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["prime", 0], ["p", 0], ["r", 0], ["append", 0], ["p", 0], ["return", 0], ["r", 0], ["def", 0], ["divs", 0], ["n", 0], ["start", 0], ["1", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["if", 0], ["n", 0], ["i", 0], ["i", 0], ["r", 0], ["append", 0], ["i", 0], ["else", 0], ["r", 0], ["extend", 0], ["i", 0], ["n", 0], ["i", 0], ["return", 0], ["r", 0], ["def", 0], ["divn", 0], ["n", 0], ["primes", 0], ["divs", 0], ["number", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["primes", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["divs", 0], ["number", 0], ["t", 0], ["1", 0], ["while", 0], ["n", 0], ["i", 0], ["0", 0], ["t", 0], ["1", 0], ["n", 0], ["i", 0], ["divs", 0], ["number", 0], ["t", 0], ["def", 0], ["prime", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["true", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["or", 0], ["n", 0], ["1", 0], ["return", 0], ["false", 0], ["sqr", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["3", 0], ["sqr", 0], ["2", 0], ["if", 0], ["n", 0], ["d", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["def", 0], ["convn", 0], ["number", 0], ["base", 0], ["newnumber", 0], ["0", 0], ["while", 0], ["number", 0], ["0", 0], ["newnumber", 0], ["number", 0], ["base", 0], ["number", 0], ["base", 0], ["return", 0], ["newnumber", 0], ["def", 0], ["cdiv", 0], ["n", 0], ["k", 0], ["return", 0], ["n", 0], ["k", 0], ["n", 0], ["k", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["ii", 0], ["n", 0], ["m", 0], ["mi", 0], ["print", 0], ["no", 0], ["if", 0], ["n", 0], ["m", 0], ["else", 0], ["print", 0], ["yes", 0], ["from", 0], ["math", 0], ["import", 0], ["zzz", 0], ["int", 0], ["input", 0], ["for", 0], ["zz", 0], ["in", 0], ["range", 0], ["zzz", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["yes", 0], ["if", 0], ["n", 0], ["m", 0], ["int", 0], ["n", 0], ["m", 0], ["else", 0], ["no", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["m", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["b", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["m", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["m", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["b", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["m", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["b", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["math", 0], ["collections", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["m", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["solve", 0], ["q", 0], ["int", 0], ["input", 0], ["for", 0], ["irweewr", 0], ["in", 0], ["range", 0], ["q", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["m", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0038684719535783366, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0019342359767891683, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.026465028355387523, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.013232514177693762, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0038684719535783366, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0019342359767891683, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.026465028355387523, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.013232514177693762, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nGiven a collection of numbers that might contain duplicates, return all possible unique permutations.\n\nExample:\n\n\nInput: [1,1,2]\nOutput:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\nclass Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["class Solution:\n\tdef permuteUnique(self, nums):\n\t    \"\"\"\n\t    :type nums: List[int]\n\t    :rtype: List[List[int]]\n\t    \"\"\"\n\t    if not nums:\n\t\t   return []\n\t    \n\t    nums.sort()\n\t    n = len(nums)\n\t    res = [nums[:]]\n\t    i = n-1\n\t    while i > 0:\n\t\t   if nums[i-1] < nums[i]:\n\t\t\t  j = n-1\n\t\t\t  while nums[j] <= nums[i-1]:\n\t\t\t\t j -= 1\n\t\t\t  nums[i-1], nums[j] = nums[j], nums[i-1]\n\t\t\t  nums[i:] = sorted(nums[i:])\n\t\t\t  res.append(nums[:])\n\t\t\t  i = n-1\n\t\t   else:\n\t\t\t  i -= 1\n\t    \n\t    return res\n\t    \n\t    \n\t    \n", "class Solution:\n\tdef permuteUnique(self, nums):\n\t    \"\"\"\n\t    :type nums: List[int]\n\t    :rtype: List[List[int]]\n\t    \"\"\"\n\t    def dfs(nums):\n\t\t   if not nums:\n\t\t\t  return [[]]\n\t\t   dic = set()\n\t\t   new = []\n\t\t   for i in range(len(nums)):\n\t\t\t  if nums[i] not in dic:\n\t\t\t\t dic.add(nums[i])\n\t\t\t\t new += [[nums[i]] + item for item in dfs(nums[: i] + nums[i + 1 :])]\n\t\t   return new\n\t    \n\t    return dfs(nums)\n", "class Solution:\n\tdef permuteUnique(self, nums):\n\t    \"\"\"\n\t    :type nums: List[int]\n\t    :rtype: List[List[int]]\n\t    \"\"\"\n\t    res=[]\n\t    nums.sort()\n\t    self.dfs(nums,[],res,[False] * len(nums))\n\t    return res\n\t\n\tdef dfs(self,nums,path,res,used):\n\t    if len(path)==len(nums):\n\t\t   res.append(path)\n\t    else:\n\t\t   for i in range(len(nums)):\n\t\t\t  if used[i] or (i>0 and nums[i] == nums[i-1] and not used[i-1]):\n\t\t\t\t continue\n\t\t\t  used[i] = True\n\t\t\t  self.dfs(nums,path+[nums[i]],res,used)\n\t\t\t  used[i]=False\n", "class Solution:\n\tdef permuteUnique(self, nums):\n\t    \"\"\"\n\t    :type nums: List[int]\n\t    :rtype: List[List[int]]\n\t    \"\"\"\n\t    res = []\n\t    nums.sort()\n\t    def swap(a, i, j):\n\t\t   temp = a[i]\n\t\t   a[i] = a[j]\n\t\t   a[j] = temp\n\t    \n\t    def helper(index, path):\n\t\t   if index == len(nums) - 1:\n\t\t\t  res.append(path.copy())\n\t\t   for i in range(index, len(nums)):\n\t\t\t  if i != index and path[i] == path[index]:\n\t\t\t\t continue\n\t\t\t  swap(path, index, i)\n\t\t\t  helper(index + 1, path.copy())\n\t\t   \n\t    helper(0, nums)\n\t    return res\n"], "id": "id9531"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9531", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 1], ["question", 3], ["given", 34], ["a", 34], ["collection", 6], ["of", 5], ["numbers", 5], ["that", 5], ["might", 5], ["contain", 5], ["duplicates", 4], ["return", 4], ["all", 4], ["possible", 4], ["unique", 4], ["permutations", 4], ["example", 4], ["input", 4], ["1", 4], ["1", 1], ["2", 0], ["output", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["permuteunique", 0], ["self", 0], ["nums", 0], ["list", 0], ["int", 0], ["list", 0], ["list", 0], ["int", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5128205128205128, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.14894419306184012, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6274509803921569, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6274509803921569, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.46153846153846156, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.14743589743589744, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6274509803921569, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6274509803921569, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["class", 0], ["solution", 0], ["def", 2], ["permuteunique", 1], ["self", 5], ["nums", 5], ["type", 1], ["nums", 1], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["list", 0], ["int", 0], ["if", 0], ["not", 0], ["nums", 0], ["return", 0], ["nums", 0], ["sort", 0], ["n", 0], ["len", 0], ["nums", 0], ["res", 0], ["nums", 0], ["i", 0], ["n", 0], ["1", 0], ["while", 0], ["i", 0], ["0", 0], ["if", 0], ["nums", 0], ["i", 0], ["1", 0], ["nums", 0], ["i", 0], ["j", 0], ["n", 0], ["1", 0], ["while", 0], ["nums", 0], ["j", 0], ["nums", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["nums", 0], ["i", 0], ["1", 0], ["nums", 0], ["j", 0], ["nums", 0], ["j", 0], ["nums", 0], ["i", 0], ["1", 0], ["nums", 0], ["i", 0], ["sorted", 0], ["nums", 0], ["i", 0], ["res", 0], ["append", 0], ["nums", 0], ["i", 0], ["n", 0], ["1", 0], ["else", 0], ["i", 0], ["1", 0], ["return", 0], ["res", 0], ["class", 0], ["solution", 0], ["def", 0], ["permuteunique", 0], ["self", 0], ["nums", 0], ["type", 0], ["nums", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["list", 0], ["int", 0], ["def", 0], ["dfs", 0], ["nums", 0], ["if", 0], ["not", 0], ["nums", 0], ["return", 0], ["dic", 0], ["set", 0], ["new", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["nums", 0], ["if", 0], ["nums", 0], ["i", 0], ["not", 0], ["in", 0], ["dic", 0], ["dic", 0], ["add", 0], ["nums", 0], ["i", 0], ["new", 0], ["nums", 0], ["i", 0], ["item", 0], ["for", 0], ["item", 0], ["in", 0], ["dfs", 0], ["nums", 0], ["i", 0], ["nums", 0], ["i", 0], ["1", 0], ["return", 0], ["new", 0], ["return", 0], ["dfs", 0], ["nums", 0], ["class", 0], ["solution", 0], ["def", 0], ["permuteunique", 0], ["self", 1], ["nums", 0], ["type", 0], ["nums", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["list", 0], ["int", 0], ["res", 0], ["nums", 0], ["sort", 0], ["self", 0], ["dfs", 0], ["nums", 0], ["res", 0], ["false", 0], ["len", 0], ["nums", 0], ["return", 0], ["res", 0], ["def", 0], ["dfs", 0], ["self", 0], ["nums", 0], ["path", 0], ["res", 0], ["used", 0], ["if", 0], ["len", 0], ["path", 0], ["len", 0], ["nums", 0], ["res", 0], ["append", 0], ["path", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["nums", 0], ["if", 0], ["used", 0], ["i", 0], ["or", 0], ["i", 0], ["0", 0], ["and", 0], ["nums", 0], ["i", 0], ["nums", 0], ["i", 0], ["1", 0], ["and", 0], ["not", 0], ["used", 0], ["i", 0], ["1", 0], ["continue", 0], ["used", 0], ["i", 0], ["true", 0], ["self", 0], ["dfs", 0], ["nums", 0], ["path", 0], ["nums", 0], ["i", 0], ["res", 0], ["used", 0], ["used", 0], ["i", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["permuteunique", 0], ["self", 1], ["nums", 1], ["type", 0], ["nums", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["list", 0], ["int", 0], ["res", 0], ["nums", 0], ["sort", 0], ["def", 0], ["swap", 0], ["a", 2], ["i", 0], ["j", 0], ["temp", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["a", 0], ["j", 0], ["temp", 0], ["def", 0], ["helper", 0], ["index", 0], ["path", 0], ["if", 0], ["index", 0], ["len", 0], ["nums", 0], ["1", 0], ["res", 0], ["append", 0], ["path", 0], ["copy", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["index", 0], ["len", 0], ["nums", 0], ["if", 0], ["i", 0], ["index", 0], ["and", 0], ["path", 0], ["i", 0], ["path", 0], ["index", 0], ["continue", 0], ["swap", 0], ["path", 0], ["index", 0], ["i", 0], ["helper", 0], ["index", 0], ["1", 0], ["path", 0], ["copy", 0], ["helper", 0], ["0", 0], ["nums", 0], ["return", 0], ["res", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.036231884057971016, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.026811594202898553, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.2013888888888889, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.17708333333333334, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.036231884057971016, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.026811594202898553, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.2013888888888889, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.17708333333333334, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nGiven a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n\nExample:\n\n\nInput:\n[\n  [\"1\",\"0\",\"1\",\"0\",\"0\"],\n  [\"1\",\"0\",\"1\",\"1\",\"1\"],\n  [\"1\",\"1\",\"1\",\"1\",\"1\"],\n  [\"1\",\"0\",\"0\",\"1\",\"0\"]\n]\nOutput: 6\nclass Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["class Solution:\n\tdef maximalRectangle(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[str]]\n\t    :rtype: int\n\t    \"\"\"\n\t    if not matrix or not matrix[0]:\n\t\t   return 0\n\t    n = len(matrix[0])\n\t    height = [0] * (n + 1)\n\t    ans = 0\n\t    for row in matrix:\n\t\t   for i in range(n):\n\t\t\t  height[i] = height[i] + 1 if row[i] == '1' else 0\n\t\t   stack = [-1]\n\t\t   for i in range(n + 1):\n\t\t\t  while height[i] < height[stack[-1]]:\n\t\t\t\t h = height[stack.pop()]\n\t\t\t\t w = i - 1 - stack[-1]\n\t\t\t\t ans = max(ans, h * w)\n\t\t\t  stack.append(i)\n\t    return ans\n", "class Solution:\n\tdef maximalRectangle(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[str]]\n\t    :rtype: int\n\t    \"\"\"\n\t    if not matrix:\n\t\t   return 0\n\t    m = len(matrix)\n\t    n = len(matrix[0])\n\t    ans = 0\n\t    heights = [0]*(n+1)\n \n\t    for i in range(m):\n\t\t   for j in range(n):\n\t\t\t  heights[j] = heights[j] + 1 if matrix[i][j] == '1' else 0\n\t\t   stack = [-1]\n\t\t   for i in range(n + 1):\n\t\t\t  while heights[i] < heights[stack[-1]]:\n\t\t\t\t h = heights[stack.pop()]\n\t\t\t\t w = i - stack[-1] - 1\n\t\t\t\t ans = max(ans, w*h)\n\t\t\t  stack.append(i)\n\t    return ans\n\t\t\t  \n", "class Solution:\n     \n\tdef __init__(self):\n\t    self.maxarea = 0\n\t    \n\tdef maximalRectangle(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[str]]\n\t    :rtype: int\n\t    \"\"\"\n\t\t\n\t    if len(matrix) == 0 or len(matrix[0]) == 0:\n\t\t   return 0\n\t    \n\t    def maxrect(height):\n\t\t   height.append(0)\n\t\t   stack = [-1]\n\t\t   ans = 0\n\t\t   for i in range(len(height)):\n\t\t\t  while height[i] < height[stack[-1]]:\n\t\t\t\t h = height[stack.pop()]\n\t\t\t\t w = i - stack[-1] - 1\n\t\t\t\t ans = max(ans, h * w)\n\t\t\t  stack.append(i)\n\t\t   height.pop()\n\t\t   return ans\n \n \n\t\t   \n\t    \n\t    abs_max = 0\n\t    height = [0]*len(matrix[0])\n\t    for i in range(len(matrix)):\n\t\t   for j in range(len(matrix[0])):\n\t\t\t  if matrix[i][j] == \"0\":\n\t\t\t\t height[j] = 0\n\t\t\t  else:\n\t\t\t\t height[j] += 1\n\t\t   local_max = maxrect(height)\n\t\t   if local_max > abs_max:\n\t\t\t  abs_max = local_max\n\t    \n\t    return abs_max\n\t    \n\t    \n\t\t\t  \n\t    \n\t    \n"], "id": "id8500"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8500", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["given", 26], ["a", 26], ["2d", 26], ["binary", 24], ["matrix", 24], ["filled", 11], ["with", 11], ["0", 11], ["s", 11], ["and", 11], ["1", 11], ["s", 12], ["find", 2], ["the", 2], ["largest", 2], ["rectangle", 2], ["containing", 4], ["only", 4], ["1", 4], ["s", 6], ["and", 6], ["return", 6], ["its", 6], ["area", 6], ["example", 6], ["input", 6], ["1", 303], ["0", 267], ["1", 390], ["0", 467], ["0", 320], ["1", 299], ["0", 263], ["1", 278], ["1", 6], ["1", 2], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["output", 0], ["6", 0], ["class", 0], ["solution", 0], ["def", 0], ["maximalrectangle", 0], ["self", 0], ["matrix", 0], ["list", 0], ["list", 0], ["str", 0], ["int", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.631578947368421, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.09537647587171552, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6956521739130435, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2729721968852404, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2807017543859649, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08040935672514618, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5217391304347826, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2608695652173913, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["class", 0], ["solution", 0], ["def", 0], ["maximalrectangle", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["str", 0], ["rtype", 0], ["int", 1], ["if", 1], ["not", 0], ["matrix", 0], ["or", 0], ["not", 0], ["matrix", 0], ["0", 0], ["return", 0], ["0", 0], ["n", 0], ["len", 0], ["matrix", 0], ["0", 0], ["height", 0], ["0", 0], ["n", 0], ["1", 0], ["ans", 0], ["0", 0], ["for", 0], ["row", 0], ["in", 0], ["matrix", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["height", 0], ["i", 0], ["height", 0], ["i", 0], ["1", 0], ["if", 0], ["row", 0], ["i", 0], ["1", 0], ["else", 0], ["0", 0], ["stack", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["while", 0], ["height", 0], ["i", 0], ["height", 0], ["stack", 0], ["1", 0], ["h", 0], ["height", 0], ["stack", 0], ["pop", 0], ["w", 0], ["i", 0], ["1", 0], ["stack", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["h", 0], ["w", 0], ["stack", 0], ["append", 0], ["i", 0], ["return", 0], ["ans", 0], ["class", 0], ["solution", 0], ["def", 0], ["maximalrectangle", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["str", 0], ["rtype", 0], ["int", 0], ["if", 0], ["not", 0], ["matrix", 0], ["return", 0], ["0", 0], ["m", 0], ["len", 0], ["matrix", 0], ["n", 0], ["len", 0], ["matrix", 0], ["0", 0], ["ans", 0], ["0", 0], ["heights", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["heights", 0], ["j", 0], ["heights", 0], ["j", 0], ["1", 0], ["if", 0], ["matrix", 0], ["i", 0], ["j", 0], ["1", 0], ["else", 0], ["0", 0], ["stack", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["while", 1], ["heights", 1], ["i", 1], ["heights", 0], ["stack", 0], ["1", 0], ["h", 0], ["heights", 0], ["stack", 0], ["pop", 0], ["w", 0], ["i", 0], ["stack", 0], ["1", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["w", 0], ["h", 0], ["stack", 0], ["append", 0], ["i", 0], ["return", 0], ["ans", 0], ["class", 0], ["solution", 0], ["def", 0], ["init", 0], ["self", 0], ["self", 0], ["maxarea", 0], ["0", 0], ["def", 0], ["maximalrectangle", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["str", 0], ["rtype", 0], ["int", 0], ["if", 0], ["len", 0], ["matrix", 0], ["0", 0], ["or", 0], ["len", 0], ["matrix", 0], ["0", 0], ["0", 0], ["return", 0], ["0", 0], ["def", 0], ["maxrect", 0], ["height", 0], ["height", 0], ["append", 0], ["0", 0], ["stack", 0], ["1", 0], ["ans", 0], ["0", 1], ["for", 1], ["i", 1], ["in", 1], ["range", 1], ["len", 1], ["height", 1], ["while", 1], ["height", 1], ["i", 1], ["height", 0], ["stack", 0], ["1", 0], ["h", 0], ["height", 0], ["stack", 0], ["pop", 0], ["w", 0], ["i", 0], ["stack", 0], ["1", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["h", 0], ["w", 0], ["stack", 0], ["append", 0], ["i", 0], ["height", 0], ["pop", 0], ["return", 0], ["ans", 0], ["abs", 0], ["max", 0], ["0", 0], ["height", 0], ["0", 1], ["len", 4], ["matrix", 4], ["0", 7], ["for", 13], ["i", 5], ["in", 2], ["range", 2], ["len", 2], ["matrix", 2], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["matrix", 0], ["0", 0], ["if", 0], ["matrix", 0], ["i", 0], ["j", 0], ["0", 0], ["height", 0], ["j", 0], ["0", 0], ["else", 0], ["height", 0], ["j", 0], ["1", 0], ["local", 0], ["max", 0], ["maxrect", 0], ["height", 0], ["if", 0], ["local", 0], ["max", 0], ["abs", 0], ["max", 0], ["abs", 0], ["max", 0], ["local", 0], ["max", 0], ["return", 0], ["abs", 0], ["max", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08865248226950355, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.06709141921907878, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.24829931972789115, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.24829931972789115, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0851063829787234, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.06681864235055723, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.24829931972789115, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.24829931972789115, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nGiven a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\n\nExample 1:\n\n\nInput:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\nOutput: [1,2,3,6,9,8,7,4,5]\n\n\nExample 2:\n\nInput:\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\nclass Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    result = []\n\t    if not matrix:\n\t\t   return result\n\t    top = left = 0\n\t    bottom, right = len(matrix) - 1, len(matrix[0]) - 1\n\t    while top < bottom and left < right:\n\t\t   for i in range(left, right):\n\t\t\t  result.append(matrix[top][i])\n\t\t   for i in range(top, bottom):\n\t\t\t  result.append(matrix[i][right])\n\t\t   for i in range(right, left, -1):\n\t\t\t  result.append(matrix[bottom][i])\n\t\t   for i in range(bottom, top, -1):\n\t\t\t  result.append(matrix[i][left])\n\t\t   left += 1\n\t\t   right -= 1\n\t\t   top += 1\n\t\t   bottom -= 1\n\t    if left == right and top == bottom:\n\t\t   result.append(matrix[left][top])\n\t    if left == right and top != bottom:\n\t\t   for i in range(top, bottom+1):\n\t\t\t  result.append(matrix[i][left])\n\t    if left != right and top == bottom:\n\t\t   for i in range(left, right+1):\n\t\t\t  result.append(matrix[top][i])\n\t    return result\n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    if not matrix:\n\t\t   return []\n\t    def layer(width, height, top, left):\n\t\t   if not (width > 0 and height > 0):\n\t\t\t  return\n\t\t   for i in range(left, left+width):\n\t\t\t  yield matrix[top][i]\n\t\t   if height != 1:\n\t\t\t  for i in range(top+1, top+height):\n\t\t\t\t yield matrix[i][left+width-1]\n\t\t\t  for i in range(left+width-2, left-1, -1):\n\t\t\t\t yield matrix[top+height-1][i]\n\t\t\t  if width != 1:\n\t\t\t\t for i in range(top+height-2, top, -1):\n\t\t\t\t\tyield matrix[i][left]\n\t\t   yield from layer(width-2,height-2, top+1, left+1)\n\t    return list(layer(len(matrix[0]), len(matrix), 0, 0))\n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    m = matrix\n\t    ml = len(m)\n\t    if ml == 0:\n\t\t   return []\n\t    nl = len(m[0])\n\t    ms, me, ns, ne = 0, ml - 1, 0, nl - 1 \n\t    ans = []\n\t    while ns <= ne or ms <= me: \n\t\t   #print(ms,me,ns,ne)\n\t\t   if ms <= me: \n\t\t\t  for j in range(ns, ne + 1): \n\t\t\t\t ans.append(m[ms][j])\n\t\t\t  ms += 1\n\t\t   #print(ms,me,ns,ne)\n\t\t   if ne >= ns: \n\t\t\t  for j in range(ms, me + 1): \n\t\t\t\t ans.append(m[j][ne])\n\t\t\t  ne -= 1\n\t\t   #print(ms,me,ns,ne)\n\t\t   if me >= ms: \n\t\t\t  for j in range(ne, ns - 1, -1):\n\t\t\t\t ans.append(m[me][j])\n\t\t\t  me -= 1\n\t\t   #print(ms,me,ns,ne)\n\t\t   if ns <= ne: \n\t\t\t  for j in range(me, ms - 1, -1):\n\t\t\t\t ans.append(m[j][ns])\n\t\t\t  ns += 1\n\t\t   #print(ms,me,ns,ne)\n\t    return ans \n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    if not matrix:\n\t\t   return matrix\n\t    res = []\n\t    row = len(matrix)\n\t    col = len(matrix[0])\n\t    left = 0\n\t    right = col - 1\n\t    down = row - 1\n\t    up = 0\n\t    direction = 0\n\t    while True:\n\t\t   if direction == 0:\n\t\t\t  for i in range(left, right + 1):\n\t\t\t\t res.append(matrix[up][i])\n\t\t\t  up += 1\n\t\t   if direction == 1:\n\t\t\t  for i in range(up, down + 1):\n\t\t\t\t res.append(matrix[i][right])\n\t\t\t  right -= 1\n\t\t   if direction == 2:\n\t\t\t  for i in reversed(range(left, right+1)):\n\t\t\t\t res.append(matrix[down][i])\n\t\t\t  down -= 1\n\t\t   if direction == 3:\n\t\t\t  for i in reversed(range(up, down + 1)):\n\t\t\t\t res.append(matrix[i][left])\n\t\t\t  left += 1\n\t\t   direction = (direction + 1) % 4\n\t\t   if left > right or up > down:\n\t\t\t  return res\n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    res = []\n\t    if not matrix:\n\t\t   return res\n\t    \n\t    left, right, top, bottom = 0, len(matrix[0])-1, 0, len(matrix)-1\n\t    \n\t    while left <= right and top <= bottom:\n\t\t   res += [matrix[top][i] for i in range(left,right+1)]\n\t\t   res += [matrix[i][right] for i in range(top+1,bottom)]\n\t\t   res += [matrix[bottom][i] for i in range(right, left-1,-1) if top < bottom]\n\t\t   res += [matrix[i][left] for i in range(bottom-1,top,-1) if left < right]\n\t\t   left+=1\n\t\t   right-=1\n\t\t   top+=1\n\t\t   bottom-=1\n\t    return res\n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    if len(matrix) == 0:\n\t\t   return []\n\t    level = 0\n\t    r = []\n\t    while len(r) < len(matrix)*len(matrix[0]):\n\t\t   if level%4 == 0:\n\t\t\t  r += matrix[level//4][level//4: len(matrix[0]) - level//4]\n\t\t   elif level%4 == 1:\n\t\t\t  side_index = len(matrix[0]) - (level)//4 - 1\n\t\t\t  for i in range(level//4 + 1,len(matrix) - level//4):\n\t\t\t\t r.append(matrix[i][side_index])\n\t\t   elif level%4 == 2:\n\t\t\t  r += matrix[len(matrix) -1 - level//4][level//4:len(matrix[0]) - level//4 -1][::-1]\n\t\t   elif level%4 == 3:\n\t\t\t  side_index = level//4\n\t\t\t  for i in range((len(matrix) -1 - level//4 -1),level//4 ,-1):\n\t\t\t\t r.append(matrix[i][side_index])\n\t\t   level +=1\n\t    return r\n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    ans = []\n\t    \n\t    if len(matrix) is 0:\n\t\t   return ans\n\t    \n\t    import numpy as np\n\t    npa = np.array(matrix, dtype = int)\n\t    \n\t    r_s = c_s = 0\n\t    r_e = len(matrix)\n\t    c_e = len(matrix[0])\n\t    \n\t    go_row = True\n\t    forward = True\n\t    row_index = r_s\n\t    col_index = c_e - 1\n\t    \n\t    while(r_s < r_e and c_s < c_e):\n\t\t   if go_row:\n\t\t\t  # Traverse row\n\t\t\t  s = npa[row_index,c_s:c_e].tolist()\n\t\t\t  if forward:\n\t\t\t\t r_s += 1\n\t\t\t\t row_index = r_e -1\n\t\t\t  else:\n\t\t\t\t r_e -= 1\n\t\t\t\t row_index = r_s\n\t\t\t\t s.reverse()\n\t\t\t  ans.extend(s)\n\t\t\t  \n\t\t\t  \n\t\t   else:\n\t\t\t  # traverse col\n\t\t\t  s = npa[r_s:r_e, col_index].tolist()\n\t\t\t  if forward:\n\t\t\t\t c_e -= 1\n\t\t\t\t col_index = c_s\n\t\t\t  else:\n\t\t\t\t c_s += 1\n\t\t\t\t col_index = c_e - 1\n\t\t\t\t s.reverse()\n\t\t\t  ans.extend(s)\n\t\t\t  forward = not forward\n\t\t\t\t\t\t   \n\t\t   go_row = not go_row\n\t    \n\t    return ans\n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    m = matrix\n\t    ml = len(m)\n\t    if ml == 0:\n\t\t   return []\n\t    nl = len(m[0])\n\t    ms, me, ns, ne = 0, ml - 1, 0, nl - 1 \n\t    ans = []\n\t    while ns <= ne or ms <= me: \n\t\t   #print(ms,me,ns,ne)\n\t\t   if ms <= me: \n\t\t\t  for j in range(ns, ne + 1): \n\t\t\t\t ans.append(m[ms][j])\n\t\t\t  ms += 1\n\t\t   #print(ms,me,ns,ne)\n\t\t   if ne >= ns: \n\t\t\t  for j in range(ms, me + 1): \n\t\t\t\t ans.append(m[j][ne])\n\t\t\t  ne -= 1\n\t\t   #print(ms,me,ns,ne)\n\t\t   if me >= ms: \n\t\t\t  for j in range(ne, ns - 1, -1):\n\t\t\t\t ans.append(m[me][j])\n\t\t\t  me -= 1\n\t\t   #print(ms,me,ns,ne)\n\t\t   if ns <= ne: \n\t\t\t  for j in range(me, ms - 1, -1):\n\t\t\t\t ans.append(m[j][ns])\n\t\t\t  ns += 1\n\t\t   #print(ms,me,ns,ne)\n\t    return ans \n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    # 0 is right, 1 is down, 2 is left, 3 is up\n\t    state = 0\n\t    next_direction = [1, 2, 3, 0]\n\t    r = []\n\t    \n\t    while len(matrix) > 0:\n\t\t   if state == 0:\n\t\t\t  r += matrix[0]\n\t\t\t  matrix = matrix[1:]\n\t\t\t  state = next_direction[state]\n\t\t   elif state == 1:\n\t\t\t  r += [m[len(matrix[0]) - 1] for m in matrix]\n\t\t\t  matrix = [m[:len(matrix[0]) - 1] for m in matrix]\n\t\t\t  state = 2\n\t\t   elif state == 2:\n\t\t\t  r += reversed(matrix[-1])\n\t\t\t  matrix = matrix[:-1]\n\t\t\t  state = 3\n\t\t   elif state == 3:\n\t\t\t  r += [matrix[j][0] for j in range(len(matrix) - 1, -1, -1)]\n\t\t\t  matrix = [m[1:] for m in matrix]\n\t\t\t  state = 0\n\t\t\t \n\t\t   # Covers the case of a list of empty lists (eg. [[],[],[]])\n\t\t   if len(matrix) >= 1 and not matrix[0]:\n\t\t\t  matrix = []\n\t\t\t  \n\t    return r\n\t    \n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    if not matrix:\n\t\t   return matrix\n\t    ans=matrix[0]\n\t    m=len(matrix)\n\t    n=len(matrix[0])\n\t    row_m, column_m=n-1, m-1\n\t    row_dir, column_dir=-1, 1\n\t    i0, j0=0, n-1\n\t    while  column_m>0:\n\t\t   ans.extend([matrix[i0+i*column_dir][j0] for i in range(1, column_m+1)])\n\t\t   i0+=column_m*column_dir\n\t\t   column_m-=1\n\t\t   column_dir*=-1\n\t\t\t  \n\t\t   if row_m==0:\n\t\t\t  return ans\n\t\t   else:\n\t\t\t  ans.extend([matrix[i0][j0+row_dir*i] for i in range(1, row_m+1)])\n\t\t\t  j0+=row_m*row_dir\n\t\t\t  row_m-=1\n\t\t\t  row_dir*=-1  \n\t    return ans\n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    #O(n^2) time; O(1) space\n\t    if not matrix:\n\t\t   return []\n\t    \n\t    ans = []\n\t    rowSize = len(matrix); colSize = len(matrix[0])       \n\t    rowStart=0; colStart=0; rowEnd = rowSize-1; colEnd = colSize-1        \n\t    \n\t    while rowStart <= rowEnd and colStart <= colEnd:\n\t\t   \n\t\t   for colIndex in range(colStart,colEnd+1):\n\t\t\t  ans.append(matrix[rowStart][colIndex])\n\t\t   rowStart += 1;\n\t\t   \n\t\t   for rowIndex in range(rowStart,rowEnd+1):\n\t\t\t  ans.append(matrix[rowIndex][colEnd])\n\t\t   colEnd -= 1;\n\t\t   \n\t\t   if rowStart > rowEnd or colStart > colEnd: break                \n\t\t   \n\t\t   for colIndex in range(colEnd,colStart-1,-1):\n\t\t\t  ans.append(matrix[rowEnd][colIndex])\n\t\t   rowEnd -= 1;                           \n\t\t\t  \n\t\t   for rowIndex in range(rowEnd,rowStart-1,-1):\n\t\t\t  ans.append(matrix[rowIndex][colStart])\n\t\t   colStart += 1;                                     \n\t\t   \n\t    return ans\n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    if not matrix or not matrix[0]:\n\t\t   return []\n\t    \n\t    v = [[False] * len(matrix[0]) for _ in range(len(matrix))]\n\t    res = []\n\t    i = 0; j = 0\n\t    m = len(matrix)\n\t    n = len(matrix[0])\n\t    count = 0\n\t    dest = m * n\n\t    way = 0  # 0> 1v 2< 3^\n\t    offset = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\t    while count < dest:\n\t\t   res.append(matrix[i][j])\n\t\t   count += 1\n\t\t   v[i][j] = True\n\t\t   if not (0 <= i + offset[way][0] < m) or not (0 <= j + offset[way][1] < n) or \\\n\t\t\t  v[i + offset[way][0]][j + offset[way][1]]:\n\t\t\t\t way = (way + 1) % 4\n\t\t   i += offset[way][0]\n\t\t   j += offset[way][1]\n\t    return res\n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    \n\t    m = len(matrix)\n\t    if m == 0:\n\t\t   return []\n\t    n = len(matrix[0])\n\t\n \n\t    visit = set()\n\t    result = []\n \n\t    pos = [0, 0]\n\t    visit.add(tuple(pos))\n\t    result.append(matrix[pos[0]][pos[1]])\n \n\t    while len(visit) < m*n:\n \n\t\t   for i in range(pos[1]+1, n):\n\t\t\t  \n\t\t\t  if (pos[0], i) in visit:\n\t\t\t\t break\n\t\t\t  pos[1] = i\n\t\t\t  visit.add(tuple(pos))\n\t\t\t  result.append(matrix[pos[0]][pos[1]])\n \n \n\t\t   for i in range(pos[0]+1, m):\n\t\t\t  \n\t\t\t  if (i, pos[1]) in visit:\n\t\t\t\t break\n\t\t\t  pos[0] = i\n\t\t\t  visit.add(tuple(pos))\n\t\t\t  result.append(matrix[pos[0]][pos[1]])\n \n\t\t   for i in range(pos[1]-1, -1, -1):\n\t\t\t  \n\t\t\t  if (pos[0], i) in visit:\n\t\t\t\t break\n \n\t\t\t  pos[1] = i\n\t\t\t  visit.add(tuple(pos))\n\t\t\t  result.append(matrix[pos[0]][pos[1]])\n \n\t\t   for i in range(pos[0]-1, -1, -1):\n \n\t\t\t  if (i, pos[1]) in visit:\n\t\t\t\t break\n \n\t\t\t  pos[0] = i\n\t\t\t  \n\t\t\t  visit.add(tuple(pos))\n\t\t\t  result.append(matrix[pos[0]][pos[1]])\n\t\t\t  \n\t    return result\n\t\t\t  \n\t    return result\n\t\t   \n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    output_arr = []\n\t\n\t    while matrix:\n\t\n\t\t   output_arr.extend(matrix.pop(0))\n\t    \n\t\t   tmp_arr = []\n\t\t   for i in zip(*matrix):\n\t\t\t  tmp_arr.append(list(i))\n\t    \n\t\t   matrix = tmp_arr[::-1]\n \n\t    return output_arr\n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    if not matrix:\n\t\t   return []\n\t    left = top = 0\n\t    right = len(matrix[0]) - 1\n\t    bottom = len(matrix) - 1\n \n\t    result = []\n\t    while left < right and top < bottom:\n\t\t   for i in range(left, right):\n\t\t\t  result.append(matrix[top][i])\n\t\t   for i in range(top, bottom):\n\t\t\t  result.append(matrix[i][right])\n\t\t   for i in range(right, left, -1):\n\t\t\t  result.append(matrix[bottom][i])\n\t\t   for i in range(bottom, top, -1):\n\t\t\t  result.append(matrix[i][left])\n\t\t   left += 1\n\t\t   right -= 1\n\t\t   top += 1\n\t\t   bottom -= 1\n\t    if left == right and top == bottom:\n\t\t   result.append(matrix[top][left])\n\t    elif left == right:\n\t\t   for i in range(top, bottom + 1):\n\t\t\t  result.append(matrix[i][left])\n\t    elif top == bottom:\n\t\t   for i in range(left, right + 1):\n\t\t\t  result.append(matrix[top][i])\n\t    return result\n", "class Solution:\n\tdef spiralOrder(self, matrix):\n\t    \"\"\"\n\t    :type matrix: List[List[int]]\n\t    :rtype: List[int]\n\t    \"\"\"\n\t    if len(matrix) == 0:\n\t\t   return []\n\t    if len(matrix) == 1:\n\t\t   return matrix[0]\n\t    if len(matrix[0]) == 1:\n\t\t   result = []\n\t\t   for m in matrix:\n\t\t\t  result.append(m[0])\n\t\t   return result\n\t    \n\t    \n\t    boxTop = -1\n\t    boxRight = len(matrix[0])\n\t    boxLeft = -1\n\t    boxBottom = len(matrix)\n\t    \n\t    \n\t    count = 0\n\t    direction = [0, 1]\n\t    ptr = [0, 0]\n\t    predict = [0, 0]\n\t    result = []\n\t    \n\t    while count < len(matrix) * len(matrix[0]):\n\t\t   count += 1\n\t\t   result.append(matrix[ptr[0]][ptr[1]])\n\t\t   ptr[0] += direction[0]\n\t\t   ptr[1] += direction[1]\n\t\t   \n\t\t   predict[0] = ptr[0] + direction[0]\n\t\t   predict[1] = ptr[1] + direction[1]\n\t\t   \n\t\t   \n\t\t   if direction == [0, 1] and predict[1] >= boxRight:\n\t\t\t  direction = [1, 0]\n\t\t\t  boxTop += 1\n\t\t   elif direction == [1,0] and predict[0] >= boxBottom:\n\t\t\t  direction = [0, -1]\n\t\t\t  boxRight -= 1\n\t\t   elif direction == [0, -1] and predict[1] <= boxLeft:\n\t\t\t  direction = [-1, 0]\n\t\t\t  boxBottom -= 1\n\t\t   elif direction == [-1, 0] and predict[0] <= boxTop:\n\t\t\t  direction = [0, 1]\n\t\t\t  boxLeft += 1\n\t\t   \n\t    return result\n"], "id": "id5378"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5378", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["given", 27], ["a", 27], ["matrix", 25], ["of", 25], ["m", 24], ["x", 24], ["n", 24], ["elements", 15], ["m", 15], ["rows", 2], ["n", 2], ["columns", 2], ["return", 2], ["all", 2], ["elements", 2], ["of", 2], ["the", 2], ["matrix", 2], ["in", 2], ["spiral", 2], ["order", 2], ["example", 3], ["1", 3], ["input", 10], ["1", 6], ["2", 6], ["3", 6], ["4", 6], ["5", 6], ["6", 6], ["7", 6], ["8", 5], ["9", 5], ["output", 2], ["1", 2], ["2", 2], ["3", 2], ["6", 2], ["9", 2], ["8", 2], ["7", 2], ["4", 2], ["5", 2], ["example", 4], ["2", 3], ["input", 109], ["1", 52], ["2", 8], ["3", 5], ["4", 5], ["5", 5], ["6", 5], ["7", 5], ["8", 5], ["9", 5], ["10", 5], ["11", 5], ["12", 5], ["output", 5], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["8", 0], ["12", 0], ["11", 0], ["10", 0], ["9", 0], ["5", 0], ["6", 0], ["7", 0], ["class", 0], ["solution", 0], ["def", 0], ["spiralorder", 0], ["self", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["list", 0], ["int", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7283950617283951, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.20595653278063508, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7634408602150538, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3377678215850259, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5925925925925926, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.20051440329218098, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6666666666666666, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3333333333333333, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["class", 0], ["solution", 0], ["def", 0], ["spiralorder", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["result", 0], ["if", 0], ["not", 0], ["matrix", 0], ["return", 0], ["result", 0], ["top", 0], ["left", 0], ["0", 0], ["bottom", 0], ["right", 0], ["len", 0], ["matrix", 0], ["1", 0], ["len", 0], ["matrix", 0], ["0", 0], ["1", 0], ["while", 0], ["top", 0], ["bottom", 0], ["and", 0], ["left", 0], ["right", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["left", 0], ["right", 0], ["result", 0], ["append", 0], ["matrix", 0], ["top", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["top", 0], ["bottom", 0], ["result", 0], ["append", 0], ["matrix", 0], ["i", 0], ["right", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["right", 0], ["left", 0], ["1", 0], ["result", 0], ["append", 0], ["matrix", 0], ["bottom", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["bottom", 0], ["top", 0], ["1", 0], ["result", 1], ["append", 1], ["matrix", 0], ["i", 0], ["left", 0], ["left", 0], ["1", 0], ["right", 0], ["1", 0], ["top", 0], ["1", 0], ["bottom", 0], ["1", 0], ["if", 0], ["left", 0], ["right", 0], ["and", 0], ["top", 0], ["bottom", 0], ["result", 0], ["append", 0], ["matrix", 0], ["left", 0], ["top", 0], ["if", 0], ["left", 0], ["right", 0], ["and", 0], ["top", 0], ["bottom", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["top", 0], ["bottom", 0], ["1", 0], ["result", 0], ["append", 0], ["matrix", 0], ["i", 0], ["left", 0], ["if", 0], ["left", 0], ["right", 0], ["and", 0], ["top", 0], ["bottom", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["left", 0], ["right", 0], ["1", 0], ["result", 0], ["append", 0], ["matrix", 0], ["top", 0], ["i", 0], ["return", 0], ["result", 0], ["class", 0], ["solution", 0], ["def", 1], ["spiralorder", 1], ["self", 1], ["matrix", 1], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["if", 0], ["not", 0], ["matrix", 0], ["return", 0], ["def", 0], ["layer", 0], ["width", 0], ["height", 0], ["top", 0], ["left", 0], ["if", 0], ["not", 0], ["width", 0], ["0", 0], ["and", 0], ["height", 0], ["0", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["left", 0], ["left", 0], ["width", 0], ["yield", 0], ["matrix", 0], ["top", 0], ["i", 0], ["if", 0], ["height", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["top", 0], ["1", 0], ["top", 0], ["height", 0], ["yield", 0], ["matrix", 0], ["i", 0], ["left", 0], ["width", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["left", 0], ["width", 0], ["2", 0], ["left", 0], ["1", 0], ["1", 0], ["yield", 0], ["matrix", 0], ["top", 0], ["height", 0], ["1", 0], ["i", 0], ["if", 0], ["width", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["top", 0], ["height", 0], ["2", 0], ["top", 0], ["1", 0], ["yield", 0], ["matrix", 0], ["i", 0], ["left", 0], ["yield", 0], ["from", 0], ["layer", 0], ["width", 0], ["2", 0], ["height", 0], ["2", 0], ["top", 0], ["1", 0], ["left", 0], ["1", 0], ["return", 0], ["list", 0], ["layer", 0], ["len", 0], ["matrix", 0], ["0", 0], ["len", 0], ["matrix", 0], ["0", 0], ["0", 0], ["class", 0], ["solution", 0], ["def", 1], ["spiralorder", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["m", 0], ["matrix", 0], ["ml", 0], ["len", 0], ["m", 0], ["if", 0], ["ml", 0], ["0", 0], ["return", 0], ["nl", 0], ["len", 0], ["m", 0], ["0", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["0", 0], ["ml", 0], ["1", 0], ["0", 0], ["nl", 0], ["1", 0], ["ans", 0], ["while", 0], ["ns", 0], ["ne", 0], ["or", 0], ["ms", 0], ["me", 0], ["print", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["if", 0], ["ms", 0], ["me", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["ns", 0], ["ne", 0], ["1", 0], ["ans", 0], ["append", 0], ["m", 0], ["ms", 0], ["j", 0], ["ms", 0], ["1", 0], ["print", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["if", 0], ["ne", 0], ["ns", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["ms", 0], ["me", 0], ["1", 0], ["ans", 0], ["append", 0], ["m", 0], ["j", 0], ["ne", 0], ["ne", 0], ["1", 0], ["print", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["if", 0], ["me", 0], ["ms", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["ne", 0], ["ns", 0], ["1", 0], ["1", 0], ["ans", 0], ["append", 0], ["m", 0], ["me", 0], ["j", 0], ["me", 0], ["1", 0], ["print", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["if", 0], ["ns", 0], ["ne", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["me", 0], ["ms", 0], ["1", 0], ["1", 0], ["ans", 0], ["append", 0], ["m", 0], ["j", 0], ["ns", 0], ["ns", 0], ["1", 0], ["print", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["return", 0], ["ans", 0], ["class", 0], ["solution", 0], ["def", 1], ["spiralorder", 1], ["self", 1], ["matrix", 1], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["if", 0], ["not", 0], ["matrix", 0], ["return", 0], ["matrix", 0], ["res", 0], ["row", 0], ["len", 0], ["matrix", 0], ["col", 0], ["len", 0], ["matrix", 0], ["0", 0], ["left", 0], ["0", 0], ["right", 0], ["col", 0], ["1", 0], ["down", 0], ["row", 0], ["1", 0], ["up", 0], ["0", 0], ["direction", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["direction", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["left", 0], ["right", 0], ["1", 0], ["res", 0], ["append", 0], ["matrix", 0], ["up", 0], ["i", 0], ["up", 0], ["1", 0], ["if", 0], ["direction", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["up", 0], ["down", 0], ["1", 0], ["res", 0], ["append", 0], ["matrix", 0], ["i", 0], ["right", 0], ["right", 0], ["1", 0], ["if", 0], ["direction", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["reversed", 0], ["range", 0], ["left", 0], ["right", 0], ["1", 0], ["res", 0], ["append", 0], ["matrix", 0], ["down", 0], ["i", 0], ["down", 0], ["1", 0], ["if", 0], ["direction", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["reversed", 0], ["range", 0], ["up", 0], ["down", 0], ["1", 0], ["res", 0], ["append", 0], ["matrix", 0], ["i", 0], ["left", 0], ["left", 0], ["1", 0], ["direction", 0], ["direction", 0], ["1", 0], ["4", 0], ["if", 0], ["left", 0], ["right", 0], ["or", 0], ["up", 0], ["down", 0], ["return", 0], ["res", 0], ["class", 0], ["solution", 0], ["def", 0], ["spiralorder", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["res", 0], ["if", 0], ["not", 0], ["matrix", 0], ["return", 0], ["res", 0], ["left", 0], ["right", 0], ["top", 0], ["bottom", 0], ["0", 0], ["len", 0], ["matrix", 0], ["0", 0], ["1", 0], ["0", 0], ["len", 0], ["matrix", 0], ["1", 0], ["while", 0], ["left", 0], ["right", 0], ["and", 0], ["top", 0], ["bottom", 0], ["res", 0], ["matrix", 0], ["top", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["left", 0], ["right", 0], ["1", 0], ["res", 0], ["matrix", 0], ["i", 0], ["right", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["top", 0], ["1", 0], ["bottom", 0], ["res", 0], ["matrix", 0], ["bottom", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["right", 0], ["left", 0], ["1", 0], ["1", 0], ["if", 0], ["top", 0], ["bottom", 0], ["res", 0], ["matrix", 0], ["i", 0], ["left", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["bottom", 0], ["1", 0], ["top", 0], ["1", 0], ["if", 0], ["left", 0], ["right", 0], ["left", 0], ["1", 0], ["right", 0], ["1", 0], ["top", 0], ["1", 0], ["bottom", 0], ["1", 0], ["return", 0], ["res", 0], ["class", 0], ["solution", 0], ["def", 1], ["spiralorder", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["if", 0], ["len", 0], ["matrix", 0], ["0", 0], ["return", 0], ["level", 0], ["0", 0], ["r", 0], ["while", 0], ["len", 0], ["r", 0], ["len", 0], ["matrix", 0], ["len", 0], ["matrix", 0], ["0", 0], ["if", 0], ["level", 0], ["4", 0], ["0", 0], ["r", 0], ["matrix", 0], ["level", 0], ["4", 0], ["level", 0], ["4", 0], ["len", 0], ["matrix", 0], ["0", 0], ["level", 0], ["4", 0], ["elif", 0], ["level", 0], ["4", 0], ["1", 0], ["side", 0], ["index", 0], ["len", 0], ["matrix", 0], ["0", 0], ["level", 0], ["4", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["level", 0], ["4", 0], ["1", 0], ["len", 0], ["matrix", 0], ["level", 0], ["4", 0], ["r", 0], ["append", 0], ["matrix", 0], ["i", 0], ["side", 0], ["index", 0], ["elif", 0], ["level", 0], ["4", 0], ["2", 0], ["r", 0], ["matrix", 0], ["len", 0], ["matrix", 0], ["1", 0], ["level", 0], ["4", 0], ["level", 0], ["4", 0], ["len", 0], ["matrix", 0], ["0", 0], ["level", 0], ["4", 0], ["1", 0], ["1", 0], ["elif", 0], ["level", 0], ["4", 0], ["3", 0], ["side", 0], ["index", 0], ["level", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["matrix", 0], ["1", 0], ["level", 0], ["4", 0], ["1", 0], ["level", 0], ["4", 0], ["1", 0], ["r", 0], ["append", 0], ["matrix", 0], ["i", 0], ["side", 0], ["index", 0], ["level", 0], ["1", 0], ["return", 0], ["r", 0], ["class", 0], ["solution", 0], ["def", 0], ["spiralorder", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["ans", 0], ["if", 0], ["len", 0], ["matrix", 0], ["is", 0], ["0", 0], ["return", 0], ["ans", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["npa", 0], ["np", 0], ["array", 0], ["matrix", 0], ["dtype", 0], ["int", 0], ["r", 0], ["s", 0], ["c", 0], ["s", 0], ["0", 0], ["r", 0], ["e", 0], ["len", 0], ["matrix", 0], ["c", 0], ["e", 0], ["len", 0], ["matrix", 0], ["0", 0], ["go", 0], ["row", 0], ["true", 0], ["forward", 0], ["true", 0], ["row", 0], ["index", 0], ["r", 0], ["s", 0], ["col", 0], ["index", 0], ["c", 0], ["e", 0], ["1", 0], ["while", 0], ["r", 0], ["s", 0], ["r", 0], ["e", 0], ["and", 0], ["c", 0], ["s", 0], ["c", 0], ["e", 0], ["if", 0], ["go", 0], ["row", 0], ["traverse", 0], ["row", 0], ["s", 0], ["npa", 0], ["row", 0], ["index", 0], ["c", 0], ["s", 0], ["c", 0], ["e", 0], ["tolist", 0], ["if", 0], ["forward", 0], ["r", 0], ["s", 0], ["1", 0], ["row", 0], ["index", 0], ["r", 0], ["e", 0], ["1", 0], ["else", 0], ["r", 0], ["e", 0], ["1", 0], ["row", 0], ["index", 0], ["r", 0], ["s", 0], ["s", 0], ["reverse", 0], ["ans", 0], ["extend", 0], ["s", 0], ["else", 0], ["traverse", 0], ["col", 0], ["s", 0], ["npa", 0], ["r", 0], ["s", 0], ["r", 0], ["e", 0], ["col", 0], ["index", 0], ["tolist", 0], ["if", 0], ["forward", 0], ["c", 0], ["e", 0], ["1", 0], ["col", 0], ["index", 0], ["c", 0], ["s", 0], ["else", 0], ["c", 0], ["s", 0], ["1", 0], ["col", 0], ["index", 0], ["c", 0], ["e", 0], ["1", 0], ["s", 0], ["reverse", 0], ["ans", 0], ["extend", 0], ["s", 0], ["forward", 0], ["not", 0], ["forward", 0], ["go", 0], ["row", 0], ["not", 0], ["go", 0], ["row", 0], ["return", 0], ["ans", 0], ["class", 0], ["solution", 0], ["def", 1], ["spiralorder", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["m", 0], ["matrix", 0], ["ml", 0], ["len", 0], ["m", 0], ["if", 0], ["ml", 0], ["0", 0], ["return", 0], ["nl", 0], ["len", 0], ["m", 0], ["0", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["0", 0], ["ml", 0], ["1", 0], ["0", 0], ["nl", 0], ["1", 0], ["ans", 0], ["while", 0], ["ns", 0], ["ne", 0], ["or", 0], ["ms", 0], ["me", 0], ["print", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["if", 0], ["ms", 0], ["me", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["ns", 0], ["ne", 0], ["1", 0], ["ans", 0], ["append", 0], ["m", 0], ["ms", 0], ["j", 0], ["ms", 0], ["1", 0], ["print", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["if", 0], ["ne", 0], ["ns", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["ms", 0], ["me", 0], ["1", 0], ["ans", 0], ["append", 0], ["m", 0], ["j", 0], ["ne", 0], ["ne", 0], ["1", 0], ["print", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["if", 0], ["me", 0], ["ms", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["ne", 0], ["ns", 0], ["1", 0], ["1", 0], ["ans", 0], ["append", 0], ["m", 0], ["me", 0], ["j", 0], ["me", 0], ["1", 0], ["print", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["if", 0], ["ns", 0], ["ne", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["me", 0], ["ms", 0], ["1", 0], ["1", 0], ["ans", 0], ["append", 0], ["m", 0], ["j", 0], ["ns", 0], ["ns", 0], ["1", 0], ["print", 0], ["ms", 0], ["me", 0], ["ns", 0], ["ne", 0], ["return", 0], ["ans", 0], ["class", 0], ["solution", 0], ["def", 0], ["spiralorder", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["0", 0], ["is", 0], ["right", 0], ["1", 0], ["is", 0], ["down", 0], ["2", 0], ["is", 0], ["left", 0], ["3", 0], ["is", 0], ["up", 0], ["state", 0], ["0", 0], ["next", 0], ["direction", 0], ["1", 0], ["2", 0], ["3", 0], ["0", 0], ["r", 0], ["while", 0], ["len", 0], ["matrix", 0], ["0", 0], ["if", 0], ["state", 0], ["0", 0], ["r", 0], ["matrix", 0], ["0", 0], ["matrix", 0], ["matrix", 0], ["1", 0], ["state", 0], ["next", 0], ["direction", 0], ["state", 0], ["elif", 0], ["state", 0], ["1", 0], ["r", 0], ["m", 0], ["len", 0], ["matrix", 0], ["0", 0], ["1", 0], ["for", 0], ["m", 0], ["in", 0], ["matrix", 0], ["matrix", 0], ["m", 0], ["len", 0], ["matrix", 0], ["0", 0], ["1", 0], ["for", 0], ["m", 0], ["in", 0], ["matrix", 0], ["state", 0], ["2", 0], ["elif", 0], ["state", 0], ["2", 0], ["r", 0], ["reversed", 0], ["matrix", 0], ["1", 0], ["matrix", 0], ["matrix", 0], ["1", 0], ["state", 0], ["3", 0], ["elif", 0], ["state", 0], ["3", 0], ["r", 0], ["matrix", 0], ["j", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["matrix", 0], ["1", 0], ["1", 0], ["1", 0], ["matrix", 0], ["m", 0], ["1", 0], ["for", 0], ["m", 0], ["in", 0], ["matrix", 0], ["state", 0], ["0", 0], ["covers", 0], ["the", 0], ["case", 0], ["of", 0], ["a", 0], ["list", 0], ["of", 0], ["empty", 0], ["lists", 0], ["eg", 0], ["if", 0], ["len", 0], ["matrix", 0], ["1", 0], ["and", 0], ["not", 0], ["matrix", 0], ["0", 0], ["matrix", 0], ["return", 0], ["r", 0], ["class", 0], ["solution", 0], ["def", 1], ["spiralorder", 1], ["self", 1], ["matrix", 1], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["if", 0], ["not", 0], ["matrix", 0], ["return", 0], ["matrix", 0], ["ans", 0], ["matrix", 0], ["0", 0], ["m", 0], ["len", 0], ["matrix", 0], ["n", 0], ["len", 0], ["matrix", 0], ["0", 0], ["row", 0], ["m", 0], ["column", 0], ["m", 0], ["n", 0], ["1", 0], ["m", 0], ["1", 0], ["row", 0], ["dir", 0], ["column", 0], ["dir", 0], ["1", 0], ["1", 0], ["i0", 0], ["j0", 0], ["0", 0], ["n", 0], ["1", 0], ["while", 0], ["column", 0], ["m", 0], ["0", 0], ["ans", 0], ["extend", 0], ["matrix", 0], ["i0", 0], ["i", 0], ["column", 0], ["dir", 0], ["j0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["column", 0], ["m", 0], ["1", 0], ["i0", 0], ["column", 0], ["m", 0], ["column", 0], ["dir", 0], ["column", 0], ["m", 0], ["1", 0], ["column", 0], ["dir", 0], ["1", 0], ["if", 0], ["row", 0], ["m", 0], ["0", 0], ["return", 0], ["ans", 0], ["else", 0], ["ans", 0], ["extend", 0], ["matrix", 0], ["i0", 0], ["j0", 0], ["row", 0], ["dir", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["row", 0], ["m", 0], ["1", 0], ["j0", 0], ["row", 0], ["m", 0], ["row", 0], ["dir", 0], ["row", 0], ["m", 0], ["1", 0], ["row", 0], ["dir", 0], ["1", 0], ["return", 0], ["ans", 0], ["class", 0], ["solution", 0], ["def", 0], ["spiralorder", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["o", 0], ["n", 0], ["2", 0], ["time", 0], ["o", 0], ["1", 0], ["space", 0], ["if", 0], ["not", 0], ["matrix", 0], ["return", 0], ["ans", 0], ["rowsize", 0], ["len", 0], ["matrix", 0], ["colsize", 0], ["len", 0], ["matrix", 0], ["0", 0], ["rowstart", 0], ["0", 0], ["colstart", 0], ["0", 0], ["rowend", 0], ["rowsize", 0], ["1", 0], ["colend", 0], ["colsize", 0], ["1", 0], ["while", 0], ["rowstart", 0], ["rowend", 0], ["and", 0], ["colstart", 0], ["colend", 0], ["for", 0], ["colindex", 0], ["in", 0], ["range", 0], ["colstart", 0], ["colend", 0], ["1", 0], ["ans", 0], ["append", 0], ["matrix", 0], ["rowstart", 0], ["colindex", 0], ["rowstart", 0], ["1", 0], ["for", 0], ["rowindex", 0], ["in", 0], ["range", 0], ["rowstart", 0], ["rowend", 0], ["1", 0], ["ans", 0], ["append", 0], ["matrix", 0], ["rowindex", 0], ["colend", 0], ["colend", 0], ["1", 0], ["if", 0], ["rowstart", 0], ["rowend", 0], ["or", 0], ["colstart", 0], ["colend", 0], ["break", 0], ["for", 0], ["colindex", 0], ["in", 0], ["range", 0], ["colend", 0], ["colstart", 0], ["1", 0], ["1", 0], ["ans", 0], ["append", 0], ["matrix", 0], ["rowend", 0], ["colindex", 0], ["rowend", 0], ["1", 0], ["for", 0], ["rowindex", 0], ["in", 0], ["range", 0], ["rowend", 0], ["rowstart", 0], ["1", 0], ["1", 0], ["ans", 0], ["append", 0], ["matrix", 0], ["rowindex", 0], ["colstart", 0], ["colstart", 0], ["1", 0], ["return", 0], ["ans", 0], ["class", 0], ["solution", 0], ["def", 1], ["spiralorder", 1], ["self", 1], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["if", 0], ["not", 0], ["matrix", 0], ["or", 0], ["not", 0], ["matrix", 0], ["0", 0], ["return", 0], ["v", 0], ["false", 0], ["len", 0], ["matrix", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["len", 0], ["matrix", 0], ["res", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["m", 0], ["len", 0], ["matrix", 0], ["n", 0], ["len", 0], ["matrix", 0], ["0", 0], ["count", 0], ["0", 0], ["dest", 0], ["m", 0], ["n", 0], ["way", 0], ["0", 0], ["0", 0], ["1v", 0], ["2", 0], ["3", 0], ["offset", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["while", 0], ["count", 0], ["dest", 0], ["res", 0], ["append", 0], ["matrix", 0], ["i", 0], ["j", 0], ["count", 0], ["1", 0], ["v", 0], ["i", 0], ["j", 0], ["true", 0], ["if", 0], ["not", 0], ["0", 0], ["i", 0], ["offset", 0], ["way", 0], ["0", 0], ["m", 0], ["or", 0], ["not", 0], ["0", 0], ["j", 0], ["offset", 0], ["way", 0], ["1", 0], ["n", 0], ["or", 0], ["v", 0], ["i", 0], ["offset", 0], ["way", 0], ["0", 0], ["j", 0], ["offset", 0], ["way", 0], ["1", 0], ["way", 0], ["way", 0], ["1", 0], ["4", 0], ["i", 0], ["offset", 0], ["way", 0], ["0", 0], ["j", 0], ["offset", 0], ["way", 0], ["1", 0], ["return", 0], ["res", 0], ["class", 0], ["solution", 0], ["def", 1], ["spiralorder", 1], ["self", 1], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 1], ["int", 0], ["m", 0], ["len", 0], ["matrix", 0], ["if", 0], ["m", 0], ["0", 0], ["return", 0], ["n", 0], ["len", 0], ["matrix", 0], ["0", 0], ["visit", 0], ["set", 0], ["result", 0], ["pos", 0], ["0", 0], ["0", 0], ["visit", 0], ["add", 0], ["tuple", 0], ["pos", 0], ["result", 0], ["append", 0], ["matrix", 0], ["pos", 0], ["0", 0], ["pos", 0], ["1", 0], ["while", 0], ["len", 0], ["visit", 0], ["m", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["pos", 0], ["1", 0], ["1", 0], ["n", 0], ["if", 0], ["pos", 0], ["0", 0], ["i", 0], ["in", 0], ["visit", 0], ["break", 0], ["pos", 0], ["1", 0], ["i", 0], ["visit", 0], ["add", 0], ["tuple", 0], ["pos", 0], ["result", 0], ["append", 0], ["matrix", 0], ["pos", 0], ["0", 0], ["pos", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["pos", 0], ["0", 0], ["1", 0], ["m", 0], ["if", 0], ["i", 0], ["pos", 0], ["1", 0], ["in", 0], ["visit", 0], ["break", 0], ["pos", 0], ["0", 0], ["i", 0], ["visit", 0], ["add", 0], ["tuple", 0], ["pos", 0], ["result", 0], ["append", 0], ["matrix", 0], ["pos", 0], ["0", 0], ["pos", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["pos", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["pos", 0], ["0", 0], ["i", 0], ["in", 0], ["visit", 0], ["break", 0], ["pos", 0], ["1", 0], ["i", 0], ["visit", 0], ["add", 0], ["tuple", 0], ["pos", 0], ["result", 0], ["append", 0], ["matrix", 0], ["pos", 0], ["0", 0], ["pos", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["pos", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["i", 0], ["pos", 0], ["1", 0], ["in", 0], ["visit", 0], ["break", 0], ["pos", 0], ["0", 0], ["i", 0], ["visit", 0], ["add", 0], ["tuple", 0], ["pos", 0], ["result", 0], ["append", 0], ["matrix", 0], ["pos", 0], ["0", 0], ["pos", 0], ["1", 0], ["return", 0], ["result", 0], ["return", 0], ["result", 0], ["class", 0], ["solution", 0], ["def", 0], ["spiralorder", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["output", 0], ["arr", 0], ["while", 0], ["matrix", 0], ["output", 0], ["arr", 0], ["extend", 0], ["matrix", 0], ["pop", 0], ["0", 0], ["tmp", 0], ["arr", 0], ["for", 0], ["i", 0], ["in", 0], ["zip", 0], ["matrix", 0], ["tmp", 0], ["arr", 0], ["append", 0], ["list", 0], ["i", 0], ["matrix", 0], ["tmp", 0], ["arr", 0], ["1", 0], ["return", 0], ["output", 0], ["arr", 0], ["class", 0], ["solution", 0], ["def", 1], ["spiralorder", 1], ["self", 1], ["matrix", 1], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["if", 0], ["not", 0], ["matrix", 0], ["return", 0], ["left", 0], ["top", 0], ["0", 0], ["right", 0], ["len", 0], ["matrix", 0], ["0", 0], ["1", 0], ["bottom", 0], ["len", 0], ["matrix", 0], ["1", 0], ["result", 0], ["while", 0], ["left", 0], ["right", 0], ["and", 0], ["top", 0], ["bottom", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["left", 0], ["right", 0], ["result", 0], ["append", 0], ["matrix", 0], ["top", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["top", 0], ["bottom", 0], ["result", 0], ["append", 0], ["matrix", 0], ["i", 0], ["right", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["right", 0], ["left", 0], ["1", 0], ["result", 0], ["append", 0], ["matrix", 0], ["bottom", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["bottom", 0], ["top", 0], ["1", 0], ["result", 1], ["append", 1], ["matrix", 0], ["i", 0], ["left", 0], ["left", 0], ["1", 0], ["right", 0], ["1", 0], ["top", 0], ["1", 0], ["bottom", 0], ["1", 0], ["if", 0], ["left", 0], ["right", 0], ["and", 0], ["top", 0], ["bottom", 0], ["result", 0], ["append", 0], ["matrix", 0], ["top", 0], ["left", 0], ["elif", 0], ["left", 0], ["right", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["top", 0], ["bottom", 0], ["1", 0], ["result", 0], ["append", 0], ["matrix", 0], ["i", 0], ["left", 0], ["elif", 0], ["top", 0], ["bottom", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["left", 0], ["right", 0], ["1", 0], ["result", 0], ["append", 0], ["matrix", 0], ["top", 0], ["i", 0], ["return", 0], ["result", 0], ["class", 0], ["solution", 0], ["def", 1], ["spiralorder", 0], ["self", 0], ["matrix", 0], ["type", 0], ["matrix", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["list", 0], ["int", 0], ["if", 0], ["len", 0], ["matrix", 0], ["0", 0], ["return", 0], ["if", 0], ["len", 0], ["matrix", 0], ["1", 0], ["return", 0], ["matrix", 0], ["0", 0], ["if", 0], ["len", 0], ["matrix", 0], ["0", 0], ["1", 0], ["result", 0], ["for", 0], ["m", 0], ["in", 0], ["matrix", 0], ["result", 0], ["append", 0], ["m", 0], ["0", 0], ["return", 0], ["result", 0], ["boxtop", 0], ["1", 0], ["boxright", 0], ["len", 0], ["matrix", 0], ["0", 0], ["boxleft", 0], ["1", 0], ["boxbottom", 0], ["len", 0], ["matrix", 0], ["count", 0], ["0", 0], ["direction", 0], ["0", 0], ["1", 0], ["ptr", 0], ["0", 0], ["0", 0], ["predict", 0], ["0", 0], ["0", 0], ["result", 0], ["while", 0], ["count", 0], ["len", 0], ["matrix", 0], ["len", 0], ["matrix", 0], ["0", 0], ["count", 0], ["1", 0], ["result", 0], ["append", 0], ["matrix", 0], ["ptr", 0], ["0", 0], ["ptr", 0], ["1", 0], ["ptr", 0], ["0", 0], ["direction", 0], ["0", 0], ["ptr", 0], ["1", 0], ["direction", 0], ["1", 0], ["predict", 0], ["0", 0], ["ptr", 0], ["0", 0], ["direction", 0], ["0", 0], ["predict", 0], ["1", 0], ["ptr", 0], ["1", 0], ["direction", 0], ["1", 0], ["if", 0], ["direction", 0], ["0", 0], ["1", 0], ["and", 0], ["predict", 0], ["1", 0], ["boxright", 0], ["direction", 0], ["1", 0], ["0", 0], ["boxtop", 0], ["1", 0], ["elif", 0], ["direction", 0], ["1", 0], ["0", 0], ["and", 0], ["predict", 0], ["0", 0], ["boxbottom", 0], ["direction", 0], ["0", 0], ["1", 0], ["boxright", 0], ["1", 0], ["elif", 0], ["direction", 0], ["0", 0], ["1", 0], ["and", 0], ["predict", 0], ["1", 0], ["boxleft", 0], ["direction", 0], ["1", 0], ["0", 0], ["boxbottom", 0], ["1", 0], ["elif", 0], ["direction", 0], ["1", 0], ["0", 0], ["and", 0], ["predict", 0], ["0", 0], ["boxtop", 0], ["direction", 0], ["0", 0], ["1", 0], ["boxleft", 0], ["1", 0], ["return", 0], ["result", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.015415216310293387, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.015415216310293387, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.08996539792387544, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08996539792387544, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.015415216310293387, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.015415216310293387, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.08996539792387544, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08996539792387544, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given the array $a$ consisting of $n$ positive (greater than zero) integers.\n\nIn one move, you can choose two indices $i$ and $j$ ($i \\ne j$) such that the absolute difference between $a_i$ and $a_j$ is no more than one ($|a_i - a_j| \\le 1$) and remove the smallest of these two elements. If two elements are equal, you can remove any of them (but exactly one).\n\nYour task is to find if it is possible to obtain the array consisting of only one element using several (possibly, zero) such moves or not.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 50$) — the length of $a$. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nFor each test case, print the answer: \"YES\" if it is possible to obtain the array consisting of only one element using several (possibly, zero) moves described in the problem statement, or \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\nOutput\nYES\nYES\nNO\nNO\nYES\n\n\n\n-----Note-----\n\nIn the first test case of the example, we can perform the following sequence of moves:  choose $i=1$ and $j=3$ and remove $a_i$ (so $a$ becomes $[2; 2]$);  choose $i=1$ and $j=2$ and remove $a_j$ (so $a$ becomes $[2]$). \n\nIn the second test case of the example, we can choose any possible $i$ and $j$ any move and it doesn't matter which element we remove.\n\nIn the third test case of the example, there is no way to get rid of $2$ and $4$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\tn = II()\n\ta = sorted(LI())\n\tboo = True\n\tfor i in range(1,n):\n\t\tif a[i]-a[i-1]>1:\n\t\t\tboo = False\n\t\t\tbreak\n\tprint(\"YES\" if boo else \"NO\")\n", "import sys\ninput = sys.stdin.readline\nfor nt in range(int(input())):\n\tn = int(input())\n\ta = list(map(int,input().split()))\n\ta.sort()\n\tflag = \"YES\"\n\tfor i in range(1,n):\n\t\tif a[i]-a[i-1]>=2:\n\t\t\tflag = \"NO\"\n\t\t\tbreak\n\tprint (flag)\n", "for _ in range(int(input())):\n\tn=int(input())\n\ts=sorted(map(int,input().split()))\n\tans='YES'\n\tfor i in range(1,n):\n\t\tif s[i]-s[i-1]>1:ans='NO';break\n\tprint(ans)\n", "\"\"\"\n\tpppppppppppppppppppp\n                         ppppp  ppppppppppppppppppp\n                      ppppppp    ppppppppppppppppppppp\n                      pppppppp  pppppppppppppppppppppp\n                      pppppppppppppppppppppppppppppppp\n\t  pppppppppppppppppppppppp\n       ppppppppppppppppppppppppppppppppppppppppppppppp  pppppppppppppppppppp\n      pppppppppppppppppppppppppppppppppppppppppppppppp  ppppppppppppppppppppp\n     ppppppppppppppppppppppppppppppppppppppppppppppppp  pppppppppppppppppppppp\n    ppppppppppppppppppppppppppppppppppppppppppppppp    pppppppppppppppppppppppp\n   pppppppppppppppppppppppppppppppppppppppppppppp     pppppppppppppppppppppppppp\n  ppppppppppppppppppppppppppppppppppppppppppppp      pppppppppppppppppppppppppppp\n  pppppppppppppppppppppppppppppppp               pppppppppppppppppppppppppppppppp\n  pppppppppppppppppppppppppppp     pppppppppppppppppppppppppppppppppppppppppppppp\n  ppppppppppppppppppppppppppp    pppppppppppppppppppppppppppppppppppppppppppppppp\n    pppppppppppppppppppppppp  pppppppppppppppppppppppppppppppppppppppppppppppppp\n     ppppppppppppppppppppppp  ppppppppppppppppppppppppppppppppppppppppppppppppp\n      pppppppppppppppppppppp  ppppppppppppppppppppppppppppppppppppppppppppppp\n       ppppppppppppppppppppp  ppppppppppppppppppppppppppppppppppppppppppppp\n\t  pppppppppppppppppppppppp\n\t  pppppppppppppppppppppppppppppppp\n\t  pppppppppppppppppppppp  pppppppp\n\t  ppppppppppppppppppppp    ppppppp\n\t     ppppppppppppppppppp  ppppp\n\t        pppppppppppppppppppp\n\"\"\"\n\n\nimport sys\nfrom functools import lru_cache, cmp_to_key\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict as dd, deque, Counter as C\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom time import perf_counter\nfrom fractions import Fraction\nfrom decimal import Decimal\n# sys.setrecursionlimit(pow(10, 6))\n# sys.stdin = open(\"input.txt\", \"r\")\n# sys.stdout = open(\"output.txt\", \"w\")\nmod = pow(10, 9) + 7\nmod2 = 998244353\ndef data(): return sys.stdin.readline().strip()\ndef out(var, end=\"\\n\"): sys.stdout.write(str(var)+end)\ndef outa(*var, end=\"\\n\"): sys.stdout.write(' '.join(map(str, var)) + end)\ndef l(): return list(sp())\ndef sl(): return list(ssp())\ndef sp(): return list(map(int, data().split()))\ndef ssp(): return list(map(str, data().split()))\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\n\n\nfor _ in range(int(data())):\n    n = int(data())\n    arr = l()\n    r = True\n    arr.sort()\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > 1:\n            r = False\n            break\n    out((\"YES\", \"NO\")[r == False])\n", "for _ in range(int(input())):\n\tam  = int(input())\n\tarr = list(map(int,input().split()))\n\tfl = True\n\tarr.sort()\n\tfor i in range(am-1):\n\t\tif arr[i+1]-arr[i] > 1:\n\t\t\tfl = False\n\t\t\tbreak\n\tif fl:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "t = int(input())\n\nfor _ in range(t):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\t\n\ts = set(a)\n\tif len(s) == max(s) - min(s) + 1:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "# Author: S Mahesh Raju\n# Username: maheshraju2020\n# Date: 05/08/2020\n\nfrom sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\nii1 = lambda: int(stdin.readline().strip())\nis1 = lambda: stdin.readline().strip()\niia = lambda: list(map(int, stdin.readline().strip().split()))\nisa = lambda: stdin.readline().strip().split()\nsetrecursionlimit(100000)\nmod = 1000000007\n\ntc = ii1()\nfor _ in range(tc):\n\tn = ii1()\n\tarr = sorted(iia())\n\tfor i in range(1, n):\n\t\tif arr[i] - arr[i - 1] > 1:\n\t\t\tprint('NO')\n\t\t\tbreak\n\telse:\n\t\tprint('YES')\n\t\t\t\n", "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n\tn=int(input())\n\tL=list(map(int,input().split()))\n\tL.sort()\n\tfor i in range(n-1):\n\t\tif L[i+1]-L[i]>1:\n\t\t\tprint('NO')\n\t\t\tbreak\n\telse:\n\t\tprint('YES')\n", "for _ in range(int(input())):\n\tn = int(input())\n\tarr = list(map(int, input().split()))\n\tarr.sort()\n\tflag = 0\n\tfor i in range(n - 1):\n\t\tif arr[i + 1] - arr[i] > 1:\n\t\t\tflag = 1\n\t\t\tbreak\n\tif flag:\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"YES\")\n", "for _ in range(int(input())):\n\tn = int(input())\n\tlst = list(map(int, input().split()))\n\tlst.sort()\n\tans = \"YES\"\n\tfor i in range(n-1):\n\t\tif lst[i+1]-lst[i]>1:\n\t\t\tans = \"NO\"\n\t\t\tbreak\n\tprint(ans)\n", "import math\n\nT = int(input())\n\nfor i in range(T):\n\tn = int(input())\n\t#n,k = map(int, input().split())\n\ta = list(map(int,input().split()))\n\t#a = input()\n\td = False\n\t\n\ta.sort()\n\n\tfor i in range(1,n):\n\t\tif a[i]-a[i-1]>1:\n\t\t\tprint('NO')\n\t\t\td = True\n\t\t\tbreak\n\t\n\tif not d:\n\t\tprint('YES')\n\t\n", "from sys import stdin,stdout\nimport math\nfrom collections import Counter,defaultdict\nLI=lambda:list(map(int,input().split()))\nMAP=lambda:list(map(int,input().split()))\nIN=lambda:int(input())\nS=lambda:input()\n\ndef case():\n\tn=IN()\n\ta=sorted(LI())\n\tfor i in range(n-1):\n\t\tif a[i+1]-a[i]>=2:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\tprint(\"YES\")\nfor _ in range(IN()):\n\tcase()\n\t\t\t\t\n", "import math\nt = int(input())\nfor g in range(t):\n\tn = int(input())\n\tA = list(map(int,input().split()))\n\tA.sort()\n\tans = \"YES\"\n\tfor i in range(1,n):\n\t\tif(A[i]-A[i-1]>=2):\n\t\t\tans = \"NO\"\n\t\t\tbreak\n\tprint(ans)\n", "ans = []\nfor _ in range(int(input())):\n\tn = int(input())\n\tu = list(map(int, input().split()))\n\tu.sort()\n\tfor i in range(1, n):\n\t\tif u[i] - u[i - 1] > 1:\n\t\t\tprint('NO')\n\t\t\tbreak\n\telse:\n\t\tprint('YES')\n", "#!/usr/bin/env python3\nimport os\nfrom sys import stdin, stdout\n\n\ndef solve(tc):\n\tn = int(stdin.readline().strip())\n\tseq = list(map(int, stdin.readline().split()))\n\tseq = sorted(seq)\n\n\tbase = seq[0]\n\tfor i in range(1,n):\n\t\tif seq[i]-base>1:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\tbase = seq[i]\n\tprint(\"YES\")\n\n\n\ntcs = 1\ntcs = int(stdin.readline().strip())\ntc = 1\nwhile tc <= tcs:\n\tsolve(tc)\n\ttc += 1\n", "def solve():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\ta.sort()\n\tfor i in range(n - 1):\n\t\tif abs(a[i + 1] - a[i]) > 1:\n\t\t\tprint('NO')\n\t\t\treturn\n\tprint('YES')\n\nt = int(input())\nfor _ in range(t):\n\tsolve()\n", "from sys import stdin, stdout  \n \nt=int(stdin.readline())\nfor _ in range(t):\n\tn=int(stdin.readline() )\n\t#n,x=(map(int, stdin.readline().strip().split()))\n\tarr=list(map(int, stdin.readline() .strip().split()))\n\t#s=input()\n\n\t#stdout.write(str(cp))\n\t#stdout.write(\"\\n\")\n\n\tarr=sorted(arr)\n\tflg=0\n\tfor i in range(1,n):\n\t\tif(arr[i]-arr[i-1]>1):\n\t\t\tflg=1\n\t\t\tbreak\n\tif(flg):\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"YES\")\n", "for _ in range(int(input())):\n\tn = int(input())\n\tar = list(map(int, input().split()))\n\tar.sort()\n\tnp = False\n\tfor i in range(n):\n\t\tif ar[i] - ar[i-1] > 1:\n\t\t\tnp = True\n\tif np:\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"YES\")\n", "for _ in range(int(input())):\n\tn = int(input())\n\t#n, k = map(int, input().split())\n\ta = list(map(int, input().split()))\n\ta.sort()\n\ts=1 \n\tfor i in range(n-1):\n\t\tif(abs(a[i]-a[i+1])>1):\n\t\t\ts=0 \n\tif(s==1):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "import sys\n# from collections import deque\n# from collections import Counter\n# from math import sqrt\n# from math import log\n# from math import ceil\n# from bisect import bisect_left, bisect_right\n\n# alpha=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n# mod=10**9+7\n# mod=998244353\n\n# def BinarySearch(a,x): \n# \ti=bisect_left(a,x) \n# \tif(i!=len(a) and a[i]==x): \n# \t\treturn i \n# \telse: \n# \t\treturn -1\n\n# def sieve(n): \n# \tprime=[True for i in range(n+1)]\n# \tp=2\n# \twhile(p*p<=n): \n# \t\tif (prime[p]==True): \n# \t\t\tfor i in range(p*p,n+1,p): \n# \t\t\t\tprime[i]=False\n# \t\tp+=1\n# \tprime[0]=False\n# \tprime[1]=False\n# \ts=set()\n# \tfor i in range(len(prime)):\n# \t\tif(prime[i]):\n# \t\ts.add(i)\n# \treturn s\n\n# def gcd(a, b):\n# \tif(a==0):\n# \t\treturn b \n# \treturn gcd(b%a,a)\n\nfast_reader=sys.stdin.readline\nfast_writer=sys.stdout.write\n\ndef input():\n\treturn fast_reader().strip()\n\ndef print(*argv):\n\tfast_writer(' '.join((str(i)) for i in argv))\n\tfast_writer('\\n')\n\n#____________________________________________________________________________________________________________________________________\n\nfor _ in range(int(input())):\n\tn=int(input())\n\tl=list(map(int, input().split()))\n\tl.sort()\n\tans='YES'\n\tfor i in range(n-1):\n\t\tif(l[i+1]-l[i]>1):\n\t\t\tans='NO'\n\t\t\tbreak\n\tprint(ans)\n", "for _ in range(int(input())):\n\tn = int(input())\n\tA = list(map(int,input().split()))\n\tA.sort()\n\tans = \"YES\"\n\tfor i in range(1,n):\n\t\tif(A[i]-A[i-1]>=2):\n\t\t\tans = \"NO\"\n\t\t\tbreak\n\tprint(ans)    \n"], "id": "id8866"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8866", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["the", 0], ["array", 0], ["a", 0], ["consisting", 0], ["of", 0], ["n", 0], ["positive", 0], ["greater", 0], ["than", 0], ["zero", 0], ["integers", 0], ["in", 0], ["one", 0], ["move", 0], ["you", 0], ["can", 0], ["choose", 0], ["two", 0], ["indices", 0], ["i", 0], ["and", 0], ["j", 0], ["i", 0], ["ne", 0], ["j", 0], ["such", 0], ["that", 0], ["the", 0], ["absolute", 0], ["difference", 0], ["between", 0], ["a", 0], ["i", 0], ["and", 0], ["a", 0], ["j", 0], ["is", 0], ["no", 0], ["more", 0], ["than", 0], ["one", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["le", 0], ["1", 0], ["and", 0], ["remove", 0], ["the", 0], ["smallest", 0], ["of", 0], ["these", 0], ["two", 0], ["elements", 0], ["if", 0], ["two", 0], ["elements", 0], ["are", 0], ["equal", 0], ["you", 0], ["can", 0], ["remove", 0], ["any", 0], ["of", 0], ["them", 0], ["but", 0], ["exactly", 0], ["one", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["find", 0], ["if", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["obtain", 0], ["the", 0], ["array", 0], ["consisting", 0], ["of", 0], ["only", 0], ["one", 0], ["element", 0], ["using", 0], ["several", 0], ["possibly", 0], ["zero", 0], ["such", 0], ["moves", 0], ["or", 0], ["not", 0], ["you", 8], ["have", 8], ["to", 8], ["answer", 8], ["t", 8], ["independent", 8], ["test", 8], ["cases", 8], ["input", 20], ["the", 46], ["first", 46], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["one", 0], ["integer", 2], ["t", 0], ["1", 0], ["le", 0], ["t", 0], ["le", 0], ["1000", 0], ["—", 18], ["the", 45], ["number", 44], ["of", 18], ["test", 18], ["cases", 18], ["then", 18], ["t", 12], ["test", 12], ["cases", 12], ["follow", 12], ["the", 12], ["first", 12], ["line", 12], ["of", 0], ["the", 0], ["test", 0], ["case", 0], ["contains", 0], ["one", 0], ["integer", 0], ["n", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["50", 0], ["—", 8], ["the", 8], ["length", 8], ["of", 8], ["a", 8], ["the", 14], ["second", 14], ["line", 14], ["of", 14], ["the", 14], ["test", 14], ["case", 14], ["contains", 28], ["n", 30], ["integers", 35], ["a", 3], ["1", 0], ["a", 0], ["2", 0], ["dots", 0], ["a", 0], ["n", 0], ["1", 0], ["le", 0], ["a", 0], ["i", 0], ["le", 0], ["100", 0], ["where", 0], ["a", 0], ["i", 0], ["is", 0], ["the", 0], ["i", 0], ["th", 0], ["element", 0], ["of", 0], ["a", 0], ["output", 0], ["for", 0], ["each", 0], ["test", 0], ["case", 0], ["print", 0], ["the", 0], ["answer", 0], ["yes", 0], ["if", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["obtain", 0], ["the", 0], ["array", 0], ["consisting", 0], ["of", 0], ["only", 0], ["one", 0], ["element", 0], ["using", 0], ["several", 0], ["possibly", 0], ["zero", 0], ["moves", 0], ["described", 0], ["in", 0], ["the", 0], ["problem", 0], ["statement", 0], ["or", 0], ["no", 0], ["otherwise", 0], ["example", 0], ["input", 0], ["5", 0], ["3", 0], ["1", 0], ["2", 0], ["2", 0], ["4", 0], ["5", 0], ["5", 0], ["5", 0], ["5", 0], ["3", 0], ["1", 0], ["2", 0], ["4", 0], ["4", 0], ["1", 0], ["3", 0], ["4", 0], ["4", 0], ["1", 0], ["100", 0], ["output", 0], ["yes", 0], ["yes", 0], ["no", 0], ["no", 0], ["yes", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["test", 0], ["case", 0], ["of", 0], ["the", 0], ["example", 0], ["we", 0], ["can", 0], ["perform", 0], ["the", 0], ["following", 0], ["sequence", 0], ["of", 0], ["moves", 0], ["choose", 0], ["i", 0], ["1", 0], ["and", 0], ["j", 0], ["3", 0], ["and", 0], ["remove", 0], ["a", 0], ["i", 0], ["so", 0], ["a", 0], ["becomes", 0], ["2", 0], ["2", 0], ["choose", 0], ["i", 0], ["1", 0], ["and", 0], ["j", 0], ["2", 0], ["and", 0], ["remove", 0], ["a", 0], ["j", 0], ["so", 0], ["a", 0], ["becomes", 0], ["2", 0], ["in", 0], ["the", 0], ["second", 0], ["test", 0], ["case", 0], ["of", 0], ["the", 0], ["example", 0], ["we", 0], ["can", 0], ["choose", 0], ["any", 0], ["possible", 0], ["i", 0], ["and", 0], ["j", 0], ["any", 0], ["move", 0], ["and", 0], ["it", 0], ["doesn", 0], ["t", 0], ["matter", 0], ["which", 0], ["element", 0], ["we", 0], ["remove", 0], ["in", 0], ["the", 0], ["third", 0], ["test", 0], ["case", 0], ["of", 0], ["the", 0], ["example", 0], ["there", 0], ["is", 0], ["no", 0], ["way", 0], ["to", 0], ["get", 0], ["rid", 0], ["of", 0], ["2", 0], ["and", 0], ["4", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.12280701754385964, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.011858161543516241, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.22033898305084745, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.07015065913370994, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.043859649122807015, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.007188109161793373, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.22033898305084745, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07015065913370994, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["mi", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["si", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["t", 0], ["ii", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["ii", 0], ["a", 0], ["sorted", 0], ["li", 0], ["boo", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["boo", 0], ["false", 0], ["break", 0], ["print", 0], ["yes", 0], ["if", 0], ["boo", 0], ["else", 0], ["no", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["for", 0], ["nt", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["flag", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["flag", 0], ["no", 0], ["break", 0], ["print", 0], ["flag", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["sorted", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["1", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["pppppppppppppppppppp", 0], ["ppppp", 0], ["ppppppppppppppppppp", 0], ["ppppppp", 0], ["ppppppppppppppppppppp", 0], ["pppppppp", 0], ["pppppppppppppppppppppp", 0], ["pppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppp", 0], ["ppppppppppppppppppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppp", 0], ["pppppppppppppppppppppppppppppppppppppppppppppppp", 0], ["ppppppppppppppppppppp", 0], ["ppppppppppppppppppppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppp", 0], ["ppppppppppppppppppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppppp", 0], ["ppppppppppppppppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppppppppppppppppppppppppp", 0], ["ppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppppppppppppppppppppppppppppp", 0], ["ppppppppppppppppppppppp", 0], ["ppppppppppppppppppppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppp", 0], ["ppppppppppppppppppppppppppppppppppppppppppppppp", 0], ["ppppppppppppppppppppp", 0], ["ppppppppppppppppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppp", 0], ["pppppppppppppppppppppppppppppppp", 0], ["pppppppppppppppppppppp", 0], ["pppppppp", 0], ["ppppppppppppppppppppp", 0], ["ppppppp", 0], ["ppppppppppppppppppp", 0], ["ppppp", 0], ["pppppppppppppppppppp", 0], ["import", 0], ["sys", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["cmp", 0], ["to", 0], ["key", 0], ["from", 0], ["heapq", 0], ["import", 0], ["merge", 0], ["heapify", 0], ["heappop", 0], ["heappush", 0], ["nsmallest", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["floor", 0], ["gcd", 0], ["fabs", 0], ["factorial", 0], ["fmod", 0], ["sqrt", 0], ["inf", 0], ["log", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["deque", 0], ["counter", 0], ["as", 0], ["c", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["as", 0], ["comb", 0], ["permutations", 0], ["as", 0], ["perm", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["as", 0], ["bl", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["bisect", 0], ["from", 0], ["time", 0], ["import", 0], ["perf", 0], ["counter", 0], ["from", 0], ["fractions", 0], ["import", 0], ["fraction", 0], ["from", 0], ["decimal", 0], ["import", 0], ["decimal", 0], ["sys", 0], ["setrecursionlimit", 0], ["pow", 0], ["10", 0], ["6", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["sys", 0], ["stdout", 0], ["open", 0], ["output", 0], ["txt", 0], ["w", 0], ["mod", 0], ["pow", 0], ["10", 0], ["9", 0], ["7", 0], ["mod2", 0], ["998244353", 0], ["def", 0], ["data", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["out", 0], ["var", 0], ["end", 0], ["n", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["var", 0], ["end", 0], ["def", 0], ["outa", 0], ["var", 0], ["end", 0], ["n", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["join", 0], ["map", 0], ["str", 0], ["var", 0], ["end", 0], ["def", 0], ["l", 0], ["return", 0], ["list", 0], ["sp", 0], ["def", 0], ["sl", 0], ["return", 0], ["list", 0], ["ssp", 0], ["def", 0], ["sp", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["data", 0], ["split", 0], ["def", 0], ["ssp", 0], ["return", 0], ["list", 0], ["map", 0], ["str", 0], ["data", 0], ["split", 0], ["def", 0], ["l1d", 0], ["n", 0], ["val", 0], ["0", 0], ["return", 0], ["val", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["l2d", 0], ["n", 0], ["m", 0], ["val", 0], ["0", 0], ["return", 0], ["l1d", 0], ["n", 0], ["val", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["data", 0], ["n", 0], ["int", 0], ["data", 0], ["arr", 0], ["l", 0], ["r", 0], ["true", 0], ["arr", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["arr", 0], ["i", 0], ["1", 0], ["1", 0], ["r", 0], ["false", 0], ["break", 0], ["out", 0], ["yes", 0], ["no", 0], ["r", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["am", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["fl", 0], ["true", 0], ["arr", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["am", 0], ["1", 0], ["if", 0], ["arr", 0], ["i", 0], ["1", 0], ["arr", 0], ["i", 0], ["1", 0], ["fl", 0], ["false", 0], ["break", 0], ["if", 0], ["fl", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["set", 0], ["a", 0], ["if", 0], ["len", 0], ["s", 0], ["max", 0], ["s", 0], ["min", 0], ["s", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["author", 0], ["s", 0], ["mahesh", 0], ["raju", 0], ["username", 0], ["maheshraju2020", 0], ["date", 0], ["05", 0], ["08", 0], ["2020", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["setrecursionlimit", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["ceil", 0], ["sqrt", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["bisect", 0], ["right", 0], ["ii1", 0], ["lambda", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["is1", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["iia", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["isa", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["setrecursionlimit", 0], ["100000", 0], ["mod", 0], ["1000000007", 0], ["tc", 0], ["ii1", 0], ["for", 0], ["in", 0], ["range", 0], ["tc", 0], ["n", 0], ["ii1", 0], ["arr", 0], ["sorted", 0], ["iia", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["arr", 0], ["i", 0], ["1", 0], ["1", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["1", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["sort", 0], ["flag", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["arr", 0], ["i", 0], ["1", 0], ["arr", 0], ["i", 0], ["1", 0], ["flag", 0], ["1", 0], ["break", 0], ["if", 0], ["flag", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["lst", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lst", 0], ["sort", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["lst", 0], ["i", 0], ["1", 0], ["lst", 0], ["i", 0], ["1", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["import", 0], ["math", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["input", 0], ["d", 0], ["false", 0], ["a", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["print", 0], ["no", 0], ["d", 0], ["true", 0], ["break", 0], ["if", 0], ["not", 0], ["d", 0], ["print", 0], ["yes", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["import", 0], ["math", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["defaultdict", 0], ["li", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["map", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["in", 0], ["lambda", 0], ["int", 0], ["input", 0], ["s", 0], ["lambda", 0], ["input", 0], ["def", 0], ["case", 0], ["n", 0], ["in", 0], ["a", 0], ["sorted", 0], ["li", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["for", 0], ["in", 0], ["range", 0], ["in", 0], ["case", 0], ["import", 0], ["math", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["g", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["u", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["u", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["u", 0], ["i", 0], ["u", 0], ["i", 0], ["1", 0], ["1", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["os", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["def", 0], ["solve", 0], ["tc", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["seq", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["seq", 0], ["sorted", 0], ["seq", 0], ["base", 0], ["seq", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["seq", 0], ["i", 0], ["base", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["base", 0], ["seq", 0], ["i", 0], ["print", 0], ["yes", 0], ["tcs", 0], ["1", 0], ["tcs", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["tc", 0], ["1", 0], ["while", 0], ["tc", 0], ["tcs", 0], ["solve", 0], ["tc", 0], ["tc", 0], ["1", 0], ["def", 0], ["solve", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["abs", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["solve", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["t", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["x", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["s", 0], ["input", 0], ["stdout", 0], ["write", 0], ["str", 0], ["cp", 0], ["stdout", 0], ["write", 0], ["n", 0], ["arr", 0], ["sorted", 0], ["arr", 0], ["flg", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["arr", 0], ["i", 0], ["1", 0], ["1", 0], ["flg", 0], ["1", 0], ["break", 0], ["if", 0], ["flg", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["ar", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ar", 0], ["sort", 0], ["np", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ar", 0], ["i", 0], ["ar", 0], ["i", 0], ["1", 0], ["1", 0], ["np", 0], ["true", 0], ["if", 0], ["np", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["s", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["abs", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["s", 0], ["0", 0], ["if", 0], ["s", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["from", 0], ["math", 0], ["import", 0], ["sqrt", 0], ["from", 0], ["math", 0], ["import", 0], ["log", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["bisect", 0], ["right", 0], ["alpha", 366], ["a", 505761], ["b", 486185], ["c", 466499], ["d", 451570], ["e", 424443], ["f", 414204], ["g", 406375], ["h", 398549], ["i", 403184], ["j", 397049], ["k", 390443], ["l", 349634], ["m", 344061], ["n", 338473], ["o", 0], ["p", 0], ["q", 0], ["r", 0], ["s", 0], ["t", 0], ["u", 0], ["v", 0], ["w", 0], ["x", 0], ["y", 0], ["z", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["binarysearch", 0], ["a", 1], ["x", 8], ["i", 9], ["bisect", 27], ["left", 27], ["a", 3], ["x", 3], ["if", 1], ["i", 1], ["len", 0], ["a", 0], ["and", 0], ["a", 0], ["i", 0], ["x", 0], ["return", 0], ["i", 0], ["else", 0], ["return", 0], ["1", 0], ["def", 0], ["sieve", 0], ["n", 0], ["prime", 2], ["true", 2], ["for", 2], ["i", 2], ["in", 2], ["range", 0], ["n", 0], ["1", 0], ["p", 0], ["2", 0], ["while", 0], ["p", 0], ["p", 0], ["n", 0], ["if", 0], ["prime", 0], ["p", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["p", 0], ["p", 0], ["n", 0], ["1", 0], ["p", 0], ["prime", 0], ["i", 0], ["false", 0], ["p", 0], ["1", 0], ["prime", 0], ["0", 0], ["false", 0], ["prime", 0], ["1", 0], ["false", 0], ["s", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["prime", 0], ["if", 0], ["prime", 0], ["i", 0], ["s", 0], ["add", 0], ["i", 0], ["return", 0], ["s", 0], ["def", 0], ["gcd", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["0", 0], ["return", 0], ["b", 0], ["return", 0], ["gcd", 0], ["b", 0], ["a", 0], ["a", 0], ["fast", 0], ["reader", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["fast", 0], ["writer", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["def", 0], ["input", 0], ["return", 0], ["fast", 0], ["reader", 0], ["strip", 0], ["def", 0], ["print", 0], ["argv", 0], ["fast", 0], ["writer", 0], ["join", 0], ["str", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["argv", 0], ["fast", 0], ["writer", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["sort", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["1", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["ans", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.02069950035688794, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.004624995364535506, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.04600141542816702, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.020929773879549383, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.008565310492505354, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.004570148306765009, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.02689313517338995, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.020877565463552725, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given an array of integers $a_1,a_2,\\ldots,a_n$. Find the maximum possible value of $a_ia_ja_ka_la_t$ among all five indices $(i, j, k, l, t)$ ($i<j<k<l<t$).\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1\\le t\\le 2 \\cdot 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($5\\le n\\le 10^5$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($-3\\times 10^3\\le a_i\\le 3\\times 10^3$) — given array.\n\nIt's guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print one integer — the answer to the problem.\n\n\n-----Example-----\nInput\n4\n5\n-1 -2 -3 -4 -5\n6\n-1 -2 -3 1 2 -1\n6\n-1 0 0 0 -1 -1\n6\n-9 -7 -5 -3 -2 1\n\nOutput\n-120\n12\n0\n945\n\n\n\n-----Note-----\n\nIn the first test case, choosing $a_1,a_2,a_3,a_4,a_5$ is a best choice: $(-1)\\cdot (-2) \\cdot (-3)\\cdot (-4)\\cdot (-5)=-120$.\n\nIn the second test case, choosing $a_1,a_2,a_3,a_5,a_6$ is a best choice: $(-1)\\cdot (-2) \\cdot (-3)\\cdot 2\\cdot (-1)=12$.\n\nIn the third test case, choosing $a_1,a_2,a_3,a_4,a_5$ is a best choice: $(-1)\\cdot 0\\cdot 0\\cdot 0\\cdot (-1)=0$.\n\nIn the fourth test case, choosing $a_1,a_2,a_3,a_4,a_6$ is a best choice: $(-9)\\cdot (-7) \\cdot (-5)\\cdot (-3)\\cdot 1=945$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["def read_line():\n\treturn list(map(int, input().split()))\ndef pr(l):\n\ta = 1\n\tfor x in l:\n\t\ta *= x\n\treturn a\n\nT = int(input())\nfor _ in range(T):\n\tn = int(input())\n\tl = list(sorted(read_line()))\n\tl2 = list(reversed(l))\n\tm = None\n\tfor i in range(6):\n\t\tj = 5 - i\n\t\ta = l[:i]\n\t\tb = l2[:j]\n\t\tp = pr(a) * pr(b)\n\t\tif m == None or p > m:\n\t\t\tm = p\n\tprint(m)\n\n\n", "t = int(input())\n\nfor _ in range(t):\n\tn = int(input())\n\tk = sorted(map(int, input().strip().split()))\n\ta, b = k[0] * k[1], k[2] * k[3]\n\tc, d = k[-5] * k[-4], k[-3] * k[-2]\n\te = k[-1]\n\n\tprint(max(a*b*e, a*d*e, c*d*e))\n", "import sys\nimport heapq, functools, collections\nimport math, random\nfrom collections import Counter, defaultdict\n\n# available on Google, not available on Codeforces\n# import numpy as np\n# import scipy\n\n\ndef solve(lst):  # fix inputs here\n\tconsole(\"----- solving ------\")\n\n\tmaxres = lst[0] * lst[1] * lst[2] * lst[3] * lst[4]\n\n\tif 0 in lst:\n\t\tmaxres = max(maxres, 0)\n\n\tpositives = sorted([a for a in lst if a >= 0])[::-1]\n\tnegatives = sorted([a for a in lst if a < 0])\n\n\tif len(positives) >= 5 and len(negatives) >= 0:\n\t\tmaxres = max(maxres, positives[0]* positives[1]* positives[2]* positives[3]* positives[4])\n\n\tif len(positives) >= 3 and len(negatives) >= 2:\n\t\tmaxres = max(maxres, positives[0]* positives[1]* positives[2]* negatives[0]* negatives[1])\n\n\tif len(positives) >= 1 and len(negatives) >= 4:\n\t\tmaxres = max(maxres, positives[0]* negatives[0]* negatives[1]* negatives[2]* negatives[3])\n\n\tif len(negatives) >= 5:\n\t\tmaxres = max(maxres, negatives[-1]* negatives[-2]* negatives[-3]* negatives[-4]* negatives[-5])\n\n\t# return a string (i.e. not a list or matrix)\n\treturn maxres\n\n\ndef console(*args):  # the judge will not read these print statement\n\tprint('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n\treturn\n\n# fast read all\n# sys.stdin.readlines()\n\nfor case_num in range(int(input())):\n\t# read line as a string\n\t# strr = input()\n\n\t# read line as an integer\n\tk = int(input())\n\t\n\t# read one line and parse each word as a string\n\t# lst = input().split()\n\n\t# read one line and parse each word as an integer\n\tlst = list(map(int,input().split()))\n\n\t# read matrix and parse as integers (after reading read nrows)\n\t# lst = list(map(int,input().split()))\n\t# nrows = lst[0]  # index containing information, please change\n\t# grid = []\n\t# for _ in range(nrows):\n\t#     grid.append(list(map(int,input().split())))\n\n\tres = solve(lst)  # please change\n\t\n\t# Google - case number required\n\t# print(\"Case #{}: {}\".format(case_num+1, res))\n\n\t# Codeforces - no case number required\n\tprint(res)\n", "from functools import reduce\n\ndef solve():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tng, ps = [], []\n\tfor i in a:\n\t\tif i < 0:\n\t\t\tng.append(-i)\n\t\telse:\n\t\t\tps.append(i)\n\tps.sort(reverse=True)\n\tng.sort(reverse=True)\n\tans = max(\n\t\t\treduce(int.__mul__, ps[:5]) if len(ps) >= 5 else -10 ** 30,\n\t\t\treduce(int.__mul__, ps[:3] + ng[:2]) if len(ps) >= 3 and len(ng) >= 2 else -10 ** 30,\n\t\t\treduce(int.__mul__, ps[:1] + ng[:4]) if len(ps) >= 1 and len(ng) >= 4 else -10 ** 30\n\t)\n\tif 0 in a:\n\t\tans = max(ans, 0)\n\tps.sort()\n\tng.sort()\n\tans = max(\n\t\t\tans,\n\t\t\t-reduce(int.__mul__, ps[:4] + ng[:1]) if len(ps) >= 4 and len(ng) >= 1 else -10 ** 30,\n\t\t\t-reduce(int.__mul__, ps[:2] + ng[:3]) if len(ps) >= 2 and len(ng) >= 3 else -10 ** 30,\n\t\t\t-reduce(int.__mul__, ng[:5]) if len(ng) >= 5 else -10 ** 30\n\t)\n\tprint(ans)\n\nt = int(input())\nfor _ in range(t):\n\tsolve()\n", "t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\ta.sort()\n\tx=a[-1]*a[-2]*a[-3]*a[-4]*a[-5]\n\ty=a[0]*a[1]*a[-1]*a[-2]*a[-3]\n\tz=a[0]*a[1]*a[2]*a[3]*a[-1]\n\tprint(max(x, y, z))\n", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\ndef giveanswer(l):\n    \n\tans = -float('inf')\n\tfor i in range(6):\n\t\tans = max(ans ,l[i - 1] * l[i - 2] * l[i - 3] * l[i - 4] * l[i - 5])\n\treturn ans\n\nfor _ in range(val()):\n\tn = val()\n\tprint(giveanswer(sorted(li())))\n", "for _ in range(int(input())):\n\tn = int(input())\n\tneg = []\n\tpos = []\n\tzero = False\n\tfor e in map(int, input().split()):\n\t\tif e < 0:\n\t\t\tneg.append(e)\n\t\telif e > 0:\n\t\t\tpos.append(e)\n\t\telse:\n\t\t\tzero = True\n\tneg.sort()\n\tpos.sort()\n\tres = -float(\"inf\")\n\tif zero:\n\t\tres = 0\n\tfor i in range(6): # i = number of -\n\t\tif len(neg) < i or len(pos) < 5-i:\n\t\t\tcontinue\n\t\tar = neg[-i:] + pos[:5-i]\n\t\tif i % 2 == 0:\n\t\t\tar = neg[:i] + pos[-(5-i):]\n\t\t#print(i, ar)\n\t\tacc = 1\n\t\tfor e in ar:\n\t\t\tacc *= e\n\t\tres = max(res, acc)\n\tprint(res)\n", "for _ in range(int(input())):\n\tn=int(input())\n\ta=list(map(int,input().split()))\n\ta.sort()\n\tans=0\n\tt1=a[0]*a[1]*a[2]*a[3]*a[-1]\n\tt2=a[0]*a[1]*a[-2]*a[-3]*a[-1]\n\tt3=a[-5]*a[-4]*a[-2]*a[-3]*a[-1]\n\t\n\tprint(max(t1,t2,t3))\n", "import sys\n\nT = int(sys.stdin.readline().strip())\nfor t in range (0, T):\n\tn = int(sys.stdin.readline().strip())\n\ta = list(map(int, sys.stdin.readline().strip().split()))\n\ta.sort()\n\tprint(max([a[0] * a[1] * a[2] * a[3] * a[-1], \n\t\ta[0] * a[1] * a[-3] * a[-2] * a[-1], \n\t\ta[-5] * a[-4] * a[-3] * a[-2] * a[-1]]))\n", "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nfrom operator import mul\nfrom functools import reduce\n \nt = int(input())\n\nfor _ in range(t):\n\tn = int(input())\n\tarr = list(map(int,input().split()))\n \n\tarr.sort()\n\tbest = - (10**99)\n\t\n\ttmp = arr[-5:]\n\ttmp = reduce(lambda x, y: x * y, tmp, 1)\n\tbest = max(best, tmp)\n\t\n\ttmp = arr[:2] + arr[-3:]\n\ttmp = reduce(lambda x, y: x * y, tmp, 1)\n\tbest = max(best, tmp)\n\t\n\ttmp = arr[:4] + arr[-1:]\n\ttmp = reduce(lambda x, y: x * y, tmp, 1)\n\tbest = max(best, tmp)\n\t\n\tprint(best)\n", "for _ in range(int(input())):\n\tn = int(input())\n\tarr = list(map(int,input().split()))\n\tpos,neg = 0,0\n\tfor i in arr:\n\t\tif i>0:\n\t\t\tpos+=1\n\t\telif i<0:\n\t\t\tneg+=1\n\tans = -10**18\n\tarr.sort()\n\ti = 0\n\twhile i<=4 and i<=neg:\n\t\tcur = 1\n\t\tfor j in range(i):\n\t\t\tcur = cur*arr[j]\n\t\tj = n-1\n\t\twhile j>=(n-(5-i)):\n\t\t\tcur = cur*arr[j]\n\t\t\tj-=1\n\t\tans = max(ans,cur)\n\t\ti+=2\n\tprint(ans)\n", "# Anuneet Anand\n\nT = int(input())\n\nwhile T:\n\tn = int(input())\n\tA = list(map(int,input().split()))\n\tA.sort()\n\n\ta = A[n-1]*A[n-2]*A[n-3]*A[n-4]*A[n-5]\n\tb = A[n-1]*A[n-2]*A[n-3]*A[0]*A[1]\n\tc = A[n-1]*A[0]*A[1]*A[2]*A[3]\n\n\tprint(max(a,b,c))\n\n\tT = T - 1\n\n\n\n\n", "t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\t\n\tm = []\n\tp = []\n\tcnt0 = 0\n\tfor val in a:\n\t\tif val > 0:\n\t\t\tp.append(val)\n\t\telif val < 0:\n\t\t\tm.append(val)\n\t\telse:\n\t\t\tcnt0 += 1\n\tp = sorted(p, reverse=True)\n\tm = sorted(m)\n\t\n\t# ppppp\n\tans = -10 ** 20\n\ttmp = 1\n\tif len(p) >= 5:\n\t\tfor i in range(5):\n\t\t\ttmp *= p[i]\n\t\tans = max(tmp, ans)\n\t# ppppm\n\ttmp = 1\n\tif len(p) >= 4 and len(m) >= 1:\n\t\tfor i in range(4):\n\t\t\ttmp *= p[~i]\n\t\tfor i in range(1):\n\t\t\ttmp *= m[~i]\n\t\tans = max(tmp, ans)\n\t# pppmm\n\ttmp = 1\n\tif len(p) >= 3 and len(m) >= 2:\n\t\tfor i in range(3):\n\t\t\ttmp *= p[i]\n\t\tfor i in range(2):\n\t\t\ttmp *= m[i]\n\t\tans = max(tmp, ans)\n\t# ppmmm\n\ttmp = 1\n\tif len(p) >= 2 and len(m) >= 3:\n\t\tfor i in range(2):\n\t\t\ttmp *= p[~i]\n\t\tfor i in range(3):\n\t\t\ttmp *= m[~i]\n\t\tans = max(tmp, ans)\n\t# pmmmm\n\ttmp = 1\n\tif len(p) >= 1 and len(m) >= 4:\n\t\tfor i in range(1):\n\t\t\ttmp *= p[i]\n\t\tfor i in range(4):\n\t\t\ttmp *= m[i]\n\t\tans = max(tmp, ans)\n\t# mmmmm\n\ttmp = 1\n\tif len(m) >= 5:\n\t\tfor i in range(5):\n\t\t\ttmp *= m[~i]\n\t\tans = max(tmp, ans)\n\tif cnt0 > 0:\n\t\tans = max(0, ans)\n\n\tprint(ans)\n"], "id": "id5636"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5636", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["an", 0], ["array", 0], ["of", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["ldots", 0], ["a", 0], ["n", 0], ["find", 0], ["the", 0], ["maximum", 0], ["possible", 0], ["value", 0], ["of", 0], ["a", 0], ["ia", 0], ["ja", 0], ["ka", 0], ["la", 0], ["t", 0], ["among", 0], ["all", 0], ["five", 0], ["indices", 0], ["i", 0], ["j", 0], ["k", 0], ["l", 0], ["t", 0], ["i", 0], ["j", 0], ["k", 0], ["l", 0], ["t", 0], ["input", 0], ["the", 0], ["input", 0], ["consists", 0], ["of", 0], ["multiple", 0], ["test", 0], ["cases", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["an", 0], ["integer", 0], ["t", 0], ["1", 0], ["le", 0], ["t", 0], ["le", 0], ["2", 0], ["cdot", 0], ["10", 0], ["4", 0], ["—", 4], ["the", 11], ["number", 7], ["of", 6], ["test", 6], ["cases", 6], ["the", 14], ["description", 24], ["of", 24], ["the", 13], ["test", 31], ["cases", 31], ["follows", 20], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["each", 0], ["test", 0], ["case", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["5", 0], ["le", 0], ["n", 0], ["le", 0], ["10", 0], ["5", 0], ["—", 4], ["the", 10], ["size", 10], ["of", 4], ["the", 4], ["array", 4], ["the", 15], ["second", 15], ["line", 4], ["of", 4], ["each", 4], ["test", 0], ["case", 0], ["contains", 0], ["n", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["ldots", 0], ["a", 0], ["n", 0], ["3", 0], ["times", 0], ["10", 0], ["3", 0], ["le", 0], ["a", 0], ["i", 0], ["le", 0], ["3", 0], ["times", 0], ["10", 0], ["3", 0], ["—", 0], ["given", 0], ["array", 0], ["it", 2], ["s", 2], ["guaranteed", 25], ["that", 4], ["the", 4], ["sum", 4], ["of", 4], ["n", 0], ["over", 0], ["all", 0], ["test", 0], ["cases", 0], ["does", 0], ["not", 0], ["exceed", 0], ["2", 0], ["cdot", 0], ["10", 0], ["5", 0], ["output", 0], ["for", 0], ["each", 0], ["test", 0], ["case", 0], ["print", 0], ["one", 0], ["integer", 0], ["—", 0], ["the", 0], ["answer", 0], ["to", 0], ["the", 0], ["problem", 0], ["example", 0], ["input", 0], ["4", 2], ["5", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["1", 0], ["6", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["1", 0], ["6", 0], ["9", 0], ["7", 0], ["5", 0], ["3", 0], ["2", 0], ["1", 0], ["output", 0], ["120", 0], ["12", 0], ["0", 0], ["945", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["test", 0], ["case", 0], ["choosing", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["3", 0], ["a", 0], ["4", 0], ["a", 0], ["5", 0], ["is", 0], ["a", 0], ["best", 0], ["choice", 0], ["1", 0], ["cdot", 0], ["2", 0], ["cdot", 0], ["3", 0], ["cdot", 0], ["4", 0], ["cdot", 0], ["5", 0], ["120", 0], ["in", 0], ["the", 0], ["second", 0], ["test", 0], ["case", 0], ["choosing", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["3", 0], ["a", 0], ["5", 0], ["a", 0], ["6", 0], ["is", 0], ["a", 0], ["best", 0], ["choice", 0], ["1", 0], ["cdot", 0], ["2", 0], ["cdot", 0], ["3", 0], ["cdot", 0], ["2", 0], ["cdot", 0], ["1", 0], ["12", 0], ["in", 0], ["the", 0], ["third", 0], ["test", 0], ["case", 0], ["choosing", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["3", 0], ["a", 0], ["4", 0], ["a", 0], ["5", 0], ["is", 0], ["a", 0], ["best", 0], ["choice", 0], ["1", 0], ["cdot", 0], ["0", 0], ["cdot", 0], ["0", 0], ["cdot", 0], ["0", 0], ["cdot", 0], ["1", 0], ["0", 0], ["in", 0], ["the", 0], ["fourth", 0], ["test", 0], ["case", 0], ["choosing", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["3", 0], ["a", 0], ["4", 0], ["a", 0], ["6", 0], ["is", 0], ["a", 0], ["best", 0], ["choice", 0], ["9", 0], ["cdot", 0], ["7", 0], ["cdot", 0], ["5", 0], ["cdot", 0], ["3", 0], ["cdot", 0], ["1", 0], ["945", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.018604064618177523, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.24096385542168675, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08433734939759036, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.065625, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.016696428571428574, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.24096385542168675, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08433734939759036, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["def", 0], ["read", 0], ["line", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["pr", 0], ["l", 0], ["a", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["a", 0], ["x", 0], ["return", 0], ["a", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["sorted", 0], ["read", 0], ["line", 0], ["l2", 0], ["list", 0], ["reversed", 0], ["l", 0], ["m", 0], ["none", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["6", 0], ["j", 0], ["5", 0], ["i", 0], ["a", 0], ["l", 0], ["i", 0], ["b", 0], ["l2", 0], ["j", 0], ["p", 0], ["pr", 0], ["a", 0], ["pr", 0], ["b", 0], ["if", 0], ["m", 0], ["none", 0], ["or", 0], ["p", 0], ["m", 0], ["m", 0], ["p", 0], ["print", 0], ["m", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["k", 0], ["sorted", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["a", 0], ["b", 0], ["k", 0], ["0", 0], ["k", 0], ["1", 0], ["k", 0], ["2", 0], ["k", 0], ["3", 0], ["c", 0], ["d", 0], ["k", 0], ["5", 0], ["k", 0], ["4", 0], ["k", 0], ["3", 0], ["k", 0], ["2", 0], ["e", 0], ["k", 0], ["1", 0], ["print", 0], ["max", 0], ["a", 0], ["b", 0], ["e", 0], ["a", 0], ["d", 0], ["e", 0], ["c", 0], ["d", 0], ["e", 0], ["import", 0], ["sys", 0], ["import", 0], ["heapq", 0], ["functools", 0], ["collections", 0], ["import", 0], ["math", 0], ["random", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["defaultdict", 0], ["available", 0], ["on", 0], ["google", 0], ["not", 0], ["available", 0], ["on", 0], ["codeforces", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["import", 0], ["scipy", 0], ["def", 0], ["solve", 0], ["lst", 0], ["fix", 0], ["inputs", 0], ["here", 0], ["console", 0], ["solving", 0], ["maxres", 0], ["lst", 0], ["0", 0], ["lst", 0], ["1", 0], ["lst", 0], ["2", 0], ["lst", 0], ["3", 0], ["lst", 0], ["4", 0], ["if", 0], ["0", 0], ["in", 0], ["lst", 0], ["maxres", 0], ["max", 0], ["maxres", 0], ["0", 0], ["positives", 0], ["sorted", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["lst", 0], ["if", 0], ["a", 0], ["0", 0], ["1", 0], ["negatives", 0], ["sorted", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["lst", 0], ["if", 0], ["a", 0], ["0", 0], ["if", 0], ["len", 0], ["positives", 0], ["5", 0], ["and", 0], ["len", 0], ["negatives", 0], ["0", 0], ["maxres", 0], ["max", 0], ["maxres", 0], ["positives", 0], ["0", 0], ["positives", 0], ["1", 0], ["positives", 0], ["2", 0], ["positives", 0], ["3", 0], ["positives", 0], ["4", 0], ["if", 0], ["len", 0], ["positives", 0], ["3", 0], ["and", 0], ["len", 0], ["negatives", 0], ["2", 0], ["maxres", 0], ["max", 0], ["maxres", 0], ["positives", 0], ["0", 0], ["positives", 0], ["1", 0], ["positives", 0], ["2", 0], ["negatives", 0], ["0", 0], ["negatives", 0], ["1", 0], ["if", 0], ["len", 0], ["positives", 0], ["1", 0], ["and", 0], ["len", 0], ["negatives", 0], ["4", 0], ["maxres", 0], ["max", 0], ["maxres", 0], ["positives", 0], ["0", 0], ["negatives", 0], ["0", 0], ["negatives", 0], ["1", 0], ["negatives", 0], ["2", 0], ["negatives", 0], ["3", 0], ["if", 0], ["len", 0], ["negatives", 0], ["5", 0], ["maxres", 0], ["max", 0], ["maxres", 0], ["negatives", 0], ["1", 0], ["negatives", 0], ["2", 0], ["negatives", 0], ["3", 0], ["negatives", 0], ["4", 0], ["negatives", 0], ["5", 0], ["return", 0], ["a", 0], ["string", 0], ["i", 0], ["e", 0], ["not", 0], ["a", 0], ["list", 0], ["or", 0], ["matrix", 0], ["return", 0], ["maxres", 0], ["def", 0], ["console", 0], ["args", 0], ["the", 0], ["judge", 0], ["will", 0], ["not", 0], ["read", 0], ["these", 0], ["print", 0], ["statement", 0], ["print", 0], ["033", 0], ["36m", 0], ["args", 0], ["033", 0], ["0m", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["return", 0], ["fast", 0], ["read", 0], ["all", 0], ["sys", 0], ["stdin", 0], ["readlines", 0], ["for", 0], ["case", 0], ["num", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["read", 0], ["line", 0], ["as", 0], ["a", 0], ["string", 0], ["strr", 0], ["input", 0], ["read", 0], ["line", 0], ["as", 0], ["an", 0], ["integer", 0], ["k", 0], ["int", 0], ["input", 0], ["read", 0], ["one", 0], ["line", 0], ["and", 0], ["parse", 0], ["each", 0], ["word", 0], ["as", 0], ["a", 0], ["string", 0], ["lst", 0], ["input", 0], ["split", 0], ["read", 0], ["one", 0], ["line", 0], ["and", 0], ["parse", 0], ["each", 0], ["word", 0], ["as", 0], ["an", 0], ["integer", 0], ["lst", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["read", 0], ["matrix", 0], ["and", 0], ["parse", 0], ["as", 0], ["integers", 0], ["after", 0], ["reading", 0], ["read", 0], ["nrows", 0], ["lst", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["nrows", 0], ["lst", 0], ["0", 0], ["index", 0], ["containing", 0], ["information", 0], ["please", 0], ["change", 0], ["grid", 0], ["for", 0], ["in", 0], ["range", 0], ["nrows", 0], ["grid", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["solve", 0], ["lst", 0], ["please", 0], ["change", 0], ["google", 0], ["case", 0], ["number", 0], ["required", 0], ["print", 0], ["case", 0], ["format", 0], ["case", 0], ["num", 0], ["1", 0], ["res", 0], ["codeforces", 0], ["no", 0], ["case", 0], ["number", 0], ["required", 0], ["print", 0], ["res", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["def", 0], ["solve", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ng", 0], ["ps", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["0", 0], ["ng", 0], ["append", 0], ["i", 0], ["else", 0], ["ps", 0], ["append", 0], ["i", 0], ["ps", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ng", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["max", 0], ["reduce", 0], ["int", 0], ["mul", 0], ["ps", 0], ["5", 0], ["if", 0], ["len", 0], ["ps", 0], ["5", 0], ["else", 0], ["10", 0], ["30", 0], ["reduce", 0], ["int", 0], ["mul", 0], ["ps", 0], ["3", 0], ["ng", 0], ["2", 0], ["if", 0], ["len", 0], ["ps", 0], ["3", 0], ["and", 0], ["len", 0], ["ng", 0], ["2", 0], ["else", 0], ["10", 0], ["30", 0], ["reduce", 0], ["int", 0], ["mul", 0], ["ps", 0], ["1", 0], ["ng", 0], ["4", 0], ["if", 0], ["len", 0], ["ps", 0], ["1", 0], ["and", 0], ["len", 0], ["ng", 0], ["4", 0], ["else", 0], ["10", 0], ["30", 0], ["if", 0], ["0", 0], ["in", 0], ["a", 0], ["ans", 0], ["max", 0], ["ans", 0], ["0", 0], ["ps", 0], ["sort", 0], ["ng", 0], ["sort", 0], ["ans", 0], ["max", 0], ["ans", 0], ["reduce", 0], ["int", 0], ["mul", 0], ["ps", 0], ["4", 0], ["ng", 0], ["1", 0], ["if", 0], ["len", 0], ["ps", 0], ["4", 0], ["and", 0], ["len", 0], ["ng", 0], ["1", 0], ["else", 0], ["10", 0], ["30", 0], ["reduce", 0], ["int", 0], ["mul", 0], ["ps", 0], ["2", 0], ["ng", 0], ["3", 0], ["if", 0], ["len", 0], ["ps", 0], ["2", 0], ["and", 0], ["len", 0], ["ng", 0], ["3", 0], ["else", 0], ["10", 0], ["30", 0], ["reduce", 0], ["int", 0], ["mul", 0], ["ng", 0], ["5", 0], ["if", 0], ["len", 0], ["ng", 0], ["5", 0], ["else", 0], ["10", 0], ["30", 0], ["print", 0], ["ans", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["solve", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["x", 0], ["a", 2], ["1", 2], ["a", 2], ["2", 2], ["a", 0], ["3", 0], ["a", 0], ["4", 0], ["a", 0], ["5", 0], ["y", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["3", 0], ["z", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["3", 0], ["a", 0], ["1", 0], ["print", 0], ["max", 0], ["x", 0], ["y", 0], ["z", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["as", 0], ["bl", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappush", 0], ["heappop", 0], ["heapify", 0], ["import", 0], ["math", 0], ["from", 0], ["collections", 0], ["import", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["cmp", 0], ["to", 0], ["key", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["from", 0], ["itertools", 0], ["import", 0], ["accumulate", 0], ["from", 0], ["functools", 0], ["import", 0], ["lru", 0], ["cache", 0], ["m", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["factors", 0], ["n", 0], ["return", 0], ["sorted", 0], ["set", 13], ["reduce", 13], ["list", 13], ["add", 13], ["i", 16], ["n", 16], ["i", 16], ["for", 16], ["i", 16], ["in", 4], ["range", 0], ["1", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["def", 0], ["inv", 0], ["mod", 0], ["n", 0], ["return", 0], ["pow", 0], ["n", 0], ["mod", 0], ["2", 0], ["mod", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["split", 0], ["def", 0], ["st", 0], ["return", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["val", 0], ["return", 0], ["int", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["li2", 0], ["return", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["li3", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["giveanswer", 0], ["l", 0], ["ans", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["6", 0], ["ans", 0], ["max", 0], ["ans", 0], ["l", 18], ["i", 19], ["1", 16], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["i", 0], ["3", 0], ["l", 0], ["i", 0], ["4", 0], ["l", 0], ["i", 0], ["5", 0], ["return", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["val", 0], ["n", 0], ["val", 0], ["print", 0], ["giveanswer", 0], ["sorted", 0], ["li", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["neg", 0], ["pos", 0], ["zero", 0], ["false", 0], ["for", 0], ["e", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["e", 0], ["0", 0], ["neg", 0], ["append", 0], ["e", 0], ["elif", 0], ["e", 0], ["0", 0], ["pos", 0], ["append", 0], ["e", 0], ["else", 0], ["zero", 0], ["true", 0], ["neg", 0], ["sort", 0], ["pos", 0], ["sort", 0], ["res", 0], ["float", 0], ["inf", 0], ["if", 0], ["zero", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["6", 0], ["i", 0], ["number", 0], ["of", 0], ["if", 0], ["len", 0], ["neg", 0], ["i", 0], ["or", 0], ["len", 0], ["pos", 0], ["5", 0], ["i", 0], ["continue", 0], ["ar", 0], ["neg", 0], ["i", 0], ["pos", 0], ["5", 0], ["i", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["ar", 0], ["neg", 0], ["i", 0], ["pos", 0], ["5", 0], ["i", 0], ["print", 0], ["i", 0], ["ar", 0], ["acc", 0], ["1", 0], ["for", 0], ["e", 0], ["in", 0], ["ar", 0], ["acc", 0], ["e", 0], ["res", 0], ["max", 0], ["res", 0], ["acc", 0], ["print", 0], ["res", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["ans", 0], ["0", 0], ["t1", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["3", 0], ["a", 0], ["1", 0], ["t2", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["3", 0], ["a", 0], ["1", 0], ["t3", 0], ["a", 0], ["5", 0], ["a", 0], ["4", 0], ["a", 0], ["2", 0], ["a", 0], ["3", 0], ["a", 0], ["1", 0], ["print", 0], ["max", 0], ["t1", 0], ["t2", 0], ["t3", 0], ["import", 0], ["sys", 0], ["t", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["0", 0], ["t", 0], ["n", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["a", 0], ["sort", 0], ["print", 0], ["max", 0], ["a", 37], ["0", 4], ["a", 4], ["1", 0], ["a", 0], ["2", 0], ["a", 3], ["3", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["a", 4], ["3", 4], ["a", 2], ["2", 1], ["a", 0], ["1", 0], ["a", 0], ["5", 0], ["a", 0], ["4", 0], ["a", 0], ["3", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["from", 0], ["operator", 0], ["import", 0], ["mul", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["sort", 0], ["best", 0], ["10", 0], ["99", 0], ["tmp", 0], ["arr", 0], ["5", 0], ["tmp", 0], ["reduce", 0], ["lambda", 0], ["x", 0], ["y", 0], ["x", 0], ["y", 0], ["tmp", 0], ["1", 0], ["best", 0], ["max", 0], ["best", 0], ["tmp", 0], ["tmp", 0], ["arr", 0], ["2", 0], ["arr", 0], ["3", 0], ["tmp", 0], ["reduce", 0], ["lambda", 0], ["x", 0], ["y", 0], ["x", 0], ["y", 0], ["tmp", 0], ["1", 0], ["best", 0], ["max", 0], ["best", 0], ["tmp", 0], ["tmp", 0], ["arr", 0], ["4", 0], ["arr", 0], ["1", 0], ["tmp", 0], ["reduce", 0], ["lambda", 0], ["x", 0], ["y", 0], ["x", 0], ["y", 0], ["tmp", 0], ["1", 0], ["best", 0], ["max", 0], ["best", 0], ["tmp", 0], ["print", 0], ["best", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pos", 0], ["neg", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["arr", 0], ["if", 0], ["i", 0], ["0", 0], ["pos", 0], ["1", 0], ["elif", 0], ["i", 0], ["0", 0], ["neg", 0], ["1", 0], ["ans", 0], ["10", 0], ["18", 0], ["arr", 0], ["sort", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["4", 0], ["and", 0], ["i", 0], ["neg", 0], ["cur", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["cur", 0], ["cur", 0], ["arr", 0], ["j", 0], ["j", 0], ["n", 0], ["1", 0], ["while", 0], ["j", 0], ["n", 0], ["5", 0], ["i", 0], ["cur", 0], ["cur", 0], ["arr", 0], ["j", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cur", 0], ["i", 0], ["2", 0], ["print", 0], ["ans", 0], ["anuneet", 0], ["anand", 0], ["t", 0], ["int", 0], ["input", 0], ["while", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["a", 0], ["a", 37], ["n", 36], ["1", 34], ["a", 0], ["n", 0], ["2", 0], ["a", 0], ["n", 0], ["3", 0], ["a", 0], ["n", 0], ["4", 0], ["a", 0], ["n", 0], ["5", 0], ["b", 0], ["a", 10], ["n", 0], ["1", 0], ["a", 0], ["n", 0], ["2", 0], ["a", 0], ["n", 0], ["3", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["c", 0], ["a", 0], ["n", 0], ["1", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["3", 0], ["print", 0], ["max", 0], ["a", 0], ["b", 0], ["c", 0], ["t", 0], ["t", 0], ["1", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["p", 0], ["cnt0", 0], ["0", 0], ["for", 0], ["val", 0], ["in", 0], ["a", 0], ["if", 0], ["val", 0], ["0", 0], ["p", 0], ["append", 0], ["val", 0], ["elif", 0], ["val", 0], ["0", 0], ["m", 0], ["append", 0], ["val", 0], ["else", 0], ["cnt0", 0], ["1", 0], ["p", 0], ["sorted", 0], ["p", 0], ["reverse", 0], ["true", 0], ["m", 0], ["sorted", 0], ["m", 0], ["ppppp", 0], ["ans", 0], ["10", 0], ["20", 0], ["tmp", 0], ["1", 0], ["if", 0], ["len", 0], ["p", 0], ["5", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["tmp", 0], ["p", 0], ["i", 0], ["ans", 0], ["max", 0], ["tmp", 0], ["ans", 0], ["ppppm", 0], ["tmp", 0], ["1", 0], ["if", 0], ["len", 0], ["p", 0], ["4", 0], ["and", 0], ["len", 0], ["m", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["tmp", 0], ["p", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["tmp", 0], ["m", 0], ["i", 0], ["ans", 0], ["max", 0], ["tmp", 0], ["ans", 0], ["pppmm", 0], ["tmp", 0], ["1", 0], ["if", 0], ["len", 0], ["p", 0], ["3", 0], ["and", 0], ["len", 0], ["m", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["tmp", 0], ["p", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["tmp", 0], ["m", 0], ["i", 0], ["ans", 0], ["max", 0], ["tmp", 0], ["ans", 0], ["ppmmm", 0], ["tmp", 0], ["1", 0], ["if", 0], ["len", 0], ["p", 0], ["2", 0], ["and", 0], ["len", 0], ["m", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["tmp", 0], ["p", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["tmp", 0], ["m", 0], ["i", 0], ["ans", 0], ["max", 0], ["tmp", 0], ["ans", 0], ["pmmmm", 0], ["tmp", 0], ["1", 0], ["if", 0], ["len", 0], ["p", 0], ["1", 0], ["and", 0], ["len", 0], ["m", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["tmp", 0], ["p", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["tmp", 0], ["m", 0], ["i", 0], ["ans", 0], ["max", 0], ["tmp", 0], ["ans", 0], ["mmmmm", 0], ["tmp", 0], ["1", 0], ["if", 0], ["len", 0], ["m", 0], ["5", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["tmp", 0], ["m", 0], ["i", 0], ["ans", 0], ["max", 0], ["tmp", 0], ["ans", 0], ["if", 0], ["cnt0", 0], ["0", 0], ["ans", 0], ["max", 0], ["0", 0], ["ans", 0], ["print", 0], ["ans", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.019568151147098516, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.004106245865091957, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.07429718875502007, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.02189654411630554, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.008771929824561403, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.003497525865946919, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.04752342704149933, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.02050423917893799, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
