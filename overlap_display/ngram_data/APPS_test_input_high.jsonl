{"instance": {"input": "\nQUESTION:\nPolycarp is mad about coding, that is why he writes Sveta encoded messages. He calls the median letter in a word the letter which is in the middle of the word. If the word's length is even, the median letter is the left of the two middle letters. In the following examples, the median letter is highlighted: contest, info. If the word consists of single letter, then according to above definition this letter is the median letter. \n\nPolycarp encodes each word in the following way: he writes down the median letter of the word, then deletes it and repeats the process until there are no letters left. For example, he encodes the word volga as logva.\n\nYou are given an encoding s of some word, your task is to decode it. \n\n\n-----Input-----\n\nThe first line contains a positive integer n (1 ≤ n ≤ 2000) — the length of the encoded word.\n\nThe second line contains the string s of length n consisting of lowercase English letters — the encoding.\n\n\n-----Output-----\n\nPrint the word that Polycarp encoded.\n\n\n-----Examples-----\nInput\n5\nlogva\n\nOutput\nvolga\n\nInput\n2\nno\n\nOutput\nno\n\nInput\n4\nabba\n\nOutput\nbaba\n\n\n\n-----Note-----\n\nIn the first example Polycarp encoded the word volga. At first, he wrote down the letter l from the position 3, after that his word looked like voga. After that Polycarp wrote down the letter o from the position 2, his word became vga. Then Polycarp wrote down the letter g which was at the second position, the word became va. Then he wrote down the letter v, then the letter a. Thus, the encoding looked like logva.\n\nIn the second example Polycarp encoded the word no. He wrote down the letter n, the word became o, and he wrote down the letter o. Thus, in this example, the word and its encoding are the same.\n\nIn the third example Polycarp encoded the word baba. At first, he wrote down the letter a, which was at the position 2, after that the word looked like bba. Then he wrote down the letter b, which was at the position 2, his word looked like ba. After that he wrote down the letter b, which was at the position 1, the word looked like a, and he wrote down that letter a. Thus, the encoding is abba.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["#!/usr/bin/env python3\n\ndef main():\n\ttry:\n\t\twhile True:\n\t\t\tn = int(input())\n\t\t\ts = input()\n\t\t\tresult = \"\"\n\t\t\tfor m, c in enumerate(reversed(s)):\n\t\t\t\tresult = result[:m >> 1] + c + result[m >> 1:]\n\n\t\t\tprint(result)\n\n\texcept EOFError:\n\t\tpass\n\nmain()\n", "n = int(input())\ns = input()\nf = bool(n % 2)\nrt = []\nlt = []\nfor i in s:\n\tif (f):\n\t\trt.append(i)\n\telse:\n\t\tlt.append(i)\n\tf = not f\nprint(\"\".join(lt[::-1]) + \"\".join(rt))\n", "n = int(input())\ns = input()\n\nif n % 2 == 1:\n\tres = s[n - 2:0:-2] + s[0] + s[2::2]\nelse:\n\tres = s[n - 2::-2] + s[1::2]\n\nprint(res)\n", "n = int(input())\ns = input()\nt = \"\"\ni = 0\nif n % 2 == 1:\n\tt = s[0]\n\ti = 1\nwhile i < n:\n\tt = s[i] + t + s[i + 1]\n\ti += 2\nprint(t)\n", "n = int(input())\na = input()\nA = [0] * len(a)\nfor j in range(len(a)):\n\tif j % 2 == 0:\n\t\tA[-(j//2+1)] = a[len(a) - 1 - j]\n\telse:\n\t\tA[j//2] = a[len(a)-1-j]\nprint(''.join(map(str,A)))\n", "n = int(input())\ns = input()\ns = s[::-1]\nf = True\nans = []\nfor i in s:\n\tif f:\n\t\tans.insert((len(ans) + 1) // 2, i)\n\t\tf = False\n\telse:\n\t\tans.insert(len(ans) // 2, i)\n\t\tf = True\nprint(''.join(str(i) for i in ans))\n", "#yl2 decode\nn=int(input())\ns=list(input())\nmed=s[len(s)//2]\ns0=''\nif len(s)%2==1:s0+=s.pop(0)\nwhile len(s)!=0:\n\ts0=s.pop(0)+s0\n\ts0+=s.pop(0)\nprint(s0)\n", "n,st = int(input()), input()\n\nif n % 2 == 0:\n\ts = 1\nelse:\n\ts = 0\n\nans = ''\nfor i in st:\n\tif s == 0:\n\t\tans = ans + i\n\telse:\n\t\tans = i + ans\n\ts = 1-s\n\nprint(ans)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# n = int(input())\n#\n# a, b = [int(i) for i in input().split()]\n#\n\nn = int(input())\nslovo = input()\notvet='' \nwhile slovo!='':\n\ten=slovo[0]\n\tif len(slovo)%2==1:\n\t\totvet=otvet+en\n\telse:\n\t\totvet=en+otvet\n\tslovo=slovo[1:]\nprint(otvet)\n\t\n\t\t\n \n\n\t\t\n\t\n\n", "n = int(input())\nword = input()\nnew_w = [0] * n\n\nif n % 2 == 1:\n\tmiddle = n // 2\n\tnew_w[middle] = word[0]\n\tfor i in range(1, middle + 1):\n\t\tnew_w[middle - i] = word[2 * i - 1]\n\t\tnew_w[middle + i] = word[2 * i]\n\tprint(\"\".join(new_w))\nelse:\n\tnew_w.append(\"\")\n\tmiddle = (n + 1) // 2\n\tnew_w[middle] = ''\n\tfor i in range(1, middle + 1):\n\t\tnew_w[middle - i] = word[2 * i - 2]\n\t\tnew_w[middle + i] = word[2 * i - 1]\n\tprint(\"\".join(new_w))\n", "from collections import deque\nn=int(input())\ns=input()\na=deque()\nif n%2==1:\n\tfor i in range(n):\n\t\tif i%2==0:\n\t\t\ta.append(s[i])\n\t\telse:\n\t\t\ta.appendleft(s[i])\nelse:\n\tfor i in range(n):\n\t\tif i%2==1:\n\t\t\ta.append(s[i])\n\t\telse:\n\t\t\ta.appendleft(s[i])      \na=list(a)\nprint(''.join(a))\n", "n = int(input())\ns = input().rstrip()\ns1 = s[-1-n%2::-2] + s[::2]\nprint(s1 if n%2 else s1[::-1])\n", "n = input()\nn = int(n.strip())\n\nniz = input()\nniz = niz.strip()\n\nresitev = niz[-1]\nfor k in range(len(niz) - 2, -1, -1):\n\tdol = len(resitev)\n\tif dol % 2 == 0:\n\t\tresitev = resitev[:dol//2] + niz[k] + resitev[dol//2:]\n\telse:\n\t\tdelim = (len(resitev) - 1) // 2\n\t\tresitev = resitev[:delim] + niz[k] + resitev[delim:]\nprint(resitev)\n", "from collections import defaultdict\nimport sys, os, math\n\ndef __starting_point():\n\t#n, m = list(map(int, input().split()))\n\tn = int(input())\n\ts = input()\n\tans = \"\"\n\tif len(s) % 2 == 1:\n\t\tans += s[0]\n\t\ts = s[1:]\n\tfor i in range(len(s)):\n\t\tif i % 2 == 0:\n\t\t\tans = s[i] + ans\n\t\telse:\n\t\t\tans = ans + s[i]\n\tprint(ans)\n__starting_point()\n", "n = int(input())\ns = input()\nans = \"\"\nfor i in range(n - 1, -1, -1):\n\tans = ans[:(n - i) // 2] + s[i] + ans[(n - i) // 2:]\nans2 = \"\"\nfor i in range(n - 1, -1, -1):\n\tans2 += ans[i]\nprint(ans2)\n", "n = int(input())\ns = input().strip()\n\n# n = 5\n# s = 'logva'\n\n# n = 4\n# s = 'nfio'\n\n# n = 2\n# s = 'no'\n\n# n = 4\n# s = 'abba'\n\nassert(len(s) == n)\n\nans = [None] * n\n\ni = 0\n\nif n % 2 == 1:\n\tans[n // 2] = s[0]\n\ti += 1\n\n\tleft = n // 2 - 1\n\tright = n // 2 + 1\nelse:\n\tleft = n // 2 - 1\n\tright = n // 2\n\nis_left = True\n\nwhile i < n:\n\tans[left if is_left else right] = s[i]\n\n\tif is_left:\n\t\tleft -= 1\n\telse:\n\t\tright += 1\n\n\tis_left = not is_left\n\ti += 1\n\n# print(ans)\nprint(''.join(ans))\n", "input()\nscrambled = input().strip()\nif len(scrambled) % 2:\n\tparity\t=1\nelse:\n\tparity\t=0\nunscrambled = \"\"\nwhile len(scrambled) > 0:\n\tif parity == 0:\n\t\tunscrambled\t= scrambled[0] + unscrambled\n\t\tparity=1\n\telse: \n\t\tunscrambled\t+= scrambled[0]\n\t\tparity\t=0\n\tscrambled = scrambled[1:]\nprint(unscrambled)\n", "n = int(input())\ns = input()\nres = \"\"\ni = 0\nwhile (i<len(s)):\n\tif (len(s)-i)%2==1:\n\t\tres += s[i]\n\telse:\n\t\tres = s[i] + res\n\ti+=1\n\nprint(res)\n", "n = int(input())\ns = input()\nsr = \"\"\nnn = n\nif n%2 == 1:\n\tflag = True\nelse:\n\tflag = False\nm = 0\nwhile m < n:\n\tif flag : sr = sr + s[m]\n\telse : sr = s[m] + sr\n\tflag = not flag\n\tm += 1\nprint(sr)\n", "n = int(input())\ns = input()\ns1 = ''\nfor i in range(len(s)-1,-1,-1):\n\ts1 = s1[:len(s1)//2]+s[i]+s1[len(s1)//2:]\nprint(s1)\n\t\t\n", "#!/usr/bin/env python3\n\nn = int(input())\n\nnmod = n % 2\n\nword = input()\nresult = []\nfor i, c in enumerate(word):\n\tif (i % 2) != nmod:\n\t\tresult = result + [c]\n\telse:\n\t\tresult = [c] + result\n\nprint(\"\".join(result))\n", "a = int(input())\ns = input()\nans = \"\"\nif (a%2 == 0) : cnt = 0\nelse : cnt = 1\nfor i in s:\n\tcnt += 1\n\tif (cnt%2 == 1) : ans = i+ans\n\telse : ans = ans+i\n\t#print(ans)\nprint(ans)\n", "n = int(input())\ns = input()\n\na = [\"\"]* (n)\n\nl = 1\nb = 0\nh = -1\nfor i in range(n - 1, -1, -1):\n\tif l % 2 == 1:\n\t\tb += 1\n\t\ta[n - b] = s[i]\n\telse:\n\t\th += 1\n\t\ta[h] = s[i]\n\tl += 1\nprint(\"\".join(map(str,a)))\n", "import sys\n\n\ndef main():\n\tn = int(sys.stdin.readline())\n\ts = sys.stdin.readline().rstrip()\n\n\tr = ['a']*n\n\tif n %2== 1:\n\t\tp = n//2\n\t\tr[p] = s[0]\n\t\tj = 1 \n\t\tfor i in range(1,n,2):\n\t\t\tr[p-j] = s[i]\n\t\t\tr[p+j] = s[i+1]\n\t\t\tj+=1\n\t\t\n\telse:\n\t\tp = n//2 - 1        \n\t\tj = 1 \n\t\tfor i in range(0,n,2):\n\t\t\tr[p-j+1] = s[i]\n\t\t\tr[p+j] = s[i+1]\n\t\t\tj+=1\n\n\n\tprint(''.join(r))    \n\nmain()\n"], "id": "id7658"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7658", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["polycarp", 2], ["is", 2], ["mad", 2], ["about", 2], ["coding", 2], ["that", 2], ["is", 2], ["why", 2], ["he", 2], ["writes", 2], ["sveta", 2], ["encoded", 2], ["messages", 2], ["he", 2], ["calls", 2], ["the", 2], ["median", 2], ["letter", 2], ["in", 2], ["a", 2], ["word", 2], ["the", 2], ["letter", 2], ["which", 2], ["is", 2], ["in", 2], ["the", 2], ["middle", 2], ["of", 2], ["the", 2], ["word", 2], ["if", 2], ["the", 2], ["word", 2], ["s", 2], ["length", 2], ["is", 2], ["even", 2], ["the", 2], ["median", 2], ["letter", 2], ["is", 2], ["the", 2], ["left", 2], ["of", 2], ["the", 2], ["two", 2], ["middle", 2], ["letters", 2], ["in", 2], ["the", 2], ["following", 2], ["examples", 2], ["the", 2], ["median", 2], ["letter", 2], ["is", 2], ["highlighted", 2], ["contest", 2], ["info", 2], ["if", 2], ["the", 2], ["word", 2], ["consists", 2], ["of", 2], ["single", 2], ["letter", 2], ["then", 2], ["according", 2], ["to", 2], ["above", 2], ["definition", 2], ["this", 2], ["letter", 2], ["is", 2], ["the", 2], ["median", 2], ["letter", 2], ["polycarp", 2], ["encodes", 2], ["each", 2], ["word", 2], ["in", 2], ["the", 2], ["following", 2], ["way", 2], ["he", 2], ["writes", 2], ["down", 2], ["the", 2], ["median", 2], ["letter", 2], ["of", 2], ["the", 2], ["word", 2], ["then", 2], ["deletes", 2], ["it", 2], ["and", 2], ["repeats", 2], ["the", 2], ["process", 2], ["until", 2], ["there", 2], ["are", 2], ["no", 2], ["letters", 2], ["left", 2], ["for", 2], ["example", 2], ["he", 2], ["encodes", 2], ["the", 2], ["word", 2], ["volga", 2], ["as", 2], ["logva", 2], ["you", 2], ["are", 2], ["given", 2], ["an", 0], ["encoding", 0], ["s", 0], ["of", 0], ["some", 0], ["word", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["decode", 0], ["it", 0], ["input", 8], ["the", 2], ["first", 2], ["line", 2], ["contains", 2], ["a", 2], ["positive", 2], ["integer", 2], ["n", 2], ["1", 2], ["≤", 2], ["n", 2], ["≤", 2], ["2000", 2], ["—", 2], ["the", 2], ["length", 2], ["of", 2], ["the", 2], ["encoded", 2], ["word", 2], ["the", 2], ["second", 2], ["line", 2], ["contains", 2], ["the", 2], ["string", 2], ["s", 0], ["of", 0], ["length", 0], ["n", 0], ["consisting", 0], ["of", 0], ["lowercase", 0], ["english", 0], ["letters", 0], ["—", 0], ["the", 0], ["encoding", 0], ["output", 0], ["print", 0], ["the", 0], ["word", 0], ["that", 0], ["polycarp", 0], ["encoded", 0], ["examples", 0], ["input", 0], ["5", 0], ["logva", 0], ["output", 0], ["volga", 0], ["input", 0], ["2", 0], ["no", 0], ["output", 0], ["no", 0], ["input", 0], ["4", 0], ["abba", 0], ["output", 0], ["baba", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["example", 2], ["polycarp", 2], ["encoded", 2], ["the", 2], ["word", 2], ["volga", 2], ["at", 2], ["first", 2], ["he", 2], ["wrote", 2], ["down", 2], ["the", 2], ["letter", 2], ["l", 2], ["from", 2], ["the", 2], ["position", 2], ["3", 2], ["after", 2], ["that", 2], ["his", 2], ["word", 2], ["looked", 2], ["like", 2], ["voga", 2], ["after", 2], ["that", 2], ["polycarp", 2], ["wrote", 2], ["down", 2], ["the", 2], ["letter", 2], ["o", 2], ["from", 2], ["the", 2], ["position", 2], ["2", 2], ["his", 2], ["word", 2], ["became", 2], ["vga", 2], ["then", 2], ["polycarp", 2], ["wrote", 2], ["down", 2], ["the", 2], ["letter", 2], ["g", 2], ["which", 2], ["was", 2], ["at", 2], ["the", 2], ["second", 2], ["position", 2], ["the", 2], ["word", 2], ["became", 2], ["va", 2], ["then", 2], ["he", 2], ["wrote", 2], ["down", 2], ["the", 2], ["letter", 2], ["v", 2], ["then", 2], ["the", 2], ["letter", 2], ["a", 2], ["thus", 2], ["the", 2], ["encoding", 2], ["looked", 2], ["like", 2], ["logva", 2], ["in", 2], ["the", 2], ["second", 2], ["example", 2], ["polycarp", 2], ["encoded", 2], ["the", 2], ["word", 2], ["no", 2], ["he", 2], ["wrote", 2], ["down", 2], ["the", 2], ["letter", 2], ["n", 2], ["the", 2], ["word", 2], ["became", 2], ["o", 2], ["and", 2], ["he", 2], ["wrote", 2], ["down", 2], ["the", 2], ["letter", 2], ["o", 2], ["thus", 2], ["in", 2], ["this", 2], ["example", 2], ["the", 2], ["word", 2], ["and", 2], ["its", 2], ["encoding", 2], ["are", 2], ["the", 2], ["same", 2], ["in", 2], ["the", 2], ["third", 2], ["example", 2], ["polycarp", 2], ["encoded", 2], ["the", 2], ["word", 2], ["baba", 2], ["at", 2], ["first", 2], ["he", 2], ["wrote", 2], ["down", 2], ["the", 2], ["letter", 2], ["a", 2], ["which", 2], ["was", 2], ["at", 2], ["the", 2], ["position", 2], ["2", 2], ["after", 2], ["that", 2], ["the", 2], ["word", 2], ["looked", 2], ["like", 2], ["bba", 2], ["then", 2], ["he", 2], ["wrote", 2], ["down", 2], ["the", 2], ["letter", 2], ["b", 2], ["which", 2], ["was", 2], ["at", 2], ["the", 2], ["position", 2], ["2", 2], ["his", 2], ["word", 2], ["looked", 2], ["like", 2], ["ba", 2], ["after", 2], ["that", 2], ["he", 2], ["wrote", 2], ["down", 2], ["the", 2], ["letter", 2], ["b", 2], ["which", 2], ["was", 2], ["at", 2], ["the", 2], ["position", 2], ["1", 2], ["the", 2], ["word", 2], ["looked", 2], ["like", 2], ["a", 2], ["and", 0], ["he", 0], ["wrote", 0], ["down", 0], ["that", 0], ["letter", 0], ["a", 0], ["thus", 0], ["the", 0], ["encoding", 0], ["is", 0], ["abba", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8483290488431876, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4232005141388175, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.912718204488778, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.456359102244389, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8483290488431876, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4232005141388175, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.912718204488778, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.456359102244389, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["def", 0], ["main", 0], ["try", 0], ["while", 0], ["true", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["result", 0], ["for", 0], ["m", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["reversed", 0], ["s", 0], ["result", 0], ["result", 0], ["m", 0], ["1", 0], ["c", 0], ["result", 0], ["m", 0], ["1", 0], ["print", 0], ["result", 0], ["except", 0], ["eoferror", 0], ["pass", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["f", 0], ["bool", 0], ["n", 0], ["2", 0], ["rt", 0], ["lt", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["f", 0], ["rt", 0], ["append", 0], ["i", 0], ["else", 0], ["lt", 0], ["append", 0], ["i", 0], ["f", 0], ["not", 0], ["f", 0], ["print", 0], ["join", 0], ["lt", 0], ["1", 0], ["join", 0], ["rt", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["res", 0], ["s", 0], ["n", 0], ["2", 0], ["0", 0], ["2", 0], ["s", 0], ["0", 0], ["s", 0], ["2", 0], ["2", 0], ["else", 0], ["res", 0], ["s", 0], ["n", 0], ["2", 0], ["2", 0], ["s", 0], ["1", 0], ["2", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["t", 0], ["i", 0], ["0", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["t", 0], ["s", 0], ["0", 0], ["i", 0], ["1", 0], ["while", 0], ["i", 0], ["n", 0], ["t", 0], ["s", 0], ["i", 0], ["t", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["2", 0], ["print", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["a", 0], ["0", 0], ["len", 0], ["a", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["j", 0], ["2", 0], ["0", 0], ["a", 0], ["j", 0], ["2", 0], ["1", 0], ["a", 0], ["len", 0], ["a", 0], ["1", 0], ["j", 0], ["else", 0], ["a", 0], ["j", 0], ["2", 0], ["a", 0], ["len", 0], ["a", 0], ["1", 0], ["j", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["s", 0], ["s", 0], ["1", 0], ["f", 0], ["true", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["f", 0], ["ans", 0], ["insert", 0], ["len", 0], ["ans", 0], ["1", 0], ["2", 0], ["i", 0], ["f", 0], ["false", 0], ["else", 0], ["ans", 0], ["insert", 0], ["len", 0], ["ans", 0], ["2", 0], ["i", 0], ["f", 0], ["true", 0], ["print", 0], ["join", 0], ["str", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["yl2", 0], ["decode", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["input", 0], ["med", 0], ["s", 0], ["len", 0], ["s", 0], ["2", 0], ["s0", 0], ["if", 0], ["len", 0], ["s", 0], ["2", 0], ["1", 0], ["s0", 0], ["s", 0], ["pop", 0], ["0", 0], ["while", 0], ["len", 0], ["s", 0], ["0", 0], ["s0", 0], ["s", 0], ["pop", 0], ["0", 0], ["s0", 0], ["s0", 0], ["s", 0], ["pop", 0], ["0", 0], ["print", 0], ["s0", 0], ["n", 0], ["st", 0], ["int", 0], ["input", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["s", 0], ["1", 0], ["else", 0], ["s", 0], ["0", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["st", 0], ["if", 0], ["s", 0], ["0", 0], ["ans", 0], ["ans", 0], ["i", 0], ["else", 0], ["ans", 0], ["i", 0], ["ans", 0], ["s", 0], ["1", 0], ["s", 0], ["print", 0], ["ans", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["slovo", 0], ["input", 0], ["otvet", 0], ["while", 0], ["slovo", 0], ["en", 0], ["slovo", 0], ["0", 0], ["if", 0], ["len", 0], ["slovo", 0], ["2", 0], ["1", 0], ["otvet", 0], ["otvet", 0], ["en", 0], ["else", 0], ["otvet", 0], ["en", 0], ["otvet", 0], ["slovo", 0], ["slovo", 0], ["1", 0], ["print", 0], ["otvet", 0], ["n", 0], ["int", 0], ["input", 0], ["word", 0], ["input", 0], ["new", 0], ["w", 0], ["0", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["middle", 0], ["n", 0], ["2", 0], ["new", 0], ["w", 0], ["middle", 0], ["word", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["middle", 0], ["1", 0], ["new", 0], ["w", 0], ["middle", 0], ["i", 0], ["word", 0], ["2", 0], ["i", 0], ["1", 0], ["new", 0], ["w", 0], ["middle", 0], ["i", 0], ["word", 0], ["2", 0], ["i", 0], ["print", 0], ["join", 0], ["new", 0], ["w", 0], ["else", 0], ["new", 0], ["w", 0], ["append", 0], ["middle", 0], ["n", 0], ["1", 0], ["2", 0], ["new", 0], ["w", 0], ["middle", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["middle", 0], ["1", 0], ["new", 0], ["w", 0], ["middle", 0], ["i", 0], ["word", 0], ["2", 0], ["i", 0], ["2", 0], ["new", 0], ["w", 0], ["middle", 0], ["i", 0], ["word", 0], ["2", 0], ["i", 0], ["1", 0], ["print", 0], ["join", 0], ["new", 0], ["w", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["deque", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["a", 0], ["append", 0], ["s", 0], ["i", 0], ["else", 0], ["a", 0], ["appendleft", 0], ["s", 0], ["i", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["2", 0], ["1", 0], ["a", 0], ["append", 0], ["s", 0], ["i", 0], ["else", 0], ["a", 0], ["appendleft", 0], ["s", 0], ["i", 0], ["a", 0], ["list", 0], ["a", 0], ["print", 0], ["join", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["rstrip", 0], ["s1", 0], ["s", 0], ["1", 0], ["n", 0], ["2", 0], ["2", 0], ["s", 0], ["2", 0], ["print", 0], ["s1", 0], ["if", 0], ["n", 0], ["2", 0], ["else", 0], ["s1", 0], ["1", 0], ["n", 0], ["input", 0], ["n", 0], ["int", 0], ["n", 0], ["strip", 0], ["niz", 0], ["input", 0], ["niz", 0], ["niz", 0], ["strip", 0], ["resitev", 0], ["niz", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["len", 0], ["niz", 0], ["2", 0], ["1", 0], ["1", 0], ["dol", 0], ["len", 0], ["resitev", 0], ["if", 0], ["dol", 0], ["2", 0], ["0", 0], ["resitev", 0], ["resitev", 0], ["dol", 0], ["2", 0], ["niz", 0], ["k", 0], ["resitev", 0], ["dol", 0], ["2", 0], ["else", 0], ["delim", 0], ["len", 0], ["resitev", 0], ["1", 0], ["2", 0], ["resitev", 0], ["resitev", 0], ["delim", 0], ["niz", 0], ["k", 0], ["resitev", 0], ["delim", 0], ["print", 0], ["resitev", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["import", 0], ["sys", 0], ["os", 0], ["math", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ans", 0], ["if", 0], ["len", 0], ["s", 0], ["2", 0], ["1", 0], ["ans", 0], ["s", 0], ["0", 0], ["s", 0], ["s", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["ans", 0], ["s", 0], ["i", 0], ["ans", 0], ["else", 0], ["ans", 0], ["ans", 0], ["s", 0], ["i", 0], ["print", 0], ["ans", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["ans", 0], ["ans", 0], ["n", 0], ["i", 0], ["2", 0], ["s", 0], ["i", 0], ["ans", 0], ["n", 0], ["i", 0], ["2", 0], ["ans2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["ans2", 0], ["ans", 0], ["i", 0], ["print", 0], ["ans2", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["strip", 0], ["n", 0], ["5", 0], ["s", 0], ["logva", 0], ["n", 0], ["4", 0], ["s", 0], ["nfio", 0], ["n", 0], ["2", 0], ["s", 0], ["no", 0], ["n", 0], ["4", 0], ["s", 0], ["abba", 0], ["assert", 0], ["len", 0], ["s", 0], ["n", 0], ["ans", 0], ["none", 0], ["n", 0], ["i", 0], ["0", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["ans", 0], ["n", 0], ["2", 0], ["s", 0], ["0", 0], ["i", 0], ["1", 0], ["left", 0], ["n", 0], ["2", 0], ["1", 0], ["right", 0], ["n", 0], ["2", 0], ["1", 0], ["else", 0], ["left", 0], ["n", 0], ["2", 0], ["1", 0], ["right", 0], ["n", 0], ["2", 0], ["is", 0], ["left", 0], ["true", 0], ["while", 0], ["i", 0], ["n", 0], ["ans", 0], ["left", 0], ["if", 0], ["is", 0], ["left", 0], ["else", 0], ["right", 0], ["s", 0], ["i", 0], ["if", 0], ["is", 0], ["left", 0], ["left", 0], ["1", 0], ["else", 0], ["right", 0], ["1", 0], ["is", 0], ["left", 0], ["not", 0], ["is", 0], ["left", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["print", 0], ["join", 0], ["ans", 0], ["input", 0], ["scrambled", 0], ["input", 0], ["strip", 0], ["if", 0], ["len", 0], ["scrambled", 0], ["2", 0], ["parity", 0], ["1", 0], ["else", 0], ["parity", 0], ["0", 0], ["unscrambled", 0], ["while", 0], ["len", 0], ["scrambled", 0], ["0", 0], ["if", 0], ["parity", 0], ["0", 0], ["unscrambled", 0], ["scrambled", 0], ["0", 0], ["unscrambled", 0], ["parity", 0], ["1", 0], ["else", 0], ["unscrambled", 0], ["scrambled", 0], ["0", 0], ["parity", 0], ["0", 0], ["scrambled", 0], ["scrambled", 0], ["1", 0], ["print", 0], ["unscrambled", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["res", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["len", 0], ["s", 0], ["i", 0], ["2", 0], ["1", 0], ["res", 0], ["s", 0], ["i", 0], ["else", 0], ["res", 0], ["s", 0], ["i", 0], ["res", 0], ["i", 0], ["1", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["sr", 0], ["nn", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["flag", 0], ["true", 0], ["else", 0], ["flag", 0], ["false", 0], ["m", 0], ["0", 0], ["while", 0], ["m", 0], ["n", 0], ["if", 0], ["flag", 0], ["sr", 0], ["sr", 0], ["s", 0], ["m", 0], ["else", 0], ["sr", 0], ["s", 0], ["m", 0], ["sr", 0], ["flag", 0], ["not", 0], ["flag", 0], ["m", 0], ["1", 0], ["print", 0], ["sr", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["s1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["1", 0], ["1", 0], ["s1", 0], ["s1", 0], ["len", 0], ["s1", 0], ["2", 0], ["s", 0], ["i", 0], ["s1", 0], ["len", 0], ["s1", 0], ["2", 0], ["print", 0], ["s1", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["n", 0], ["int", 0], ["input", 0], ["nmod", 0], ["n", 0], ["2", 0], ["word", 0], ["input", 0], ["result", 0], ["for", 0], ["i", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["word", 0], ["if", 0], ["i", 0], ["2", 0], ["nmod", 0], ["result", 0], ["result", 0], ["c", 0], ["else", 0], ["result", 0], ["c", 0], ["result", 0], ["print", 0], ["join", 0], ["result", 0], ["a", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ans", 0], ["if", 0], ["a", 0], ["2", 0], ["0", 0], ["cnt", 0], ["0", 0], ["else", 0], ["cnt", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["cnt", 0], ["1", 0], ["if", 0], ["cnt", 0], ["2", 0], ["1", 0], ["ans", 0], ["i", 0], ["ans", 0], ["else", 0], ["ans", 0], ["ans", 0], ["i", 0], ["print", 0], ["ans", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["n", 0], ["l", 0], ["1", 0], ["b", 0], ["0", 0], ["h", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["l", 0], ["2", 0], ["1", 0], ["b", 0], ["1", 0], ["a", 0], ["n", 0], ["b", 0], ["s", 0], ["i", 0], ["else", 0], ["h", 0], ["1", 0], ["a", 0], ["h", 0], ["s", 0], ["i", 0], ["l", 0], ["1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["import", 0], ["sys", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["s", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["r", 0], ["a", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["p", 0], ["n", 0], ["2", 0], ["r", 0], ["p", 0], ["s", 0], ["0", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["2", 0], ["r", 0], ["p", 0], ["j", 0], ["s", 0], ["i", 0], ["r", 0], ["p", 0], ["j", 0], ["s", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["else", 0], ["p", 0], ["n", 0], ["2", 0], ["1", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["2", 0], ["r", 0], ["p", 0], ["j", 0], ["1", 0], ["s", 0], ["i", 0], ["r", 0], ["p", 0], ["j", 0], ["s", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["print", 0], ["join", 0], ["r", 0], ["main", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nWilbur is playing with a set of n points on the coordinate plane. All points have non-negative integer coordinates. Moreover, if some point (x, y) belongs to the set, then all points (x', y'), such that 0 ≤ x' ≤ x and 0 ≤ y' ≤ y also belong to this set.\n\nNow Wilbur wants to number the points in the set he has, that is assign them distinct integer numbers from 1 to n. In order to make the numbering aesthetically pleasing, Wilbur imposes the condition that if some point (x, y) gets number i, then all (x',y') from the set, such that x' ≥ x and y' ≥ y must be assigned a number not less than i. For example, for a set of four points (0, 0), (0, 1), (1, 0) and (1, 1), there are two aesthetically pleasing numberings. One is 1, 2, 3, 4 and another one is 1, 3, 2, 4.\n\nWilbur's friend comes along and challenges Wilbur. For any point he defines it's special value as s(x, y) = y - x. Now he gives Wilbur some w_1, w_2,..., w_{n}, and asks him to find an aesthetically pleasing numbering of the points in the set, such that the point that gets number i has it's special value equal to w_{i}, that is s(x_{i}, y_{i}) = y_{i} - x_{i} = w_{i}.\n\nNow Wilbur asks you to help him with this challenge.\n\n\n-----Input-----\n\nThe first line of the input consists of a single integer n (1 ≤ n ≤ 100 000) — the number of points in the set Wilbur is playing with.\n\nNext follow n lines with points descriptions. Each line contains two integers x and y (0 ≤ x, y ≤ 100 000), that give one point in Wilbur's set. It's guaranteed that all points are distinct. Also, it is guaranteed that if some point (x, y) is present in the input, then all points (x', y'), such that 0 ≤ x' ≤ x and 0 ≤ y' ≤ y, are also present in the input.\n\nThe last line of the input contains n integers. The i-th of them is w_{i} ( - 100 000 ≤ w_{i} ≤ 100 000) — the required special value of the point that gets number i in any aesthetically pleasing numbering.\n\n\n-----Output-----\n\nIf there exists an aesthetically pleasant numbering of points in the set, such that s(x_{i}, y_{i}) = y_{i} - x_{i} = w_{i}, then print \"YES\" on the first line of the output. Otherwise, print \"NO\".\n\nIf a solution exists, proceed output with n lines. On the i-th of these lines print the point of the set that gets number i. If there are multiple solutions, print any of them.\n\n\n-----Examples-----\nInput\n5\n2 0\n0 0\n1 0\n1 1\n0 1\n0 -1 -2 1 0\n\nOutput\nYES\n0 0\n1 0\n2 0\n0 1\n1 1\n\nInput\n3\n1 0\n0 0\n2 0\n0 1 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample, point (2, 0) gets number 3, point (0, 0) gets number one, point (1, 0) gets number 2, point (1, 1) gets number 5 and point (0, 1) gets number 4. One can easily check that this numbering is aesthetically pleasing and y_{i} - x_{i} = w_{i}.\n\nIn the second sample, the special values of the points in the set are 0,  - 1, and  - 2 while the sequence that the friend gives to Wilbur is 0, 1, 2. Therefore, the answer does not exist.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["def __starting_point():\n\n\tn = int( input() )\n\n\tmaxX = [-1]*100005\n\tfor _ in range(n):\n\t\tpx,py = [int(x) for x in input().split()]\n\t\tmaxX[py] = max( maxX[py] , px )\n\n\t#print( maxX[:2] )\n\n\tw = [int(x) for x in input().split()]\n\n\tp = [-1]*100005\n\tp[0] = 0\n\twdict = dict()\n\twdict[0] = (0,0)\n\tres = []\n\tfor wi in w:\n\t\tif wi in wdict:\n\t\t\tpx , py = wdict.pop(wi)\n\t\t\tres.append( (px,py) )\n\t\t\tif maxX[py] > px:\n\t\t\t\twdict[py-(px+1)] = (px+1,py)\n\t\t\t\tp[py] += 1\n\t\t\tif maxX[py+1] != -1 and p[py+1] == -1:\n\t\t\t\twdict[py+1] = (0,py+1)\n\t\t\t\tp[py+1] += 1\n\t\telse:\n\t\t\tbreak\n\n\tif len(res) == n:\n\t\tprint(\"YES\")\n\t\tfor ares in res:\n\t\t\tprint(ares[0],ares[1])\n\telse:\n\t\tprint(\"NO\")\n__starting_point()\n", "from collections import defaultdict\n\n\ndef solve():\n\tN = int(input())\n\n\tmaxx = 0\n\tmaxy = 0\n\tWS = defaultdict(list)\n\n\tfor i in range(N):\n\t\tx, y = list(map(int, input().split()))\n\t\tWS[y - x].append((x, y))\n\t\tmaxx = max(maxx, x)\n\t\tmaxy = max(maxy, y)\n\n\tfor w in WS:\n\t\tWS[w].sort(reverse=True)\n\n\tW = list(map(int, input().split()))\n\n\tans = [None] * N\n\n\tmx = [0] * (maxy + 1)\n\tmy = [0] * (maxx + 1)\n\n\tfor i in range(N):\n\t\tw = W[i]\n\t\tif WS[w]:\n\t\t\tans[i] = ax, ay = WS[w].pop()\n\t\t\tif mx[ay] == ax and my[ax] == ay:\n\t\t\t\tmx[ay] = ax + 1\n\t\t\t\tmy[ax] = ay + 1\n\n\t\t\telse:\n\t\t\t\tprint('NO')\n\t\t\t\treturn\n\t\telse:\n\t\t\tprint('NO')\n\t\t\treturn\n\n\tprint('YES')\n\tfor a in ans:\n\t\tprint(a[0], a[1])\n\n\ndef __starting_point():\n\tsolve()\n\n__starting_point()\n", "from collections import deque\ndp={}\nfor i in range(int(input())):\n\tx,y = list(map(int, input().split()))\n\tif y-x in dp:\n\t\tdp[y-x].append((x,y))\n\telse:\n\t\tdp[y-x]=[(x,y)]\nfor i in dp:\n\tdp[i].sort()\n\tdp[i]=deque(dp[i])\nw=list(map(int, input().split()))\nans=[0]*len(w)\nflag=1\nfor i in range(len(w)):\n\tif not w[i] in dp or not len(dp[w[i]]):\n\t\tflag=0\n\t\tbreak\n\tans[i]=dp[w[i]].popleft()\nif not flag:\n\tprint(\"NO\")\nelse:\n\tfor i in range(1,len(ans)):\n\t\tif ans[i][0]<=ans[i-1][0] and ans[i][1]<=ans[i-1][1]:\n\t\t\tflag=0\n\tif not flag:\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"YES\")\n\t\tfor i in ans:\n\t\t\tprint(i[0], i[1])\n", "n = int(input())\nMAX = 100000\ncoord = [list() for i in range(2 * MAX + 1)]\nfor i in range(n):\n\tx, y = map(int, input().split())\n\tcoord[y - x - MAX].append((x, y))\nw = list(map(int, input().split()))\nfor i in range(2 * MAX + 1):\n\tcoord[i].sort()\nans = [(0, 0) for i in range(n)]\npossible = True\nlast_x = [-1] * (MAX + 1)\nlast_y = [-1] * (MAX + 1)\nfor i in range(n):\n\tif len(coord[w[i] - MAX]) > 0:\n\t\tx = coord[w[i] - MAX][0][0]\n\t\ty = coord[w[i] - MAX][0][1]\n\t\tif last_x[y] == x - 1 and last_y[x] == y - 1:\n\t\t\tlast_x[y] += 1\n\t\t\tlast_y[x] += 1\n\t\t\tans[i] = x, y\n\t\t\tcoord[w[i] - MAX].pop(0)\n\t\telse:\n\t\t\tpossible = False\n\t\t\tbreak\n\telse:\n\t\tpossible = False\n\t\tbreak    \nif possible:\n\tprint(\"YES\")\n\tprint(\"\\n\".join([\" \".join(map(str, coords)) for coords in ans]))\nelse:\n\tprint(\"NO\")\n", "import collections\nimport heapq\n\nclass SegmentTree(object):\n\tdef __init__(self, size):\n\t\tself.capacity = 1 << (len(bin(size - 1)) - 2)\n\t\tself.tree = [-1] * self.capacity * 2\n\t\tself.tree[0] = size\n\t\tself.left = set()\n\t\tp = self.capacity\n\t\twhile p:\n\t\t\tself.left.add(p)\n\t\t\tp >>= 1\n\t\t\n\n\tdef update(self, x, y):\n\t\tpos = self.capacity + x\n\t\twhile pos:\n\t\t\tif y > self.tree[pos]:\n\t\t\t\tself.tree[pos] = y\n\t\t\tpos >>= 1\n\n\n\tdef getmax(self, x):\n\t\tpos = self.capacity + x\n\t\ty = self.tree[pos]\n\t\twhile pos:\n\t\t\tif y < self.tree[pos]:\n\t\t\t\ty = self.tree[pos]\n\t\t\tif pos & 1:\n\t\t\t\tpos = (pos >> 1) + 1\n\t\t\t\tif pos in self.left:\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tpos >>= 1\n\t\treturn y\n\t\n\ndef read_data():\n\tn = int(input())\n\tsxy = collections.defaultdict(list)\n\tfor i in range(n):\n\t\tx, y = map(int, input().split())\n\t\theapq.heappush(sxy[y - x], x)\n\tws = list(map(int, input().split()))\n\treturn n, sxy, ws\n\ndef solve(n, sxy, ws):\n\tpath = []\n\tfor w in ws:\n\t\tsxyw = sxy[w]\n\t\tif sxyw:\n\t\t\tx = heapq.heappop(sxy[w])\n\t\t\ty = w + x\n\t\t\tpath.append((x, y))\n\t\telse:\n\t\t\treturn False\n\tif is_valid(path):\n\t\treturn path\n\telse:\n\t\treturn False\n\ndef is_valid(path):\n\txys = compress(path)\n\tsegtree = SegmentTree(len(xys))\n\tfor x, y in xys:\n\t\tmaxy = segtree.getmax(x)\n\t\tif maxy >= y:\n\t\t\treturn False\n\t\tsegtree.update(x, y)\n\treturn True\n\t\t\ndef compress(path):\n\txset = set()\n\tfor x, y in path:\n\t\txset.add(x)\n\txuniq = list(xset)\n\txuniq.sort()\n\tdic = {x: i for i, x in enumerate(xuniq)}\n\txys = [(dic[x], y) for x, y in path]\n\treturn xys\n\n\nn, sxy, ws = read_data()\nresult = solve(n, sxy, ws)\nif result:\n\tprint('YES')\n\tfor x, y in result:\n\t\tprint(x, y)\nelse:\n\tprint('NO')\n", "n = int(input())\n\nopens = {}\nsums = [n - i for i in range(n)] + [0] * (n + 1)\nfor i in range(n):\n\tt = tuple(map(int, input().split()))\n\topens[t] = 1\n\t\nnums = list(map(int, input().split()))\nres = 1\nres_nums = []\nfor elem in nums:\n\tf = 1\n\tx = 0\n\ttry:\n\t\tx = sums[elem + n]\n\texcept:\n\t\tf = 0\n\ty = x + elem\n\t\n\ttry:\n\t\tu = opens[x, y]\n\texcept KeyError:\n\t\tf = 0\n\ttry:\n\t\tif opens[x, y - 1] == 1:\n\t\t\tf = 0\n\texcept KeyError:\n\t\tpass\n\ttry:\n\t\tif opens[x - 1, y] == 1:\n\t\t\tf = 0\n\texcept KeyError:\n\t\tpass    \n\tif f == 0: \n\t\tres = 0\n\t\tbreak\n\tsums[elem + n] += 1\n\topens[x, y] = 0\n\tres_nums.append((x, y))\n\t\n\t\nprint('YES' if res else 'NO')\nif res:\n\tfor elem in res_nums:\n\t\tprint(str(elem[0]) + ' ' + str(elem[1]))\n", "from bisect import bisect_left\n\nn = int(input())\nmas = []\nfor i in range(n):\n\tmas.append(0)\t\nfor i in range(n):\n\tx,y = list(map ( int, input().split()))\n\tmas[x] = max(mas[x], y)\nw = list(map(int, input().split()))\nfor i in range(n):\n\tw[i] = -w[i]\ns = []\nr = []\nres1 = []\nres2 = []\nres3 = []\n\nfor i in range(n):\n\ts.append(i)\t\n\tr.append(i)\n\tres2.append(-1)\n\ts[i] -= mas[i] + 1\t\n\nerror = 0\nfor i in range(n):\n\tif error == 1:\n\t\tbreak\n\tt = bisect_left(r, w[i])\n\tif ( t >= n or r[t] != w[i] ):\n\t\terror = 1\n\t\tbreak\n\telse:\n\t\tr[t] = r[t] - 1\n\t\tif ( ( r[t] < s[t] ) or ( t > 0 and r[t] == r[t-1] ) ):\n\t\t\terror = 1    \n\t\t\tbreak\n\tres1.append(t)\n\tres2[t] = res2[t] + 1\n\tres3.append( res2[t])\t\n\nif error == 1:\n\tprint(\"NO\")\t\t\nelse:\n\tprint(\"YES\")\n\tfor i in range(n):\n\t\tprint( str(res1[i]) + \" \" + str(res3[i]))\n", "def main():\n\tn = int(input())\n\tdiag = [0] * 200005\n\tuse = [0] * 200005\n\tfor i in range(n):\n\t\tx, y = [int(i) for i in input().split(' ')]\n\t\tc = y - x\n\t\tif c > 0:\n\t\t\tdiag[c] = max(x+1, diag[c])\n\t\telse:\n\t\t\tdiag[c] = max(y+1, diag[c])\n\n\ttable = set()\n\tfor i in range(100005):\n\t\ttable.add((-1, i))\n\t\ttable.add((i, -1))\n\n\tresult = []\n\n\tfor v in [int(i) for i in input().split(' ')]:\n\t\t# print(v)\n\t\tif v > 0:\n\t\t\tx = use[v]\n\t\t\ty = x + v\n\t\telse:\n\t\t\ty = use[v]\n\t\t\tx = y - v\n\n\t\t# print(x, y, use[v], diag[v], use[v] > diag[v], (x-1, y) not in table, (x, y-1) not in table)\n\n\t\tuse[v] += 1\n\n\t\tif use[v] > diag[v]:\n\t\t\tprint ('NO')\n\t\t\treturn\n\n\t\tif (x-1, y) not in table or (x, y-1) not in table:\n\t\t\tprint ('NO')\n\t\t\treturn\n\t\ttable.add((x, y))\n\t\tresult.append((x, y))\n\n\tprint('YES')\n\tfor v in result:\n\t\tprint(v[0], v[1])\n\nmain()\n", "from sys import stdin\n_data = iter(stdin.read().split('\\n'))\ninput = lambda: next(_data)\n\nn = int(input())\nref, front = {}, {}\nans = []\nmax_x, max_y = 0, 0\nfor _ in range(n):\n\tx, y = list(map(int, input().split()))\n\tmax_x = max(max_x, x)\n\tmax_y = max(max_y, y)    \n\tref[(x, y)] = 2\n\tif x == 0:\n\t\tref[(x, y)] -= 1\n\tif y == 0:\n\t\tref[(x, y)] -= 1\n\tif (x, y) == (0, 0):\n\t\tdel ref[(x, y)]\n\t\tfront[y - x] = x, y\nws = list(map(int, input().split()))\nfor w in ws:\n\tif w not in front:\n\t\tans = []\n\t\tbreak\n\tx, y = front.pop(w)\n\tans.append((x, y))    \n\tfor dx, dy in ((1, 0), (0, 1)):\n\t\tnx, ny = x + dx, y + dy\n\t\tif (nx, ny) not in ref:\n\t\t\tcontinue\n\t\tref[(nx, ny)] -= 1\n\t\tif ref[(nx, ny)] == 0:\n\t\t\tdel ref[(nx, ny)]\n\t\t\tfront[ny - nx] = (nx, ny)\nif ans:\n\tprint('YES')\n\tprint('\\n'.join('{} {}'.format(x, y) for x, y in ans))\nelse:\n\tprint('NO')\n", "# import sys\n# sys.stdin = open('cf596c.in')\n\nfrom collections import namedtuple, defaultdict, Counter\n\nPoint = namedtuple(\"Point\", \"x y\")\n\nn = int(input())\npts = [Point(*list(map(int, input().split()))) for _ in range(n)]\n\nhave = Counter()\nfor pt in pts:\n\thave[pt.y - pt.x] += 1\n\nws = list(map(int, input().split()))\nbuckets = defaultdict(list)\n\nfor i, w in enumerate(ws):\n\tif have[w] == 0 or (\n\t\t(w == 0 and (len(buckets[1]) != len(buckets[0]) or (len(buckets[-1]) != len(buckets[0])))) or\n\t\t(w > 0 and ((len(buckets[w + 1]) != len(buckets[w])) or (len(buckets[w - 1]) != len(buckets[w]) + 1))) or\n\t\t(w < 0 and ((len(buckets[w - 1]) != len(buckets[w])) or (len(buckets[w + 1]) != len(buckets[w]) + 1)))\n\t\t):\n\t\tprint('NO')\n\t\treturn\n\tbuckets[w].append(i)\n\thave[w] -= 1\n\nans = []\nfor w, bucket in list(buckets.items()):\n\tfor x, i in enumerate(bucket, max(0, -w)):\n\t\tans.append((Point(x, w + x), i))\n\nans.sort(key=lambda item: item[1])\nprint('YES')\nprint('\\n'.join('%d %d' % pt for pt, i in ans))\n", "__author__ = 'mac'\n\nfrom collections import Counter\n\ndef sortByDiag(elem):\n\treturn elem[0]*elem[0]+elem[1]*elem[1]\n\ncount = int(input())\npoints = {}\ncompList = []\nfor i in range(count):\n    x,y = [int(x) for x in input().strip().split(' ')]\n    w = y-x\n    compList.append(w)\n    if not w in points:\n\tpoints[w] = []\n    points[w].append([x,y])\n\nwArr = []\nfor x in input().strip().split(' '):\n    if (len(wArr) > 1 and int(x) == wArr[-1]) or (abs(int(x))>len(wArr)):\n\tprint('NO')\n\treturn\n    wArr.append(int(x))\n\n\n\nc1 = Counter(wArr)\nc2 = Counter(compList)\n\ndiff = c1-c2\nif len(list(diff.elements())) != 0:\n     print('NO')\n     return\n\nprint('YES')\n\nfor e in points:\n    points[e] = sorted(points[e], key = sortByDiag)\n\nfor i in wArr:\n    temp = points[i].pop(0)\n    print(temp[0],temp[1])\n", "from collections import deque\n\n\ndef ordering(s, ws):\n\tpbs = {}\n\tfor p in sorted(s):\n\t\tpbs.setdefault(p[1]-p[0], deque()).append(p)\n\n\to = []\n\tos = set()\n\tfor w in ws:\n\t\ttry:\n\t\t\tp = pbs[w].popleft()\n\t\texcept (IndexError, KeyError):\n\t\t\treturn None\n\n\t\tif ((p[0] > 0 and (p[0]-1, p[1]) not in os)\n\t\t\tor (p[1] > 0 and (p[0], p[1]-1) not in os)):\n\t\t\treturn None\n\n\t\to.append(p)\n\t\tos.add(p)\n\n\n\treturn o\n\n\ndef pair(x, y):\n\treturn x, y\n\n\ndef __starting_point():\n\tn = int(input())\n\ts = {pair(*list(map(int, input().split()))) for _ in range(n)}\n\tws = tuple(map(int, input().split()))\n\to = ordering(s, ws)\n\tif o:\n\t\tprint('YES')\n\t\tfor p in o:\n\t\t\tprint('{} {}'.format(*p))\n\telse:\n\t\tprint('NO')\n\n__starting_point()\n", "n = int(input())\nR = lambda : list(map(int, input().split()))\n\np = []\nw = {}\nr = {}\npr = {}\n\nfrom collections import deque\n\nfor _ in range(n):\n\tx,y = R()\n\tp.append((x,y))\n\np = sorted(p)\n\nfor i,wi in enumerate(list(R()),1):\n\tif wi not in w:\n\t\tw[wi] = deque()\n\tw[wi].append(i)\n\ndef solve(p,w,r):\n\tfor i in range(len(p)):\n\t\td = p[i][1]-p[i][0]\n\t\tif d in w:\n\t\t\tq = w[d]\n\t\t\tif len(q) > 0:\n\t\t\t\tind = q.popleft()\n\t\t\t\tr[ind] = p[i]\n\t\t\t\tpr[p[i]] = ind\n\t\t\t\tif not check_neighbours(p[i],ind,pr):\n\t\t\t\t\treturn 0\n\t\t\telse:\n\t\t\t\treturn 0\n\t\telse:\n\t\t\treturn 0\n\n\treturn 1\n\ndef check_neighbours(p,ind,pr):\n\tn1 = (p[0]-1,p[1])\n\tn2 = (p[0],p[1]-1)\n\tn3 = (p[0]-1,p[1]-1)\n\treturn (check_neighbour(n1,ind,pr) and check_neighbour(n2,ind,pr) and check_neighbour(n3,ind,pr))\n\ndef check_neighbour(nb,ind,pr):\n\tif nb in pr:\n\t\tif pr[nb] > ind:\n\t\t\treturn 0    \n\treturn 1\n\nif solve(p,w,r) == 0:\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")\n\tfor k,v in sorted(r.items()):\n\t\tprint(v[0], v[1])\n", "from collections import deque\n\ndp={}\n\nfor i in range(int(input())):\n\n\tx,y = list(map(int, input().split()))\n\n\tif y-x in dp:\n\n\t\tdp[y-x].append((x,y))\n\n\telse:\n\n\t\tdp[y-x]=[(x,y)]\n\nfor i in dp:\n\n\tdp[i].sort()\n\n\tdp[i]=deque(dp[i])\n\nw=list(map(int, input().split()))\n\nans=[0]*len(w)\n\nflag=1\n\nfor i in range(len(w)):\n\n\tif not w[i] in dp or not len(dp[w[i]]):\n\n\t\tflag=0\n\n\t\tbreak\n\n\tans[i]=dp[w[i]].popleft()\n\nif not flag:\n\n\tprint(\"NO\")\n\nelse:\n\n\tfor i in range(1,len(ans)):\n\n\t\tif ans[i][0]<=ans[i-1][0] and ans[i][1]<=ans[i-1][1]:\n\n\t\t\tflag=0\n\n\tif not flag:\n\n\t\tprint(\"NO\")\n\n\telse:\n\n\t\tprint(\"YES\")\n\n\t\tfor i in ans:\n\n\t\t\tprint(i[0], i[1])\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "from operator import itemgetter\nfrom collections import defaultdict\nn = int(input())\ncoor = []\ncoor_list = defaultdict(list)\nfor _ in range(n):\n\tx, y = list(map(int,input().split()))\n\tcoor.append((x,y))\n\tcoor_list[y-x].append((x,y))\ncoor.sort(key=itemgetter(0,1))\norder = {cor:i for i, cor in enumerate(coor)}\nfor x,y in coor_list.items():\n\tcoor_list[x] = sorted(y, key=itemgetter(0,1),reverse=True)\n\n\nnums = list(map(int, input().split()))\nresult = []\nfor i in nums:\n\tif i not in coor_list:\n\t\tprint(\"NO\")\n\t\treturn\n\telse:\n\t\tresult.append(coor_list[i].pop())\nfor i in range(1,n):\n\tif result[i][0] <= result[i-1][0] and result[i][1] <= result[i-1][1]:\n\t\tprint(\"NO\")\n\t\treturn\nprint(\"YES\")\nfor i in result:\n\tprint(*i)\n", "import collections\n\nlis = []\nn = int(input())\ndic = collections.defaultdict(list)\nfor i in range(n):\n\tlis.append(tuple(map(int,input().split())))\n\nlis.sort(reverse=True)\n\nfor i in range(n):\n\tdic[lis[i][1]-lis[i][0]].append(lis[i])\nlis1 = list(map(int,input().split()))\nst = \"\"\nmx1= (-1,-1)\nmx2 = (-1,-1)\nfor i in lis1:\n\tif dic[i]:\n\t\ta = dic[i].pop()\n\t\tif (a>= mx1) or a >=mx2:\n\t\t\t\n\t\t\tif mx1[0] < a[0]:\n\t\t\t\tmx1 = a\n\t\t\tif mx2[1] < a[1]:\n\t\t\t\tmx2 = a\n\t\t\t\n\t\t\tst+=str(a[0]) + \" \" + str(a[1])+\"\\n\"\n\t\telse:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\telse:\n\t\tprint(\"NO\")\n\t\treturn\nprint(\"YES\")\nprint(st,end=\"\")\n\t\n", "from collections import defaultdict\nfrom operator import itemgetter\n\nn = int(input())\n\npoints = []\npoint_weights = defaultdict(list)\nfor _ in range(n):\n\tx, y = tuple(map(int,input().split()))\n\tpoints.append((x, y))\n\tpoint_weights[y - x].append((x, y))\n\nweights = list(map(int, input().split()))\n\npoints.sort(key=itemgetter(0, 1))\n\nfor w, p in list(point_weights.items()):\n\tpoint_weights[w] = sorted(p, key=itemgetter(0, 1), reverse=True)\n\nans = \"YES\"\nans_arr = []\nfor weight in weights:\n\tif weight not in point_weights:\n\t\tans = \"NO\"\n\t\tbreak\n\telse:\n\t\tif len(point_weights[weight]) == 0:\n\t\t\tans = \"NO\"\n\t\t\tbreak\n\t\telse:\n\t\t\tans_arr.append(point_weights[weight].pop())\n\nfor i in range(1, len(ans_arr)):\n\tif ans_arr[i][0] <= ans_arr[i - 1][0] and ans_arr[i][1] <= ans_arr[i - 1][1]:\n\t\tans = \"NO\"\n\t\tbreak\n\nprint(ans)\nif ans == \"YES\":\n\tfor point in ans_arr:\n\t\tprint(*point)\n", "from itertools import combinations,permutations\nfrom collections import defaultdict\n\ndef zeror():\n\treturn 0\n\ndef solution(n,c,cw,w):\n\n\tc.sort(key=lambda tup:tup[0])\n\t#print(c)\n\n\tfor k,v in cw.items():\n\t\tcw[k]=sorted(v,key=lambda tup:tup[0])[::-1]\n\n\t#print(cw)\n\n\tans=[]\n\n\tfor elem in w:\n\t\tif elem not in cw:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\telse:\n\t\t\tans.append(cw[elem].pop())\n\n\t#print(ans)\n\ttemp=ans[0]\n\tfor elem in ans[1:]:\n\t\tif temp[0]>=elem[0] and temp[1]>=elem[1]:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\ttemp=elem\n\n\tprint(\"YES\")\n\tfor elem in ans:\n\t\tprint(elem[0],elem[1])\n\n\n\n\ndef main():\n\tn=int(input())\n\tcoordinates = []\n\tcoor_weights = defaultdict(list)\n\tfor _ in range(n):\n\t\tcoordinates.append(tuple(map(int,input().strip().split())))\n\t\tcoor_weights[coordinates[-1][1]-coordinates[-1][0]].append((coordinates[-1][0],coordinates[-1][1]))\n\tweigths=list(map(int,input().strip().split()))\n\n\tsolution(n,coordinates,coor_weights,weigths)\n\n\n\ndef __starting_point():\n\tmain()\n\n\n\"\"\"\n\n5\n2 0\n0 0\n1 0\n1 1\n0 1\n0 -1 -2 1 \n\n\n\"\"\"\n__starting_point()\n", "n = int(input().rstrip())\nl = set()\nfor i in range(n):\n\tl.add(tuple(map(int, input().rstrip().split())))\n\nw = list(map(int, input().rstrip().split()))\n\nd = {0: (0, 0)}\ns = \"\"\nvisited = set()\nvisited.add((0, 0))\nfor k in w:\n\tif d.get(k, None) is None:\n\t\tprint(\"NO\")\n\t\treturn\n\n\tp = d[k]\n\tdel d[k]\n\ts += \"{} {}\\n\".format(*p)\n\tif p[1] == 0 and (p[0] + 1, p[1]) in l:\n\t\tvisited.add((p[0] + 1, p[1]))\n\t\td[-p[0] - 1] = (p[0] + 1, 0)\n\telse:\n\t\tif (p[0] + 1, p[1] - 1) in visited and (p[0]+1, p[1]) in l:\n\t\t\tvisited.add((p[0] + 1, p[1]))\n\t\t\td[p[1] - p[0] - 1] = (p[0] + 1, p[1])\n\tif p[0] == 0 and (0, p[1] + 1) in l:\n\t\td[p[1] + 1] = (0, p[1] + 1)\n\t\tvisited.add((0, p[1] + 1))\n\telse:\n\t\tif (p[0] - 1, p[1] + 1) in visited and (p[0], p[1] + 1) in l:\n\t\t\tvisited.add((p[0], p[1] + 1))\n\t\t\td[p[1]-p[0] + 1] = (p[0], p[1] + 1)\n\nprint(\"YES\")\nprint(s,end=\"\")\n\n\t \t \t\t \t\t   \t   \t  \t\t \t  \t \t\n", "def binsearch(lofpoints,l,r,w,arr):\n\tif(l>r):\n\t\treturn \"None\"\n\tmid=(l+r)//2\n\tif(lofpoints[mid][0]==w and arr[mid]==1):\n\t\tif(mid==0):\n\t\t\tarr[mid]=0\n\t\t\treturn mid\n\t\telif(lofpoints[mid-1][0]!=w or arr[mid-1]==0):\n\t\t\tarr[mid]=0\n\t\t\treturn mid\n\t\telse:\n\t\t\treturn binsearch(lofpoints,l,mid-1,w,arr)\n\tif(lofpoints[mid][0]==w and arr[mid]==0):\n\t\treturn binsearch(lofpoints,mid+1,r,w,arr)\n\tif(lofpoints[mid][0]<w):\n\t\treturn binsearch(lofpoints,mid+1,r,w,arr)\n\tif(lofpoints[mid][0]>w):\n\t\treturn binsearch(lofpoints,l,mid-1,w,arr)\n\n\nn=int(input())\nlofpoints=[]\nfor i in range(n):\n\tl=input().split()\n\tx=int(l[0])\n\ty=int(l[1])\n\tlofpoints.append((y-x,x,y))\nlofpoints.sort()\nw=input().split()\nwi=[int(i) for i in w]\narr=[1 for i in range(n)]\nlsol=[]\ndone=1\n#print(lofpoints)\nfor i in range(n):\n\tx=binsearch(lofpoints,0,n-1,wi[i],arr)\n\t#print(x)\n\tif(x==\"None\"):\n\t\tdone=0\n\t\tbreak\n\telif(lsol==[]):\n\t\tlsol.append((lofpoints[x][1],lofpoints[x][2]))\n\n\telif(lofpoints[x][1]<lsol[-1][0] and lofpoints[x][2]<lsol[-1][1]):\n\t\tdone=0\n\t\tbreak\n\telse:\n\t\tlsol.append((lofpoints[x][1],lofpoints[x][2]))\n#print(lsol)\nif(done==1):\n\thashi=dict()\n\tfor i in range(n):\n\t\thashi[(lsol[i][0],lsol[i][1])]=i\n\tfor i in hashi:\n\t\tx=i[0]\n\t\ty=i[1]\n\t\tt=hashi[i]\n\t\tif((x,y+1) in hashi):\n\t\t\tif(hashi[(x,y+1)]<t):\n\t\t\t\tdone=0\n\t\t\t\tbreak\n\t\tif((x+1,y) in hashi):\n\t\t\tif(hashi[(x+1,y)]<t):\n\t\t\t\tdone=0\n\t\t\t\tbreak\n\n\tif(done==0):\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"YES\")\n\t\tfor i in lsol:\n\t\t\tprint(i[0],i[1])\nelse:\n\tprint(\"NO\")\n", "n = int(input())\np = sorted([tuple(map(int, input().split())) for _ in range(n)])\narr = list(map(int, input().split()))\nw, r, pr = {}, {}, {}\n\nfor i, wi in enumerate(arr, 1):\n\tif wi not in w:\n\t\tw[wi] = []\n\tw[wi].append(i)\n \ndef is_nbr(nb, i):\n\treturn 0 if pr.get(nb, 0) > i else 1\n\ndef check_nbrs(p, i):\n\tn1 = (p[0] - 1, p[1])\n\tn2 = (p[0], p[1] - 1)\n\tn3 = (p[0] - 1, p[1] - 1)\n\treturn is_nbr(n1, i) and is_nbr(n2, i) and is_nbr(n3, i)\n\ndef solve():\n\tfor i in range(len(p)):\n\t\td = p[i][1] - p[i][0]\n\t\tif d not in w:\n\t\t\treturn 0\n\t\tq = w[d]\n\t\tif not q:\n\t\t\treturn 0\n\t\tind = q.pop(0)\n\t\tr[ind] = p[i]\n\t\tpr[p[i]] = ind\n\t\tif not check_nbrs(p[i], ind):\n\t\t\treturn 0\n\treturn 1\n \nif solve() == 0:\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")\n\tfor k, v in sorted(r.items()):\n\t\tprint(v[0], v[1])\n"], "id": "id7239"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7239", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["wilbur", 1], ["is", 1], ["playing", 1], ["with", 1], ["a", 1], ["set", 1], ["of", 1], ["n", 1], ["points", 1], ["on", 1], ["the", 1], ["coordinate", 1], ["plane", 1], ["all", 1], ["points", 1], ["have", 1], ["non", 1], ["negative", 1], ["integer", 1], ["coordinates", 1], ["moreover", 1], ["if", 1], ["some", 1], ["point", 1], ["x", 1], ["y", 1], ["belongs", 1], ["to", 1], ["the", 1], ["set", 1], ["then", 3], ["all", 3], ["points", 3], ["x", 3], ["y", 3], ["such", 3], ["that", 1], ["0", 1], ["≤", 1], ["x", 1], ["≤", 1], ["x", 1], ["and", 1], ["0", 1], ["≤", 1], ["y", 1], ["≤", 1], ["y", 1], ["also", 1], ["belong", 1], ["to", 1], ["this", 1], ["set", 1], ["now", 1], ["wilbur", 1], ["wants", 1], ["to", 1], ["number", 1], ["the", 1], ["points", 1], ["in", 1], ["the", 1], ["set", 1], ["he", 1], ["has", 1], ["that", 1], ["is", 1], ["assign", 1], ["them", 1], ["distinct", 1], ["integer", 1], ["numbers", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["in", 1], ["order", 1], ["to", 1], ["make", 1], ["the", 1], ["numbering", 1], ["aesthetically", 1], ["pleasing", 1], ["wilbur", 1], ["imposes", 1], ["the", 1], ["condition", 1], ["that", 1], ["if", 1], ["some", 1], ["point", 1], ["x", 1], ["y", 1], ["gets", 1], ["number", 1], ["i", 1], ["then", 1], ["all", 1], ["x", 1], ["y", 1], ["from", 1], ["the", 1], ["set", 1], ["such", 1], ["that", 1], ["x", 1], ["≥", 1], ["x", 1], ["and", 1], ["y", 1], ["≥", 1], ["y", 1], ["must", 1], ["be", 1], ["assigned", 1], ["a", 1], ["number", 1], ["not", 1], ["less", 1], ["than", 1], ["i", 1], ["for", 1], ["example", 1], ["for", 1], ["a", 1], ["set", 1], ["of", 1], ["four", 1], ["points", 1], ["0", 1], ["0", 1], ["0", 1], ["1", 1], ["1", 1], ["0", 1], ["and", 1], ["1", 1], ["1", 1], ["there", 1], ["are", 1], ["two", 1], ["aesthetically", 1], ["pleasing", 1], ["numberings", 1], ["one", 1], ["is", 1], ["1", 1], ["2", 1], ["3", 1], ["4", 1], ["and", 1], ["another", 1], ["one", 1], ["is", 1], ["1", 1], ["3", 1], ["2", 1], ["4", 1], ["wilbur", 1], ["s", 1], ["friend", 1], ["comes", 1], ["along", 1], ["and", 1], ["challenges", 1], ["wilbur", 1], ["for", 1], ["any", 1], ["point", 1], ["he", 1], ["defines", 1], ["it", 1], ["s", 1], ["special", 1], ["value", 0], ["as", 0], ["s", 0], ["x", 0], ["y", 0], ["y", 0], ["x", 0], ["now", 0], ["he", 0], ["gives", 0], ["wilbur", 0], ["some", 0], ["w", 0], ["1", 0], ["w", 0], ["2", 0], ["w", 0], ["n", 0], ["and", 1], ["asks", 1], ["him", 1], ["to", 1], ["find", 1], ["an", 1], ["aesthetically", 1], ["pleasing", 1], ["numbering", 1], ["of", 1], ["the", 1], ["points", 1], ["in", 1], ["the", 1], ["set", 1], ["such", 1], ["that", 1], ["the", 1], ["point", 0], ["that", 0], ["gets", 0], ["number", 0], ["i", 0], ["has", 0], ["it", 0], ["s", 0], ["special", 0], ["value", 0], ["equal", 0], ["to", 0], ["w", 0], ["i", 0], ["that", 0], ["is", 0], ["s", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["y", 0], ["i", 0], ["x", 0], ["i", 0], ["w", 0], ["i", 0], ["now", 0], ["wilbur", 0], ["asks", 0], ["you", 0], ["to", 0], ["help", 0], ["him", 0], ["with", 0], ["this", 0], ["challenge", 0], ["input", 0], ["the", 3], ["first", 2], ["line", 2], ["of", 2], ["the", 2], ["input", 2], ["consists", 1], ["of", 1], ["a", 16], ["single", 16], ["integer", 1], ["n", 1], ["1", 1], ["≤", 1], ["n", 1], ["≤", 1], ["100", 1], ["000", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["points", 1], ["in", 1], ["the", 1], ["set", 1], ["wilbur", 1], ["is", 1], ["playing", 1], ["with", 1], ["next", 1], ["follow", 1], ["n", 1], ["lines", 1], ["with", 1], ["points", 1], ["descriptions", 1], ["each", 1], ["line", 1], ["contains", 1], ["two", 1], ["integers", 1], ["x", 1], ["and", 1], ["y", 1], ["0", 1], ["≤", 1], ["x", 1], ["y", 1], ["≤", 1], ["100", 1], ["000", 1], ["that", 1], ["give", 1], ["one", 1], ["point", 1], ["in", 1], ["wilbur", 1], ["s", 1], ["set", 1], ["it", 1], ["s", 1], ["guaranteed", 1], ["that", 1], ["all", 1], ["points", 1], ["are", 1], ["distinct", 1], ["also", 2], ["it", 2], ["is", 2], ["guaranteed", 2], ["that", 2], ["if", 2], ["some", 2], ["point", 2], ["x", 2], ["y", 2], ["is", 2], ["present", 2], ["in", 2], ["the", 2], ["input", 2], ["then", 3], ["all", 3], ["points", 3], ["x", 3], ["y", 3], ["such", 3], ["that", 2], ["0", 2], ["≤", 2], ["x", 2], ["≤", 2], ["x", 2], ["and", 1], ["0", 1], ["≤", 1], ["y", 1], ["≤", 1], ["y", 1], ["are", 1], ["also", 1], ["present", 1], ["in", 1], ["the", 1], ["input", 1], ["the", 1], ["last", 1], ["line", 1], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["n", 0], ["integers", 0], ["the", 0], ["i", 0], ["th", 0], ["of", 0], ["them", 0], ["is", 0], ["w", 0], ["i", 0], ["100", 0], ["000", 0], ["≤", 0], ["w", 0], ["i", 0], ["≤", 1], ["100", 1], ["000", 1], ["—", 1], ["the", 1], ["required", 1], ["special", 1], ["value", 1], ["of", 0], ["the", 0], ["point", 0], ["that", 0], ["gets", 0], ["number", 0], ["i", 0], ["in", 0], ["any", 0], ["aesthetically", 0], ["pleasing", 0], ["numbering", 0], ["output", 0], ["if", 1], ["there", 1], ["exists", 1], ["an", 0], ["aesthetically", 0], ["pleasant", 0], ["numbering", 0], ["of", 0], ["points", 0], ["in", 0], ["the", 0], ["set", 0], ["such", 0], ["that", 0], ["s", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["y", 0], ["i", 0], ["x", 0], ["i", 0], ["w", 0], ["i", 0], ["then", 1], ["print", 1], ["yes", 1], ["on", 1], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["the", 1], ["output", 1], ["otherwise", 1], ["print", 1], ["no", 1], ["if", 1], ["a", 1], ["solution", 1], ["exists", 1], ["proceed", 1], ["output", 1], ["with", 1], ["n", 1], ["lines", 1], ["on", 1], ["the", 1], ["i", 1], ["th", 1], ["of", 1], ["these", 1], ["lines", 1], ["print", 1], ["the", 1], ["point", 1], ["of", 1], ["the", 1], ["set", 1], ["that", 1], ["gets", 0], ["number", 0], ["i", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["solutions", 0], ["print", 0], ["any", 0], ["of", 0], ["them", 0], ["examples", 0], ["input", 0], ["5", 0], ["2", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["2", 0], ["1", 0], ["0", 0], ["output", 0], ["yes", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["2", 0], ["0", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["input", 0], ["3", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["2", 0], ["0", 0], ["0", 0], ["1", 0], ["2", 0], ["output", 0], ["no", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["sample", 1], ["point", 1], ["2", 1], ["0", 1], ["gets", 1], ["number", 1], ["3", 1], ["point", 1], ["0", 1], ["0", 1], ["gets", 1], ["number", 1], ["one", 1], ["point", 1], ["1", 1], ["0", 1], ["gets", 1], ["number", 1], ["2", 1], ["point", 1], ["1", 1], ["1", 1], ["gets", 1], ["number", 1], ["5", 1], ["and", 1], ["point", 1], ["0", 1], ["1", 1], ["gets", 1], ["number", 1], ["4", 0], ["one", 0], ["can", 0], ["easily", 0], ["check", 0], ["that", 0], ["this", 0], ["numbering", 0], ["is", 0], ["aesthetically", 0], ["pleasing", 0], ["and", 0], ["y", 0], ["i", 0], ["x", 0], ["i", 0], ["w", 0], ["i", 0], ["in", 1], ["the", 1], ["second", 1], ["sample", 1], ["the", 1], ["special", 1], ["values", 1], ["of", 1], ["the", 1], ["points", 1], ["in", 1], ["the", 1], ["set", 1], ["are", 1], ["0", 1], ["1", 1], ["and", 1], ["2", 1], ["while", 1], ["the", 1], ["sequence", 1], ["that", 1], ["the", 1], ["friend", 1], ["gives", 1], ["to", 0], ["wilbur", 0], ["is", 0], ["0", 0], ["1", 0], ["2", 0], ["therefore", 0], ["the", 0], ["answer", 0], ["does", 0], ["not", 0], ["exist", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6771523178807947, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6381760485651213, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8198051948051948, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8146645021645023, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6738410596026491, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6379690949227372, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8198051948051948, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8146645021645023, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["maxx", 0], ["1", 0], ["100005", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["px", 0], ["py", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["maxx", 0], ["py", 0], ["max", 0], ["maxx", 0], ["py", 0], ["px", 0], ["print", 0], ["maxx", 0], ["2", 0], ["w", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["p", 0], ["1", 0], ["100005", 0], ["p", 0], ["0", 0], ["0", 0], ["wdict", 0], ["dict", 0], ["wdict", 0], ["0", 0], ["0", 0], ["0", 0], ["res", 0], ["for", 0], ["wi", 0], ["in", 0], ["w", 0], ["if", 0], ["wi", 0], ["in", 0], ["wdict", 0], ["px", 0], ["py", 0], ["wdict", 0], ["pop", 0], ["wi", 0], ["res", 0], ["append", 0], ["px", 0], ["py", 0], ["if", 0], ["maxx", 0], ["py", 0], ["px", 0], ["wdict", 0], ["py", 0], ["px", 0], ["1", 0], ["px", 0], ["1", 0], ["py", 0], ["p", 0], ["py", 0], ["1", 0], ["if", 0], ["maxx", 0], ["py", 0], ["1", 0], ["1", 0], ["and", 0], ["p", 0], ["py", 0], ["1", 0], ["1", 0], ["wdict", 0], ["py", 0], ["1", 0], ["0", 0], ["py", 0], ["1", 0], ["p", 0], ["py", 0], ["1", 0], ["1", 0], ["else", 0], ["break", 0], ["if", 0], ["len", 0], ["res", 0], ["n", 0], ["print", 0], ["yes", 0], ["for", 0], ["ares", 0], ["in", 0], ["res", 0], ["print", 0], ["ares", 0], ["0", 0], ["ares", 0], ["1", 0], ["else", 0], ["print", 0], ["no", 0], ["starting", 0], ["point", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["def", 0], ["solve", 0], ["n", 0], ["int", 0], ["input", 0], ["maxx", 0], ["0", 0], ["maxy", 0], ["0", 0], ["ws", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ws", 0], ["y", 0], ["x", 0], ["append", 0], ["x", 0], ["y", 0], ["maxx", 0], ["max", 0], ["maxx", 0], ["x", 0], ["maxy", 0], ["max", 0], ["maxy", 0], ["y", 0], ["for", 0], ["w", 0], ["in", 0], ["ws", 0], ["ws", 0], ["w", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["none", 0], ["n", 0], ["mx", 0], ["0", 0], ["maxy", 0], ["1", 0], ["my", 0], ["0", 0], ["maxx", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["w", 0], ["w", 0], ["i", 0], ["if", 0], ["ws", 0], ["w", 0], ["ans", 0], ["i", 0], ["ax", 0], ["ay", 0], ["ws", 0], ["w", 0], ["pop", 0], ["if", 0], ["mx", 0], ["ay", 0], ["ax", 0], ["and", 0], ["my", 0], ["ax", 0], ["ay", 0], ["mx", 0], ["ay", 0], ["ax", 0], ["1", 0], ["my", 0], ["ax", 0], ["ay", 0], ["1", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["for", 0], ["a", 0], ["in", 0], ["ans", 0], ["print", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["y", 0], ["x", 0], ["in", 0], ["dp", 0], ["dp", 0], ["y", 0], ["x", 0], ["append", 0], ["x", 0], ["y", 0], ["else", 0], ["dp", 0], ["y", 0], ["x", 0], ["x", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["dp", 0], ["dp", 0], ["i", 0], ["sort", 0], ["dp", 0], ["i", 0], ["deque", 0], ["dp", 0], ["i", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["len", 0], ["w", 0], ["flag", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["w", 0], ["if", 0], ["not", 0], ["w", 0], ["i", 0], ["in", 0], ["dp", 0], ["or", 0], ["not", 0], ["len", 0], ["dp", 0], ["w", 0], ["i", 0], ["flag", 0], ["0", 0], ["break", 0], ["ans", 0], ["i", 0], ["dp", 0], ["w", 0], ["i", 0], ["popleft", 0], ["if", 0], ["not", 0], ["flag", 0], ["print", 0], ["no", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["ans", 0], ["if", 0], ["ans", 0], ["i", 0], ["0", 0], ["ans", 0], ["i", 0], ["1", 0], ["0", 0], ["and", 0], ["ans", 0], ["i", 0], ["1", 0], ["ans", 0], ["i", 0], ["1", 0], ["1", 0], ["flag", 0], ["0", 0], ["if", 0], ["not", 0], ["flag", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["print", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["max", 0], ["100000", 0], ["coord", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["max", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["coord", 0], ["y", 0], ["x", 0], ["max", 0], ["append", 0], ["x", 0], ["y", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["max", 0], ["1", 0], ["coord", 0], ["i", 0], ["sort", 0], ["ans", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["possible", 0], ["true", 0], ["last", 0], ["x", 0], ["1", 0], ["max", 0], ["1", 0], ["last", 0], ["y", 0], ["1", 0], ["max", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["len", 0], ["coord", 0], ["w", 0], ["i", 0], ["max", 0], ["0", 0], ["x", 0], ["coord", 0], ["w", 0], ["i", 0], ["max", 0], ["0", 0], ["0", 0], ["y", 0], ["coord", 0], ["w", 0], ["i", 0], ["max", 0], ["0", 0], ["1", 0], ["if", 0], ["last", 0], ["x", 0], ["y", 0], ["x", 0], ["1", 0], ["and", 0], ["last", 0], ["y", 0], ["x", 0], ["y", 0], ["1", 0], ["last", 0], ["x", 0], ["y", 0], ["1", 0], ["last", 0], ["y", 0], ["x", 0], ["1", 0], ["ans", 0], ["i", 0], ["x", 0], ["y", 0], ["coord", 0], ["w", 0], ["i", 0], ["max", 0], ["pop", 0], ["0", 0], ["else", 0], ["possible", 0], ["false", 0], ["break", 0], ["else", 0], ["possible", 0], ["false", 0], ["break", 0], ["if", 0], ["possible", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["join", 0], ["join", 0], ["map", 0], ["str", 0], ["coords", 0], ["for", 0], ["coords", 0], ["in", 0], ["ans", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["collections", 0], ["import", 0], ["heapq", 0], ["class", 0], ["segmenttree", 0], ["object", 0], ["def", 0], ["init", 0], ["self", 0], ["size", 0], ["self", 0], ["capacity", 0], ["1", 0], ["len", 0], ["bin", 0], ["size", 0], ["1", 0], ["2", 0], ["self", 0], ["tree", 0], ["1", 0], ["self", 0], ["capacity", 0], ["2", 0], ["self", 0], ["tree", 0], ["0", 0], ["size", 0], ["self", 0], ["left", 0], ["set", 0], ["p", 0], ["self", 0], ["capacity", 0], ["while", 0], ["p", 0], ["self", 0], ["left", 0], ["add", 0], ["p", 0], ["p", 0], ["1", 0], ["def", 0], ["update", 0], ["self", 0], ["x", 0], ["y", 0], ["pos", 0], ["self", 0], ["capacity", 0], ["x", 0], ["while", 0], ["pos", 0], ["if", 0], ["y", 0], ["self", 0], ["tree", 0], ["pos", 0], ["self", 0], ["tree", 0], ["pos", 0], ["y", 0], ["pos", 0], ["1", 0], ["def", 0], ["getmax", 0], ["self", 0], ["x", 0], ["pos", 0], ["self", 0], ["capacity", 0], ["x", 0], ["y", 0], ["self", 0], ["tree", 0], ["pos", 0], ["while", 0], ["pos", 0], ["if", 0], ["y", 0], ["self", 0], ["tree", 0], ["pos", 0], ["y", 0], ["self", 0], ["tree", 0], ["pos", 0], ["if", 0], ["pos", 0], ["1", 0], ["pos", 0], ["pos", 0], ["1", 0], ["1", 0], ["if", 0], ["pos", 0], ["in", 0], ["self", 0], ["left", 0], ["break", 0], ["else", 0], ["pos", 0], ["1", 0], ["return", 0], ["y", 0], ["def", 0], ["read", 0], ["data", 0], ["n", 0], ["int", 0], ["input", 0], ["sxy", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["heapq", 0], ["heappush", 0], ["sxy", 0], ["y", 0], ["x", 0], ["x", 0], ["ws", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["return", 0], ["n", 0], ["sxy", 0], ["ws", 0], ["def", 0], ["solve", 0], ["n", 0], ["sxy", 0], ["ws", 0], ["path", 0], ["for", 0], ["w", 0], ["in", 0], ["ws", 0], ["sxyw", 0], ["sxy", 0], ["w", 0], ["if", 0], ["sxyw", 0], ["x", 0], ["heapq", 0], ["heappop", 0], ["sxy", 0], ["w", 0], ["y", 0], ["w", 0], ["x", 0], ["path", 0], ["append", 0], ["x", 0], ["y", 0], ["else", 0], ["return", 0], ["false", 0], ["if", 0], ["is", 0], ["valid", 0], ["path", 0], ["return", 0], ["path", 0], ["else", 0], ["return", 0], ["false", 0], ["def", 0], ["is", 0], ["valid", 0], ["path", 0], ["xys", 0], ["compress", 0], ["path", 0], ["segtree", 0], ["segmenttree", 0], ["len", 0], ["xys", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["xys", 0], ["maxy", 0], ["segtree", 0], ["getmax", 0], ["x", 0], ["if", 0], ["maxy", 0], ["y", 0], ["return", 0], ["false", 0], ["segtree", 0], ["update", 0], ["x", 0], ["y", 0], ["return", 0], ["true", 0], ["def", 0], ["compress", 0], ["path", 0], ["xset", 0], ["set", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["path", 0], ["xset", 0], ["add", 0], ["x", 0], ["xuniq", 0], ["list", 0], ["xset", 0], ["xuniq", 0], ["sort", 0], ["dic", 0], ["x", 0], ["i", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["xuniq", 0], ["xys", 0], ["dic", 0], ["x", 0], ["y", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["path", 0], ["return", 0], ["xys", 0], ["n", 0], ["sxy", 0], ["ws", 0], ["read", 0], ["data", 0], ["result", 0], ["solve", 0], ["n", 0], ["sxy", 0], ["ws", 0], ["if", 0], ["result", 0], ["print", 0], ["yes", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["result", 0], ["print", 0], ["x", 0], ["y", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["opens", 0], ["sums", 0], ["n", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["opens", 0], ["t", 0], ["1", 0], ["nums", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["1", 0], ["res", 0], ["nums", 0], ["for", 0], ["elem", 0], ["in", 0], ["nums", 0], ["f", 0], ["1", 0], ["x", 0], ["0", 0], ["try", 0], ["x", 0], ["sums", 0], ["elem", 0], ["n", 0], ["except", 0], ["f", 0], ["0", 0], ["y", 0], ["x", 0], ["elem", 0], ["try", 0], ["u", 0], ["opens", 0], ["x", 0], ["y", 0], ["except", 0], ["keyerror", 0], ["f", 0], ["0", 0], ["try", 0], ["if", 0], ["opens", 0], ["x", 0], ["y", 0], ["1", 0], ["1", 0], ["f", 0], ["0", 0], ["except", 0], ["keyerror", 0], ["pass", 0], ["try", 0], ["if", 0], ["opens", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["f", 0], ["0", 0], ["except", 0], ["keyerror", 0], ["pass", 0], ["if", 0], ["f", 0], ["0", 0], ["res", 0], ["0", 0], ["break", 0], ["sums", 0], ["elem", 0], ["n", 0], ["1", 0], ["opens", 0], ["x", 0], ["y", 0], ["0", 0], ["res", 0], ["nums", 0], ["append", 0], ["x", 0], ["y", 0], ["print", 0], ["yes", 0], ["if", 0], ["res", 0], ["else", 0], ["no", 0], ["if", 0], ["res", 0], ["for", 0], ["elem", 0], ["in", 0], ["res", 0], ["nums", 0], ["print", 0], ["str", 0], ["elem", 0], ["0", 0], ["str", 0], ["elem", 0], ["1", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["n", 0], ["int", 0], ["input", 0], ["mas", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["mas", 0], ["append", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mas", 0], ["x", 0], ["max", 0], ["mas", 0], ["x", 0], ["y", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["w", 0], ["i", 0], ["w", 0], ["i", 0], ["s", 0], ["r", 0], ["res1", 0], ["res2", 0], ["res3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["append", 0], ["i", 0], ["r", 0], ["append", 0], ["i", 0], ["res2", 0], ["append", 0], ["1", 0], ["s", 0], ["i", 0], ["mas", 0], ["i", 0], ["1", 0], ["error", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["error", 0], ["1", 0], ["break", 0], ["t", 0], ["bisect", 0], ["left", 0], ["r", 0], ["w", 0], ["i", 0], ["if", 0], ["t", 0], ["n", 0], ["or", 0], ["r", 0], ["t", 0], ["w", 0], ["i", 0], ["error", 0], ["1", 0], ["break", 0], ["else", 0], ["r", 0], ["t", 0], ["r", 0], ["t", 0], ["1", 0], ["if", 0], ["r", 0], ["t", 0], ["s", 0], ["t", 0], ["or", 0], ["t", 0], ["0", 0], ["and", 0], ["r", 0], ["t", 0], ["r", 0], ["t", 0], ["1", 0], ["error", 0], ["1", 0], ["break", 0], ["res1", 0], ["append", 0], ["t", 0], ["res2", 0], ["t", 0], ["res2", 0], ["t", 0], ["1", 0], ["res3", 0], ["append", 0], ["res2", 0], ["t", 0], ["if", 0], ["error", 0], ["1", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["str", 0], ["res1", 0], ["i", 0], ["str", 0], ["res3", 0], ["i", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["diag", 0], ["0", 0], ["200005", 0], ["use", 0], ["0", 0], ["200005", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["c", 0], ["y", 0], ["x", 0], ["if", 0], ["c", 0], ["0", 0], ["diag", 0], ["c", 0], ["max", 0], ["x", 0], ["1", 0], ["diag", 0], ["c", 0], ["else", 0], ["diag", 0], ["c", 0], ["max", 0], ["y", 0], ["1", 0], ["diag", 0], ["c", 0], ["table", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100005", 0], ["table", 0], ["add", 0], ["1", 0], ["i", 0], ["table", 0], ["add", 0], ["i", 0], ["1", 0], ["result", 0], ["for", 0], ["v", 0], ["in", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["v", 0], ["if", 0], ["v", 0], ["0", 0], ["x", 0], ["use", 0], ["v", 0], ["y", 0], ["x", 0], ["v", 0], ["else", 0], ["y", 0], ["use", 0], ["v", 0], ["x", 0], ["y", 0], ["v", 0], ["print", 0], ["x", 0], ["y", 0], ["use", 0], ["v", 0], ["diag", 0], ["v", 0], ["use", 0], ["v", 0], ["diag", 0], ["v", 0], ["x", 0], ["1", 0], ["y", 0], ["not", 0], ["in", 0], ["table", 0], ["x", 0], ["y", 0], ["1", 0], ["not", 0], ["in", 0], ["table", 0], ["use", 0], ["v", 0], ["1", 0], ["if", 0], ["use", 0], ["v", 0], ["diag", 0], ["v", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["x", 0], ["1", 0], ["y", 0], ["not", 0], ["in", 0], ["table", 0], ["or", 0], ["x", 0], ["y", 0], ["1", 0], ["not", 0], ["in", 0], ["table", 0], ["print", 0], ["no", 0], ["return", 0], ["table", 0], ["add", 0], ["x", 0], ["y", 0], ["result", 0], ["append", 0], ["x", 0], ["y", 0], ["print", 0], ["yes", 0], ["for", 0], ["v", 0], ["in", 0], ["result", 0], ["print", 0], ["v", 0], ["0", 0], ["v", 0], ["1", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["data", 0], ["iter", 0], ["stdin", 0], ["read", 0], ["split", 0], ["n", 0], ["input", 0], ["lambda", 0], ["next", 0], ["data", 0], ["n", 0], ["int", 0], ["input", 0], ["ref", 0], ["front", 0], ["ans", 0], ["max", 0], ["x", 0], ["max", 0], ["y", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["max", 0], ["x", 0], ["max", 0], ["max", 0], ["x", 0], ["x", 0], ["max", 0], ["y", 0], ["max", 0], ["max", 0], ["y", 0], ["y", 0], ["ref", 0], ["x", 0], ["y", 0], ["2", 0], ["if", 0], ["x", 0], ["0", 0], ["ref", 0], ["x", 0], ["y", 0], ["1", 0], ["if", 0], ["y", 0], ["0", 0], ["ref", 0], ["x", 0], ["y", 0], ["1", 0], ["if", 0], ["x", 0], ["y", 0], ["0", 0], ["0", 0], ["del", 0], ["ref", 0], ["x", 0], ["y", 0], ["front", 0], ["y", 0], ["x", 0], ["x", 0], ["y", 0], ["ws", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["w", 0], ["in", 0], ["ws", 0], ["if", 0], ["w", 0], ["not", 0], ["in", 0], ["front", 0], ["ans", 0], ["break", 0], ["x", 0], ["y", 0], ["front", 0], ["pop", 0], ["w", 0], ["ans", 0], ["append", 0], ["x", 0], ["y", 0], ["for", 0], ["dx", 0], ["dy", 0], ["in", 0], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["nx", 0], ["ny", 0], ["x", 0], ["dx", 0], ["y", 0], ["dy", 0], ["if", 0], ["nx", 0], ["ny", 0], ["not", 0], ["in", 0], ["ref", 0], ["continue", 0], ["ref", 0], ["nx", 0], ["ny", 0], ["1", 0], ["if", 0], ["ref", 0], ["nx", 0], ["ny", 0], ["0", 0], ["del", 0], ["ref", 0], ["nx", 0], ["ny", 0], ["front", 0], ["ny", 0], ["nx", 0], ["nx", 0], ["ny", 0], ["if", 0], ["ans", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["join", 0], ["format", 0], ["x", 0], ["y", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["ans", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["cf596c", 0], ["in", 0], ["from", 0], ["collections", 0], ["import", 0], ["namedtuple", 0], ["defaultdict", 0], ["counter", 0], ["point", 0], ["namedtuple", 0], ["point", 0], ["x", 0], ["y", 0], ["n", 0], ["int", 0], ["input", 0], ["pts", 0], ["point", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["have", 0], ["counter", 0], ["for", 0], ["pt", 0], ["in", 0], ["pts", 0], ["have", 0], ["pt", 0], ["y", 0], ["pt", 0], ["x", 0], ["1", 0], ["ws", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["buckets", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["i", 0], ["w", 0], ["in", 0], ["enumerate", 0], ["ws", 0], ["if", 0], ["have", 0], ["w", 0], ["0", 0], ["or", 0], ["w", 0], ["0", 0], ["and", 0], ["len", 0], ["buckets", 0], ["1", 0], ["len", 0], ["buckets", 0], ["0", 0], ["or", 0], ["len", 0], ["buckets", 0], ["1", 0], ["len", 0], ["buckets", 0], ["0", 0], ["or", 0], ["w", 0], ["0", 0], ["and", 0], ["len", 0], ["buckets", 0], ["w", 0], ["1", 0], ["len", 0], ["buckets", 0], ["w", 0], ["or", 0], ["len", 0], ["buckets", 0], ["w", 0], ["1", 0], ["len", 0], ["buckets", 0], ["w", 0], ["1", 0], ["or", 0], ["w", 0], ["0", 0], ["and", 0], ["len", 0], ["buckets", 0], ["w", 0], ["1", 0], ["len", 0], ["buckets", 0], ["w", 0], ["or", 0], ["len", 0], ["buckets", 0], ["w", 0], ["1", 0], ["len", 0], ["buckets", 0], ["w", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["buckets", 0], ["w", 0], ["append", 0], ["i", 0], ["have", 0], ["w", 0], ["1", 0], ["ans", 0], ["for", 0], ["w", 0], ["bucket", 0], ["in", 0], ["list", 0], ["buckets", 0], ["items", 0], ["for", 0], ["x", 0], ["i", 0], ["in", 0], ["enumerate", 0], ["bucket", 0], ["max", 0], ["0", 0], ["w", 0], ["ans", 0], ["append", 0], ["point", 0], ["x", 0], ["w", 0], ["x", 0], ["i", 0], ["ans", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["item", 0], ["item", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["join", 0], ["d", 0], ["d", 0], ["pt", 0], ["for", 0], ["pt", 0], ["i", 0], ["in", 0], ["ans", 0], ["author", 0], ["mac", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["def", 0], ["sortbydiag", 0], ["elem", 0], ["return", 0], ["elem", 0], ["0", 0], ["elem", 0], ["0", 0], ["elem", 0], ["1", 0], ["elem", 0], ["1", 0], ["count", 0], ["int", 0], ["input", 0], ["points", 0], ["complist", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["count", 0], ["x", 0], ["y", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["w", 0], ["y", 0], ["x", 0], ["complist", 0], ["append", 0], ["w", 0], ["if", 0], ["not", 0], ["w", 0], ["in", 0], ["points", 0], ["points", 0], ["w", 0], ["points", 0], ["w", 0], ["append", 0], ["x", 0], ["y", 0], ["warr", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["if", 0], ["len", 0], ["warr", 0], ["1", 0], ["and", 0], ["int", 0], ["x", 0], ["warr", 0], ["1", 0], ["or", 0], ["abs", 0], ["int", 0], ["x", 0], ["len", 0], ["warr", 0], ["print", 0], ["no", 0], ["return", 0], ["warr", 0], ["append", 0], ["int", 0], ["x", 0], ["c1", 0], ["counter", 0], ["warr", 0], ["c2", 0], ["counter", 0], ["complist", 0], ["diff", 0], ["c1", 0], ["c2", 0], ["if", 0], ["len", 0], ["list", 0], ["diff", 0], ["elements", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["for", 0], ["e", 0], ["in", 0], ["points", 0], ["points", 0], ["e", 0], ["sorted", 0], ["points", 0], ["e", 0], ["key", 0], ["sortbydiag", 0], ["for", 0], ["i", 0], ["in", 0], ["warr", 0], ["temp", 0], ["points", 0], ["i", 0], ["pop", 0], ["0", 0], ["print", 0], ["temp", 0], ["0", 0], ["temp", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["ordering", 0], ["s", 0], ["ws", 0], ["pbs", 0], ["for", 0], ["p", 0], ["in", 0], ["sorted", 0], ["s", 0], ["pbs", 0], ["setdefault", 0], ["p", 0], ["1", 0], ["p", 0], ["0", 0], ["deque", 0], ["append", 0], ["p", 0], ["o", 0], ["os", 0], ["set", 0], ["for", 0], ["w", 0], ["in", 0], ["ws", 0], ["try", 0], ["p", 0], ["pbs", 0], ["w", 0], ["popleft", 0], ["except", 0], ["indexerror", 0], ["keyerror", 0], ["return", 0], ["none", 0], ["if", 0], ["p", 0], ["0", 0], ["0", 0], ["and", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["not", 0], ["in", 0], ["os", 0], ["or", 0], ["p", 0], ["1", 0], ["0", 0], ["and", 0], ["p", 0], ["0", 0], ["p", 0], ["1", 0], ["1", 0], ["not", 0], ["in", 0], ["os", 0], ["return", 0], ["none", 0], ["o", 0], ["append", 0], ["p", 0], ["os", 0], ["add", 0], ["p", 0], ["return", 0], ["o", 0], ["def", 0], ["pair", 0], ["x", 0], ["y", 0], ["return", 0], ["x", 0], ["y", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["pair", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ws", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["o", 0], ["ordering", 0], ["s", 0], ["ws", 0], ["if", 0], ["o", 0], ["print", 0], ["yes", 0], ["for", 0], ["p", 0], ["in", 0], ["o", 0], ["print", 0], ["format", 0], ["p", 0], ["else", 0], ["print", 0], ["no", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["r", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["w", 0], ["r", 0], ["pr", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["r", 0], ["p", 0], ["append", 0], ["x", 0], ["y", 0], ["p", 0], ["sorted", 0], ["p", 0], ["for", 0], ["i", 0], ["wi", 0], ["in", 0], ["enumerate", 0], ["list", 0], ["r", 0], ["1", 0], ["if", 0], ["wi", 0], ["not", 0], ["in", 0], ["w", 0], ["w", 0], ["wi", 0], ["deque", 0], ["w", 0], ["wi", 0], ["append", 0], ["i", 0], ["def", 0], ["solve", 0], ["p", 0], ["w", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["p", 0], ["d", 0], ["p", 0], ["i", 0], ["1", 0], ["p", 0], ["i", 0], ["0", 0], ["if", 0], ["d", 0], ["in", 0], ["w", 0], ["q", 0], ["w", 0], ["d", 0], ["if", 0], ["len", 0], ["q", 0], ["0", 0], ["ind", 0], ["q", 0], ["popleft", 0], ["r", 0], ["ind", 0], ["p", 0], ["i", 0], ["pr", 0], ["p", 0], ["i", 0], ["ind", 0], ["if", 0], ["not", 0], ["check", 0], ["neighbours", 0], ["p", 0], ["i", 0], ["ind", 0], ["pr", 0], ["return", 0], ["0", 0], ["else", 0], ["return", 0], ["0", 0], ["else", 0], ["return", 0], ["0", 0], ["return", 0], ["1", 0], ["def", 0], ["check", 0], ["neighbours", 0], ["p", 0], ["ind", 0], ["pr", 0], ["n1", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["n2", 0], ["p", 0], ["0", 0], ["p", 0], ["1", 0], ["1", 0], ["n3", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["1", 0], ["return", 0], ["check", 0], ["neighbour", 0], ["n1", 0], ["ind", 0], ["pr", 0], ["and", 0], ["check", 0], ["neighbour", 0], ["n2", 0], ["ind", 0], ["pr", 0], ["and", 0], ["check", 0], ["neighbour", 0], ["n3", 0], ["ind", 0], ["pr", 0], ["def", 0], ["check", 0], ["neighbour", 0], ["nb", 0], ["ind", 0], ["pr", 0], ["if", 0], ["nb", 0], ["in", 0], ["pr", 0], ["if", 0], ["pr", 0], ["nb", 0], ["ind", 0], ["return", 0], ["0", 0], ["return", 0], ["1", 0], ["if", 0], ["solve", 0], ["p", 0], ["w", 0], ["r", 0], ["0", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["k", 0], ["v", 0], ["in", 0], ["sorted", 0], ["r", 0], ["items", 0], ["print", 0], ["v", 0], ["0", 0], ["v", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["y", 0], ["x", 0], ["in", 0], ["dp", 0], ["dp", 0], ["y", 0], ["x", 0], ["append", 0], ["x", 0], ["y", 0], ["else", 0], ["dp", 0], ["y", 0], ["x", 0], ["x", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["dp", 0], ["dp", 0], ["i", 0], ["sort", 0], ["dp", 0], ["i", 0], ["deque", 0], ["dp", 0], ["i", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["len", 0], ["w", 0], ["flag", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["w", 0], ["if", 0], ["not", 0], ["w", 0], ["i", 0], ["in", 0], ["dp", 0], ["or", 0], ["not", 0], ["len", 0], ["dp", 0], ["w", 0], ["i", 0], ["flag", 0], ["0", 0], ["break", 0], ["ans", 0], ["i", 0], ["dp", 0], ["w", 0], ["i", 0], ["popleft", 0], ["if", 0], ["not", 0], ["flag", 0], ["print", 0], ["no", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["ans", 0], ["if", 0], ["ans", 0], ["i", 0], ["0", 0], ["ans", 0], ["i", 0], ["1", 0], ["0", 0], ["and", 0], ["ans", 0], ["i", 0], ["1", 0], ["ans", 0], ["i", 0], ["1", 0], ["1", 0], ["flag", 0], ["0", 0], ["if", 0], ["not", 0], ["flag", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["print", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["made", 0], ["by", 0], ["mostafa", 0], ["khaled", 0], ["from", 0], ["operator", 0], ["import", 0], ["itemgetter", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["n", 0], ["int", 0], ["input", 0], ["coor", 0], ["coor", 0], ["list", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["coor", 0], ["append", 0], ["x", 0], ["y", 0], ["coor", 0], ["list", 0], ["y", 0], ["x", 0], ["append", 0], ["x", 0], ["y", 0], ["coor", 0], ["sort", 0], ["key", 0], ["itemgetter", 0], ["0", 0], ["1", 0], ["order", 0], ["cor", 0], ["i", 0], ["for", 0], ["i", 0], ["cor", 0], ["in", 0], ["enumerate", 0], ["coor", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["coor", 0], ["list", 0], ["items", 0], ["coor", 0], ["list", 0], ["x", 0], ["sorted", 0], ["y", 0], ["key", 0], ["itemgetter", 0], ["0", 0], ["1", 0], ["reverse", 0], ["true", 0], ["nums", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["result", 0], ["for", 0], ["i", 0], ["in", 0], ["nums", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["coor", 0], ["list", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["result", 0], ["append", 0], ["coor", 0], ["list", 0], ["i", 0], ["pop", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["result", 0], ["i", 0], ["0", 0], ["result", 0], ["i", 0], ["1", 0], ["0", 0], ["and", 0], ["result", 0], ["i", 0], ["1", 0], ["result", 0], ["i", 0], ["1", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["result", 0], ["print", 0], ["i", 0], ["import", 0], ["collections", 0], ["lis", 0], ["n", 0], ["int", 0], ["input", 0], ["dic", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["lis", 0], ["append", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lis", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dic", 0], ["lis", 0], ["i", 0], ["1", 0], ["lis", 0], ["i", 0], ["0", 0], ["append", 0], ["lis", 0], ["i", 0], ["lis1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["st", 0], ["mx1", 0], ["1", 0], ["1", 0], ["mx2", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["lis1", 0], ["if", 0], ["dic", 0], ["i", 0], ["a", 0], ["dic", 0], ["i", 0], ["pop", 0], ["if", 0], ["a", 0], ["mx1", 0], ["or", 0], ["a", 0], ["mx2", 0], ["if", 0], ["mx1", 0], ["0", 0], ["a", 0], ["0", 0], ["mx1", 0], ["a", 0], ["if", 0], ["mx2", 0], ["1", 0], ["a", 0], ["1", 0], ["mx2", 0], ["a", 0], ["st", 0], ["str", 0], ["a", 0], ["0", 0], ["str", 0], ["a", 0], ["1", 0], ["n", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["print", 0], ["st", 0], ["end", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["from", 0], ["operator", 0], ["import", 0], ["itemgetter", 0], ["n", 0], ["int", 0], ["input", 0], ["points", 0], ["point", 0], ["weights", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["points", 0], ["append", 0], ["x", 0], ["y", 0], ["point", 0], ["weights", 0], ["y", 0], ["x", 0], ["append", 0], ["x", 0], ["y", 0], ["weights", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["points", 0], ["sort", 0], ["key", 0], ["itemgetter", 0], ["0", 0], ["1", 0], ["for", 0], ["w", 0], ["p", 0], ["in", 0], ["list", 0], ["point", 0], ["weights", 0], ["items", 0], ["point", 0], ["weights", 0], ["w", 0], ["sorted", 0], ["p", 0], ["key", 0], ["itemgetter", 0], ["0", 0], ["1", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["yes", 0], ["ans", 0], ["arr", 0], ["for", 0], ["weight", 0], ["in", 0], ["weights", 0], ["if", 0], ["weight", 0], ["not", 0], ["in", 0], ["point", 0], ["weights", 0], ["ans", 0], ["no", 0], ["break", 0], ["else", 0], ["if", 0], ["len", 0], ["point", 0], ["weights", 0], ["weight", 0], ["0", 0], ["ans", 0], ["no", 0], ["break", 0], ["else", 0], ["ans", 0], ["arr", 0], ["append", 0], ["point", 0], ["weights", 0], ["weight", 0], ["pop", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["ans", 0], ["arr", 0], ["if", 0], ["ans", 0], ["arr", 0], ["i", 0], ["0", 0], ["ans", 0], ["arr", 0], ["i", 0], ["1", 0], ["0", 0], ["and", 0], ["ans", 0], ["arr", 0], ["i", 0], ["1", 0], ["ans", 0], ["arr", 0], ["i", 0], ["1", 0], ["1", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["if", 0], ["ans", 0], ["yes", 0], ["for", 0], ["point", 0], ["in", 0], ["ans", 0], ["arr", 0], ["print", 0], ["point", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["permutations", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["def", 0], ["zeror", 0], ["return", 0], ["0", 0], ["def", 0], ["solution", 0], ["n", 0], ["c", 0], ["cw", 0], ["w", 0], ["c", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["tup", 0], ["tup", 0], ["0", 0], ["print", 0], ["c", 0], ["for", 0], ["k", 0], ["v", 0], ["in", 0], ["cw", 0], ["items", 0], ["cw", 0], ["k", 0], ["sorted", 0], ["v", 0], ["key", 0], ["lambda", 0], ["tup", 0], ["tup", 0], ["0", 0], ["1", 0], ["print", 0], ["cw", 0], ["ans", 0], ["for", 0], ["elem", 0], ["in", 0], ["w", 0], ["if", 0], ["elem", 0], ["not", 0], ["in", 0], ["cw", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["ans", 0], ["append", 0], ["cw", 0], ["elem", 0], ["pop", 0], ["print", 0], ["ans", 0], ["temp", 0], ["ans", 0], ["0", 0], ["for", 0], ["elem", 0], ["in", 0], ["ans", 0], ["1", 0], ["if", 0], ["temp", 0], ["0", 0], ["elem", 0], ["0", 0], ["and", 0], ["temp", 0], ["1", 0], ["elem", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["temp", 0], ["elem", 0], ["print", 0], ["yes", 0], ["for", 0], ["elem", 0], ["in", 0], ["ans", 0], ["print", 0], ["elem", 0], ["0", 0], ["elem", 0], ["1", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["coordinates", 0], ["coor", 0], ["weights", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["coordinates", 0], ["append", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["coor", 0], ["weights", 0], ["coordinates", 0], ["1", 0], ["1", 0], ["coordinates", 0], ["1", 0], ["0", 0], ["append", 0], ["coordinates", 0], ["1", 0], ["0", 0], ["coordinates", 0], ["1", 0], ["1", 0], ["weigths", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["solution", 0], ["n", 0], ["coordinates", 0], ["coor", 0], ["weights", 0], ["weigths", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["5", 0], ["2", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["2", 0], ["1", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["rstrip", 0], ["l", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["add", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["rstrip", 0], ["split", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["rstrip", 0], ["split", 0], ["d", 0], ["0", 0], ["0", 0], ["0", 0], ["s", 0], ["visited", 0], ["set", 0], ["visited", 0], ["add", 0], ["0", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["w", 0], ["if", 0], ["d", 0], ["get", 0], ["k", 0], ["none", 0], ["is", 0], ["none", 0], ["print", 0], ["no", 0], ["return", 0], ["p", 0], ["d", 0], ["k", 0], ["del", 0], ["d", 0], ["k", 0], ["s", 0], ["n", 0], ["format", 0], ["p", 0], ["if", 0], ["p", 0], ["1", 0], ["0", 0], ["and", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["in", 0], ["l", 0], ["visited", 0], ["add", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["d", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["0", 0], ["1", 0], ["0", 0], ["else", 0], ["if", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["1", 0], ["in", 0], ["visited", 0], ["and", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["in", 0], ["l", 0], ["visited", 0], ["add", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["d", 0], ["p", 0], ["1", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["if", 0], ["p", 0], ["0", 0], ["0", 0], ["and", 0], ["0", 0], ["p", 0], ["1", 0], ["1", 0], ["in", 0], ["l", 0], ["d", 0], ["p", 0], ["1", 0], ["1", 0], ["0", 0], ["p", 0], ["1", 0], ["1", 0], ["visited", 0], ["add", 0], ["0", 0], ["p", 0], ["1", 0], ["1", 0], ["else", 0], ["if", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["1", 0], ["in", 0], ["visited", 0], ["and", 0], ["p", 0], ["0", 0], ["p", 0], ["1", 0], ["1", 0], ["in", 0], ["l", 0], ["visited", 0], ["add", 0], ["p", 0], ["0", 0], ["p", 0], ["1", 0], ["1", 0], ["d", 0], ["p", 0], ["1", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["0", 0], ["p", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["s", 0], ["end", 0], ["def", 0], ["binsearch", 0], ["lofpoints", 0], ["l", 0], ["r", 0], ["w", 0], ["arr", 0], ["if", 0], ["l", 0], ["r", 0], ["return", 0], ["none", 0], ["mid", 0], ["l", 0], ["r", 0], ["2", 0], ["if", 0], ["lofpoints", 0], ["mid", 0], ["0", 0], ["w", 0], ["and", 0], ["arr", 0], ["mid", 0], ["1", 0], ["if", 0], ["mid", 0], ["0", 0], ["arr", 0], ["mid", 0], ["0", 0], ["return", 0], ["mid", 0], ["elif", 0], ["lofpoints", 0], ["mid", 0], ["1", 0], ["0", 0], ["w", 0], ["or", 0], ["arr", 0], ["mid", 0], ["1", 0], ["0", 0], ["arr", 0], ["mid", 0], ["0", 0], ["return", 0], ["mid", 0], ["else", 0], ["return", 0], ["binsearch", 0], ["lofpoints", 0], ["l", 0], ["mid", 0], ["1", 0], ["w", 0], ["arr", 0], ["if", 0], ["lofpoints", 0], ["mid", 0], ["0", 0], ["w", 0], ["and", 0], ["arr", 0], ["mid", 0], ["0", 0], ["return", 0], ["binsearch", 0], ["lofpoints", 0], ["mid", 0], ["1", 0], ["r", 0], ["w", 0], ["arr", 0], ["if", 0], ["lofpoints", 0], ["mid", 0], ["0", 0], ["w", 0], ["return", 0], ["binsearch", 0], ["lofpoints", 0], ["mid", 0], ["1", 0], ["r", 0], ["w", 0], ["arr", 0], ["if", 0], ["lofpoints", 0], ["mid", 0], ["0", 0], ["w", 0], ["return", 0], ["binsearch", 0], ["lofpoints", 0], ["l", 0], ["mid", 0], ["1", 0], ["w", 0], ["arr", 0], ["n", 0], ["int", 0], ["input", 0], ["lofpoints", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["l", 0], ["0", 0], ["y", 0], ["int", 0], ["l", 0], ["1", 0], ["lofpoints", 0], ["append", 0], ["y", 0], ["x", 0], ["x", 0], ["y", 0], ["lofpoints", 0], ["sort", 0], ["w", 0], ["input", 0], ["split", 0], ["wi", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["w", 0], ["arr", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["lsol", 0], ["done", 0], ["1", 0], ["print", 0], ["lofpoints", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["binsearch", 0], ["lofpoints", 0], ["0", 0], ["n", 0], ["1", 0], ["wi", 0], ["i", 0], ["arr", 0], ["print", 0], ["x", 0], ["if", 0], ["x", 0], ["none", 0], ["done", 0], ["0", 0], ["break", 0], ["elif", 0], ["lsol", 0], ["lsol", 0], ["append", 0], ["lofpoints", 0], ["x", 0], ["1", 0], ["lofpoints", 0], ["x", 0], ["2", 0], ["elif", 0], ["lofpoints", 0], ["x", 0], ["1", 0], ["lsol", 0], ["1", 0], ["0", 0], ["and", 0], ["lofpoints", 0], ["x", 0], ["2", 0], ["lsol", 0], ["1", 0], ["1", 0], ["done", 0], ["0", 0], ["break", 0], ["else", 0], ["lsol", 0], ["append", 0], ["lofpoints", 0], ["x", 0], ["1", 0], ["lofpoints", 0], ["x", 0], ["2", 0], ["print", 0], ["lsol", 0], ["if", 0], ["done", 0], ["1", 0], ["hashi", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["hashi", 0], ["lsol", 0], ["i", 0], ["0", 0], ["lsol", 0], ["i", 0], ["1", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["hashi", 0], ["x", 0], ["i", 0], ["0", 0], ["y", 0], ["i", 0], ["1", 0], ["t", 0], ["hashi", 0], ["i", 0], ["if", 0], ["x", 0], ["y", 0], ["1", 0], ["in", 0], ["hashi", 0], ["if", 0], ["hashi", 0], ["x", 0], ["y", 0], ["1", 0], ["t", 0], ["done", 0], ["0", 0], ["break", 0], ["if", 0], ["x", 0], ["1", 0], ["y", 0], ["in", 0], ["hashi", 0], ["if", 0], ["hashi", 0], ["x", 0], ["1", 0], ["y", 0], ["t", 0], ["done", 0], ["0", 0], ["break", 0], ["if", 0], ["done", 0], ["0", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["lsol", 0], ["print", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["sorted", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["w", 0], ["r", 0], ["pr", 0], ["for", 0], ["i", 0], ["wi", 0], ["in", 0], ["enumerate", 0], ["arr", 0], ["1", 0], ["if", 0], ["wi", 0], ["not", 0], ["in", 0], ["w", 0], ["w", 0], ["wi", 0], ["w", 0], ["wi", 0], ["append", 0], ["i", 0], ["def", 0], ["is", 0], ["nbr", 0], ["nb", 0], ["i", 0], ["return", 0], ["0", 0], ["if", 0], ["pr", 0], ["get", 0], ["nb", 0], ["0", 0], ["i", 0], ["else", 0], ["1", 0], ["def", 0], ["check", 0], ["nbrs", 0], ["p", 0], ["i", 0], ["n1", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["n2", 0], ["p", 0], ["0", 0], ["p", 0], ["1", 0], ["1", 0], ["n3", 0], ["p", 0], ["0", 0], ["1", 0], ["p", 0], ["1", 0], ["1", 0], ["return", 0], ["is", 0], ["nbr", 0], ["n1", 0], ["i", 0], ["and", 0], ["is", 0], ["nbr", 0], ["n2", 0], ["i", 0], ["and", 0], ["is", 0], ["nbr", 0], ["n3", 0], ["i", 0], ["def", 0], ["solve", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["p", 0], ["d", 0], ["p", 0], ["i", 0], ["1", 0], ["p", 0], ["i", 0], ["0", 0], ["if", 0], ["d", 0], ["not", 0], ["in", 0], ["w", 0], ["return", 0], ["0", 0], ["q", 0], ["w", 0], ["d", 0], ["if", 0], ["not", 0], ["q", 0], ["return", 0], ["0", 0], ["ind", 0], ["q", 0], ["pop", 0], ["0", 0], ["r", 0], ["ind", 0], ["p", 0], ["i", 0], ["pr", 0], ["p", 0], ["i", 0], ["ind", 0], ["if", 0], ["not", 0], ["check", 0], ["nbrs", 0], ["p", 0], ["i", 0], ["ind", 0], ["return", 0], ["0", 0], ["return", 0], ["1", 0], ["if", 0], ["solve", 0], ["0", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["k", 0], ["v", 0], ["in", 0], ["sorted", 0], ["r", 0], ["items", 0], ["print", 0], ["v", 0], ["0", 0], ["v", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nRecently Luba bought a very interesting book. She knows that it will take t seconds to read the book. Luba wants to finish reading as fast as she can.\n\nBut she has some work to do in each of n next days. The number of seconds that Luba has to spend working during i-th day is a_{i}. If some free time remains, she can spend it on reading.\n\nHelp Luba to determine the minimum number of day when she finishes reading.\n\nIt is guaranteed that the answer doesn't exceed n.\n\nRemember that there are 86400 seconds in a day.\n\n\n-----Input-----\n\nThe first line contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 10^6) — the number of days and the time required to read the book.\n\nThe second line contains n integers a_{i} (0 ≤ a_{i} ≤ 86400) — the time Luba has to spend on her work during i-th day.\n\n\n-----Output-----\n\nPrint the minimum day Luba can finish reading the book.\n\nIt is guaranteed that answer doesn't exceed n.\n\n\n-----Examples-----\nInput\n2 2\n86400 86398\n\nOutput\n2\n\nInput\n2 86400\n0 86400\n\nOutput\n1\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["R=lambda:list(map(int,input().split()))\nn,t=R()\na=R()\nfor i in range(n):\n\tt-=86400-a[i]\n\tif t<1:\n\t\tprint(i+1)\n\t\treturn\n", "n, t = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(1, n + 1):\n\tt -= 86400 - a[i - 1]\n\tif (t <= 0):\n\t\tprint(i)\n\t\tbreak\n", "n, t = list(map(int, input().split()))\na = [86400 - int(x) for x in input().split()]\ns = 0\nfor i in range(n):\n\ts += a[i]\n\tif s >= t:\n\t\tprint(i + 1)\n\t\tbreak\n", "n, t = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\ns = 0\nfor i in range(n):\n\ts += 86400 - a[i]\n\tif s >= t:\n\t\tprint(i + 1)\n\t\tbreak\n", "d=(input().split(' '))\nn=int(d[0])\nsayfa=int(d[1])\ni=0\nd=list(map(lambda x:int(x),input().split(' ')))\nwhile sayfa > 0:\n\tsayfa=sayfa-(86400-d[i])\n\ti+=1\nprint(i)\n", "n, t = [int(i) for i in input().split()]\na = [int(j) for j in input().split()]\nfor i in range(n):\n\tc = 86400 - a[i]\n\tt -= c\n\tif t <= 0:\n\t\tprint(i + 1)\n\t\tbreak\n", "n, t = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n\tt -= (86400 - a[i])\n\tif t <= 0:\n\t\tans = i + 1\n\t\tbreak\n\nprint(ans)\n", "n,t=list(map(int,input().split()))\na=list(map(int,input().split()))\nnumdays=0\ni=0\nwhile(t>0):\n\tt-=(86400-a[i])\n\ti+=1\nprint(i)\n\t\n", "n,t=list(map(int,input().split()))\na=list(map(int,input().split()))\nfor i in range(n):\n\tt=t-86400+a[i]\n\tif t<=0:\n\t\tprint(i+1)\n\t\tbreak\n", "import sys\nn,t=list(map(int,input().split()))\nl=list(map(int,input().split()))\nsum=0\n\nfor i in range(n):\n\tsum+=86400-l[i]\n\tif sum>=t:\n\t\tprint(i+1)\n\t\treturn\n\n", "TIME_IN_A_DAY = 86400\nn, t = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(len(a)):\n\tif TIME_IN_A_DAY - a[i] >= t:\n\t\tprint(i + 1)\n\t\tbreak\n\tt -= (TIME_IN_A_DAY - a[i])\n", "# your code goes here\nn,t = input().split()\nn = int(n)\nt = int(t)\na = list(map(int,input().split()))\ncount = 0\nsum=0\nfor i in a:\n\tsum=86400-i\n\tt-=sum\n\tcount+=1\n\tif(t<=0):\n\t\tprint(count)\n\t\tbreak\n", "n,t = list(map(int,input().split())) \ndata = list(map(int,input().split()))\ns=0\nnew=[]\nfor i in data:\n\ts+=(86400-i)\n\tnew.append(s)\nfor i in range(n):\n\tif new[i]>=t:\n\t\tprint(i+1)\n\t\tbreak\nelse:\n\tprint(n)\n", "n, t = [int(i) for i in input().split()]\ndias = [int(i) for i in input().split()]\nqtd = 0\nfor dia in dias:\n\tl = 86400 - dia\n\tt = t - l\n\tqtd = qtd + 1\n\tif t <= 0:\n\t\tbreak\nprint(qtd)\n", "n, t = map(int, input().split())\na = list(map(int, input().split()))\ni = 0\nwhile t > 0:\n\tt -= 86400 - a[i]\n\ti += 1\nprint(i)\n", "days , read = map(int, input().split(' '))\nday = 0\nschedule = [int(x) for x in input().strip().split(' ')]\n \nfor s in schedule:\n\ttoread = 86400 - s\n\tread-=toread\n\tday+=1\n\tif read<=0:\n\t\tbreak\nprint(day)\n", "n,t=map(int,input().split())\na=list(map(int,input().split()))\nk=0\nfor i in range(len(a)):\n\tk+=86400-a[i]\n\tif k>=t:\n\t\tprint(i+1)\n\t\tbreak\n", "n,t = list(map(int,input().split()))\narr = list(map(int,input().split()))\nc =  0 \nfor i in arr:\n\tt-= (86400-i)\n\tc+=1\n\tif t<=0:\n\t\tbreak\nprint(c)\n", "n, t = list(map(int, input().split()))\na = list(map(int, input().split()))\nfor i in range(n):\n\tt -= 86400 - a[i]\n\tif t <= 0:\n\t\tprint(i+1)\n\t\tbreak\n", "n,t=map(int,input().split())\na=list(map(int,input().split()))\nans=0\ntotal=0\nfor i in range(n):\n\ttotal+=86400-a[i]\n\tans+=1\n\tif total>=t:\n\t\tbreak\nprint(ans)\n", "n, t = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\nans = 1\nsums = []\n\nfor i in a:\n\tsums.append(86400 - i)\n\t\nwhile sum(sums[0:ans]) < t:\n\tans += 1\n\t\nprint(ans)\n", "a=input().split(' ')\nn=int(a[0])\nt=int(a[1])\na=input().split(' ')\na=[int(i) for i in a]\nfor i in range(n):\n\tif t<=0:\n\t\tprint(i)\n\t\tbreak\n\tt=t-(86400-a[i])\nelse:\n\tprint(n)\n\t\t\n", "# -*- coding: utf-8 -*-\n\ndef f(t, arr):\n\n\tmtime = 86400\n\t\n\tr = 1\n\tfor x in arr:\n\t\tt -= mtime - x\n\t\tif t <= 0:\n\t\t\tbreak\n\t\tr += 1\n\n\tprint(r)\n\n\ndef __starting_point():\n\t\n\tn, t = list(map(int, input().split()))\n\tarr = list(map(int, input().split()))\n\n\t# for i in range(n):\n\t#   list(map(int, input().split()))\n\n\tf(t, arr)\n__starting_point()\n", "n,t = list(map(int, input().split()))\nk = 0\nz = list(map(int, input().split()))\ni = 0\nwhile t > 86400 - z[i]:\n\tt -= 86400 - z[i]\n\ti += 1\nprint(i + 1)\n", "n,t=map(int,input().split())\narr=map(int,input().split())\n\nans=0\nfor i in arr:\n\tt-=86400-i\n\tans+=1\n\tif t<=0:\n\t\tbreak\nprint(ans)\n"], "id": "id5487"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5487", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["recently", 1], ["luba", 1], ["bought", 1], ["a", 1], ["very", 1], ["interesting", 1], ["book", 1], ["she", 1], ["knows", 1], ["that", 1], ["it", 1], ["will", 1], ["take", 1], ["t", 1], ["seconds", 1], ["to", 1], ["read", 1], ["the", 1], ["book", 1], ["luba", 1], ["wants", 1], ["to", 1], ["finish", 1], ["reading", 1], ["as", 1], ["fast", 1], ["as", 1], ["she", 1], ["can", 1], ["but", 1], ["she", 1], ["has", 1], ["some", 1], ["work", 1], ["to", 1], ["do", 1], ["in", 1], ["each", 1], ["of", 1], ["n", 1], ["next", 1], ["days", 1], ["the", 1], ["number", 1], ["of", 1], ["seconds", 0], ["that", 0], ["luba", 0], ["has", 0], ["to", 0], ["spend", 0], ["working", 0], ["during", 0], ["i", 0], ["th", 0], ["day", 0], ["is", 0], ["a", 0], ["i", 0], ["if", 1], ["some", 1], ["free", 1], ["time", 1], ["remains", 1], ["she", 1], ["can", 1], ["spend", 1], ["it", 1], ["on", 1], ["reading", 1], ["help", 1], ["luba", 1], ["to", 1], ["determine", 1], ["the", 1], ["minimum", 1], ["number", 1], ["of", 1], ["day", 1], ["when", 1], ["she", 1], ["finishes", 1], ["reading", 1], ["it", 1], ["is", 1], ["guaranteed", 1], ["that", 1], ["the", 1], ["answer", 1], ["doesn", 1], ["t", 0], ["exceed", 0], ["n", 0], ["remember", 0], ["that", 0], ["there", 0], ["are", 0], ["86400", 0], ["seconds", 0], ["in", 0], ["a", 0], ["day", 0], ["input", 0], ["the", 3], ["first", 1], ["line", 1], ["contains", 1], ["two", 1], ["integers", 1], ["n", 0], ["and", 0], ["t", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["100", 0], ["1", 0], ["≤", 0], ["t", 0], ["≤", 0], ["10", 0], ["6", 0], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["days", 1], ["and", 1], ["the", 1], ["time", 0], ["required", 0], ["to", 0], ["read", 0], ["the", 0], ["book", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["a", 0], ["i", 0], ["0", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 1], ["86400", 1], ["—", 1], ["the", 1], ["time", 0], ["luba", 0], ["has", 0], ["to", 0], ["spend", 0], ["on", 0], ["her", 0], ["work", 0], ["during", 0], ["i", 0], ["th", 0], ["day", 0], ["output", 0], ["print", 1], ["the", 1], ["minimum", 1], ["day", 1], ["luba", 1], ["can", 1], ["finish", 1], ["reading", 0], ["the", 0], ["book", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["answer", 0], ["doesn", 0], ["t", 0], ["exceed", 0], ["n", 0], ["examples", 0], ["input", 0], ["2", 0], ["2", 0], ["86400", 0], ["86398", 0], ["output", 0], ["2", 0], ["input", 0], ["2", 0], ["86400", 0], ["0", 0], ["86400", 0], ["output", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5050505050505051, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5016835016835016, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.819047619047619, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8158730158730158, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5050505050505051, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5016835016835016, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.819047619047619, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8158730158730158, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["r", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["t", 0], ["r", 0], ["a", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["86400", 0], ["a", 0], ["i", 0], ["if", 0], ["t", 0], ["1", 0], ["print", 0], ["i", 0], ["1", 0], ["return", 0], ["n", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["t", 0], ["86400", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["t", 0], ["0", 0], ["print", 0], ["i", 0], ["break", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["86400", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["a", 0], ["i", 0], ["if", 0], ["s", 0], ["t", 0], ["print", 0], ["i", 0], ["1", 0], ["break", 0], ["n", 0], ["t", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["86400", 0], ["a", 0], ["i", 0], ["if", 0], ["s", 0], ["t", 0], ["print", 0], ["i", 0], ["1", 0], ["break", 0], ["d", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["d", 0], ["0", 0], ["sayfa", 0], ["int", 0], ["d", 0], ["1", 0], ["i", 0], ["0", 0], ["d", 0], ["list", 0], ["map", 0], ["lambda", 0], ["x", 0], ["int", 0], ["x", 0], ["input", 0], ["split", 0], ["while", 0], ["sayfa", 0], ["0", 0], ["sayfa", 0], ["sayfa", 0], ["86400", 0], ["d", 0], ["i", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["n", 0], ["t", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["86400", 0], ["a", 0], ["i", 0], ["t", 0], ["c", 0], ["if", 0], ["t", 0], ["0", 0], ["print", 0], ["i", 0], ["1", 0], ["break", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["86400", 0], ["a", 0], ["i", 0], ["if", 0], ["t", 0], ["0", 0], ["ans", 0], ["i", 0], ["1", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["numdays", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["t", 0], ["0", 0], ["t", 0], ["86400", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["t", 0], ["86400", 0], ["a", 0], ["i", 0], ["if", 0], ["t", 0], ["0", 0], ["print", 0], ["i", 0], ["1", 0], ["break", 0], ["import", 0], ["sys", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sum", 0], ["86400", 0], ["l", 0], ["i", 0], ["if", 0], ["sum", 0], ["t", 0], ["print", 0], ["i", 0], ["1", 0], ["return", 0], ["time", 0], ["in", 0], ["a", 0], ["day", 0], ["86400", 0], ["n", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["time", 0], ["in", 0], ["a", 0], ["day", 0], ["a", 0], ["i", 0], ["t", 0], ["print", 0], ["i", 0], ["1", 0], ["break", 0], ["t", 0], ["time", 0], ["in", 0], ["a", 0], ["day", 0], ["a", 0], ["i", 0], ["your", 0], ["code", 0], ["goes", 0], ["here", 0], ["n", 0], ["t", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["t", 0], ["int", 0], ["t", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["sum", 0], ["86400", 0], ["i", 0], ["t", 0], ["sum", 0], ["count", 0], ["1", 0], ["if", 0], ["t", 0], ["0", 0], ["print", 0], ["count", 0], ["break", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["data", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["new", 0], ["for", 0], ["i", 0], ["in", 0], ["data", 0], ["s", 0], ["86400", 0], ["i", 0], ["new", 0], ["append", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["new", 0], ["i", 0], ["t", 0], ["print", 0], ["i", 0], ["1", 0], ["break", 0], ["else", 0], ["print", 0], ["n", 0], ["n", 0], ["t", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["dias", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["qtd", 0], ["0", 0], ["for", 0], ["dia", 0], ["in", 0], ["dias", 0], ["l", 0], ["86400", 0], ["dia", 0], ["t", 0], ["t", 0], ["l", 0], ["qtd", 0], ["qtd", 0], ["1", 0], ["if", 0], ["t", 0], ["0", 0], ["break", 0], ["print", 0], ["qtd", 0], ["n", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["0", 0], ["while", 0], ["t", 0], ["0", 0], ["t", 0], ["86400", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["days", 0], ["read", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["day", 0], ["0", 0], ["schedule", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["for", 0], ["s", 0], ["in", 0], ["schedule", 0], ["toread", 0], ["86400", 0], ["s", 0], ["read", 0], ["toread", 0], ["day", 0], ["1", 0], ["if", 0], ["read", 0], ["0", 0], ["break", 0], ["print", 0], ["day", 0], ["n", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["k", 0], ["86400", 0], ["a", 0], ["i", 0], ["if", 0], ["k", 0], ["t", 0], ["print", 0], ["i", 0], ["1", 0], ["break", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["arr", 0], ["t", 0], ["86400", 0], ["i", 0], ["c", 0], ["1", 0], ["if", 0], ["t", 0], ["0", 0], ["break", 0], ["print", 0], ["c", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["86400", 0], ["a", 0], ["i", 0], ["if", 0], ["t", 0], ["0", 0], ["print", 0], ["i", 0], ["1", 0], ["break", 0], ["n", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["total", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["total", 0], ["86400", 0], ["a", 0], ["i", 0], ["ans", 0], ["1", 0], ["if", 0], ["total", 0], ["t", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["t", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["sums", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["sums", 0], ["append", 0], ["86400", 0], ["i", 0], ["while", 0], ["sum", 0], ["sums", 0], ["0", 0], ["ans", 0], ["t", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["a", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["a", 0], ["0", 0], ["t", 0], ["int", 0], ["a", 0], ["1", 0], ["a", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["t", 0], ["0", 0], ["print", 0], ["i", 0], ["break", 0], ["t", 0], ["t", 0], ["86400", 0], ["a", 0], ["i", 0], ["else", 0], ["print", 0], ["n", 0], ["coding", 0], ["utf", 0], ["8", 0], ["def", 0], ["f", 0], ["t", 0], ["arr", 0], ["mtime", 0], ["86400", 0], ["r", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["t", 0], ["mtime", 0], ["x", 0], ["if", 0], ["t", 0], ["0", 0], ["break", 0], ["r", 0], ["1", 0], ["print", 0], ["r", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["t", 0], ["arr", 0], ["starting", 0], ["point", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["0", 0], ["z", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["0", 0], ["while", 0], ["t", 0], ["86400", 0], ["z", 0], ["i", 0], ["t", 0], ["86400", 0], ["z", 0], ["i", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["1", 0], ["n", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["arr", 0], ["t", 0], ["86400", 0], ["i", 0], ["ans", 0], ["1", 0], ["if", 0], ["t", 0], ["0", 0], ["break", 0], ["print", 0], ["ans", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThe busses in Berland are equipped with a video surveillance system. The system records information about changes in the number of passengers in a bus after stops.\n\nIf $x$ is the number of passengers in a bus just before the current bus stop and $y$ is the number of passengers in the bus just after current bus stop, the system records the number $y-x$. So the system records show how number of passengers changed.\n\nThe test run was made for single bus and $n$ bus stops. Thus, the system recorded the sequence of integers $a_1, a_2, \\dots, a_n$ (exactly one number for each bus stop), where $a_i$ is the record for the bus stop $i$. The bus stops are numbered from $1$ to $n$ in chronological order.\n\nDetermine the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$ (that is, at any time in the bus there should be from $0$ to $w$ passengers inclusive).\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $w$ $(1 \\le n \\le 1\\,000, 1 \\le w \\le 10^{9})$ — the number of bus stops and the capacity of the bus.\n\nThe second line contains a sequence $a_1, a_2, \\dots, a_n$ $(-10^{6} \\le a_i \\le 10^{6})$, where $a_i$ equals to the number, which has been recorded by the video system after the $i$-th bus stop.\n\n\n-----Output-----\n\nPrint the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$. If the situation is contradictory (i.e. for any initial number of passengers there will be a contradiction), print 0.\n\n\n-----Examples-----\nInput\n3 5\n2 1 -3\n\nOutput\n3\n\nInput\n2 4\n-1 1\n\nOutput\n4\n\nInput\n4 10\n2 4 1 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example initially in the bus could be $0$, $1$ or $2$ passengers.\n\nIn the second example initially in the bus could be $1$, $2$, $3$ or $4$ passengers.\n\nIn the third example initially in the bus could be $0$ or $1$ passenger.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["stops, cap = map(int,input().split())\n\na = list(map(int,input().split()))\n\nstart_max = cap\nstart_min = 0\n\ncurrent = 0\nfor x in a:\n\tcurrent += x\n\tstart_max = min(cap-current, start_max)\n\tstart_min = max(start_min,-current)\n\tif abs(current) > cap:\n\t\tprint (0)\n\t\tbreak\nelse:\n\tif start_max<start_min:\n\t\tprint (0)\n\telse:\n\t\tprint (start_max-start_min + 1)\n", "data1 = list(map(int, input().split()))\ndata2 = list(map(int, input().split()))\nk = 0\no = 0\nh = 0\nfor i in range(data1[0]):\n\tk += data2[i]\n\tif k >= o:\n\t\to = k\n\tif k < h:\n\t\th = k\nans = data1[1] - (o + abs(h)) + 1\nif ans > 0:\n\tprint(ans)\nelse:\n\tprint(0)\n", "n, w = list(map(int, input().split()))\nv = list(map(int, input().split()))\n\nmini, maxi = 0, 0\ns = 0\nfor i in range(n):\n\ts += v[i]\n\tmini = min(mini, s)\n\tmaxi = max(maxi, s)\n\nres = max(0, w - (maxi - mini) + 1)\nprint(res)\n", "N, W = (int(i) for i in input().split())\nL = [int(i) for i in input().split()]\n\nn = 0\nleft = 0\nright = W\n\nfor i in L:\n\tn += i\n\tif n + right > W:\n\t\tright -= n + right - W\n\tif n + left < 0:\n\t\tleft += -(n + left)\n\nprint(max(right - left + 1, 0))\n", "n,m=map(int,input().split())\na=list(map(int,input().split()))\nmi=0\nma=0\nk=0\nfor i in range(n):\n\tk+=a[i]\n\tif k>ma:\n\t\tma=k\n\tif k<mi:\n\t\tmi=k\nif m-ma+mi+1<0:\n\tprint(0)\nelse:\n\tprint(m-ma+mi+1)\n", "n, w = map(int, input().split())\na = list(map(int, input().split()))\nmx, mn, bal = 0, 0, 0\nfor aa in a:\n\tbal += aa\n\tmx, mn = max(mx, bal), min(mn, bal)\nleft, right = - mn, w - mx\nif right < 0 or left > right:\n\tprint(0)\nelse:\n\tprint(right - left + 1)\n", "n, w = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ns = 0\nmin_s = 10000000\nmax_s = -10000000\n\nfor i, e in enumerate(a):\n\ts += e\n\n\tmin_s = min(s, min_s)\n\tmax_s = max(s, max_s)\n\nif -min_s > w:\n\tprint(0)\n\tquit()\n\nif max_s > w:\n\tprint(0)\n\tquit()\n\nif max_s >= 0 and min_s >= 0:\n\tmax_s = w - max_s + 1\nelif max_s >=  0 and min_s < 0:\n\tmax_s = w - max_s + min_s + 1\nelif max_s < 0:\n\tmax_s = w + min_s + 1\n\n\n\nif max_s < 0:\n\tprint(0)\nelse:\n\tprint(max_s)\n", "T = input().split(' ')\nn = int(T[0])\nw = int(T[1])\nS = input().split(' ')\nfor i in range(len(S)):\n\tS[i] = int(S[i])\nm = 0\nM = 0\nt = 0\nfor i in range(len(S)):\n\tt+=S[i]\n\tM = max(M, t)\n\tm = min(m, t)\nif -m <= w - M:\n\tprint(w - M + m + 1)\nelse:\n\tprint(0)\n", "stops,m = list(map(int,input().split()))\npeople = [int(i) for i in input().split()]\n\ncM = 0\ncm = 0\nc = 0\nfor i in range(stops):\n\tc += people[i]\n\tif c > cM:\n\t\tcM = c\n\tif c <cm:\n\t\tcm = c\n\nprint(m-cM+cm+1 if m-cM+cm+1>=1 else 0)\n", "n, w = map(int, input().split())\nmaxp, minp = 0, 0\na = list(map(int, input().split()))\nnow = 0\nfor i in range(n):\n\tnow += a[i]\n\tmaxp = max(maxp, now)\n\tminp = min(minp, now)\nprint(max(0, w - maxp + minp + 1))\n", "n, m = map(int, input().split())\nf, s = 0, 0\np = 0\nfor i in list(map(int, input().split())):\n\tp += i\n\tif p < 0:\n\t\tf = min(f, p)\n\tif p > 0:\n\t\ts = max(s, p)\nprint(0 if s > m or -f > m or m - s < -f else m - s + f + 1)\n", "n, w = list(map(int, input().split()))\nar = list(map(int, input().split()))\n\ndifs = []\ns = 0\nfor x in range(n):\n\ts += ar[x]\n\tdifs.append(s)\n\nminn, maxx = min(difs), max(difs)\nmaxres, minres = w, 0\nif maxx > 0:\n\tmaxres -= maxx\nif minn < 0:\n\tminres -= minn\n\nif maxres < 0 or minres > w or minres > maxres:\n\tprint(0)\nelse:\n\tprint(maxres - minres + 1)\n", "n, w = list(map(int, input().split()))\ncur_delta = max_delta = min_delta = 0\nfor ai in map(int, input().split()):\n\tcur_delta += ai\n\tmax_delta = max(max_delta, cur_delta)\n\tmin_delta = min(min_delta, cur_delta)\nmin_res = 0-min_delta\nmax_res = w-max_delta\nif max_res < min_res:\n\tprint('0')\nelse:\n\tprint(max_res+1-min_res)\n", "n, w = map(int, input().split())\na = [int(i) for i in input().split()]\nres = [0] * (n + 1)\nfor i in range(n):\n\tres[i] = a[i]\n\tres[i] += res[i - 1]\nr = w\nl = 0\nfor i in range(n):\n\tr = min(r, w - res[i])\n\tl = max(l, -res[i])\nprint(max(r - l + 1, 0))\n", "n, w = list(map(int, input().split()))\narr = list(map(int, input().split()))\nmx = 0\nmn = 0\ncurr = 0\nfor i in arr:\n\tcurr += i\n\tmx = max(curr, mx)\n\tmn = min(curr, mn)\nans = w + 1 - (mx - mn)\nif ans < 0:\n\tprint(0)\nelse:\n\tprint(ans)\n", "import sys\n\n_, max_capacity = list(map(int, next(sys.stdin).rstrip().split()))\n\nxs = list(map(int, next(sys.stdin).rstrip().split()))\n\ncurrent = 0\nmax_x = 0\nmin_x = 0\n\nfor x in xs:\n\tcurrent += x\n\tmax_x = max(max_x, current)\n\tmin_x = min(min_x, current)\n\ncalibration = max_x - min_x\n\nif calibration > max_capacity:\n\tprint(0)\nelse:\n\tprint(max_capacity - calibration + 1)\n", "n, w = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nmax_p = 0\nmin_p = 0\n\ns = 0\nfor step in a:\n\ts += step\n\tif s > max_p:\n\t\tmax_p = s\n\tif s < min_p:\n\t\tmin_p = s\n\nd = max_p - min_p\n\n#print(max_p, min_p, d)\n\nif w - d + 1 > 0:\n\tprint(w - d + 1)\nelse:\n\tprint(0)\n", "(n, l) = list(map(int, input().split()))\nmaxim = 0\nmin = 0\nx = 0\na = list(map(int, input().split()))\nfor i in range(n):\n\tx += a[i]\n\tif x > maxim:\n\t\tmaxim = x\n\tif x < min:\n\t\tmin = x\nif (maxim-min) > l:\n\tprint(0)\nelse:\n\tprint(l-(maxim-min)+1)\n\n", "from itertools import accumulate\n\ndef main():\n\tn, w = [int(_) for _ in input().split()]\n\ta = [int(_) for _ in input().split()]\n\n\tc = list(accumulate(a))\n\n\t# print(a)\n\t# print(c)\n\t# print(max(c), min(c))\n\n\tans = min(w, w - max(c)) - max(-min(c), 0) + 1\n\tif ans <= 0:\n\t\tprint(0)\n\telse:\n\t\tprint(ans)\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n, w = list(map(int, input().split()))\na = list(map(int, input().split()))\nprefix = [0]\nsumm = 0\nfor i in range(n):\n\tsumm += a[i]\n\tprefix.append(summ)\nr = max(prefix)\nt = min(prefix)\ncnt1 = 0\nif t < 0:\n\tcnt1 += abs(t)\ncnt2 = w - r\nif cnt2 - cnt1 + 1 <= 0:\n\tprint(0)\nelse:\t\n\tprint(cnt2 - cnt1 + 1)\t\n\n", "# Project name: CF-481-E-D3\n\nn,w = map(int, input().split())\na = list(map(int, input().split()))\nr=[0]\nfor i in a:\n\tr+=[r[-1]+i]\n\nif (((w-max(r)+1)+min(r))) <0:\n\tprint (0)\nelse: print ((w-max(r)+1)+min(r))\n", "n, w = list(map(int, input().split()))\nL = list(map(int, input().split()))\nmaxim = 0\nminin = 0\nsumma = 0\nfor i in range(n):\n\tsumma += L[i]\n\tif summa > maxim:\n\t\tmaxim = summa\n\tif summa < minin:\n\t\tminin = summa\nprint(max(0, w - maxim + minin + 1))\n", "n, w = list(map(int, input().split()))\na = list(map(int, input().split()))\ncur = 0\nmn, mx = 0, w\nfor el in a:\n\tcur += el\n\tif cur < 0:\n\t\tmn = max(mn, abs(cur))\n\telse:\n\t\tmx = min(mx, w - cur)\nif mn > mx:\n\tprint(0)\nelse:\n\tprint(mx - mn + 1)\n", "from itertools import accumulate\n\nn, w = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ns_a = [0] + list(accumulate(a))\nmn, mx = min(s_a), max(s_a)\n\nmn_ = max(0, -mn)\nmx_ = w - mx\n\nif mx_ < 0 or mx_ < mn_ or mn_ > w or mx - mn > w or mx_ - mn_ > w or mn < -w or mx > w or min(a) < -w or max(a) > w:\n\tprint(0)\n\treturn\n\nprint(mx_ - mn_ + 1)\n", "n, w = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nmx = 0\nmn = 0\ncur = 0\nfor aa in a:\n\tcur += aa\n\tmx = max(cur, mx)\n\tmn = min(cur, mn)\n\nup = w - mx + 1\ndown = abs(mn)\nif down > up:\n\tprint(0)\nelse:\n\tprint(up - down)\n"], "id": "id9012"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9012", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 2], ["busses", 2], ["in", 2], ["berland", 2], ["are", 2], ["equipped", 2], ["with", 2], ["a", 2], ["video", 2], ["surveillance", 2], ["system", 2], ["the", 2], ["system", 2], ["records", 2], ["information", 2], ["about", 2], ["changes", 2], ["in", 2], ["the", 2], ["number", 2], ["of", 2], ["passengers", 2], ["in", 2], ["a", 2], ["bus", 2], ["after", 2], ["stops", 2], ["if", 2], ["x", 2], ["is", 2], ["the", 2], ["number", 2], ["of", 2], ["passengers", 2], ["in", 2], ["a", 2], ["bus", 2], ["just", 2], ["before", 2], ["the", 2], ["current", 2], ["bus", 2], ["stop", 2], ["and", 2], ["y", 2], ["is", 2], ["the", 2], ["number", 2], ["of", 2], ["passengers", 2], ["in", 2], ["the", 2], ["bus", 2], ["just", 2], ["after", 2], ["current", 2], ["bus", 2], ["stop", 2], ["the", 2], ["system", 2], ["records", 2], ["the", 2], ["number", 2], ["y", 2], ["x", 2], ["so", 2], ["the", 2], ["system", 2], ["records", 2], ["show", 2], ["how", 2], ["number", 2], ["of", 2], ["passengers", 2], ["changed", 2], ["the", 2], ["test", 2], ["run", 2], ["was", 2], ["made", 2], ["for", 2], ["single", 2], ["bus", 2], ["and", 2], ["n", 2], ["bus", 2], ["stops", 2], ["thus", 2], ["the", 2], ["system", 2], ["recorded", 2], ["the", 2], ["sequence", 2], ["of", 2], ["integers", 2], ["a", 2], ["1", 2], ["a", 2], ["2", 2], ["dots", 2], ["a", 2], ["n", 2], ["exactly", 2], ["one", 2], ["number", 2], ["for", 2], ["each", 2], ["bus", 2], ["stop", 2], ["where", 2], ["a", 2], ["i", 2], ["is", 2], ["the", 2], ["record", 2], ["for", 2], ["the", 2], ["bus", 2], ["stop", 2], ["i", 2], ["the", 2], ["bus", 2], ["stops", 2], ["are", 2], ["numbered", 2], ["from", 2], ["1", 2], ["to", 2], ["n", 2], ["in", 2], ["chronological", 2], ["order", 2], ["determine", 2], ["the", 4], ["number", 4], ["of", 4], ["possible", 4], ["ways", 4], ["how", 4], ["many", 4], ["people", 4], ["could", 4], ["be", 4], ["in", 4], ["the", 4], ["bus", 4], ["before", 4], ["the", 4], ["first", 2], ["bus", 2], ["stop", 2], ["if", 2], ["the", 2], ["bus", 2], ["has", 2], ["a", 2], ["capacity", 2], ["equals", 2], ["to", 2], ["w", 2], ["that", 2], ["is", 2], ["at", 2], ["any", 2], ["time", 2], ["in", 0], ["the", 0], ["bus", 0], ["there", 0], ["should", 0], ["be", 0], ["from", 0], ["0", 0], ["to", 0], ["w", 0], ["passengers", 0], ["inclusive", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 2], ["contains", 2], ["two", 2], ["integers", 2], ["n", 2], ["and", 2], ["w", 2], ["1", 2], ["le", 2], ["n", 2], ["le", 2], ["1", 2], ["000", 2], ["1", 2], ["le", 2], ["w", 2], ["le", 2], ["10", 2], ["9", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["bus", 2], ["stops", 2], ["and", 2], ["the", 2], ["capacity", 2], ["of", 2], ["the", 2], ["bus", 2], ["the", 2], ["second", 2], ["line", 2], ["contains", 2], ["a", 2], ["sequence", 2], ["a", 2], ["1", 2], ["a", 2], ["2", 2], ["dots", 2], ["a", 2], ["n", 2], ["10", 2], ["6", 2], ["le", 2], ["a", 2], ["i", 2], ["le", 2], ["10", 2], ["6", 2], ["where", 2], ["a", 2], ["i", 2], ["equals", 2], ["to", 2], ["the", 2], ["number", 2], ["which", 2], ["has", 2], ["been", 0], ["recorded", 0], ["by", 0], ["the", 0], ["video", 0], ["system", 0], ["after", 0], ["the", 0], ["i", 0], ["th", 0], ["bus", 0], ["stop", 0], ["output", 0], ["print", 2], ["the", 4], ["number", 4], ["of", 4], ["possible", 4], ["ways", 4], ["how", 4], ["many", 4], ["people", 4], ["could", 4], ["be", 4], ["in", 4], ["the", 4], ["bus", 4], ["before", 4], ["the", 4], ["first", 2], ["bus", 2], ["stop", 2], ["if", 2], ["the", 2], ["bus", 2], ["has", 2], ["a", 2], ["capacity", 2], ["equals", 2], ["to", 2], ["w", 2], ["if", 2], ["the", 2], ["situation", 2], ["is", 2], ["contradictory", 2], ["i", 2], ["e", 2], ["for", 2], ["any", 0], ["initial", 0], ["number", 0], ["of", 0], ["passengers", 0], ["there", 0], ["will", 0], ["be", 0], ["a", 0], ["contradiction", 0], ["print", 0], ["0", 0], ["examples", 0], ["input", 0], ["3", 0], ["5", 0], ["2", 0], ["1", 0], ["3", 0], ["output", 0], ["3", 0], ["input", 0], ["2", 0], ["4", 0], ["1", 0], ["1", 0], ["output", 0], ["4", 0], ["input", 0], ["4", 0], ["10", 0], ["2", 0], ["4", 0], ["1", 0], ["2", 0], ["output", 0], ["2", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["example", 2], ["initially", 2], ["in", 2], ["the", 2], ["bus", 2], ["could", 2], ["be", 2], ["0", 2], ["1", 2], ["or", 2], ["2", 2], ["passengers", 2], ["in", 2], ["the", 2], ["second", 2], ["example", 2], ["initially", 2], ["in", 2], ["the", 2], ["bus", 2], ["could", 2], ["be", 2], ["1", 2], ["2", 2], ["3", 2], ["or", 2], ["4", 2], ["passengers", 2], ["in", 2], ["the", 2], ["third", 0], ["example", 0], ["initially", 0], ["in", 0], ["the", 0], ["bus", 0], ["could", 0], ["be", 0], ["0", 0], ["or", 0], ["1", 0], ["passenger", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7983870967741935, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3790322580645161, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8984375, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.44921875, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7983870967741935, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3790322580645161, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8984375, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.44921875, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["stops", 0], ["cap", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["start", 0], ["max", 0], ["cap", 0], ["start", 0], ["min", 0], ["0", 0], ["current", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["current", 0], ["x", 0], ["start", 0], ["max", 0], ["min", 0], ["cap", 0], ["current", 0], ["start", 0], ["max", 0], ["start", 0], ["min", 0], ["max", 0], ["start", 0], ["min", 0], ["current", 0], ["if", 0], ["abs", 0], ["current", 0], ["cap", 0], ["print", 0], ["0", 0], ["break", 0], ["else", 0], ["if", 0], ["start", 0], ["max", 0], ["start", 0], ["min", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["start", 0], ["max", 0], ["start", 0], ["min", 0], ["1", 0], ["data1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["data2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["0", 0], ["o", 0], ["0", 0], ["h", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["data1", 0], ["0", 0], ["k", 0], ["data2", 0], ["i", 0], ["if", 0], ["k", 0], ["o", 0], ["o", 0], ["k", 0], ["if", 0], ["k", 0], ["h", 0], ["h", 0], ["k", 0], ["ans", 0], ["data1", 0], ["1", 0], ["o", 0], ["abs", 0], ["h", 0], ["1", 0], ["if", 0], ["ans", 0], ["0", 0], ["print", 0], ["ans", 0], ["else", 0], ["print", 0], ["0", 0], ["n", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mini", 0], ["maxi", 0], ["0", 0], ["0", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["v", 0], ["i", 0], ["mini", 0], ["min", 0], ["mini", 0], ["s", 0], ["maxi", 0], ["max", 0], ["maxi", 0], ["s", 0], ["res", 0], ["max", 0], ["0", 0], ["w", 0], ["maxi", 0], ["mini", 0], ["1", 0], ["print", 0], ["res", 0], ["n", 0], ["w", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["l", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["0", 0], ["left", 0], ["0", 0], ["right", 0], ["w", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["n", 0], ["i", 0], ["if", 0], ["n", 0], ["right", 0], ["w", 0], ["right", 0], ["n", 0], ["right", 0], ["w", 0], ["if", 0], ["n", 0], ["left", 0], ["0", 0], ["left", 0], ["n", 0], ["left", 0], ["print", 0], ["max", 0], ["right", 0], ["left", 0], ["1", 0], ["0", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mi", 0], ["0", 0], ["ma", 0], ["0", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["a", 0], ["i", 0], ["if", 0], ["k", 0], ["ma", 0], ["ma", 0], ["k", 0], ["if", 0], ["k", 0], ["mi", 0], ["mi", 0], ["k", 0], ["if", 0], ["m", 0], ["ma", 0], ["mi", 0], ["1", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["m", 0], ["ma", 0], ["mi", 0], ["1", 0], ["n", 0], ["w", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mx", 0], ["mn", 0], ["bal", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["aa", 0], ["in", 0], ["a", 0], ["bal", 0], ["aa", 0], ["mx", 0], ["mn", 0], ["max", 0], ["mx", 0], ["bal", 0], ["min", 0], ["mn", 0], ["bal", 0], ["left", 0], ["right", 0], ["mn", 0], ["w", 0], ["mx", 0], ["if", 0], ["right", 0], ["0", 0], ["or", 0], ["left", 0], ["right", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["right", 0], ["left", 0], ["1", 0], ["n", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["min", 0], ["s", 0], ["10000000", 0], ["max", 0], ["s", 0], ["10000000", 0], ["for", 0], ["i", 0], ["e", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["s", 0], ["e", 0], ["min", 0], ["s", 0], ["min", 0], ["s", 0], ["min", 0], ["s", 0], ["max", 0], ["s", 0], ["max", 0], ["s", 0], ["max", 0], ["s", 0], ["if", 0], ["min", 0], ["s", 0], ["w", 0], ["print", 0], ["0", 0], ["quit", 0], ["if", 0], ["max", 0], ["s", 0], ["w", 0], ["print", 0], ["0", 0], ["quit", 0], ["if", 0], ["max", 0], ["s", 0], ["0", 0], ["and", 0], ["min", 0], ["s", 0], ["0", 0], ["max", 0], ["s", 0], ["w", 0], ["max", 0], ["s", 0], ["1", 0], ["elif", 0], ["max", 0], ["s", 0], ["0", 0], ["and", 0], ["min", 0], ["s", 0], ["0", 0], ["max", 0], ["s", 0], ["w", 0], ["max", 0], ["s", 0], ["min", 0], ["s", 0], ["1", 0], ["elif", 0], ["max", 0], ["s", 0], ["0", 0], ["max", 0], ["s", 0], ["w", 0], ["min", 0], ["s", 0], ["1", 0], ["if", 0], ["max", 0], ["s", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["max", 0], ["s", 0], ["t", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["t", 0], ["0", 0], ["w", 0], ["int", 0], ["t", 0], ["1", 0], ["s", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["s", 0], ["i", 0], ["int", 0], ["s", 0], ["i", 0], ["m", 0], ["0", 0], ["m", 0], ["0", 0], ["t", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["t", 0], ["s", 0], ["i", 0], ["m", 0], ["max", 0], ["m", 0], ["t", 0], ["m", 0], ["min", 0], ["m", 0], ["t", 0], ["if", 0], ["m", 0], ["w", 0], ["m", 0], ["print", 0], ["w", 0], ["m", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["0", 0], ["stops", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["people", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["cm", 0], ["0", 0], ["cm", 0], ["0", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["stops", 0], ["c", 0], ["people", 0], ["i", 0], ["if", 0], ["c", 0], ["cm", 0], ["cm", 0], ["c", 0], ["if", 0], ["c", 0], ["cm", 0], ["cm", 0], ["c", 0], ["print", 0], ["m", 0], ["cm", 0], ["cm", 0], ["1", 0], ["if", 0], ["m", 0], ["cm", 0], ["cm", 0], ["1", 0], ["1", 0], ["else", 0], ["0", 0], ["n", 0], ["w", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["maxp", 0], ["minp", 0], ["0", 0], ["0", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["now", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["now", 0], ["a", 0], ["i", 0], ["maxp", 0], ["max", 0], ["maxp", 0], ["now", 0], ["minp", 0], ["min", 0], ["minp", 0], ["now", 0], ["print", 0], ["max", 0], ["0", 0], ["w", 0], ["maxp", 0], ["minp", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["s", 0], ["0", 0], ["0", 0], ["p", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["i", 0], ["if", 0], ["p", 0], ["0", 0], ["f", 0], ["min", 0], ["f", 0], ["p", 0], ["if", 0], ["p", 0], ["0", 0], ["s", 0], ["max", 0], ["s", 0], ["p", 0], ["print", 0], ["0", 0], ["if", 0], ["s", 0], ["m", 0], ["or", 0], ["f", 0], ["m", 0], ["or", 0], ["m", 0], ["s", 0], ["f", 0], ["else", 0], ["m", 0], ["s", 0], ["f", 0], ["1", 0], ["n", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ar", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["difs", 0], ["s", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["ar", 0], ["x", 0], ["difs", 0], ["append", 0], ["s", 0], ["minn", 0], ["maxx", 0], ["min", 0], ["difs", 0], ["max", 0], ["difs", 0], ["maxres", 0], ["minres", 0], ["w", 0], ["0", 0], ["if", 0], ["maxx", 0], ["0", 0], ["maxres", 0], ["maxx", 0], ["if", 0], ["minn", 0], ["0", 0], ["minres", 0], ["minn", 0], ["if", 0], ["maxres", 0], ["0", 0], ["or", 0], ["minres", 0], ["w", 0], ["or", 0], ["minres", 0], ["maxres", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["maxres", 0], ["minres", 0], ["1", 0], ["n", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cur", 0], ["delta", 0], ["max", 0], ["delta", 0], ["min", 0], ["delta", 0], ["0", 0], ["for", 0], ["ai", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cur", 0], ["delta", 0], ["ai", 0], ["max", 0], ["delta", 0], ["max", 0], ["max", 0], ["delta", 0], ["cur", 0], ["delta", 0], ["min", 0], ["delta", 0], ["min", 0], ["min", 0], ["delta", 0], ["cur", 0], ["delta", 0], ["min", 0], ["res", 0], ["0", 0], ["min", 0], ["delta", 0], ["max", 0], ["res", 0], ["w", 0], ["max", 0], ["delta", 0], ["if", 0], ["max", 0], ["res", 0], ["min", 0], ["res", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["max", 0], ["res", 0], ["1", 0], ["min", 0], ["res", 0], ["n", 0], ["w", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["res", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["res", 0], ["i", 0], ["a", 0], ["i", 0], ["res", 0], ["i", 0], ["res", 0], ["i", 0], ["1", 0], ["r", 0], ["w", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["r", 0], ["min", 0], ["r", 0], ["w", 0], ["res", 0], ["i", 0], ["l", 0], ["max", 0], ["l", 0], ["res", 0], ["i", 0], ["print", 0], ["max", 0], ["r", 0], ["l", 0], ["1", 0], ["0", 0], ["n", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mx", 0], ["0", 0], ["mn", 0], ["0", 0], ["curr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["arr", 0], ["curr", 0], ["i", 0], ["mx", 0], ["max", 0], ["curr", 0], ["mx", 0], ["mn", 0], ["min", 0], ["curr", 0], ["mn", 0], ["ans", 0], ["w", 0], ["1", 0], ["mx", 0], ["mn", 0], ["if", 0], ["ans", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["max", 0], ["capacity", 0], ["list", 0], ["map", 0], ["int", 0], ["next", 0], ["sys", 0], ["stdin", 0], ["rstrip", 0], ["split", 0], ["xs", 0], ["list", 0], ["map", 0], ["int", 0], ["next", 0], ["sys", 0], ["stdin", 0], ["rstrip", 0], ["split", 0], ["current", 0], ["0", 0], ["max", 0], ["x", 0], ["0", 0], ["min", 0], ["x", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["xs", 0], ["current", 0], ["x", 0], ["max", 0], ["x", 0], ["max", 0], ["max", 0], ["x", 0], ["current", 0], ["min", 0], ["x", 0], ["min", 0], ["min", 0], ["x", 0], ["current", 0], ["calibration", 0], ["max", 0], ["x", 0], ["min", 0], ["x", 0], ["if", 0], ["calibration", 0], ["max", 0], ["capacity", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["max", 0], ["capacity", 0], ["calibration", 0], ["1", 0], ["n", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["max", 0], ["p", 0], ["0", 0], ["min", 0], ["p", 0], ["0", 0], ["s", 0], ["0", 0], ["for", 0], ["step", 0], ["in", 0], ["a", 0], ["s", 0], ["step", 0], ["if", 0], ["s", 0], ["max", 0], ["p", 0], ["max", 0], ["p", 0], ["s", 0], ["if", 0], ["s", 0], ["min", 0], ["p", 0], ["min", 0], ["p", 0], ["s", 0], ["d", 0], ["max", 0], ["p", 0], ["min", 0], ["p", 0], ["print", 0], ["max", 0], ["p", 0], ["min", 0], ["p", 0], ["d", 0], ["if", 0], ["w", 0], ["d", 0], ["1", 0], ["0", 0], ["print", 0], ["w", 0], ["d", 0], ["1", 0], ["else", 0], ["print", 0], ["0", 0], ["n", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["maxim", 0], ["0", 0], ["min", 0], ["0", 0], ["x", 0], ["0", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["a", 0], ["i", 0], ["if", 0], ["x", 0], ["maxim", 0], ["maxim", 0], ["x", 0], ["if", 0], ["x", 0], ["min", 0], ["min", 0], ["x", 0], ["if", 0], ["maxim", 0], ["min", 0], ["l", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["l", 0], ["maxim", 0], ["min", 0], ["1", 0], ["from", 0], ["itertools", 0], ["import", 0], ["accumulate", 0], ["def", 0], ["main", 0], ["n", 0], ["w", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["accumulate", 0], ["a", 0], ["print", 0], ["a", 0], ["print", 0], ["c", 0], ["print", 0], ["max", 0], ["c", 0], ["min", 0], ["c", 0], ["ans", 0], ["min", 0], ["w", 0], ["w", 0], ["max", 0], ["c", 0], ["max", 0], ["min", 0], ["c", 0], ["0", 0], ["1", 0], ["if", 0], ["ans", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["prefix", 0], ["0", 0], ["summ", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["summ", 0], ["a", 0], ["i", 0], ["prefix", 0], ["append", 0], ["summ", 0], ["r", 0], ["max", 0], ["prefix", 0], ["t", 0], ["min", 0], ["prefix", 0], ["cnt1", 0], ["0", 0], ["if", 0], ["t", 0], ["0", 0], ["cnt1", 0], ["abs", 0], ["t", 0], ["cnt2", 0], ["w", 0], ["r", 0], ["if", 0], ["cnt2", 0], ["cnt1", 0], ["1", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["cnt2", 0], ["cnt1", 0], ["1", 0], ["project", 0], ["name", 0], ["cf", 0], ["481", 0], ["e", 0], ["d3", 0], ["n", 0], ["w", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["r", 0], ["r", 0], ["1", 0], ["i", 0], ["if", 0], ["w", 0], ["max", 0], ["r", 0], ["1", 0], ["min", 0], ["r", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["w", 0], ["max", 0], ["r", 0], ["1", 0], ["min", 0], ["r", 0], ["n", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["maxim", 0], ["0", 0], ["minin", 0], ["0", 0], ["summa", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["summa", 0], ["l", 0], ["i", 0], ["if", 0], ["summa", 0], ["maxim", 0], ["maxim", 0], ["summa", 0], ["if", 0], ["summa", 0], ["minin", 0], ["minin", 0], ["summa", 0], ["print", 0], ["max", 0], ["0", 0], ["w", 0], ["maxim", 0], ["minin", 0], ["1", 0], ["n", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cur", 0], ["0", 0], ["mn", 0], ["mx", 0], ["0", 0], ["w", 0], ["for", 0], ["el", 0], ["in", 0], ["a", 0], ["cur", 0], ["el", 0], ["if", 0], ["cur", 0], ["0", 0], ["mn", 0], ["max", 0], ["mn", 0], ["abs", 0], ["cur", 0], ["else", 0], ["mx", 0], ["min", 0], ["mx", 0], ["w", 0], ["cur", 0], ["if", 0], ["mn", 0], ["mx", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["mx", 0], ["mn", 0], ["1", 0], ["from", 0], ["itertools", 0], ["import", 0], ["accumulate", 0], ["n", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["a", 0], ["0", 0], ["list", 0], ["accumulate", 0], ["a", 0], ["mn", 0], ["mx", 0], ["min", 0], ["s", 0], ["a", 0], ["max", 0], ["s", 0], ["a", 0], ["mn", 0], ["max", 0], ["0", 0], ["mn", 0], ["mx", 0], ["w", 0], ["mx", 0], ["if", 0], ["mx", 0], ["0", 0], ["or", 0], ["mx", 0], ["mn", 0], ["or", 0], ["mn", 0], ["w", 0], ["or", 0], ["mx", 0], ["mn", 0], ["w", 0], ["or", 0], ["mx", 0], ["mn", 0], ["w", 0], ["or", 0], ["mn", 0], ["w", 0], ["or", 0], ["mx", 0], ["w", 0], ["or", 0], ["min", 0], ["a", 0], ["w", 0], ["or", 0], ["max", 0], ["a", 0], ["w", 0], ["print", 0], ["0", 0], ["return", 0], ["print", 0], ["mx", 0], ["mn", 0], ["1", 0], ["n", 0], ["w", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["mx", 0], ["0", 0], ["mn", 0], ["0", 0], ["cur", 0], ["0", 0], ["for", 0], ["aa", 0], ["in", 0], ["a", 0], ["cur", 0], ["aa", 0], ["mx", 0], ["max", 0], ["cur", 0], ["mx", 0], ["mn", 0], ["min", 0], ["cur", 0], ["mn", 0], ["up", 0], ["w", 0], ["mx", 0], ["1", 0], ["down", 0], ["abs", 0], ["mn", 0], ["if", 0], ["down", 0], ["up", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["up", 0], ["down", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nLet $n$ be a positive integer. Let $a, b, c$ be nonnegative integers such that $a + b + c = n$.\n\nAlice and Bob are gonna play rock-paper-scissors $n$ times. Alice knows the sequences of hands that Bob will play. However, Alice has to play rock $a$ times, paper $b$ times, and scissors $c$ times.\n\nAlice wins if she beats Bob in at least $\\lceil \\frac{n}{2} \\rceil$ ($\\frac{n}{2}$ rounded up to the nearest integer) hands, otherwise Alice loses.\n\nNote that in rock-paper-scissors:\n\n  rock beats scissors;  paper beats rock;  scissors beat paper. \n\nThe task is, given the sequence of hands that Bob will play, and the numbers $a, b, c$, determine whether or not Alice can win. And if so, find any possible sequence of hands that Alice can use to win.\n\nIf there are multiple answers, print any of them.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases.\n\nThen, $t$ testcases follow, each consisting of three lines:   The first line contains a single integer $n$ ($1 \\le n \\le 100$).  The second line contains three integers, $a, b, c$ ($0 \\le a, b, c \\le n$). It is guaranteed that $a + b + c = n$.  The third line contains a string $s$ of length $n$. $s$ is made up of only 'R', 'P', and 'S'. The $i$-th character is 'R' if for his $i$-th Bob plays rock, 'P' if paper, and 'S' if scissors. \n\n\n-----Output-----\n\nFor each testcase:   If Alice cannot win, print \"NO\" (without the quotes).  Otherwise, print \"YES\" (without the quotes). Also, print a string $t$ of length $n$ made up of only 'R', 'P', and 'S' — a sequence of hands that Alice can use to win. $t$ must contain exactly $a$ 'R's, $b$ 'P's, and $c$ 'S's.  If there are multiple answers, print any of them. \n\nThe \"YES\" / \"NO\" part of the output is case-insensitive (i.e. \"yEs\", \"no\" or \"YEs\" are all valid answers). Note that 'R', 'P' and 'S' are case-sensitive.\n\n\n-----Example-----\nInput\n2\n3\n1 1 1\nRPS\n3\n3 0 0\nRPS\n\nOutput\nYES\nPSR\nNO\n\n\n\n-----Note-----\n\nIn the first testcase, in the first hand, Alice plays paper and Bob plays rock, so Alice beats Bob. In the second hand, Alice plays scissors and Bob plays paper, so Alice beats Bob. In the third hand, Alice plays rock and Bob plays scissors, so Alice beats Bob. Alice beat Bob 3 times, and $3 \\ge \\lceil \\frac{3}{2} \\rceil = 2$, so Alice wins.\n\nIn the second testcase, the only sequence of hands that Alice can play is \"RRR\". Alice beats Bob only in the last hand, so Alice can't win. $1 < \\lceil \\frac{3}{2} \\rceil = 2$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["t = int(input())\n\nfor _ in range(t):\n\tn = int(input())\n\ta, b, c = map(int, input().split())\n\ts = input()\n\n\tt = [\"X\"] * n\n\twins = 0\n\tfor i, en in enumerate(s):\n\t\tif en==\"R\" and b:\n\t\t\tb-=1\n\t\t\tt[i] = \"P\"\n\t\t\twins += 1\n\t\telif en==\"P\" and c:\n\t\t\tc-=1\n\t\t\tt[i] = \"S\"\n\t\t\twins += 1\n\t\telif en==\"S\" and a:\n\t\t\ta-=1\n\t\t\tt[i] = \"R\"\n\t\t\twins += 1\n\n\tif wins < n/2:\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"YES\")\n\t\tfor i, my in enumerate(t):\n\t\t\tif my==\"X\":\n\t\t\t\tif a:a-=1;t[i]=\"R\"\n\t\t\t\telif b:b-=1;t[i]=\"P\"\n\t\t\t\telif c:c-=1;t[i]=\"S\"\n\t\tprint(\"\".join(t))\n", "t = int(input())\n\nfor _ in range(t):\n\tn = int(input())\n\ta,b,c = list(map(int,input().split()))\n\tss = input()\n\tr,p,s = ss.count('R'),ss.count('P'),ss.count('S')\n\twin = min(a, s) + min(b, r) + min(c, p)\n\tif win < (n + 1) // 2:\n\t\tprint('NO')\n\t\tcontinue\n\tprint('YES')\n\tres = ['' for i in range(n)]\n\tfor i in range(n):\n\t\tif ss[i] == 'R' and b > 0:\n\t\t\tres[i] = 'P'\n\t\t\tb -= 1\n\t\tif ss[i] == 'P' and c > 0:\n\t\t\tres[i] = 'S'\n\t\t\tc -= 1\n\t\tif ss[i] == 'S' and a > 0:\n\t\t\tres[i] = 'R'\n\t\t\ta -= 1\n\tfor i in range(n):\n\t\tif res[i] == '':\n\t\t\tif a:\n\t\t\t\tres[i] = 'R'\n\t\t\t\ta -= 1\n\t\t\telif b:\n\t\t\t\tres[i] = 'P'\n\t\t\t\tb -= 1\n\t\t\telif c:\n\t\t\t\tres[i] = 'S'\n\t\t\t\tc -= 1\n\tprint(''.join(res))\n", "from math import gcd\n\nt = int(input())\nfor q in range(t):\n\tnn = int(input())\n\tk, b, n = list(map(int, input().split()))\n\ts = input()\n\tw = 0\n\taaa = [0] * nn\n\tfor i in range(nn):\n\t\tif s[i] == 'R' and b:\n\t\t\tw += 1\n\t\t\tb -= 1\n\t\t\taaa[i] = 'P'\n\t\telif s[i] == 'P' and n:\n\t\t\tw += 1\n\t\t\tn -= 1\n\t\t\taaa[i] = 'S'\n\t\telif s[i] == 'S' and k:\n\t\t\tw += 1\n\t\t\tk -= 1\n\t\t\taaa[i] = 'R'\n\tfor i in range(nn):\n\t\tif type(aaa[i]) == int:\n\t\t\tif k:\n\t\t\t\tk -= 1\n\t\t\t\taaa[i] = 'R'\n\t\t\telif b:\n\t\t\t\tb -= 1\n\t\t\t\taaa[i] = 'P'\n\t\t\telse:\n\t\t\t\tn -= 1\n\t\t\t\taaa[i] = 'S'\n\tif nn // 2 + nn % 2 <= w:\n\t\tprint('YES')\n\t\tprint(''.join(aaa))\n\telse:\n\t\tprint('NO')\n", "from math import *\nfrom collections import *\nt = int(input())\nfor y in range(t):\n\tn = int(input())\n\ta,b,c = map(int,input().split())\n\ts = input()\n\tct = 0\n\tl = ['0' for i in range(n)]\n\tfor i in range(n):\n\t\tif(s[i] == 'R' and b != 0):\n\t\t\tct += 1\n\t\t\tl[i] = 'P'\n\t\t\tb -= 1\n\t\telif(s[i] == 'P' and c != 0):\n\t\t\tct += 1\n\t\t\tl[i] = 'S'\n\t\t\tc -= 1\n\t\telif(s[i] == 'S' and a != 0):\n\t\t\tct += 1\n\t\t\tl[i] = 'R'\n\t\t\ta -= 1\n\tfor i in range(n):\n\t\tif(l[i] == '0' and a != 0):\n\t\t\tl[i] = 'R'\n\t\t\ta -= 1\n\t\telif(l[i] == '0' and b != 0):\n\t\t\tl[i] = 'P'\n\t\t\tb -= 1\n\t\telif(l[i] == '0'):\n\t\t\tl[i] = 'S'\n\t\t\tc -= 1\n\tif(ct >= n/2):\n\t\tprint(\"YES\")\n\t\tprint(\"\".join(l))\n\telse:\n\t\tprint(\"NO\")\n", "f = lambda i: (i + 1) % 3\nfor TT in range(1, int(input()) + 1):\n\tn = int(input())\n\tl = [*map(int, input().split())]\n\ts = ['RPS'.index(e) for e in input()]\n\tvalid = True\n\tres = [-1] * n\n\n\tcnt = 0\n\t# first distribute optimally\n\tfor i, e in enumerate(s):\n\t\tj = f(e)\n\t\tif l[j] > 0:\n\t\t\tl[j] -= 1\n\t\t\tres[i] = j\n\t\t\tcnt += 1\n\t\n\t# now assign the leftovers randomly\n\tj = 0\n\tfor i in range(n):\n\t\tif res[i] != -1: continue\n\t\twhile j < 3 and l[j] == 0: j += 1\n\t\tres[i] = j\n\t\tl[j] -= 1\n\n\n\tvalid &= cnt >= ((n + 1) // 2)\n\tif valid:\n\t\tprint('YES')\n\t\tprint(''.join('RPS'[e] for e in res))\n\telse:\n\t\tprint('NO')\n", "for i in range(int(input())):\n\tn = int(input())\n\ta, b, c = list(map(int, input().split()))\n\ts = input()\n\tres = ['']*n\n\tw=0\n\tfor j in range(n):\n\t\tif s[j]=='R' and b:\n\t\t\tb-=1\n\t\t\tres[j]='P'\n\t\t\tw+=1\n\t\telif s[j]=='P' and c:\n\t\t\tc-=1\n\t\t\tres[j]='S'\n\t\t\tw+=1\n\t\telif s[j]=='S' and a:\n\t\t\ta-=1\n\t\t\tres[j]='R'\n\t\t\tw+=1\n\tfor j in range(n):\n\t\tif res[j]=='':\n\t\t\tif a:\n\t\t\t\tres[j]='R'\n\t\t\t\ta-=1\n\t\t\telif b:\n\t\t\t\tres[j]='P'\n\t\t\t\tb-=1\n\t\t\telif c:\n\t\t\t\tres[j]='S'\n\t\t\t\tc-=1\n\tif w>=(n+1)//2:\n\t\tprint(\"YES\")\n\t\tprint(''.join(res))\n\telse:\n\t\tprint(\"NO\")\n", "from math import*\nq=int(input())\nfor t in range(q):\n\tn=int(input())\n\ta,b,c=map(int,input().split())\n\ts=input()\n\tans=['0']*n\n\tan=0\n\tfor i in range(len(s)):\n\t\tif s[i]=='R' and b>0:\n\t\t\tans[i]='P'\n\t\t\tb-=1\n\t\t\tan+=1\n\t\tif s[i]=='P' and c>0:\n\t\t\tans[i]='S'\n\t\t\tc-=1\n\t\t\tan+=1\n\t\tif s[i]=='S' and a>0:\n\t\t\tans[i]='R'\n\t\t\ta-=1\n\t\t\tan+=1\n\tif an>=((n+1)//2):\n\t\tprint(\"YES\")\n\t\tfor i in range(len(ans)):\n\t\t\tif ans[i]=='0':\n\t\t\t\tif a>0:\n\t\t\t\t\tans[i]='R'\n\t\t\t\t\ta-=1\n\t\t\t\telif b>0:\n\t\t\t\t\tans[i]='P'\n\t\t\t\t\tb-=1\n\t\t\t\telse:\n\t\t\t\t\tans[i]='S'\n\t\t\t\t\tc-=1\n\t\tfor i in range(len(ans)):\n\t\t\tprint(ans[i],end='')\n\t\tprint()\n\telse:\n\t\tprint(\"NO\")\n", "from sys import stdin\nfrom math import ceil\nt=int(stdin.readline().strip())\nfor caso in range(t):\n\tn=int(stdin.readline().strip())\n\ts=list(map(int,stdin.readline().strip().split()))\n\ts1=stdin.readline().strip()\n\tans=[\"\" for i in range(n)]\n\tr=0\n\tfor i in range(n):\n\t\tif s1[i]==\"R\" and s[1]>0:\n\t\t\tans[i]=\"P\"\n\t\t\ts[1]-=1\n\t\t\tr+=1\n\t\telif s1[i]==\"P\" and s[2]>0:\n\t\t\tans[i]=\"S\"\n\t\t\tr+=1\n\t\t\ts[2]-=1\n\t\telif s1[i]==\"S\" and s[0]>0:\n\t\t\tans[i]=\"R\"\n\t\t\tr+=1\n\t\t\ts[0]-=1\n\tfor i in range(n):\n\t\tif ans[i]==\"\":\n\t\t\tif s[0]>0:\n\t\t\t\tans[i]=\"R\"\n\t\t\t\ts[0]-=1\n\t\t\telif s[1]>0:\n\t\t\t\tans[i]=\"P\"\n\t\t\t\ts[1]-=1\n\t\t\telse:\n\t\t\t\tans[i]=\"S\"\n\t\t\t\ts[2]-=1\n\tif r>=ceil(n/2):\n\t\tprint(\"YES\")\n\t\tres=\"\"\n\t\tfor i in range(n):\n\t\t\tres+=ans[i]\n\t\tprint(res)\n\telse:\n\t\tprint(\"NO\")\n\t\n", "3\n\nimport array\nfrom fractions import Fraction\nimport functools\nimport itertools\nimport math\nimport os\nimport sys\n\n\ndef main():\n\tT = read_int()\n\tfor _ in range(T):\n\t\tN = read_int()\n\t\tA, B, C = read_ints()\n\t\tS = inp()\n\t\tans = solve(N, A, B, C, S)\n\t\tif not ans:\n\t\t\tprint('NO')\n\t\telse:\n\t\t\tprint('YES')\n\t\t\tprint(ans)\n\n\ndef solve(N, A, B, C, S):\n\tsol = [None] * N\n\twins = 0\n\tfor i in range(N):\n\t\tif S[i] == 'S' and A > 0:\n\t\t\tsol[i] = 'R'\n\t\t\tA -= 1\n\t\t\twins += 1\n\t\tif S[i] == 'R' and B > 0:\n\t\t\tsol[i] = 'P'\n\t\t\tB -= 1\n\t\t\twins += 1\n\t\tif S[i] == 'P' and C > 0:\n\t\t\tsol[i] = 'S'\n\t\t\tC -= 1\n\t\t\twins += 1\n\n\tif wins < (N + 1) // 2:\n\t\treturn None\n\n\tfor i in range(N):\n\t\tif sol[i] is None:\n\t\t\tif A > 0:\n\t\t\t\tsol[i] = 'R'\n\t\t\t\tA -= 1\n\t\t\telif B > 0:\n\t\t\t\tsol[i] = 'P'\n\t\t\t\tB -= 1\n\t\t\telse:\n\t\t\t\tsol[i] = 'S'\n\t\t\t\tC -= 1\n\n\treturn ''.join(sol)\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n\treturn sys.stdin.readline().rstrip()\n\n\ndef read_int():\n\treturn int(inp())\n\n\ndef read_ints():\n\treturn [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n\tif DEBUG:\n\t\tprint(*value, sep=sep, end=end)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "# import sys\n# input = sys.stdin.readline\n\nt = int(input())\nfor i in range(t):\n\tn = int(input())\n\tr,p,s = list(map(int,input().split()))\n\tst = input()\n\n\trr = st.count(\"R\")\n\tpp = st.count(\"P\")\n\tss = st.count(\"S\")\n\n\tw = -((-n)//2)\n\t# print(min(r,ss),min(s,pp),min(p,rr),w)\n\tif min(r,ss)+min(s,pp)+min(p,rr) >= w:\n\t\tprint(\"YES\")\n\t\tANS = [\"n\"] * n\n\t\tfor j in range(n):\n\t\t\tif r > 0 and st[j] == \"S\":\n\t\t\t\tANS[j] = \"R\"\n\t\t\t\tr-=1\n\t\t\telif p > 0 and st[j] == \"R\":\n\t\t\t\tANS[j] = \"P\"\n\t\t\t\tp-=1\n\t\t\telif s > 0 and st[j] == \"P\":\n\t\t\t\tANS[j] = \"S\"\n\t\t\t\ts-=1\n\t\tfor j in range(n):\n\t\t\tif ANS[j] == \"n\":\n\t\t\t\tif r > 0:\n\t\t\t\t\tANS[j] = \"R\"\n\t\t\t\t\tr-=1\n\t\t\t\telif p > 0:\n\t\t\t\t\tANS[j] = \"P\"\n\t\t\t\t\tp-=1\n\t\t\t\telif s > 0:\n\t\t\t\t\tANS[j] = \"S\"\n\t\t\t\t\ts-=1\n\t\tprint(\"\".join(ANS))\n\telse:\n\t\tprint(\"NO\")\n", "t = int(input())\n\nfor _ in range(t):\n\tn = int(input())\n\tr, p, s = map(int, input().split())\n\tS = input()\n\tans = [None]*n\n\twin = 0\n\tfor i, c in enumerate(S):\n\t\tif c == 'R' and p > 0:\n\t\t\tans[i] = 'P'\n\t\t\tp -= 1\n\t\t\twin += 1\n\t\telif c == 'P' and s > 0:\n\t\t\tans[i] = 'S'\n\t\t\ts -= 1\n\t\t\twin += 1\n\t\telif c == 'S' and r > 0:\n\t\t\tans[i] = 'R'\n\t\t\tr -= 1\n\t\t\twin += 1\n\tfor i in range(n):\n\t\tif ans[i] is None:\n\t\t\tif r > 0:\n\t\t\t\tans[i] = 'R'\n\t\t\t\tr -= 1\n\t\t\telif p > 0:\n\t\t\t\tans[i] = 'P'\n\t\t\t\tp -= 1\n\t\t\telse:\n\t\t\t\tans[i] = 'S'\n\t\t\t\ts -= 1\n\n\tif win >= (n+1)//2:\n\t\tprint('YES')\n\t\tprint(*ans, sep='')\n\telse:\n\t\tprint('NO')\n", "\nfrom collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue,copy,time\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\ndef inpl_str(): return list(sys.stdin.readline().split())\n\nt = inp()\n\nfor _ in range(t):\n\tn = inp()\n\taa = inpl() # RPS\n\tbb = input()\n\tans = []\n\tfor b in bb:\n\t\tif b == 'R':\n\t\t\tif aa[1] > 0:\n\t\t\t\tans.append(\"P\")\n\t\t\t\taa[1] -= 1\n\t\t\telse:\n\t\t\t\tans.append(-1)\n\t\telif b == 'P':\n\t\t\tif aa[2] > 0:\n\t\t\t\taa[2] -= 1\n\t\t\t\tans.append(\"S\")\n\t\t\telse:\n\t\t\t\tans.append(-1)\n\t\telif b == 'S':\n\t\t\tif aa[0] > 0:\n\t\t\t\taa[0] -= 1\n\t\t\t\tans.append(\"R\")\n\t\t\telse:\n\t\t\t\tans.append(-1)\n\tif n-sum(aa) < (n+1)//2:\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"YES\")\n\t\tfor i in range(n):\n\t\t\tif ans[i] == -1:\n\t\t\t\tif aa[0] > 0:\n\t\t\t\t\tans[i] = \"R\"\n\t\t\t\t\taa[0] -= 1\n\t\t\t\telif aa[1] > 0:\n\t\t\t\t\tans[i] = \"P\"\n\t\t\t\t\taa[1] -= 1\n\t\t\t\telif aa[2] > 0:\n\t\t\t\t\tans[i] = \"S\"\n\t\t\t\t\taa[2] -= 1\n\t\tprint(\"\".join(ans))\n", "q=int(input())\nfor queries in range(q):\n\tn=int(input())\n\ta,b,c=list(map(int, input().split()))\n\ts=input()\n\treq = (n+1) // 2\n\ts2=[]\n\tfor i in s:\n\t\tif i==\"R\":\n\t\t\tif b > 0:\n\t\t\t\ts2+=[\"P\"]\n\t\t\t\treq-=1\n\t\t\t\tb-=1\n\t\t\telse:\n\t\t\t\ts2 += [\"2\"]\n\t\tif i==\"P\":\n\t\t\tif c > 0:\n\t\t\t\ts2+=[\"S\"]\n\t\t\t\treq-=1\n\t\t\t\tc-=1\n\t\t\telse:\n\t\t\t\ts2 += [\"3\"]\n\t\tif i==\"S\":\n\t\t\tif a > 0:\n\t\t\t\ts2+=[\"R\"]\n\t\t\t\treq-=1\n\t\t\t\ta-=1\n\t\t\telse:\n\t\t\t\ts2 += [\"1\"]\n\tif req > 0:\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"YES\")\n\t\tfor i in range(n):\n\t\t\tif s2[i]==\"1\":\n\t\t\t\tif b > 0:\n\t\t\t\t\tb-=1\n\t\t\t\t\ts2[i] = \"P\"\n\t\t\t\telif c > 0:\n\t\t\t\t\tc-=1\n\t\t\t\t\ts2[i] = \"S\"\n\t\t\tif s2[i]==\"2\":\n\t\t\t\tif a > 0:\n\t\t\t\t\ta-=1\n\t\t\t\t\ts2[i] = \"R\"\n\t\t\t\telif c > 0:\n\t\t\t\t\tc-=1\n\t\t\t\t\ts2[i] = \"S\"\n\t\t\tif s2[i]==\"3\":\n\t\t\t\tif b > 0:\n\t\t\t\t\tb-=1\n\t\t\t\t\ts2[i] = \"P\"\n\t\t\t\telif a > 0:\n\t\t\t\t\ta-=1\n\t\t\t\t\ts2[i] = \"R\"\n\t\tprint(\"\".join(s2))\n\n\n", "'''\nCreated on 2019. 9. 21.\n\n@author: kkhh88\n'''\n#q = int(input())\n#x, y = map(int,input().split(' '))\n\nimport math\nq = int(input())\nfor _ in range(q):\n\tn = int(input())\n\ta, b, c = map(int,input().split(' '))\n\n\tbob = input()\n\talice = ['X'] * n\n\t\n\tcnt = 0\n\tfor i in range(n):\n\t\ts = bob[i]\n\t\tif s == 'R' and b > 0:\n\t\t\tb = b - 1\n\t\t\tcnt = cnt + 1\n\t\t\talice[i] = 'P'\n\t\telif s == 'P' and c > 0:\n\t\t\tc = c - 1\n\t\t\tcnt = cnt + 1\n\t\t\talice[i] = 'S'\n\t\telif s == 'S' and a > 0:\n\t\t\ta = a - 1\n\t\t\tcnt = cnt + 1\n\t\t\talice[i] = 'R'\n\t\t\t\t\n\tif (n + 1) // 2 <= cnt:\n\t\twin = ''\n\t\tfor i in range(n):\n\t\t\tif alice[i] == 'X':\n\t\t\t\tif a > 0:\n\t\t\t\t\ta = a - 1\n\t\t\t\t\twin = win + 'R' \n\t\t\t\telif b > 0:\n\t\t\t\t\tb = b - 1\n\t\t\t\t\twin = win + 'P'\n\t\t\t\telif c > 0:\n\t\t\t\t\tc = c - 1\n\t\t\t\t\twin = win + 'S'\n\t\t\telse:\n\t\t\t\twin = win + alice[i]\n\t\tprint (\"YES\")\n\t\tprint (win)\n\telse:\n\t\tprint (\"NO\")\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\n\nfor testcases in range(t):\n\tn=int(input())\n\ta,b,c=list(map(int,input().split()))\n\tB=input().strip()\n\n\tR=B.count(\"R\")\n\tP=B.count(\"P\")\n\tS=B.count(\"S\")\n\n\tif min(b,R)+min(c,P)+min(a,S)>=n/2:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\t\tcontinue\n\n\tANS=[0]*n\n\n\tR0=min(a,S)\n\tP0=min(b,R)\n\tS0=min(c,P)\n\n\tR1=a-R0\n\tP1=b-P0\n\tS1=c-S0\n\n\tfor i in range(n):\n\t\tif B[i]==\"S\" and R0>0:\n\t\t\tANS[i]=\"R\"\n\t\t\tR0-=1\n\t\telif B[i]==\"R\" and P0>0:\n\t\t\tANS[i]=\"P\"\n\t\t\tP0-=1\n\t\telif B[i]==\"P\" and S0>0:\n\t\t\tANS[i]=\"S\"\n\t\t\tS0-=1\n\n\tfor i in range(n):\n\t\tif ANS[i]==0:\n\t\t\tif R1>0:\n\t\t\t\tR1-=1\n\t\t\t\tANS[i]=\"R\"\n\n\t\t\telif P1>0:\n\t\t\t\tP1-=1\n\t\t\t\tANS[i]=\"P\"\n\n\t\t\telse:\n\t\t\t\tS1-=1\n\t\t\t\tANS[i]=\"S\"\n\n\tprint(\"\".join(ANS))\n\n", "q = int(input())\nfor re in range(q):\n\tn = int(input())\n\ta, b, c = list(map(int,input().split()))\n\tst = input()\n\todp = [0] * n\n\twyn = 0\n\tfor i in range(n):\n\t\tif st[i] == 'R' and b > 0:\n\t\t\twyn += 1\n\t\t\tb -= 1\n\t\t\todp[i] = 'P'\n\t\tif st[i] == 'P' and c > 0:\n\t\t\twyn += 1\n\t\t\tc -= 1\n\t\t\todp[i] = 'S'\n\t\tif st[i] == 'S' and a > 0:\n\t\t\twyn += 1\n\t\t\ta -= 1\n\t\t\todp[i] = 'R'\n\tfor i in range(n):\n\t\tif odp[i] == 0:\n\t\t\tif a > 0:\n\t\t\t\ta -= 1\n\t\t\t\todp[i] = 'R'\n\t\t\telif b > 0:\n\t\t\t\tb -= 1\n\t\t\t\todp[i] = 'P'\n\t\t\telse:\n\t\t\t\tc -= 1\n\t\t\t\todp[i] = 'S'\n\tif wyn >= (n + 1)//2:\n\t\tprint(\"YES\")\n\t\tfor i in range(n):\n\t\t\tif i < n - 1:\n\t\t\t\tprint(odp[i], end = \"\")\n\t\t\telse:\n\t\t\t\tprint(odp[i])\n\telse:\n\t\tprint(\"NO\")\n", "t = int(input())\nfor i in range(t):\n\tn = int(input())\n\ta, b, c = map(int, input().split())\n\ts = input()\n\tcount = 0\n\tans = [\"\" for i in range(n)]\n\tfor i in range(n):\n\t\tif s[i] == \"P\" and c != 0:\n\t\t\tans[i] = \"S\"\n\t\t\tc -= 1\n\t\t\tcount += 1\n\t\tif s[i] == \"S\" and a != 0:\n\t\t\ta -= 1\n\t\t\tans[i] = \"R\"\n\t\t\tcount += 1\n\t\tif s[i] == \"R\" and b != 0:\n\t\t\tb -= 1\n\t\t\tcount += 1\n\t\t\tans[i] = \"P\"\n\tfor i in range(n):\n\t\tif ans[i] == \"\" and a != 0:\n\t\t\tans[i] = \"R\"\n\t\t\ta -= 1\n\t\telif ans[i] == \"\" and b != 0:\n\t\t\tans[i] = \"P\"\n\t\t\tb -= 1\n\t\telif ans[i] == \"\" and c != 0:\n\t\t\tans[i] = \"S\"\n\t\t\tc -= 1\n\tif count >= (n + 1) // 2:\n\t\tprint(\"YES\")\n\t\tprint(*ans, sep=\"\")\n\telse:\n\t\tprint(\"NO\")\n", "for testcase in range(int(input())):\n\tn = int(input())\n\tra, pa, sa = list(map(int, input().split()))\n\tbeat = {'R': 'P', 'P': 'S', 'S': 'R'}\n\ta_beat = {'R': pa, 'P': sa, 'S': ra}\n\ta_sec = []\n\twin_time = 0\n\tfor i in input().strip():\n\t\tif a_beat[i] > 0:\n\t\t\twin_time += 1\n\t\t\ta_beat[i] -= 1\n\t\t\ta_sec.append(beat[i])\n\t\telse:\n\t\t\ta_sec.append('.')\n\tfor i in range(n):\n\t\tif a_sec[i] != '.':\n\t\t\tcontinue\n\t\tfor key in 'RPS':\n\t\t\tif a_beat[key] == 0:\n\t\t\t\tcontinue\n\t\t\ta_sec[i] = beat[key]\n\t\t\ta_beat[key] -= 1\n\t\t\tbreak\n\tprint('YES\\n' + ''.join(a_sec)  if win_time >= (n + 1) // 2 else 'NO')\n\n\n", "t = int(input())\nfor i in range(t):\n\tn = int(input())\n\ta, b, c = list(map(int, input().split()))\n\td = list(input())\n\tans = 0\n\tansarr = ['0' for x in range(n)]\n\tansstr = ''\n\tfor j in range(n):\n\t\tif d[j] == 'R' and b > 0:\n\t\t\tb -= 1\n\t\t\tans += 1\n\t\t\tansarr[j] = 'P'\n\t\telif d[j] == 'P' and c > 0:\n\t\t\tc -= 1\n\t\t\tans += 1\n\t\t\tansarr[j] = 'S'\n\t\telif d[j] == 'S' and a > 0:\n\t\t\ta -= 1\n\t\t\tans += 1\n\t\t\tansarr[j] = 'R'\n\tfor j in range(n):\n\t\tif ansarr[j] == '0':\n\t\t\tif a > 0:\n\t\t\t\ta -= 1\n\t\t\t\tansstr += 'R'\n\t\t\telif b > 0:\n\t\t\t\tb -= 1\n\t\t\t\tansstr += 'P'\n\t\t\telse:\n\t\t\t\tc -= 1\n\t\t\t\tansstr += 'S'\n\t\telse:\n\t\t\tansstr += ansarr[j]\n\tif ans >= n / 2:\n\t\tprint(\"YES\")\n\t\tprint(ansstr)\n\telse:\n\t\tprint(\"NO\")\n", "\"\"\"T=int(input())\nfor _ in range(0,T):\n\tN=int(input())\n\ta,b=map(int,input().split())\n\ts=input()\n\ts=[int(x) for x in input().split()]\n\tfor i in range(0,len(s)):\n\t\ta,b=map(int,input().split())\"\"\"\n\n\nT=int(input())\nfor _ in range(0,T):\n\tN=int(input())\n\ta,b,c=list(map(int,input().split()))\n\ts=input()\n\tct=0\n\tans=''\n\tfor i in range(0,len(s)):\n\t\tif(s[i]=='R'):\n\t\t\tif(b>0):\n\t\t\t\tb-=1\n\t\t\t\tans+='P'\n\t\t\t\tct+=1\n\t\t\telse:\n\t\t\t\tans+='.'\n\t\telif(s[i]=='P'):\n\t\t\tif(c>0):\n\t\t\t\tc-=1\n\t\t\t\tans+='S'\n\t\t\t\tct+=1\n\t\t\telse:\n\t\t\t\tans+='.'\n\t\telse:\n\t\t\tif(a>0):\n\t\t\t\ta-=1\n\t\t\t\tans+='R'\n\t\t\t\tct+=1\n\t\t\telse:\n\t\t\t\tans+='.'\n\n\ttg=N//2\n\tif(N%2!=0):\n\t\ttg+=1\n\tif(ct>=tg):\n\t\tprint('YES')\n\t\tans1=[]\n\t\tfor i in range(0,len(ans)):\n\t\t\tans1.append(ans[i])\n\t\tfor i in range(0,len(ans1)):\n\t\t\tif(ans1[i]=='.'):\n\t\t\t\tif(a>0):\n\t\t\t\t\tans1[i]='R'\n\t\t\t\t\ta-=1\n\t\t\t\telif(b>0):\n\t\t\t\t\tans1[i]='P'\n\t\t\t\t\tb-=1\n\t\t\t\telif(c>0):\n\t\t\t\t\tans1[i]='S'\n\t\t\t\t\tc-=1\n\n\t\tfnl=''.join(ans1)\n\t\tprint(fnl)\n\t\t\t\t\n\telse:\n\t\tprint('NO')\n\n\t\n\t\t\n", "import sys\nt=int(sys.stdin.readline())\n# t=1\nfor i in range(t):\n\tn=int(sys.stdin.readline())\n\ta,b,c=list(map(int,sys.stdin.readline().strip().split()))\n\tx=list(sys.stdin.readline())\n\top=[' ']*n\n\t# print(op)\n\t# print(x)\n\t\n\tif(n%2==0):\n\t\tw=n//2\n\telse:\n\t\tw=n//2+1\n\t\t\n\tz=0\n\tfor j in range(n):\n\t\tif(x[j]=='R'):\n\t\t\tif(b>0):\n\t\t\t\tb-=1\n\t\t\t\tz+=1\n\t\t\t\top[j]='P'\n\t\telif(x[j]=='S'):\n\t\t\tif(a>0):\n\t\t\t\ta-=1\n\t\t\t\tz+=1\n\t\t\t\top[j]='R'\n\t\telif(x[j]=='P'):\n\t\t\tif(c>0):\n\t\t\t\tc-=1\n\t\t\t\tz+=1\n\t\t\t\top[j]='S'\n\tfor j in range(n):\n\t\tif(op[j]==' '):\n\t\t\tif(a>0):\n\t\t\t\ta-=1\n\t\t\t\top[j]='R'\n\t\t\telif(b>0):\n\t\t\t\top[j]='P'\n\t\t\t\tb-=1\n\t\t\telif(c>0):\n\t\t\t\top[j]='S'\n\t\t\t\tc-=1\n\tif(z>=w):\n\t\tprint(\"YES\")\n\t\tprint(\"\".join(op))\n\telse:\n\t\tprint(\"NO\")\n"], "id": "id7149"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7149", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["let", 4], ["n", 4], ["be", 4], ["a", 4], ["positive", 4], ["integer", 4], ["let", 4], ["a", 4], ["b", 4], ["c", 4], ["be", 4], ["nonnegative", 4], ["integers", 4], ["such", 4], ["that", 4], ["a", 4], ["b", 4], ["c", 4], ["n", 4], ["alice", 4], ["and", 4], ["bob", 4], ["are", 4], ["gonna", 4], ["play", 4], ["rock", 4], ["paper", 4], ["scissors", 4], ["n", 4], ["times", 4], ["alice", 4], ["knows", 4], ["the", 4], ["sequences", 4], ["of", 4], ["hands", 4], ["that", 4], ["bob", 4], ["will", 4], ["play", 4], ["however", 4], ["alice", 4], ["has", 4], ["to", 4], ["play", 4], ["rock", 4], ["a", 4], ["times", 4], ["paper", 4], ["b", 4], ["times", 4], ["and", 4], ["scissors", 4], ["c", 4], ["times", 4], ["alice", 4], ["wins", 4], ["if", 4], ["she", 4], ["beats", 4], ["bob", 4], ["in", 4], ["at", 4], ["least", 4], ["lceil", 4], ["frac", 4], ["n", 4], ["2", 4], ["rceil", 4], ["frac", 4], ["n", 4], ["2", 4], ["rounded", 4], ["up", 4], ["to", 4], ["the", 4], ["nearest", 4], ["integer", 4], ["hands", 4], ["otherwise", 4], ["alice", 4], ["loses", 4], ["note", 4], ["that", 4], ["in", 4], ["rock", 6], ["paper", 4], ["scissors", 4], ["rock", 4], ["beats", 4], ["scissors", 4], ["paper", 4], ["beats", 4], ["rock", 4], ["scissors", 4], ["beat", 4], ["paper", 4], ["the", 4], ["task", 4], ["is", 4], ["given", 4], ["the", 4], ["sequence", 4], ["of", 4], ["hands", 4], ["that", 4], ["bob", 4], ["will", 4], ["play", 4], ["and", 4], ["the", 4], ["numbers", 4], ["a", 4], ["b", 4], ["c", 4], ["determine", 4], ["whether", 4], ["or", 4], ["not", 4], ["alice", 4], ["can", 4], ["win", 4], ["and", 4], ["if", 4], ["so", 4], ["find", 4], ["any", 4], ["possible", 4], ["sequence", 4], ["of", 4], ["hands", 4], ["that", 4], ["alice", 4], ["can", 4], ["use", 4], ["to", 4], ["win", 4], ["if", 4], ["there", 4], ["are", 4], ["multiple", 4], ["answers", 4], ["print", 4], ["any", 4], ["of", 4], ["them", 4], ["input", 4], ["the", 10], ["first", 8], ["line", 8], ["contains", 12], ["a", 12], ["single", 8], ["integer", 18], ["t", 8], ["1", 4], ["le", 4], ["t", 4], ["le", 4], ["100", 4], ["—", 4], ["the", 4], ["number", 4], ["of", 4], ["test", 4], ["cases", 4], ["then", 4], ["t", 4], ["testcases", 4], ["follow", 4], ["each", 4], ["consisting", 4], ["of", 4], ["three", 4], ["lines", 4], ["the", 4], ["first", 4], ["line", 4], ["contains", 4], ["a", 4], ["single", 4], ["integer", 4], ["n", 4], ["1", 4], ["le", 4], ["n", 4], ["le", 4], ["100", 4], ["the", 4], ["second", 4], ["line", 4], ["contains", 4], ["three", 4], ["integers", 4], ["a", 4], ["b", 4], ["c", 4], ["0", 4], ["le", 4], ["a", 4], ["b", 4], ["c", 4], ["le", 4], ["n", 4], ["it", 4], ["is", 4], ["guaranteed", 4], ["that", 4], ["a", 4], ["b", 4], ["c", 4], ["n", 4], ["the", 4], ["third", 4], ["line", 4], ["contains", 4], ["a", 4], ["string", 4], ["s", 4], ["of", 4], ["length", 4], ["n", 4], ["s", 4], ["is", 4], ["made", 4], ["up", 4], ["of", 4], ["only", 4], ["r", 4], ["p", 4], ["and", 4], ["s", 4], ["the", 4], ["i", 4], ["th", 4], ["character", 4], ["is", 4], ["r", 4], ["if", 4], ["for", 4], ["his", 4], ["i", 0], ["th", 0], ["bob", 0], ["plays", 0], ["rock", 0], ["p", 0], ["if", 0], ["paper", 0], ["and", 0], ["s", 0], ["if", 0], ["scissors", 0], ["output", 0], ["for", 4], ["each", 4], ["testcase", 4], ["if", 4], ["alice", 4], ["cannot", 4], ["win", 4], ["print", 4], ["no", 4], ["without", 4], ["the", 4], ["quotes", 4], ["otherwise", 4], ["print", 4], ["yes", 4], ["without", 4], ["the", 4], ["quotes", 4], ["also", 4], ["print", 4], ["a", 4], ["string", 4], ["t", 4], ["of", 4], ["length", 4], ["n", 4], ["made", 4], ["up", 4], ["of", 4], ["only", 4], ["r", 4], ["p", 4], ["and", 4], ["s", 4], ["—", 4], ["a", 4], ["sequence", 4], ["of", 4], ["hands", 4], ["that", 4], ["alice", 4], ["can", 4], ["use", 4], ["to", 4], ["win", 4], ["t", 4], ["must", 4], ["contain", 4], ["exactly", 4], ["a", 4], ["r", 4], ["s", 4], ["b", 4], ["p", 4], ["s", 4], ["and", 4], ["c", 4], ["s", 4], ["s", 4], ["if", 4], ["there", 4], ["are", 4], ["multiple", 4], ["answers", 4], ["print", 4], ["any", 4], ["of", 4], ["them", 4], ["the", 4], ["yes", 4], ["no", 4], ["part", 4], ["of", 4], ["the", 4], ["output", 4], ["is", 4], ["case", 4], ["insensitive", 4], ["i", 4], ["e", 4], ["yes", 4], ["no", 4], ["or", 4], ["yes", 4], ["are", 4], ["all", 0], ["valid", 0], ["answers", 0], ["note", 0], ["that", 0], ["r", 0], ["p", 0], ["and", 0], ["s", 0], ["are", 0], ["case", 0], ["sensitive", 0], ["example", 0], ["input", 0], ["2", 0], ["3", 0], ["1", 0], ["1", 0], ["1", 0], ["rps", 0], ["3", 0], ["3", 0], ["0", 0], ["0", 0], ["rps", 0], ["output", 0], ["yes", 0], ["psr", 0], ["no", 0], ["note", 0], ["in", 4], ["the", 4], ["first", 4], ["testcase", 4], ["in", 4], ["the", 4], ["first", 4], ["hand", 4], ["alice", 4], ["plays", 4], ["paper", 4], ["and", 4], ["bob", 4], ["plays", 4], ["rock", 4], ["so", 4], ["alice", 4], ["beats", 4], ["bob", 4], ["in", 4], ["the", 4], ["second", 4], ["hand", 4], ["alice", 4], ["plays", 4], ["scissors", 4], ["and", 4], ["bob", 4], ["plays", 4], ["paper", 4], ["so", 4], ["alice", 4], ["beats", 4], ["bob", 4], ["in", 4], ["the", 4], ["third", 4], ["hand", 4], ["alice", 4], ["plays", 4], ["rock", 4], ["and", 4], ["bob", 4], ["plays", 4], ["scissors", 4], ["so", 4], ["alice", 4], ["beats", 4], ["bob", 4], ["alice", 4], ["beat", 4], ["bob", 4], ["3", 4], ["times", 4], ["and", 4], ["3", 4], ["ge", 4], ["lceil", 4], ["frac", 4], ["3", 4], ["2", 4], ["rceil", 4], ["2", 4], ["so", 4], ["alice", 4], ["wins", 4], ["in", 4], ["the", 4], ["second", 4], ["testcase", 4], ["the", 4], ["only", 4], ["sequence", 4], ["of", 4], ["hands", 4], ["that", 4], ["alice", 4], ["can", 4], ["play", 4], ["is", 4], ["rrr", 4], ["alice", 4], ["beats", 4], ["bob", 4], ["only", 4], ["in", 4], ["the", 4], ["last", 4], ["hand", 4], ["so", 0], ["alice", 0], ["can", 0], ["t", 0], ["win", 0], ["1", 0], ["lceil", 0], ["frac", 0], ["3", 0], ["2", 0], ["rceil", 0], ["2", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8848614072494669, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.21852641554134095, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9376299376299376, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2344074844074844, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8784648187633263, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.21805259417199718, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9376299376299376, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2344074844074844, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["t", 0], ["x", 0], ["n", 0], ["wins", 0], ["0", 0], ["for", 0], ["i", 0], ["en", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["en", 0], ["r", 0], ["and", 0], ["b", 0], ["b", 0], ["1", 0], ["t", 0], ["i", 0], ["p", 0], ["wins", 0], ["1", 0], ["elif", 0], ["en", 0], ["p", 0], ["and", 0], ["c", 0], ["c", 0], ["1", 0], ["t", 0], ["i", 0], ["s", 0], ["wins", 0], ["1", 0], ["elif", 0], ["en", 0], ["s", 0], ["and", 0], ["a", 0], ["a", 0], ["1", 0], ["t", 0], ["i", 0], ["r", 0], ["wins", 0], ["1", 0], ["if", 0], ["wins", 0], ["n", 0], ["2", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["my", 0], ["in", 0], ["enumerate", 0], ["t", 0], ["if", 0], ["my", 0], ["x", 0], ["if", 0], ["a", 0], ["a", 0], ["1", 0], ["t", 0], ["i", 0], ["r", 0], ["elif", 0], ["b", 0], ["b", 0], ["1", 0], ["t", 0], ["i", 0], ["p", 0], ["elif", 0], ["c", 0], ["c", 0], ["1", 0], ["t", 0], ["i", 0], ["s", 0], ["print", 0], ["join", 0], ["t", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ss", 0], ["input", 0], ["r", 0], ["p", 0], ["s", 0], ["ss", 0], ["count", 0], ["r", 0], ["ss", 0], ["count", 0], ["p", 0], ["ss", 0], ["count", 0], ["s", 0], ["win", 0], ["min", 0], ["a", 0], ["s", 0], ["min", 0], ["b", 0], ["r", 0], ["min", 0], ["c", 0], ["p", 0], ["if", 0], ["win", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["no", 0], ["continue", 0], ["print", 0], ["yes", 0], ["res", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ss", 0], ["i", 0], ["r", 0], ["and", 0], ["b", 0], ["0", 0], ["res", 0], ["i", 0], ["p", 0], ["b", 0], ["1", 0], ["if", 0], ["ss", 0], ["i", 0], ["p", 0], ["and", 0], ["c", 0], ["0", 0], ["res", 0], ["i", 0], ["s", 0], ["c", 0], ["1", 0], ["if", 0], ["ss", 0], ["i", 0], ["s", 0], ["and", 0], ["a", 0], ["0", 0], ["res", 0], ["i", 0], ["r", 0], ["a", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["res", 0], ["i", 0], ["if", 0], ["a", 0], ["res", 0], ["i", 0], ["r", 0], ["a", 0], ["1", 0], ["elif", 0], ["b", 0], ["res", 0], ["i", 0], ["p", 0], ["b", 0], ["1", 0], ["elif", 0], ["c", 0], ["res", 0], ["i", 0], ["s", 0], ["c", 0], ["1", 0], ["print", 0], ["join", 0], ["res", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["t", 0], ["nn", 0], ["int", 0], ["input", 0], ["k", 0], ["b", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["w", 0], ["0", 0], ["aaa", 0], ["0", 0], ["nn", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["nn", 0], ["if", 0], ["s", 0], ["i", 0], ["r", 0], ["and", 0], ["b", 0], ["w", 0], ["1", 0], ["b", 0], ["1", 0], ["aaa", 0], ["i", 0], ["p", 0], ["elif", 0], ["s", 0], ["i", 0], ["p", 0], ["and", 0], ["n", 0], ["w", 0], ["1", 0], ["n", 0], ["1", 0], ["aaa", 0], ["i", 0], ["s", 0], ["elif", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["k", 0], ["w", 0], ["1", 0], ["k", 0], ["1", 0], ["aaa", 0], ["i", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["nn", 0], ["if", 0], ["type", 0], ["aaa", 0], ["i", 0], ["int", 0], ["if", 0], ["k", 0], ["k", 0], ["1", 0], ["aaa", 0], ["i", 0], ["r", 0], ["elif", 0], ["b", 0], ["b", 0], ["1", 0], ["aaa", 0], ["i", 0], ["p", 0], ["else", 0], ["n", 0], ["1", 0], ["aaa", 0], ["i", 0], ["s", 0], ["if", 0], ["nn", 0], ["2", 0], ["nn", 0], ["2", 0], ["w", 0], ["print", 0], ["yes", 0], ["print", 0], ["join", 0], ["aaa", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["math", 0], ["import", 0], ["from", 0], ["collections", 0], ["import", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ct", 0], ["0", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["r", 0], ["and", 0], ["b", 0], ["0", 0], ["ct", 0], ["1", 0], ["l", 0], ["i", 0], ["p", 0], ["b", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["p", 0], ["and", 0], ["c", 0], ["0", 0], ["ct", 0], ["1", 0], ["l", 0], ["i", 0], ["s", 0], ["c", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["a", 0], ["0", 0], ["ct", 0], ["1", 0], ["l", 0], ["i", 0], ["r", 0], ["a", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l", 0], ["i", 0], ["0", 0], ["and", 0], ["a", 0], ["0", 0], ["l", 0], ["i", 0], ["r", 0], ["a", 0], ["1", 0], ["elif", 0], ["l", 0], ["i", 0], ["0", 0], ["and", 0], ["b", 0], ["0", 0], ["l", 0], ["i", 0], ["p", 0], ["b", 0], ["1", 0], ["elif", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["s", 0], ["c", 0], ["1", 0], ["if", 0], ["ct", 0], ["n", 0], ["2", 0], ["print", 0], ["yes", 0], ["print", 0], ["join", 0], ["l", 0], ["else", 0], ["print", 0], ["no", 0], ["f", 0], ["lambda", 0], ["i", 0], ["i", 0], ["1", 0], ["3", 0], ["for", 0], ["tt", 0], ["in", 0], ["range", 0], ["1", 0], ["int", 0], ["input", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["rps", 0], ["index", 0], ["e", 0], ["for", 0], ["e", 0], ["in", 0], ["input", 0], ["valid", 0], ["true", 0], ["res", 0], ["1", 0], ["n", 0], ["cnt", 0], ["0", 0], ["first", 0], ["distribute", 0], ["optimally", 0], ["for", 0], ["i", 0], ["e", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["j", 0], ["f", 0], ["e", 0], ["if", 0], ["l", 0], ["j", 0], ["0", 0], ["l", 0], ["j", 0], ["1", 0], ["res", 0], ["i", 0], ["j", 0], ["cnt", 0], ["1", 0], ["now", 0], ["assign", 0], ["the", 0], ["leftovers", 0], ["randomly", 0], ["j", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["res", 0], ["i", 0], ["1", 0], ["continue", 0], ["while", 0], ["j", 0], ["3", 0], ["and", 0], ["l", 0], ["j", 0], ["0", 0], ["j", 0], ["1", 0], ["res", 0], ["i", 0], ["j", 0], ["l", 0], ["j", 0], ["1", 0], ["valid", 0], ["cnt", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["valid", 0], ["print", 0], ["yes", 0], ["print", 0], ["join", 0], ["rps", 0], ["e", 0], ["for", 0], ["e", 0], ["in", 0], ["res", 0], ["else", 0], ["print", 0], ["no", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["res", 0], ["n", 0], ["w", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["j", 0], ["r", 0], ["and", 0], ["b", 0], ["b", 0], ["1", 0], ["res", 0], ["j", 0], ["p", 0], ["w", 0], ["1", 0], ["elif", 0], ["s", 0], ["j", 0], ["p", 0], ["and", 0], ["c", 0], ["c", 0], ["1", 0], ["res", 0], ["j", 0], ["s", 0], ["w", 0], ["1", 0], ["elif", 0], ["s", 0], ["j", 0], ["s", 0], ["and", 0], ["a", 0], ["a", 0], ["1", 0], ["res", 0], ["j", 0], ["r", 0], ["w", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["res", 0], ["j", 0], ["if", 0], ["a", 0], ["res", 0], ["j", 0], ["r", 0], ["a", 0], ["1", 0], ["elif", 0], ["b", 0], ["res", 0], ["j", 0], ["p", 0], ["b", 0], ["1", 0], ["elif", 0], ["c", 0], ["res", 0], ["j", 0], ["s", 0], ["c", 0], ["1", 0], ["if", 0], ["w", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["print", 0], ["join", 0], ["res", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["math", 0], ["import", 0], ["q", 0], ["int", 0], ["input", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["q", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["n", 0], ["an", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["r", 0], ["and", 0], ["b", 0], ["0", 0], ["ans", 0], ["i", 0], ["p", 0], ["b", 0], ["1", 0], ["an", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["p", 0], ["and", 0], ["c", 0], ["0", 0], ["ans", 0], ["i", 0], ["s", 0], ["c", 0], ["1", 0], ["an", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["a", 0], ["0", 0], ["ans", 0], ["i", 0], ["r", 0], ["a", 0], ["1", 0], ["an", 0], ["1", 0], ["if", 0], ["an", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ans", 0], ["if", 0], ["ans", 0], ["i", 0], ["0", 0], ["if", 0], ["a", 0], ["0", 0], ["ans", 0], ["i", 0], ["r", 0], ["a", 0], ["1", 0], ["elif", 0], ["b", 0], ["0", 0], ["ans", 0], ["i", 0], ["p", 0], ["b", 0], ["1", 0], ["else", 0], ["ans", 0], ["i", 0], ["s", 0], ["c", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ans", 0], ["print", 0], ["ans", 0], ["i", 0], ["end", 0], ["print", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["t", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["for", 0], ["caso", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["s1", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s1", 0], ["i", 0], ["r", 0], ["and", 0], ["s", 0], ["1", 0], ["0", 0], ["ans", 0], ["i", 0], ["p", 0], ["s", 0], ["1", 0], ["1", 0], ["r", 0], ["1", 0], ["elif", 0], ["s1", 0], ["i", 0], ["p", 0], ["and", 0], ["s", 0], ["2", 0], ["0", 0], ["ans", 0], ["i", 0], ["s", 0], ["r", 0], ["1", 0], ["s", 0], ["2", 0], ["1", 0], ["elif", 0], ["s1", 0], ["i", 0], ["s", 0], ["and", 0], ["s", 0], ["0", 0], ["0", 0], ["ans", 0], ["i", 0], ["r", 0], ["r", 0], ["1", 0], ["s", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ans", 0], ["i", 0], ["if", 0], ["s", 0], ["0", 0], ["0", 0], ["ans", 0], ["i", 0], ["r", 0], ["s", 0], ["0", 0], ["1", 0], ["elif", 0], ["s", 0], ["1", 0], ["0", 0], ["ans", 0], ["i", 0], ["p", 0], ["s", 0], ["1", 0], ["1", 0], ["else", 0], ["ans", 0], ["i", 0], ["s", 0], ["s", 0], ["2", 0], ["1", 0], ["if", 0], ["r", 0], ["ceil", 0], ["n", 0], ["2", 0], ["print", 0], ["yes", 0], ["res", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["res", 0], ["ans", 0], ["i", 0], ["print", 0], ["res", 0], ["else", 0], ["print", 0], ["no", 0], ["3", 0], ["import", 0], ["array", 0], ["from", 0], ["fractions", 0], ["import", 0], ["fraction", 0], ["import", 0], ["functools", 0], ["import", 0], ["itertools", 0], ["import", 0], ["math", 0], ["import", 0], ["os", 0], ["import", 0], ["sys", 0], ["def", 0], ["main", 0], ["t", 0], ["read", 0], ["int", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["read", 0], ["int", 0], ["a", 0], ["b", 0], ["c", 0], ["read", 0], ["ints", 0], ["s", 0], ["inp", 0], ["ans", 0], ["solve", 0], ["n", 0], ["a", 0], ["b", 0], ["c", 0], ["s", 0], ["if", 0], ["not", 0], ["ans", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["print", 0], ["ans", 0], ["def", 0], ["solve", 0], ["n", 0], ["a", 0], ["b", 0], ["c", 0], ["s", 0], ["sol", 0], ["none", 0], ["n", 0], ["wins", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["a", 0], ["0", 0], ["sol", 0], ["i", 0], ["r", 0], ["a", 0], ["1", 0], ["wins", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["r", 0], ["and", 0], ["b", 0], ["0", 0], ["sol", 0], ["i", 0], ["p", 0], ["b", 0], ["1", 0], ["wins", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["p", 0], ["and", 0], ["c", 0], ["0", 0], ["sol", 0], ["i", 0], ["s", 0], ["c", 0], ["1", 0], ["wins", 0], ["1", 0], ["if", 0], ["wins", 0], ["n", 0], ["1", 0], ["2", 0], ["return", 0], ["none", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["sol", 0], ["i", 0], ["is", 0], ["none", 0], ["if", 0], ["a", 0], ["0", 0], ["sol", 0], ["i", 0], ["r", 0], ["a", 0], ["1", 0], ["elif", 0], ["b", 0], ["0", 0], ["sol", 0], ["i", 0], ["p", 0], ["b", 0], ["1", 0], ["else", 0], ["sol", 0], ["i", 0], ["s", 0], ["c", 0], ["1", 0], ["return", 0], ["join", 0], ["sol", 0], ["auxiliary", 0], ["functions", 0], ["debug", 0], ["debug", 0], ["in", 0], ["os", 0], ["environ", 0], ["def", 0], ["inp", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["read", 0], ["int", 0], ["return", 0], ["int", 0], ["inp", 0], ["def", 0], ["read", 0], ["ints", 0], ["return", 0], ["int", 0], ["e", 0], ["for", 0], ["e", 0], ["in", 0], ["inp", 0], ["split", 0], ["def", 0], ["dprint", 0], ["value", 0], ["sep", 0], ["end", 0], ["n", 0], ["if", 0], ["debug", 0], ["print", 0], ["value", 0], ["sep", 0], ["sep", 0], ["end", 0], ["end", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["r", 0], ["p", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["st", 0], ["input", 0], ["rr", 0], ["st", 0], ["count", 0], ["r", 0], ["pp", 0], ["st", 0], ["count", 0], ["p", 0], ["ss", 0], ["st", 0], ["count", 0], ["s", 0], ["w", 0], ["n", 0], ["2", 0], ["print", 0], ["min", 0], ["r", 0], ["ss", 0], ["min", 0], ["s", 0], ["pp", 0], ["min", 0], ["p", 0], ["rr", 0], ["w", 0], ["if", 0], ["min", 0], ["r", 0], ["ss", 0], ["min", 0], ["s", 0], ["pp", 0], ["min", 0], ["p", 0], ["rr", 0], ["w", 0], ["print", 0], ["yes", 0], ["ans", 0], ["n", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["r", 0], ["0", 0], ["and", 0], ["st", 0], ["j", 0], ["s", 0], ["ans", 0], ["j", 0], ["r", 0], ["r", 0], ["1", 0], ["elif", 0], ["p", 0], ["0", 0], ["and", 0], ["st", 0], ["j", 0], ["r", 0], ["ans", 0], ["j", 0], ["p", 0], ["p", 0], ["1", 0], ["elif", 0], ["s", 0], ["0", 0], ["and", 0], ["st", 0], ["j", 0], ["p", 0], ["ans", 0], ["j", 0], ["s", 0], ["s", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ans", 0], ["j", 0], ["n", 0], ["if", 0], ["r", 0], ["0", 0], ["ans", 0], ["j", 0], ["r", 0], ["r", 0], ["1", 0], ["elif", 0], ["p", 0], ["0", 0], ["ans", 0], ["j", 0], ["p", 0], ["p", 0], ["1", 0], ["elif", 0], ["s", 0], ["0", 0], ["ans", 0], ["j", 0], ["s", 0], ["s", 0], ["1", 0], ["print", 0], ["join", 0], ["ans", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["r", 0], ["p", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ans", 0], ["none", 0], ["n", 0], ["win", 0], ["0", 0], ["for", 0], ["i", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["c", 0], ["r", 0], ["and", 0], ["p", 0], ["0", 0], ["ans", 0], ["i", 0], ["p", 0], ["p", 0], ["1", 0], ["win", 0], ["1", 0], ["elif", 0], ["c", 0], ["p", 0], ["and", 0], ["s", 0], ["0", 0], ["ans", 0], ["i", 0], ["s", 0], ["s", 0], ["1", 0], ["win", 0], ["1", 0], ["elif", 0], ["c", 0], ["s", 0], ["and", 0], ["r", 0], ["0", 0], ["ans", 0], ["i", 0], ["r", 0], ["r", 0], ["1", 0], ["win", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ans", 0], ["i", 0], ["is", 0], ["none", 0], ["if", 0], ["r", 0], ["0", 0], ["ans", 0], ["i", 0], ["r", 0], ["r", 0], ["1", 0], ["elif", 0], ["p", 0], ["0", 0], ["ans", 0], ["i", 0], ["p", 0], ["p", 0], ["1", 0], ["else", 0], ["ans", 0], ["i", 0], ["s", 0], ["s", 0], ["1", 0], ["if", 0], ["win", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["print", 0], ["ans", 0], ["sep", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["deque", 0], ["import", 0], ["sys", 0], ["heapq", 0], ["bisect", 0], ["math", 0], ["itertools", 0], ["string", 0], ["queue", 0], ["copy", 0], ["time", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["8", 0], ["inf", 0], ["float", 0], ["inf", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["eps", 0], ["10", 0], ["7", 0], ["def", 0], ["inp", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["inpl", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["inpl", 0], ["str", 0], ["return", 0], ["list", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["t", 0], ["inp", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["inp", 0], ["aa", 0], ["inpl", 0], ["rps", 0], ["bb", 0], ["input", 0], ["ans", 0], ["for", 0], ["b", 0], ["in", 0], ["bb", 0], ["if", 0], ["b", 0], ["r", 0], ["if", 0], ["aa", 0], ["1", 0], ["0", 0], ["ans", 0], ["append", 0], ["p", 0], ["aa", 0], ["1", 0], ["1", 0], ["else", 0], ["ans", 0], ["append", 0], ["1", 0], ["elif", 0], ["b", 0], ["p", 0], ["if", 0], ["aa", 0], ["2", 0], ["0", 0], ["aa", 0], ["2", 0], ["1", 0], ["ans", 0], ["append", 0], ["s", 0], ["else", 0], ["ans", 0], ["append", 0], ["1", 0], ["elif", 0], ["b", 0], ["s", 0], ["if", 0], ["aa", 0], ["0", 0], ["0", 0], ["aa", 0], ["0", 0], ["1", 0], ["ans", 0], ["append", 0], ["r", 0], ["else", 0], ["ans", 0], ["append", 0], ["1", 0], ["if", 0], ["n", 0], ["sum", 0], ["aa", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ans", 0], ["i", 0], ["1", 0], ["if", 0], ["aa", 0], ["0", 0], ["0", 0], ["ans", 0], ["i", 0], ["r", 0], ["aa", 0], ["0", 0], ["1", 0], ["elif", 0], ["aa", 0], ["1", 0], ["0", 0], ["ans", 0], ["i", 0], ["p", 0], ["aa", 0], ["1", 0], ["1", 0], ["elif", 0], ["aa", 0], ["2", 0], ["0", 0], ["ans", 0], ["i", 0], ["s", 0], ["aa", 0], ["2", 0], ["1", 0], ["print", 0], ["join", 0], ["ans", 0], ["q", 0], ["int", 0], ["input", 0], ["for", 0], ["queries", 0], ["in", 0], ["range", 0], ["q", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["req", 0], ["n", 0], ["1", 0], ["2", 0], ["s2", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["r", 0], ["if", 0], ["b", 0], ["0", 0], ["s2", 0], ["p", 0], ["req", 0], ["1", 0], ["b", 0], ["1", 0], ["else", 0], ["s2", 0], ["2", 0], ["if", 0], ["i", 0], ["p", 0], ["if", 0], ["c", 0], ["0", 0], ["s2", 0], ["s", 0], ["req", 0], ["1", 0], ["c", 0], ["1", 0], ["else", 0], ["s2", 0], ["3", 0], ["if", 0], ["i", 0], ["s", 0], ["if", 0], ["a", 0], ["0", 0], ["s2", 0], ["r", 0], ["req", 0], ["1", 0], ["a", 0], ["1", 0], ["else", 0], ["s2", 0], ["1", 0], ["if", 0], ["req", 0], ["0", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s2", 0], ["i", 0], ["1", 0], ["if", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["s2", 0], ["i", 0], ["p", 0], ["elif", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["s2", 0], ["i", 0], ["s", 0], ["if", 0], ["s2", 0], ["i", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["s2", 0], ["i", 0], ["r", 0], ["elif", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["s2", 0], ["i", 0], ["s", 0], ["if", 0], ["s2", 0], ["i", 0], ["3", 0], ["if", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["s2", 0], ["i", 0], ["p", 0], ["elif", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["s2", 0], ["i", 0], ["r", 0], ["print", 0], ["join", 0], ["s2", 0], ["created", 0], ["on", 0], ["2019", 0], ["9", 0], ["21", 0], ["author", 0], ["kkhh88", 0], ["q", 0], ["int", 0], ["input", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["import", 0], ["math", 0], ["q", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bob", 0], ["input", 0], ["alice", 0], ["x", 0], ["n", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["bob", 0], ["i", 0], ["if", 0], ["s", 0], ["r", 0], ["and", 0], ["b", 0], ["0", 0], ["b", 0], ["b", 0], ["1", 0], ["cnt", 0], ["cnt", 0], ["1", 0], ["alice", 0], ["i", 0], ["p", 0], ["elif", 0], ["s", 0], ["p", 0], ["and", 0], ["c", 0], ["0", 0], ["c", 0], ["c", 0], ["1", 0], ["cnt", 0], ["cnt", 0], ["1", 0], ["alice", 0], ["i", 0], ["s", 0], ["elif", 0], ["s", 0], ["s", 0], ["and", 0], ["a", 0], ["0", 0], ["a", 0], ["a", 0], ["1", 0], ["cnt", 0], ["cnt", 0], ["1", 0], ["alice", 0], ["i", 0], ["r", 0], ["if", 0], ["n", 0], ["1", 0], ["2", 0], ["cnt", 0], ["win", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["alice", 0], ["i", 0], ["x", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["a", 0], ["1", 0], ["win", 0], ["win", 0], ["r", 0], ["elif", 0], ["b", 0], ["0", 0], ["b", 0], ["b", 0], ["1", 0], ["win", 0], ["win", 0], ["p", 0], ["elif", 0], ["c", 0], ["0", 0], ["c", 0], ["c", 0], ["1", 0], ["win", 0], ["win", 0], ["s", 0], ["else", 0], ["win", 0], ["win", 0], ["alice", 0], ["i", 0], ["print", 0], ["yes", 0], ["print", 0], ["win", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["testcases", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["input", 0], ["strip", 0], ["r", 0], ["b", 0], ["count", 0], ["r", 0], ["p", 0], ["b", 0], ["count", 0], ["p", 0], ["s", 0], ["b", 0], ["count", 0], ["s", 0], ["if", 0], ["min", 0], ["b", 0], ["r", 0], ["min", 0], ["c", 0], ["p", 0], ["min", 0], ["a", 0], ["s", 0], ["n", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["continue", 0], ["ans", 0], ["0", 0], ["n", 0], ["r0", 0], ["min", 0], ["a", 0], ["s", 0], ["p0", 0], ["min", 0], ["b", 0], ["r", 0], ["s0", 0], ["min", 0], ["c", 0], ["p", 0], ["r1", 0], ["a", 0], ["r0", 0], ["p1", 0], ["b", 0], ["p0", 0], ["s1", 0], ["c", 0], ["s0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["s", 0], ["and", 0], ["r0", 0], ["0", 0], ["ans", 0], ["i", 0], ["r", 0], ["r0", 0], ["1", 0], ["elif", 0], ["b", 0], ["i", 0], ["r", 0], ["and", 0], ["p0", 0], ["0", 0], ["ans", 0], ["i", 0], ["p", 0], ["p0", 0], ["1", 0], ["elif", 0], ["b", 0], ["i", 0], ["p", 0], ["and", 0], ["s0", 0], ["0", 0], ["ans", 0], ["i", 0], ["s", 0], ["s0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ans", 0], ["i", 0], ["0", 0], ["if", 0], ["r1", 0], ["0", 0], ["r1", 0], ["1", 0], ["ans", 0], ["i", 0], ["r", 0], ["elif", 0], ["p1", 0], ["0", 0], ["p1", 0], ["1", 0], ["ans", 0], ["i", 0], ["p", 0], ["else", 0], ["s1", 0], ["1", 0], ["ans", 0], ["i", 0], ["s", 0], ["print", 0], ["join", 0], ["ans", 0], ["q", 0], ["int", 0], ["input", 0], ["for", 0], ["re", 0], ["in", 0], ["range", 0], ["q", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["st", 0], ["input", 0], ["odp", 0], ["0", 0], ["n", 0], ["wyn", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["st", 0], ["i", 0], ["r", 0], ["and", 0], ["b", 0], ["0", 0], ["wyn", 0], ["1", 0], ["b", 0], ["1", 0], ["odp", 0], ["i", 0], ["p", 0], ["if", 0], ["st", 0], ["i", 0], ["p", 0], ["and", 0], ["c", 0], ["0", 0], ["wyn", 0], ["1", 0], ["c", 0], ["1", 0], ["odp", 0], ["i", 0], ["s", 0], ["if", 0], ["st", 0], ["i", 0], ["s", 0], ["and", 0], ["a", 0], ["0", 0], ["wyn", 0], ["1", 0], ["a", 0], ["1", 0], ["odp", 0], ["i", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["odp", 0], ["i", 0], ["0", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["odp", 0], ["i", 0], ["r", 0], ["elif", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["odp", 0], ["i", 0], ["p", 0], ["else", 0], ["c", 0], ["1", 0], ["odp", 0], ["i", 0], ["s", 0], ["if", 0], ["wyn", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["print", 0], ["odp", 0], ["i", 0], ["end", 0], ["else", 0], ["print", 0], ["odp", 0], ["i", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["p", 0], ["and", 0], ["c", 0], ["0", 0], ["ans", 0], ["i", 0], ["s", 0], ["c", 0], ["1", 0], ["count", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["ans", 0], ["i", 0], ["r", 0], ["count", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["r", 0], ["and", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["count", 0], ["1", 0], ["ans", 0], ["i", 0], ["p", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ans", 0], ["i", 0], ["and", 0], ["a", 0], ["0", 0], ["ans", 0], ["i", 0], ["r", 0], ["a", 0], ["1", 0], ["elif", 0], ["ans", 0], ["i", 0], ["and", 0], ["b", 0], ["0", 0], ["ans", 0], ["i", 0], ["p", 0], ["b", 0], ["1", 0], ["elif", 0], ["ans", 0], ["i", 0], ["and", 0], ["c", 0], ["0", 0], ["ans", 0], ["i", 0], ["s", 0], ["c", 0], ["1", 0], ["if", 0], ["count", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["print", 0], ["ans", 0], ["sep", 0], ["else", 0], ["print", 0], ["no", 0], ["for", 0], ["testcase", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["ra", 0], ["pa", 0], ["sa", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["beat", 0], ["r", 0], ["p", 0], ["p", 0], ["s", 0], ["s", 0], ["r", 0], ["a", 0], ["beat", 0], ["r", 0], ["pa", 0], ["p", 0], ["sa", 0], ["s", 0], ["ra", 0], ["a", 0], ["sec", 0], ["win", 0], ["time", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["strip", 0], ["if", 0], ["a", 0], ["beat", 0], ["i", 0], ["0", 0], ["win", 0], ["time", 0], ["1", 0], ["a", 0], ["beat", 0], ["i", 0], ["1", 0], ["a", 0], ["sec", 0], ["append", 0], ["beat", 0], ["i", 0], ["else", 0], ["a", 0], ["sec", 0], ["append", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["sec", 0], ["i", 0], ["continue", 0], ["for", 0], ["key", 0], ["in", 0], ["rps", 0], ["if", 0], ["a", 0], ["beat", 0], ["key", 0], ["0", 0], ["continue", 0], ["a", 0], ["sec", 0], ["i", 0], ["beat", 0], ["key", 0], ["a", 0], ["beat", 0], ["key", 0], ["1", 0], ["break", 0], ["print", 0], ["yes", 0], ["n", 0], ["join", 0], ["a", 0], ["sec", 0], ["if", 0], ["win", 0], ["time", 0], ["n", 0], ["1", 0], ["2", 0], ["else", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["list", 0], ["input", 0], ["ans", 0], ["0", 0], ["ansarr", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["ansstr", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["d", 0], ["j", 0], ["r", 0], ["and", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["ans", 0], ["1", 0], ["ansarr", 0], ["j", 0], ["p", 0], ["elif", 0], ["d", 0], ["j", 0], ["p", 0], ["and", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["ans", 0], ["1", 0], ["ansarr", 0], ["j", 0], ["s", 0], ["elif", 0], ["d", 0], ["j", 0], ["s", 0], ["and", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["ans", 0], ["1", 0], ["ansarr", 0], ["j", 0], ["r", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ansarr", 0], ["j", 0], ["0", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["ansstr", 0], ["r", 0], ["elif", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["ansstr", 0], ["p", 0], ["else", 0], ["c", 0], ["1", 0], ["ansstr", 0], ["s", 0], ["else", 0], ["ansstr", 0], ["ansarr", 0], ["j", 0], ["if", 0], ["ans", 0], ["n", 0], ["2", 0], ["print", 0], ["yes", 0], ["print", 0], ["ansstr", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["0", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["s", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["s", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["0", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ct", 0], ["0", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["r", 0], ["if", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["ans", 0], ["p", 0], ["ct", 0], ["1", 0], ["else", 0], ["ans", 0], ["elif", 0], ["s", 0], ["i", 0], ["p", 0], ["if", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["ans", 0], ["s", 0], ["ct", 0], ["1", 0], ["else", 0], ["ans", 0], ["else", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["ans", 0], ["r", 0], ["ct", 0], ["1", 0], ["else", 0], ["ans", 0], ["tg", 0], ["n", 0], ["2", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["tg", 0], ["1", 0], ["if", 0], ["ct", 0], ["tg", 0], ["print", 0], ["yes", 0], ["ans1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["ans", 0], ["ans1", 0], ["append", 0], ["ans", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["ans1", 0], ["if", 0], ["ans1", 0], ["i", 0], ["if", 0], ["a", 0], ["0", 0], ["ans1", 0], ["i", 0], ["r", 0], ["a", 0], ["1", 0], ["elif", 0], ["b", 0], ["0", 0], ["ans1", 0], ["i", 0], ["p", 0], ["b", 0], ["1", 0], ["elif", 0], ["c", 0], ["0", 0], ["ans1", 0], ["i", 0], ["s", 0], ["c", 0], ["1", 0], ["fnl", 0], ["join", 0], ["ans1", 0], ["print", 0], ["fnl", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["t", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["t", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["x", 0], ["list", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["op", 0], ["n", 0], ["print", 0], ["op", 0], ["print", 0], ["x", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["w", 0], ["n", 0], ["2", 0], ["else", 0], ["w", 0], ["n", 0], ["2", 0], ["1", 0], ["z", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["x", 0], ["j", 0], ["r", 0], ["if", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["z", 0], ["1", 0], ["op", 0], ["j", 0], ["p", 0], ["elif", 0], ["x", 0], ["j", 0], ["s", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["z", 0], ["1", 0], ["op", 0], ["j", 0], ["r", 0], ["elif", 0], ["x", 0], ["j", 0], ["p", 0], ["if", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["z", 0], ["1", 0], ["op", 0], ["j", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["op", 0], ["j", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["op", 0], ["j", 0], ["r", 0], ["elif", 0], ["b", 0], ["0", 0], ["op", 0], ["j", 0], ["p", 0], ["b", 0], ["1", 0], ["elif", 0], ["c", 0], ["0", 0], ["op", 0], ["j", 0], ["s", 0], ["c", 0], ["1", 0], ["if", 0], ["z", 0], ["w", 0], ["print", 0], ["yes", 0], ["print", 0], ["join", 0], ["op", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nVirtually every single book, play, movie, novel, and game has at least one character. Most have more, and some even have thousands! As every good writer knows, the difficulty of creating a character increases with each new major character added. This is because fictional characters are truly developed through their relationships with others.\n\nIf there are no characters or only one character, no relationships need to be explored. With two characters, there is one relationship. If there are three characters, however, there are four relationships: the ones between each pair of characters, and finally the relationship when all three are together. In general, the relationship between all subsets of at least two characters must be explored.\n\nGiven a literary work with $N$ characters, how many relationships need to be explored?\n\n-----Input-----\nThe input contains a single integer, $N$ ($0 \\leq N \\leq 30$), the number of characters.\n\n-----Output-----\nOutput a single line with the number of relationships that need to be explored.\n\n-----Examples-----\nSample Input:\n1\nSample Output:\n0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5582"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5582", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["virtually", 1], ["every", 1], ["single", 1], ["book", 1], ["play", 1], ["movie", 1], ["novel", 1], ["and", 1], ["game", 1], ["has", 1], ["at", 1], ["least", 1], ["one", 1], ["character", 1], ["most", 1], ["have", 1], ["more", 1], ["and", 1], ["some", 1], ["even", 1], ["have", 1], ["thousands", 1], ["as", 1], ["every", 1], ["good", 1], ["writer", 1], ["knows", 1], ["the", 1], ["difficulty", 1], ["of", 1], ["creating", 1], ["a", 1], ["character", 1], ["increases", 1], ["with", 1], ["each", 1], ["new", 1], ["major", 1], ["character", 1], ["added", 1], ["this", 1], ["is", 1], ["because", 1], ["fictional", 1], ["characters", 1], ["are", 1], ["truly", 1], ["developed", 1], ["through", 1], ["their", 1], ["relationships", 1], ["with", 1], ["others", 1], ["if", 1], ["there", 1], ["are", 1], ["no", 1], ["characters", 1], ["or", 1], ["only", 1], ["one", 1], ["character", 1], ["no", 1], ["relationships", 1], ["need", 1], ["to", 1], ["be", 1], ["explored", 1], ["with", 1], ["two", 1], ["characters", 1], ["there", 1], ["is", 1], ["one", 1], ["relationship", 1], ["if", 1], ["there", 1], ["are", 1], ["three", 1], ["characters", 1], ["however", 1], ["there", 1], ["are", 1], ["four", 1], ["relationships", 1], ["the", 1], ["ones", 1], ["between", 1], ["each", 1], ["pair", 1], ["of", 1], ["characters", 1], ["and", 1], ["finally", 1], ["the", 1], ["relationship", 1], ["when", 1], ["all", 1], ["three", 1], ["are", 1], ["together", 1], ["in", 1], ["general", 1], ["the", 1], ["relationship", 1], ["between", 1], ["all", 1], ["subsets", 1], ["of", 1], ["at", 1], ["least", 1], ["two", 1], ["characters", 1], ["must", 1], ["be", 1], ["explored", 1], ["given", 1], ["a", 1], ["literary", 0], ["work", 0], ["with", 0], ["n", 0], ["characters", 0], ["how", 0], ["many", 0], ["relationships", 0], ["need", 0], ["to", 0], ["be", 0], ["explored", 0], ["input", 0], ["the", 1], ["input", 1], ["contains", 1], ["a", 1], ["single", 1], ["integer", 0], ["n", 0], ["0", 0], ["leq", 0], ["n", 0], ["leq", 0], ["30", 0], ["the", 0], ["number", 0], ["of", 0], ["characters", 0], ["output", 0], ["output", 1], ["a", 1], ["single", 0], ["line", 0], ["with", 0], ["the", 0], ["number", 0], ["of", 0], ["relationships", 0], ["that", 0], ["need", 0], ["to", 0], ["be", 0], ["explored", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["sample", 0], ["output", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7440476190476191, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7440476190476191, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8944444444444445, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8944444444444445, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7440476190476191, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7440476190476191, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8944444444444445, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8944444444444445, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are given $k$ sequences of integers. The length of the $i$-th sequence equals to $n_i$.\n\nYou have to choose exactly two sequences $i$ and $j$ ($i \\ne j$) such that you can remove exactly one element in each of them in such a way that the sum of the changed sequence $i$ (its length will be equal to $n_i - 1$) equals to the sum of the changed sequence $j$ (its length will be equal to $n_j - 1$).\n\nNote that it's required to remove exactly one element in each of the two chosen sequences.\n\nAssume that the sum of the empty (of the length equals $0$) sequence is $0$.\n\n\n-----Input-----\n\nThe first line contains an integer $k$ ($2 \\le k \\le 2 \\cdot 10^5$) — the number of sequences.\n\nThen $k$ pairs of lines follow, each pair containing a sequence.\n\nThe first line in the $i$-th pair contains one integer $n_i$ ($1 \\le n_i < 2 \\cdot 10^5$) — the length of the $i$-th sequence. The second line of the $i$-th pair contains a sequence of $n_i$ integers $a_{i, 1}, a_{i, 2}, \\dots, a_{i, n_i}$.\n\nThe elements of sequences are integer numbers from $-10^4$ to $10^4$.\n\nThe sum of lengths of all given sequences don't exceed $2 \\cdot 10^5$, i.e. $n_1 + n_2 + \\dots + n_k \\le 2 \\cdot 10^5$.\n\n\n-----Output-----\n\nIf it is impossible to choose two sequences such that they satisfy given conditions, print \"NO\" (without quotes). Otherwise in the first line print \"YES\" (without quotes), in the second line — two integers $i$, $x$ ($1 \\le i \\le k, 1 \\le x \\le n_i$), in the third line — two integers $j$, $y$ ($1 \\le j \\le k, 1 \\le y \\le n_j$). It means that the sum of the elements of the $i$-th sequence without the element with index $x$ equals to the sum of the elements of the $j$-th sequence without the element with index $y$.\n\nTwo chosen sequences must be distinct, i.e. $i \\ne j$. You can print them in any order.\n\nIf there are multiple possible answers, print any of them.\n\n\n-----Examples-----\nInput\n2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\nOutput\nYES\n2 6\n1 2\n\nInput\n3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n\nOutput\nNO\n\nInput\n4\n6\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\nOutput\nYES\n2 2\n4 1\n\n\n\n-----Note-----\n\nIn the first example there are two sequences $[2, 3, 1, 3, 2]$ and $[1, 1, 2, 2, 2, 1]$. You can remove the second element from the first sequence to get $[2, 1, 3, 2]$ and you can remove the sixth element from the second sequence to get $[1, 1, 2, 2, 2]$. The sums of the both resulting sequences equal to $8$, i.e. the sums are equal.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\nk=int(input())\nL=[]\ndic=dict()\nflag=False\nfor i in range(k):\n\tL.append([int(input())])\n\tL[i].append(list(map(int,input().split())))\n\ts=sum(L[i][1])\n\tq=[]\n\tfor j in range(L[i][0]):\n\t\tif flag:\n\t\t\treturn\n\t\tt=s-L[i][1][j]\n\t\tif t in dic:\n\t\t\tx,y=dic[t]\n\t\t\tprint(\"YES\")\n\t\t\tprint(i+1,j+1)\n\t\t\tprint(x,y)\n\t\t\tflag=True\n\t\telse:\n\t\t\tq.append((t,i+1,j+1))\n\tfor a,b,c in q:\n\t\tdic[a]=(b,c)\nprint(\"NO\")\n", "import sys\n\nclass Scanner():\n\tdef __init__(self):\n\t\tself.tokens = []\n\t\tself.index = -1\n\t\n\t\tfor line in sys.stdin:\n\t\t\tself.tokens.extend(line.split())\n\t\n\tdef next_token(self):\n\t\tself.index += 1\n\t\treturn None if self.index == len(self.tokens) \\\n\t\t            else self.tokens[self.index]\n\ndef main():\n\tscanner = Scanner()\n\tn = int(scanner.next_token())\n\t\n\tsequences = []\n\tfor i in range(n):\n\t\tk = int(scanner.next_token())\n\t\tsequences.append([int(scanner.next_token()) for _ in range(k)])\n\t\n\tmp = dict()\n\tfor i, ar in enumerate(sequences):\n\t\ts = sum(ar)\n\t\tfor j, v in enumerate(ar):\n\t\t\tx = s - v\n\t\t\tif x in mp:\n\t\t\t\tprint(\"YES\")\n\t\t\t\tprint(\"{} {}\".format(mp[x][0] + 1, mp[x][1] + 1))\n\t\t\t\tprint(\"{} {}\".format(i + 1, j + 1))\n\t\t\t\treturn\n\t\t\n\t\tfor j, v in enumerate(ar):\n\t\t\tmp[s - v] = (i, j)\n\t\n\tprint(\"NO\")\n\t\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "k = int(input())\na = []\nfor i in range(k):\n\tn = int(input())\n\tb = [int(i) for i in input().split()]\n\ts = sum(b)\n\tfor j in range(n):\n\t\tx = s-b[j]\n\t\ta.append([x,i,j])\nf = True\na = sorted(a)\nfor i in range(1,len(a)):\n\tif a[i][0] == a[i-1][0] and a[i][1]!=a[i-1][1]:\n\t\tf = False\n\t\tprint('YES')\n\t\tprint(a[i][1]+1,a[i][2]+1)\n\t\tprint(a[i-1][1]+1, a[i-1][2]+1)\n\t\tbreak\nif f:\n\tprint('NO')\n", "m=int(input())\na=[]\nfor i in range(m):\n\tn=int(input())\n\ta.append(list(map(int,input().split())))\nd=dict()\nf=0\nfor i in range(m):\n\tsumm=sum(a[i])\n\tfor j in range(len(a[i])):\n\t\tif(summ-a[i][j] in d):\n\t\t\tif(d[summ-a[i][j]][0]!=i+1):\n\t\t\t\tprint(\"YES\")\n\t\t\t\tprint(*d[summ-a[i][j]])\n\t\t\t\tprint(i+1,j+1)\n\t\t\t\tf=1\n\t\t\t\tbreak\n\t\td[summ-a[i][j]]=[i+1,j+1]\n\tif(f):\n\t\tbreak\nif(f==0):\n\tprint(\"NO\")\n", "n = int(input())\ncl = set()\ndic = {}\nfor i in range(n):\n\tm = int(input())\n\ts = list(map(int, input().split()))\n\tt = []\n\tsm = sum(s)\n\tfor x in range(m):\n\t\ta = sm - s[x]\n\t\tif a in cl:\n\t\t\tprint('YES')\n\t\t\tprint('{} {}'.format(i + 1, x + 1))\n\t\t\tprint('{} {}'.format(dic[a][0], dic[a][1]))\n\t\t\treturn\n\t\tdic.update({a: (i+1, x+1)})\n\t\tt.append(a)\n\tfor x in set(t):\n\t\tcl.add(x)\n\n\nprint('NO')\n", "read = lambda : list(map(int,input().split()))\n\nk = int(input())\na = []\ns = []\ndict = {}\nfor i in range(k):\n\ta.append([])\n\tinput()\n\ts.append(0)\n\tfor j in read():\n\t\ts[i] += j\n\t\ta[i].append(j)\nok = False\nfor i in range(k):\n\tif ok:\n\t\tbreak\n\tfor j  in range(len(a[i])):\n\t\t\n\t\tx = s[i] - a[i][j]\n\t\ttmp = dict.get(x)\n\t\tif ( tmp  != None  ):\n\t\t\tok = True\n\t\t\tprint(\"YES\")\n\t\t\tprint(i+1,j+1)\n\t\t\tprint(tmp[0]+1,tmp[1]+1)\n\t\t\tbreak\n\n\tfor j in range(len(a[i])):\n\t\tx = s[i] - a[i][j]\n\t\tdict[x] = [i,j]\nif not ok:\n\tprint(\"NO\")\n\n", "k = int(input())\nn = int(input())\na = list(map(int, input().split()))\nd = {}\nsuma = sum(a)\n\nfor i in range(n):\n\td[suma - a[i]] = [1, i + 1]\n\nans = False\n\nfor i in range(k - 1):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tsuma = sum(a)\n\tfor j in range(n):\n\t\tif (suma - a[j]) in d and not d[suma - a[j]][0] == i + 2:\n\t\t\tprint('YES')\n\t\t\tprint(i + 2, j + 1)\n\t\t\tprint(d[suma - a[j]][0], d[suma - a[j]][1])\n\t\t\tans = True\n\t\t\tbreak\n\t\telse:\n\t\t\td[suma - a[j]] = [i + 2, j + 1]\n\tif ans:\n\t\tbreak\nif not ans:\n\tprint('NO')\n", "k = int(input())\npossums = {}\nhave_ans = False\nfor i in range(k):\n\tif have_ans:\n\t\tbreak\n\n\tn = input()\n\tseq = list(map(int, input().split(' ')))\n\ts = sum(seq)\n\tfor i_in_seq, n in enumerate(seq):\n\t\tv = s - n\n\t\tif v in possums and i != possums[v][0]:\n\t\t\thave_ans = True\n\t\t\tprint('YES')\n\t\t\tprint(i + 1, i_in_seq + 1)\n\t\t\tprint(possums[v][0] + 1, possums[v][1] + 1)\n\t\t\tbreak\n\t\telse:\n\t\t\tpossums[v] = (i, i_in_seq)\n\nif not have_ans:\n\tprint('NO')\n", "k=int(input())\na,c=[],{}\nfor i in range(k):\n\ta.append([])\n\tn,a[i],s=int(input()),[],0\n\tfor j in input().split():\n\t\ta[i]+=[-int(j)]\n\t\ts+=int(j)\n\tfor j in range(n):\n\t\ta[i][j]+=s\n\t\th=c.get(a[i][j])\n\t\tif h!=None and h[0]!=i+1:\n\t\t\tprint(\"YES\")\n\t\t\tprint(h[0],h[1])\n\t\t\tprint(1+i,1+j)\n\t\t\tquit()\n\t\tc[a[i][j]]=[i+1,j+1]\nprint(\"NO\")\n"], "id": "id9367"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9367", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 4], ["are", 4], ["given", 4], ["k", 4], ["sequences", 2], ["of", 2], ["integers", 2], ["the", 2], ["length", 2], ["of", 2], ["the", 2], ["i", 2], ["th", 2], ["sequence", 2], ["equals", 2], ["to", 2], ["n", 2], ["i", 2], ["you", 2], ["have", 2], ["to", 2], ["choose", 2], ["exactly", 2], ["two", 2], ["sequences", 2], ["i", 2], ["and", 2], ["j", 2], ["i", 2], ["ne", 2], ["j", 4], ["such", 4], ["that", 4], ["you", 4], ["can", 4], ["remove", 4], ["exactly", 4], ["one", 4], ["element", 4], ["in", 4], ["each", 4], ["of", 4], ["them", 4], ["in", 4], ["such", 4], ["a", 4], ["way", 4], ["that", 4], ["the", 4], ["sum", 2], ["of", 2], ["the", 2], ["changed", 2], ["sequence", 2], ["i", 2], ["its", 2], ["length", 2], ["will", 2], ["be", 2], ["equal", 2], ["to", 2], ["n", 2], ["i", 2], ["1", 2], ["equals", 4], ["to", 4], ["the", 4], ["sum", 2], ["of", 2], ["the", 2], ["changed", 2], ["sequence", 2], ["j", 2], ["its", 2], ["length", 2], ["will", 2], ["be", 2], ["equal", 2], ["to", 2], ["n", 2], ["j", 2], ["1", 2], ["note", 4], ["that", 4], ["it", 4], ["s", 4], ["required", 4], ["to", 4], ["remove", 4], ["exactly", 4], ["one", 4], ["element", 4], ["in", 4], ["each", 4], ["of", 4], ["the", 4], ["two", 4], ["chosen", 4], ["sequences", 4], ["assume", 4], ["that", 4], ["the", 4], ["sum", 0], ["of", 0], ["the", 0], ["empty", 0], ["of", 0], ["the", 0], ["length", 0], ["equals", 0], ["0", 0], ["sequence", 0], ["is", 0], ["0", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 2], ["contains", 2], ["an", 2], ["integer", 2], ["k", 2], ["2", 2], ["le", 2], ["k", 2], ["le", 2], ["2", 2], ["cdot", 2], ["10", 2], ["5", 4], ["—", 4], ["the", 4], ["number", 4], ["of", 4], ["sequences", 4], ["then", 4], ["k", 4], ["pairs", 4], ["of", 4], ["lines", 4], ["follow", 4], ["each", 4], ["pair", 4], ["containing", 4], ["a", 4], ["sequence", 2], ["the", 2], ["first", 2], ["line", 2], ["in", 2], ["the", 2], ["i", 2], ["th", 2], ["pair", 2], ["contains", 2], ["one", 2], ["integer", 2], ["n", 2], ["i", 2], ["1", 2], ["le", 2], ["n", 2], ["i", 2], ["2", 2], ["cdot", 2], ["10", 2], ["5", 4], ["—", 4], ["the", 4], ["length", 4], ["of", 4], ["the", 4], ["i", 4], ["th", 4], ["sequence", 4], ["the", 2], ["second", 2], ["line", 2], ["of", 2], ["the", 2], ["i", 2], ["th", 2], ["pair", 2], ["contains", 2], ["a", 2], ["sequence", 2], ["of", 2], ["n", 2], ["i", 2], ["integers", 2], ["a", 2], ["i", 2], ["1", 2], ["a", 2], ["i", 2], ["2", 2], ["dots", 2], ["a", 2], ["i", 2], ["n", 2], ["i", 2], ["the", 2], ["elements", 2], ["of", 2], ["sequences", 2], ["are", 2], ["integer", 2], ["numbers", 2], ["from", 2], ["10", 2], ["4", 2], ["to", 2], ["10", 2], ["4", 2], ["the", 2], ["sum", 2], ["of", 2], ["lengths", 2], ["of", 2], ["all", 2], ["given", 2], ["sequences", 2], ["don", 2], ["t", 2], ["exceed", 2], ["2", 2], ["cdot", 2], ["10", 2], ["5", 2], ["i", 2], ["e", 2], ["n", 0], ["1", 0], ["n", 0], ["2", 0], ["dots", 0], ["n", 0], ["k", 0], ["le", 0], ["2", 0], ["cdot", 0], ["10", 0], ["5", 0], ["output", 0], ["if", 4], ["it", 4], ["is", 4], ["impossible", 4], ["to", 4], ["choose", 4], ["two", 4], ["sequences", 4], ["such", 4], ["that", 4], ["they", 4], ["satisfy", 4], ["given", 4], ["conditions", 4], ["print", 4], ["no", 4], ["without", 4], ["quotes", 4], ["otherwise", 4], ["in", 4], ["the", 4], ["first", 4], ["line", 4], ["print", 4], ["yes", 4], ["without", 2], ["quotes", 2], ["in", 2], ["the", 2], ["second", 2], ["line", 2], ["—", 2], ["two", 2], ["integers", 2], ["i", 2], ["x", 2], ["1", 2], ["le", 2], ["i", 2], ["le", 2], ["k", 2], ["1", 2], ["le", 2], ["x", 2], ["le", 2], ["n", 2], ["i", 2], ["in", 2], ["the", 2], ["third", 2], ["line", 2], ["—", 2], ["two", 2], ["integers", 2], ["j", 2], ["y", 2], ["1", 2], ["le", 2], ["j", 2], ["le", 2], ["k", 2], ["1", 2], ["le", 2], ["y", 2], ["le", 2], ["n", 2], ["j", 2], ["it", 4], ["means", 4], ["that", 4], ["the", 4], ["sum", 4], ["of", 4], ["the", 4], ["elements", 4], ["of", 4], ["the", 4], ["i", 4], ["th", 4], ["sequence", 4], ["without", 4], ["the", 4], ["element", 4], ["with", 4], ["index", 4], ["x", 4], ["equals", 4], ["to", 4], ["the", 4], ["sum", 4], ["of", 4], ["the", 4], ["elements", 4], ["of", 4], ["the", 4], ["j", 4], ["th", 4], ["sequence", 4], ["without", 4], ["the", 4], ["element", 4], ["with", 2], ["index", 2], ["y", 2], ["two", 2], ["chosen", 2], ["sequences", 2], ["must", 2], ["be", 2], ["distinct", 2], ["i", 2], ["e", 2], ["i", 2], ["ne", 2], ["j", 4], ["you", 4], ["can", 4], ["print", 4], ["them", 4], ["in", 4], ["any", 0], ["order", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["possible", 0], ["answers", 0], ["print", 0], ["any", 0], ["of", 0], ["them", 0], ["examples", 0], ["input", 0], ["2", 0], ["5", 0], ["2", 0], ["3", 0], ["1", 0], ["3", 0], ["2", 0], ["6", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["2", 0], ["1", 0], ["output", 0], ["yes", 0], ["2", 0], ["6", 0], ["1", 0], ["2", 0], ["input", 0], ["3", 0], ["1", 0], ["5", 0], ["5", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["output", 0], ["no", 0], ["input", 0], ["4", 0], ["6", 0], ["2", 2], ["2", 1], ["2", 1], ["2", 3], ["2", 0], ["2", 0], ["5", 0], ["2", 1], ["2", 0], ["2", 0], ["2", 0], ["2", 0], ["3", 0], ["2", 0], ["2", 0], ["2", 0], ["5", 0], ["2", 0], ["2", 0], ["2", 0], ["2", 0], ["2", 0], ["output", 0], ["yes", 0], ["2", 0], ["2", 0], ["4", 0], ["1", 0], ["note", 0], ["in", 4], ["the", 4], ["first", 4], ["example", 4], ["there", 4], ["are", 4], ["two", 4], ["sequences", 4], ["2", 4], ["3", 4], ["1", 4], ["3", 4], ["2", 4], ["and", 4], ["1", 4], ["1", 4], ["2", 4], ["2", 4], ["2", 4], ["1", 4], ["you", 4], ["can", 4], ["remove", 4], ["the", 4], ["second", 4], ["element", 4], ["from", 4], ["the", 4], ["first", 4], ["sequence", 4], ["to", 4], ["get", 4], ["2", 4], ["1", 4], ["3", 4], ["2", 4], ["and", 4], ["you", 4], ["can", 4], ["remove", 4], ["the", 4], ["sixth", 4], ["element", 4], ["from", 4], ["the", 4], ["second", 4], ["sequence", 4], ["to", 4], ["get", 4], ["1", 4], ["1", 4], ["2", 4], ["2", 4], ["2", 4], ["the", 4], ["sums", 4], ["of", 4], ["the", 4], ["both", 0], ["resulting", 0], ["sequences", 0], ["equal", 0], ["to", 0], ["8", 0], ["i", 0], ["e", 0], ["the", 0], ["sums", 0], ["are", 0], ["equal", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7801556420233463, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.29831387808041504, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8821292775665399, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4120722433460076, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7801556420233463, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.29831387808041504, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8821292775665399, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4120722433460076, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["k", 0], ["int", 0], ["input", 0], ["l", 0], ["dic", 0], ["dict", 0], ["flag", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["l", 0], ["i", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["sum", 0], ["l", 0], ["i", 0], ["1", 0], ["q", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["l", 0], ["i", 0], ["0", 0], ["if", 0], ["flag", 0], ["return", 0], ["t", 0], ["s", 0], ["l", 0], ["i", 0], ["1", 0], ["j", 0], ["if", 0], ["t", 0], ["in", 0], ["dic", 0], ["x", 0], ["y", 0], ["dic", 0], ["t", 0], ["print", 0], ["yes", 0], ["print", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["print", 0], ["x", 0], ["y", 0], ["flag", 0], ["true", 0], ["else", 0], ["q", 0], ["append", 0], ["t", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["for", 0], ["a", 0], ["b", 0], ["c", 0], ["in", 0], ["q", 0], ["dic", 0], ["a", 0], ["b", 0], ["c", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["class", 0], ["scanner", 0], ["def", 0], ["init", 0], ["self", 0], ["self", 0], ["tokens", 0], ["self", 0], ["index", 0], ["1", 0], ["for", 0], ["line", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["self", 0], ["tokens", 0], ["extend", 0], ["line", 0], ["split", 0], ["def", 0], ["next", 0], ["token", 0], ["self", 0], ["self", 0], ["index", 0], ["1", 0], ["return", 0], ["none", 0], ["if", 0], ["self", 0], ["index", 0], ["len", 0], ["self", 0], ["tokens", 0], ["else", 0], ["self", 0], ["tokens", 0], ["self", 0], ["index", 0], ["def", 0], ["main", 0], ["scanner", 0], ["scanner", 0], ["n", 0], ["int", 0], ["scanner", 0], ["next", 0], ["token", 0], ["sequences", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["int", 0], ["scanner", 0], ["next", 0], ["token", 0], ["sequences", 0], ["append", 0], ["int", 0], ["scanner", 0], ["next", 0], ["token", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["mp", 0], ["dict", 0], ["for", 0], ["i", 0], ["ar", 0], ["in", 0], ["enumerate", 0], ["sequences", 0], ["s", 0], ["sum", 0], ["ar", 0], ["for", 0], ["j", 0], ["v", 0], ["in", 0], ["enumerate", 0], ["ar", 0], ["x", 0], ["s", 0], ["v", 0], ["if", 0], ["x", 0], ["in", 0], ["mp", 0], ["print", 0], ["yes", 0], ["print", 0], ["format", 0], ["mp", 0], ["x", 0], ["0", 0], ["1", 0], ["mp", 0], ["x", 0], ["1", 0], ["1", 0], ["print", 0], ["format", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["return", 0], ["for", 0], ["j", 0], ["v", 0], ["in", 0], ["enumerate", 0], ["ar", 0], ["mp", 0], ["s", 0], ["v", 0], ["i", 0], ["j", 0], ["print", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["k", 0], ["int", 0], ["input", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["sum", 0], ["b", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["s", 0], ["b", 0], ["j", 0], ["a", 0], ["append", 0], ["x", 0], ["i", 0], ["j", 0], ["f", 0], ["true", 0], ["a", 0], ["sorted", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["0", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["f", 0], ["false", 0], ["print", 0], ["yes", 0], ["print", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["1", 0], ["print", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["1", 0], ["break", 0], ["if", 0], ["f", 0], ["print", 0], ["no", 0], ["m", 0], ["int", 0], ["input", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["dict", 0], ["f", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["summ", 0], ["sum", 0], ["a", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["i", 0], ["if", 0], ["summ", 0], ["a", 0], ["i", 0], ["j", 0], ["in", 0], ["d", 0], ["if", 0], ["d", 0], ["summ", 0], ["a", 0], ["i", 0], ["j", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["d", 0], ["summ", 0], ["a", 0], ["i", 0], ["j", 0], ["print", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["f", 0], ["1", 0], ["break", 0], ["d", 0], ["summ", 0], ["a", 0], ["i", 0], ["j", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["if", 0], ["f", 0], ["break", 0], ["if", 0], ["f", 0], ["0", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["cl", 0], ["set", 0], ["dic", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["m", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["sm", 0], ["sum", 0], ["s", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["sm", 0], ["s", 0], ["x", 0], ["if", 0], ["a", 0], ["in", 0], ["cl", 0], ["print", 0], ["yes", 0], ["print", 0], ["format", 0], ["i", 0], ["1", 0], ["x", 0], ["1", 0], ["print", 0], ["format", 0], ["dic", 0], ["a", 0], ["0", 0], ["dic", 0], ["a", 0], ["1", 0], ["return", 0], ["dic", 0], ["update", 0], ["a", 0], ["i", 0], ["1", 0], ["x", 0], ["1", 0], ["t", 0], ["append", 0], ["a", 0], ["for", 0], ["x", 0], ["in", 0], ["set", 0], ["t", 0], ["cl", 0], ["add", 0], ["x", 0], ["print", 0], ["no", 0], ["read", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["int", 0], ["input", 0], ["a", 0], ["s", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["a", 0], ["append", 0], ["input", 0], ["s", 0], ["append", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["read", 0], ["s", 0], ["i", 0], ["j", 0], ["a", 0], ["i", 0], ["append", 0], ["j", 0], ["ok", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["ok", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["i", 0], ["x", 0], ["s", 0], ["i", 0], ["a", 0], ["i", 0], ["j", 0], ["tmp", 0], ["dict", 0], ["get", 0], ["x", 0], ["if", 0], ["tmp", 0], ["none", 0], ["ok", 0], ["true", 0], ["print", 0], ["yes", 0], ["print", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["print", 0], ["tmp", 0], ["0", 0], ["1", 0], ["tmp", 0], ["1", 0], ["1", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["i", 0], ["x", 0], ["s", 0], ["i", 0], ["a", 0], ["i", 0], ["j", 0], ["dict", 0], ["x", 0], ["i", 0], ["j", 0], ["if", 0], ["not", 0], ["ok", 0], ["print", 0], ["no", 0], ["k", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["suma", 0], ["sum", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["suma", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ans", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["suma", 0], ["sum", 0], ["a", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["suma", 0], ["a", 0], ["j", 0], ["in", 0], ["d", 0], ["and", 0], ["not", 0], ["d", 0], ["suma", 0], ["a", 0], ["j", 0], ["0", 0], ["i", 0], ["2", 0], ["print", 0], ["yes", 0], ["print", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["print", 0], ["d", 0], ["suma", 0], ["a", 0], ["j", 0], ["0", 0], ["d", 0], ["suma", 0], ["a", 0], ["j", 0], ["1", 0], ["ans", 0], ["true", 0], ["break", 0], ["else", 0], ["d", 0], ["suma", 0], ["a", 0], ["j", 0], ["i", 0], ["2", 0], ["j", 0], ["1", 0], ["if", 0], ["ans", 0], ["break", 0], ["if", 0], ["not", 0], ["ans", 0], ["print", 0], ["no", 0], ["k", 0], ["int", 0], ["input", 0], ["possums", 0], ["have", 0], ["ans", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["have", 0], ["ans", 0], ["break", 0], ["n", 0], ["input", 0], ["seq", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["sum", 0], ["seq", 0], ["for", 0], ["i", 0], ["in", 0], ["seq", 0], ["n", 0], ["in", 0], ["enumerate", 0], ["seq", 0], ["v", 0], ["s", 0], ["n", 0], ["if", 0], ["v", 0], ["in", 0], ["possums", 0], ["and", 0], ["i", 0], ["possums", 0], ["v", 0], ["0", 0], ["have", 0], ["ans", 0], ["true", 0], ["print", 0], ["yes", 0], ["print", 0], ["i", 0], ["1", 0], ["i", 0], ["in", 0], ["seq", 0], ["1", 0], ["print", 0], ["possums", 0], ["v", 0], ["0", 0], ["1", 0], ["possums", 0], ["v", 0], ["1", 0], ["1", 0], ["break", 0], ["else", 0], ["possums", 0], ["v", 0], ["i", 0], ["i", 0], ["in", 0], ["seq", 0], ["if", 0], ["not", 0], ["have", 0], ["ans", 0], ["print", 0], ["no", 0], ["k", 0], ["int", 0], ["input", 0], ["a", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["a", 0], ["append", 0], ["n", 0], ["a", 0], ["i", 0], ["s", 0], ["int", 0], ["input", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["i", 0], ["int", 0], ["j", 0], ["s", 0], ["int", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["i", 0], ["j", 0], ["s", 0], ["h", 0], ["c", 0], ["get", 0], ["a", 0], ["i", 0], ["j", 0], ["if", 0], ["h", 0], ["none", 0], ["and", 0], ["h", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["h", 0], ["0", 0], ["h", 0], ["1", 0], ["print", 0], ["1", 0], ["i", 0], ["1", 0], ["j", 0], ["quit", 0], ["c", 0], ["a", 0], ["i", 0], ["j", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nIT City company developing computer games invented a new way to reward its employees. After a new game release users start buying it actively, and the company tracks the number of sales with precision to each transaction. Every time when the next number of sales is divisible by all numbers from 2 to 10 every developer of this game gets a small bonus.\n\nA game designer Petya knows that the company is just about to release a new game that was partly developed by him. On the basis of his experience he predicts that n people will buy the game during the first month. Now Petya wants to determine how many times he will get the bonus. Help him to know it.\n\n\n-----Input-----\n\nThe only line of the input contains one integer n (1 ≤ n ≤ 10^18) — the prediction on the number of people who will buy the game.\n\n\n-----Output-----\n\nOutput one integer showing how many numbers from 1 to n are divisible by all numbers from 2 to 10.\n\n\n-----Examples-----\nInput\n3000\n\nOutput\n1\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = 2*2*2*3*3*5*7\nm = int(input())\nprint(m//n)\n", "n=int(input())\nprint(n//2520)\n", "print(int(input()) // 2520)\n", "n=int(input())\nprint(n//2520)\n", "print(int(input()) // 2520)\n", "lcd = 8 * 9 * 5 * 7\nprint(int(input()) // lcd)\n", "print(int(input()) // 2520)\n", "n = int(input())\nprint(n // 2520)\n", "n = int(input())\np = 2520\nans = n // p\nprint(ans)\n", "x = int(input())\n#x, y = map(int, input().split())\n\nprint(x//2520)\n", "print(int(input()) // (2 * 2 * 2 * 3 * 3 * 5 * 7))\n", "n = int(input())\nprint(n // 2520)\n", "def __starting_point():\n\n\tn = int(input())\n\n\tprint(n//(8*9*5*7))\n__starting_point()\n", "n = int(input())\nprint(n//2520)\n", "n = int(input())\nprint(n // (2 ** 3 * 5 * 7 * 3 ** 2))\n", "m = 8*9*5*7\nn = int(input())\nprint(n // m)\n", "n=int(input())\nprint(n//2520)\n", "x = 9 * 8 * 7 * 5\nn = int(input())\nprint(n // x)\n", "import sys\n\nn = int(input())\n\nm = 2 * 3 * 2 * 5 * 7 * 2 * 3\n\nprint(n // m)\n", "print(int(input())//2520)\n", "def main():\n\tn = int(input())\n\tans = n // (2 * 2 * 2 * 3 * 3 * 5 * 7)\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n = int(input())\n\nans = n // 2520\nprint(ans)\n", "n = int(input())\nprint(n // (8*5*9*7))\n", "n=int(input())\nprint(n//2520)\n", "n=int(input())\nd=2*3*2*5*7*2*3\nprint(n//d)\n"], "id": "id8684"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8684", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["it", 2], ["city", 2], ["company", 2], ["developing", 2], ["computer", 2], ["games", 2], ["invented", 2], ["a", 2], ["new", 2], ["way", 2], ["to", 2], ["reward", 2], ["its", 2], ["employees", 2], ["after", 2], ["a", 2], ["new", 2], ["game", 2], ["release", 2], ["users", 2], ["start", 2], ["buying", 2], ["it", 2], ["actively", 2], ["and", 2], ["the", 2], ["company", 2], ["tracks", 2], ["the", 2], ["number", 2], ["of", 2], ["sales", 2], ["with", 2], ["precision", 2], ["to", 2], ["each", 2], ["transaction", 2], ["every", 2], ["time", 2], ["when", 2], ["the", 2], ["next", 2], ["number", 2], ["of", 2], ["sales", 2], ["is", 2], ["divisible", 2], ["by", 2], ["all", 2], ["numbers", 2], ["from", 2], ["2", 2], ["to", 2], ["10", 2], ["every", 2], ["developer", 2], ["of", 2], ["this", 2], ["game", 2], ["gets", 2], ["a", 2], ["small", 2], ["bonus", 2], ["a", 2], ["game", 2], ["designer", 2], ["petya", 2], ["knows", 2], ["that", 2], ["the", 2], ["company", 2], ["is", 2], ["just", 2], ["about", 2], ["to", 2], ["release", 2], ["a", 2], ["new", 2], ["game", 2], ["that", 2], ["was", 2], ["partly", 2], ["developed", 2], ["by", 2], ["him", 2], ["on", 2], ["the", 2], ["basis", 2], ["of", 2], ["his", 2], ["experience", 2], ["he", 2], ["predicts", 2], ["that", 2], ["n", 2], ["people", 2], ["will", 2], ["buy", 2], ["the", 2], ["game", 2], ["during", 2], ["the", 2], ["first", 2], ["month", 2], ["now", 2], ["petya", 2], ["wants", 2], ["to", 2], ["determine", 2], ["how", 2], ["many", 0], ["times", 0], ["he", 0], ["will", 0], ["get", 0], ["the", 0], ["bonus", 0], ["help", 0], ["him", 0], ["to", 0], ["know", 0], ["it", 0], ["input", 0], ["the", 2], ["only", 2], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["one", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["18", 0], ["—", 2], ["the", 2], ["prediction", 0], ["on", 0], ["the", 0], ["number", 0], ["of", 0], ["people", 0], ["who", 0], ["will", 0], ["buy", 0], ["the", 0], ["game", 0], ["output", 0], ["output", 2], ["one", 2], ["integer", 2], ["showing", 2], ["how", 2], ["many", 2], ["numbers", 2], ["from", 2], ["1", 0], ["to", 0], ["n", 0], ["are", 0], ["divisible", 0], ["by", 0], ["all", 0], ["numbers", 0], ["from", 0], ["2", 0], ["to", 0], ["10", 0], ["examples", 0], ["input", 0], ["3000", 0], ["output", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6892655367231638, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3446327683615819, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8994708994708994, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4497354497354497, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6892655367231638, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3446327683615819, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8994708994708994, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4497354497354497, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["2", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["5", 0], ["7", 0], ["m", 0], ["int", 0], ["input", 0], ["print", 0], ["m", 0], ["n", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2520", 0], ["print", 0], ["int", 0], ["input", 0], ["2520", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2520", 0], ["print", 0], ["int", 0], ["input", 0], ["2520", 0], ["lcd", 0], ["8", 0], ["9", 0], ["5", 0], ["7", 0], ["print", 0], ["int", 0], ["input", 0], ["lcd", 0], ["print", 0], ["int", 0], ["input", 0], ["2520", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2520", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["2520", 0], ["ans", 0], ["n", 0], ["p", 0], ["print", 0], ["ans", 0], ["x", 0], ["int", 0], ["input", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["x", 0], ["2520", 0], ["print", 0], ["int", 0], ["input", 0], ["2", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["5", 0], ["7", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2520", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["8", 0], ["9", 0], ["5", 0], ["7", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2520", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["3", 0], ["2", 0], ["m", 0], ["8", 0], ["9", 0], ["5", 0], ["7", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["m", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2520", 0], ["x", 0], ["9", 0], ["8", 0], ["7", 0], ["5", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["x", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["m", 0], ["2", 0], ["3", 0], ["2", 0], ["5", 0], ["7", 0], ["2", 0], ["3", 0], ["print", 0], ["n", 0], ["m", 0], ["print", 0], ["int", 0], ["input", 0], ["2520", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["n", 0], ["2", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["5", 0], ["7", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["n", 0], ["2520", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["8", 0], ["5", 0], ["9", 0], ["7", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2520", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["2", 0], ["3", 0], ["2", 0], ["5", 0], ["7", 0], ["2", 0], ["3", 0], ["print", 0], ["n", 0], ["d", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nA set of frogs have accidentally fallen to the bottom of a large pit. Their only means of escaping the pit is to jump out of it. Each frog $i$ is described by three parameters $(l_ i,w_ i,h_ i)$ where $l_ i$ is its leap capacity, $w_ i$ its weight, and $h_ i$ its height. The leap capacity specifies how high that frog can jump. If a frog’s leap capacity is strictly larger than the depth of the pit, the frog can directly escape the pit. However, these frogs are altruistic. Rather than selfishly saving themselves and leaving the frogs with too limited leap capacity behind, they collectively aim to save as many of them from the pit as possible. \n\nThe frogs realize that if a frog $A$ climbs up on the back of frog $B$ before it jumps, the first frog $A$ stands a better chance of escaping the pit: it can escape if $h_ B+l_ A$ is strictly larger than the depth of the pit.\n\nFurthermore, if frog $B$ carrying frog $A$ on its back climbs up on the back of frog $C$, the situation is even better for frog $A$: it can now escape the pit if $h_ C+h_ B+l_ A$ is strictly larger than the depth of the pit.\n\nThe frogs can build even higher piles of frogs this way, the only restriction is that no frog may carry other frogs of weight in total amounting to its own weight or heavier. Once a pile has been used to allow a frog to escape, the frogs in the pile jump back to the bottom of the pit and they can then form a new pile (possibly consisting of a different set of frogs). The question is simply how many frogs can escape the pit assuming they collaborate to maximize this number?\n\n-----Input-----\nThe first line of input contains two integers $n$ and $d$ ($1 \\le n \\leq 100000$, $1 \\le d \\le 10^8$), where $n$ is the number of frogs and $d$ is the depth of the pit in µm. Then follow $n$ lines each containing three integers $l, w, h$ ($1 \\le l, w, h \\le 10^8$), representing a frog with leap capacity $l$ µm, weight $w$ µg, and height $h$ µm. The sum of all frogs’ weights is at most $10^8$ µg.\n\n-----Output-----\nOutput the maximum number of frogs that can escape the pit.\n\n-----Examples-----\nSample Input:\n3 19\n15 5 3\n12 4 4\n20 10 5\nSample Output:\n3\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7201"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7201", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 2], ["set", 2], ["of", 2], ["frogs", 2], ["have", 2], ["accidentally", 2], ["fallen", 2], ["to", 2], ["the", 2], ["bottom", 2], ["of", 2], ["a", 2], ["large", 2], ["pit", 2], ["their", 2], ["only", 2], ["means", 2], ["of", 2], ["escaping", 2], ["the", 2], ["pit", 2], ["is", 2], ["to", 2], ["jump", 1], ["out", 1], ["of", 1], ["it", 1], ["each", 1], ["frog", 1], ["i", 1], ["is", 1], ["described", 1], ["by", 1], ["three", 1], ["parameters", 1], ["l", 1], ["i", 1], ["w", 1], ["i", 1], ["h", 1], ["i", 1], ["where", 1], ["l", 1], ["i", 1], ["is", 1], ["its", 1], ["leap", 1], ["capacity", 1], ["w", 1], ["i", 1], ["its", 1], ["weight", 1], ["and", 1], ["h", 1], ["i", 1], ["its", 2], ["height", 2], ["the", 2], ["leap", 2], ["capacity", 2], ["specifies", 2], ["how", 2], ["high", 2], ["that", 2], ["frog", 2], ["can", 2], ["jump", 2], ["if", 2], ["a", 2], ["frog’s", 2], ["leap", 2], ["capacity", 2], ["is", 2], ["strictly", 2], ["larger", 2], ["than", 2], ["the", 2], ["depth", 2], ["of", 2], ["the", 2], ["pit", 2], ["the", 2], ["frog", 2], ["can", 2], ["directly", 2], ["escape", 2], ["the", 2], ["pit", 2], ["however", 2], ["these", 2], ["frogs", 2], ["are", 2], ["altruistic", 2], ["rather", 2], ["than", 2], ["selfishly", 2], ["saving", 2], ["themselves", 2], ["and", 2], ["leaving", 2], ["the", 2], ["frogs", 2], ["with", 2], ["too", 2], ["limited", 2], ["leap", 2], ["capacity", 2], ["behind", 2], ["they", 2], ["collectively", 2], ["aim", 2], ["to", 2], ["save", 2], ["as", 2], ["many", 2], ["of", 2], ["them", 2], ["from", 2], ["the", 2], ["pit", 2], ["as", 2], ["possible", 2], ["the", 2], ["frogs", 2], ["realize", 2], ["that", 2], ["if", 2], ["a", 2], ["frog", 2], ["a", 2], ["climbs", 2], ["up", 2], ["on", 2], ["the", 2], ["back", 2], ["of", 2], ["frog", 2], ["b", 2], ["before", 2], ["it", 2], ["jumps", 2], ["the", 2], ["first", 2], ["frog", 2], ["a", 2], ["stands", 1], ["a", 1], ["better", 1], ["chance", 1], ["of", 1], ["escaping", 1], ["the", 1], ["pit", 1], ["it", 1], ["can", 1], ["escape", 1], ["if", 1], ["h", 2], ["b", 1], ["l", 1], ["a", 1], ["is", 2], ["strictly", 2], ["larger", 2], ["than", 2], ["the", 2], ["depth", 2], ["of", 2], ["the", 2], ["pit", 2], ["furthermore", 2], ["if", 2], ["frog", 2], ["b", 2], ["carrying", 2], ["frog", 2], ["a", 2], ["on", 2], ["its", 2], ["back", 2], ["climbs", 2], ["up", 2], ["on", 2], ["the", 2], ["back", 2], ["of", 2], ["frog", 2], ["c", 2], ["the", 2], ["situation", 2], ["is", 2], ["even", 1], ["better", 1], ["for", 1], ["frog", 1], ["a", 1], ["it", 1], ["can", 1], ["now", 1], ["escape", 1], ["the", 1], ["pit", 1], ["if", 1], ["h", 1], ["c", 1], ["h", 2], ["b", 1], ["l", 0], ["a", 0], ["is", 1], ["strictly", 1], ["larger", 1], ["than", 1], ["the", 1], ["depth", 1], ["of", 1], ["the", 1], ["pit", 1], ["the", 1], ["frogs", 1], ["can", 1], ["build", 1], ["even", 1], ["higher", 1], ["piles", 1], ["of", 1], ["frogs", 1], ["this", 1], ["way", 1], ["the", 1], ["only", 1], ["restriction", 1], ["is", 1], ["that", 1], ["no", 1], ["frog", 1], ["may", 1], ["carry", 1], ["other", 1], ["frogs", 1], ["of", 1], ["weight", 1], ["in", 1], ["total", 1], ["amounting", 1], ["to", 1], ["its", 1], ["own", 1], ["weight", 1], ["or", 1], ["heavier", 1], ["once", 1], ["a", 1], ["pile", 1], ["has", 1], ["been", 1], ["used", 1], ["to", 1], ["allow", 1], ["a", 1], ["frog", 1], ["to", 1], ["escape", 1], ["the", 1], ["frogs", 1], ["in", 1], ["the", 1], ["pile", 1], ["jump", 1], ["back", 1], ["to", 1], ["the", 1], ["bottom", 1], ["of", 1], ["the", 1], ["pit", 1], ["and", 1], ["they", 1], ["can", 1], ["then", 1], ["form", 1], ["a", 1], ["new", 1], ["pile", 1], ["possibly", 1], ["consisting", 1], ["of", 1], ["a", 1], ["different", 1], ["set", 1], ["of", 1], ["frogs", 1], ["the", 1], ["question", 1], ["is", 1], ["simply", 1], ["how", 1], ["many", 1], ["frogs", 0], ["can", 0], ["escape", 0], ["the", 0], ["pit", 0], ["assuming", 0], ["they", 0], ["collaborate", 0], ["to", 0], ["maximize", 0], ["this", 0], ["number", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 0], ["input", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["d", 0], ["1", 0], ["le", 0], ["n", 0], ["leq", 0], ["100000", 0], ["1", 1], ["le", 1], ["d", 1], ["le", 1], ["10", 1], ["8", 1], ["where", 2], ["n", 2], ["is", 2], ["the", 2], ["number", 2], ["of", 2], ["frogs", 2], ["and", 2], ["d", 2], ["is", 2], ["the", 2], ["depth", 2], ["of", 2], ["the", 2], ["pit", 2], ["in", 2], ["µm", 2], ["then", 1], ["follow", 1], ["n", 1], ["lines", 1], ["each", 1], ["containing", 1], ["three", 1], ["integers", 1], ["l", 1], ["w", 1], ["h", 1], ["1", 1], ["le", 1], ["l", 1], ["w", 1], ["h", 1], ["le", 1], ["10", 1], ["8", 1], ["representing", 2], ["a", 2], ["frog", 2], ["with", 2], ["leap", 2], ["capacity", 2], ["l", 2], ["µm", 2], ["weight", 2], ["w", 2], ["µg", 2], ["and", 2], ["height", 1], ["h", 1], ["µm", 1], ["the", 0], ["sum", 0], ["of", 0], ["all", 0], ["frogs’", 0], ["weights", 0], ["is", 0], ["at", 0], ["most", 0], ["10", 0], ["8", 0], ["µg", 0], ["output", 0], ["output", 0], ["the", 0], ["maximum", 0], ["number", 0], ["of", 0], ["frogs", 0], ["that", 0], ["can", 0], ["escape", 0], ["the", 0], ["pit", 0], ["examples", 0], ["sample", 0], ["input", 0], ["3", 0], ["19", 0], ["15", 0], ["5", 0], ["3", 0], ["12", 0], ["4", 0], ["4", 0], ["20", 0], ["10", 0], ["5", 0], ["sample", 0], ["output", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.839622641509434, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6344339622641509, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9036697247706422, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8772935779816514, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.839622641509434, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6344339622641509, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9036697247706422, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8772935779816514, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nAre you fond of collecting some kind of stuff? Mike is crazy about collecting stamps. He is an active member of Stamp Collecting Сommunity(SCC). \n\nSCC consists of N members which are fond of philately. A few days ago Mike argued with the others from SCC. Mike told them that all stamps of the members could be divided in such a way that i'th member would get i postage stamps. Now Mike wants to know if he was right. The next SCC meeting is tomorrow. Mike still has no answer.\n\nSo, help Mike! There are N members in the SCC, i'th member has Ci stamps in his collection. Your task is to determine if it is possible to redistribute C1 + C2 + ... + Cn stamps among the members of SCC thus that i'th member would get i stamps.\n\n-----Input-----\nThe first line contains one integer N, denoting the number of members of SCC.\nThe second line contains N integers Ci, denoting the numbers of the stamps in the collection of i'th member.\n\n-----Output-----\nThe first line should contain YES, if we can obtain the required division, otherwise NO.\n\n-----Constraints-----\n1 ≤ N ≤ 100 000;\n1 ≤  Ci ≤ 109.\n\n-----Examples-----\nInput:\n5\n7 4 1 1 2\n\nOutput:\nYES\n\nInput:\n5\n1 1 1 1 1\n\nOutput:\nNO\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["# cook your dish here\nn=int(input())\ns=list(map(int,input().split()))\nsu=0\nfor i in s:\n\tsu+=i\n\nan=(n)*(n+1)//2\nif(an==su):\n\tprint(\"YES\")\n\nelse:\n\tprint(\"NO\")\n", "n = int(input())\n# s = n*(n+1)/2\n\nstamps = list(map(int, input().split()))\n# print(s)\n# print(sum(stamps))\nif (n*(n+1))/2 == sum(stamps):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "# cook your dish here\nn = int(input())\nnums = list(map(int, input().split()))\nprint(\"YES\" if (n*(n+1))/2 == sum(nums) else \"NO\")\n", "# cook your dish here\ntry:        \n\tn = int(input())\n\tstampArr = list(map(int, input().split()))\n\tnsum = sum(range(1, n+1))\n\tssum = sum(stampArr)\n\tif nsum == ssum:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\nexcept:\n\tpass\n", "N=int(input())\nL=list(map(int,input().split()))[:N]\nif sum(L)==N*(N+1)/2:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "N=int(input())\nL=list(map(int,input().split()))[:N]\nif sum(L)==N*(N+1)/2:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "try:\n\tN = int(input())\n\tlst = sorted(list(map(int, input().split())))\n\tsum=0\n\tfor i in range(N):\n\t\tsum=sum+lst[i]\n\tsum2=0\n\tfor i in range(1,N+1):\n\t\tsum2=sum2+i\n\tif sum2==sum:print(\"YES\")\n\telse:print(\"NO\")\nexcept:\n\tpass\n# cook your dish here\n", "# cook your dish here\nn=int(input())\na=list(map(int, input().split()))\n\nx=0\nfor i in range(n+1):\n\tx=x+i\n\nadd=sum(a)\nif(x==add):\n\tprint('YES')\nelse:\n\tprint('NO')\n\t\n", "# cook your dish here\nn=int(input())\na=list(map(int, input().split()))\n\nx=0\nfor i in range(n+1):\n\tx=x+i\n\nadd=sum(a)\nif(x==add):\n\tprint('YES')\nelse:\n\tprint('NO')\n\t\n", "n=int(input())\nl=list(map(int,input().split()))\nsums=0\nfor i in range(n+1):\n\tsums+=i\na=sum(l)\nif a==sums:\n\tprint('YES')\nelse:\n\tprint('NO')\n\t\n\t\n\t\n", "n = int(input())\nA = list(map(int,input().split()))\nadd = sum(A)\nreq = (n*(n+1))//2;\nif(add==req) : print(\"YES\")\nelse : print(\"NO\")\n", "def main():\n\tn=int(input())\n\tl1=list(map(int,input().split()))\n\tN=(n*(n+1))/2\n\tsum1=0\n\tfor i in range(n):\n\t\tsum1+=l1[i]\n\tif(sum1==N):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\t\t\n\t\t\nmain()\n", "n = int(input())\n\nstamps = list(map(int,input().split()))\n\nif(sum(stamps) == (n*(n+1))/2):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "# cook your dish here\nn=int(input())\nstamps=list(map(int,input().split()))\nif n*(n+1)/2==sum(stamps):\n\tprint(\"YES\")\nelse :\n\tprint(\"NO\")\n", "# cook your dish here\n\nn=int(input())\nstamps=list(map(int,input().split()))\nif n*(n+1)/2==sum(stamps):\n\tprint(\"YES\")\nelse :\n\tprint(\"NO\")\n\t\n\t\n", "n = int(input())\ns =0\nl = list(map(int,input().split()))\nfor i in range(1,n+1):\n\ts = s+i\np = sum(l)\nif(sum(l) == s):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n\t\n", "# cook your dish here\nl = []\nn = int(input())\nx = map(int, input().split())\nx1 = sum(x)\nfor i in range(1, n+1):\n\tl.append(i)\n\nl1 = sum(l)\nif x1 == l1:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "# cook your dish here\nl=list()\nn=int(input())\nx=[int(item) for item in input().split()]\nsum1=sum(x)\nj=1\nwhile n:\n\tl.append(j)\n\tj=j+1\n\tn=n-1\nif sum1==sum(l)    :\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n\t\n", "n = int(input())\ns = 0\nl = list(map(int,input().split()))\nfor i in l:\n\ts+= i\nif ((n*(n+1))/2)==s:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "# cook your dish here\nimport math\nn=int(input())\nl=list(map(int,input().split()))\ns=sum(l)\nz=math.trunc(math.sqrt(1+8*s))\nz=(-1+z)//2\nif z==n:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n = int(input())\narr = list(map(int, input().split()))\ns1 = sum(arr)\ns2 = n * (n+1) / 2\nif s1 == s2:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "n = int(input())\n\nL = [int(x) for x in input().split()]\n\ns = sum(L)\n\nif s == n*(n+1)//2:\n\tprint('YES')\n\nelse:\n\tprint('NO')\n", "# cook your dish heretry\ntry:\n\tn=int(input())\n\tl=[int(x) for x in input().split()]\n\tif((n*(n+1)//2)==sum(l)):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\nexcept:\n\tpass\n", "n=int(input())\nl=list(map(int,input().strip().split()))\ns=sum(l)\nk=0\nfor i in range(0,len(l)+1):\n\tk=k+i\n\nif s==k:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "# cook your dish here\nt=int(input())\na=list(map(int,input().split()))[:t]\nb=(t*(t+1))//2\nc=sum(a)\nif(b==c):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n"], "id": "id7232"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7232", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["are", 2], ["you", 2], ["fond", 2], ["of", 2], ["collecting", 2], ["some", 2], ["kind", 2], ["of", 2], ["stuff", 2], ["mike", 2], ["is", 2], ["crazy", 2], ["about", 2], ["collecting", 2], ["stamps", 2], ["he", 2], ["is", 2], ["an", 2], ["active", 2], ["member", 2], ["of", 2], ["stamp", 2], ["collecting", 2], ["сommunity", 2], ["scc", 2], ["scc", 2], ["consists", 2], ["of", 2], ["n", 2], ["members", 2], ["which", 2], ["are", 2], ["fond", 2], ["of", 2], ["philately", 2], ["a", 2], ["few", 2], ["days", 2], ["ago", 2], ["mike", 2], ["argued", 2], ["with", 2], ["the", 2], ["others", 2], ["from", 2], ["scc", 2], ["mike", 2], ["told", 2], ["them", 2], ["that", 2], ["all", 2], ["stamps", 2], ["of", 2], ["the", 2], ["members", 2], ["could", 2], ["be", 2], ["divided", 2], ["in", 2], ["such", 2], ["a", 2], ["way", 2], ["that", 2], ["i", 2], ["th", 2], ["member", 2], ["would", 2], ["get", 2], ["i", 2], ["postage", 2], ["stamps", 2], ["now", 2], ["mike", 2], ["wants", 2], ["to", 2], ["know", 2], ["if", 2], ["he", 2], ["was", 2], ["right", 2], ["the", 2], ["next", 2], ["scc", 2], ["meeting", 2], ["is", 2], ["tomorrow", 2], ["mike", 2], ["still", 2], ["has", 2], ["no", 2], ["answer", 2], ["so", 2], ["help", 2], ["mike", 2], ["there", 2], ["are", 2], ["n", 2], ["members", 2], ["in", 2], ["the", 2], ["scc", 2], ["i", 2], ["th", 2], ["member", 2], ["has", 2], ["ci", 2], ["stamps", 2], ["in", 2], ["his", 2], ["collection", 2], ["your", 2], ["task", 2], ["is", 2], ["to", 2], ["determine", 2], ["if", 2], ["it", 2], ["is", 2], ["possible", 2], ["to", 2], ["redistribute", 2], ["c1", 2], ["c2", 2], ["cn", 2], ["stamps", 2], ["among", 2], ["the", 2], ["members", 1], ["of", 1], ["scc", 1], ["thus", 1], ["that", 1], ["i", 1], ["th", 1], ["member", 1], ["would", 1], ["get", 1], ["i", 1], ["stamps", 1], ["input", 1], ["the", 2], ["first", 2], ["line", 2], ["contains", 2], ["one", 2], ["integer", 2], ["n", 2], ["denoting", 2], ["the", 2], ["number", 2], ["of", 2], ["members", 2], ["of", 2], ["scc", 2], ["the", 2], ["second", 2], ["line", 2], ["contains", 2], ["n", 2], ["integers", 2], ["ci", 2], ["denoting", 2], ["the", 1], ["numbers", 1], ["of", 1], ["the", 1], ["stamps", 1], ["in", 1], ["the", 1], ["collection", 1], ["of", 1], ["i", 1], ["th", 1], ["member", 1], ["output", 1], ["the", 2], ["first", 2], ["line", 2], ["should", 1], ["contain", 1], ["yes", 1], ["if", 1], ["we", 1], ["can", 1], ["obtain", 1], ["the", 1], ["required", 1], ["division", 1], ["otherwise", 1], ["no", 1], ["constraints", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["100", 0], ["000", 0], ["1", 0], ["≤", 0], ["ci", 0], ["≤", 0], ["109", 0], ["examples", 0], ["input", 0], ["5", 0], ["7", 0], ["4", 0], ["1", 0], ["1", 0], ["2", 0], ["output", 0], ["yes", 0], ["input", 0], ["5", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["output", 0], ["no", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8636363636363636, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5181818181818182, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8706896551724138, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5969827586206896, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8636363636363636, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5181818181818182, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8706896551724138, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5969827586206896, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["su", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["su", 0], ["i", 0], ["an", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["an", 0], ["su", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["stamps", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["s", 0], ["print", 0], ["sum", 0], ["stamps", 0], ["if", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["sum", 0], ["stamps", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["int", 0], ["input", 0], ["nums", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["yes", 0], ["if", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["sum", 0], ["nums", 0], ["else", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["try", 0], ["n", 0], ["int", 0], ["input", 0], ["stamparr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["nsum", 0], ["sum", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["ssum", 0], ["sum", 0], ["stamparr", 0], ["if", 0], ["nsum", 0], ["ssum", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["except", 0], ["pass", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["if", 0], ["sum", 0], ["l", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["if", 0], ["sum", 0], ["l", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["try", 0], ["n", 0], ["int", 0], ["input", 0], ["lst", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sum", 0], ["sum", 0], ["lst", 0], ["i", 0], ["sum2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["sum2", 0], ["sum2", 0], ["i", 0], ["if", 0], ["sum2", 0], ["sum", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["except", 0], ["pass", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["x", 0], ["x", 0], ["i", 0], ["add", 0], ["sum", 0], ["a", 0], ["if", 0], ["x", 0], ["add", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["x", 0], ["x", 0], ["i", 0], ["add", 0], ["sum", 0], ["a", 0], ["if", 0], ["x", 0], ["add", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sums", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["sums", 0], ["i", 0], ["a", 0], ["sum", 0], ["l", 0], ["if", 0], ["a", 0], ["sums", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["add", 0], ["sum", 0], ["a", 0], ["req", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["add", 0], ["req", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["l1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["sum1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sum1", 0], ["l1", 0], ["i", 0], ["if", 0], ["sum1", 0], ["n", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["stamps", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["stamps", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["int", 0], ["input", 0], ["stamps", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["sum", 0], ["stamps", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["int", 0], ["input", 0], ["stamps", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["sum", 0], ["stamps", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["0", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["s", 0], ["s", 0], ["i", 0], ["p", 0], ["sum", 0], ["l", 0], ["if", 0], ["sum", 0], ["l", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["l", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x1", 0], ["sum", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["l", 0], ["append", 0], ["i", 0], ["l1", 0], ["sum", 0], ["l", 0], ["if", 0], ["x1", 0], ["l1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["l", 0], ["list", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["int", 0], ["item", 0], ["for", 0], ["item", 0], ["in", 0], ["input", 0], ["split", 0], ["sum1", 0], ["sum", 0], ["x", 0], ["j", 0], ["1", 0], ["while", 0], ["n", 0], ["l", 0], ["append", 0], ["j", 0], ["j", 0], ["j", 0], ["1", 0], ["n", 0], ["n", 0], ["1", 0], ["if", 0], ["sum1", 0], ["sum", 0], ["l", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["0", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["s", 0], ["i", 0], ["if", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["sum", 0], ["l", 0], ["z", 0], ["math", 0], ["trunc", 0], ["math", 0], ["sqrt", 0], ["1", 0], ["8", 0], ["s", 0], ["z", 0], ["1", 0], ["z", 0], ["2", 0], ["if", 0], ["z", 0], ["n", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s1", 0], ["sum", 0], ["arr", 0], ["s2", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["s1", 0], ["s2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["sum", 0], ["l", 0], ["if", 0], ["s", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["heretry", 0], ["try", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["sum", 0], ["l", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["except", 0], ["pass", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["s", 0], ["sum", 0], ["l", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["l", 0], ["1", 0], ["k", 0], ["k", 0], ["i", 0], ["if", 0], ["s", 0], ["k", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["t", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["b", 0], ["t", 0], ["t", 0], ["1", 0], ["2", 0], ["c", 0], ["sum", 0], ["a", 0], ["if", 0], ["b", 0], ["c", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nIn a rainforest there are $n$ treehouses high in the forest canopy on different trees (numbered from $1$ to $n$). The $i$-th tree’s location is at $(x_ i, y_ i)$. The first $e$ of them in the list are close enough to neighboring open land around the rainforest so that transportation between all of them is easy by foot. Some treehouses may already be connected by direct straight cables through the air that can allow transport between them.\n\nResidents want easy transportation between all the treehouses and the open land, by some combination of walking (between those near the open land), and using one or more cables between treehouses. This may require the addition of more cables. Since the cables are expensive, they would like to add the smallest possible length of cable.\n\nThe height of a cable up two trees can be set so cables can criss-cross other cables, and not allow any snags or crashes. It is not safe to try to switch between two criss-crossed cables in mid-air!\n\n-----Input-----\nThe input will start with the three integers $n$ ($1 \\le n \\le 1000$), $e$ ($1 \\le e \\le n$), and $p$ ($0 \\le p \\le 1000$), where $p$ is the number of cables in place already.\n\nNext come $n$ lines, each with two real numbers $x$ and $y$ ($|x|, |y| \\le 10000$) giving the location of a treehouse. The $i$-th coordinate pair is for the treehouse with ID $i$. All coordinate pairs are unique. Real numbers are stated as integers or include one digit after a decimal point.\n\nNext come $p$ lines, each with two integers $a$, $b$, where $1 \\le a < b \\le n$, giving the two treehouse ids of an existing cable between their trees. No ID pair will be repeated.\n\n-----Output-----\nThe output is the minimum total length of new cable that achieves the connection goal, expressed with absolute or relative error less than $0.001$.\n\n-----Examples-----\nSample Input 1:\n3 1 0\n0.0 0.0\n2.0 0.0\n1.0 2.0\nSample Output 1:\n4.236067\n\nSample Input 2:\n3 1 1\n0.0 0.0\n0.5 2.0\n2.5 2.0\n1 2\nSample Output 2:\n2.000000\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7929"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7929", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["in", 1], ["a", 1], ["rainforest", 1], ["there", 1], ["are", 1], ["n", 1], ["treehouses", 1], ["high", 1], ["in", 1], ["the", 1], ["forest", 1], ["canopy", 1], ["on", 1], ["different", 1], ["trees", 1], ["numbered", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["the", 1], ["i", 1], ["th", 1], ["tree’s", 1], ["location", 1], ["is", 1], ["at", 1], ["x", 1], ["i", 1], ["y", 1], ["i", 1], ["the", 1], ["first", 1], ["e", 1], ["of", 1], ["them", 1], ["in", 1], ["the", 1], ["list", 1], ["are", 1], ["close", 1], ["enough", 1], ["to", 1], ["neighboring", 1], ["open", 1], ["land", 1], ["around", 1], ["the", 1], ["rainforest", 1], ["so", 1], ["that", 1], ["transportation", 1], ["between", 1], ["all", 1], ["of", 1], ["them", 1], ["is", 1], ["easy", 1], ["by", 1], ["foot", 1], ["some", 1], ["treehouses", 1], ["may", 1], ["already", 1], ["be", 1], ["connected", 1], ["by", 1], ["direct", 1], ["straight", 1], ["cables", 1], ["through", 1], ["the", 1], ["air", 1], ["that", 1], ["can", 1], ["allow", 1], ["transport", 1], ["between", 1], ["them", 1], ["residents", 1], ["want", 1], ["easy", 1], ["transportation", 1], ["between", 1], ["all", 1], ["the", 1], ["treehouses", 1], ["and", 1], ["the", 1], ["open", 1], ["land", 1], ["by", 1], ["some", 1], ["combination", 1], ["of", 1], ["walking", 1], ["between", 1], ["those", 1], ["near", 1], ["the", 1], ["open", 1], ["land", 1], ["and", 1], ["using", 1], ["one", 1], ["or", 1], ["more", 1], ["cables", 1], ["between", 1], ["treehouses", 1], ["this", 1], ["may", 1], ["require", 1], ["the", 1], ["addition", 1], ["of", 1], ["more", 1], ["cables", 1], ["since", 1], ["the", 1], ["cables", 1], ["are", 1], ["expensive", 1], ["they", 1], ["would", 1], ["like", 1], ["to", 1], ["add", 1], ["the", 1], ["smallest", 1], ["possible", 1], ["length", 1], ["of", 1], ["cable", 1], ["the", 1], ["height", 1], ["of", 1], ["a", 1], ["cable", 1], ["up", 1], ["two", 1], ["trees", 1], ["can", 1], ["be", 1], ["set", 1], ["so", 1], ["cables", 1], ["can", 1], ["criss", 1], ["cross", 1], ["other", 1], ["cables", 1], ["and", 1], ["not", 1], ["allow", 1], ["any", 1], ["snags", 1], ["or", 1], ["crashes", 1], ["it", 1], ["is", 1], ["not", 1], ["safe", 1], ["to", 0], ["try", 0], ["to", 0], ["switch", 0], ["between", 0], ["two", 0], ["criss", 0], ["crossed", 0], ["cables", 0], ["in", 0], ["mid", 0], ["air", 0], ["input", 0], ["the", 1], ["input", 0], ["will", 0], ["start", 0], ["with", 0], ["the", 0], ["three", 0], ["integers", 0], ["n", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["1000", 0], ["e", 0], ["1", 0], ["le", 0], ["e", 0], ["le", 0], ["n", 0], ["and", 0], ["p", 0], ["0", 0], ["le", 0], ["p", 0], ["le", 0], ["1000", 0], ["where", 1], ["p", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["cables", 1], ["in", 1], ["place", 1], ["already", 1], ["next", 1], ["come", 1], ["n", 1], ["lines", 0], ["each", 0], ["with", 0], ["two", 0], ["real", 0], ["numbers", 0], ["x", 0], ["and", 0], ["y", 0], ["x", 0], ["y", 0], ["le", 0], ["10000", 0], ["giving", 1], ["the", 1], ["location", 1], ["of", 1], ["a", 1], ["treehouse", 1], ["the", 1], ["i", 1], ["th", 1], ["coordinate", 1], ["pair", 1], ["is", 1], ["for", 1], ["the", 1], ["treehouse", 1], ["with", 1], ["id", 1], ["i", 1], ["all", 1], ["coordinate", 1], ["pairs", 1], ["are", 1], ["unique", 1], ["real", 1], ["numbers", 1], ["are", 1], ["stated", 1], ["as", 1], ["integers", 1], ["or", 1], ["include", 1], ["one", 1], ["digit", 1], ["after", 1], ["a", 1], ["decimal", 1], ["point", 1], ["next", 1], ["come", 1], ["p", 1], ["lines", 1], ["each", 1], ["with", 1], ["two", 1], ["integers", 1], ["a", 1], ["b", 1], ["where", 1], ["1", 1], ["le", 1], ["a", 1], ["b", 1], ["le", 1], ["n", 1], ["giving", 1], ["the", 1], ["two", 1], ["treehouse", 1], ["ids", 1], ["of", 1], ["an", 0], ["existing", 0], ["cable", 0], ["between", 0], ["their", 0], ["trees", 0], ["no", 0], ["id", 0], ["pair", 0], ["will", 0], ["be", 0], ["repeated", 0], ["output", 0], ["the", 1], ["output", 1], ["is", 1], ["the", 1], ["minimum", 1], ["total", 1], ["length", 1], ["of", 1], ["new", 1], ["cable", 1], ["that", 1], ["achieves", 1], ["the", 1], ["connection", 0], ["goal", 0], ["expressed", 0], ["with", 0], ["absolute", 0], ["or", 0], ["relative", 0], ["error", 0], ["less", 0], ["than", 0], ["0", 0], ["001", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 9], ["3", 101], ["1", 12], ["0", 51], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["2", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["2", 0], ["0", 0], ["sample", 0], ["output", 0], ["1", 0], ["4", 0], ["236067", 0], ["sample", 0], ["input", 0], ["2", 0], ["3", 0], ["1", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["5", 0], ["2", 0], ["0", 0], ["2", 0], ["5", 0], ["2", 0], ["0", 0], ["1", 0], ["2", 0], ["sample", 0], ["output", 0], ["2", 0], ["2", 0], ["000000", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6773333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6672638754071486, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8423772609819121, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8056273327591147, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6693333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.666962962962963, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8423772609819121, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8056273327591147, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nHigh school student Vasya got a string of length n as a birthday present. This string consists of letters 'a' and 'b' only. Vasya denotes beauty of the string as the maximum length of a substring (consecutive subsequence) consisting of equal letters.\n\nVasya can change no more than k characters of the original string. What is the maximum beauty of the string he can achieve?\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, 0 ≤ k ≤ n) — the length of the string and the maximum number of characters to change.\n\nThe second line contains the string, consisting of letters 'a' and 'b' only.\n\n\n-----Output-----\n\nPrint the only integer — the maximum beauty of the string Vasya can achieve by changing no more than k characters.\n\n\n-----Examples-----\nInput\n4 2\nabba\n\nOutput\n4\n\nInput\n8 1\naabaabaa\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample, Vasya can obtain both strings \"aaaa\" and \"bbbb\".\n\nIn the second sample, the optimal answer is obtained with the string \"aaaaabaa\" or with the string \"aabaaaaa\".\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, k = map(int,input().split())\ns = input()\nmaxi = 0\na = 0\nb = 0\nst = 0\nfor i in range(0, n):\n\tif s[i] == 'a': a += 1\n\telse: b+=1\n\tif min(a, b) > k:\n\t\tif s[st] == 'a': a-=1\n\t\telse: b-=1\n\t\tst += 1\n\telse: maxi += 1\nprint(maxi)\n", "n, k = list(map(int,input().split()))\ns = input()\n\nlongest = 0\n\nleft, right = 0, 0\ncurrb = 1 if s[0] == 'b' else 0\nwhile True:\n\twhile right < n and currb <= k:\n\t\tright += 1\n\t\tif right < n and s[right] == 'b':\n\t\t\tcurrb += 1\n\tlongest = max(longest, right - left)\n\tif s[left] == 'b':\n\t\tcurrb -= 1\n\tleft += 1\n\tif left == n or right == n:\n\t\tbreak\n\nleft, right = 0, 0\ncurrb = 1 if s[0] == 'a' else 0\nwhile True:\n\twhile right < n and currb <= k:\n\t\tright += 1\n\t\tif right < n and s[right] == 'a':\n\t\t\tcurrb += 1\n\tlongest = max(longest, right - left)\n\tif s[left] == 'a':\n\t\tcurrb -= 1\n\tleft += 1\n\tif left == n or right == n:\n\t\tbreak\n\nprint(longest)\n", "__author__ = 'Utena'\nn,k=map(int,input().split())\ns=['0']+list(input())\nbeauty=0\ni=0\nj=0\na=0\nb=0\nwhile i<n:\n\ti+=1\n\tif s[i]=='a':\n\t\ta+=1\n\tif s[i]=='b':\n\t\tb+=1\n\twhile min(a,b)>k:\n\t\tj+=1\n\t\tif s[j]=='a':\n\t\t\ta-=1\n\t\tif s[j]=='b':\n\t\t\tb-=1\n\tif i-j>beauty:\n\t\tbeauty=i-j\nprint(beauty)\n", "n, k = map(int, input().split())\nS = input()\n\nl = r = 0\na = b = 0\nans = 0\n\nwhile r < n :\n\tif a <= k or a == 0 or b <= k or b == 0:\n\t\tans = max(ans, r - l)\n\n\t\tif S[r] == 'a' : a += 1\n\t\telse : b += 1\n\t\tr += 1\n\telse :\n\t\tif S[l] == 'a' : a -= 1\n\t\telse : b -= 1\n\t\tl += 1\n\n\tif a <= k or a == 0 or b <= k or b == 0:\n\t\tans = max(ans, r - l)\n\nprint(ans)\n", "def solve(n, k, l):\n\tki = i= s = 0; po = 1\n\tfor j in range(n):\n\t\ts+=(l[j]==0)\n\t\twhile s>k: s-=(l[i]==0); i+=1\n\t\tif j-i>ki-po: po,ki=i,j\n\treturn ki -po + 1\n\t\n\t\n\t\n\t\nn, k = map(int,input().split())\ns = input()\na1, a2 = [], []\nfor i in range(n):\n\tif s[i] == 'a':\n\t\ta1.append(1)\n\t\ta2.append(0)\n\telse:\n\t\ta1.append(0)\n\t\ta2.append(1)\nprint(max(solve(n, k, a1), solve(n, k, a2)))\n", "n,k=map(int,input().split())\ns=input()\nk1=k\nk2=k\na=b=ans=0\nfor i in range(n):\n\tif s[i]=='b': k1-=1  \n\telse: k2-=1;\n\twhile k1<0:\n\t\tif s[a]=='b': k1+=1\n\t\ta+=1\n\twhile k2<0:\n\t\tif s[b]=='a': k2+=1\n\t\tb+=1\n\tans=max(ans,i-a+1,i-b+1)\nprint(ans)\n", "def solve(n, k, l):\n\tki = i = s = 0\n\tpo = 1\n\tfor j in range(n):\n\t\ts += (l[j] == 0)\n\t\twhile s > k: s -= (l[i] == 0); i += 1\n\t\tif j - i > ki - po: po, ki = i, j\n\treturn ki - po + 1\n\t\n\t\n\t\n\t\nn, k = map(int,input().split())\ns = input()\nlist1, list2 = [], []\nfor i in range(n):\n\tif s[i] == 'a':\n\t\tlist1.append(1)\n\t\tlist2.append(0)\n\telse:\n\t\tlist1.append(0)\n\t\tlist2.append(1)\nprint(max(solve(n, k, list1), solve(n, k, list2)))\n", "n,t=map(int,input().split())\ns=input()\nl=0\nk=0\nma=0\nfor r in range(n):\n\tif s[r]=='a':\n\t\tif r-l+1>ma: ma=r-l+1\n\telse:\n\t\twhile k>=t:\n\t\t\tif s[l]=='b':\n\t\t\t\tk-=1\n\t\t\tl+=1\n\t\tif r-l+1>ma: ma=r-l+1\n\t\tk+=1\n\t\tk%=r-l+2\nl=0\nk=0\nfor r in range(n):\n\tif s[r]=='b':\n\t\tif r-l+1>ma: ma=r-l+1\n\telse:\n\t\twhile k>=t:\n\t\t\tif s[l]=='a':\n\t\t\t\tk-=1\n\t\t\tl+=1\n\t\tif r-l+1>ma: ma=r-l+1\n\t\tk+=1\n\t\tk%=r-l+2\nprint(ma)\n", "n, k = map(int, input().split())\ns = input()\nres = 1\n\n# to a\ni = -1\nj = 0\ncur = 0\n\nwhile i < j <= n:\n\tif j == n and i == n - 1:\n\t\tbreak\n\n\twhile cur <= k and j < n:\n\t\tif cur == k and s[j] == 'b':\n\t\t\tbreak\n\t\telse:\n\t\t\tcur += (s[j] == 'b')\n\t\t\tj += 1\n\n\tres = max(res, j - i - 1)\n\n\tif k > 0:\n\t\tif cur < k and i < j - 1:\n\t\t\ti += 1\n\t\t\tcur -= (s[i] == 'b')\n\n\t\twhile cur == k and i < j - 1:\n\t\t\ti += 1\n\t\t\tcur -= (s[i] == 'b')\n\telse:\n\t\ti = j\n\t\tj = i + 1\nres = max(res, j - i - 1)\n\n# to b\ni = -1\nj = 0\ncur = 0\n\nwhile i < j <= n:\n\tif j == n and i == n - 1:\n\t\tbreak\n\n\twhile cur <= k and j < n:\n\t\tif cur == k and s[j] == 'a':\n\t\t\tbreak\n\t\telse:\n\t\t\tcur += (s[j] == 'a')\n\t\t\tj += 1\n\n\tres = max(res, j - i - 1)\n\n\tif k > 0:\n\t\tif cur < k and i < j - 1:\n\t\t\ti += 1\n\t\t\tcur -= (s[i] == 'a')\n\t\t\t\n\t\twhile cur == k and i < j - 1:\n\t\t\ti += 1\n\t\t\tcur -= (s[i] == 'a')\n\telse:\n\t\ti = j\n\t\tj = i + 1\nres = max(res, j - i - 1)\n\n\nprint(res)\n", "n, k = list(map(int,input().split()))\ns = input()\nl = 0\nr = 0\nans = 0\nnum = 0\ni = 0\nwhile i < n:\n\tr += 1\n\tif s[i] == \"b\":\n\t\tnum += 1\n\t\tif num > k:\n\t\t\tans = max(ans,i-l)\n\t\t\twhile l < n and s[l] != \"b\":\n\t\t\t\tl += 1\n\t\t\tl += 1\n\t\t\tnum -= 1\n\ti += 1\nans = max(ans,i-l)\n\nl = 0\nr = 0\nnum = 0\ni = 0\nwhile i < n:\n\tr += 1\n\tif s[i] == \"a\":\n\t\tnum += 1\n\t\tif num > k:\n\t\t\tans = max(ans,i-l)\n\t\t\twhile l < n and s[l] != \"a\":\n\t\t\t\tl += 1\n\t\t\tl += 1\n\t\t\tnum -= 1\n\ti += 1\nans = max(ans,i-l)\n\nprint(ans)\n", "read = lambda: list(map(int, input().split()))\nn, k = read()\ns = input()\ni = j = 0\ncur = k\nwhile cur and j < n:\n\tif s[j] == 'a':\n\t\tcur -= 1\n\tj += 1\nwhile j < n and s[j] == 'b':\n\tj += 1\nans = j\nwhile j < n:\n\twhile i < n and s[i] == 'b':\n\t\ti += 1\n\ti += 1\n\tj += 1\n\twhile j < n and s[j] == 'b':\n\t\tj += 1 \n\tans = max(ans, j - i)\ni = j = 0\ncur = k\nwhile cur and j < n:\n\tif s[j] == 'b':\n\t\tcur -= 1\n\tj += 1\nwhile j < n and s[j] == 'a':\n\tj += 1\nans = max(ans, j)\nwhile j < n:\n\twhile i < n and s[i] == 'a':\n\t\ti += 1\n\ti += 1\n\tj += 1\n\twhile j < n and s[j] == 'a':\n\t\tj += 1\n\tans = max(ans, j - i)\nprint(ans)\n", "def check(lengths, k, full_count_of_opposite):\n\tmaxcount = 0\n\tcount = 0\n\tstart = 0\n\tcur_k = k\n\tfor i, el in enumerate(lengths):\n\t\tif i % 2 == 0:\n\t\t\t# print(\"count adding\", el)\n\t\t\tcount += el\n\t\telse:\n\t\t\t# print(\"count removing\", el)\n\t\t\tif cur_k - el >= 0:\n\t\t\t\tcur_k -= el\n\t\t\telse:\n\t\t\t\tmaxcount = max(count, maxcount)\n\t\t\t\t# print(\"so we found\", start, maxcount)\n\t\t\t\tcur_k -= el\n\t\t\t\twhile start < i and cur_k < 0:\n\t\t\t\t\tcount -= lengths[start]\n\t\t\t\t\tcur_k += lengths[start + 1]\n\t\t\t\t\tstart += 2\n\t\t\t\tif start > i:\n\t\t\t\t\t# print(\"start > i\")\n\t\t\t\t\tcur_k = k\n\t\t\t\t\tcount = 0\n\tmaxcount = max(count, maxcount)\n\t# print(\"maxcount\", maxcount)\n\tresult = maxcount + min(k, full_count_of_opposite)\n\t# print(result)\n\treturn result\n\n\ndef maxsubsl(s, k):\n\tlengths = []\n\tprev = s[0]\n\tcnt = 0\n\tfull_counts = [0, 0]\n\tfor el in s:\n\t\tif el != prev:\n\t\t\tlengths.append(cnt)\n\t\t\tcnt = 0\n\t\tprev = el\n\t\tcnt += 1\n\t\tfull_counts[len(lengths) % 2] += 1\n\tlengths.append(cnt)\n\t# print(\"lengths\", lengths)\n\t# print(\"full_counts\", full_counts)\n\n\tmaxl = check(lengths, k, full_counts[1])\n\tif len(lengths) > 1:\n\t\tmaxl = max(maxl, check(lengths[1:], k, full_counts[0]))\n\treturn maxl\n\n_, k = list(map(int, input().split()))\ns = input()\nprint(maxsubsl(s, k))\n", "s = input().split()\nn, k = int(s[0]), int(s[1])\ns = input()\n\nans = 0\n\nk1 = k\ni1 = -1\ni2 = 0\nwhile i1 < n - 1:\n\ti1 += 1\n\tif s[i1] == 'b':\n\t\tif k1 > 0:\n\t\t\tk1 -= 1\n\t\telse:\n\t\t\twhile s[i2] != 'b':\n\t\t\t\ti2 += 1\n\t\t\ti2 += 1\n\t\t\t\n\tif ans < i1 - i2:\n\t\tans = i1 - i2\n\t\t\nk1 = k\ni1 = -1\ni2 = 0\nwhile i1 < n - 1:\n\ti1 += 1\n\tif s[i1] == 'a':\n\t\tif k1 > 0:\n\t\t\tk1 -= 1\n\t\telse:\n\t\t\twhile s[i2] != 'a':\n\t\t\t\ti2 += 1\n\t\t\ti2 += 1\n\tif ans < i1 - i2:\n\t\tans = i1 - i2\n\t\t\nprint(ans + 1)\n", "n, k = map(int, input().split())\ns = input()\ne, t = 0, 0\nres = 0\nfor i in range(n):\n\tif s[i] == \"b\":\n\t\tt += 1\n\twhile t > k and e < i:\n\t\tif s[e] == \"b\":\n\t\t\tt -= 1\n\t\te += 1\n\tres = max(res, i - e + 1)\ne, t = 0, 0\n\t\nfor i in range(n):\n\tif s[i] == \"a\":\n\t\tt += 1\n\twhile t > k and e < i:\n\t\tif s[e] == \"a\":\n\t\t\tt -= 1\n\t\te += 1\n\tres = max(res, i - e + 1)\n\t\n\nprint(res)\n", "\nn,k=list(map(int,input().split()))\n\n\ns=input()\n\na=0\nb=0\np=0\nind=0\n\nfor i in range(n):\n\n\tif s[i] == 'a':\n\t\ta += 1\n\telse:\n\t\tb += 1\n\n\tif min(a, b) > k:\n\t\tif s[p] == 'a':\n\t\t\ta -= 1\n\n\t\telse:\n\t\t\tb-=1\n\n\t\tp += 1\n\n\n\telse:\n\t\tind+=1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(ind)\n\n\n\t\t\t\t\t  \n\t\t\t\n\n", "from sys import stdin\n\nN,K = map(int,stdin.readline().split())\n\ncharArr = list(stdin.readline().strip())\n\n#print(charArr)\n\nbad=0\nfront=0\nfront2=0\nback=len(charArr)\nanswer=K\nwhile front < back:\n\tif(charArr[front]!='a'):\n\t\tbad+=1\n\tif(bad>K):\n\t\twhile(front2<=front and charArr[front2]=='a'):\n\t\t\tfront2+=1\n\t\tbad-=1\n\t\tfront2+=1\n\tanswer=max(answer,front-front2+1)\n\n\tfront+=1\nbad=0\nfront=0\nfront2=0\nback=len(charArr)\nwhile front < back:\n\tif(charArr[front]!='b'):\n\t\tbad+=1\n\tif(bad>K):\n\t\twhile(front2<=front and charArr[front2]=='b'):\n\t\t\tfront2+=1\n\t\tbad-=1\n\t\tfront2+=1\n\tanswer=max(answer,front-front2+1)\n\n\tfront+=1\n\nprint(answer)\n", "from sys import *\ninp = lambda : stdin.readline()\n\ndef solve(x,s,n,k):\n\tans,r,bal = 0,0,0\n\tfor l in range(n):\n\t\twhile r < n and (s[r] == x or bal < k):\n\t\t\tif s[r] != x: bal += 1\n\t\t\tr += 1\n\t\tans = max(ans,r-l)\n\t\tif s[l] != x:\n\t\t\tbal -= 1\n\treturn ans\n\ndef main():\n\tn,k = map(int,inp().split())\n\ts = inp()\n\tprint(max(solve(\"a\",s,n,k),solve(\"b\",s,n,k)))\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n, k = list(map(int, input().split()))\ns = input()\nansa = 0\na = 0\nb = 0\nstarta = 0\nfor i in range(0, n):\n\tif(s[i] == 'a'):\n\t\ta += 1\n\telse:\n\t\tb += 1\n\tif(min(a, b) > k):\n\t\tif(s[starta] == 'a'):\n\t\t\ta -= 1\n\t\telse:\n\t\t\tb -= 1\n\t\tstarta += 1\n\telse:\n\t\tansa += 1\nprint(ansa);\n", "le, ch = map(int, input().split())\nst = input()\nca, cb, si, mx = [0] * 4\nfor x in st:\n\tif x == 'a':\n\t\tca += 1\n\telse:\n\t\tcb += 1\n\tif min(ca, cb) > ch:\n\t\tif st[si] == 'a':\n\t\t\tca -= 1\n\t\telse:\n\t\t\tcb -= 1\n\t\tsi += 1\n\telse:\n\t\tmx += 1\nprint(mx)\n", "def solve(k, s, c):\n\tp = [-1, len(s)]\n\tfor i in range(len(s)):\n\t\tif s[i] == c:\n\t\t\tp += [i]\n\tp.sort()\n\tn = len(p)\n\tif n - k - 1 <= 0:\n\t\treturn len(s)\n\tm = 0\n\tfor i in range(n - k - 1):\n\t\tm = max(m, p[i + k + 1] - p[i])\n\treturn m - 1\n\nn, k = list(map(int, input().split()))\ns = input()\n\nprint(max(solve(k, s, 'a'), solve(k, s, 'b')))\n"], "id": "id6705"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6705", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["high", 3], ["school", 3], ["student", 3], ["vasya", 3], ["got", 3], ["a", 3], ["string", 3], ["of", 3], ["length", 3], ["n", 3], ["as", 3], ["a", 3], ["birthday", 3], ["present", 3], ["this", 3], ["string", 3], ["consists", 3], ["of", 3], ["letters", 3], ["a", 3], ["and", 3], ["b", 3], ["only", 3], ["vasya", 3], ["denotes", 3], ["beauty", 3], ["of", 3], ["the", 3], ["string", 3], ["as", 3], ["the", 3], ["maximum", 3], ["length", 3], ["of", 3], ["a", 3], ["substring", 3], ["consecutive", 3], ["subsequence", 3], ["consisting", 3], ["of", 3], ["equal", 3], ["letters", 3], ["vasya", 3], ["can", 3], ["change", 3], ["no", 3], ["more", 3], ["than", 3], ["k", 3], ["characters", 3], ["of", 3], ["the", 3], ["original", 3], ["string", 0], ["what", 0], ["is", 0], ["the", 0], ["maximum", 0], ["beauty", 0], ["of", 0], ["the", 0], ["string", 0], ["he", 0], ["can", 0], ["achieve", 0], ["input", 0], ["the", 8], ["first", 7], ["line", 6], ["of", 5], ["the", 5], ["input", 5], ["contains", 3], ["two", 3], ["integers", 3], ["n", 3], ["and", 3], ["k", 3], ["1", 3], ["≤", 3], ["n", 3], ["≤", 3], ["100", 3], ["000", 3], ["0", 3], ["≤", 3], ["k", 3], ["≤", 3], ["n", 3], ["—", 3], ["the", 3], ["length", 3], ["of", 3], ["the", 3], ["string", 3], ["and", 3], ["the", 3], ["maximum", 3], ["number", 3], ["of", 3], ["characters", 3], ["to", 3], ["change", 3], ["the", 3], ["second", 0], ["line", 0], ["contains", 0], ["the", 0], ["string", 0], ["consisting", 0], ["of", 0], ["letters", 0], ["a", 0], ["and", 0], ["b", 0], ["only", 0], ["output", 0], ["print", 3], ["the", 3], ["only", 3], ["integer", 3], ["—", 3], ["the", 3], ["maximum", 3], ["beauty", 3], ["of", 3], ["the", 0], ["string", 0], ["vasya", 0], ["can", 0], ["achieve", 0], ["by", 0], ["changing", 0], ["no", 0], ["more", 0], ["than", 0], ["k", 0], ["characters", 0], ["examples", 0], ["input", 0], ["4", 0], ["2", 0], ["abba", 0], ["output", 0], ["4", 0], ["input", 0], ["8", 0], ["1", 0], ["aabaabaa", 0], ["output", 0], ["5", 0], ["note", 0], ["in", 3], ["the", 3], ["first", 3], ["sample", 3], ["vasya", 3], ["can", 3], ["obtain", 3], ["both", 3], ["strings", 3], ["aaaa", 3], ["and", 3], ["bbbb", 3], ["in", 3], ["the", 3], ["second", 3], ["sample", 3], ["the", 3], ["optimal", 3], ["answer", 0], ["is", 0], ["obtained", 0], ["with", 0], ["the", 0], ["string", 0], ["aaaaabaa", 0], ["or", 0], ["with", 0], ["the", 0], ["string", 0], ["aabaaaaa", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6519337016574586, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.21197711128650357, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8601036269430051, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.28169874167283554, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6519337016574586, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.21197711128650357, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8601036269430051, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.28169874167283554, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["maxi", 0], ["0", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["st", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["a", 0], ["1", 0], ["else", 0], ["b", 0], ["1", 0], ["if", 0], ["min", 0], ["a", 0], ["b", 0], ["k", 0], ["if", 0], ["s", 0], ["st", 0], ["a", 0], ["a", 0], ["1", 0], ["else", 0], ["b", 0], ["1", 0], ["st", 0], ["1", 0], ["else", 0], ["maxi", 0], ["1", 0], ["print", 0], ["maxi", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["longest", 0], ["0", 0], ["left", 0], ["right", 0], ["0", 0], ["0", 0], ["currb", 0], ["1", 0], ["if", 0], ["s", 0], ["0", 0], ["b", 0], ["else", 0], ["0", 0], ["while", 0], ["true", 0], ["while", 0], ["right", 0], ["n", 0], ["and", 0], ["currb", 0], ["k", 0], ["right", 0], ["1", 0], ["if", 0], ["right", 0], ["n", 0], ["and", 0], ["s", 0], ["right", 0], ["b", 0], ["currb", 0], ["1", 0], ["longest", 0], ["max", 0], ["longest", 0], ["right", 0], ["left", 0], ["if", 0], ["s", 0], ["left", 0], ["b", 0], ["currb", 0], ["1", 0], ["left", 0], ["1", 0], ["if", 0], ["left", 0], ["n", 0], ["or", 0], ["right", 0], ["n", 0], ["break", 0], ["left", 0], ["right", 0], ["0", 0], ["0", 0], ["currb", 0], ["1", 0], ["if", 0], ["s", 0], ["0", 0], ["a", 0], ["else", 0], ["0", 0], ["while", 0], ["true", 0], ["while", 0], ["right", 0], ["n", 0], ["and", 0], ["currb", 0], ["k", 0], ["right", 0], ["1", 0], ["if", 0], ["right", 0], ["n", 0], ["and", 0], ["s", 0], ["right", 0], ["a", 0], ["currb", 0], ["1", 0], ["longest", 0], ["max", 0], ["longest", 0], ["right", 0], ["left", 0], ["if", 0], ["s", 0], ["left", 0], ["a", 0], ["currb", 0], ["1", 0], ["left", 0], ["1", 0], ["if", 0], ["left", 0], ["n", 0], ["or", 0], ["right", 0], ["n", 0], ["break", 0], ["print", 0], ["longest", 0], ["author", 0], ["utena", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["list", 0], ["input", 0], ["beauty", 0], ["0", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["a", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["b", 0], ["b", 0], ["1", 0], ["while", 0], ["min", 0], ["a", 0], ["b", 0], ["k", 0], ["j", 0], ["1", 0], ["if", 0], ["s", 0], ["j", 0], ["a", 0], ["a", 0], ["1", 0], ["if", 0], ["s", 0], ["j", 0], ["b", 0], ["b", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["beauty", 0], ["beauty", 0], ["i", 0], ["j", 0], ["print", 0], ["beauty", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["l", 0], ["r", 0], ["0", 0], ["a", 0], ["b", 0], ["0", 0], ["ans", 0], ["0", 0], ["while", 0], ["r", 0], ["n", 0], ["if", 0], ["a", 0], ["k", 0], ["or", 0], ["a", 0], ["0", 0], ["or", 0], ["b", 0], ["k", 0], ["or", 0], ["b", 0], ["0", 0], ["ans", 0], ["max", 0], ["ans", 0], ["r", 0], ["l", 0], ["if", 0], ["s", 0], ["r", 0], ["a", 0], ["a", 0], ["1", 0], ["else", 0], ["b", 0], ["1", 0], ["r", 0], ["1", 0], ["else", 0], ["if", 0], ["s", 0], ["l", 0], ["a", 0], ["a", 0], ["1", 0], ["else", 0], ["b", 0], ["1", 0], ["l", 0], ["1", 0], ["if", 0], ["a", 0], ["k", 0], ["or", 0], ["a", 0], ["0", 0], ["or", 0], ["b", 0], ["k", 0], ["or", 0], ["b", 0], ["0", 0], ["ans", 0], ["max", 0], ["ans", 0], ["r", 0], ["l", 0], ["print", 0], ["ans", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["l", 0], ["ki", 0], ["i", 0], ["s", 0], ["0", 0], ["po", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["l", 0], ["j", 0], ["0", 0], ["while", 0], ["s", 0], ["k", 0], ["s", 0], ["l", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["if", 0], ["j", 0], ["i", 0], ["ki", 0], ["po", 0], ["po", 0], ["ki", 0], ["i", 0], ["j", 0], ["return", 0], ["ki", 0], ["po", 0], ["1", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["a1", 0], ["a2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["a1", 0], ["append", 0], ["1", 0], ["a2", 0], ["append", 0], ["0", 0], ["else", 0], ["a1", 0], ["append", 0], ["0", 0], ["a2", 0], ["append", 0], ["1", 0], ["print", 0], ["max", 0], ["solve", 0], ["n", 0], ["k", 0], ["a1", 0], ["solve", 0], ["n", 0], ["k", 0], ["a2", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["k1", 0], ["k", 0], ["k2", 0], ["k", 0], ["a", 0], ["b", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["b", 0], ["k1", 0], ["1", 0], ["else", 0], ["k2", 0], ["1", 0], ["while", 0], ["k1", 0], ["0", 0], ["if", 0], ["s", 0], ["a", 0], ["b", 0], ["k1", 0], ["1", 0], ["a", 0], ["1", 0], ["while", 0], ["k2", 0], ["0", 0], ["if", 0], ["s", 0], ["b", 0], ["a", 0], ["k2", 0], ["1", 0], ["b", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["i", 0], ["a", 0], ["1", 0], ["i", 0], ["b", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["l", 0], ["ki", 0], ["i", 0], ["s", 0], ["0", 0], ["po", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["l", 0], ["j", 0], ["0", 0], ["while", 0], ["s", 0], ["k", 0], ["s", 0], ["l", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["if", 0], ["j", 0], ["i", 0], ["ki", 0], ["po", 0], ["po", 0], ["ki", 0], ["i", 0], ["j", 0], ["return", 0], ["ki", 0], ["po", 0], ["1", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["list1", 0], ["list2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["list1", 0], ["append", 0], ["1", 0], ["list2", 0], ["append", 0], ["0", 0], ["else", 0], ["list1", 0], ["append", 0], ["0", 0], ["list2", 0], ["append", 0], ["1", 0], ["print", 0], ["max", 0], ["solve", 0], ["n", 0], ["k", 0], ["list1", 0], ["solve", 0], ["n", 0], ["k", 0], ["list2", 0], ["n", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["k", 0], ["0", 0], ["ma", 0], ["0", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["r", 0], ["a", 0], ["if", 0], ["r", 0], ["l", 0], ["1", 0], ["ma", 0], ["ma", 0], ["r", 0], ["l", 0], ["1", 0], ["else", 0], ["while", 0], ["k", 0], ["t", 0], ["if", 0], ["s", 0], ["l", 0], ["b", 0], ["k", 0], ["1", 0], ["l", 0], ["1", 0], ["if", 0], ["r", 0], ["l", 0], ["1", 0], ["ma", 0], ["ma", 0], ["r", 0], ["l", 0], ["1", 0], ["k", 0], ["1", 0], ["k", 0], ["r", 0], ["l", 0], ["2", 0], ["l", 0], ["0", 0], ["k", 0], ["0", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["r", 0], ["b", 0], ["if", 0], ["r", 0], ["l", 0], ["1", 0], ["ma", 0], ["ma", 0], ["r", 0], ["l", 0], ["1", 0], ["else", 0], ["while", 0], ["k", 0], ["t", 0], ["if", 0], ["s", 0], ["l", 0], ["a", 0], ["k", 0], ["1", 0], ["l", 0], ["1", 0], ["if", 0], ["r", 0], ["l", 0], ["1", 0], ["ma", 0], ["ma", 0], ["r", 0], ["l", 0], ["1", 0], ["k", 0], ["1", 0], ["k", 0], ["r", 0], ["l", 0], ["2", 0], ["print", 0], ["ma", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["res", 0], ["1", 0], ["to", 0], ["a", 0], ["i", 0], ["1", 0], ["j", 0], ["0", 0], ["cur", 0], ["0", 0], ["while", 0], ["i", 0], ["j", 0], ["n", 0], ["if", 0], ["j", 0], ["n", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["break", 0], ["while", 0], ["cur", 0], ["k", 0], ["and", 0], ["j", 0], ["n", 0], ["if", 0], ["cur", 0], ["k", 0], ["and", 0], ["s", 0], ["j", 0], ["b", 0], ["break", 0], ["else", 0], ["cur", 0], ["s", 0], ["j", 0], ["b", 0], ["j", 0], ["1", 0], ["res", 0], ["max", 0], ["res", 0], ["j", 0], ["i", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["if", 0], ["cur", 0], ["k", 0], ["and", 0], ["i", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["cur", 0], ["s", 0], ["i", 0], ["b", 0], ["while", 0], ["cur", 0], ["k", 0], ["and", 0], ["i", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["cur", 0], ["s", 0], ["i", 0], ["b", 0], ["else", 0], ["i", 0], ["j", 0], ["j", 0], ["i", 0], ["1", 0], ["res", 0], ["max", 0], ["res", 0], ["j", 0], ["i", 0], ["1", 0], ["to", 0], ["b", 0], ["i", 0], ["1", 0], ["j", 0], ["0", 0], ["cur", 0], ["0", 0], ["while", 0], ["i", 0], ["j", 0], ["n", 0], ["if", 0], ["j", 0], ["n", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["break", 0], ["while", 0], ["cur", 0], ["k", 0], ["and", 0], ["j", 0], ["n", 0], ["if", 0], ["cur", 0], ["k", 0], ["and", 0], ["s", 0], ["j", 0], ["a", 0], ["break", 0], ["else", 0], ["cur", 0], ["s", 0], ["j", 0], ["a", 0], ["j", 0], ["1", 0], ["res", 0], ["max", 0], ["res", 0], ["j", 0], ["i", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["if", 0], ["cur", 0], ["k", 0], ["and", 0], ["i", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["cur", 0], ["s", 0], ["i", 0], ["a", 0], ["while", 0], ["cur", 0], ["k", 0], ["and", 0], ["i", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["cur", 0], ["s", 0], ["i", 0], ["a", 0], ["else", 0], ["i", 0], ["j", 0], ["j", 0], ["i", 0], ["1", 0], ["res", 0], ["max", 0], ["res", 0], ["j", 0], ["i", 0], ["1", 0], ["print", 0], ["res", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["ans", 0], ["0", 0], ["num", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["r", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["b", 0], ["num", 0], ["1", 0], ["if", 0], ["num", 0], ["k", 0], ["ans", 0], ["max", 0], ["ans", 0], ["i", 0], ["l", 0], ["while", 0], ["l", 0], ["n", 0], ["and", 0], ["s", 0], ["l", 0], ["b", 0], ["l", 0], ["1", 0], ["l", 0], ["1", 0], ["num", 0], ["1", 0], ["i", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["i", 0], ["l", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["num", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["r", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["num", 0], ["1", 0], ["if", 0], ["num", 0], ["k", 0], ["ans", 0], ["max", 0], ["ans", 0], ["i", 0], ["l", 0], ["while", 0], ["l", 0], ["n", 0], ["and", 0], ["s", 0], ["l", 0], ["a", 0], ["l", 0], ["1", 0], ["l", 0], ["1", 0], ["num", 0], ["1", 0], ["i", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["i", 0], ["l", 0], ["print", 0], ["ans", 0], ["read", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["read", 0], ["s", 0], ["input", 0], ["i", 0], ["j", 0], ["0", 0], ["cur", 0], ["k", 0], ["while", 0], ["cur", 0], ["and", 0], ["j", 0], ["n", 0], ["if", 0], ["s", 0], ["j", 0], ["a", 0], ["cur", 0], ["1", 0], ["j", 0], ["1", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["s", 0], ["j", 0], ["b", 0], ["j", 0], ["1", 0], ["ans", 0], ["j", 0], ["while", 0], ["j", 0], ["n", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["s", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["s", 0], ["j", 0], ["b", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["j", 0], ["i", 0], ["i", 0], ["j", 0], ["0", 0], ["cur", 0], ["k", 0], ["while", 0], ["cur", 0], ["and", 0], ["j", 0], ["n", 0], ["if", 0], ["s", 0], ["j", 0], ["b", 0], ["cur", 0], ["1", 0], ["j", 0], ["1", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["s", 0], ["j", 0], ["a", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["j", 0], ["while", 0], ["j", 0], ["n", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["s", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["s", 0], ["j", 0], ["a", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["j", 0], ["i", 0], ["print", 0], ["ans", 0], ["def", 0], ["check", 0], ["lengths", 0], ["k", 0], ["full", 0], ["count", 0], ["of", 0], ["opposite", 0], ["maxcount", 0], ["0", 0], ["count", 0], ["0", 0], ["start", 0], ["0", 0], ["cur", 0], ["k", 0], ["k", 0], ["for", 0], ["i", 0], ["el", 0], ["in", 0], ["enumerate", 0], ["lengths", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["print", 0], ["count", 0], ["adding", 0], ["el", 0], ["count", 0], ["el", 0], ["else", 0], ["print", 0], ["count", 0], ["removing", 0], ["el", 0], ["if", 0], ["cur", 0], ["k", 0], ["el", 0], ["0", 0], ["cur", 0], ["k", 0], ["el", 0], ["else", 0], ["maxcount", 0], ["max", 0], ["count", 0], ["maxcount", 0], ["print", 0], ["so", 0], ["we", 0], ["found", 0], ["start", 0], ["maxcount", 0], ["cur", 0], ["k", 0], ["el", 0], ["while", 0], ["start", 0], ["i", 0], ["and", 0], ["cur", 0], ["k", 0], ["0", 0], ["count", 0], ["lengths", 0], ["start", 0], ["cur", 0], ["k", 0], ["lengths", 0], ["start", 0], ["1", 0], ["start", 0], ["2", 0], ["if", 0], ["start", 0], ["i", 0], ["print", 0], ["start", 0], ["i", 0], ["cur", 0], ["k", 0], ["k", 0], ["count", 0], ["0", 0], ["maxcount", 0], ["max", 0], ["count", 0], ["maxcount", 0], ["print", 0], ["maxcount", 0], ["maxcount", 0], ["result", 0], ["maxcount", 0], ["min", 0], ["k", 0], ["full", 0], ["count", 0], ["of", 0], ["opposite", 0], ["print", 0], ["result", 0], ["return", 0], ["result", 0], ["def", 0], ["maxsubsl", 0], ["s", 0], ["k", 0], ["lengths", 0], ["prev", 0], ["s", 0], ["0", 0], ["cnt", 0], ["0", 0], ["full", 0], ["counts", 0], ["0", 0], ["0", 0], ["for", 0], ["el", 0], ["in", 0], ["s", 0], ["if", 0], ["el", 0], ["prev", 0], ["lengths", 0], ["append", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["prev", 0], ["el", 0], ["cnt", 0], ["1", 0], ["full", 0], ["counts", 0], ["len", 0], ["lengths", 0], ["2", 0], ["1", 0], ["lengths", 0], ["append", 0], ["cnt", 0], ["print", 0], ["lengths", 0], ["lengths", 0], ["print", 0], ["full", 0], ["counts", 0], ["full", 0], ["counts", 0], ["maxl", 0], ["check", 0], ["lengths", 0], ["k", 0], ["full", 0], ["counts", 0], ["1", 0], ["if", 0], ["len", 0], ["lengths", 0], ["1", 0], ["maxl", 0], ["max", 0], ["maxl", 0], ["check", 0], ["lengths", 0], ["1", 0], ["k", 0], ["full", 0], ["counts", 0], ["0", 0], ["return", 0], ["maxl", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["print", 0], ["maxsubsl", 0], ["s", 0], ["k", 0], ["s", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["int", 0], ["s", 0], ["0", 0], ["int", 0], ["s", 0], ["1", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["k1", 0], ["k", 0], ["i1", 0], ["1", 0], ["i2", 0], ["0", 0], ["while", 0], ["i1", 0], ["n", 0], ["1", 0], ["i1", 0], ["1", 0], ["if", 0], ["s", 0], ["i1", 0], ["b", 0], ["if", 0], ["k1", 0], ["0", 0], ["k1", 0], ["1", 0], ["else", 0], ["while", 0], ["s", 0], ["i2", 0], ["b", 0], ["i2", 0], ["1", 0], ["i2", 0], ["1", 0], ["if", 0], ["ans", 0], ["i1", 0], ["i2", 0], ["ans", 0], ["i1", 0], ["i2", 0], ["k1", 0], ["k", 0], ["i1", 0], ["1", 0], ["i2", 0], ["0", 0], ["while", 0], ["i1", 0], ["n", 0], ["1", 0], ["i1", 0], ["1", 0], ["if", 0], ["s", 0], ["i1", 0], ["a", 0], ["if", 0], ["k1", 0], ["0", 0], ["k1", 0], ["1", 0], ["else", 0], ["while", 0], ["s", 0], ["i2", 0], ["a", 0], ["i2", 0], ["1", 0], ["i2", 0], ["1", 0], ["if", 0], ["ans", 0], ["i1", 0], ["i2", 0], ["ans", 0], ["i1", 0], ["i2", 0], ["print", 0], ["ans", 0], ["1", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["e", 0], ["t", 0], ["0", 0], ["0", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["b", 0], ["t", 0], ["1", 0], ["while", 0], ["t", 0], ["k", 0], ["and", 0], ["e", 0], ["i", 0], ["if", 0], ["s", 0], ["e", 0], ["b", 0], ["t", 0], ["1", 0], ["e", 0], ["1", 0], ["res", 0], ["max", 0], ["res", 0], ["i", 0], ["e", 0], ["1", 0], ["e", 0], ["t", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["t", 0], ["1", 0], ["while", 0], ["t", 0], ["k", 0], ["and", 0], ["e", 0], ["i", 0], ["if", 0], ["s", 0], ["e", 0], ["a", 0], ["t", 0], ["1", 0], ["e", 0], ["1", 0], ["res", 0], ["max", 0], ["res", 0], ["i", 0], ["e", 0], ["1", 0], ["print", 0], ["res", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["p", 0], ["0", 0], ["ind", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["a", 0], ["1", 0], ["else", 0], ["b", 0], ["1", 0], ["if", 0], ["min", 0], ["a", 0], ["b", 0], ["k", 0], ["if", 0], ["s", 0], ["p", 0], ["a", 0], ["a", 0], ["1", 0], ["else", 0], ["b", 0], ["1", 0], ["p", 0], ["1", 0], ["else", 0], ["ind", 0], ["1", 0], ["print", 0], ["ind", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["chararr", 0], ["list", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["print", 0], ["chararr", 0], ["bad", 0], ["0", 0], ["front", 0], ["0", 0], ["front2", 0], ["0", 0], ["back", 0], ["len", 0], ["chararr", 0], ["answer", 0], ["k", 0], ["while", 0], ["front", 0], ["back", 0], ["if", 0], ["chararr", 0], ["front", 0], ["a", 0], ["bad", 0], ["1", 0], ["if", 0], ["bad", 0], ["k", 0], ["while", 0], ["front2", 0], ["front", 0], ["and", 0], ["chararr", 0], ["front2", 0], ["a", 0], ["front2", 0], ["1", 0], ["bad", 0], ["1", 0], ["front2", 0], ["1", 0], ["answer", 0], ["max", 0], ["answer", 0], ["front", 0], ["front2", 0], ["1", 0], ["front", 0], ["1", 0], ["bad", 0], ["0", 0], ["front", 0], ["0", 0], ["front2", 0], ["0", 0], ["back", 0], ["len", 0], ["chararr", 0], ["while", 0], ["front", 0], ["back", 0], ["if", 0], ["chararr", 0], ["front", 0], ["b", 0], ["bad", 0], ["1", 0], ["if", 0], ["bad", 0], ["k", 0], ["while", 0], ["front2", 0], ["front", 0], ["and", 0], ["chararr", 0], ["front2", 0], ["b", 0], ["front2", 0], ["1", 0], ["bad", 0], ["1", 0], ["front2", 0], ["1", 0], ["answer", 0], ["max", 0], ["answer", 0], ["front", 0], ["front2", 0], ["1", 0], ["front", 0], ["1", 0], ["print", 0], ["answer", 0], ["from", 0], ["sys", 0], ["import", 0], ["inp", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["solve", 0], ["x", 0], ["s", 0], ["n", 0], ["k", 0], ["ans", 0], ["r", 0], ["bal", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["l", 0], ["in", 0], ["range", 0], ["n", 0], ["while", 0], ["r", 0], ["n", 0], ["and", 0], ["s", 0], ["r", 0], ["x", 0], ["or", 0], ["bal", 0], ["k", 0], ["if", 0], ["s", 0], ["r", 0], ["x", 0], ["bal", 0], ["1", 0], ["r", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["r", 0], ["l", 0], ["if", 0], ["s", 0], ["l", 0], ["x", 0], ["bal", 0], ["1", 0], ["return", 0], ["ans", 0], ["def", 0], ["main", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["inp", 0], ["split", 0], ["s", 0], ["inp", 0], ["print", 0], ["max", 0], ["solve", 0], ["a", 0], ["s", 0], ["n", 0], ["k", 0], ["solve", 0], ["b", 0], ["s", 0], ["n", 0], ["k", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ansa", 0], ["0", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["starta", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["a", 0], ["1", 0], ["else", 0], ["b", 0], ["1", 0], ["if", 0], ["min", 0], ["a", 0], ["b", 0], ["k", 0], ["if", 0], ["s", 0], ["starta", 0], ["a", 0], ["a", 0], ["1", 0], ["else", 0], ["b", 0], ["1", 0], ["starta", 0], ["1", 0], ["else", 0], ["ansa", 0], ["1", 0], ["print", 0], ["ansa", 0], ["le", 0], ["ch", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["st", 0], ["input", 0], ["ca", 0], ["cb", 0], ["si", 0], ["mx", 0], ["0", 0], ["4", 0], ["for", 0], ["x", 0], ["in", 0], ["st", 0], ["if", 0], ["x", 0], ["a", 0], ["ca", 0], ["1", 0], ["else", 0], ["cb", 0], ["1", 0], ["if", 0], ["min", 0], ["ca", 0], ["cb", 0], ["ch", 0], ["if", 0], ["st", 0], ["si", 0], ["a", 0], ["ca", 0], ["1", 0], ["else", 0], ["cb", 0], ["1", 0], ["si", 0], ["1", 0], ["else", 0], ["mx", 0], ["1", 0], ["print", 0], ["mx", 0], ["def", 0], ["solve", 0], ["k", 0], ["s", 0], ["c", 0], ["p", 0], ["1", 0], ["len", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["c", 0], ["p", 0], ["i", 0], ["p", 0], ["sort", 0], ["n", 0], ["len", 0], ["p", 0], ["if", 0], ["n", 0], ["k", 0], ["1", 0], ["0", 0], ["return", 0], ["len", 0], ["s", 0], ["m", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["1", 0], ["m", 0], ["max", 0], ["m", 0], ["p", 0], ["i", 0], ["k", 0], ["1", 0], ["p", 0], ["i", 0], ["return", 0], ["m", 0], ["1", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["print", 0], ["max", 0], ["solve", 0], ["k", 0], ["s", 0], ["a", 0], ["solve", 0], ["k", 0], ["s", 0], ["b", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nGood old Marko came across a new feature on his mobile phone – T9 input! His phone has a keyboard consisting of numbers looking like this:\n\n1\n\n2\n\n3 \n\nabc\n\ndef\n\n4\n\n5\n\n6\n\nghi\n\njkl\n\nmno\n\n7\n\n8\n\n9\n\npqrs\n\ntuv\n\nwxyz\n\nIn order to input a word using this keyboard, one needs to press a key multiple times for the required letter. More specifically, if the required letter is the first letter mapped to the key, one key press is needed, if it’s the second, two key presses are needed and so on. For instance, if we want to input the word “giht”, we will press the following keys: g-4 i-444 h-44 t-8. The new possibility Marko discovered enables you to input text more easily because you don’t need several presses per letter anymore, just one. The software will try to figure out what word from the dictionary you are trying to input.\n\nMarko is quite sceptical of new technologies (at least new for him) and he is afraid that errors will be frequent. That is the reason why he decided to test his hypothesis that the errors are frequent. Marko knows by heart the whole dictionary in the mobile phone. The dictionary consists of $N$ words consisting of lowercase letters from the English alphabet, the total length of the word not exceeding $1000000$ characters. He will give an array of key presses $S$, of total length at most $1000$, and wants to know how many words from the dictionary can be mapped to the given array of key presses if the T9 input feature is used.\n\n-----Input-----\nThe first line of input contains the integer $N$, the number of words in the dictionary. ($1 \\leq N \\leq 1000$). Each of the following $N$ lines contains a single word. The last line of input contains the string $S$ ($1 \\leq |S| \\leq 1000$) consisting of digits $2$–$9$.\n\n-----Output-----\nThe first and only line of output must contain the number of words from the dictionary possible to construct from the letters on the keys determined by the string $S$.\n\n-----Examples-----\nSample Input 1:\n3\ntomo\nmono\ndak\n6666\nSample Output 1:\n1\n\nSample Input 2:\n2\nja\nla\n52\nSample Output 2:\n2\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7483"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7483", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["good", 0], ["old", 0], ["marko", 0], ["came", 0], ["across", 0], ["a", 0], ["new", 0], ["feature", 0], ["on", 0], ["his", 0], ["mobile", 0], ["phone", 0], ["–", 0], ["t9", 0], ["input", 0], ["his", 0], ["phone", 0], ["has", 0], ["a", 0], ["keyboard", 0], ["consisting", 0], ["of", 0], ["numbers", 0], ["looking", 0], ["like", 0], ["this", 0], ["1", 3], ["2", 3], ["3", 0], ["abc", 0], ["def", 0], ["4", 0], ["5", 0], ["6", 0], ["ghi", 0], ["jkl", 0], ["mno", 0], ["7", 0], ["8", 0], ["9", 0], ["pqrs", 0], ["tuv", 0], ["wxyz", 0], ["in", 1], ["order", 1], ["to", 1], ["input", 1], ["a", 1], ["word", 1], ["using", 1], ["this", 1], ["keyboard", 1], ["one", 1], ["needs", 1], ["to", 1], ["press", 1], ["a", 1], ["key", 1], ["multiple", 1], ["times", 1], ["for", 1], ["the", 1], ["required", 1], ["letter", 1], ["more", 1], ["specifically", 1], ["if", 1], ["the", 1], ["required", 1], ["letter", 1], ["is", 1], ["the", 1], ["first", 1], ["letter", 1], ["mapped", 1], ["to", 1], ["the", 1], ["key", 1], ["one", 1], ["key", 1], ["press", 1], ["is", 1], ["needed", 1], ["if", 1], ["it’s", 1], ["the", 1], ["second", 1], ["two", 1], ["key", 1], ["presses", 1], ["are", 1], ["needed", 1], ["and", 1], ["so", 1], ["on", 1], ["for", 1], ["instance", 1], ["if", 1], ["we", 1], ["want", 1], ["to", 1], ["input", 1], ["the", 1], ["word", 1], ["“giht”", 1], ["we", 1], ["will", 1], ["press", 1], ["the", 1], ["following", 1], ["keys", 1], ["g", 1], ["4", 1], ["i", 1], ["444", 1], ["h", 1], ["44", 1], ["t", 1], ["8", 1], ["the", 1], ["new", 1], ["possibility", 1], ["marko", 1], ["discovered", 1], ["enables", 1], ["you", 1], ["to", 1], ["input", 1], ["text", 1], ["more", 1], ["easily", 1], ["because", 1], ["you", 1], ["don’t", 1], ["need", 1], ["several", 1], ["presses", 1], ["per", 1], ["letter", 1], ["anymore", 1], ["just", 1], ["one", 1], ["the", 1], ["software", 1], ["will", 1], ["try", 1], ["to", 1], ["figure", 1], ["out", 1], ["what", 1], ["word", 1], ["from", 1], ["the", 1], ["dictionary", 1], ["you", 1], ["are", 1], ["trying", 1], ["to", 1], ["input", 1], ["marko", 1], ["is", 1], ["quite", 1], ["sceptical", 1], ["of", 1], ["new", 1], ["technologies", 1], ["at", 1], ["least", 1], ["new", 1], ["for", 1], ["him", 1], ["and", 1], ["he", 1], ["is", 1], ["afraid", 1], ["that", 1], ["errors", 1], ["will", 1], ["be", 1], ["frequent", 1], ["that", 1], ["is", 1], ["the", 1], ["reason", 1], ["why", 1], ["he", 1], ["decided", 1], ["to", 1], ["test", 1], ["his", 1], ["hypothesis", 1], ["that", 1], ["the", 1], ["errors", 1], ["are", 1], ["frequent", 1], ["marko", 1], ["knows", 1], ["by", 1], ["heart", 1], ["the", 1], ["whole", 1], ["dictionary", 1], ["in", 1], ["the", 1], ["mobile", 1], ["phone", 1], ["the", 1], ["dictionary", 1], ["consists", 1], ["of", 1], ["n", 1], ["words", 1], ["consisting", 1], ["of", 1], ["lowercase", 1], ["letters", 1], ["from", 0], ["the", 0], ["english", 0], ["alphabet", 0], ["the", 0], ["total", 0], ["length", 0], ["of", 0], ["the", 0], ["word", 0], ["not", 0], ["exceeding", 0], ["1000000", 0], ["characters", 1], ["he", 1], ["will", 1], ["give", 0], ["an", 0], ["array", 0], ["of", 0], ["key", 0], ["presses", 0], ["s", 0], ["of", 0], ["total", 0], ["length", 0], ["at", 0], ["most", 0], ["1000", 0], ["and", 1], ["wants", 1], ["to", 1], ["know", 1], ["how", 1], ["many", 1], ["words", 1], ["from", 1], ["the", 1], ["dictionary", 1], ["can", 1], ["be", 1], ["mapped", 1], ["to", 1], ["the", 1], ["given", 0], ["array", 0], ["of", 0], ["key", 0], ["presses", 0], ["if", 0], ["the", 0], ["t9", 0], ["input", 0], ["feature", 0], ["is", 0], ["used", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["the", 1], ["integer", 1], ["n", 0], ["the", 0], ["number", 0], ["of", 0], ["words", 0], ["in", 0], ["the", 0], ["dictionary", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["1000", 0], ["each", 1], ["of", 1], ["the", 1], ["following", 1], ["n", 1], ["lines", 1], ["contains", 1], ["a", 1], ["single", 1], ["word", 1], ["the", 1], ["last", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["the", 0], ["string", 0], ["s", 0], ["1", 0], ["leq", 0], ["s", 0], ["leq", 0], ["1000", 0], ["consisting", 0], ["of", 0], ["digits", 0], ["2", 0], ["–", 0], ["9", 0], ["output", 0], ["the", 1], ["first", 1], ["and", 1], ["only", 1], ["line", 1], ["of", 1], ["output", 1], ["must", 1], ["contain", 1], ["the", 1], ["number", 1], ["of", 1], ["words", 1], ["from", 1], ["the", 1], ["dictionary", 1], ["possible", 1], ["to", 1], ["construct", 0], ["from", 0], ["the", 0], ["letters", 0], ["on", 0], ["the", 0], ["keys", 0], ["determined", 0], ["by", 0], ["the", 0], ["string", 0], ["s", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["3", 0], ["tomo", 0], ["mono", 0], ["dak", 0], ["6666", 0], ["sample", 0], ["output", 0], ["1", 0], ["1", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["ja", 0], ["la", 0], ["52", 0], ["sample", 0], ["output", 0], ["2", 0], ["2", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6094986807387863, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6059806508355321, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8056265984654731, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7817561807331628, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6094986807387863, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6059806508355321, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8056265984654731, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7817561807331628, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nBy now you have probably heard that there is a spectacular stone sculpture featuring four famous U.S. presidents at Mount Rushmore. However, very few people know that this monument contains a secret chamber. This sounds like something out of a plot of a Hollywood movie, but the chamber really exists. It can be found behind the head of Abraham Lincoln and was designed to serve as a Hall of Records to store important historical U.S. documents and artifacts. Historians claim that the construction of the hall was halted in 1939 and the uncompleted chamber was left untouched until the late 1990s, but this is not the whole truth. \n\nIn 1982, the famous archaeologist S. Dakota Jones secretly visited the monument and found that the chamber actually was completed, but it was kept confidential. This seemed suspicious and after some poking around, she found a hidden vault and some documents inside. Unfortunately, these documents did not make any sense and were all gibberish. She suspected that they had been written in a code, but she could not decipher them despite all her efforts.\n\nEarlier this week when she was in the area to follow the ACM-ICPC World Finals, Dr. Jones finally discovered the key to deciphering the documents, in Connolly Hall of SDSM&T. She found a document that contains a list of translations of letters. Some letters may have more than one translation, and others may have no translation. By repeatedly applying some of these translations to individual letters in the gibberish documents, she might be able to decipher them to yield historical U.S. documents such as the Declaration of Independence and the Constitution. She needs your help.\n\nYou are given the possible translations of letters and a list of pairs of original and deciphered words. Your task is to verify whether the words in each pair match. Two words match if they have the same length and if each letter of the first word can be turned into the corresponding letter of the second word by using the available translations zero or more times.\n\n-----Input-----\nThe first line of input contains two integers $m$ ($1 \\le m \\le 500$) and $n$ ($1 \\le n \\le 50$), where $m$ is the number of translations of letters and $n$ is the number of word pairs. Each of the next $m$ lines contains two distinct space-separated letters $a$ and $b$, indicating that the letter $a$ can be translated to the letter $b$. Each ordered pair of letters $(a, b)$ appears at most once. Following this are $n$ lines, each containing a word pair to check. Translations and words use only lowercase letters ‘a’–‘z’, and each word contains at least $1$ and at most $50$ letters.\n\n-----Output-----\nFor each pair of words, display yes if the two words match, and no otherwise.\n\n-----Examples-----\nSample Input:\n9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\nSample Output:\nyes\nno\nno\nyes\nyes\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9166"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9166", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["by", 3], ["now", 3], ["you", 3], ["have", 3], ["probably", 3], ["heard", 3], ["that", 3], ["there", 3], ["is", 3], ["a", 3], ["spectacular", 3], ["stone", 3], ["sculpture", 3], ["featuring", 3], ["four", 3], ["famous", 3], ["u", 3], ["s", 3], ["presidents", 3], ["at", 3], ["mount", 3], ["rushmore", 3], ["however", 3], ["very", 3], ["few", 3], ["people", 3], ["know", 3], ["that", 3], ["this", 3], ["monument", 3], ["contains", 3], ["a", 3], ["secret", 3], ["chamber", 3], ["this", 3], ["sounds", 3], ["like", 3], ["something", 3], ["out", 3], ["of", 3], ["a", 3], ["plot", 3], ["of", 3], ["a", 3], ["hollywood", 3], ["movie", 3], ["but", 3], ["the", 3], ["chamber", 3], ["really", 3], ["exists", 3], ["it", 3], ["can", 17], ["be", 17], ["found", 17], ["behind", 17], ["the", 17], ["head", 17], ["of", 17], ["abraham", 17], ["lincoln", 3], ["and", 3], ["was", 3], ["designed", 3], ["to", 3], ["serve", 3], ["as", 3], ["a", 3], ["hall", 3], ["of", 3], ["records", 3], ["to", 3], ["store", 3], ["important", 3], ["historical", 3], ["u", 3], ["s", 3], ["documents", 3], ["and", 3], ["artifacts", 3], ["historians", 3], ["claim", 3], ["that", 3], ["the", 3], ["construction", 3], ["of", 3], ["the", 3], ["hall", 3], ["was", 3], ["halted", 3], ["in", 3], ["1939", 3], ["and", 3], ["the", 3], ["uncompleted", 3], ["chamber", 3], ["was", 3], ["left", 3], ["untouched", 3], ["until", 3], ["the", 3], ["late", 3], ["1990s", 3], ["but", 3], ["this", 3], ["is", 3], ["not", 3], ["the", 3], ["whole", 3], ["truth", 3], ["in", 3], ["1982", 3], ["the", 3], ["famous", 3], ["archaeologist", 3], ["s", 3], ["dakota", 3], ["jones", 3], ["secretly", 3], ["visited", 3], ["the", 3], ["monument", 3], ["and", 3], ["found", 3], ["that", 3], ["the", 3], ["chamber", 3], ["actually", 3], ["was", 3], ["completed", 3], ["but", 3], ["it", 3], ["was", 3], ["kept", 3], ["confidential", 3], ["this", 3], ["seemed", 3], ["suspicious", 3], ["and", 3], ["after", 3], ["some", 3], ["poking", 3], ["around", 3], ["she", 3], ["found", 3], ["a", 3], ["hidden", 3], ["vault", 3], ["and", 3], ["some", 3], ["documents", 3], ["inside", 3], ["unfortunately", 3], ["these", 3], ["documents", 3], ["did", 3], ["not", 3], ["make", 3], ["any", 3], ["sense", 3], ["and", 3], ["were", 3], ["all", 3], ["gibberish", 3], ["she", 3], ["suspected", 3], ["that", 3], ["they", 3], ["had", 3], ["been", 3], ["written", 3], ["in", 3], ["a", 3], ["code", 3], ["but", 3], ["she", 3], ["could", 3], ["not", 3], ["decipher", 3], ["them", 3], ["despite", 3], ["all", 3], ["her", 3], ["efforts", 3], ["earlier", 3], ["this", 3], ["week", 3], ["when", 3], ["she", 3], ["was", 3], ["in", 3], ["the", 3], ["area", 3], ["to", 3], ["follow", 3], ["the", 3], ["acm", 3], ["icpc", 3], ["world", 3], ["finals", 3], ["dr", 3], ["jones", 3], ["finally", 3], ["discovered", 3], ["the", 3], ["key", 3], ["to", 3], ["deciphering", 3], ["the", 3], ["documents", 3], ["in", 3], ["connolly", 3], ["hall", 3], ["of", 3], ["sdsm", 3], ["t", 3], ["she", 3], ["found", 3], ["a", 3], ["document", 3], ["that", 3], ["contains", 3], ["a", 3], ["list", 3], ["of", 3], ["translations", 3], ["of", 3], ["letters", 3], ["some", 3], ["letters", 3], ["may", 3], ["have", 3], ["more", 3], ["than", 3], ["one", 3], ["translation", 3], ["and", 3], ["others", 3], ["may", 3], ["have", 3], ["no", 3], ["translation", 3], ["by", 3], ["repeatedly", 3], ["applying", 3], ["some", 3], ["of", 3], ["these", 3], ["translations", 3], ["to", 3], ["individual", 3], ["letters", 3], ["in", 3], ["the", 3], ["gibberish", 3], ["documents", 3], ["she", 3], ["might", 3], ["be", 3], ["able", 3], ["to", 3], ["decipher", 3], ["them", 3], ["to", 3], ["yield", 3], ["historical", 3], ["u", 3], ["s", 3], ["documents", 3], ["such", 3], ["as", 3], ["the", 3], ["declaration", 3], ["of", 3], ["independence", 3], ["and", 3], ["the", 3], ["constitution", 3], ["she", 3], ["needs", 3], ["your", 3], ["help", 3], ["you", 3], ["are", 3], ["given", 3], ["the", 3], ["possible", 3], ["translations", 3], ["of", 3], ["letters", 3], ["and", 3], ["a", 3], ["list", 3], ["of", 3], ["pairs", 3], ["of", 3], ["original", 3], ["and", 3], ["deciphered", 3], ["words", 3], ["your", 3], ["task", 3], ["is", 3], ["to", 3], ["verify", 3], ["whether", 3], ["the", 3], ["words", 3], ["in", 3], ["each", 3], ["pair", 3], ["match", 3], ["two", 3], ["words", 3], ["match", 3], ["if", 3], ["they", 3], ["have", 3], ["the", 3], ["same", 3], ["length", 3], ["and", 3], ["if", 3], ["each", 3], ["letter", 3], ["of", 3], ["the", 3], ["first", 3], ["word", 3], ["can", 3], ["be", 3], ["turned", 3], ["into", 3], ["the", 3], ["corresponding", 3], ["letter", 3], ["of", 3], ["the", 0], ["second", 0], ["word", 0], ["by", 0], ["using", 0], ["the", 0], ["available", 0], ["translations", 0], ["zero", 0], ["or", 0], ["more", 0], ["times", 0], ["input", 0], ["the", 9], ["first", 3], ["line", 3], ["of", 3], ["input", 3], ["contains", 3], ["two", 3], ["integers", 3], ["m", 3], ["1", 3], ["le", 3], ["m", 3], ["le", 3], ["500", 3], ["and", 3], ["n", 3], ["1", 3], ["le", 3], ["n", 3], ["le", 3], ["50", 3], ["where", 3], ["m", 3], ["is", 3], ["the", 3], ["number", 3], ["of", 3], ["translations", 3], ["of", 3], ["letters", 3], ["and", 3], ["n", 3], ["is", 3], ["the", 3], ["number", 3], ["of", 3], ["word", 3], ["pairs", 3], ["each", 3], ["of", 3], ["the", 3], ["next", 3], ["m", 3], ["lines", 3], ["contains", 3], ["two", 3], ["distinct", 3], ["space", 3], ["separated", 3], ["letters", 3], ["a", 3], ["and", 3], ["b", 3], ["indicating", 3], ["that", 3], ["the", 3], ["letter", 3], ["a", 3], ["can", 3], ["be", 3], ["translated", 3], ["to", 3], ["the", 3], ["letter", 3], ["b", 3], ["each", 3], ["ordered", 3], ["pair", 3], ["of", 3], ["letters", 3], ["a", 3], ["b", 3], ["appears", 3], ["at", 3], ["most", 3], ["once", 3], ["following", 3], ["this", 3], ["are", 3], ["n", 3], ["lines", 3], ["each", 3], ["containing", 3], ["a", 3], ["word", 3], ["pair", 3], ["to", 3], ["check", 3], ["translations", 3], ["and", 3], ["words", 3], ["use", 3], ["only", 3], ["lowercase", 3], ["letters", 3], ["‘a’–‘z’", 3], ["and", 0], ["each", 0], ["word", 0], ["contains", 0], ["at", 0], ["least", 0], ["1", 0], ["and", 0], ["at", 0], ["most", 0], ["50", 0], ["letters", 0], ["output", 0], ["for", 3], ["each", 3], ["pair", 3], ["of", 0], ["words", 0], ["display", 0], ["yes", 0], ["if", 0], ["the", 0], ["two", 0], ["words", 0], ["match", 0], ["and", 0], ["no", 0], ["otherwise", 0], ["examples", 0], ["sample", 0], ["input", 0], ["9", 0], ["5", 0], ["c", 0], ["t", 0], ["i", 0], ["r", 0], ["k", 0], ["p", 0], ["o", 2], ["c", 2], ["r", 2], ["o", 2], ["t", 2], ["e", 2], ["t", 2], ["f", 2], ["u", 2], ["h", 2], ["w", 0], ["p", 0], ["we", 0], ["we", 0], ["can", 0], ["the", 0], ["work", 0], ["people", 0], ["it", 0], ["of", 0], ["out", 0], ["the", 0], ["sample", 0], ["output", 0], ["yes", 0], ["no", 0], ["no", 0], ["yes", 0], ["yes", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8693957115009746, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.28833339703652683, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.940952380952381, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3202116402116404, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8538011695906432, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2874160710418014, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.940952380952381, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3202116402116404, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nInnokenty is a president of a new football league in Byteland. The first task he should do is to assign short names to all clubs to be shown on TV next to the score. Of course, the short names should be distinct, and Innokenty wants that all short names consist of three letters.\n\nEach club's full name consist of two words: the team's name and the hometown's name, for example, \"DINAMO BYTECITY\". Innokenty doesn't want to assign strange short names, so he wants to choose such short names for each club that:   the short name is the same as three first letters of the team's name, for example, for the mentioned club it is \"DIN\",  or, the first two letters of the short name should be the same as the first two letters of the team's name, while the third letter is the same as the first letter in the hometown's name. For the mentioned club it is \"DIB\". \n\nApart from this, there is a rule that if for some club x the second option of short name is chosen, then there should be no club, for which the first option is chosen which is the same as the first option for the club x. For example, if the above mentioned club has short name \"DIB\", then no club for which the first option is chosen can have short name equal to \"DIN\". However, it is possible that some club have short name \"DIN\", where \"DI\" are the first two letters of the team's name, and \"N\" is the first letter of hometown's name. Of course, no two teams can have the same short name.\n\nHelp Innokenty to choose a short name for each of the teams. If this is impossible, report that. If there are multiple answer, any of them will suit Innokenty. If for some team the two options of short name are equal, then Innokenty will formally think that only one of these options is chosen. \n\n\n-----Input-----\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the number of clubs in the league.\n\nEach of the next n lines contains two words — the team's name and the hometown's name for some club. Both team's name and hometown's name consist of uppercase English letters and have length at least 3 and at most 20.\n\n\n-----Output-----\n\nIt it is not possible to choose short names and satisfy all constraints, print a single line \"NO\".\n\nOtherwise, in the first line print \"YES\". Then print n lines, in each line print the chosen short name for the corresponding club. Print the clubs in the same order as they appeared in input.\n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n2\nDINAMO BYTECITY\nFOOTBALL MOSCOW\n\nOutput\nYES\nDIN\nFOO\n\nInput\n2\nDINAMO BYTECITY\nDINAMO BITECITY\n\nOutput\nNO\n\nInput\n3\nPLAYFOOTBALL MOSCOW\nPLAYVOLLEYBALL SPB\nGOGO TECHNOCUP\n\nOutput\nYES\nPLM\nPLS\nGOG\n\nInput\n3\nABC DEF\nABC EFG\nABD OOO\n\nOutput\nYES\nABD\nABE\nABO\n\n\n\n-----Note-----\n\nIn the first sample Innokenty can choose first option for both clubs.\n\nIn the second example it is not possible to choose short names, because it is not possible that one club has first option, and the other has second option if the first options are equal for both clubs.\n\nIn the third example Innokenty can choose the second options for the first two clubs, and the first option for the third club.\n\nIn the fourth example note that it is possible that the chosen short name for some club x is the same as the first option of another club y if the first options of x and y are different.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\nfirst = {}\nsecond = set()\ns1 = [0] * n\nans = [0] * n\nfor i in range(n):\n\ta, b = input().split()\n\ta = a[:3]\n\tb = b[0]\n\ts1[i] = b\n\tif a in first.keys():\n\t\tfirst[a].append(i)\n\telse:\n\t\tfirst[a] = [i]\n\t\tans[i] = a\nF = True\nfor name in first.keys():\n\tif not F:\n\t\tbreak\n\tif len(first[name]) > 1:\n\t\tfor i in first[name]:\n\t\t\tc = name[:2] + s1[i]\n\t\t\tif c in second:\n\t\t\t\tF = False\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tsecond.add(c)\n\t\t\t\tans[i] = c\n\t\tfirst[name] = 0\n\ndef process(name):\n\tnonlocal F\n\tif F == False:\n\t\treturn\n\tif first[name] != 0 and name in second:\n\t\tt = first[name][0]\n\t\tc = name[:2] + s1[t]\n\t\tif c in second:\n\t\t\tF = False\n\t\t\treturn\n\t\telse:\n\t\t\tsecond.add(c)\n\t\t\tans[t] = c\n\t\t\tfirst[name] = 0\n\t\t\tif c in first.keys() and first[c] != 0:\n\t\t\t\tprocess(c)\n\t\t\t\t\n\n\nfor name in first.keys():\n\tprocess(name)\n\t\t\t\t\n\nif F:\n\tprint('YES')\n\tfor i in range(n):\n\t\tprint(ans[i])\nelse:\n\tprint('NO')\n", "def sol():\n\tn=int(input())\n\tclub=['']*n\n\tcity=['']*n\n\tmp={}\n\tfor i in range(n):\n\t\ts=input().split()\n\t\tclub[i]=s[0][:3]\n\t\tcity[i]=s[1][:1]\n\t\tif club[i] in mp:\n\t\t\tmp[club[i]].add(i)\n\t\telse:\n\t\t\tmp[club[i]]=set()\n\t\t\tmp[club[i]].add(i)\n\t\n\tdef rename(abc ,i):\n\t\tif abc in name:\n\t\t\treturn False\n\t\tname[abc]=i \n\t\tif abc in mp and len(mp[abc])==1:\n\t\t\tfor j in mp[abc] :\n\t\t\t\tif club[j][:2]+city[j] in name:\n\t\t\t\t\treturn False\n\t\t\t\t\n\t\t\t\tmp[abc].clear()\n\t\t\t\t#name[club[j][:2]+city[j]]=j \n\t\t\t\treturn rename(club[j][:2]+city[j],j)\n\t\treturn True            \n\t\t\n\tfor clubname in mp:\n\t\tif len(mp[clubname])>1:\n\t\t\tfor i in mp[clubname]:\n\t\t\t\tabc=club[i][:2]+city[i]\n\t\t\t\tif abc in name:\n\t\t\t\t\treturn False\n\t\t\t\tif not rename(abc,i):\n\t\t\t\t\treturn False\n\t\t\t\t\t\t\n\t\n\t\t\t\t\t\n\tfor clubname in mp:\n\t\tif len(mp[clubname])==1:\n\t\t\tfor i in mp[clubname]:\n\t\t\t\tname[clubname]=i \n\treturn True\nname={}\nif sol() :\n\tprint('YES')\n\tl=['']*len(name)\n\tfor s in name:\n\t\tl[name[s]]=s \n\tfor i in range(len(l)):\n\t\tprint(l[i])      \nelse:\n\tprint('NO')\n\t\t \n", "def sol():\n\tn=int(input())\n\tclub=['']*n\n\tcity=['']*n\n\tmp={}\n\tfor i in range(n):\n\t\ts=input().split()\n\t\tclub[i]=s[0][:3]\n\t\tcity[i]=s[1][:1]\n\t\tif club[i] in mp:\n\t\t\tmp[club[i]].add(i)\n\t\telse:\n\t\t\tmp[club[i]]=set()\n\t\t\tmp[club[i]].add(i)\n\t\n\tdef rename(abc ,i):\n\t\tif abc in name:\n\t\t\treturn False\n\t\tname[abc]=i \n\t\tif abc in mp and len(mp[abc])==1:\n\t\t\tfor j in mp[abc] :\n\t\t\t\tif club[j][:2]+city[j] in name:\n\t\t\t\t\treturn False\n\t\t\t\t\n\t\t\t\tmp[abc].clear()\n\t\t\t\t#name[club[j][:2]+city[j]]=j \n\t\t\t\treturn rename(club[j][:2]+city[j],j)\n\t\treturn True            \n\t\t\n\tfor clubname in mp:\n\t\tif len(mp[clubname])>1:\n\t\t\tfor i in mp[clubname]:\n\t\t\t\tabc=club[i][:2]+city[i]\n\t\t\t\tif abc in name:\n\t\t\t\t\treturn False\n\t\t\t\tif not rename(abc,i):\n\t\t\t\t\treturn False\n\t\t\t\t\t\t\n\t\n\t\t\t\t\t\n\tfor clubname in mp:\n\t\tif len(mp[clubname])==1:\n\t\t\tfor i in mp[clubname]:\n\t\t\t\tname[clubname]=i \n\treturn True\nname={}\n\nif sol() :\n\tprint('YES')\n\tl=['']*len(name)\n\tfor s in name:\n\t\tl[name[s]]=s \n\tfor i in range(len(l)):\n\t\tprint(l[i])      \nelse:\n\tprint('NO')\n\t\t \n", "from collections import defaultdict\nnames = int(input())\ninp = [input().split() for x in range(names)]\nchoice = []\nres = defaultdict(lambda: [])\nfor x, word in enumerate(inp):\n\tchoice.append(False)\n\tres[word[0][:3]].append(x)\n\nwhile True:\n\tchanges = []\n\tfor key in list(res.keys()):\n\t\tif len(res[key]) > 1:\n\t\t\t# All choice = False options must be changed\n\t\t\tremove = []\n\t\t\tfor i, index in enumerate(res[key]):\n\t\t\t\tif choice[index]: continue\n\t\t\t\tremove.append(i)\n\t\t\t\tchoice[index] = True\n\t\t\t\tchanges.append((inp[index][0][:2] + inp[index][1][0], index))\n\t\t\tfor i in remove[::-1]:\n\t\t\t\tdel res[key][i]\n\tif len(changes) == 0: break\n\tfor word, i in changes:\n\t\tres[word].append(i)\n\nbad = False\nfor key in list(res.keys()):\n\tif len(res[key]) > 1: bad = True\n\nif bad:\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")\n\tfor i in range(names):\n\t\tif choice[i]:\n\t\t\tprint(inp[i][0][:2] + inp[i][1][0])\n\t\telse:\n\t\t\tprint(inp[i][0][:3])\n", "from sys import stdin\n\nn = int(stdin.readline().strip())\nT,A = [],[]\nN,M = {},{}\nfor _ in range(n):\n\tt,h = stdin.readline().split()\n\tn1,n2 = t[:3],t[:2]+h[0]\n\tN[n1] = N.get(n1,0)+1\n\tT.append((n1,n2))\n\tA.append(n1)\n\ndef solve():\n\tfor i in range(n):\n\t\tn1,n2 = T[i]\n\t\tif n1 not in M and N[n1]==1:\n\t\t\tM[n1] = i\n\t\t\tcontinue\n\t\twhile n2 in M:\n\t\t\tj = M[n2]\n\t\t\tif n2==T[j][1]:\n\t\t\t\treturn False\n\t\t\tM[n2],A[i]=i,n2\n\t\t\ti,n2 = j,T[j][1]\n\t\telse:\n\t\t\tM[n2],A[i] = i,n2\n\treturn True\n\nif solve():\n\tprint(\"YES\")\n\tprint('\\n'.join(A))\nelse:\n\tprint(\"NO\")\n"], "id": "id9961"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9961", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["innokenty", 2], ["is", 2], ["a", 2], ["president", 2], ["of", 2], ["a", 2], ["new", 2], ["football", 2], ["league", 2], ["in", 2], ["byteland", 2], ["the", 2], ["first", 2], ["task", 2], ["he", 2], ["should", 2], ["do", 2], ["is", 2], ["to", 2], ["assign", 2], ["short", 2], ["names", 2], ["to", 2], ["all", 2], ["clubs", 2], ["to", 2], ["be", 2], ["shown", 2], ["on", 2], ["tv", 2], ["next", 2], ["to", 2], ["the", 2], ["score", 2], ["of", 2], ["course", 2], ["the", 2], ["short", 2], ["names", 2], ["should", 2], ["be", 2], ["distinct", 2], ["and", 2], ["innokenty", 2], ["wants", 2], ["that", 2], ["all", 2], ["short", 2], ["names", 2], ["consist", 2], ["of", 2], ["three", 2], ["letters", 2], ["each", 2], ["club", 2], ["s", 2], ["full", 2], ["name", 2], ["consist", 2], ["of", 2], ["two", 2], ["words", 2], ["the", 2], ["team", 2], ["s", 2], ["name", 2], ["and", 2], ["the", 2], ["hometown", 2], ["s", 2], ["name", 2], ["for", 2], ["example", 2], ["dinamo", 2], ["bytecity", 2], ["innokenty", 2], ["doesn", 2], ["t", 2], ["want", 2], ["to", 2], ["assign", 2], ["strange", 2], ["short", 2], ["names", 2], ["so", 2], ["he", 2], ["wants", 2], ["to", 2], ["choose", 2], ["such", 2], ["short", 2], ["names", 2], ["for", 2], ["each", 2], ["club", 2], ["that", 2], ["the", 2], ["short", 2], ["name", 2], ["is", 2], ["the", 2], ["same", 2], ["as", 2], ["three", 2], ["first", 2], ["letters", 2], ["of", 2], ["the", 2], ["team", 2], ["s", 2], ["name", 2], ["for", 2], ["example", 2], ["for", 2], ["the", 2], ["mentioned", 2], ["club", 2], ["it", 2], ["is", 2], ["din", 2], ["or", 2], ["the", 2], ["first", 2], ["two", 2], ["letters", 2], ["of", 2], ["the", 2], ["short", 2], ["name", 2], ["should", 2], ["be", 2], ["the", 2], ["same", 2], ["as", 2], ["the", 2], ["first", 2], ["two", 2], ["letters", 2], ["of", 2], ["the", 2], ["team", 2], ["s", 2], ["name", 2], ["while", 2], ["the", 2], ["third", 2], ["letter", 2], ["is", 2], ["the", 2], ["same", 2], ["as", 2], ["the", 2], ["first", 2], ["letter", 2], ["in", 2], ["the", 2], ["hometown", 2], ["s", 2], ["name", 2], ["for", 2], ["the", 2], ["mentioned", 2], ["club", 2], ["it", 2], ["is", 2], ["dib", 2], ["apart", 2], ["from", 2], ["this", 2], ["there", 2], ["is", 2], ["a", 2], ["rule", 2], ["that", 2], ["if", 2], ["for", 2], ["some", 2], ["club", 2], ["x", 2], ["the", 2], ["second", 2], ["option", 2], ["of", 2], ["short", 2], ["name", 2], ["is", 2], ["chosen", 2], ["then", 2], ["there", 2], ["should", 2], ["be", 2], ["no", 2], ["club", 2], ["for", 2], ["which", 2], ["the", 2], ["first", 2], ["option", 2], ["is", 2], ["chosen", 2], ["which", 2], ["is", 2], ["the", 2], ["same", 2], ["as", 2], ["the", 2], ["first", 2], ["option", 2], ["for", 2], ["the", 2], ["club", 2], ["x", 2], ["for", 2], ["example", 2], ["if", 2], ["the", 2], ["above", 2], ["mentioned", 2], ["club", 2], ["has", 2], ["short", 2], ["name", 2], ["dib", 2], ["then", 2], ["no", 2], ["club", 2], ["for", 2], ["which", 2], ["the", 2], ["first", 2], ["option", 2], ["is", 2], ["chosen", 2], ["can", 2], ["have", 2], ["short", 2], ["name", 2], ["equal", 2], ["to", 2], ["din", 2], ["however", 2], ["it", 2], ["is", 2], ["possible", 2], ["that", 2], ["some", 2], ["club", 2], ["have", 2], ["short", 2], ["name", 2], ["din", 2], ["where", 2], ["di", 2], ["are", 2], ["the", 2], ["first", 2], ["two", 2], ["letters", 2], ["of", 2], ["the", 2], ["team", 2], ["s", 2], ["name", 2], ["and", 2], ["n", 2], ["is", 2], ["the", 2], ["first", 2], ["letter", 2], ["of", 2], ["hometown", 2], ["s", 2], ["name", 2], ["of", 2], ["course", 2], ["no", 2], ["two", 2], ["teams", 2], ["can", 2], ["have", 2], ["the", 2], ["same", 2], ["short", 2], ["name", 2], ["help", 2], ["innokenty", 2], ["to", 2], ["choose", 2], ["a", 2], ["short", 2], ["name", 2], ["for", 2], ["each", 2], ["of", 2], ["the", 2], ["teams", 2], ["if", 2], ["this", 2], ["is", 2], ["impossible", 2], ["report", 2], ["that", 2], ["if", 2], ["there", 2], ["are", 2], ["multiple", 2], ["answer", 2], ["any", 2], ["of", 2], ["them", 2], ["will", 2], ["suit", 2], ["innokenty", 2], ["if", 2], ["for", 2], ["some", 2], ["team", 2], ["the", 2], ["two", 2], ["options", 2], ["of", 2], ["short", 2], ["name", 2], ["are", 2], ["equal", 2], ["then", 2], ["innokenty", 0], ["will", 0], ["formally", 0], ["think", 0], ["that", 0], ["only", 0], ["one", 0], ["of", 0], ["these", 0], ["options", 0], ["is", 0], ["chosen", 0], ["input", 0], ["the", 4], ["first", 3], ["line", 4], ["contains", 6], ["a", 6], ["single", 2], ["integer", 2], ["n", 2], ["1", 2], ["≤", 2], ["n", 2], ["≤", 2], ["1000", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["clubs", 2], ["in", 2], ["the", 2], ["league", 2], ["each", 2], ["of", 2], ["the", 2], ["next", 2], ["n", 2], ["lines", 2], ["contains", 2], ["two", 2], ["words", 2], ["—", 2], ["the", 2], ["team", 2], ["s", 2], ["name", 2], ["and", 2], ["the", 2], ["hometown", 2], ["s", 2], ["name", 2], ["for", 2], ["some", 2], ["club", 2], ["both", 2], ["team", 2], ["s", 2], ["name", 2], ["and", 2], ["hometown", 2], ["s", 2], ["name", 2], ["consist", 2], ["of", 2], ["uppercase", 2], ["english", 0], ["letters", 0], ["and", 0], ["have", 0], ["length", 0], ["at", 0], ["least", 0], ["3", 0], ["and", 0], ["at", 0], ["most", 0], ["20", 0], ["output", 0], ["it", 2], ["it", 2], ["is", 2], ["not", 2], ["possible", 2], ["to", 2], ["choose", 2], ["short", 2], ["names", 2], ["and", 2], ["satisfy", 2], ["all", 2], ["constraints", 2], ["print", 2], ["a", 2], ["single", 2], ["line", 2], ["no", 2], ["otherwise", 2], ["in", 2], ["the", 2], ["first", 2], ["line", 2], ["print", 2], ["yes", 2], ["then", 2], ["print", 2], ["n", 2], ["lines", 2], ["in", 2], ["each", 2], ["line", 2], ["print", 2], ["the", 2], ["chosen", 2], ["short", 2], ["name", 2], ["for", 2], ["the", 2], ["corresponding", 2], ["club", 2], ["print", 2], ["the", 2], ["clubs", 2], ["in", 2], ["the", 2], ["same", 2], ["order", 2], ["as", 2], ["they", 2], ["appeared", 0], ["in", 0], ["input", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["answers", 0], ["print", 0], ["any", 0], ["of", 0], ["them", 0], ["examples", 0], ["input", 0], ["2", 0], ["dinamo", 0], ["bytecity", 0], ["football", 0], ["moscow", 0], ["output", 0], ["yes", 0], ["din", 0], ["foo", 0], ["input", 0], ["2", 0], ["dinamo", 0], ["bytecity", 0], ["dinamo", 0], ["bitecity", 0], ["output", 0], ["no", 0], ["input", 0], ["3", 0], ["playfootball", 0], ["moscow", 0], ["playvolleyball", 0], ["spb", 0], ["gogo", 0], ["technocup", 0], ["output", 0], ["yes", 0], ["plm", 0], ["pls", 0], ["gog", 0], ["input", 0], ["3", 0], ["abc", 0], ["def", 0], ["abc", 0], ["efg", 0], ["abd", 0], ["ooo", 0], ["output", 0], ["yes", 0], ["abd", 0], ["abe", 0], ["abo", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["sample", 2], ["innokenty", 2], ["can", 2], ["choose", 2], ["first", 2], ["option", 2], ["for", 2], ["both", 2], ["clubs", 2], ["in", 2], ["the", 2], ["second", 2], ["example", 2], ["it", 2], ["is", 2], ["not", 2], ["possible", 2], ["to", 2], ["choose", 2], ["short", 2], ["names", 2], ["because", 2], ["it", 2], ["is", 2], ["not", 2], ["possible", 2], ["that", 2], ["one", 2], ["club", 2], ["has", 2], ["first", 2], ["option", 2], ["and", 2], ["the", 2], ["other", 2], ["has", 2], ["second", 2], ["option", 2], ["if", 2], ["the", 2], ["first", 2], ["options", 2], ["are", 2], ["equal", 2], ["for", 2], ["both", 2], ["clubs", 2], ["in", 2], ["the", 2], ["third", 2], ["example", 2], ["innokenty", 2], ["can", 2], ["choose", 2], ["the", 2], ["second", 2], ["options", 2], ["for", 2], ["the", 2], ["first", 2], ["two", 2], ["clubs", 2], ["and", 2], ["the", 2], ["first", 2], ["option", 2], ["for", 2], ["the", 2], ["third", 2], ["club", 2], ["in", 2], ["the", 2], ["fourth", 2], ["example", 2], ["note", 2], ["that", 2], ["it", 2], ["is", 2], ["possible", 2], ["that", 2], ["the", 2], ["chosen", 2], ["short", 2], ["name", 2], ["for", 2], ["some", 2], ["club", 2], ["x", 2], ["is", 2], ["the", 2], ["same", 2], ["as", 2], ["the", 2], ["first", 2], ["option", 2], ["of", 2], ["another", 2], ["club", 0], ["y", 0], ["if", 0], ["the", 0], ["first", 0], ["options", 0], ["of", 0], ["x", 0], ["and", 0], ["y", 0], ["are", 0], ["different", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.848, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4218666666666666, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9073783359497645, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.45225013082155946, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.848, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4218666666666666, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9073783359497645, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.45225013082155946, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["first", 0], ["second", 0], ["set", 0], ["s1", 0], ["0", 0], ["n", 0], ["ans", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["input", 0], ["split", 0], ["a", 0], ["a", 0], ["3", 0], ["b", 0], ["b", 0], ["0", 0], ["s1", 0], ["i", 0], ["b", 0], ["if", 0], ["a", 0], ["in", 0], ["first", 0], ["keys", 0], ["first", 0], ["a", 0], ["append", 0], ["i", 0], ["else", 0], ["first", 0], ["a", 0], ["i", 0], ["ans", 0], ["i", 0], ["a", 0], ["f", 0], ["true", 0], ["for", 0], ["name", 0], ["in", 0], ["first", 0], ["keys", 0], ["if", 0], ["not", 0], ["f", 0], ["break", 0], ["if", 0], ["len", 0], ["first", 0], ["name", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["first", 0], ["name", 0], ["c", 0], ["name", 0], ["2", 0], ["s1", 0], ["i", 0], ["if", 0], ["c", 0], ["in", 0], ["second", 0], ["f", 0], ["false", 0], ["break", 0], ["else", 0], ["second", 0], ["add", 0], ["c", 0], ["ans", 0], ["i", 0], ["c", 0], ["first", 0], ["name", 0], ["0", 0], ["def", 0], ["process", 0], ["name", 0], ["nonlocal", 0], ["f", 0], ["if", 0], ["f", 0], ["false", 0], ["return", 0], ["if", 0], ["first", 0], ["name", 0], ["0", 0], ["and", 0], ["name", 0], ["in", 0], ["second", 0], ["t", 0], ["first", 0], ["name", 0], ["0", 0], ["c", 0], ["name", 0], ["2", 0], ["s1", 0], ["t", 0], ["if", 0], ["c", 0], ["in", 0], ["second", 0], ["f", 0], ["false", 0], ["return", 0], ["else", 0], ["second", 0], ["add", 0], ["c", 0], ["ans", 0], ["t", 0], ["c", 0], ["first", 0], ["name", 0], ["0", 0], ["if", 0], ["c", 0], ["in", 0], ["first", 0], ["keys", 0], ["and", 0], ["first", 0], ["c", 0], ["0", 0], ["process", 0], ["c", 0], ["for", 0], ["name", 0], ["in", 0], ["first", 0], ["keys", 0], ["process", 0], ["name", 0], ["if", 0], ["f", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["ans", 0], ["i", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["sol", 0], ["n", 0], ["int", 0], ["input", 0], ["club", 0], ["n", 0], ["city", 0], ["n", 0], ["mp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["split", 0], ["club", 0], ["i", 0], ["s", 0], ["0", 0], ["3", 0], ["city", 0], ["i", 0], ["s", 0], ["1", 0], ["1", 0], ["if", 0], ["club", 0], ["i", 0], ["in", 0], ["mp", 0], ["mp", 0], ["club", 0], ["i", 0], ["add", 0], ["i", 0], ["else", 0], ["mp", 0], ["club", 0], ["i", 0], ["set", 0], ["mp", 0], ["club", 0], ["i", 0], ["add", 0], ["i", 0], ["def", 0], ["rename", 0], ["abc", 0], ["i", 0], ["if", 0], ["abc", 0], ["in", 0], ["name", 0], ["return", 0], ["false", 0], ["name", 0], ["abc", 0], ["i", 0], ["if", 0], ["abc", 0], ["in", 0], ["mp", 0], ["and", 0], ["len", 0], ["mp", 0], ["abc", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["mp", 0], ["abc", 0], ["if", 0], ["club", 0], ["j", 0], ["2", 0], ["city", 0], ["j", 0], ["in", 0], ["name", 0], ["return", 0], ["false", 0], ["mp", 0], ["abc", 0], ["clear", 0], ["name", 0], ["club", 0], ["j", 0], ["2", 0], ["city", 0], ["j", 0], ["j", 0], ["return", 0], ["rename", 0], ["club", 0], ["j", 0], ["2", 0], ["city", 0], ["j", 0], ["j", 0], ["return", 0], ["true", 0], ["for", 0], ["clubname", 0], ["in", 0], ["mp", 0], ["if", 0], ["len", 0], ["mp", 0], ["clubname", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["mp", 0], ["clubname", 0], ["abc", 0], ["club", 0], ["i", 0], ["2", 0], ["city", 0], ["i", 0], ["if", 0], ["abc", 0], ["in", 0], ["name", 0], ["return", 0], ["false", 0], ["if", 0], ["not", 0], ["rename", 0], ["abc", 0], ["i", 0], ["return", 0], ["false", 0], ["for", 0], ["clubname", 0], ["in", 0], ["mp", 0], ["if", 0], ["len", 0], ["mp", 0], ["clubname", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["mp", 0], ["clubname", 0], ["name", 0], ["clubname", 0], ["i", 0], ["return", 0], ["true", 0], ["name", 0], ["if", 0], ["sol", 0], ["print", 0], ["yes", 0], ["l", 0], ["len", 0], ["name", 0], ["for", 0], ["s", 0], ["in", 0], ["name", 0], ["l", 0], ["name", 0], ["s", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["print", 0], ["l", 0], ["i", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["sol", 0], ["n", 0], ["int", 0], ["input", 0], ["club", 0], ["n", 0], ["city", 0], ["n", 0], ["mp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["split", 0], ["club", 0], ["i", 0], ["s", 0], ["0", 0], ["3", 0], ["city", 0], ["i", 0], ["s", 0], ["1", 0], ["1", 0], ["if", 0], ["club", 0], ["i", 0], ["in", 0], ["mp", 0], ["mp", 0], ["club", 0], ["i", 0], ["add", 0], ["i", 0], ["else", 0], ["mp", 0], ["club", 0], ["i", 0], ["set", 0], ["mp", 0], ["club", 0], ["i", 0], ["add", 0], ["i", 0], ["def", 0], ["rename", 0], ["abc", 0], ["i", 0], ["if", 0], ["abc", 0], ["in", 0], ["name", 0], ["return", 0], ["false", 0], ["name", 0], ["abc", 0], ["i", 0], ["if", 0], ["abc", 0], ["in", 0], ["mp", 0], ["and", 0], ["len", 0], ["mp", 0], ["abc", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["mp", 0], ["abc", 0], ["if", 0], ["club", 0], ["j", 0], ["2", 0], ["city", 0], ["j", 0], ["in", 0], ["name", 0], ["return", 0], ["false", 0], ["mp", 0], ["abc", 0], ["clear", 0], ["name", 0], ["club", 0], ["j", 0], ["2", 0], ["city", 0], ["j", 0], ["j", 0], ["return", 0], ["rename", 0], ["club", 0], ["j", 0], ["2", 0], ["city", 0], ["j", 0], ["j", 0], ["return", 0], ["true", 0], ["for", 0], ["clubname", 0], ["in", 0], ["mp", 0], ["if", 0], ["len", 0], ["mp", 0], ["clubname", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["mp", 0], ["clubname", 0], ["abc", 0], ["club", 0], ["i", 0], ["2", 0], ["city", 0], ["i", 0], ["if", 0], ["abc", 0], ["in", 0], ["name", 0], ["return", 0], ["false", 0], ["if", 0], ["not", 0], ["rename", 0], ["abc", 0], ["i", 0], ["return", 0], ["false", 0], ["for", 0], ["clubname", 0], ["in", 0], ["mp", 0], ["if", 0], ["len", 0], ["mp", 0], ["clubname", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["mp", 0], ["clubname", 0], ["name", 0], ["clubname", 0], ["i", 0], ["return", 0], ["true", 0], ["name", 0], ["if", 0], ["sol", 0], ["print", 0], ["yes", 0], ["l", 0], ["len", 0], ["name", 0], ["for", 0], ["s", 0], ["in", 0], ["name", 0], ["l", 0], ["name", 0], ["s", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["print", 0], ["l", 0], ["i", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["names", 0], ["int", 0], ["input", 0], ["inp", 0], ["input", 0], ["split", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["names", 0], ["choice", 0], ["res", 0], ["defaultdict", 0], ["lambda", 0], ["for", 0], ["x", 0], ["word", 0], ["in", 0], ["enumerate", 0], ["inp", 0], ["choice", 0], ["append", 0], ["false", 0], ["res", 0], ["word", 0], ["0", 0], ["3", 0], ["append", 0], ["x", 0], ["while", 0], ["true", 0], ["changes", 0], ["for", 0], ["key", 0], ["in", 0], ["list", 0], ["res", 0], ["keys", 0], ["if", 0], ["len", 0], ["res", 0], ["key", 0], ["1", 0], ["all", 0], ["choice", 0], ["false", 0], ["options", 0], ["must", 0], ["be", 0], ["changed", 0], ["remove", 0], ["for", 0], ["i", 0], ["index", 0], ["in", 0], ["enumerate", 0], ["res", 0], ["key", 0], ["if", 0], ["choice", 0], ["index", 0], ["continue", 0], ["remove", 0], ["append", 0], ["i", 0], ["choice", 0], ["index", 0], ["true", 0], ["changes", 0], ["append", 0], ["inp", 0], ["index", 0], ["0", 0], ["2", 0], ["inp", 0], ["index", 0], ["1", 0], ["0", 0], ["index", 0], ["for", 0], ["i", 0], ["in", 0], ["remove", 0], ["1", 0], ["del", 0], ["res", 0], ["key", 0], ["i", 0], ["if", 0], ["len", 0], ["changes", 0], ["0", 0], ["break", 0], ["for", 0], ["word", 0], ["i", 0], ["in", 0], ["changes", 0], ["res", 0], ["word", 0], ["append", 0], ["i", 0], ["bad", 0], ["false", 0], ["for", 0], ["key", 0], ["in", 0], ["list", 0], ["res", 0], ["keys", 0], ["if", 0], ["len", 0], ["res", 0], ["key", 0], ["1", 0], ["bad", 0], ["true", 0], ["if", 0], ["bad", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["names", 0], ["if", 0], ["choice", 0], ["i", 0], ["print", 0], ["inp", 0], ["i", 0], ["0", 0], ["2", 0], ["inp", 0], ["i", 0], ["1", 0], ["0", 0], ["else", 0], ["print", 0], ["inp", 0], ["i", 0], ["0", 0], ["3", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["t", 0], ["a", 0], ["n", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["h", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["n1", 0], ["n2", 0], ["t", 0], ["3", 0], ["t", 0], ["2", 0], ["h", 0], ["0", 0], ["n", 0], ["n1", 0], ["n", 0], ["get", 0], ["n1", 0], ["0", 0], ["1", 0], ["t", 0], ["append", 0], ["n1", 0], ["n2", 0], ["a", 0], ["append", 0], ["n1", 0], ["def", 0], ["solve", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["n1", 0], ["n2", 0], ["t", 0], ["i", 0], ["if", 0], ["n1", 0], ["not", 0], ["in", 0], ["m", 0], ["and", 0], ["n", 0], ["n1", 0], ["1", 0], ["m", 0], ["n1", 0], ["i", 0], ["continue", 0], ["while", 0], ["n2", 0], ["in", 0], ["m", 0], ["j", 0], ["m", 0], ["n2", 0], ["if", 0], ["n2", 0], ["t", 0], ["j", 0], ["1", 0], ["return", 0], ["false", 0], ["m", 0], ["n2", 0], ["a", 0], ["i", 0], ["i", 0], ["n2", 0], ["i", 0], ["n2", 0], ["j", 0], ["t", 0], ["j", 0], ["1", 0], ["else", 0], ["m", 0], ["n2", 0], ["a", 0], ["i", 0], ["i", 0], ["n2", 0], ["return", 0], ["true", 0], ["if", 0], ["solve", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["join", 0], ["a", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nOne day Misha and Andrew were playing a very simple game. First, each player chooses an integer in the range from 1 to n. Let's assume that Misha chose number m, and Andrew chose number a.\n\nThen, by using a random generator they choose a random integer c in the range between 1 and n (any integer from 1 to n is chosen with the same probability), after which the winner is the player, whose number was closer to c. The boys agreed that if m and a are located on the same distance from c, Misha wins.\n\nAndrew wants to win very much, so he asks you to help him. You know the number selected by Misha, and number n. You need to determine which value of a Andrew must choose, so that the probability of his victory is the highest possible.\n\nMore formally, you need to find such integer a (1 ≤ a ≤ n), that the probability that $|c - a|<|c - m|$ is maximal, where c is the equiprobably chosen integer from 1 to n (inclusive).\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 ≤ m ≤ n ≤ 10^9) — the range of numbers in the game, and the number selected by Misha respectively.\n\n\n-----Output-----\n\nPrint a single number — such value a, that probability that Andrew wins is the highest. If there are multiple such values, print the minimum of them.\n\n\n-----Examples-----\nInput\n3 1\n\nOutput\n2\nInput\n4 3\n\nOutput\n2\n\n\n-----Note-----\n\nIn the first sample test: Andrew wins if c is equal to 2 or 3. The probability that Andrew wins is 2 / 3. If Andrew chooses a = 3, the probability of winning will be 1 / 3. If a = 1, the probability of winning is 0.\n\nIn the second sample test: Andrew wins if c is equal to 1 and 2. The probability that Andrew wins is 1 / 2. For other choices of a the probability of winning is less.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, m = list(map(int, input().split()))\nif n == 1:\n\tprint(1)\nelif m - 1 >= n - m:\n\tprint(m - 1)\nelse:\n\tprint(m + 1)\n", "def main():\n\tn, m = list(map(int, input().split()))\n\tif n == 1:\n\t\tprint(1)\n\telse:\n\t\tleft, right = max(0, m - 1), max(0, n - m)\n\t\tif left >= right:\n\t\t\tprint(m - 1)\n\t\telse:\n\t\t\tprint(m + 1)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import collections\ndef f():\n\tn,m  = [int(c) for c in input().split()]\n\n\tif m > n // 2:\n\t\treturn max(1, m - 1)\n\treturn min(n, m+1)\n\nprint(f())\n", "n, m = [int(i) for i  in input().split()]\nif n == 1:\n\tprint(1)\nelse:\n\tif n-m>m-1:\n\t\tprint(m+1)\n\telse:\n\t\tprint(m-1)\n", "n, m = (int(x) for x in input().split())\nif n == 1:\n\tprint(1)\nelse:\n\tif m - 1 >= n - m:\n\t\tprint(max(1, m-1))\n\telse:\n\t\tprint(min(m+1, n))\n", "\nimport math\nimport sys\n\nx=list(map(int,input().split()))\nn=x[0]\nm=x[1]\n\nif m>int(n/2):\n\ta=m-1\nelse:\n\ta=m+1\nif n==1 and m==1:\n\ta=1\nprint(a)\n\n\n\n\t\n\n\n\t\n", "n, m = list(map(int, input().split()))\nif n == 1 and m == 1:\n\tprint(1)\nelif n - m > m - 1:\n\tprint(m+1)\nelse:\n\tprint(m-1)\n", "import sys; sys.setrecursionlimit(1000000)\ndef solve():\n\tn, m, = rv()\n\tif n == 1:\n\t\treturn 1\n\ttoleft = m - 1\n\ttoright = n - m\n\tif toleft >= toright:\n\t\treturn m - 1\n\treturn m + 1\n\n\n\n\ndef rv(): return list(map(int, input().split()))\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nprint(solve())\n\n\n", "n, m = map(int, input().split())\nif n == 1:\n\tprint(1)\nelif n & 1:\n\tif (n + 1) // 2 <= m:\n\t\tprint(m - 1)\n\telse:\n\t\tprint(m + 1)\nelse:\n\tif n // 2 >= m:\n\t\tprint(m + 1)\n\telse:\n\t\tprint(m - 1)\n", "n,m = list(map(int, input().split()))\n\nif m == 1 and n == 1:\n\tprint (1)\nelif m == 1:\n\tprint (2)\nelif m == n:\n\tprint (n-1)\nelse:\n\tif m - 1 < n-m:\n\t\tprint (m+1)\n\telse:\n\t\tprint(m-1)\n", "n,m=[int(x) for x in input().split()]\nif n==1:\n\tprint(1)\nelif n&1:\n\tif m>n//2:\n\t\tprint(m-1)\n\telse:\n\t\tprint(m+1)\nelse:\n\tif m<=n/2:\n\t\tprint(m+1)\n\telse:\n\t\tprint(m-1)\n\t\n", "n,m=list(map(int,input().split(' ')))\nif n==1:\n\tprint(1)\nelse:\n\tif n%2==0:\n\t\tif m<=n//2:\n\t\t\tprint(m+1)\n\t\telse:\n\t\t\tprint(m-1)\n\telse:\n\t\tif m<=(n-1)//2:\n\t\t\tprint(m+1)\n\t\telse:\n\t\t\tprint(m-1)\n", "n, m = map(int, input().split(' '))\nif n == 1:\n\tprint(1)\n\treturn\nr = n-m\nl = m\nprint(m-1 if l > r else m+1)\n", "n, m = (int(i) for i in input().split())\ndef solve():\n\tif n == 1:\n\t\treturn 1\n\t# For n > 1, at least one of [a1, a2] must be valid\n\n\ta1 = m - 1\n\ta2 = m + 1\n\tif a1 < 1:\n\t\treturn a2\n\t\n\tif a2 > n:\n\t\treturn a1\n\n\tb1 = a1 # Numbers from 1 to a1 inclusive\n\tb2 = n - a2 + 1 # Numbers from a2 to n inclusive\n\treturn a1 if b1 >= b2 else a2\n\t# \"If there are multiple such values, print the minimum of them.\"\n\nprint(solve())\n", "n,m=map(int,input().split())\nif n==1: print(1)\nelif n-m>m-1: print(m+1)\nelse: print(m-1) \n", "def bf(n,m, a):\n\tk=0\n\tfor c in range(1, n+1):\n\t\tif abs(c-a)<abs(c-m):\n\t\t\tk+=1;\n\treturn k\ndef solve(n, m):\n\tmaxx = 0\n\tfor i in range(1, n+1):\n\t\tmaxx = max(maxx, bf(n, m, i))\n\tfor i in range(1, n+1):\n\t\tif bf(n, m, i) == maxx:\n\t\t\treturn(i)\n\n\ndef solve2(a, b):\n\tif a == 1 and b== 1:\n\t\treturn 1\n\tif a == b:\n\t\treturn a-1\n\tif b >= a:\n\t\treturn max(a-(b-a)+1, 1)\n\tk = b-1\n\tl = b+1\n\tc1 = a-l+1\n\tif k >= c1:\n\t\treturn k\n\telse:\n\t\treturn l\n\na, b = list(map(int, input().split(' ')))\nprint(solve2(a, b))\n", "n, m = map(int,input().split())\nif n == 1:\n\tprint(1)\n\treturn\nif m > n//2:\n\tprint(m-1)\nelse:\n\tprint(m+1)\n", "#!/usr/bin/env python3\n\"\"\"\nCodeforces Round #316 (Div. 2)\n\nProblem B. Simple Game\n\n@author yamaton\n@date 2015-08-13\n\"\"\"\n\nimport itertools as it\nimport functools\nimport operator\nimport collections\nimport math\nimport sys\n\n\ndef solve(n, m):\n\tif n == 1:\n\t\treturn 1\n\tif m <= n // 2:\n\t\treturn m + 1\n\telse:\n\t\treturn m - 1\n\n\ndef print_stderr(*args, **kwargs):\n\tprint(*args, file=sys.stderr, **kwargs)\n\n\ndef main():\n\t[n, m] = [int(i) for i in input().strip().split()]\n\tresult = solve(n, m)\n\tprint(result)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n, m = list(map(int,input().split()))\nif n != 1:\n\tif n % 2 == 0:\n\t\tif n // 2 >= m:\n\t\t\tprint(m+1)\n\t\telse:\n\t\t\tprint(m-1)\n\telse:\n\t\tn -= 1\n\t\tif n // 2 >= m:\n\t\t\tprint(m+1)\n\t\telse:\n\t\t\tprint(m-1)\nelse:\n\tprint(1)\n", "def main():\n\tn, m = [int(t) for t in input().split()]\n\n\tif n == 1:\n\t\tprint(1)\n\telif m <= n / 2.0:\n\t\tprint(m + 1)\n\telse:\n\t\tprint(m - 1)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\n\nx = str(input()).split()\nn = int(x[0])\nm = int(x[1])\n\nif n == 1:\n\tprint(1)\n\treturn\nif n // 2 < m:\n\tprint(m -1)\nelse:\n\tprint(m+1)\n", "n, m = (int(x) for x in input().split())\nif m == 1:\n\tif n == 1:\n\t\tprint(1)\n\telse:\n\t\tprint(2)\n\treturn\nif m == n:\n\tprint(n - 1)\n\treturn\nif m - 1 >= n - m:\n\tprint(m - 1)\nelse:\n\tprint(m + 1)\n", "n, m = list(map(int, input().split()))\nif n == 1 and m == 1:\n\tprint(1)\nelse:    \n\tif n - m > m - 1:\n\t\tprint(m + 1)\n\telse:\n\t\tprint(m - 1)\n", "import sys\n\n\nfin = sys.stdin \n#fin = open ('in', 'r')\n\n#fout = open ('out', 'w')\n\n[n, m] = [int(x) for x in fin.readline().split()]\n\n\n\nleft = m - 1\nright = n - m\n\nif left >= right:\n\tprint(max(m-1, 1))\nelse:\n\tprint(min(m + 1, n))\n"], "id": "id7470"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7470", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["one", 4], ["day", 4], ["misha", 4], ["and", 4], ["andrew", 4], ["were", 4], ["playing", 4], ["a", 4], ["very", 4], ["simple", 4], ["game", 4], ["first", 4], ["each", 4], ["player", 4], ["chooses", 4], ["an", 4], ["integer", 4], ["in", 4], ["the", 4], ["range", 4], ["from", 4], ["1", 4], ["to", 4], ["n", 4], ["let", 4], ["s", 4], ["assume", 4], ["that", 4], ["misha", 4], ["chose", 4], ["number", 4], ["m", 4], ["and", 4], ["andrew", 4], ["chose", 4], ["number", 4], ["a", 4], ["then", 4], ["by", 4], ["using", 4], ["a", 4], ["random", 4], ["generator", 4], ["they", 4], ["choose", 4], ["a", 4], ["random", 4], ["integer", 4], ["c", 4], ["in", 4], ["the", 4], ["range", 4], ["between", 4], ["1", 4], ["and", 4], ["n", 4], ["any", 4], ["integer", 4], ["from", 4], ["1", 4], ["to", 4], ["n", 4], ["is", 4], ["chosen", 4], ["with", 4], ["the", 4], ["same", 4], ["probability", 4], ["after", 4], ["which", 4], ["the", 4], ["winner", 4], ["is", 4], ["the", 4], ["player", 4], ["whose", 4], ["number", 4], ["was", 4], ["closer", 4], ["to", 4], ["c", 4], ["the", 4], ["boys", 4], ["agreed", 4], ["that", 4], ["if", 4], ["m", 4], ["and", 4], ["a", 4], ["are", 4], ["located", 4], ["on", 4], ["the", 4], ["same", 4], ["distance", 4], ["from", 4], ["c", 4], ["misha", 4], ["wins", 4], ["andrew", 4], ["wants", 4], ["to", 4], ["win", 4], ["very", 4], ["much", 4], ["so", 4], ["he", 4], ["asks", 4], ["you", 4], ["to", 4], ["help", 4], ["him", 4], ["you", 4], ["know", 4], ["the", 4], ["number", 4], ["selected", 4], ["by", 4], ["misha", 4], ["and", 4], ["number", 4], ["n", 4], ["you", 4], ["need", 4], ["to", 4], ["determine", 4], ["which", 4], ["value", 4], ["of", 4], ["a", 4], ["andrew", 4], ["must", 4], ["choose", 4], ["so", 4], ["that", 4], ["the", 4], ["probability", 4], ["of", 4], ["his", 4], ["victory", 4], ["is", 4], ["the", 4], ["highest", 4], ["possible", 4], ["more", 4], ["formally", 4], ["you", 4], ["need", 4], ["to", 4], ["find", 4], ["such", 0], ["integer", 0], ["a", 0], ["1", 0], ["≤", 0], ["a", 0], ["≤", 0], ["n", 0], ["that", 0], ["the", 0], ["probability", 0], ["that", 0], ["c", 0], ["a", 0], ["c", 0], ["m", 0], ["is", 4], ["maximal", 4], ["where", 1], ["c", 1], ["is", 1], ["the", 1], ["equiprobably", 1], ["chosen", 1], ["integer", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["inclusive", 1], ["input", 1], ["the", 5], ["first", 5], ["line", 5], ["contains", 1], ["two", 1], ["integers", 1], ["n", 1], ["and", 1], ["m", 1], ["1", 1], ["≤", 1], ["m", 1], ["≤", 1], ["n", 1], ["≤", 1], ["10", 1], ["9", 1], ["—", 4], ["the", 4], ["range", 4], ["of", 1], ["numbers", 1], ["in", 1], ["the", 1], ["game", 1], ["and", 1], ["the", 1], ["number", 1], ["selected", 1], ["by", 1], ["misha", 1], ["respectively", 1], ["output", 1], ["print", 4], ["a", 4], ["single", 4], ["number", 4], ["—", 4], ["such", 4], ["value", 4], ["a", 4], ["that", 4], ["probability", 4], ["that", 4], ["andrew", 4], ["wins", 4], ["is", 4], ["the", 4], ["highest", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["such", 0], ["values", 0], ["print", 0], ["the", 0], ["minimum", 0], ["of", 0], ["them", 0], ["examples", 0], ["input", 0], ["3", 0], ["1", 0], ["output", 0], ["2", 0], ["input", 0], ["4", 0], ["3", 0], ["output", 0], ["2", 0], ["note", 0], ["in", 3], ["the", 3], ["first", 3], ["sample", 3], ["test", 3], ["andrew", 3], ["wins", 3], ["if", 3], ["c", 3], ["is", 3], ["equal", 3], ["to", 3], ["2", 3], ["or", 3], ["3", 3], ["the", 3], ["probability", 3], ["that", 3], ["andrew", 3], ["wins", 3], ["is", 3], ["2", 3], ["3", 3], ["if", 3], ["andrew", 3], ["chooses", 3], ["a", 3], ["3", 3], ["the", 3], ["probability", 3], ["of", 3], ["winning", 3], ["will", 3], ["be", 3], ["1", 3], ["3", 3], ["if", 3], ["a", 3], ["1", 3], ["the", 3], ["probability", 3], ["of", 3], ["winning", 3], ["is", 3], ["0", 3], ["in", 3], ["the", 3], ["second", 3], ["sample", 3], ["test", 3], ["andrew", 3], ["wins", 3], ["if", 3], ["c", 3], ["is", 3], ["equal", 3], ["to", 3], ["1", 3], ["and", 3], ["2", 3], ["the", 3], ["probability", 3], ["that", 3], ["andrew", 3], ["wins", 3], ["is", 3], ["1", 3], ["2", 0], ["for", 0], ["other", 0], ["choices", 0], ["of", 0], ["a", 0], ["the", 0], ["probability", 0], ["of", 0], ["winning", 0], ["is", 0], ["less", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8459214501510574, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3185297079556889, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9212827988338192, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4091350826044708, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8459214501510574, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3185297079556889, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9212827988338192, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4091350826044708, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["elif", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["left", 0], ["right", 0], ["max", 0], ["0", 0], ["m", 0], ["1", 0], ["max", 0], ["0", 0], ["n", 0], ["m", 0], ["if", 0], ["left", 0], ["right", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["collections", 0], ["def", 0], ["f", 0], ["n", 0], ["m", 0], ["int", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["m", 0], ["n", 0], ["2", 0], ["return", 0], ["max", 0], ["1", 0], ["m", 0], ["1", 0], ["return", 0], ["min", 0], ["n", 0], ["m", 0], ["1", 0], ["print", 0], ["f", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["n", 0], ["m", 0], ["m", 0], ["1", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["print", 0], ["max", 0], ["1", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["min", 0], ["m", 0], ["1", 0], ["n", 0], ["import", 0], ["math", 0], ["import", 0], ["sys", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["x", 0], ["0", 0], ["m", 0], ["x", 0], ["1", 0], ["if", 0], ["m", 0], ["int", 0], ["n", 0], ["2", 0], ["a", 0], ["m", 0], ["1", 0], ["else", 0], ["a", 0], ["m", 0], ["1", 0], ["if", 0], ["n", 0], ["1", 0], ["and", 0], ["m", 0], ["1", 0], ["a", 0], ["1", 0], ["print", 0], ["a", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["and", 0], ["m", 0], ["1", 0], ["print", 0], ["1", 0], ["elif", 0], ["n", 0], ["m", 0], ["m", 0], ["1", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["1000000", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["rv", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["1", 0], ["toleft", 0], ["m", 0], ["1", 0], ["toright", 0], ["n", 0], ["m", 0], ["if", 0], ["toleft", 0], ["toright", 0], ["return", 0], ["m", 0], ["1", 0], ["return", 0], ["m", 0], ["1", 0], ["def", 0], ["rv", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["rl", 0], ["n", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["sys", 0], ["hexversion", 0], ["50594544", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["test", 0], ["txt", 0], ["print", 0], ["solve", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["elif", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["1", 0], ["2", 0], ["m", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["if", 0], ["n", 0], ["2", 0], ["m", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["m", 0], ["1", 0], ["and", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["elif", 0], ["m", 0], ["1", 0], ["print", 0], ["2", 0], ["elif", 0], ["m", 0], ["n", 0], ["print", 0], ["n", 0], ["1", 0], ["else", 0], ["if", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["elif", 0], ["n", 0], ["1", 0], ["if", 0], ["m", 0], ["n", 0], ["2", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["if", 0], ["m", 0], ["n", 0], ["2", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["if", 0], ["m", 0], ["n", 0], ["2", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["if", 0], ["m", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["r", 0], ["n", 0], ["m", 0], ["l", 0], ["m", 0], ["print", 0], ["m", 0], ["1", 0], ["if", 0], ["l", 0], ["r", 0], ["else", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["solve", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["1", 0], ["for", 0], ["n", 0], ["1", 0], ["at", 0], ["least", 0], ["one", 0], ["of", 0], ["a1", 0], ["a2", 0], ["must", 0], ["be", 0], ["valid", 0], ["a1", 0], ["m", 0], ["1", 0], ["a2", 0], ["m", 0], ["1", 0], ["if", 0], ["a1", 0], ["1", 0], ["return", 0], ["a2", 0], ["if", 0], ["a2", 0], ["n", 0], ["return", 0], ["a1", 0], ["b1", 0], ["a1", 0], ["numbers", 0], ["from", 0], ["1", 0], ["to", 0], ["a1", 0], ["inclusive", 0], ["b2", 0], ["n", 0], ["a2", 0], ["1", 0], ["numbers", 0], ["from", 0], ["a2", 0], ["to", 0], ["n", 0], ["inclusive", 0], ["return", 0], ["a1", 0], ["if", 0], ["b1", 0], ["b2", 0], ["else", 0], ["a2", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["such", 0], ["values", 0], ["print", 0], ["the", 0], ["minimum", 0], ["of", 0], ["them", 0], ["print", 0], ["solve", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["elif", 0], ["n", 0], ["m", 0], ["m", 0], ["1", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["def", 0], ["bf", 0], ["n", 0], ["m", 0], ["a", 0], ["k", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["abs", 0], ["c", 0], ["a", 0], ["abs", 0], ["c", 0], ["m", 0], ["k", 0], ["1", 0], ["return", 0], ["k", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["maxx", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["maxx", 0], ["max", 0], ["maxx", 0], ["bf", 0], ["n", 0], ["m", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["bf", 0], ["n", 0], ["m", 0], ["i", 0], ["maxx", 0], ["return", 0], ["i", 0], ["def", 0], ["solve2", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["1", 0], ["and", 0], ["b", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["1", 0], ["if", 0], ["b", 0], ["a", 0], ["return", 0], ["max", 0], ["a", 0], ["b", 0], ["a", 0], ["1", 0], ["1", 0], ["k", 0], ["b", 0], ["1", 0], ["l", 0], ["b", 0], ["1", 0], ["c1", 0], ["a", 0], ["l", 0], ["1", 0], ["if", 0], ["k", 0], ["c1", 0], ["return", 0], ["k", 0], ["else", 0], ["return", 0], ["l", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["solve2", 0], ["a", 0], ["b", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["m", 0], ["n", 0], ["2", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["codeforces", 0], ["round", 0], ["316", 0], ["div", 0], ["2", 0], ["problem", 0], ["b", 0], ["simple", 0], ["game", 0], ["author", 0], ["yamaton", 0], ["date", 0], ["2015", 0], ["08", 0], ["13", 0], ["import", 0], ["itertools", 0], ["as", 0], ["it", 0], ["import", 0], ["functools", 0], ["import", 0], ["operator", 0], ["import", 0], ["collections", 0], ["import", 0], ["math", 0], ["import", 0], ["sys", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["1", 0], ["if", 0], ["m", 0], ["n", 0], ["2", 0], ["return", 0], ["m", 0], ["1", 0], ["else", 0], ["return", 0], ["m", 0], ["1", 0], ["def", 0], ["print", 0], ["stderr", 0], ["args", 0], ["kwargs", 0], ["print", 0], ["args", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["kwargs", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["result", 0], ["solve", 0], ["n", 0], ["m", 0], ["print", 0], ["result", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["if", 0], ["n", 0], ["2", 0], ["m", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["m", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["1", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["int", 0], ["t", 0], ["for", 0], ["t", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["elif", 0], ["m", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["x", 0], ["str", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["x", 0], ["0", 0], ["m", 0], ["int", 0], ["x", 0], ["1", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["n", 0], ["2", 0], ["m", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["m", 0], ["1", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["2", 0], ["return", 0], ["if", 0], ["m", 0], ["n", 0], ["print", 0], ["n", 0], ["1", 0], ["return", 0], ["if", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["and", 0], ["m", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["n", 0], ["m", 0], ["m", 0], ["1", 0], ["print", 0], ["m", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["1", 0], ["import", 0], ["sys", 0], ["fin", 0], ["sys", 0], ["stdin", 0], ["fin", 0], ["open", 0], ["in", 0], ["r", 0], ["fout", 0], ["open", 0], ["out", 0], ["w", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["fin", 0], ["readline", 0], ["split", 0], ["left", 0], ["m", 0], ["1", 0], ["right", 0], ["n", 0], ["m", 0], ["if", 0], ["left", 0], ["right", 0], ["print", 0], ["max", 0], ["m", 0], ["1", 0], ["1", 0], ["else", 0], ["print", 0], ["min", 0], ["m", 0], ["1", 0], ["n", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nSome people leave the lights at their workplaces on when they leave that is a waste of resources. As a hausmeister of DHBW, Sagheer waits till all students and professors leave the university building, then goes and turns all the lights off.\n\nThe building consists of n floors with stairs at the left and the right sides. Each floor has m rooms on the same line with a corridor that connects the left and right stairs passing by all the rooms. In other words, the building can be represented as a rectangle with n rows and m + 2 columns, where the first and the last columns represent the stairs, and the m columns in the middle represent rooms.\n\nSagheer is standing at the ground floor at the left stairs. He wants to turn all the lights off in such a way that he will not go upstairs until all lights in the floor he is standing at are off. Of course, Sagheer must visit a room to turn the light there off. It takes one minute for Sagheer to go to the next floor using stairs or to move from the current room/stairs to a neighboring room/stairs on the same floor. It takes no time for him to switch the light off in the room he is currently standing in. Help Sagheer find the minimum total time to turn off all the lights.\n\nNote that Sagheer does not have to go back to his starting position, and he does not have to visit rooms where the light is already switched off.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 ≤ n ≤ 15 and 1 ≤ m ≤ 100) — the number of floors and the number of rooms in each floor, respectively.\n\nThe next n lines contains the building description. Each line contains a binary string of length m + 2 representing a floor (the left stairs, then m rooms, then the right stairs) where 0 indicates that the light is off and 1 indicates that the light is on. The floors are listed from top to bottom, so that the last line represents the ground floor.\n\nThe first and last characters of each string represent the left and the right stairs, respectively, so they are always 0.\n\n\n-----Output-----\n\nPrint a single integer — the minimum total time needed to turn off all the lights.\n\n\n-----Examples-----\nInput\n2 2\n0010\n0100\n\nOutput\n5\n\nInput\n3 4\n001000\n000010\n000010\n\nOutput\n12\n\nInput\n4 3\n01110\n01110\n01110\n01110\n\nOutput\n18\n\n\n\n-----Note-----\n\nIn the first example, Sagheer will go to room 1 in the ground floor, then he will go to room 2 in the second floor using the left or right stairs.\n\nIn the second example, he will go to the fourth room in the ground floor, use right stairs, go to the fourth room in the second floor, use right stairs again, then go to the second room in the last floor.\n\nIn the third example, he will walk through the whole corridor alternating between the left and right stairs at each floor.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, m = list(map(int, input().split()))\nm += 2\nl = []\ndo = False\nfor i in range(n):\n\ts = input().strip()\n\tif s.find('1') != -1 or do:\n\t\tdo = True\n\t\tl.append(s)\nn = len(l)\nif n == 0:\n\tprint(0)\n\treturn\n\n\ndp = []\nfor i in range(n):\n\tdp.append([None] * 2)\n\nfor i in range(n):\n\tR = 0\n\tfor j in range(m):\n\t\tif l[i][j] == '1':\n\t\t\tR = j\n\tL = m - 1\n\tfor j in range(m - 1, -1, -1):\n\t\tif l[i][j] == '1':\n\t\t\tL = j\n\tif i == 0:\n\t\tdp[0][0] = R\n\t\tdp[0][1] = (m - 1 - L)\n\telse:\n\t\tdp[i][0] = min(dp[i - 1][0] + 2 * R, dp[i - 1][1] + (m - 1)) + 1\n\t\tdp[i][1] = min(dp[i - 1][0] + (m - 1), dp[i - 1][1] + 2 * (m - 1 - L)) + 1\n# print(dp)\nprint(dp[-1][0])\n", "def variant(cur):\n\tnonlocal minv\n\tif len(cur) < len(rooms):\n\t\tvariant(cur + [0])\n\t\tvariant(cur + [1])\n\telse:\n\t\tcurpos = 0\n\t\ttime = 0\n\t\tfor i in range(len(rooms) - 1):\n\t\t\tif curpos != cur[i]:\n\t\t\t\ttime += m + 1\n\t\t\t\tcurpos = cur[i]\n\t\t\telse:\n\t\t\t\ttime += 2 * rooms[i][curpos]\n\t\t\tif i != 0:\n\t\t\t\ttime += 1\n\t\ttime += rooms[-1][curpos] + 1\n\t\tif len(rooms) == 1:\n\t\t\ttime -= 1\n\t\tminv = min(minv, time)\n\n\n\nn, m = map(int, input().split())\nminv = 1000000000\nrooms = []\nstopdel = False\n\nfor i in range(n):\n\tline = input()\n\ta = 0\n\tfor j in range(m + 2):\n\t\tif line[j] == '1':\n\t\t\ta = m + 1 - j\n\t\t\tbreak\n\tb = 0\n\tfor j in range(m + 1, -1, -1):\n\t\tif line[j] == '1':\n\t\t\tb = j\n\t\t\tbreak\n\tif a != 0 or b != 0 or stopdel:\n\t\trooms.append((b, a))\n\t\tstopdel = True\n\nrooms = rooms[::-1]\n\nif not rooms:\n\tprint('0')\nelse:\n\tvariant([])\n\tprint(minv)\n", "def sol():\n\n\tn, m = map(int, input().split(' '))\n\n\tmapp = []\n\n\tfor a in range(n):\n\t\ts = list(input())\n\t\ts = [c == \"1\" for c in s]\n\t\tmapp.insert(0, s[1:-1])\n\n\tres = None\n\t#print(mapp)\n\n\tempty_floor = n\n\twhile True:\n\t\tlitup = False\n\t\tfor x in mapp[empty_floor-1]:\n\t\t\tif x:\n\t\t\t\tlitup = True\n\t\t\t\tbreak\n\t\tif not litup:\n\t\t\tempty_floor -= 1\n\t\telse:\n\t\t\tbreak\n\t\tif empty_floor < 0:\n\t\t\tbreak\n\n\tif empty_floor <= 0:\n\t\treturn 0\n\n\t#print(\"empty_floor\", empty_floor)\n\n\tfor comb in range(2**(empty_floor-1)):\n\t\ttemp = 0\n\t\tc = bin(comb)[2:]\n\t\tc = \"0\" * ((empty_floor-1)-len(c)) + c\n\t\tc = list(c)\n\t\tc = [x == \"1\" for x in c]\n\n\t\t#print(\"c\", c)\n\n\t\tlast = False # start from left\n\t\tif empty_floor != 1:\n\t\t\tfor i, x in enumerate(c):\n\t\t\t\tif x != last:\n\t\t\t\t\ttemp += m+1 + 1\n\t\t\t\telse:\n\t\t\t\t\tf = None\n\t\t\t\t\t#print(i)\n\t\t\t\t\t#print(\"last\", last)\n\t\t\t\t\tfor j, y in enumerate(mapp[i]):\n\t\t\t\t\t\tif y:\n\t\t\t\t\t\t\tf = j\n\t\t\t\t\t\t\tif last:\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\tif f is None:\n\t\t\t\t\t\ttemp += 1\n\t\t\t\t\telse:\n\t\t\t\t\t\tif last:\n\t\t\t\t\t\t\ttemp += 2 * (m - f) + 1\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\ttemp += 2 * (f + 1) + 1\n\t\t\t\tlast = x\n\n\n\t\t#final floor:\n\t\tf = None\n\t\tfor j, y in enumerate(mapp[empty_floor-1]):\n\t\t\tif y:\n\t\t\t\tf = j\n\t\t\t\tif last:\n\t\t\t\t\tbreak\n\t\tif f is not None:\n\t\t\t#print(f, \"f\")\n\t\t\tif c[-1]:\n\t\t\t\ttemp += m - f\n\t\t\telse:\n\t\t\t\ttemp += f + 1\n\n\t\tif res is None:\n\t\t\tres = temp\n\t\tres = min(res, temp)\n\n\t\t#print(c, temp)\n\n\n\treturn res\n\nprint(sol())\n", "n, m = map(int, input().split())\na = []\nfor i in range(n):\n\ta.append(input())\n# print(a)\nl = 0\nr = INF = 100000\nh = 0\nwhile h < n:\n\tif a[h] == '0' * (m + 2):\n\t\th += 1\n\telse:\n\t\tbreak\nif h != n:\n\tfor i in range(n - 1, h, -1):\n\t\tx = INF\n\t\ty = 0\n\t\tfor j in range(m + 2):\n\t\t\tif a[i][j] == '1':\n\t\t\t\tx = min(x, j)\n\t\t\t\ty = max(y, j)\n\t\tif x != INF:\n\t\t\tll = min(l + y * 2, r + m + 1)\n\t\t\trr = min(l + m + 1, r + (m + 1 - x) * 2)\n\t\t\tl = ll\n\t\t\tr = rr\n\t\t# print(i, l, r)\n\tx = INF\n\ty = 0\n\tfor j in range(m + 2):\n\t\tif a[h][j] == '1':\n\t\t\tx = min(x, j)\n\t\t\ty = max(y, j)\n\tans = min(l + y, r + (m + 1 - x))\n\tprint(ans + n - 1 - h)\nelse:\n\tprint(0)\n", "def minimum(floor,j,s,n,m):\n\tif(s==[]):\n\t\treturn 0\n\tif(floor==0):\n\t\tif(j==0):\n\t\t\treturn s[floor].rfind('1')\n\t\telse:\n\t\t\treturn m+1-s[floor].find('1')\n\tif(j==0):\n\t\treturn min(2*s[floor].rfind('1')+1+minimum(floor-1,0,s,n,m),m+2+minimum(floor-1,m+1,s,n,m))\n\telse:\n\t\treturn min(2*(m+1-s[floor].find('1'))+1+minimum(floor-1,m+1,s,n,m),m+2+minimum(floor-1,0,s,n,m))\n\ninp=input().split()\nn=int(inp[0])\nm=int(inp[1])\ns=[]\nfor i in range(n):\n\ts.append(input())\ncounter=0\nwhile(s!=[]):\n\tif(s[0].find('1')==-1):\n\t\tcounter+=1\n\t\ts.pop(0)\n\telse:\n\t\tbreak\ncounter2=0\ns2=[]\nfor val in s:\n\tif(val.find('1')==-1):\n\t\tcounter2+=1\n\telse:\n\t\ts2.append(val)\n\nprint(minimum(n-1-counter-counter2,0,s2,n,m)+counter2)\n", "n, m = list(map(int, input().split()))\nL = [list(input()) for i in range(n)]\nlight_floors = [n - i - 1 for i in range(n) if \"1\" in L[i]]\nif len(light_floors) == 0:\n\tprint(0)\n\treturn\nlimit = max(light_floors)\n\ndef rec(i, lst):\n\tif i == limit:\n\t\t# first: left\n\t\t# print(list(reversed(L[-1])))\n\t\tif \"1\" in L[-1]:\n\t\t\tcnt = m + 2 - list(reversed(L[-1])).index(\"1\") - 1\n\t\telse:\n\t\t\tcnt = 0\n\t\tnow = cnt\n\t\tfor j, l in enumerate(lst):\n\t\t\tif l == \"l\":\n\t\t\t\tcnt += now\n\t\t\t\tcnt += 1\n\t\t\t\tif \"1\" in L[-1 - j - 1]:\n\t\t\t\t\tnext_pos = (m + 2 - list(reversed(L[-1 - j - 1])).index(\"1\") - 1)\n\t\t\t\telse:\n\t\t\t\t\tnext_pos = 0\n\t\t\t\tcnt += next_pos\n\t\t\t\tnow = next_pos\n\t\t\telse:\n\t\t\t\tcnt += (m + 2 - now - 1)\n\t\t\t\tcnt += 1\n\t\t\t\tif \"1\" in L[-1 - j - 1]:\n\t\t\t\t\tnext_pos = L[-1 - j - 1].index(\"1\")\n\t\t\t\telse:\n\t\t\t\t\tnext_pos = m + 2 - 1\n\t\t\t\tcnt += (m + 2 - next_pos - 1)\n\t\t\t\tnow = next_pos\n\t\treturn cnt\n\n\treturn min(rec(i + 1, lst + [\"l\"]), rec(i + 1, lst + [\"r\"]))\n\n\nprint(rec(0, []))\n", "import itertools\n\nn, m = list(map(int, input().split()))\n\nfloors = []\nmax_lit = -1\nfor floor_n in range(n-1, -1, -1):\n\tcur_floor = input()\n\tfloors.insert(0, cur_floor)\n\tif max_lit == -1 and any(c == '1' for c in cur_floor):\n\t\tmax_lit = floor_n + 1\n\nif max_lit == -1:\n\tprint('0')\n\treturn\n\n\ndef calc_path(path):\n\tleft = True\n\tresult = 0\n\tfor floor in range(max_lit):\n\t\tswitch_stairs = path[floor]\n\t\tif left:\n\t\t\tpos = floors[floor].rfind('1')\n\t\t\tdist = 0 if pos == -1 else pos\n\t\telse:\n\t\t\tpos = floors[floor].find('1')\n\t\t\tdist = 0 if pos == -1 else m + 1 - pos\n\t\tis_last = floor == max_lit-1\n\t\tresult += dist\n\t\tif switch_stairs:\n\t\t\tif not is_last:\n\t\t\t\tresult += m + 1 - dist\n\t\t\tleft = not left\n\t\telse:\n\t\t\tif not is_last:\n\t\t\t\tresult += dist\n\t\tif not is_last:\n\t\t\tresult += 1\n\treturn result\n\n\nmin_v = -1\n\nfor p in itertools.product([False, True], repeat=max_lit):\n\tv = calc_path(p)\n\tif min_v == -1 or min_v > v:\n\t\tmin_v = v\n\nprint(min_v)\n", "def booly(s):\n\treturn bool(int(s))\n\nn, m = list(map(int, input().split()));\n\nnothing = \"0\"*(m+2);\n\na = [];\nfor i in range(n):\n\ta.append(input())\n\nfor i in range(n):\n\tif a[i] != nothing:\n\t\tbreak;\n\na = a[i:]\na.reverse();\n\nn = len(a)\n\n#print(a)\n\nleftA = [i.find(\"1\") for i in a]\nrightA = [i.rfind(\"1\") for i in a]\n\nfor i in range(n):\n\tif leftA[i] == -1:\n\t\tleftA[i] = m+1\n\tif rightA[i] == -1:\n\t\trightA[i] = 0\n\n#print(leftA, rightA);\n\nif len(a) == 1:\n\tprint( rightA[0])\n\treturn;\n\nleft = [None]*(n+1)\nright = [None]*(n+1)\n\nleft[0] = rightA[0]*2\nright[0] = m+1\n\nfor i in range(1,n-1):\n\tleft[i] = 1 + min(left[i-1] + rightA[i]*2, right[i-1] + m+1)\n\tright[i] = 1 + min(right[i-1] + (m+2-1-leftA[i])*2, left[i-1] + m+1)\n\n#print(left, right)\n\nprint((min(1 +\n\tleft[n-2] +\n\trightA[n-1],\n\t1 + right[n-2]\n\t+ (m+2 -1 -leftA[n-1]))));\n\n", "ans = 0\nn, m = map(int, input().split())\narr = [\"\"] + [input() for i in range(n)][::-1]\ndp = [[-1, 10 ** 9, 0] for i in range(n + 1)]\nz = 0\nfor i in range(1, 1 + n):\n\tz += arr[i].count(\"1\")\nfor i in range(1, n + 1):\n\tl = arr[i].find(\"1\")\n\tr = arr[i].rfind(\"1\")\n\tz -= arr[i].count(\"1\")\n\tif l != -1:\n\t\tdp[i][0] = min(dp[i - 1][0] + 2 * r, dp[i - 1][1] + m + 1) + 1\n\t\tdp[i][1] = min(dp[i - 1][0] + m + 1, dp[i - 1][1] + 2 * (m + 1 - l)) + 1\n\t\tdp[i][2] = min(dp[i - 1][0] + r, dp[i - 1][1] + (m + 1 - l)) + 1\n\telse:\n\t\tdp[i][0] = min(dp[i - 1][0], dp[i - 1][1] + m + 1) + 1\n\t\tdp[i][1] = min(dp[i - 1][0] + m + 1, dp[i - 1][1]) + 1\n\t\t\n\t#print(dp[i], l, r, arr[i][l], arr[i])\n\t#print(z, i)\n\tif z == 0:\n\t\tans = dp[i][2]\n\t\tbreak\nprint(ans)\n", "def gen(pr, n):\n\tnonlocal seq\n\tif len(pr) >= n:\n\t\tseq.append(pr)\n\telse:\n\t\tgen(pr + '0', n)\n\t\tgen(pr + '1', n)\n\n\nn, m = map(int, input().split())\nmatrix = []\npref = [[] for i in range(n)]\nseq = []\nfor i in range(n):\n\tmatrix.append(input()[1:m + 1])\n\tj = m - 1\n\twhile j >= 0 and matrix[i][j] == '0':\n\t\tj -= 1\n\ttmp1 = (j + 1) * 2\n\tj = 0\n\twhile j < m and matrix[i][j] == '0':\n\t\tj += 1\n\ttmp2 = (m - j) * 2\n\tpref[n - i - 1] = [tmp1, tmp2]\ni = n - 1\nwhile i >= 0 and pref[i] == [0, 0]:\n\ti -= 1\ngen('0', i + 1)\nn = i + 1\nmi = float('inf')\nfor i in seq:\n\tres = 0\n\tfor j in range(n - 1):\n\t\tif i[j] == i[j + 1]:\n\t\t\tres += pref[j][int(i[j])] + 1\n\t\telse:\n\t\t\tres += m + 2\n\tres += pref[n - 1][int(i[n - 1])] // 2\n\tif res < mi:\n\t\tmi = res\nprint(mi)\n", "n,m = map(int, input().split())\nh = []\nl = []\nr = []\nlast = -1\nfor i in range(n):\n\ts = input()\n\th.append(s)\ni=0\nfor s in reversed(h):\n\tlp, rp = m+1, 0\n\tfor j in range(len(s)):\n\t\tlet = s[j]\n\t\tif let == '1' and lp == m+1:\n\t\t\tlp = j\n\t\tif let == '1':\n\t\t\trp = j\n\tl.append(lp)\n\tr.append(rp)\n\tif r[i] != 0 or l[i] != m+1:\n\t\tlast = i\n\ti+=1\n\t\t\n\t\t\ndp = [[2*r[0], m + 1]] \nfor i in range(1,last):\n\tprev = dp[-1]\n\tml = min(prev[0] + 2*r[i], prev[1] + m + 1) + 1\n\trl = min(prev[1] + 2*(m+1 - l[i]), prev[0] + m+1) + 1\n\tdp.append([ml, rl])\n\t\nif last == 0:\n\tans = r[0]\nelif last == -1:\n\tans = 0\nelse:\n\tans = min(dp[-1][0] + r[last] + 1, dp[-1][1] + (m +1 - l[last]) + 1)\n\nprint(ans)\n", "import sys\n\ndef main():\n\tn,m = map(int,sys.stdin.readline().split())\n\tm+=2\n\tz = []\n\tfor i in range(n):\n\t\tz.append(sys.stdin.readline().rstrip())\n\n\tans = 0\n\ty = n-1\n\tx = 0\n\tq = [[x,y,ans]]\n\tfor i in range(n-1,-1,-1):\n\t\tfirst =-1\n\t\tlast = -1\n\t\tfor j in range(m):\n\t\t\tif z[i][j] == '1':\n\t\t\t\tif first == -1:\n\t\t\t\t\tfirst = j\n\t\t\t\tlast = j\n\t\tif first == -1 and last == -1:\n\t\t\tcontinue\n\t\tif i == n-1:\n\t\t\tq[0] = [last,n-1,last]\n\t\t\tcontinue\n\t\tif first == last :\n\t\t\tfor t in q:\n\t\t\t\tt[2]+= min(t[0]+first, m-1-t[0]+m-1-first) + t[1]-i\n\t\t\t\tt[0] = first\n\t\t\t\tt[1] = i\n\t\t\tcontinue\n\t\tsize = len(q)\n\t\tfor s in range(size):\n\t\t\tt = q[s]\n\t\t\tq.append([last,i,t[2]+t[0]+last+t[1]-i])\n\t\t\tt[2]+= m-1-t[0]+m-1-first + t[1] - i\n\t\t\tt[0] = first\n\t\t\tt[1] = i\n\t\t\tq[s] = t\n\tans = q[0][2]\n\tfor i in range(len(q)):\n\t\tif q[i][2] < ans:\n\t\t\tans = q[i][2]\n\n\tprint(ans)\n\n\nmain()\n", "import sys\n\ninf = float('inf')\nans = inf\n\ndef solve():\n\tnonlocal ans\n\tn, m = map(int, input().split())\n\troom = [[int(i) for i in input()] for j in range(n)]\n\troom.reverse()\n\n\texits = [False] * n\n\n\tfor i in range(n - 1, -1, -1):\n\t\tif any(room[i]):\n\t\t\texits[i] = True\n\n\t\tif i - 1 >= 0:\n\t\t\texits[i - 1] |= exits[i]\n\n\t# print(exits)\n\n\tif not exits[0]:\n\t\tans = 0\n\telse:\n\t\tdfs(0, n, m, room, exits, 0, 0)\n\n\tprint(ans)\n\ndef dfs(floor, n, m, room, exits, pos, move):\n\tnonlocal ans\n\n\tk = -1\n\n\tif pos == 0:\n\t\tfor j in range(m + 1, -1, -1):\n\t\t\tif room[floor][j]:\n\t\t\t\tk = j\n\t\t\t\tbreak\n\t\telse:\n\t\t\tk = 0\n\telse:\n\t\tfor j in range(0, m + 2):\n\t\t\tif room[floor][j]:\n\t\t\t\tk = j\n\t\t\t\tbreak\n\t\telse:\n\t\t\tk = m + 1\n\n\tmove += abs(k - pos)\n\n\tif floor == n - 1 or not exits[floor + 1]:\n\t\tans = min(ans, move)\n\t\treturn\n\telse:\n\t\tdfs(floor + 1, n, m, room, exits, 0, move + k + 1)\n\t\tdfs(floor + 1, n, m, room, exits, m + 1, move + m + 1 - k + 1)\n\ndef __starting_point():\n\tsolve()\n__starting_point()\n", "#!/usr/bin/env python3\nimport sys\nfrom operator import itemgetter\n\ndef explore_floor(floor, light, from_, to, is_last_floor):\n\t\"\"\"from_, to is one of 'l' or 'r'\"\"\"\n\tif from_ != to:\n\t\treturn len(floor) - 1\n\telse:\n\t\tif light == 0:\n\t\t\treturn 0\n\t\telse:\n\t\t\tmul = 1 if is_last_floor else 2\n\t\t\tif from_ == 'l':\n\t\t\t\tindx = floor.rindex('1')\n\t\t\t\treturn indx * mul\n\t\t\telse:\n\t\t\t\tindx = floor.index('1')\n\t\t\t\treturn (len(floor) - indx - 1) * mul\n\ndef run_dp(n, m, floors, lights):\n\tdp_table = [[10 ** 10] * (n+1) for __ in range(4) ]\n\tdp_table[0][0] = -1\n\tdp_table[1][0] = 10 ** 10\n\tdp_table[2][0] = 10 ** 10\n\tdp_table[3][0] = 10 ** 10\n\tfor indx in range(n):\n\t\tdp_table[0][indx + 1] = min(dp_table[2][indx], dp_table[0][indx]) + explore_floor(floors[indx], lights[indx], 'l', 'l', indx == n-1) + 1\n\t\tdp_table[1][indx + 1] = min(dp_table[2][indx], dp_table[0][indx]) + explore_floor(floors[indx], lights[indx], 'l', 'r', indx == n-1) + 1\n\t\tdp_table[2][indx + 1] = min(dp_table[1][indx], dp_table[3][indx]) + explore_floor(floors[indx], lights[indx], 'r', 'l', indx == n-1) + 1\n\t\tdp_table[3][indx + 1] = min(dp_table[1][indx], dp_table[3][indx]) + explore_floor(floors[indx], lights[indx], 'r', 'r', indx == n-1) + 1\n\treturn dp_table\n\ndef get_virtual_max_floor(lights):\n\tn = len(lights)\n\tcnt = 0\n\tfor val in reversed(list([elem == 0 for elem in lights])):\n\t\tif val:\n\t\t\tcnt += 1\n\t\telse:\n\t\t\tbreak\n\treturn n - cnt\n\ndef main():\n\tn, m = list(map(int, sys.stdin.readline().split()))\n\tinp = sys.stdin.read().rstrip()\n\tfloors = list(reversed(inp.split(\"\\n\")))\n\tassert len(floors) == n\n\tlights = list([sum(map(int, floor)) for floor in floors])\n\tassert len(lights) == n\n\tvirtual_n = get_virtual_max_floor(lights)\n\t#sys.stderr.write(\"{}\\n\".format(lights))\n\t#sys.stderr.write(\"{}\\n\".format(virtual_n))\n\tif virtual_n == 0:\n\t\tprint(0)\n\t\treturn\n\tdp_table = run_dp(virtual_n, m, floors, lights)\n\t#sys.stderr.write(\"{}\\n\".format(dp_table))\n\tprint(min([dp_table[indx][virtual_n] for indx in range(4)]))\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "def simulate(n, m, first, last, mask):\n\tpos = 'left'\n\ttime = 0\n\n\tfor floor in range(n - 1):\n\t\taction = mask & 1\n\t\tmask >>= 1\n\n\t\tif pos == 'left':\n\t\t\tif action == 0:\n\t\t\t\ttime += 2 * last[floor]\n\t\t\telse:\n\t\t\t\ttime += m + 1\n\t\t\t\tpos = 'right'\n\t\telse:\n\t\t\tif action == 0:\n\t\t\t\ttime += 2 * (m + 1 - first[floor])\n\t\t\telse:\n\t\t\t\ttime += m + 1\n\t\t\t\tpos = 'left'\n\n\t\ttime += 1\n\n\tif pos == 'left':\n\t\ttime += last[n - 1]\n\telse:\n\t\ttime += m + 1 - first[n - 1]\n\n\treturn time\n\n\ndef main():\n\tn, m = list(map(int, input().split()))\n\n\tbuilding = []\n\tfor i in range(n):\n\t\tbuilding.append(list(map(int, input())))\n\n\ti_max = None\n\tfor i in range(n):\n\t\tif any(x == 1 for x in building[i]):\n\t\t\ti_max = i\n\t\t\tbreak\n\n\tif i_max is None:\n\t\ti_max = n\n\tn = n - i_max\n\n\tif n == 0:\n\t\tprint(0)\n\t\treturn\n\n\tbuilding = building[::-1]\n\tbuilding = building[:n]\n\n\tfirst = [m + 1] * n\n\tlast = [0] * n\n\n\tfor i in range(n):\n\t\tfor j in range(m + 2):\n\t\t\tif building[i][j] == 1:\n\t\t\t\tif first[i] == m + 1:\n\t\t\t\t\tfirst[i] = j\n\t\t\t\tlast[i] = j\n\n\tmin_time = 10 * ((m + 1) * n + n)\n\tfor mask in range(2 ** (n - 1)):\n\t\tmin_time = min(min_time, simulate(n, m, first, last, mask))\n\n\tprint(min_time)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from itertools import dropwhile\n\n\nn, m = list(map(int, input().split()))\nm += 2\n\np = list(dropwhile(lambda line: '1' not in line, (input() for i in range(n))))\np.reverse()\naddition = len(p) - 1\np = list([line for line in p if '1' in line])\nn = len(p)\n\nif n == 0:\n\tprint(0)\n\treturn\n\nleft = [line.find('1') for line in p]\nright = [line.rfind('1') for line in p]\n\nans = float('inf')\nfor mask in range(2 ** n):\n\tcur_res = 0\n\tprev = 1\n\tfor i in range(n):\n\t\tgo_left = mask & (1 << i)\n\t\tif go_left and prev:\n\t\t\tcur_res += 2 * right[i]\n\t\telif (go_left and not prev) or (not go_left and prev):\n\t\t\tcur_res += m - 1\n\t\telif not go_left and not go_left:\n\t\t\tcur_res += 2 * (m - 1 - left[i])\n\t\tif i == n - 1:\n\t\t\tif go_left and prev:\n\t\t\t\tcur_res -= right[i]\n\t\t\telif not go_left and not prev:\n\t\t\t\tcur_res -= m - 1 - left[i]\n\t\t\telif go_left and not prev:\n\t\t\t\tcur_res -= left[i]\n\t\t\telif not go_left and prev:\n\t\t\t\tcur_res -= m - 1 - right[i]\n\t\tprev = go_left\n\tans = min(ans, cur_res)\n\nprint(ans + addition)\n", "def coun(pref):\n\tnow = 0\n\tfor i in range(n):\n\t\tpos = pref[i]\n\t\tif pos == 'l':\n\t\t\tif i < n - 1 and sum(check[(i + 1):]) > 0:\n\t\t\t\tnow += 1\n\t\t\t\tif \"1\" in mat[i]:\n\t\t\t\t\tif pref[i + 1] == \"r\":\n\t\t\t\t\t\tnow += (m + 1)\n\t\t\t\t\telse:\n\t\t\t\t\t\tnow += (2 * mat[i].rfind(\"1\"))\n\t\t\t\telse:\n\t\t\t\t\tif pref[i + 1] == 'r':\n\t\t\t\t\t\tnow += (m + 1)\n\t\t\telse:\n\t\t\t\tif \"1\" in mat[i]:\n\t\t\t\t\tnow += mat[i].rfind(\"1\")\n\t\telse:\n\t\t\tif i < n - 1 and sum(check[(i + 1):]) > 0:\n\t\t\t\tnow += 1\n\t\t\t\tif \"1\" in mat[i]:\n\t\t\t\t\tif pref[i + 1] == \"l\":\n\t\t\t\t\t\tnow += (m + 1)\n\t\t\t\t\telse:\n\t\t\t\t\t\tnow += (2 * (m + 1 - mat[i].find(\"1\")))\n\t\t\t\telse:\n\t\t\t\t\tif pref[i + 1] == 'l':\n\t\t\t\t\t\tnow += (m + 1)\n\t\t\telse:\n\t\t\t\tif \"1\" in mat[i]:\n\t\t\t\t\tnow += (m + 1 - mat[i].find(\"1\"))\n\treturn now\ndef gen(pref):\n\tnonlocal ans\n\tif len(pref) == n:\n\t\tans = min(ans, coun(pref))\n\t\treturn\n\tgen(pref + \"l\")\n\tgen(pref + \"r\")\nn, m = map(int, input().split())\nmat = [0] * n\nfor i in range(n):\n\tmat[i] = input()\nmat.reverse()\ncheck = [0] * n\nfor i in range(n):\n\tcheck[i] = mat[i].count(\"1\")\nans = 1000000000\ngen(\"l\")\nprint(ans)\n", "n, m = map(int, input().split())\na = [input() for i in range(n)]\ni = 0\nwhile i < n and a[i] == '0' * (m + 2): i += 1\na = a[i:]\nn = len(a)\ndp = [[10 ** 5, 10 ** 5] for i in range(n)]\nfor i in range(n):\n\tl, r = a[i].find('1'), a[i].rfind('1')\n\tif l == r == -1: l, r = m + 1, 0\n\tif i == 0:\n\t\tdp[0] = [r, m + 1 - l]\n\telse:\n\t\tdp[i][0] = min(dp[i - 1][0] + 2 * r, dp[i - 1][1] + (m + 1)) + 1\n\t\tdp[i][1] = min(dp[i - 1][0] + m + 1, dp[i - 1][1] + 2 * (m + 1 - l)) + 1\nans = dp[-1][0] if dp else 0\nprint(ans)\n", "from sys import stdin as fin\n# fin = open(\"cfr417b.in\", \"r\")\n\ndef f(i, csum, csl=True):\n\tnonlocal num_f, l_a, r_a, minv\n\tl, r = l_a[i], r_a[i]\n\tif i == num_f:\n\t\tcsum += r if csl else l\n\t\tminv = min(minv, csum)\n\telse:\n\t\tf(i + 1, csum + m + 2, not csl)\n\t\tf(i + 1, csum + (r if csl else l) * 2 + 1, csl)\n\t\t# print(num_f)\n\nn, m = list(map(int, fin.readline().split()))\narr = [list(int(sym) for sym in fin.readline().strip()) for i in range(n)]\ncsl = True\ncnt = 0\n# print(arr)\nborder = 0\nfor i in range(n):\n\tif 1 in arr[i]:\n\t\tbreak\n\telse:\n\t\tborder += 1\nl_a, r_a = [], []\nnum_f = -1\nminv = float('inf')\nfor i in range(n - 1, border - 1, -1):\n\tif 1 in arr[i]:\n\t\tl = arr[i].index(1)\n\t\tr = list(reversed(arr[i])).index(1)\n\t\tl = (m + 2 - l - 1)\n\t\tr = (m + 2 - r - 1)\n\telse:\n\t\tl = r = 0\n\t# print(l, r, m + 2 - l - 1, csl)\n\tl_a.append(l)\n\tr_a.append(r)\n\tnum_f += 1\n\tcontinue\nif num_f > -1:\n\tf(0, 0)\n\tprint(minv)\nelse:\n\tprint(0)\n", "INF = float('inf')\n\ndef solve(grid, n, m):\n\t# print('\\n'.join(map(str, grid)))\n\n\tdp = [[INF for _ in range(2)] for _ in range(n)]\n\n\tdp[0][0] = -1\n\tdp[0][1] = INF\n\n\tfor i in range(1, n):\n\t\toccur = [j for j in range(m+2) if grid[i-1][j] == '1']\n\n\t\tif not occur:\n\t\t\tdp[i][0] = min(dp[i][0], dp[i-1][0] + 1)\n\t\t\tdp[i][0] = min(dp[i][0], dp[i-1][1] + (m + 2))\n\n\t\t\tdp[i][1] = min(dp[i][1], dp[i-1][0] + (m + 2))\n\t\t\tdp[i][1] = min(dp[i][1], dp[i-1][1] + 1)\n\t\t\tcontinue\n\n\t\tdp[i][0] = min(dp[i][0], dp[i-1][0] + (2 * max(occur)) + 1)\n\t\tdp[i][0] = min(dp[i][0], dp[i-1][1] + (m + 2))\n\n\t\tdp[i][1] = min(dp[i][1], dp[i-1][0] + (m + 2))\n\t\tdp[i][1] = min(dp[i][1], dp[i-1][1] + (2 * (m + 2 - min(occur) - 1) + 1))\n\n\t# print('\\n'.join(map(str, dp)))\n\n\toccur = [j for j in range(m+2) if grid[n-1][j] == '1']\n\n\treturn min(dp[n-1][0] + max(occur) + 1, dp[n-1][1] + (m + 2 - min(occur)))\n\n\ndef __starting_point():\n\tn, m = list(map(int, input().split()))\n\n\tgrid = [input() for _ in range(n)]\n\tgrid.reverse()\n\n\tn_real = -1\n\tfor i in range(n-1, -1, -1):\n\t\tif '1' in grid[i]:\n\t\t\tn_real = i\n\t\t\tbreak\n\n\tif n_real == -1:\n\t\tprint(0)\n\telse:\n\t\tprint(solve(grid[:n_real+1], n_real+1, m))\n\n__starting_point()\n", "n,m = list(map(int, input().split()))\ninf = 10 ** 10\ndp = [[inf, inf] for i in range(n)]\na = []\nlast = -1\nfor i in range(n):\n\ttmp = input()\n\ttmp1 = []\n\tfor j in range(len(tmp)):\n\t\tif tmp[j] == \"1\":\n\t\t\ttmp1.append(1)\n\t\t\tif last == -1:\n\t\t\t\tlast = n - i - 1\n\t\telse:\n\t\t\ttmp1.append(0)\n\ta.append(tmp1)\na = a[::-1]\nleft = [-1] * n\nright = [-1] * n\nfor i in range(n):\n\tfor j in range(m + 2):\n\t\tif a[i][j] and left[i] == -1:\n\t\t\tleft[i] = j\n\t\tif a[i][j]:\n\t\t\tright[i] = j\nif last == -1:\n\tprint(0)\n\treturn\nif last == 0:\n\tprint(right[0])\n\treturn\n\t\t\t\ndp[0][0] = max(0, right[0] * 2)\ndp[0][1] = m + 1\nfor i in range(1,last):\n\tif right[i] != - 1:\n\t\tdp[i][0] = min(dp[i][0], dp[i - 1][0] + 1 + 2 * right[i])\n\telse:\n\t\tdp[i][0] = min(dp[i][0], dp[i - 1][0] + 1)\n\tdp[i][0] = min(dp[i][0], dp[i - 1][1] + m + 2)\n\tif left[i] != - 1:\n\t\tdp[i][1] = min(dp[i][1], dp[i - 1][1] + 1 + (m + 1 - left[i]) * 2)\n\telse:\n\t\tdp[i][1] = min(dp[i][1], dp[i - 1][1] + 1)\n\tdp[i][1] = min(dp[i][1], dp[i - 1][0] + m + 2)\n\t\nlf,rf = inf,inf\nif right[last] != -1:\n\tlf = dp[last - 1][0] + 1 + right[last]\nelse:\n\tlf = dp[last - 1][0]  + 1\nlf = min(lf, dp[last - 1][1] + m + 2)\n\nif left[last] != -1:\n\trf = dp[last - 1][1] + 1 + (m + 1 - left[last])\nelse:\n\trf = dp[last - 1][1] + 1\nrf = min(rf, dp[last - 1][0] + m + 2)\nprint(min(lf,rf))\n\n\n\t\n", "import sys\n\ninf = float('inf')\nans = inf\n\ndef solve():\n\tn, m = map(int, input().split())\n\ts = [None] * n\n\tfor i in range(n - 1, -1, -1):\n\t\ts[i] = [int(j) for j in input()]\n\n\te = [any(si) for si in s]\n\tes = e[:] + [False]\n\n\tfor i in range(n - 1, -1, -1):\n\t\tes[i] |= es[i + 1]\n\n\t# print(es)\n\n\tif not es[0]:\n\t\tprint(0)\n\telif es[0] and (not es[1]):\n\t\tk = -1\n\n\t\tfor j in range(m, 0, -1):\n\t\t\tif s[0][j]:\n\t\t\t\tk = j\n\t\t\t\tbreak\n\n\t\tprint(k)\n\telse:\n\t\tlim = 0\n\n\t\tfor i in range(n + 1):\n\t\t\tif not es[i]:\n\t\t\t\tlim = i - 1\n\t\t\t\tbreak\n\n\t\tif not e[0]:\n\t\t\tleft = 0\n\t\t\tright = m + 1\n\t\telse:\n\t\t\tfor j in range(m, 0, -1):\n\t\t\t\tif s[0][j]:\n\t\t\t\t\tkr = j\n\t\t\t\t\tbreak\n\n\t\t\tleft = 2*kr\n\t\t\tright = m + 1\n\n\t\t# print(left, right)\n\n\t\tfor i in range(1, lim):\n\t\t\tif not e[i]:\n\t\t\t\tleft, right = min(left + 1, right + m + 2), min(right + 1, left + m + 2)\n\t\t\telse:\n\t\t\t\tkr = kl = -1\n\n\t\t\t\tfor j in range(m, 0, -1):\n\t\t\t\t\tif s[i][j]:\n\t\t\t\t\t\tkr = j\n\t\t\t\t\t\tbreak\n\n\t\t\t\tfor j in range(1, m + 1):\n\t\t\t\t\tif s[i][j]:\n\t\t\t\t\t\tkl = j\n\t\t\t\t\t\tbreak\n\n\t\t\t\tleft, right = min(left + 1 + 2*kr, right + m + 2), min(right + 1 + 2*(m + 1 - kl), left + m + 2)\n\n\t\t\t# print(left, right)\n\n\t\tkr = kl = -1\n\n\t\tfor j in range(m, 0, -1):\n\t\t\tif s[lim][j]:\n\t\t\t\tkr = j\n\t\t\t\tbreak\n\n\t\tfor j in range(1, m + 1):\n\t\t\tif s[lim][j]:\n\t\t\t\tkl = j\n\t\t\t\tbreak\n\n\t\tans = min(left + 1 + kr, right + 1 + m + 1 - kl)\n\n\t\tprint(ans)\n\ndef __starting_point():\n\tsolve()\n__starting_point()\n", "import sys\n\ninf = float('inf')\nans = inf\n\ndef solve():\n\tn, m = map(int, input().split())\n\ts = [None] * n\n\tfor i in range(n - 1, -1, -1):\n\t\ts[i] = [int(j) for j in input()]\n\n\te = [any(si) for si in s]\n\tes = e[:] + [False]\n\n\tfor i in range(n - 1, -1, -1):\n\t\tes[i] |= es[i + 1]\n\n\t# print(es)\n\n\tif not es[0]:\n\t\tprint(0)\n\telif es[0] and (not es[1]):\n\t\tk = m + 1 - s[0][::-1].index(1)\n\t\tprint(k)\n\telse:\n\t\tlim = 0\n\n\t\tfor i in range(n + 1):\n\t\t\tif not es[i]:\n\t\t\t\tlim = i - 1\n\t\t\t\tbreak\n\n\t\tif not e[0]:\n\t\t\tleft = 0\n\t\t\tright = m + 1\n\t\telse:\n\t\t\tkr = m + 1 - s[0][::-1].index(1)\n\t\t\tleft = 2*kr\n\t\t\tright = m + 1\n\n\t\t# print(left, right)\n\n\t\tfor i in range(1, lim):\n\t\t\tif not e[i]:\n\t\t\t\tleft, right = min(left + 1, right + m + 2), min(right + 1, left + m + 2)\n\t\t\telse:\n\t\t\t\tkr = m + 1 - s[i][::-1].index(1)\n\t\t\t\tkl = s[i].index(1)\n\t\t\t\tleft, right = min(left + 1 + 2*kr, right + m + 2), min(right + 1 + 2*(m + 1 - kl), left + m + 2)\n\n\t\t\t# print(left, right)\n\n\t\tkr = m + 1 - s[lim][::-1].index(1)\n\t\tkl = s[lim].index(1)\n\n\t\tans = min(left + 1 + kr, right + 1 + m + 1 - kl)\n\n\t\tprint(ans)\n\ndef __starting_point():\n\tsolve()\n__starting_point()\n", "import sys\nfrom itertools import accumulate\nfrom operator import or_\n\ninf = float('inf')\n\ndef solve():\n\tn, m = map(int, input().split())\n\ts = [[int(j) for j in input()] for i in range(n)][::-1]\n\n\te = [any(si) for si in s]\n\tes = e[:] + [False]\n\tes = list(accumulate(es[::-1], or_))[::-1]\n\n\tif not es[0]:\n\t\tprint(0)\n\telse:\n\t\tlim = 0\n\n\t\tfor i in range(n + 1):\n\t\t\tif not es[i]:\n\t\t\t\tlim = i - 1\n\t\t\t\tbreak\n\n\t\tleft, right = -1, inf\n\n\t\tfor i in range(lim):\n\t\t\tif not e[i]:\n\t\t\t\tleft, right = min(left + 1, right + m + 2), min(right + 1, left + m + 2)\n\t\t\telse:\n\t\t\t\tkr = rindex(s[i], 1)\n\t\t\t\tkl = s[i].index(1)\n\t\t\t\tleft, right = min(left + 1 + 2*kr, right + m + 2), min(right + 1 + 2*(m + 1 - kl), left + m + 2)\n\n\t\tkr = rindex(s[lim], 1)\n\t\tkl = s[lim].index(1)\n\n\t\tans = min(left + 1 + kr, right + m + 2 - kl)\n\n\t\tprint(ans)\n\ndef rindex(arr, x):\n\treturn len(arr) - 1 - arr[::-1].index(x)\n\ndef __starting_point():\n\tsolve()\n__starting_point()\n", "from collections import Counter\nimport sys\n\ndef left_time(floor):\n\tlight_counter = Counter(floor)\n\t# print(light_counter)\n\t# print(light_counter['1'])\n\tif light_counter['1'] == 0:\n\t\treturn 0\n\telse:\n\t\tlast_light_search = 1\n\t\twhile last_light_search <= len(floor):\n\t\t\t# print(last_light_search)\n\t\t\tif floor[-last_light_search] == '1':\n\t\t\t\treturn((len(floor) - last_light_search) * 2)\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tlast_light_search += 1\n\t\t\n\ndef right_time(floor):\n\tlight_counter = Counter(floor)\n\tif light_counter['1'] == 0:\n\t\treturn 0\n\telse:\n\t\tlast_light_search = 0\n\t\twhile True:\n\t\t\tif floor[last_light_search] == '1':\n\t\t\t\treturn ((len(floor) - last_light_search - 1) * 2)\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tlast_light_search += 1\n\nfloors_nr, rooms_nr = (int(x) for x in input().split())\nbuilding_scheme = []\nworth_counting_flag = False\nfor i in range(floors_nr):\n\tfloor_i = input()\n\tc = Counter(floor_i)\n\tif not worth_counting_flag and c['1'] > 0:\n\t\tworth_counting_flag = True\n\tif worth_counting_flag:\n\t\tbuilding_scheme.append(floor_i)\n\nif len(building_scheme) == 0:\n\tprint(0)\n\treturn\n\t\noptimal_time = [(-1, 10000)]\n\nlast_floor = building_scheme[0]\nbuilding_scheme = building_scheme[1:]\nfor floor in building_scheme[::-1]:\n\tprefix_left, prefix_right = optimal_time[-1]\n\t\n\tkeep_right_left = rooms_nr + 1 + prefix_left + 1\n\tkeep_right_right = right_time(floor) + prefix_right + 1\n\tkeep_right = min(keep_right_left, keep_right_right)\n\t\n\tkeep_left_left = left_time(floor) + prefix_left + 1\n\tkeep_left_right = rooms_nr + 1 + prefix_right + 1\n\tkeep_left = min(keep_left_left, keep_left_right)\n\t\n\toptimal_time.append((keep_left, keep_right))\n\n# print(optimal_time)\n\nlast_floor_time = min(optimal_time[-1][0] + 1 + left_time(last_floor) // 2, optimal_time[-1][1] + 1 + right_time(last_floor) // 2)\nprint(last_floor_time)\n\t\n\t\n\n\n"], "id": "id5883"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5883", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["some", 1], ["people", 1], ["leave", 1], ["the", 1], ["lights", 1], ["at", 1], ["their", 1], ["workplaces", 1], ["on", 1], ["when", 1], ["they", 1], ["leave", 1], ["that", 1], ["is", 1], ["a", 1], ["waste", 1], ["of", 1], ["resources", 1], ["as", 1], ["a", 1], ["hausmeister", 1], ["of", 1], ["dhbw", 1], ["sagheer", 1], ["waits", 1], ["till", 1], ["all", 1], ["students", 1], ["and", 1], ["professors", 1], ["leave", 1], ["the", 1], ["university", 1], ["building", 1], ["then", 1], ["goes", 1], ["and", 1], ["turns", 1], ["all", 1], ["the", 1], ["lights", 1], ["off", 1], ["the", 1], ["building", 1], ["consists", 1], ["of", 1], ["n", 1], ["floors", 1], ["with", 1], ["stairs", 1], ["at", 1], ["the", 1], ["left", 1], ["and", 1], ["the", 1], ["right", 1], ["sides", 1], ["each", 1], ["floor", 1], ["has", 1], ["m", 1], ["rooms", 1], ["on", 1], ["the", 1], ["same", 1], ["line", 1], ["with", 1], ["a", 1], ["corridor", 1], ["that", 1], ["connects", 1], ["the", 1], ["left", 1], ["and", 1], ["right", 1], ["stairs", 1], ["passing", 1], ["by", 1], ["all", 1], ["the", 1], ["rooms", 1], ["in", 1], ["other", 1], ["words", 1], ["the", 1], ["building", 1], ["can", 1], ["be", 1], ["represented", 1], ["as", 1], ["a", 1], ["rectangle", 1], ["with", 1], ["n", 1], ["rows", 1], ["and", 1], ["m", 1], ["2", 1], ["columns", 1], ["where", 1], ["the", 1], ["first", 1], ["and", 1], ["the", 1], ["last", 1], ["columns", 1], ["represent", 1], ["the", 1], ["stairs", 1], ["and", 1], ["the", 1], ["m", 1], ["columns", 1], ["in", 1], ["the", 1], ["middle", 1], ["represent", 1], ["rooms", 1], ["sagheer", 1], ["is", 1], ["standing", 1], ["at", 1], ["the", 1], ["ground", 1], ["floor", 1], ["at", 1], ["the", 1], ["left", 1], ["stairs", 1], ["he", 1], ["wants", 1], ["to", 1], ["turn", 1], ["all", 1], ["the", 1], ["lights", 1], ["off", 1], ["in", 1], ["such", 1], ["a", 1], ["way", 1], ["that", 1], ["he", 1], ["will", 1], ["not", 1], ["go", 1], ["upstairs", 1], ["until", 1], ["all", 1], ["lights", 1], ["in", 1], ["the", 1], ["floor", 1], ["he", 1], ["is", 1], ["standing", 1], ["at", 1], ["are", 1], ["off", 1], ["of", 1], ["course", 1], ["sagheer", 1], ["must", 1], ["visit", 1], ["a", 1], ["room", 1], ["to", 1], ["turn", 1], ["the", 1], ["light", 1], ["there", 1], ["off", 1], ["it", 1], ["takes", 1], ["one", 1], ["minute", 1], ["for", 1], ["sagheer", 1], ["to", 1], ["go", 1], ["to", 1], ["the", 1], ["next", 1], ["floor", 1], ["using", 1], ["stairs", 1], ["or", 1], ["to", 1], ["move", 1], ["from", 1], ["the", 1], ["current", 1], ["room", 1], ["stairs", 1], ["to", 1], ["a", 1], ["neighboring", 1], ["room", 1], ["stairs", 1], ["on", 1], ["the", 1], ["same", 1], ["floor", 1], ["it", 1], ["takes", 1], ["no", 1], ["time", 1], ["for", 1], ["him", 1], ["to", 1], ["switch", 1], ["the", 1], ["light", 1], ["off", 1], ["in", 1], ["the", 1], ["room", 1], ["he", 1], ["is", 1], ["currently", 1], ["standing", 1], ["in", 1], ["help", 1], ["sagheer", 1], ["find", 1], ["the", 1], ["minimum", 1], ["total", 1], ["time", 1], ["to", 1], ["turn", 1], ["off", 1], ["all", 1], ["the", 1], ["lights", 1], ["note", 1], ["that", 1], ["sagheer", 1], ["does", 1], ["not", 1], ["have", 1], ["to", 1], ["go", 1], ["back", 1], ["to", 1], ["his", 1], ["starting", 1], ["position", 1], ["and", 1], ["he", 1], ["does", 1], ["not", 0], ["have", 0], ["to", 0], ["visit", 0], ["rooms", 0], ["where", 0], ["the", 0], ["light", 0], ["is", 0], ["already", 0], ["switched", 0], ["off", 0], ["input", 0], ["the", 17], ["first", 1], ["line", 1], ["contains", 1], ["two", 1], ["integers", 1], ["n", 1], ["and", 1], ["m", 1], ["1", 1], ["≤", 1], ["n", 1], ["≤", 1], ["15", 1], ["and", 1], ["1", 1], ["≤", 1], ["m", 1], ["≤", 1], ["100", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["floors", 1], ["and", 1], ["the", 1], ["number", 1], ["of", 1], ["rooms", 1], ["in", 1], ["each", 1], ["floor", 1], ["respectively", 1], ["the", 1], ["next", 1], ["n", 1], ["lines", 1], ["contains", 1], ["the", 1], ["building", 1], ["description", 1], ["each", 1], ["line", 1], ["contains", 1], ["a", 1], ["binary", 1], ["string", 1], ["of", 1], ["length", 1], ["m", 1], ["2", 1], ["representing", 1], ["a", 1], ["floor", 1], ["the", 1], ["left", 1], ["stairs", 1], ["then", 1], ["m", 1], ["rooms", 1], ["then", 1], ["the", 1], ["right", 1], ["stairs", 1], ["where", 1], ["0", 1], ["indicates", 1], ["that", 1], ["the", 1], ["light", 1], ["is", 1], ["off", 1], ["and", 1], ["1", 1], ["indicates", 1], ["that", 1], ["the", 1], ["light", 1], ["is", 1], ["on", 1], ["the", 1], ["floors", 1], ["are", 1], ["listed", 1], ["from", 1], ["top", 1], ["to", 1], ["bottom", 1], ["so", 1], ["that", 1], ["the", 1], ["last", 1], ["line", 1], ["represents", 1], ["the", 1], ["ground", 1], ["floor", 1], ["the", 1], ["first", 1], ["and", 1], ["last", 1], ["characters", 1], ["of", 1], ["each", 1], ["string", 1], ["represent", 1], ["the", 0], ["left", 0], ["and", 0], ["the", 0], ["right", 0], ["stairs", 0], ["respectively", 0], ["so", 0], ["they", 0], ["are", 0], ["always", 0], ["0", 0], ["output", 0], ["print", 1], ["a", 1], ["single", 1], ["integer", 1], ["—", 0], ["the", 0], ["minimum", 0], ["total", 0], ["time", 0], ["needed", 0], ["to", 0], ["turn", 0], ["off", 0], ["all", 0], ["the", 0], ["lights", 0], ["examples", 0], ["input", 0], ["2", 0], ["2", 0], ["0010", 0], ["0100", 0], ["output", 0], ["5", 0], ["input", 0], ["3", 0], ["4", 0], ["001000", 0], ["000010", 0], ["000010", 0], ["output", 0], ["12", 0], ["input", 0], ["4", 0], ["3", 0], ["01110", 0], ["01110", 0], ["01110", 0], ["01110", 0], ["output", 0], ["18", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["example", 1], ["sagheer", 1], ["will", 1], ["go", 1], ["to", 1], ["room", 1], ["1", 1], ["in", 1], ["the", 1], ["ground", 1], ["floor", 1], ["then", 1], ["he", 1], ["will", 1], ["go", 1], ["to", 1], ["room", 1], ["2", 1], ["in", 1], ["the", 1], ["second", 1], ["floor", 1], ["using", 1], ["the", 1], ["left", 1], ["or", 1], ["right", 1], ["stairs", 1], ["in", 1], ["the", 1], ["second", 1], ["example", 1], ["he", 1], ["will", 1], ["go", 1], ["to", 1], ["the", 1], ["fourth", 1], ["room", 1], ["in", 1], ["the", 1], ["ground", 1], ["floor", 1], ["use", 1], ["right", 1], ["stairs", 1], ["go", 1], ["to", 1], ["the", 1], ["fourth", 1], ["room", 1], ["in", 1], ["the", 1], ["second", 1], ["floor", 1], ["use", 1], ["right", 1], ["stairs", 1], ["again", 1], ["then", 1], ["go", 1], ["to", 1], ["the", 1], ["second", 1], ["room", 1], ["in", 1], ["the", 1], ["last", 1], ["floor", 1], ["in", 1], ["the", 1], ["third", 1], ["example", 1], ["he", 1], ["will", 1], ["walk", 1], ["through", 1], ["the", 1], ["whole", 0], ["corridor", 0], ["alternating", 0], ["between", 0], ["the", 0], ["left", 0], ["and", 0], ["right", 0], ["stairs", 0], ["at", 0], ["each", 0], ["floor", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8552123552123552, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8533954122189417, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9264150943396227, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9246392896781354, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8532818532818532, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8532818532818532, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9245283018867925, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9245283018867925, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["2", 0], ["l", 0], ["do", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["strip", 0], ["if", 0], ["s", 0], ["find", 0], ["1", 0], ["1", 0], ["or", 0], ["do", 0], ["do", 0], ["true", 0], ["l", 0], ["append", 0], ["s", 0], ["n", 0], ["len", 0], ["l", 0], ["if", 0], ["n", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dp", 0], ["append", 0], ["none", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["r", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["l", 0], ["i", 0], ["j", 0], ["1", 0], ["r", 0], ["j", 0], ["l", 0], ["m", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["l", 0], ["i", 0], ["j", 0], ["1", 0], ["l", 0], ["j", 0], ["if", 0], ["i", 0], ["0", 0], ["dp", 0], ["0", 0], ["0", 0], ["r", 0], ["dp", 0], ["0", 0], ["1", 0], ["m", 0], ["1", 0], ["l", 0], ["else", 0], ["dp", 0], ["i", 0], ["0", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["2", 0], ["r", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["m", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["m", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["2", 0], ["m", 0], ["1", 0], ["l", 0], ["1", 0], ["print", 0], ["dp", 0], ["print", 0], ["dp", 0], ["1", 0], ["0", 0], ["def", 0], ["variant", 0], ["cur", 0], ["nonlocal", 0], ["minv", 0], ["if", 0], ["len", 0], ["cur", 0], ["len", 0], ["rooms", 0], ["variant", 0], ["cur", 0], ["0", 0], ["variant", 0], ["cur", 0], ["1", 0], ["else", 0], ["curpos", 0], ["0", 0], ["time", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["rooms", 0], ["1", 0], ["if", 0], ["curpos", 0], ["cur", 0], ["i", 0], ["time", 0], ["m", 0], ["1", 0], ["curpos", 0], ["cur", 0], ["i", 0], ["else", 0], ["time", 0], ["2", 0], ["rooms", 0], ["i", 0], ["curpos", 0], ["if", 0], ["i", 0], ["0", 0], ["time", 0], ["1", 0], ["time", 0], ["rooms", 0], ["1", 0], ["curpos", 0], ["1", 0], ["if", 0], ["len", 0], ["rooms", 0], ["1", 0], ["time", 0], ["1", 0], ["minv", 0], ["min", 0], ["minv", 0], ["time", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["minv", 0], ["1000000000", 0], ["rooms", 0], ["stopdel", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["line", 0], ["input", 0], ["a", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["if", 0], ["line", 0], ["j", 0], ["1", 0], ["a", 0], ["m", 0], ["1", 0], ["j", 0], ["break", 0], ["b", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["line", 0], ["j", 0], ["1", 0], ["b", 0], ["j", 0], ["break", 0], ["if", 0], ["a", 0], ["0", 0], ["or", 0], ["b", 0], ["0", 0], ["or", 0], ["stopdel", 0], ["rooms", 0], ["append", 0], ["b", 0], ["a", 0], ["stopdel", 0], ["true", 0], ["rooms", 0], ["rooms", 0], ["1", 0], ["if", 0], ["not", 0], ["rooms", 0], ["print", 0], ["0", 0], ["else", 0], ["variant", 0], ["print", 0], ["minv", 0], ["def", 0], ["sol", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mapp", 0], ["for", 0], ["a", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["list", 0], ["input", 0], ["s", 0], ["c", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["mapp", 0], ["insert", 0], ["0", 0], ["s", 0], ["1", 0], ["1", 0], ["res", 0], ["none", 0], ["print", 0], ["mapp", 0], ["empty", 0], ["floor", 0], ["n", 0], ["while", 0], ["true", 0], ["litup", 0], ["false", 0], ["for", 0], ["x", 0], ["in", 0], ["mapp", 0], ["empty", 0], ["floor", 0], ["1", 0], ["if", 0], ["x", 0], ["litup", 0], ["true", 0], ["break", 0], ["if", 0], ["not", 0], ["litup", 0], ["empty", 0], ["floor", 0], ["1", 0], ["else", 0], ["break", 0], ["if", 0], ["empty", 0], ["floor", 0], ["0", 0], ["break", 0], ["if", 0], ["empty", 0], ["floor", 0], ["0", 0], ["return", 0], ["0", 0], ["print", 0], ["empty", 0], ["floor", 0], ["empty", 0], ["floor", 0], ["for", 0], ["comb", 0], ["in", 0], ["range", 0], ["2", 0], ["empty", 0], ["floor", 0], ["1", 0], ["temp", 0], ["0", 0], ["c", 0], ["bin", 0], ["comb", 0], ["2", 0], ["c", 0], ["0", 0], ["empty", 0], ["floor", 0], ["1", 0], ["len", 0], ["c", 0], ["c", 0], ["c", 0], ["list", 0], ["c", 0], ["c", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["c", 0], ["print", 0], ["c", 0], ["c", 0], ["last", 0], ["false", 0], ["start", 0], ["from", 0], ["left", 0], ["if", 0], ["empty", 0], ["floor", 0], ["1", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["c", 0], ["if", 0], ["x", 0], ["last", 0], ["temp", 0], ["m", 0], ["1", 0], ["1", 0], ["else", 0], ["f", 0], ["none", 0], ["print", 0], ["i", 0], ["print", 0], ["last", 0], ["last", 0], ["for", 0], ["j", 0], ["y", 0], ["in", 0], ["enumerate", 0], ["mapp", 0], ["i", 0], ["if", 0], ["y", 0], ["f", 0], ["j", 0], ["if", 0], ["last", 0], ["break", 0], ["if", 0], ["f", 0], ["is", 0], ["none", 0], ["temp", 0], ["1", 0], ["else", 0], ["if", 0], ["last", 0], ["temp", 0], ["2", 0], ["m", 0], ["f", 0], ["1", 0], ["else", 0], ["temp", 0], ["2", 0], ["f", 0], ["1", 0], ["1", 0], ["last", 0], ["x", 0], ["final", 0], ["floor", 0], ["f", 0], ["none", 0], ["for", 0], ["j", 0], ["y", 0], ["in", 0], ["enumerate", 0], ["mapp", 0], ["empty", 0], ["floor", 0], ["1", 0], ["if", 0], ["y", 0], ["f", 0], ["j", 0], ["if", 0], ["last", 0], ["break", 0], ["if", 0], ["f", 0], ["is", 0], ["not", 0], ["none", 0], ["print", 0], ["f", 0], ["f", 0], ["if", 0], ["c", 0], ["1", 0], ["temp", 0], ["m", 0], ["f", 0], ["else", 0], ["temp", 0], ["f", 0], ["1", 0], ["if", 0], ["res", 0], ["is", 0], ["none", 0], ["res", 0], ["temp", 0], ["res", 0], ["min", 0], ["res", 0], ["temp", 0], ["print", 0], ["c", 0], ["temp", 0], ["return", 0], ["res", 0], ["print", 0], ["sol", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["append", 0], ["input", 0], ["print", 0], ["a", 0], ["l", 0], ["0", 0], ["r", 0], ["inf", 0], ["100000", 0], ["h", 0], ["0", 0], ["while", 0], ["h", 0], ["n", 0], ["if", 0], ["a", 0], ["h", 0], ["0", 0], ["m", 0], ["2", 0], ["h", 0], ["1", 0], ["else", 0], ["break", 0], ["if", 0], ["h", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["h", 0], ["1", 0], ["x", 0], ["inf", 0], ["y", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["if", 0], ["a", 0], ["i", 0], ["j", 0], ["1", 0], ["x", 0], ["min", 0], ["x", 0], ["j", 0], ["y", 0], ["max", 0], ["y", 0], ["j", 0], ["if", 0], ["x", 0], ["inf", 0], ["ll", 0], ["min", 0], ["l", 0], ["y", 0], ["2", 0], ["r", 0], ["m", 0], ["1", 0], ["rr", 0], ["min", 0], ["l", 0], ["m", 0], ["1", 0], ["r", 0], ["m", 0], ["1", 0], ["x", 0], ["2", 0], ["l", 0], ["ll", 0], ["r", 0], ["rr", 0], ["print", 0], ["i", 0], ["l", 0], ["r", 0], ["x", 0], ["inf", 0], ["y", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["if", 0], ["a", 0], ["h", 0], ["j", 0], ["1", 0], ["x", 0], ["min", 0], ["x", 0], ["j", 0], ["y", 0], ["max", 0], ["y", 0], ["j", 0], ["ans", 0], ["min", 0], ["l", 0], ["y", 0], ["r", 0], ["m", 0], ["1", 0], ["x", 0], ["print", 0], ["ans", 0], ["n", 0], ["1", 0], ["h", 0], ["else", 0], ["print", 0], ["0", 0], ["def", 0], ["minimum", 0], ["floor", 0], ["j", 0], ["s", 0], ["n", 0], ["m", 0], ["if", 0], ["s", 0], ["return", 0], ["0", 0], ["if", 0], ["floor", 0], ["0", 0], ["if", 0], ["j", 0], ["0", 0], ["return", 0], ["s", 0], ["floor", 0], ["rfind", 0], ["1", 0], ["else", 0], ["return", 0], ["m", 0], ["1", 0], ["s", 0], ["floor", 0], ["find", 0], ["1", 0], ["if", 0], ["j", 0], ["0", 0], ["return", 0], ["min", 0], ["2", 0], ["s", 0], ["floor", 0], ["rfind", 0], ["1", 0], ["1", 0], ["minimum", 0], ["floor", 0], ["1", 0], ["0", 0], ["s", 0], ["n", 0], ["m", 0], ["m", 0], ["2", 0], ["minimum", 0], ["floor", 0], ["1", 0], ["m", 0], ["1", 0], ["s", 0], ["n", 0], ["m", 0], ["else", 0], ["return", 0], ["min", 0], ["2", 0], ["m", 0], ["1", 0], ["s", 0], ["floor", 0], ["find", 0], ["1", 0], ["1", 0], ["minimum", 0], ["floor", 0], ["1", 0], ["m", 0], ["1", 0], ["s", 0], ["n", 0], ["m", 0], ["m", 0], ["2", 0], ["minimum", 0], ["floor", 0], ["1", 0], ["0", 0], ["s", 0], ["n", 0], ["m", 0], ["inp", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["inp", 0], ["0", 0], ["m", 0], ["int", 0], ["inp", 0], ["1", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["append", 0], ["input", 0], ["counter", 0], ["0", 0], ["while", 0], ["s", 0], ["if", 0], ["s", 0], ["0", 0], ["find", 0], ["1", 0], ["1", 0], ["counter", 0], ["1", 0], ["s", 0], ["pop", 0], ["0", 0], ["else", 0], ["break", 0], ["counter2", 0], ["0", 0], ["s2", 0], ["for", 0], ["val", 0], ["in", 0], ["s", 0], ["if", 0], ["val", 0], ["find", 0], ["1", 0], ["1", 0], ["counter2", 0], ["1", 0], ["else", 0], ["s2", 0], ["append", 0], ["val", 0], ["print", 0], ["minimum", 0], ["n", 0], ["1", 0], ["counter", 0], ["counter2", 0], ["0", 0], ["s2", 0], ["n", 0], ["m", 0], ["counter2", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["light", 0], ["floors", 0], ["n", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["1", 0], ["in", 0], ["l", 0], ["i", 0], ["if", 0], ["len", 0], ["light", 0], ["floors", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["limit", 0], ["max", 0], ["light", 0], ["floors", 0], ["def", 0], ["rec", 0], ["i", 0], ["lst", 0], ["if", 0], ["i", 0], ["limit", 0], ["first", 0], ["left", 0], ["print", 0], ["list", 0], ["reversed", 0], ["l", 0], ["1", 0], ["if", 0], ["1", 0], ["in", 0], ["l", 0], ["1", 0], ["cnt", 0], ["m", 0], ["2", 0], ["list", 0], ["reversed", 0], ["l", 0], ["1", 0], ["index", 0], ["1", 0], ["1", 0], ["else", 0], ["cnt", 0], ["0", 0], ["now", 0], ["cnt", 0], ["for", 0], ["j", 0], ["l", 0], ["in", 0], ["enumerate", 0], ["lst", 0], ["if", 0], ["l", 0], ["l", 0], ["cnt", 0], ["now", 0], ["cnt", 0], ["1", 0], ["if", 0], ["1", 0], ["in", 0], ["l", 0], ["1", 0], ["j", 0], ["1", 0], ["next", 0], ["pos", 0], ["m", 0], ["2", 0], ["list", 0], ["reversed", 0], ["l", 0], ["1", 0], ["j", 0], ["1", 0], ["index", 0], ["1", 0], ["1", 0], ["else", 0], ["next", 0], ["pos", 0], ["0", 0], ["cnt", 0], ["next", 0], ["pos", 0], ["now", 0], ["next", 0], ["pos", 0], ["else", 0], ["cnt", 0], ["m", 0], ["2", 0], ["now", 0], ["1", 0], ["cnt", 0], ["1", 0], ["if", 0], ["1", 0], ["in", 0], ["l", 0], ["1", 0], ["j", 0], ["1", 0], ["next", 0], ["pos", 0], ["l", 0], ["1", 0], ["j", 0], ["1", 0], ["index", 0], ["1", 0], ["else", 0], ["next", 0], ["pos", 0], ["m", 0], ["2", 0], ["1", 0], ["cnt", 0], ["m", 0], ["2", 0], ["next", 0], ["pos", 0], ["1", 0], ["now", 0], ["next", 0], ["pos", 0], ["return", 0], ["cnt", 0], ["return", 0], ["min", 0], ["rec", 0], ["i", 0], ["1", 0], ["lst", 0], ["l", 0], ["rec", 0], ["i", 0], ["1", 0], ["lst", 0], ["r", 0], ["print", 0], ["rec", 0], ["0", 0], ["import", 0], ["itertools", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["floors", 0], ["max", 0], ["lit", 0], ["1", 0], ["for", 0], ["floor", 0], ["n", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["cur", 0], ["floor", 0], ["input", 0], ["floors", 0], ["insert", 0], ["0", 0], ["cur", 0], ["floor", 0], ["if", 0], ["max", 0], ["lit", 0], ["1", 0], ["and", 0], ["any", 0], ["c", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["cur", 0], ["floor", 0], ["max", 0], ["lit", 0], ["floor", 0], ["n", 0], ["1", 0], ["if", 0], ["max", 0], ["lit", 0], ["1", 0], ["print", 0], ["0", 0], ["return", 0], ["def", 0], ["calc", 0], ["path", 0], ["path", 0], ["left", 0], ["true", 0], ["result", 0], ["0", 0], ["for", 0], ["floor", 0], ["in", 0], ["range", 0], ["max", 0], ["lit", 0], ["switch", 0], ["stairs", 0], ["path", 0], ["floor", 0], ["if", 0], ["left", 0], ["pos", 0], ["floors", 0], ["floor", 0], ["rfind", 0], ["1", 0], ["dist", 0], ["0", 0], ["if", 0], ["pos", 0], ["1", 0], ["else", 0], ["pos", 0], ["else", 0], ["pos", 0], ["floors", 0], ["floor", 0], ["find", 0], ["1", 0], ["dist", 0], ["0", 0], ["if", 0], ["pos", 0], ["1", 0], ["else", 0], ["m", 0], ["1", 0], ["pos", 0], ["is", 0], ["last", 0], ["floor", 0], ["max", 0], ["lit", 0], ["1", 0], ["result", 0], ["dist", 0], ["if", 0], ["switch", 0], ["stairs", 0], ["if", 0], ["not", 0], ["is", 0], ["last", 0], ["result", 0], ["m", 0], ["1", 0], ["dist", 0], ["left", 0], ["not", 0], ["left", 0], ["else", 0], ["if", 0], ["not", 0], ["is", 0], ["last", 0], ["result", 0], ["dist", 0], ["if", 0], ["not", 0], ["is", 0], ["last", 0], ["result", 0], ["1", 0], ["return", 0], ["result", 0], ["min", 0], ["v", 0], ["1", 0], ["for", 0], ["p", 0], ["in", 0], ["itertools", 0], ["product", 0], ["false", 0], ["true", 0], ["repeat", 0], ["max", 0], ["lit", 0], ["v", 0], ["calc", 0], ["path", 0], ["p", 0], ["if", 0], ["min", 0], ["v", 0], ["1", 0], ["or", 0], ["min", 0], ["v", 0], ["v", 0], ["min", 0], ["v", 0], ["v", 0], ["print", 0], ["min", 0], ["v", 0], ["def", 0], ["booly", 0], ["s", 0], ["return", 0], ["bool", 0], ["int", 0], ["s", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["nothing", 0], ["0", 0], ["m", 0], ["2", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["append", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["nothing", 0], ["break", 0], ["a", 0], ["a", 0], ["i", 0], ["a", 0], ["reverse", 0], ["n", 0], ["len", 0], ["a", 0], ["print", 0], ["a", 0], ["lefta", 0], ["i", 0], ["find", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["righta", 0], ["i", 0], ["rfind", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["lefta", 0], ["i", 0], ["1", 0], ["lefta", 0], ["i", 0], ["m", 0], ["1", 0], ["if", 0], ["righta", 0], ["i", 0], ["1", 0], ["righta", 0], ["i", 0], ["0", 0], ["print", 0], ["lefta", 0], ["righta", 0], ["if", 0], ["len", 0], ["a", 0], ["1", 0], ["print", 0], ["righta", 0], ["0", 0], ["return", 0], ["left", 0], ["none", 0], ["n", 0], ["1", 0], ["right", 0], ["none", 0], ["n", 0], ["1", 0], ["left", 0], ["0", 0], ["righta", 0], ["0", 0], ["2", 0], ["right", 0], ["0", 0], ["m", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["left", 0], ["i", 0], ["1", 0], ["min", 0], ["left", 0], ["i", 0], ["1", 0], ["righta", 0], ["i", 0], ["2", 0], ["right", 0], ["i", 0], ["1", 0], ["m", 0], ["1", 0], ["right", 0], ["i", 0], ["1", 0], ["min", 0], ["right", 0], ["i", 0], ["1", 0], ["m", 0], ["2", 0], ["1", 0], ["lefta", 0], ["i", 0], ["2", 0], ["left", 0], ["i", 0], ["1", 0], ["m", 0], ["1", 0], ["print", 0], ["left", 0], ["right", 0], ["print", 0], ["min", 0], ["1", 0], ["left", 0], ["n", 0], ["2", 0], ["righta", 0], ["n", 0], ["1", 0], ["1", 0], ["right", 0], ["n", 0], ["2", 0], ["m", 0], ["2", 0], ["1", 0], ["lefta", 0], ["n", 0], ["1", 0], ["ans", 0], ["0", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dp", 0], ["1", 0], ["10", 0], ["9", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["z", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["1", 0], ["n", 0], ["z", 0], ["arr", 0], ["i", 0], ["count", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["l", 0], ["arr", 0], ["i", 0], ["find", 0], ["1", 0], ["r", 0], ["arr", 0], ["i", 0], ["rfind", 0], ["1", 0], ["z", 0], ["arr", 0], ["i", 0], ["count", 0], ["1", 0], ["if", 0], ["l", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["2", 0], ["r", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["m", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["m", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["2", 0], ["m", 0], ["1", 0], ["l", 0], ["1", 0], ["dp", 0], ["i", 0], ["2", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["r", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["m", 0], ["1", 0], ["l", 0], ["1", 0], ["else", 0], ["dp", 0], ["i", 0], ["0", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["m", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["m", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["print", 0], ["dp", 0], ["i", 0], ["l", 0], ["r", 0], ["arr", 0], ["i", 0], ["l", 0], ["arr", 0], ["i", 0], ["print", 0], ["z", 0], ["i", 0], ["if", 0], ["z", 0], ["0", 0], ["ans", 0], ["dp", 0], ["i", 0], ["2", 0], ["break", 0], ["print", 0], ["ans", 0], ["def", 0], ["gen", 0], ["pr", 0], ["n", 0], ["nonlocal", 0], ["seq", 0], ["if", 0], ["len", 0], ["pr", 0], ["n", 0], ["seq", 0], ["append", 0], ["pr", 0], ["else", 0], ["gen", 0], ["pr", 0], ["0", 0], ["n", 0], ["gen", 0], ["pr", 0], ["1", 0], ["n", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["matrix", 0], ["pref", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["seq", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["matrix", 0], ["append", 0], ["input", 0], ["1", 0], ["m", 0], ["1", 0], ["j", 0], ["m", 0], ["1", 0], ["while", 0], ["j", 0], ["0", 0], ["and", 0], ["matrix", 0], ["i", 0], ["j", 0], ["0", 0], ["j", 0], ["1", 0], ["tmp1", 0], ["j", 0], ["1", 0], ["2", 0], ["j", 0], ["0", 0], ["while", 0], ["j", 0], ["m", 0], ["and", 0], ["matrix", 0], ["i", 0], ["j", 0], ["0", 0], ["j", 0], ["1", 0], ["tmp2", 0], ["m", 0], ["j", 0], ["2", 0], ["pref", 0], ["n", 0], ["i", 0], ["1", 0], ["tmp1", 0], ["tmp2", 0], ["i", 0], ["n", 0], ["1", 0], ["while", 0], ["i", 0], ["0", 0], ["and", 0], ["pref", 0], ["i", 0], ["0", 0], ["0", 0], ["i", 0], ["1", 0], ["gen", 0], ["0", 0], ["i", 0], ["1", 0], ["n", 0], ["i", 0], ["1", 0], ["mi", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["seq", 0], ["res", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["i", 0], ["j", 0], ["1", 0], ["res", 0], ["pref", 0], ["j", 0], ["int", 0], ["i", 0], ["j", 0], ["1", 0], ["else", 0], ["res", 0], ["m", 0], ["2", 0], ["res", 0], ["pref", 0], ["n", 0], ["1", 0], ["int", 0], ["i", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["res", 0], ["mi", 0], ["mi", 0], ["res", 0], ["print", 0], ["mi", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["l", 0], ["r", 0], ["last", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["h", 0], ["append", 0], ["s", 0], ["i", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["reversed", 0], ["h", 0], ["lp", 0], ["rp", 0], ["m", 0], ["1", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["let", 0], ["s", 0], ["j", 0], ["if", 0], ["let", 0], ["1", 0], ["and", 0], ["lp", 0], ["m", 0], ["1", 0], ["lp", 0], ["j", 0], ["if", 0], ["let", 0], ["1", 0], ["rp", 0], ["j", 0], ["l", 0], ["append", 0], ["lp", 0], ["r", 0], ["append", 0], ["rp", 0], ["if", 0], ["r", 0], ["i", 0], ["0", 0], ["or", 0], ["l", 0], ["i", 0], ["m", 0], ["1", 0], ["last", 0], ["i", 0], ["i", 0], ["1", 0], ["dp", 0], ["2", 0], ["r", 0], ["0", 0], ["m", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["last", 0], ["prev", 0], ["dp", 0], ["1", 0], ["ml", 0], ["min", 0], ["prev", 0], ["0", 0], ["2", 0], ["r", 0], ["i", 0], ["prev", 0], ["1", 0], ["m", 0], ["1", 0], ["1", 0], ["rl", 0], ["min", 0], ["prev", 0], ["1", 0], ["2", 0], ["m", 0], ["1", 0], ["l", 0], ["i", 0], ["prev", 0], ["0", 0], ["m", 0], ["1", 0], ["1", 0], ["dp", 0], ["append", 0], ["ml", 0], ["rl", 0], ["if", 0], ["last", 0], ["0", 0], ["ans", 0], ["r", 0], ["0", 0], ["elif", 0], ["last", 0], ["1", 0], ["ans", 0], ["0", 0], ["else", 0], ["ans", 0], ["min", 0], ["dp", 0], ["1", 0], ["0", 0], ["r", 0], ["last", 0], ["1", 0], ["dp", 0], ["1", 0], ["1", 0], ["m", 0], ["1", 0], ["l", 0], ["last", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["m", 0], ["2", 0], ["z", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["z", 0], ["append", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["ans", 0], ["0", 0], ["y", 0], ["n", 0], ["1", 0], ["x", 0], ["0", 0], ["q", 0], ["x", 0], ["y", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["first", 0], ["1", 0], ["last", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["z", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["first", 0], ["1", 0], ["first", 0], ["j", 0], ["last", 0], ["j", 0], ["if", 0], ["first", 0], ["1", 0], ["and", 0], ["last", 0], ["1", 0], ["continue", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["q", 0], ["0", 0], ["last", 0], ["n", 0], ["1", 0], ["last", 0], ["continue", 0], ["if", 0], ["first", 0], ["last", 0], ["for", 0], ["t", 0], ["in", 0], ["q", 0], ["t", 0], ["2", 0], ["min", 0], ["t", 0], ["0", 0], ["first", 0], ["m", 0], ["1", 0], ["t", 0], ["0", 0], ["m", 0], ["1", 0], ["first", 0], ["t", 0], ["1", 0], ["i", 0], ["t", 0], ["0", 0], ["first", 0], ["t", 0], ["1", 0], ["i", 0], ["continue", 0], ["size", 0], ["len", 0], ["q", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["size", 0], ["t", 0], ["q", 0], ["s", 0], ["q", 0], ["append", 0], ["last", 0], ["i", 0], ["t", 0], ["2", 0], ["t", 0], ["0", 0], ["last", 0], ["t", 0], ["1", 0], ["i", 0], ["t", 0], ["2", 0], ["m", 0], ["1", 0], ["t", 0], ["0", 0], ["m", 0], ["1", 0], ["first", 0], ["t", 0], ["1", 0], ["i", 0], ["t", 0], ["0", 0], ["first", 0], ["t", 0], ["1", 0], ["i", 0], ["q", 0], ["s", 0], ["t", 0], ["ans", 0], ["q", 0], ["0", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["q", 0], ["if", 0], ["q", 0], ["i", 0], ["2", 0], ["ans", 0], ["ans", 0], ["q", 0], ["i", 0], ["2", 0], ["print", 0], ["ans", 0], ["main", 0], ["import", 0], ["sys", 0], ["inf", 0], ["float", 0], ["inf", 0], ["ans", 0], ["inf", 0], ["def", 0], ["solve", 0], ["nonlocal", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["room", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["room", 0], ["reverse", 0], ["exits", 0], ["false", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["any", 0], ["room", 0], ["i", 0], ["exits", 0], ["i", 0], ["true", 0], ["if", 0], ["i", 0], ["1", 0], ["0", 0], ["exits", 0], ["i", 0], ["1", 0], ["exits", 0], ["i", 0], ["print", 0], ["exits", 0], ["if", 0], ["not", 0], ["exits", 0], ["0", 0], ["ans", 0], ["0", 0], ["else", 0], ["dfs", 0], ["0", 0], ["n", 0], ["m", 0], ["room", 0], ["exits", 0], ["0", 0], ["0", 0], ["print", 0], ["ans", 0], ["def", 0], ["dfs", 0], ["floor", 0], ["n", 0], ["m", 0], ["room", 0], ["exits", 0], ["pos", 0], ["move", 0], ["nonlocal", 0], ["ans", 0], ["k", 0], ["1", 0], ["if", 0], ["pos", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["room", 0], ["floor", 0], ["j", 0], ["k", 0], ["j", 0], ["break", 0], ["else", 0], ["k", 0], ["0", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["m", 0], ["2", 0], ["if", 0], ["room", 0], ["floor", 0], ["j", 0], ["k", 0], ["j", 0], ["break", 0], ["else", 0], ["k", 0], ["m", 0], ["1", 0], ["move", 0], ["abs", 0], ["k", 0], ["pos", 0], ["if", 0], ["floor", 0], ["n", 0], ["1", 0], ["or", 0], ["not", 0], ["exits", 0], ["floor", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["move", 0], ["return", 0], ["else", 0], ["dfs", 0], ["floor", 0], ["1", 0], ["n", 0], ["m", 0], ["room", 0], ["exits", 0], ["0", 0], ["move", 0], ["k", 0], ["1", 0], ["dfs", 0], ["floor", 0], ["1", 0], ["n", 0], ["m", 0], ["room", 0], ["exits", 0], ["m", 0], ["1", 0], ["move", 0], ["m", 0], ["1", 0], ["k", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["from", 0], ["operator", 0], ["import", 0], ["itemgetter", 0], ["def", 0], ["explore", 0], ["floor", 0], ["floor", 0], ["light", 0], ["from", 0], ["to", 0], ["is", 0], ["last", 0], ["floor", 0], ["from", 0], ["to", 0], ["is", 0], ["one", 0], ["of", 0], ["l", 0], ["or", 0], ["r", 0], ["if", 0], ["from", 0], ["to", 0], ["return", 0], ["len", 0], ["floor", 0], ["1", 0], ["else", 0], ["if", 0], ["light", 0], ["0", 0], ["return", 0], ["0", 0], ["else", 0], ["mul", 0], ["1", 0], ["if", 0], ["is", 0], ["last", 0], ["floor", 0], ["else", 0], ["2", 0], ["if", 0], ["from", 0], ["l", 0], ["indx", 0], ["floor", 0], ["rindex", 0], ["1", 0], ["return", 0], ["indx", 0], ["mul", 0], ["else", 0], ["indx", 0], ["floor", 0], ["index", 0], ["1", 0], ["return", 0], ["len", 0], ["floor", 0], ["indx", 0], ["1", 0], ["mul", 0], ["def", 0], ["run", 0], ["dp", 0], ["n", 0], ["m", 0], ["floors", 0], ["lights", 0], ["dp", 0], ["table", 0], ["10", 0], ["10", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["4", 0], ["dp", 0], ["table", 0], ["0", 0], ["0", 0], ["1", 0], ["dp", 0], ["table", 0], ["1", 0], ["0", 0], ["10", 0], ["10", 0], ["dp", 0], ["table", 0], ["2", 0], ["0", 0], ["10", 0], ["10", 0], ["dp", 0], ["table", 0], ["3", 0], ["0", 0], ["10", 0], ["10", 0], ["for", 0], ["indx", 0], ["in", 0], ["range", 0], ["n", 0], ["dp", 0], ["table", 0], ["0", 0], ["indx", 0], ["1", 0], ["min", 0], ["dp", 0], ["table", 0], ["2", 0], ["indx", 0], ["dp", 0], ["table", 0], ["0", 0], ["indx", 0], ["explore", 0], ["floor", 0], ["floors", 0], ["indx", 0], ["lights", 0], ["indx", 0], ["l", 0], ["l", 0], ["indx", 0], ["n", 0], ["1", 0], ["1", 0], ["dp", 0], ["table", 0], ["1", 0], ["indx", 0], ["1", 0], ["min", 0], ["dp", 0], ["table", 0], ["2", 0], ["indx", 0], ["dp", 0], ["table", 0], ["0", 0], ["indx", 0], ["explore", 0], ["floor", 0], ["floors", 0], ["indx", 0], ["lights", 0], ["indx", 0], ["l", 0], ["r", 0], ["indx", 0], ["n", 0], ["1", 0], ["1", 0], ["dp", 0], ["table", 0], ["2", 0], ["indx", 0], ["1", 0], ["min", 0], ["dp", 0], ["table", 0], ["1", 0], ["indx", 0], ["dp", 0], ["table", 0], ["3", 0], ["indx", 0], ["explore", 0], ["floor", 0], ["floors", 0], ["indx", 0], ["lights", 0], ["indx", 0], ["r", 0], ["l", 0], ["indx", 0], ["n", 0], ["1", 0], ["1", 0], ["dp", 0], ["table", 0], ["3", 0], ["indx", 0], ["1", 0], ["min", 0], ["dp", 0], ["table", 0], ["1", 0], ["indx", 0], ["dp", 0], ["table", 0], ["3", 0], ["indx", 0], ["explore", 0], ["floor", 0], ["floors", 0], ["indx", 0], ["lights", 0], ["indx", 0], ["r", 0], ["r", 0], ["indx", 0], ["n", 0], ["1", 0], ["1", 0], ["return", 0], ["dp", 0], ["table", 0], ["def", 0], ["get", 0], ["virtual", 0], ["max", 0], ["floor", 0], ["lights", 0], ["n", 0], ["len", 0], ["lights", 0], ["cnt", 0], ["0", 0], ["for", 0], ["val", 0], ["in", 0], ["reversed", 0], ["list", 0], ["elem", 0], ["0", 0], ["for", 0], ["elem", 0], ["in", 0], ["lights", 0], ["if", 0], ["val", 0], ["cnt", 0], ["1", 0], ["else", 0], ["break", 0], ["return", 0], ["n", 0], ["cnt", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["inp", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["rstrip", 0], ["floors", 0], ["list", 0], ["reversed", 0], ["inp", 0], ["split", 0], ["n", 0], ["assert", 0], ["len", 0], ["floors", 0], ["n", 0], ["lights", 0], ["list", 0], ["sum", 0], ["map", 0], ["int", 0], ["floor", 0], ["for", 0], ["floor", 0], ["in", 0], ["floors", 0], ["assert", 0], ["len", 0], ["lights", 0], ["n", 0], ["virtual", 0], ["n", 0], ["get", 0], ["virtual", 0], ["max", 0], ["floor", 0], ["lights", 0], ["sys", 0], ["stderr", 0], ["write", 0], ["n", 0], ["format", 0], ["lights", 0], ["sys", 0], ["stderr", 0], ["write", 0], ["n", 0], ["format", 0], ["virtual", 0], ["n", 0], ["if", 0], ["virtual", 0], ["n", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["dp", 0], ["table", 0], ["run", 0], ["dp", 0], ["virtual", 0], ["n", 0], ["m", 0], ["floors", 0], ["lights", 0], ["sys", 0], ["stderr", 0], ["write", 0], ["n", 0], ["format", 0], ["dp", 0], ["table", 0], ["print", 0], ["min", 0], ["dp", 0], ["table", 0], ["indx", 0], ["virtual", 0], ["n", 0], ["for", 0], ["indx", 0], ["in", 0], ["range", 0], ["4", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["simulate", 0], ["n", 0], ["m", 0], ["first", 0], ["last", 0], ["mask", 0], ["pos", 0], ["left", 0], ["time", 0], ["0", 0], ["for", 0], ["floor", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["action", 0], ["mask", 0], ["1", 0], ["mask", 0], ["1", 0], ["if", 0], ["pos", 0], ["left", 0], ["if", 0], ["action", 0], ["0", 0], ["time", 0], ["2", 0], ["last", 0], ["floor", 0], ["else", 0], ["time", 0], ["m", 0], ["1", 0], ["pos", 0], ["right", 0], ["else", 0], ["if", 0], ["action", 0], ["0", 0], ["time", 0], ["2", 0], ["m", 0], ["1", 0], ["first", 0], ["floor", 0], ["else", 0], ["time", 0], ["m", 0], ["1", 0], ["pos", 0], ["left", 0], ["time", 0], ["1", 0], ["if", 0], ["pos", 0], ["left", 0], ["time", 0], ["last", 0], ["n", 0], ["1", 0], ["else", 0], ["time", 0], ["m", 0], ["1", 0], ["first", 0], ["n", 0], ["1", 0], ["return", 0], ["time", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["building", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["building", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["i", 0], ["max", 0], ["none", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["any", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["building", 0], ["i", 0], ["i", 0], ["max", 0], ["i", 0], ["break", 0], ["if", 0], ["i", 0], ["max", 0], ["is", 0], ["none", 0], ["i", 0], ["max", 0], ["n", 0], ["n", 0], ["n", 0], ["i", 0], ["max", 0], ["if", 0], ["n", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["building", 0], ["building", 0], ["1", 0], ["building", 0], ["building", 0], ["n", 0], ["first", 0], ["m", 0], ["1", 0], ["n", 0], ["last", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["if", 0], ["building", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["first", 0], ["i", 0], ["m", 0], ["1", 0], ["first", 0], ["i", 0], ["j", 0], ["last", 0], ["i", 0], ["j", 0], ["min", 0], ["time", 0], ["10", 0], ["m", 0], ["1", 0], ["n", 0], ["n", 0], ["for", 0], ["mask", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["min", 0], ["time", 0], ["min", 0], ["min", 0], ["time", 0], ["simulate", 0], ["n", 0], ["m", 0], ["first", 0], ["last", 0], ["mask", 0], ["print", 0], ["min", 0], ["time", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["itertools", 0], ["import", 0], ["dropwhile", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["2", 0], ["p", 0], ["list", 0], ["dropwhile", 0], ["lambda", 0], ["line", 0], ["1", 0], ["not", 0], ["in", 0], ["line", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["p", 0], ["reverse", 0], ["addition", 0], ["len", 0], ["p", 0], ["1", 0], ["p", 0], ["list", 0], ["line", 0], ["for", 0], ["line", 0], ["in", 0], ["p", 0], ["if", 0], ["1", 0], ["in", 0], ["line", 0], ["n", 0], ["len", 0], ["p", 0], ["if", 0], ["n", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["left", 0], ["line", 0], ["find", 0], ["1", 0], ["for", 0], ["line", 0], ["in", 0], ["p", 0], ["right", 0], ["line", 0], ["rfind", 0], ["1", 0], ["for", 0], ["line", 0], ["in", 0], ["p", 0], ["ans", 0], ["float", 0], ["inf", 0], ["for", 0], ["mask", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["cur", 0], ["res", 0], ["0", 0], ["prev", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["go", 0], ["left", 0], ["mask", 0], ["1", 0], ["i", 0], ["if", 0], ["go", 0], ["left", 0], ["and", 0], ["prev", 0], ["cur", 0], ["res", 0], ["2", 0], ["right", 0], ["i", 0], ["elif", 0], ["go", 0], ["left", 0], ["and", 0], ["not", 0], ["prev", 0], ["or", 0], ["not", 0], ["go", 0], ["left", 0], ["and", 0], ["prev", 0], ["cur", 0], ["res", 0], ["m", 0], ["1", 0], ["elif", 0], ["not", 0], ["go", 0], ["left", 0], ["and", 0], ["not", 0], ["go", 0], ["left", 0], ["cur", 0], ["res", 0], ["2", 0], ["m", 0], ["1", 0], ["left", 0], ["i", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["if", 0], ["go", 0], ["left", 0], ["and", 0], ["prev", 0], ["cur", 0], ["res", 0], ["right", 0], ["i", 0], ["elif", 0], ["not", 0], ["go", 0], ["left", 0], ["and", 0], ["not", 0], ["prev", 0], ["cur", 0], ["res", 0], ["m", 0], ["1", 0], ["left", 0], ["i", 0], ["elif", 0], ["go", 0], ["left", 0], ["and", 0], ["not", 0], ["prev", 0], ["cur", 0], ["res", 0], ["left", 0], ["i", 0], ["elif", 0], ["not", 0], ["go", 0], ["left", 0], ["and", 0], ["prev", 0], ["cur", 0], ["res", 0], ["m", 0], ["1", 0], ["right", 0], ["i", 0], ["prev", 0], ["go", 0], ["left", 0], ["ans", 0], ["min", 0], ["ans", 0], ["cur", 0], ["res", 0], ["print", 0], ["ans", 0], ["addition", 0], ["def", 0], ["coun", 0], ["pref", 0], ["now", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["pos", 0], ["pref", 0], ["i", 0], ["if", 0], ["pos", 0], ["l", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["and", 0], ["sum", 0], ["check", 0], ["i", 0], ["1", 0], ["0", 0], ["now", 0], ["1", 0], ["if", 0], ["1", 0], ["in", 0], ["mat", 0], ["i", 0], ["if", 0], ["pref", 0], ["i", 0], ["1", 0], ["r", 0], ["now", 0], ["m", 0], ["1", 0], ["else", 0], ["now", 0], ["2", 0], ["mat", 0], ["i", 0], ["rfind", 0], ["1", 0], ["else", 0], ["if", 0], ["pref", 0], ["i", 0], ["1", 0], ["r", 0], ["now", 0], ["m", 0], ["1", 0], ["else", 0], ["if", 0], ["1", 0], ["in", 0], ["mat", 0], ["i", 0], ["now", 0], ["mat", 0], ["i", 0], ["rfind", 0], ["1", 0], ["else", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["and", 0], ["sum", 0], ["check", 0], ["i", 0], ["1", 0], ["0", 0], ["now", 0], ["1", 0], ["if", 0], ["1", 0], ["in", 0], ["mat", 0], ["i", 0], ["if", 0], ["pref", 0], ["i", 0], ["1", 0], ["l", 0], ["now", 0], ["m", 0], ["1", 0], ["else", 0], ["now", 0], ["2", 0], ["m", 0], ["1", 0], ["mat", 0], ["i", 0], ["find", 0], ["1", 0], ["else", 0], ["if", 0], ["pref", 0], ["i", 0], ["1", 0], ["l", 0], ["now", 0], ["m", 0], ["1", 0], ["else", 0], ["if", 0], ["1", 0], ["in", 0], ["mat", 0], ["i", 0], ["now", 0], ["m", 0], ["1", 0], ["mat", 0], ["i", 0], ["find", 0], ["1", 0], ["return", 0], ["now", 0], ["def", 0], ["gen", 0], ["pref", 0], ["nonlocal", 0], ["ans", 0], ["if", 0], ["len", 0], ["pref", 0], ["n", 0], ["ans", 0], ["min", 0], ["ans", 0], ["coun", 0], ["pref", 0], ["return", 0], ["gen", 0], ["pref", 0], ["l", 0], ["gen", 0], ["pref", 0], ["r", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mat", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["mat", 0], ["i", 0], ["input", 0], ["mat", 0], ["reverse", 0], ["check", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["check", 0], ["i", 0], ["mat", 0], ["i", 0], ["count", 0], ["1", 0], ["ans", 0], ["1000000000", 0], ["gen", 0], ["l", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["a", 0], ["i", 0], ["0", 0], ["m", 0], ["2", 0], ["i", 0], ["1", 0], ["a", 0], ["a", 0], ["i", 0], ["n", 0], ["len", 0], ["a", 0], ["dp", 0], ["10", 0], ["5", 0], ["10", 0], ["5", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["r", 0], ["a", 0], ["i", 0], ["find", 0], ["1", 0], ["a", 0], ["i", 0], ["rfind", 0], ["1", 0], ["if", 0], ["l", 0], ["r", 0], ["1", 0], ["l", 0], ["r", 0], ["m", 0], ["1", 0], ["0", 0], ["if", 0], ["i", 0], ["0", 0], ["dp", 0], ["0", 0], ["r", 0], ["m", 0], ["1", 0], ["l", 0], ["else", 0], ["dp", 0], ["i", 0], ["0", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["2", 0], ["r", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["m", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["m", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["2", 0], ["m", 0], ["1", 0], ["l", 0], ["1", 0], ["ans", 0], ["dp", 0], ["1", 0], ["0", 0], ["if", 0], ["dp", 0], ["else", 0], ["0", 0], ["print", 0], ["ans", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["as", 0], ["fin", 0], ["fin", 0], ["open", 0], ["cfr417b", 0], ["in", 0], ["r", 0], ["def", 0], ["f", 0], ["i", 0], ["csum", 0], ["csl", 0], ["true", 0], ["nonlocal", 0], ["num", 0], ["f", 0], ["l", 0], ["a", 0], ["r", 0], ["a", 0], ["minv", 0], ["l", 0], ["r", 0], ["l", 0], ["a", 0], ["i", 0], ["r", 0], ["a", 0], ["i", 0], ["if", 0], ["i", 0], ["num", 0], ["f", 0], ["csum", 0], ["r", 0], ["if", 0], ["csl", 0], ["else", 0], ["l", 0], ["minv", 0], ["min", 0], ["minv", 0], ["csum", 0], ["else", 0], ["f", 0], ["i", 0], ["1", 0], ["csum", 0], ["m", 0], ["2", 0], ["not", 0], ["csl", 0], ["f", 0], ["i", 0], ["1", 0], ["csum", 0], ["r", 0], ["if", 0], ["csl", 0], ["else", 0], ["l", 0], ["2", 0], ["1", 0], ["csl", 0], ["print", 0], ["num", 0], ["f", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["fin", 0], ["readline", 0], ["split", 0], ["arr", 0], ["list", 0], ["int", 0], ["sym", 0], ["for", 0], ["sym", 0], ["in", 0], ["fin", 0], ["readline", 0], ["strip", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["csl", 0], ["true", 0], ["cnt", 0], ["0", 0], ["print", 0], ["arr", 0], ["border", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["1", 0], ["in", 0], ["arr", 0], ["i", 0], ["break", 0], ["else", 0], ["border", 0], ["1", 0], ["l", 0], ["a", 0], ["r", 0], ["a", 0], ["num", 0], ["f", 0], ["1", 0], ["minv", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["border", 0], ["1", 0], ["1", 0], ["if", 0], ["1", 0], ["in", 0], ["arr", 0], ["i", 0], ["l", 0], ["arr", 0], ["i", 0], ["index", 0], ["1", 0], ["r", 0], ["list", 0], ["reversed", 0], ["arr", 0], ["i", 0], ["index", 0], ["1", 0], ["l", 0], ["m", 0], ["2", 0], ["l", 0], ["1", 0], ["r", 0], ["m", 0], ["2", 0], ["r", 0], ["1", 0], ["else", 0], ["l", 0], ["r", 0], ["0", 0], ["print", 0], ["l", 0], ["r", 0], ["m", 0], ["2", 0], ["l", 0], ["1", 0], ["csl", 0], ["l", 0], ["a", 0], ["append", 0], ["l", 0], ["r", 0], ["a", 0], ["append", 0], ["r", 0], ["num", 0], ["f", 0], ["1", 0], ["continue", 0], ["if", 0], ["num", 0], ["f", 0], ["1", 0], ["f", 0], ["0", 0], ["0", 0], ["print", 0], ["minv", 0], ["else", 0], ["print", 0], ["0", 0], ["inf", 0], ["float", 0], ["inf", 0], ["def", 0], ["solve", 0], ["grid", 0], ["n", 0], ["m", 0], ["print", 0], ["n", 0], ["join", 0], ["map", 0], ["str", 0], ["grid", 0], ["dp", 0], ["inf", 0], ["for", 0], ["in", 0], ["range", 0], ["2", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["dp", 0], ["0", 0], ["0", 0], ["1", 0], ["dp", 0], ["0", 0], ["1", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["occur", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["if", 0], ["grid", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["if", 0], ["not", 0], ["occur", 0], ["dp", 0], ["i", 0], ["0", 0], ["min", 0], ["dp", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["min", 0], ["dp", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["m", 0], ["2", 0], ["dp", 0], ["i", 0], ["1", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["m", 0], ["2", 0], ["dp", 0], ["i", 0], ["1", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["continue", 0], ["dp", 0], ["i", 0], ["0", 0], ["min", 0], ["dp", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["2", 0], ["max", 0], ["occur", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["min", 0], ["dp", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["m", 0], ["2", 0], ["dp", 0], ["i", 0], ["1", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["m", 0], ["2", 0], ["dp", 0], ["i", 0], ["1", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["2", 0], ["m", 0], ["2", 0], ["min", 0], ["occur", 0], ["1", 0], ["1", 0], ["print", 0], ["n", 0], ["join", 0], ["map", 0], ["str", 0], ["dp", 0], ["occur", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["if", 0], ["grid", 0], ["n", 0], ["1", 0], ["j", 0], ["1", 0], ["return", 0], ["min", 0], ["dp", 0], ["n", 0], ["1", 0], ["0", 0], ["max", 0], ["occur", 0], ["1", 0], ["dp", 0], ["n", 0], ["1", 0], ["1", 0], ["m", 0], ["2", 0], ["min", 0], ["occur", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["grid", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["grid", 0], ["reverse", 0], ["n", 0], ["real", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["1", 0], ["in", 0], ["grid", 0], ["i", 0], ["n", 0], ["real", 0], ["i", 0], ["break", 0], ["if", 0], ["n", 0], ["real", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["solve", 0], ["grid", 0], ["n", 0], ["real", 0], ["1", 0], ["n", 0], ["real", 0], ["1", 0], ["m", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["inf", 0], ["10", 0], ["10", 0], ["dp", 0], ["inf", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["last", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["tmp", 0], ["input", 0], ["tmp1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["tmp", 0], ["if", 0], ["tmp", 0], ["j", 0], ["1", 0], ["tmp1", 0], ["append", 0], ["1", 0], ["if", 0], ["last", 0], ["1", 0], ["last", 0], ["n", 0], ["i", 0], ["1", 0], ["else", 0], ["tmp1", 0], ["append", 0], ["0", 0], ["a", 0], ["append", 0], ["tmp1", 0], ["a", 0], ["a", 0], ["1", 0], ["left", 0], ["1", 0], ["n", 0], ["right", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["if", 0], ["a", 0], ["i", 0], ["j", 0], ["and", 0], ["left", 0], ["i", 0], ["1", 0], ["left", 0], ["i", 0], ["j", 0], ["if", 0], ["a", 0], ["i", 0], ["j", 0], ["right", 0], ["i", 0], ["j", 0], ["if", 0], ["last", 0], ["1", 0], ["print", 0], ["0", 0], ["return", 0], ["if", 0], ["last", 0], ["0", 0], ["print", 0], ["right", 0], ["0", 0], ["return", 0], ["dp", 0], ["0", 0], ["0", 0], ["max", 0], ["0", 0], ["right", 0], ["0", 0], ["2", 0], ["dp", 0], ["0", 0], ["1", 0], ["m", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["last", 0], ["if", 0], ["right", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["min", 0], ["dp", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["2", 0], ["right", 0], ["i", 0], ["else", 0], ["dp", 0], ["i", 0], ["0", 0], ["min", 0], ["dp", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["min", 0], ["dp", 0], ["i", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["m", 0], ["2", 0], ["if", 0], ["left", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["m", 0], ["1", 0], ["left", 0], ["i", 0], ["2", 0], ["else", 0], ["dp", 0], ["i", 0], ["1", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["min", 0], ["dp", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["m", 0], ["2", 0], ["lf", 0], ["rf", 0], ["inf", 0], ["inf", 0], ["if", 0], ["right", 0], ["last", 0], ["1", 0], ["lf", 0], ["dp", 0], ["last", 0], ["1", 0], ["0", 0], ["1", 0], ["right", 0], ["last", 0], ["else", 0], ["lf", 0], ["dp", 0], ["last", 0], ["1", 0], ["0", 0], ["1", 0], ["lf", 0], ["min", 0], ["lf", 0], ["dp", 0], ["last", 0], ["1", 0], ["1", 0], ["m", 0], ["2", 0], ["if", 0], ["left", 0], ["last", 0], ["1", 0], ["rf", 0], ["dp", 0], ["last", 0], ["1", 0], ["1", 0], ["1", 0], ["m", 0], ["1", 0], ["left", 0], ["last", 0], ["else", 0], ["rf", 0], ["dp", 0], ["last", 0], ["1", 0], ["1", 0], ["1", 0], ["rf", 0], ["min", 0], ["rf", 0], ["dp", 0], ["last", 0], ["1", 0], ["0", 0], ["m", 0], ["2", 0], ["print", 0], ["min", 0], ["lf", 0], ["rf", 0], ["import", 0], ["sys", 0], ["inf", 0], ["float", 0], ["inf", 0], ["ans", 0], ["inf", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["none", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["s", 0], ["i", 0], ["int", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["input", 0], ["e", 0], ["any", 0], ["si", 0], ["for", 0], ["si", 0], ["in", 0], ["s", 0], ["es", 0], ["e", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["es", 0], ["i", 0], ["es", 0], ["i", 0], ["1", 0], ["print", 0], ["es", 0], ["if", 0], ["not", 0], ["es", 0], ["0", 0], ["print", 0], ["0", 0], ["elif", 0], ["es", 0], ["0", 0], ["and", 0], ["not", 0], ["es", 0], ["1", 0], ["k", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["0", 0], ["1", 0], ["if", 0], ["s", 0], ["0", 0], ["j", 0], ["k", 0], ["j", 0], ["break", 0], ["print", 0], ["k", 0], ["else", 0], ["lim", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["es", 0], ["i", 0], ["lim", 0], ["i", 0], ["1", 0], ["break", 0], ["if", 0], ["not", 0], ["e", 0], ["0", 0], ["left", 0], ["0", 0], ["right", 0], ["m", 0], ["1", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["0", 0], ["1", 0], ["if", 0], ["s", 0], ["0", 0], ["j", 0], ["kr", 0], ["j", 0], ["break", 0], ["left", 0], ["2", 0], ["kr", 0], ["right", 0], ["m", 0], ["1", 0], ["print", 0], ["left", 0], ["right", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["lim", 0], ["if", 0], ["not", 0], ["e", 0], ["i", 0], ["left", 0], ["right", 0], ["min", 0], ["left", 0], ["1", 0], ["right", 0], ["m", 0], ["2", 0], ["min", 0], ["right", 0], ["1", 0], ["left", 0], ["m", 0], ["2", 0], ["else", 0], ["kr", 0], ["kl", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["0", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["j", 0], ["kr", 0], ["j", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["j", 0], ["kl", 0], ["j", 0], ["break", 0], ["left", 0], ["right", 0], ["min", 0], ["left", 0], ["1", 0], ["2", 0], ["kr", 0], ["right", 0], ["m", 0], ["2", 0], ["min", 0], ["right", 0], ["1", 0], ["2", 0], ["m", 0], ["1", 0], ["kl", 0], ["left", 0], ["m", 0], ["2", 0], ["print", 0], ["left", 0], ["right", 0], ["kr", 0], ["kl", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["0", 0], ["1", 0], ["if", 0], ["s", 0], ["lim", 0], ["j", 0], ["kr", 0], ["j", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["s", 0], ["lim", 0], ["j", 0], ["kl", 0], ["j", 0], ["break", 0], ["ans", 0], ["min", 0], ["left", 0], ["1", 0], ["kr", 0], ["right", 0], ["1", 0], ["m", 0], ["1", 0], ["kl", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["inf", 0], ["float", 0], ["inf", 0], ["ans", 0], ["inf", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["none", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["s", 0], ["i", 0], ["int", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["input", 0], ["e", 0], ["any", 0], ["si", 0], ["for", 0], ["si", 0], ["in", 0], ["s", 0], ["es", 0], ["e", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["es", 0], ["i", 0], ["es", 0], ["i", 0], ["1", 0], ["print", 0], ["es", 0], ["if", 0], ["not", 0], ["es", 0], ["0", 0], ["print", 0], ["0", 0], ["elif", 0], ["es", 0], ["0", 0], ["and", 0], ["not", 0], ["es", 0], ["1", 0], ["k", 0], ["m", 0], ["1", 0], ["s", 0], ["0", 0], ["1", 0], ["index", 0], ["1", 0], ["print", 0], ["k", 0], ["else", 0], ["lim", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["es", 0], ["i", 0], ["lim", 0], ["i", 0], ["1", 0], ["break", 0], ["if", 0], ["not", 0], ["e", 0], ["0", 0], ["left", 0], ["0", 0], ["right", 0], ["m", 0], ["1", 0], ["else", 0], ["kr", 0], ["m", 0], ["1", 0], ["s", 0], ["0", 0], ["1", 0], ["index", 0], ["1", 0], ["left", 0], ["2", 0], ["kr", 0], ["right", 0], ["m", 0], ["1", 0], ["print", 0], ["left", 0], ["right", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["lim", 0], ["if", 0], ["not", 0], ["e", 0], ["i", 0], ["left", 0], ["right", 0], ["min", 0], ["left", 0], ["1", 0], ["right", 0], ["m", 0], ["2", 0], ["min", 0], ["right", 0], ["1", 0], ["left", 0], ["m", 0], ["2", 0], ["else", 0], ["kr", 0], ["m", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["index", 0], ["1", 0], ["kl", 0], ["s", 0], ["i", 0], ["index", 0], ["1", 0], ["left", 0], ["right", 0], ["min", 0], ["left", 0], ["1", 0], ["2", 0], ["kr", 0], ["right", 0], ["m", 0], ["2", 0], ["min", 0], ["right", 0], ["1", 0], ["2", 0], ["m", 0], ["1", 0], ["kl", 0], ["left", 0], ["m", 0], ["2", 0], ["print", 0], ["left", 0], ["right", 0], ["kr", 0], ["m", 0], ["1", 0], ["s", 0], ["lim", 0], ["1", 0], ["index", 0], ["1", 0], ["kl", 0], ["s", 0], ["lim", 0], ["index", 0], ["1", 0], ["ans", 0], ["min", 0], ["left", 0], ["1", 0], ["kr", 0], ["right", 0], ["1", 0], ["m", 0], ["1", 0], ["kl", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["from", 0], ["itertools", 0], ["import", 0], ["accumulate", 0], ["from", 0], ["operator", 0], ["import", 0], ["or", 0], ["inf", 0], ["float", 0], ["inf", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["int", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["e", 0], ["any", 0], ["si", 0], ["for", 0], ["si", 0], ["in", 0], ["s", 0], ["es", 0], ["e", 0], ["false", 0], ["es", 0], ["list", 0], ["accumulate", 0], ["es", 0], ["1", 0], ["or", 0], ["1", 0], ["if", 0], ["not", 0], ["es", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["lim", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["es", 0], ["i", 0], ["lim", 0], ["i", 0], ["1", 0], ["break", 0], ["left", 0], ["right", 0], ["1", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["lim", 0], ["if", 0], ["not", 0], ["e", 0], ["i", 0], ["left", 0], ["right", 0], ["min", 0], ["left", 0], ["1", 0], ["right", 0], ["m", 0], ["2", 0], ["min", 0], ["right", 0], ["1", 0], ["left", 0], ["m", 0], ["2", 0], ["else", 0], ["kr", 0], ["rindex", 0], ["s", 0], ["i", 0], ["1", 0], ["kl", 0], ["s", 0], ["i", 0], ["index", 0], ["1", 0], ["left", 0], ["right", 0], ["min", 0], ["left", 0], ["1", 0], ["2", 0], ["kr", 0], ["right", 0], ["m", 0], ["2", 0], ["min", 0], ["right", 0], ["1", 0], ["2", 0], ["m", 0], ["1", 0], ["kl", 0], ["left", 0], ["m", 0], ["2", 0], ["kr", 0], ["rindex", 0], ["s", 0], ["lim", 0], ["1", 0], ["kl", 0], ["s", 0], ["lim", 0], ["index", 0], ["1", 0], ["ans", 0], ["min", 0], ["left", 0], ["1", 0], ["kr", 0], ["right", 0], ["m", 0], ["2", 0], ["kl", 0], ["print", 0], ["ans", 0], ["def", 0], ["rindex", 0], ["arr", 0], ["x", 0], ["return", 0], ["len", 0], ["arr", 0], ["1", 0], ["arr", 0], ["1", 0], ["index", 0], ["x", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["import", 0], ["sys", 0], ["def", 0], ["left", 0], ["time", 0], ["floor", 0], ["light", 0], ["counter", 0], ["counter", 0], ["floor", 0], ["print", 0], ["light", 0], ["counter", 0], ["print", 0], ["light", 0], ["counter", 0], ["1", 0], ["if", 0], ["light", 0], ["counter", 0], ["1", 0], ["0", 0], ["return", 0], ["0", 0], ["else", 0], ["last", 0], ["light", 0], ["search", 0], ["1", 0], ["while", 0], ["last", 0], ["light", 0], ["search", 0], ["len", 0], ["floor", 0], ["print", 0], ["last", 0], ["light", 0], ["search", 0], ["if", 0], ["floor", 0], ["last", 0], ["light", 0], ["search", 0], ["1", 0], ["return", 0], ["len", 0], ["floor", 0], ["last", 0], ["light", 0], ["search", 0], ["2", 0], ["break", 0], ["else", 0], ["last", 0], ["light", 0], ["search", 0], ["1", 0], ["def", 0], ["right", 0], ["time", 0], ["floor", 0], ["light", 0], ["counter", 0], ["counter", 0], ["floor", 0], ["if", 0], ["light", 0], ["counter", 0], ["1", 0], ["0", 0], ["return", 0], ["0", 0], ["else", 0], ["last", 0], ["light", 0], ["search", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["floor", 0], ["last", 0], ["light", 0], ["search", 0], ["1", 0], ["return", 0], ["len", 0], ["floor", 0], ["last", 0], ["light", 0], ["search", 0], ["1", 0], ["2", 0], ["break", 0], ["else", 0], ["last", 0], ["light", 0], ["search", 0], ["1", 0], ["floors", 0], ["nr", 0], ["rooms", 0], ["nr", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["building", 0], ["scheme", 0], ["worth", 0], ["counting", 0], ["flag", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["floors", 0], ["nr", 0], ["floor", 0], ["i", 0], ["input", 0], ["c", 0], ["counter", 0], ["floor", 0], ["i", 0], ["if", 0], ["not", 0], ["worth", 0], ["counting", 0], ["flag", 0], ["and", 0], ["c", 0], ["1", 0], ["0", 0], ["worth", 0], ["counting", 0], ["flag", 0], ["true", 0], ["if", 0], ["worth", 0], ["counting", 0], ["flag", 0], ["building", 0], ["scheme", 0], ["append", 0], ["floor", 0], ["i", 0], ["if", 0], ["len", 0], ["building", 0], ["scheme", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["optimal", 0], ["time", 0], ["1", 0], ["10000", 0], ["last", 0], ["floor", 0], ["building", 0], ["scheme", 0], ["0", 0], ["building", 0], ["scheme", 0], ["building", 0], ["scheme", 0], ["1", 0], ["for", 0], ["floor", 0], ["in", 0], ["building", 0], ["scheme", 0], ["1", 0], ["prefix", 0], ["left", 0], ["prefix", 0], ["right", 0], ["optimal", 0], ["time", 0], ["1", 0], ["keep", 0], ["right", 0], ["left", 0], ["rooms", 0], ["nr", 0], ["1", 0], ["prefix", 0], ["left", 0], ["1", 0], ["keep", 0], ["right", 0], ["right", 0], ["right", 0], ["time", 0], ["floor", 0], ["prefix", 0], ["right", 0], ["1", 0], ["keep", 0], ["right", 0], ["min", 0], ["keep", 0], ["right", 0], ["left", 0], ["keep", 0], ["right", 0], ["right", 0], ["keep", 0], ["left", 0], ["left", 0], ["left", 0], ["time", 0], ["floor", 0], ["prefix", 0], ["left", 0], ["1", 0], ["keep", 0], ["left", 0], ["right", 0], ["rooms", 0], ["nr", 0], ["1", 0], ["prefix", 0], ["right", 0], ["1", 0], ["keep", 0], ["left", 0], ["min", 0], ["keep", 0], ["left", 0], ["left", 0], ["keep", 0], ["left", 0], ["right", 0], ["optimal", 0], ["time", 0], ["append", 0], ["keep", 0], ["left", 0], ["keep", 0], ["right", 0], ["print", 0], ["optimal", 0], ["time", 0], ["last", 0], ["floor", 0], ["time", 0], ["min", 0], ["optimal", 0], ["time", 0], ["1", 0], ["0", 0], ["1", 0], ["left", 0], ["time", 0], ["last", 0], ["floor", 0], ["2", 0], ["optimal", 0], ["time", 0], ["1", 0], ["1", 0], ["1", 0], ["right", 0], ["time", 0], ["last", 0], ["floor", 0], ["2", 0], ["print", 0], ["last", 0], ["floor", 0], ["time", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nInitially Ildar has an empty array. He performs $n$ steps. On each step he takes a subset of integers already added to the array and appends the mex of this subset to the array. \n\nThe mex of an multiset of integers is the smallest non-negative integer not presented in the multiset. For example, the mex of the multiset $[0, 2, 3]$ is $1$, while the mex of the multiset $[1, 2, 1]$ is $0$.\n\nMore formally, on the step $m$, when Ildar already has an array $a_1, a_2, \\ldots, a_{m-1}$, he chooses some subset of indices $1 \\leq i_1 < i_2 < \\ldots < i_k < m$ (possibly, empty), where $0 \\leq k < m$, and appends the $mex(a_{i_1}, a_{i_2}, \\ldots a_{i_k})$ to the end of the array.\n\nAfter performing all the steps Ildar thinks that he might have made a mistake somewhere. He asks you to determine for a given array $a_1, a_2, \\ldots, a_n$ the minimum step $t$ such that he has definitely made a mistake on at least one of the steps $1, 2, \\ldots, t$, or determine that he could have obtained this array without mistakes.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 100\\,000$) — the number of steps Ildar made.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^9$) — the array Ildar obtained.\n\n\n-----Output-----\n\nIf Ildar could have chosen the subsets on each step in such a way that the resulting array is $a_1, a_2, \\ldots, a_n$, print $-1$.\n\nOtherwise print a single integer $t$ — the smallest index of a step such that a mistake was made on at least one step among steps $1, 2, \\ldots, t$.\n\n\n-----Examples-----\nInput\n4\n0 1 2 1\n\nOutput\n-1\nInput\n3\n1 0 1\n\nOutput\n1\nInput\n4\n0 1 2 239\n\nOutput\n4\n\n\n-----Note-----\n\nIn the first example it is possible that Ildar made no mistakes. Here is the process he could have followed.  $1$-st step. The initial array is empty. He can choose an empty subset and obtain $0$, because the mex of an empty set is $0$. Appending this value to the end he gets the array $[0]$.  $2$-nd step. The current array is $[0]$. He can choose a subset $[0]$ and obtain an integer $1$, because $mex(0) = 1$. Appending this value to the end he gets the array $[0,1]$.  $3$-rd step. The current array is $[0,1]$. He can choose a subset $[0,1]$ and obtain an integer $2$, because $mex(0,1) = 2$. Appending this value to the end he gets the array $[0,1,2]$.  $4$-th step. The current array is $[0,1,2]$. He can choose a subset $[0]$ and obtain an integer $1$, because $mex(0) = 1$. Appending this value to the end he gets the array $[0,1,2,1]$. \n\nThus, he can get the array without mistakes, so the answer is $-1$.\n\nIn the second example he has definitely made a mistake on the very first step, because he could not have obtained anything different from $0$.\n\nIn the third example he could have obtained $[0, 1, 2]$ without mistakes, but $239$ is definitely wrong.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\na = list(map(int, input().split()))\nmx = -1\nfor step, elem in enumerate(a):\n\tif elem > mx + 1:\n\t\tprint(step + 1)\n\t\treturn\n\telse:\n\t\tmx = max(mx, elem)\nprint(-1)\n", "n = int(input())\na = [int(i) for i in input().split()]\nc = 0\nfor i in range(n):\n\tif a[i] > c:\n\t\tprint(i+1)\n\t\tbreak\n\telse:\n\t\tc = max(a[i]+1, c)\nelse:\n\tprint(-1)\n", "n = int(input())\na = list(map(int, input().split()))\n\nmex = -1\nfor i in range(n):\n\tif a[i] <= mex:\n\t\tcontinue\n\telif a[i] == mex + 1:\n\t\tmex += 1\n\telse:\n\t\tprint(i+1)\n\t\treturn\nprint(-1)\n", "n = int(input())\narr = list(map(int, input().split()))\narr1 = [arr[0]]\nm = -1\nfor i, v in enumerate(arr):\n\tif v > m + 1:\n\t\tprint(i+1)\n\t\tbreak\n\tm = max(m, v)\nelse:\n\tprint(-1)\n\n", "import sys\na = list(map(int, sys.stdin.readlines()[1][:-1].split()))\nmx = 0\nfor i in range(len(a)):\n\tif a[i] > mx:\n\t\tprint(i+1)\n\t\treturn\n\tmx = max(mx,a[i] + 1)\nprint(-1)\n", "n = int(input())\na = list(map(int, input().split()))\nmx = -1\nans = -1\nfor i in range(n):\n\tif a[i] > mx+1:\n\t\tans = i+1\n\t\tbreak\n\telse:\n\t\tmx = max(mx, a[i])\nprint(ans)\n", "from math import *\n#n,k=map(int,input().split())\n#A = list(map(int,input().split()))\nn=int(input())\nA = list(map(int,input().split()))\nans =-1\nmaxs = 0\nfor j in range(n):\n\tif(A[j] > maxs):\n\t\tans = j+1\n\t\tbreak\n\telse:\n\t\tmaxs = max(maxs,A[j]+1)\nprint(ans)\n", "n = int(input())\na = list(map(int, input().split()))\nmax_el = -1;\ner = -1;\nfor i in range(len(a)):\n\tif a[i] - max_el > 1:\n\t\ter = i + 1;\n\t\tbreak\n\tif a[i] > max_el:\n\t\tmax_el = a[i]\n\nprint(er)\n", "n = int(input())\na = list(map(int, input().split()))\ns = 0\n\nfor j, i in enumerate(a):\n\tif i > s:\n\t\tprint(j + 1)\n\t\treturn\n\tif i == s:\n\t\ts += 1\n\nprint(-1)\n", "n=int(input())\n#x,y,z,t1,t2,t3=map(int,input().split())\na=list(map(int,input().split()))\n\n\n\n\ndef qwe(a):\n\tf=-1\n\tfor i in range(len(a)):\n\t\tif a[i]-f>1: return i+1\n\t\telif a[i]-f==1: f=a[i]\n\treturn -1\n\n\nprint(qwe(a))\n", "from sys import stdin\nimport sys\nn=int(stdin.readline().strip())\ns=tuple(map(int,stdin.readline().strip().split()))\nif s[0]!=0:\n\tprint(1)\n\treturn\nx=1\nans=-1\nfor i in range(1,n):\n\tif s[i]<=x:\n\t\tx=max(x,s[i]+1)\n\telse:\n\t\tans=i+1\n\t\tbreak\nprint(ans)\n\t\n", "n = int(input())\nmas = list(map(int, input().split()))\nmaxx = -1\nf = 0\nfor i in range(n):\n\tif mas[i] > maxx:\n\t\tif mas[i] - 1 > maxx:\n\t\t\tprint(i + 1)\n\t\t\tf = 1\n\t\t\tbreak\n\t\telse:\n\t\t\tmaxx += 1\nif f == 0:\n\tprint(-1)\n", "input()\n\nm = -1\n\nfor i, a in enumerate(map(int, input().split())):\n\tif a > m + 1:\n\t\tprint(i+1)\n\t\tbreak\n\telse:\n\t\tm = max(m, a)\nelse:\n\tprint(-1)\n", "import collections\n\n\ndef main():\n\t# # n = int(input())\n\t# x, y, z, t1, t2, t3 = list(map(int, input().split()))\n\t# stair = t1 * abs(y - x)\n\t# ele = t2 * (abs(y - x) + abs(z - x)) + 3 * t3\n\t# # print(stair, ele)\n\t# print(\"YES\" if ele <= stair else \"NO\")\n\n\tn = int(input())\n\tnum = list(map(int, input().split()))\n\tprevMax, totMax = -1, float('-inf')\n\tfor i, v in enumerate(num):\n\t\ttotMax = max(totMax, v)\n\t\tif totMax - prevMax in [0, 1]:\n\t\t\tprevMax = totMax\n\t\telse:\n\t\t\tprint(i + 1)\n\t\t\treturn\n\tprint(-1)\n\n\nmain()\n", "n = input()\n\nA = list(map(int, input().split(\" \")))\n\nmax_seen = -1\n\nfor ix, a in enumerate(A):\n\n\tif a > max_seen + 1:\n\t\tprint(ix+1)\n\t\treturn\n\n\tmax_seen = max(max_seen, a)\nprint(-1)\n\n\n", "n = int(input())\nnum = list(map(int, input().split()))\nfl = True\nused = [False] * 110000\nfor i in range(n):\n\tif num[i] == 0: \n\t\tused[0] = True\n\t\tcontinue\n\tif num[i] > i or not used[num[i] - 1]:\n\t\tans = i\n\t\tfl = False\n\t\tbreak\n\telse:\n\t\tused[num[i]] = True\nif not fl:\n\tprint(ans + 1)\nelse:\n\tprint(-1)\n", "#x,y,z,t1,t2,t3=list(map(int,input().split()))\ns=int(input())\ni=1\nz=-1\nfor i0 in input().split():\n\tif int(i0)>z+1:\n\t\tprint(i)\n\t\treturn\n\telse:\n\t\tz=max(z,int(i0))\n\ti=i+1\nprint(-1)\n", "n=int(input())\na=list(map(int,input().split()))\nm=-1\nfor i in range(n):\n\tif a[i]>m+1:\n\t\tprint(i+1);return\n\telse:\n\t\tm=max(a[i],m)\nprint(-1)\n\t\t\n\t\n", "n=int(input())\na=list(map(int, input().split()))\nmaxx=-1\nminn=-1\nfor i in range(n):\n\tif a[i]==maxx+1:\n\t\tmaxx=a[i]\n\telif a[i]>maxx+1:\n\t\tminn=i\n\t\tbreak\nif minn==-1:\n\tprint(minn)\nelse:\n\tprint(minn+1)\n", "n = int( input() )\na = list( map( int, input().split() ) )\n\ni = 1\nm = -1\nans = -1\nfor x in a:\n\tif x > m + 1:\n\t\tans = i\n\t\tbreak\n\telse:\n\t\ti = i + 1\n\t\tm = max( m, x )\n\nprint( ans )\n", "n = int(input())\nA = list(map(int, input().split()))\nmax = -1\nans = True\nind = 1\nfor a in A:\n\tif a > max + 1:\n\t\tans = False\n\t\tbreak\n\tif a == max + 1:\n\t\tmax = a\n\tind += 1\nprint(-1 if ans else ind)\n", "input()\na = tuple(map(int, input().split()))\ntop = -1\nfor i, x in enumerate(a, start=1):\n\tif x - top <= 1:\n\t\ttop = max(x, top)\n\telse:\n\t\tprint(i)\n\t\treturn\nprint(-1)\n", "n=int(input())\na=list(map(int,input().split()))\nm=-1\ns=-1\nfor i in range(n):\n\tif(a[i]>m+1):\n\t\ts=i+1\n\t\tbreak\n\telse:\n\t\tm=max(m,a[i])\nprint(s)\n", "def main():\n\tn = int(input())\n\tarr = [int(x) for x in input().strip().split()]\n\ts = set([-1])\n\tfor i in range(n):\n\t\tif arr[i] - 1 not in s:\n\t\t\tprint(i+1)\n\t\t\treturn\n\t\ts.add(arr[i])\n\t\n\tprint(-1)\n\t\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "import sys\n\nn = int(input())\nl = list(map(int, input().split()))\npos_max = 0\nfor i in range(len(l)):\n\tif l[i] > pos_max:\n\t\tprint(i + 1)\n\t\treturn\n\telif l[i] == pos_max:\n\t\t\tpos_max += 1\nprint(\"-1\")\n"], "id": "id8411"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8411", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["initially", 4], ["ildar", 4], ["has", 4], ["an", 4], ["empty", 4], ["array", 4], ["he", 4], ["performs", 4], ["n", 4], ["steps", 4], ["on", 4], ["each", 4], ["step", 4], ["he", 4], ["takes", 4], ["a", 4], ["subset", 4], ["of", 4], ["integers", 4], ["already", 4], ["added", 4], ["to", 4], ["the", 4], ["array", 4], ["and", 4], ["appends", 4], ["the", 4], ["mex", 4], ["of", 4], ["this", 4], ["subset", 4], ["to", 4], ["the", 4], ["array", 4], ["the", 4], ["mex", 4], ["of", 4], ["an", 4], ["multiset", 4], ["of", 4], ["integers", 4], ["is", 4], ["the", 4], ["smallest", 4], ["non", 4], ["negative", 4], ["integer", 4], ["not", 4], ["presented", 4], ["in", 4], ["the", 4], ["multiset", 4], ["for", 4], ["example", 4], ["the", 4], ["mex", 4], ["of", 4], ["the", 4], ["multiset", 4], ["0", 4], ["2", 4], ["3", 4], ["is", 4], ["1", 4], ["while", 4], ["the", 4], ["mex", 4], ["of", 4], ["the", 4], ["multiset", 4], ["1", 4], ["2", 4], ["1", 4], ["is", 4], ["0", 4], ["more", 4], ["formally", 4], ["on", 4], ["the", 4], ["step", 4], ["m", 4], ["when", 4], ["ildar", 4], ["already", 4], ["has", 4], ["an", 4], ["array", 4], ["a", 4], ["1", 4], ["a", 4], ["2", 4], ["ldots", 4], ["a", 4], ["m", 4], ["1", 4], ["he", 4], ["chooses", 4], ["some", 4], ["subset", 4], ["of", 4], ["indices", 4], ["1", 4], ["leq", 4], ["i", 4], ["1", 4], ["i", 4], ["2", 4], ["ldots", 4], ["i", 4], ["k", 4], ["m", 4], ["possibly", 4], ["empty", 4], ["where", 4], ["0", 4], ["leq", 4], ["k", 4], ["m", 4], ["and", 4], ["appends", 4], ["the", 4], ["mex", 4], ["a", 4], ["i", 4], ["1", 4], ["a", 4], ["i", 4], ["2", 4], ["ldots", 4], ["a", 4], ["i", 4], ["k", 4], ["to", 4], ["the", 4], ["end", 4], ["of", 4], ["the", 4], ["array", 4], ["after", 4], ["performing", 4], ["all", 4], ["the", 4], ["steps", 4], ["ildar", 4], ["thinks", 4], ["that", 4], ["he", 4], ["might", 4], ["have", 4], ["made", 4], ["a", 4], ["mistake", 4], ["somewhere", 4], ["he", 4], ["asks", 4], ["you", 4], ["to", 4], ["determine", 4], ["for", 4], ["a", 4], ["given", 4], ["array", 4], ["a", 4], ["1", 4], ["a", 4], ["2", 4], ["ldots", 4], ["a", 4], ["n", 4], ["the", 4], ["minimum", 4], ["step", 4], ["t", 4], ["such", 4], ["that", 4], ["he", 4], ["has", 4], ["definitely", 4], ["made", 4], ["a", 4], ["mistake", 4], ["on", 4], ["at", 4], ["least", 4], ["one", 4], ["of", 4], ["the", 4], ["steps", 4], ["1", 4], ["2", 4], ["ldots", 4], ["t", 0], ["or", 0], ["determine", 0], ["that", 0], ["he", 0], ["could", 0], ["have", 0], ["obtained", 0], ["this", 0], ["array", 0], ["without", 0], ["mistakes", 0], ["input", 0], ["the", 7], ["first", 6], ["line", 6], ["contains", 6], ["a", 6], ["single", 6], ["integer", 4], ["n", 4], ["1", 4], ["leq", 4], ["n", 4], ["leq", 4], ["100", 4], ["000", 4], ["—", 4], ["the", 4], ["number", 4], ["of", 4], ["steps", 4], ["ildar", 4], ["made", 4], ["the", 20], ["second", 13], ["line", 5], ["contains", 7], ["n", 7], ["integers", 7], ["a", 6], ["1", 4], ["a", 4], ["2", 4], ["ldots", 4], ["a", 4], ["n", 4], ["0", 0], ["leq", 0], ["a", 0], ["i", 0], ["leq", 0], ["10", 0], ["9", 0], ["—", 0], ["the", 0], ["array", 0], ["ildar", 0], ["obtained", 0], ["output", 0], ["if", 4], ["ildar", 4], ["could", 4], ["have", 4], ["chosen", 4], ["the", 4], ["subsets", 4], ["on", 4], ["each", 4], ["step", 4], ["in", 4], ["such", 4], ["a", 4], ["way", 4], ["that", 4], ["the", 4], ["resulting", 4], ["array", 4], ["is", 4], ["a", 4], ["1", 4], ["a", 4], ["2", 4], ["ldots", 4], ["a", 4], ["n", 4], ["print", 4], ["1", 4], ["otherwise", 4], ["print", 4], ["a", 4], ["single", 4], ["integer", 4], ["t", 4], ["—", 4], ["the", 4], ["smallest", 4], ["index", 4], ["of", 4], ["a", 4], ["step", 4], ["such", 4], ["that", 4], ["a", 4], ["mistake", 4], ["was", 4], ["made", 0], ["on", 0], ["at", 0], ["least", 0], ["one", 0], ["step", 0], ["among", 0], ["steps", 0], ["1", 0], ["2", 0], ["ldots", 0], ["t", 0], ["examples", 0], ["input", 0], ["4", 0], ["0", 0], ["1", 0], ["2", 0], ["1", 0], ["output", 0], ["1", 0], ["input", 0], ["3", 0], ["1", 0], ["0", 0], ["1", 0], ["output", 0], ["1", 0], ["input", 0], ["4", 0], ["0", 0], ["1", 0], ["2", 0], ["239", 0], ["output", 0], ["4", 0], ["note", 0], ["in", 4], ["the", 4], ["first", 4], ["example", 4], ["it", 4], ["is", 4], ["possible", 4], ["that", 4], ["ildar", 4], ["made", 4], ["no", 4], ["mistakes", 4], ["here", 4], ["is", 4], ["the", 4], ["process", 4], ["he", 4], ["could", 4], ["have", 4], ["followed", 4], ["1", 4], ["st", 4], ["step", 4], ["the", 4], ["initial", 4], ["array", 4], ["is", 4], ["empty", 4], ["he", 4], ["can", 4], ["choose", 4], ["an", 4], ["empty", 4], ["subset", 4], ["and", 4], ["obtain", 4], ["0", 4], ["because", 4], ["the", 4], ["mex", 4], ["of", 4], ["an", 4], ["empty", 4], ["set", 4], ["is", 4], ["0", 4], ["appending", 4], ["this", 4], ["value", 4], ["to", 4], ["the", 4], ["end", 4], ["he", 4], ["gets", 4], ["the", 4], ["array", 4], ["0", 4], ["2", 4], ["nd", 4], ["step", 4], ["the", 4], ["current", 4], ["array", 4], ["is", 4], ["0", 4], ["he", 8], ["can", 8], ["choose", 8], ["a", 8], ["subset", 8], ["0", 8], ["and", 8], ["obtain", 8], ["an", 8], ["integer", 8], ["1", 8], ["because", 8], ["mex", 8], ["0", 8], ["1", 8], ["appending", 4], ["this", 4], ["value", 4], ["to", 4], ["the", 4], ["end", 4], ["he", 4], ["gets", 4], ["the", 4], ["array", 4], ["0", 4], ["1", 4], ["3", 4], ["rd", 4], ["step", 4], ["the", 4], ["current", 4], ["array", 4], ["is", 4], ["0", 4], ["1", 4], ["he", 4], ["can", 4], ["choose", 4], ["a", 4], ["subset", 4], ["0", 4], ["1", 4], ["and", 4], ["obtain", 4], ["an", 4], ["integer", 4], ["2", 4], ["because", 4], ["mex", 4], ["0", 4], ["1", 4], ["2", 4], ["appending", 8], ["this", 4], ["value", 4], ["to", 4], ["the", 4], ["end", 4], ["he", 4], ["gets", 4], ["the", 4], ["array", 4], ["0", 4], ["1", 4], ["2", 4], ["4", 4], ["th", 4], ["step", 4], ["the", 4], ["current", 4], ["array", 4], ["is", 4], ["0", 4], ["1", 4], ["2", 4], ["he", 8], ["can", 8], ["choose", 8], ["a", 8], ["subset", 8], ["0", 8], ["and", 8], ["obtain", 8], ["an", 8], ["integer", 8], ["1", 8], ["because", 8], ["mex", 8], ["0", 8], ["1", 8], ["appending", 8], ["this", 4], ["value", 4], ["to", 4], ["the", 4], ["end", 4], ["he", 4], ["gets", 4], ["the", 4], ["array", 4], ["0", 4], ["1", 4], ["2", 4], ["1", 4], ["thus", 4], ["he", 4], ["can", 4], ["get", 4], ["the", 4], ["array", 4], ["without", 4], ["mistakes", 4], ["so", 4], ["the", 4], ["answer", 4], ["is", 4], ["1", 4], ["in", 4], ["the", 4], ["second", 4], ["example", 4], ["he", 4], ["has", 4], ["definitely", 4], ["made", 4], ["a", 4], ["mistake", 4], ["on", 4], ["the", 4], ["very", 4], ["first", 4], ["step", 4], ["because", 4], ["he", 4], ["could", 4], ["not", 4], ["have", 4], ["obtained", 4], ["anything", 4], ["different", 4], ["from", 4], ["0", 4], ["in", 4], ["the", 4], ["third", 4], ["example", 4], ["he", 4], ["could", 4], ["have", 0], ["obtained", 0], ["0", 0], ["1", 0], ["2", 0], ["without", 0], ["mistakes", 0], ["but", 0], ["239", 0], ["is", 0], ["definitely", 0], ["wrong", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8676207513416816, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.20733157718846448, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9334500875656743, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2324451672087399, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8640429338103757, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.20710452338359314, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9334500875656743, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2324451672087399, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mx", 0], ["1", 0], ["for", 0], ["step", 0], ["elem", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["if", 0], ["elem", 0], ["mx", 0], ["1", 0], ["print", 0], ["step", 0], ["1", 0], ["return", 0], ["else", 0], ["mx", 0], ["max", 0], ["mx", 0], ["elem", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["c", 0], ["print", 0], ["i", 0], ["1", 0], ["break", 0], ["else", 0], ["c", 0], ["max", 0], ["a", 0], ["i", 0], ["1", 0], ["c", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mex", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["mex", 0], ["continue", 0], ["elif", 0], ["a", 0], ["i", 0], ["mex", 0], ["1", 0], ["mex", 0], ["1", 0], ["else", 0], ["print", 0], ["i", 0], ["1", 0], ["return", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr1", 0], ["arr", 0], ["0", 0], ["m", 0], ["1", 0], ["for", 0], ["i", 0], ["v", 0], ["in", 0], ["enumerate", 0], ["arr", 0], ["if", 0], ["v", 0], ["m", 0], ["1", 0], ["print", 0], ["i", 0], ["1", 0], ["break", 0], ["m", 0], ["max", 0], ["m", 0], ["v", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["sys", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readlines", 0], ["1", 0], ["1", 0], ["split", 0], ["mx", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["mx", 0], ["print", 0], ["i", 0], ["1", 0], ["return", 0], ["mx", 0], ["max", 0], ["mx", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mx", 0], ["1", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["mx", 0], ["1", 0], ["ans", 0], ["i", 0], ["1", 0], ["break", 0], ["else", 0], ["mx", 0], ["max", 0], ["mx", 0], ["a", 0], ["i", 0], ["print", 0], ["ans", 0], ["from", 0], ["math", 0], ["import", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["maxs", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["maxs", 0], ["ans", 0], ["j", 0], ["1", 0], ["break", 0], ["else", 0], ["maxs", 0], ["max", 0], ["maxs", 0], ["a", 0], ["j", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["max", 0], ["el", 0], ["1", 0], ["er", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["max", 0], ["el", 0], ["1", 0], ["er", 0], ["i", 0], ["1", 0], ["break", 0], ["if", 0], ["a", 0], ["i", 0], ["max", 0], ["el", 0], ["max", 0], ["el", 0], ["a", 0], ["i", 0], ["print", 0], ["er", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["for", 0], ["j", 0], ["i", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["if", 0], ["i", 0], ["s", 0], ["print", 0], ["j", 0], ["1", 0], ["return", 0], ["if", 0], ["i", 0], ["s", 0], ["s", 0], ["1", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["y", 0], ["z", 0], ["t1", 0], ["t2", 0], ["t3", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["qwe", 0], ["a", 0], ["f", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["f", 0], ["1", 0], ["return", 0], ["i", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["f", 0], ["1", 0], ["f", 0], ["a", 0], ["i", 0], ["return", 0], ["1", 0], ["print", 0], ["qwe", 0], ["a", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["s", 0], ["tuple", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["if", 0], ["s", 0], ["0", 0], ["0", 0], ["print", 0], ["1", 0], ["return", 0], ["x", 0], ["1", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["x", 0], ["x", 0], ["max", 0], ["x", 0], ["s", 0], ["i", 0], ["1", 0], ["else", 0], ["ans", 0], ["i", 0], ["1", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["mas", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["maxx", 0], ["1", 0], ["f", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["mas", 0], ["i", 0], ["maxx", 0], ["if", 0], ["mas", 0], ["i", 0], ["1", 0], ["maxx", 0], ["print", 0], ["i", 0], ["1", 0], ["f", 0], ["1", 0], ["break", 0], ["else", 0], ["maxx", 0], ["1", 0], ["if", 0], ["f", 0], ["0", 0], ["print", 0], ["1", 0], ["input", 0], ["m", 0], ["1", 0], ["for", 0], ["i", 0], ["a", 0], ["in", 0], ["enumerate", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["m", 0], ["1", 0], ["print", 0], ["i", 0], ["1", 0], ["break", 0], ["else", 0], ["m", 0], ["max", 0], ["m", 0], ["a", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["collections", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["y", 0], ["z", 0], ["t1", 0], ["t2", 0], ["t3", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["stair", 0], ["t1", 0], ["abs", 0], ["y", 0], ["x", 0], ["ele", 0], ["t2", 0], ["abs", 0], ["y", 0], ["x", 0], ["abs", 0], ["z", 0], ["x", 0], ["3", 0], ["t3", 0], ["print", 0], ["stair", 0], ["ele", 0], ["print", 0], ["yes", 0], ["if", 0], ["ele", 0], ["stair", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["num", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["prevmax", 0], ["totmax", 0], ["1", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["v", 0], ["in", 0], ["enumerate", 0], ["num", 0], ["totmax", 0], ["max", 0], ["totmax", 0], ["v", 0], ["if", 0], ["totmax", 0], ["prevmax", 0], ["in", 0], ["0", 0], ["1", 0], ["prevmax", 0], ["totmax", 0], ["else", 0], ["print", 0], ["i", 0], ["1", 0], ["return", 0], ["print", 0], ["1", 0], ["main", 0], ["n", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["max", 0], ["seen", 0], ["1", 0], ["for", 0], ["ix", 0], ["a", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["if", 0], ["a", 0], ["max", 0], ["seen", 0], ["1", 0], ["print", 0], ["ix", 0], ["1", 0], ["return", 0], ["max", 0], ["seen", 0], ["max", 0], ["max", 0], ["seen", 0], ["a", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["num", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["fl", 0], ["true", 0], ["used", 0], ["false", 0], ["110000", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["num", 0], ["i", 0], ["0", 0], ["used", 0], ["0", 0], ["true", 0], ["continue", 0], ["if", 0], ["num", 0], ["i", 0], ["i", 0], ["or", 0], ["not", 0], ["used", 0], ["num", 0], ["i", 0], ["1", 0], ["ans", 0], ["i", 0], ["fl", 0], ["false", 0], ["break", 0], ["else", 0], ["used", 0], ["num", 0], ["i", 0], ["true", 0], ["if", 0], ["not", 0], ["fl", 0], ["print", 0], ["ans", 0], ["1", 0], ["else", 0], ["print", 0], ["1", 0], ["x", 0], ["y", 0], ["z", 0], ["t1", 0], ["t2", 0], ["t3", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["int", 0], ["input", 0], ["i", 0], ["1", 0], ["z", 0], ["1", 0], ["for", 0], ["i0", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["int", 0], ["i0", 0], ["z", 0], ["1", 0], ["print", 0], ["i", 0], ["return", 0], ["else", 0], ["z", 0], ["max", 0], ["z", 0], ["int", 0], ["i0", 0], ["i", 0], ["i", 0], ["1", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["m", 0], ["1", 0], ["print", 0], ["i", 0], ["1", 0], ["return", 0], ["else", 0], ["m", 0], ["max", 0], ["a", 0], ["i", 0], ["m", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["maxx", 0], ["1", 0], ["minn", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["maxx", 0], ["1", 0], ["maxx", 0], ["a", 0], ["i", 0], ["elif", 0], ["a", 0], ["i", 0], ["maxx", 0], ["1", 0], ["minn", 0], ["i", 0], ["break", 0], ["if", 0], ["minn", 0], ["1", 0], ["print", 0], ["minn", 0], ["else", 0], ["print", 0], ["minn", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["1", 0], ["m", 0], ["1", 0], ["ans", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["if", 0], ["x", 0], ["m", 0], ["1", 0], ["ans", 0], ["i", 0], ["break", 0], ["else", 0], ["i", 0], ["i", 0], ["1", 0], ["m", 0], ["max", 0], ["m", 0], ["x", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["max", 0], ["1", 0], ["ans", 0], ["true", 0], ["ind", 0], ["1", 0], ["for", 0], ["a", 0], ["in", 0], ["a", 0], ["if", 0], ["a", 0], ["max", 0], ["1", 0], ["ans", 0], ["false", 0], ["break", 0], ["if", 0], ["a", 0], ["max", 0], ["1", 0], ["max", 0], ["a", 0], ["ind", 0], ["1", 0], ["print", 0], ["1", 0], ["if", 0], ["ans", 0], ["else", 0], ["ind", 0], ["input", 0], ["a", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["top", 0], ["1", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["start", 0], ["1", 0], ["if", 0], ["x", 0], ["top", 0], ["1", 0], ["top", 0], ["max", 0], ["x", 0], ["top", 0], ["else", 0], ["print", 0], ["i", 0], ["return", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["1", 0], ["s", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["m", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["break", 0], ["else", 0], ["m", 0], ["max", 0], ["m", 0], ["a", 0], ["i", 0], ["print", 0], ["s", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["s", 0], ["set", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["1", 0], ["not", 0], ["in", 0], ["s", 0], ["print", 0], ["i", 0], ["1", 0], ["return", 0], ["s", 0], ["add", 0], ["arr", 0], ["i", 0], ["print", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pos", 0], ["max", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["if", 0], ["l", 0], ["i", 0], ["pos", 0], ["max", 0], ["print", 0], ["i", 0], ["1", 0], ["return", 0], ["elif", 0], ["l", 0], ["i", 0], ["pos", 0], ["max", 0], ["pos", 0], ["max", 0], ["1", 0], ["print", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nFor the grand opening of the algorithmic games in NlogNsglow, a row of tower blocks is set to be demolished in a grand demonstration of renewal. Originally the plan was to accomplish this with controlled explosions, one for each tower block, but time constraints now require a hastier solution.\n\nTo help you remove the blocks more rapidly you have been given the use of a Universal Kinetic / Incandescent Energy Particle Cannon (UKIEPC). On a single charge, this cutting-edge contraption can remove either all of the floors in a single tower block, or all the $x$-th floors in all the blocks simultaneously, for user’s choice of the floor number $x$. In the latter case, the blocks that are less than $x$ floors high are left untouched, while for blocks having more than $x$ floors, all the floors above the removed $x$-th one fall down by one level.\n\n-----Task-----\nGiven the number of floors of all towers, output the minimum number of charges needed to eliminate all floors of all blocks.\n\n-----Input-----\nThe first line of input contains the number of blocks $n$, where $2 \\leq n \\leq 100000$. The second line contains $n$ consecutive block heights $h_ i$ for $i=1,2,\\ldots ,n$, where $1 \\leq h_ i \\leq 1000000$.\n\n-----Output-----\nOutput one line containing one integer: the minimum number of charges needed to tear down all the blocks.\n\n-----Examples-----\nSample Input:\n6\n2 1 8 8 2 3\nSample Output:\n5\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6969"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6969", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["for", 1], ["the", 1], ["grand", 1], ["opening", 1], ["of", 1], ["the", 1], ["algorithmic", 1], ["games", 1], ["in", 1], ["nlognsglow", 1], ["a", 1], ["row", 1], ["of", 1], ["tower", 1], ["blocks", 1], ["is", 1], ["set", 1], ["to", 1], ["be", 1], ["demolished", 1], ["in", 1], ["a", 1], ["grand", 1], ["demonstration", 1], ["of", 1], ["renewal", 1], ["originally", 1], ["the", 1], ["plan", 1], ["was", 1], ["to", 1], ["accomplish", 1], ["this", 1], ["with", 1], ["controlled", 1], ["explosions", 1], ["one", 1], ["for", 1], ["each", 1], ["tower", 1], ["block", 1], ["but", 1], ["time", 1], ["constraints", 1], ["now", 1], ["require", 1], ["a", 1], ["hastier", 1], ["solution", 1], ["to", 1], ["help", 1], ["you", 1], ["remove", 1], ["the", 1], ["blocks", 1], ["more", 1], ["rapidly", 1], ["you", 1], ["have", 1], ["been", 1], ["given", 1], ["the", 1], ["use", 1], ["of", 1], ["a", 1], ["universal", 1], ["kinetic", 1], ["incandescent", 1], ["energy", 1], ["particle", 1], ["cannon", 1], ["ukiepc", 1], ["on", 1], ["a", 1], ["single", 1], ["charge", 1], ["this", 1], ["cutting", 1], ["edge", 1], ["contraption", 1], ["can", 1], ["remove", 1], ["either", 1], ["all", 1], ["of", 1], ["the", 1], ["floors", 1], ["in", 1], ["a", 1], ["single", 1], ["tower", 1], ["block", 1], ["or", 1], ["all", 1], ["the", 1], ["x", 1], ["th", 1], ["floors", 1], ["in", 1], ["all", 1], ["the", 1], ["blocks", 1], ["simultaneously", 1], ["for", 1], ["user’s", 1], ["choice", 1], ["of", 1], ["the", 1], ["floor", 1], ["number", 1], ["x", 1], ["in", 1], ["the", 1], ["latter", 1], ["case", 1], ["the", 1], ["blocks", 1], ["that", 1], ["are", 1], ["less", 1], ["than", 1], ["x", 1], ["floors", 1], ["high", 1], ["are", 1], ["left", 1], ["untouched", 1], ["while", 1], ["for", 1], ["blocks", 1], ["having", 1], ["more", 1], ["than", 1], ["x", 1], ["floors", 1], ["all", 1], ["the", 1], ["floors", 0], ["above", 0], ["the", 0], ["removed", 0], ["x", 0], ["th", 0], ["one", 0], ["fall", 0], ["down", 0], ["by", 0], ["one", 0], ["level", 0], ["task", 0], ["given", 1], ["the", 1], ["number", 1], ["of", 1], ["floors", 1], ["of", 1], ["all", 1], ["towers", 1], ["output", 1], ["the", 1], ["minimum", 0], ["number", 0], ["of", 0], ["charges", 0], ["needed", 0], ["to", 0], ["eliminate", 0], ["all", 0], ["floors", 0], ["of", 0], ["all", 0], ["blocks", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 0], ["contains", 0], ["the", 0], ["number", 0], ["of", 0], ["blocks", 0], ["n", 0], ["where", 0], ["2", 0], ["leq", 0], ["n", 0], ["leq", 0], ["100000", 0], ["the", 1], ["second", 1], ["line", 1], ["contains", 1], ["n", 1], ["consecutive", 1], ["block", 1], ["heights", 1], ["h", 1], ["i", 1], ["for", 0], ["i", 0], ["1", 0], ["2", 0], ["ldots", 0], ["n", 0], ["where", 0], ["1", 0], ["leq", 0], ["h", 0], ["i", 0], ["leq", 0], ["1000000", 0], ["output", 0], ["output", 1], ["one", 1], ["line", 1], ["containing", 1], ["one", 1], ["integer", 1], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["charges", 0], ["needed", 0], ["to", 0], ["tear", 0], ["down", 0], ["all", 0], ["the", 0], ["blocks", 0], ["examples", 0], ["sample", 0], ["input", 0], ["6", 0], ["2", 0], ["1", 0], ["8", 0], ["8", 0], ["2", 0], ["3", 0], ["sample", 0], ["output", 0], ["5", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6844262295081968, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6844262295081968, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.88671875, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.88671875, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6844262295081968, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6844262295081968, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.88671875, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.88671875, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou will be given three integers $A$, $B$ and $C$. The numbers will not be given in that exact order, but we do know that $A$ is less than $B$ and $B$ less than $C$. In order to make for a more pleasant viewing, we want to rearrange them in a given order.\n\n-----Input-----\nThe first line contains the three positive integers $A$, $B$ and $C$, not necessarily in that order. The three numbers will be less than or equal to $100$.\n\nThe second line contains three uppercase letters ’A’, ’B’ and ’C’ (with no spaces between them) representing the desired order.\n\n-----Output-----\nOutput $A$, $B$ and $C$ in the desired order on a single line, separated by single spaces.\n\n-----Examples-----\nSample Input:\n1 5 3\nABC\nSample Output:\n1 3 5\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5584"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5584", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["will", 1], ["be", 1], ["given", 1], ["three", 1], ["integers", 1], ["a", 1], ["b", 1], ["and", 1], ["c", 1], ["the", 1], ["numbers", 1], ["will", 1], ["not", 1], ["be", 1], ["given", 1], ["in", 1], ["that", 1], ["exact", 1], ["order", 1], ["but", 1], ["we", 1], ["do", 1], ["know", 1], ["that", 1], ["a", 1], ["is", 1], ["less", 1], ["than", 1], ["b", 1], ["and", 1], ["b", 1], ["less", 1], ["than", 1], ["c", 1], ["in", 1], ["order", 1], ["to", 1], ["make", 1], ["for", 1], ["a", 1], ["more", 0], ["pleasant", 0], ["viewing", 0], ["we", 0], ["want", 0], ["to", 0], ["rearrange", 0], ["them", 0], ["in", 0], ["a", 0], ["given", 0], ["order", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["the", 1], ["three", 1], ["positive", 1], ["integers", 1], ["a", 1], ["b", 1], ["and", 1], ["c", 1], ["not", 1], ["necessarily", 1], ["in", 1], ["that", 1], ["order", 1], ["the", 1], ["three", 1], ["numbers", 1], ["will", 1], ["be", 1], ["less", 1], ["than", 1], ["or", 1], ["equal", 1], ["to", 1], ["100", 1], ["the", 1], ["second", 1], ["line", 1], ["contains", 1], ["three", 1], ["uppercase", 1], ["letters", 1], ["’a’", 1], ["’b’", 1], ["and", 0], ["’c’", 0], ["with", 0], ["no", 0], ["spaces", 0], ["between", 0], ["them", 0], ["representing", 0], ["the", 0], ["desired", 0], ["order", 0], ["output", 0], ["output", 1], ["a", 1], ["b", 1], ["and", 1], ["c", 1], ["in", 0], ["the", 0], ["desired", 0], ["order", 0], ["on", 0], ["a", 0], ["single", 0], ["line", 0], ["separated", 0], ["by", 0], ["single", 0], ["spaces", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["5", 0], ["3", 0], ["abc", 0], ["sample", 0], ["output", 0], ["1", 0], ["3", 0], ["5", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6335877862595419, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6335877862595419, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8321678321678322, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8321678321678322, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6335877862595419, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6335877862595419, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8321678321678322, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8321678321678322, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nA common plot device in story-telling is the “All Just A Dream” trope. Typical symptoms of this trope being used are talking lions, main characters dying, yodeling aliens on monocycles, and a general plethora of weird events. Then, of course, someone wakes up and it is revealed that everything that happened during the entire season did in fact not happen at all. It was All Just A Dream (or some kind of hallucination), and the days of our lives spent watching all those episodes are lost forever. In order to cause further confusion and uncertainty, this can also be done in layers, with characters having dreams within dreams within dreams, and so on. \n\nWhen the All Just A Dream trick is taken too far and gets used too often, it can get difficult to keep track of what has actually happened. This is where you enter the picture. You will be given a list of events, dreams, and scenarios. Each scenario specifies some events that have happened and some others that have not happened. Your job is to determine for each scenario whether that scenario is possible (possibly using the All Just A Dream trick).\n\n-----Input-----\nThe first line of input consists of an integer $0 \\le n \\le 50000$, the number of events, dreams and scenarios. Then follow $n$ lines, giving the events, dreams, and scenarios in chronological order. Each line is in one of the following forms:\n - An event line is of the form “E $e$”, indicating that event $e$ happens (see below for format of $e$).\n - A dream line is of the form “D $r$”, indicating that the last $r$ events that happened were All Just A Dream. Note that these events are now considered to not have happened, so they should not be counted when processing subsequent D lines.\n - A scenario line is of the form “S $k$ $e_1$ $\\ldots $ $e_ k$”, where $1 \\le k \\le 30$ is an integer giving the number of events and $e_1, \\ldots , e_ k$ is the list of events of the scenario. In a scenario, each event may be prefixed with a ‘!’, indicating that the event did not happen in this scenario.\n\nEvents are strings containing at most $20$ characters and using only the characters ‘a’-‘z’ and underscores (‘_’). For ‘D’ lines, you can assume that $r$ is an integer between $1$ and $R$, where $R$ is the total number of events that have happened so far (and that have not turned out to be a dream). For ‘E’ lines, you can assume that $e$ is not an event that has already happened, except if the previous occurence of the event turned out to be a dream, in which case it can happen again.Warning\n\nThis problem has somewhat large amounts of input and output. We recommend you to make sure that your input and output are properly buffered in order to make the most of the few seconds of execution time that we give you.\n\n-----Output-----\nFor each scenario in the input, output a line as follows:\n - “Yes” if the given scenario is consistent with what has happened so far.\n - “$r$ Just A Dream” if the given scenario would be consistent with what has happened so far, provided a “D $r$” line had occurred just before the scenario. If there are many possible values of $r$, choose the smallest value. Note that you should not consider this hypothetical “D $r$” line to have occurred (as illustrated by sample input 2 below).\n - “Plot Error” otherwise.\n\n-----Examples-----\nSample Input:\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2 !bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1 !bobby_dies\nS 2 !bobby_dies it_goes_on_and_on\nSample Output:\nPlot Error\n3 Just A Dream\nYes\nPlot Error\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6367"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6367", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 1], ["common", 1], ["plot", 1], ["device", 1], ["in", 1], ["story", 1], ["telling", 1], ["is", 1], ["the", 1], ["“all", 1], ["just", 1], ["a", 1], ["dream”", 1], ["trope", 1], ["typical", 1], ["symptoms", 1], ["of", 1], ["this", 1], ["trope", 1], ["being", 1], ["used", 1], ["are", 1], ["talking", 1], ["lions", 1], ["main", 1], ["characters", 1], ["dying", 1], ["yodeling", 1], ["aliens", 1], ["on", 1], ["monocycles", 1], ["and", 1], ["a", 1], ["general", 1], ["plethora", 1], ["of", 1], ["weird", 1], ["events", 1], ["then", 1], ["of", 1], ["course", 1], ["someone", 1], ["wakes", 1], ["up", 1], ["and", 1], ["it", 1], ["is", 1], ["revealed", 1], ["that", 1], ["everything", 1], ["that", 1], ["happened", 1], ["during", 1], ["the", 1], ["entire", 1], ["season", 1], ["did", 1], ["in", 1], ["fact", 1], ["not", 1], ["happen", 1], ["at", 1], ["all", 1], ["it", 1], ["was", 1], ["all", 1], ["just", 1], ["a", 1], ["dream", 1], ["or", 1], ["some", 1], ["kind", 1], ["of", 1], ["hallucination", 1], ["and", 1], ["the", 1], ["days", 1], ["of", 1], ["our", 1], ["lives", 1], ["spent", 1], ["watching", 1], ["all", 1], ["those", 1], ["episodes", 1], ["are", 1], ["lost", 1], ["forever", 1], ["in", 1], ["order", 1], ["to", 1], ["cause", 1], ["further", 1], ["confusion", 1], ["and", 1], ["uncertainty", 1], ["this", 1], ["can", 1], ["also", 1], ["be", 1], ["done", 1], ["in", 1], ["layers", 1], ["with", 1], ["characters", 1], ["having", 1], ["dreams", 1], ["within", 1], ["dreams", 1], ["within", 1], ["dreams", 1], ["and", 1], ["so", 1], ["on", 1], ["when", 1], ["the", 1], ["all", 1], ["just", 1], ["a", 1], ["dream", 1], ["trick", 1], ["is", 1], ["taken", 1], ["too", 1], ["far", 1], ["and", 1], ["gets", 1], ["used", 1], ["too", 1], ["often", 1], ["it", 1], ["can", 1], ["get", 1], ["difficult", 1], ["to", 1], ["keep", 1], ["track", 1], ["of", 1], ["what", 1], ["has", 1], ["actually", 1], ["happened", 1], ["this", 1], ["is", 1], ["where", 1], ["you", 1], ["enter", 1], ["the", 1], ["picture", 1], ["you", 1], ["will", 1], ["be", 1], ["given", 1], ["a", 1], ["list", 1], ["of", 1], ["events", 1], ["dreams", 1], ["and", 1], ["scenarios", 1], ["each", 1], ["scenario", 1], ["specifies", 1], ["some", 1], ["events", 1], ["that", 1], ["have", 1], ["happened", 1], ["and", 1], ["some", 1], ["others", 1], ["that", 1], ["have", 1], ["not", 1], ["happened", 1], ["your", 1], ["job", 1], ["is", 1], ["to", 1], ["determine", 1], ["for", 1], ["each", 1], ["scenario", 1], ["whether", 1], ["that", 0], ["scenario", 0], ["is", 0], ["possible", 0], ["possibly", 0], ["using", 0], ["the", 0], ["all", 0], ["just", 0], ["a", 0], ["dream", 0], ["trick", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["consists", 0], ["of", 0], ["an", 0], ["integer", 0], ["0", 0], ["le", 0], ["n", 0], ["le", 0], ["50000", 0], ["the", 0], ["number", 0], ["of", 0], ["events", 0], ["dreams", 0], ["and", 0], ["scenarios", 0], ["then", 0], ["follow", 0], ["n", 0], ["lines", 0], ["giving", 0], ["the", 0], ["events", 0], ["dreams", 0], ["and", 0], ["scenarios", 0], ["in", 0], ["chronological", 0], ["order", 0], ["each", 0], ["line", 0], ["is", 0], ["in", 0], ["one", 0], ["of", 0], ["the", 0], ["following", 0], ["forms", 0], ["an", 1], ["event", 1], ["line", 1], ["is", 1], ["of", 1], ["the", 1], ["form", 1], ["“e", 1], ["e", 1], ["”", 1], ["indicating", 1], ["that", 1], ["event", 1], ["e", 1], ["happens", 1], ["see", 1], ["below", 1], ["for", 1], ["format", 1], ["of", 1], ["e", 1], ["a", 1], ["dream", 1], ["line", 1], ["is", 1], ["of", 1], ["the", 1], ["form", 1], ["“d", 1], ["r", 1], ["”", 1], ["indicating", 1], ["that", 1], ["the", 1], ["last", 1], ["r", 1], ["events", 1], ["that", 1], ["happened", 1], ["were", 1], ["all", 1], ["just", 1], ["a", 1], ["dream", 1], ["note", 1], ["that", 1], ["these", 1], ["events", 1], ["are", 1], ["now", 1], ["considered", 1], ["to", 1], ["not", 1], ["have", 1], ["happened", 1], ["so", 1], ["they", 1], ["should", 1], ["not", 1], ["be", 1], ["counted", 1], ["when", 1], ["processing", 1], ["subsequent", 1], ["d", 1], ["lines", 1], ["a", 1], ["scenario", 1], ["line", 1], ["is", 1], ["of", 1], ["the", 1], ["form", 1], ["“s", 1], ["k", 1], ["e", 1], ["1", 1], ["ldots", 1], ["e", 1], ["k", 1], ["”", 1], ["where", 1], ["1", 1], ["le", 1], ["k", 1], ["le", 1], ["30", 1], ["is", 1], ["an", 1], ["integer", 1], ["giving", 1], ["the", 1], ["number", 1], ["of", 1], ["events", 1], ["and", 1], ["e", 1], ["1", 1], ["ldots", 1], ["e", 1], ["k", 1], ["is", 1], ["the", 1], ["list", 1], ["of", 1], ["events", 1], ["of", 1], ["the", 1], ["scenario", 1], ["in", 1], ["a", 1], ["scenario", 1], ["each", 1], ["event", 1], ["may", 1], ["be", 1], ["prefixed", 1], ["with", 1], ["a", 1], ["‘", 1], ["’", 1], ["indicating", 1], ["that", 1], ["the", 1], ["event", 1], ["did", 1], ["not", 1], ["happen", 1], ["in", 1], ["this", 1], ["scenario", 1], ["events", 1], ["are", 1], ["strings", 1], ["containing", 1], ["at", 1], ["most", 1], ["20", 1], ["characters", 1], ["and", 1], ["using", 1], ["only", 1], ["the", 1], ["characters", 1], ["‘a’", 1], ["‘z’", 1], ["and", 1], ["underscores", 1], ["‘", 1], ["’", 1], ["for", 1], ["‘d’", 1], ["lines", 1], ["you", 1], ["can", 1], ["assume", 1], ["that", 1], ["r", 1], ["is", 1], ["an", 1], ["integer", 1], ["between", 1], ["1", 1], ["and", 1], ["r", 1], ["where", 1], ["r", 1], ["is", 1], ["the", 1], ["total", 1], ["number", 1], ["of", 1], ["events", 1], ["that", 1], ["have", 1], ["happened", 1], ["so", 1], ["far", 1], ["and", 1], ["that", 1], ["have", 1], ["not", 1], ["turned", 1], ["out", 1], ["to", 1], ["be", 1], ["a", 1], ["dream", 1], ["for", 1], ["‘e’", 1], ["lines", 1], ["you", 1], ["can", 1], ["assume", 1], ["that", 1], ["e", 1], ["is", 1], ["not", 1], ["an", 1], ["event", 1], ["that", 1], ["has", 1], ["already", 1], ["happened", 1], ["except", 1], ["if", 1], ["the", 1], ["previous", 1], ["occurence", 1], ["of", 1], ["the", 1], ["event", 1], ["turned", 1], ["out", 0], ["to", 0], ["be", 0], ["a", 0], ["dream", 0], ["in", 0], ["which", 0], ["case", 0], ["it", 0], ["can", 0], ["happen", 0], ["again", 0], ["warning", 0], ["this", 2], ["problem", 2], ["has", 2], ["somewhat", 2], ["large", 2], ["amounts", 2], ["of", 1], ["input", 1], ["and", 1], ["output", 1], ["we", 1], ["recommend", 1], ["you", 1], ["to", 1], ["make", 1], ["sure", 1], ["that", 1], ["your", 1], ["input", 1], ["and", 1], ["output", 1], ["are", 1], ["properly", 1], ["buffered", 1], ["in", 1], ["order", 1], ["to", 1], ["make", 1], ["the", 1], ["most", 0], ["of", 0], ["the", 0], ["few", 0], ["seconds", 0], ["of", 0], ["execution", 0], ["time", 0], ["that", 0], ["we", 0], ["give", 0], ["you", 0], ["output", 0], ["for", 0], ["each", 0], ["scenario", 0], ["in", 0], ["the", 0], ["input", 0], ["output", 0], ["a", 0], ["line", 0], ["as", 0], ["follows", 0], ["“yes”", 1], ["if", 1], ["the", 1], ["given", 1], ["scenario", 1], ["is", 1], ["consistent", 1], ["with", 1], ["what", 1], ["has", 1], ["happened", 1], ["so", 1], ["far", 1], ["“", 1], ["r", 1], ["just", 1], ["a", 1], ["dream”", 1], ["if", 1], ["the", 1], ["given", 1], ["scenario", 1], ["would", 1], ["be", 1], ["consistent", 1], ["with", 1], ["what", 1], ["has", 1], ["happened", 1], ["so", 1], ["far", 1], ["provided", 1], ["a", 1], ["“d", 1], ["r", 1], ["”", 1], ["line", 1], ["had", 1], ["occurred", 1], ["just", 1], ["before", 1], ["the", 1], ["scenario", 1], ["if", 1], ["there", 1], ["are", 1], ["many", 1], ["possible", 1], ["values", 1], ["of", 1], ["r", 1], ["choose", 1], ["the", 1], ["smallest", 1], ["value", 1], ["note", 1], ["that", 1], ["you", 1], ["should", 1], ["not", 1], ["consider", 1], ["this", 1], ["hypothetical", 1], ["“d", 1], ["r", 1], ["”", 0], ["line", 0], ["to", 0], ["have", 0], ["occurred", 0], ["as", 0], ["illustrated", 0], ["by", 0], ["sample", 0], ["input", 0], ["2", 0], ["below", 0], ["“plot", 0], ["error”", 0], ["otherwise", 0], ["examples", 0], ["sample", 0], ["input", 0], ["10", 0], ["e", 0], ["business", 0], ["as", 0], ["usual", 0], ["e", 0], ["bobby", 0], ["dies", 0], ["s", 0], ["1", 0], ["bobby", 0], ["died", 0], ["e", 0], ["stuff", 0], ["happens", 0], ["e", 0], ["jr", 0], ["does", 0], ["bad", 0], ["things", 0], ["s", 0], ["2", 0], ["bobby", 0], ["dies", 0], ["business", 0], ["as", 0], ["usual", 0], ["e", 0], ["it", 0], ["goes", 0], ["on", 0], ["and", 0], ["on", 0], ["d", 0], ["4", 0], ["s", 0], ["1", 0], ["bobby", 0], ["dies", 0], ["s", 0], ["2", 0], ["bobby", 0], ["dies", 0], ["it", 0], ["goes", 0], ["on", 0], ["and", 0], ["on", 0], ["sample", 0], ["output", 0], ["plot", 0], ["error", 0], ["3", 0], ["just", 0], ["a", 0], ["dream", 0], ["yes", 0], ["plot", 0], ["error", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7439393939393939, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7393939393939394, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8020833333333334, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7976190476190477, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7439393939393939, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7393939393939394, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8020833333333334, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7976190476190477, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nEvery school morning Mirko is woken up by the sound of his alarm clock. Since he is a bit forgetful, quite often he leaves the alarm on on Saturday morning too. That’s not too bad though, since he feels good when he realizes he doesn’t have to get up from his warm and cozy bed.\n\nHe likes that so much that he would like to experience that on other days of the week too! His friend Slavko offered this simple solution: set his alarm clock $45$ minutes early, and he can enjoy the comfort of his bed, fully awake, for $45$ minutes each day.\n\nMirko decided to heed his advice, however his alarm clock uses $24$-hour notation and he has issues with adjusting the time. Help Mirko and write a program that will take one time stamp, in $24$-hour notation, and print out a new time stamp, $45$ minutes earlier, also in $24$-hour notation.\n\nIf you are unfamiliar with $24$-hour time notation yourself, you might be interested to know it starts with 0:00 (midnight) and ends with 23:59 (one minute before midnight).\n\n-----Input-----\nThe first and only line of input will contain exactly two integers $H$ and $M$ $(0 \\leq H \\leq 23, 0 \\leq M \\leq 59)$ separated by a single space, the input time in $24$-hour notation. $H$ denotes hours and $M$ minutes.\n\n-----Output-----\nThe first and only line of output should contain exactly two integers, the time $45$ minutes before input time.\n\n-----Examples-----\nSample Input 1:\n10 10\nSample Output 1:\n9 25\n\nSample Input 2:\n0 30\nSample Output 2:\n23 45\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7315"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7315", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["every", 2], ["school", 2], ["morning", 2], ["mirko", 2], ["is", 2], ["woken", 2], ["up", 2], ["by", 2], ["the", 2], ["sound", 2], ["of", 2], ["his", 2], ["alarm", 2], ["clock", 2], ["since", 2], ["he", 2], ["is", 2], ["a", 2], ["bit", 2], ["forgetful", 1], ["quite", 1], ["often", 1], ["he", 1], ["leaves", 0], ["the", 0], ["alarm", 0], ["on", 0], ["on", 0], ["saturday", 0], ["morning", 0], ["too", 0], ["that’s", 0], ["not", 0], ["too", 0], ["bad", 0], ["though", 0], ["since", 1], ["he", 1], ["feels", 1], ["good", 1], ["when", 1], ["he", 1], ["realizes", 1], ["he", 1], ["doesn’t", 1], ["have", 1], ["to", 1], ["get", 1], ["up", 1], ["from", 1], ["his", 1], ["warm", 1], ["and", 1], ["cozy", 1], ["bed", 1], ["he", 1], ["likes", 1], ["that", 1], ["so", 1], ["much", 1], ["that", 1], ["he", 1], ["would", 1], ["like", 1], ["to", 1], ["experience", 1], ["that", 1], ["on", 1], ["other", 1], ["days", 1], ["of", 1], ["the", 1], ["week", 1], ["too", 1], ["his", 1], ["friend", 1], ["slavko", 1], ["offered", 1], ["this", 1], ["simple", 1], ["solution", 1], ["set", 1], ["his", 1], ["alarm", 1], ["clock", 1], ["45", 1], ["minutes", 1], ["early", 1], ["and", 1], ["he", 1], ["can", 1], ["enjoy", 1], ["the", 1], ["comfort", 1], ["of", 1], ["his", 1], ["bed", 1], ["fully", 1], ["awake", 1], ["for", 1], ["45", 1], ["minutes", 1], ["each", 1], ["day", 1], ["mirko", 1], ["decided", 1], ["to", 1], ["heed", 1], ["his", 1], ["advice", 1], ["however", 1], ["his", 1], ["alarm", 1], ["clock", 1], ["uses", 1], ["24", 1], ["hour", 1], ["notation", 1], ["and", 1], ["he", 1], ["has", 1], ["issues", 1], ["with", 1], ["adjusting", 1], ["the", 1], ["time", 1], ["help", 1], ["mirko", 1], ["and", 1], ["write", 1], ["a", 1], ["program", 1], ["that", 1], ["will", 1], ["take", 1], ["one", 1], ["time", 1], ["stamp", 1], ["in", 1], ["24", 1], ["hour", 1], ["notation", 1], ["and", 1], ["print", 1], ["out", 1], ["a", 1], ["new", 1], ["time", 1], ["stamp", 1], ["45", 1], ["minutes", 1], ["earlier", 1], ["also", 1], ["in", 1], ["24", 1], ["hour", 1], ["notation", 1], ["if", 2], ["you", 2], ["are", 2], ["unfamiliar", 2], ["with", 2], ["24", 2], ["hour", 2], ["time", 2], ["notation", 2], ["yourself", 2], ["you", 2], ["might", 2], ["be", 2], ["interested", 2], ["to", 2], ["know", 2], ["it", 2], ["starts", 2], ["with", 2], ["0", 0], ["00", 0], ["midnight", 0], ["and", 0], ["ends", 0], ["with", 0], ["23", 0], ["59", 0], ["one", 0], ["minute", 0], ["before", 0], ["midnight", 0], ["input", 0], ["the", 1], ["first", 1], ["and", 1], ["only", 1], ["line", 0], ["of", 0], ["input", 0], ["will", 0], ["contain", 0], ["exactly", 0], ["two", 0], ["integers", 0], ["h", 0], ["and", 0], ["m", 0], ["0", 0], ["leq", 0], ["h", 0], ["leq", 0], ["23", 0], ["0", 0], ["leq", 0], ["m", 0], ["leq", 0], ["59", 1], ["separated", 1], ["by", 1], ["a", 1], ["single", 1], ["space", 1], ["the", 0], ["input", 0], ["time", 0], ["in", 0], ["24", 0], ["hour", 0], ["notation", 0], ["h", 0], ["denotes", 0], ["hours", 0], ["and", 0], ["m", 0], ["minutes", 0], ["output", 0], ["the", 1], ["first", 1], ["and", 1], ["only", 1], ["line", 1], ["of", 0], ["output", 0], ["should", 0], ["contain", 0], ["exactly", 0], ["two", 0], ["integers", 0], ["the", 0], ["time", 0], ["45", 0], ["minutes", 0], ["before", 0], ["input", 0], ["time", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["10", 0], ["10", 0], ["sample", 0], ["output", 0], ["1", 0], ["9", 0], ["25", 0], ["sample", 0], ["input", 0], ["2", 0], ["0", 0], ["30", 0], ["sample", 0], ["output", 0], ["2", 0], ["23", 0], ["45", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6544117647058824, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5845588235294118, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8380281690140845, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8045774647887324, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6544117647058824, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5845588235294118, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8380281690140845, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8045774647887324, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou have r red, g green and b blue balloons. To decorate a single table for the banquet you need exactly three balloons. Three balloons attached to some table shouldn't have the same color. What maximum number t of tables can be decorated if we know number of balloons of each color?\n\nYour task is to write a program that for given values r, g and b will find the maximum number t of tables, that can be decorated in the required manner.\n\n\n-----Input-----\n\nThe single line contains three integers r, g and b (0 ≤ r, g, b ≤ 2·10^9) — the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.\n\n\n-----Output-----\n\nPrint a single integer t — the maximum number of tables that can be decorated in the required manner.\n\n\n-----Examples-----\nInput\n5 4 3\n\nOutput\n4\n\nInput\n1 1 1\n\nOutput\n1\n\nInput\n2 3 3\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample you can decorate the tables with the following balloon sets: \"rgg\", \"gbb\", \"brr\", \"rrg\", where \"r\", \"g\" and \"b\" represent the red, green and blue balls, respectively.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["r, g, b = map(int, input().split())\nmaxi = (r + g + b) // 3\nprint(min(maxi, r + g, r + b, g + b))\n", "x,y,z=list(map(int,input().split()))\nL=[x,y,z]\nL.sort()\nx=L[2]\ny=L[1]\nz=L[0]\nn=2*y+2*z\na=-1\nb=y+z+1\nwhile(b-a>1):\n\te=(b+a)//2\n\tif(n-2*e<=x+e):\n\t\tb=e\n\telse:\n\t\ta=e\n\nprint(min((n-2*b)//2,(x+b)//2))\n", "r, g, b = tuple(map(int, input().split()))\n \nif (r > 2 * (g + b)):\n\tr = 2 * (g + b)\nif b > 2 * (g + r):\n\tb = 2 * (g + r)\nif g > 2 * (r + b):\n\tg = 2 * (r + b)\nprint(int((g + r + b) / 3))\n", "c = sorted(list(map(int,input().split())))\nif c[0] + c[1] >= c[2]//2 :\n\tprint(sum(c)//3)\nelse :\n\tprint(c[0] + c[1])\n", "\"\"\"\nCodeforces Contest 273 Div 2 Problem C\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef main():\n\ta = read()\n\ta.sort()\n\tres = 0\n\tif a[1]-a[0] <= a[2]-a[1]:\n\t\tres += a[1]-a[0]\n\t\ta[1] -= res\n\t\ta[2] -= 2*res\n\t\tif 4*a[0] <= a[2]:\n\t\t\tprint(res + 2*a[0])\n\t\t\treturn\n\t\telse:\n\t\t\tn = (a[2] - a[0]) // 3\n\t\t\tres += 2*n\n\t\t\ta[0] -= n\n\t\t\ta[1] -= n\n\t\t\ta[2] -= 4*n\n\t\t\tif 0 < a[0] == a[2] - 2:\n\t\t\t\tres += 1\n\t\t\t\ta[0] -= 1\n\t\t\t\ta[2] -= 2\n\t\t\tprint(res + a[0])\n\t\t\treturn\n\telse:\n\t\tres += a[2]-a[1]\n\t\ta[1] -= res\n\t\ta[2] -= 2*res\n\t\tn = (a[1] - a[0]) // 3\n\t\tres += 2*n\n\t\ta[1] -= 3*n\n\t\ta[2] -= 3*n\n\t\tif a[1] == a[0]+2:\n\t\t\tres += 1\n\t\t\ta[1] -= 2\n\t\t\ta[2] -= 1\n\t\tprint(res + a[0])\n\t\treturn\n\n################################### NON-SOLUTION STUFF BELOW\n\ndef read(mode=2):\n\t# 0: String\n\t# 1: List of strings\n\t# 2: List of integers\n\tinputs = input().strip()\n\tif mode == 0: return inputs\n\tif mode == 1: return inputs.split()\n\tif mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n\tif s is None: s = \"\"\n\tif isinstance(s, list): s = \" \".join(map(str, s))\n\ts = str(s)\n\tprint(s, end=\"\")\n\nimport itertools\nwrite(main())\n", "c=list(map(int,input().split()))\nc.sort()\nprint(c[0]+c[1] if c[0]+c[1]<=c[2]//2 else sum(c)//3)\n", "a,b,c=map(int,input().split())\nx=max(a,b,c)\nif x>2*(a+b+c-x):\n\tprint (a+b+c-x)\nelse:\n\tprint((a+b+c)//3)\n", "r,g,b=map(int,input().split())\nprint(min(r+g,r+b,b+g,(r+b+g)//3))\n", "import sys\nf = sys.stdin\n#f = open('H:\\\\Portable Python 3.2.5.1\\\\test_248B1.txt') \n\n#r, g, b = map(int, f.readline().strip().split())\na = [int(u) for u in f.readline().strip().split()]\n\na.sort(reverse=True)\n\nt = a[2]\n\ndt = min(a[0]-a[1], 2*t) // 2\na[2] -= dt\na[0] -= 2*dt\na[0] -= a[2]\na[1] -= a[2]\n\nt += min((a[0]+a[1]) // 3, a[1])\n\nprint(t)\n", "c = sorted(list(map(int,input().split())))\nif c[0] + c[1] >= c[2]//2 :\n\tprint(sum(c)//3)\nelse :\n\tprint(c[0] + c[1])\n", "balloons = list(map(int, input().split(' ')))\nballoons.sort()\na, b, c = list(map(int, balloons))\nif a + b <= int(c/2):\n\tprint(a+b)\nelse:\n\tprint((a+b+c) // 3)\n", "# your code goes here\nr,g,b = map(int,input().split())\nprint (min(r+g,g+b,b+r,(r+g+b)//3))\n", "a, b, c = list(map(int, input().split()))\nif max(a, b, c) >= 2 * (a + b + c - max(a, b, c)):\n\tprint(a + b + c - max(a, b, c))\nelse:\n\tprint((a + b + c) // 3)\n", "a = sorted(list(map(int, input().split())))\na[2] = min ( a[2], (a[0]+a[1])*2 )\nprint( (a[0]+a[1]+a[2]) // 3 )\n", "import sys\n\nfin = sys.stdin\nfout = sys.stdout\n\na = list(map(int, fin.readline().strip().split()))\na.sort()\nans = 0\nt = min(a[0], (a[2] - a[1]) // 2)\nans += t\na[0] -= t\na[2] -= 2 * t\nans += a[0]\na[1] -= a[0]\na[2] -= a[0]\nt = min(a[1], a[2] - a[1])\nans += t\na[1] -= t\na[2] -= 2 * t\nt = a[1] // 3 * 2\nans += t\na[1] -= t // 2 * 3\na[2] -= t // 2 * 3\nif a[1] > 0 and a[1] + a[2] >= 3:\n\tans += 1\nprint(str(ans), file=fout)\n\n\n\n", "a = sorted(map(int, input().split()))\nif (a[0] + a[1]) * 2 < a[2]:\n\tprint(a[0] + a[1])\nelse:\n\tprint(sum(a) // 3)\n", "a, b, c = list(map(int, input().split()))\nprint(min(a+b, b+c, c+a, (a+b+c)//3))\n\n", "3\n\nc = list(map(int, input().split()))\nc.sort()\nprint(min(sum(c) // 3, c[0] + c[1]))\n", "3\n\nc = list(map(int, input().split()))\nprint(min(sum(c) // 3, sum(c) - max(c)))\n", "r, g, b = sorted(map(int, input().split()))\nleft = 0\nright = b + 1\nwhile right - left > 1:\n\tm = (right + left) // 2\n\tif m + min(m, b - m) + r + g >= 3 * m:\n\t\tleft = m\n\telse:\n\t\tright = m\nprint(left)\n", "r, g, b = sorted(tuple(map(int, input().split())))\nprint(min(r + g, (r + g + b) // 3))\n", "r,g,b=map(int,input().split())\nprint(min(r+g,r+b,b+g,(r+b+g)//3))\n", "r, g, b = list(map(int, input().split()))\nz = min(r + g + b, 3 * min(r + b, min(g + b, g + r)))\nprint(z // 3)\n", "color=list(map(int, input().split()))\ncolor=sorted(color)\nif color[2]>=2*(color[0]+color[1]): print(color[0]+color[1])\nelse: \n\tsumm=0; \n\tfor i in color: summ+=i; \n\tprint(summ//3)\n"], "id": "id8664"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8664", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["have", 1], ["r", 1], ["red", 1], ["g", 1], ["green", 1], ["and", 1], ["b", 1], ["blue", 1], ["balloons", 1], ["to", 1], ["decorate", 1], ["a", 1], ["single", 1], ["table", 1], ["for", 1], ["the", 1], ["banquet", 1], ["you", 1], ["need", 1], ["exactly", 1], ["three", 1], ["balloons", 1], ["three", 1], ["balloons", 1], ["attached", 1], ["to", 1], ["some", 1], ["table", 1], ["shouldn", 1], ["t", 1], ["have", 1], ["the", 1], ["same", 1], ["color", 1], ["what", 1], ["maximum", 1], ["number", 1], ["t", 1], ["of", 1], ["tables", 1], ["can", 1], ["be", 1], ["decorated", 1], ["if", 1], ["we", 1], ["know", 1], ["number", 1], ["of", 1], ["balloons", 1], ["of", 1], ["each", 1], ["color", 1], ["your", 1], ["task", 1], ["is", 1], ["to", 1], ["write", 1], ["a", 1], ["program", 1], ["that", 1], ["for", 1], ["given", 1], ["values", 1], ["r", 1], ["g", 1], ["and", 1], ["b", 1], ["will", 1], ["find", 1], ["the", 1], ["maximum", 1], ["number", 0], ["t", 0], ["of", 0], ["tables", 0], ["that", 0], ["can", 0], ["be", 0], ["decorated", 0], ["in", 0], ["the", 0], ["required", 0], ["manner", 0], ["input", 0], ["the", 1], ["single", 1], ["line", 1], ["contains", 1], ["three", 0], ["integers", 0], ["r", 0], ["g", 0], ["and", 0], ["b", 0], ["0", 0], ["≤", 0], ["r", 0], ["g", 0], ["b", 0], ["≤", 0], ["2·10", 0], ["9", 0], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["red", 1], ["green", 1], ["and", 0], ["blue", 0], ["baloons", 0], ["respectively", 0], ["the", 0], ["numbers", 0], ["are", 0], ["separated", 0], ["by", 0], ["exactly", 0], ["one", 0], ["space", 0], ["output", 0], ["print", 1], ["a", 1], ["single", 1], ["integer", 1], ["t", 1], ["—", 1], ["the", 1], ["maximum", 0], ["number", 0], ["of", 0], ["tables", 0], ["that", 0], ["can", 0], ["be", 0], ["decorated", 0], ["in", 0], ["the", 0], ["required", 0], ["manner", 0], ["examples", 0], ["input", 0], ["5", 0], ["4", 0], ["3", 0], ["output", 0], ["4", 0], ["input", 0], ["1", 0], ["1", 0], ["1", 0], ["output", 0], ["1", 0], ["input", 0], ["2", 0], ["3", 0], ["3", 0], ["output", 0], ["2", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["sample", 1], ["you", 1], ["can", 1], ["decorate", 1], ["the", 1], ["tables", 1], ["with", 1], ["the", 1], ["following", 1], ["balloon", 1], ["sets", 1], ["rgg", 1], ["gbb", 1], ["brr", 1], ["rrg", 1], ["where", 1], ["r", 0], ["g", 0], ["and", 0], ["b", 0], ["represent", 0], ["the", 0], ["red", 0], ["green", 0], ["and", 0], ["blue", 0], ["balls", 0], ["respectively", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5654450261780105, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5654450261780105, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8275862068965517, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8275862068965517, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5654450261780105, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5654450261780105, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8275862068965517, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8275862068965517, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["r", 0], ["g", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["maxi", 0], ["r", 0], ["g", 0], ["b", 0], ["3", 0], ["print", 0], ["min", 0], ["maxi", 0], ["r", 0], ["g", 0], ["r", 0], ["b", 0], ["g", 0], ["b", 0], ["x", 0], ["y", 0], ["z", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["x", 0], ["y", 0], ["z", 0], ["l", 0], ["sort", 0], ["x", 0], ["l", 0], ["2", 0], ["y", 0], ["l", 0], ["1", 0], ["z", 0], ["l", 0], ["0", 0], ["n", 0], ["2", 0], ["y", 0], ["2", 0], ["z", 0], ["a", 0], ["1", 0], ["b", 0], ["y", 0], ["z", 0], ["1", 0], ["while", 0], ["b", 0], ["a", 0], ["1", 0], ["e", 0], ["b", 0], ["a", 0], ["2", 0], ["if", 0], ["n", 0], ["2", 0], ["e", 0], ["x", 0], ["e", 0], ["b", 0], ["e", 0], ["else", 0], ["a", 0], ["e", 0], ["print", 0], ["min", 0], ["n", 0], ["2", 0], ["b", 0], ["2", 0], ["x", 0], ["b", 0], ["2", 0], ["r", 0], ["g", 0], ["b", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["r", 0], ["2", 0], ["g", 0], ["b", 0], ["r", 0], ["2", 0], ["g", 0], ["b", 0], ["if", 0], ["b", 0], ["2", 0], ["g", 0], ["r", 0], ["b", 0], ["2", 0], ["g", 0], ["r", 0], ["if", 0], ["g", 0], ["2", 0], ["r", 0], ["b", 0], ["g", 0], ["2", 0], ["r", 0], ["b", 0], ["print", 0], ["int", 0], ["g", 0], ["r", 0], ["b", 0], ["3", 0], ["c", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["c", 0], ["2", 0], ["2", 0], ["print", 0], ["sum", 0], ["c", 0], ["3", 0], ["else", 0], ["print", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["codeforces", 0], ["contest", 0], ["273", 0], ["div", 0], ["2", 0], ["problem", 0], ["c", 0], ["author", 0], ["chaotic", 0], ["iak", 0], ["language", 0], ["python", 0], ["3", 0], ["3", 0], ["4", 0], ["def", 0], ["main", 0], ["a", 0], ["read", 0], ["a", 0], ["sort", 0], ["res", 0], ["0", 0], ["if", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["res", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["res", 0], ["a", 0], ["2", 0], ["2", 0], ["res", 0], ["if", 0], ["4", 0], ["a", 0], ["0", 0], ["a", 0], ["2", 0], ["print", 0], ["res", 0], ["2", 0], ["a", 0], ["0", 0], ["return", 0], ["else", 0], ["n", 0], ["a", 0], ["2", 0], ["a", 0], ["0", 0], ["3", 0], ["res", 0], ["2", 0], ["n", 0], ["a", 0], ["0", 0], ["n", 0], ["a", 0], ["1", 0], ["n", 0], ["a", 0], ["2", 0], ["4", 0], ["n", 0], ["if", 0], ["0", 0], ["a", 0], ["0", 0], ["a", 0], ["2", 0], ["2", 0], ["res", 0], ["1", 0], ["a", 0], ["0", 0], ["1", 0], ["a", 0], ["2", 0], ["2", 0], ["print", 0], ["res", 0], ["a", 0], ["0", 0], ["return", 0], ["else", 0], ["res", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["a", 0], ["1", 0], ["res", 0], ["a", 0], ["2", 0], ["2", 0], ["res", 0], ["n", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["3", 0], ["res", 0], ["2", 0], ["n", 0], ["a", 0], ["1", 0], ["3", 0], ["n", 0], ["a", 0], ["2", 0], ["3", 0], ["n", 0], ["if", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["2", 0], ["res", 0], ["1", 0], ["a", 0], ["1", 0], ["2", 0], ["a", 0], ["2", 0], ["1", 0], ["print", 0], ["res", 0], ["a", 0], ["0", 0], ["return", 0], ["non", 0], ["solution", 0], ["stuff", 0], ["below", 0], ["def", 0], ["read", 0], ["mode", 0], ["2", 0], ["0", 0], ["string", 0], ["1", 0], ["list", 0], ["of", 0], ["strings", 0], ["2", 0], ["list", 0], ["of", 0], ["integers", 0], ["inputs", 0], ["input", 0], ["strip", 0], ["if", 0], ["mode", 0], ["0", 0], ["return", 0], ["inputs", 0], ["if", 0], ["mode", 0], ["1", 0], ["return", 0], ["inputs", 0], ["split", 0], ["if", 0], ["mode", 0], ["2", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["inputs", 0], ["split", 0], ["def", 0], ["write", 0], ["s", 0], ["n", 0], ["if", 0], ["s", 0], ["is", 0], ["none", 0], ["s", 0], ["if", 0], ["isinstance", 0], ["s", 0], ["list", 0], ["s", 0], ["join", 0], ["map", 0], ["str", 0], ["s", 0], ["s", 0], ["str", 0], ["s", 0], ["print", 0], ["s", 0], ["end", 0], ["import", 0], ["itertools", 0], ["write", 0], ["main", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["sort", 0], ["print", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["c", 0], ["2", 0], ["2", 0], ["else", 0], ["sum", 0], ["c", 0], ["3", 0], ["a", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["max", 0], ["a", 0], ["b", 0], ["c", 0], ["if", 0], ["x", 0], ["2", 0], ["a", 0], ["b", 0], ["c", 0], ["x", 0], ["print", 0], ["a", 0], ["b", 0], ["c", 0], ["x", 0], ["else", 0], ["print", 0], ["a", 0], ["b", 0], ["c", 0], ["3", 0], ["r", 0], ["g", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["r", 0], ["g", 0], ["r", 0], ["b", 0], ["b", 0], ["g", 0], ["r", 0], ["b", 0], ["g", 0], ["3", 0], ["import", 0], ["sys", 0], ["f", 0], ["sys", 0], ["stdin", 0], ["f", 0], ["open", 0], ["h", 0], ["portable", 0], ["python", 0], ["3", 0], ["2", 0], ["5", 0], ["1", 0], ["test", 0], ["248b1", 0], ["txt", 0], ["r", 0], ["g", 0], ["b", 0], ["map", 0], ["int", 0], ["f", 0], ["readline", 0], ["strip", 0], ["split", 0], ["a", 0], ["int", 0], ["u", 0], ["for", 0], ["u", 0], ["in", 0], ["f", 0], ["readline", 0], ["strip", 0], ["split", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["t", 0], ["a", 0], ["2", 0], ["dt", 0], ["min", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["2", 0], ["t", 0], ["2", 0], ["a", 0], ["2", 0], ["dt", 0], ["a", 0], ["0", 0], ["2", 0], ["dt", 0], ["a", 0], ["0", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["t", 0], ["min", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["3", 0], ["a", 0], ["1", 0], ["print", 0], ["t", 0], ["c", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["c", 0], ["2", 0], ["2", 0], ["print", 0], ["sum", 0], ["c", 0], ["3", 0], ["else", 0], ["print", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["balloons", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["balloons", 0], ["sort", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["balloons", 0], ["if", 0], ["a", 0], ["b", 0], ["int", 0], ["c", 0], ["2", 0], ["print", 0], ["a", 0], ["b", 0], ["else", 0], ["print", 0], ["a", 0], ["b", 0], ["c", 0], ["3", 0], ["your", 0], ["code", 0], ["goes", 0], ["here", 0], ["r", 0], ["g", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["r", 0], ["g", 0], ["g", 0], ["b", 0], ["b", 0], ["r", 0], ["r", 0], ["g", 0], ["b", 0], ["3", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["max", 0], ["a", 0], ["b", 0], ["c", 0], ["2", 0], ["a", 0], ["b", 0], ["c", 0], ["max", 0], ["a", 0], ["b", 0], ["c", 0], ["print", 0], ["a", 0], ["b", 0], ["c", 0], ["max", 0], ["a", 0], ["b", 0], ["c", 0], ["else", 0], ["print", 0], ["a", 0], ["b", 0], ["c", 0], ["3", 0], ["a", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["2", 0], ["min", 0], ["a", 0], ["2", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["2", 0], ["print", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["3", 0], ["import", 0], ["sys", 0], ["fin", 0], ["sys", 0], ["stdin", 0], ["fout", 0], ["sys", 0], ["stdout", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["fin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["a", 0], ["sort", 0], ["ans", 0], ["0", 0], ["t", 0], ["min", 0], ["a", 0], ["0", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["2", 0], ["ans", 0], ["t", 0], ["a", 0], ["0", 0], ["t", 0], ["a", 0], ["2", 0], ["2", 0], ["t", 0], ["ans", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["a", 0], ["2", 0], ["a", 0], ["0", 0], ["t", 0], ["min", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["ans", 0], ["t", 0], ["a", 0], ["1", 0], ["t", 0], ["a", 0], ["2", 0], ["2", 0], ["t", 0], ["t", 0], ["a", 0], ["1", 0], ["3", 0], ["2", 0], ["ans", 0], ["t", 0], ["a", 0], ["1", 0], ["t", 0], ["2", 0], ["3", 0], ["a", 0], ["2", 0], ["t", 0], ["2", 0], ["3", 0], ["if", 0], ["a", 0], ["1", 0], ["0", 0], ["and", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["3", 0], ["ans", 0], ["1", 0], ["print", 0], ["str", 0], ["ans", 0], ["file", 0], ["fout", 0], ["a", 0], ["sorted", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["2", 0], ["a", 0], ["2", 0], ["print", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["else", 0], ["print", 0], ["sum", 0], ["a", 0], ["3", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["a", 0], ["b", 0], ["b", 0], ["c", 0], ["c", 0], ["a", 0], ["a", 0], ["b", 0], ["c", 0], ["3", 0], ["3", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["sort", 0], ["print", 0], ["min", 0], ["sum", 0], ["c", 0], ["3", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["3", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["sum", 0], ["c", 0], ["3", 0], ["sum", 0], ["c", 0], ["max", 0], ["c", 0], ["r", 0], ["g", 0], ["b", 0], ["sorted", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["left", 0], ["0", 0], ["right", 0], ["b", 0], ["1", 0], ["while", 0], ["right", 0], ["left", 0], ["1", 0], ["m", 0], ["right", 0], ["left", 0], ["2", 0], ["if", 0], ["m", 0], ["min", 0], ["m", 0], ["b", 0], ["m", 0], ["r", 0], ["g", 0], ["3", 0], ["m", 0], ["left", 0], ["m", 0], ["else", 0], ["right", 0], ["m", 0], ["print", 0], ["left", 0], ["r", 0], ["g", 0], ["b", 0], ["sorted", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["r", 0], ["g", 0], ["r", 0], ["g", 0], ["b", 0], ["3", 0], ["r", 0], ["g", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["r", 0], ["g", 0], ["r", 0], ["b", 0], ["b", 0], ["g", 0], ["r", 0], ["b", 0], ["g", 0], ["3", 0], ["r", 0], ["g", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["z", 0], ["min", 0], ["r", 0], ["g", 0], ["b", 0], ["3", 0], ["min", 0], ["r", 0], ["b", 0], ["min", 0], ["g", 0], ["b", 0], ["g", 0], ["r", 0], ["print", 0], ["z", 0], ["3", 0], ["color", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["color", 0], ["sorted", 0], ["color", 0], ["if", 0], ["color", 0], ["2", 0], ["2", 0], ["color", 0], ["0", 0], ["color", 0], ["1", 0], ["print", 0], ["color", 0], ["0", 0], ["color", 0], ["1", 0], ["else", 0], ["summ", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["color", 0], ["summ", 0], ["i", 0], ["print", 0], ["summ", 0], ["3", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are given an integer sequence $a_1, a_2, \\dots, a_n$.\n\nFind the number of pairs of indices $(l, r)$ ($1 \\le l \\le r \\le n$) such that the value of median of $a_l, a_{l+1}, \\dots, a_r$ is exactly the given number $m$.\n\nThe median of a sequence is the value of an element which is in the middle of the sequence after sorting it in non-decreasing order. If the length of the sequence is even, the left of two middle elements is used.\n\nFor example, if $a=[4, 2, 7, 5]$ then its median is $4$ since after sorting the sequence, it will look like $[2, 4, 5, 7]$ and the left of two middle elements is equal to $4$. The median of $[7, 1, 2, 9, 6]$ equals $6$ since after sorting, the value $6$ will be in the middle of the sequence.\n\nWrite a program to find the number of pairs of indices $(l, r)$ ($1 \\le l \\le r \\le n$) such that the value of median of $a_l, a_{l+1}, \\dots, a_r$ is exactly the given number $m$.\n\n\n-----Input-----\n\nThe first line contains integers $n$ and $m$ ($1 \\le n,m \\le 2\\cdot10^5$) — the length of the given sequence and the required value of the median.\n\nThe second line contains an integer sequence $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2\\cdot10^5$).\n\n\n-----Output-----\n\nPrint the required number.\n\n\n-----Examples-----\nInput\n5 4\n1 4 5 60 4\n\nOutput\n8\n\nInput\n3 1\n1 1 1\n\nOutput\n6\n\nInput\n15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\nOutput\n97\n\n\n\n-----Note-----\n\nIn the first example, the suitable pairs of indices are: $(1, 3)$, $(1, 4)$, $(1, 5)$, $(2, 2)$, $(2, 3)$, $(2, 5)$, $(4, 5)$ and $(5, 5)$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["MAXN = 200001\n\ndef less_sum(s, m):\n\tn = len(s)\n\ta = 0\n\tb = 0\n\tres = 0\n\tlast = 0\n\n\tcount = [0 for i in range(-MAXN, MAXN+1)]\n\n\tcount[0] = 1\n\tx = 0\n\tlast = 1\n\n\tfor i in range(n):\n\t\tif s[i] > m:\n\t\t\tb += 1\n\t\telse:\n\t\t\ta += 1\n\t\tx = a-b\n\t\t#print(x)\n\t\t#print(count[-2], count[-1], count[0], count[1], count[2])\n\t\tif s[i] > m:\n\t\t\tlast -= count[x+1]\n\t\telse:\n\t\t\tlast += count[x]\n\t\t#print(x, last)\n\t\tres += last\n\t\tcount[x] += 1\n\t\tlast += 1\n\t\n\t#print(res)\n\n\treturn res\n\nn, m = map(int, input().split(' '))\ns = list(map(int, input().split(' ')))[0:n]\n\n#print(m, s)\n\nprint(less_sum(s, m) - less_sum(s, m-1))\n", "def main():\n\tn, m = list(map(int, input().split()))\n\tl = list(map(int, input().split()))\n\tres = []\n\tfor m in m, m - 1:\n\t\tr = c = 0\n\t\tcnt = [0] * 400002\n\t\tcnt[0] = last = 1\n\t\tfor a in l:\n\t\t\tif a > m:\n\t\t\t\tc -= 1\n\t\t\t\tlast -= cnt[c + 1]\n\t\t\telse:\n\t\t\t\tc += 1\n\t\t\t\tlast += cnt[c]\n\t\t\tr += last\n\t\t\tcnt[c] += 1\n\t\t\tlast += 1\n\t\tres.append(r)\n\tprint(res[0] - res[1])\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "L1=list(map(int, input().split()))\nnumList=list(map(int, input().split()))\nlength=L1[0]\nm=L1[1]\ndef greaterCount(numList,m):\n\tcountDic={0:1}\n\tsum=0\n\ttotal=0\n\trem=0\n\tfor number in numList:\n\t\tif number>=m:\n\t\t\tsum+=1\n\t\t\trem+=countDic[sum-1]\n\t\t\ttotal+=rem\n\t\telse:\n\t\t\tsum-=1\n\t\t\tif sum in countDic:\n\t\t\t\trem-=countDic[sum]\n\t\t\ttotal+=rem\n\n\t\tif sum in countDic:\n\t\t\tcountDic[sum] += 1\n\t\telse:\n\t\t\tcountDic[sum] = 1\n\n\t#print(\"m=\", m, \"number=\", number, \"sum=\", sum, \"total=\", total, \"rem=\", rem, \"countDic=\", countDic)\n\treturn total\nprint(greaterCount(numList,m)-greaterCount(numList,m+1))\n", "def Yeee (x, v, n) :\n\tre = 0\n\tpre = 0\n\tsum = 1\n\tcnt = [0] * n + [1] + [0] * n\n\tfor i in v :\n\t\tif(i < x) :\n\t\t\tpre += 1\n\t\t\tsum += cnt[pre + n]\n\t\telse :\n\t\t\tsum -= cnt[pre + n]\n\t\t\tpre -= 1\n\t\tcnt[pre + n] += 1\n\t\tre += sum\n\treturn re\nn, x = list(map(int, input().split()))\nv = [int(i) for i in input().split()]\nprint(Yeee(x + 1, v, n) - Yeee(x, v, n))\n", "def f(x, v, n) :\n\ta, p, s = 0, 0, 1\n\tc = [0] * n + [1] + [0] * n\n\tfor i in v :\n\t\tif(i < x) :\n\t\t\tp += 1\n\t\t\ts += c[p + n]\n\t\telse :\n\t\t\ts -= c[p + n]\n\t\t\tp -= 1\n\t\tc[p + n] += 1\n\t\ta += s\n\treturn a\nn, x = list(map(int, input().split()))\nv = [int(i) for i in input().split()]\nprint(f(x + 1, v, n) - f(x, v, n))\n", "def f(x, v, n) :\n\ta, p, s = 0, 0, 1\n\tc = [0] * n + [1] + [0] * n\n\tfor i in v :\n\t\tif(i < x) :\n\t\t\tp += 1\n\t\t\ts += c[p + n]\n\t\telse :\n\t\t\ts -= c[p + n]\n\t\t\tp -= 1\n\t\tc[p + n] += 1\n\t\ta += s\n\treturn a\nn, x = list(map(int, input().split()))\nv = [int(i) for i in input().split()]\nprint(f(x + 1, v, n) - f(x, v, n))\n", "def grCount(m, n, a):\n\ts = [0]*(2*n + 1)\n\tsx = n\n\tresult = 0\n\ts[sx] = 1\n\tadd = 0\n\tfor i in range(n):\n\t\tif a[i] < m:\n\t\t\tsx -= 1\n\t\t\tadd -= s[sx]\n\t\telse:\n\t\t\tadd += s[sx]\n\t\t\tsx += 1\n\t\tresult += add\n\t\ts[sx] += 1\n\treturn result\n\nn, m = map(int,input().split())\na = list(map(int,input().split()))\nprint(grCount(m, n, a) - grCount(m + 1, n, a))\n", "def ask(x):\n\ts={}\n\ts[0]=1\n\tsum,cnt,res=0,0,0\n\tfor i in range(n):\n\t\tif(a[i]<x):\n\t\t\tsum-=1\n\t\t\tcnt-=s.get(sum,0)\n\t\telse:\n\t\t\tcnt+=s.get(sum,0)\n\t\t\tsum+=1\n\t\ts[sum]=s.get(sum,0)+1\n\t\tres+=cnt\n\treturn res\n\nn,m=list(map(int,input().split()))\na=list(map(int,input().split()))\nprint(ask(m)-ask(m+1))\n\n\n\n\n\n\n\n\n\n\n", "def cv(r, n, d):\n\ts = [0]*(2*n + 1)\n\tq = n\n\tans = 0\n\ts[q] = 1\n\tz = 0\n\tfor i in range(n):\n\t\tif d[i] < r:\n\t\t\tq -= 1\n\t\t\tz -= s[q]\n\t\telse:\n\t\t\tz += s[q]\n\t\t\tq += 1\n\t\tans += z\n\t\ts[q] += 1\n\treturn ans\n\nn, r = map(int,input().split())\nd = list(map(int,input().split()))\nprint(cv(r, n, d) - cv(r + 1, n, d))\n", "import math\nimport sys\nfrom collections import defaultdict\n\n# input = sys.stdin.readline\nrt = lambda: list(map(int, input().split()))\nri = lambda: int(input())\nrl = lambda: list(map(int, input().split()))\n\n\ndef main():\n\tn, m = rt()\n\ta = rl()\n\n\tdef greaterCount(m):\n\t\tsums = defaultdict(int)\n\t\ts = n\n\t\tsums[s] = 1\n\t\tres = 0\n\t\tadd = 0\n\t\tfor i in range(n):\n\t\t\tif a[i] < m:\n\t\t\t\ts -= 1\n\t\t\t\tadd -= sums[s]\n\t\t\telse:\n\t\t\t\tadd += sums[s]\n\t\t\t\ts += 1\n\t\t\tres += add\n\t\t\tsums[s] += 1\n\t\treturn res\n\n\tprint(greaterCount(m) - greaterCount(m+1))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n,m = map(int,input().split())\na = [int(x) for x in input().split()]\n\ndef gC(m,a):\n\ts = [0 for x in range(2*n + 1)]\n\tsum = n\n\tres = 0\n\ts[sum] = 1\n\tad = 0\n\tfor i in range(n):\n\t\tif a[i] < m:\n\t\t\tsum -=1\n\t\t\tad -=s[sum]\n\t\telse:\n\t\t\tad +=s[sum]\n\t\t\tsum +=1\n\t\tres +=ad\n\t\ts[sum] +=1\n\treturn res\n\n\nprint(gC(m,a) - gC(m + 1,a))\n", "class BinaryIndexedTree:\n\tdef __init__(self, n):\n\t\tself.bit = [0] * n\n\n\tdef add(self, i, x):\n\t\ti += 1\n\t\twhile i <= len(self.bit):\n\t\t\tself.bit[i-1] += x\n\t\t\ti += i & -i\n\n\tdef sum_sub(self, i):\n\t\ta = 0\n\t\ti += 1\n\t\twhile i:\n\t\t\ta += self.bit[i-1]\n\t\t\ti -= i & -i\n\t\treturn a\n\n\tdef sum(self, i, j):\n\t\ta = 0\n\t\tif j != 0:\n\t\t\ta += self.sum_sub(j-1)\n\t\tif i != 0:\n\t\t\ta -= self.sum_sub(i-1)\n\t\treturn a\n\ndef f(m):\n\tans=0\n\tbit=BinaryIndexedTree(2*n+7)\n\tf=0\n\tfor i in range(n):\n\t\tbit.add(n+f,1)\n\t\tif a[i]>m:f-=1\n\t\telse:f+=1\n\t\tans+=bit.sum_sub(n+f)\n\treturn ans\nn,m=map(int,input().split())\na=list(map(int,input().split()))\nprint(f(m)-f(m-1))\n", "class BinaryIndexedTree:\n\tdef __init__(self, n):\n\t\tself.bit = [0] * n\n \n\tdef add(self, i, x):\n\t\ti += 1\n\t\twhile i <= len(self.bit):\n\t\t\tself.bit[i-1] += x\n\t\t\ti += i & -i\n \n\tdef sum_sub(self, i):\n\t\ta = 0\n\t\ti += 1\n\t\twhile i:\n\t\t\ta += self.bit[i-1]\n\t\t\ti -= i & -i\n\t\treturn a\n \n\tdef sum(self, i, j):\n\t\ta = 0\n\t\tif j != 0:\n\t\t\ta += self.sum_sub(j-1)\n\t\tif i != 0:\n\t\t\ta -= self.sum_sub(i-1)\n\t\treturn a\n \ndef f(m):\n\tans=0\n\tbit=BinaryIndexedTree(2*n+7)\n\tf=0\n\tfor i in range(n):\n\t\tbit.add(n+f,1)\n\t\tif a[i]>m:f-=1\n\t\telse:f+=1\n\t\tans+=bit.sum_sub(n+f)\n\treturn ans\nn,m=map(int,input().split())\na=list(map(int,input().split()))\nprint(f(m)-f(m-1))\n", "class BIT():\n\tdef __init__(self,n):\n\t\tself.BIT=[0]*(n+1)\n\t\tself.num=n\n\n\tdef query(self,idx):\n\t\tres_sum = 0\n\t\twhile idx > 0:\n\t\t\tres_sum += self.BIT[idx]\n\t\t\tidx -= idx&(-idx)\n\t\treturn res_sum\n\n\t#Ai += x O(logN)\n\tdef update(self,idx,x):\n\t\twhile idx <= self.num:\n\t\t\tself.BIT[idx] += x\n\t\t\tidx += idx&(-idx)\n\t\treturn\n\nn,m = map(int,input().split())\na = list(map(int,input().split()))\n\ndef solve(x):\n\ttmp = [0 for i in range(n)]\n\tfor i in range(n):\n\t\tif a[i]>x:\n\t\t\ttmp[i] = -1\n\t\telse:\n\t\t\ttmp[i] = 1\n\t\ttmp[i] += tmp[i-1]\n\n\ttmp = [0] + tmp\n\tval = list(set([tmp[j] for j in range(n+1)]))\n\tval.sort()\n\tcomp = {i:e+1 for e,i in enumerate(val)}\n\n\tbit = BIT(n+1)\n\tres = 0\n\tfor i in range(n+1):\n\t\tres += bit.query(comp[tmp[i]])\n\t\tbit.update(comp[tmp[i]],1)\n\treturn res\n\nprint(solve(m) - solve(m-1))\n"], "id": "id9546"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9546", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["are", 1], ["given", 1], ["an", 1], ["integer", 1], ["sequence", 1], ["a", 1], ["1", 1], ["a", 1], ["2", 1], ["dots", 1], ["a", 1], ["n", 1], ["find", 2], ["the", 2], ["number", 2], ["of", 2], ["pairs", 2], ["of", 2], ["indices", 2], ["l", 2], ["r", 2], ["1", 2], ["le", 2], ["l", 2], ["le", 2], ["r", 2], ["le", 2], ["n", 2], ["such", 2], ["that", 2], ["the", 2], ["value", 2], ["of", 2], ["median", 2], ["of", 2], ["a", 2], ["l", 2], ["a", 2], ["l", 1], ["1", 1], ["dots", 1], ["a", 1], ["r", 1], ["is", 1], ["exactly", 1], ["the", 1], ["given", 1], ["number", 1], ["m", 1], ["the", 1], ["median", 1], ["of", 1], ["a", 1], ["sequence", 1], ["is", 1], ["the", 1], ["value", 1], ["of", 1], ["an", 1], ["element", 1], ["which", 1], ["is", 1], ["in", 1], ["the", 1], ["middle", 1], ["of", 1], ["the", 1], ["sequence", 1], ["after", 1], ["sorting", 1], ["it", 1], ["in", 1], ["non", 1], ["decreasing", 1], ["order", 1], ["if", 1], ["the", 1], ["length", 1], ["of", 1], ["the", 1], ["sequence", 1], ["is", 1], ["even", 1], ["the", 1], ["left", 1], ["of", 1], ["two", 1], ["middle", 1], ["elements", 1], ["is", 1], ["used", 1], ["for", 1], ["example", 1], ["if", 1], ["a", 1], ["4", 1], ["2", 1], ["7", 1], ["5", 1], ["then", 1], ["its", 1], ["median", 1], ["is", 1], ["4", 1], ["since", 1], ["after", 1], ["sorting", 1], ["the", 1], ["sequence", 1], ["it", 1], ["will", 1], ["look", 1], ["like", 1], ["2", 1], ["4", 1], ["5", 1], ["7", 1], ["and", 1], ["the", 1], ["left", 1], ["of", 1], ["two", 1], ["middle", 1], ["elements", 1], ["is", 1], ["equal", 1], ["to", 1], ["4", 1], ["the", 1], ["median", 1], ["of", 1], ["7", 1], ["1", 1], ["2", 1], ["9", 1], ["6", 1], ["equals", 1], ["6", 1], ["since", 1], ["after", 1], ["sorting", 1], ["the", 1], ["value", 1], ["6", 1], ["will", 1], ["be", 1], ["in", 1], ["the", 1], ["middle", 1], ["of", 1], ["the", 1], ["sequence", 1], ["write", 1], ["a", 1], ["program", 1], ["to", 1], ["find", 2], ["the", 2], ["number", 2], ["of", 2], ["pairs", 2], ["of", 2], ["indices", 2], ["l", 2], ["r", 2], ["1", 2], ["le", 2], ["l", 2], ["le", 2], ["r", 2], ["le", 2], ["n", 2], ["such", 2], ["that", 2], ["the", 2], ["value", 2], ["of", 2], ["median", 2], ["of", 2], ["a", 2], ["l", 2], ["a", 0], ["l", 0], ["1", 0], ["dots", 0], ["a", 0], ["r", 0], ["is", 0], ["exactly", 0], ["the", 0], ["given", 0], ["number", 0], ["m", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["integers", 1], ["n", 1], ["and", 1], ["m", 1], ["1", 1], ["le", 1], ["n", 1], ["m", 1], ["le", 1], ["2", 1], ["cdot10", 1], ["5", 1], ["—", 1], ["the", 1], ["length", 1], ["of", 1], ["the", 1], ["given", 1], ["sequence", 1], ["and", 1], ["the", 1], ["required", 1], ["value", 1], ["of", 1], ["the", 1], ["median", 1], ["the", 1], ["second", 1], ["line", 1], ["contains", 1], ["an", 1], ["integer", 1], ["sequence", 1], ["a", 1], ["1", 1], ["a", 1], ["2", 0], ["dots", 0], ["a", 0], ["n", 0], ["1", 0], ["le", 0], ["a", 0], ["i", 0], ["le", 0], ["2", 0], ["cdot10", 0], ["5", 0], ["output", 0], ["print", 0], ["the", 0], ["required", 0], ["number", 0], ["examples", 0], ["input", 0], ["5", 0], ["4", 0], ["1", 0], ["4", 0], ["5", 0], ["60", 0], ["4", 0], ["output", 0], ["8", 0], ["input", 0], ["3", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["output", 0], ["6", 0], ["input", 0], ["15", 0], ["2", 101], ["1", 1519], ["2", 1479], ["3", 1446], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["output", 0], ["97", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["example", 1], ["the", 1], ["suitable", 1], ["pairs", 1], ["of", 1], ["indices", 1], ["are", 1], ["1", 1], ["3", 1], ["1", 1], ["4", 1], ["1", 1], ["5", 0], ["2", 0], ["2", 0], ["2", 0], ["3", 0], ["2", 0], ["5", 0], ["4", 0], ["5", 0], ["and", 0], ["5", 0], ["5", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7578616352201258, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6651318459540896, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8757575757575757, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8277527752775272, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7452830188679245, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6650943396226415, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8272727272727273, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8272727272727273, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["maxn", 0], ["200001", 0], ["def", 0], ["less", 0], ["sum", 0], ["s", 0], ["m", 0], ["n", 0], ["len", 0], ["s", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["res", 0], ["0", 0], ["last", 0], ["0", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["maxn", 0], ["maxn", 0], ["1", 0], ["count", 0], ["0", 0], ["1", 0], ["x", 0], ["0", 0], ["last", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["m", 0], ["b", 0], ["1", 0], ["else", 0], ["a", 0], ["1", 0], ["x", 0], ["a", 0], ["b", 0], ["print", 0], ["x", 0], ["print", 0], ["count", 0], ["2", 0], ["count", 0], ["1", 0], ["count", 0], ["0", 0], ["count", 0], ["1", 0], ["count", 0], ["2", 0], ["if", 0], ["s", 0], ["i", 0], ["m", 0], ["last", 0], ["count", 0], ["x", 0], ["1", 0], ["else", 0], ["last", 0], ["count", 0], ["x", 0], ["print", 0], ["x", 0], ["last", 0], ["res", 0], ["last", 0], ["count", 0], ["x", 0], ["1", 0], ["last", 0], ["1", 0], ["print", 0], ["res", 0], ["return", 0], ["res", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["0", 0], ["n", 0], ["print", 0], ["m", 0], ["s", 0], ["print", 0], ["less", 0], ["sum", 0], ["s", 0], ["m", 0], ["less", 0], ["sum", 0], ["s", 0], ["m", 0], ["1", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["for", 0], ["m", 0], ["in", 0], ["m", 0], ["m", 0], ["1", 0], ["r", 0], ["c", 0], ["0", 0], ["cnt", 0], ["0", 0], ["400002", 0], ["cnt", 0], ["0", 0], ["last", 0], ["1", 0], ["for", 0], ["a", 0], ["in", 0], ["l", 0], ["if", 0], ["a", 0], ["m", 0], ["c", 0], ["1", 0], ["last", 0], ["cnt", 0], ["c", 0], ["1", 0], ["else", 0], ["c", 0], ["1", 0], ["last", 0], ["cnt", 0], ["c", 0], ["r", 0], ["last", 0], ["cnt", 0], ["c", 0], ["1", 0], ["last", 0], ["1", 0], ["res", 0], ["append", 0], ["r", 0], ["print", 0], ["res", 0], ["0", 0], ["res", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["l1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["numlist", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["length", 0], ["l1", 0], ["0", 0], ["m", 0], ["l1", 0], ["1", 0], ["def", 0], ["greatercount", 0], ["numlist", 0], ["m", 0], ["countdic", 0], ["0", 0], ["1", 0], ["sum", 0], ["0", 0], ["total", 0], ["0", 0], ["rem", 0], ["0", 0], ["for", 0], ["number", 0], ["in", 0], ["numlist", 0], ["if", 0], ["number", 0], ["m", 0], ["sum", 0], ["1", 0], ["rem", 0], ["countdic", 0], ["sum", 0], ["1", 0], ["total", 0], ["rem", 0], ["else", 0], ["sum", 0], ["1", 0], ["if", 0], ["sum", 0], ["in", 0], ["countdic", 0], ["rem", 0], ["countdic", 0], ["sum", 0], ["total", 0], ["rem", 0], ["if", 0], ["sum", 0], ["in", 0], ["countdic", 0], ["countdic", 0], ["sum", 0], ["1", 0], ["else", 0], ["countdic", 0], ["sum", 0], ["1", 0], ["print", 0], ["m", 0], ["m", 0], ["number", 0], ["number", 0], ["sum", 0], ["sum", 0], ["total", 0], ["total", 0], ["rem", 0], ["rem", 0], ["countdic", 0], ["countdic", 0], ["return", 0], ["total", 0], ["print", 0], ["greatercount", 0], ["numlist", 0], ["m", 0], ["greatercount", 0], ["numlist", 0], ["m", 0], ["1", 0], ["def", 0], ["yeee", 0], ["x", 0], ["v", 0], ["n", 0], ["re", 0], ["0", 0], ["pre", 0], ["0", 0], ["sum", 0], ["1", 0], ["cnt", 0], ["0", 0], ["n", 0], ["1", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["v", 0], ["if", 0], ["i", 0], ["x", 0], ["pre", 0], ["1", 0], ["sum", 0], ["cnt", 0], ["pre", 0], ["n", 0], ["else", 0], ["sum", 0], ["cnt", 0], ["pre", 0], ["n", 0], ["pre", 0], ["1", 0], ["cnt", 0], ["pre", 0], ["n", 0], ["1", 0], ["re", 0], ["sum", 0], ["return", 0], ["re", 0], ["n", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["v", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["yeee", 0], ["x", 0], ["1", 0], ["v", 0], ["n", 0], ["yeee", 0], ["x", 0], ["v", 0], ["n", 0], ["def", 0], ["f", 0], ["x", 0], ["v", 0], ["n", 0], ["a", 0], ["p", 0], ["s", 0], ["0", 0], ["0", 0], ["1", 0], ["c", 0], ["0", 0], ["n", 0], ["1", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["v", 0], ["if", 0], ["i", 0], ["x", 0], ["p", 0], ["1", 0], ["s", 0], ["c", 0], ["p", 0], ["n", 0], ["else", 0], ["s", 0], ["c", 0], ["p", 0], ["n", 0], ["p", 0], ["1", 0], ["c", 0], ["p", 0], ["n", 0], ["1", 0], ["a", 0], ["s", 0], ["return", 0], ["a", 0], ["n", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["v", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["f", 0], ["x", 0], ["1", 0], ["v", 0], ["n", 0], ["f", 0], ["x", 0], ["v", 0], ["n", 0], ["def", 0], ["f", 0], ["x", 0], ["v", 0], ["n", 0], ["a", 0], ["p", 0], ["s", 0], ["0", 0], ["0", 0], ["1", 0], ["c", 0], ["0", 0], ["n", 0], ["1", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["v", 0], ["if", 0], ["i", 0], ["x", 0], ["p", 0], ["1", 0], ["s", 0], ["c", 0], ["p", 0], ["n", 0], ["else", 0], ["s", 0], ["c", 0], ["p", 0], ["n", 0], ["p", 0], ["1", 0], ["c", 0], ["p", 0], ["n", 0], ["1", 0], ["a", 0], ["s", 0], ["return", 0], ["a", 0], ["n", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["v", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["f", 0], ["x", 0], ["1", 0], ["v", 0], ["n", 0], ["f", 0], ["x", 0], ["v", 0], ["n", 0], ["def", 0], ["grcount", 0], ["m", 0], ["n", 0], ["a", 0], ["s", 0], ["0", 0], ["2", 0], ["n", 0], ["1", 0], ["sx", 0], ["n", 0], ["result", 0], ["0", 0], ["s", 0], ["sx", 0], ["1", 0], ["add", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["m", 0], ["sx", 0], ["1", 0], ["add", 0], ["s", 0], ["sx", 0], ["else", 0], ["add", 0], ["s", 0], ["sx", 0], ["sx", 0], ["1", 0], ["result", 0], ["add", 0], ["s", 0], ["sx", 0], ["1", 0], ["return", 0], ["result", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["grcount", 0], ["m", 0], ["n", 0], ["a", 0], ["grcount", 0], ["m", 0], ["1", 0], ["n", 0], ["a", 0], ["def", 0], ["ask", 0], ["x", 0], ["s", 0], ["s", 0], ["0", 0], ["1", 0], ["sum", 0], ["cnt", 0], ["res", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["x", 0], ["sum", 0], ["1", 0], ["cnt", 0], ["s", 0], ["get", 0], ["sum", 0], ["0", 0], ["else", 0], ["cnt", 0], ["s", 0], ["get", 0], ["sum", 0], ["0", 0], ["sum", 0], ["1", 0], ["s", 0], ["sum", 0], ["s", 0], ["get", 0], ["sum", 0], ["0", 0], ["1", 0], ["res", 0], ["cnt", 0], ["return", 0], ["res", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["ask", 0], ["m", 0], ["ask", 0], ["m", 0], ["1", 0], ["def", 0], ["cv", 0], ["r", 0], ["n", 0], ["d", 0], ["s", 0], ["0", 0], ["2", 0], ["n", 0], ["1", 0], ["q", 0], ["n", 0], ["ans", 0], ["0", 0], ["s", 0], ["q", 0], ["1", 0], ["z", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["d", 0], ["i", 0], ["r", 0], ["q", 0], ["1", 0], ["z", 0], ["s", 0], ["q", 0], ["else", 0], ["z", 0], ["s", 0], ["q", 0], ["q", 0], ["1", 0], ["ans", 0], ["z", 0], ["s", 0], ["q", 0], ["1", 0], ["return", 0], ["ans", 0], ["n", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["cv", 0], ["r", 0], ["n", 0], ["d", 0], ["cv", 0], ["r", 0], ["1", 0], ["n", 0], ["d", 0], ["import", 0], ["math", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rt", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ri", 0], ["lambda", 0], ["int", 0], ["input", 0], ["rl", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["rt", 0], ["a", 0], ["rl", 0], ["def", 0], ["greatercount", 0], ["m", 0], ["sums", 0], ["defaultdict", 0], ["int", 0], ["s", 0], ["n", 0], ["sums", 0], ["s", 0], ["1", 0], ["res", 0], ["0", 0], ["add", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["m", 0], ["s", 0], ["1", 0], ["add", 0], ["sums", 0], ["s", 0], ["else", 0], ["add", 0], ["sums", 0], ["s", 0], ["s", 0], ["1", 0], ["res", 0], ["add", 0], ["sums", 0], ["s", 0], ["1", 0], ["return", 0], ["res", 0], ["print", 0], ["greatercount", 0], ["m", 0], ["greatercount", 0], ["m", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["gc", 0], ["m", 0], ["a", 0], ["s", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["sum", 0], ["n", 0], ["res", 0], ["0", 0], ["s", 0], ["sum", 0], ["1", 0], ["ad", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["m", 0], ["sum", 0], ["1", 0], ["ad", 0], ["s", 0], ["sum", 0], ["else", 0], ["ad", 0], ["s", 0], ["sum", 0], ["sum", 0], ["1", 0], ["res", 0], ["ad", 0], ["s", 0], ["sum", 0], ["1", 0], ["return", 0], ["res", 0], ["print", 0], ["gc", 0], ["m", 0], ["a", 0], ["gc", 0], ["m", 0], ["1", 0], ["a", 0], ["class", 0], ["binaryindexedtree", 0], ["def", 0], ["init", 0], ["self", 0], ["n", 0], ["self", 0], ["bit", 0], ["0", 0], ["n", 0], ["def", 0], ["add", 0], ["self", 0], ["i", 0], ["x", 0], ["i", 0], ["1", 0], ["while", 0], ["i", 0], ["len", 0], ["self", 0], ["bit", 0], ["self", 0], ["bit", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["i", 0], ["i", 0], ["def", 0], ["sum", 0], ["sub", 0], ["self", 0], ["i", 0], ["a", 0], ["0", 0], ["i", 0], ["1", 0], ["while", 0], ["i", 0], ["a", 0], ["self", 0], ["bit", 0], ["i", 0], ["1", 0], ["i", 0], ["i", 0], ["i", 0], ["return", 0], ["a", 0], ["def", 0], ["sum", 0], ["self", 0], ["i", 0], ["j", 0], ["a", 0], ["0", 0], ["if", 0], ["j", 0], ["0", 0], ["a", 0], ["self", 0], ["sum", 0], ["sub", 0], ["j", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["a", 0], ["self", 0], ["sum", 0], ["sub", 0], ["i", 0], ["1", 0], ["return", 0], ["a", 0], ["def", 0], ["f", 0], ["m", 0], ["ans", 0], ["0", 0], ["bit", 0], ["binaryindexedtree", 0], ["2", 0], ["n", 0], ["7", 0], ["f", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["bit", 0], ["add", 0], ["n", 0], ["f", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["m", 0], ["f", 0], ["1", 0], ["else", 0], ["f", 0], ["1", 0], ["ans", 0], ["bit", 0], ["sum", 0], ["sub", 0], ["n", 0], ["f", 0], ["return", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["f", 0], ["m", 0], ["f", 0], ["m", 0], ["1", 0], ["class", 0], ["binaryindexedtree", 0], ["def", 0], ["init", 0], ["self", 0], ["n", 0], ["self", 0], ["bit", 0], ["0", 0], ["n", 0], ["def", 0], ["add", 0], ["self", 0], ["i", 0], ["x", 0], ["i", 0], ["1", 0], ["while", 0], ["i", 0], ["len", 0], ["self", 0], ["bit", 0], ["self", 0], ["bit", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["i", 0], ["i", 0], ["def", 0], ["sum", 0], ["sub", 0], ["self", 0], ["i", 0], ["a", 0], ["0", 0], ["i", 0], ["1", 0], ["while", 0], ["i", 0], ["a", 0], ["self", 0], ["bit", 0], ["i", 0], ["1", 0], ["i", 0], ["i", 0], ["i", 0], ["return", 0], ["a", 0], ["def", 0], ["sum", 0], ["self", 0], ["i", 0], ["j", 0], ["a", 0], ["0", 0], ["if", 0], ["j", 0], ["0", 0], ["a", 0], ["self", 0], ["sum", 0], ["sub", 0], ["j", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["a", 0], ["self", 0], ["sum", 0], ["sub", 0], ["i", 0], ["1", 0], ["return", 0], ["a", 0], ["def", 0], ["f", 0], ["m", 0], ["ans", 0], ["0", 0], ["bit", 0], ["binaryindexedtree", 0], ["2", 0], ["n", 0], ["7", 0], ["f", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["bit", 0], ["add", 0], ["n", 0], ["f", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["m", 0], ["f", 0], ["1", 0], ["else", 0], ["f", 0], ["1", 0], ["ans", 0], ["bit", 0], ["sum", 0], ["sub", 0], ["n", 0], ["f", 0], ["return", 0], ["ans", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["f", 0], ["m", 0], ["f", 0], ["m", 0], ["1", 0], ["class", 0], ["bit", 0], ["def", 0], ["init", 0], ["self", 0], ["n", 0], ["self", 0], ["bit", 0], ["0", 0], ["n", 0], ["1", 0], ["self", 0], ["num", 0], ["n", 0], ["def", 0], ["query", 0], ["self", 0], ["idx", 0], ["res", 0], ["sum", 0], ["0", 0], ["while", 0], ["idx", 0], ["0", 0], ["res", 0], ["sum", 0], ["self", 0], ["bit", 0], ["idx", 0], ["idx", 0], ["idx", 0], ["idx", 0], ["return", 0], ["res", 0], ["sum", 0], ["ai", 0], ["x", 0], ["o", 0], ["logn", 0], ["def", 0], ["update", 0], ["self", 0], ["idx", 0], ["x", 0], ["while", 0], ["idx", 0], ["self", 0], ["num", 0], ["self", 0], ["bit", 0], ["idx", 0], ["x", 0], ["idx", 0], ["idx", 0], ["idx", 0], ["return", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["solve", 0], ["x", 0], ["tmp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["x", 0], ["tmp", 0], ["i", 0], ["1", 0], ["else", 0], ["tmp", 0], ["i", 0], ["1", 0], ["tmp", 0], ["i", 0], ["tmp", 0], ["i", 0], ["1", 0], ["tmp", 0], ["0", 0], ["tmp", 0], ["val", 0], ["list", 0], ["set", 0], ["tmp", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["val", 0], ["sort", 0], ["comp", 0], ["i", 0], ["e", 0], ["1", 0], ["for", 0], ["e", 0], ["i", 0], ["in", 0], ["enumerate", 0], ["val", 0], ["bit", 0], ["bit", 0], ["n", 0], ["1", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["res", 0], ["bit", 0], ["query", 0], ["comp", 0], ["tmp", 0], ["i", 0], ["bit", 0], ["update", 0], ["comp", 0], ["tmp", 0], ["i", 0], ["1", 0], ["return", 0], ["res", 0], ["print", 0], ["solve", 0], ["m", 0], ["solve", 0], ["m", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nWalter was once a promising chemist. Now he teaches high school students chemistry, and was recently diagnosed with lung cancer. In both desperation and excitement he decides to use his chemistry skills to produce illegal drugs and make quick money for his family. He forms a partnership with one of his old students, Jesse, who has some experience with the drug scene.\n\nNow Walter and Jesse are preparing for their first “cook” (the process of making the drugs). They have a list of items they need for the cook, but they realized they have to be very careful when going to the store. The reason is that it may be suspicious to buy certain pairs of items, like cold medicine and battery acid, in the same trip.\n\nThey decide to divide the items among themselves, so that each of them can go one trip to the store and buy their share of items without the risk of anyone becoming suspicious. Help them find such a division, or tell them that it is not possible.\n\n-----Input-----\nThe first line of input contains an integer $N$, $1 \\leq N < 100000$, the number of items they want to buy. The following $N$ lines contain the names of these items, all of which are different. A name consists of at most $20$ lowercase letters from the English alphabet or underscores, and is non-empty. The next line of input contains an integer $M$, $0 \\leq M < 100000$, the number of pairs of items that are considered suspicious when bought together. Then follow $M$ lines, each containing the names of two different items that form a suspicious pair. Each suspicious pair will be listed exactly once.\n\n-----Output-----\nIf it is possible for Walter and Jesse to divide the items among themselves, then output two lines. In the first line output the names of the items that Walter should buy. In the second line output the names of the items that Jesse should buy. If there are multiple solutions, output any of them. If this is not possible, output impossible.\n\n-----Examples-----\nSample Input:\n5\nbattery_acid\ndrain_cleaner\nantifreeze\ncold_medicine\nlantern_fuel\n2\ncold_medicine battery_acid\nantifreeze lantern_fuel\nSample Output:\nlantern_fuel drain_cleaner battery_acid\nantifreeze cold_medicine\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7453"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7453", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["walter", 1], ["was", 1], ["once", 1], ["a", 1], ["promising", 1], ["chemist", 1], ["now", 1], ["he", 1], ["teaches", 1], ["high", 1], ["school", 1], ["students", 1], ["chemistry", 1], ["and", 1], ["was", 1], ["recently", 1], ["diagnosed", 1], ["with", 1], ["lung", 1], ["cancer", 1], ["in", 1], ["both", 1], ["desperation", 1], ["and", 1], ["excitement", 1], ["he", 1], ["decides", 1], ["to", 1], ["use", 1], ["his", 1], ["chemistry", 1], ["skills", 1], ["to", 1], ["produce", 1], ["illegal", 1], ["drugs", 1], ["and", 1], ["make", 1], ["quick", 1], ["money", 1], ["for", 1], ["his", 1], ["family", 1], ["he", 1], ["forms", 1], ["a", 1], ["partnership", 1], ["with", 1], ["one", 1], ["of", 1], ["his", 1], ["old", 1], ["students", 1], ["jesse", 1], ["who", 1], ["has", 1], ["some", 1], ["experience", 1], ["with", 1], ["the", 1], ["drug", 1], ["scene", 1], ["now", 1], ["walter", 1], ["and", 1], ["jesse", 1], ["are", 1], ["preparing", 1], ["for", 1], ["their", 1], ["first", 1], ["“cook”", 1], ["the", 1], ["process", 1], ["of", 1], ["making", 1], ["the", 1], ["drugs", 1], ["they", 1], ["have", 1], ["a", 1], ["list", 1], ["of", 1], ["items", 1], ["they", 1], ["need", 1], ["for", 1], ["the", 1], ["cook", 1], ["but", 1], ["they", 1], ["realized", 1], ["they", 1], ["have", 1], ["to", 1], ["be", 1], ["very", 1], ["careful", 1], ["when", 1], ["going", 1], ["to", 1], ["the", 1], ["store", 1], ["the", 1], ["reason", 1], ["is", 1], ["that", 1], ["it", 1], ["may", 1], ["be", 1], ["suspicious", 1], ["to", 1], ["buy", 1], ["certain", 1], ["pairs", 1], ["of", 1], ["items", 1], ["like", 1], ["cold", 1], ["medicine", 1], ["and", 1], ["battery", 1], ["acid", 1], ["in", 1], ["the", 1], ["same", 1], ["trip", 1], ["they", 1], ["decide", 1], ["to", 1], ["divide", 1], ["the", 1], ["items", 1], ["among", 1], ["themselves", 1], ["so", 1], ["that", 1], ["each", 1], ["of", 1], ["them", 1], ["can", 1], ["go", 1], ["one", 1], ["trip", 1], ["to", 1], ["the", 1], ["store", 1], ["and", 1], ["buy", 1], ["their", 1], ["share", 1], ["of", 1], ["items", 1], ["without", 1], ["the", 1], ["risk", 1], ["of", 1], ["anyone", 1], ["becoming", 1], ["suspicious", 1], ["help", 1], ["them", 1], ["find", 0], ["such", 0], ["a", 0], ["division", 0], ["or", 0], ["tell", 0], ["them", 0], ["that", 0], ["it", 0], ["is", 0], ["not", 0], ["possible", 0], ["input", 1], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["an", 0], ["integer", 0], ["n", 0], ["1", 0], ["leq", 0], ["n", 0], ["100000", 0], ["the", 1], ["number", 1], ["of", 1], ["items", 1], ["they", 1], ["want", 1], ["to", 1], ["buy", 1], ["the", 1], ["following", 1], ["n", 1], ["lines", 1], ["contain", 1], ["the", 1], ["names", 1], ["of", 1], ["these", 1], ["items", 1], ["all", 1], ["of", 1], ["which", 1], ["are", 1], ["different", 1], ["a", 1], ["name", 1], ["consists", 1], ["of", 1], ["at", 1], ["most", 1], ["20", 1], ["lowercase", 1], ["letters", 1], ["from", 1], ["the", 1], ["english", 1], ["alphabet", 1], ["or", 1], ["underscores", 1], ["and", 1], ["is", 1], ["non", 1], ["empty", 1], ["the", 0], ["next", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["an", 0], ["integer", 0], ["m", 0], ["0", 0], ["leq", 0], ["m", 0], ["100000", 0], ["the", 1], ["number", 1], ["of", 1], ["pairs", 1], ["of", 1], ["items", 1], ["that", 1], ["are", 1], ["considered", 1], ["suspicious", 1], ["when", 1], ["bought", 1], ["together", 1], ["then", 1], ["follow", 1], ["m", 1], ["lines", 1], ["each", 1], ["containing", 1], ["the", 1], ["names", 1], ["of", 1], ["two", 1], ["different", 1], ["items", 1], ["that", 1], ["form", 0], ["a", 0], ["suspicious", 0], ["pair", 0], ["each", 0], ["suspicious", 0], ["pair", 0], ["will", 0], ["be", 0], ["listed", 0], ["exactly", 0], ["once", 0], ["output", 0], ["if", 1], ["it", 1], ["is", 1], ["possible", 1], ["for", 1], ["walter", 1], ["and", 1], ["jesse", 1], ["to", 1], ["divide", 1], ["the", 1], ["items", 1], ["among", 1], ["themselves", 1], ["then", 1], ["output", 1], ["two", 1], ["lines", 1], ["in", 1], ["the", 1], ["first", 1], ["line", 1], ["output", 1], ["the", 1], ["names", 1], ["of", 1], ["the", 1], ["items", 1], ["that", 1], ["walter", 1], ["should", 1], ["buy", 1], ["in", 1], ["the", 1], ["second", 1], ["line", 1], ["output", 1], ["the", 1], ["names", 1], ["of", 1], ["the", 1], ["items", 1], ["that", 1], ["jesse", 1], ["should", 1], ["buy", 1], ["if", 1], ["there", 1], ["are", 1], ["multiple", 1], ["solutions", 0], ["output", 0], ["any", 0], ["of", 0], ["them", 0], ["if", 0], ["this", 0], ["is", 0], ["not", 0], ["possible", 0], ["output", 0], ["impossible", 0], ["examples", 0], ["sample", 0], ["input", 0], ["5", 0], ["battery", 0], ["acid", 0], ["drain", 0], ["cleaner", 0], ["antifreeze", 0], ["cold", 0], ["medicine", 0], ["lantern", 0], ["fuel", 0], ["2", 0], ["cold", 0], ["medicine", 0], ["battery", 0], ["acid", 0], ["antifreeze", 0], ["lantern", 0], ["fuel", 0], ["sample", 0], ["output", 0], ["lantern", 0], ["fuel", 0], ["drain", 0], ["cleaner", 0], ["battery", 0], ["acid", 0], ["antifreeze", 0], ["cold", 0], ["medicine", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7493333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7493333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8811369509043928, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8811369509043928, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7493333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7493333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8811369509043928, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8811369509043928, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\n=====Problem Statement=====\nGiven an integer, n, perform the following conditional actions:\nIf n is odd, print Weird\nIf n is even and in the inclusive range of 2 to 5, print Not Weird\nIf n is even and in the inclusive range of 6 to 20, print Weird\nIf n is even and greater than 20, print Not Weird\n\n=====Input Format=====\nA single line containing a positive integer, n.\n\n=====Constraints=====\n1≤n≤100\n\n=====Output Format=====\nPrint Weird if the number is weird. Otherwise, print Not Weird.\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    check = {True: \"Not Weird\", False: \"Weird\"}\n\n    print(check[\n            n%2==0 and (\n                n in range(2,6) or \n                n > 20)\n        ])\n\n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["#!/bin/python3\n\nimport sys\n\n\nN = int(input().strip())\nn= N\nw = 'Weird'\nnw = 'Not Weird'\nif n % 2 == 1:\n\tprint(w)\nelif n % 2 == 0 and (n>=2 and n<5):\n\tprint(nw)\nelif n % 2 == 0 and (n>=6 and n<=20):\n\tprint(w)\nelif n % 2 == 0 and (n>20):\n\tprint(nw)    \n", "def __starting_point():\n\tn = int(input())\n\tif n % 2 == 1 or 6 <= n <= 20:\n\t\tprint(\"Weird\")\n\telse:\n\t\tprint(\"Not Weird\")\n\n__starting_point()\n"], "id": "id7764"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7764", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["problem", 0], ["statement", 0], ["given", 2], ["an", 2], ["integer", 2], ["n", 2], ["perform", 2], ["the", 2], ["following", 2], ["conditional", 2], ["actions", 2], ["if", 4], ["n", 4], ["is", 4], ["odd", 4], ["print", 4], ["weird", 4], ["if", 5], ["n", 5], ["is", 7], ["even", 7], ["and", 4], ["in", 4], ["the", 4], ["inclusive", 4], ["range", 4], ["of", 4], ["2", 4], ["to", 4], ["5", 4], ["print", 4], ["not", 5], ["weird", 5], ["if", 6], ["n", 6], ["is", 8], ["even", 4], ["and", 4], ["in", 4], ["the", 4], ["inclusive", 4], ["range", 4], ["of", 4], ["6", 4], ["to", 4], ["20", 4], ["print", 4], ["weird", 4], ["if", 4], ["n", 4], ["is", 4], ["even", 4], ["and", 4], ["greater", 4], ["than", 4], ["20", 4], ["print", 4], ["not", 4], ["weird", 0], ["input", 0], ["format", 0], ["a", 0], ["single", 0], ["line", 0], ["containing", 0], ["a", 0], ["positive", 0], ["integer", 0], ["n", 0], ["constraints", 0], ["1≤n≤100", 0], ["output", 3], ["format", 0], ["print", 0], ["weird", 0], ["if", 0], ["the", 0], ["number", 0], ["is", 0], ["weird", 0], ["otherwise", 0], ["print", 0], ["not", 0], ["weird", 0], ["bin", 0], ["python3", 0], ["import", 1], ["math", 0], ["import", 0], ["os", 0], ["import", 0], ["random", 0], ["import", 0], ["re", 0], ["import", 0], ["sys", 0], ["if", 0], ["name", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["strip", 0], ["check", 1], ["true", 1], ["not", 1], ["weird", 1], ["false", 1], ["weird", 1], ["print", 1], ["check", 1], ["n", 0], ["2", 0], ["0", 0], ["and", 0], ["n", 0], ["in", 0], ["range", 0], ["2", 0], ["6", 0], ["or", 0], ["n", 0], ["20", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5409836065573771, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2039129586260734, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8507462686567164, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5323383084577117, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5409836065573771, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2039129586260734, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8507462686567164, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5323383084577117, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["bin", 0], ["python3", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["strip", 0], ["n", 0], ["n", 0], ["w", 0], ["weird", 0], ["nw", 0], ["not", 0], ["weird", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["w", 0], ["elif", 0], ["n", 0], ["2", 0], ["0", 0], ["and", 0], ["n", 0], ["2", 0], ["and", 0], ["n", 0], ["5", 0], ["print", 0], ["nw", 0], ["elif", 0], ["n", 0], ["2", 0], ["0", 0], ["and", 0], ["n", 0], ["6", 0], ["and", 0], ["n", 0], ["20", 0], ["print", 0], ["w", 0], ["elif", 0], ["n", 0], ["2", 0], ["0", 0], ["and", 0], ["n", 0], ["20", 0], ["print", 0], ["nw", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["or", 0], ["6", 0], ["n", 0], ["20", 0], ["print", 0], ["weird", 0], ["else", 0], ["print", 0], ["not", 0], ["weird", 0], ["starting", 0], ["point", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nAt some point or another, most computer science students have written a standard Sudoku solving program. This is yet another “put numbers in a grid” puzzle.\n\nNumbers are placed in the grid so that each outlined region contains the numbers $1$ to $n$, where $n$ is the number of squares in the region. The same number can never touch itself, not even diagonally.\n\n\n\nIncomplete Grid\n\nSolution Grid\n\nFor this problem, you will write a program that takes as input an incomplete puzzle grid and outputs the puzzle solution grid.\n\n-----Input-----\nThe input consists of a single data set. This data set starts with a line containing the number of rows in the input grid $R$, ($1 \\le R \\le 7$), and the number of columns in the input grid $C$, ($1 \\le C \\le 7$), separated by spaces. The next $R$ lines contain a representation of the incomplete input grid, one row per line. Each row has $C$ characters, representing the digits in each cell. The value in each cell is represented by either the digit already in that cell or a ‘-’ for an initially empty cell.\n\nThis grid is followed by a description of the separate regions in the grid. The first of these lines specifies the total number of regions. This is followed by one line for each region that specifies the cells contained in that region. Each region description consists of a decimal number $N$, specifying the number of cells in the region, followed by $N$ cell descriptions separated by spaces. Each cell description consists of a left parenthesis, followed the cell’s row index, followed by a comma, followed by the cell’s row number, followed by a right parenthesis. Regions do not overlap.\n\n-----Output-----\nOutput $R$ lines containing $C$ digits (separated by single spaces) showing the solution grid for the corresponding input data set. You are guaranteed that there is a unique solution.\n\n-----Examples-----\nSample Input:\n3 5\n- - - - -\n- - - - -\n4 - - - 1\n5\n1 (1,1)\n2 (1,2) (1,3)\n5 (2,1) (2,2) (3,1) (3,2) (3,3)\n4 (2,3) (2,4) (1,4) (1,5)\n3 (3,4) (3,5) (2,5)\nSample Output:\n1 2 1 2 1\n3 5 3 4 3\n4 2 1 2 1\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7707"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7707", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["at", 2], ["some", 2], ["point", 2], ["or", 2], ["another", 2], ["most", 2], ["computer", 2], ["science", 2], ["students", 2], ["have", 2], ["written", 2], ["a", 2], ["standard", 1], ["sudoku", 1], ["solving", 1], ["program", 1], ["this", 1], ["is", 1], ["yet", 1], ["another", 1], ["“put", 1], ["numbers", 1], ["in", 1], ["a", 1], ["grid”", 1], ["puzzle", 2], ["numbers", 2], ["are", 2], ["placed", 2], ["in", 4], ["the", 4], ["grid", 4], ["so", 4], ["that", 4], ["each", 4], ["outlined", 4], ["region", 4], ["contains", 4], ["the", 4], ["numbers", 4], ["1", 4], ["to", 4], ["n", 4], ["where", 4], ["n", 4], ["is", 4], ["the", 4], ["number", 4], ["of", 4], ["squares", 4], ["in", 4], ["the", 0], ["region", 0], ["the", 0], ["same", 0], ["number", 0], ["can", 0], ["never", 0], ["touch", 0], ["itself", 0], ["not", 0], ["even", 0], ["diagonally", 0], ["incomplete", 0], ["grid", 0], ["solution", 0], ["grid", 0], ["for", 1], ["this", 1], ["problem", 1], ["you", 1], ["will", 1], ["write", 1], ["a", 1], ["program", 1], ["that", 1], ["takes", 1], ["as", 0], ["input", 0], ["an", 0], ["incomplete", 0], ["puzzle", 0], ["grid", 0], ["and", 0], ["outputs", 0], ["the", 0], ["puzzle", 0], ["solution", 0], ["grid", 0], ["input", 0], ["the", 1], ["input", 1], ["consists", 1], ["of", 1], ["a", 1], ["single", 1], ["data", 1], ["set", 1], ["this", 1], ["data", 1], ["set", 1], ["starts", 1], ["with", 1], ["a", 1], ["line", 1], ["containing", 1], ["the", 1], ["number", 1], ["of", 1], ["rows", 1], ["in", 1], ["the", 1], ["input", 1], ["grid", 1], ["r", 1], ["1", 1], ["le", 1], ["r", 1], ["le", 1], ["7", 1], ["and", 1], ["the", 1], ["number", 1], ["of", 1], ["columns", 1], ["in", 1], ["the", 1], ["input", 1], ["grid", 1], ["c", 1], ["1", 1], ["le", 1], ["c", 1], ["le", 1], ["7", 2], ["separated", 2], ["by", 2], ["spaces", 2], ["the", 2], ["next", 2], ["r", 2], ["lines", 2], ["contain", 1], ["a", 1], ["representation", 1], ["of", 1], ["the", 1], ["incomplete", 1], ["input", 1], ["grid", 1], ["one", 1], ["row", 1], ["per", 1], ["line", 1], ["each", 1], ["row", 1], ["has", 1], ["c", 1], ["characters", 1], ["representing", 1], ["the", 1], ["digits", 1], ["in", 1], ["each", 1], ["cell", 1], ["the", 2], ["value", 2], ["in", 2], ["each", 2], ["cell", 2], ["is", 2], ["represented", 2], ["by", 2], ["either", 2], ["the", 2], ["digit", 2], ["already", 2], ["in", 2], ["that", 2], ["cell", 2], ["or", 2], ["a", 2], ["‘", 2], ["’", 2], ["for", 2], ["an", 2], ["initially", 2], ["empty", 2], ["cell", 2], ["this", 2], ["grid", 2], ["is", 2], ["followed", 2], ["by", 2], ["a", 2], ["description", 2], ["of", 2], ["the", 2], ["separate", 2], ["regions", 2], ["in", 2], ["the", 2], ["grid", 2], ["the", 2], ["first", 2], ["of", 2], ["these", 2], ["lines", 2], ["specifies", 2], ["the", 2], ["total", 2], ["number", 2], ["of", 2], ["regions", 2], ["this", 2], ["is", 2], ["followed", 2], ["by", 2], ["one", 2], ["line", 2], ["for", 2], ["each", 2], ["region", 2], ["that", 2], ["specifies", 2], ["the", 2], ["cells", 2], ["contained", 2], ["in", 2], ["that", 2], ["region", 2], ["each", 2], ["region", 2], ["description", 2], ["consists", 2], ["of", 2], ["a", 2], ["decimal", 2], ["number", 2], ["n", 2], ["specifying", 2], ["the", 2], ["number", 2], ["of", 2], ["cells", 2], ["in", 2], ["the", 2], ["region", 2], ["followed", 2], ["by", 2], ["n", 2], ["cell", 2], ["descriptions", 2], ["separated", 2], ["by", 2], ["spaces", 2], ["each", 2], ["cell", 2], ["description", 2], ["consists", 2], ["of", 2], ["a", 2], ["left", 2], ["parenthesis", 2], ["followed", 2], ["the", 2], ["cell’s", 2], ["row", 2], ["index", 2], ["followed", 2], ["by", 2], ["a", 2], ["comma", 1], ["followed", 1], ["by", 1], ["the", 1], ["cell’s", 1], ["row", 0], ["number", 0], ["followed", 0], ["by", 0], ["a", 0], ["right", 0], ["parenthesis", 0], ["regions", 0], ["do", 0], ["not", 0], ["overlap", 0], ["output", 0], ["output", 1], ["r", 2], ["lines", 2], ["containing", 2], ["c", 2], ["digits", 2], ["separated", 2], ["by", 2], ["single", 1], ["spaces", 1], ["showing", 1], ["the", 1], ["solution", 1], ["grid", 1], ["for", 1], ["the", 1], ["corresponding", 1], ["input", 0], ["data", 0], ["set", 0], ["you", 0], ["are", 0], ["guaranteed", 0], ["that", 0], ["there", 0], ["is", 0], ["a", 0], ["unique", 0], ["solution", 0], ["examples", 0], ["sample", 0], ["input", 0], ["3", 0], ["5", 0], ["4", 0], ["1", 0], ["5", 0], ["1", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["5", 0], ["2", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["1", 0], ["3", 0], ["2", 0], ["3", 0], ["3", 0], ["4", 0], ["2", 0], ["3", 0], ["2", 0], ["4", 0], ["1", 0], ["4", 0], ["1", 0], ["5", 0], ["3", 0], ["3", 0], ["4", 0], ["3", 0], ["5", 0], ["2", 0], ["5", 0], ["sample", 0], ["output", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["5", 0], ["3", 0], ["4", 0], ["3", 0], ["4", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7029177718832891, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4761273209549072, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8046272493573264, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7892030848329049, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7029177718832891, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4761273209549072, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8046272493573264, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7892030848329049, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nRecently, Anton has found a set. The set consists of small English letters. Anton carefully wrote out all the letters from the set in one line, separated by a comma. He also added an opening curved bracket at the beginning of the line and a closing curved bracket at the end of the line. \n\nUnfortunately, from time to time Anton would forget writing some letter and write it again. He asks you to count the total number of distinct letters in his set.\n\n\n-----Input-----\n\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.\n\n\n-----Output-----\n\nPrint a single number — the number of distinct letters in Anton's set.\n\n\n-----Examples-----\nInput\n{a, b, c}\n\nOutput\n3\n\nInput\n{b, a, b, a}\n\nOutput\n2\n\nInput\n{}\n\nOutput\n0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["s = input()\n\ns = s[1: -1].replace(',', '')\n\nresult = set(s.split())\n\nprint(len(result))\n", "a = input().strip()\ns = set()\nfor i in a:\n\tif i not in ' {},':\n\t\ts.add(i)\n\t\t\nprint(len(s))\n", "ans = set()\n\nfor c in input():\n\tif c in 'abcdefghijklmnopqrstuvwxyz':\n\t\tans.add(c)\n\nprint(len(ans))\n", "3\n\nimport sys\n\nline = sys.stdin.readline()\ns = set()\nfor c in line:\n\tif 'a' <= c <= 'z':\n\t\ts.add(c)\nprint(len(s))\n", "s = set()\nstring = input().rstrip()\ni = 1\nwhile i < len(string):\n\ts.add(string[i])\n\ti += 3\nif string == \"{}\":\n\tprint(0)\nelse:\n\tprint(len(s))\n", "sa=input()\nif sa==\"{}\":\n\tprint(0)\nelse:\n\tsa2=[]\n\tfor x in range(1, len(sa), 3):\n\t\tsa2.append(sa[x])\n\tsa3=list(set(sa2))\n\tprint(len(sa3))\n", "# -*- coding: utf-8 -*-\nimport sys\nf = sys.stdin\nSt = f.readline().strip()\n\nletters = {}\nfor s in St:\n\tif s not in '{, }':\n\t\tif s not in letters:\n\t\t\tletters[s] = 1\n\nprint(len(letters))\n", "a = input()\nif len(a) == 2:\n\tprint(0)\nelse:\n\ta = a.split(', ')\n\ta[0] = a[0][1:]\n\ta[-1] = a[-1][:1]\n\tprint(len(set(a)))\n", "n=set(input())\nn=len(n)\nif n>3:\n\tprint(n-4)\nelif n==3:\n\tprint(1)\nelse:\n\tprint(0)\n", "s = input()[1:-1]\nif len(s) == 0:\n\tprint(0)\nelse:\n\tprint(len(set(s.split(', '))))\n", "import sys\n\n\n\n\n\ndef main():\n\tdata = sys.stdin.readline().strip()[1:-1]\n\tdatax = data.split(', ')\n\tdatas = set(datax)\n\tif datax == ['']:\n\t\tprint(0)\n\telse:\n\t\tprint(len(datas))\n\n\n\n\n\nmain()\n\n\n\n\n", "from sys import stdin as cin\nfrom math import factorial as f\nfrom itertools import combinations as comb\nfrom collections import Counter as C\n\ns = input()\ns=s[1:]\nn = len(s)\ns = s[:n-1]\n\nm = list(s.split(', '))\nif m==['']:\n\tprint(0)\nelse:\n\n\t#print(m,len(m))\n\tr = C(m)\n\tprint(len(list(r)))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nused = []\na = input().replace(\"{\",\"\").replace(\"}\",\"\").replace(\" \",\"\").split(\",\")\nif a == [\"\"]:\n\tprint(\"0\")\nelse:\n\tfor b in a:\n\t\tif b not in used:\n\t\t\tused.append(b)\n\tprint(len(used))\n", "s = input()\nif s == '{}':\n\tc = set()\nelse:\n\tc = set(s[1:len(s)-1].split(', '))\nprint(len(c))\n", "import sys\n\n\ndef main(stdin):\n\treturn len(set([e for e in stdin[0][1:-1].split(', ') if e != '']))\n\n\ndef __starting_point():\n\tskip_first_line = False\n\tstdin = [ln for ln in [ln.rstrip() for ln in sys.stdin.readlines()[1 if skip_first_line else 0:]] if len(ln) > 0]\n\tprint(main(stdin))\n\n__starting_point()\n", "s = input()\n\nif s == '{}':\n\tprint(0)\nelse:\n\tprint(len(set(s.strip('}{').split(', '))))\n", "a = set(input()[1:-1].split(', '))\nif '' in a:\n\tprint(0)\nelse:\n\tprint(len(a))\n", "st=input()[1:-1].split(', ')\nif len(st[0])!=0:\n\tprint(len(set(st)))\nelse:\n\tprint(0)\n", "x=input()\nlist=x.split()\nlist2=[]\nif list[0][1]==\"}\":\n\tlist2=[]\nelse:\n\tlist2.append(list[0][1])\ni=1\nwhile i < len(list):\n\tlist2.append(list[i][0])\n\ti+=1\nlist3=[]\nfor item2 in list2:\n\tif item2 not in list3:\n\t\tlist3.append(item2)\nprint(len(list3))\n", "inp = input()\n\nres = [0 for i in range(30)]\n\nfor c in inp:\n\tif ord('a') <= ord(c) <= ord('z'):\n\t\tres[ord(c) - ord('a')] = 1\n\nprint(sum(res))\n", "s=input()\ns=s[1:-1]\nif s==\"\":\n\tprint (\"0\")\nelse:\n\ta=s.split(\", \")\n\tprint(len(set(a)))\n\t\n", "print(len(set(s for s in input()[1:-1].split(\", \") if s != \"\")))\n", "print(len(set([x for x in input() if 123>ord(x)>44])))\n"], "id": "id9175"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9175", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["recently", 1], ["anton", 1], ["has", 1], ["found", 1], ["a", 1], ["set", 1], ["the", 1], ["set", 1], ["consists", 1], ["of", 1], ["small", 1], ["english", 1], ["letters", 1], ["anton", 1], ["carefully", 1], ["wrote", 1], ["out", 1], ["all", 1], ["the", 1], ["letters", 1], ["from", 1], ["the", 1], ["set", 1], ["in", 1], ["one", 1], ["line", 1], ["separated", 1], ["by", 1], ["a", 1], ["comma", 1], ["he", 1], ["also", 1], ["added", 1], ["an", 1], ["opening", 1], ["curved", 1], ["bracket", 1], ["at", 1], ["the", 1], ["beginning", 1], ["of", 1], ["the", 1], ["line", 1], ["and", 1], ["a", 1], ["closing", 1], ["curved", 1], ["bracket", 1], ["at", 1], ["the", 1], ["end", 1], ["of", 1], ["the", 1], ["line", 1], ["unfortunately", 1], ["from", 1], ["time", 1], ["to", 1], ["time", 1], ["anton", 1], ["would", 1], ["forget", 1], ["writing", 1], ["some", 1], ["letter", 1], ["and", 1], ["write", 1], ["it", 1], ["again", 1], ["he", 1], ["asks", 1], ["you", 0], ["to", 0], ["count", 0], ["the", 0], ["total", 0], ["number", 0], ["of", 0], ["distinct", 0], ["letters", 0], ["in", 0], ["his", 0], ["set", 0], ["input", 0], ["the", 1], ["first", 1], ["and", 1], ["the", 1], ["single", 1], ["line", 1], ["contains", 1], ["the", 1], ["set", 1], ["of", 1], ["letters", 1], ["the", 1], ["length", 1], ["of", 1], ["the", 1], ["line", 1], ["doesn", 1], ["t", 1], ["exceed", 1], ["1000", 1], ["it", 1], ["is", 1], ["guaranteed", 1], ["that", 1], ["the", 1], ["line", 1], ["starts", 1], ["from", 1], ["an", 1], ["opening", 1], ["curved", 1], ["bracket", 1], ["and", 1], ["ends", 1], ["with", 1], ["a", 1], ["closing", 1], ["curved", 1], ["bracket", 1], ["between", 1], ["them", 1], ["small", 1], ["english", 1], ["letters", 1], ["are", 1], ["listed", 0], ["separated", 0], ["by", 0], ["a", 0], ["comma", 0], ["each", 0], ["comma", 0], ["is", 0], ["followed", 0], ["by", 0], ["a", 0], ["space", 0], ["output", 0], ["print", 1], ["a", 1], ["single", 0], ["number", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["distinct", 0], ["letters", 0], ["in", 0], ["anton", 0], ["s", 0], ["set", 0], ["examples", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["output", 0], ["3", 0], ["input", 0], ["b", 0], ["a", 0], ["b", 0], ["a", 0], ["output", 0], ["2", 0], ["input", 0], ["output", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.686046511627907, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.686046511627907, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8369565217391305, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8369565217391305, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.686046511627907, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.686046511627907, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8369565217391305, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8369565217391305, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["s", 0], ["input", 0], ["s", 0], ["s", 0], ["1", 0], ["1", 0], ["replace", 0], ["result", 0], ["set", 0], ["s", 0], ["split", 0], ["print", 0], ["len", 0], ["result", 0], ["a", 0], ["input", 0], ["strip", 0], ["s", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["s", 0], ["add", 0], ["i", 0], ["print", 0], ["len", 0], ["s", 0], ["ans", 0], ["set", 0], ["for", 0], ["c", 0], ["in", 0], ["input", 0], ["if", 0], ["c", 0], ["in", 0], ["abcdefghijklmnopqrstuvwxyz", 0], ["ans", 0], ["add", 0], ["c", 0], ["print", 0], ["len", 0], ["ans", 0], ["3", 0], ["import", 0], ["sys", 0], ["line", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["s", 0], ["set", 0], ["for", 0], ["c", 0], ["in", 0], ["line", 0], ["if", 0], ["a", 0], ["c", 0], ["z", 0], ["s", 0], ["add", 0], ["c", 0], ["print", 0], ["len", 0], ["s", 0], ["s", 0], ["set", 0], ["string", 0], ["input", 0], ["rstrip", 0], ["i", 0], ["1", 0], ["while", 0], ["i", 0], ["len", 0], ["string", 0], ["s", 0], ["add", 0], ["string", 0], ["i", 0], ["i", 0], ["3", 0], ["if", 0], ["string", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["len", 0], ["s", 0], ["sa", 0], ["input", 0], ["if", 0], ["sa", 0], ["print", 0], ["0", 0], ["else", 0], ["sa2", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["sa", 0], ["3", 0], ["sa2", 0], ["append", 0], ["sa", 0], ["x", 0], ["sa3", 0], ["list", 0], ["set", 0], ["sa2", 0], ["print", 0], ["len", 0], ["sa3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["import", 0], ["sys", 0], ["f", 0], ["sys", 0], ["stdin", 0], ["st", 0], ["f", 0], ["readline", 0], ["strip", 0], ["letters", 0], ["for", 0], ["s", 0], ["in", 0], ["st", 0], ["if", 0], ["s", 0], ["not", 0], ["in", 0], ["if", 0], ["s", 0], ["not", 0], ["in", 0], ["letters", 0], ["letters", 0], ["s", 0], ["1", 0], ["print", 0], ["len", 0], ["letters", 0], ["a", 0], ["input", 0], ["if", 0], ["len", 0], ["a", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["a", 0], ["a", 0], ["split", 0], ["a", 0], ["0", 0], ["a", 0], ["0", 0], ["1", 0], ["a", 0], ["1", 0], ["a", 0], ["1", 0], ["1", 0], ["print", 0], ["len", 0], ["set", 0], ["a", 0], ["n", 0], ["set", 0], ["input", 0], ["n", 0], ["len", 0], ["n", 0], ["if", 0], ["n", 0], ["3", 0], ["print", 0], ["n", 0], ["4", 0], ["elif", 0], ["n", 0], ["3", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["0", 0], ["s", 0], ["input", 0], ["1", 0], ["1", 0], ["if", 0], ["len", 0], ["s", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["len", 0], ["set", 0], ["s", 0], ["split", 0], ["import", 0], ["sys", 0], ["def", 0], ["main", 0], ["data", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["1", 0], ["1", 0], ["datax", 0], ["data", 0], ["split", 0], ["datas", 0], ["set", 0], ["datax", 0], ["if", 0], ["datax", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["len", 0], ["datas", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["as", 0], ["cin", 0], ["from", 0], ["math", 0], ["import", 0], ["factorial", 0], ["as", 0], ["f", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["as", 0], ["comb", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["as", 0], ["c", 0], ["s", 0], ["input", 0], ["s", 0], ["s", 0], ["1", 0], ["n", 0], ["len", 0], ["s", 0], ["s", 0], ["s", 0], ["n", 0], ["1", 0], ["m", 0], ["list", 0], ["s", 0], ["split", 0], ["if", 0], ["m", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["m", 0], ["len", 0], ["m", 0], ["r", 0], ["c", 0], ["m", 0], ["print", 0], ["len", 0], ["list", 0], ["r", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["used", 0], ["a", 0], ["input", 0], ["replace", 0], ["replace", 0], ["replace", 0], ["split", 0], ["if", 0], ["a", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["b", 0], ["in", 0], ["a", 0], ["if", 0], ["b", 0], ["not", 0], ["in", 0], ["used", 0], ["used", 0], ["append", 0], ["b", 0], ["print", 0], ["len", 0], ["used", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["c", 0], ["set", 0], ["else", 0], ["c", 0], ["set", 0], ["s", 0], ["1", 0], ["len", 0], ["s", 0], ["1", 0], ["split", 0], ["print", 0], ["len", 0], ["c", 0], ["import", 0], ["sys", 0], ["def", 0], ["main", 0], ["stdin", 0], ["return", 0], ["len", 0], ["set", 0], ["e", 0], ["for", 0], ["e", 0], ["in", 0], ["stdin", 0], ["0", 0], ["1", 0], ["1", 0], ["split", 0], ["if", 0], ["e", 0], ["def", 0], ["starting", 0], ["point", 0], ["skip", 0], ["first", 0], ["line", 0], ["false", 0], ["stdin", 0], ["ln", 0], ["for", 0], ["ln", 0], ["in", 0], ["ln", 0], ["rstrip", 0], ["for", 0], ["ln", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readlines", 0], ["1", 0], ["if", 0], ["skip", 0], ["first", 0], ["line", 0], ["else", 0], ["0", 0], ["if", 0], ["len", 0], ["ln", 0], ["0", 0], ["print", 0], ["main", 0], ["stdin", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["len", 0], ["set", 0], ["s", 0], ["strip", 0], ["split", 0], ["a", 0], ["set", 0], ["input", 0], ["1", 0], ["1", 0], ["split", 0], ["if", 0], ["in", 0], ["a", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["len", 0], ["a", 0], ["st", 0], ["input", 0], ["1", 0], ["1", 0], ["split", 0], ["if", 0], ["len", 0], ["st", 0], ["0", 0], ["0", 0], ["print", 0], ["len", 0], ["set", 0], ["st", 0], ["else", 0], ["print", 0], ["0", 0], ["x", 0], ["input", 0], ["list", 0], ["x", 0], ["split", 0], ["list2", 0], ["if", 0], ["list", 0], ["0", 0], ["1", 0], ["list2", 0], ["else", 0], ["list2", 0], ["append", 0], ["list", 0], ["0", 0], ["1", 0], ["i", 0], ["1", 0], ["while", 0], ["i", 0], ["len", 0], ["list", 0], ["list2", 0], ["append", 0], ["list", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["list3", 0], ["for", 0], ["item2", 0], ["in", 0], ["list2", 0], ["if", 0], ["item2", 0], ["not", 0], ["in", 0], ["list3", 0], ["list3", 0], ["append", 0], ["item2", 0], ["print", 0], ["len", 0], ["list3", 0], ["inp", 0], ["input", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["30", 0], ["for", 0], ["c", 0], ["in", 0], ["inp", 0], ["if", 0], ["ord", 0], ["a", 0], ["ord", 0], ["c", 0], ["ord", 0], ["z", 0], ["res", 0], ["ord", 0], ["c", 0], ["ord", 0], ["a", 0], ["1", 0], ["print", 0], ["sum", 0], ["res", 0], ["s", 0], ["input", 0], ["s", 0], ["s", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["print", 0], ["0", 0], ["else", 0], ["a", 0], ["s", 0], ["split", 0], ["print", 0], ["len", 0], ["set", 0], ["a", 0], ["print", 0], ["len", 0], ["set", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["1", 0], ["1", 0], ["split", 0], ["if", 0], ["s", 0], ["print", 0], ["len", 0], ["set", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["if", 0], ["123", 0], ["ord", 0], ["x", 0], ["44", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou can not just take the file and send it. When Polycarp trying to send a file in the social network \"Codehorses\", he encountered an unexpected problem. If the name of the file contains three or more \"x\" (lowercase Latin letters \"x\") in a row, the system considers that the file content does not correspond to the social network topic. In this case, the file is not sent and an error message is displayed.\n\nDetermine the minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring. Print 0 if the file name does not initially contain a forbidden substring \"xxx\".\n\nYou can delete characters in arbitrary positions (not necessarily consecutive). If you delete a character, then the length of a string is reduced by $1$. For example, if you delete the character in the position $2$ from the string \"exxxii\", then the resulting string is \"exxii\".\n\n\n-----Input-----\n\nThe first line contains integer $n$ $(3 \\le n \\le 100)$ — the length of the file name.\n\nThe second line contains a string of length $n$ consisting of lowercase Latin letters only — the file name.\n\n\n-----Output-----\n\nPrint the minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring. If initially the file name dost not contain a forbidden substring \"xxx\", print 0.\n\n\n-----Examples-----\nInput\n6\nxxxiii\n\nOutput\n1\n\nInput\n5\nxxoxx\n\nOutput\n0\n\nInput\n10\nxxxxxxxxxx\n\nOutput\n8\n\n\n\n-----Note-----\n\nIn the first example Polycarp tried to send a file with name contains number $33$, written in Roman numerals. But he can not just send the file, because it name contains three letters \"x\" in a row. To send the file he needs to remove any one of this letters.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\ns = input()\n\nres = 0\nx_count = 0\n\nfor c in s:\n\tif c == 'x':\n\t\tx_count += 1\n\telse:\n\t\tx_count = 0\n\n\tif x_count > 2:\n\t\tres += 1\n\n\nprint(res)\n", "n = int(input())\ns = input() + ' '*(n%3)\ncnt = 0\n\nfor x in range(n):\n\tif s[x:x+3] == 'xxx':\n\t\tcnt += 1\n\nprint(cnt)\n", "l = int(input())\n\ns = input()\n\ncount = 0\nres = 0\nfor c in s:\n\tif c == 'x':\n\t\tcount+=1\n\telse:\n\t\tres += max(0,count-2)\n\t\tcount = 0\nres += max(0,count-2)\nprint(res)\n", "N = input()\nS = input()\ncount = 0\nwhile \"xxx\" in S:\n\tcount += 1\n\tidx = S.index(\"xxx\")\n\tS = S[:idx] + S[idx+1:]\nprint(count)\n", "n = int(input())\n\nniz = input().strip()\n\ncount = 0\ni = 0\nwhile i+2 < len(niz):\n\tif niz[i:i+3] == 'xxx':\n\t\tniz = niz[:i+2] + niz[i+3:]\n\t\tcount += 1\n\t\ti = 0\n\telse:\n\t\ti += 1\n\nprint(count)\n", "n = int(input())\ns = input() + '#'\n\nres = 0\np = 0\nfor i, c in enumerate(s):\n\tif c == 'x':\n\t\tp += 1\n\telse:\n\t\tres += max(0, p-2)\n\t\tp = 0\n\nprint(res)\n", "n = int(input())\ns = input()\nanswer = 0\nwhile('xxx' in s):\n\ts = s.replace('xxx','xx',1)\n\tanswer += 1\n\n\nprint(answer)\n", "n = int(input())\ns = input()\ncount = 0\nfor i in range(n-2):\n\tif s[i:i+3] == \"xxx\":\n\t\tcount+=1\nprint(count)\n", "n = int(input())\ns = input() + '_'\ns_ = 0\nc = 0\nfor i in s:\n\tif i == 'x':\n\t\tc += 1\n\telse:\n\t\tif c > 2:\n\t\t\ts_ += c - 2\n\t\tc = 0\nprint(s_)\n", "n = int(input())\ns = input()\nsl = [i for i in s]\nc = 0\nx = s.find('xxx')\nwhile(x!=-1):\n\tc+=1\n\tsl.pop(x)\n\ttemp = ''\n\tfor i in sl:\n\t\ttemp+=i\n\tx = temp.find('xxx')\nprint(c)\n", "n = int(input())\ns = input()\nans, l = 0, -2\nfor i in range(len(s)):\n\tif s[i] == 'x':\n\t\tl += 1\n\telse:\n\t\tans += max(0, l)\n\t\tl = -2\nprint(ans + max(0, l))\n", "# ANSHUL GAUTAM\n# IIIT-D\n \n\n\n\nn = int(input())\ns = input()\nL = []\nc = 0\nfor i in range(len(s)-2):\n\tif(s[i]=='x' and s[i+1]=='x' and s[i+2]=='x'):\n\t\tc += 1\nprint(c)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import re\n\nN = int(input())\n\n\nprint(sum(len(g) - 2 for g in re.findall('xxx+', input()) if len(g) >= 3))\n", "_ = input()\nl = input()\nres = 0\nfor i in range(len(l) - 2):\n\tif l[i] == l[i+1] and l[i+1] == l[i+2] and l[i] == 'x':\n\t\tres += 1\nprint(res)\n", "n = int(input())\ns = input()\n\nans = 0\nwhile 'xxx' in s:\n\tind = s.index('xxx')\n\ts = list(s)\n\ts[ind: ind + 3] = ['x', 'x']\n\ts = ''.join(s)\n\tans += 1\n\nprint(ans)\n", "n=int(input())\nc,o=0,0\nfor i in input():\n\tif i=='x':\n\t\tc+=1\n\telse:\n\t\tc=0\n\tif c>=3:\n\t\to+=1\nprint(o)\n", "n = int(input())\ns = input()\nxc = 0\nres = 0\nfor i in s:\n\tif i == 'x':\n\t\txc += 1\n\telse:\n\t\tif xc >= 3:\n\t\t\tres += xc - 2\n\t\txc = 0\nif xc >= 3:\n\tres += xc - 2\nprint(res)\n", "n = int(input())\ns = input()\n\ncur = 0\nans = 0\n\nfor x in s:\n\tif x == 'x':\n\t\tcur += 1\n\t\tif cur == 3:\n\t\t\tans += 1\n\t\t\tcur -= 1\n\telse:\n\t\tcur = 0\n\nprint(ans)\n", "n=int(input())\ns=input().strip()\nans=0\ncount=0\nflag=0\nfor i in range(n):\n\tif flag==0:\n\t\tif s[i]==\"x\":\n\t\t\tcount+=1\n\t\t\tflag=1 \n\telse:\n\t\tif s[i]==\"x\":\n\t\t\tcount+=1 \n\t\telse:\n\t\t\tif count>=3:\n\t\t\t\tans+=count-2 \n\t\t\tcount=0\n\t\t\tflag=0\nif flag==1:\n\tif count>=3:\n\t\tans+=count-2\nprint(ans)\n\t\t\t\n", "n = int(input())\n\ns = input()\n\nlst = []\nk = 0\nfor x in range(n):\n\tif s[x] == 'x':\n\t\tk += 1\n\telse:\n\t\tif k != 0:\n\t\t\tlst.append(k)\n\t\tk = 0\nif k != 0:\n\tlst.append(k)\n\t \nans = 0\nfor x in lst:\n\tif x >= 3:\n\t\tans += x - 2\n\nprint(ans)\n", "n=int(input())\nch=input()\nans=0\nc=0\nfor i in range(n):\n\tif ch[i]==\"x\":\n\t\tc+=1\n\tif (ch[i]==\"x\" and i==n-1) or ch[i]!=\"x\":\n\t\tif c>=3:\n\t\t\tans+=(c-2)\n\t\tc=0\nprint(ans)\n\t\n", "n = int(input())\ns = input()\nans = 0\nfor i in range(n):\n\tif s[i] == 'x' and (i == 0 or s[i - 1] != 'x'):\n\t\tj = i\n\t\twhile j + 1 < n:\n\t\t\tif s[j + 1] == 'x':\n\t\t\t\tj += 1\n\t\t\telse:\n\t\t\t\tbreak\n\t\tsz = j - i + 1\n\t\tans += max(0, sz - 2)\nprint(ans)\n", "n = int(input())\nfile_name = input()\n\nto_remove = 0\ncurrent_streak = 0\n\nfor i in range(n):\n\tif file_name[i] != 'x':\n\t\tcurrent_streak = 0\n\t\tcontinue\n\telse:\n\t\tcurrent_streak += 1\n\t\tif current_streak > 2:\n\t\t\tto_remove += 1\n\n\nprint(to_remove)\n", "n = int(input())\ns = input()\np = str()\nans = 0\nfor i in range(n-2):\n\tif s[i] == \"x\" and s[i+1] == \"x\" and s[i+2] == \"x\":\n\t\tans += 1\n\nprint(ans)\n", "n = int(input())\ns = [x for x in input()]\nlength = len(s)\n\ni = 0\nans = 0\nwhile i < len(s):\n\twhile i + 2 < len(s) and s[i] == 'x' and s[i + 1] == 'x' and s[i + 2] == 'x':\n\t\tans += 1\n\t\ts.pop(i)\n\ti += 1\nprint(ans)\n"], "id": "id9834"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9834", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 2], ["can", 2], ["not", 2], ["just", 2], ["take", 2], ["the", 2], ["file", 2], ["and", 2], ["send", 2], ["it", 2], ["when", 2], ["polycarp", 2], ["trying", 2], ["to", 2], ["send", 2], ["a", 2], ["file", 2], ["in", 2], ["the", 2], ["social", 2], ["network", 2], ["codehorses", 2], ["he", 2], ["encountered", 2], ["an", 2], ["unexpected", 2], ["problem", 2], ["if", 2], ["the", 2], ["name", 2], ["of", 2], ["the", 2], ["file", 2], ["contains", 2], ["three", 2], ["or", 2], ["more", 2], ["x", 2], ["lowercase", 2], ["latin", 2], ["letters", 2], ["x", 2], ["in", 2], ["a", 2], ["row", 2], ["the", 2], ["system", 2], ["considers", 2], ["that", 2], ["the", 2], ["file", 2], ["content", 2], ["does", 2], ["not", 2], ["correspond", 2], ["to", 2], ["the", 2], ["social", 2], ["network", 2], ["topic", 2], ["in", 2], ["this", 2], ["case", 2], ["the", 2], ["file", 2], ["is", 2], ["not", 2], ["sent", 2], ["and", 2], ["an", 2], ["error", 2], ["message", 2], ["is", 2], ["displayed", 2], ["determine", 2], ["the", 4], ["minimum", 4], ["number", 4], ["of", 4], ["characters", 4], ["to", 4], ["remove", 4], ["from", 4], ["the", 4], ["file", 4], ["name", 4], ["so", 2], ["after", 2], ["that", 2], ["the", 2], ["name", 2], ["does", 2], ["not", 2], ["contain", 2], ["xxx", 2], ["as", 2], ["a", 2], ["substring", 2], ["print", 2], ["0", 2], ["if", 2], ["the", 2], ["file", 2], ["name", 2], ["does", 2], ["not", 2], ["initially", 2], ["contain", 2], ["a", 2], ["forbidden", 2], ["substring", 2], ["xxx", 2], ["you", 2], ["can", 2], ["delete", 2], ["characters", 2], ["in", 2], ["arbitrary", 2], ["positions", 2], ["not", 2], ["necessarily", 2], ["consecutive", 2], ["if", 2], ["you", 2], ["delete", 2], ["a", 2], ["character", 2], ["then", 2], ["the", 2], ["length", 2], ["of", 2], ["a", 2], ["string", 2], ["is", 2], ["reduced", 2], ["by", 2], ["1", 2], ["for", 2], ["example", 2], ["if", 2], ["you", 2], ["delete", 2], ["the", 2], ["character", 2], ["in", 2], ["the", 2], ["position", 0], ["2", 0], ["from", 0], ["the", 0], ["string", 0], ["exxxii", 0], ["then", 0], ["the", 0], ["resulting", 0], ["string", 0], ["is", 0], ["exxii", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 2], ["contains", 2], ["integer", 2], ["n", 2], ["3", 2], ["le", 2], ["n", 2], ["le", 2], ["100", 2], ["—", 2], ["the", 2], ["length", 2], ["of", 2], ["the", 2], ["file", 2], ["name", 2], ["the", 2], ["second", 2], ["line", 2], ["contains", 2], ["a", 2], ["string", 2], ["of", 2], ["length", 0], ["n", 0], ["consisting", 0], ["of", 0], ["lowercase", 0], ["latin", 0], ["letters", 0], ["only", 0], ["—", 0], ["the", 0], ["file", 0], ["name", 0], ["output", 0], ["print", 2], ["the", 4], ["minimum", 4], ["number", 4], ["of", 4], ["characters", 4], ["to", 4], ["remove", 4], ["from", 4], ["the", 4], ["file", 4], ["name", 4], ["so", 2], ["after", 2], ["that", 2], ["the", 2], ["name", 2], ["does", 2], ["not", 2], ["contain", 2], ["xxx", 2], ["as", 2], ["a", 2], ["substring", 2], ["if", 2], ["initially", 2], ["the", 0], ["file", 0], ["name", 0], ["dost", 0], ["not", 0], ["contain", 0], ["a", 0], ["forbidden", 0], ["substring", 0], ["xxx", 0], ["print", 0], ["0", 0], ["examples", 0], ["input", 0], ["6", 0], ["xxxiii", 0], ["output", 0], ["1", 0], ["input", 0], ["5", 0], ["xxoxx", 0], ["output", 0], ["0", 0], ["input", 0], ["10", 0], ["xxxxxxxxxx", 0], ["output", 0], ["8", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["example", 2], ["polycarp", 2], ["tried", 2], ["to", 2], ["send", 2], ["a", 2], ["file", 2], ["with", 2], ["name", 2], ["contains", 2], ["number", 2], ["33", 2], ["written", 2], ["in", 2], ["roman", 2], ["numerals", 2], ["but", 2], ["he", 2], ["can", 2], ["not", 2], ["just", 2], ["send", 2], ["the", 2], ["file", 2], ["because", 2], ["it", 2], ["name", 2], ["contains", 2], ["three", 2], ["letters", 2], ["x", 2], ["in", 2], ["a", 2], ["row", 2], ["to", 2], ["send", 0], ["the", 0], ["file", 0], ["he", 0], ["needs", 0], ["to", 0], ["remove", 0], ["any", 0], ["one", 0], ["of", 0], ["this", 0], ["letters", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7807308970099668, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.37209302325581395, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9041533546325878, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4520766773162939, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7807308970099668, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.37209302325581395, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9041533546325878, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4520766773162939, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["res", 0], ["0", 0], ["x", 0], ["count", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["c", 0], ["x", 0], ["x", 0], ["count", 0], ["1", 0], ["else", 0], ["x", 0], ["count", 0], ["0", 0], ["if", 0], ["x", 0], ["count", 0], ["2", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["n", 0], ["3", 0], ["cnt", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["x", 0], ["x", 0], ["3", 0], ["xxx", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["l", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["res", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["c", 0], ["x", 0], ["count", 0], ["1", 0], ["else", 0], ["res", 0], ["max", 0], ["0", 0], ["count", 0], ["2", 0], ["count", 0], ["0", 0], ["res", 0], ["max", 0], ["0", 0], ["count", 0], ["2", 0], ["print", 0], ["res", 0], ["n", 0], ["input", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["while", 0], ["xxx", 0], ["in", 0], ["s", 0], ["count", 0], ["1", 0], ["idx", 0], ["s", 0], ["index", 0], ["xxx", 0], ["s", 0], ["s", 0], ["idx", 0], ["s", 0], ["idx", 0], ["1", 0], ["print", 0], ["count", 0], ["n", 0], ["int", 0], ["input", 0], ["niz", 0], ["input", 0], ["strip", 0], ["count", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["2", 0], ["len", 0], ["niz", 0], ["if", 0], ["niz", 0], ["i", 0], ["i", 0], ["3", 0], ["xxx", 0], ["niz", 0], ["niz", 0], ["i", 0], ["2", 0], ["niz", 0], ["i", 0], ["3", 0], ["count", 0], ["1", 0], ["i", 0], ["0", 0], ["else", 0], ["i", 0], ["1", 0], ["print", 0], ["count", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["res", 0], ["0", 0], ["p", 0], ["0", 0], ["for", 0], ["i", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["c", 0], ["x", 0], ["p", 0], ["1", 0], ["else", 0], ["res", 0], ["max", 0], ["0", 0], ["p", 0], ["2", 0], ["p", 0], ["0", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["answer", 0], ["0", 0], ["while", 0], ["xxx", 0], ["in", 0], ["s", 0], ["s", 0], ["s", 0], ["replace", 0], ["xxx", 0], ["xx", 0], ["1", 0], ["answer", 0], ["1", 0], ["print", 0], ["answer", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["3", 0], ["xxx", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["s", 0], ["0", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["x", 0], ["c", 0], ["1", 0], ["else", 0], ["if", 0], ["c", 0], ["2", 0], ["s", 0], ["c", 0], ["2", 0], ["c", 0], ["0", 0], ["print", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["sl", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["c", 0], ["0", 0], ["x", 0], ["s", 0], ["find", 0], ["xxx", 0], ["while", 0], ["x", 0], ["1", 0], ["c", 0], ["1", 0], ["sl", 0], ["pop", 0], ["x", 0], ["temp", 0], ["for", 0], ["i", 0], ["in", 0], ["sl", 0], ["temp", 0], ["i", 0], ["x", 0], ["temp", 0], ["find", 0], ["xxx", 0], ["print", 0], ["c", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ans", 0], ["l", 0], ["0", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["x", 0], ["l", 0], ["1", 0], ["else", 0], ["ans", 0], ["max", 0], ["0", 0], ["l", 0], ["l", 0], ["2", 0], ["print", 0], ["ans", 0], ["max", 0], ["0", 0], ["l", 0], ["anshul", 0], ["gautam", 0], ["iiit", 0], ["d", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["2", 0], ["if", 0], ["s", 0], ["i", 0], ["x", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["x", 0], ["and", 0], ["s", 0], ["i", 0], ["2", 0], ["x", 0], ["c", 0], ["1", 0], ["print", 0], ["c", 0], ["import", 0], ["re", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["sum", 0], ["len", 0], ["g", 0], ["2", 0], ["for", 0], ["g", 0], ["in", 0], ["re", 0], ["findall", 0], ["xxx", 0], ["input", 0], ["if", 0], ["len", 0], ["g", 0], ["3", 0], ["input", 0], ["l", 0], ["input", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["2", 0], ["if", 0], ["l", 0], ["i", 0], ["l", 0], ["i", 0], ["1", 0], ["and", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["and", 0], ["l", 0], ["i", 0], ["x", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["while", 0], ["xxx", 0], ["in", 0], ["s", 0], ["ind", 0], ["s", 0], ["index", 0], ["xxx", 0], ["s", 0], ["list", 0], ["s", 0], ["s", 0], ["ind", 0], ["ind", 0], ["3", 0], ["x", 0], ["x", 0], ["s", 0], ["join", 0], ["s", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["c", 0], ["o", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["if", 0], ["i", 0], ["x", 0], ["c", 0], ["1", 0], ["else", 0], ["c", 0], ["0", 0], ["if", 0], ["c", 0], ["3", 0], ["o", 0], ["1", 0], ["print", 0], ["o", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["xc", 0], ["0", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["x", 0], ["xc", 0], ["1", 0], ["else", 0], ["if", 0], ["xc", 0], ["3", 0], ["res", 0], ["xc", 0], ["2", 0], ["xc", 0], ["0", 0], ["if", 0], ["xc", 0], ["3", 0], ["res", 0], ["xc", 0], ["2", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["cur", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["s", 0], ["if", 0], ["x", 0], ["x", 0], ["cur", 0], ["1", 0], ["if", 0], ["cur", 0], ["3", 0], ["ans", 0], ["1", 0], ["cur", 0], ["1", 0], ["else", 0], ["cur", 0], ["0", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["strip", 0], ["ans", 0], ["0", 0], ["count", 0], ["0", 0], ["flag", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["flag", 0], ["0", 0], ["if", 0], ["s", 0], ["i", 0], ["x", 0], ["count", 0], ["1", 0], ["flag", 0], ["1", 0], ["else", 0], ["if", 0], ["s", 0], ["i", 0], ["x", 0], ["count", 0], ["1", 0], ["else", 0], ["if", 0], ["count", 0], ["3", 0], ["ans", 0], ["count", 0], ["2", 0], ["count", 0], ["0", 0], ["flag", 0], ["0", 0], ["if", 0], ["flag", 0], ["1", 0], ["if", 0], ["count", 0], ["3", 0], ["ans", 0], ["count", 0], ["2", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["lst", 0], ["k", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["x", 0], ["x", 0], ["k", 0], ["1", 0], ["else", 0], ["if", 0], ["k", 0], ["0", 0], ["lst", 0], ["append", 0], ["k", 0], ["k", 0], ["0", 0], ["if", 0], ["k", 0], ["0", 0], ["lst", 0], ["append", 0], ["k", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["lst", 0], ["if", 0], ["x", 0], ["3", 0], ["ans", 0], ["x", 0], ["2", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["ch", 0], ["input", 0], ["ans", 0], ["0", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ch", 0], ["i", 0], ["x", 0], ["c", 0], ["1", 0], ["if", 0], ["ch", 0], ["i", 0], ["x", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["or", 0], ["ch", 0], ["i", 0], ["x", 0], ["if", 0], ["c", 0], ["3", 0], ["ans", 0], ["c", 0], ["2", 0], ["c", 0], ["0", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["x", 0], ["and", 0], ["i", 0], ["0", 0], ["or", 0], ["s", 0], ["i", 0], ["1", 0], ["x", 0], ["j", 0], ["i", 0], ["while", 0], ["j", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["j", 0], ["1", 0], ["x", 0], ["j", 0], ["1", 0], ["else", 0], ["break", 0], ["sz", 0], ["j", 0], ["i", 0], ["1", 0], ["ans", 0], ["max", 0], ["0", 0], ["sz", 0], ["2", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["file", 0], ["name", 0], ["input", 0], ["to", 0], ["remove", 0], ["0", 0], ["current", 0], ["streak", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["file", 0], ["name", 0], ["i", 0], ["x", 0], ["current", 0], ["streak", 0], ["0", 0], ["continue", 0], ["else", 0], ["current", 0], ["streak", 0], ["1", 0], ["if", 0], ["current", 0], ["streak", 0], ["2", 0], ["to", 0], ["remove", 0], ["1", 0], ["print", 0], ["to", 0], ["remove", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["p", 0], ["str", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["if", 0], ["s", 0], ["i", 0], ["x", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["x", 0], ["and", 0], ["s", 0], ["i", 0], ["2", 0], ["x", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["length", 0], ["len", 0], ["s", 0], ["i", 0], ["0", 0], ["ans", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["s", 0], ["while", 0], ["i", 0], ["2", 0], ["len", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["x", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["x", 0], ["and", 0], ["s", 0], ["i", 0], ["2", 0], ["x", 0], ["ans", 0], ["1", 0], ["s", 0], ["pop", 0], ["i", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are given a broken clock. You know, that it is supposed to show time in 12- or 24-hours HH:MM format. In 12-hours format hours change from 1 to 12, while in 24-hours it changes from 0 to 23. In both formats minutes change from 0 to 59.\n\nYou are given a time in format HH:MM that is currently displayed on the broken clock. Your goal is to change minimum number of digits in order to make clocks display the correct time in the given format.\n\nFor example, if 00:99 is displayed, it is enough to replace the second 9 with 3 in order to get 00:39 that is a correct time in 24-hours format. However, to make 00:99 correct in 12-hours format, one has to change at least two digits. Additionally to the first change one can replace the second 0 with 1 and obtain 01:39.\n\n\n-----Input-----\n\nThe first line of the input contains one integer 12 or 24, that denote 12-hours or 24-hours format respectively.\n\nThe second line contains the time in format HH:MM, that is currently displayed on the clock. First two characters stand for the hours, while next two show the minutes.\n\n\n-----Output-----\n\nThe only line of the output should contain the time in format HH:MM that is a correct time in the given format. It should differ from the original in as few positions as possible. If there are many optimal solutions you can print any of them.\n\n\n-----Examples-----\nInput\n24\n17:30\n\nOutput\n17:30\n\nInput\n12\n17:30\n\nOutput\n07:30\n\nInput\n24\n99:99\n\nOutput\n09:09\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\ns = input().split(':')\nif n == 12:\n\tif s[0] == '00':\n\t\ts[0] = '01'\n\telif int(s[0]) > 12 and s[0][1] == '0':\n\t\ts[0] = '10'\n\telif int(s[0]) > 12:\n\t\ts[0] = '0' + s[0][1]\nelse:\n\tif int(s[0]) > 23:\n\t\ts[0] = '0' + s[0][1]\nif int(s[1]) > 59:\n\ts[1] = '0' + s[1][1]\nprint(':'.join(s))\n", "form = int(input())\nhs, ms = input().split(\":\")\nif int(ms) > 59:\n\tms = \"0\" + ms[1]\nif form == 24:\n\tif int(hs) > 23:\n\t\ths = \"0\" + hs[1]\nelse:\n\tif int(hs) > 12:\n\t\tif hs[1] == \"0\":\n\t\t\ths = \"10\"\n\t\telse:\n\t\t\ths = \"0\" + hs[1]\n\telif int(hs) == 0:\n\t\ths = \"01\"\nprint(hs + \":\" + ms)\n", "def best(h, n, x):\n\tbest = ''\n\tbestCnt = 10\n\tbegin = 0\n\tend = n\n\tif x == 'h':\n\t\tif n == 12:\n\t\t\tbegin = 1\n\t\t\tend = 13\n\tfor i in range(begin, end):\n\t\tsi = str(i)\n\t\tif len(si) == 1:\n\t\t\tsi = '0' + si\n\t\tbad = 0\n\t\tfor x, y in zip(h, si):\n\t\t\tif x != y:\n\t\t\t\tbad += 1\n\t\tif bad < bestCnt:\n\t\t\tbestCnt = bad\n\t\t\tbest = si\n\treturn best\n\nn = int(input())\ns = input()\nh = s[0:2]\nm = s[3:5]\nprint(best(h, n, 'h'), best(m, 60, 'm'), sep=':')\n", "#! /usr/bin/python\n# kmwho\n\n\n\ndef solvecase():\n\tform   =  int(input().strip())\n\thh,mm  = list(map(int,input().strip().split(\":\")))\n\tif mm > 59:\n\t\tmm = mm % 10\n\tif form == 24:\n\t\tif hh > 23:\n\t\t\thh = hh % 10\n\telif form == 12:\n\t\tif hh > 12:\n\t\t\tif hh % 10:\n\t\t\t\thh = hh % 10\n\t\t\telse:\n\t\t\t\thh = 10\n\t\tif hh == 0:\n\t\t\thh = 1\n\treturn \"%02d:%02d\" % (hh,mm)\n\ndef main():\n\t#solve()\n\tprint(solvecase())\n\n\nmain()\n", "n = int(input())\nh, m = input().split(':')\nans = 1000\nans1 = ''\nif n == 12:\n\th1, m1 = '', ''\n\tfor i in range(1, 13):\n\t\tfor j in range(0, 60):\n\t\t\th1 = (2 - len(str(i))) * '0' + str(i)\n\t\t\tm1 = (2 - len(str(j))) * '0' + str(j)\n\t\t\tcnt = 4\n\t\t\tif h1[0] == h[0]:\n\t\t\t\tcnt -= 1\n\t\t\tif h1[1] == h[1]:\n\t\t\t\tcnt -= 1\n\t\t\tif m1[0] == m[0]:\n\t\t\t\tcnt -= 1\n\t\t\tif m1[1] == m[1]:\n\t\t\t\tcnt -= 1\n\t\t\tif cnt < ans:\n\t\t\t\tans = cnt\n\t\t\t\tans1 = h1 + ':' + m1   \n\tprint(ans1)\nelse:\n\th1, m1 = '', ''\n\tfor i in range(24):\n\t\tfor j in range(0, 60):\n\t\t\th1 = (2 - len(str(i))) * '0' + str(i)\n\t\t\tm1 = (2 - len(str(j))) * '0' + str(j)\n\t\t\tcnt = 4\n\t\t\tif h1[0] == h[0]:\n\t\t\t\tcnt -= 1\n\t\t\tif h1[1] == h[1]:\n\t\t\t\tcnt -= 1\n\t\t\tif m1[0] == m[0]:\n\t\t\t\tcnt -= 1\n\t\t\tif m1[1] == m[1]:\n\t\t\t\tcnt -= 1\n\t\t\tif cnt < ans:\n\t\t\t\tans = cnt\n\t\t\t\tans1 = h1 + ':' + m1  \n\tprint(ans1)\n", "c = input()\nh, m = map(int, input().split(':'))\nif m >= 60:\n\tm %= 10\nif c == '12' and h == 0:\n\th = 1\nelif c == '12' and h > 12:\n\tif h % 10:\n\t\th %= 10\n\telse:\n\t\th = 10\nelif c == '24' and h > 23:\n\th %= 10\nprint('%02d:%02d' % (h,m))\n", "def l(s1, s2):\n\treturn len(list(i for i in range(len(s1)) if s1[i] != s2[i]))\n\nc = int(input())\n\nif c == 12:\n\th = list(range(1, 13))\nelse:\n\th = list(range(0, 24))\n\n\ns = input()\nmin_s = \"\"\nmin_l = 100\n\nfor x in h:\n\tfor y in range(60):\n\t\tnew_s = \"{0:02}:{1:02}\".format(x,y)\n\t\tif l(s, new_s) < min_l:\n\t\t\tmin_l = l(s, new_s)\n\t\t\tmin_s = new_s\n\nprint(min_s)\n", "n = int(input())\ntm = tuple(map(int, input().split(':')))\n\ncost = [[0 for i in range(100)] for j in range(100)]\nfor i in range(100):\n\tfor j in range(100):\n\t\tx, y = i, j\n\t\tfor k in range(2):\n\t\t\tcost[i][j] += (x % 10) != (y % 10)\n\t\t\tx //= 10\n\t\t\ty //= 10\n\nhr_range = list(range(1, 13))\nif n == 24:\n\thr_range = list(range(0, 24))\n\nbest_time = None\nbest_val = 123\nfor h in hr_range:\n\tfor m in range(60):\n\t\tcur = cost[h][tm[0]] + cost[m][tm[1]]\n\t\tif cur < best_val:\n\t\t\tbest_val = cur\n\t\t\tbest_time = '{:02d}:{:02d}'.format(h, m)\n\nprint(best_time)\n", "__author__ = 'Alexander'\nimport sys\nformat = int(sys.stdin.readline().strip())\ntimeH, timeM = list(map(int,sys.stdin.readline().split(':')))\n# print(format)\n# print(timeH)\n# print(timeM)\nif format == 12:\n\tif timeH > 12 or timeH == 0:\n\t\tif timeH == 0: timeH = 1\n\t\telif timeH%10 == 0: timeH = 10\n\t\telse: timeH %= 10\n\tif timeM > 59:\n\t\ttimeM %= 10\nelse:\n\tif timeH > 23:\n\t\ttimeH %= 10\n\tif timeM > 59:\n\t\ttimeM %= 10\nsys.stdout.write(\"%02d:%02d\" % (timeH, timeM))\n"], "id": "id8577"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8577", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["broken", 1], ["clock", 1], ["you", 1], ["know", 1], ["that", 1], ["it", 1], ["is", 1], ["supposed", 1], ["to", 1], ["show", 1], ["time", 1], ["in", 1], ["12", 1], ["or", 1], ["24", 1], ["hours", 1], ["hh", 1], ["mm", 1], ["format", 1], ["in", 1], ["12", 1], ["hours", 1], ["format", 1], ["hours", 1], ["change", 1], ["from", 1], ["1", 1], ["to", 1], ["12", 1], ["while", 1], ["in", 1], ["24", 1], ["hours", 1], ["it", 1], ["changes", 1], ["from", 1], ["0", 1], ["to", 1], ["23", 1], ["in", 1], ["both", 1], ["formats", 1], ["minutes", 1], ["change", 1], ["from", 1], ["0", 1], ["to", 1], ["59", 1], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["time", 1], ["in", 1], ["format", 1], ["hh", 1], ["mm", 1], ["that", 1], ["is", 1], ["currently", 1], ["displayed", 1], ["on", 1], ["the", 1], ["broken", 1], ["clock", 1], ["your", 1], ["goal", 1], ["is", 1], ["to", 1], ["change", 1], ["minimum", 1], ["number", 1], ["of", 1], ["digits", 1], ["in", 1], ["order", 1], ["to", 1], ["make", 1], ["clocks", 1], ["display", 1], ["the", 1], ["correct", 1], ["time", 1], ["in", 1], ["the", 1], ["given", 1], ["format", 1], ["for", 1], ["example", 1], ["if", 1], ["00", 1], ["99", 1], ["is", 1], ["displayed", 1], ["it", 1], ["is", 1], ["enough", 1], ["to", 1], ["replace", 1], ["the", 1], ["second", 1], ["9", 1], ["with", 1], ["3", 1], ["in", 1], ["order", 1], ["to", 1], ["get", 1], ["00", 1], ["39", 1], ["that", 1], ["is", 1], ["a", 1], ["correct", 1], ["time", 1], ["in", 1], ["24", 1], ["hours", 1], ["format", 1], ["however", 1], ["to", 1], ["make", 1], ["00", 1], ["99", 1], ["correct", 1], ["in", 1], ["12", 1], ["hours", 1], ["format", 1], ["one", 1], ["has", 1], ["to", 1], ["change", 1], ["at", 1], ["least", 1], ["two", 1], ["digits", 1], ["additionally", 1], ["to", 1], ["the", 1], ["first", 1], ["change", 1], ["one", 0], ["can", 0], ["replace", 0], ["the", 0], ["second", 0], ["0", 0], ["with", 0], ["1", 0], ["and", 0], ["obtain", 0], ["01", 0], ["39", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["the", 1], ["input", 1], ["contains", 1], ["one", 1], ["integer", 1], ["12", 1], ["or", 1], ["24", 1], ["that", 1], ["denote", 1], ["12", 1], ["hours", 1], ["or", 1], ["24", 1], ["hours", 1], ["format", 1], ["respectively", 1], ["the", 1], ["second", 1], ["line", 1], ["contains", 1], ["the", 1], ["time", 1], ["in", 1], ["format", 1], ["hh", 1], ["mm", 1], ["that", 1], ["is", 1], ["currently", 1], ["displayed", 1], ["on", 1], ["the", 1], ["clock", 1], ["first", 1], ["two", 0], ["characters", 0], ["stand", 0], ["for", 0], ["the", 0], ["hours", 0], ["while", 0], ["next", 0], ["two", 0], ["show", 0], ["the", 0], ["minutes", 0], ["output", 0], ["the", 1], ["only", 1], ["line", 1], ["of", 1], ["the", 1], ["output", 1], ["should", 1], ["contain", 1], ["the", 1], ["time", 1], ["in", 1], ["format", 1], ["hh", 1], ["mm", 1], ["that", 1], ["is", 1], ["a", 1], ["correct", 1], ["time", 1], ["in", 1], ["the", 1], ["given", 1], ["format", 1], ["it", 1], ["should", 1], ["differ", 1], ["from", 1], ["the", 1], ["original", 1], ["in", 1], ["as", 1], ["few", 1], ["positions", 1], ["as", 1], ["possible", 1], ["if", 0], ["there", 0], ["are", 0], ["many", 0], ["optimal", 0], ["solutions", 0], ["you", 0], ["can", 0], ["print", 0], ["any", 0], ["of", 0], ["them", 0], ["examples", 0], ["input", 0], ["24", 0], ["17", 0], ["30", 0], ["output", 0], ["17", 0], ["30", 0], ["input", 0], ["12", 0], ["17", 0], ["30", 0], ["output", 0], ["07", 0], ["30", 0], ["input", 0], ["24", 0], ["99", 0], ["99", 0], ["output", 0], ["09", 0], ["09", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7885304659498208, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7885304659498208, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8797250859106529, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8797250859106529, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7885304659498208, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7885304659498208, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8797250859106529, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8797250859106529, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["12", 0], ["if", 0], ["s", 0], ["0", 0], ["00", 0], ["s", 0], ["0", 0], ["01", 0], ["elif", 0], ["int", 0], ["s", 0], ["0", 0], ["12", 0], ["and", 0], ["s", 0], ["0", 0], ["1", 0], ["0", 0], ["s", 0], ["0", 0], ["10", 0], ["elif", 0], ["int", 0], ["s", 0], ["0", 0], ["12", 0], ["s", 0], ["0", 0], ["0", 0], ["s", 0], ["0", 0], ["1", 0], ["else", 0], ["if", 0], ["int", 0], ["s", 0], ["0", 0], ["23", 0], ["s", 0], ["0", 0], ["0", 0], ["s", 0], ["0", 0], ["1", 0], ["if", 0], ["int", 0], ["s", 0], ["1", 0], ["59", 0], ["s", 0], ["1", 0], ["0", 0], ["s", 0], ["1", 0], ["1", 0], ["print", 0], ["join", 0], ["s", 0], ["form", 0], ["int", 0], ["input", 0], ["hs", 0], ["ms", 0], ["input", 0], ["split", 0], ["if", 0], ["int", 0], ["ms", 0], ["59", 0], ["ms", 0], ["0", 0], ["ms", 0], ["1", 0], ["if", 0], ["form", 0], ["24", 0], ["if", 0], ["int", 0], ["hs", 0], ["23", 0], ["hs", 0], ["0", 0], ["hs", 0], ["1", 0], ["else", 0], ["if", 0], ["int", 0], ["hs", 0], ["12", 0], ["if", 0], ["hs", 0], ["1", 0], ["0", 0], ["hs", 0], ["10", 0], ["else", 0], ["hs", 0], ["0", 0], ["hs", 0], ["1", 0], ["elif", 0], ["int", 0], ["hs", 0], ["0", 0], ["hs", 0], ["01", 0], ["print", 0], ["hs", 0], ["ms", 0], ["def", 0], ["best", 0], ["h", 0], ["n", 0], ["x", 0], ["best", 0], ["bestcnt", 0], ["10", 0], ["begin", 0], ["0", 0], ["end", 0], ["n", 0], ["if", 0], ["x", 0], ["h", 0], ["if", 0], ["n", 0], ["12", 0], ["begin", 0], ["1", 0], ["end", 0], ["13", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["begin", 0], ["end", 0], ["si", 0], ["str", 0], ["i", 0], ["if", 0], ["len", 0], ["si", 0], ["1", 0], ["si", 0], ["0", 0], ["si", 0], ["bad", 0], ["0", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["zip", 0], ["h", 0], ["si", 0], ["if", 0], ["x", 0], ["y", 0], ["bad", 0], ["1", 0], ["if", 0], ["bad", 0], ["bestcnt", 0], ["bestcnt", 0], ["bad", 0], ["best", 0], ["si", 0], ["return", 0], ["best", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["h", 0], ["s", 0], ["0", 0], ["2", 0], ["m", 0], ["s", 0], ["3", 0], ["5", 0], ["print", 0], ["best", 0], ["h", 0], ["n", 0], ["h", 0], ["best", 0], ["m", 0], ["60", 0], ["m", 0], ["sep", 0], ["usr", 0], ["bin", 0], ["python", 0], ["kmwho", 0], ["def", 0], ["solvecase", 0], ["form", 0], ["int", 0], ["input", 0], ["strip", 0], ["hh", 0], ["mm", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["if", 0], ["mm", 0], ["59", 0], ["mm", 0], ["mm", 0], ["10", 0], ["if", 0], ["form", 0], ["24", 0], ["if", 0], ["hh", 0], ["23", 0], ["hh", 0], ["hh", 0], ["10", 0], ["elif", 0], ["form", 0], ["12", 0], ["if", 0], ["hh", 0], ["12", 0], ["if", 0], ["hh", 0], ["10", 0], ["hh", 0], ["hh", 0], ["10", 0], ["else", 0], ["hh", 0], ["10", 0], ["if", 0], ["hh", 0], ["0", 0], ["hh", 0], ["1", 0], ["return", 0], ["02d", 0], ["02d", 0], ["hh", 0], ["mm", 0], ["def", 0], ["main", 0], ["solve", 0], ["print", 0], ["solvecase", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["h", 0], ["m", 0], ["input", 0], ["split", 0], ["ans", 0], ["1000", 0], ["ans1", 0], ["if", 0], ["n", 0], ["12", 0], ["h1", 0], ["m1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["13", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["60", 0], ["h1", 0], ["2", 0], ["len", 0], ["str", 0], ["i", 0], ["0", 0], ["str", 0], ["i", 0], ["m1", 0], ["2", 0], ["len", 0], ["str", 0], ["j", 0], ["0", 0], ["str", 0], ["j", 0], ["cnt", 0], ["4", 0], ["if", 0], ["h1", 0], ["0", 0], ["h", 0], ["0", 0], ["cnt", 0], ["1", 0], ["if", 0], ["h1", 0], ["1", 0], ["h", 0], ["1", 0], ["cnt", 0], ["1", 0], ["if", 0], ["m1", 0], ["0", 0], ["m", 0], ["0", 0], ["cnt", 0], ["1", 0], ["if", 0], ["m1", 0], ["1", 0], ["m", 0], ["1", 0], ["cnt", 0], ["1", 0], ["if", 0], ["cnt", 0], ["ans", 0], ["ans", 0], ["cnt", 0], ["ans1", 0], ["h1", 0], ["m1", 0], ["print", 0], ["ans1", 0], ["else", 0], ["h1", 0], ["m1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["24", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["60", 0], ["h1", 0], ["2", 0], ["len", 0], ["str", 0], ["i", 0], ["0", 0], ["str", 0], ["i", 0], ["m1", 0], ["2", 0], ["len", 0], ["str", 0], ["j", 0], ["0", 0], ["str", 0], ["j", 0], ["cnt", 0], ["4", 0], ["if", 0], ["h1", 0], ["0", 0], ["h", 0], ["0", 0], ["cnt", 0], ["1", 0], ["if", 0], ["h1", 0], ["1", 0], ["h", 0], ["1", 0], ["cnt", 0], ["1", 0], ["if", 0], ["m1", 0], ["0", 0], ["m", 0], ["0", 0], ["cnt", 0], ["1", 0], ["if", 0], ["m1", 0], ["1", 0], ["m", 0], ["1", 0], ["cnt", 0], ["1", 0], ["if", 0], ["cnt", 0], ["ans", 0], ["ans", 0], ["cnt", 0], ["ans1", 0], ["h1", 0], ["m1", 0], ["print", 0], ["ans1", 0], ["c", 0], ["input", 0], ["h", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["m", 0], ["60", 0], ["m", 0], ["10", 0], ["if", 0], ["c", 0], ["12", 0], ["and", 0], ["h", 0], ["0", 0], ["h", 0], ["1", 0], ["elif", 0], ["c", 0], ["12", 0], ["and", 0], ["h", 0], ["12", 0], ["if", 0], ["h", 0], ["10", 0], ["h", 0], ["10", 0], ["else", 0], ["h", 0], ["10", 0], ["elif", 0], ["c", 0], ["24", 0], ["and", 0], ["h", 0], ["23", 0], ["h", 0], ["10", 0], ["print", 0], ["02d", 0], ["02d", 0], ["h", 0], ["m", 0], ["def", 0], ["l", 0], ["s1", 0], ["s2", 0], ["return", 0], ["len", 0], ["list", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s1", 0], ["if", 0], ["s1", 0], ["i", 0], ["s2", 0], ["i", 0], ["c", 0], ["int", 0], ["input", 0], ["if", 0], ["c", 0], ["12", 0], ["h", 0], ["list", 0], ["range", 0], ["1", 0], ["13", 0], ["else", 0], ["h", 0], ["list", 0], ["range", 0], ["0", 0], ["24", 0], ["s", 0], ["input", 0], ["min", 0], ["s", 0], ["min", 0], ["l", 0], ["100", 0], ["for", 0], ["x", 0], ["in", 0], ["h", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["60", 0], ["new", 0], ["s", 0], ["0", 0], ["02", 0], ["1", 0], ["02", 0], ["format", 0], ["x", 0], ["y", 0], ["if", 0], ["l", 0], ["s", 0], ["new", 0], ["s", 0], ["min", 0], ["l", 0], ["min", 0], ["l", 0], ["l", 0], ["s", 0], ["new", 0], ["s", 0], ["min", 0], ["s", 0], ["new", 0], ["s", 0], ["print", 0], ["min", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["tm", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cost", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["x", 0], ["y", 0], ["i", 0], ["j", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["2", 0], ["cost", 0], ["i", 0], ["j", 0], ["x", 0], ["10", 0], ["y", 0], ["10", 0], ["x", 0], ["10", 0], ["y", 0], ["10", 0], ["hr", 0], ["range", 0], ["list", 0], ["range", 0], ["1", 0], ["13", 0], ["if", 0], ["n", 0], ["24", 0], ["hr", 0], ["range", 0], ["list", 0], ["range", 0], ["0", 0], ["24", 0], ["best", 0], ["time", 0], ["none", 0], ["best", 0], ["val", 0], ["123", 0], ["for", 0], ["h", 0], ["in", 0], ["hr", 0], ["range", 0], ["for", 0], ["m", 0], ["in", 0], ["range", 0], ["60", 0], ["cur", 0], ["cost", 0], ["h", 0], ["tm", 0], ["0", 0], ["cost", 0], ["m", 0], ["tm", 0], ["1", 0], ["if", 0], ["cur", 0], ["best", 0], ["val", 0], ["best", 0], ["val", 0], ["cur", 0], ["best", 0], ["time", 0], ["02d", 0], ["02d", 0], ["format", 0], ["h", 0], ["m", 0], ["print", 0], ["best", 0], ["time", 0], ["author", 0], ["alexander", 0], ["import", 0], ["sys", 0], ["format", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["timeh", 0], ["timem", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["print", 0], ["format", 0], ["print", 0], ["timeh", 0], ["print", 0], ["timem", 0], ["if", 0], ["format", 0], ["12", 0], ["if", 0], ["timeh", 0], ["12", 0], ["or", 0], ["timeh", 0], ["0", 0], ["if", 0], ["timeh", 0], ["0", 0], ["timeh", 0], ["1", 0], ["elif", 0], ["timeh", 0], ["10", 0], ["0", 0], ["timeh", 0], ["10", 0], ["else", 0], ["timeh", 0], ["10", 0], ["if", 0], ["timem", 0], ["59", 0], ["timem", 0], ["10", 0], ["else", 0], ["if", 0], ["timeh", 0], ["23", 0], ["timeh", 0], ["10", 0], ["if", 0], ["timem", 0], ["59", 0], ["timem", 0], ["10", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["02d", 0], ["02d", 0], ["timeh", 0], ["timem", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nOnce, two trees forgot their place and started to grow into each other. One of the trees grew from the left, and the other from the right. On $n$ points, they collided.\n\nNumbering the points $1, 2, \\dots , n$ from left to right, the left tree ended up connecting all of them in a single subtree rooted in node $1$, such that every node’s children had larger numbers than the node itself. We can describe this subtree with a list of $n-1$ edges.\n\nSimilarly, the right tree also connected all nodes in a single subtree rooted in node $n$, with every node’s children having smaller numbers than the node itself. This yields an additional $n-1$ edges.\n\nNow, given the full list of $2(n-1)$ edges, it is not necessarily easy to tell which edge belongs to which tree. Can you figure out a possible assignment, or determine that it is impossible for this collection to have been the union of two trees?\n\n-----Input-----\nThe first line of input contains the integer $n$ ($2 \\le n \\le 10^5$). The next $2(n-1)$ lines each contain two integers $u, v$ ($1 \\le u < v \\le n$) indicating an edge joining the two nodes $u$ and $v$. A pair $(u, v)$ may be connected by more than one edge.\n\n-----Output-----\nIf it is possible for the edges to be the union of two trees that grow left-to-right and right-to-left, output a string of length $2(n-1)$, where the $i$’s character is L if the $i$’th edge should come from the left tree, or R if it should come from the right tree. Otherwise, output the word “impossible” on a single line. If there are multiple solutions, you may output any one of them.\n\n-----Explanation of Sample Inputs-----\nIn the first example, there are two solutions: LLRRRRLL and LLRLRRLR.\n\nIn the second example, there are no solutions. Note that LRLR is not valid, because it would involve the right tree growing backward, from left to right.\n\n-----Examples-----\nSample Input:\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\nSample Output:\nLLRRRRLL\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7494"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7494", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["once", 1], ["two", 1], ["trees", 1], ["forgot", 1], ["their", 1], ["place", 1], ["and", 1], ["started", 1], ["to", 1], ["grow", 1], ["into", 1], ["each", 1], ["other", 1], ["one", 1], ["of", 1], ["the", 1], ["trees", 1], ["grew", 1], ["from", 1], ["the", 1], ["left", 1], ["and", 1], ["the", 1], ["other", 1], ["from", 1], ["the", 1], ["right", 1], ["on", 1], ["n", 1], ["points", 1], ["they", 1], ["collided", 1], ["numbering", 1], ["the", 1], ["points", 1], ["1", 1], ["2", 1], ["dots", 1], ["n", 1], ["from", 1], ["left", 1], ["to", 1], ["right", 1], ["the", 1], ["left", 1], ["tree", 1], ["ended", 1], ["up", 1], ["connecting", 1], ["all", 1], ["of", 1], ["them", 1], ["in", 1], ["a", 1], ["single", 1], ["subtree", 1], ["rooted", 1], ["in", 1], ["node", 1], ["1", 1], ["such", 1], ["that", 1], ["every", 1], ["node’s", 1], ["children", 1], ["had", 1], ["larger", 1], ["numbers", 1], ["than", 1], ["the", 1], ["node", 1], ["itself", 1], ["we", 1], ["can", 1], ["describe", 1], ["this", 1], ["subtree", 1], ["with", 1], ["a", 1], ["list", 1], ["of", 1], ["n", 1], ["1", 1], ["edges", 1], ["similarly", 1], ["the", 1], ["right", 1], ["tree", 1], ["also", 1], ["connected", 1], ["all", 1], ["nodes", 1], ["in", 1], ["a", 1], ["single", 1], ["subtree", 1], ["rooted", 1], ["in", 1], ["node", 1], ["n", 1], ["with", 1], ["every", 1], ["node’s", 1], ["children", 1], ["having", 1], ["smaller", 1], ["numbers", 1], ["than", 1], ["the", 1], ["node", 1], ["itself", 1], ["this", 1], ["yields", 1], ["an", 1], ["additional", 1], ["n", 1], ["1", 1], ["edges", 1], ["now", 1], ["given", 1], ["the", 1], ["full", 1], ["list", 1], ["of", 1], ["2", 1], ["n", 1], ["1", 1], ["edges", 1], ["it", 1], ["is", 1], ["not", 1], ["necessarily", 1], ["easy", 1], ["to", 1], ["tell", 1], ["which", 1], ["edge", 1], ["belongs", 1], ["to", 1], ["which", 1], ["tree", 1], ["can", 1], ["you", 1], ["figure", 1], ["out", 1], ["a", 1], ["possible", 1], ["assignment", 1], ["or", 1], ["determine", 1], ["that", 1], ["it", 1], ["is", 1], ["impossible", 0], ["for", 0], ["this", 0], ["collection", 0], ["to", 0], ["have", 0], ["been", 0], ["the", 0], ["union", 0], ["of", 0], ["two", 0], ["trees", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["the", 1], ["integer", 1], ["n", 1], ["2", 1], ["le", 1], ["n", 1], ["le", 1], ["10", 1], ["5", 1], ["the", 1], ["next", 1], ["2", 1], ["n", 1], ["1", 1], ["lines", 1], ["each", 1], ["contain", 1], ["two", 1], ["integers", 1], ["u", 1], ["v", 1], ["1", 1], ["le", 1], ["u", 1], ["v", 1], ["le", 1], ["n", 1], ["indicating", 1], ["an", 1], ["edge", 1], ["joining", 1], ["the", 1], ["two", 1], ["nodes", 1], ["u", 1], ["and", 1], ["v", 1], ["a", 0], ["pair", 0], ["u", 0], ["v", 0], ["may", 0], ["be", 0], ["connected", 0], ["by", 0], ["more", 0], ["than", 0], ["one", 0], ["edge", 0], ["output", 0], ["if", 1], ["it", 1], ["is", 1], ["possible", 1], ["for", 1], ["the", 1], ["edges", 1], ["to", 1], ["be", 1], ["the", 1], ["union", 1], ["of", 1], ["two", 1], ["trees", 1], ["that", 1], ["grow", 1], ["left", 1], ["to", 1], ["right", 1], ["and", 1], ["right", 1], ["to", 1], ["left", 1], ["output", 1], ["a", 1], ["string", 1], ["of", 1], ["length", 1], ["2", 1], ["n", 1], ["1", 1], ["where", 1], ["the", 1], ["i", 1], ["’s", 1], ["character", 1], ["is", 1], ["l", 1], ["if", 1], ["the", 1], ["i", 1], ["’th", 1], ["edge", 1], ["should", 1], ["come", 1], ["from", 1], ["the", 1], ["left", 1], ["tree", 1], ["or", 1], ["r", 1], ["if", 1], ["it", 1], ["should", 1], ["come", 1], ["from", 1], ["the", 1], ["right", 1], ["tree", 1], ["otherwise", 1], ["output", 1], ["the", 1], ["word", 1], ["“impossible”", 1], ["on", 1], ["a", 1], ["single", 1], ["line", 1], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["solutions", 0], ["you", 0], ["may", 0], ["output", 0], ["any", 0], ["one", 0], ["of", 0], ["them", 0], ["explanation", 0], ["of", 0], ["sample", 0], ["inputs", 0], ["in", 1], ["the", 1], ["first", 1], ["example", 1], ["there", 1], ["are", 1], ["two", 1], ["solutions", 1], ["llrrrrll", 1], ["and", 1], ["llrlrrlr", 1], ["in", 1], ["the", 1], ["second", 1], ["example", 1], ["there", 1], ["are", 1], ["no", 1], ["solutions", 1], ["note", 1], ["that", 1], ["lrlr", 1], ["is", 1], ["not", 1], ["valid", 1], ["because", 1], ["it", 0], ["would", 0], ["involve", 0], ["the", 0], ["right", 0], ["tree", 0], ["growing", 0], ["backward", 0], ["from", 0], ["left", 0], ["to", 0], ["right", 0], ["examples", 0], ["sample", 0], ["input", 0], ["5", 0], ["1", 0], ["2", 0], ["2", 0], ["5", 0], ["2", 0], ["3", 0], ["1", 0], ["3", 0], ["3", 0], ["5", 0], ["4", 0], ["5", 0], ["3", 0], ["4", 0], ["1", 0], ["3", 0], ["sample", 0], ["output", 0], ["llrrrrll", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7923497267759563, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7923497267759563, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8941798941798942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8941798941798942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7923497267759563, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7923497267759563, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8941798941798942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8941798941798942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThere is a game called \"I Wanna Be the Guy\", consisting of n levels. Little X and his friend Little Y are addicted to the game. Each of them wants to pass the whole game.\n\nLittle X can pass only p levels of the game. And Little Y can pass only q levels of the game. You are given the indices of levels Little X can pass and the indices of levels Little Y can pass. Will Little X and Little Y pass the whole game, if they cooperate each other?\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 ≤  n ≤ 100). \n\nThe next line contains an integer p (0 ≤ p ≤ n) at first, then follows p distinct integers a_1, a_2, ..., a_{p} (1 ≤ a_{i} ≤ n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.\n\n\n-----Output-----\n\nIf they can pass all the levels, print \"I become the guy.\". If it's impossible, print \"Oh, my keyboard!\" (without the quotes).\n\n\n-----Examples-----\nInput\n4\n3 1 2 3\n2 2 4\n\nOutput\nI become the guy.\n\nInput\n4\n3 1 2 3\n2 2 3\n\nOutput\nOh, my keyboard!\n\n\n\n-----Note-----\n\nIn the first sample, Little X can pass levels [1 2 3], and Little Y can pass level [2 4], so they can pass all the levels both.\n\nIn the second sample, no one can pass level 4.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import fractions\ncount = 0\na = int(input())\n#n\n\nlistx = list(map(int, input().split(' ')))\nlisty = list(map(int, input().split(' ')))\nlistx.remove(listx[0])\nlisty.remove(listy[0])\nlistx = set(listx)\nlisty = set(listy)\nlistz = listx.union(listy)\nlistz=list(listz)\nlistw = [i+1 for i in range(a)]\nif listz == listw:\n\tprint(\"I become the guy.\")\n\nelse:\n\tprint(\"Oh, my keyboard!\")\n", "n = int(input())\nb = [0 for i in range(n)]\nnums = list(map(int, input().split()))\nnums2 = list(map(int, input().split()))\nfor i in range(1, len(nums)):\n\tb[nums[i] - 1] = 1\nfor i in range(1, len(nums2)):\n\tb[nums2[i] - 1] = 1\nif sum(b) == n:\n\tprint(\"I become the guy.\")\nelse:\n\tprint(\"Oh, my keyboard!\")\n", "n = int(input())\na1 = [int(x) for x in input().split()]\na2 = [int(x) for x in input().split()]\n\nif set(a1[1:]) | set(a2[1:])  == set(range(1,n+1)):\n\tprint('I become the guy.')\nelse:\n\tprint('Oh, my keyboard!')\n", "__author__ = 'sonerik'\n\nimport sys\n\ninp = sys.stdin\n# inp = open(\"a.txt\")\n\nn = int(inp.readline().strip())\n\nx = list(map(int, inp.readline().strip().split()))[1:]\ny = list(map(int, inp.readline().strip().split()))[1:]\n\nx_set = set(x)\ny_set = set(y)\nall_set = set(range(1, n+1))\n\nnew_set = x_set.union(y_set)\n\nif new_set == all_set:\n\tprint(\"I become the guy.\")\nelse:\n\tprint(\"Oh, my keyboard!\")\n", "n=int(input())\np=list(int(x) for x in input().split())[1:]\nq=list(int(x) for x in input().split())[1:]\nk=0\n#print (p,q)\nfor i in range(1,n+1):\n\tif (i in p) or (i in q):\n\t\tk+=1\nif k==n:\n\tprint(\"I become the guy.\")\nelse:\n\tprint(\"Oh, my keyboard!\")\n", "n = int(input())\np = set(tuple(map(int, input().split()))[1:])\nq = set(tuple(map(int, input().split()))[1:])\na = p | q\nif len(a) == n:\n\tprint('I become the guy.')\nelse:\n\tprint('Oh, my keyboard!')\n", "def main():\n\tn = int(input())\n\tp, *pi = list(map(int, input().split()))\n\tq, *qi = list(map(int, input().split()))\n\n\ts = set(pi)\n\ts.update(qi)\n\tif len(s) != n:\n\t\tprint('Oh, my keyboard!')\n\telse:\n\t\tprint('I become the guy.')\n\n\n\ndef __starting_point():\n\tmain()\n\n\n__starting_point()\n", "n = int(input())\na = list(map(int,input().split()))\np = a[0]\nps = a[1:]\na = list(map(int,input().split()))\nq = a[0]\nqs = a[1:]\ns = set(ps) | set(qs)\n\nif len(s) == n:\n\tprint('I become the guy.')\nelse:\n\tprint('Oh, my keyboard!')\n", "n = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nd = set()\nfor i in range(1, x[0] + 1):\n\td.add(x[i])\nfor i in range(1, y[0] + 1):\n\td.add(y[i])\nres = True\nfor i in range(1, n + 1):\n\tif not i in d:\n\t\tres = False\nif res:\n\tprint('I become the guy.')\nelse:\n\tprint('Oh, my keyboard!')\n", "arr = [False] * (int(input()))\nfor j in range(2):\n\tfor i in list(map(int, input().split()))[1:]:\n\t\tarr[i - 1] = True\nif False in arr:\n\tprint('Oh, my keyboard!')\nelse:\n\tprint('I become the guy.')\n", "n = int(input())\np = [int(i) for i in input(). split()]\nq = [int(i) for i in input(). split()]\nk = len(p) + len(q) - 2\nfor i in range(1, len(p)):\n\tfor j in range(1, len(q)):\n\t\tif p[i] == q[j]:\n\t\t\tk -= 1\nif k == n:\n\tprint('I become the guy.')\nelse:\n\tprint('Oh, my keyboard!')\n", "n = int(input())\nlittleX = list(map(int, input().split()))\nlittleY = list(map(int, input().split()))\n\ngame = littleX[1:] + littleY[1:]\ngame = set(game)\n\nif len(game) >= n:\n\tprint('I become the guy.')\nelse:\n\tprint('Oh, my keyboard!')\n", "nstr=input()\nn=int(nstr)\npstr=input()\naa=pstr.split(' ')\na=aa[1:]\nqstr=input()\nbb=qstr.split(' ')\nb=bb[1:]\nfor i in a:\n\ti=int(i)\nfor i in b:\n\ti=int(i)\nf=0\nfor i in range(1,n+1):\n\tif((str(i) in a) or (str(i) in b)):\n\t\tcontinue\n\telse:\n\t\tf=1\n\t\tprint(\"Oh, my keyboard!\")\n\t\tbreak\nif(f==0):\n\t\n\tprint(\"I become the guy.\")\n", "n = int(input())\nArr = list(range(1,n+1))\nX = list(map(int,input().split()))\nY = list(map(int,input().split()))\n\nX = X[1:]\nY = Y[1:]\nfor x in X:\n\tArr.remove(x)\nfor y in Y:\n\tif(y in Arr):\n\t\tArr.remove(y) \nif not Arr:\n\tprint('I become the guy.')\nelse:\n\tprint('Oh, my keyboard!')\n", "#!/usr/bin/env python\n\nn = int(input())\np_l = list(map(int, input().split()))\nq_l = list(map(int, input().split()))\np = p_l[0]\nq = q_l[0]\np_l = p_l[1:]\nq_l = q_l[1:]\nll = set(p_l + q_l)\nsucess = False\n\nn_sum = (n * (n+1)) // 2\nif n_sum == sum(ll):\n\tprint(\"I become the guy.\")\nelse:\n\tprint(\"Oh, my keyboard!\")\n", "a=int(input())\nsete=set()\nreg=input().split()\nk=int(reg[0])\nfor t in range(0,k):\n\tsete.add(int(reg[t+1]))\nre=input().split()\nl=int(re[0])\nfor s in range(0,l):\n\tsete.add(int(re[s+1]))\nif len(sete)==a:\n\tprint(\"I become the guy.\")\nelse:\n\tprint(\"Oh, my keyboard!\")\n\n", "n = int(input())\n\nA = set(list(map(int, input().split()))[1:])\nB = set(list(map(int, input().split()))[1:])\n\nif list(A | B) == list(range(1, n + 1)):\n\tprint('I become the guy.')\nelse:\n\tprint('Oh, my keyboard!')\n", "n = int(input())\ns = set()\nfor i in range(2):\n\tp = [int(i) for i in input().split()]\n\tp.pop(0)\n\ts.update(set(p))\nprint('I become the guy.' if s == set(range(1, n + 1)) else 'Oh, my keyboard!')\n", "n = int(input())\na = [0] * (n + 1)\nf = 1\nx = list(map(int, input().split()))\nfor i in range(1, len(x)):\n\ta[x[i]] = 1\ny = list(map(int, input().split()))\nfor i in range(1, len(y)):\n\ta[y[i]] = 1\nfor i in range(1, n + 1):\n\tif not a[i]:\n\t\tf = 0\nprint('I become the guy.' if f else 'Oh, my keyboard!')\n", "n = int(input())\nx = set(map(int, input().split()[1:]))\ny = set(map(int, input().split()[1:]))\nfor i in range(1, n + 1):\n\tif i not in x and i not in y:\n\t\tprint('Oh, my keyboard!')\n\t\tbreak\nelse:\n\tprint('I become the guy.')\n", "import math\nimport time\n\nn = int(input())\na1 = list(map(int, input().split(' ')))\na2 = list(map(int, input().split(' ')))\n\na1.remove(a1[0])\na2.remove(a2[0])\n\nfor i in range(n):\n\tindex = i+1\n\tfound = a1.count(index)+a2.count(index)\n\tif found == 0:\n\t\tprint(\"Oh, my keyboard!\")\n\t\treturn\n\nprint(\"I become the guy.\")\n", "n = int(input())\nnum = [int(x) for x in input().split(\" \")]\nnum1 = [int(x) for x in input().split(\" \")]\nnum.pop(0)\nnum1.pop(0)\nlist1 = num1+num\nlist2 = []\ns = 0\nfor i in range(1,n+1):\n\tif i in list1:\n\t\ts = s+1\nif s>=n:\n\tprint('I become the guy.')\nelse:\n\tprint('Oh, my keyboard!')\n", "n = int(input())\nnum = [int(x) for x in input().split(\" \")]\nnum1 = [int(x) for x in input().split(\" \")]\nnum.pop(0)\nnum1.pop(0)\nlist1 = num1+num\nlist2 = []\ns = 0\nfor i in range(1,n+1):\n\tif i in list1:\n\t\ts = s+1\nif s>=n:\n\tprint('I become the guy.')\nelse:\n\tprint('Oh, my keyboard!')\n", "n = int(input())\ns = input().strip().split()\nw = input().strip().split()\np = int(s[0])\nq = int(w[0])\nif p+q< n:\n\tprint( \"Oh, my keyboard!\")\nelse:\n\td = {}\n\tfor i in s[1:]:\n\t\td[int(i)] = 1\n\tack = p\n\tfor i in w[1:]:\n\t\ttry:\n\t\t\td[int(i)]+=1\n\t\texcept KeyError:\n\t\t\td[int(i)]=1\n\t\t\tack+=1\n\tif ack < n:\n\t\tprint( \"Oh, my keyboard!\")\n\telse:\n\t\tprint(\"I become the guy.\")\n\t\n", "n=int(input())\nxlevels=list()\nylevels=list()\nxlevels[:]=list(map(int,input().split(' ')))\nylevels[:]=list(map(int,input().split(' ')))\nxlevels=xlevels[1:len(xlevels)]\nylevels=ylevels[1:len(ylevels)]\nlevels=list()\nlevels=set( xlevels[:] ) | set( ylevels[:] )\nif len(levels)==n: print('I become the guy.')\nelse: print('Oh, my keyboard!')\n"], "id": "id6091"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6091", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["there", 6], ["is", 6], ["a", 4], ["game", 4], ["called", 4], ["i", 4], ["wanna", 4], ["be", 4], ["the", 4], ["guy", 4], ["consisting", 4], ["of", 4], ["n", 4], ["levels", 4], ["little", 4], ["x", 4], ["and", 4], ["his", 4], ["friend", 4], ["little", 4], ["y", 4], ["are", 4], ["addicted", 4], ["to", 4], ["the", 4], ["game", 4], ["each", 4], ["of", 4], ["them", 4], ["wants", 4], ["to", 4], ["pass", 4], ["the", 4], ["whole", 4], ["game", 4], ["little", 4], ["x", 4], ["can", 4], ["pass", 4], ["only", 4], ["p", 4], ["levels", 4], ["of", 4], ["the", 4], ["game", 4], ["and", 4], ["little", 4], ["y", 4], ["can", 4], ["pass", 4], ["only", 4], ["q", 4], ["levels", 4], ["of", 4], ["the", 4], ["game", 4], ["you", 4], ["are", 4], ["given", 4], ["the", 4], ["indices", 4], ["of", 4], ["levels", 4], ["little", 4], ["x", 4], ["can", 4], ["pass", 4], ["and", 4], ["the", 4], ["indices", 4], ["of", 4], ["levels", 4], ["little", 4], ["y", 4], ["can", 4], ["pass", 4], ["will", 4], ["little", 4], ["x", 4], ["and", 0], ["little", 0], ["y", 0], ["pass", 0], ["the", 0], ["whole", 0], ["game", 0], ["if", 0], ["they", 0], ["cooperate", 0], ["each", 0], ["other", 0], ["input", 0], ["the", 24], ["first", 5], ["line", 4], ["contains", 4], ["a", 4], ["single", 4], ["integer", 4], ["n", 4], ["1", 4], ["≤", 4], ["n", 4], ["≤", 4], ["100", 4], ["the", 4], ["next", 4], ["line", 4], ["contains", 4], ["an", 4], ["integer", 4], ["p", 4], ["0", 0], ["≤", 0], ["p", 0], ["≤", 0], ["n", 0], ["at", 0], ["first", 0], ["then", 0], ["follows", 0], ["p", 0], ["distinct", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["p", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 4], ["n", 4], ["these", 4], ["integers", 4], ["denote", 4], ["the", 4], ["indices", 4], ["of", 4], ["levels", 4], ["little", 4], ["x", 4], ["can", 4], ["pass", 4], ["the", 4], ["next", 4], ["line", 4], ["contains", 4], ["the", 4], ["levels", 4], ["little", 4], ["y", 4], ["can", 4], ["pass", 4], ["in", 4], ["the", 4], ["same", 4], ["format", 0], ["it", 0], ["s", 0], ["assumed", 0], ["that", 0], ["levels", 0], ["are", 0], ["numbered", 0], ["from", 0], ["1", 0], ["to", 0], ["n", 0], ["output", 0], ["if", 4], ["they", 4], ["can", 4], ["pass", 4], ["all", 4], ["the", 4], ["levels", 4], ["print", 4], ["i", 4], ["become", 4], ["the", 4], ["guy", 0], ["if", 0], ["it", 0], ["s", 0], ["impossible", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["without", 0], ["the", 0], ["quotes", 0], ["examples", 0], ["input", 0], ["4", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["2", 0], ["2", 0], ["4", 0], ["output", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["input", 0], ["4", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["2", 0], ["2", 0], ["3", 0], ["output", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["note", 0], ["in", 4], ["the", 4], ["first", 4], ["sample", 4], ["little", 4], ["x", 4], ["can", 4], ["pass", 4], ["levels", 4], ["1", 4], ["2", 4], ["3", 4], ["and", 4], ["little", 4], ["y", 4], ["can", 4], ["pass", 4], ["level", 4], ["2", 4], ["4", 4], ["so", 4], ["they", 4], ["can", 4], ["pass", 4], ["all", 4], ["the", 4], ["levels", 0], ["both", 0], ["in", 0], ["the", 0], ["second", 0], ["sample", 0], ["no", 0], ["one", 0], ["can", 0], ["pass", 0], ["level", 0], ["4", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6183206106870229, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1529580152671756, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8102189781021898, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2010036496350365, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6145038167938931, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.15279898218829516, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8065693430656934, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.20085158150851581, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["fractions", 0], ["count", 0], ["0", 0], ["a", 0], ["int", 0], ["input", 0], ["n", 0], ["listx", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["listy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["listx", 0], ["remove", 0], ["listx", 0], ["0", 0], ["listy", 0], ["remove", 0], ["listy", 0], ["0", 0], ["listx", 0], ["set", 0], ["listx", 0], ["listy", 0], ["set", 0], ["listy", 0], ["listz", 0], ["listx", 0], ["union", 0], ["listy", 0], ["listz", 0], ["list", 0], ["listz", 0], ["listw", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["if", 0], ["listz", 0], ["listw", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["nums", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["nums2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["nums", 0], ["b", 0], ["nums", 0], ["i", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["nums2", 0], ["b", 0], ["nums2", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["sum", 0], ["b", 0], ["n", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["a1", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a2", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["set", 0], ["a1", 0], ["1", 0], ["set", 0], ["a2", 0], ["1", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["author", 0], ["sonerik", 0], ["import", 0], ["sys", 0], ["inp", 0], ["sys", 0], ["stdin", 0], ["inp", 0], ["open", 0], ["a", 0], ["txt", 0], ["n", 0], ["int", 0], ["inp", 0], ["readline", 0], ["strip", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["inp", 0], ["readline", 0], ["strip", 0], ["split", 0], ["1", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["inp", 0], ["readline", 0], ["strip", 0], ["split", 0], ["1", 0], ["x", 0], ["set", 0], ["set", 0], ["x", 0], ["y", 0], ["set", 0], ["set", 0], ["y", 0], ["all", 0], ["set", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["new", 0], ["set", 0], ["x", 0], ["set", 0], ["union", 0], ["y", 0], ["set", 0], ["if", 0], ["new", 0], ["set", 0], ["all", 0], ["set", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["list", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["1", 0], ["q", 0], ["list", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["1", 0], ["k", 0], ["0", 0], ["print", 0], ["p", 0], ["q", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["in", 0], ["p", 0], ["or", 0], ["i", 0], ["in", 0], ["q", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["n", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["set", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["1", 0], ["q", 0], ["set", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["1", 0], ["a", 0], ["p", 0], ["q", 0], ["if", 0], ["len", 0], ["a", 0], ["n", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["pi", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["q", 0], ["qi", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["set", 0], ["pi", 0], ["s", 0], ["update", 0], ["qi", 0], ["if", 0], ["len", 0], ["s", 0], ["n", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["else", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["a", 0], ["0", 0], ["ps", 0], ["a", 0], ["1", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["q", 0], ["a", 0], ["0", 0], ["qs", 0], ["a", 0], ["1", 0], ["s", 0], ["set", 0], ["ps", 0], ["set", 0], ["qs", 0], ["if", 0], ["len", 0], ["s", 0], ["n", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["x", 0], ["0", 0], ["1", 0], ["d", 0], ["add", 0], ["x", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["y", 0], ["0", 0], ["1", 0], ["d", 0], ["add", 0], ["y", 0], ["i", 0], ["res", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["i", 0], ["in", 0], ["d", 0], ["res", 0], ["false", 0], ["if", 0], ["res", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["arr", 0], ["false", 0], ["int", 0], ["input", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["1", 0], ["arr", 0], ["i", 0], ["1", 0], ["true", 0], ["if", 0], ["false", 0], ["in", 0], ["arr", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["else", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["q", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["k", 0], ["len", 0], ["p", 0], ["len", 0], ["q", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["p", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["q", 0], ["if", 0], ["p", 0], ["i", 0], ["q", 0], ["j", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["n", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["littlex", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["littley", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["game", 0], ["littlex", 0], ["1", 0], ["littley", 0], ["1", 0], ["game", 0], ["set", 0], ["game", 0], ["if", 0], ["len", 0], ["game", 0], ["n", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["nstr", 0], ["input", 0], ["n", 0], ["int", 0], ["nstr", 0], ["pstr", 0], ["input", 0], ["aa", 0], ["pstr", 0], ["split", 0], ["a", 0], ["aa", 0], ["1", 0], ["qstr", 0], ["input", 0], ["bb", 0], ["qstr", 0], ["split", 0], ["b", 0], ["bb", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["i", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["i", 0], ["int", 0], ["i", 0], ["f", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["str", 0], ["i", 0], ["in", 0], ["a", 0], ["or", 0], ["str", 0], ["i", 0], ["in", 0], ["b", 0], ["continue", 0], ["else", 0], ["f", 0], ["1", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["break", 0], ["if", 0], ["f", 0], ["0", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["x", 0], ["1", 0], ["y", 0], ["y", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["x", 0], ["arr", 0], ["remove", 0], ["x", 0], ["for", 0], ["y", 0], ["in", 0], ["y", 0], ["if", 0], ["y", 0], ["in", 0], ["arr", 0], ["arr", 0], ["remove", 0], ["y", 0], ["if", 0], ["not", 0], ["arr", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["q", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["p", 0], ["l", 0], ["0", 0], ["q", 0], ["q", 0], ["l", 0], ["0", 0], ["p", 0], ["l", 0], ["p", 0], ["l", 0], ["1", 0], ["q", 0], ["l", 0], ["q", 0], ["l", 0], ["1", 0], ["ll", 0], ["set", 0], ["p", 0], ["l", 0], ["q", 0], ["l", 0], ["sucess", 0], ["false", 0], ["n", 0], ["sum", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["n", 0], ["sum", 0], ["sum", 0], ["ll", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["a", 0], ["int", 0], ["input", 0], ["sete", 0], ["set", 0], ["reg", 0], ["input", 0], ["split", 0], ["k", 0], ["int", 0], ["reg", 0], ["0", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["0", 0], ["k", 0], ["sete", 0], ["add", 0], ["int", 0], ["reg", 0], ["t", 0], ["1", 0], ["re", 0], ["input", 0], ["split", 0], ["l", 0], ["int", 0], ["re", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["range", 0], ["0", 0], ["l", 0], ["sete", 0], ["add", 0], ["int", 0], ["re", 0], ["s", 0], ["1", 0], ["if", 0], ["len", 0], ["sete", 0], ["a", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["set", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["1", 0], ["b", 0], ["set", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["1", 0], ["if", 0], ["list", 0], ["a", 0], ["b", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["p", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["p", 0], ["pop", 0], ["0", 0], ["s", 0], ["update", 0], ["set", 0], ["p", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["if", 0], ["s", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["else", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["0", 0], ["n", 0], ["1", 0], ["f", 0], ["1", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["x", 0], ["a", 0], ["x", 0], ["i", 0], ["1", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["y", 0], ["a", 0], ["y", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["a", 0], ["i", 0], ["f", 0], ["0", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["if", 0], ["f", 0], ["else", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["1", 0], ["y", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["x", 0], ["and", 0], ["i", 0], ["not", 0], ["in", 0], ["y", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["break", 0], ["else", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["import", 0], ["math", 0], ["import", 0], ["time", 0], ["n", 0], ["int", 0], ["input", 0], ["a1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a1", 0], ["remove", 0], ["a1", 0], ["0", 0], ["a2", 0], ["remove", 0], ["a2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["index", 0], ["i", 0], ["1", 0], ["found", 0], ["a1", 0], ["count", 0], ["index", 0], ["a2", 0], ["count", 0], ["index", 0], ["if", 0], ["found", 0], ["0", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["return", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["n", 0], ["int", 0], ["input", 0], ["num", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["num1", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["num", 0], ["pop", 0], ["0", 0], ["num1", 0], ["pop", 0], ["0", 0], ["list1", 0], ["num1", 0], ["num", 0], ["list2", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["in", 0], ["list1", 0], ["s", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["n", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["num", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["num1", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["num", 0], ["pop", 0], ["0", 0], ["num1", 0], ["pop", 0], ["0", 0], ["list1", 0], ["num1", 0], ["num", 0], ["list2", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["in", 0], ["list1", 0], ["s", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["n", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["strip", 0], ["split", 0], ["w", 0], ["input", 0], ["strip", 0], ["split", 0], ["p", 0], ["int", 0], ["s", 0], ["0", 0], ["q", 0], ["int", 0], ["w", 0], ["0", 0], ["if", 0], ["p", 0], ["q", 0], ["n", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["else", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["1", 0], ["d", 0], ["int", 0], ["i", 0], ["1", 0], ["ack", 0], ["p", 0], ["for", 0], ["i", 0], ["in", 0], ["w", 0], ["1", 0], ["try", 0], ["d", 0], ["int", 0], ["i", 0], ["1", 0], ["except", 0], ["keyerror", 0], ["d", 0], ["int", 0], ["i", 0], ["1", 0], ["ack", 0], ["1", 0], ["if", 0], ["ack", 0], ["n", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["else", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["n", 0], ["int", 0], ["input", 0], ["xlevels", 0], ["list", 0], ["ylevels", 0], ["list", 0], ["xlevels", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ylevels", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xlevels", 0], ["xlevels", 0], ["1", 0], ["len", 0], ["xlevels", 0], ["ylevels", 0], ["ylevels", 0], ["1", 0], ["len", 0], ["ylevels", 0], ["levels", 0], ["list", 0], ["levels", 0], ["set", 0], ["xlevels", 0], ["set", 0], ["ylevels", 0], ["if", 0], ["len", 0], ["levels", 0], ["n", 0], ["print", 0], ["i", 0], ["become", 0], ["the", 0], ["guy", 0], ["else", 0], ["print", 0], ["oh", 0], ["my", 0], ["keyboard", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThe Autonomous Car Manufacturer (ACM) needs to design algorithms to control their cars. One particular problem is lane switching—if the car needs to switch lanes, it wants to do so in the safest manner.\n\nInitially the car is in the leftmost lane, and the car needs to switch to the rightmost lane. The car has a variety of sensors and can obtain the locations of all cars in a section of the highway. When the car needs to switch lanes, it takes a snapshot of the sensor readings and design a plan to switch lanes based on the snapshot. The sensors have limited range. All sensor readings will be distances from the start of the sensor range. For safety reason, the areas outside of the sensor range are assumed to be occupied by cars.\n\nYou may assume that all other cars are travelling at exactly the speed limit. However, the ACM would like to set itself apart by producing cars that may drive at any speed regardless of the speed limit, as long as it does not hit any other car. For safety reasons, a lane switch is always done while driving at the speed limit.\n\nWhen a lane switch occurs, the destination must have unoccupied space for the car to move into (a perfect fit is allowed). We define the safety factor of the plan as the closest distance to any car while executing the plan. We are only concerned about cars in the same lane, and will ignore distances between cars in different lanes. Obviously, the ACM wants its cars to choose a plan that has the highest safety factor.\n\nThe first sample input is illustrated below.\n\n-----Input-----\nThe first line of input contains three integers $N$ ($2 \\leq N \\leq 100$), $M$ ($M \\geq 1$), $R$ ($1 \\leq R \\leq 1000000$) indicating the number of lanes, the number of cars on the road, and the sensor range. The next $M$ lines describe each car with three integers: the lane number (between 0 and $N-1$, inclusive), the length of the car (positive), and the distance from the start of the sensor range to the back of the car. The distance is non-negative and at most $R$. The first car given is the ACM car. Lane 0 is the leftmost lane, and lane $N-1$ is the rightmost lane.\n\nThere are at most 100 cars in each lane. No two cars will overlap although they may touch bumper-to-bumper.\n\n-----Output-----\nIf the ACM car can switch from lane 0 to lane $N-1$, print a single number indicating the maximum achievable safety factor. Otherwise, print Impossible. Your answer will be considered correct if its absolute error does not exceed $10^{-5}$.\n\n-----Examples-----\nSample Input:\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\nSample Output:\n2.500000\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5472"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5472", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 2], ["autonomous", 2], ["car", 2], ["manufacturer", 2], ["acm", 2], ["needs", 2], ["to", 2], ["design", 2], ["algorithms", 2], ["to", 2], ["control", 2], ["their", 2], ["cars", 2], ["one", 2], ["particular", 2], ["problem", 2], ["is", 2], ["lane", 2], ["switching—if", 2], ["the", 2], ["car", 2], ["needs", 2], ["to", 2], ["switch", 2], ["lanes", 2], ["it", 2], ["wants", 2], ["to", 2], ["do", 2], ["so", 2], ["in", 2], ["the", 2], ["safest", 2], ["manner", 2], ["initially", 2], ["the", 2], ["car", 2], ["is", 2], ["in", 2], ["the", 2], ["leftmost", 2], ["lane", 2], ["and", 2], ["the", 2], ["car", 2], ["needs", 2], ["to", 2], ["switch", 2], ["to", 2], ["the", 2], ["rightmost", 2], ["lane", 2], ["the", 2], ["car", 2], ["has", 2], ["a", 2], ["variety", 2], ["of", 2], ["sensors", 2], ["and", 2], ["can", 2], ["obtain", 2], ["the", 2], ["locations", 2], ["of", 2], ["all", 2], ["cars", 2], ["in", 2], ["a", 2], ["section", 2], ["of", 2], ["the", 2], ["highway", 2], ["when", 2], ["the", 2], ["car", 2], ["needs", 2], ["to", 2], ["switch", 2], ["lanes", 2], ["it", 2], ["takes", 2], ["a", 2], ["snapshot", 2], ["of", 2], ["the", 2], ["sensor", 2], ["readings", 2], ["and", 2], ["design", 2], ["a", 2], ["plan", 2], ["to", 2], ["switch", 2], ["lanes", 2], ["based", 2], ["on", 2], ["the", 2], ["snapshot", 2], ["the", 2], ["sensors", 2], ["have", 2], ["limited", 2], ["range", 2], ["all", 2], ["sensor", 2], ["readings", 2], ["will", 2], ["be", 2], ["distances", 2], ["from", 2], ["the", 2], ["start", 2], ["of", 2], ["the", 2], ["sensor", 2], ["range", 2], ["for", 2], ["safety", 2], ["reason", 2], ["the", 2], ["areas", 2], ["outside", 2], ["of", 2], ["the", 2], ["sensor", 2], ["range", 2], ["are", 2], ["assumed", 2], ["to", 2], ["be", 2], ["occupied", 2], ["by", 2], ["cars", 2], ["you", 2], ["may", 2], ["assume", 2], ["that", 2], ["all", 2], ["other", 2], ["cars", 2], ["are", 2], ["travelling", 2], ["at", 2], ["exactly", 2], ["the", 2], ["speed", 2], ["limit", 2], ["however", 2], ["the", 2], ["acm", 2], ["would", 2], ["like", 2], ["to", 2], ["set", 2], ["itself", 2], ["apart", 2], ["by", 2], ["producing", 2], ["cars", 2], ["that", 2], ["may", 2], ["drive", 2], ["at", 2], ["any", 2], ["speed", 2], ["regardless", 2], ["of", 2], ["the", 2], ["speed", 2], ["limit", 2], ["as", 2], ["long", 2], ["as", 2], ["it", 2], ["does", 2], ["not", 2], ["hit", 2], ["any", 2], ["other", 2], ["car", 2], ["for", 2], ["safety", 2], ["reasons", 2], ["a", 2], ["lane", 2], ["switch", 2], ["is", 2], ["always", 2], ["done", 2], ["while", 2], ["driving", 2], ["at", 2], ["the", 2], ["speed", 2], ["limit", 2], ["when", 2], ["a", 2], ["lane", 2], ["switch", 2], ["occurs", 2], ["the", 2], ["destination", 2], ["must", 2], ["have", 2], ["unoccupied", 2], ["space", 2], ["for", 2], ["the", 2], ["car", 2], ["to", 2], ["move", 2], ["into", 2], ["a", 2], ["perfect", 2], ["fit", 2], ["is", 2], ["allowed", 2], ["we", 2], ["define", 2], ["the", 2], ["safety", 2], ["factor", 2], ["of", 2], ["the", 2], ["plan", 2], ["as", 2], ["the", 2], ["closest", 2], ["distance", 2], ["to", 2], ["any", 2], ["car", 2], ["while", 2], ["executing", 2], ["the", 2], ["plan", 2], ["we", 2], ["are", 2], ["only", 2], ["concerned", 2], ["about", 2], ["cars", 2], ["in", 2], ["the", 2], ["same", 2], ["lane", 2], ["and", 2], ["will", 2], ["ignore", 2], ["distances", 2], ["between", 2], ["cars", 2], ["in", 2], ["different", 2], ["lanes", 2], ["obviously", 2], ["the", 2], ["acm", 2], ["wants", 2], ["its", 2], ["cars", 2], ["to", 2], ["choose", 2], ["a", 2], ["plan", 2], ["that", 2], ["has", 0], ["the", 0], ["highest", 0], ["safety", 0], ["factor", 0], ["the", 0], ["first", 0], ["sample", 0], ["input", 0], ["is", 0], ["illustrated", 0], ["below", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 2], ["of", 2], ["input", 2], ["contains", 2], ["three", 2], ["integers", 2], ["n", 2], ["2", 2], ["leq", 2], ["n", 0], ["leq", 0], ["100", 0], ["m", 0], ["m", 0], ["geq", 0], ["1", 0], ["r", 0], ["1", 0], ["leq", 0], ["r", 0], ["leq", 0], ["1000000", 0], ["indicating", 2], ["the", 2], ["number", 2], ["of", 2], ["lanes", 2], ["the", 2], ["number", 2], ["of", 2], ["cars", 2], ["on", 2], ["the", 2], ["road", 2], ["and", 2], ["the", 2], ["sensor", 2], ["range", 2], ["the", 2], ["next", 2], ["m", 2], ["lines", 2], ["describe", 2], ["each", 2], ["car", 2], ["with", 2], ["three", 2], ["integers", 2], ["the", 2], ["lane", 2], ["number", 2], ["between", 2], ["0", 2], ["and", 2], ["n", 2], ["1", 2], ["inclusive", 2], ["the", 2], ["length", 2], ["of", 2], ["the", 2], ["car", 2], ["positive", 2], ["and", 2], ["the", 2], ["distance", 2], ["from", 2], ["the", 2], ["start", 2], ["of", 2], ["the", 2], ["sensor", 2], ["range", 2], ["to", 2], ["the", 2], ["back", 2], ["of", 2], ["the", 2], ["car", 2], ["the", 2], ["distance", 2], ["is", 2], ["non", 2], ["negative", 2], ["and", 2], ["at", 2], ["most", 2], ["r", 2], ["the", 2], ["first", 2], ["car", 2], ["given", 2], ["is", 2], ["the", 2], ["acm", 2], ["car", 2], ["lane", 2], ["0", 2], ["is", 2], ["the", 2], ["leftmost", 2], ["lane", 2], ["and", 2], ["lane", 2], ["n", 2], ["1", 2], ["is", 2], ["the", 2], ["rightmost", 2], ["lane", 2], ["there", 2], ["are", 2], ["at", 2], ["most", 2], ["100", 2], ["cars", 2], ["in", 2], ["each", 2], ["lane", 2], ["no", 0], ["two", 0], ["cars", 0], ["will", 0], ["overlap", 0], ["although", 0], ["they", 0], ["may", 0], ["touch", 0], ["bumper", 0], ["to", 0], ["bumper", 0], ["output", 0], ["if", 2], ["the", 2], ["acm", 2], ["car", 2], ["can", 2], ["switch", 2], ["from", 2], ["lane", 2], ["0", 2], ["to", 2], ["lane", 2], ["n", 2], ["1", 2], ["print", 2], ["a", 2], ["single", 2], ["number", 2], ["indicating", 2], ["the", 2], ["maximum", 2], ["achievable", 2], ["safety", 2], ["factor", 2], ["otherwise", 2], ["print", 2], ["impossible", 2], ["your", 3], ["answer", 3], ["will", 2], ["be", 0], ["considered", 0], ["correct", 0], ["if", 0], ["its", 0], ["absolute", 0], ["error", 0], ["does", 0], ["not", 0], ["exceed", 0], ["10", 0], ["5", 0], ["examples", 0], ["sample", 0], ["input", 0], ["4", 0], ["5", 0], ["100", 0], ["0", 0], ["10", 0], ["10", 0], ["1", 0], ["10", 0], ["5", 0], ["1", 0], ["20", 0], ["35", 0], ["2", 0], ["2", 0], ["18", 0], ["2", 0], ["40", 0], ["50", 0], ["sample", 0], ["output", 0], ["2", 0], ["500000", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8434237995824635, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.42101600556715385, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9205702647657841, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.46028513238289204, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8434237995824635, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.42101600556715385, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9205702647657841, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.46028513238289204, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nLuka is fooling around in chemistry class again! Instead of balancing equations he is writing coded sentences on a piece of paper. Luka modifies every word in a sentence by adding, after each vowel (letters ’a’, ’e’, ’i’, ’o’ and ’u’), the letter ’p’ and then that same vowel again. For example, the word “kemija” becomes “kepemipijapa” and the word “paprika” becomes “papapripikapa”. The teacher took Luka’s paper with the coded sentences and wants to decode them.\n\nWrite a program that decodes Luka’s sentence.\n\n-----Input-----\nThe coded sentence will be given on a single line. The sentence consists only of lowercase letters of the English alphabet and spaces. The words will be separated by exactly one space and there will be no leading or trailing spaces. The total number of character will be at most 100.\n\n-----Output-----\nOutput the decoded sentence on a single line.\n\n-----Examples-----\nSample Input:\nzepelepenapa papapripikapa\nSample Output:\nzelena paprika\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6250"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6250", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["luka", 4], ["is", 4], ["fooling", 4], ["around", 4], ["in", 4], ["chemistry", 4], ["class", 4], ["again", 4], ["instead", 4], ["of", 4], ["balancing", 4], ["equations", 4], ["he", 4], ["is", 4], ["writing", 4], ["coded", 4], ["sentences", 4], ["on", 4], ["a", 4], ["piece", 4], ["of", 4], ["paper", 4], ["luka", 4], ["modifies", 1], ["every", 1], ["word", 1], ["in", 1], ["a", 1], ["sentence", 1], ["by", 1], ["adding", 1], ["after", 1], ["each", 1], ["vowel", 1], ["letters", 1], ["’a’", 1], ["’e’", 1], ["’i’", 1], ["’o’", 1], ["and", 1], ["’u’", 1], ["the", 1], ["letter", 1], ["’p’", 1], ["and", 1], ["then", 1], ["that", 1], ["same", 1], ["vowel", 1], ["again", 1], ["for", 1], ["example", 1], ["the", 1], ["word", 1], ["“kemija”", 1], ["becomes", 1], ["“kepemipijapa”", 1], ["and", 1], ["the", 1], ["word", 1], ["“paprika”", 1], ["becomes", 1], ["“papapripikapa”", 1], ["the", 1], ["teacher", 1], ["took", 1], ["luka’s", 1], ["paper", 4], ["with", 4], ["the", 4], ["coded", 1], ["sentences", 1], ["and", 0], ["wants", 0], ["to", 0], ["decode", 0], ["them", 0], ["write", 0], ["a", 0], ["program", 0], ["that", 0], ["decodes", 0], ["luka’s", 0], ["sentence", 0], ["input", 0], ["the", 4], ["coded", 4], ["sentence", 4], ["will", 4], ["be", 4], ["given", 4], ["on", 4], ["a", 4], ["single", 4], ["line", 4], ["the", 4], ["sentence", 4], ["consists", 4], ["only", 4], ["of", 4], ["lowercase", 4], ["letters", 4], ["of", 4], ["the", 4], ["english", 4], ["alphabet", 4], ["and", 4], ["spaces", 4], ["the", 4], ["words", 4], ["will", 4], ["be", 4], ["separated", 4], ["by", 4], ["exactly", 4], ["one", 4], ["space", 4], ["and", 4], ["there", 1], ["will", 1], ["be", 1], ["no", 1], ["leading", 1], ["or", 1], ["trailing", 1], ["spaces", 0], ["the", 0], ["total", 0], ["number", 0], ["of", 0], ["character", 0], ["will", 0], ["be", 0], ["at", 0], ["most", 0], ["100", 0], ["output", 0], ["output", 0], ["the", 0], ["decoded", 0], ["sentence", 0], ["on", 0], ["a", 0], ["single", 0], ["line", 0], ["examples", 0], ["sample", 0], ["input", 0], ["zepelepenapa", 0], ["papapripikapa", 0], ["sample", 0], ["output", 0], ["zelena", 0], ["paprika", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7320261437908496, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.44281045751633985, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8242424242424242, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5696969696969697, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7320261437908496, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.44281045751633985, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8242424242424242, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5696969696969697, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nTrouble has come to the remote group of islands known as Insumulia. Due to an unfortunate combination of over-consumption, natural climate variations, and generally difficult conditions, the island of Incunabula has run out of trees. Because several other Insumulian islands depended on trees from Incunabula through trade, its collapse will have repercussions all over Insumulia. In this problem, we’ll simulate a (highly oversimplified) model of the situation to determine the effects of the collapse of Incunabula. \n\nWe model the situation as follows. Each island has a threshold $T_ i$ on the amount of incoming goods (for simplicity we assume that there is only a single commodity of goods) it needs to receive per lunar cycle in order for the society of the island to sustain itself. If the amount of incoming goods drops below the threshold, society on the island will collapse and die out, and the island will no longer provide goods to other islands, thereby potentially causing them to collapse as well. Each island provides some amount of goods to a number of other islands. If an island collapses, we assume that goods that would have been delivered to that island is effectively lost; it does not get redistributed and delivered to other islands instead. Also, once an island dies out it is not repopulated (until possibly long after the ongoing collapses have finished).\n\nYour job is to write a program to compute the number of islands that survive after the potential chain reaction of collapses that is caused by the collapse of Incunabula.\n\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\le N \\le 100000$), the number of islands in Insumulia.\n\nThen follow $N$ lines, describing each island. The $i$’th such description starts with two integers $T_ i$, $K_ i$, where $0 \\le T_ i \\le 50000$ is the amount of goods the $i$’th island needs to receive in order to survive, and $0 \\le K_ i \\le N-1$ is the number of other islands the $i$’th islands receives goods from. The remainder of the description of the $i$’th island is a list of $K_ i$ pairs of integers. The $j$’th such pair, $S_{ij}$, $V_{ij}$, indicates that island $i$ receives $V_{ij}$ units of goods from island $S_{ij}$ each lunar cycle. You may assume that the $S_{ij}$’s are distinct and between $1$ and $N$ (inclusive), and that none of them equals $i$. The values $V_{ij}$ satisfy $1 \\le V_{ij} \\le 1000$ and their sum is at least $T_ i$. The sum of all the $K_ i$’s for all the $N$ islands is at most $500000$.\n\nIslands are numbered from $1$ to $N$, and Incunabula is island number $1$.\n\n-----Output-----\nOutput a single integer, the number of islands surviving the collapses.\n\n-----Examples-----\nSample Input:\n4\n0 0\n25 3 1 10 3 10 4 10\n10 1 2 10\n10 1 2 10\nSample Output:\n0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5843"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5843", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["trouble", 1], ["has", 1], ["come", 1], ["to", 1], ["the", 1], ["remote", 1], ["group", 1], ["of", 1], ["islands", 1], ["known", 1], ["as", 1], ["insumulia", 1], ["due", 1], ["to", 1], ["an", 1], ["unfortunate", 1], ["combination", 1], ["of", 1], ["over", 1], ["consumption", 1], ["natural", 1], ["climate", 1], ["variations", 1], ["and", 1], ["generally", 1], ["difficult", 1], ["conditions", 1], ["the", 1], ["island", 1], ["of", 1], ["incunabula", 1], ["has", 1], ["run", 1], ["out", 1], ["of", 1], ["trees", 1], ["because", 1], ["several", 1], ["other", 1], ["insumulian", 1], ["islands", 1], ["depended", 1], ["on", 1], ["trees", 1], ["from", 1], ["incunabula", 1], ["through", 1], ["trade", 1], ["its", 1], ["collapse", 1], ["will", 1], ["have", 1], ["repercussions", 1], ["all", 1], ["over", 1], ["insumulia", 1], ["in", 1], ["this", 1], ["problem", 1], ["we’ll", 1], ["simulate", 1], ["a", 1], ["highly", 1], ["oversimplified", 1], ["model", 1], ["of", 1], ["the", 1], ["situation", 1], ["to", 1], ["determine", 1], ["the", 1], ["effects", 1], ["of", 1], ["the", 1], ["collapse", 1], ["of", 1], ["incunabula", 1], ["we", 0], ["model", 0], ["the", 0], ["situation", 0], ["as", 0], ["follows", 0], ["each", 0], ["island", 0], ["has", 0], ["a", 0], ["threshold", 0], ["t", 0], ["i", 0], ["on", 1], ["the", 1], ["amount", 1], ["of", 1], ["incoming", 1], ["goods", 1], ["for", 1], ["simplicity", 1], ["we", 1], ["assume", 1], ["that", 1], ["there", 1], ["is", 1], ["only", 1], ["a", 1], ["single", 1], ["commodity", 1], ["of", 1], ["goods", 1], ["it", 1], ["needs", 1], ["to", 1], ["receive", 1], ["per", 1], ["lunar", 1], ["cycle", 1], ["in", 1], ["order", 1], ["for", 1], ["the", 1], ["society", 1], ["of", 1], ["the", 1], ["island", 1], ["to", 1], ["sustain", 1], ["itself", 1], ["if", 1], ["the", 1], ["amount", 1], ["of", 1], ["incoming", 1], ["goods", 1], ["drops", 1], ["below", 1], ["the", 1], ["threshold", 1], ["society", 1], ["on", 1], ["the", 1], ["island", 1], ["will", 1], ["collapse", 1], ["and", 1], ["die", 1], ["out", 1], ["and", 1], ["the", 1], ["island", 1], ["will", 1], ["no", 1], ["longer", 1], ["provide", 1], ["goods", 1], ["to", 1], ["other", 1], ["islands", 1], ["thereby", 1], ["potentially", 1], ["causing", 1], ["them", 1], ["to", 1], ["collapse", 1], ["as", 1], ["well", 1], ["each", 1], ["island", 1], ["provides", 1], ["some", 1], ["amount", 1], ["of", 1], ["goods", 1], ["to", 1], ["a", 1], ["number", 1], ["of", 1], ["other", 1], ["islands", 1], ["if", 1], ["an", 1], ["island", 1], ["collapses", 1], ["we", 1], ["assume", 1], ["that", 1], ["goods", 1], ["that", 1], ["would", 1], ["have", 1], ["been", 1], ["delivered", 1], ["to", 1], ["that", 1], ["island", 1], ["is", 1], ["effectively", 1], ["lost", 1], ["it", 1], ["does", 1], ["not", 1], ["get", 1], ["redistributed", 1], ["and", 1], ["delivered", 1], ["to", 1], ["other", 1], ["islands", 1], ["instead", 1], ["also", 1], ["once", 1], ["an", 1], ["island", 1], ["dies", 1], ["out", 1], ["it", 1], ["is", 1], ["not", 1], ["repopulated", 1], ["until", 1], ["possibly", 1], ["long", 1], ["after", 1], ["the", 1], ["ongoing", 1], ["collapses", 1], ["have", 1], ["finished", 3], ["your", 1], ["job", 1], ["is", 1], ["to", 1], ["write", 1], ["a", 1], ["program", 1], ["to", 1], ["compute", 1], ["the", 1], ["number", 1], ["of", 1], ["islands", 1], ["that", 1], ["survive", 1], ["after", 1], ["the", 1], ["potential", 1], ["chain", 1], ["reaction", 1], ["of", 1], ["collapses", 1], ["that", 1], ["is", 1], ["caused", 1], ["by", 0], ["the", 0], ["collapse", 0], ["of", 0], ["incunabula", 0], ["input", 0], ["the", 12], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["an", 0], ["integer", 0], ["n", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["100000", 1], ["the", 1], ["number", 1], ["of", 1], ["islands", 1], ["in", 1], ["insumulia", 1], ["then", 1], ["follow", 1], ["n", 1], ["lines", 1], ["describing", 1], ["each", 0], ["island", 0], ["the", 0], ["i", 0], ["’th", 0], ["such", 0], ["description", 0], ["starts", 0], ["with", 0], ["two", 0], ["integers", 0], ["t", 0], ["i", 0], ["k", 0], ["i", 0], ["where", 0], ["0", 0], ["le", 0], ["t", 0], ["i", 0], ["le", 0], ["50000", 1], ["is", 1], ["the", 1], ["amount", 1], ["of", 1], ["goods", 1], ["the", 1], ["i", 0], ["’th", 0], ["island", 0], ["needs", 0], ["to", 0], ["receive", 0], ["in", 0], ["order", 0], ["to", 0], ["survive", 0], ["and", 0], ["0", 0], ["le", 0], ["k", 0], ["i", 0], ["le", 0], ["n", 0], ["1", 0], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["other", 1], ["islands", 1], ["the", 1], ["i", 1], ["’th", 1], ["islands", 1], ["receives", 1], ["goods", 1], ["from", 1], ["the", 1], ["remainder", 1], ["of", 1], ["the", 0], ["description", 0], ["of", 0], ["the", 0], ["i", 0], ["’th", 0], ["island", 0], ["is", 0], ["a", 0], ["list", 0], ["of", 0], ["k", 0], ["i", 0], ["pairs", 0], ["of", 0], ["integers", 0], ["the", 0], ["j", 0], ["’th", 0], ["such", 0], ["pair", 0], ["s", 0], ["ij", 0], ["v", 0], ["ij", 0], ["indicates", 0], ["that", 0], ["island", 0], ["i", 0], ["receives", 0], ["v", 0], ["ij", 0], ["units", 0], ["of", 0], ["goods", 0], ["from", 0], ["island", 0], ["s", 0], ["ij", 0], ["each", 0], ["lunar", 0], ["cycle", 0], ["you", 0], ["may", 0], ["assume", 0], ["that", 0], ["the", 0], ["s", 0], ["ij", 0], ["’s", 1], ["are", 1], ["distinct", 1], ["and", 1], ["between", 1], ["1", 1], ["and", 1], ["n", 0], ["inclusive", 0], ["and", 0], ["that", 0], ["none", 0], ["of", 0], ["them", 0], ["equals", 0], ["i", 0], ["the", 0], ["values", 0], ["v", 0], ["ij", 0], ["satisfy", 0], ["1", 0], ["le", 0], ["v", 0], ["ij", 0], ["le", 0], ["1000", 0], ["and", 0], ["their", 0], ["sum", 0], ["is", 0], ["at", 0], ["least", 0], ["t", 0], ["i", 0], ["the", 0], ["sum", 0], ["of", 0], ["all", 0], ["the", 0], ["k", 0], ["i", 0], ["’s", 1], ["for", 1], ["all", 1], ["the", 1], ["n", 1], ["islands", 1], ["is", 1], ["at", 1], ["most", 1], ["500000", 1], ["islands", 1], ["are", 1], ["numbered", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["and", 1], ["incunabula", 1], ["is", 1], ["island", 1], ["number", 1], ["1", 1], ["output", 0], ["output", 0], ["a", 0], ["single", 0], ["integer", 0], ["the", 0], ["number", 0], ["of", 0], ["islands", 0], ["surviving", 0], ["the", 0], ["collapses", 0], ["examples", 0], ["sample", 0], ["input", 0], ["4", 1], ["0", 1], ["0", 1], ["25", 1], ["3", 2], ["1", 2], ["10", 2], ["3", 0], ["10", 0], ["4", 0], ["10", 0], ["10", 0], ["1", 0], ["2", 0], ["10", 0], ["10", 0], ["1", 0], ["2", 0], ["10", 0], ["sample", 0], ["output", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6303030303030303, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6240740740740741, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8165680473372781, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8165680473372781, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6282828282828283, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.623905723905724, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8165680473372781, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8165680473372781, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou just bought an “artistic” aquarium tank that has an interesting shape, and you poured $L$ litres of water into the tank. How high is the water in the tank?\n\nWhen you look at this tank from one side, it has the shape of a convex polygon. This polygon has exactly two vertices on the table ($y$-coordinates are 0), and all other vertices have positive $y$-coordinates. There are also exactly two vertices with maximum $y$-coordinates, and water is poured into the opening between these two vertices. This aquarium tank has a depth of $D$ centimetres. The tank is glued to the table, so no matter what shape it has, it keeps its position and does not tip over.\n\nAll coordinates and lengths in this problem are given in centimetres. It should be noted that each cubic metre is equivalent to 1 000 litres.\n\nAn illustration showing the configuration of the tank of the first sample input is given below:\n\n-----Input-----\nThe input consists of a single test case. The first line contains an integer $N$ ($4 \\leq N \\leq 100$) giving the number of vertices in the polygon. The next line contains two integers $D$ and $L$, where $1 \\le D \\le 1000$ is the depth of the aquarium tank and $0 \\le L \\le 2000$ is the number of litres of water to pour into the tank. The next $N$ lines each contains two integers, giving the $(x,y)$ coordinates of the vertices of the convex polygon in counterclockwise order. The absolute values of $x$ and $y$ are at most $1000$. You may assume that the tank has a positive capacity, and you never pour more water than the tank can hold.\n\n-----Output-----\nPrint the height of the water (in centimetres) in the aquarium tank on a line to 2 decimal places.\n\n-----Examples-----\nSample Input:\n4\n30 50\n20 0\n100 0\n100 40\n20 40\nSample Output:\n20.83\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7994"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7994", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 2], ["just", 2], ["bought", 2], ["an", 2], ["“artistic”", 2], ["aquarium", 2], ["tank", 2], ["that", 2], ["has", 2], ["an", 2], ["interesting", 2], ["shape", 2], ["and", 2], ["you", 2], ["poured", 2], ["l", 2], ["litres", 2], ["of", 2], ["water", 2], ["into", 2], ["the", 2], ["tank", 2], ["how", 2], ["high", 2], ["is", 2], ["the", 2], ["water", 2], ["in", 2], ["the", 2], ["tank", 2], ["when", 2], ["you", 2], ["look", 2], ["at", 2], ["this", 2], ["tank", 2], ["from", 2], ["one", 2], ["side", 2], ["it", 2], ["has", 2], ["the", 2], ["shape", 2], ["of", 2], ["a", 2], ["convex", 2], ["polygon", 2], ["this", 2], ["polygon", 2], ["has", 2], ["exactly", 2], ["two", 2], ["vertices", 2], ["on", 2], ["the", 2], ["table", 2], ["y", 2], ["coordinates", 2], ["are", 2], ["0", 2], ["and", 2], ["all", 2], ["other", 2], ["vertices", 2], ["have", 2], ["positive", 2], ["y", 2], ["coordinates", 2], ["there", 2], ["are", 2], ["also", 2], ["exactly", 2], ["two", 2], ["vertices", 2], ["with", 2], ["maximum", 2], ["y", 2], ["coordinates", 2], ["and", 2], ["water", 2], ["is", 2], ["poured", 2], ["into", 2], ["the", 2], ["opening", 2], ["between", 2], ["these", 2], ["two", 2], ["vertices", 2], ["this", 2], ["aquarium", 2], ["tank", 2], ["has", 2], ["a", 2], ["depth", 2], ["of", 2], ["d", 2], ["centimetres", 2], ["the", 2], ["tank", 2], ["is", 2], ["glued", 2], ["to", 2], ["the", 2], ["table", 2], ["so", 2], ["no", 2], ["matter", 2], ["what", 2], ["shape", 2], ["it", 2], ["has", 2], ["it", 2], ["keeps", 2], ["its", 2], ["position", 2], ["and", 2], ["does", 2], ["not", 2], ["tip", 2], ["over", 2], ["all", 2], ["coordinates", 2], ["and", 2], ["lengths", 2], ["in", 2], ["this", 2], ["problem", 2], ["are", 2], ["given", 2], ["in", 2], ["centimetres", 2], ["it", 2], ["should", 2], ["be", 0], ["noted", 0], ["that", 0], ["each", 0], ["cubic", 0], ["metre", 0], ["is", 0], ["equivalent", 0], ["to", 0], ["1", 0], ["000", 0], ["litres", 0], ["an", 0], ["illustration", 0], ["showing", 0], ["the", 0], ["configuration", 0], ["of", 0], ["the", 0], ["tank", 0], ["of", 0], ["the", 0], ["first", 0], ["sample", 0], ["input", 0], ["is", 0], ["given", 0], ["below", 0], ["input", 0], ["the", 5], ["input", 5], ["consists", 5], ["of", 2], ["a", 1], ["single", 1], ["test", 1], ["case", 1], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["an", 1], ["integer", 1], ["n", 1], ["4", 1], ["leq", 1], ["n", 1], ["leq", 1], ["100", 2], ["giving", 2], ["the", 2], ["number", 2], ["of", 2], ["vertices", 2], ["in", 2], ["the", 2], ["polygon", 1], ["the", 1], ["next", 1], ["line", 0], ["contains", 0], ["two", 0], ["integers", 0], ["d", 0], ["and", 0], ["l", 0], ["where", 0], ["1", 0], ["le", 0], ["d", 0], ["le", 0], ["1000", 0], ["is", 0], ["the", 0], ["depth", 0], ["of", 0], ["the", 0], ["aquarium", 0], ["tank", 0], ["and", 0], ["0", 0], ["le", 0], ["l", 0], ["le", 0], ["2000", 0], ["is", 2], ["the", 2], ["number", 2], ["of", 2], ["litres", 2], ["of", 2], ["water", 2], ["to", 2], ["pour", 2], ["into", 2], ["the", 2], ["tank", 2], ["the", 2], ["next", 2], ["n", 2], ["lines", 2], ["each", 2], ["contains", 2], ["two", 2], ["integers", 2], ["giving", 2], ["the", 2], ["x", 2], ["y", 2], ["coordinates", 2], ["of", 2], ["the", 2], ["vertices", 2], ["of", 2], ["the", 2], ["convex", 2], ["polygon", 2], ["in", 2], ["counterclockwise", 0], ["order", 0], ["the", 0], ["absolute", 0], ["values", 0], ["of", 0], ["x", 0], ["and", 0], ["y", 0], ["are", 0], ["at", 0], ["most", 0], ["1000", 0], ["you", 2], ["may", 2], ["assume", 2], ["that", 2], ["the", 2], ["tank", 2], ["has", 2], ["a", 2], ["positive", 2], ["capacity", 0], ["and", 0], ["you", 0], ["never", 0], ["pour", 0], ["more", 0], ["water", 0], ["than", 0], ["the", 0], ["tank", 0], ["can", 0], ["hold", 0], ["output", 0], ["print", 1], ["the", 1], ["height", 1], ["of", 1], ["the", 1], ["water", 1], ["in", 1], ["centimetres", 0], ["in", 0], ["the", 0], ["aquarium", 0], ["tank", 0], ["on", 0], ["a", 0], ["line", 0], ["to", 0], ["2", 0], ["decimal", 0], ["places", 0], ["examples", 0], ["sample", 0], ["input", 0], ["4", 0], ["30", 0], ["50", 0], ["20", 0], ["0", 0], ["100", 0], ["0", 0], ["100", 0], ["40", 0], ["20", 0], ["40", 0], ["sample", 0], ["output", 0], ["20", 0], ["83", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6594427244582043, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.36563467492260066, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8149253731343283, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.48985074626865677, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6594427244582043, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.36563467492260066, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8149253731343283, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.48985074626865677, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nTwo years ago, you helped install the nation’s very first Flubber pipe network in your hometown, to great success. Polls show that everyone loves having their own Flubber dispenser in their kitchen, and now a few enterprising citizens have discovered a use for it. Apparently Flubber, when mixed with water, can help extinguish fires! This is a very timely discovery, as out-of-control fires have lately been surprisingly common.\n\nYour hometown’s city council would like to make use of this property of Flubber by creating the Flubber/water mixture at a centrally located station. This station, which is called the Flubber Department (FD) will also have specialized employees trained to travel to the locations of fires and make use of their processed Flubber to control the blazes.\n\nThe pipes are already in place all around the city. You are given a layout of the pipes, and must determine how to route Flubber from the Flubber factory and water from a local source through the pipes to the FD.\n\nNote that both Flubber and water will be flowing through the same network of pipes, perhaps even the same pipe. All pipes are bidirectional, but Flubber and water cannot move in opposite directions through the same pipe. Furthermore, if both liquids are sent in the same direction through the same pipe, they will inevitably mix. Therefore the nodes in the network have been equipped with special membranes and filters that enable you to separate and reorganize all incoming mixtures as you see fit. The network is a closed system, so the total rate of each fluid going into a node must equal the total rate of that fluid going out, except at the source of that fluid and the destination (the FD).\n\nEach pipe has a certain capacity. Flubber, being somewhat sluggish, has a viscosity value $v$, so a pipe that can transport $v$ liters/second of water can transport only $1$ liter/second of Flubber. The pipe’s capacity scales linearly for mixtures of the two. To be precise, if $c$ denotes the water capacity of the pipe and $f$ and $w$ are the rates of Flubber and water moving through the pipe (all measured in liters/second), then the capacity constraint is given by the inequality $v\\cdot f + w \\leq c$.\n\nYour main concern is balancing the mixture that reaches the FD. You would like as much total liquid as possible, but you also need a sufficient amount of water – because undiluted Flubber is highly flammable – and a sufficient amount of Flubber – because it would not be much of a “Flubber Department” without Flubber! You have come up with a formula to measure the “value” of the final mixture: $F^a \\cdot W^{1-a}$, where $F$ is the rate of incoming Flubber in liters/second, $W$ is the rate of incoming water in liters/second, and $a$ is a given constant between $0$ and $1$.\n\nDetermine the maximum value of $F^a \\cdot W^{1-a}$ that can be achieved and how to route the Flubber and water to achieve it.\n\n-----Input-----\nThe input starts with a line containing the number of locations $n$ ($3 \\leq n \\leq 200$), the number of pipes $p$ ($n-1 \\leq p \\leq \\tfrac {1}{2}n(n-1)$), and the real values $v$ ($1 \\leq v \\leq 10$) and $a$ ($0.01 \\leq a \\leq 0.99$). Locations are numbered from $1$ to $n$; $1$ is the Flubber factory, $2$ is the water source, and $3$ is the FD. The real values have at most $10$ digits after the decimal point.\n\nThe following $p$ lines each describe one pipe. Each line contains two integers $j$ and $k$ ($1 \\leq j < k \\leq n$), giving the locations connected by the pipe, and an integer $c$ ($1 \\leq c \\leq 10$), giving the water capacity of the pipe in liters/second.\n\nNo two pipes connect the same pair of locations. Furthermore, it is guaranteed that the network is connected.\n\n-----Output-----\nFirst, for each pipe (in the order given in the input), display two values: the rate of Flubber moving through it, and the rate of water moving through it (negative if the liquid is moving from $k$ to $j$), such that $F^a \\cdot W^{1-a}$ is maximized. Then display that maximum value accurate to within an absolute error of $10^{-4}$.\n\nIf there are multiple solutions, any one will be accepted. All constraints (not sending Flubber and water in opposite directions along the same pipe, flow conservation, pipe capacities, and consistency between the constructed solution and its claimed value) must be satisfied within an absolute error of $10^{-4}$.\n\n-----Examples-----\nSample Input:\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\nSample Output:\n0.000000000 1.360000000\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7049"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7049", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["two", 4], ["years", 4], ["ago", 4], ["you", 4], ["helped", 4], ["install", 4], ["the", 4], ["nation’s", 4], ["very", 4], ["first", 4], ["flubber", 4], ["pipe", 4], ["network", 4], ["in", 4], ["your", 4], ["hometown", 4], ["to", 4], ["great", 4], ["success", 4], ["polls", 4], ["show", 4], ["that", 4], ["everyone", 4], ["loves", 4], ["having", 4], ["their", 4], ["own", 4], ["flubber", 4], ["dispenser", 4], ["in", 4], ["their", 4], ["kitchen", 4], ["and", 4], ["now", 4], ["a", 4], ["few", 4], ["enterprising", 4], ["citizens", 4], ["have", 4], ["discovered", 4], ["a", 4], ["use", 4], ["for", 4], ["it", 4], ["apparently", 4], ["flubber", 4], ["when", 4], ["mixed", 4], ["with", 4], ["water", 4], ["can", 4], ["help", 4], ["extinguish", 4], ["fires", 4], ["this", 4], ["is", 4], ["a", 4], ["very", 4], ["timely", 4], ["discovery", 4], ["as", 4], ["out", 4], ["of", 4], ["control", 4], ["fires", 4], ["have", 4], ["lately", 4], ["been", 4], ["surprisingly", 4], ["common", 4], ["your", 4], ["hometown’s", 4], ["city", 4], ["council", 4], ["would", 4], ["like", 4], ["to", 4], ["make", 4], ["use", 4], ["of", 4], ["this", 4], ["property", 4], ["of", 4], ["flubber", 4], ["by", 4], ["creating", 4], ["the", 4], ["flubber", 4], ["water", 4], ["mixture", 4], ["at", 4], ["a", 4], ["centrally", 4], ["located", 4], ["station", 4], ["this", 4], ["station", 4], ["which", 4], ["is", 4], ["called", 4], ["the", 4], ["flubber", 4], ["department", 4], ["fd", 4], ["will", 4], ["also", 4], ["have", 4], ["specialized", 4], ["employees", 4], ["trained", 4], ["to", 4], ["travel", 4], ["to", 4], ["the", 4], ["locations", 4], ["of", 4], ["fires", 4], ["and", 4], ["make", 4], ["use", 4], ["of", 4], ["their", 4], ["processed", 4], ["flubber", 4], ["to", 4], ["control", 4], ["the", 4], ["blazes", 4], ["the", 4], ["pipes", 4], ["are", 4], ["already", 4], ["in", 4], ["place", 4], ["all", 4], ["around", 4], ["the", 4], ["city", 4], ["you", 4], ["are", 4], ["given", 4], ["a", 4], ["layout", 4], ["of", 4], ["the", 4], ["pipes", 4], ["and", 4], ["must", 4], ["determine", 4], ["how", 4], ["to", 4], ["route", 4], ["flubber", 4], ["from", 4], ["the", 4], ["flubber", 4], ["factory", 4], ["and", 4], ["water", 4], ["from", 4], ["a", 4], ["local", 4], ["source", 4], ["through", 4], ["the", 4], ["pipes", 4], ["to", 4], ["the", 4], ["fd", 4], ["note", 4], ["that", 4], ["both", 4], ["flubber", 4], ["and", 4], ["water", 4], ["will", 4], ["be", 4], ["flowing", 4], ["through", 4], ["the", 4], ["same", 4], ["network", 4], ["of", 4], ["pipes", 4], ["perhaps", 4], ["even", 4], ["the", 4], ["same", 4], ["pipe", 4], ["all", 4], ["pipes", 4], ["are", 4], ["bidirectional", 4], ["but", 4], ["flubber", 4], ["and", 4], ["water", 4], ["cannot", 4], ["move", 4], ["in", 4], ["opposite", 4], ["directions", 4], ["through", 4], ["the", 4], ["same", 4], ["pipe", 4], ["furthermore", 4], ["if", 4], ["both", 4], ["liquids", 4], ["are", 4], ["sent", 4], ["in", 4], ["the", 4], ["same", 4], ["direction", 4], ["through", 4], ["the", 4], ["same", 4], ["pipe", 4], ["they", 4], ["will", 4], ["inevitably", 4], ["mix", 4], ["therefore", 4], ["the", 4], ["nodes", 4], ["in", 4], ["the", 4], ["network", 4], ["have", 4], ["been", 4], ["equipped", 4], ["with", 4], ["special", 4], ["membranes", 4], ["and", 4], ["filters", 4], ["that", 4], ["enable", 4], ["you", 4], ["to", 4], ["separate", 4], ["and", 4], ["reorganize", 4], ["all", 4], ["incoming", 4], ["mixtures", 4], ["as", 4], ["you", 4], ["see", 4], ["fit", 4], ["the", 4], ["network", 4], ["is", 4], ["a", 4], ["closed", 4], ["system", 4], ["so", 4], ["the", 4], ["total", 4], ["rate", 4], ["of", 4], ["each", 4], ["fluid", 4], ["going", 4], ["into", 4], ["a", 4], ["node", 4], ["must", 4], ["equal", 4], ["the", 4], ["total", 4], ["rate", 4], ["of", 4], ["that", 4], ["fluid", 4], ["going", 4], ["out", 4], ["except", 4], ["at", 4], ["the", 4], ["source", 4], ["of", 4], ["that", 4], ["fluid", 4], ["and", 4], ["the", 4], ["destination", 4], ["the", 4], ["fd", 4], ["each", 4], ["pipe", 4], ["has", 4], ["a", 4], ["certain", 4], ["capacity", 4], ["flubber", 4], ["being", 4], ["somewhat", 4], ["sluggish", 4], ["has", 4], ["a", 4], ["viscosity", 4], ["value", 4], ["v", 4], ["so", 4], ["a", 4], ["pipe", 4], ["that", 4], ["can", 4], ["transport", 4], ["v", 4], ["liters", 4], ["second", 4], ["of", 4], ["water", 4], ["can", 4], ["transport", 4], ["only", 4], ["1", 4], ["liter", 4], ["second", 4], ["of", 4], ["flubber", 4], ["the", 4], ["pipe’s", 4], ["capacity", 4], ["scales", 4], ["linearly", 4], ["for", 4], ["mixtures", 4], ["of", 4], ["the", 4], ["two", 4], ["to", 4], ["be", 4], ["precise", 4], ["if", 4], ["c", 4], ["denotes", 4], ["the", 4], ["water", 4], ["capacity", 4], ["of", 4], ["the", 4], ["pipe", 4], ["and", 4], ["f", 4], ["and", 4], ["w", 4], ["are", 4], ["the", 4], ["rates", 4], ["of", 4], ["flubber", 4], ["and", 4], ["water", 4], ["moving", 4], ["through", 4], ["the", 4], ["pipe", 4], ["all", 4], ["measured", 4], ["in", 4], ["liters", 4], ["second", 4], ["then", 4], ["the", 4], ["capacity", 4], ["constraint", 4], ["is", 4], ["given", 4], ["by", 4], ["the", 4], ["inequality", 4], ["v", 4], ["cdot", 4], ["f", 4], ["w", 4], ["leq", 4], ["c", 4], ["your", 4], ["main", 4], ["concern", 4], ["is", 4], ["balancing", 4], ["the", 4], ["mixture", 4], ["that", 4], ["reaches", 4], ["the", 4], ["fd", 4], ["you", 4], ["would", 4], ["like", 4], ["as", 4], ["much", 4], ["total", 4], ["liquid", 4], ["as", 4], ["possible", 4], ["but", 4], ["you", 4], ["also", 4], ["need", 4], ["a", 4], ["sufficient", 4], ["amount", 4], ["of", 4], ["water", 4], ["–", 4], ["because", 4], ["undiluted", 4], ["flubber", 4], ["is", 4], ["highly", 4], ["flammable", 4], ["–", 4], ["and", 4], ["a", 4], ["sufficient", 4], ["amount", 4], ["of", 4], ["flubber", 4], ["–", 4], ["because", 4], ["it", 4], ["would", 4], ["not", 4], ["be", 4], ["much", 4], ["of", 4], ["a", 4], ["“flubber", 4], ["department”", 4], ["without", 4], ["flubber", 4], ["you", 4], ["have", 4], ["come", 4], ["up", 4], ["with", 4], ["a", 4], ["formula", 4], ["to", 4], ["measure", 4], ["the", 4], ["“value”", 4], ["of", 4], ["the", 4], ["final", 4], ["mixture", 4], ["f", 4], ["a", 4], ["cdot", 4], ["w", 4], ["1", 4], ["a", 4], ["where", 4], ["f", 4], ["is", 4], ["the", 4], ["rate", 4], ["of", 4], ["incoming", 4], ["flubber", 4], ["in", 4], ["liters", 4], ["second", 4], ["w", 4], ["is", 4], ["the", 4], ["rate", 4], ["of", 4], ["incoming", 4], ["water", 4], ["in", 4], ["liters", 4], ["second", 4], ["and", 4], ["a", 4], ["is", 4], ["a", 4], ["given", 4], ["constant", 4], ["between", 4], ["0", 4], ["and", 4], ["1", 4], ["determine", 4], ["the", 4], ["maximum", 4], ["value", 4], ["of", 4], ["f", 4], ["a", 4], ["cdot", 4], ["w", 4], ["1", 4], ["a", 4], ["that", 4], ["can", 4], ["be", 4], ["achieved", 0], ["and", 0], ["how", 0], ["to", 0], ["route", 0], ["the", 0], ["flubber", 0], ["and", 0], ["water", 0], ["to", 0], ["achieve", 0], ["it", 0], ["input", 0], ["the", 4], ["input", 4], ["starts", 4], ["with", 4], ["a", 4], ["line", 4], ["containing", 4], ["the", 4], ["number", 4], ["of", 4], ["locations", 4], ["n", 4], ["3", 4], ["leq", 4], ["n", 4], ["leq", 4], ["200", 4], ["the", 4], ["number", 4], ["of", 4], ["pipes", 4], ["p", 4], ["n", 4], ["1", 4], ["leq", 4], ["p", 4], ["leq", 4], ["tfrac", 4], ["1", 4], ["2", 4], ["n", 4], ["n", 4], ["1", 4], ["and", 4], ["the", 4], ["real", 4], ["values", 4], ["v", 4], ["1", 4], ["leq", 4], ["v", 4], ["leq", 4], ["10", 4], ["and", 4], ["a", 4], ["0", 4], ["01", 4], ["leq", 4], ["a", 4], ["leq", 4], ["0", 4], ["99", 4], ["locations", 4], ["are", 4], ["numbered", 4], ["from", 4], ["1", 4], ["to", 4], ["n", 4], ["1", 4], ["is", 4], ["the", 4], ["flubber", 4], ["factory", 4], ["2", 4], ["is", 4], ["the", 4], ["water", 4], ["source", 4], ["and", 4], ["3", 4], ["is", 4], ["the", 4], ["fd", 4], ["the", 4], ["real", 4], ["values", 4], ["have", 4], ["at", 4], ["most", 4], ["10", 4], ["digits", 4], ["after", 4], ["the", 4], ["decimal", 4], ["point", 4], ["the", 4], ["following", 4], ["p", 4], ["lines", 4], ["each", 4], ["describe", 4], ["one", 4], ["pipe", 4], ["each", 4], ["line", 4], ["contains", 4], ["two", 4], ["integers", 4], ["j", 4], ["and", 4], ["k", 4], ["1", 4], ["leq", 4], ["j", 4], ["k", 4], ["leq", 4], ["n", 4], ["giving", 4], ["the", 4], ["locations", 4], ["connected", 4], ["by", 4], ["the", 4], ["pipe", 4], ["and", 4], ["an", 4], ["integer", 4], ["c", 4], ["1", 4], ["leq", 4], ["c", 4], ["leq", 4], ["10", 4], ["giving", 4], ["the", 4], ["water", 4], ["capacity", 4], ["of", 4], ["the", 4], ["pipe", 4], ["in", 4], ["liters", 4], ["second", 4], ["no", 4], ["two", 4], ["pipes", 4], ["connect", 4], ["the", 4], ["same", 4], ["pair", 0], ["of", 0], ["locations", 0], ["furthermore", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["the", 0], ["network", 0], ["is", 0], ["connected", 0], ["output", 0], ["first", 4], ["for", 4], ["each", 4], ["pipe", 4], ["in", 4], ["the", 4], ["order", 4], ["given", 4], ["in", 4], ["the", 4], ["input", 4], ["display", 4], ["two", 4], ["values", 4], ["the", 4], ["rate", 4], ["of", 4], ["flubber", 4], ["moving", 4], ["through", 4], ["it", 4], ["and", 4], ["the", 4], ["rate", 4], ["of", 4], ["water", 4], ["moving", 4], ["through", 4], ["it", 4], ["negative", 4], ["if", 4], ["the", 4], ["liquid", 4], ["is", 4], ["moving", 4], ["from", 4], ["k", 4], ["to", 4], ["j", 4], ["such", 4], ["that", 4], ["f", 4], ["a", 4], ["cdot", 4], ["w", 4], ["1", 4], ["a", 4], ["is", 4], ["maximized", 4], ["then", 4], ["display", 4], ["that", 4], ["maximum", 4], ["value", 4], ["accurate", 4], ["to", 4], ["within", 4], ["an", 4], ["absolute", 4], ["error", 4], ["of", 4], ["10", 4], ["4", 4], ["if", 4], ["there", 4], ["are", 4], ["multiple", 4], ["solutions", 4], ["any", 4], ["one", 4], ["will", 4], ["be", 4], ["accepted", 4], ["all", 4], ["constraints", 4], ["not", 4], ["sending", 4], ["flubber", 4], ["and", 4], ["water", 4], ["in", 4], ["opposite", 4], ["directions", 4], ["along", 4], ["the", 4], ["same", 4], ["pipe", 4], ["flow", 4], ["conservation", 4], ["pipe", 4], ["capacities", 4], ["and", 4], ["consistency", 4], ["between", 4], ["the", 4], ["constructed", 4], ["solution", 4], ["and", 4], ["its", 4], ["claimed", 0], ["value", 0], ["must", 0], ["be", 0], ["satisfied", 0], ["within", 0], ["an", 0], ["absolute", 0], ["error", 0], ["of", 0], ["10", 0], ["4", 0], ["examples", 0], ["sample", 0], ["input", 0], ["6", 0], ["6", 0], ["3", 0], ["0", 0], ["0", 0], ["66", 0], ["2", 0], ["4", 0], ["8", 0], ["4", 0], ["6", 0], ["1", 0], ["3", 0], ["6", 0], ["1", 0], ["4", 0], ["5", 0], ["5", 0], ["1", 0], ["5", 0], ["7", 0], ["3", 0], ["5", 0], ["3", 0], ["sample", 0], ["output", 0], ["0", 0], ["000000000", 0], ["1", 0], ["360000000", 0], ["0", 0], ["000000000", 0], ["1", 0], ["000000000", 0], ["0", 0], ["000000000", 0], ["1", 0], ["000000000", 0], ["0", 0], ["000000000", 0], ["0", 0], ["360000000", 0], ["0", 0], ["880000000", 0], ["0", 0], ["000000000", 0], ["0", 0], ["880000000", 0], ["0", 0], ["360000000", 0], ["1", 0], ["02037965897", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8898203592814371, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.22245508982035928, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9197166469893743, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.22992916174734357, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8898203592814371, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.22245508982035928, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9197166469893743, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.22992916174734357, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nMe and my friends are ordering a big pizza to share. As you can imagine this is quite complicated, since everyone has different wishes about what should be on the pizza. For instance Gunnar wants bananas on the pizza, Emma doesn’t want bananas but wants olives, Marc wants there to be tomatoes, and so on. Fortunately, against all odds, we managed to come up with a selection of toppings such that everyone had at least $2/3$’s of their wishes fulfilled, which we unanimously decided was good enough.\n\nBut then, disaster struck! We sent out Lukáš to buy the pizza, but he accidentally lost the piece of paper on which we had written down our carefully selected list of toppings. Now we’re back at square one, and have to construct a new selection of toppings. Given how long it took us to find the original selection of toppings, we have decided to lower our standards a bit and just try to find a selection such that everyone has strictly more than $1/3$ of their wishes fulfilled.\n\nCan you help us with this? If you do, you’ll get some pizza!\n\n-----Input-----\nThe first line of input contains an integer $1 \\le N \\le 10000$, the number of friends in the group (including yourself). Each of the next $n$ lines contains the list of wishes of one of the friends. This list starts with an integer $1 \\le w \\le 30$, the number of wishes this friend has, followed by a space-separated list of wishes. Each wish is either “+<topping>” or “-<topping>” where <topping> is the name of a topping, indicating that this friend wants or does not want this topping. Each topping name appears at most once in each list.\n\nTopping names are non-empty strings of up to $15$ lower-case English letters ‘a’-‘z’. There are at most $250$ different toppings.\n\n-----Output-----\nOutput a list of toppings (without repetitions, separated by spaces or newlines) such that each friend has strictly more than $1/3$ of their wishes fulfilled. You may assume that there exists a list such that every friend has at least $2/3$ of their wishes fulfilled.\n\nYour list of toppings is not allowed to contain any toppings that are not mentioned in the input, nor is it allowed to contain repetitions.\n\n-----Examples-----\nSample Input:\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\nSample Output:\nzucchini\nmozzarella\nmushrooms\nartichoke\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9885"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9885", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["me", 1], ["and", 1], ["my", 1], ["friends", 1], ["are", 1], ["ordering", 1], ["a", 1], ["big", 1], ["pizza", 1], ["to", 1], ["share", 1], ["as", 1], ["you", 1], ["can", 1], ["imagine", 1], ["this", 1], ["is", 1], ["quite", 1], ["complicated", 1], ["since", 1], ["everyone", 1], ["has", 1], ["different", 1], ["wishes", 1], ["about", 1], ["what", 1], ["should", 1], ["be", 1], ["on", 1], ["the", 1], ["pizza", 1], ["for", 1], ["instance", 1], ["gunnar", 1], ["wants", 1], ["bananas", 1], ["on", 1], ["the", 1], ["pizza", 1], ["emma", 1], ["doesn’t", 1], ["want", 1], ["bananas", 1], ["but", 1], ["wants", 1], ["olives", 1], ["marc", 1], ["wants", 1], ["there", 1], ["to", 1], ["be", 1], ["tomatoes", 1], ["and", 1], ["so", 1], ["on", 1], ["fortunately", 1], ["against", 1], ["all", 1], ["odds", 1], ["we", 1], ["managed", 1], ["to", 1], ["come", 1], ["up", 1], ["with", 1], ["a", 1], ["selection", 1], ["of", 1], ["toppings", 1], ["such", 1], ["that", 1], ["everyone", 1], ["had", 1], ["at", 1], ["least", 1], ["2", 1], ["3", 1], ["’s", 1], ["of", 1], ["their", 1], ["wishes", 1], ["fulfilled", 1], ["which", 1], ["we", 1], ["unanimously", 1], ["decided", 1], ["was", 1], ["good", 1], ["enough", 1], ["but", 1], ["then", 1], ["disaster", 1], ["struck", 1], ["we", 1], ["sent", 1], ["out", 1], ["lukáš", 1], ["to", 1], ["buy", 1], ["the", 1], ["pizza", 1], ["but", 1], ["he", 1], ["accidentally", 1], ["lost", 1], ["the", 1], ["piece", 1], ["of", 1], ["paper", 1], ["on", 1], ["which", 1], ["we", 1], ["had", 1], ["written", 1], ["down", 1], ["our", 1], ["carefully", 1], ["selected", 1], ["list", 1], ["of", 1], ["toppings", 1], ["now", 1], ["we’re", 1], ["back", 1], ["at", 1], ["square", 1], ["one", 1], ["and", 1], ["have", 1], ["to", 1], ["construct", 1], ["a", 1], ["new", 1], ["selection", 1], ["of", 1], ["toppings", 1], ["given", 1], ["how", 1], ["long", 1], ["it", 1], ["took", 1], ["us", 1], ["to", 1], ["find", 1], ["the", 1], ["original", 1], ["selection", 1], ["of", 1], ["toppings", 1], ["we", 1], ["have", 1], ["decided", 1], ["to", 1], ["lower", 1], ["our", 1], ["standards", 1], ["a", 1], ["bit", 1], ["and", 1], ["just", 1], ["try", 1], ["to", 1], ["find", 1], ["a", 1], ["selection", 1], ["such", 1], ["that", 1], ["everyone", 1], ["has", 1], ["strictly", 1], ["more", 1], ["than", 1], ["1", 1], ["3", 1], ["of", 1], ["their", 1], ["wishes", 1], ["fulfilled", 1], ["can", 1], ["you", 0], ["help", 0], ["us", 0], ["with", 0], ["this", 0], ["if", 0], ["you", 0], ["do", 0], ["you’ll", 0], ["get", 0], ["some", 0], ["pizza", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["an", 0], ["integer", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["10000", 0], ["the", 1], ["number", 1], ["of", 1], ["friends", 1], ["in", 1], ["the", 1], ["group", 1], ["including", 1], ["yourself", 1], ["each", 1], ["of", 1], ["the", 1], ["next", 1], ["n", 1], ["lines", 1], ["contains", 1], ["the", 1], ["list", 1], ["of", 1], ["wishes", 1], ["of", 1], ["one", 1], ["of", 1], ["the", 1], ["friends", 1], ["this", 1], ["list", 1], ["starts", 1], ["with", 1], ["an", 1], ["integer", 1], ["1", 1], ["le", 1], ["w", 1], ["le", 1], ["30", 1], ["the", 1], ["number", 1], ["of", 1], ["wishes", 1], ["this", 1], ["friend", 1], ["has", 1], ["followed", 1], ["by", 1], ["a", 1], ["space", 1], ["separated", 1], ["list", 1], ["of", 1], ["wishes", 1], ["each", 1], ["wish", 1], ["is", 1], ["either", 1], ["“", 1], ["topping", 1], ["”", 1], ["or", 1], ["“", 1], ["topping", 1], ["”", 1], ["where", 1], ["topping", 1], ["is", 1], ["the", 1], ["name", 1], ["of", 1], ["a", 1], ["topping", 1], ["indicating", 1], ["that", 1], ["this", 1], ["friend", 1], ["wants", 1], ["or", 1], ["does", 1], ["not", 1], ["want", 1], ["this", 1], ["topping", 1], ["each", 1], ["topping", 1], ["name", 1], ["appears", 1], ["at", 1], ["most", 1], ["once", 1], ["in", 1], ["each", 1], ["list", 1], ["topping", 1], ["names", 1], ["are", 1], ["non", 1], ["empty", 1], ["strings", 1], ["of", 1], ["up", 1], ["to", 1], ["15", 1], ["lower", 1], ["case", 1], ["english", 0], ["letters", 0], ["‘a’", 0], ["‘z’", 0], ["there", 0], ["are", 0], ["at", 0], ["most", 0], ["250", 0], ["different", 0], ["toppings", 0], ["output", 0], ["output", 1], ["a", 1], ["list", 1], ["of", 1], ["toppings", 1], ["without", 1], ["repetitions", 1], ["separated", 1], ["by", 1], ["spaces", 1], ["or", 1], ["newlines", 1], ["such", 1], ["that", 1], ["each", 1], ["friend", 1], ["has", 1], ["strictly", 1], ["more", 1], ["than", 1], ["1", 1], ["3", 1], ["of", 1], ["their", 1], ["wishes", 1], ["fulfilled", 1], ["you", 1], ["may", 1], ["assume", 1], ["that", 1], ["there", 1], ["exists", 1], ["a", 1], ["list", 1], ["such", 1], ["that", 1], ["every", 1], ["friend", 1], ["has", 1], ["at", 1], ["least", 1], ["2", 1], ["3", 1], ["of", 1], ["their", 1], ["wishes", 1], ["fulfilled", 1], ["your", 1], ["list", 1], ["of", 1], ["toppings", 1], ["is", 1], ["not", 1], ["allowed", 1], ["to", 1], ["contain", 1], ["any", 1], ["toppings", 1], ["that", 1], ["are", 1], ["not", 0], ["mentioned", 0], ["in", 0], ["the", 0], ["input", 0], ["nor", 0], ["is", 0], ["it", 0], ["allowed", 0], ["to", 0], ["contain", 0], ["repetitions", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["zucchini", 0], ["mozzarella", 0], ["mushrooms", 0], ["artichoke", 0], ["sample", 0], ["output", 0], ["zucchini", 0], ["mozzarella", 0], ["mushrooms", 0], ["artichoke", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8423645320197044, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8423645320197044, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9043062200956937, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9043062200956937, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8423645320197044, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8423645320197044, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9043062200956937, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9043062200956937, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nVasya has two arrays $A$ and $B$ of lengths $n$ and $m$, respectively.\n\nHe can perform the following operation arbitrary number of times (possibly zero): he takes some consecutive subsegment of the array and replaces it with a single element, equal to the sum of all elements on this subsegment. For example, from the array $[1, 10, 100, 1000, 10000]$ Vasya can obtain array $[1, 1110, 10000]$, and from array $[1, 2, 3]$ Vasya can obtain array $[6]$.\n\nTwo arrays $A$ and $B$ are considered equal if and only if they have the same length and for each valid $i$ $A_i = B_i$.\n\nVasya wants to perform some of these operations on array $A$, some on array $B$, in such a way that arrays $A$ and $B$ become equal. Moreover, the lengths of the resulting arrays should be maximal possible.\n\nHelp Vasya to determine the maximum length of the arrays that he can achieve or output that it is impossible to make arrays $A$ and $B$ equal.\n\n\n-----Input-----\n\nThe first line contains a single integer $n~(1 \\le n \\le 3 \\cdot 10^5)$ — the length of the first array.\n\nThe second line contains $n$ integers $a_1, a_2, \\cdots, a_n~(1 \\le a_i \\le 10^9)$ — elements of the array $A$.\n\nThe third line contains a single integer $m~(1 \\le m \\le 3 \\cdot 10^5)$ — the length of the second array.\n\nThe fourth line contains $m$ integers $b_1, b_2, \\cdots, b_m~(1 \\le b_i \\le 10^9)$ - elements of the array $B$.\n\n\n-----Output-----\n\nPrint a single integer — the maximum length of the resulting arrays after some operations were performed on arrays $A$ and $B$ in such a way that they became equal.\n\nIf there is no way to make array equal, print \"-1\".\n\n\n-----Examples-----\nInput\n5\n11 2 3 5 7\n4\n11 7 3 7\n\nOutput\n3\n\nInput\n2\n1 2\n1\n100\n\nOutput\n-1\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\na = list(map(int, input().split()))\n\nm = int(input())\nb = list(map(int, input().split()))\n\nptra = 1\nptrb = 1\nsa = a[0] \nsb = b[0]\nans = 0\n\nwhile ptra != n and ptrb != m:\n\tif sa == sb:\n\t\tans += 1\n\t\tsa = a[ptra]\n\t\tsb = b[ptrb]\n\t\tptra += 1\n\t\tptrb += 1\n\t\tcontinue\n\tif sa < sb:\n\t\tsa += a[ptra]\n\t\tptra += 1\n\telse:\n\t\tsb += b[ptrb]\n\t\tptrb += 1\nwhile ptra != n:\n\tsa += a[ptra]\n\tptra += 1\nwhile ptrb != m:\n\tsb += b[ptrb]\n\tptrb += 1\nif sa != sb:\n\tprint(-1)\n\treturn\nprint(ans + 1)\n\n", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n\treturn list(map(int, input().split()))    \n\ntry :\n\t#raise ModuleNotFoundError\n\timport numpy\n\tdef dprint(*args, **kwargs):\n\t\tprint(*args, **kwargs, file=sys.stderr)\n\tdprint('debug mode')\nexcept ModuleNotFoundError:\n\tdef dprint(*args, **kwargs):\n\t\tpass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n\tdprint('use input', inId)\n\tsys.stdin = open('input'+ str(inId) + '.txt', 'r') #标准输出重定向至文件\nif outId>0:\n\tdprint('use output', outId)\n\tsys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #标准输出重定向至文件\n\tatexit.register(lambda :sys.stdout.close())     #idle 中不会执行 atexit\n\t\nN, = getIntList()\nza = getIntList()\n\nM, = getIntList()\nzb = getIntList()\n\nif sum(za) != sum(zb):\n\tprint(-1)\n\treturn\n\nia = 0\nib = 0\nta = 0\ntb = 0\nr = N\nwhile ia<N or ib <M:\n\tif ta== tb:\n\t\tif ia==N: break\n\t\tta = za[ia]\n\t\ttb = zb[ib]\n\t\tia +=1\n\t\tib +=1\n\t\t\n\telif ta< tb:\n\t\tta += za[ia]\n\t\tia+=1\n\t\tr-=1\n\telse:\n\t\ttb+=zb[ib]\n\t\tib+=1\n\t\t\nprint(r)            \n\t\t\n\n\n\n\n", "n = int(input())\na = list(map(int, input().split()))\nm = int(input())\nb = list(map(int, input().split()))\nif sum(a) != sum(b):\n\tprint(-1)\n\treturn\ni = 0\nj = 0\nwhile i < n and j < m:\n\twhile a[i] != b[j] and i < n and j < m:\n\t\tif i < n - 1 and a[i] < b[j]:\n\t\t\ta[i + 1] += a[i]\n\t\t\ta[i] = -1\n\t\t\ti += 1\n\t\telif j < m - 1:\n\t\t\tb[j + 1] += b[j]\n\t\t\tb[j] = -1\n\t\t\tj += 1\n\tif a[i] == b[j]:\n\t\ti += 1\n\t\tj += 1\n\telse:\n\t\tprint(-1)\n\t\treturn\nans = 0\nfor i in a:\n\tif i != -1:\n\t\tans += 1\nprint(ans)\n\n\t\n", "import sys\n\nn=int(input())\nA=list(map(int,input().split()))\nm=int(input())\nB=list(map(int,input().split()))\n\ni=0\nj=0\nx=A[0]\ny=B[0]\nACHECK=0\n\nwhile True:\n\tif x==y:\n\t\ti+=1\n\t\tj+=1\n\t\tif i==n and j==m:\n\t\t\tprint(n-ACHECK)\n\t\t\treturn\n\n\t\telif i==n and j<m:\n\t\t\tprint(-1)\n\t\t\treturn\n\n\t\telif i<n and j==m:\n\t\t\tprint(-1)\n\t\t\treturn\n\t\t\t\n\t\tx=A[i]\n\t\ty=B[j]\n\n\telif x>y:\n\t\tj+=1\n\n\t\tif j==m:\n\t\t\tprint(-1)\n\t\t\treturn\n\t\ty+=B[j]\n\n\telif x<y:\n\t\ti+=1\n\n\t\tif i==n:\n\t\t\tprint(-1)\n\t\t\treturn\n\t\tx+=A[i]\n\t\tACHECK+=1\n\t\t\n\n\n", "from collections import deque\nfrom sys import stdin\nlines = deque(line.strip() for line in stdin.readlines())\n\ndef nextline():\n\treturn lines.popleft()\n\ndef types(cast, sep=None):\n\treturn tuple(cast(x) for x in strs(sep=sep))\n\ndef ints(sep=None):\n\treturn types(int, sep=sep)\n\ndef strs(sep=None):\n\treturn tuple(nextline()) if sep == '' else tuple(nextline().split(sep=sep))\n\ndef main():\n\t# lines will now contain all of the input's lines in a list\n\tn = int(nextline())\n\ta = ints()\n\tm = int(nextline())\n\tb = ints()\n\tcount = 1\n\ti, j = 0, 0\n\ta_sum, b_sum = 0, 0\n\ta_total, b_total = 0, 0\n\twhile i < n and j < m:\n\t\tif a_sum < b_sum:\n\t\t\ta_total += a[i]\n\t\t\ta_sum += a[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tb_total += b[j]\n\t\t\tb_sum += b[j]\n\t\t\tj += 1\n\t\tif a_sum == b_sum:\n\t\t\tcount += 1\n\t\t\ta_sum, b_sum = 0, 0\n\twhile i < n and a_total < b_total:\n\t\ta_total += a[i]\n\t\ti += 1\n\twhile j < m and b_total < a_total:\n\t\tb_total += b[j]\n\t\tj += 1\n\tif i == n and j == m and a_total == b_total:\n\t\treturn count\n\treturn -1\n\ndef __starting_point():\n\tprint(main())\n\n__starting_point()\n", "def __starting_point():\n\tn1 = int(input().strip())\n\ta1 = [int(__) for __ in input().strip().split()]\n\tn2 = int(input().strip())\n\ta2 = [int(__) for __ in input().strip().split()]\n\ts1, s2 = sum(a1), sum(a2)\n\tif a1 == a2:\n\t\tprint(n1)\n\telif sum(a1) != sum(a2):\n\t\tprint(-1)\n\telse:\n\t\ts1, s2 = 0, 0\n\t\te1, e2 = n1 - 1, n2 - 1\n\t\tans = 0\n\t\twhile a1[s1] == a2[s2]:\n\t\t\ts1 += 1\n\t\t\ts2 += 1\n\t\t\tans += 1\n\t\twhile a1[e1] == a2[e2]:\n\t\t\te1 -= 1\n\t\t\te2 -= 1\n\t\t\tans += 1\n\t\tp1 = [a1[s1]]\n\t\tp2 = [a2[s2]]\n\t\tfor i in range(s1 + 1, e1 + 1):\n\t\t\tp1.append(p1[-1] + a1[i])\n\t\tfor i in range(s2 + 1, e2 + 1):\n\t\t\tp2.append(p2[-1] + a2[i])\n\t\td = {}\n\t\tfor x in p1:\n\t\t\td[x] = 1\n\t\tfor x in p2:\n\t\t\tif x in d:\n\t\t\t\tans += 1\n\t\tprint(ans)\n\n__starting_point()\n", "n = int(input())\na = list(map(int, input().split()))\nm = int(input())\nb = list(map(int, input().split()))\nif (sum(a) != sum(b)):\n\tprint(-1)\nelse:\n\ti = 0\n\tj = 0\n\tsuma = 0\n\tsumb = 0\n\tans = 0\n\twhile (i < n or j < m):\n\t\tif (suma == sumb and suma != 0):\n\t\t\tsuma = 0\n\t\t\tsumb = 0\n\t\t\tans += 1\n\t\t\tif (i == n and j == m):\n\t\t\t\tbreak\n\t\telif (suma == sumb):\n\t\t\tsuma += a[i]\n\t\t\ti += 1\n\t\t\tsumb += b[j]\n\t\t\tj += 1\n\t\t\tif (i == n and j == m):\n\t\t\t\tbreak            \n\t\telif (suma < sumb):\n\t\t\tsuma += a[i]\n\t\t\ti += 1\n\t\telif (suma > sumb):\n\t\t\tsumb += b[j]\n\t\t\tj += 1\n\tif (suma == sumb and suma != 0):\n\t\tans += 1\n\tprint(ans)\n", "n=int(input())\nalist=list(map(int,input().split()))\nm=int(input())\nblist=list(map(int,input().split()))\n\nprea = [alist[0]]\nfor i in range(1,n):\n\tprea.append(prea[-1]+alist[i])\n\npreb = [blist[0]]\nfor i in range(1,m):\n\tpreb.append(preb[-1]+blist[i])\n#print(prea,preb)\nif prea[-1]!=preb[-1]:\n\tprint(-1)\n\nelse:\n\tx=0\n\ty=0\n\tcount=0\n\twhile x<n and y<m:\n\n\t\tif prea[x]==preb[y]:\n\n\t\t\tcount+=1\n\t\t\tx+=1\n\t\t\ty+=1\n\t\telif prea[x]<preb[y]:\n\t\t\tx+=1\n\t\telse:\n\t\t\ty+=1\n\n\tprint(count)\n\n\n", "n = int(input())\narrA = list(map(int, input().split()))\nm = int(input())\narrB = list(map(int, input().split()))\nresult = 0\ni = 0\nj = 0\nsumA = 0\nsumB = 0\nwhile (i < n and j < m):\n\tsumA += arrA[i]\n\tsumB += arrB[j]\n\tif (sumA == sumB):\n\t\tsumA = 0\n\t\tsumB = 0\n\t\ti += 1\n\t\tj += 1\n\t\tresult += 1\n\telif sumA > sumB:\n\t\tsumA -= arrA[i]\n\t\tj += 1\n\telse:\n\t\tsumB -= arrB[j]\n\t\ti += 1\nif (j == m and i == n): \n\tprint(result)\nelse:\n\tprint(\"-1\")\n", "import math\n\nla = int(input())\na = list(map(int, input().split()))\n\nlb = int(input())\nb = list(map(int, input().split()))\n\nxa = 0\nxb = 0\n\nsuma = 0\nsumb = 0\n\nresult = 0\nwhile (xa < la or sumb < suma) and  (xb < lb or suma < sumb):\n\tif suma == sumb:\n\t\tsuma += a[xa]\n\t\tsumb += b[xb]\n\t\txa += 1\n\t\txb += 1\n\t\tresult += 1\n\n\telif suma > sumb:\n\t\tsumb += b[xb]\n\t\txb += 1\n\n\telif suma < sumb:\n\t\tsuma += a[xa]\n\t\txa += 1\n\nif xa == la and xb == lb and suma == sumb:\n\tprint(result)\nelse:\n\tprint(-1)\n", "import sys\nf=sys.stdin\nout=sys.stdout\n\nn=int(f.readline().rstrip('\\r\\n'))\na=list(map(int,f.readline().rstrip('\\r\\n').split()))\nm=int(f.readline().rstrip('\\r\\n'))\nb=list(map(int,f.readline().rstrip('\\r\\n').split()))\n\ni=n-1\nj=m-1\nc=0\nwhile i>=0 and j>=0:\n\tif a[i]==b[j]:\n\t\tc+=1\n\t\ti-=1\n\t\tj-=1\n\telif a[i]<b[j]:\n\t\ta[i-1]+=a[i]\n\t\ti-=1\n\telse:\n\t\tb[j-1]+=b[j]\n\t\tj-=1\nif i==-1 and j==-1:\n\tout.write(str(c))\nelse:\n\tout.write(\"-1\")\n", "import atexit\nimport io\nimport sys\n# import os\n\n# from bisect import *\n# from collections import *\n# from fractions import gcd\n# from fractions import Fraction as fr_\n# from itertools import *\n# import math\n\ninf = float('inf')  # sys.maxint in py2\ninf_neg = float('-inf')  # sys.maxsize = 9*1e18\nrange_5 = int(1e5 + 1)\nrange_6 = int(1e6 + 1)\nrange_7 = int(1e7 + 1)\nrange_8 = int(1e8 + 1)\n# sys.setrecursionlimit(range_8)\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n\n@atexit.register\ndef write():\n\tsys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n\ndef main():\n\t# ll = list(map(int, input().split()))\n\t# print(f\"{ ll }\")\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tm = int(input())\n\tb = list(map(int, input().split()))\n\n\tif sum(a) != sum(b):\n\t\tprint(-1)\n\telse:\n\t\ti, j = 0, 0\n\t\ttemp = 0\n\t\twhile (i < n or j < m):\n\t\t\tif a[i] == b[j]:\n\t\t\t\ttemp += 1\n\t\t\t\tif (i < n and j < m):\n\t\t\t\t\ti += 1\n\t\t\t\t\tj += 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\telif (a[i] < b[j] and (i + 1) < n):\n\t\t\t\ta[i + 1] += a[i]\n\t\t\t\ti += 1\n\t\t\telif (a[i] < b[j] and (i + 1) > n - 1):\n\t\t\t\ttemp += 1\n\t\t\t\tbreak\n\t\t\telif (a[i] > b[j] and (j + 1) < m):\n\t\t\t\tb[j + 1] += b[j]\n\t\t\t\tj += 1\n\t\t\telif (a[i] > b[j] and (j + 1) > m - 1):\n\t\t\t\ttemp += 1\n\t\t\t\tbreak\n\t\tprint(temp)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import atexit\nimport io\nimport sys\n# import os\n\n# from bisect import *\n# from collections import *\n# from fractions import gcd\n# from fractions import Fraction as fr_\n# from itertools import *\n# import math\n\ninf = float('inf')  # sys.maxint in py2\ninf_neg = float('-inf')  # sys.maxsize = 9*1e18\nrange_5 = int(1e5 + 1)\nrange_6 = int(1e6 + 1)\nrange_7 = int(1e7 + 1)\nrange_8 = int(1e8 + 1)\n# sys.setrecursionlimit(range_8)\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n\n@atexit.register\ndef write():\n\tsys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n\ndef main():\n\t# ll = list(map(int, input().split()))\n\t# print(f\"{ ll }\")\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tm = int(input())\n\tb = list(map(int, input().split()))\n\n\tif sum(a) != sum(b):\n\t\tprint(-1)\n\telse:\n\t\ti, j = 0, 0\n\t\ttemp = 0\n\t\twhile (i < n or j < m):\n\t\t\tif a[i] == b[j]:\n\t\t\t\ttemp += 1\n\t\t\t\tif (i < n and j < m):\n\t\t\t\t\ti += 1\n\t\t\t\t\tj += 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\telif (a[i] < b[j] and (i + 1) < n):\n\t\t\t\ta[i + 1] += a[i]\n\t\t\t\ti += 1\n\t\t\telif (a[i] < b[j] and (i + 1) > n - 1):\n\t\t\t\ttemp += 1\n\t\t\t\tbreak\n\t\t\telif (a[i] > b[j] and (j + 1) < m):\n\t\t\t\tb[j + 1] += b[j]\n\t\t\t\tj += 1\n\t\t\telif (a[i] > b[j] and (j + 1) > m - 1):\n\t\t\t\ttemp += 1\n\t\t\t\tbreak\n\t\tprint(temp)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n = int(input())\narr = [int(i) for i in input().split()]\nm = int(input())\nar = [int(i) for i in input().split()]\na = arr[0]\nb = ar[0]\naa = 1\nbb = 1\nans = 0\nwhile (aa != n and bb != m):\n\tif a == b:\n\t\ta += arr[aa]\n\t\taa += 1\n\t\tans += 1\n\t\tcontinue\n\tif a < b:\n\t\ta += arr[aa]\n\t\taa += 1\n\telse:\n\t\tb += ar[bb]\n\t\tbb += 1\n\nwhile (aa != n):\n\ta += arr[aa]\n\taa+=1\nwhile (bb != m):\n\tb += ar[bb]\n\tbb += 1\nif a == b:\n\tprint(ans + 1)\nelse:\n\tprint(-1) \n", "m=int(input())\na=list(map(int,input().split()))\nn=int(input())\nb=list(map(int,input().split()))\nif(sum(a)!=sum(b)):\n\tprint(-1)\nelse:\n\tans=sum1=sum2=0\n\ti=j=0\n\twhile(i<m and j<n):\n\t\tif(sum1<sum2):\n\t\t\tsum1+=a[i]\n\t\t\ti+=1\n\t\telif(sum1>sum2):\n\t\t\tsum2+=b[j]\n\t\t\tj+=1\n\t\telse:\n\t\t\tans+=1\n\t\t\tsum1=a[i]\n\t\t\tsum2=b[j]\n\t\t\ti+=1\n\t\t\tj+=1\n\tprint(ans)\n", "n = int(input())\nA = list(map(int,input().split()))\nm = int(input())\nB = list(map(int,input().split()))\n\ni =0\nj =0\nans = 0\nsa = 0\nsb = 0\nwhile i < n or j < m:\n\tif sa < sb:\n\t\tif i>= n:\n\t\t\tbreak\n\t\tsa += A[i]\n\t\ti += 1\n\telse:\n\t\tif j >= m:\n\t\t\tbreak\n\t\tsb += B[j]\n\t\tj += 1\n\tif sa == sb:\n\t\tans += 1\n\t\tsa = 0\n\t\tsb = 0\n\nif i == n and j == m and sa == 0 and sb == 0: \n\tprint(ans)\nelse:\n\tprint(-1)\n", "n = int(input())\nline_a = list(map(int, input().split()))\nm = int(input())\nline_b = list(map(int, input().split()))\nif sum(line_a) != sum(line_b):\n\tprint(-1)\nelse:\n\tsa = 0\n\tsb = 0\n\tl = 0\n\tr = 0\n\tsize = 0\n\twhile l != n and r != m:\n\t\t#print(sa, sb)\n\t\tif sa + line_a[l] > sb + line_b[r]:\n\t\t\tsb += line_b[r]\n\t\t\tr += 1\n\t\telif sa + line_a[l] < sb + line_b[r]:\n\t\t\tsa += line_a[l]\n\t\t\tl += 1\n\t\telif sa + line_a[l] == sb + line_b[r]:\n\t\t\tsize += 1\n\t\t\tl += 1\n\t\t\tr += 1\n\t\t\tsa = 0\n\t\t\tsb = 0\n\tprint(size)\n", "'''input\n2\n1 2\n2\n1 2\n'''\n\nimport math\nfrom collections import defaultdict as dd\nimport heapq\n\t\nn = int(input())\na = [int(i) for i in input().split(\" \")]\nm = int(input())\nb = [int(i) for i in input().split(\" \")]\n\nx = [a[0]]\ny = [b[0]]\nif sum(a) != sum(b):\n\tprint(-1)\nelse:\n\tfor i in range(1, n):\n\t\tx.append(x[-1] + a[i])\n\tfor i in range(1, m):\n\t\ty.append(y[-1] + b[i])\n\tx = set(x)\n\ty = set(y)\n\tprint(len(x.intersection(y)))\n", "\n\nn = int(input())\na = list(map(int,input().split(\" \")))\nm = int(input())\nb = list(map(int,input().split(\" \")))\n\ni,j = 0,0\nres = 0\nx,y = 0,0\nlast_i,last_j = -1,-1\nwhile(i < n and j < m):\n\t# print(i,j,x,y)\n\tif(last_i != i):\n\t\tx += a[i]\n\tif(last_j != j):\n\t\t\ty += b[j]\n\tlast_i,last_j = i,j\n\tif(x == y):\n\t\ti += 1\n\t\tj += 1\n\t\tres += 1\n\t\tx = 0\n\t\ty = 0\n\tif(x<y):\n\t\ti += 1\n\tif(x>y):\n\t\tj += 1\n\nif(i == n and j == m):\n\tprint(res)\nelse:\n\tprint(\"-1\")\n", "n=int(input())\na=[int(i) for i in input().split(' ')]\n\nm=int(input())\nb=[int(i) for i in input().split(' ')]\n\n\naa=[a[0]]\nbb=[b[0]]\n\nfor i in range(1,n):\n\taa.append(aa[-1]+a[i])\n\nfor i in range(1,m):\n\tbb.append(bb[-1]+b[i])\n\na1=set(aa)\na2=set(bb)\nif sum(a)!=sum(b):\n\tprint(-1)\nelse:\n\tprint(len((a1.intersection(a2))))\n\n\t\t\n", "'''input\n3\n1 2 3\n3\n1 2 3\n'''\nimport sys\nfrom collections import defaultdict as dd\nfrom itertools import  permutations as pp\nfrom itertools import combinations as cc\nfrom collections import Counter as ccd\nfrom random import randint as rd\nfrom bisect import bisect_left as bl\nmod=10**9+7\n\n\nn=int(input())\na=[int(i) for i in input().split()]\nm=int(input())\nb=[int(i) for i in input().split()]\n\nfor i in range(1,n):\n\ta[i]+=a[i-1]\nfor i in range(1,m):\n\tb[i]+=b[i-1]\n\nif a[-1]!=b[-1]:\n\tprint(-1)\nelse:\n\ta=set(a)\n\tb=set(b)\n\n\tans=len(a.intersection(b))\n\n\tif ans==0 :\n\t\tprint(-1)\n\telse:\n\t\tprint(ans)\n\n", "n = int(input())\na = list(map(int, input().split()))\nm = int(input())\nb = list(map(int, input().split()))\n\nif sum(a) != sum(b):\n\tprint(-1)\nelse:\n\tL = 0\n\twhile a or b:\n\t\tif a[-1] == b[-1]:\n\t\t\tdel a[-1]\n\t\t\tdel b[-1]\n\t\t\tL += 1\n\t\telif a[-1] < b[-1]:\n\t\t\ta[-2] += a[-1]\n\t\t\tdel a[-1]\n\t\telse:\n\t\t\tb[-2] += b[-1]\n\t\t\tdel b[-1]\n\tprint(L)\n", "def go():\n\tn = int(input())\n\ta = [int(i) for i in input().split(' ')]\n\tm = int(input())\n\tb = [int(i) for i in input().split(' ')]\n\ti = 0\n\tso_far_i = 0\n\tj = 0\n\tso_far_j = 0\n\twhile i < n and so_far_i < n and j < m and so_far_j < m:\n\t\tif a[i] == b[j]:\n\t\t\ti = so_far_i\n\t\t\tj = so_far_j\n\t\t\ti += 1\n\t\t\tj += 1\n\t\t\tso_far_i = i\n\t\t\tso_far_j = j\n\t\telse:\n\t\t\tif a[i] > b[j]:\n\t\t\t\tif so_far_j + 1 < m:\n\t\t\t\t\tb[j] += b[so_far_j + 1]\n\t\t\t\t\tso_far_j += 1\n\t\t\t\t\tb[so_far_j] = None\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tif so_far_i + 1 < n:\n\t\t\t\t\ta[i] += a[so_far_i + 1]\n\t\t\t\t\tso_far_i += 1\n\t\t\t\t\ta[so_far_i] = None\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\tif sum([i for i in a if i is not None]) != sum([i for i in b if i is not None]):\n\t\treturn -1\n\treturn len([i for i in a if i is not None])\n\nprint(go())\n", "n1 = int(input())\na1 = list(map(int, input().split()))\nn2 = int(input())\na2 = list(map(int, input().split()))\nif n1 < n2:\n\ta1, a2 = a2, a1\nif sum(a1) != sum(a2):\n\tprint(-1)\nelse:\n\tc = 1\n\tf = 0\n\ts = 0\n\tc1 = a1[f]\n\tc2 = a2[s]    \n\twhile s + 1 < len(a2) and f + 1 < len(a1):\n\t\tif c1 == c2:\n\t\t\tf += 1\n\t\t\ts += 1              \n\t\t\tc += 1\n\t\t\tc1 = a1[f]\n\t\t\tc2 = a2[s]             \n\t\telif c1 > c2:\n\t\t\ts += 1\n\t\t\tc2 += a2[s]            \n\t\telse:\n\t\t\tf += 1\n\t\t\tc1 += a1[f]\n\tprint(c)\n"], "id": "id8839"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8839", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["vasya", 2], ["has", 2], ["two", 2], ["arrays", 2], ["a", 2], ["and", 2], ["b", 2], ["of", 2], ["lengths", 2], ["n", 2], ["and", 2], ["m", 2], ["respectively", 2], ["he", 2], ["can", 2], ["perform", 2], ["the", 2], ["following", 2], ["operation", 2], ["arbitrary", 2], ["number", 2], ["of", 2], ["times", 2], ["possibly", 2], ["zero", 2], ["he", 2], ["takes", 2], ["some", 2], ["consecutive", 2], ["subsegment", 2], ["of", 2], ["the", 2], ["array", 2], ["and", 2], ["replaces", 2], ["it", 2], ["with", 2], ["a", 2], ["single", 2], ["element", 2], ["equal", 2], ["to", 2], ["the", 2], ["sum", 2], ["of", 2], ["all", 2], ["elements", 2], ["on", 2], ["this", 2], ["subsegment", 2], ["for", 2], ["example", 2], ["from", 2], ["the", 2], ["array", 2], ["1", 2], ["10", 2], ["100", 2], ["1000", 2], ["10000", 2], ["vasya", 2], ["can", 2], ["obtain", 2], ["array", 2], ["1", 2], ["1110", 2], ["10000", 2], ["and", 2], ["from", 2], ["array", 2], ["1", 2], ["2", 2], ["3", 2], ["vasya", 2], ["can", 2], ["obtain", 2], ["array", 2], ["6", 2], ["two", 2], ["arrays", 2], ["a", 2], ["and", 2], ["b", 2], ["are", 2], ["considered", 2], ["equal", 2], ["if", 2], ["and", 2], ["only", 2], ["if", 2], ["they", 2], ["have", 2], ["the", 2], ["same", 2], ["length", 2], ["and", 2], ["for", 2], ["each", 2], ["valid", 2], ["i", 2], ["a", 2], ["i", 2], ["b", 2], ["i", 2], ["vasya", 2], ["wants", 2], ["to", 2], ["perform", 2], ["some", 2], ["of", 2], ["these", 2], ["operations", 2], ["on", 2], ["array", 2], ["a", 2], ["some", 2], ["on", 2], ["array", 2], ["b", 2], ["in", 2], ["such", 2], ["a", 2], ["way", 2], ["that", 2], ["arrays", 2], ["a", 2], ["and", 2], ["b", 2], ["become", 2], ["equal", 2], ["moreover", 2], ["the", 2], ["lengths", 2], ["of", 2], ["the", 2], ["resulting", 2], ["arrays", 2], ["should", 2], ["be", 2], ["maximal", 2], ["possible", 2], ["help", 2], ["vasya", 2], ["to", 2], ["determine", 2], ["the", 2], ["maximum", 2], ["length", 2], ["of", 2], ["the", 2], ["arrays", 2], ["that", 2], ["he", 2], ["can", 2], ["achieve", 2], ["or", 2], ["output", 0], ["that", 0], ["it", 0], ["is", 0], ["impossible", 0], ["to", 0], ["make", 0], ["arrays", 0], ["a", 0], ["and", 0], ["b", 0], ["equal", 0], ["input", 4], ["the", 2], ["first", 2], ["line", 2], ["contains", 2], ["a", 2], ["single", 2], ["integer", 2], ["n", 2], ["1", 2], ["le", 2], ["n", 2], ["le", 2], ["3", 2], ["cdot", 2], ["10", 2], ["5", 2], ["—", 2], ["the", 2], ["length", 2], ["of", 2], ["the", 2], ["first", 2], ["array", 2], ["the", 4], ["second", 2], ["line", 2], ["contains", 2], ["n", 2], ["integers", 2], ["a", 2], ["1", 2], ["a", 2], ["2", 2], ["cdots", 2], ["a", 2], ["n", 2], ["1", 2], ["le", 2], ["a", 2], ["i", 2], ["le", 2], ["10", 2], ["9", 2], ["—", 2], ["elements", 2], ["of", 2], ["the", 2], ["array", 2], ["a", 2], ["the", 2], ["third", 2], ["line", 2], ["contains", 2], ["a", 2], ["single", 2], ["integer", 2], ["m", 2], ["1", 2], ["le", 2], ["m", 2], ["le", 2], ["3", 2], ["cdot", 2], ["10", 2], ["5", 2], ["—", 2], ["the", 2], ["length", 2], ["of", 2], ["the", 2], ["second", 2], ["array", 2], ["the", 2], ["fourth", 2], ["line", 2], ["contains", 2], ["m", 2], ["integers", 2], ["b", 2], ["1", 2], ["b", 2], ["2", 2], ["cdots", 2], ["b", 2], ["m", 2], ["1", 0], ["le", 0], ["b", 0], ["i", 0], ["le", 0], ["10", 0], ["9", 0], ["elements", 0], ["of", 0], ["the", 0], ["array", 0], ["b", 0], ["output", 0], ["print", 2], ["a", 2], ["single", 2], ["integer", 2], ["—", 2], ["the", 2], ["maximum", 2], ["length", 2], ["of", 2], ["the", 2], ["resulting", 2], ["arrays", 2], ["after", 2], ["some", 2], ["operations", 2], ["were", 2], ["performed", 2], ["on", 2], ["arrays", 2], ["a", 2], ["and", 2], ["b", 2], ["in", 2], ["such", 2], ["a", 2], ["way", 2], ["that", 2], ["they", 2], ["became", 2], ["equal", 0], ["if", 0], ["there", 0], ["is", 0], ["no", 0], ["way", 0], ["to", 0], ["make", 0], ["array", 0], ["equal", 0], ["print", 0], ["1", 0], ["examples", 0], ["input", 0], ["5", 0], ["11", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["4", 0], ["11", 0], ["7", 0], ["3", 0], ["7", 0], ["output", 0], ["3", 0], ["input", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["100", 0], ["output", 0], ["1", 0], ["input", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["output", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7947214076246334, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.39589442815249265, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8696883852691218, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4348441926345609, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7947214076246334, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.39589442815249265, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8696883852691218, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4348441926345609, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ptra", 0], ["1", 0], ["ptrb", 0], ["1", 0], ["sa", 0], ["a", 0], ["0", 0], ["sb", 0], ["b", 0], ["0", 0], ["ans", 0], ["0", 0], ["while", 0], ["ptra", 0], ["n", 0], ["and", 0], ["ptrb", 0], ["m", 0], ["if", 0], ["sa", 0], ["sb", 0], ["ans", 0], ["1", 0], ["sa", 0], ["a", 0], ["ptra", 0], ["sb", 0], ["b", 0], ["ptrb", 0], ["ptra", 0], ["1", 0], ["ptrb", 0], ["1", 0], ["continue", 0], ["if", 0], ["sa", 0], ["sb", 0], ["sa", 0], ["a", 0], ["ptra", 0], ["ptra", 0], ["1", 0], ["else", 0], ["sb", 0], ["b", 0], ["ptrb", 0], ["ptrb", 0], ["1", 0], ["while", 0], ["ptra", 0], ["n", 0], ["sa", 0], ["a", 0], ["ptra", 0], ["ptra", 0], ["1", 0], ["while", 0], ["ptrb", 0], ["m", 0], ["sb", 0], ["b", 0], ["ptrb", 0], ["ptrb", 0], ["1", 0], ["if", 0], ["sa", 0], ["sb", 0], ["print", 0], ["1", 0], ["return", 0], ["print", 0], ["ans", 0], ["1", 0], ["import", 0], ["collections", 0], ["atexit", 0], ["math", 0], ["sys", 0], ["bisect", 0], ["sys", 0], ["setrecursionlimit", 0], ["1000000", 0], ["def", 0], ["getintlist", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["try", 0], ["raise", 0], ["modulenotfounderror", 0], ["import", 0], ["numpy", 0], ["def", 0], ["dprint", 0], ["args", 0], ["kwargs", 0], ["print", 0], ["args", 0], ["kwargs", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["dprint", 0], ["debug", 0], ["mode", 0], ["except", 0], ["modulenotfounderror", 0], ["def", 0], ["dprint", 0], ["args", 0], ["kwargs", 0], ["pass", 0], ["inid", 0], ["0", 0], ["outid", 0], ["0", 0], ["if", 0], ["inid", 0], ["0", 0], ["dprint", 0], ["use", 0], ["input", 0], ["inid", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["input", 0], ["str", 0], ["inid", 0], ["txt", 0], ["r", 0], ["标准输出重定向至文件", 0], ["if", 0], ["outid", 0], ["0", 0], ["dprint", 0], ["use", 0], ["output", 0], ["outid", 0], ["sys", 0], ["stdout", 0], ["open", 0], ["stdout", 0], ["str", 0], ["outid", 0], ["txt", 0], ["w", 0], ["标准输出重定向至文件", 0], ["atexit", 0], ["register", 0], ["lambda", 0], ["sys", 0], ["stdout", 0], ["close", 0], ["idle", 0], ["中不会执行", 0], ["atexit", 0], ["n", 0], ["getintlist", 0], ["za", 0], ["getintlist", 0], ["m", 0], ["getintlist", 0], ["zb", 0], ["getintlist", 0], ["if", 0], ["sum", 0], ["za", 0], ["sum", 0], ["zb", 0], ["print", 0], ["1", 0], ["return", 0], ["ia", 0], ["0", 0], ["ib", 0], ["0", 0], ["ta", 0], ["0", 0], ["tb", 0], ["0", 0], ["r", 0], ["n", 0], ["while", 0], ["ia", 0], ["n", 0], ["or", 0], ["ib", 0], ["m", 0], ["if", 0], ["ta", 0], ["tb", 0], ["if", 0], ["ia", 0], ["n", 0], ["break", 0], ["ta", 0], ["za", 0], ["ia", 0], ["tb", 0], ["zb", 0], ["ib", 0], ["ia", 0], ["1", 0], ["ib", 0], ["1", 0], ["elif", 0], ["ta", 0], ["tb", 0], ["ta", 0], ["za", 0], ["ia", 0], ["ia", 0], ["1", 0], ["r", 0], ["1", 0], ["else", 0], ["tb", 0], ["zb", 0], ["ib", 0], ["ib", 0], ["1", 0], ["print", 0], ["r", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["sum", 0], ["b", 0], ["print", 0], ["1", 0], ["return", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["while", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["and", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["and", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["elif", 0], ["j", 0], ["m", 0], ["1", 0], ["b", 0], ["j", 0], ["1", 0], ["b", 0], ["j", 0], ["b", 0], ["j", 0], ["1", 0], ["j", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["else", 0], ["print", 0], ["1", 0], ["return", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["x", 0], ["a", 0], ["0", 0], ["y", 0], ["b", 0], ["0", 0], ["acheck", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["print", 0], ["n", 0], ["acheck", 0], ["return", 0], ["elif", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["print", 0], ["1", 0], ["return", 0], ["elif", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["print", 0], ["1", 0], ["return", 0], ["x", 0], ["a", 0], ["i", 0], ["y", 0], ["b", 0], ["j", 0], ["elif", 0], ["x", 0], ["y", 0], ["j", 0], ["1", 0], ["if", 0], ["j", 0], ["m", 0], ["print", 0], ["1", 0], ["return", 0], ["y", 0], ["b", 0], ["j", 0], ["elif", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["print", 0], ["1", 0], ["return", 0], ["x", 0], ["a", 0], ["i", 0], ["acheck", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["lines", 0], ["deque", 0], ["line", 0], ["strip", 0], ["for", 0], ["line", 0], ["in", 0], ["stdin", 0], ["readlines", 0], ["def", 0], ["nextline", 0], ["return", 0], ["lines", 0], ["popleft", 0], ["def", 0], ["types", 0], ["cast", 0], ["sep", 0], ["none", 0], ["return", 0], ["tuple", 0], ["cast", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["strs", 0], ["sep", 0], ["sep", 0], ["def", 0], ["ints", 0], ["sep", 0], ["none", 0], ["return", 0], ["types", 0], ["int", 0], ["sep", 0], ["sep", 0], ["def", 0], ["strs", 0], ["sep", 0], ["none", 0], ["return", 0], ["tuple", 0], ["nextline", 0], ["if", 0], ["sep", 0], ["else", 0], ["tuple", 0], ["nextline", 0], ["split", 0], ["sep", 0], ["sep", 0], ["def", 0], ["main", 0], ["lines", 0], ["will", 0], ["now", 0], ["contain", 0], ["all", 0], ["of", 0], ["the", 0], ["input", 0], ["s", 0], ["lines", 0], ["in", 0], ["a", 0], ["list", 0], ["n", 0], ["int", 0], ["nextline", 0], ["a", 0], ["ints", 0], ["m", 0], ["int", 0], ["nextline", 0], ["b", 0], ["ints", 0], ["count", 0], ["1", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["a", 0], ["sum", 0], ["b", 0], ["sum", 0], ["0", 0], ["0", 0], ["a", 0], ["total", 0], ["b", 0], ["total", 0], ["0", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["if", 0], ["a", 0], ["sum", 0], ["b", 0], ["sum", 0], ["a", 0], ["total", 0], ["a", 0], ["i", 0], ["a", 0], ["sum", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["else", 0], ["b", 0], ["total", 0], ["b", 0], ["j", 0], ["b", 0], ["sum", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["if", 0], ["a", 0], ["sum", 0], ["b", 0], ["sum", 0], ["count", 0], ["1", 0], ["a", 0], ["sum", 0], ["b", 0], ["sum", 0], ["0", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["a", 0], ["total", 0], ["b", 0], ["total", 0], ["a", 0], ["total", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["while", 0], ["j", 0], ["m", 0], ["and", 0], ["b", 0], ["total", 0], ["a", 0], ["total", 0], ["b", 0], ["total", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["and", 0], ["a", 0], ["total", 0], ["b", 0], ["total", 0], ["return", 0], ["count", 0], ["return", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["print", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["starting", 0], ["point", 0], ["n1", 0], ["int", 0], ["input", 0], ["strip", 0], ["a1", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["n2", 0], ["int", 0], ["input", 0], ["strip", 0], ["a2", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["s1", 0], ["s2", 0], ["sum", 0], ["a1", 0], ["sum", 0], ["a2", 0], ["if", 0], ["a1", 0], ["a2", 0], ["print", 0], ["n1", 0], ["elif", 0], ["sum", 0], ["a1", 0], ["sum", 0], ["a2", 0], ["print", 0], ["1", 0], ["else", 0], ["s1", 0], ["s2", 0], ["0", 0], ["0", 0], ["e1", 0], ["e2", 0], ["n1", 0], ["1", 0], ["n2", 0], ["1", 0], ["ans", 0], ["0", 0], ["while", 0], ["a1", 0], ["s1", 0], ["a2", 0], ["s2", 0], ["s1", 0], ["1", 0], ["s2", 0], ["1", 0], ["ans", 0], ["1", 0], ["while", 0], ["a1", 0], ["e1", 0], ["a2", 0], ["e2", 0], ["e1", 0], ["1", 0], ["e2", 0], ["1", 0], ["ans", 0], ["1", 0], ["p1", 0], ["a1", 0], ["s1", 0], ["p2", 0], ["a2", 0], ["s2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["s1", 0], ["1", 0], ["e1", 0], ["1", 0], ["p1", 0], ["append", 0], ["p1", 0], ["1", 0], ["a1", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["s2", 0], ["1", 0], ["e2", 0], ["1", 0], ["p2", 0], ["append", 0], ["p2", 0], ["1", 0], ["a2", 0], ["i", 0], ["d", 0], ["for", 0], ["x", 0], ["in", 0], ["p1", 0], ["d", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["p2", 0], ["if", 0], ["x", 0], ["in", 0], ["d", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["sum", 0], ["b", 0], ["print", 0], ["1", 0], ["else", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["suma", 0], ["0", 0], ["sumb", 0], ["0", 0], ["ans", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["or", 0], ["j", 0], ["m", 0], ["if", 0], ["suma", 0], ["sumb", 0], ["and", 0], ["suma", 0], ["0", 0], ["suma", 0], ["0", 0], ["sumb", 0], ["0", 0], ["ans", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["break", 0], ["elif", 0], ["suma", 0], ["sumb", 0], ["suma", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["sumb", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["break", 0], ["elif", 0], ["suma", 0], ["sumb", 0], ["suma", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["elif", 0], ["suma", 0], ["sumb", 0], ["sumb", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["if", 0], ["suma", 0], ["sumb", 0], ["and", 0], ["suma", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["alist", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["blist", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["prea", 0], ["alist", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["prea", 0], ["append", 0], ["prea", 0], ["1", 0], ["alist", 0], ["i", 0], ["preb", 0], ["blist", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["preb", 0], ["append", 0], ["preb", 0], ["1", 0], ["blist", 0], ["i", 0], ["print", 0], ["prea", 0], ["preb", 0], ["if", 0], ["prea", 0], ["1", 0], ["preb", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["count", 0], ["0", 0], ["while", 0], ["x", 0], ["n", 0], ["and", 0], ["y", 0], ["m", 0], ["if", 0], ["prea", 0], ["x", 0], ["preb", 0], ["y", 0], ["count", 0], ["1", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["elif", 0], ["prea", 0], ["x", 0], ["preb", 0], ["y", 0], ["x", 0], ["1", 0], ["else", 0], ["y", 0], ["1", 0], ["print", 0], ["count", 0], ["n", 0], ["int", 0], ["input", 0], ["arra", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["arrb", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["result", 0], ["0", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["suma", 0], ["0", 0], ["sumb", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["suma", 0], ["arra", 0], ["i", 0], ["sumb", 0], ["arrb", 0], ["j", 0], ["if", 0], ["suma", 0], ["sumb", 0], ["suma", 0], ["0", 0], ["sumb", 0], ["0", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["result", 0], ["1", 0], ["elif", 0], ["suma", 0], ["sumb", 0], ["suma", 0], ["arra", 0], ["i", 0], ["j", 0], ["1", 0], ["else", 0], ["sumb", 0], ["arrb", 0], ["j", 0], ["i", 0], ["1", 0], ["if", 0], ["j", 0], ["m", 0], ["and", 0], ["i", 0], ["n", 0], ["print", 0], ["result", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["math", 0], ["la", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lb", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xa", 0], ["0", 0], ["xb", 0], ["0", 0], ["suma", 0], ["0", 0], ["sumb", 0], ["0", 0], ["result", 0], ["0", 0], ["while", 0], ["xa", 0], ["la", 0], ["or", 0], ["sumb", 0], ["suma", 0], ["and", 0], ["xb", 0], ["lb", 0], ["or", 0], ["suma", 0], ["sumb", 0], ["if", 0], ["suma", 0], ["sumb", 0], ["suma", 0], ["a", 0], ["xa", 0], ["sumb", 0], ["b", 0], ["xb", 0], ["xa", 0], ["1", 0], ["xb", 0], ["1", 0], ["result", 0], ["1", 0], ["elif", 0], ["suma", 0], ["sumb", 0], ["sumb", 0], ["b", 0], ["xb", 0], ["xb", 0], ["1", 0], ["elif", 0], ["suma", 0], ["sumb", 0], ["suma", 0], ["a", 0], ["xa", 0], ["xa", 0], ["1", 0], ["if", 0], ["xa", 0], ["la", 0], ["and", 0], ["xb", 0], ["lb", 0], ["and", 0], ["suma", 0], ["sumb", 0], ["print", 0], ["result", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["sys", 0], ["f", 0], ["sys", 0], ["stdin", 0], ["out", 0], ["sys", 0], ["stdout", 0], ["n", 0], ["int", 0], ["f", 0], ["readline", 0], ["rstrip", 0], ["r", 0], ["n", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["f", 0], ["readline", 0], ["rstrip", 0], ["r", 0], ["n", 0], ["split", 0], ["m", 0], ["int", 0], ["f", 0], ["readline", 0], ["rstrip", 0], ["r", 0], ["n", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["f", 0], ["readline", 0], ["rstrip", 0], ["r", 0], ["n", 0], ["split", 0], ["i", 0], ["n", 0], ["1", 0], ["j", 0], ["m", 0], ["1", 0], ["c", 0], ["0", 0], ["while", 0], ["i", 0], ["0", 0], ["and", 0], ["j", 0], ["0", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["c", 0], ["1", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["else", 0], ["b", 0], ["j", 0], ["1", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["if", 0], ["i", 0], ["1", 0], ["and", 0], ["j", 0], ["1", 0], ["out", 0], ["write", 0], ["str", 0], ["c", 0], ["else", 0], ["out", 0], ["write", 0], ["1", 0], ["import", 0], ["atexit", 0], ["import", 0], ["io", 0], ["import", 0], ["sys", 0], ["import", 0], ["os", 0], ["from", 0], ["bisect", 0], ["import", 0], ["from", 0], ["collections", 0], ["import", 0], ["from", 0], ["fractions", 0], ["import", 0], ["gcd", 0], ["from", 0], ["fractions", 0], ["import", 0], ["fraction", 0], ["as", 0], ["fr", 0], ["from", 0], ["itertools", 0], ["import", 0], ["import", 0], ["math", 0], ["inf", 0], ["float", 0], ["inf", 0], ["sys", 0], ["maxint", 0], ["in", 0], ["py2", 0], ["inf", 0], ["neg", 0], ["float", 0], ["inf", 0], ["sys", 0], ["maxsize", 0], ["9", 0], ["1e18", 0], ["range", 0], ["5", 0], ["int", 0], ["1e5", 0], ["1", 0], ["range", 0], ["6", 0], ["int", 0], ["1e6", 0], ["1", 0], ["range", 0], ["7", 0], ["int", 0], ["1e7", 0], ["1", 0], ["range", 0], ["8", 0], ["int", 0], ["1e8", 0], ["1", 0], ["sys", 0], ["setrecursionlimit", 0], ["range", 0], ["8", 0], ["input", 0], ["lines", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["splitlines", 0], ["input", 0], ["iter", 0], ["input", 0], ["lines", 0], ["next", 0], ["output", 0], ["buffer", 0], ["io", 0], ["stringio", 0], ["sys", 0], ["stdout", 0], ["output", 0], ["buffer", 0], ["atexit", 0], ["register", 0], ["def", 0], ["write", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["output", 0], ["buffer", 0], ["getvalue", 0], ["def", 0], ["main", 0], ["ll", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["f", 0], ["ll", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["sum", 0], ["b", 0], ["print", 0], ["1", 0], ["else", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["temp", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["or", 0], ["j", 0], ["m", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["temp", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["else", 0], ["break", 0], ["elif", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["and", 0], ["i", 0], ["1", 0], ["n", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["and", 0], ["i", 0], ["1", 0], ["n", 0], ["1", 0], ["temp", 0], ["1", 0], ["break", 0], ["elif", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["and", 0], ["j", 0], ["1", 0], ["m", 0], ["b", 0], ["j", 0], ["1", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["and", 0], ["j", 0], ["1", 0], ["m", 0], ["1", 0], ["temp", 0], ["1", 0], ["break", 0], ["print", 0], ["temp", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["atexit", 0], ["import", 0], ["io", 0], ["import", 0], ["sys", 0], ["import", 0], ["os", 0], ["from", 0], ["bisect", 0], ["import", 0], ["from", 0], ["collections", 0], ["import", 0], ["from", 0], ["fractions", 0], ["import", 0], ["gcd", 0], ["from", 0], ["fractions", 0], ["import", 0], ["fraction", 0], ["as", 0], ["fr", 0], ["from", 0], ["itertools", 0], ["import", 0], ["import", 0], ["math", 0], ["inf", 0], ["float", 0], ["inf", 0], ["sys", 0], ["maxint", 0], ["in", 0], ["py2", 0], ["inf", 0], ["neg", 0], ["float", 0], ["inf", 0], ["sys", 0], ["maxsize", 0], ["9", 0], ["1e18", 0], ["range", 0], ["5", 0], ["int", 0], ["1e5", 0], ["1", 0], ["range", 0], ["6", 0], ["int", 0], ["1e6", 0], ["1", 0], ["range", 0], ["7", 0], ["int", 0], ["1e7", 0], ["1", 0], ["range", 0], ["8", 0], ["int", 0], ["1e8", 0], ["1", 0], ["sys", 0], ["setrecursionlimit", 0], ["range", 0], ["8", 0], ["input", 0], ["lines", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["splitlines", 0], ["input", 0], ["iter", 0], ["input", 0], ["lines", 0], ["next", 0], ["output", 0], ["buffer", 0], ["io", 0], ["stringio", 0], ["sys", 0], ["stdout", 0], ["output", 0], ["buffer", 0], ["atexit", 0], ["register", 0], ["def", 0], ["write", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["output", 0], ["buffer", 0], ["getvalue", 0], ["def", 0], ["main", 0], ["ll", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["f", 0], ["ll", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["sum", 0], ["b", 0], ["print", 0], ["1", 0], ["else", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["temp", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["or", 0], ["j", 0], ["m", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["temp", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["else", 0], ["break", 0], ["elif", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["and", 0], ["i", 0], ["1", 0], ["n", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["and", 0], ["i", 0], ["1", 0], ["n", 0], ["1", 0], ["temp", 0], ["1", 0], ["break", 0], ["elif", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["and", 0], ["j", 0], ["1", 0], ["m", 0], ["b", 0], ["j", 0], ["1", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["and", 0], ["j", 0], ["1", 0], ["m", 0], ["1", 0], ["temp", 0], ["1", 0], ["break", 0], ["print", 0], ["temp", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["ar", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["arr", 0], ["0", 0], ["b", 0], ["ar", 0], ["0", 0], ["aa", 0], ["1", 0], ["bb", 0], ["1", 0], ["ans", 0], ["0", 0], ["while", 0], ["aa", 0], ["n", 0], ["and", 0], ["bb", 0], ["m", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["arr", 0], ["aa", 0], ["aa", 0], ["1", 0], ["ans", 0], ["1", 0], ["continue", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["arr", 0], ["aa", 0], ["aa", 0], ["1", 0], ["else", 0], ["b", 0], ["ar", 0], ["bb", 0], ["bb", 0], ["1", 0], ["while", 0], ["aa", 0], ["n", 0], ["a", 0], ["arr", 0], ["aa", 0], ["aa", 0], ["1", 0], ["while", 0], ["bb", 0], ["m", 0], ["b", 0], ["ar", 0], ["bb", 0], ["bb", 0], ["1", 0], ["if", 0], ["a", 0], ["b", 0], ["print", 0], ["ans", 0], ["1", 0], ["else", 0], ["print", 0], ["1", 0], ["m", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["sum", 0], ["b", 0], ["print", 0], ["1", 0], ["else", 0], ["ans", 0], ["sum1", 0], ["sum2", 0], ["0", 0], ["i", 0], ["j", 0], ["0", 0], ["while", 0], ["i", 0], ["m", 0], ["and", 0], ["j", 0], ["n", 0], ["if", 0], ["sum1", 0], ["sum2", 0], ["sum1", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["elif", 0], ["sum1", 0], ["sum2", 0], ["sum2", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["else", 0], ["ans", 0], ["1", 0], ["sum1", 0], ["a", 0], ["i", 0], ["sum2", 0], ["b", 0], ["j", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["ans", 0], ["0", 0], ["sa", 0], ["0", 0], ["sb", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["or", 0], ["j", 0], ["m", 0], ["if", 0], ["sa", 0], ["sb", 0], ["if", 0], ["i", 0], ["n", 0], ["break", 0], ["sa", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["else", 0], ["if", 0], ["j", 0], ["m", 0], ["break", 0], ["sb", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["if", 0], ["sa", 0], ["sb", 0], ["ans", 0], ["1", 0], ["sa", 0], ["0", 0], ["sb", 0], ["0", 0], ["if", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["and", 0], ["sa", 0], ["0", 0], ["and", 0], ["sb", 0], ["0", 0], ["print", 0], ["ans", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["line", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["line", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["line", 0], ["a", 0], ["sum", 0], ["line", 0], ["b", 0], ["print", 0], ["1", 0], ["else", 0], ["sa", 0], ["0", 0], ["sb", 0], ["0", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["size", 0], ["0", 0], ["while", 0], ["l", 0], ["n", 0], ["and", 0], ["r", 0], ["m", 0], ["print", 0], ["sa", 0], ["sb", 0], ["if", 0], ["sa", 0], ["line", 0], ["a", 0], ["l", 0], ["sb", 0], ["line", 0], ["b", 0], ["r", 0], ["sb", 0], ["line", 0], ["b", 0], ["r", 0], ["r", 0], ["1", 0], ["elif", 0], ["sa", 0], ["line", 0], ["a", 0], ["l", 0], ["sb", 0], ["line", 0], ["b", 0], ["r", 0], ["sa", 0], ["line", 0], ["a", 0], ["l", 0], ["l", 0], ["1", 0], ["elif", 0], ["sa", 0], ["line", 0], ["a", 0], ["l", 0], ["sb", 0], ["line", 0], ["b", 0], ["r", 0], ["size", 0], ["1", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["sa", 0], ["0", 0], ["sb", 0], ["0", 0], ["print", 0], ["size", 0], ["input", 0], ["2", 0], ["1", 0], ["2", 0], ["2", 0], ["1", 0], ["2", 0], ["import", 0], ["math", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["import", 0], ["heapq", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["x", 0], ["a", 0], ["0", 0], ["y", 0], ["b", 0], ["0", 0], ["if", 0], ["sum", 0], ["a", 0], ["sum", 0], ["b", 0], ["print", 0], ["1", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["x", 0], ["append", 0], ["x", 0], ["1", 0], ["a", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["y", 0], ["append", 0], ["y", 0], ["1", 0], ["b", 0], ["i", 0], ["x", 0], ["set", 0], ["x", 0], ["y", 0], ["set", 0], ["y", 0], ["print", 0], ["len", 0], ["x", 0], ["intersection", 0], ["y", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["res", 0], ["0", 0], ["x", 0], ["y", 0], ["0", 0], ["0", 0], ["last", 0], ["i", 0], ["last", 0], ["j", 0], ["1", 0], ["1", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["print", 0], ["i", 0], ["j", 0], ["x", 0], ["y", 0], ["if", 0], ["last", 0], ["i", 0], ["i", 0], ["x", 0], ["a", 0], ["i", 0], ["if", 0], ["last", 0], ["j", 0], ["j", 0], ["y", 0], ["b", 0], ["j", 0], ["last", 0], ["i", 0], ["last", 0], ["j", 0], ["i", 0], ["j", 0], ["if", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["res", 0], ["1", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["if", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["if", 0], ["x", 0], ["y", 0], ["j", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["print", 0], ["res", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["aa", 0], ["a", 0], ["0", 0], ["bb", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["aa", 0], ["append", 0], ["aa", 0], ["1", 0], ["a", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["bb", 0], ["append", 0], ["bb", 0], ["1", 0], ["b", 0], ["i", 0], ["a1", 0], ["set", 0], ["aa", 0], ["a2", 0], ["set", 0], ["bb", 0], ["if", 0], ["sum", 0], ["a", 0], ["sum", 0], ["b", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["a1", 0], ["intersection", 0], ["a2", 0], ["input", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["as", 0], ["pp", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["as", 0], ["cc", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["as", 0], ["ccd", 0], ["from", 0], ["random", 0], ["import", 0], ["randint", 0], ["as", 0], ["rd", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["as", 0], ["bl", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["a", 0], ["set", 0], ["a", 0], ["b", 0], ["set", 0], ["b", 0], ["ans", 0], ["len", 0], ["a", 0], ["intersection", 0], ["b", 0], ["if", 0], ["ans", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["sum", 0], ["b", 0], ["print", 0], ["1", 0], ["else", 0], ["l", 0], ["0", 0], ["while", 0], ["a", 0], ["or", 0], ["b", 0], ["if", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["del", 0], ["a", 0], ["1", 0], ["del", 0], ["b", 0], ["1", 0], ["l", 0], ["1", 0], ["elif", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["del", 0], ["a", 0], ["1", 0], ["else", 0], ["b", 0], ["2", 0], ["b", 0], ["1", 0], ["del", 0], ["b", 0], ["1", 0], ["print", 0], ["l", 0], ["def", 0], ["go", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["i", 0], ["0", 0], ["so", 0], ["far", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["so", 0], ["far", 0], ["j", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["so", 0], ["far", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["m", 0], ["and", 0], ["so", 0], ["far", 0], ["j", 0], ["m", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["i", 0], ["so", 0], ["far", 0], ["i", 0], ["j", 0], ["so", 0], ["far", 0], ["j", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["so", 0], ["far", 0], ["i", 0], ["i", 0], ["so", 0], ["far", 0], ["j", 0], ["j", 0], ["else", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["if", 0], ["so", 0], ["far", 0], ["j", 0], ["1", 0], ["m", 0], ["b", 0], ["j", 0], ["b", 0], ["so", 0], ["far", 0], ["j", 0], ["1", 0], ["so", 0], ["far", 0], ["j", 0], ["1", 0], ["b", 0], ["so", 0], ["far", 0], ["j", 0], ["none", 0], ["else", 0], ["break", 0], ["else", 0], ["if", 0], ["so", 0], ["far", 0], ["i", 0], ["1", 0], ["n", 0], ["a", 0], ["i", 0], ["a", 0], ["so", 0], ["far", 0], ["i", 0], ["1", 0], ["so", 0], ["far", 0], ["i", 0], ["1", 0], ["a", 0], ["so", 0], ["far", 0], ["i", 0], ["none", 0], ["else", 0], ["break", 0], ["if", 0], ["sum", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["is", 0], ["not", 0], ["none", 0], ["sum", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["if", 0], ["i", 0], ["is", 0], ["not", 0], ["none", 0], ["return", 0], ["1", 0], ["return", 0], ["len", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["is", 0], ["not", 0], ["none", 0], ["print", 0], ["go", 0], ["n1", 0], ["int", 0], ["input", 0], ["a1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n2", 0], ["int", 0], ["input", 0], ["a2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n1", 0], ["n2", 0], ["a1", 0], ["a2", 0], ["a2", 0], ["a1", 0], ["if", 0], ["sum", 0], ["a1", 0], ["sum", 0], ["a2", 0], ["print", 0], ["1", 0], ["else", 0], ["c", 0], ["1", 0], ["f", 0], ["0", 0], ["s", 0], ["0", 0], ["c1", 0], ["a1", 0], ["f", 0], ["c2", 0], ["a2", 0], ["s", 0], ["while", 0], ["s", 0], ["1", 0], ["len", 0], ["a2", 0], ["and", 0], ["f", 0], ["1", 0], ["len", 0], ["a1", 0], ["if", 0], ["c1", 0], ["c2", 0], ["f", 0], ["1", 0], ["s", 0], ["1", 0], ["c", 0], ["1", 0], ["c1", 0], ["a1", 0], ["f", 0], ["c2", 0], ["a2", 0], ["s", 0], ["elif", 0], ["c1", 0], ["c2", 0], ["s", 0], ["1", 0], ["c2", 0], ["a2", 0], ["s", 0], ["else", 0], ["f", 0], ["1", 0], ["c1", 0], ["a1", 0], ["f", 0], ["print", 0], ["c", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYour game development studio, Ad Hoc Entertainment, is currently working on a billiards-based app they’re calling Pool Shark. Players face a sequence of increasingly devious pool puzzles in which they need to carefully position and aim a single billiards shot to sink multiple pool balls.\n\nYou’ve just done the first round of user testing and the feedback is terrible — players complain that the physics of your pool game is neither fun nor intuitive. After digging into it, you realize that the problem isn’t that your physics code is bad, but rather that most people just don’t have much intuition about how physics works. Fortunately, no one requires your physics to be realistic. After this liberating realization, your team experiments with a few models, eventually settling on the following rule for how to resolve pool-ball collisions:\n\nWhen a moving pool ball B hits a stationary ball A, A begins moving in the direction given by the vector from the center of B to the center of A at the time of the collision. Ball B’s new velocity vector is B’s original vector reflected across A’s new vector (Figure H.1). Note that A’s resulting vector is what real physics predicts, but B’s is not (unless A is glued to the table or has infinite mass). For the purposes of this problem, the speed at which the balls move is irrelevant.\n\n \n\n\nFigure H.1 \n\nFigure H.2\n\nThis actually allows for more interesting challenges, but requires new code to determine whether a particular level is feasible. You’ve been tasked with solving a very particular case:\n\nThree balls labelled $1$, $2$, and $3$ are placed on a table with width $w$ and length $l$ (Figure H.2). The player must place the cue ball somewhere on a dashed line lying $h$ units above the bottom edge of the table. The goal is to pick a distance $d$ from the left side, and an angle $\\theta $ such that when the cue ball is shot, the following events happen:\n - The cue ball strikes ball $1$, and then ricochets into ball $2$, sinking ball $2$ in the top left hole.\n - Ball $1$, having been struck by the cue ball, hits ball $3$, sinking ball $3$ in the top right hole.\n\nFor simplicity, assume that sinking a ball requires the center of the ball to pass directly over the center of the hole. Further assume that the table has no sides — a ball that goes out of the $w$-by-$l$ region simply falls into a digital abyss — and thus you don’t need to worry about balls colliding with the table itself.\n\nYou need to write a program that, given values for $w$, $l$, $h$, the position of balls $1$–$3$, and the radius $r$ of the balls, determines whether the trick shot is possible.\n\n-----Input-----\nThe input begins with a line containing two positive integers $w$ $l$, the width and length of the pool table, where $w, l \\leq 120$. The left hole is at location $(0,l)$ and the right hole is at location $(w,l)$.\n\nThe next line will contain 8 positive integers $r$ $x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $h$, where $r \\leq 5$ is the radius of all the balls (including the cue ball), $x_ i$ $y_ i$ is the location of ball $i,1 \\leq i \\leq 3$, and $h$ is the distance the dashed line is from the front of the pool table (see the figure above, where $r \\leq h \\leq (1/2)l$). No two balls will ever overlap, though they may touch at a point, and all balls will lie between the dashed line and the back of the table. All balls will lie completely on the table, and the cue ball must also lie completely on the table (otherwise the shot is impossible).\n\n-----Output-----\nFor each test case, display the distance $d$ to place the ball on the dashed line and the angle $\\theta $ to shoot the ball, or the word “impossible” if the trick shot cannot be done. Output $\\theta $ in degrees, and round both $d$ and $\\theta $ to the nearest hundredth. Always show two digits after the decimal point, even if the digits are zero.\n\n-----Examples-----\nSample Input:\n20 30\n2 10 20 2 24 18 28 10\nSample Output:\n12.74 127.83\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5057"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5057", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["your", 2], ["game", 2], ["development", 2], ["studio", 2], ["ad", 2], ["hoc", 2], ["entertainment", 2], ["is", 2], ["currently", 2], ["working", 2], ["on", 2], ["a", 2], ["billiards", 2], ["based", 2], ["app", 2], ["they’re", 2], ["calling", 2], ["pool", 2], ["shark", 2], ["players", 2], ["face", 2], ["a", 2], ["sequence", 2], ["of", 2], ["increasingly", 2], ["devious", 2], ["pool", 2], ["puzzles", 2], ["in", 2], ["which", 2], ["they", 2], ["need", 2], ["to", 2], ["carefully", 2], ["position", 1], ["and", 1], ["aim", 1], ["a", 1], ["single", 1], ["billiards", 1], ["shot", 1], ["to", 1], ["sink", 1], ["multiple", 1], ["pool", 1], ["balls", 1], ["you’ve", 1], ["just", 1], ["done", 1], ["the", 1], ["first", 1], ["round", 1], ["of", 1], ["user", 1], ["testing", 1], ["and", 1], ["the", 1], ["feedback", 1], ["is", 1], ["terrible", 1], ["—", 1], ["players", 1], ["complain", 1], ["that", 1], ["the", 1], ["physics", 1], ["of", 1], ["your", 1], ["pool", 1], ["game", 1], ["is", 1], ["neither", 1], ["fun", 1], ["nor", 1], ["intuitive", 1], ["after", 1], ["digging", 1], ["into", 1], ["it", 1], ["you", 1], ["realize", 1], ["that", 1], ["the", 1], ["problem", 1], ["isn’t", 1], ["that", 1], ["your", 1], ["physics", 1], ["code", 1], ["is", 1], ["bad", 1], ["but", 1], ["rather", 1], ["that", 1], ["most", 1], ["people", 1], ["just", 1], ["don’t", 1], ["have", 1], ["much", 1], ["intuition", 1], ["about", 1], ["how", 1], ["physics", 1], ["works", 1], ["fortunately", 1], ["no", 1], ["one", 1], ["requires", 1], ["your", 1], ["physics", 1], ["to", 1], ["be", 1], ["realistic", 1], ["after", 1], ["this", 1], ["liberating", 1], ["realization", 1], ["your", 1], ["team", 1], ["experiments", 1], ["with", 1], ["a", 1], ["few", 1], ["models", 1], ["eventually", 1], ["settling", 1], ["on", 1], ["the", 1], ["following", 1], ["rule", 1], ["for", 1], ["how", 1], ["to", 1], ["resolve", 1], ["pool", 1], ["ball", 1], ["collisions", 1], ["when", 2], ["a", 2], ["moving", 2], ["pool", 2], ["ball", 2], ["b", 2], ["hits", 2], ["a", 2], ["stationary", 2], ["ball", 2], ["a", 2], ["a", 2], ["begins", 2], ["moving", 2], ["in", 2], ["the", 2], ["direction", 2], ["given", 2], ["by", 2], ["the", 2], ["vector", 2], ["from", 2], ["the", 2], ["center", 2], ["of", 2], ["b", 2], ["to", 2], ["the", 2], ["center", 2], ["of", 2], ["a", 2], ["at", 2], ["the", 2], ["time", 2], ["of", 2], ["the", 2], ["collision", 2], ["ball", 2], ["b’s", 2], ["new", 2], ["velocity", 2], ["vector", 2], ["is", 2], ["b’s", 2], ["original", 2], ["vector", 2], ["reflected", 2], ["across", 2], ["a’s", 2], ["new", 2], ["vector", 2], ["figure", 2], ["h", 2], ["1", 2], ["note", 2], ["that", 2], ["a’s", 2], ["resulting", 2], ["vector", 2], ["is", 2], ["what", 2], ["real", 2], ["physics", 2], ["predicts", 2], ["but", 2], ["b’s", 2], ["is", 2], ["not", 2], ["unless", 2], ["a", 2], ["is", 2], ["glued", 2], ["to", 2], ["the", 2], ["table", 2], ["or", 2], ["has", 2], ["infinite", 2], ["mass", 2], ["for", 2], ["the", 2], ["purposes", 2], ["of", 1], ["this", 1], ["problem", 1], ["the", 0], ["speed", 0], ["at", 0], ["which", 0], ["the", 0], ["balls", 0], ["move", 0], ["is", 0], ["irrelevant", 0], ["figure", 0], ["h", 0], ["1", 0], ["figure", 0], ["h", 0], ["2", 0], ["this", 1], ["actually", 1], ["allows", 1], ["for", 1], ["more", 1], ["interesting", 1], ["challenges", 1], ["but", 1], ["requires", 1], ["new", 1], ["code", 1], ["to", 1], ["determine", 1], ["whether", 1], ["a", 1], ["particular", 1], ["level", 1], ["is", 1], ["feasible", 1], ["you’ve", 1], ["been", 1], ["tasked", 1], ["with", 1], ["solving", 1], ["a", 1], ["very", 1], ["particular", 1], ["case", 1], ["three", 1], ["balls", 1], ["labelled", 1], ["1", 1], ["2", 1], ["and", 1], ["3", 1], ["are", 1], ["placed", 1], ["on", 1], ["a", 1], ["table", 1], ["with", 1], ["width", 1], ["w", 1], ["and", 1], ["length", 1], ["l", 1], ["figure", 1], ["h", 1], ["2", 1], ["the", 1], ["player", 1], ["must", 1], ["place", 1], ["the", 1], ["cue", 1], ["ball", 1], ["somewhere", 1], ["on", 1], ["a", 1], ["dashed", 1], ["line", 1], ["lying", 1], ["h", 1], ["units", 1], ["above", 1], ["the", 1], ["bottom", 1], ["edge", 1], ["of", 1], ["the", 1], ["table", 1], ["the", 1], ["goal", 1], ["is", 1], ["to", 1], ["pick", 1], ["a", 1], ["distance", 1], ["d", 1], ["from", 1], ["the", 1], ["left", 1], ["side", 1], ["and", 1], ["an", 1], ["angle", 1], ["theta", 1], ["such", 1], ["that", 1], ["when", 1], ["the", 1], ["cue", 1], ["ball", 1], ["is", 1], ["shot", 1], ["the", 1], ["following", 1], ["events", 1], ["happen", 1], ["the", 2], ["cue", 2], ["ball", 2], ["strikes", 2], ["ball", 2], ["1", 2], ["and", 2], ["then", 2], ["ricochets", 2], ["into", 2], ["ball", 2], ["2", 2], ["sinking", 2], ["ball", 2], ["2", 2], ["in", 2], ["the", 2], ["top", 2], ["left", 2], ["hole", 2], ["ball", 2], ["1", 2], ["having", 2], ["been", 2], ["struck", 2], ["by", 2], ["the", 2], ["cue", 2], ["ball", 2], ["hits", 2], ["ball", 2], ["3", 2], ["sinking", 2], ["ball", 2], ["3", 2], ["in", 2], ["the", 2], ["top", 2], ["right", 2], ["hole", 2], ["for", 2], ["simplicity", 2], ["assume", 2], ["that", 2], ["sinking", 2], ["a", 2], ["ball", 2], ["requires", 2], ["the", 2], ["center", 2], ["of", 2], ["the", 2], ["ball", 2], ["to", 2], ["pass", 2], ["directly", 2], ["over", 2], ["the", 2], ["center", 2], ["of", 2], ["the", 2], ["hole", 2], ["further", 2], ["assume", 2], ["that", 2], ["the", 2], ["table", 2], ["has", 2], ["no", 2], ["sides", 2], ["—", 2], ["a", 2], ["ball", 2], ["that", 2], ["goes", 2], ["out", 2], ["of", 2], ["the", 2], ["w", 2], ["by", 2], ["l", 2], ["region", 2], ["simply", 2], ["falls", 2], ["into", 2], ["a", 2], ["digital", 2], ["abyss", 2], ["—", 2], ["and", 2], ["thus", 2], ["you", 2], ["don’t", 2], ["need", 2], ["to", 2], ["worry", 2], ["about", 2], ["balls", 2], ["colliding", 2], ["with", 2], ["the", 2], ["table", 2], ["itself", 2], ["you", 2], ["need", 2], ["to", 2], ["write", 2], ["a", 2], ["program", 1], ["that", 1], ["given", 1], ["values", 1], ["for", 1], ["w", 1], ["l", 1], ["h", 1], ["the", 1], ["position", 1], ["of", 1], ["balls", 1], ["1", 1], ["–", 1], ["3", 1], ["and", 2], ["the", 2], ["radius", 0], ["r", 0], ["of", 0], ["the", 0], ["balls", 0], ["determines", 0], ["whether", 0], ["the", 0], ["trick", 0], ["shot", 0], ["is", 0], ["possible", 0], ["input", 0], ["the", 2], ["input", 2], ["begins", 2], ["with", 2], ["a", 2], ["line", 2], ["containing", 2], ["two", 2], ["positive", 2], ["integers", 2], ["w", 2], ["l", 1], ["the", 1], ["width", 1], ["and", 1], ["length", 1], ["of", 1], ["the", 1], ["pool", 1], ["table", 1], ["where", 1], ["w", 1], ["l", 1], ["leq", 1], ["120", 2], ["the", 2], ["left", 2], ["hole", 2], ["is", 2], ["at", 2], ["location", 2], ["0", 2], ["l", 2], ["and", 2], ["the", 2], ["right", 2], ["hole", 2], ["is", 2], ["at", 2], ["location", 1], ["w", 1], ["l", 1], ["the", 1], ["next", 1], ["line", 1], ["will", 1], ["contain", 1], ["8", 1], ["positive", 1], ["integers", 1], ["r", 10], ["x", 4], ["1", 1], ["y", 1], ["1", 1], ["x", 1], ["2", 1], ["y", 1], ["2", 1], ["x", 1], ["3", 1], ["y", 1], ["3", 1], ["h", 1], ["where", 1], ["r", 1], ["leq", 1], ["5", 1], ["is", 1], ["the", 1], ["radius", 1], ["of", 1], ["all", 1], ["the", 1], ["balls", 1], ["including", 1], ["the", 1], ["cue", 1], ["ball", 1], ["x", 1], ["i", 1], ["y", 1], ["i", 1], ["is", 1], ["the", 1], ["location", 1], ["of", 1], ["ball", 1], ["i", 1], ["1", 1], ["leq", 1], ["i", 1], ["leq", 1], ["3", 2], ["and", 2], ["h", 2], ["is", 2], ["the", 2], ["distance", 2], ["the", 2], ["dashed", 2], ["line", 2], ["is", 2], ["from", 2], ["the", 1], ["front", 1], ["of", 1], ["the", 1], ["pool", 1], ["table", 1], ["see", 1], ["the", 1], ["figure", 1], ["above", 1], ["where", 1], ["r", 1], ["leq", 1], ["h", 1], ["leq", 1], ["1", 2], ["2", 2], ["l", 2], ["no", 2], ["two", 2], ["balls", 2], ["will", 2], ["ever", 2], ["overlap", 2], ["though", 2], ["they", 2], ["may", 2], ["touch", 2], ["at", 2], ["a", 2], ["point", 2], ["and", 2], ["all", 2], ["balls", 2], ["will", 2], ["lie", 2], ["between", 2], ["the", 2], ["dashed", 2], ["line", 2], ["and", 2], ["the", 2], ["back", 2], ["of", 2], ["the", 2], ["table", 2], ["all", 2], ["balls", 2], ["will", 2], ["lie", 2], ["completely", 2], ["on", 2], ["the", 2], ["table", 2], ["and", 2], ["the", 2], ["cue", 2], ["ball", 2], ["must", 0], ["also", 0], ["lie", 0], ["completely", 0], ["on", 0], ["the", 0], ["table", 0], ["otherwise", 0], ["the", 0], ["shot", 0], ["is", 0], ["impossible", 0], ["output", 0], ["for", 2], ["each", 2], ["test", 2], ["case", 2], ["display", 2], ["the", 2], ["distance", 2], ["d", 1], ["to", 1], ["place", 1], ["the", 1], ["ball", 1], ["on", 1], ["the", 1], ["dashed", 1], ["line", 1], ["and", 1], ["the", 1], ["angle", 1], ["theta", 1], ["to", 2], ["shoot", 2], ["the", 2], ["ball", 2], ["or", 1], ["the", 1], ["word", 1], ["“impossible”", 1], ["if", 1], ["the", 1], ["trick", 1], ["shot", 1], ["cannot", 1], ["be", 1], ["done", 1], ["output", 1], ["theta", 1], ["in", 1], ["degrees", 1], ["and", 1], ["round", 1], ["both", 1], ["d", 1], ["and", 1], ["theta", 1], ["to", 2], ["the", 2], ["nearest", 2], ["hundredth", 2], ["always", 2], ["show", 2], ["two", 0], ["digits", 0], ["after", 0], ["the", 0], ["decimal", 0], ["point", 0], ["even", 0], ["if", 0], ["the", 0], ["digits", 0], ["are", 0], ["zero", 0], ["examples", 0], ["sample", 0], ["input", 0], ["20", 0], ["30", 0], ["2", 0], ["10", 0], ["20", 0], ["2", 0], ["24", 0], ["18", 0], ["28", 0], ["10", 0], ["sample", 0], ["output", 0], ["12", 0], ["74", 0], ["127", 0], ["83", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9028727770177839, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6796853625170999, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9528936742934051, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.917900403768506, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9028727770177839, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6796853625170999, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9528936742934051, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.917900403768506, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nSanta Claus decided to disassemble his keyboard to clean it. After he returned all the keys back, he suddenly realized that some pairs of keys took each other's place! That is, Santa suspects that each key is either on its place, or on the place of another key, which is located exactly where the first key should be. \n\nIn order to make sure that he's right and restore the correct order of keys, Santa typed his favorite patter looking only to his keyboard.\n\nYou are given the Santa's favorite patter and the string he actually typed. Determine which pairs of keys could be mixed. Each key must occur in pairs at most once.\n\n\n-----Input-----\n\nThe input consists of only two strings s and t denoting the favorite Santa's patter and the resulting string. s and t are not empty and have the same length, which is at most 1000. Both strings consist only of lowercase English letters.\n\n\n-----Output-----\n\nIf Santa is wrong, and there is no way to divide some of keys into pairs and swap keys in each pair so that the keyboard will be fixed, print «-1» (without quotes).\n\nOtherwise, the first line of output should contain the only integer k (k ≥ 0) — the number of pairs of keys that should be swapped. The following k lines should contain two space-separated letters each, denoting the keys which should be swapped. All printed letters must be distinct.\n\nIf there are several possible answers, print any of them. You are free to choose the order of the pairs and the order of keys in a pair.\n\nEach letter must occur at most once. Santa considers the keyboard to be fixed if he can print his favorite patter without mistakes.\n\n\n-----Examples-----\nInput\nhelloworld\nehoolwlroz\n\nOutput\n3\nh e\nl o\nd z\n\nInput\nhastalavistababy\nhastalavistababy\n\nOutput\n0\n\nInput\nmerrychristmas\nchristmasmerry\n\nOutput\n-1\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["a = input()\nb = input()\n\nsymbols = {}\npairs = []\n\nfor i in range(len(a)):\n\tif a[i] in symbols:\n\t\tif symbols[a[i]] != b[i]:\n\t\t\tprint('-1')\n\t\t\tbreak\n\telif b[i] in symbols:\n\t\tif symbols[b[i]] != a[i]:\n\t\t\tprint('-1')\n\t\t\tbreak\n\telse:\n\t\tsymbols[a[i]] = b[i]\n\t\tsymbols[b[i]] = a[i]\n\t\tif a[i] != b[i]:\n\t\t\tpairs.append((a[i], b[i]))\nelse:\n\tprint(len(pairs))\n\tfor elem in pairs:\n\t\tprint(elem[0], elem[1])\n", "s1 = input()\ns2 = input()\nused = ['$'] * 256\nfor i in range(len(s1)):\n\tc1 = s1[i]\n\tc2 = s2[i]\n\tif (c1 == c2):\n\t\tif (used[ord(c1)] == '$' or used[ord(c1)] == '%') and (used[ord(c2)] == '$' or used[ord(c2)] == '%'):\n\t\t\tused[ord(c1)] = '%'\n\t\t\tused[ord(c2)] = '%'\n\t\telse:\n\t\t\tprint(-1)\n\t\t\treturn\n\telse:\n\t\tif (used[ord(c1)] == '$' or used[ord(c1)] == c2) and (used[ord(c2)] == '$' or used[ord(c2)] == c1):\n\t\t\tused[ord(c1)] = c2\n\t\t\tused[ord(c2)] = c1\n\t\telse:\n\t\t\tprint(-1)\n\t\t\treturn\nans = []\nfor i in range(256):\n\tif (used[i] == '$' or used[i] == '%'):\n\t\tcontinue\n\telse:\n\t\tif ord(used[i]) < i:\n\t\t\tans.append([used[i], chr(i)])\nprint(len(ans))\nfor elem in ans:\n\tprint(elem[0], elem[1])\n", "s=input()\ns2=input()\na=[set() for i in range(97)]\nfor i in range(len(s)):\n\ta[ord(s[i])-97].add(ord(s2[i])-97)\n\ta[ord(s2[i])-97].add(ord(s[i])-97)\nif max([len(i) for i in a])>1:\n\tprint(-1)\nelse:\n\tt=set()\n\tfor i in range(26):\n\t\tif a[i]!=set():\n\t\t\to=tuple(sorted([chr(i+97),chr(list(a[i])[0]+97)]))\n\t\t\tif o[0]!=o[1]:\n\t\t\t\tt.add(o)\n\tprint(len(t))\n\tfor i in t:\n\t\tprint(i[0],i[1])\n", "def chk(l1, l2, known_keys):\n\tif l1 not in known_keys and l2 not in known_keys:\n\t\tknown_keys[l1] = l2\n\t\tknown_keys[l2] = l1\n\telif (l1 in known_keys and known_keys[l1] != l2) or (l2 in known_keys and known_keys[l2] != l1):\n\t\traise ValueError(\"bad kbd\")\n\ndef m():\n\tkeys = {}\n\ts1 = input()\n\ts2 = input()\n\ttry:\n\t\tfor i in map(lambda x, y: chk(x, y, keys), s1, s2):\n\t\t\tpass\n\texcept ValueError:\n\t\tprint(-1)\n\t\treturn\n\tk1 = list([x for x in keys if ord(x) < ord(keys[x])])\n\tprint(len(k1))\n\tfor k in k1:\n\t\tprint(k, keys[k])\n\ndef __starting_point():\n\tm()\n\n\n__starting_point()\n", "import math\ndef main():\n\ts = str(input())\n\tt = str(input())\n\tst_dict = dict()\n\tfor i in range(len(t)):\n\t\tif s[i] != t[i]:\n\t\t\tif s[i] in list(st_dict.keys()) and st_dict[s[i]] != t[i]:\n\t\t\t\tprint(-1)\n\t\t\t\treturn\n\t\t\tst_dict[s[i]] = t[i]\n\t\t\tst_dict[t[i]] = s[i]\n\n\tresult = ''\n\tfor i in range(len(t)):\n\t\tif t[i] in list(st_dict.keys()):\n\t\t\tresult += st_dict[t[i]]\n\t\telse:\n\t\t\tresult += t[i]\n\n\tif result == s:\n\t\tprint(int(len(list(st_dict.keys()))/2))\n\t\tfor key in list(st_dict.keys()):\n\t\t\tif key > st_dict[key]:\n\t\t\t\tprint('{} {}'.format(key, st_dict[key]))\n\telse:\n\t\tprint(-1)\nmain()\n", "a = input()\nb = input()\nans = {}\nt = True\nfor i in range(len(a)):\n\tif a[i] in ans.keys():\n\t\tif ans[a[i]] != b[i]:\n\t\t\t\tt = False\n\tif b[i] in ans.keys():\n\t\tif ans[b[i]] != a[i]:\n\t\t\t\tt = False\n\telse:\n\t\tans[a[i]] = b[i]\n\t\tans[b[i]] = a[i]\n\nif t:\n\tan = []\n\tfor i in ans.keys():\n\t\tif i != ans[i] and i not in an and ans[i] not in an:\n\t\t\tan.append(i) \n\t\t\tan.append(ans[i])\n\tprint(len(an)//2)\n\tfor i in range(0, len(an) - 1, 2):\n\t\tprint(an[i], an[i + 1])\nelse:\n\tprint(-1)\n", "s1 = input()\ns2 = input()\n\nd = {}\nd2 = {}\n\nflag = False\n\nfor i in range(len(s1)):\n\tif s1[i] in d:\n\t\tif d[s1[i]] != s2[i]:\n\t\t\tflag = True\n\t\t\tbreak\n\n\tif s2[i] in d:\n\t\tif d[s2[i]] != s1[i]:\n\t\t\tflag = True\n\t\t\tbreak\n\telse:\n\t\td[s1[i]] = s2[i]\n\t\td[s2[i]] = s1[i]\n\t\tif s1[i] != s2[i]:\n\t\t\td2[s1[i]] = s2[i]\n\nif flag:\n\tprint(-1)\nelse:\n\tl = len(d2)\n\tif not l:\n\t\tprint(0)\n\telse:\n\t\tprint(l)\n\t\tfor item in d2:\n\t\t\tprint(item, d2[item])\n\t\t\t\n\t\t\t\n", "s1 = input()\ns2 = input()\nd = dict()\nfor i in range(len(s1)):\n\tif s2[i] != s1[i]:\n\t\tres1 = d.get(s1[i], -1)\n\t\tres2 = d.get(s2[i], -1)\n\t\tif (res1 == -1 and res2 == -1) or (res1 == s2[i] and res2 == s1[i]):\n\t\t\td[s1[i]] = s2[i]\n\t\t\td[s2[i]] = s1[i]\n\t\telse:\n\t\t\tprint(-1)\n\t\t\treturn\n\tif s2[i] == s1[i]:\n\t\tres = d.get(s1[i], -1)\n\t\tif res != -1 and res != s1[i]:\n\t\t\tprint(-1)\n\t\t\treturn\n\t\td[s1[i]] = s1[i]\nans = len(d)\nfor i in d:\n\tif i == d[i]:\n\t\tans -= 1\nprint(ans // 2)\nused = dict()\nfor i in d:\n\tused[i] = 0\nfor i in d:\n\tif not used[i] and i != d[i]:    \n\t\tprint(i, d[i])\n\t\tused[d[i]] = 1\n", "s = input()\nt = input()\nlet = {}\nprinted = []\nf = True\nans = 0\nif s == t:\n\tprint(0)\nelse:\n\tfor i in range(len(s)):\n\t\tif s[i] in let:\n\t\t\tif t[i] != let[s[i]]:\n\t\t\t\tprint(-1)\n\t\t\t\tf = False\n\t\t\t\tbreak\n\t\telif t[i] in let:\n\t\t\tif s[i] != let[t[i]]:\n\t\t\t\tprint(-1)\n\t\t\t\tf = False\n\t\t\t\tbreak\n\t\telse:\n\t\t\tif s[i] != t[i] and (s[i] not in let or t[i] not in let):\n\t\t\t\tans += 1\n\t\t\tlet[s[i]] = t[i]\n\t\t\tlet[t[i]] = s[i]\n\tif f:\n\t\tprint(ans)\n\t\tfor l in let:\n\t\t\tif let[l] != l and let[l] not in printed:\n\t\t\t\tprint(let[l], l)\n\t\t\t\tprinted.append(l)\n", "def main():\n\tabra, shacked = str(input()), str(input())\n\tdictionary = dict()\n\tfor i in range(len(shacked)):\n\t\tif not (shacked[i] == abra[i]):\n\t\t\tif abra[i] in list(dictionary.values()) and dictionary[abra[i]] != shacked[i]:\n\t\t\t\tprint(-1)\n\t\t\t\treturn\n\t\t\tdictionary[abra[i]] = shacked[i]\n\t\t\tdictionary[shacked[i]] = abra[i]\n \n\tmaking = ''\n\tfor i in range(len(shacked)):\n\t\tif shacked[i] in list(dictionary.values()):\n\t\t\tmaking += dictionary[shacked[i]]\n\t\telse:\n\t\t\tmaking += shacked[i]\n \n\tif making != abra:\n\t\tprint(-1)\n\t\treturn\n \n\tprint(int(len(list(dictionary.keys())) / 2))\n\tfor key in list(dictionary.values()):\n\t\tif key < dictionary[key]:\n\t\t\tprint(key, dictionary[key])\nmain()\n", "s = input()\ns1 = input()\nmistake = False\nd = dict()\nans = []\n\nfor i in range(len(s)):\n\tif s[i] != s1[i]:\n\t\tif s[i] in d and s1[i] in d:\n\t\t\tif not (d[s[i]] == s1[i] and d[s1[i]] == s[i]):\n\t\t\t\tmistake = True\n\t\t\t\tbreak\n\n\t\telif s[i] in d or s1[i] in d:\n\t\t\t\tmistake = True\n\t\t\t\tbreak\n\t\telse:\n\t\t\td[s[i]] = s1[i]\n\t\t\td[s1[i]] = s[i]\n\telse:\n\t\tif s[i] in d and d[s[i]] != s[i]:\n\t\t\tmistake = True\n\t\t\tbreak\n\t\td[s[i]] = s[i]\n\t\t\nif mistake:\n\tprint(-1)\nelse:\n\tans = []\n\tlast = set()\n\tfor elem in d:\n\t\tif elem not in last and elem != d[elem]:\n\t\t\tans.append([elem, d[elem]])\n\t\tlast.add(elem)\n\t\tlast.add(d[elem])\n\t\t\n\tprint(len(ans))\n\tfor elem in ans:\n\t\tprint(*elem)\n\t\t\n", "q=input()\nw=input()\nl=len(q)\na=[]\ns=[0 for i in range(0,130)]\nt=[]\nfor i in range(0,l):\n\tif q[i]==w[i]:\n\t\tt.append(q[i])\nfor i in range(0,l):\n\tif q[i]!=w[i]:\n\t\ta.append([q[i],w[i]])\n\t\ts[ord(q[i])]+=1\n\t\ts[ord(w[i])]+=1\n\t\tc=q[i]\n\t\tif (q[i] in t) | (w[i] in t):\n\t\t\ts[0]=10\n\t\tq=q.replace(q[i],w[i])\n\t\tw=w.replace(c,w[i])\nif max(s)>1:\n\tprint(-1)\nelse:\n\tprint(len(a))\n\tfor i in a:\n\t\tprint(i[0],i[1])\n", "correct = input()\nincorrect = input()\n\nother = dict()#to correct from incorrect\n\nfor i in range(ord('a'), ord('z') + 1):\n\tother[chr(i)] = chr(i)\n\t#print(i)\n\ncan = True\n\nfor i in range(len(correct)):\n\tif other[correct[i]] == incorrect[i]:\n\t\tcontinue\n\t\n\tif other[correct[i]] != correct[i]:\n\t\tcan = False\n\t\tbreak\n\t\n\tif other[incorrect[i]] != incorrect[i]:\n\t\tcan = False\n\t\tbreak\n\t\n\tother[correct[i]] = incorrect[i]\n\tother[incorrect[i]] = correct[i]\n  \nif can:\n\tfor i in range(len(correct)):\n\t\tif other[correct[i]] != incorrect[i]:\n\t\t\tcan = False\n\t\t\tbreak\nif not can:\n\tprint(-1)\nelse:\n\tans = set()\n\tfor i in range(ord('a'), ord('z') + 1):\n\t\tif other[chr(i)] != chr(i):\n\t\t\ta, b = i, ord(other[chr(i)])\n\t\t\tans.add((chr(min(a, b)), chr(max(a, b))))\n\t\t\t\n\tprint(len(ans))\n\tfor x in ans:\n\t\tprint(*x)\n\n", "a = input()\nb = input()\nalph = [0] * 26\nfor i in range(26):\n\talph[i] = chr(97 + i)\nans = []\nfor i in range(len(a)):\n\tif a[i] != alph[ord(b[i]) - 97]:\n\t\tif (alph[ord(a[i]) - 97] == a[i]) and (alph[ord(b[i]) - 97] == b[i]):\n\t\t\talph[ord(a[i]) - 97] = b[i]\n\t\t\talph[ord(b[i]) - 97] = a[i]\n\t\t\tans.append((a[i], b[i]))\n\t\telse:\n\t\t\tprint(-1)\n\t\t\treturn\nfor i in range(len(b)):\n\tif a[i] != alph[ord(b[i]) - 97]:\n\t\tprint(-1)\n\t\treturn\nprint(len(ans))\nfor i in range(len(ans)):\n\tprint(ans[i][0], ans[i][1])\n", "s = input()\nt = input()\nd1 = {}\nd2 = {}\nimp = False\nfor i in range(0, len(t)):\n\tif d1.get(s[i], '') != '' and d1[s[i]] != t[i]:\n\t\timp = True\n\t\tbreak\n\td1[s[i]] = t[i]\n\tif d2.get(t[i], '') != '' and d2[t[i]] != s[i]:\n\t\timp = True\n\t\tbreak\n\td2[t[i]] = s[i]\n\n\nfor e in d1:\n\tif d1.get(d1[e], '') != '' and d1.get(d1[e], '') != e:\n\t\timp = True\n\t\tbreak\nif imp == True:\n\tprint(-1)\nelse:\n\tswaps = []\n\tfor e in d1:\n\t\tif d1[e] != d2[d1[e]]:\n\t\t\tif not (d1[e], d2[d1[e]]) in swaps and not (d2[d1[e]], d1[e]) in swaps:\n\t\t\t\tswaps.append( (d1[e], d2[d1[e]]))\n\tprint(len(swaps))\n\tfor e in swaps:\n\t\tprint(e[0], e[1])\n", "s1, s2 = input(), input()\nn = len(s1)\nd = dict()\nfor i in range(n):\n\ta = s1[i]\n\tb = s2[i]\n\tif b < a:\n\t\ta, b = b, a\n\tif a not in d and b not in d:\n\t\td[a] = b\n\t\td[b] = a\n\telif ((a in d and b not in d) or (a not in d and b in d)):\n\t\tprint(-1)\n\t\tbreak\n\telif d[a] != b or d[b] != a:\n\t\tprint(-1)\n\t\tbreak\nelse:\n\tk = []\n\tfor i in d.items():\n\t\tif i[0] < i[1]:\n\t\t\tk.append('{} {}'.format(i[0], i[1]))\n\tprint(len(k))\n\tprint(*k, sep='\\n')\n", "s = input()\nt = input()\nletters = dict()\nerr = 0\nans = 0\nanswer = set()\nfor i in range(len(s)):\n\tif ((s[i] in letters) and (letters[s[i]] != t[i])) or ((t[i] in letters) and (letters[t[i]] != s[i])):\n\t\tprint(-1)\n\t\terr = 1\n\t\tbreak\n\telif not (s[i] in letters):\n\t\tletters[s[i]] = t[i]\n\t\tletters[t[i]] = s[i]\n\t\tst = s[i] + ' ' + t[i]\n\t\tif s[i] == t[i]:\n\t\t\tcontinue\n\t\tanswer.add(st)\n\t\tans += 1       \nif err == 0:\n\tprint(ans)\n\tfor st in answer:\n\t\tprint(st)\n", "s = input()\ns1 = input()\nq = set()\nz =set()\nflag=0\nfor i in range(len(s)):\n\tif(s[i]!=s1[i] and (s1[i],s[i]) not in q and (s[i],s1[i])not in q):\n\t\tq.add((s[i],s1[i]))\n\t\tif(s[i] in z or s1[i] in z):\n\t\t\tflag = 1\n\t\tz.add(s[i])\n\t\tz.add(s1[i])\nfor i in range(len(s)):\n\tif(s[i]==s1[i] and s[i] in z):\n\t\tflag = 1\nif(flag):\n\tprint(-1)\nelse:\n\tprint(len(q))\n\tfor item in q:\n\t\tprint(item[0],item[1])\n", "s1, s2 = input(), input()\nalph1, alph2 = [], set()\nans = 0\nfor i in range(len(s1)):\n\tfff = [max(s1[i], s2[i]), min(s1[i], s2[i])]\n\tff = fff not in alph1\n\tif ff and (s1[i] in alph2 or s2[i] in alph2):\n\t\tans = -1\n\t\tbreak\n\telif ff:\n\t\talph1.append(fff)\n\t\tif s1[i] != s2[i]:\n\t\t\tans += 1\n\talph2.add(s1[i])\n\talph2.add(s2[i])\nprint(ans)\nif ans != -1:\n\tfor i in range(len(alph1)):\n\t\tif alph1[i][0] != alph1[i][1]:\n\t\t\tprint(alph1[i][0], alph1[i][1])\n", "s1 = input()\ns2 = input()\nn = len(s1)\nd = dict()\nfor i in range(n):\n\ta = s1[i]\n\tb = s2[i]\n\tif b < a:\n\t\ta, b = b, a\n\tif a not in d and b not in d:\n\t\td[a] = b\n\t\td[b] = a\n\telif (a in d and b not in d) or (a not in d and b in d):\n\t\tprint(-1)\n\t\tbreak\n\telif d[a] != b or d[b] != a:\n\t\tprint(-1)\n\t\tbreak\nelse:\n\tans = []\n\tfor i in list(d.items()):\n\t\tif i[0] < i[1]:\n\t\t\tans.append((i[0], i[1]))\n\tprint(len(ans))\n\tfor elem in ans:\n\t\tprint(*elem)\n", "s=input()\nt=input()\nif s==t:\n\tprint(0)\nelse:\n\tp=[]\n\tw=[]\n\tn=len(s)\n\tk=0\n\tfor i in range(n):\n\t\tif s[i]!=t[i]:\n\t\t\tif s[i] in w or t[i] in w:\n\t\t\t\tprint(-1)\n\t\t\t\tk=-1\n\t\t\t\tbreak\n\t\t\tif s[i]<t[i]:\n\t\t\t\tq=s[i]+t[i]\n\t\t\telse:\n\t\t\t\tq=t[i]+s[i]\n\t\t\tif not (q in p):\n\t\t\t\tfor j in range(k):\n\t\t\t\t\tif (s[i] in p[j]) != (t[i] in p[j]):\n\t\t\t\t\t\tprint(-1)\n\t\t\t\t\t\tk=-1\n\t\t\t\t\t\tbreak\n\t\t\t\tif k>-1:\n\t\t\t\t\tk+=1\n\t\t\t\t\tp.append(q)\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\telse:\n\t\t\tf=True\n\t\t\tfor j in range(k):\n\t\t\t\tif s[i] in p[j]:\n\t\t\t\t\tf=False\n\t\t\tif f:\n\t\t\t\tw.append(s[i])\n\t\t\telse:\n\t\t\t\tk=-1\n\t\t\t\tprint(-1)\n\t\t\t\tbreak\n\t\tif k==-1:\n\t\t\tbreak\n\tif k>0:\n\t\tprint(k)\n\t\tfor i in range(k):\n\t\t\ts=p[i]\n\t\t\tprint(s[0],s[1])\n", "def main():\n\ta = input()\n\tb = input()\n\tkeyboard = dict()\n\tfor i in range(ord(\"a\"), ord(\"z\") + 1):\n\t\tkeyboard[chr(i)] = \" \"\n\tindex = 1\n\tsize = 0\n\tout = \"\"\n\tsize = 0\n\t\n\tfor i in range(len(a)):\n\t\tif a[i] != b[i]:\n\t\t\tif keyboard[a[i]] == \" \" and keyboard[b[i]] == \" \":\n\t\t\t\tkeyboard[a[i]] = b[i]\n\t\t\t\tkeyboard[b[i]] = a[i]\n\t\t\t\tsize += 1\n\t\t\t\tout += a[i] + \" \" + b[i] + \"\\n\"\n\t\t\telif not(keyboard[a[i]] == b[i] and keyboard[b[i]] == a[i]):\n\t\t\t\tprint(-1)\n\t\t\t\treturn 0\n\t\telse:\n\t\t\tif keyboard[a[i]] == \" \":\n\t\t\t\tkeyboard[a[i]] = a[i]\n\t\t\telif keyboard[a[i]] != a[i]:\n\t\t\t\tprint(-1)\n\t\t\t\treturn 0\n\t\n\tprint(size)\n\tif size > 0:\n\t\tprint(out)\n\nmain()\n", "s = input()\ns1 = input()\nd = dict()\nf = True\nfor i in range(len(s)):\n\ta = min(s[i], s1[i])\n\tb = max(s[i], s1[i])\n\tif a != b:\n\t\tif (a in d and d[a] != b) or (b in d and d[b] != a):\n\t\t\tf = False\n\t\t\tbreak\n\t\telse:\n\t\t\td[a] = b\n\t\t\td[b] = a\n\telse:\n\t\tif a in d and d[a] != a:\n\t\t\tf = False\n\t\t\tbreak\n\t\telse:\n\t\t\td[a] = a\nif f:\n\ta = []\n\tfor i in list(d.items()):\n\t\tif i[0] < i[1]:\n\t\t\ta.append((i[0], i[1]))\n\tprint(len(a))\n\tfor i in a:\n\t\tprint(*i)\nelse:\n\tprint(-1)\n", "s, t = input(), input()\nfr = set()\nk = dict()\nl = 0\nfor i in range(len(s)):\n\tfr.add(tuple(sorted([s[i], t[i]])))\n\tif s[i] in k:\n\t\tif k[s[i]] != t[i]:\n\t\t\tprint(-1)\n\t\t\treturn\n\tif t[i] in k:\n\t\tif k[t[i]] != s[i]:\n\t\t\tprint(-1)\n\t\t\treturn\n\tk[t[i]] = s[i]\n\tk[s[i]] = t[i]\nfor i in fr:\n\tif i[0] != i[1]:\n\t\tl += 1\ns1 = [i[0] for i in fr]\ns2 = [i[1] for i in fr]\nprint(l)\nfor i in fr:\n\tif i[0] != i[1]:\n\t\tprint(i[0], i[1])\n", "s = input()\nt = input()\nA = dict()\nans = set()\nper  =0\nfor j in range(len(s)):\n\tif s[j] in A and t[j] in A:\n\t\tif A[s[j]] != t[j] or A[t[j]] != s[j]:\n\t\t\tper = 1\n\t\t\tbreak\n\t\t\n\t\t\t\n\telif t[j] in A and s[j] not in A:\n\t\tper=1\n\t\tbreak\n\telif s[j] in A and t[j] not in A:\n\t\tper=1\n\t\tbreak\n\telse:\n\t\tA[s[j]] = t[j]\n\t\tA[t[j]] = s[j]\n\t\tif s[j] != t[j]:\n\t\t\tif s[j]+t[j] not in ans and t[j]+s[j] not in ans:\n\t\t\t\tans.add(s[j]+t[j])\nif per != 1:\n\tprint(len(ans))\n\tfor j in ans:\n\t\tprint(j[0], j[1])\nelse:\n\tprint(-1)\n"], "id": "id5817"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5817", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["santa", 1], ["claus", 1], ["decided", 1], ["to", 1], ["disassemble", 1], ["his", 1], ["keyboard", 1], ["to", 1], ["clean", 1], ["it", 1], ["after", 1], ["he", 1], ["returned", 1], ["all", 1], ["the", 1], ["keys", 1], ["back", 1], ["he", 1], ["suddenly", 1], ["realized", 1], ["that", 1], ["some", 1], ["pairs", 1], ["of", 1], ["keys", 1], ["took", 1], ["each", 1], ["other", 1], ["s", 1], ["place", 1], ["that", 1], ["is", 1], ["santa", 1], ["suspects", 1], ["that", 1], ["each", 1], ["key", 1], ["is", 1], ["either", 1], ["on", 1], ["its", 1], ["place", 1], ["or", 1], ["on", 1], ["the", 1], ["place", 1], ["of", 1], ["another", 1], ["key", 1], ["which", 1], ["is", 1], ["located", 1], ["exactly", 1], ["where", 1], ["the", 1], ["first", 1], ["key", 1], ["should", 1], ["be", 1], ["in", 1], ["order", 1], ["to", 1], ["make", 1], ["sure", 1], ["that", 1], ["he", 1], ["s", 1], ["right", 1], ["and", 1], ["restore", 1], ["the", 1], ["correct", 1], ["order", 1], ["of", 1], ["keys", 1], ["santa", 1], ["typed", 1], ["his", 1], ["favorite", 1], ["patter", 1], ["looking", 1], ["only", 1], ["to", 1], ["his", 1], ["keyboard", 1], ["you", 1], ["are", 1], ["given", 1], ["the", 1], ["santa", 1], ["s", 1], ["favorite", 1], ["patter", 1], ["and", 1], ["the", 1], ["string", 1], ["he", 1], ["actually", 1], ["typed", 1], ["determine", 1], ["which", 1], ["pairs", 1], ["of", 1], ["keys", 1], ["could", 0], ["be", 0], ["mixed", 0], ["each", 0], ["key", 0], ["must", 0], ["occur", 0], ["in", 0], ["pairs", 0], ["at", 0], ["most", 0], ["once", 0], ["input", 0], ["the", 1], ["input", 1], ["consists", 1], ["of", 1], ["only", 1], ["two", 1], ["strings", 1], ["s", 1], ["and", 1], ["t", 1], ["denoting", 1], ["the", 1], ["favorite", 1], ["santa", 1], ["s", 1], ["patter", 1], ["and", 1], ["the", 1], ["resulting", 1], ["string", 1], ["s", 1], ["and", 1], ["t", 1], ["are", 1], ["not", 1], ["empty", 1], ["and", 1], ["have", 1], ["the", 1], ["same", 1], ["length", 1], ["which", 1], ["is", 0], ["at", 0], ["most", 0], ["1000", 0], ["both", 0], ["strings", 0], ["consist", 0], ["only", 0], ["of", 0], ["lowercase", 0], ["english", 0], ["letters", 0], ["output", 0], ["if", 1], ["santa", 1], ["is", 1], ["wrong", 1], ["and", 1], ["there", 1], ["is", 1], ["no", 1], ["way", 1], ["to", 1], ["divide", 1], ["some", 1], ["of", 1], ["keys", 1], ["into", 1], ["pairs", 1], ["and", 1], ["swap", 1], ["keys", 1], ["in", 1], ["each", 1], ["pair", 1], ["so", 1], ["that", 1], ["the", 1], ["keyboard", 1], ["will", 1], ["be", 1], ["fixed", 1], ["print", 1], ["«", 1], ["1»", 1], ["without", 1], ["quotes", 1], ["otherwise", 1], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["output", 1], ["should", 1], ["contain", 1], ["the", 1], ["only", 1], ["integer", 1], ["k", 1], ["k", 1], ["≥", 1], ["0", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["pairs", 1], ["of", 1], ["keys", 1], ["that", 1], ["should", 1], ["be", 1], ["swapped", 1], ["the", 1], ["following", 1], ["k", 1], ["lines", 1], ["should", 1], ["contain", 1], ["two", 1], ["space", 1], ["separated", 1], ["letters", 1], ["each", 1], ["denoting", 1], ["the", 1], ["keys", 1], ["which", 1], ["should", 1], ["be", 1], ["swapped", 1], ["all", 1], ["printed", 1], ["letters", 1], ["must", 1], ["be", 1], ["distinct", 1], ["if", 1], ["there", 1], ["are", 1], ["several", 1], ["possible", 1], ["answers", 1], ["print", 1], ["any", 1], ["of", 1], ["them", 1], ["you", 1], ["are", 1], ["free", 1], ["to", 1], ["choose", 1], ["the", 1], ["order", 1], ["of", 1], ["the", 1], ["pairs", 1], ["and", 1], ["the", 1], ["order", 1], ["of", 1], ["keys", 1], ["in", 1], ["a", 1], ["pair", 1], ["each", 1], ["letter", 1], ["must", 1], ["occur", 1], ["at", 1], ["most", 1], ["once", 1], ["santa", 1], ["considers", 1], ["the", 1], ["keyboard", 1], ["to", 0], ["be", 0], ["fixed", 0], ["if", 0], ["he", 0], ["can", 0], ["print", 0], ["his", 0], ["favorite", 0], ["patter", 0], ["without", 0], ["mistakes", 0], ["examples", 0], ["input", 0], ["helloworld", 0], ["ehoolwlroz", 0], ["output", 0], ["3", 0], ["h", 0], ["e", 0], ["l", 0], ["o", 0], ["d", 0], ["z", 0], ["input", 0], ["hastalavistababy", 0], ["hastalavistababy", 0], ["output", 0], ["0", 0], ["input", 0], ["merrychristmas", 0], ["christmasmerry", 0], ["output", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8144654088050315, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8144654088050315, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8939393939393939, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8939393939393939, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8144654088050315, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8144654088050315, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8939393939393939, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8939393939393939, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["a", 0], ["input", 0], ["b", 0], ["input", 0], ["symbols", 0], ["pairs", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["in", 0], ["symbols", 0], ["if", 0], ["symbols", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["print", 0], ["1", 0], ["break", 0], ["elif", 0], ["b", 0], ["i", 0], ["in", 0], ["symbols", 0], ["if", 0], ["symbols", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["print", 0], ["1", 0], ["break", 0], ["else", 0], ["symbols", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["symbols", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["pairs", 0], ["append", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["else", 0], ["print", 0], ["len", 0], ["pairs", 0], ["for", 0], ["elem", 0], ["in", 0], ["pairs", 0], ["print", 0], ["elem", 0], ["0", 0], ["elem", 0], ["1", 0], ["s1", 0], ["input", 0], ["s2", 0], ["input", 0], ["used", 0], ["256", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s1", 0], ["c1", 0], ["s1", 0], ["i", 0], ["c2", 0], ["s2", 0], ["i", 0], ["if", 0], ["c1", 0], ["c2", 0], ["if", 0], ["used", 0], ["ord", 0], ["c1", 0], ["or", 0], ["used", 0], ["ord", 0], ["c1", 0], ["and", 0], ["used", 0], ["ord", 0], ["c2", 0], ["or", 0], ["used", 0], ["ord", 0], ["c2", 0], ["used", 0], ["ord", 0], ["c1", 0], ["used", 0], ["ord", 0], ["c2", 0], ["else", 0], ["print", 0], ["1", 0], ["return", 0], ["else", 0], ["if", 0], ["used", 0], ["ord", 0], ["c1", 0], ["or", 0], ["used", 0], ["ord", 0], ["c1", 0], ["c2", 0], ["and", 0], ["used", 0], ["ord", 0], ["c2", 0], ["or", 0], ["used", 0], ["ord", 0], ["c2", 0], ["c1", 0], ["used", 0], ["ord", 0], ["c1", 0], ["c2", 0], ["used", 0], ["ord", 0], ["c2", 0], ["c1", 0], ["else", 0], ["print", 0], ["1", 0], ["return", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["256", 0], ["if", 0], ["used", 0], ["i", 0], ["or", 0], ["used", 0], ["i", 0], ["continue", 0], ["else", 0], ["if", 0], ["ord", 0], ["used", 0], ["i", 0], ["i", 0], ["ans", 0], ["append", 0], ["used", 0], ["i", 0], ["chr", 0], ["i", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["elem", 0], ["in", 0], ["ans", 0], ["print", 0], ["elem", 0], ["0", 0], ["elem", 0], ["1", 0], ["s", 0], ["input", 0], ["s2", 0], ["input", 0], ["a", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["97", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["a", 0], ["ord", 0], ["s", 0], ["i", 0], ["97", 0], ["add", 0], ["ord", 0], ["s2", 0], ["i", 0], ["97", 0], ["a", 0], ["ord", 0], ["s2", 0], ["i", 0], ["97", 0], ["add", 0], ["ord", 0], ["s", 0], ["i", 0], ["97", 0], ["if", 0], ["max", 0], ["len", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["t", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["if", 0], ["a", 0], ["i", 0], ["set", 0], ["o", 0], ["tuple", 0], ["sorted", 0], ["chr", 0], ["i", 0], ["97", 0], ["chr", 0], ["list", 0], ["a", 0], ["i", 0], ["0", 0], ["97", 0], ["if", 0], ["o", 0], ["0", 0], ["o", 0], ["1", 0], ["t", 0], ["add", 0], ["o", 0], ["print", 0], ["len", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["t", 0], ["print", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["def", 0], ["chk", 0], ["l1", 0], ["l2", 0], ["known", 0], ["keys", 0], ["if", 0], ["l1", 0], ["not", 0], ["in", 0], ["known", 0], ["keys", 0], ["and", 0], ["l2", 0], ["not", 0], ["in", 0], ["known", 0], ["keys", 0], ["known", 0], ["keys", 0], ["l1", 0], ["l2", 0], ["known", 0], ["keys", 0], ["l2", 0], ["l1", 0], ["elif", 0], ["l1", 0], ["in", 0], ["known", 0], ["keys", 0], ["and", 0], ["known", 0], ["keys", 0], ["l1", 0], ["l2", 0], ["or", 0], ["l2", 0], ["in", 0], ["known", 0], ["keys", 0], ["and", 0], ["known", 0], ["keys", 0], ["l2", 0], ["l1", 0], ["raise", 0], ["valueerror", 0], ["bad", 0], ["kbd", 0], ["def", 0], ["m", 0], ["keys", 0], ["s1", 0], ["input", 0], ["s2", 0], ["input", 0], ["try", 0], ["for", 0], ["i", 0], ["in", 0], ["map", 0], ["lambda", 0], ["x", 0], ["y", 0], ["chk", 0], ["x", 0], ["y", 0], ["keys", 0], ["s1", 0], ["s2", 0], ["pass", 0], ["except", 0], ["valueerror", 0], ["print", 0], ["1", 0], ["return", 0], ["k1", 0], ["list", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["keys", 0], ["if", 0], ["ord", 0], ["x", 0], ["ord", 0], ["keys", 0], ["x", 0], ["print", 0], ["len", 0], ["k1", 0], ["for", 0], ["k", 0], ["in", 0], ["k1", 0], ["print", 0], ["k", 0], ["keys", 0], ["k", 0], ["def", 0], ["starting", 0], ["point", 0], ["m", 0], ["starting", 0], ["point", 0], ["import", 0], ["math", 0], ["def", 0], ["main", 0], ["s", 0], ["str", 0], ["input", 0], ["t", 0], ["str", 0], ["input", 0], ["st", 0], ["dict", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["t", 0], ["if", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["list", 0], ["st", 0], ["dict", 0], ["keys", 0], ["and", 0], ["st", 0], ["dict", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["print", 0], ["1", 0], ["return", 0], ["st", 0], ["dict", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["st", 0], ["dict", 0], ["t", 0], ["i", 0], ["s", 0], ["i", 0], ["result", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["t", 0], ["if", 0], ["t", 0], ["i", 0], ["in", 0], ["list", 0], ["st", 0], ["dict", 0], ["keys", 0], ["result", 0], ["st", 0], ["dict", 0], ["t", 0], ["i", 0], ["else", 0], ["result", 0], ["t", 0], ["i", 0], ["if", 0], ["result", 0], ["s", 0], ["print", 0], ["int", 0], ["len", 0], ["list", 0], ["st", 0], ["dict", 0], ["keys", 0], ["2", 0], ["for", 0], ["key", 0], ["in", 0], ["list", 0], ["st", 0], ["dict", 0], ["keys", 0], ["if", 0], ["key", 0], ["st", 0], ["dict", 0], ["key", 0], ["print", 0], ["format", 0], ["key", 0], ["st", 0], ["dict", 0], ["key", 0], ["else", 0], ["print", 0], ["1", 0], ["main", 0], ["a", 0], ["input", 0], ["b", 0], ["input", 0], ["ans", 0], ["t", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["in", 0], ["ans", 0], ["keys", 0], ["if", 0], ["ans", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["t", 0], ["false", 0], ["if", 0], ["b", 0], ["i", 0], ["in", 0], ["ans", 0], ["keys", 0], ["if", 0], ["ans", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["t", 0], ["false", 0], ["else", 0], ["ans", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["ans", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["if", 0], ["t", 0], ["an", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["keys", 0], ["if", 0], ["i", 0], ["ans", 0], ["i", 0], ["and", 0], ["i", 0], ["not", 0], ["in", 0], ["an", 0], ["and", 0], ["ans", 0], ["i", 0], ["not", 0], ["in", 0], ["an", 0], ["an", 0], ["append", 0], ["i", 0], ["an", 0], ["append", 0], ["ans", 0], ["i", 0], ["print", 0], ["len", 0], ["an", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["an", 0], ["1", 0], ["2", 0], ["print", 0], ["an", 0], ["i", 0], ["an", 0], ["i", 0], ["1", 0], ["else", 0], ["print", 0], ["1", 0], ["s1", 0], ["input", 0], ["s2", 0], ["input", 0], ["d", 0], ["d2", 0], ["flag", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s1", 0], ["if", 0], ["s1", 0], ["i", 0], ["in", 0], ["d", 0], ["if", 0], ["d", 0], ["s1", 0], ["i", 0], ["s2", 0], ["i", 0], ["flag", 0], ["true", 0], ["break", 0], ["if", 0], ["s2", 0], ["i", 0], ["in", 0], ["d", 0], ["if", 0], ["d", 0], ["s2", 0], ["i", 0], ["s1", 0], ["i", 0], ["flag", 0], ["true", 0], ["break", 0], ["else", 0], ["d", 0], ["s1", 0], ["i", 0], ["s2", 0], ["i", 0], ["d", 0], ["s2", 0], ["i", 0], ["s1", 0], ["i", 0], ["if", 0], ["s1", 0], ["i", 0], ["s2", 0], ["i", 0], ["d2", 0], ["s1", 0], ["i", 0], ["s2", 0], ["i", 0], ["if", 0], ["flag", 0], ["print", 0], ["1", 0], ["else", 0], ["l", 0], ["len", 0], ["d2", 0], ["if", 0], ["not", 0], ["l", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["l", 0], ["for", 0], ["item", 0], ["in", 0], ["d2", 0], ["print", 0], ["item", 0], ["d2", 0], ["item", 0], ["s1", 0], ["input", 0], ["s2", 0], ["input", 0], ["d", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s1", 0], ["if", 0], ["s2", 0], ["i", 0], ["s1", 0], ["i", 0], ["res1", 0], ["d", 0], ["get", 0], ["s1", 0], ["i", 0], ["1", 0], ["res2", 0], ["d", 0], ["get", 0], ["s2", 0], ["i", 0], ["1", 0], ["if", 0], ["res1", 0], ["1", 0], ["and", 0], ["res2", 0], ["1", 0], ["or", 0], ["res1", 0], ["s2", 0], ["i", 0], ["and", 0], ["res2", 0], ["s1", 0], ["i", 0], ["d", 0], ["s1", 0], ["i", 0], ["s2", 0], ["i", 0], ["d", 0], ["s2", 0], ["i", 0], ["s1", 0], ["i", 0], ["else", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["s2", 0], ["i", 0], ["s1", 0], ["i", 0], ["res", 0], ["d", 0], ["get", 0], ["s1", 0], ["i", 0], ["1", 0], ["if", 0], ["res", 0], ["1", 0], ["and", 0], ["res", 0], ["s1", 0], ["i", 0], ["print", 0], ["1", 0], ["return", 0], ["d", 0], ["s1", 0], ["i", 0], ["s1", 0], ["i", 0], ["ans", 0], ["len", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["if", 0], ["i", 0], ["d", 0], ["i", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["2", 0], ["used", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["used", 0], ["i", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["if", 0], ["not", 0], ["used", 0], ["i", 0], ["and", 0], ["i", 0], ["d", 0], ["i", 0], ["print", 0], ["i", 0], ["d", 0], ["i", 0], ["used", 0], ["d", 0], ["i", 0], ["1", 0], ["s", 0], ["input", 0], ["t", 0], ["input", 0], ["let", 0], ["printed", 0], ["f", 0], ["true", 0], ["ans", 0], ["0", 0], ["if", 0], ["s", 0], ["t", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["let", 0], ["if", 0], ["t", 0], ["i", 0], ["let", 0], ["s", 0], ["i", 0], ["print", 0], ["1", 0], ["f", 0], ["false", 0], ["break", 0], ["elif", 0], ["t", 0], ["i", 0], ["in", 0], ["let", 0], ["if", 0], ["s", 0], ["i", 0], ["let", 0], ["t", 0], ["i", 0], ["print", 0], ["1", 0], ["f", 0], ["false", 0], ["break", 0], ["else", 0], ["if", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["not", 0], ["in", 0], ["let", 0], ["or", 0], ["t", 0], ["i", 0], ["not", 0], ["in", 0], ["let", 0], ["ans", 0], ["1", 0], ["let", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["let", 0], ["t", 0], ["i", 0], ["s", 0], ["i", 0], ["if", 0], ["f", 0], ["print", 0], ["ans", 0], ["for", 0], ["l", 0], ["in", 0], ["let", 0], ["if", 0], ["let", 0], ["l", 0], ["l", 0], ["and", 0], ["let", 0], ["l", 0], ["not", 0], ["in", 0], ["printed", 0], ["print", 0], ["let", 0], ["l", 0], ["l", 0], ["printed", 0], ["append", 0], ["l", 0], ["def", 0], ["main", 0], ["abra", 0], ["shacked", 0], ["str", 0], ["input", 0], ["str", 0], ["input", 0], ["dictionary", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["shacked", 0], ["if", 0], ["not", 0], ["shacked", 0], ["i", 0], ["abra", 0], ["i", 0], ["if", 0], ["abra", 0], ["i", 0], ["in", 0], ["list", 0], ["dictionary", 0], ["values", 0], ["and", 0], ["dictionary", 0], ["abra", 0], ["i", 0], ["shacked", 0], ["i", 0], ["print", 0], ["1", 0], ["return", 0], ["dictionary", 0], ["abra", 0], ["i", 0], ["shacked", 0], ["i", 0], ["dictionary", 0], ["shacked", 0], ["i", 0], ["abra", 0], ["i", 0], ["making", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["shacked", 0], ["if", 0], ["shacked", 0], ["i", 0], ["in", 0], ["list", 0], ["dictionary", 0], ["values", 0], ["making", 0], ["dictionary", 0], ["shacked", 0], ["i", 0], ["else", 0], ["making", 0], ["shacked", 0], ["i", 0], ["if", 0], ["making", 0], ["abra", 0], ["print", 0], ["1", 0], ["return", 0], ["print", 0], ["int", 0], ["len", 0], ["list", 0], ["dictionary", 0], ["keys", 0], ["2", 0], ["for", 0], ["key", 0], ["in", 0], ["list", 0], ["dictionary", 0], ["values", 0], ["if", 0], ["key", 0], ["dictionary", 0], ["key", 0], ["print", 0], ["key", 0], ["dictionary", 0], ["key", 0], ["main", 0], ["s", 0], ["input", 0], ["s1", 0], ["input", 0], ["mistake", 0], ["false", 0], ["d", 0], ["dict", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["s1", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["d", 0], ["and", 0], ["s1", 0], ["i", 0], ["in", 0], ["d", 0], ["if", 0], ["not", 0], ["d", 0], ["s", 0], ["i", 0], ["s1", 0], ["i", 0], ["and", 0], ["d", 0], ["s1", 0], ["i", 0], ["s", 0], ["i", 0], ["mistake", 0], ["true", 0], ["break", 0], ["elif", 0], ["s", 0], ["i", 0], ["in", 0], ["d", 0], ["or", 0], ["s1", 0], ["i", 0], ["in", 0], ["d", 0], ["mistake", 0], ["true", 0], ["break", 0], ["else", 0], ["d", 0], ["s", 0], ["i", 0], ["s1", 0], ["i", 0], ["d", 0], ["s1", 0], ["i", 0], ["s", 0], ["i", 0], ["else", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["d", 0], ["and", 0], ["d", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["mistake", 0], ["true", 0], ["break", 0], ["d", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["if", 0], ["mistake", 0], ["print", 0], ["1", 0], ["else", 0], ["ans", 0], ["last", 0], ["set", 0], ["for", 0], ["elem", 0], ["in", 0], ["d", 0], ["if", 0], ["elem", 0], ["not", 0], ["in", 0], ["last", 0], ["and", 0], ["elem", 0], ["d", 0], ["elem", 0], ["ans", 0], ["append", 0], ["elem", 0], ["d", 0], ["elem", 0], ["last", 0], ["add", 0], ["elem", 0], ["last", 0], ["add", 0], ["d", 0], ["elem", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["elem", 0], ["in", 0], ["ans", 0], ["print", 0], ["elem", 0], ["q", 0], ["input", 0], ["w", 0], ["input", 0], ["l", 0], ["len", 0], ["q", 0], ["a", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["130", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["l", 0], ["if", 0], ["q", 0], ["i", 0], ["w", 0], ["i", 0], ["t", 0], ["append", 0], ["q", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["l", 0], ["if", 0], ["q", 0], ["i", 0], ["w", 0], ["i", 0], ["a", 0], ["append", 0], ["q", 0], ["i", 0], ["w", 0], ["i", 0], ["s", 0], ["ord", 0], ["q", 0], ["i", 0], ["1", 0], ["s", 0], ["ord", 0], ["w", 0], ["i", 0], ["1", 0], ["c", 0], ["q", 0], ["i", 0], ["if", 0], ["q", 0], ["i", 0], ["in", 0], ["t", 0], ["w", 0], ["i", 0], ["in", 0], ["t", 0], ["s", 0], ["0", 0], ["10", 0], ["q", 0], ["q", 0], ["replace", 0], ["q", 0], ["i", 0], ["w", 0], ["i", 0], ["w", 0], ["w", 0], ["replace", 0], ["c", 0], ["w", 0], ["i", 0], ["if", 0], ["max", 0], ["s", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["print", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["correct", 0], ["input", 0], ["incorrect", 0], ["input", 0], ["other", 0], ["dict", 0], ["to", 0], ["correct", 0], ["from", 0], ["incorrect", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ord", 0], ["a", 0], ["ord", 0], ["z", 0], ["1", 0], ["other", 0], ["chr", 0], ["i", 0], ["chr", 0], ["i", 0], ["print", 0], ["i", 0], ["can", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["correct", 0], ["if", 0], ["other", 0], ["correct", 0], ["i", 0], ["incorrect", 0], ["i", 0], ["continue", 0], ["if", 0], ["other", 0], ["correct", 0], ["i", 0], ["correct", 0], ["i", 0], ["can", 0], ["false", 0], ["break", 0], ["if", 0], ["other", 0], ["incorrect", 0], ["i", 0], ["incorrect", 0], ["i", 0], ["can", 0], ["false", 0], ["break", 0], ["other", 0], ["correct", 0], ["i", 0], ["incorrect", 0], ["i", 0], ["other", 0], ["incorrect", 0], ["i", 0], ["correct", 0], ["i", 0], ["if", 0], ["can", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["correct", 0], ["if", 0], ["other", 0], ["correct", 0], ["i", 0], ["incorrect", 0], ["i", 0], ["can", 0], ["false", 0], ["break", 0], ["if", 0], ["not", 0], ["can", 0], ["print", 0], ["1", 0], ["else", 0], ["ans", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ord", 0], ["a", 0], ["ord", 0], ["z", 0], ["1", 0], ["if", 0], ["other", 0], ["chr", 0], ["i", 0], ["chr", 0], ["i", 0], ["a", 0], ["b", 0], ["i", 0], ["ord", 0], ["other", 0], ["chr", 0], ["i", 0], ["ans", 0], ["add", 0], ["chr", 0], ["min", 0], ["a", 0], ["b", 0], ["chr", 0], ["max", 0], ["a", 0], ["b", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["x", 0], ["in", 0], ["ans", 0], ["print", 0], ["x", 0], ["a", 0], ["input", 0], ["b", 0], ["input", 0], ["alph", 0], ["0", 0], ["26", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["alph", 0], ["i", 0], ["chr", 0], ["97", 0], ["i", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["alph", 0], ["ord", 0], ["b", 0], ["i", 0], ["97", 0], ["if", 0], ["alph", 0], ["ord", 0], ["a", 0], ["i", 0], ["97", 0], ["a", 0], ["i", 0], ["and", 0], ["alph", 0], ["ord", 0], ["b", 0], ["i", 0], ["97", 0], ["b", 0], ["i", 0], ["alph", 0], ["ord", 0], ["a", 0], ["i", 0], ["97", 0], ["b", 0], ["i", 0], ["alph", 0], ["ord", 0], ["b", 0], ["i", 0], ["97", 0], ["a", 0], ["i", 0], ["ans", 0], ["append", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["else", 0], ["print", 0], ["1", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["b", 0], ["if", 0], ["a", 0], ["i", 0], ["alph", 0], ["ord", 0], ["b", 0], ["i", 0], ["97", 0], ["print", 0], ["1", 0], ["return", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ans", 0], ["print", 0], ["ans", 0], ["i", 0], ["0", 0], ["ans", 0], ["i", 0], ["1", 0], ["s", 0], ["input", 0], ["t", 0], ["input", 0], ["d1", 0], ["d2", 0], ["imp", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["t", 0], ["if", 0], ["d1", 0], ["get", 0], ["s", 0], ["i", 0], ["and", 0], ["d1", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["imp", 0], ["true", 0], ["break", 0], ["d1", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["if", 0], ["d2", 0], ["get", 0], ["t", 0], ["i", 0], ["and", 0], ["d2", 0], ["t", 0], ["i", 0], ["s", 0], ["i", 0], ["imp", 0], ["true", 0], ["break", 0], ["d2", 0], ["t", 0], ["i", 0], ["s", 0], ["i", 0], ["for", 0], ["e", 0], ["in", 0], ["d1", 0], ["if", 0], ["d1", 0], ["get", 0], ["d1", 0], ["e", 0], ["and", 0], ["d1", 0], ["get", 0], ["d1", 0], ["e", 0], ["e", 0], ["imp", 0], ["true", 0], ["break", 0], ["if", 0], ["imp", 0], ["true", 0], ["print", 0], ["1", 0], ["else", 0], ["swaps", 0], ["for", 0], ["e", 0], ["in", 0], ["d1", 0], ["if", 0], ["d1", 0], ["e", 0], ["d2", 0], ["d1", 0], ["e", 0], ["if", 0], ["not", 0], ["d1", 0], ["e", 0], ["d2", 0], ["d1", 0], ["e", 0], ["in", 0], ["swaps", 0], ["and", 0], ["not", 0], ["d2", 0], ["d1", 0], ["e", 0], ["d1", 0], ["e", 0], ["in", 0], ["swaps", 0], ["swaps", 0], ["append", 0], ["d1", 0], ["e", 0], ["d2", 0], ["d1", 0], ["e", 0], ["print", 0], ["len", 0], ["swaps", 0], ["for", 0], ["e", 0], ["in", 0], ["swaps", 0], ["print", 0], ["e", 0], ["0", 0], ["e", 0], ["1", 0], ["s1", 0], ["s2", 0], ["input", 0], ["input", 0], ["n", 0], ["len", 0], ["s1", 0], ["d", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["s1", 0], ["i", 0], ["b", 0], ["s2", 0], ["i", 0], ["if", 0], ["b", 0], ["a", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["if", 0], ["a", 0], ["not", 0], ["in", 0], ["d", 0], ["and", 0], ["b", 0], ["not", 0], ["in", 0], ["d", 0], ["d", 0], ["a", 0], ["b", 0], ["d", 0], ["b", 0], ["a", 0], ["elif", 0], ["a", 0], ["in", 0], ["d", 0], ["and", 0], ["b", 0], ["not", 0], ["in", 0], ["d", 0], ["or", 0], ["a", 0], ["not", 0], ["in", 0], ["d", 0], ["and", 0], ["b", 0], ["in", 0], ["d", 0], ["print", 0], ["1", 0], ["break", 0], ["elif", 0], ["d", 0], ["a", 0], ["b", 0], ["or", 0], ["d", 0], ["b", 0], ["a", 0], ["print", 0], ["1", 0], ["break", 0], ["else", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["items", 0], ["if", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["k", 0], ["append", 0], ["format", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["len", 0], ["k", 0], ["print", 0], ["k", 0], ["sep", 0], ["n", 0], ["s", 0], ["input", 0], ["t", 0], ["input", 0], ["letters", 0], ["dict", 0], ["err", 0], ["0", 0], ["ans", 0], ["0", 0], ["answer", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["letters", 0], ["and", 0], ["letters", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["or", 0], ["t", 0], ["i", 0], ["in", 0], ["letters", 0], ["and", 0], ["letters", 0], ["t", 0], ["i", 0], ["s", 0], ["i", 0], ["print", 0], ["1", 0], ["err", 0], ["1", 0], ["break", 0], ["elif", 0], ["not", 0], ["s", 0], ["i", 0], ["in", 0], ["letters", 0], ["letters", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["letters", 0], ["t", 0], ["i", 0], ["s", 0], ["i", 0], ["st", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["continue", 0], ["answer", 0], ["add", 0], ["st", 0], ["ans", 0], ["1", 0], ["if", 0], ["err", 0], ["0", 0], ["print", 0], ["ans", 0], ["for", 0], ["st", 0], ["in", 0], ["answer", 0], ["print", 0], ["st", 0], ["s", 0], ["input", 0], ["s1", 0], ["input", 0], ["q", 0], ["set", 0], ["z", 0], ["set", 0], ["flag", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["s1", 0], ["i", 0], ["and", 0], ["s1", 0], ["i", 0], ["s", 0], ["i", 0], ["not", 0], ["in", 0], ["q", 0], ["and", 0], ["s", 0], ["i", 0], ["s1", 0], ["i", 0], ["not", 0], ["in", 0], ["q", 0], ["q", 0], ["add", 0], ["s", 0], ["i", 0], ["s1", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["z", 0], ["or", 0], ["s1", 0], ["i", 0], ["in", 0], ["z", 0], ["flag", 0], ["1", 0], ["z", 0], ["add", 0], ["s", 0], ["i", 0], ["z", 0], ["add", 0], ["s1", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["s1", 0], ["i", 0], ["and", 0], ["s", 0], ["i", 0], ["in", 0], ["z", 0], ["flag", 0], ["1", 0], ["if", 0], ["flag", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["q", 0], ["for", 0], ["item", 0], ["in", 0], ["q", 0], ["print", 0], ["item", 0], ["0", 0], ["item", 0], ["1", 0], ["s1", 0], ["s2", 0], ["input", 0], ["input", 0], ["alph1", 0], ["alph2", 0], ["set", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s1", 0], ["fff", 0], ["max", 0], ["s1", 0], ["i", 0], ["s2", 0], ["i", 0], ["min", 0], ["s1", 0], ["i", 0], ["s2", 0], ["i", 0], ["ff", 0], ["fff", 0], ["not", 0], ["in", 0], ["alph1", 0], ["if", 0], ["ff", 0], ["and", 0], ["s1", 0], ["i", 0], ["in", 0], ["alph2", 0], ["or", 0], ["s2", 0], ["i", 0], ["in", 0], ["alph2", 0], ["ans", 0], ["1", 0], ["break", 0], ["elif", 0], ["ff", 0], ["alph1", 0], ["append", 0], ["fff", 0], ["if", 0], ["s1", 0], ["i", 0], ["s2", 0], ["i", 0], ["ans", 0], ["1", 0], ["alph2", 0], ["add", 0], ["s1", 0], ["i", 0], ["alph2", 0], ["add", 0], ["s2", 0], ["i", 0], ["print", 0], ["ans", 0], ["if", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["alph1", 0], ["if", 0], ["alph1", 0], ["i", 0], ["0", 0], ["alph1", 0], ["i", 0], ["1", 0], ["print", 0], ["alph1", 0], ["i", 0], ["0", 0], ["alph1", 0], ["i", 0], ["1", 0], ["s1", 0], ["input", 0], ["s2", 0], ["input", 0], ["n", 0], ["len", 0], ["s1", 0], ["d", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["s1", 0], ["i", 0], ["b", 0], ["s2", 0], ["i", 0], ["if", 0], ["b", 0], ["a", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["if", 0], ["a", 0], ["not", 0], ["in", 0], ["d", 0], ["and", 0], ["b", 0], ["not", 0], ["in", 0], ["d", 0], ["d", 0], ["a", 0], ["b", 0], ["d", 0], ["b", 0], ["a", 0], ["elif", 0], ["a", 0], ["in", 0], ["d", 0], ["and", 0], ["b", 0], ["not", 0], ["in", 0], ["d", 0], ["or", 0], ["a", 0], ["not", 0], ["in", 0], ["d", 0], ["and", 0], ["b", 0], ["in", 0], ["d", 0], ["print", 0], ["1", 0], ["break", 0], ["elif", 0], ["d", 0], ["a", 0], ["b", 0], ["or", 0], ["d", 0], ["b", 0], ["a", 0], ["print", 0], ["1", 0], ["break", 0], ["else", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["list", 0], ["d", 0], ["items", 0], ["if", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["ans", 0], ["append", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["elem", 0], ["in", 0], ["ans", 0], ["print", 0], ["elem", 0], ["s", 0], ["input", 0], ["t", 0], ["input", 0], ["if", 0], ["s", 0], ["t", 0], ["print", 0], ["0", 0], ["else", 0], ["p", 0], ["w", 0], ["n", 0], ["len", 0], ["s", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["w", 0], ["or", 0], ["t", 0], ["i", 0], ["in", 0], ["w", 0], ["print", 0], ["1", 0], ["k", 0], ["1", 0], ["break", 0], ["if", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["q", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["else", 0], ["q", 0], ["t", 0], ["i", 0], ["s", 0], ["i", 0], ["if", 0], ["not", 0], ["q", 0], ["in", 0], ["p", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["p", 0], ["j", 0], ["t", 0], ["i", 0], ["in", 0], ["p", 0], ["j", 0], ["print", 0], ["1", 0], ["k", 0], ["1", 0], ["break", 0], ["if", 0], ["k", 0], ["1", 0], ["k", 0], ["1", 0], ["p", 0], ["append", 0], ["q", 0], ["else", 0], ["break", 0], ["else", 0], ["f", 0], ["true", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["p", 0], ["j", 0], ["f", 0], ["false", 0], ["if", 0], ["f", 0], ["w", 0], ["append", 0], ["s", 0], ["i", 0], ["else", 0], ["k", 0], ["1", 0], ["print", 0], ["1", 0], ["break", 0], ["if", 0], ["k", 0], ["1", 0], ["break", 0], ["if", 0], ["k", 0], ["0", 0], ["print", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["s", 0], ["p", 0], ["i", 0], ["print", 0], ["s", 0], ["0", 0], ["s", 0], ["1", 0], ["def", 0], ["main", 0], ["a", 0], ["input", 0], ["b", 0], ["input", 0], ["keyboard", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ord", 0], ["a", 0], ["ord", 0], ["z", 0], ["1", 0], ["keyboard", 0], ["chr", 0], ["i", 0], ["index", 0], ["1", 0], ["size", 0], ["0", 0], ["out", 0], ["size", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["if", 0], ["keyboard", 0], ["a", 0], ["i", 0], ["and", 0], ["keyboard", 0], ["b", 0], ["i", 0], ["keyboard", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["keyboard", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["size", 0], ["1", 0], ["out", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["n", 0], ["elif", 0], ["not", 0], ["keyboard", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["and", 0], ["keyboard", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["print", 0], ["1", 0], ["return", 0], ["0", 0], ["else", 0], ["if", 0], ["keyboard", 0], ["a", 0], ["i", 0], ["keyboard", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["elif", 0], ["keyboard", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["print", 0], ["1", 0], ["return", 0], ["0", 0], ["print", 0], ["size", 0], ["if", 0], ["size", 0], ["0", 0], ["print", 0], ["out", 0], ["main", 0], ["s", 0], ["input", 0], ["s1", 0], ["input", 0], ["d", 0], ["dict", 0], ["f", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["a", 0], ["min", 0], ["s", 0], ["i", 0], ["s1", 0], ["i", 0], ["b", 0], ["max", 0], ["s", 0], ["i", 0], ["s1", 0], ["i", 0], ["if", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["in", 0], ["d", 0], ["and", 0], ["d", 0], ["a", 0], ["b", 0], ["or", 0], ["b", 0], ["in", 0], ["d", 0], ["and", 0], ["d", 0], ["b", 0], ["a", 0], ["f", 0], ["false", 0], ["break", 0], ["else", 0], ["d", 0], ["a", 0], ["b", 0], ["d", 0], ["b", 0], ["a", 0], ["else", 0], ["if", 0], ["a", 0], ["in", 0], ["d", 0], ["and", 0], ["d", 0], ["a", 0], ["a", 0], ["f", 0], ["false", 0], ["break", 0], ["else", 0], ["d", 0], ["a", 0], ["a", 0], ["if", 0], ["f", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["list", 0], ["d", 0], ["items", 0], ["if", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["a", 0], ["append", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["len", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["print", 0], ["i", 0], ["else", 0], ["print", 0], ["1", 0], ["s", 0], ["t", 0], ["input", 0], ["input", 0], ["fr", 0], ["set", 0], ["k", 0], ["dict", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["fr", 0], ["add", 0], ["tuple", 0], ["sorted", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["k", 0], ["if", 0], ["k", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["t", 0], ["i", 0], ["in", 0], ["k", 0], ["if", 0], ["k", 0], ["t", 0], ["i", 0], ["s", 0], ["i", 0], ["print", 0], ["1", 0], ["return", 0], ["k", 0], ["t", 0], ["i", 0], ["s", 0], ["i", 0], ["k", 0], ["s", 0], ["i", 0], ["t", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["fr", 0], ["if", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["l", 0], ["1", 0], ["s1", 0], ["i", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["fr", 0], ["s2", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["fr", 0], ["print", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["fr", 0], ["if", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["s", 0], ["input", 0], ["t", 0], ["input", 0], ["a", 0], ["dict", 0], ["ans", 0], ["set", 0], ["per", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["j", 0], ["in", 0], ["a", 0], ["and", 0], ["t", 0], ["j", 0], ["in", 0], ["a", 0], ["if", 0], ["a", 0], ["s", 0], ["j", 0], ["t", 0], ["j", 0], ["or", 0], ["a", 0], ["t", 0], ["j", 0], ["s", 0], ["j", 0], ["per", 0], ["1", 0], ["break", 0], ["elif", 0], ["t", 0], ["j", 0], ["in", 0], ["a", 0], ["and", 0], ["s", 0], ["j", 0], ["not", 0], ["in", 0], ["a", 0], ["per", 0], ["1", 0], ["break", 0], ["elif", 0], ["s", 0], ["j", 0], ["in", 0], ["a", 0], ["and", 0], ["t", 0], ["j", 0], ["not", 0], ["in", 0], ["a", 0], ["per", 0], ["1", 0], ["break", 0], ["else", 0], ["a", 0], ["s", 0], ["j", 0], ["t", 0], ["j", 0], ["a", 0], ["t", 0], ["j", 0], ["s", 0], ["j", 0], ["if", 0], ["s", 0], ["j", 0], ["t", 0], ["j", 0], ["if", 0], ["s", 0], ["j", 0], ["t", 0], ["j", 0], ["not", 0], ["in", 0], ["ans", 0], ["and", 0], ["t", 0], ["j", 0], ["s", 0], ["j", 0], ["not", 0], ["in", 0], ["ans", 0], ["ans", 0], ["add", 0], ["s", 0], ["j", 0], ["t", 0], ["j", 0], ["if", 0], ["per", 0], ["1", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["j", 0], ["in", 0], ["ans", 0], ["print", 0], ["j", 0], ["0", 0], ["j", 0], ["1", 0], ["else", 0], ["print", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nJoe has been hurt on the Internet. Now he is storming around the house, destroying everything in his path.\n\nJoe's house has n floors, each floor is a segment of m cells. Each cell either contains nothing (it is an empty cell), or has a brick or a concrete wall (always something one of three). It is believed that each floor is surrounded by a concrete wall on the left and on the right.\n\nNow Joe is on the n-th floor and in the first cell, counting from left to right. At each moment of time, Joe has the direction of his gaze, to the right or to the left (always one direction of the two). Initially, Joe looks to the right.\n\nJoe moves by a particular algorithm. Every second he makes one of the following actions:   If the cell directly under Joe is empty, then Joe falls down. That is, he moves to this cell, the gaze direction is preserved.  Otherwise consider the next cell in the current direction of the gaze.   If the cell is empty, then Joe moves into it, the gaze direction is preserved.  If this cell has bricks, then Joe breaks them with his forehead (the cell becomes empty), and changes the direction of his gaze to the opposite.  If this cell has a concrete wall, then Joe just changes the direction of his gaze to the opposite (concrete can withstand any number of forehead hits).  \n\nJoe calms down as soon as he reaches any cell of the first floor.\n\nThe figure below shows an example Joe's movements around the house.\n\n [Image] \n\nDetermine how many seconds Joe will need to calm down.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 10^4).\n\nNext n lines contain the description of Joe's house. The i-th of these lines contains the description of the (n - i + 1)-th floor of the house — a line that consists of m characters: \".\" means an empty cell, \"+\" means bricks and \"#\" means a concrete wall.\n\nIt is guaranteed that the first cell of the n-th floor is empty.\n\n\n-----Output-----\n\nPrint a single number — the number of seconds Joe needs to reach the first floor; or else, print word \"Never\" (without the quotes), if it can never happen.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3 5\n..+.#\n#+..+\n+.#+.\n\nOutput\n14\nInput\n4 10\n...+.##+.+\n+#++..+++#\n++.#++++..\n.+##.++#.+\n\nOutput\n42\n\nInput\n2 2\n..\n++\n\nOutput\nNever\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn map(int, minp().split())\n\nn, m = mints()\na = list(minp())\nx = 0\nt = 0\nd = 1\nfor i in range(n-1):\n\tb = list(minp())\n\tl = x\n\tr = x\n\twall = 0\n\twhile True:\n\t\tt += 1\n\t\tif b[x] == '.':\n\t\t\tbreak\n\t\tif x + d == m or x + d < 0 or a[x+d] == '#':\n\t\t\twall += 1\n\t\t\td = -d\n\t\t\tif wall == 2:\n\t\t\t\tprint(\"Never\")\n\t\t\t\treturn\n\t\telif a[x+d] == '+':\n\t\t\twall = 0\n\t\t\ta[x+d] = '.'\n\t\t\td = -d\n\t\telif l <= x+d and x+d <= r:\n\t\t\tif d == 1:\n\t\t\t\tt += r-x-1\n\t\t\t\tx = r\n\t\t\telse:\n\t\t\t\tt += x-l-1\n\t\t\t\tx = l\n\t\telse:\n\t\t\tx += d\n\t\t\tr = max(r,x)\n\t\t\tl = min(l,x)\n\ta, b = b, a\nprint(t)\n", "n, m = [int(i) for i in input().split()]\ncurrent_floor = list(input())\n\nx, t, direction = 0, 0, 1\n\nfor i in range(n-1):\n\tfloor = list(input())\n\tl, r = x, x\n\twall = 0\n\twhile True:\n\t\tt += 1\n\t\tif floor[x] == '.':\n\t\t\tbreak\n\t\tif (x + direction == m) or (x + direction < 0) or (current_floor[x+direction] == '#'):\n\t\t\twall += 1\n\t\t\tdirection = -direction\n\t\t\tif wall == 2:\n\t\t\t\tprint(\"Never\")\n\t\t\t\treturn\n\t\telif current_floor[x+direction] == '+':\n\t\t\twall = 0\n\t\t\tcurrent_floor[x+direction] = '.'\n\t\t\tdirection = -direction\n\t\telif l <= x+direction and x+direction <= r:\n\t\t\tif direction == 1:\n\t\t\t\tt += r-x-1\n\t\t\t\tx = r\n\t\t\telse:\n\t\t\t\tt += x-l-1\n\t\t\t\tx = l\n\t\telse:\n\t\t\tx += direction\n\t\t\tr = max(r, x)\n\t\t\tl = min(l, x)\n\tcurrent_floor, floor = floor, current_floor\nprint(t)\n"], "id": "id9202"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9202", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["joe", 1], ["has", 1], ["been", 1], ["hurt", 1], ["on", 1], ["the", 1], ["internet", 1], ["now", 1], ["he", 1], ["is", 1], ["storming", 1], ["around", 1], ["the", 1], ["house", 1], ["destroying", 1], ["everything", 1], ["in", 1], ["his", 1], ["path", 1], ["joe", 1], ["s", 1], ["house", 1], ["has", 1], ["n", 1], ["floors", 1], ["each", 1], ["floor", 1], ["is", 1], ["a", 1], ["segment", 1], ["of", 1], ["m", 1], ["cells", 1], ["each", 1], ["cell", 1], ["either", 1], ["contains", 1], ["nothing", 1], ["it", 1], ["is", 1], ["an", 1], ["empty", 1], ["cell", 1], ["or", 1], ["has", 1], ["a", 1], ["brick", 1], ["or", 1], ["a", 1], ["concrete", 1], ["wall", 1], ["always", 1], ["something", 1], ["one", 1], ["of", 1], ["three", 1], ["it", 1], ["is", 1], ["believed", 1], ["that", 1], ["each", 1], ["floor", 1], ["is", 1], ["surrounded", 1], ["by", 1], ["a", 1], ["concrete", 1], ["wall", 1], ["on", 1], ["the", 1], ["left", 1], ["and", 1], ["on", 1], ["the", 1], ["right", 1], ["now", 1], ["joe", 1], ["is", 1], ["on", 1], ["the", 1], ["n", 1], ["th", 1], ["floor", 1], ["and", 1], ["in", 1], ["the", 1], ["first", 1], ["cell", 1], ["counting", 1], ["from", 1], ["left", 1], ["to", 1], ["right", 1], ["at", 1], ["each", 1], ["moment", 1], ["of", 1], ["time", 1], ["joe", 1], ["has", 1], ["the", 1], ["direction", 1], ["of", 1], ["his", 1], ["gaze", 1], ["to", 1], ["the", 1], ["right", 1], ["or", 1], ["to", 1], ["the", 1], ["left", 1], ["always", 0], ["one", 0], ["direction", 0], ["of", 0], ["the", 0], ["two", 0], ["initially", 0], ["joe", 0], ["looks", 0], ["to", 0], ["the", 0], ["right", 0], ["joe", 0], ["moves", 0], ["by", 0], ["a", 0], ["particular", 0], ["algorithm", 0], ["every", 0], ["second", 0], ["he", 0], ["makes", 0], ["one", 0], ["of", 0], ["the", 0], ["following", 0], ["actions", 0], ["if", 1], ["the", 1], ["cell", 1], ["directly", 1], ["under", 1], ["joe", 1], ["is", 1], ["empty", 1], ["then", 1], ["joe", 1], ["falls", 1], ["down", 1], ["that", 1], ["is", 1], ["he", 1], ["moves", 1], ["to", 1], ["this", 1], ["cell", 1], ["the", 1], ["gaze", 1], ["direction", 1], ["is", 1], ["preserved", 1], ["otherwise", 1], ["consider", 1], ["the", 1], ["next", 1], ["cell", 1], ["in", 1], ["the", 1], ["current", 1], ["direction", 1], ["of", 1], ["the", 1], ["gaze", 1], ["if", 1], ["the", 1], ["cell", 1], ["is", 1], ["empty", 1], ["then", 1], ["joe", 1], ["moves", 1], ["into", 1], ["it", 1], ["the", 1], ["gaze", 1], ["direction", 1], ["is", 1], ["preserved", 1], ["if", 1], ["this", 1], ["cell", 1], ["has", 1], ["bricks", 1], ["then", 1], ["joe", 1], ["breaks", 1], ["them", 1], ["with", 1], ["his", 1], ["forehead", 1], ["the", 1], ["cell", 1], ["becomes", 1], ["empty", 1], ["and", 1], ["changes", 1], ["the", 1], ["direction", 1], ["of", 1], ["his", 1], ["gaze", 1], ["to", 1], ["the", 1], ["opposite", 1], ["if", 1], ["this", 1], ["cell", 1], ["has", 1], ["a", 1], ["concrete", 1], ["wall", 1], ["then", 1], ["joe", 1], ["just", 1], ["changes", 1], ["the", 1], ["direction", 1], ["of", 1], ["his", 1], ["gaze", 1], ["to", 1], ["the", 1], ["opposite", 1], ["concrete", 1], ["can", 1], ["withstand", 1], ["any", 1], ["number", 1], ["of", 1], ["forehead", 1], ["hits", 1], ["joe", 1], ["calms", 1], ["down", 1], ["as", 1], ["soon", 1], ["as", 1], ["he", 1], ["reaches", 1], ["any", 1], ["cell", 1], ["of", 1], ["the", 1], ["first", 1], ["floor", 1], ["the", 0], ["figure", 0], ["below", 0], ["shows", 0], ["an", 0], ["example", 0], ["joe", 0], ["s", 0], ["movements", 0], ["around", 0], ["the", 0], ["house", 0], ["image", 0], ["determine", 0], ["how", 0], ["many", 0], ["seconds", 0], ["joe", 0], ["will", 0], ["need", 0], ["to", 0], ["calm", 0], ["down", 0], ["input", 0], ["the", 6], ["first", 2], ["line", 1], ["contains", 1], ["two", 1], ["integers", 3], ["n", 0], ["and", 0], ["m", 0], ["2", 0], ["≤", 0], ["n", 0], ["≤", 0], ["100", 0], ["1", 0], ["≤", 0], ["m", 0], ["≤", 0], ["10", 0], ["4", 0], ["next", 1], ["n", 1], ["lines", 1], ["contain", 1], ["the", 1], ["description", 1], ["of", 1], ["joe", 1], ["s", 1], ["house", 1], ["the", 1], ["i", 1], ["th", 1], ["of", 1], ["these", 1], ["lines", 1], ["contains", 1], ["the", 1], ["description", 1], ["of", 1], ["the", 1], ["n", 1], ["i", 1], ["1", 1], ["th", 1], ["floor", 1], ["of", 1], ["the", 1], ["house", 1], ["—", 1], ["a", 1], ["line", 1], ["that", 1], ["consists", 1], ["of", 1], ["m", 1], ["characters", 1], ["means", 1], ["an", 1], ["empty", 1], ["cell", 1], ["means", 1], ["bricks", 1], ["and", 1], ["means", 1], ["a", 1], ["concrete", 1], ["wall", 1], ["it", 1], ["is", 1], ["guaranteed", 0], ["that", 0], ["the", 0], ["first", 0], ["cell", 0], ["of", 0], ["the", 0], ["n", 0], ["th", 0], ["floor", 0], ["is", 0], ["empty", 0], ["output", 0], ["print", 1], ["a", 1], ["single", 1], ["number", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["seconds", 1], ["joe", 1], ["needs", 1], ["to", 1], ["reach", 1], ["the", 1], ["first", 1], ["floor", 1], ["or", 1], ["else", 0], ["print", 0], ["word", 0], ["never", 0], ["without", 0], ["the", 0], ["quotes", 0], ["if", 0], ["it", 0], ["can", 0], ["never", 0], ["happen", 0], ["please", 13], ["do", 13], ["not", 13], ["use", 11], ["the", 14], ["lld", 14], ["specifier", 14], ["to", 17], ["read", 17], ["or", 10], ["write", 10], ["64", 12], ["bit", 12], ["integers", 13], ["in", 13], ["с", 12], ["it", 12], ["is", 0], ["preferred", 0], ["to", 0], ["use", 0], ["the", 0], ["cin", 0], ["cout", 0], ["streams", 0], ["or", 0], ["the", 0], ["i64d", 0], ["specifier", 0], ["examples", 0], ["input", 0], ["3", 0], ["5", 0], ["output", 0], ["14", 0], ["input", 0], ["4", 0], ["10", 0], ["output", 0], ["42", 0], ["input", 0], ["2", 0], ["2", 0], ["output", 0], ["never", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7322654462242563, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6918553560228079, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8730512249443207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8700816629547141, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6979405034324943, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6892448512585814, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8730512249443207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8700816629547141, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["from", 0], ["math", 0], ["import", 0], ["def", 0], ["minp", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["mint", 0], ["return", 0], ["int", 0], ["minp", 0], ["def", 0], ["mints", 0], ["return", 0], ["map", 0], ["int", 0], ["minp", 0], ["split", 0], ["n", 0], ["m", 0], ["mints", 0], ["a", 0], ["list", 0], ["minp", 0], ["x", 0], ["0", 0], ["t", 0], ["0", 0], ["d", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["b", 0], ["list", 0], ["minp", 0], ["l", 0], ["x", 0], ["r", 0], ["x", 0], ["wall", 0], ["0", 0], ["while", 0], ["true", 0], ["t", 0], ["1", 0], ["if", 0], ["b", 0], ["x", 0], ["break", 0], ["if", 0], ["x", 0], ["d", 0], ["m", 0], ["or", 0], ["x", 0], ["d", 0], ["0", 0], ["or", 0], ["a", 0], ["x", 0], ["d", 0], ["wall", 0], ["1", 0], ["d", 0], ["d", 0], ["if", 0], ["wall", 0], ["2", 0], ["print", 0], ["never", 0], ["return", 0], ["elif", 0], ["a", 0], ["x", 0], ["d", 0], ["wall", 0], ["0", 0], ["a", 0], ["x", 0], ["d", 0], ["d", 0], ["d", 0], ["elif", 0], ["l", 0], ["x", 0], ["d", 0], ["and", 0], ["x", 0], ["d", 0], ["r", 0], ["if", 0], ["d", 0], ["1", 0], ["t", 0], ["r", 0], ["x", 0], ["1", 0], ["x", 0], ["r", 0], ["else", 0], ["t", 0], ["x", 0], ["l", 0], ["1", 0], ["x", 0], ["l", 0], ["else", 0], ["x", 0], ["d", 0], ["r", 0], ["max", 0], ["r", 0], ["x", 0], ["l", 0], ["min", 0], ["l", 0], ["x", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["print", 0], ["t", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["current", 0], ["floor", 0], ["list", 0], ["input", 0], ["x", 0], ["t", 0], ["direction", 0], ["0", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["floor", 0], ["list", 0], ["input", 0], ["l", 0], ["r", 0], ["x", 0], ["x", 0], ["wall", 0], ["0", 0], ["while", 0], ["true", 0], ["t", 0], ["1", 0], ["if", 0], ["floor", 0], ["x", 0], ["break", 0], ["if", 0], ["x", 0], ["direction", 0], ["m", 0], ["or", 0], ["x", 0], ["direction", 0], ["0", 0], ["or", 0], ["current", 0], ["floor", 0], ["x", 0], ["direction", 0], ["wall", 0], ["1", 0], ["direction", 0], ["direction", 0], ["if", 0], ["wall", 0], ["2", 0], ["print", 0], ["never", 0], ["return", 0], ["elif", 0], ["current", 0], ["floor", 0], ["x", 0], ["direction", 0], ["wall", 0], ["0", 0], ["current", 0], ["floor", 0], ["x", 0], ["direction", 0], ["direction", 0], ["direction", 0], ["elif", 0], ["l", 0], ["x", 0], ["direction", 0], ["and", 0], ["x", 0], ["direction", 0], ["r", 0], ["if", 0], ["direction", 0], ["1", 0], ["t", 0], ["r", 0], ["x", 0], ["1", 0], ["x", 0], ["r", 0], ["else", 0], ["t", 0], ["x", 0], ["l", 0], ["1", 0], ["x", 0], ["l", 0], ["else", 0], ["x", 0], ["direction", 0], ["r", 0], ["max", 0], ["r", 0], ["x", 0], ["l", 0], ["min", 0], ["l", 0], ["x", 0], ["current", 0], ["floor", 0], ["floor", 0], ["floor", 0], ["current", 0], ["floor", 0], ["print", 0], ["t", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nBalanced closed bracket or parenthesis statements are ones where each opening bracket is matched with a closed bracket later in the string.\n\nNotice how each closed parenthesis matches to the most recent unmatched open parenthesis.\n\nDefine an alternative bracket notation as follows: each bracket pair corresponds to a header in the form of “start,end:” where start and end are indices of the new string itself! The index start is the index of the character immediately after the ‘:’, and end is the index past the last header corresponding to the last bracket pair contained in this bracket pair. By taking a substring(start, end) of the new notation, you get an alternative bracket sequence describing all of the pairs of brackets contained by the brackets corresponding to the “start,end:”! Since an empty pair of brackets has nothing inside, in their header, start and end will be the same.\n\nEach index takes up as many characters in the string as they do when they are base $10$ numbers. (For example, the index $42$ will take up $2$ characters). The indices in the new string start from $0$. All of the indices found in the alternative bracket notation string are absolute indices from the beginning of the new string.\n\nConsider this parenthetical statement: (())\n\nHere is it, in our new, alternate bracket notation: 4,8:8,8:\n\nIn this example, there are two sets of matching parenthesis, the outer one and the inner one. The outer one appears before the inner one, since the start bracket appears first. So, the header for the outer brackets will appear before the header for the inner bracket. The header 4,8: represents the outer bracket, while the header 8,8: represents the inner bracket. The substring from the $4$th character to $7$th character is 8,8:, which represents what is contained inside the outer bracket. Note that 5,11:11,11: could also be a legitimate alternate notation, but we want the shortest one, which is why 4,8:8,8: is the correct answer.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The input will consist of a single line, containing a string $s$, which consists only of open and closed parentheses. The string $s$ will be between $2$ and $4000$ characters long. There will be no spaces. The string $s$ is guaranteed to be balanced.\n\n-----Output-----\nOutput the string $s$ in our new alternative bracket notation. If there’s more than one way to represent $s$ in the new notation, choose the shortest representation, which will be unique.\n\n-----Examples-----\nSample Input 1:\n(())\nSample Output 1:\n4,8:8,8:\n\nSample Input 2:\n()\nSample Output 2:\n4,4:\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6912"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6912", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["balanced", 1], ["closed", 1], ["bracket", 1], ["or", 1], ["parenthesis", 1], ["statements", 1], ["are", 1], ["ones", 1], ["where", 1], ["each", 1], ["opening", 1], ["bracket", 1], ["is", 1], ["matched", 1], ["with", 1], ["a", 1], ["closed", 1], ["bracket", 1], ["later", 1], ["in", 1], ["the", 1], ["string", 1], ["notice", 1], ["how", 1], ["each", 1], ["closed", 1], ["parenthesis", 1], ["matches", 1], ["to", 1], ["the", 1], ["most", 1], ["recent", 1], ["unmatched", 1], ["open", 1], ["parenthesis", 1], ["define", 1], ["an", 1], ["alternative", 1], ["bracket", 1], ["notation", 1], ["as", 1], ["follows", 1], ["each", 1], ["bracket", 1], ["pair", 1], ["corresponds", 1], ["to", 1], ["a", 1], ["header", 1], ["in", 1], ["the", 1], ["form", 1], ["of", 1], ["“start", 1], ["end", 1], ["”", 1], ["where", 1], ["start", 1], ["and", 1], ["end", 1], ["are", 1], ["indices", 1], ["of", 1], ["the", 1], ["new", 1], ["string", 1], ["itself", 1], ["the", 1], ["index", 1], ["start", 1], ["is", 1], ["the", 1], ["index", 1], ["of", 1], ["the", 1], ["character", 1], ["immediately", 1], ["after", 1], ["the", 1], ["‘", 1], ["’", 1], ["and", 1], ["end", 1], ["is", 1], ["the", 1], ["index", 1], ["past", 1], ["the", 1], ["last", 1], ["header", 1], ["corresponding", 1], ["to", 1], ["the", 1], ["last", 1], ["bracket", 1], ["pair", 1], ["contained", 1], ["in", 1], ["this", 1], ["bracket", 1], ["pair", 1], ["by", 1], ["taking", 1], ["a", 1], ["substring", 1], ["start", 1], ["end", 1], ["of", 1], ["the", 1], ["new", 1], ["notation", 1], ["you", 1], ["get", 1], ["an", 1], ["alternative", 1], ["bracket", 1], ["sequence", 1], ["describing", 1], ["all", 1], ["of", 1], ["the", 1], ["pairs", 1], ["of", 1], ["brackets", 1], ["contained", 1], ["by", 1], ["the", 1], ["brackets", 1], ["corresponding", 1], ["to", 1], ["the", 1], ["“start", 1], ["end", 1], ["”", 1], ["since", 1], ["an", 1], ["empty", 1], ["pair", 1], ["of", 1], ["brackets", 1], ["has", 1], ["nothing", 1], ["inside", 1], ["in", 1], ["their", 1], ["header", 1], ["start", 1], ["and", 1], ["end", 1], ["will", 1], ["be", 1], ["the", 1], ["same", 1], ["each", 1], ["index", 1], ["takes", 1], ["up", 1], ["as", 1], ["many", 1], ["characters", 1], ["in", 1], ["the", 1], ["string", 1], ["as", 1], ["they", 1], ["do", 1], ["when", 1], ["they", 1], ["are", 1], ["base", 1], ["10", 1], ["numbers", 1], ["for", 1], ["example", 1], ["the", 1], ["index", 1], ["42", 1], ["will", 1], ["take", 1], ["up", 1], ["2", 1], ["characters", 1], ["the", 1], ["indices", 1], ["in", 1], ["the", 1], ["new", 1], ["string", 1], ["start", 1], ["from", 1], ["0", 1], ["all", 1], ["of", 1], ["the", 1], ["indices", 1], ["found", 1], ["in", 1], ["the", 1], ["alternative", 1], ["bracket", 1], ["notation", 0], ["string", 0], ["are", 0], ["absolute", 0], ["indices", 0], ["from", 0], ["the", 0], ["beginning", 0], ["of", 0], ["the", 0], ["new", 0], ["string", 0], ["consider", 0], ["this", 0], ["parenthetical", 0], ["statement", 0], ["here", 0], ["is", 0], ["it", 0], ["in", 0], ["our", 0], ["new", 0], ["alternate", 0], ["bracket", 0], ["notation", 0], ["4", 0], ["8", 0], ["8", 0], ["8", 0], ["in", 1], ["this", 1], ["example", 1], ["there", 1], ["are", 1], ["two", 1], ["sets", 1], ["of", 1], ["matching", 1], ["parenthesis", 1], ["the", 1], ["outer", 1], ["one", 1], ["and", 1], ["the", 1], ["inner", 1], ["one", 1], ["the", 1], ["outer", 1], ["one", 1], ["appears", 1], ["before", 1], ["the", 1], ["inner", 1], ["one", 1], ["since", 1], ["the", 1], ["start", 1], ["bracket", 1], ["appears", 1], ["first", 1], ["so", 1], ["the", 1], ["header", 1], ["for", 1], ["the", 1], ["outer", 1], ["brackets", 1], ["will", 1], ["appear", 1], ["before", 1], ["the", 1], ["header", 1], ["for", 1], ["the", 1], ["inner", 1], ["bracket", 1], ["the", 1], ["header", 1], ["4", 1], ["8", 1], ["represents", 1], ["the", 1], ["outer", 1], ["bracket", 1], ["while", 1], ["the", 1], ["header", 1], ["8", 1], ["8", 1], ["represents", 1], ["the", 1], ["inner", 1], ["bracket", 1], ["the", 1], ["substring", 1], ["from", 1], ["the", 1], ["4", 1], ["th", 1], ["character", 1], ["to", 1], ["7", 1], ["th", 1], ["character", 1], ["is", 1], ["8", 1], ["8", 1], ["which", 1], ["represents", 1], ["what", 1], ["is", 1], ["contained", 1], ["inside", 1], ["the", 1], ["outer", 1], ["bracket", 1], ["note", 1], ["that", 1], ["5", 1], ["11", 1], ["11", 1], ["11", 1], ["could", 1], ["also", 1], ["be", 1], ["a", 1], ["legitimate", 1], ["alternate", 1], ["notation", 1], ["but", 1], ["we", 1], ["want", 1], ["the", 1], ["shortest", 1], ["one", 0], ["which", 0], ["is", 0], ["why", 0], ["4", 0], ["8", 0], ["8", 0], ["8", 0], ["is", 0], ["the", 0], ["correct", 0], ["answer", 0], ["input", 0], ["each", 52], ["input", 52], ["will", 52], ["consist", 52], ["of", 52], ["a", 52], ["single", 52], ["test", 52], ["case", 52], ["note", 26], ["that", 8], ["your", 8], ["program", 6], ["may", 6], ["be", 6], ["run", 5], ["multiple", 3], ["times", 1], ["on", 1], ["different", 1], ["inputs", 1], ["the", 1], ["input", 1], ["will", 1], ["consist", 1], ["of", 1], ["a", 1], ["single", 1], ["line", 1], ["containing", 1], ["a", 1], ["string", 1], ["s", 1], ["which", 1], ["consists", 1], ["only", 1], ["of", 1], ["open", 0], ["and", 0], ["closed", 0], ["parentheses", 0], ["the", 0], ["string", 0], ["s", 0], ["will", 0], ["be", 0], ["between", 0], ["2", 0], ["and", 0], ["4000", 0], ["characters", 1], ["long", 1], ["there", 1], ["will", 1], ["be", 0], ["no", 0], ["spaces", 0], ["the", 0], ["string", 0], ["s", 0], ["is", 0], ["guaranteed", 0], ["to", 0], ["be", 0], ["balanced", 0], ["output", 0], ["output", 1], ["the", 1], ["string", 1], ["s", 1], ["in", 1], ["our", 1], ["new", 1], ["alternative", 1], ["bracket", 1], ["notation", 1], ["if", 1], ["there’s", 1], ["more", 1], ["than", 1], ["one", 1], ["way", 1], ["to", 1], ["represent", 1], ["s", 1], ["in", 0], ["the", 0], ["new", 0], ["notation", 0], ["choose", 0], ["the", 0], ["shortest", 0], ["representation", 0], ["which", 0], ["will", 0], ["be", 0], ["unique", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["sample", 0], ["output", 0], ["1", 0], ["4", 0], ["8", 0], ["8", 0], ["8", 0], ["sample", 0], ["input", 0], ["2", 0], ["sample", 0], ["output", 0], ["2", 0], ["4", 0], ["4", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.79004329004329, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7564824064824066, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8966244725738397, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8639132316347508, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7683982683982684, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.756024531024531, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8755274261603375, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.863466947960619, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nDeveloped in the 1940s in the United Kingdom, the game of Cluedo is one of the most popular board games in the world. The object of the game is to determine who murdered Mr. Body, which weapon was used to murder him, and where the murder took place. The game uses a set of cards representing six persons (labeled A, B, …, F), six weapons (labeled G, H, …, L) and nine rooms (labeled M, N, …, U). At the start of the game, one person card, one weapon card, and one room card are selected at random and removed from the deck so no one can see them – they represent the murderer, the murder weapon, and the murder location. The remaining $18$ cards are shuffled and dealt to the players, starting with player $1$, then to her right player $2$, and so on. Some players may end up with one more card than others. For the purposes of this problem there are four players, so the person to the right of player $4$ is player $1$.\n\nThe rest of the game is spent searching for clues. Players take turns, starting with player 1 and moving to the right. A turn consists of making a suggestion (consisting of a murder suspect, a weapon, and a room) and asking other players if they have any evidence that refutes the suggestion. For example, you might say to another player “I believe the murderer was person A, using weapon L, in room T.” If the other player is holding exactly one of these cards, that player must show you (and only you) that card. If they have more than one such card, they can show you any one of them.\n\nWhen making a suggestion, you must first ask the person to your right for any evidence. If they have none, you continue with the person on their right, and so on, until someone has evidence, or no one has any of the cards in your suggestion.\n\nMany times you can gain information even if you are not the person making the suggestion. Suppose, in the above example, you are the third player and have cards A and T. If someone else shows evidence to the suggester, you know that it must be weapon card L. Keeping track of suggestions and who gave evidence at each turn is an important strategy when playing the game.\n\nTo win the game, you must make an accusation, where you state your final guess of the murderer, weapon, and room. After stating your accusation, you check the three cards that were set aside at the start of the game – if they match your accusation, you win! Needless to say, you want to be absolutely sure of your accusation before you make it.\n\nHere is your problem. You are player $1$. Given a set of cards dealt to you and a history of suggestions and evidence, you need to decide how close you are to being able to make an accusation.\n\n-----Input-----\nThe input starts with an integer $n$ ($1 \\le n \\le 50$), the number of suggestions made during the game. Following this is a line containing the five cards you are dealt, all uppercase letters in the range ‘A’…‘U’. The remaining $n$ lines contain one suggestion per line. Each of these lines starts with three characters representing the suggestion (in the order person, weapon, room), followed by the responses of up to three players, beginning with the player to the right of the player making the suggestion. If a player presents no evidence, a ‘-’ (dash) is listed; otherwise an “evidence character” is listed. If the specific evidence card is seen by you (either because you provided it or you were the person receiving the evidence) then the evidence character identifies that card; otherwise the evidence character is ‘*’. Note that only the last response can be an evidence character. All characters are separated by single spaces. Only valid suggestion/response sequences appear in the input.\n\n-----Output-----\nDisplay a three character string identifying the murderer, the murder weapon, and the room. If the murderer can be identified, use the appropriate letter for that person; otherwise use ‘?’. Do the same for the murder weapon and the room.\n\n-----Examples-----\nSample Input 1:\n1\nB I P C F\nA G M - - -\nSample Output 1:\nAGM\n\nSample Input 2:\n2\nA B C D H\nF G M M\nF H M - *\nSample Output 2:\nE??\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9315"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9315", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["developed", 6], ["in", 6], ["the", 6], ["1940s", 6], ["in", 6], ["the", 6], ["united", 6], ["kingdom", 6], ["the", 6], ["game", 6], ["of", 6], ["cluedo", 6], ["is", 8], ["one", 8], ["of", 8], ["the", 8], ["most", 8], ["popular", 8], ["board", 6], ["games", 6], ["in", 6], ["the", 6], ["world", 6], ["the", 6], ["object", 6], ["of", 6], ["the", 6], ["game", 6], ["is", 6], ["to", 6], ["determine", 6], ["who", 6], ["murdered", 6], ["mr", 6], ["body", 6], ["which", 6], ["weapon", 6], ["was", 6], ["used", 6], ["to", 6], ["murder", 6], ["him", 6], ["and", 6], ["where", 6], ["the", 6], ["murder", 6], ["took", 6], ["place", 6], ["the", 6], ["game", 5], ["uses", 5], ["a", 5], ["set", 5], ["of", 5], ["cards", 5], ["representing", 5], ["six", 5], ["persons", 5], ["labeled", 5], ["a", 5], ["b", 5], ["…", 5], ["f", 5], ["six", 5], ["weapons", 5], ["labeled", 5], ["g", 5], ["h", 5], ["…", 5], ["l", 5], ["and", 5], ["nine", 5], ["rooms", 5], ["labeled", 5], ["m", 5], ["n", 5], ["…", 5], ["u", 6], ["at", 6], ["the", 6], ["start", 6], ["of", 6], ["the", 6], ["game", 6], ["one", 6], ["person", 6], ["card", 6], ["one", 6], ["weapon", 6], ["card", 6], ["and", 6], ["one", 6], ["room", 6], ["card", 6], ["are", 6], ["selected", 6], ["at", 6], ["random", 6], ["and", 6], ["removed", 6], ["from", 6], ["the", 6], ["deck", 6], ["so", 6], ["no", 6], ["one", 6], ["can", 6], ["see", 6], ["them", 6], ["–", 6], ["they", 6], ["represent", 6], ["the", 6], ["murderer", 6], ["the", 6], ["murder", 6], ["weapon", 6], ["and", 6], ["the", 6], ["murder", 6], ["location", 6], ["the", 6], ["remaining", 6], ["18", 6], ["cards", 6], ["are", 6], ["shuffled", 6], ["and", 6], ["dealt", 6], ["to", 6], ["the", 6], ["players", 6], ["starting", 6], ["with", 6], ["player", 6], ["1", 6], ["then", 6], ["to", 6], ["her", 6], ["right", 6], ["player", 6], ["2", 6], ["and", 6], ["so", 6], ["on", 6], ["some", 6], ["players", 6], ["may", 6], ["end", 6], ["up", 6], ["with", 6], ["one", 6], ["more", 6], ["card", 6], ["than", 6], ["others", 6], ["for", 6], ["the", 6], ["purposes", 6], ["of", 6], ["this", 6], ["problem", 6], ["there", 6], ["are", 6], ["four", 6], ["players", 6], ["so", 6], ["the", 6], ["person", 6], ["to", 6], ["the", 6], ["right", 6], ["of", 6], ["player", 6], ["4", 6], ["is", 6], ["player", 6], ["1", 6], ["the", 6], ["rest", 6], ["of", 6], ["the", 6], ["game", 6], ["is", 6], ["spent", 6], ["searching", 6], ["for", 6], ["clues", 6], ["players", 6], ["take", 6], ["turns", 6], ["starting", 6], ["with", 6], ["player", 6], ["1", 6], ["and", 6], ["moving", 6], ["to", 6], ["the", 6], ["right", 6], ["a", 6], ["turn", 6], ["consists", 6], ["of", 6], ["making", 6], ["a", 6], ["suggestion", 6], ["consisting", 6], ["of", 6], ["a", 6], ["murder", 6], ["suspect", 6], ["a", 6], ["weapon", 6], ["and", 6], ["a", 6], ["room", 6], ["and", 6], ["asking", 6], ["other", 6], ["players", 6], ["if", 6], ["they", 6], ["have", 6], ["any", 6], ["evidence", 6], ["that", 6], ["refutes", 6], ["the", 6], ["suggestion", 6], ["for", 6], ["example", 6], ["you", 6], ["might", 6], ["say", 6], ["to", 6], ["another", 6], ["player", 6], ["“i", 6], ["believe", 6], ["the", 6], ["murderer", 6], ["was", 6], ["person", 6], ["a", 6], ["using", 6], ["weapon", 6], ["l", 6], ["in", 6], ["room", 6], ["t", 6], ["”", 6], ["if", 6], ["the", 6], ["other", 6], ["player", 6], ["is", 6], ["holding", 6], ["exactly", 6], ["one", 6], ["of", 6], ["these", 6], ["cards", 6], ["that", 6], ["player", 6], ["must", 6], ["show", 6], ["you", 6], ["and", 6], ["only", 6], ["you", 6], ["that", 6], ["card", 6], ["if", 6], ["they", 6], ["have", 6], ["more", 6], ["than", 6], ["one", 6], ["such", 6], ["card", 6], ["they", 6], ["can", 6], ["show", 6], ["you", 6], ["any", 6], ["one", 6], ["of", 6], ["them", 6], ["when", 6], ["making", 6], ["a", 6], ["suggestion", 6], ["you", 6], ["must", 6], ["first", 6], ["ask", 6], ["the", 6], ["person", 6], ["to", 6], ["your", 6], ["right", 6], ["for", 6], ["any", 6], ["evidence", 6], ["if", 6], ["they", 6], ["have", 6], ["none", 6], ["you", 6], ["continue", 6], ["with", 6], ["the", 6], ["person", 6], ["on", 6], ["their", 6], ["right", 6], ["and", 6], ["so", 6], ["on", 6], ["until", 6], ["someone", 6], ["has", 6], ["evidence", 6], ["or", 6], ["no", 6], ["one", 6], ["has", 6], ["any", 6], ["of", 6], ["the", 6], ["cards", 6], ["in", 6], ["your", 6], ["suggestion", 6], ["many", 6], ["times", 6], ["you", 6], ["can", 6], ["gain", 6], ["information", 6], ["even", 6], ["if", 6], ["you", 6], ["are", 6], ["not", 6], ["the", 6], ["person", 6], ["making", 6], ["the", 6], ["suggestion", 6], ["suppose", 6], ["in", 6], ["the", 6], ["above", 6], ["example", 6], ["you", 6], ["are", 6], ["the", 6], ["third", 6], ["player", 6], ["and", 6], ["have", 6], ["cards", 6], ["a", 6], ["and", 6], ["t", 6], ["if", 6], ["someone", 6], ["else", 6], ["shows", 6], ["evidence", 6], ["to", 6], ["the", 6], ["suggester", 6], ["you", 6], ["know", 6], ["that", 6], ["it", 6], ["must", 6], ["be", 6], ["weapon", 6], ["card", 6], ["l", 6], ["keeping", 6], ["track", 6], ["of", 6], ["suggestions", 6], ["and", 6], ["who", 6], ["gave", 6], ["evidence", 6], ["at", 6], ["each", 6], ["turn", 6], ["is", 6], ["an", 6], ["important", 6], ["strategy", 6], ["when", 6], ["playing", 6], ["the", 6], ["game", 6], ["to", 6], ["win", 6], ["the", 6], ["game", 6], ["you", 6], ["must", 6], ["make", 6], ["an", 6], ["accusation", 6], ["where", 6], ["you", 6], ["state", 6], ["your", 6], ["final", 6], ["guess", 6], ["of", 6], ["the", 6], ["murderer", 6], ["weapon", 6], ["and", 6], ["room", 6], ["after", 6], ["stating", 6], ["your", 6], ["accusation", 6], ["you", 6], ["check", 6], ["the", 6], ["three", 6], ["cards", 6], ["that", 6], ["were", 6], ["set", 6], ["aside", 6], ["at", 6], ["the", 6], ["start", 6], ["of", 6], ["the", 6], ["game", 6], ["–", 6], ["if", 6], ["they", 6], ["match", 6], ["your", 6], ["accusation", 6], ["you", 6], ["win", 6], ["needless", 6], ["to", 6], ["say", 6], ["you", 6], ["want", 6], ["to", 6], ["be", 6], ["absolutely", 6], ["sure", 6], ["of", 6], ["your", 6], ["accusation", 6], ["before", 6], ["you", 6], ["make", 6], ["it", 6], ["here", 6], ["is", 6], ["your", 6], ["problem", 6], ["you", 6], ["are", 6], ["player", 6], ["1", 6], ["given", 6], ["a", 6], ["set", 6], ["of", 6], ["cards", 6], ["dealt", 6], ["to", 6], ["you", 6], ["and", 6], ["a", 6], ["history", 6], ["of", 6], ["suggestions", 6], ["and", 6], ["evidence", 6], ["you", 6], ["need", 6], ["to", 6], ["decide", 1], ["how", 1], ["close", 1], ["you", 1], ["are", 1], ["to", 1], ["being", 1], ["able", 1], ["to", 1], ["make", 0], ["an", 0], ["accusation", 0], ["input", 0], ["the", 5], ["input", 5], ["starts", 5], ["with", 5], ["an", 5], ["integer", 5], ["n", 5], ["1", 5], ["le", 5], ["n", 5], ["le", 5], ["50", 6], ["the", 6], ["number", 6], ["of", 6], ["suggestions", 6], ["made", 6], ["during", 6], ["the", 6], ["game", 6], ["following", 6], ["this", 6], ["is", 6], ["a", 6], ["line", 6], ["containing", 6], ["the", 5], ["five", 5], ["cards", 5], ["you", 5], ["are", 5], ["dealt", 5], ["all", 5], ["uppercase", 5], ["letters", 5], ["in", 5], ["the", 5], ["range", 5], ["‘a’…‘u’", 5], ["the", 6], ["remaining", 6], ["n", 6], ["lines", 6], ["contain", 6], ["one", 6], ["suggestion", 6], ["per", 6], ["line", 6], ["each", 6], ["of", 6], ["these", 6], ["lines", 6], ["starts", 6], ["with", 6], ["three", 6], ["characters", 6], ["representing", 6], ["the", 6], ["suggestion", 6], ["in", 6], ["the", 6], ["order", 6], ["person", 6], ["weapon", 6], ["room", 6], ["followed", 6], ["by", 6], ["the", 6], ["responses", 6], ["of", 6], ["up", 6], ["to", 6], ["three", 6], ["players", 6], ["beginning", 6], ["with", 6], ["the", 6], ["player", 6], ["to", 6], ["the", 6], ["right", 6], ["of", 6], ["the", 6], ["player", 6], ["making", 6], ["the", 6], ["suggestion", 6], ["if", 6], ["a", 6], ["player", 6], ["presents", 6], ["no", 6], ["evidence", 6], ["a", 6], ["‘", 6], ["’", 6], ["dash", 6], ["is", 6], ["listed", 6], ["otherwise", 6], ["an", 6], ["“evidence", 6], ["character”", 6], ["is", 6], ["listed", 6], ["if", 6], ["the", 6], ["specific", 6], ["evidence", 6], ["card", 6], ["is", 6], ["seen", 6], ["by", 6], ["you", 6], ["either", 6], ["because", 6], ["you", 6], ["provided", 6], ["it", 6], ["or", 6], ["you", 6], ["were", 6], ["the", 6], ["person", 6], ["receiving", 6], ["the", 6], ["evidence", 6], ["then", 6], ["the", 6], ["evidence", 6], ["character", 6], ["identifies", 6], ["that", 6], ["card", 6], ["otherwise", 6], ["the", 6], ["evidence", 6], ["character", 6], ["is", 6], ["‘", 6], ["’", 6], ["note", 6], ["that", 6], ["only", 6], ["the", 6], ["last", 6], ["response", 6], ["can", 6], ["be", 6], ["an", 6], ["evidence", 6], ["character", 6], ["all", 6], ["characters", 6], ["are", 6], ["separated", 6], ["by", 1], ["single", 1], ["spaces", 1], ["only", 1], ["valid", 1], ["suggestion", 1], ["response", 1], ["sequences", 1], ["appear", 1], ["in", 1], ["the", 1], ["input", 1], ["output", 1], ["display", 6], ["a", 6], ["three", 6], ["character", 6], ["string", 6], ["identifying", 6], ["the", 6], ["murderer", 6], ["the", 6], ["murder", 6], ["weapon", 6], ["and", 6], ["the", 6], ["room", 6], ["if", 6], ["the", 6], ["murderer", 6], ["can", 6], ["be", 6], ["identified", 6], ["use", 6], ["the", 6], ["appropriate", 6], ["letter", 6], ["for", 6], ["that", 6], ["person", 6], ["otherwise", 6], ["use", 6], ["‘", 0], ["’", 0], ["do", 0], ["the", 0], ["same", 0], ["for", 0], ["the", 0], ["murder", 0], ["weapon", 0], ["and", 0], ["the", 0], ["room", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["1", 0], ["b", 0], ["i", 0], ["p", 0], ["c", 0], ["f", 0], ["a", 0], ["g", 0], ["m", 0], ["sample", 0], ["output", 0], ["1", 0], ["agm", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["h", 0], ["f", 0], ["g", 0], ["m", 0], ["m", 0], ["f", 0], ["h", 0], ["m", 0], ["sample", 0], ["output", 0], ["2", 0], ["e", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9308510638297872, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.18149379432624194, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.93717277486911, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.41880453752181607, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9308510638297872, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.18149379432624194, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.93717277486911, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.41880453752181607, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are given a rooted tree with $n$ nodes. The nodes are numbered $1..n$. The root is node $1$, and $m$ of the nodes are colored red, the rest are black.\n\nYou would like to choose a subset of nodes such that there is no node in your subset which is an ancestor of any other node in your subset. For example, if A is the parent of B and B is the parent of C, then you could have at most one of A, B or C in your subset. In addition, you would like exactly $k$ of your chosen nodes to be red.\n\nIf exactly $m$ of the nodes are red, then for all $k=0..m$, figure out how many ways you can choose subsets with $k$ red nodes, and no node is an ancestor of any other node.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line with two integers $n$ ($1 \\le n \\le 2 \\times 10^5$) and $m$ ($0 \\le m \\le min(10^3,\\ n)$), where $n$ is the number of nodes in the tree, and $m$ is the number of nodes which are red. The nodes are numbered $1..n$.\n\nEach of the next $n-1$ lines will contain a single integer $p$ ($1 \\le p \\le n$), which is the number of the parent of this node. The nodes are listed in order, starting with node $2$, then node $3$, and so on. Node $1$ is skipped, since it is the root. It is guaranteed that the nodes form a single tree, with a single root at node $1$ and no cycles.\n\nEach of the next $m$ lines will contain single integer $r$ ($1 \\le r \\le n$). These are the numbers of the red nodes. No value of $r$ will be repeated.\n\n-----Output-----\nOutput $m+1$ lines, corresponding to the number of subsets satisfying the given criteria with a number of red nodes equal to $k=0..m$, in that order. Output this number modulo $10^9+7$.\n\n-----Examples-----\nSample Input 1:\n4 1\n1\n1\n1\n3\nSample Output 1:\n5\n4\n\nSample Input 2:\n4 4\n1\n1\n1\n1\n2\n3\n4\nSample Output 2:\n1\n4\n3\n1\n0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5812"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5812", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["rooted", 1], ["tree", 1], ["with", 1], ["n", 1], ["nodes", 1], ["the", 1], ["nodes", 1], ["are", 1], ["numbered", 1], ["1", 1], ["n", 1], ["the", 1], ["root", 1], ["is", 1], ["node", 1], ["1", 1], ["and", 1], ["m", 1], ["of", 1], ["the", 1], ["nodes", 1], ["are", 1], ["colored", 1], ["red", 1], ["the", 1], ["rest", 1], ["are", 1], ["black", 1], ["you", 1], ["would", 1], ["like", 1], ["to", 1], ["choose", 1], ["a", 1], ["subset", 1], ["of", 1], ["nodes", 1], ["such", 1], ["that", 1], ["there", 1], ["is", 1], ["no", 1], ["node", 1], ["in", 1], ["your", 1], ["subset", 1], ["which", 1], ["is", 1], ["an", 1], ["ancestor", 1], ["of", 1], ["any", 1], ["other", 1], ["node", 1], ["in", 1], ["your", 1], ["subset", 1], ["for", 1], ["example", 1], ["if", 1], ["a", 2], ["is", 1], ["the", 1], ["parent", 1], ["of", 1], ["b", 1], ["and", 1], ["b", 1], ["is", 1], ["the", 1], ["parent", 1], ["of", 1], ["c", 1], ["then", 1], ["you", 1], ["could", 1], ["have", 1], ["at", 1], ["most", 1], ["one", 1], ["of", 1], ["a", 1], ["b", 1], ["or", 1], ["c", 1], ["in", 1], ["your", 1], ["subset", 1], ["in", 1], ["addition", 1], ["you", 1], ["would", 1], ["like", 1], ["exactly", 1], ["k", 1], ["of", 1], ["your", 1], ["chosen", 1], ["nodes", 1], ["to", 1], ["be", 1], ["red", 1], ["if", 1], ["exactly", 1], ["m", 1], ["of", 1], ["the", 1], ["nodes", 1], ["are", 1], ["red", 1], ["then", 1], ["for", 1], ["all", 1], ["k", 1], ["0", 1], ["m", 1], ["figure", 1], ["out", 1], ["how", 1], ["many", 1], ["ways", 1], ["you", 1], ["can", 1], ["choose", 1], ["subsets", 1], ["with", 1], ["k", 1], ["red", 0], ["nodes", 0], ["and", 0], ["no", 0], ["node", 0], ["is", 0], ["an", 0], ["ancestor", 0], ["of", 0], ["any", 0], ["other", 0], ["node", 0], ["input", 0], ["each", 52], ["input", 52], ["will", 52], ["consist", 52], ["of", 52], ["a", 52], ["single", 52], ["test", 52], ["case", 52], ["note", 22], ["that", 21], ["your", 21], ["program", 21], ["may", 14], ["be", 14], ["run", 14], ["multiple", 12], ["times", 11], ["on", 8], ["different", 7], ["inputs", 6], ["each", 1], ["test", 1], ["case", 1], ["will", 1], ["begin", 1], ["with", 1], ["a", 1], ["line", 1], ["with", 1], ["two", 1], ["integers", 1], ["n", 1], ["1", 1], ["le", 1], ["n", 1], ["le", 1], ["2", 1], ["times", 1], ["10", 1], ["5", 1], ["and", 1], ["m", 1], ["0", 1], ["le", 1], ["m", 1], ["le", 1], ["min", 1], ["10", 1], ["3", 1], ["n", 1], ["where", 1], ["n", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["nodes", 1], ["in", 1], ["the", 1], ["tree", 1], ["and", 1], ["m", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["nodes", 1], ["which", 1], ["are", 1], ["red", 1], ["the", 1], ["nodes", 1], ["are", 1], ["numbered", 1], ["1", 1], ["n", 1], ["each", 1], ["of", 1], ["the", 1], ["next", 1], ["n", 1], ["1", 1], ["lines", 1], ["will", 1], ["contain", 1], ["a", 1], ["single", 1], ["integer", 1], ["p", 1], ["1", 1], ["le", 1], ["p", 1], ["le", 1], ["n", 1], ["which", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["the", 1], ["parent", 1], ["of", 1], ["this", 1], ["node", 1], ["the", 1], ["nodes", 1], ["are", 1], ["listed", 1], ["in", 1], ["order", 1], ["starting", 1], ["with", 1], ["node", 1], ["2", 1], ["then", 1], ["node", 1], ["3", 1], ["and", 1], ["so", 1], ["on", 1], ["node", 1], ["1", 1], ["is", 1], ["skipped", 1], ["since", 1], ["it", 1], ["is", 1], ["the", 1], ["root", 1], ["it", 1], ["is", 1], ["guaranteed", 1], ["that", 1], ["the", 1], ["nodes", 1], ["form", 1], ["a", 1], ["single", 1], ["tree", 1], ["with", 1], ["a", 1], ["single", 1], ["root", 1], ["at", 1], ["node", 1], ["1", 1], ["and", 1], ["no", 1], ["cycles", 1], ["each", 1], ["of", 1], ["the", 1], ["next", 1], ["m", 1], ["lines", 1], ["will", 1], ["contain", 1], ["single", 1], ["integer", 1], ["r", 1], ["1", 1], ["le", 1], ["r", 1], ["le", 1], ["n", 1], ["these", 1], ["are", 1], ["the", 1], ["numbers", 1], ["of", 0], ["the", 0], ["red", 0], ["nodes", 0], ["no", 0], ["value", 0], ["of", 0], ["r", 0], ["will", 0], ["be", 0], ["repeated", 0], ["output", 0], ["output", 1], ["m", 1], ["1", 1], ["lines", 1], ["corresponding", 1], ["to", 1], ["the", 1], ["number", 1], ["of", 1], ["subsets", 1], ["satisfying", 1], ["the", 1], ["given", 1], ["criteria", 1], ["with", 1], ["a", 1], ["number", 1], ["of", 1], ["red", 1], ["nodes", 1], ["equal", 1], ["to", 1], ["k", 1], ["0", 0], ["m", 0], ["in", 0], ["that", 0], ["order", 0], ["output", 0], ["this", 0], ["number", 0], ["modulo", 0], ["10", 0], ["9", 0], ["7", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["3", 0], ["sample", 0], ["output", 0], ["1", 0], ["5", 0], ["4", 0], ["sample", 0], ["input", 0], ["2", 0], ["4", 0], ["4", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["sample", 0], ["output", 0], ["2", 0], ["1", 0], ["4", 0], ["3", 0], ["1", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8202531645569621, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7688213685049129, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8845208845208845, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8358340062885519, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7746835443037975, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.766922845087402, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8402948402948403, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.833991458991459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nHaving discolored his white socks in a rather beige shade (as seen on the picture), Luktas Svettocek realised he can’t just throw all his laundry into one machine and expect it to retain its original colors. However, he is also too lazy to do his laundry in several rounds. He would much rather buy more laundry machines!\n\nEach of Luktas’ socks have a color $D_ i$ which has a number between $0$ and $10^9$ assigned to it. After some experimentation, he found that he could wash any socks with a maximum absolute color difference of $K$ in the same machine without any discoloring. The color difference of two socks $i$ and $j$ is $|D_ i - D_ j|$.\n\nLuktas now needs to know how many washing machines he needs to wash his $S$ socks, given that each machine can take at most $C$ socks a time.\n\n-----Input-----\nThe first line consists of three integers $1 \\le S, C \\le 10^5$ and $0 \\le K \\le 10^9$, the number of socks, the capacity of a laundry machine and the maximum color difference, respectively. Then follow one line with $S$ integers; these are the color values $D_ i$ of every sock.\n\n-----Output-----\nOutput a single integer; the number of machines Luktas needs to wash all his socks.\n\n-----Examples-----\nSample Input:\n5 3 0\n0 0 1 1 2\nSample Output:\n3\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7848"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7848", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["having", 1], ["discolored", 1], ["his", 1], ["white", 1], ["socks", 1], ["in", 1], ["a", 1], ["rather", 1], ["beige", 1], ["shade", 1], ["as", 1], ["seen", 1], ["on", 1], ["the", 1], ["picture", 1], ["luktas", 1], ["svettocek", 1], ["realised", 1], ["he", 1], ["can’t", 1], ["just", 1], ["throw", 1], ["all", 1], ["his", 1], ["laundry", 1], ["into", 1], ["one", 1], ["machine", 1], ["and", 1], ["expect", 1], ["it", 1], ["to", 1], ["retain", 1], ["its", 1], ["original", 1], ["colors", 1], ["however", 1], ["he", 1], ["is", 1], ["also", 1], ["too", 1], ["lazy", 1], ["to", 1], ["do", 1], ["his", 1], ["laundry", 1], ["in", 1], ["several", 1], ["rounds", 1], ["he", 1], ["would", 1], ["much", 1], ["rather", 1], ["buy", 1], ["more", 1], ["laundry", 1], ["machines", 1], ["each", 1], ["of", 1], ["luktas’", 1], ["socks", 1], ["have", 1], ["a", 1], ["color", 1], ["d", 1], ["i", 1], ["which", 1], ["has", 1], ["a", 1], ["number", 1], ["between", 1], ["0", 1], ["and", 1], ["10", 1], ["9", 1], ["assigned", 1], ["to", 1], ["it", 1], ["after", 1], ["some", 1], ["experimentation", 1], ["he", 1], ["found", 1], ["that", 1], ["he", 1], ["could", 1], ["wash", 1], ["any", 1], ["socks", 1], ["with", 1], ["a", 1], ["maximum", 1], ["absolute", 1], ["color", 1], ["difference", 1], ["of", 1], ["k", 1], ["in", 1], ["the", 1], ["same", 1], ["machine", 1], ["without", 1], ["any", 1], ["discoloring", 1], ["the", 1], ["color", 1], ["difference", 1], ["of", 1], ["two", 1], ["socks", 1], ["i", 1], ["and", 1], ["j", 1], ["is", 1], ["d", 1], ["i", 1], ["d", 1], ["j", 1], ["luktas", 1], ["now", 1], ["needs", 1], ["to", 1], ["know", 1], ["how", 1], ["many", 1], ["washing", 1], ["machines", 1], ["he", 1], ["needs", 1], ["to", 1], ["wash", 1], ["his", 1], ["s", 1], ["socks", 1], ["given", 0], ["that", 0], ["each", 0], ["machine", 0], ["can", 0], ["take", 0], ["at", 0], ["most", 0], ["c", 0], ["socks", 0], ["a", 0], ["time", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["consists", 1], ["of", 1], ["three", 1], ["integers", 1], ["1", 1], ["le", 1], ["s", 1], ["c", 1], ["le", 1], ["10", 1], ["5", 1], ["and", 1], ["0", 1], ["le", 1], ["k", 1], ["le", 1], ["10", 1], ["9", 1], ["the", 1], ["number", 1], ["of", 1], ["socks", 1], ["the", 1], ["capacity", 1], ["of", 1], ["a", 1], ["laundry", 1], ["machine", 1], ["and", 1], ["the", 1], ["maximum", 1], ["color", 1], ["difference", 1], ["respectively", 1], ["then", 1], ["follow", 1], ["one", 1], ["line", 1], ["with", 1], ["s", 1], ["integers", 0], ["these", 0], ["are", 0], ["the", 0], ["color", 0], ["values", 0], ["d", 0], ["i", 0], ["of", 0], ["every", 0], ["sock", 0], ["output", 0], ["output", 1], ["a", 1], ["single", 1], ["integer", 0], ["the", 0], ["number", 0], ["of", 0], ["machines", 0], ["luktas", 0], ["needs", 0], ["to", 0], ["wash", 0], ["all", 0], ["his", 0], ["socks", 0], ["examples", 0], ["sample", 0], ["input", 0], ["5", 0], ["3", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["1", 0], ["2", 0], ["sample", 0], ["output", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.782608695652174, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.782608695652174, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8925619834710744, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8925619834710744, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.782608695652174, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.782608695652174, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8925619834710744, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8925619834710744, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nGuy-Manuel and Thomas have an array $a$ of $n$ integers [$a_1, a_2, \\dots, a_n$]. In one step they can add $1$ to any element of the array. Formally, in one step they can choose any integer index $i$ ($1 \\le i \\le n$) and do $a_i := a_i + 1$.\n\nIf either the sum or the product of all elements in the array is equal to zero, Guy-Manuel and Thomas do not mind to do this operation one more time.\n\nWhat is the minimum number of steps they need to do to make both the sum and the product of all elements in the array different from zero? Formally, find the minimum number of steps to make $a_1 + a_2 +$ $\\dots$ $+ a_n \\ne 0$ and $a_1 \\cdot a_2 \\cdot$ $\\dots$ $\\cdot a_n \\ne 0$.\n\n\n-----Input-----\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 100$) — the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-100 \\le a_i \\le 100$) — elements of the array .\n\n\n-----Output-----\n\nFor each test case, output the minimum number of steps required to make both sum and product of all elements in the array different from zero.\n\n\n-----Example-----\nInput\n4\n3\n2 -1 -1\n4\n-1 0 0 1\n2\n-1 2\n3\n0 -2 1\n\nOutput\n1\n2\n0\n2\n\n\n\n-----Note-----\n\nIn the first test case, the sum is $0$. If we add $1$ to the first element, the array will be $[3,-1,-1]$, the sum will be equal to $1$ and the product will be equal to $3$.\n\nIn the second test case, both product and sum are $0$. If we add $1$ to the second and the third element, the array will be $[-1,1,1,1]$, the sum will be equal to $2$ and the product will be equal to $-1$. It can be shown that fewer steps can't be enough.\n\nIn the third test case, both sum and product are non-zero, we don't need to do anything.\n\nIn the fourth test case, after adding $1$ twice to the first element the array will be $[2,-2,1]$, the sum will be $1$ and the product will be $-4$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\nimport math\nimport heapq\nimport bisect\nimport re\nfrom collections import deque\nfrom decimal import *\nfrom fractions import gcd\n \ndef YES_NO(flag):\n\tif flag:\n\t\tprint(\"AWW\")\n\telse:\n\t\tprint(\"WAW\")\n \n \ndef main():\n\t# q = [int(i) for i in sys.stdin.readline().split()]\n\tn = int(sys.stdin.readline())\n\tq = [int(i) for i in sys.stdin.readline().split()]\n\tw = q.count(0)\n\tif w + sum(q) == 0:\n\t\tprint(w + 1)\n\telse:\n\t\tprint(w)\nfor i in range(int(sys.stdin.readline())):\n\tmain()\n", "t = int(input())\nfor zz in range(t):\n\tn = int(input())\n\ta = [int(i) for i in input().split()]\n\tans = a.count(0)\n\tif sum(a) + a.count(0) == 0:\n\t\tans += 1\n\tprint(ans)\n", "for _ in range(int(input())):\n\tn = int(input())\n\tar = list(map(int, input().split()))\n\tx = sum(ar)\n\ty = ar.count(0)\n\tif x + y == 0:\n\t\tprint(y + 1)\n\telse:\n\t\tprint(y)\n", "def solve():\n\tn = int(input())\n\tarr = list(map(int, input().split()))\n\tcnt = 0\n\tfor i in range(n):\n\t\tif not arr[i]:\n\t\t\tarr[i] += 1\n\t\t\tcnt += 1\n\tif not sum(arr):\n\t\tcnt += 1\n\treturn cnt\n\n\nfor _ in range(int(input())):\n\tprint(solve())\n", "for nt in range(int(input())):\n\tn=int(input())\n\tl=list(map(int,input().split()))\n\tcount=0\n\tfor i in range(n):\n\t\tif l[i]==0:\n\t\t\tcount+=1\n\t\t\tl[i]=1\n\tif sum(l)==0:\n\t\tcount+=1\n\tprint (count)\n", "N = int(input())\nfor _ in range(N):\n\tn = int(input())\n\tlst = list(map(int, input().split()))\n\tans = 0\n\tfor i in range(len(lst)):\n\t\tif lst[i] == 0:\n\t\t\tans += 1\n\t\t\tlst[i] += 1\n\n\tif sum(lst) == 0:\n\t\tans += 1\n\tprint(ans)\n", "t = int(input())\nwhile(t):\n\tt -= 1\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tans = a.count(0)\n\tsumm = sum(a) + ans\n\tif(summ == 0):\n\t\tprint(ans+1)\n\telse:\n\t\tprint(ans)\n", "for _ in range(int(input())):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\n\tc = 0\n\n\tfor i in range(n):\n\t\tif a[i] == 0:\n\t\t\ta[i] += 1\n\t\t\tc += 1\n\n\tif sum(a) == 0:\n\t\tc += 1\n\n\tprint(c)\n", "t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\tarr = [int(j) for j in input().split()]\n\tz = arr.count(0)\n\n\tsu = sum(arr) + z\n\n\tif su == 0:\n\t\tz += 1\n\tprint(z)\n", "t = int(input())\nfor i in range(t):\n\tn = int(input())\n\tarr = 0\n\ta = [int(x) for x in input().split()]\n\ts = sum(a)\n\tfor item in a:\n\t\tif item == 0:\n\t\t\tarr += 1\n\t\t\ts += 1\n\tif (s == 0):\n\t\tprint(arr + 1)\n\telse:\n\t\tprint(arr)\n", "t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tans = 0\n\tfor i in range(n):\n\t\tif a[i] == 0:\n\t\t\ta[i] += 1\n\t\t\tans += 1\n\tif sum(a) == 0:\n\t\tans += 1\n\tprint(ans)\n", "import sys\nt=int(input())\nfor _ in range(t):\n\tn=int(input())\n\tl = list(map(int,sys.stdin.readline().split()))\n\tans = 0\n\tfor i in range(n):\n\t\tif l[i]==0:\n\t\t\tans+=1\n\t\t\tl[i]=1\n\tif sum(l)==0:\n\t\tans+=1\n\tprint(ans)\n", "import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ngo = lambda : 1/0\ndef write(*args, sep=\"\\n\"):\n\tfor i in args:\n\t\tsys.stdout.write(\"{}{}\".format(i, sep))\nINF = float('inf')\nMOD = int(1e9 + 7)\nYES = \"YES\"\nNO = \"NO\"\n\nfor _ in range(int(input())):\n\ttry:\n\t\tn = int(input())\n\t\tarr = read()\n\t\tans = 0\n\n\t\tfor i in range(n):\n\t\t\tif arr[i] == 0:\n\t\t\t\tarr[i] = 1\n\t\t\t\tans += 1\n\t\t\n\t\tif sum(arr) == 0:\n\t\t\tprint(ans + 1)\n\t\telse:\n\t\t\tprint(ans)\n\n\texcept ZeroDivisionError:\n\t\tcontinue \n\n\texcept Exception as e:\n\t\tprint(e)\n\t\tcontinue\n", "for _ in range(int(input())):\n\tn=int(input())\n\tl=list(map(int,input().split()))\n\tans=0\n\tfor i in range(n):\n\t\tif l[i]==0:\n\t\t\tl[i]=1\n\t\t\tans+=1\n\tif sum(l)==0:\n\t\tans+=1\n\tprint(ans)\n", "for _ in range(int(input())):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tans = 0\n\tc = a.count(0)\n\tsumm = sum(a)\n\tif c > 0:\n\t\tans += c\n\t\tsumm += c\n\tif summ == 0:\n\t\tans += 1\n\tprint(ans)\n", "import sys\n\n# inf = open('input.txt', 'r')\n# reader = (line.rstrip() for line in inf)\nreader = (line.rstrip() for line in sys.stdin)\ninput = reader.__next__\n\nt = int(input())\nfor _ in range(t):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tctr = 0\n\tsm = sum(a)\n\tfor val in a:\n\t\tif val == 0:\n\t\t\tctr += 1\n\tif sm + ctr == 0:\n\t\tctr += 1\n\tprint(ctr)\n\n# inf.close()\n", "def main():\n\timport sys\n\tinput = sys.stdin.readline\n\n\tt = int(input())\n\tfor _ in range(t):\n\t\tN = int(input())\n\t\tA = list(map(int, input().split()))\n\n\t\ts = 0\n\t\tans = 0\n\t\tfor a in A:\n\t\t\tif a == 0:\n\t\t\t\tans += 1\n\t\t\t\ts += 1\n\t\t\telse:\n\t\t\t\ts += a\n\t\tif s == 0:\n\t\t\tans += 1\n\t\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "for t in range(int(input())):\n\tn = int(input())\n\tl = [int(i) for i in input().split()]\n\tzero = 0\n\tssum = 0\n\tfor i in l:\n\t\tssum += i\n\t\tif (not i):\n\t\t\tzero += 1\n\tres = zero\n\tif (ssum + zero == 0):\n\t\tres += 1\n\tprint(res)\n", "for _ in range(int(input())):\n\tn=int(input())\n\tl=list(map(int,input().split()))\n\ts=sum(l)\n\tz=l.count(0)\n\tcount=z\n\ts+=z\n\tif s==0:\n\t\tcount+=1\n\tprint(count)\n", "#Bhargey Mehta (Junior)\n#DA-IICT, Gandhinagar\nimport sys, math\nMOD = 998244353\n#sys.stdin = open('input.txt', 'r')\n\nfor i in range(int(input())):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tz = a.count(0)\n\ts = sum(a)\n\tans = z + (s+z == 0)\n\tprint(ans)\n", "t = int(input())\nfor k in range(t):\n\tn = int(input())\n\tmas = list(map(int, input().split()))\n\tkol = 0\n\tfor i in range(n):\n\t\tif mas[i] == 0:\n\t\t\tmas[i] = 1\n\t\t\tkol += 1\n\tprint(kol + int(sum(mas) == 0))\n", "for _ in range(int(input())):\n\tn = int(input())\n\tL = list(map(int,input().split()))\n\tans = 0\n\tfor i in range(len(L)):\n\t\tif L[i] == 0:\n\t\t\tans += 1\n\t\t\tL[i] = 1\n\t\n\tif sum(L) == 0:\n\t\tans += 1\n\n\tprint(ans)\n", "for _ in range(int(input())):\n\tn = int(input())\n\tl1 = list(map(int, input().split()))\n\tmoves = 0\n\tx = 0\n\tfor i in range(n):\n\t\tif l1[i] == 0:\n\t\t\tl1[i] = 1\n\t\t\tmoves+=1\n\t\tx = x + l1[i]\n\tif x!=0:\n\t\tprint(moves)\n\telse:\n\t\tprint(moves+1)\n", "def main():\n\tt = int(input())\n\tfor _ in range(t):\n\t\tn = int(input())\n\t\tarray = [int(x) for x in input().strip().split()]\n\t\tzeros = 0\n\t\tsum_ = sum(array)\n\t\tfor x in array:\n\t\t\tif x == 0:\n\t\t\t\tzeros += 1\n\t\tif (zeros + sum_) == 0:\n\t\t\tzeros += 1\n\t\tprint(zeros)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "t = int(input())\nfor i in range(t):\n\tn = int(input())\n\ta = list(map(int,input().split()))\n\n\tans = 0\n\tfor i in range(n):\n\t\tif a[i] == 0:\n\t\t\ta[i] += 1\n\t\t\tans += 1\n\t\n\tif sum(a) == 0:\n\t\tans += 1\n\t\n\tprint(ans)\n"], "id": "id9302"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9302", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["guy", 4], ["manuel", 4], ["and", 4], ["thomas", 4], ["have", 4], ["an", 4], ["array", 4], ["a", 4], ["of", 4], ["n", 4], ["integers", 4], ["a", 4], ["1", 4], ["a", 4], ["2", 4], ["dots", 4], ["a", 4], ["n", 4], ["in", 4], ["one", 4], ["step", 4], ["they", 4], ["can", 4], ["add", 4], ["1", 4], ["to", 4], ["any", 4], ["element", 4], ["of", 4], ["the", 4], ["array", 4], ["formally", 4], ["in", 4], ["one", 4], ["step", 4], ["they", 4], ["can", 4], ["choose", 4], ["any", 4], ["integer", 4], ["index", 4], ["i", 4], ["1", 4], ["le", 4], ["i", 4], ["le", 4], ["n", 4], ["and", 4], ["do", 4], ["a", 4], ["i", 4], ["a", 4], ["i", 4], ["1", 4], ["if", 4], ["either", 4], ["the", 4], ["sum", 4], ["or", 4], ["the", 4], ["product", 4], ["of", 4], ["all", 4], ["elements", 4], ["in", 4], ["the", 4], ["array", 4], ["is", 4], ["equal", 4], ["to", 4], ["zero", 4], ["guy", 4], ["manuel", 4], ["and", 4], ["thomas", 4], ["do", 4], ["not", 4], ["mind", 4], ["to", 4], ["do", 4], ["this", 4], ["operation", 4], ["one", 4], ["more", 4], ["time", 4], ["what", 4], ["is", 4], ["the", 4], ["minimum", 4], ["number", 4], ["of", 4], ["steps", 4], ["they", 4], ["need", 4], ["to", 4], ["do", 4], ["to", 4], ["make", 4], ["both", 4], ["the", 4], ["sum", 4], ["and", 4], ["the", 4], ["product", 4], ["of", 4], ["all", 4], ["elements", 4], ["in", 4], ["the", 4], ["array", 4], ["different", 4], ["from", 4], ["zero", 4], ["formally", 4], ["find", 4], ["the", 4], ["minimum", 4], ["number", 4], ["of", 4], ["steps", 4], ["to", 4], ["make", 4], ["a", 4], ["1", 4], ["a", 4], ["2", 4], ["dots", 4], ["a", 4], ["n", 4], ["ne", 4], ["0", 4], ["and", 4], ["a", 4], ["1", 4], ["cdot", 4], ["a", 4], ["2", 4], ["cdot", 4], ["dots", 4], ["cdot", 4], ["a", 4], ["n", 4], ["ne", 4], ["0", 4], ["input", 8], ["each", 14], ["test", 14], ["contains", 19], ["multiple", 13], ["test", 31], ["cases", 8], ["the", 9], ["first", 9], ["line", 8], ["contains", 4], ["the", 4], ["number", 4], ["of", 4], ["test", 4], ["cases", 4], ["t", 4], ["1", 4], ["le", 4], ["t", 4], ["le", 4], ["10", 4], ["3", 4], ["the", 14], ["description", 24], ["of", 24], ["the", 5], ["test", 5], ["cases", 5], ["follows", 4], ["the", 4], ["first", 4], ["line", 4], ["of", 4], ["each", 4], ["test", 4], ["case", 4], ["contains", 4], ["an", 4], ["integer", 4], ["n", 4], ["1", 4], ["le", 4], ["n", 4], ["le", 4], ["100", 4], ["—", 4], ["the", 10], ["size", 10], ["of", 4], ["the", 4], ["array", 4], ["the", 15], ["second", 15], ["line", 8], ["of", 8], ["each", 8], ["test", 4], ["case", 4], ["contains", 4], ["n", 4], ["integers", 4], ["a", 4], ["1", 4], ["a", 4], ["2", 4], ["dots", 4], ["a", 4], ["n", 4], ["100", 4], ["le", 4], ["a", 4], ["i", 4], ["le", 4], ["100", 4], ["—", 4], ["elements", 4], ["of", 4], ["the", 4], ["array", 4], ["output", 4], ["for", 4], ["each", 4], ["test", 4], ["case", 4], ["output", 4], ["the", 4], ["minimum", 4], ["number", 4], ["of", 4], ["steps", 4], ["required", 4], ["to", 4], ["make", 4], ["both", 4], ["sum", 0], ["and", 0], ["product", 0], ["of", 0], ["all", 0], ["elements", 0], ["in", 0], ["the", 0], ["array", 0], ["different", 0], ["from", 0], ["zero", 0], ["example", 0], ["input", 0], ["4", 0], ["3", 0], ["2", 0], ["1", 0], ["1", 0], ["4", 0], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["3", 0], ["0", 0], ["2", 0], ["1", 0], ["output", 0], ["1", 0], ["2", 0], ["0", 0], ["2", 0], ["note", 0], ["in", 4], ["the", 4], ["first", 4], ["test", 4], ["case", 4], ["the", 4], ["sum", 4], ["is", 4], ["0", 4], ["if", 4], ["we", 4], ["add", 4], ["1", 4], ["to", 4], ["the", 4], ["first", 4], ["element", 4], ["the", 4], ["array", 4], ["will", 4], ["be", 4], ["3", 4], ["1", 4], ["1", 4], ["the", 4], ["sum", 4], ["will", 4], ["be", 4], ["equal", 4], ["to", 4], ["1", 4], ["and", 4], ["the", 4], ["product", 4], ["will", 4], ["be", 4], ["equal", 4], ["to", 4], ["3", 4], ["in", 4], ["the", 4], ["second", 4], ["test", 4], ["case", 4], ["both", 4], ["product", 4], ["and", 4], ["sum", 4], ["are", 4], ["0", 4], ["if", 4], ["we", 4], ["add", 4], ["1", 4], ["to", 4], ["the", 4], ["second", 4], ["and", 4], ["the", 4], ["third", 4], ["element", 4], ["the", 4], ["array", 4], ["will", 4], ["be", 4], ["1", 4], ["1", 4], ["1", 4], ["1", 4], ["the", 4], ["sum", 4], ["will", 4], ["be", 4], ["equal", 4], ["to", 4], ["2", 4], ["and", 4], ["the", 4], ["product", 4], ["will", 4], ["be", 4], ["equal", 4], ["to", 4], ["1", 4], ["it", 4], ["can", 4], ["be", 4], ["shown", 4], ["that", 4], ["fewer", 4], ["steps", 4], ["can", 4], ["t", 4], ["be", 4], ["enough", 4], ["in", 4], ["the", 4], ["third", 4], ["test", 4], ["case", 4], ["both", 4], ["sum", 4], ["and", 4], ["product", 4], ["are", 4], ["non", 4], ["zero", 4], ["we", 4], ["don", 4], ["t", 4], ["need", 4], ["to", 4], ["do", 4], ["anything", 4], ["in", 4], ["the", 4], ["fourth", 4], ["test", 4], ["case", 4], ["after", 4], ["adding", 4], ["1", 4], ["twice", 4], ["to", 4], ["the", 4], ["first", 4], ["element", 4], ["the", 4], ["array", 4], ["will", 4], ["be", 4], ["2", 4], ["2", 4], ["1", 0], ["the", 0], ["sum", 0], ["will", 0], ["be", 0], ["1", 0], ["and", 0], ["the", 0], ["product", 0], ["will", 0], ["be", 0], ["4", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8857142857142857, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.21336901743705047, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9166666666666666, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.22916666666666666, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.861904761904762, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.211957671957672, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9166666666666666, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.22916666666666666, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["heapq", 0], ["import", 0], ["bisect", 0], ["import", 0], ["re", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["decimal", 0], ["import", 0], ["from", 0], ["fractions", 0], ["import", 0], ["gcd", 0], ["def", 0], ["yes", 0], ["no", 0], ["flag", 0], ["if", 0], ["flag", 0], ["print", 0], ["aww", 0], ["else", 0], ["print", 0], ["waw", 0], ["def", 0], ["main", 0], ["q", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["n", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["q", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["w", 0], ["q", 0], ["count", 0], ["0", 0], ["if", 0], ["w", 0], ["sum", 0], ["q", 0], ["0", 0], ["print", 0], ["w", 0], ["1", 0], ["else", 0], ["print", 0], ["w", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["main", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["zz", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["a", 0], ["count", 0], ["0", 0], ["if", 0], ["sum", 0], ["a", 0], ["a", 0], ["count", 0], ["0", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["ar", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["sum", 0], ["ar", 0], ["y", 0], ["ar", 0], ["count", 0], ["0", 0], ["if", 0], ["x", 0], ["y", 0], ["0", 0], ["print", 0], ["y", 0], ["1", 0], ["else", 0], ["print", 0], ["y", 0], ["def", 0], ["solve", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["arr", 0], ["i", 0], ["arr", 0], ["i", 0], ["1", 0], ["cnt", 0], ["1", 0], ["if", 0], ["not", 0], ["sum", 0], ["arr", 0], ["cnt", 0], ["1", 0], ["return", 0], ["cnt", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["print", 0], ["solve", 0], ["for", 0], ["nt", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l", 0], ["i", 0], ["0", 0], ["count", 0], ["1", 0], ["l", 0], ["i", 0], ["1", 0], ["if", 0], ["sum", 0], ["l", 0], ["0", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["n", 0], ["int", 0], ["input", 0], ["lst", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["lst", 0], ["if", 0], ["lst", 0], ["i", 0], ["0", 0], ["ans", 0], ["1", 0], ["lst", 0], ["i", 0], ["1", 0], ["if", 0], ["sum", 0], ["lst", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["t", 0], ["int", 0], ["input", 0], ["while", 0], ["t", 0], ["t", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["a", 0], ["count", 0], ["0", 0], ["summ", 0], ["sum", 0], ["a", 0], ["ans", 0], ["if", 0], ["summ", 0], ["0", 0], ["print", 0], ["ans", 0], ["1", 0], ["else", 0], ["print", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["c", 0], ["1", 0], ["if", 0], ["sum", 0], ["a", 0], ["0", 0], ["c", 0], ["1", 0], ["print", 0], ["c", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["int", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["input", 0], ["split", 0], ["z", 0], ["arr", 0], ["count", 0], ["0", 0], ["su", 0], ["sum", 0], ["arr", 0], ["z", 0], ["if", 0], ["su", 0], ["0", 0], ["z", 0], ["1", 0], ["print", 0], ["z", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["0", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["sum", 0], ["a", 0], ["for", 0], ["item", 0], ["in", 0], ["a", 0], ["if", 0], ["item", 0], ["0", 0], ["arr", 0], ["1", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["0", 0], ["print", 0], ["arr", 0], ["1", 0], ["else", 0], ["print", 0], ["arr", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["if", 0], ["sum", 0], ["a", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l", 0], ["i", 0], ["0", 0], ["ans", 0], ["1", 0], ["l", 0], ["i", 0], ["1", 0], ["if", 0], ["sum", 0], ["l", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["input", 0], ["lambda", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["read", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["go", 0], ["lambda", 0], ["1", 0], ["0", 0], ["def", 0], ["write", 0], ["args", 0], ["sep", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["args", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["format", 0], ["i", 0], ["sep", 0], ["inf", 0], ["float", 0], ["inf", 0], ["mod", 0], ["int", 0], ["1e9", 0], ["7", 0], ["yes", 0], ["yes", 0], ["no", 0], ["no", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["try", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["read", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["0", 0], ["arr", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["if", 0], ["sum", 0], ["arr", 0], ["0", 0], ["print", 0], ["ans", 0], ["1", 0], ["else", 0], ["print", 0], ["ans", 0], ["except", 0], ["zerodivisionerror", 0], ["continue", 0], ["except", 0], ["exception", 0], ["as", 0], ["e", 0], ["print", 0], ["e", 0], ["continue", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["if", 0], ["sum", 0], ["l", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["c", 0], ["a", 0], ["count", 0], ["0", 0], ["summ", 0], ["sum", 0], ["a", 0], ["if", 0], ["c", 0], ["0", 0], ["ans", 0], ["c", 0], ["summ", 0], ["c", 0], ["if", 0], ["summ", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["inf", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["reader", 0], ["line", 0], ["rstrip", 0], ["for", 0], ["line", 0], ["in", 0], ["inf", 0], ["reader", 0], ["line", 0], ["rstrip", 0], ["for", 0], ["line", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["input", 0], ["reader", 0], ["next", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ctr", 0], ["0", 0], ["sm", 0], ["sum", 0], ["a", 0], ["for", 0], ["val", 0], ["in", 0], ["a", 0], ["if", 0], ["val", 0], ["0", 0], ["ctr", 0], ["1", 0], ["if", 0], ["sm", 0], ["ctr", 0], ["0", 0], ["ctr", 0], ["1", 0], ["print", 0], ["ctr", 0], ["inf", 0], ["close", 0], ["def", 0], ["main", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["a", 0], ["if", 0], ["a", 0], ["0", 0], ["ans", 0], ["1", 0], ["s", 0], ["1", 0], ["else", 0], ["s", 0], ["a", 0], ["if", 0], ["s", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["zero", 0], ["0", 0], ["ssum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["ssum", 0], ["i", 0], ["if", 0], ["not", 0], ["i", 0], ["zero", 0], ["1", 0], ["res", 0], ["zero", 0], ["if", 0], ["ssum", 0], ["zero", 0], ["0", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["sum", 0], ["l", 0], ["z", 0], ["l", 0], ["count", 0], ["0", 0], ["count", 0], ["z", 0], ["s", 0], ["z", 0], ["if", 0], ["s", 0], ["0", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["bhargey", 0], ["mehta", 0], ["junior", 0], ["da", 0], ["iict", 0], ["gandhinagar", 0], ["import", 0], ["sys", 0], ["math", 0], ["mod", 0], ["998244353", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["z", 0], ["a", 0], ["count", 0], ["0", 0], ["s", 0], ["sum", 0], ["a", 0], ["ans", 0], ["z", 0], ["s", 0], ["z", 0], ["0", 0], ["print", 0], ["ans", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["mas", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["kol", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["mas", 0], ["i", 0], ["0", 0], ["mas", 0], ["i", 0], ["1", 0], ["kol", 0], ["1", 0], ["print", 0], ["kol", 0], ["int", 0], ["sum", 0], ["mas", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["if", 0], ["l", 0], ["i", 0], ["0", 0], ["ans", 0], ["1", 0], ["l", 0], ["i", 0], ["1", 0], ["if", 0], ["sum", 0], ["l", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["l1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["moves", 0], ["0", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l1", 0], ["i", 0], ["0", 0], ["l1", 0], ["i", 0], ["1", 0], ["moves", 0], ["1", 0], ["x", 0], ["x", 0], ["l1", 0], ["i", 0], ["if", 0], ["x", 0], ["0", 0], ["print", 0], ["moves", 0], ["else", 0], ["print", 0], ["moves", 0], ["1", 0], ["def", 0], ["main", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["array", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["zeros", 0], ["0", 0], ["sum", 0], ["sum", 0], ["array", 0], ["for", 0], ["x", 0], ["in", 0], ["array", 0], ["if", 0], ["x", 0], ["0", 0], ["zeros", 0], ["1", 0], ["if", 0], ["zeros", 0], ["sum", 0], ["0", 0], ["zeros", 0], ["1", 0], ["print", 0], ["zeros", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["if", 0], ["sum", 0], ["a", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nCurse your rival! Every year at the annual Rock Paper Scissors tournament, you have made it to the final match. (Your Rock technique is unmatched, and your Paper cuts to the bone! Your Scissors need a little work, though.) But every year, he defeats you, even though his moves appear entirely random! And he claims to the press that he simply cannot be beaten. What is his secret?\n\nFortunately, you think you have figured it out. This year, just before the tournament, you caught him visiting various shamans around town. Aha! He is using the supernatural against you! You figured two can play at this game. So you went and visited a set of fortune-tellers, who have each used a Tarot deck to predict a sequence that your rival will end up using, sometime during the match.\n\nHowever, your initial excitement has passed, and now you are feeling a little silly. This cannot possibly work, right? In the end it feels like you have paid good money for a fraudulent, random set of predictions. Oh well; you might as well keep an eye out for some of them during the match. But which predictions will you use?\n\nIn the final match, you and your rival will play $n$ rounds of Rock Paper Scissors. In each round, your rival and you will both choose one of the three options (Rock, Paper, or Scissors). Based on your selections, a winner of the round will be determined (exactly how is irrelevant to this problem).\n\nGiven the length of the final match and the various predictions, sort them in order of how likely they are to appear sometime during the match as a contiguous sequence of options chosen by your rival, assuming he is choosing his symbol in each round independently and uniformly at random.\n\n-----Input-----\nThe first line of input contains two integers $n$ ($1\\leq n \\leq 10^6$), the number of rounds in the final match, and $s$ ($1 \\leq s \\leq 10$), the number of sequences. The remaining $s$ lines each describe a prediction, consisting of a string of characters ‘R’, ‘P’, and ‘S’. All predictions have the same length, which is between $1$ and $n$ characters long, inclusive, and no longer than $10^5$.\n\n-----Output-----\nDisplay all of the predictions, sorted by decreasing likelihood of appearance sometime during the final match. In the case of tied predictions, display them in the same order as in the input.\n\n-----Examples-----\nSample Input:\n3 4\nPP\nRR\nPS\nSS\nSample Output:\nPS\nPP\nRR\nSS\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5971"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5971", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["curse", 1], ["your", 1], ["rival", 1], ["every", 1], ["year", 1], ["at", 1], ["the", 1], ["annual", 1], ["rock", 1], ["paper", 1], ["scissors", 1], ["tournament", 1], ["you", 1], ["have", 1], ["made", 1], ["it", 1], ["to", 1], ["the", 1], ["final", 1], ["match", 1], ["your", 1], ["rock", 1], ["technique", 1], ["is", 1], ["unmatched", 1], ["and", 1], ["your", 1], ["paper", 1], ["cuts", 1], ["to", 1], ["the", 1], ["bone", 1], ["your", 1], ["scissors", 1], ["need", 1], ["a", 1], ["little", 1], ["work", 1], ["though", 1], ["but", 1], ["every", 1], ["year", 1], ["he", 1], ["defeats", 1], ["you", 1], ["even", 1], ["though", 1], ["his", 1], ["moves", 1], ["appear", 1], ["entirely", 1], ["random", 1], ["and", 1], ["he", 1], ["claims", 1], ["to", 1], ["the", 1], ["press", 1], ["that", 1], ["he", 1], ["simply", 1], ["cannot", 1], ["be", 1], ["beaten", 1], ["what", 1], ["is", 1], ["his", 1], ["secret", 1], ["fortunately", 1], ["you", 1], ["think", 1], ["you", 1], ["have", 1], ["figured", 1], ["it", 1], ["out", 1], ["this", 1], ["year", 1], ["just", 1], ["before", 1], ["the", 1], ["tournament", 1], ["you", 1], ["caught", 1], ["him", 1], ["visiting", 1], ["various", 1], ["shamans", 1], ["around", 1], ["town", 1], ["aha", 1], ["he", 1], ["is", 1], ["using", 1], ["the", 1], ["supernatural", 1], ["against", 1], ["you", 1], ["you", 1], ["figured", 1], ["two", 1], ["can", 1], ["play", 1], ["at", 1], ["this", 1], ["game", 1], ["so", 1], ["you", 1], ["went", 1], ["and", 1], ["visited", 1], ["a", 1], ["set", 1], ["of", 1], ["fortune", 1], ["tellers", 1], ["who", 1], ["have", 1], ["each", 1], ["used", 1], ["a", 1], ["tarot", 1], ["deck", 1], ["to", 1], ["predict", 1], ["a", 1], ["sequence", 1], ["that", 1], ["your", 1], ["rival", 1], ["will", 1], ["end", 1], ["up", 1], ["using", 1], ["sometime", 1], ["during", 1], ["the", 1], ["match", 1], ["however", 1], ["your", 1], ["initial", 1], ["excitement", 1], ["has", 1], ["passed", 1], ["and", 1], ["now", 1], ["you", 1], ["are", 1], ["feeling", 1], ["a", 1], ["little", 1], ["silly", 1], ["this", 1], ["cannot", 1], ["possibly", 1], ["work", 1], ["right", 1], ["in", 1], ["the", 1], ["end", 1], ["it", 1], ["feels", 1], ["like", 1], ["you", 1], ["have", 1], ["paid", 1], ["good", 1], ["money", 1], ["for", 1], ["a", 1], ["fraudulent", 1], ["random", 1], ["set", 1], ["of", 1], ["predictions", 1], ["oh", 1], ["well", 1], ["you", 1], ["might", 1], ["as", 1], ["well", 1], ["keep", 1], ["an", 1], ["eye", 1], ["out", 1], ["for", 1], ["some", 1], ["of", 1], ["them", 1], ["during", 1], ["the", 1], ["match", 1], ["but", 1], ["which", 1], ["predictions", 1], ["will", 1], ["you", 1], ["use", 1], ["in", 1], ["the", 1], ["final", 1], ["match", 1], ["you", 1], ["and", 1], ["your", 1], ["rival", 1], ["will", 1], ["play", 1], ["n", 1], ["rounds", 1], ["of", 1], ["rock", 1], ["paper", 1], ["scissors", 1], ["in", 1], ["each", 1], ["round", 1], ["your", 1], ["rival", 1], ["and", 1], ["you", 1], ["will", 1], ["both", 1], ["choose", 1], ["one", 1], ["of", 1], ["the", 1], ["three", 1], ["options", 1], ["rock", 1], ["paper", 1], ["or", 1], ["scissors", 1], ["based", 1], ["on", 1], ["your", 1], ["selections", 1], ["a", 1], ["winner", 1], ["of", 1], ["the", 1], ["round", 1], ["will", 1], ["be", 1], ["determined", 1], ["exactly", 1], ["how", 1], ["is", 1], ["irrelevant", 1], ["to", 1], ["this", 1], ["problem", 1], ["given", 1], ["the", 1], ["length", 1], ["of", 1], ["the", 1], ["final", 1], ["match", 1], ["and", 1], ["the", 1], ["various", 1], ["predictions", 1], ["sort", 1], ["them", 1], ["in", 1], ["order", 1], ["of", 1], ["how", 1], ["likely", 1], ["they", 1], ["are", 1], ["to", 1], ["appear", 1], ["sometime", 1], ["during", 1], ["the", 1], ["match", 1], ["as", 1], ["a", 1], ["contiguous", 1], ["sequence", 1], ["of", 1], ["options", 1], ["chosen", 1], ["by", 1], ["your", 1], ["rival", 1], ["assuming", 1], ["he", 1], ["is", 0], ["choosing", 0], ["his", 0], ["symbol", 0], ["in", 0], ["each", 0], ["round", 0], ["independently", 0], ["and", 0], ["uniformly", 0], ["at", 0], ["random", 0], ["input", 0], ["the", 4], ["first", 2], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["two", 1], ["integers", 1], ["n", 1], ["1", 1], ["leq", 1], ["n", 1], ["leq", 1], ["10", 1], ["6", 1], ["the", 1], ["number", 1], ["of", 1], ["rounds", 1], ["in", 1], ["the", 1], ["final", 1], ["match", 1], ["and", 1], ["s", 1], ["1", 1], ["leq", 1], ["s", 1], ["leq", 1], ["10", 1], ["the", 1], ["number", 1], ["of", 1], ["sequences", 1], ["the", 1], ["remaining", 1], ["s", 1], ["lines", 1], ["each", 1], ["describe", 1], ["a", 1], ["prediction", 1], ["consisting", 1], ["of", 1], ["a", 1], ["string", 1], ["of", 1], ["characters", 1], ["‘r’", 1], ["‘p’", 1], ["and", 1], ["‘s’", 1], ["all", 1], ["predictions", 1], ["have", 1], ["the", 1], ["same", 1], ["length", 1], ["which", 1], ["is", 1], ["between", 1], ["1", 0], ["and", 0], ["n", 0], ["characters", 0], ["long", 0], ["inclusive", 0], ["and", 0], ["no", 0], ["longer", 0], ["than", 0], ["10", 0], ["5", 0], ["output", 0], ["display", 1], ["all", 1], ["of", 1], ["the", 1], ["predictions", 1], ["sorted", 1], ["by", 1], ["decreasing", 1], ["likelihood", 1], ["of", 1], ["appearance", 1], ["sometime", 1], ["during", 1], ["the", 1], ["final", 1], ["match", 1], ["in", 1], ["the", 1], ["case", 1], ["of", 1], ["tied", 0], ["predictions", 0], ["display", 0], ["them", 0], ["in", 0], ["the", 0], ["same", 0], ["order", 0], ["as", 0], ["in", 0], ["the", 0], ["input", 0], ["examples", 0], ["sample", 0], ["input", 0], ["3", 0], ["4", 0], ["pp", 0], ["rr", 0], ["ps", 0], ["ss", 0], ["sample", 0], ["output", 0], ["ps", 0], ["pp", 0], ["rr", 0], ["ss", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8770685579196218, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.874113475177305, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9356321839080459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9327586206896552, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8770685579196218, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.874113475177305, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9356321839080459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9327586206896552, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nA land far, far away has N Members of Parliament (MP). They had a turbulent and passionate debate on the law on amendments to the law on a new referendum on referendums. From Monday to Friday, all MPs joyfully came to work and argued all day.\n\nA diligent news reporter photographed MPs at their workplace in the heat of the argument every working day of the week. What she captured on the photos are pairs of MPs fighting and scowling at each other. The five photographs have been forwarded to you for thorough analysis.\n\nIt is a fact that each MP belongs to one of the two political parties. Let’s denote them with letters A and B. Your task is to estimate which MP belongs to which party, so that the following holds for your estimation: each MP argued with at most two distinct members of their own party.\n\n-----Input-----\nThe first line of input contains an integer $N$ ($2 \\leq N \\leq 200000$), the number of MPs. MPs are denoted with numbers from $1$ to $N$.\n\nThe following five lines describe the photographs taken from Monday to Friday. Each of the five lines contains the list of pairs of MPs that are arguing on the photograph that day (scowling at each other). Stated first is the number of pairs $P$ ($1 \\leq P \\leq N/2$), followed by $P$ pairs in the form “$K$ $L$”, where $K$ and $L$ are labels of MPs scowling at each other. Before each pair there is a double space.\n\nOf course, each MP is stated at most once per line, and no MP ever argues with herself.\n\n-----Output-----\nThe first and only line of output must contain an array consisting of only characters A and B, so that the $K$-th character denotes the party of $K$-th MP in a division that satisfies the given conditions.\n\nSince the solution isn’t going to be unique, output any.\n\n-----Examples-----\nSample Input:\n7\n2  1 2  7 3\n2  1 3  7 4\n2  1 4  7 5\n2  1 5  7 6\n2  1 6  7 2\nSample Output:\nABBBBBA\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8901"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8901", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 2], ["land", 2], ["far", 2], ["far", 2], ["away", 2], ["has", 2], ["n", 2], ["members", 2], ["of", 2], ["parliament", 2], ["mp", 2], ["they", 2], ["had", 2], ["a", 2], ["turbulent", 2], ["and", 2], ["passionate", 2], ["debate", 2], ["on", 2], ["the", 2], ["law", 2], ["on", 2], ["amendments", 2], ["to", 2], ["the", 2], ["law", 2], ["on", 2], ["a", 2], ["new", 2], ["referendum", 2], ["on", 2], ["referendums", 2], ["from", 2], ["monday", 2], ["to", 2], ["friday", 2], ["all", 2], ["mps", 2], ["joyfully", 2], ["came", 2], ["to", 2], ["work", 2], ["and", 2], ["argued", 2], ["all", 2], ["day", 2], ["a", 2], ["diligent", 2], ["news", 2], ["reporter", 2], ["photographed", 2], ["mps", 2], ["at", 2], ["their", 2], ["workplace", 2], ["in", 2], ["the", 2], ["heat", 2], ["of", 2], ["the", 2], ["argument", 2], ["every", 2], ["working", 2], ["day", 2], ["of", 2], ["the", 2], ["week", 2], ["what", 2], ["she", 2], ["captured", 2], ["on", 2], ["the", 2], ["photos", 2], ["are", 2], ["pairs", 2], ["of", 2], ["mps", 2], ["fighting", 2], ["and", 2], ["scowling", 2], ["at", 2], ["each", 2], ["other", 2], ["the", 2], ["five", 2], ["photographs", 2], ["have", 2], ["been", 2], ["forwarded", 2], ["to", 2], ["you", 2], ["for", 2], ["thorough", 2], ["analysis", 2], ["it", 2], ["is", 2], ["a", 2], ["fact", 2], ["that", 2], ["each", 2], ["mp", 2], ["belongs", 2], ["to", 2], ["one", 2], ["of", 2], ["the", 2], ["two", 2], ["political", 2], ["parties", 2], ["let’s", 2], ["denote", 2], ["them", 2], ["with", 2], ["letters", 2], ["a", 2], ["and", 2], ["b", 2], ["your", 2], ["task", 2], ["is", 2], ["to", 2], ["estimate", 2], ["which", 2], ["mp", 2], ["belongs", 2], ["to", 2], ["which", 2], ["party", 2], ["so", 2], ["that", 2], ["the", 2], ["following", 2], ["holds", 2], ["for", 2], ["your", 2], ["estimation", 2], ["each", 2], ["mp", 0], ["argued", 0], ["with", 0], ["at", 0], ["most", 0], ["two", 0], ["distinct", 0], ["members", 0], ["of", 0], ["their", 0], ["own", 0], ["party", 0], ["input", 0], ["the", 5], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["an", 0], ["integer", 0], ["n", 0], ["2", 0], ["leq", 0], ["n", 0], ["leq", 0], ["200000", 0], ["the", 2], ["number", 2], ["of", 2], ["mps", 2], ["mps", 2], ["are", 2], ["denoted", 2], ["with", 2], ["numbers", 2], ["from", 2], ["1", 2], ["to", 2], ["n", 2], ["the", 2], ["following", 2], ["five", 2], ["lines", 2], ["describe", 2], ["the", 2], ["photographs", 2], ["taken", 2], ["from", 2], ["monday", 2], ["to", 2], ["friday", 2], ["each", 2], ["of", 2], ["the", 2], ["five", 2], ["lines", 2], ["contains", 2], ["the", 2], ["list", 2], ["of", 2], ["pairs", 2], ["of", 2], ["mps", 2], ["that", 2], ["are", 2], ["arguing", 2], ["on", 2], ["the", 2], ["photograph", 2], ["that", 2], ["day", 2], ["scowling", 2], ["at", 2], ["each", 2], ["other", 2], ["stated", 2], ["first", 2], ["is", 2], ["the", 2], ["number", 2], ["of", 2], ["pairs", 2], ["p", 2], ["1", 2], ["leq", 2], ["p", 2], ["leq", 2], ["n", 2], ["2", 2], ["followed", 2], ["by", 2], ["p", 2], ["pairs", 2], ["in", 2], ["the", 2], ["form", 2], ["“", 2], ["k", 2], ["l", 2], ["”", 2], ["where", 2], ["k", 2], ["and", 2], ["l", 2], ["are", 2], ["labels", 2], ["of", 2], ["mps", 2], ["scowling", 2], ["at", 2], ["each", 2], ["other", 2], ["before", 2], ["each", 2], ["pair", 2], ["there", 2], ["is", 2], ["a", 2], ["double", 2], ["space", 2], ["of", 2], ["course", 2], ["each", 2], ["mp", 2], ["is", 2], ["stated", 2], ["at", 0], ["most", 0], ["once", 0], ["per", 0], ["line", 0], ["and", 0], ["no", 0], ["mp", 0], ["ever", 0], ["argues", 0], ["with", 0], ["herself", 0], ["output", 0], ["the", 2], ["first", 2], ["and", 2], ["only", 2], ["line", 2], ["of", 2], ["output", 2], ["must", 2], ["contain", 2], ["an", 2], ["array", 2], ["consisting", 2], ["of", 2], ["only", 2], ["characters", 2], ["a", 2], ["and", 2], ["b", 2], ["so", 2], ["that", 2], ["the", 2], ["k", 2], ["th", 2], ["character", 2], ["denotes", 2], ["the", 2], ["party", 2], ["of", 2], ["k", 2], ["th", 2], ["mp", 2], ["in", 2], ["a", 2], ["division", 2], ["that", 2], ["satisfies", 2], ["the", 2], ["given", 0], ["conditions", 0], ["since", 0], ["the", 0], ["solution", 0], ["isn’t", 0], ["going", 0], ["to", 0], ["be", 0], ["unique", 0], ["output", 0], ["any", 0], ["examples", 0], ["sample", 0], ["input", 0], ["7", 0], ["2", 0], ["1", 0], ["2", 0], ["7", 0], ["3", 0], ["2", 0], ["1", 0], ["3", 0], ["7", 0], ["4", 0], ["2", 0], ["1", 0], ["4", 0], ["7", 0], ["5", 0], ["2", 0], ["1", 0], ["5", 0], ["7", 0], ["6", 0], ["2", 0], ["1", 0], ["6", 0], ["7", 0], ["2", 0], ["sample", 0], ["output", 0], ["abbbbba", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7703081232492998, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.38431372549019605, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8753387533875339, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4271002710027101, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7703081232492998, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.38431372549019605, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8753387533875339, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4271002710027101, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nVasya lives in a round building, whose entrances are numbered sequentially by integers from 1 to n. Entrance n and entrance 1 are adjacent.\n\nToday Vasya got bored and decided to take a walk in the yard. Vasya lives in entrance a and he decided that during his walk he will move around the house b entrances in the direction of increasing numbers (in this order entrance n should be followed by entrance 1). The negative value of b corresponds to moving |b| entrances in the order of decreasing numbers (in this order entrance 1 is followed by entrance n). If b = 0, then Vasya prefers to walk beside his entrance. [Image] Illustration for n = 6, a = 2, b =  - 5. \n\nHelp Vasya to determine the number of the entrance, near which he will be at the end of his walk.\n\n\n-----Input-----\n\nThe single line of the input contains three space-separated integers n, a and b (1 ≤ n ≤ 100, 1 ≤ a ≤ n,  - 100 ≤ b ≤ 100) — the number of entrances at Vasya's place, the number of his entrance and the length of his walk, respectively.\n\n\n-----Output-----\n\nPrint a single integer k (1 ≤ k ≤ n) — the number of the entrance where Vasya will be at the end of his walk.\n\n\n-----Examples-----\nInput\n6 2 -5\n\nOutput\n3\n\nInput\n5 1 3\n\nOutput\n4\n\nInput\n3 2 7\n\nOutput\n3\n\n\n\n-----Note-----\n\nThe first example is illustrated by the picture in the statements.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, a, b = list(map(int, input().split()))\nans = a + b\nwhile ans < 0:\n\tans += n\nans %= n\nif ans == 0:\n\tprint(n)\nelse:\n\tprint(ans)\n", "3\n\nclass StdIO:\n\tdef read_int(self):\n\t\treturn int(self.read_string())\n\n\tdef read_ints(self, sep=None):\n\t\treturn [int(i) for i in self.read_strings(sep)]\n\n\tdef read_float(self):\n\t\treturn float(self.read_string())\n\n\tdef read_floats(self, sep=None):\n\t\treturn [float(i) for i in self.read_strings(sep)]\n\n\tdef read_string(self):\n\t\treturn input()\n\n\tdef read_strings(self, sep=None):\n\t\treturn self.read_string().split(sep)\n\nio = StdIO()\n\n\ndef main():\n\tn, a, b = io.read_ints()\n\n\tprint((a+b-1) % n + 1)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "#!/usr/bin/env python3\n\ntry:\n\twhile True:\n\t\tn, a, b = list(map(int, input().split()))\n\t\tx = (a + b) % n\n\t\tprint(n if x == 0 else x)\n\nexcept EOFError:\n\tpass\n", "a = []\n\nfor i in input().split():\n\ta.append(int(i))\n\nans = (a[1]+a[2]+a[0])%a[0]\nif ans==0:\n\tans = a[0]\n\nprint(str(ans))\n", "def main():\n\tn, a, b = map(int, input().split())\n\tprint((a + b - 1 + n) % n + 1)\n\n\nmain()\n", "n,a,b = list(map(int, input().split(\" \")))\nx = (a+100*n+b)%n\nif x == 0:\n\tprint(n)\nelse:\n\tprint(x)\n", "n, a, b = list(map(int, input().split()))\nfor i in range(abs(b)):\n\ta += (1 if b > 0 else -1)\n\tif a == 0:\n\t\ta = n\n\tif a == n + 1:\n\t\ta = 1\nprint(a)\n", "n, a, b = list(map(int, input().split()))\nc = [i for i in range(1, n+1)]\nx = c.index(a)\nprint(c[(x + b) % n])\n", "\n\nn, a, b = list(map(int, input().split()))\n\nprint((a - 1 + b + n) % n + 1)\n\n\n", "def solve():\n\tN, A, B = list(map(int, input().split()))\n\n\tA -= 1\n\tA += N * 100\n\n\tA += B\n\n\tA %= N\n\n\tA += 1\n\n\tprint(A)\n\n\ndef __starting_point():\n\tsolve()\n\n__starting_point()\n", "n,m,k=list(map(int,input().split()))\nif ((m+k)%n)==0:\n\tprint(n)\nelse:\n\tprint((m+k)%n)\n", "__author__ = 'User'\nn, a, b = map(int, input().split())\na -= 1\na = (a + b) % n\na += 1\nprint(a)\n", "n, a, b = map(int, input().split())\nif (a+b) % n == 0:\n\tprint(n)\nelse:\n\tprint((a+b)%n)\n", "n, a, b = tuple(map(int, input().split()))\na -= 1\nprint(((a + b) % n) + 1)\n", "n, a, b = list(map(int, input().split()))\nc = (n * 100 + a + b) % n\nprint([c, n][c == 0])\n", "n,a,b=list(map(int,input().split()))\nif b==0:\n\tprint(a)\nelif b<0:\n\tk=abs(b)\n\twhile k!=0:\n\t\ta-=1\n\t\tif a==0:\n\t\t\ta=n\n\t\tk-=1\n\tprint(a)\nelse:\n\tk=b\n\twhile k!=0:\n\t\ta+=1\n\t\tif a>n:\n\t\t\ta=1\n\t\tk-=1\n\tprint(a)\n\t\t\t\n", "n, a, b = list(map(int, input().split()))\ns = (a + b) % n\nif s == 0:\n\ts = n\nprint(s)\n", "n, a, b = map(int, input().split())\nprint((a - 1 + b + 100 * n) % n + 1)\n", "n,a,b = (int(i) for i in input().split())\nans = (a+b)%n\nif ans == 0:\n\tprint(n)\nelse:\n\tprint(ans)\n", "a, b, c = list(map(int, input().split(' ')))\n\nprint((((b - 1 + c) % a) + a) % a + 1)\n", "n, a, b = map(int, input().split())\nif b > 0:\n\tfor i in range(abs(b)):\n\t\ta += 1\n\t\tif a == n + 1:\n\t\t\ta = 1\n\tprint(a)\nif b < 0:\n\tfor i in range(abs(b)):\n\t\ta -= 1\n\t\tif a == 0:\n\t\t\ta = n\n\tprint(a)\nif b == 0:\n\tprint(a)\n", "(n, a, b) = map(int, input().split())\nk = (a + b) % n\nprint(k if k != 0 else n)\n", "n, a, b = list(map(int, input().split()))\na -= 1\nans = (a + b) % n + 1\nprint(ans)\n", "n, a, b = list(map(int, input().split()))\nc = [0]\nfor i in range(1, n+1):\n\tc += [i]\nfor i in range(1, n+1):\n\tc += [i]\nfor i in range(1, n+1):\n\tc += [i]\nprint(c[a + n + (b % n)])\n\t\n", "\nn, a, b = map(int, input().split())\na -= 1\n\nprint (((a + b + n * 1000) % n) + 1)\n"], "id": "id9243"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9243", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["vasya", 1], ["lives", 1], ["in", 1], ["a", 1], ["round", 1], ["building", 1], ["whose", 1], ["entrances", 1], ["are", 1], ["numbered", 1], ["sequentially", 1], ["by", 1], ["integers", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["entrance", 1], ["n", 1], ["and", 1], ["entrance", 1], ["1", 1], ["are", 1], ["adjacent", 1], ["today", 1], ["vasya", 1], ["got", 1], ["bored", 1], ["and", 1], ["decided", 1], ["to", 1], ["take", 1], ["a", 1], ["walk", 1], ["in", 1], ["the", 1], ["yard", 1], ["vasya", 1], ["lives", 1], ["in", 1], ["entrance", 1], ["a", 1], ["and", 1], ["he", 1], ["decided", 1], ["that", 1], ["during", 1], ["his", 1], ["walk", 1], ["he", 1], ["will", 1], ["move", 1], ["around", 1], ["the", 1], ["house", 1], ["b", 1], ["entrances", 1], ["in", 1], ["the", 1], ["direction", 1], ["of", 1], ["increasing", 1], ["numbers", 1], ["in", 1], ["this", 1], ["order", 1], ["entrance", 1], ["n", 1], ["should", 1], ["be", 1], ["followed", 1], ["by", 1], ["entrance", 1], ["1", 1], ["the", 1], ["negative", 1], ["value", 1], ["of", 1], ["b", 1], ["corresponds", 1], ["to", 1], ["moving", 1], ["b", 1], ["entrances", 1], ["in", 1], ["the", 1], ["order", 1], ["of", 1], ["decreasing", 1], ["numbers", 1], ["in", 1], ["this", 1], ["order", 1], ["entrance", 1], ["1", 1], ["is", 1], ["followed", 1], ["by", 1], ["entrance", 1], ["n", 0], ["if", 0], ["b", 0], ["0", 0], ["then", 0], ["vasya", 0], ["prefers", 0], ["to", 0], ["walk", 0], ["beside", 0], ["his", 0], ["entrance", 0], ["image", 0], ["illustration", 1], ["for", 1], ["n", 1], ["6", 1], ["a", 1], ["2", 1], ["b", 1], ["5", 1], ["help", 1], ["vasya", 1], ["to", 1], ["determine", 1], ["the", 1], ["number", 1], ["of", 1], ["the", 1], ["entrance", 0], ["near", 0], ["which", 0], ["he", 0], ["will", 0], ["be", 0], ["at", 0], ["the", 0], ["end", 0], ["of", 0], ["his", 0], ["walk", 0], ["input", 0], ["the", 1], ["single", 1], ["line", 1], ["of", 1], ["the", 1], ["input", 1], ["contains", 1], ["three", 1], ["space", 1], ["separated", 1], ["integers", 1], ["n", 1], ["a", 1], ["and", 1], ["b", 1], ["1", 1], ["≤", 1], ["n", 1], ["≤", 1], ["100", 1], ["1", 1], ["≤", 1], ["a", 1], ["≤", 1], ["n", 1], ["100", 1], ["≤", 1], ["b", 1], ["≤", 1], ["100", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["entrances", 1], ["at", 1], ["vasya", 1], ["s", 1], ["place", 1], ["the", 0], ["number", 0], ["of", 0], ["his", 0], ["entrance", 0], ["and", 0], ["the", 0], ["length", 0], ["of", 0], ["his", 0], ["walk", 0], ["respectively", 0], ["output", 0], ["print", 1], ["a", 1], ["single", 1], ["integer", 1], ["k", 1], ["1", 1], ["≤", 1], ["k", 1], ["≤", 1], ["n", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["the", 0], ["entrance", 0], ["where", 0], ["vasya", 0], ["will", 0], ["be", 0], ["at", 0], ["the", 0], ["end", 0], ["of", 0], ["his", 0], ["walk", 0], ["examples", 0], ["input", 0], ["6", 0], ["2", 0], ["5", 0], ["output", 0], ["3", 0], ["input", 0], ["5", 0], ["1", 0], ["3", 0], ["output", 0], ["4", 0], ["input", 0], ["3", 0], ["2", 0], ["7", 0], ["output", 0], ["3", 0], ["note", 0], ["the", 0], ["first", 0], ["example", 0], ["is", 0], ["illustrated", 0], ["by", 0], ["the", 0], ["picture", 0], ["in", 0], ["the", 0], ["statements", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6746987951807228, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6746987951807228, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8275862068965517, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8275862068965517, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6746987951807228, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6746987951807228, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8275862068965517, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8275862068965517, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["a", 0], ["b", 0], ["while", 0], ["ans", 0], ["0", 0], ["ans", 0], ["n", 0], ["ans", 0], ["n", 0], ["if", 0], ["ans", 0], ["0", 0], ["print", 0], ["n", 0], ["else", 0], ["print", 0], ["ans", 0], ["3", 0], ["class", 0], ["stdio", 0], ["def", 0], ["read", 0], ["int", 0], ["self", 0], ["return", 0], ["int", 0], ["self", 0], ["read", 0], ["string", 0], ["def", 0], ["read", 0], ["ints", 0], ["self", 0], ["sep", 0], ["none", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["self", 0], ["read", 0], ["strings", 0], ["sep", 0], ["def", 0], ["read", 0], ["float", 0], ["self", 0], ["return", 0], ["float", 0], ["self", 0], ["read", 0], ["string", 0], ["def", 0], ["read", 0], ["floats", 0], ["self", 0], ["sep", 0], ["none", 0], ["return", 0], ["float", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["self", 0], ["read", 0], ["strings", 0], ["sep", 0], ["def", 0], ["read", 0], ["string", 0], ["self", 0], ["return", 0], ["input", 0], ["def", 0], ["read", 0], ["strings", 0], ["self", 0], ["sep", 0], ["none", 0], ["return", 0], ["self", 0], ["read", 0], ["string", 0], ["split", 0], ["sep", 0], ["io", 0], ["stdio", 0], ["def", 0], ["main", 0], ["n", 0], ["a", 0], ["b", 0], ["io", 0], ["read", 0], ["ints", 0], ["print", 0], ["a", 0], ["b", 0], ["1", 0], ["n", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["try", 0], ["while", 0], ["true", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["a", 0], ["b", 0], ["n", 0], ["print", 0], ["n", 0], ["if", 0], ["x", 0], ["0", 0], ["else", 0], ["x", 0], ["except", 0], ["eoferror", 0], ["pass", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["append", 0], ["int", 0], ["i", 0], ["ans", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["0", 0], ["a", 0], ["0", 0], ["if", 0], ["ans", 0], ["0", 0], ["ans", 0], ["a", 0], ["0", 0], ["print", 0], ["str", 0], ["ans", 0], ["def", 0], ["main", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["a", 0], ["b", 0], ["1", 0], ["n", 0], ["n", 0], ["1", 0], ["main", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["a", 0], ["100", 0], ["n", 0], ["b", 0], ["n", 0], ["if", 0], ["x", 0], ["0", 0], ["print", 0], ["n", 0], ["else", 0], ["print", 0], ["x", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["abs", 0], ["b", 0], ["a", 0], ["1", 0], ["if", 0], ["b", 0], ["0", 0], ["else", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["n", 0], ["if", 0], ["a", 0], ["n", 0], ["1", 0], ["a", 0], ["1", 0], ["print", 0], ["a", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["x", 0], ["c", 0], ["index", 0], ["a", 0], ["print", 0], ["c", 0], ["x", 0], ["b", 0], ["n", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["a", 0], ["1", 0], ["b", 0], ["n", 0], ["n", 0], ["1", 0], ["def", 0], ["solve", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["a", 0], ["n", 0], ["100", 0], ["a", 0], ["b", 0], ["a", 0], ["n", 0], ["a", 0], ["1", 0], ["print", 0], ["a", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["m", 0], ["k", 0], ["n", 0], ["0", 0], ["print", 0], ["n", 0], ["else", 0], ["print", 0], ["m", 0], ["k", 0], ["n", 0], ["author", 0], ["user", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["a", 0], ["a", 0], ["b", 0], ["n", 0], ["a", 0], ["1", 0], ["print", 0], ["a", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["b", 0], ["n", 0], ["0", 0], ["print", 0], ["n", 0], ["else", 0], ["print", 0], ["a", 0], ["b", 0], ["n", 0], ["n", 0], ["a", 0], ["b", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["print", 0], ["a", 0], ["b", 0], ["n", 0], ["1", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["n", 0], ["100", 0], ["a", 0], ["b", 0], ["n", 0], ["print", 0], ["c", 0], ["n", 0], ["c", 0], ["0", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["b", 0], ["0", 0], ["print", 0], ["a", 0], ["elif", 0], ["b", 0], ["0", 0], ["k", 0], ["abs", 0], ["b", 0], ["while", 0], ["k", 0], ["0", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["n", 0], ["k", 0], ["1", 0], ["print", 0], ["a", 0], ["else", 0], ["k", 0], ["b", 0], ["while", 0], ["k", 0], ["0", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["n", 0], ["a", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["a", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["a", 0], ["b", 0], ["n", 0], ["if", 0], ["s", 0], ["0", 0], ["s", 0], ["n", 0], ["print", 0], ["s", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["a", 0], ["1", 0], ["b", 0], ["100", 0], ["n", 0], ["n", 0], ["1", 0], ["n", 0], ["a", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["a", 0], ["b", 0], ["n", 0], ["if", 0], ["ans", 0], ["0", 0], ["print", 0], ["n", 0], ["else", 0], ["print", 0], ["ans", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["b", 0], ["1", 0], ["c", 0], ["a", 0], ["a", 0], ["a", 0], ["1", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["abs", 0], ["b", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["n", 0], ["1", 0], ["a", 0], ["1", 0], ["print", 0], ["a", 0], ["if", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["abs", 0], ["b", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["a", 0], ["n", 0], ["print", 0], ["a", 0], ["if", 0], ["b", 0], ["0", 0], ["print", 0], ["a", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["a", 0], ["b", 0], ["n", 0], ["print", 0], ["k", 0], ["if", 0], ["k", 0], ["0", 0], ["else", 0], ["n", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["ans", 0], ["a", 0], ["b", 0], ["n", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["c", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["c", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["c", 0], ["i", 0], ["print", 0], ["c", 0], ["a", 0], ["n", 0], ["b", 0], ["n", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["print", 0], ["a", 0], ["b", 0], ["n", 0], ["1000", 0], ["n", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou have just been hired by Amalgamated, Inc. in the country of Acmania to oversee the transportation of raw materials to the company’s factories. Each supplier of raw materials and each factory resides in one of Acmania’s states. No state has both a factory and a supplier (and never more than one of either) and there are arcane laws governing which transportation companies can transport materials across state lines. Because of the fierce competition between factories and between suppliers each transportation company handles the output of at most one raw material site and delivers to at most one factory (or to another transportation company). Each supplier can produce enough material to contract with at most one factory and no factory will contract with more than one supplier. Your job is to determine the maximum number of factories that can be supplied with raw materials.\n\nFor example, suppose that there are three suppliers in states A, B and C, and three factories in states D, E and F. Let’s say you contract three transportation firms: firm $1$ can transport between states A, E and G; firm $2$ can transport between states A, C and E; and firm $3$ can transport between states B, D and F. In this case, you can supply at most two factories (for example, factory E can be supplied from supplier A using firm $1$, and factory F can be supplied from supplier B using firm $3$). If you find a fourth firm that transports between states G and F then you can supply all three factories: factory D can be supplied from B using firm $3$, factory E can be supplied from C using firm $2$, and factory F can be supplied from A using firms $1$ and $4$.\n\n-----Input-----\nThe input will start with four positive integers $s$ $r$ $f$ $t$ indicating the number of states, raw material sites, factories and transportation companies, where $1 \\leq r,f \\leq 200$, $r+f \\leq s \\leq 600$ and $1 \\leq t \\leq 1000$.\n\nNext will follow a line containing $r$ state names, one for each raw material site.\n\nThe next line will contain $f$ state names, one for each factory site.\n\nFinally there will be $t$ lines, one for each transportation company. Each of these lines will start with an integer $n$, $1 \\leq n \\leq s$, indicating the number of states the company is allowed to work in, followed by $n$ state names. No state will contain both a raw material site and a factory site.\n\nAll state names will be alphabetic strings with no blanks.\n\n\n\n-----Output-----\nOutput the maximum number of factories that can be supplied with raw materials.\n\n-----Examples-----\nSample Input:\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\nSample Output:\n2\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9783"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9783", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 3], ["have", 3], ["just", 3], ["been", 3], ["hired", 3], ["by", 3], ["amalgamated", 3], ["inc", 3], ["in", 3], ["the", 3], ["country", 3], ["of", 3], ["acmania", 3], ["to", 3], ["oversee", 3], ["the", 3], ["transportation", 3], ["of", 3], ["raw", 3], ["materials", 3], ["to", 3], ["the", 3], ["company’s", 3], ["factories", 3], ["each", 3], ["supplier", 3], ["of", 3], ["raw", 3], ["materials", 3], ["and", 3], ["each", 3], ["factory", 3], ["resides", 3], ["in", 3], ["one", 3], ["of", 3], ["acmania’s", 3], ["states", 3], ["no", 3], ["state", 3], ["has", 3], ["both", 3], ["a", 3], ["factory", 3], ["and", 3], ["a", 3], ["supplier", 3], ["and", 3], ["never", 3], ["more", 3], ["than", 3], ["one", 3], ["of", 3], ["either", 3], ["and", 3], ["there", 3], ["are", 3], ["arcane", 3], ["laws", 3], ["governing", 3], ["which", 3], ["transportation", 3], ["companies", 3], ["can", 3], ["transport", 3], ["materials", 3], ["across", 3], ["state", 3], ["lines", 3], ["because", 3], ["of", 3], ["the", 3], ["fierce", 3], ["competition", 3], ["between", 3], ["factories", 3], ["and", 3], ["between", 3], ["suppliers", 3], ["each", 3], ["transportation", 3], ["company", 3], ["handles", 3], ["the", 3], ["output", 3], ["of", 3], ["at", 3], ["most", 3], ["one", 3], ["raw", 3], ["material", 3], ["site", 3], ["and", 3], ["delivers", 3], ["to", 3], ["at", 3], ["most", 3], ["one", 3], ["factory", 3], ["or", 3], ["to", 3], ["another", 3], ["transportation", 3], ["company", 3], ["each", 3], ["supplier", 3], ["can", 3], ["produce", 3], ["enough", 3], ["material", 3], ["to", 3], ["contract", 3], ["with", 3], ["at", 3], ["most", 3], ["one", 3], ["factory", 3], ["and", 3], ["no", 3], ["factory", 3], ["will", 3], ["contract", 3], ["with", 3], ["more", 3], ["than", 3], ["one", 3], ["supplier", 3], ["your", 3], ["job", 3], ["is", 3], ["to", 3], ["determine", 3], ["the", 3], ["maximum", 3], ["number", 3], ["of", 3], ["factories", 3], ["that", 3], ["can", 3], ["be", 3], ["supplied", 3], ["with", 3], ["raw", 3], ["materials", 3], ["for", 4], ["example", 4], ["suppose", 4], ["that", 4], ["there", 4], ["are", 4], ["three", 4], ["suppliers", 4], ["in", 4], ["states", 4], ["a", 4], ["b", 4], ["and", 4], ["c", 4], ["and", 4], ["three", 4], ["factories", 4], ["in", 4], ["states", 4], ["d", 4], ["e", 4], ["and", 4], ["f", 4], ["let’s", 4], ["say", 4], ["you", 4], ["contract", 4], ["three", 4], ["transportation", 4], ["firms", 4], ["firm", 4], ["1", 4], ["can", 4], ["transport", 4], ["between", 4], ["states", 4], ["a", 4], ["e", 4], ["and", 4], ["g", 4], ["firm", 4], ["2", 4], ["can", 4], ["transport", 4], ["between", 4], ["states", 4], ["a", 4], ["c", 4], ["and", 4], ["e", 4], ["and", 4], ["firm", 4], ["3", 4], ["can", 4], ["transport", 4], ["between", 4], ["states", 4], ["b", 4], ["d", 4], ["and", 4], ["f", 4], ["in", 4], ["this", 4], ["case", 4], ["you", 4], ["can", 4], ["supply", 4], ["at", 4], ["most", 4], ["two", 4], ["factories", 4], ["for", 4], ["example", 4], ["factory", 4], ["e", 4], ["can", 4], ["be", 4], ["supplied", 4], ["from", 4], ["supplier", 4], ["a", 4], ["using", 4], ["firm", 4], ["1", 4], ["and", 4], ["factory", 4], ["f", 4], ["can", 4], ["be", 4], ["supplied", 4], ["from", 4], ["supplier", 4], ["b", 4], ["using", 4], ["firm", 4], ["3", 4], ["if", 4], ["you", 4], ["find", 4], ["a", 4], ["fourth", 4], ["firm", 4], ["that", 4], ["transports", 4], ["between", 4], ["states", 4], ["g", 4], ["and", 4], ["f", 4], ["then", 4], ["you", 4], ["can", 4], ["supply", 4], ["all", 4], ["three", 4], ["factories", 4], ["factory", 4], ["d", 4], ["can", 4], ["be", 4], ["supplied", 4], ["from", 4], ["b", 4], ["using", 4], ["firm", 4], ["3", 4], ["factory", 4], ["e", 4], ["can", 4], ["be", 4], ["supplied", 4], ["from", 4], ["c", 4], ["using", 4], ["firm", 4], ["2", 4], ["and", 4], ["factory", 0], ["f", 0], ["can", 0], ["be", 0], ["supplied", 0], ["from", 0], ["a", 0], ["using", 0], ["firms", 0], ["1", 0], ["and", 0], ["4", 0], ["input", 0], ["the", 4], ["input", 4], ["will", 4], ["start", 4], ["with", 4], ["four", 4], ["positive", 4], ["integers", 4], ["s", 4], ["r", 4], ["f", 4], ["t", 4], ["indicating", 4], ["the", 4], ["number", 3], ["of", 3], ["states", 3], ["raw", 3], ["material", 3], ["sites", 3], ["factories", 3], ["and", 3], ["transportation", 3], ["companies", 3], ["where", 3], ["1", 3], ["leq", 3], ["r", 3], ["f", 3], ["leq", 3], ["200", 3], ["r", 3], ["f", 3], ["leq", 3], ["s", 3], ["leq", 3], ["600", 3], ["and", 3], ["1", 3], ["leq", 3], ["t", 3], ["leq", 3], ["1000", 4], ["next", 4], ["will", 4], ["follow", 4], ["a", 4], ["line", 4], ["containing", 4], ["r", 4], ["state", 4], ["names", 4], ["one", 4], ["for", 4], ["each", 4], ["raw", 4], ["material", 4], ["site", 4], ["the", 4], ["next", 4], ["line", 4], ["will", 4], ["contain", 4], ["f", 4], ["state", 4], ["names", 4], ["one", 4], ["for", 4], ["each", 4], ["factory", 4], ["site", 4], ["finally", 4], ["there", 4], ["will", 4], ["be", 4], ["t", 4], ["lines", 4], ["one", 4], ["for", 4], ["each", 4], ["transportation", 4], ["company", 3], ["each", 3], ["of", 3], ["these", 3], ["lines", 3], ["will", 3], ["start", 3], ["with", 3], ["an", 3], ["integer", 3], ["n", 3], ["1", 3], ["leq", 3], ["n", 3], ["leq", 3], ["s", 4], ["indicating", 4], ["the", 4], ["number", 4], ["of", 4], ["states", 4], ["the", 4], ["company", 4], ["is", 4], ["allowed", 4], ["to", 4], ["work", 4], ["in", 4], ["followed", 4], ["by", 4], ["n", 4], ["state", 4], ["names", 4], ["no", 4], ["state", 3], ["will", 3], ["contain", 3], ["both", 3], ["a", 3], ["raw", 3], ["material", 3], ["site", 3], ["and", 3], ["a", 3], ["factory", 3], ["site", 0], ["all", 0], ["state", 0], ["names", 0], ["will", 0], ["be", 0], ["alphabetic", 0], ["strings", 0], ["with", 0], ["no", 0], ["blanks", 0], ["output", 0], ["output", 3], ["the", 0], ["maximum", 0], ["number", 0], ["of", 0], ["factories", 0], ["that", 0], ["can", 0], ["be", 0], ["supplied", 0], ["with", 0], ["raw", 0], ["materials", 0], ["examples", 0], ["sample", 0], ["input", 0], ["7", 0], ["3", 0], ["3", 0], ["3", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["f", 0], ["3", 0], ["a", 0], ["e", 0], ["g", 0], ["3", 0], ["a", 0], ["c", 0], ["e", 0], ["3", 0], ["b", 0], ["d", 0], ["f", 0], ["sample", 0], ["output", 0], ["2", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.864406779661017, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.25123587570621425, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9173553719008265, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3033746556473826, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.864406779661017, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.25123587570621425, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9173553719008265, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3033746556473826, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nA close friend of yours, a duck with financial problems, has requested your help with a matter that will help him pay off his debts. He is the nephew of an extremely wealthy duck, who has a large vault, filled with mountains of coins. This wealthy duck has a certain coin in his possession which has a lot of sentimental value to him. Usually, it is kept under a protective glass dome on a velvet cushion.\n\nHowever, during a recent relocating of the coins in the vault, the special coin was accidentally moved into the vault, leading to an extremely stressful situation for your friend’s uncle. Luckily, the coin has recently been located. Unfortunately, it is completely opposite to the entrance to the vault, and due to the mountains of coins inside the vault, actually reaching the coin is no simple task.\n\nHe is therefore willing to pay your friend to retrieve this coin, provided that he brings his own equipment to scale the mountains of coins. Your friend has decided he will bring a ladder, but he is still uncertain about its length. While a longer ladder means that he can scale higher cliffs, it also costs more money. He therefore wants to buy the shortest ladder such that he can reach the special coin, so that he has the largest amount of money left to pay off his debts.\n\nThe vault can be represented as a rectangular grid of stacks of coins of various heights (in meters), with the entrance at the north west corner (the first height in the input, the entrance to the vault is at this height as well) and the special coin at the south east corner (the last height in the input). Your avian companion has figured out the height of the coins in each of these squares. From a stack of coins he can attempt to climb up or jump down to the stack immediately north, west, south or east of it. Because your friend cannot jump or fly (he is a very special kind of duck that even wears clothes), successfully performing a climb of $n$ meters will require him to bring a ladder of at least $n$ meters. He does not mind jumping down, no matter the height; he just lets gravity do all the work.\n\n-----Input-----\nThe first line contains two integers: the length $M$, and the width $N$ of the vault, satisfying $1 \\leq M,N \\leq 1000$.\n\nThe following $M$ lines each contain $N$ integers. Each integer specifies the height of the pile of coins in the vault at the corresponding position. (The first line describes the north-most stacks from west to east; the last line describes the south-most stacks from west to east). The heights are given in meters and all heights are at least $0$ and at most $10^9$ (yes, your friend’s uncle is very rich).\n\n-----Output-----\nOutput a single line containing a single integer: the length in meters of the shortest ladder that allows you to get from the north west corner to the south east corner.\n\n-----Examples-----\nSample Input 1:\n3 3\n1 2 3\n6 5 4\n7 8 9\nSample Output 1:\n1\n\nSample Input 2:\n1 4\n4 3 2 1\nSample Output 2:\n0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5042"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5042", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 1], ["close", 1], ["friend", 1], ["of", 1], ["yours", 1], ["a", 1], ["duck", 1], ["with", 1], ["financial", 1], ["problems", 1], ["has", 1], ["requested", 1], ["your", 1], ["help", 1], ["with", 1], ["a", 1], ["matter", 1], ["that", 1], ["will", 1], ["help", 1], ["him", 1], ["pay", 1], ["off", 1], ["his", 1], ["debts", 1], ["he", 1], ["is", 1], ["the", 1], ["nephew", 1], ["of", 1], ["an", 1], ["extremely", 1], ["wealthy", 1], ["duck", 1], ["who", 1], ["has", 1], ["a", 1], ["large", 1], ["vault", 1], ["filled", 1], ["with", 1], ["mountains", 1], ["of", 1], ["coins", 1], ["this", 1], ["wealthy", 1], ["duck", 1], ["has", 1], ["a", 1], ["certain", 1], ["coin", 1], ["in", 1], ["his", 1], ["possession", 1], ["which", 1], ["has", 1], ["a", 1], ["lot", 1], ["of", 1], ["sentimental", 1], ["value", 1], ["to", 1], ["him", 1], ["usually", 1], ["it", 1], ["is", 1], ["kept", 1], ["under", 1], ["a", 1], ["protective", 1], ["glass", 1], ["dome", 1], ["on", 1], ["a", 1], ["velvet", 1], ["cushion", 1], ["however", 1], ["during", 1], ["a", 1], ["recent", 1], ["relocating", 1], ["of", 1], ["the", 1], ["coins", 1], ["in", 1], ["the", 1], ["vault", 1], ["the", 1], ["special", 1], ["coin", 1], ["was", 1], ["accidentally", 1], ["moved", 1], ["into", 1], ["the", 1], ["vault", 1], ["leading", 1], ["to", 1], ["an", 1], ["extremely", 1], ["stressful", 1], ["situation", 1], ["for", 1], ["your", 1], ["friend’s", 1], ["uncle", 1], ["luckily", 1], ["the", 1], ["coin", 1], ["has", 1], ["recently", 1], ["been", 1], ["located", 1], ["unfortunately", 1], ["it", 1], ["is", 1], ["completely", 1], ["opposite", 1], ["to", 1], ["the", 1], ["entrance", 1], ["to", 1], ["the", 1], ["vault", 1], ["and", 1], ["due", 1], ["to", 1], ["the", 1], ["mountains", 1], ["of", 1], ["coins", 1], ["inside", 1], ["the", 1], ["vault", 1], ["actually", 1], ["reaching", 1], ["the", 1], ["coin", 1], ["is", 1], ["no", 1], ["simple", 1], ["task", 1], ["he", 1], ["is", 1], ["therefore", 1], ["willing", 1], ["to", 1], ["pay", 1], ["your", 1], ["friend", 1], ["to", 1], ["retrieve", 1], ["this", 1], ["coin", 1], ["provided", 1], ["that", 1], ["he", 1], ["brings", 1], ["his", 1], ["own", 1], ["equipment", 1], ["to", 1], ["scale", 1], ["the", 1], ["mountains", 1], ["of", 1], ["coins", 1], ["your", 1], ["friend", 1], ["has", 1], ["decided", 1], ["he", 1], ["will", 1], ["bring", 1], ["a", 1], ["ladder", 1], ["but", 1], ["he", 1], ["is", 1], ["still", 1], ["uncertain", 1], ["about", 1], ["its", 1], ["length", 1], ["while", 1], ["a", 1], ["longer", 1], ["ladder", 1], ["means", 1], ["that", 1], ["he", 1], ["can", 1], ["scale", 1], ["higher", 1], ["cliffs", 1], ["it", 1], ["also", 1], ["costs", 1], ["more", 1], ["money", 1], ["he", 1], ["therefore", 1], ["wants", 1], ["to", 1], ["buy", 1], ["the", 1], ["shortest", 1], ["ladder", 1], ["such", 1], ["that", 1], ["he", 1], ["can", 1], ["reach", 1], ["the", 1], ["special", 1], ["coin", 1], ["so", 1], ["that", 1], ["he", 1], ["has", 1], ["the", 1], ["largest", 1], ["amount", 1], ["of", 1], ["money", 1], ["left", 1], ["to", 1], ["pay", 1], ["off", 1], ["his", 1], ["debts", 1], ["the", 1], ["vault", 1], ["can", 1], ["be", 1], ["represented", 1], ["as", 1], ["a", 1], ["rectangular", 1], ["grid", 1], ["of", 1], ["stacks", 1], ["of", 1], ["coins", 1], ["of", 1], ["various", 1], ["heights", 1], ["in", 1], ["meters", 1], ["with", 1], ["the", 1], ["entrance", 1], ["at", 1], ["the", 1], ["north", 1], ["west", 1], ["corner", 1], ["the", 1], ["first", 1], ["height", 1], ["in", 1], ["the", 1], ["input", 1], ["the", 1], ["entrance", 1], ["to", 1], ["the", 1], ["vault", 1], ["is", 1], ["at", 1], ["this", 1], ["height", 1], ["as", 1], ["well", 1], ["and", 1], ["the", 1], ["special", 1], ["coin", 1], ["at", 1], ["the", 1], ["south", 1], ["east", 1], ["corner", 1], ["the", 1], ["last", 1], ["height", 1], ["in", 1], ["the", 1], ["input", 1], ["your", 1], ["avian", 1], ["companion", 1], ["has", 1], ["figured", 1], ["out", 1], ["the", 1], ["height", 1], ["of", 1], ["the", 1], ["coins", 1], ["in", 1], ["each", 1], ["of", 1], ["these", 1], ["squares", 1], ["from", 1], ["a", 1], ["stack", 1], ["of", 1], ["coins", 1], ["he", 1], ["can", 1], ["attempt", 1], ["to", 1], ["climb", 1], ["up", 1], ["or", 1], ["jump", 1], ["down", 1], ["to", 1], ["the", 1], ["stack", 1], ["immediately", 1], ["north", 1], ["west", 1], ["south", 1], ["or", 1], ["east", 1], ["of", 1], ["it", 1], ["because", 1], ["your", 1], ["friend", 1], ["cannot", 1], ["jump", 1], ["or", 1], ["fly", 1], ["he", 1], ["is", 1], ["a", 1], ["very", 1], ["special", 1], ["kind", 1], ["of", 1], ["duck", 1], ["that", 1], ["even", 1], ["wears", 1], ["clothes", 1], ["successfully", 1], ["performing", 1], ["a", 1], ["climb", 1], ["of", 1], ["n", 1], ["meters", 1], ["will", 1], ["require", 1], ["him", 1], ["to", 1], ["bring", 1], ["a", 1], ["ladder", 1], ["of", 1], ["at", 1], ["least", 1], ["n", 1], ["meters", 1], ["he", 1], ["does", 1], ["not", 1], ["mind", 1], ["jumping", 1], ["down", 1], ["no", 0], ["matter", 0], ["the", 0], ["height", 0], ["he", 0], ["just", 0], ["lets", 0], ["gravity", 0], ["do", 0], ["all", 0], ["the", 0], ["work", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["two", 1], ["integers", 1], ["the", 1], ["length", 1], ["m", 1], ["and", 1], ["the", 1], ["width", 1], ["n", 1], ["of", 1], ["the", 1], ["vault", 1], ["satisfying", 1], ["1", 1], ["leq", 1], ["m", 1], ["n", 1], ["leq", 1], ["1000", 1], ["the", 1], ["following", 1], ["m", 1], ["lines", 1], ["each", 1], ["contain", 1], ["n", 1], ["integers", 1], ["each", 1], ["integer", 1], ["specifies", 1], ["the", 1], ["height", 1], ["of", 1], ["the", 1], ["pile", 1], ["of", 1], ["coins", 1], ["in", 1], ["the", 1], ["vault", 1], ["at", 1], ["the", 1], ["corresponding", 1], ["position", 1], ["the", 1], ["first", 1], ["line", 1], ["describes", 1], ["the", 1], ["north", 1], ["most", 1], ["stacks", 1], ["from", 1], ["west", 1], ["to", 1], ["east", 1], ["the", 1], ["last", 1], ["line", 1], ["describes", 1], ["the", 1], ["south", 1], ["most", 1], ["stacks", 1], ["from", 1], ["west", 1], ["to", 1], ["east", 1], ["the", 1], ["heights", 1], ["are", 1], ["given", 1], ["in", 1], ["meters", 1], ["and", 1], ["all", 1], ["heights", 1], ["are", 1], ["at", 1], ["least", 1], ["0", 1], ["and", 1], ["at", 0], ["most", 0], ["10", 0], ["9", 0], ["yes", 0], ["your", 0], ["friend’s", 0], ["uncle", 0], ["is", 0], ["very", 0], ["rich", 0], ["output", 0], ["output", 1], ["a", 1], ["single", 1], ["line", 1], ["containing", 1], ["a", 1], ["single", 1], ["integer", 1], ["the", 1], ["length", 1], ["in", 1], ["meters", 1], ["of", 1], ["the", 1], ["shortest", 1], ["ladder", 1], ["that", 1], ["allows", 1], ["you", 1], ["to", 0], ["get", 0], ["from", 0], ["the", 0], ["north", 0], ["west", 0], ["corner", 0], ["to", 0], ["the", 0], ["south", 0], ["east", 0], ["corner", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["3", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["6", 0], ["5", 0], ["4", 0], ["7", 0], ["8", 0], ["9", 0], ["sample", 0], ["output", 0], ["1", 0], ["1", 0], ["sample", 0], ["input", 0], ["2", 0], ["1", 0], ["4", 0], ["4", 0], ["3", 0], ["2", 0], ["1", 0], ["sample", 0], ["output", 0], ["2", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8756855575868373, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8756855575868373, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9212880143112702, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9212880143112702, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8756855575868373, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8756855575868373, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9212880143112702, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9212880143112702, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nDreamoon wants to climb up a stair of n steps. He can climb 1 or 2 steps at each move. Dreamoon wants the number of moves to be a multiple of an integer m. \n\nWhat is the minimal number of moves making him climb to the top of the stairs that satisfies his condition?\n\n\n-----Input-----\n\nThe single line contains two space separated integers n, m (0 < n ≤ 10000, 1 < m ≤ 10).\n\n\n-----Output-----\n\nPrint a single integer — the minimal number of moves being a multiple of m. If there is no way he can climb satisfying condition print  - 1 instead.\n\n\n-----Examples-----\nInput\n10 2\n\nOutput\n6\n\nInput\n3 5\n\nOutput\n-1\n\n\n\n-----Note-----\n\nFor the first sample, Dreamoon could climb in 6 moves with following sequence of steps: {2, 2, 2, 2, 1, 1}.\n\nFor the second sample, there are only three valid sequence of steps {2, 1}, {1, 2}, {1, 1, 1} with 2, 2, and 3 steps respectively. All these numbers are not multiples of 5.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["# 272 D2 A\n\ndef func(p,m,n):\n\tw = p\n\twhile w % m != 0 and w<=n:\n\t\tw += 1\n\tif w<= n:\n\t\treturn w\n\telse:\n\t\treturn -1\n\n\n\t\nl = input().split()\nn = int(l[0])\nm = int(l[1])\n\nif n % 2 == 0:\n\tp = int(n/2)\nelse:\n\tp = int(n/2)+1\n\nprint(func(p,m,n))\n", "n, m = map(int, input().split())\nx = n // 2 + n % 2\nwhile x <= n and x % m != 0:\n\tx += 1\nif x > n:\n\tprint(-1)\nelse:\n\tprint(x)\n", "n,m = list(map(int, input().split(' ')))\nx = n//2 + (n%2==1)\ny = n\nfor i in range(x, y+1) :\n\tif i%m == 0 :\n\t\tprint(i)\n\t\tbreak\nelse :\n\tprint(-1)\n", "n, m = map(int, list(input().split()))\n\nmin_v = n // 2 + n % 2\nwhile min_v % m != 0:\n\tmin_v += 1\nif min_v > n:\n\tprint('-1')\nelse:\n\tprint(min_v)\n", "n,m=map(int,input().split())\na=0\nb=n%2\nn=n-b\nfor i in range(n//2,n+1):\n\tif a==0:\n\t\tif (i+b)%m==0:\n\t\t\tprint(i+b)\n\t\t\ta=1\nif a==0:print(-1)\n", "n, m = map(int, input().split())\nfor i in range(n//2+n%2, n+1):\n\tif i % m == 0:\n\t\tprint(i)\n\t\tbreak\nelse:\n\tprint(-1)\n", "#! /usr/bin/env python3\n\ndef main(n, m):\n\tif n < m:\n\t\treturn -1\n\ttemp = int(n / 2) + n % 2\n\twhile temp % m != 0 and temp < n:\n\t\ttemp = temp + 1\n\treturn temp if temp % m == 0 else -1\n\nn, m = input().split(' ')\nn, m = int(n), int(m)\n\nprint(main(n, m))\n", "# Codeforces Round 272d2 problem A\n\ninp = tuple(map(int, input().split(' ')))\nn, m = inp\n\ns1 = n % 2\ns2 = n // 2\n\nwhile (s1+s2) % m != 0 and s2 > 0:\n\ts2 -= 1\n\ts1 += 2\n\nif s2 == 0 and s1 % m != 0:\n\tprint(-1)\nelse:\n\tprint(s1 + s2)\n\t\n\t\n", "n, m = list(map(int, input().split()))\nMin = (n + 1) // 2;\nwhile Min <= n and Min % m != 0:\n\tMin += 1;\nif Min <= n:\n\tprint(Min)\nelse:\n\tprint(-1)\n", "import math\n\n#input\n\nn,m=list(map(int,input().split()))\n\n\n\n#variables\nminimum=math.ceil(n/2)\ni=minimum-1\n\n\n\n#main\n\nwhile True:\n\ti+=1\n\tif i%m==0:\n\t\tprint(i)\n\t\tquit()\n\tif i==n:\n\t\tprint(-1)\n\t\tquit()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n(n,m) = list(map(int,input().split()))\n\nok = False\nfor step2 in range(n//2, -1, -1):\n\tstep = step2 + (n - 2 * step2)\n\tif step % m == 0:\n\t\tprint(step)\n\t\tok = True\n\t\tbreak\n\t\nif not ok:\n\tprint(-1)\n", "'''\nCreated on Oct 12, 2014\n\n@author: Ismael\n'''\nok = False\nn,m = map(int,input().split())\nfor y in range(n//2,-1,-1):\n\tif((n-y)%m==0):\n\t\tprint(y+(n-2*y))\n\t\tok = True\n\t\tbreak\nif(not ok):\n\tprint(-1)\n", "n, m = list(map(int, input().split()))\nk  = n // 2 + n % 2\nl = n % 2\nwhile k % m != 0 and l <= n:\n\tk += 1\n\tl += 2\nprint(k if k % m == 0 and k <= n else -1)\n", "n,m=map(int,input().split())\n\nif n<m:print(-1)\nelse:\n\tx=n//2+n%2\n\twhile x%m!=0:\n\t\tx+=1\n\tprint(x)\n", "def main():\n\tn, m = input().split(' ')\n\tn = int(n)\n\tm = int(m)\n\tres = 0\n\tif n < m:\n\t\tprint(\"-1\")\n\telse:\n\t\tif n % 2 != 0:\n\t\t\tn -=1\n\t\t\tres += 1\n\t\tshag_count2 = n / 2\n\t\tif (shag_count2 + res) % m == 0:\n\t\t\tprint(int(shag_count2 + res))\n\t\telse:\n\t\t\twhile (shag_count2 + res) % m != 0:\n\t\t\t\tres += 1\n\t\t\tprint(int(shag_count2 + res))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "def main():\n\tnAndM = str(input()).split()\n\tn, m = int(nAndM[0]), int(nAndM[1])\n\tmaxX = n//2\n\tanswers = []\n\tfor x in range(maxX + 1):\n\t\ty = n - 2*x\n\t\tif (x + y) % m == 0:\n\t\t\tanswers.append(x + y)\n\t\tanswers.sort()\n\tif answers:\n\t\tprint(answers[0])\n\telse:\n\t\tprint(-1)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "import math\n\nx=[int(i) for i in input().split()]\nn=x[0]\nm=x[1]\nif(n%2==0):\n\ts = math.ceil((n//2)/m)\nelse:\n\ts= math.ceil(((n+1)//2)/m)\n\nif(s*m <= n ):\n\tprint(s*m)\nelse:\n\tprint(-1)\n", "n, m = [int(i) for i in input().split()]\nfor i in reversed(list(range(0, n // 2 + 1))):\n\ts = i + n - 2 * i\n\tif s % m == 0:\n\t\tprint(s)\n\t\tbreak\nelse:\n\tprint(-1)\n", "import math\nn,m = list(map(int,input().split()))\nres = 0\nif n==0:\n\tprint(0)\n\tquit()\n\nif m>n:\n\tprint(-1)\n\tquit()\n\n\"\"\"if n%2==0:\n\tres = (n//2)\n\nelse:\n\tres = (n//2+1)\nprint(res+n%m)\"\"\"\nfor i in range((n+1)//2,n+1):\n\tif i%m==0:\n\t\tprint(i)\n\t\tquit()\n", "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\n\ndef main():\n\tn,m = [ int(x) for x in input().split(' ') ]\n\n\tres = 0\n\twhile True:\n\t\tif n < 0:\n\t\t\tres = -1\n\t\t\tbreak\n\n\t\tq = n // 2\n\t\tr = n % 2\n\t\tif r != 0 :\n\t\t\tres += 1\n\t\t\tn -= 1\n\t\t\tcontinue\n\n\t\tif ( q + res ) % m == 0:\n\t\t\tres += q\n\t\t\tbreak;\n\n\t\tres += 1\n\t\tn -= 1\n\n\tprint( res )\n\treturn\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n,m=list(map(int,input().split()))\nif n%2==0:\n\ta=n//2\n\tb=(n//2)*2\nif n%2!=0:\n\ta=n//2+1\n\tb=(n//2)*2+1\no=-1\nfor i in range(a,b+1):\n\tif i%m==0:\n\t\to=i\n\t\tbreak\nprint(o)\n", "n, m = list(map(int, input().split()))\nif n < m:\n\tprint(-1)\nelse:\n\tk = (n + 2 * m - 1) // (2 * m)\n\tx = n - k * m\n\ty = 2 * k * m - n\n\tprint(x + y)\n", "n, m=input().split()\nn=int(n)\nm=int(m)\nflag=0\nres=0\nif m>n:\n\tprint(-1)\nelse:\n\twhile n>=2*m:\n\t\tres+=m\n\t\tn-=2*m\n\tif n%(2*m)!=0:\n\t\tres+=m\n\tprint(res)\n\t\n", "'''\nCreated on Oct 12, 2014\n\n@author: Ismael\n'''\nok = False\nn,m = map(int,input().split())\nfor y in range(n//2,-1,-1):\n\tif((n-y)%m==0):\n\t\tprint(y+(n-2*y))\n\t\tok = True\n\t\tbreak\nif(not ok):\n\tprint(-1)\n", "n, m = map(int, input().split())\nans = -1\nfor i in range((n+1)//2, n+1):\n\tif i%m==0:\n\t\tans = i\n\t\tbreak\nprint(ans)\n"], "id": "id6567"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6567", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["dreamoon", 4], ["wants", 4], ["to", 4], ["climb", 4], ["up", 4], ["a", 4], ["stair", 4], ["of", 4], ["n", 4], ["steps", 4], ["he", 4], ["can", 4], ["climb", 4], ["1", 4], ["or", 4], ["2", 4], ["steps", 4], ["at", 4], ["each", 4], ["move", 4], ["dreamoon", 4], ["wants", 4], ["the", 4], ["number", 4], ["of", 4], ["moves", 4], ["to", 4], ["be", 4], ["a", 4], ["multiple", 4], ["of", 4], ["an", 4], ["integer", 4], ["m", 4], ["what", 4], ["is", 4], ["the", 4], ["minimal", 4], ["number", 4], ["of", 4], ["moves", 4], ["making", 4], ["him", 0], ["climb", 0], ["to", 0], ["the", 0], ["top", 0], ["of", 0], ["the", 0], ["stairs", 0], ["that", 0], ["satisfies", 0], ["his", 0], ["condition", 0], ["input", 0], ["the", 4], ["single", 4], ["line", 4], ["contains", 4], ["two", 4], ["space", 4], ["separated", 0], ["integers", 0], ["n", 0], ["m", 0], ["0", 0], ["n", 0], ["≤", 0], ["10000", 0], ["1", 0], ["m", 0], ["≤", 0], ["10", 0], ["output", 0], ["print", 4], ["a", 4], ["single", 4], ["integer", 4], ["—", 4], ["the", 4], ["minimal", 4], ["number", 4], ["of", 4], ["moves", 4], ["being", 4], ["a", 4], ["multiple", 4], ["of", 4], ["m", 4], ["if", 4], ["there", 0], ["is", 0], ["no", 0], ["way", 0], ["he", 0], ["can", 0], ["climb", 0], ["satisfying", 0], ["condition", 0], ["print", 0], ["1", 0], ["instead", 0], ["examples", 0], ["input", 0], ["10", 0], ["2", 0], ["output", 0], ["6", 0], ["input", 0], ["3", 0], ["5", 0], ["output", 0], ["1", 0], ["note", 0], ["for", 4], ["the", 4], ["first", 4], ["sample", 4], ["dreamoon", 4], ["could", 4], ["climb", 4], ["in", 4], ["6", 4], ["moves", 4], ["with", 4], ["following", 4], ["sequence", 4], ["of", 4], ["steps", 4], ["2", 4], ["2", 4], ["2", 4], ["2", 4], ["1", 4], ["1", 4], ["for", 4], ["the", 4], ["second", 4], ["sample", 4], ["there", 4], ["are", 4], ["only", 4], ["three", 4], ["valid", 4], ["sequence", 4], ["of", 4], ["steps", 4], ["2", 4], ["1", 4], ["1", 4], ["2", 4], ["1", 4], ["1", 4], ["1", 4], ["with", 4], ["2", 4], ["2", 4], ["and", 0], ["3", 0], ["steps", 0], ["respectively", 0], ["all", 0], ["these", 0], ["numbers", 0], ["are", 0], ["not", 0], ["multiples", 0], ["of", 0], ["5", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6369047619047619, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.15922619047619047, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8611111111111112, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2152777777777778, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6369047619047619, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.15922619047619047, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8611111111111112, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2152777777777778, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["272", 0], ["d2", 0], ["a", 0], ["def", 0], ["func", 0], ["p", 0], ["m", 0], ["n", 0], ["w", 0], ["p", 0], ["while", 0], ["w", 0], ["m", 0], ["0", 0], ["and", 0], ["w", 0], ["n", 0], ["w", 0], ["1", 0], ["if", 0], ["w", 0], ["n", 0], ["return", 0], ["w", 0], ["else", 0], ["return", 0], ["1", 0], ["l", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["l", 0], ["0", 0], ["m", 0], ["int", 0], ["l", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["p", 0], ["int", 0], ["n", 0], ["2", 0], ["else", 0], ["p", 0], ["int", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["func", 0], ["p", 0], ["m", 0], ["n", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["n", 0], ["2", 0], ["n", 0], ["2", 0], ["while", 0], ["x", 0], ["n", 0], ["and", 0], ["x", 0], ["m", 0], ["0", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["x", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["n", 0], ["2", 0], ["n", 0], ["2", 0], ["1", 0], ["y", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["x", 0], ["y", 0], ["1", 0], ["if", 0], ["i", 0], ["m", 0], ["0", 0], ["print", 0], ["i", 0], ["break", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["list", 0], ["input", 0], ["split", 0], ["min", 0], ["v", 0], ["n", 0], ["2", 0], ["n", 0], ["2", 0], ["while", 0], ["min", 0], ["v", 0], ["m", 0], ["0", 0], ["min", 0], ["v", 0], ["1", 0], ["if", 0], ["min", 0], ["v", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["min", 0], ["v", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["b", 0], ["n", 0], ["2", 0], ["n", 0], ["n", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["if", 0], ["i", 0], ["b", 0], ["m", 0], ["0", 0], ["print", 0], ["i", 0], ["b", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["print", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["n", 0], ["2", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["m", 0], ["0", 0], ["print", 0], ["i", 0], ["break", 0], ["else", 0], ["print", 0], ["1", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["if", 0], ["n", 0], ["m", 0], ["return", 0], ["1", 0], ["temp", 0], ["int", 0], ["n", 0], ["2", 0], ["n", 0], ["2", 0], ["while", 0], ["temp", 0], ["m", 0], ["0", 0], ["and", 0], ["temp", 0], ["n", 0], ["temp", 0], ["temp", 0], ["1", 0], ["return", 0], ["temp", 0], ["if", 0], ["temp", 0], ["m", 0], ["0", 0], ["else", 0], ["1", 0], ["n", 0], ["m", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["int", 0], ["n", 0], ["int", 0], ["m", 0], ["print", 0], ["main", 0], ["n", 0], ["m", 0], ["codeforces", 0], ["round", 0], ["272d2", 0], ["problem", 0], ["a", 0], ["inp", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["inp", 0], ["s1", 0], ["n", 0], ["2", 0], ["s2", 0], ["n", 0], ["2", 0], ["while", 0], ["s1", 0], ["s2", 0], ["m", 0], ["0", 0], ["and", 0], ["s2", 0], ["0", 0], ["s2", 0], ["1", 0], ["s1", 0], ["2", 0], ["if", 0], ["s2", 0], ["0", 0], ["and", 0], ["s1", 0], ["m", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["s1", 0], ["s2", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["min", 0], ["n", 0], ["1", 0], ["2", 0], ["while", 0], ["min", 0], ["n", 0], ["and", 0], ["min", 0], ["m", 0], ["0", 0], ["min", 0], ["1", 0], ["if", 0], ["min", 0], ["n", 0], ["print", 0], ["min", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["math", 0], ["input", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["variables", 0], ["minimum", 0], ["math", 0], ["ceil", 0], ["n", 0], ["2", 0], ["i", 0], ["minimum", 0], ["1", 0], ["main", 0], ["while", 0], ["true", 0], ["i", 0], ["1", 0], ["if", 0], ["i", 0], ["m", 0], ["0", 0], ["print", 0], ["i", 0], ["quit", 0], ["if", 0], ["i", 0], ["n", 0], ["print", 0], ["1", 0], ["quit", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ok", 0], ["false", 0], ["for", 0], ["step2", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["step", 0], ["step2", 0], ["n", 0], ["2", 0], ["step2", 0], ["if", 0], ["step", 0], ["m", 0], ["0", 0], ["print", 0], ["step", 0], ["ok", 0], ["true", 0], ["break", 0], ["if", 0], ["not", 0], ["ok", 0], ["print", 0], ["1", 0], ["created", 0], ["on", 0], ["oct", 0], ["12", 0], ["2014", 0], ["author", 0], ["ismael", 0], ["ok", 0], ["false", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["if", 0], ["n", 0], ["y", 0], ["m", 0], ["0", 0], ["print", 0], ["y", 0], ["n", 0], ["2", 0], ["y", 0], ["ok", 0], ["true", 0], ["break", 0], ["if", 0], ["not", 0], ["ok", 0], ["print", 0], ["1", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["n", 0], ["2", 0], ["n", 0], ["2", 0], ["l", 0], ["n", 0], ["2", 0], ["while", 0], ["k", 0], ["m", 0], ["0", 0], ["and", 0], ["l", 0], ["n", 0], ["k", 0], ["1", 0], ["l", 0], ["2", 0], ["print", 0], ["k", 0], ["if", 0], ["k", 0], ["m", 0], ["0", 0], ["and", 0], ["k", 0], ["n", 0], ["else", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["m", 0], ["print", 0], ["1", 0], ["else", 0], ["x", 0], ["n", 0], ["2", 0], ["n", 0], ["2", 0], ["while", 0], ["x", 0], ["m", 0], ["0", 0], ["x", 0], ["1", 0], ["print", 0], ["x", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["m", 0], ["int", 0], ["m", 0], ["res", 0], ["0", 0], ["if", 0], ["n", 0], ["m", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["n", 0], ["1", 0], ["res", 0], ["1", 0], ["shag", 0], ["count2", 0], ["n", 0], ["2", 0], ["if", 0], ["shag", 0], ["count2", 0], ["res", 0], ["m", 0], ["0", 0], ["print", 0], ["int", 0], ["shag", 0], ["count2", 0], ["res", 0], ["else", 0], ["while", 0], ["shag", 0], ["count2", 0], ["res", 0], ["m", 0], ["0", 0], ["res", 0], ["1", 0], ["print", 0], ["int", 0], ["shag", 0], ["count2", 0], ["res", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["main", 0], ["nandm", 0], ["str", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["int", 0], ["nandm", 0], ["0", 0], ["int", 0], ["nandm", 0], ["1", 0], ["maxx", 0], ["n", 0], ["2", 0], ["answers", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["maxx", 0], ["1", 0], ["y", 0], ["n", 0], ["2", 0], ["x", 0], ["if", 0], ["x", 0], ["y", 0], ["m", 0], ["0", 0], ["answers", 0], ["append", 0], ["x", 0], ["y", 0], ["answers", 0], ["sort", 0], ["if", 0], ["answers", 0], ["print", 0], ["answers", 0], ["0", 0], ["else", 0], ["print", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["math", 0], ["x", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["x", 0], ["0", 0], ["m", 0], ["x", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["s", 0], ["math", 0], ["ceil", 0], ["n", 0], ["2", 0], ["m", 0], ["else", 0], ["s", 0], ["math", 0], ["ceil", 0], ["n", 0], ["1", 0], ["2", 0], ["m", 0], ["if", 0], ["s", 0], ["m", 0], ["n", 0], ["print", 0], ["s", 0], ["m", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["reversed", 0], ["list", 0], ["range", 0], ["0", 0], ["n", 0], ["2", 0], ["1", 0], ["s", 0], ["i", 0], ["n", 0], ["2", 0], ["i", 0], ["if", 0], ["s", 0], ["m", 0], ["0", 0], ["print", 0], ["s", 0], ["break", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["math", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["0", 0], ["if", 0], ["n", 0], ["0", 0], ["print", 0], ["0", 0], ["quit", 0], ["if", 0], ["m", 0], ["n", 0], ["print", 0], ["1", 0], ["quit", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["res", 0], ["n", 0], ["2", 0], ["else", 0], ["res", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["res", 0], ["n", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["2", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["m", 0], ["0", 0], ["print", 0], ["i", 0], ["quit", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["coding", 0], ["utf", 0], ["8", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["res", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["n", 0], ["0", 0], ["res", 0], ["1", 0], ["break", 0], ["q", 0], ["n", 0], ["2", 0], ["r", 0], ["n", 0], ["2", 0], ["if", 0], ["r", 0], ["0", 0], ["res", 0], ["1", 0], ["n", 0], ["1", 0], ["continue", 0], ["if", 0], ["q", 0], ["res", 0], ["m", 0], ["0", 0], ["res", 0], ["q", 0], ["break", 0], ["res", 0], ["1", 0], ["n", 0], ["1", 0], ["print", 0], ["res", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["a", 0], ["n", 0], ["2", 0], ["b", 0], ["n", 0], ["2", 0], ["2", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["a", 0], ["n", 0], ["2", 0], ["1", 0], ["b", 0], ["n", 0], ["2", 0], ["2", 0], ["1", 0], ["o", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["b", 0], ["1", 0], ["if", 0], ["i", 0], ["m", 0], ["0", 0], ["o", 0], ["i", 0], ["break", 0], ["print", 0], ["o", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["m", 0], ["print", 0], ["1", 0], ["else", 0], ["k", 0], ["n", 0], ["2", 0], ["m", 0], ["1", 0], ["2", 0], ["m", 0], ["x", 0], ["n", 0], ["k", 0], ["m", 0], ["y", 0], ["2", 0], ["k", 0], ["m", 0], ["n", 0], ["print", 0], ["x", 0], ["y", 0], ["n", 0], ["m", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["m", 0], ["int", 0], ["m", 0], ["flag", 0], ["0", 0], ["res", 0], ["0", 0], ["if", 0], ["m", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["while", 0], ["n", 0], ["2", 0], ["m", 0], ["res", 0], ["m", 0], ["n", 0], ["2", 0], ["m", 0], ["if", 0], ["n", 0], ["2", 0], ["m", 0], ["0", 0], ["res", 0], ["m", 0], ["print", 0], ["res", 0], ["created", 0], ["on", 0], ["oct", 0], ["12", 0], ["2014", 0], ["author", 0], ["ismael", 0], ["ok", 0], ["false", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["if", 0], ["n", 0], ["y", 0], ["m", 0], ["0", 0], ["print", 0], ["y", 0], ["n", 0], ["2", 0], ["y", 0], ["ok", 0], ["true", 0], ["break", 0], ["if", 0], ["not", 0], ["ok", 0], ["print", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["2", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["m", 0], ["0", 0], ["ans", 0], ["i", 0], ["break", 0], ["print", 0], ["ans", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThe annual college sports-ball tournament is approaching, which for trademark reasons we'll refer to as Third Month Insanity. There are a total of 2^{N} teams participating in the tournament, numbered from 1 to 2^{N}. The tournament lasts N rounds, with each round eliminating half the teams. The first round consists of 2^{N} - 1 games, numbered starting from 1. In game i, team 2·i - 1 will play against team 2·i. The loser is eliminated and the winner advances to the next round (there are no ties). Each subsequent round has half as many games as the previous round, and in game i the winner of the previous round's game 2·i - 1 will play against the winner of the previous round's game 2·i.\n\nEvery year the office has a pool to see who can create the best bracket. A bracket is a set of winner predictions for every game. For games in the first round you may predict either team to win, but for games in later rounds the winner you predict must also be predicted as a winner in the previous round. Note that the bracket is fully constructed before any games are actually played. Correct predictions in the first round are worth 1 point, and correct predictions in each subsequent round are worth twice as many points as the previous, so correct predictions in the final game are worth 2^{N} - 1 points.\n\nFor every pair of teams in the league, you have estimated the probability of each team winning if they play against each other. Now you want to construct a bracket with the maximum possible expected score.\n\n\n-----Input-----\n\nInput will begin with a line containing N (2 ≤ N ≤ 6).\n\n2^{N} lines follow, each with 2^{N} integers. The j-th column of the i-th row indicates the percentage chance that team i will defeat team j, unless i = j, in which case the value will be 0. It is guaranteed that the i-th column of the j-th row plus the j-th column of the i-th row will add to exactly 100.\n\n\n-----Output-----\n\nPrint the maximum possible expected score over all possible brackets. Your answer must be correct to within an absolute or relative error of 10^{ - 9}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer will be considered correct, if $\\frac{|a - b|}{\\operatorname{max}(1,|b|)} \\leq 10^{-9}$.\n\n\n-----Examples-----\nInput\n2\n0 40 100 100\n60 0 40 40\n0 60 0 45\n0 60 55 0\n\nOutput\n1.75\n\nInput\n3\n0 0 100 0 100 0 0 0\n100 0 100 0 0 0 100 100\n0 0 0 100 100 0 0 0\n100 100 0 0 0 0 100 100\n0 100 0 100 0 0 100 0\n100 100 100 100 100 0 0 0\n100 0 100 0 0 100 0 0\n100 0 100 0 100 100 100 0\n\nOutput\n12\n\nInput\n2\n0 21 41 26\n79 0 97 33\n59 3 0 91\n74 67 9 0\n\nOutput\n3.141592\n\n\n\n-----Note-----\n\nIn the first example, you should predict teams 1 and 4 to win in round 1, and team 1 to win in round 2. Recall that the winner you predict in round 2 must also be predicted as a winner in round 1.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import functools\nn = int(input())\n\nprops = []\ndef preproc(a):\n\treturn float(a)/100.\n\nfor i in range(pow(2,n)):\n\tprops.append(list(map(preproc, input().split())))\n\nwining_props = []  # list of lists. First index -- number of round, second -- num of team, value -- prop of wining\n\nwining_props_first_round = []\nfor i in range(0, (2 ** n), 2):\n\t# i, and i+1 teams playing\n\twining_prop_for_i = props[i][i + 1]\n\twining_props_first_round.append(wining_prop_for_i)\n\twining_props_first_round.append(1. - wining_prop_for_i)\n\nwining_props.append(wining_props_first_round)\nassert len(wining_props_first_round) == len(props)\n\nfor round_num in range(2, n + 1):\n\t# calculate propabilitys for winning in i round for each team\n\t# prop of winning in i round = prop of winning prev round + mo of win this one\n\t# mo win this = for each team we can meet prop of them wining prev * prop we win them\n\t# each team we can meet on round i  = all teems // 2^i == we//2^i\n\tthis_round_wining_props = []\n\tfor team_num in range(2 ** n):\n\t\tt = team_num // (2 ** round_num) * (2 ** (round_num))\n\t\tteams_we_meet_this_round = [t + x for x in range(2 ** round_num)]\n\t\tt = team_num // (2 ** (round_num-1)) * (2 ** (round_num-1))\n\t\tteams_we_meet_prev_round = [t + x for x in range(2 ** (round_num-1))]\n\t\tfor tt in teams_we_meet_prev_round:\n\t\t\tteams_we_meet_this_round.remove(tt)\n\n\t\tthis_team_wining_props = wining_props[round_num - 2][team_num]  # -2 cause numeration\n\n\t\tchances_win_i_team = []\n\t\tfor tm in teams_we_meet_this_round:\n\t\t\t# chances we meet them * chances we win\n\t\t\tchances_win_i_team.append(wining_props[round_num - 2][tm] * props[team_num][tm])\n\n\t\tmo_win_this_round = sum(chances_win_i_team)\n\n\t\tthis_team_wining_props *= mo_win_this_round\n\n\t\tthis_round_wining_props.append(this_team_wining_props)\n\n\t#assert 0.99 < sum(this_round_wining_props) < 1.01\n\twining_props.append(this_round_wining_props)\n\n# now we got props of each win on each round. Lets bet on most propable winer and calculate revenue\n\n#from left to right-1 is playing\n@functools.lru_cache(maxsize=None)\ndef revenue(round_num, teams_left, teams_right, winner=-1):\n\tsplit = ((teams_left + teams_right) // 2)\n\n\t# let the strongest team win, we bet, and calculate to the bottom\n\tif round_num == 1:\n\t\treturn wining_props[0][winner] if winner != -1 else max(wining_props[0][teams_left:teams_right])\n\n\tif winner == -1:\n\t\tresults = []\n\t\tfor winner in range(teams_left, teams_right):\n\t\t\twinner_prop = wining_props[round_num - 1][winner]\n\n\t\t\tif winner >= split:\n\t\t\t\tres = sum(\n\t\t\t\t\t[revenue(round_num - 1, teams_left, split), revenue(round_num - 1, split, teams_right, winner),\n\t\t\t\t\t winner_prop * (2 ** (round_num - 1))])\n\t\t\telse:\n\t\t\t\tres = sum(\n\t\t\t\t\t[revenue(round_num - 1, teams_left, split, winner), revenue(round_num - 1, split, teams_right),\n\t\t\t\t\t winner_prop * (2 ** (round_num - 1))])\n\t\t\tresults.append(res)\n\n\t\treturn max(results)\n\n\telse:\n\t\twinner_prop = wining_props[round_num - 1][winner]\n\n\t\tif winner >= split:\n\t\t\tres = sum(\n\t\t\t\t[revenue(round_num - 1, teams_left, split), revenue(round_num - 1, split, teams_right, winner),\n\t\t\t\t winner_prop * (2 ** (round_num - 1))])\n\t\telse:\n\t\t\tres = sum(\n\t\t\t\t[revenue(round_num - 1, teams_left, split, winner), revenue(round_num - 1, split, teams_right),\n\t\t\t\t winner_prop * (2 ** (round_num - 1))])\n\n\t\treturn res\n\nprint(revenue(n, 0, (2 ** n)))\n", "n = int(input())\nm = 1 << n\np = [list(map(int, input().split())) for i in range(m)]\nu, x = [1] * m, [0] * m\nv, y = u[:], x[:]\nfor i in range(n):\n\td = 1 << i\n\tfor j in range(m):\n\t\ts = d * (j // d ^ 1)\n\t\tv[j] = u[j] * sum(u[k] * p[j][k] for k in range(s, s + d)) / 100\n\t\ty[j] = max(x[s: s + d]) + x[j] + v[j] * d\n\tu, v, x, y = v, u, y, x\nprint(max(x))\n", "n = int(input())\nm = 1 << n\np = [list(map(int, input().split())) for i in range(m)]\nu, x = [1] * m, [0] * m\nv, y = u[:], x[:]\nfor i in range(n):\n\td = 1 << i\n\tfor j in range(m):\n\t\ts = d * (j // d ^ 1)\n\t\tv[j] = u[j] * sum(u[k] * p[j][k] for k in range(s, s + d)) / 100\n\t\ty[j] = max(x[s: s + d]) + x[j] + v[j] * d\n\tu, v, x, y = v, u, y, x\nprint(max(x))\n", "n = int(input())\n# Using the same index I would for a tree\nm = 2**n\n\npoints = [0]*(2*m)\npoints[1] = 2**(n-1)\nfor i in range(1,m):\n\tx = points[i]//2\n\tpoints[2*i] = x\n\tpoints[2*i+1] = x\n\n\n\nP = [[int(x)/100.0 for x in input().split()] for _ in range(m)]\nstate = [[0.0]*64 for _ in range(2*m)]\n\nfor i in range(m):\n\tstate[m+i][i] = 1.0\n\t\nfor i in reversed(range(1,m)):\n\tfor j in range(m):\n\t\tfor k in range(j+1,m):\n\t\t\t# x is probability that team j meets team k in match i\n\t\t\tx = state[2*i][j]*state[2*i+1][k]\n\n\t\t\tstate[i][j] += P[j][k]*x\n\t\t\tstate[i][k] += P[k][j]*x\n\nscore = [[0]*64 for _ in range(2*m)]\nfor i in reversed(range(1,m)):\n\tfor j in range(m):\n\t\tfor k in range(m):\n\t\t\tscore[i][j] = max(score[i][j], score[2*i][j]+state[i][j]*points[i] + score[2*i+1][k])\n\t\t\tscore[i][j] = max(score[i][j], score[2*i+1][j]+state[i][j]*points[i] + score[2*i][k])\nprint(repr(max(score[1])))\n"], "id": "id6596"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6596", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 1], ["annual", 1], ["college", 1], ["sports", 1], ["ball", 1], ["tournament", 1], ["is", 1], ["approaching", 1], ["which", 1], ["for", 1], ["trademark", 1], ["reasons", 1], ["we", 1], ["ll", 0], ["refer", 0], ["to", 0], ["as", 0], ["third", 0], ["month", 0], ["insanity", 0], ["there", 0], ["are", 0], ["a", 0], ["total", 0], ["of", 0], ["2", 0], ["n", 0], ["teams", 0], ["participating", 0], ["in", 0], ["the", 0], ["tournament", 0], ["numbered", 0], ["from", 0], ["1", 0], ["to", 0], ["2", 0], ["n", 0], ["the", 1], ["tournament", 1], ["lasts", 1], ["n", 1], ["rounds", 1], ["with", 0], ["each", 0], ["round", 0], ["eliminating", 0], ["half", 0], ["the", 0], ["teams", 0], ["the", 0], ["first", 0], ["round", 0], ["consists", 0], ["of", 0], ["2", 0], ["n", 0], ["1", 1], ["games", 1], ["numbered", 1], ["starting", 1], ["from", 1], ["1", 1], ["in", 1], ["game", 1], ["i", 1], ["team", 1], ["2·i", 1], ["1", 1], ["will", 1], ["play", 1], ["against", 1], ["team", 1], ["2·i", 1], ["the", 1], ["loser", 1], ["is", 1], ["eliminated", 1], ["and", 1], ["the", 1], ["winner", 1], ["advances", 1], ["to", 1], ["the", 1], ["next", 1], ["round", 1], ["there", 1], ["are", 1], ["no", 1], ["ties", 1], ["each", 1], ["subsequent", 1], ["round", 1], ["has", 1], ["half", 1], ["as", 1], ["many", 1], ["games", 1], ["as", 1], ["the", 1], ["previous", 1], ["round", 1], ["and", 1], ["in", 1], ["game", 1], ["i", 1], ["the", 1], ["winner", 1], ["of", 1], ["the", 1], ["previous", 1], ["round", 1], ["s", 1], ["game", 1], ["2·i", 1], ["1", 1], ["will", 1], ["play", 1], ["against", 1], ["the", 1], ["winner", 1], ["of", 1], ["the", 1], ["previous", 1], ["round", 1], ["s", 1], ["game", 1], ["2·i", 1], ["every", 1], ["year", 1], ["the", 1], ["office", 1], ["has", 1], ["a", 1], ["pool", 1], ["to", 1], ["see", 1], ["who", 1], ["can", 1], ["create", 1], ["the", 1], ["best", 1], ["bracket", 1], ["a", 1], ["bracket", 1], ["is", 1], ["a", 1], ["set", 1], ["of", 1], ["winner", 1], ["predictions", 1], ["for", 1], ["every", 1], ["game", 1], ["for", 1], ["games", 1], ["in", 1], ["the", 1], ["first", 1], ["round", 1], ["you", 1], ["may", 1], ["predict", 1], ["either", 1], ["team", 1], ["to", 1], ["win", 1], ["but", 1], ["for", 1], ["games", 1], ["in", 1], ["later", 1], ["rounds", 1], ["the", 1], ["winner", 1], ["you", 1], ["predict", 1], ["must", 1], ["also", 1], ["be", 1], ["predicted", 1], ["as", 1], ["a", 1], ["winner", 1], ["in", 1], ["the", 1], ["previous", 1], ["round", 1], ["note", 1], ["that", 1], ["the", 1], ["bracket", 1], ["is", 1], ["fully", 1], ["constructed", 1], ["before", 1], ["any", 1], ["games", 1], ["are", 1], ["actually", 1], ["played", 1], ["correct", 1], ["predictions", 1], ["in", 1], ["the", 1], ["first", 1], ["round", 1], ["are", 1], ["worth", 1], ["1", 1], ["point", 1], ["and", 1], ["correct", 1], ["predictions", 1], ["in", 1], ["each", 1], ["subsequent", 1], ["round", 1], ["are", 1], ["worth", 1], ["twice", 1], ["as", 1], ["many", 1], ["points", 1], ["as", 0], ["the", 0], ["previous", 0], ["so", 0], ["correct", 0], ["predictions", 0], ["in", 0], ["the", 0], ["final", 0], ["game", 0], ["are", 0], ["worth", 0], ["2", 0], ["n", 0], ["1", 1], ["points", 1], ["for", 1], ["every", 1], ["pair", 1], ["of", 1], ["teams", 1], ["in", 1], ["the", 1], ["league", 1], ["you", 1], ["have", 1], ["estimated", 1], ["the", 1], ["probability", 1], ["of", 1], ["each", 1], ["team", 1], ["winning", 1], ["if", 1], ["they", 1], ["play", 1], ["against", 1], ["each", 1], ["other", 1], ["now", 1], ["you", 1], ["want", 0], ["to", 0], ["construct", 0], ["a", 0], ["bracket", 0], ["with", 0], ["the", 0], ["maximum", 0], ["possible", 0], ["expected", 0], ["score", 0], ["input", 0], ["input", 1], ["will", 0], ["begin", 0], ["with", 0], ["a", 0], ["line", 0], ["containing", 0], ["n", 0], ["2", 0], ["≤", 0], ["n", 0], ["≤", 0], ["6", 0], ["2", 0], ["n", 0], ["lines", 0], ["follow", 0], ["each", 0], ["with", 0], ["2", 0], ["n", 0], ["integers", 1], ["the", 1], ["j", 1], ["th", 1], ["column", 1], ["of", 1], ["the", 1], ["i", 1], ["th", 1], ["row", 1], ["indicates", 1], ["the", 1], ["percentage", 1], ["chance", 1], ["that", 1], ["team", 1], ["i", 1], ["will", 1], ["defeat", 1], ["team", 1], ["j", 1], ["unless", 1], ["i", 1], ["j", 1], ["in", 1], ["which", 1], ["case", 1], ["the", 1], ["value", 1], ["will", 1], ["be", 1], ["0", 1], ["it", 1], ["is", 1], ["guaranteed", 1], ["that", 1], ["the", 1], ["i", 1], ["th", 1], ["column", 1], ["of", 1], ["the", 1], ["j", 1], ["th", 1], ["row", 1], ["plus", 1], ["the", 1], ["j", 1], ["th", 0], ["column", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["row", 0], ["will", 0], ["add", 0], ["to", 0], ["exactly", 0], ["100", 0], ["output", 0], ["print", 1], ["the", 1], ["maximum", 1], ["possible", 1], ["expected", 1], ["score", 1], ["over", 1], ["all", 1], ["possible", 1], ["brackets", 1], ["your", 1], ["answer", 1], ["must", 1], ["be", 1], ["correct", 1], ["to", 1], ["within", 1], ["an", 1], ["absolute", 1], ["or", 1], ["relative", 1], ["error", 1], ["of", 1], ["10", 3], ["9", 3], ["formally", 4], ["let", 4], ["your", 4], ["answer", 1], ["be", 1], ["a", 1], ["and", 1], ["the", 1], ["jury", 0], ["s", 0], ["answer", 0], ["be", 0], ["b", 0], ["your", 0], ["answer", 0], ["will", 0], ["be", 0], ["considered", 0], ["correct", 0], ["if", 0], ["frac", 0], ["a", 0], ["b", 0], ["operatorname", 0], ["max", 0], ["1", 0], ["b", 0], ["leq", 0], ["10", 0], ["9", 0], ["examples", 0], ["input", 0], ["2", 0], ["0", 0], ["40", 0], ["100", 0], ["100", 0], ["60", 0], ["0", 0], ["40", 0], ["40", 0], ["0", 0], ["60", 0], ["0", 0], ["45", 0], ["0", 0], ["60", 0], ["55", 0], ["0", 0], ["output", 0], ["1", 0], ["75", 0], ["input", 0], ["3", 0], ["0", 3], ["0", 7], ["100", 3], ["0", 1], ["100", 1], ["0", 1], ["0", 1], ["0", 1], ["100", 1], ["0", 1], ["100", 2], ["0", 2], ["0", 1], ["0", 1], ["100", 1], ["100", 2], ["0", 2], ["0", 1], ["0", 1], ["100", 1], ["100", 1], ["0", 1], ["0", 1], ["0", 1], ["100", 1], ["100", 1], ["0", 1], ["0", 1], ["0", 1], ["0", 1], ["100", 1], ["100", 1], ["0", 2], ["100", 1], ["0", 1], ["100", 1], ["0", 1], ["0", 1], ["100", 1], ["0", 1], ["100", 1], ["100", 1], ["100", 1], ["100", 1], ["100", 1], ["0", 1], ["0", 1], ["0", 1], ["100", 1], ["0", 1], ["100", 1], ["0", 1], ["0", 0], ["100", 0], ["0", 0], ["0", 0], ["100", 0], ["0", 0], ["100", 0], ["0", 0], ["100", 0], ["100", 0], ["100", 0], ["0", 0], ["output", 0], ["12", 0], ["input", 0], ["2", 0], ["0", 0], ["21", 0], ["41", 0], ["26", 0], ["79", 0], ["0", 0], ["97", 0], ["33", 0], ["59", 0], ["3", 0], ["0", 0], ["91", 0], ["74", 0], ["67", 0], ["9", 0], ["0", 0], ["output", 0], ["3", 0], ["141592", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["example", 1], ["you", 1], ["should", 1], ["predict", 1], ["teams", 1], ["1", 1], ["and", 1], ["4", 1], ["to", 1], ["win", 1], ["in", 1], ["round", 1], ["1", 1], ["and", 1], ["team", 1], ["1", 1], ["to", 1], ["win", 1], ["in", 1], ["round", 1], ["2", 1], ["recall", 1], ["that", 1], ["the", 1], ["winner", 1], ["you", 1], ["predict", 1], ["in", 1], ["round", 0], ["2", 0], ["must", 0], ["also", 0], ["be", 0], ["predicted", 0], ["as", 0], ["a", 0], ["winner", 0], ["in", 0], ["round", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6637323943661971, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6491658283031522, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8362068965517241, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8327586206896551, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6637323943661971, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6491658283031522, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8362068965517241, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8327586206896551, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["functools", 0], ["n", 0], ["int", 0], ["input", 0], ["props", 0], ["def", 0], ["preproc", 0], ["a", 0], ["return", 0], ["float", 0], ["a", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["pow", 0], ["2", 0], ["n", 0], ["props", 0], ["append", 0], ["list", 0], ["map", 0], ["preproc", 0], ["input", 0], ["split", 0], ["wining", 0], ["props", 0], ["list", 0], ["of", 0], ["lists", 0], ["first", 0], ["index", 0], ["number", 0], ["of", 0], ["round", 0], ["second", 0], ["num", 0], ["of", 0], ["team", 0], ["value", 0], ["prop", 0], ["of", 0], ["wining", 0], ["wining", 0], ["props", 0], ["first", 0], ["round", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["2", 0], ["n", 0], ["2", 0], ["i", 0], ["and", 0], ["i", 0], ["1", 0], ["teams", 0], ["playing", 0], ["wining", 0], ["prop", 0], ["for", 0], ["i", 0], ["props", 0], ["i", 0], ["i", 0], ["1", 0], ["wining", 0], ["props", 0], ["first", 0], ["round", 0], ["append", 0], ["wining", 0], ["prop", 0], ["for", 0], ["i", 0], ["wining", 0], ["props", 0], ["first", 0], ["round", 0], ["append", 0], ["1", 0], ["wining", 0], ["prop", 0], ["for", 0], ["i", 0], ["wining", 0], ["props", 0], ["append", 0], ["wining", 0], ["props", 0], ["first", 0], ["round", 0], ["assert", 0], ["len", 0], ["wining", 0], ["props", 0], ["first", 0], ["round", 0], ["len", 0], ["props", 0], ["for", 0], ["round", 0], ["num", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["calculate", 0], ["propabilitys", 0], ["for", 0], ["winning", 0], ["in", 0], ["i", 0], ["round", 0], ["for", 0], ["each", 0], ["team", 0], ["prop", 0], ["of", 0], ["winning", 0], ["in", 0], ["i", 0], ["round", 0], ["prop", 0], ["of", 0], ["winning", 0], ["prev", 0], ["round", 0], ["mo", 0], ["of", 0], ["win", 0], ["this", 0], ["one", 0], ["mo", 0], ["win", 0], ["this", 0], ["for", 0], ["each", 0], ["team", 0], ["we", 0], ["can", 0], ["meet", 0], ["prop", 0], ["of", 0], ["them", 0], ["wining", 0], ["prev", 0], ["prop", 0], ["we", 0], ["win", 0], ["them", 0], ["each", 0], ["team", 0], ["we", 0], ["can", 0], ["meet", 0], ["on", 0], ["round", 0], ["i", 0], ["all", 0], ["teems", 0], ["2", 0], ["i", 0], ["we", 0], ["2", 0], ["i", 0], ["this", 0], ["round", 0], ["wining", 0], ["props", 0], ["for", 0], ["team", 0], ["num", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["t", 0], ["team", 0], ["num", 0], ["2", 0], ["round", 0], ["num", 0], ["2", 0], ["round", 0], ["num", 0], ["teams", 0], ["we", 0], ["meet", 0], ["this", 0], ["round", 0], ["t", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["2", 0], ["round", 0], ["num", 0], ["t", 0], ["team", 0], ["num", 0], ["2", 0], ["round", 0], ["num", 0], ["1", 0], ["2", 0], ["round", 0], ["num", 0], ["1", 0], ["teams", 0], ["we", 0], ["meet", 0], ["prev", 0], ["round", 0], ["t", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["2", 0], ["round", 0], ["num", 0], ["1", 0], ["for", 0], ["tt", 0], ["in", 0], ["teams", 0], ["we", 0], ["meet", 0], ["prev", 0], ["round", 0], ["teams", 0], ["we", 0], ["meet", 0], ["this", 0], ["round", 0], ["remove", 0], ["tt", 0], ["this", 0], ["team", 0], ["wining", 0], ["props", 0], ["wining", 0], ["props", 0], ["round", 0], ["num", 0], ["2", 0], ["team", 0], ["num", 0], ["2", 0], ["cause", 0], ["numeration", 0], ["chances", 0], ["win", 0], ["i", 0], ["team", 0], ["for", 0], ["tm", 0], ["in", 0], ["teams", 0], ["we", 0], ["meet", 0], ["this", 0], ["round", 0], ["chances", 0], ["we", 0], ["meet", 0], ["them", 0], ["chances", 0], ["we", 0], ["win", 0], ["chances", 0], ["win", 0], ["i", 0], ["team", 0], ["append", 0], ["wining", 0], ["props", 0], ["round", 0], ["num", 0], ["2", 0], ["tm", 0], ["props", 0], ["team", 0], ["num", 0], ["tm", 0], ["mo", 0], ["win", 0], ["this", 0], ["round", 0], ["sum", 0], ["chances", 0], ["win", 0], ["i", 0], ["team", 0], ["this", 0], ["team", 0], ["wining", 0], ["props", 0], ["mo", 0], ["win", 0], ["this", 0], ["round", 0], ["this", 0], ["round", 0], ["wining", 0], ["props", 0], ["append", 0], ["this", 0], ["team", 0], ["wining", 0], ["props", 0], ["assert", 0], ["0", 0], ["99", 0], ["sum", 0], ["this", 0], ["round", 0], ["wining", 0], ["props", 0], ["1", 0], ["01", 0], ["wining", 0], ["props", 0], ["append", 0], ["this", 0], ["round", 0], ["wining", 0], ["props", 0], ["now", 0], ["we", 0], ["got", 0], ["props", 0], ["of", 0], ["each", 0], ["win", 0], ["on", 0], ["each", 0], ["round", 0], ["lets", 0], ["bet", 0], ["on", 0], ["most", 0], ["propable", 0], ["winer", 0], ["and", 0], ["calculate", 0], ["revenue", 0], ["from", 0], ["left", 0], ["to", 0], ["right", 0], ["1", 0], ["is", 0], ["playing", 0], ["functools", 0], ["lru", 0], ["cache", 0], ["maxsize", 0], ["none", 0], ["def", 0], ["revenue", 0], ["round", 0], ["num", 0], ["teams", 0], ["left", 0], ["teams", 0], ["right", 0], ["winner", 0], ["1", 0], ["split", 0], ["teams", 0], ["left", 0], ["teams", 0], ["right", 0], ["2", 0], ["let", 0], ["the", 0], ["strongest", 0], ["team", 0], ["win", 0], ["we", 0], ["bet", 0], ["and", 0], ["calculate", 0], ["to", 0], ["the", 0], ["bottom", 0], ["if", 0], ["round", 0], ["num", 0], ["1", 0], ["return", 0], ["wining", 0], ["props", 0], ["0", 0], ["winner", 0], ["if", 0], ["winner", 0], ["1", 0], ["else", 0], ["max", 0], ["wining", 0], ["props", 0], ["0", 0], ["teams", 0], ["left", 0], ["teams", 0], ["right", 0], ["if", 0], ["winner", 0], ["1", 0], ["results", 0], ["for", 0], ["winner", 0], ["in", 0], ["range", 0], ["teams", 0], ["left", 0], ["teams", 0], ["right", 0], ["winner", 0], ["prop", 0], ["wining", 0], ["props", 0], ["round", 0], ["num", 0], ["1", 0], ["winner", 0], ["if", 0], ["winner", 0], ["split", 0], ["res", 0], ["sum", 0], ["revenue", 0], ["round", 0], ["num", 0], ["1", 0], ["teams", 0], ["left", 0], ["split", 0], ["revenue", 0], ["round", 0], ["num", 0], ["1", 0], ["split", 0], ["teams", 0], ["right", 0], ["winner", 0], ["winner", 0], ["prop", 0], ["2", 0], ["round", 0], ["num", 0], ["1", 0], ["else", 0], ["res", 0], ["sum", 0], ["revenue", 0], ["round", 0], ["num", 0], ["1", 0], ["teams", 0], ["left", 0], ["split", 0], ["winner", 0], ["revenue", 0], ["round", 0], ["num", 0], ["1", 0], ["split", 0], ["teams", 0], ["right", 0], ["winner", 0], ["prop", 0], ["2", 0], ["round", 0], ["num", 0], ["1", 0], ["results", 0], ["append", 0], ["res", 0], ["return", 0], ["max", 0], ["results", 0], ["else", 0], ["winner", 0], ["prop", 0], ["wining", 0], ["props", 0], ["round", 0], ["num", 0], ["1", 0], ["winner", 0], ["if", 0], ["winner", 0], ["split", 0], ["res", 0], ["sum", 0], ["revenue", 0], ["round", 0], ["num", 0], ["1", 0], ["teams", 0], ["left", 0], ["split", 0], ["revenue", 0], ["round", 0], ["num", 0], ["1", 0], ["split", 0], ["teams", 0], ["right", 0], ["winner", 0], ["winner", 0], ["prop", 0], ["2", 0], ["round", 0], ["num", 0], ["1", 0], ["else", 0], ["res", 0], ["sum", 0], ["revenue", 0], ["round", 0], ["num", 0], ["1", 0], ["teams", 0], ["left", 0], ["split", 0], ["winner", 0], ["revenue", 0], ["round", 0], ["num", 0], ["1", 0], ["split", 0], ["teams", 0], ["right", 0], ["winner", 0], ["prop", 0], ["2", 0], ["round", 0], ["num", 0], ["1", 0], ["return", 0], ["res", 0], ["print", 0], ["revenue", 0], ["n", 0], ["0", 0], ["2", 0], ["n", 0], ["n", 0], ["int", 0], ["input", 0], ["m", 0], ["1", 0], ["n", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["x", 0], ["1", 0], ["m", 0], ["0", 0], ["m", 0], ["v", 0], ["y", 0], ["u", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["1", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["s", 0], ["d", 0], ["j", 0], ["d", 0], ["1", 0], ["v", 0], ["j", 0], ["u", 0], ["j", 0], ["sum", 0], ["u", 0], ["k", 0], ["p", 0], ["j", 0], ["k", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["s", 0], ["s", 0], ["d", 0], ["100", 0], ["y", 0], ["j", 0], ["max", 0], ["x", 0], ["s", 0], ["s", 0], ["d", 0], ["x", 0], ["j", 0], ["v", 0], ["j", 0], ["d", 0], ["u", 0], ["v", 0], ["x", 0], ["y", 0], ["v", 0], ["u", 0], ["y", 0], ["x", 0], ["print", 0], ["max", 0], ["x", 0], ["n", 0], ["int", 0], ["input", 0], ["m", 0], ["1", 0], ["n", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["x", 0], ["1", 0], ["m", 0], ["0", 0], ["m", 0], ["v", 0], ["y", 0], ["u", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["1", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["s", 0], ["d", 0], ["j", 0], ["d", 0], ["1", 0], ["v", 0], ["j", 0], ["u", 0], ["j", 0], ["sum", 0], ["u", 0], ["k", 0], ["p", 0], ["j", 0], ["k", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["s", 0], ["s", 0], ["d", 0], ["100", 0], ["y", 0], ["j", 0], ["max", 0], ["x", 0], ["s", 0], ["s", 0], ["d", 0], ["x", 0], ["j", 0], ["v", 0], ["j", 0], ["d", 0], ["u", 0], ["v", 0], ["x", 0], ["y", 0], ["v", 0], ["u", 0], ["y", 0], ["x", 0], ["print", 0], ["max", 0], ["x", 0], ["n", 0], ["int", 0], ["input", 0], ["using", 0], ["the", 0], ["same", 0], ["index", 0], ["i", 0], ["would", 0], ["for", 0], ["a", 0], ["tree", 0], ["m", 0], ["2", 0], ["n", 0], ["points", 0], ["0", 0], ["2", 0], ["m", 0], ["points", 0], ["1", 0], ["2", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["x", 0], ["points", 0], ["i", 0], ["2", 0], ["points", 0], ["2", 0], ["i", 0], ["x", 0], ["points", 0], ["2", 0], ["i", 0], ["1", 0], ["x", 0], ["p", 0], ["int", 0], ["x", 0], ["100", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["state", 0], ["0", 0], ["0", 0], ["64", 0], ["for", 0], ["in", 0], ["range", 0], ["2", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["state", 0], ["m", 0], ["i", 0], ["i", 0], ["1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["reversed", 0], ["range", 0], ["1", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["m", 0], ["x", 0], ["is", 0], ["probability", 0], ["that", 0], ["team", 0], ["j", 0], ["meets", 0], ["team", 0], ["k", 0], ["in", 0], ["match", 0], ["i", 0], ["x", 0], ["state", 0], ["2", 0], ["i", 0], ["j", 0], ["state", 0], ["2", 0], ["i", 0], ["1", 0], ["k", 0], ["state", 0], ["i", 0], ["j", 0], ["p", 0], ["j", 0], ["k", 0], ["x", 0], ["state", 0], ["i", 0], ["k", 0], ["p", 0], ["k", 0], ["j", 0], ["x", 0], ["score", 0], ["0", 0], ["64", 0], ["for", 0], ["in", 0], ["range", 0], ["2", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["reversed", 0], ["range", 0], ["1", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["m", 0], ["score", 0], ["i", 0], ["j", 0], ["max", 0], ["score", 0], ["i", 0], ["j", 0], ["score", 0], ["2", 0], ["i", 0], ["j", 0], ["state", 0], ["i", 0], ["j", 0], ["points", 0], ["i", 0], ["score", 0], ["2", 0], ["i", 0], ["1", 0], ["k", 0], ["score", 0], ["i", 0], ["j", 0], ["max", 0], ["score", 0], ["i", 0], ["j", 0], ["score", 0], ["2", 0], ["i", 0], ["1", 0], ["j", 0], ["state", 0], ["i", 0], ["j", 0], ["points", 0], ["i", 0], ["score", 0], ["2", 0], ["i", 0], ["k", 0], ["print", 0], ["repr", 0], ["max", 0], ["score", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nTicket to Ride1 is a board game for up to $5$ players. The goal of the game is to set up train lines (and to thwart the opponents’ attempts at setting up their train lines). At the beginning of play, each player is assigned four train lines. A player may choose to discard as many of these four assignments as she likes. Each assignment has a score, corresponding to its difficulty (so, typically, a train line between e.g. Stockholm and Tokyo would be worth more than a train line between e.g. Stockholm and Utrecht). At the end of the game, each player gets points for the assignments that they have successfully completed, and penalty points for the assignments that they have failed to complete. \n\nAn assignment consists of a pair of cities that are to be connected by a series of shorter railway routes. A route can be claimed (for a certain cost associated with the route), but things are complicated by the fact that there is only a limited number of routes, and once a player claims a route, none of the other players can claim it. A player has successfully set up a train line between two cities if there is a path between the two cities using only routes that have been claimed by this player. For simplicity, we will ignore all additional aspects of the game (including the actual process of claiming routes and additional ways to score points).\n\nFor instance, if your assignment is to connect Stockholm and Amsterdam in the Figure above, you would probably want to claim the routes between Stockholm and Copenhagen, and between Copenhagen and Amsterdam. But if another player manages to claim the route between Copenhagen and Stockholm before you, your train line would have to use some other routes, e.g. by going to Copenhagen via Oslo.\n\nIn this problem, we will consider the rather bold strategy of trying to complete all four assignments (typically, this will be quite hard). As a preliminary assessment of the difficulty of achieving this, we would like to calculate the minimum cost of setting up all four lines assuming that none of the other players interfere with our plans. Your job is to write a program to determine this minimum cost.\n\n-----Input-----\nThe input starts with two integers $1 \\le n \\le 40$, $0 \\le m \\le 1000$, giving the number of cities and railway routes in the map, respectively. Then follow $n$ lines, giving the names of the $n$ cities. City names are at most $20$ characters long and consist solely of lower case letters (’a’-’z’).\n\nAfter this follow $m$ lines, each containing the names of two different cities and an integer $1 \\le c \\le 10000$, indicating that there is a railway route with cost $c$ between the two cities. Note that there may be several railway routes between the same pair of cities. You may assume that it is always possible to set up a train line from any city to any other city.\n\nFinally, there are four lines, each containing the names of two cities, giving the four train line assignments.\n\n-----Output-----\nOutput a single line containing a single integer, the minimum possible cost to set up all four train lines.\n\n-----Examples-----\nSample Input:\n10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\nreykjavik dublin\nbrussels helsinki\nSample Output:\n3907\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9257"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9257", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["ticket", 6], ["to", 6], ["ride1", 6], ["is", 12], ["a", 12], ["board", 12], ["game", 12], ["for", 12], ["up", 12], ["to", 12], ["5", 12], ["players", 12], ["the", 12], ["goal", 12], ["of", 12], ["the", 10], ["game", 10], ["is", 10], ["to", 10], ["set", 10], ["up", 10], ["train", 10], ["lines", 10], ["and", 10], ["to", 10], ["thwart", 10], ["the", 10], ["opponents’", 10], ["attempts", 12], ["at", 12], ["setting", 12], ["up", 12], ["their", 12], ["train", 12], ["lines", 12], ["at", 12], ["the", 12], ["beginning", 12], ["of", 12], ["play", 12], ["each", 12], ["player", 12], ["is", 12], ["assigned", 12], ["four", 12], ["train", 12], ["lines", 12], ["a", 12], ["player", 12], ["may", 12], ["choose", 12], ["to", 12], ["discard", 12], ["as", 12], ["many", 12], ["of", 12], ["these", 12], ["four", 12], ["assignments", 12], ["as", 12], ["she", 12], ["likes", 12], ["each", 12], ["assignment", 12], ["has", 12], ["a", 12], ["score", 12], ["corresponding", 12], ["to", 12], ["its", 12], ["difficulty", 12], ["so", 12], ["typically", 12], ["a", 12], ["train", 12], ["line", 12], ["between", 12], ["e", 12], ["g", 12], ["stockholm", 12], ["and", 12], ["tokyo", 12], ["would", 12], ["be", 12], ["worth", 12], ["more", 12], ["than", 12], ["a", 12], ["train", 12], ["line", 12], ["between", 12], ["e", 12], ["g", 12], ["stockholm", 12], ["and", 12], ["utrecht", 12], ["at", 12], ["the", 12], ["end", 12], ["of", 12], ["the", 12], ["game", 12], ["each", 12], ["player", 12], ["gets", 12], ["points", 12], ["for", 12], ["the", 12], ["assignments", 12], ["that", 12], ["they", 12], ["have", 12], ["successfully", 12], ["completed", 12], ["and", 12], ["penalty", 12], ["points", 12], ["for", 12], ["the", 12], ["assignments", 12], ["that", 12], ["they", 12], ["have", 12], ["failed", 12], ["to", 12], ["complete", 12], ["an", 12], ["assignment", 12], ["consists", 12], ["of", 12], ["a", 12], ["pair", 12], ["of", 12], ["cities", 12], ["that", 12], ["are", 12], ["to", 12], ["be", 12], ["connected", 12], ["by", 12], ["a", 12], ["series", 12], ["of", 12], ["shorter", 12], ["railway", 12], ["routes", 12], ["a", 12], ["route", 12], ["can", 12], ["be", 12], ["claimed", 12], ["for", 12], ["a", 12], ["certain", 12], ["cost", 12], ["associated", 12], ["with", 12], ["the", 12], ["route", 12], ["but", 12], ["things", 12], ["are", 12], ["complicated", 12], ["by", 12], ["the", 12], ["fact", 12], ["that", 12], ["there", 12], ["is", 12], ["only", 12], ["a", 12], ["limited", 12], ["number", 12], ["of", 12], ["routes", 12], ["and", 12], ["once", 12], ["a", 12], ["player", 12], ["claims", 12], ["a", 12], ["route", 12], ["none", 12], ["of", 12], ["the", 12], ["other", 12], ["players", 12], ["can", 12], ["claim", 12], ["it", 12], ["a", 12], ["player", 12], ["has", 12], ["successfully", 12], ["set", 12], ["up", 12], ["a", 12], ["train", 12], ["line", 12], ["between", 12], ["two", 12], ["cities", 12], ["if", 12], ["there", 12], ["is", 12], ["a", 12], ["path", 12], ["between", 12], ["the", 12], ["two", 12], ["cities", 12], ["using", 12], ["only", 12], ["routes", 12], ["that", 12], ["have", 12], ["been", 12], ["claimed", 12], ["by", 12], ["this", 12], ["player", 12], ["for", 12], ["simplicity", 12], ["we", 12], ["will", 12], ["ignore", 12], ["all", 12], ["additional", 12], ["aspects", 12], ["of", 12], ["the", 12], ["game", 12], ["including", 12], ["the", 12], ["actual", 12], ["process", 12], ["of", 12], ["claiming", 12], ["routes", 12], ["and", 12], ["additional", 12], ["ways", 12], ["to", 12], ["score", 12], ["points", 12], ["for", 12], ["instance", 12], ["if", 12], ["your", 12], ["assignment", 12], ["is", 12], ["to", 12], ["connect", 12], ["stockholm", 12], ["and", 12], ["amsterdam", 12], ["in", 12], ["the", 12], ["figure", 12], ["above", 12], ["you", 12], ["would", 12], ["probably", 12], ["want", 12], ["to", 12], ["claim", 12], ["the", 12], ["routes", 12], ["between", 12], ["stockholm", 12], ["and", 12], ["copenhagen", 12], ["and", 12], ["between", 12], ["copenhagen", 12], ["and", 12], ["amsterdam", 12], ["but", 12], ["if", 12], ["another", 12], ["player", 12], ["manages", 12], ["to", 12], ["claim", 12], ["the", 12], ["route", 12], ["between", 12], ["copenhagen", 12], ["and", 12], ["stockholm", 12], ["before", 12], ["you", 12], ["your", 12], ["train", 12], ["line", 12], ["would", 12], ["have", 12], ["to", 12], ["use", 12], ["some", 12], ["other", 12], ["routes", 12], ["e", 12], ["g", 12], ["by", 12], ["going", 12], ["to", 12], ["copenhagen", 12], ["via", 12], ["oslo", 12], ["in", 12], ["this", 12], ["problem", 12], ["we", 12], ["will", 12], ["consider", 12], ["the", 12], ["rather", 12], ["bold", 12], ["strategy", 12], ["of", 12], ["trying", 12], ["to", 12], ["complete", 12], ["all", 12], ["four", 12], ["assignments", 12], ["typically", 12], ["this", 12], ["will", 12], ["be", 12], ["quite", 12], ["hard", 12], ["as", 12], ["a", 12], ["preliminary", 12], ["assessment", 12], ["of", 12], ["the", 12], ["difficulty", 12], ["of", 12], ["achieving", 12], ["this", 12], ["we", 12], ["would", 12], ["like", 12], ["to", 12], ["calculate", 12], ["the", 12], ["minimum", 12], ["cost", 12], ["of", 12], ["setting", 12], ["up", 12], ["all", 12], ["four", 12], ["lines", 12], ["assuming", 12], ["that", 12], ["none", 12], ["of", 12], ["the", 12], ["other", 12], ["players", 12], ["interfere", 12], ["with", 12], ["our", 12], ["plans", 12], ["your", 0], ["job", 0], ["is", 0], ["to", 0], ["write", 0], ["a", 0], ["program", 0], ["to", 0], ["determine", 0], ["this", 0], ["minimum", 0], ["cost", 0], ["input", 0], ["the", 6], ["input", 6], ["starts", 6], ["with", 0], ["two", 0], ["integers", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["40", 0], ["0", 0], ["le", 0], ["m", 0], ["le", 0], ["1000", 0], ["giving", 12], ["the", 12], ["number", 12], ["of", 12], ["cities", 12], ["and", 12], ["railway", 12], ["routes", 12], ["in", 12], ["the", 12], ["map", 12], ["respectively", 12], ["then", 12], ["follow", 12], ["n", 12], ["lines", 12], ["giving", 12], ["the", 12], ["names", 12], ["of", 12], ["the", 12], ["n", 12], ["cities", 12], ["city", 12], ["names", 12], ["are", 12], ["at", 8], ["most", 8], ["20", 8], ["characters", 8], ["long", 8], ["and", 8], ["consist", 8], ["solely", 8], ["of", 8], ["lower", 8], ["case", 8], ["letters", 8], ["’a’", 8], ["’z’", 8], ["after", 12], ["this", 12], ["follow", 12], ["m", 12], ["lines", 12], ["each", 6], ["containing", 6], ["the", 6], ["names", 0], ["of", 0], ["two", 0], ["different", 0], ["cities", 0], ["and", 0], ["an", 0], ["integer", 0], ["1", 0], ["le", 0], ["c", 0], ["le", 0], ["10000", 0], ["indicating", 12], ["that", 12], ["there", 12], ["is", 12], ["a", 12], ["railway", 12], ["route", 12], ["with", 12], ["cost", 12], ["c", 12], ["between", 12], ["the", 12], ["two", 12], ["cities", 12], ["note", 12], ["that", 12], ["there", 12], ["may", 12], ["be", 12], ["several", 12], ["railway", 12], ["routes", 12], ["between", 12], ["the", 12], ["same", 12], ["pair", 12], ["of", 12], ["cities", 12], ["you", 12], ["may", 12], ["assume", 12], ["that", 12], ["it", 12], ["is", 12], ["always", 12], ["possible", 12], ["to", 12], ["set", 12], ["up", 12], ["a", 6], ["train", 6], ["line", 6], ["from", 6], ["any", 6], ["city", 6], ["to", 6], ["any", 6], ["other", 6], ["city", 6], ["finally", 6], ["there", 6], ["are", 6], ["four", 12], ["lines", 12], ["each", 12], ["containing", 6], ["the", 0], ["names", 0], ["of", 0], ["two", 0], ["cities", 0], ["giving", 0], ["the", 0], ["four", 0], ["train", 0], ["line", 0], ["assignments", 0], ["output", 0], ["output", 12], ["a", 12], ["single", 12], ["line", 12], ["containing", 12], ["a", 12], ["single", 12], ["integer", 0], ["the", 0], ["minimum", 0], ["possible", 0], ["cost", 0], ["to", 0], ["set", 0], ["up", 0], ["all", 0], ["four", 0], ["train", 0], ["lines", 0], ["examples", 0], ["sample", 0], ["input", 0], ["10", 0], ["15", 0], ["stockholm", 0], ["amsterdam", 0], ["london", 0], ["berlin", 0], ["copenhagen", 0], ["oslo", 0], ["helsinki", 0], ["dublin", 0], ["reykjavik", 0], ["brussels", 0], ["oslo", 12], ["stockholm", 12], ["415", 12], ["stockholm", 12], ["helsinki", 12], ["396", 12], ["oslo", 12], ["london", 12], ["1153", 12], ["oslo", 12], ["copenhagen", 12], ["485", 12], ["stockholm", 12], ["copenhagen", 12], ["522", 12], ["copenhagen", 12], ["berlin", 12], ["354", 12], ["copenhagen", 12], ["amsterdam", 12], ["622", 12], ["helsinki", 12], ["berlin", 12], ["1107", 12], ["london", 12], ["amsterdam", 12], ["356", 12], ["berlin", 12], ["amsterdam", 12], ["575", 12], ["london", 12], ["dublin", 12], ["463", 12], ["reykjavik", 12], ["dublin", 12], ["1498", 12], ["reykjavik", 12], ["oslo", 12], ["1748", 12], ["london", 12], ["brussels", 12], ["318", 0], ["brussels", 0], ["amsterdam", 0], ["173", 0], ["stockholm", 0], ["amsterdam", 0], ["oslo", 0], ["london", 0], ["reykjavik", 0], ["dublin", 0], ["brussels", 0], ["helsinki", 0], ["sample", 0], ["output", 0], ["3907", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8504065040650407, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.07528455284552855, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.94896331738437, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.14121477937267318, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08130081300813008, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.011192411924119251, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7607655502392344, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.12553163211057944, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThere are n workers in a company, each of them has a unique id from 1 to n. Exaclty one of them is a chief, his id is s. Each worker except the chief has exactly one immediate superior.\n\nThere was a request to each of the workers to tell how how many superiors (not only immediate). Worker's superiors are his immediate superior, the immediate superior of the his immediate superior, and so on. For example, if there are three workers in the company, from which the first is the chief, the second worker's immediate superior is the first, the third worker's immediate superior is the second, then the third worker has two superiors, one of them is immediate and one not immediate. The chief is a superior to all the workers except himself.\n\nSome of the workers were in a hurry and made a mistake. You are to find the minimum number of workers that could make a mistake.\n\n\n-----Input-----\n\nThe first line contains two positive integers n and s (1 ≤ n ≤ 2·10^5, 1 ≤ s ≤ n) — the number of workers and the id of the chief.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ n - 1), where a_{i} is the number of superiors (not only immediate) the worker with id i reported about.\n\n\n-----Output-----\n\nPrint the minimum number of workers that could make a mistake.\n\n\n-----Examples-----\nInput\n3 2\n2 0 2\n\nOutput\n1\n\nInput\n5 3\n1 0 0 4 1\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example it is possible that only the first worker made a mistake. Then:   the immediate superior of the first worker is the second worker,  the immediate superior of the third worker is the first worker,  the second worker is the chief.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n,s = map(int,input().split())\nA = list(map(int,input().split()))\nif A[s-1] != 0:\n\tper = 1\n\tA[s-1] = 0\nelse:\n\tper = 0\nA.sort()\nmaxs = max(A)\nans = [0] * (maxs + 1)\nanswer = maxs + 1\no = -1\nfor j in range(n):\n\tif A[j] == 0:\n\t\to += 1\n\t\n\tif ans[A[j]] == 0:\n\t\tans[A[j]] = 1\n\t\tanswer -= 1\nan = per + max(o, answer)\n\nfor j in range(n-2,-1,-1):\n\t\n\tfor t in range(A[j+1]-1, A[j] -1,-1):\n\t\tif ans[t] == 0:\n\t\t\tanswer -= 1\n\t\n\tan = min(an, per + max(answer,o+n - j - 1))\nprint(an)\n", "\"\"\" This is a solution to the problem Subordinates on codeforces.com\n    \n\tThere is a DAG with n nodes, pointing towards the root, without further constraints. \n\tGiven: for each node, a number signifying the count of (direct and indirect) predecessors, and the ID of root s.\n\tSome of these counts might be wrong. Give the minimum amount of wrong counts.\n\t\n\tFor details, see\n\thttp://codeforces.com/problemset/problem/729/E\n\"\"\"\n\n#Idea: count = level of DAG. Check constraints: root has 0 predecessors, level 0 has only one count, each level to the last has be > 0\n\nfrom sys import stdin\n\n#lines = open(\"input.txt\", 'r').readlines()\nlines = stdin.readlines()\n\nn, s = map(int, lines[0].split())\ncounts = list(map(int, lines[1].split()))\n\t\ntotalwrong = 0\nif counts[s-1] > 0: # root has to be 0\n\ttotalwrong += 1\n\tcounts[s-1] = 0\n\t \nmaxlevel = max(counts)    \n# count number of nodes on levels\nlevelcount = [0] * (max(counts) + 1)\n\nfor c in counts:\n\tlevelcount[c] += 1\n\t\ncurwrong = levelcount[0] - 1 # only one root\nlevelcount[0] = 1\ntotalwrong += curwrong \n\ncurlevel = 0\nwhile curlevel <= maxlevel:\n\tlc = levelcount[curlevel]\n\tif lc == 0:         # a mistake\n\t\tif curwrong > 0: # still mistakes available, just use them to fill\n\t\t\tcurwrong -= 1\n\t\t\tlevelcount[curlevel] = 1\n\t\telse: # else fill from last level\n\t\t\tlevelcount[maxlevel] -= 1\n\t\t\tlevelcount[curlevel] = 1        \n\t\t\ttotalwrong += 1\n\t\t\twhile levelcount[maxlevel] == 0:\n\t\t\t\tmaxlevel -= 1       # as levelcount[curlevel] = 1, this aborts at some point\n\tcurlevel += 1\nprint(totalwrong)\n", "f = lambda: map(int, input().split())\nn, s = f()\nc = [0] * n\nt = list(f())\nfor i in t: c[i] += 1\nk = t[s - 1]\nc[k] -= 1\nd = c[0]\nc += [d]\nd += k > 0\ni, j = 1, n\nwhile i < j:\n\tif c[i]: i += 1\n\telif c[j]:\n\t\tc[j] -= 1\n\t\ti += 1\n\t\td += j < n\n\telse: j -= 1\nprint(d)\n", "[n, s] = [int(x) for x in input().split()]\n\na = [int(x) for x in input().split()]\n\nmistakes = 0\n\nmistakes += (a[s-1] is not 0)\na[s - 1] = 0\n\nnumSuperiors = [0]*(2*100000+100)\n\nfor superiors in a:\n\tnumSuperiors[superiors] += 1\n\ncachedMistakes = 0\n\nwhile numSuperiors[0] != 1:\n\tcachedMistakes += 1\n\tnumSuperiors[0] -= 1\n\nrightIndex = len(numSuperiors) - 1\nleftIndex = 0\nwhile True:\n\twhile True:\n\t\tif numSuperiors[leftIndex] == 0 and cachedMistakes != 0:\n\t\t\tnumSuperiors[leftIndex] += 1\n\t\t\tcachedMistakes -= 1\n\t\t\tmistakes += 1\n\t\tif numSuperiors[leftIndex] == 0:\n\t\t\tbreak\n\t\tleftIndex += 1\n\twhile numSuperiors[rightIndex] == 0:\n\t\trightIndex -= 1\n\tif leftIndex >= rightIndex:\n\t\tbreak\n\tnumSuperiors[rightIndex] -= 1\n\tcachedMistakes += 1\n\nprint(mistakes)\n", "n, root = map(int, input().split())\na = list(map(int, input().split()))\n\ndef push(d, x, val):\n\tif x not in d:\n\t\td[x] = 0\n\td[x]+=val\n\t\n\tif d[x]==0:\n\t\tdel d[x]\n\t\nd = {}\nfor x in a:\n\tpush(d, x, 1)\n\nmin_  =  0\nroot -=  1\ninf   = 9999999\n\nif a[root] != 0:\n\tmin_+=1\n\tpush(d, a[root], -1)\n\tpush(d, 0, 1)\n\t\nif 0 in d and d[0] > 1:\n\tadd  = d[0] - 1\n\tmin_+=add\n\tpush(d, inf, add)\n\td[0] = 1\n\t\nS   = [[val, num] for val, num in sorted(d.items(), key = lambda x:x[0])] \n#print(min_, S)\ncur = -1\ni   =  0\n\nwhile i < len(S):\n\tremain = S[i][0] - (cur+1)\n\t\n\twhile remain > 0:\n\t\tval, num = S[-1]\n\t\t\n\t\tif val == S[i][0]:\n\t\t\tif val != inf:\n\t\t\t\tmin_ += min(remain, num)\n\t\t\tbreak   \n\t\telse:\n\t\t\tadd     = min(num, remain)\n\t\t\tremain -= add\n\t\t\t\n\t\t\tif val != inf:\n\t\t\t\tmin_   += add\n\t\t\t\n\t\t\tif num == add:\n\t\t\t\tS.pop()\n\t\t\telse:    \n\t\t\t\tS[-1][1] -= add\n\t\t\n\tcur=S[i][0]\n\ti+=1\n\t\nprint(min_)\n"], "id": "id8348"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8348", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["there", 4], ["are", 4], ["n", 4], ["workers", 4], ["in", 4], ["a", 4], ["company", 4], ["each", 4], ["of", 4], ["them", 4], ["has", 4], ["a", 4], ["unique", 4], ["id", 4], ["from", 4], ["1", 4], ["to", 4], ["n", 4], ["exaclty", 4], ["one", 4], ["of", 4], ["them", 4], ["is", 4], ["a", 4], ["chief", 4], ["his", 4], ["id", 4], ["is", 4], ["s", 4], ["each", 4], ["worker", 4], ["except", 4], ["the", 4], ["chief", 4], ["has", 4], ["exactly", 4], ["one", 4], ["immediate", 4], ["superior", 4], ["there", 4], ["was", 4], ["a", 4], ["request", 4], ["to", 4], ["each", 4], ["of", 4], ["the", 4], ["workers", 4], ["to", 4], ["tell", 4], ["how", 4], ["how", 4], ["many", 4], ["superiors", 4], ["not", 4], ["only", 4], ["immediate", 4], ["worker", 4], ["s", 4], ["superiors", 4], ["are", 4], ["his", 4], ["immediate", 4], ["superior", 4], ["the", 4], ["immediate", 4], ["superior", 4], ["of", 4], ["the", 4], ["his", 4], ["immediate", 4], ["superior", 4], ["and", 4], ["so", 4], ["on", 4], ["for", 4], ["example", 4], ["if", 4], ["there", 4], ["are", 4], ["three", 4], ["workers", 4], ["in", 4], ["the", 4], ["company", 4], ["from", 4], ["which", 4], ["the", 4], ["first", 4], ["is", 4], ["the", 4], ["chief", 4], ["the", 4], ["second", 4], ["worker", 4], ["s", 4], ["immediate", 4], ["superior", 4], ["is", 4], ["the", 4], ["first", 4], ["the", 4], ["third", 4], ["worker", 4], ["s", 4], ["immediate", 4], ["superior", 4], ["is", 4], ["the", 4], ["second", 4], ["then", 4], ["the", 4], ["third", 4], ["worker", 4], ["has", 4], ["two", 4], ["superiors", 4], ["one", 4], ["of", 4], ["them", 4], ["is", 4], ["immediate", 4], ["and", 4], ["one", 4], ["not", 4], ["immediate", 4], ["the", 4], ["chief", 4], ["is", 4], ["a", 4], ["superior", 4], ["to", 4], ["all", 4], ["the", 4], ["workers", 4], ["except", 4], ["himself", 4], ["some", 4], ["of", 4], ["the", 4], ["workers", 4], ["were", 4], ["in", 4], ["a", 4], ["hurry", 4], ["and", 4], ["made", 4], ["a", 4], ["mistake", 4], ["you", 4], ["are", 4], ["to", 0], ["find", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["workers", 0], ["that", 0], ["could", 0], ["make", 0], ["a", 0], ["mistake", 0], ["input", 0], ["the", 4], ["first", 4], ["line", 0], ["contains", 0], ["two", 0], ["positive", 0], ["integers", 0], ["n", 0], ["and", 0], ["s", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["2·10", 0], ["5", 0], ["1", 4], ["≤", 4], ["s", 4], ["≤", 4], ["n", 4], ["—", 4], ["the", 4], ["number", 4], ["of", 4], ["workers", 4], ["and", 0], ["the", 0], ["id", 0], ["of", 0], ["the", 0], ["chief", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["0", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["n", 0], ["1", 0], ["where", 0], ["a", 0], ["i", 0], ["is", 4], ["the", 4], ["number", 4], ["of", 0], ["superiors", 0], ["not", 0], ["only", 0], ["immediate", 0], ["the", 0], ["worker", 0], ["with", 0], ["id", 0], ["i", 0], ["reported", 0], ["about", 0], ["output", 0], ["print", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["workers", 0], ["that", 0], ["could", 0], ["make", 0], ["a", 0], ["mistake", 0], ["examples", 0], ["input", 0], ["3", 0], ["2", 0], ["2", 0], ["0", 0], ["2", 0], ["output", 0], ["1", 0], ["input", 0], ["5", 0], ["3", 0], ["1", 0], ["0", 0], ["0", 0], ["4", 0], ["1", 0], ["output", 0], ["2", 0], ["note", 0], ["in", 4], ["the", 4], ["first", 4], ["example", 4], ["it", 4], ["is", 4], ["possible", 4], ["that", 4], ["only", 4], ["the", 4], ["first", 4], ["worker", 4], ["made", 4], ["a", 4], ["mistake", 4], ["then", 4], ["the", 4], ["immediate", 4], ["superior", 4], ["of", 4], ["the", 4], ["first", 4], ["worker", 4], ["is", 4], ["the", 4], ["second", 4], ["worker", 4], ["the", 4], ["immediate", 4], ["superior", 4], ["of", 4], ["the", 4], ["third", 0], ["worker", 0], ["is", 0], ["the", 0], ["first", 0], ["worker", 0], ["the", 0], ["second", 0], ["worker", 0], ["is", 0], ["the", 0], ["chief", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6428571428571429, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.16071428571428573, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.80625, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2015625, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6428571428571429, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.16071428571428573, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.80625, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2015625, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["s", 0], ["1", 0], ["0", 0], ["per", 0], ["1", 0], ["a", 0], ["s", 0], ["1", 0], ["0", 0], ["else", 0], ["per", 0], ["0", 0], ["a", 0], ["sort", 0], ["maxs", 0], ["max", 0], ["a", 0], ["ans", 0], ["0", 0], ["maxs", 0], ["1", 0], ["answer", 0], ["maxs", 0], ["1", 0], ["o", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["0", 0], ["o", 0], ["1", 0], ["if", 0], ["ans", 0], ["a", 0], ["j", 0], ["0", 0], ["ans", 0], ["a", 0], ["j", 0], ["1", 0], ["answer", 0], ["1", 0], ["an", 0], ["per", 0], ["max", 0], ["o", 0], ["answer", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["a", 0], ["j", 0], ["1", 0], ["1", 0], ["a", 0], ["j", 0], ["1", 0], ["1", 0], ["if", 0], ["ans", 0], ["t", 0], ["0", 0], ["answer", 0], ["1", 0], ["an", 0], ["min", 0], ["an", 0], ["per", 0], ["max", 0], ["answer", 0], ["o", 0], ["n", 0], ["j", 0], ["1", 0], ["print", 0], ["an", 0], ["this", 0], ["is", 0], ["a", 0], ["solution", 0], ["to", 0], ["the", 0], ["problem", 0], ["subordinates", 0], ["on", 0], ["codeforces", 0], ["com", 0], ["there", 0], ["is", 0], ["a", 0], ["dag", 0], ["with", 0], ["n", 0], ["nodes", 0], ["pointing", 0], ["towards", 0], ["the", 0], ["root", 0], ["without", 0], ["further", 0], ["constraints", 0], ["given", 0], ["for", 0], ["each", 0], ["node", 0], ["a", 0], ["number", 0], ["signifying", 0], ["the", 0], ["count", 0], ["of", 0], ["direct", 0], ["and", 0], ["indirect", 0], ["predecessors", 0], ["and", 0], ["the", 0], ["id", 0], ["of", 0], ["root", 0], ["s", 0], ["some", 0], ["of", 0], ["these", 0], ["counts", 0], ["might", 0], ["be", 0], ["wrong", 0], ["give", 0], ["the", 0], ["minimum", 0], ["amount", 0], ["of", 0], ["wrong", 0], ["counts", 0], ["for", 0], ["details", 0], ["see", 0], ["http", 0], ["codeforces", 0], ["com", 0], ["problemset", 0], ["problem", 0], ["729", 0], ["e", 0], ["idea", 0], ["count", 0], ["level", 0], ["of", 0], ["dag", 0], ["check", 0], ["constraints", 0], ["root", 0], ["has", 0], ["0", 0], ["predecessors", 0], ["level", 0], ["0", 0], ["has", 0], ["only", 0], ["one", 0], ["count", 0], ["each", 0], ["level", 0], ["to", 0], ["the", 0], ["last", 0], ["has", 0], ["be", 0], ["0", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["lines", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["readlines", 0], ["lines", 0], ["stdin", 0], ["readlines", 0], ["n", 0], ["s", 0], ["map", 0], ["int", 0], ["lines", 0], ["0", 0], ["split", 0], ["counts", 0], ["list", 0], ["map", 0], ["int", 0], ["lines", 0], ["1", 0], ["split", 0], ["totalwrong", 0], ["0", 0], ["if", 0], ["counts", 0], ["s", 0], ["1", 0], ["0", 0], ["root", 0], ["has", 0], ["to", 0], ["be", 0], ["0", 0], ["totalwrong", 0], ["1", 0], ["counts", 0], ["s", 0], ["1", 0], ["0", 0], ["maxlevel", 0], ["max", 0], ["counts", 0], ["count", 0], ["number", 0], ["of", 0], ["nodes", 0], ["on", 0], ["levels", 0], ["levelcount", 0], ["0", 0], ["max", 0], ["counts", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["counts", 0], ["levelcount", 0], ["c", 0], ["1", 0], ["curwrong", 0], ["levelcount", 0], ["0", 0], ["1", 0], ["only", 0], ["one", 0], ["root", 0], ["levelcount", 0], ["0", 0], ["1", 0], ["totalwrong", 0], ["curwrong", 0], ["curlevel", 0], ["0", 0], ["while", 0], ["curlevel", 0], ["maxlevel", 0], ["lc", 0], ["levelcount", 0], ["curlevel", 0], ["if", 0], ["lc", 0], ["0", 0], ["a", 0], ["mistake", 0], ["if", 0], ["curwrong", 0], ["0", 0], ["still", 0], ["mistakes", 0], ["available", 0], ["just", 0], ["use", 0], ["them", 0], ["to", 0], ["fill", 0], ["curwrong", 0], ["1", 0], ["levelcount", 0], ["curlevel", 0], ["1", 0], ["else", 0], ["else", 0], ["fill", 0], ["from", 0], ["last", 0], ["level", 0], ["levelcount", 0], ["maxlevel", 0], ["1", 0], ["levelcount", 0], ["curlevel", 0], ["1", 0], ["totalwrong", 0], ["1", 0], ["while", 0], ["levelcount", 0], ["maxlevel", 0], ["0", 0], ["maxlevel", 0], ["1", 0], ["as", 0], ["levelcount", 0], ["curlevel", 0], ["1", 0], ["this", 0], ["aborts", 0], ["at", 0], ["some", 0], ["point", 0], ["curlevel", 0], ["1", 0], ["print", 0], ["totalwrong", 0], ["f", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["s", 0], ["f", 0], ["c", 0], ["0", 0], ["n", 0], ["t", 0], ["list", 0], ["f", 0], ["for", 0], ["i", 0], ["in", 0], ["t", 0], ["c", 0], ["i", 0], ["1", 0], ["k", 0], ["t", 0], ["s", 0], ["1", 0], ["c", 0], ["k", 0], ["1", 0], ["d", 0], ["c", 0], ["0", 0], ["c", 0], ["d", 0], ["d", 0], ["k", 0], ["0", 0], ["i", 0], ["j", 0], ["1", 0], ["n", 0], ["while", 0], ["i", 0], ["j", 0], ["if", 0], ["c", 0], ["i", 0], ["i", 0], ["1", 0], ["elif", 0], ["c", 0], ["j", 0], ["c", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["d", 0], ["j", 0], ["n", 0], ["else", 0], ["j", 0], ["1", 0], ["print", 0], ["d", 0], ["n", 0], ["s", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["mistakes", 0], ["0", 0], ["mistakes", 0], ["a", 0], ["s", 0], ["1", 0], ["is", 0], ["not", 0], ["0", 0], ["a", 0], ["s", 0], ["1", 0], ["0", 0], ["numsuperiors", 0], ["0", 0], ["2", 0], ["100000", 0], ["100", 0], ["for", 0], ["superiors", 0], ["in", 0], ["a", 0], ["numsuperiors", 0], ["superiors", 0], ["1", 0], ["cachedmistakes", 0], ["0", 0], ["while", 0], ["numsuperiors", 0], ["0", 0], ["1", 0], ["cachedmistakes", 0], ["1", 0], ["numsuperiors", 0], ["0", 0], ["1", 0], ["rightindex", 0], ["len", 0], ["numsuperiors", 0], ["1", 0], ["leftindex", 0], ["0", 0], ["while", 0], ["true", 0], ["while", 0], ["true", 0], ["if", 0], ["numsuperiors", 0], ["leftindex", 0], ["0", 0], ["and", 0], ["cachedmistakes", 0], ["0", 0], ["numsuperiors", 0], ["leftindex", 0], ["1", 0], ["cachedmistakes", 0], ["1", 0], ["mistakes", 0], ["1", 0], ["if", 0], ["numsuperiors", 0], ["leftindex", 0], ["0", 0], ["break", 0], ["leftindex", 0], ["1", 0], ["while", 0], ["numsuperiors", 0], ["rightindex", 0], ["0", 0], ["rightindex", 0], ["1", 0], ["if", 0], ["leftindex", 0], ["rightindex", 0], ["break", 0], ["numsuperiors", 0], ["rightindex", 0], ["1", 0], ["cachedmistakes", 0], ["1", 0], ["print", 0], ["mistakes", 0], ["n", 0], ["root", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["push", 0], ["d", 0], ["x", 0], ["val", 0], ["if", 0], ["x", 0], ["not", 0], ["in", 0], ["d", 0], ["d", 0], ["x", 0], ["0", 0], ["d", 0], ["x", 0], ["val", 0], ["if", 0], ["d", 0], ["x", 0], ["0", 0], ["del", 0], ["d", 0], ["x", 0], ["d", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["push", 0], ["d", 0], ["x", 0], ["1", 0], ["min", 0], ["0", 0], ["root", 0], ["1", 0], ["inf", 0], ["9999999", 0], ["if", 0], ["a", 0], ["root", 0], ["0", 0], ["min", 0], ["1", 0], ["push", 0], ["d", 0], ["a", 0], ["root", 0], ["1", 0], ["push", 0], ["d", 0], ["0", 0], ["1", 0], ["if", 0], ["0", 0], ["in", 0], ["d", 0], ["and", 0], ["d", 0], ["0", 0], ["1", 0], ["add", 0], ["d", 0], ["0", 0], ["1", 0], ["min", 0], ["add", 0], ["push", 0], ["d", 0], ["inf", 0], ["add", 0], ["d", 0], ["0", 0], ["1", 0], ["s", 0], ["val", 0], ["num", 0], ["for", 0], ["val", 0], ["num", 0], ["in", 0], ["sorted", 0], ["d", 0], ["items", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["print", 0], ["min", 0], ["s", 0], ["cur", 0], ["1", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["s", 0], ["remain", 0], ["s", 0], ["i", 0], ["0", 0], ["cur", 0], ["1", 0], ["while", 0], ["remain", 0], ["0", 0], ["val", 0], ["num", 0], ["s", 0], ["1", 0], ["if", 0], ["val", 0], ["s", 0], ["i", 0], ["0", 0], ["if", 0], ["val", 0], ["inf", 0], ["min", 0], ["min", 0], ["remain", 0], ["num", 0], ["break", 0], ["else", 0], ["add", 0], ["min", 0], ["num", 0], ["remain", 0], ["remain", 0], ["add", 0], ["if", 0], ["val", 0], ["inf", 0], ["min", 0], ["add", 0], ["if", 0], ["num", 0], ["add", 0], ["s", 0], ["pop", 0], ["else", 0], ["s", 0], ["1", 0], ["1", 0], ["add", 0], ["cur", 0], ["s", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["min", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nWe all know how to alphabetize a list of distinct words when you know the alphabet: One word may be a prefix of another longer word, in which case the shorter word always comes before the longer word. With any other two words there must be a first place in the words where their letters differ. Then the order of the words is determined by the lexicographical order of these first differing letters.\n\nHow about the reverse problem: Can you find the lexicographic order of the alphabet from an ordered list of words? Suppose an alphabet exists where the following list of word strings is given in lexicographical order:\n\ncab\ncda\nccc\nbadca\n\nIt is clear that c comes before b in the underlying alphabet because cab comes before badca. Similarly, we know a comes before d, because cab < cda, a comes before c because cab < ccc, and d comes before c because cda < ccc. The only ordering of the 4 alphabet characters that is possible is adcb.\n\nHowever, it may be that a list contains inconsistencies that make it impossible to be ordered under any proposed alphabet. For example, in the following list it must be that a comes before b in the alphabet since abc < bca, yet it also must be that b comes before a in the alphabet since bca < aca.\n\nabc\nbca\ncab\naca\n\nFinally, some lists may not provide enough clues to derive a unique alphabet order, such as the following:\n\ndea\ncfb\n\nIn this list, d comes before c but we don’t know about the relative positions of any of the other letters, so we are unable to uniquely discern the order of the alphabet characters.\n\n-----Input-----\nThe first line of input will contain $L$ and $N$, separated by a space, where $L$ is a lowercase character $\\texttt{b} \\le L \\le \\texttt{z}$ representing the highest character in the English alphabet that appears in the derived alphabet, and $N$ is an integer $1 \\leq N \\leq 1000$ that is equal to the number of strings in the list. Each of the next $N$ lines will contain a single nonempty string of length at most $1000$, consisting only of characters in the derived alphabet. No two strings will be the same.\n\n-----Output-----\nIf the input is consistent with a unique ordering of the alphabet, output a string that designates that ordered alphabet. If the data is inconsistent with any ordering, output IMPOSSIBLE. If the data is consistent with multiple orderings, output AMBIGUOUS.\n\n-----Examples-----\nSample Input 1:\nd 4\ncab\ncda\nccc\nbadca\nSample Output 1:\nadcb\n\nSample Input 2:\nc 4\nabc\nbca\ncab\naca\nSample Output 2:\nIMPOSSIBLE\n\nSample Input 3:\nf 2\ndea\ncfb\nSample Output 3:\nAMBIGUOUS\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8196"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8196", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["we", 2], ["all", 2], ["know", 2], ["how", 2], ["to", 2], ["alphabetize", 2], ["a", 2], ["list", 2], ["of", 2], ["distinct", 2], ["words", 2], ["when", 2], ["you", 2], ["know", 2], ["the", 2], ["alphabet", 2], ["one", 2], ["word", 2], ["may", 2], ["be", 2], ["a", 2], ["prefix", 2], ["of", 2], ["another", 2], ["longer", 2], ["word", 2], ["in", 2], ["which", 2], ["case", 2], ["the", 2], ["shorter", 2], ["word", 2], ["always", 2], ["comes", 2], ["before", 2], ["the", 2], ["longer", 2], ["word", 2], ["with", 2], ["any", 2], ["other", 2], ["two", 2], ["words", 2], ["there", 2], ["must", 2], ["be", 2], ["a", 2], ["first", 2], ["place", 2], ["in", 2], ["the", 2], ["words", 2], ["where", 2], ["their", 2], ["letters", 2], ["differ", 2], ["then", 2], ["the", 2], ["order", 2], ["of", 2], ["the", 2], ["words", 2], ["is", 2], ["determined", 2], ["by", 2], ["the", 2], ["lexicographical", 2], ["order", 2], ["of", 2], ["these", 2], ["first", 2], ["differing", 2], ["letters", 2], ["how", 2], ["about", 2], ["the", 2], ["reverse", 2], ["problem", 2], ["can", 2], ["you", 2], ["find", 2], ["the", 2], ["lexicographic", 2], ["order", 2], ["of", 2], ["the", 2], ["alphabet", 2], ["from", 2], ["an", 2], ["ordered", 2], ["list", 2], ["of", 2], ["words", 2], ["suppose", 2], ["an", 2], ["alphabet", 2], ["exists", 2], ["where", 0], ["the", 0], ["following", 0], ["list", 0], ["of", 0], ["word", 0], ["strings", 0], ["is", 0], ["given", 0], ["in", 0], ["lexicographical", 0], ["order", 0], ["cab", 0], ["cda", 0], ["ccc", 0], ["badca", 2], ["it", 2], ["is", 2], ["clear", 2], ["that", 2], ["c", 2], ["comes", 2], ["before", 2], ["b", 2], ["in", 2], ["the", 2], ["underlying", 2], ["alphabet", 2], ["because", 2], ["cab", 2], ["comes", 2], ["before", 2], ["badca", 2], ["similarly", 2], ["we", 2], ["know", 2], ["a", 2], ["comes", 2], ["before", 2], ["d", 2], ["because", 2], ["cab", 2], ["cda", 2], ["a", 2], ["comes", 2], ["before", 2], ["c", 2], ["because", 2], ["cab", 2], ["ccc", 2], ["and", 2], ["d", 2], ["comes", 2], ["before", 2], ["c", 2], ["because", 2], ["cda", 2], ["ccc", 2], ["the", 2], ["only", 2], ["ordering", 2], ["of", 2], ["the", 2], ["4", 2], ["alphabet", 2], ["characters", 2], ["that", 2], ["is", 2], ["possible", 2], ["is", 2], ["adcb", 2], ["however", 2], ["it", 2], ["may", 2], ["be", 2], ["that", 2], ["a", 2], ["list", 2], ["contains", 2], ["inconsistencies", 2], ["that", 2], ["make", 2], ["it", 2], ["impossible", 2], ["to", 2], ["be", 2], ["ordered", 2], ["under", 2], ["any", 2], ["proposed", 2], ["alphabet", 2], ["for", 2], ["example", 2], ["in", 2], ["the", 2], ["following", 2], ["list", 2], ["it", 2], ["must", 2], ["be", 2], ["that", 2], ["a", 2], ["comes", 2], ["before", 2], ["b", 2], ["in", 2], ["the", 2], ["alphabet", 2], ["since", 2], ["abc", 2], ["bca", 2], ["yet", 2], ["it", 2], ["also", 2], ["must", 2], ["be", 0], ["that", 0], ["b", 0], ["comes", 0], ["before", 0], ["a", 0], ["in", 0], ["the", 0], ["alphabet", 0], ["since", 0], ["bca", 0], ["aca", 0], ["abc", 0], ["bca", 0], ["cab", 0], ["aca", 2], ["finally", 2], ["some", 2], ["lists", 2], ["may", 2], ["not", 2], ["provide", 2], ["enough", 0], ["clues", 0], ["to", 0], ["derive", 0], ["a", 0], ["unique", 0], ["alphabet", 0], ["order", 0], ["such", 0], ["as", 0], ["the", 0], ["following", 0], ["dea", 0], ["cfb", 0], ["in", 2], ["this", 2], ["list", 2], ["d", 2], ["comes", 2], ["before", 2], ["c", 2], ["but", 2], ["we", 2], ["don’t", 2], ["know", 2], ["about", 2], ["the", 2], ["relative", 2], ["positions", 2], ["of", 2], ["any", 2], ["of", 2], ["the", 2], ["other", 2], ["letters", 2], ["so", 2], ["we", 0], ["are", 0], ["unable", 0], ["to", 0], ["uniquely", 0], ["discern", 0], ["the", 0], ["order", 0], ["of", 0], ["the", 0], ["alphabet", 0], ["characters", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 2], ["of", 2], ["input", 2], ["will", 2], ["contain", 2], ["l", 2], ["and", 2], ["n", 2], ["separated", 2], ["by", 2], ["a", 2], ["space", 2], ["where", 2], ["l", 2], ["is", 2], ["a", 2], ["lowercase", 2], ["character", 2], ["texttt", 2], ["b", 2], ["le", 2], ["l", 2], ["le", 2], ["texttt", 2], ["z", 2], ["representing", 2], ["the", 2], ["highest", 2], ["character", 2], ["in", 2], ["the", 2], ["english", 2], ["alphabet", 2], ["that", 2], ["appears", 2], ["in", 2], ["the", 0], ["derived", 0], ["alphabet", 0], ["and", 0], ["n", 0], ["is", 0], ["an", 0], ["integer", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["1000", 0], ["that", 2], ["is", 2], ["equal", 2], ["to", 2], ["the", 2], ["number", 2], ["of", 2], ["strings", 2], ["in", 2], ["the", 2], ["list", 2], ["each", 2], ["of", 2], ["the", 2], ["next", 2], ["n", 0], ["lines", 0], ["will", 0], ["contain", 0], ["a", 0], ["single", 0], ["nonempty", 0], ["string", 0], ["of", 0], ["length", 0], ["at", 0], ["most", 0], ["1000", 0], ["consisting", 2], ["only", 2], ["of", 2], ["characters", 0], ["in", 0], ["the", 0], ["derived", 0], ["alphabet", 0], ["no", 0], ["two", 0], ["strings", 0], ["will", 0], ["be", 0], ["the", 0], ["same", 0], ["output", 0], ["if", 2], ["the", 2], ["input", 2], ["is", 2], ["consistent", 2], ["with", 2], ["a", 2], ["unique", 2], ["ordering", 2], ["of", 2], ["the", 2], ["alphabet", 2], ["output", 2], ["a", 2], ["string", 2], ["that", 2], ["designates", 2], ["that", 2], ["ordered", 2], ["alphabet", 2], ["if", 2], ["the", 2], ["data", 2], ["is", 2], ["inconsistent", 2], ["with", 2], ["any", 2], ["ordering", 2], ["output", 0], ["impossible", 0], ["if", 0], ["the", 0], ["data", 0], ["is", 0], ["consistent", 0], ["with", 0], ["multiple", 0], ["orderings", 0], ["output", 0], ["ambiguous", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["d", 0], ["4", 0], ["cab", 0], ["cda", 0], ["ccc", 0], ["badca", 0], ["sample", 0], ["output", 0], ["1", 0], ["adcb", 0], ["sample", 0], ["input", 0], ["2", 0], ["c", 0], ["4", 0], ["abc", 0], ["bca", 0], ["cab", 0], ["aca", 0], ["sample", 0], ["output", 0], ["2", 0], ["impossible", 0], ["sample", 0], ["input", 0], ["3", 0], ["f", 0], ["2", 0], ["dea", 0], ["cfb", 0], ["sample", 0], ["output", 0], ["3", 0], ["ambiguous", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6813186813186813, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.34065934065934067, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8693790149892934, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4346895074946467, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6813186813186813, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.34065934065934067, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8693790149892934, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4346895074946467, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nImages by John Fowler, Carol Highsmith, and Richard Woodland\n\nYou have decided to spend a day of your trip to Rapid City taking photographs of the South Dakota Badlands, which are renowned for their spectacular and unusual land formations. You are an amateur photographer, yet very particular about lighting conditions.\n\nAfter some careful research, you have located a beautiful location in the Badlands, surrounded by picturesque landscapes. You have determined a variety of features that you wish to photograph from this location. For each feature you have identified the earliest and latest time of day at which the position of the sun is ideal. However, it will take quite a bit of time to take each photograph, given the need to reposition the tripod and camera and your general perfectionism. So you are wondering if it will be possible to successfully take photographs of all these features in one day.\n\n-----Input-----\nThe first line of the input contains two integers $n$ ($1 \\leq n \\leq 10^4$) and $t$ ($1 \\leq t \\leq 10^5$), where $n$ is the number of desired photographs and $t$ is the time you spend to take each photograph. Following that are $n$ additional lines, each describing the available time period for one of the photographs. Each such line contains two nonnegative integers $a$ and $b$, where $a$ is the earliest time that you may begin working on that photograph, and $b$ is the time by which the photograph must be completed, with $a + t \\leq b \\leq 10^9$.\n\n-----Output-----\nDisplay yes if it is possible to take all $n$ photographs, and no otherwise.\n\n-----Examples-----\nSample Input 1:\n2 10\n0 15\n5 20\nSample Output 1:\nyes\n\nSample Input 2:\n2 10\n1 15\n0 20\nSample Output 2:\nno\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8621"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8621", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["images", 0], ["by", 0], ["john", 0], ["fowler", 0], ["carol", 0], ["highsmith", 0], ["and", 0], ["richard", 0], ["woodland", 0], ["you", 1], ["have", 1], ["decided", 1], ["to", 1], ["spend", 1], ["a", 1], ["day", 1], ["of", 1], ["your", 1], ["trip", 1], ["to", 1], ["rapid", 1], ["city", 1], ["taking", 1], ["photographs", 1], ["of", 1], ["the", 1], ["south", 1], ["dakota", 1], ["badlands", 1], ["which", 1], ["are", 1], ["renowned", 1], ["for", 1], ["their", 1], ["spectacular", 1], ["and", 1], ["unusual", 1], ["land", 1], ["formations", 1], ["you", 1], ["are", 1], ["an", 1], ["amateur", 1], ["photographer", 1], ["yet", 1], ["very", 1], ["particular", 1], ["about", 1], ["lighting", 1], ["conditions", 1], ["after", 1], ["some", 1], ["careful", 1], ["research", 1], ["you", 1], ["have", 1], ["located", 1], ["a", 1], ["beautiful", 1], ["location", 1], ["in", 1], ["the", 1], ["badlands", 1], ["surrounded", 1], ["by", 1], ["picturesque", 1], ["landscapes", 1], ["you", 1], ["have", 1], ["determined", 1], ["a", 1], ["variety", 1], ["of", 1], ["features", 1], ["that", 1], ["you", 1], ["wish", 1], ["to", 1], ["photograph", 1], ["from", 1], ["this", 1], ["location", 1], ["for", 1], ["each", 1], ["feature", 1], ["you", 1], ["have", 1], ["identified", 1], ["the", 1], ["earliest", 1], ["and", 1], ["latest", 1], ["time", 1], ["of", 1], ["day", 1], ["at", 1], ["which", 1], ["the", 1], ["position", 1], ["of", 1], ["the", 1], ["sun", 1], ["is", 1], ["ideal", 1], ["however", 1], ["it", 1], ["will", 1], ["take", 1], ["quite", 1], ["a", 1], ["bit", 1], ["of", 1], ["time", 1], ["to", 1], ["take", 1], ["each", 1], ["photograph", 1], ["given", 1], ["the", 1], ["need", 1], ["to", 1], ["reposition", 1], ["the", 1], ["tripod", 1], ["and", 1], ["camera", 1], ["and", 1], ["your", 1], ["general", 1], ["perfectionism", 1], ["so", 1], ["you", 1], ["are", 1], ["wondering", 1], ["if", 1], ["it", 1], ["will", 1], ["be", 1], ["possible", 0], ["to", 0], ["successfully", 0], ["take", 0], ["photographs", 0], ["of", 0], ["all", 0], ["these", 0], ["features", 0], ["in", 0], ["one", 0], ["day", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["the", 1], ["input", 1], ["contains", 1], ["two", 1], ["integers", 1], ["n", 1], ["1", 1], ["leq", 1], ["n", 1], ["leq", 1], ["10", 1], ["4", 1], ["and", 1], ["t", 1], ["1", 1], ["leq", 1], ["t", 1], ["leq", 1], ["10", 1], ["5", 1], ["where", 2], ["n", 2], ["is", 2], ["the", 2], ["number", 2], ["of", 2], ["desired", 2], ["photographs", 2], ["and", 2], ["t", 2], ["is", 2], ["the", 2], ["time", 2], ["you", 2], ["spend", 2], ["to", 2], ["take", 2], ["each", 2], ["photograph", 2], ["following", 2], ["that", 2], ["are", 2], ["n", 2], ["additional", 2], ["lines", 2], ["each", 2], ["describing", 2], ["the", 2], ["available", 2], ["time", 2], ["period", 2], ["for", 2], ["one", 2], ["of", 2], ["the", 2], ["photographs", 2], ["each", 2], ["such", 2], ["line", 2], ["contains", 2], ["two", 2], ["nonnegative", 2], ["integers", 2], ["a", 2], ["and", 2], ["b", 2], ["where", 2], ["a", 2], ["is", 2], ["the", 2], ["earliest", 2], ["time", 2], ["that", 2], ["you", 2], ["may", 2], ["begin", 2], ["working", 2], ["on", 2], ["that", 2], ["photograph", 2], ["and", 2], ["b", 2], ["is", 2], ["the", 1], ["time", 1], ["by", 1], ["which", 1], ["the", 1], ["photograph", 0], ["must", 0], ["be", 0], ["completed", 0], ["with", 0], ["a", 0], ["t", 0], ["leq", 0], ["b", 0], ["leq", 0], ["10", 0], ["9", 0], ["output", 0], ["display", 2], ["yes", 2], ["if", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["take", 0], ["all", 0], ["n", 0], ["photographs", 0], ["and", 0], ["no", 0], ["otherwise", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["2", 0], ["10", 0], ["0", 0], ["15", 0], ["5", 0], ["20", 0], ["sample", 0], ["output", 0], ["1", 0], ["yes", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["10", 0], ["1", 0], ["15", 0], ["0", 0], ["20", 0], ["sample", 0], ["output", 0], ["2", 0], ["no", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7533783783783784, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.643581081081081, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8409090909090909, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8181818181818182, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7533783783783784, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.643581081081081, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8409090909090909, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8181818181818182, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nA film festival is coming up in the city N. The festival will last for exactly n days and each day will have a premiere of exactly one film. Each film has a genre — an integer from 1 to k.\n\nOn the i-th day the festival will show a movie of genre a_{i}. We know that a movie of each of k genres occurs in the festival programme at least once. In other words, each integer from 1 to k occurs in the sequence a_1, a_2, ..., a_{n} at least once.\n\nValentine is a movie critic. He wants to watch some movies of the festival and then describe his impressions on his site.\n\nAs any creative person, Valentine is very susceptive. After he watched the movie of a certain genre, Valentine forms the mood he preserves until he watches the next movie. If the genre of the next movie is the same, it does not change Valentine's mood. If the genres are different, Valentine's mood changes according to the new genre and Valentine has a stress.\n\nValentine can't watch all n movies, so he decided to exclude from his to-watch list movies of one of the genres. In other words, Valentine is going to choose exactly one of the k genres and will skip all the movies of this genre. He is sure to visit other movies.\n\nValentine wants to choose such genre x (1 ≤ x ≤ k), that the total number of after-movie stresses (after all movies of genre x are excluded) were minimum.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (2 ≤ k ≤ n ≤ 10^5), where n is the number of movies and k is the number of genres.\n\nThe second line of the input contains a sequence of n positive integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ k), where a_{i} is the genre of the i-th movie. It is guaranteed that each number from 1 to k occurs at least once in this sequence.\n\n\n-----Output-----\n\nPrint a single number — the number of the genre (from 1 to k) of the excluded films. If there are multiple answers, print the genre with the minimum number.\n\n\n-----Examples-----\nInput\n10 3\n1 1 2 3 2 3 3 1 1 3\n\nOutput\n3\nInput\n7 3\n3 1 3 2 3 1 2\n\nOutput\n1\n\n\n-----Note-----\n\nIn the first sample if we exclude the movies of the 1st genre, the genres 2, 3, 2, 3, 3, 3 remain, that is 3 stresses; if we exclude the movies of the 2nd genre, the genres 1, 1, 3, 3, 3, 1, 1, 3 remain, that is 3 stresses; if we exclude the movies of the 3rd genre the genres 1, 1, 2, 2, 1, 1 remain, that is 2 stresses.\n\nIn the second sample whatever genre Valentine excludes, he will have exactly 3 stresses.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, k = map(int, input().split())\nt = list(map(int, input().split()))\nt = [t[0]] + [t[i] for i in range(1, len(t)) if t[i] != t[i - 1]]\np = [0] * (k + 1)\nfor i in range(1, len(t) - 1):\n\tif t[i - 1] == t[i + 1]: p[t[i]] += 2\n\telse: p[t[i]] += 1\np[t[0]] += 1\np[t[-1]] += 1\nprint(p.index(max(p)))\n", "import sys\n\ndef solve():\n\tn, k = map(int, input().split())\n\tbada = list(map(int, input().split()))\n\ta = list()\n\tfor i in range(len(bada)):\n\t\tif len(a) > 0 and bada[i] == a[-1]: continue\n\t\ta.append(bada[i])\n\tbad = [0] * (k + 1)\n\tfor i, val in enumerate(a):\n\t\tif i + 1 >= len(a) and i == 0: continue\n\t\tif i + 1 >= len(a):\n\t\t\tbad[val] += 1\n\t\telif i == 0:\n\t\t\tbad[val] += 1\n\t\telse:\n\t\t\tbefore = a[i-1]\n\t\t\tafter = a[i+1]\n\t\t\tbad[val] += 2 if before == after else 1\n\twhich = -1\n\thowmany = -1\n\tfor i in range(len(bad)):\n\t\tif bad[i] > howmany:\n\t\t\twhich = i\n\t\t\thowmany = bad[i]\n\tprint(which)\n\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()\n", "__author__ = 'Michael Ilyin'\n\n\ndef prepare(a):\n\tna = []\n\tlast = 0\n\tfor i in range(0, len(a)):\n\t\tif last != a[i]:\n\t\t\tna.append(a[i])\n\t\t\tlast = a[i]\n\treturn na\n\n\nheader = input()\nfilms = int(header[:header.find(' ')])\ngenres = int(header[header.find(' '):])\nnumbers = [int(x) for x in input().split()]\nres = [[genre, 0] for genre in range(1, genres + 1)]\nnumbers = prepare(numbers)\nfilms = len(numbers)\n\nfor i, obj in enumerate(numbers):\n\tif i == 0:\n\t\tres[obj - 1][1] += 1\n\t\tcontinue\n\tif i == films - 1:\n\t\tres[obj - 1][1] += 1\n\t\tcontinue\n\tif numbers[i - 1] == numbers[i + 1]:\n\t\tres[obj - 1][1] += 2\n\telse:\n\t\tres[obj - 1][1] += 1\nres = sorted(res, key=lambda x: x[0], reverse=False)\nres = sorted(res, key=lambda x: x[1], reverse=True)\nprint(str(res[0][0]))\n", "# 1  2  3  2  3  1  3\n#  12 23 32 23 31 13\n# 1 1 2 3 2 3 3 1 1 3\n#      112 123 232 323 233 331 311 113\n# 12/21  1   0   0   0   0   1   0   0\n# 23/32  0   1   1   1   0   0   0   0\n# 13/31  0   1   0   0   0   1   0   0\n\n\n# 1 2 3 1 2 3 1 2 3| 1\n# \t    123 231 312 123 231 312 123 231\n# 12/21  1   1   1   0   1   1   0   1    \n# 23/32  1   1   0   1   0   1   1   0\n# 13/31  1   1   0   1   1   0   1   1\n\n# with open('h.in', 'r') as inputFile, open('h.out', 'w') as outputFile:\n\t# (n,k) = [int(x) for x in inputFile.readline().strip().split(' ')]\n\t# dataF = inputFile.readline().strip().split(' ');\n(n,k) = [int(x) for x in input().strip().split(' ')]\ndataF = input().strip().split(' ');\ndataF = [int(x) for x in dataF]\ndata = [0]\nfor i in range(len(dataF)):\n\tif (data[len(data)-1] != dataF[i]):\n\t\tdata.append(dataF[i])\ndata = data[1:]\nres = {x:0 for x in set(data)}\nres[data[0]] += 1\nres[data[len(data)-1]] += 1\nfor i in range(0,len(data)-2,1):\n\tprev = data[i]\n\tcurr = data[i+1]\n\tnext = data[i+2]\n\tif (prev == next):\n\t\tres[curr] += 2\n\tif (prev != next):\n\t\tres[curr] += 1\nprint(max(res, key=res.get))\n\n\t\n", "num_days, num_genres = list(map(int, input().split()))\nschedule = list(map(int, input().split()))\n\ncompressed = []\ncurrent = schedule[0]\npos = 1\nwhile True:\n\tcompressed.append(current)\n\twhile pos < num_days and schedule[pos] == current:\n\t\tpos += 1\n\tif pos < num_days:\n\t\tcurrent = schedule[pos]\n\telse:\n\t\tbreak\n\nscore = (num_genres + 1) * [ 0 ]\nscore[compressed[0]] += 1\nfor i in range(2, len(compressed)):\n\tscore[compressed[i - 1]] += 1\n\tif compressed[i - 2] == compressed[i]:\n\t\tscore[compressed[i - 1]] += 1\nscore[compressed[len(compressed) - 1]] += 1\n\nbest_score, best_genre = -1, -1\nfor genre in range(1, num_genres + 1):\n\tif score[genre] > best_score:\n\t\tbest_score = score[genre]\n\t\tbest_genre = genre\nprint(best_genre)\n", "num_days, num_genres = list(map(int, input().split()))\nschedule = list(map(int, input().split()))\n\ncompressed = []\ncurrent = schedule[0]\npos = 1\nwhile True:\n\tcompressed.append(current)\n\twhile pos < num_days and schedule[pos] == current:\n\t\tpos += 1\n\tif pos < num_days:\n\t\tcurrent = schedule[pos]\n\telse:\n\t\tbreak\n\nscore = (num_genres + 1) * [ 0 ]\nscore[compressed[0]] += 1\nfor i in range(2, len(compressed)):\n\tscore[compressed[i - 1]] += 1\n\tif compressed[i - 2] == compressed[i]:\n\t\tscore[compressed[i - 1]] += 1\nscore[compressed[len(compressed) - 1]] += 1\n\nbest_score, best_genre = -1, -1\nfor genre in range(1, num_genres + 1):\n\tif score[genre] > best_score:\n\t\tbest_score = score[genre]\n\t\tbest_genre = genre\nprint(best_genre)\n\n\n\n\n# Made By Mostafa_Khaled\n", "n,k=map(int,input().split())\na=[int(i) for i in input().split()]\na=[0]+a+[0]\ni=1 \ntot=0 \nj=1 \ncnt=[0]*(k+1)\nwhile i<=n:\n\twhile j<=n and a[j]==a[i]: j+=1 \n\ttot+=1 \n\tif a[i-1]==a[j]:\n\t\tcnt[a[i]]+=2 #gain a strain of 2 if we remove a[i]\n\telse:\n\t\tcnt[a[i]]+=1 \n\ti=j \ntot-=1 \nans=tot\n#print(cnt)\nfor i in range(1,k+1):\n\tif ans>tot-cnt[i]:\n\t\tans=tot-cnt[i]\n\t\tres=i \nprint(res)\n", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\nn, k = mints()\na = list(mints())\ni = 0\nc = [0]*(k+1)\nwhile i < n:\n\tj = i\n\twhile j < n and a[j] == a[i]:\n\t\tj += 1\n\tif i - 1 >= 0:\n\t\tif j < n:\n\t\t\tif a[i-1] != a[j]:\n\t\t\t\tc[a[i]] += 1\n\t\t\telse:\n\t\t\t\tc[a[i]] += 2\n\t\telse:\n\t\t\tc[a[i]] += 1\n\telif j < n:\n\t\t\tc[a[i]] += 1\n\ti = j\nz = 1\nfor i in range(k+1):\n\tif c[z] < c[i]:\n\t\tz = i\nprint(z)\n", "n, k = map(int, input().split())\na = [int(i) for i in input().split()]\ns = [0 for i in range(k)]\nb = [a[0]]\nfor i in range(1, n):\n\tif a[i] == b[-1]:\n\t\tcontinue\n\telse:\n\t\tb.append(a[i])\ny = len(b)\nfor i in range(y):\n\tif i == 0 and b[i] != b[i + 1]:\n\t\ts[a[0] - 1] += 1\n\telif i == y - 1 and b[i] != b[i - 1]:\n\t\ts[b[y - 1] - 1] += 1\n\telse:\n\t\tif b[i - 1] == b[i + 1]:\n\t\t\ts[b[i] - 1] += 2\n\t\telse:\n\t\t\t\ts[b[i] - 1] += 1\nx = max(s)\nprint(s.index(x) + 1)\n", "n, k = list(map(int, input().split()))\nt = list(map(int, input().split()))\nt = [t[0]] + [t[i] for i in range(1, len(t)) if t[i] != t[i - 1]]\np = [0] * (k + 1)\nfor i in range(1, len(t) - 1):\n\tif t[i - 1] == t[i + 1]:\n\t\tp[t[i]] += 2\n\telse:\n\t\tp[t[i]] += 1\np[t[0]] += 1\np[t[-1]] += 1\nprint(p.index(max(p)))\n", "n,k=map(int,input().split())\nlst=[*map(int,input().split())]\na,length=[lst[0]],0\nfor i,x in enumerate(lst[1:]):\n\tif x!=lst[i]:a.append(x);length+=1\nd={i:length for i in range(1,k+1)}\nd[a[0]]-=1\nfor i,x in enumerate(a[1:-1]):\n\tif a[i]==a[i+2]:d[x]-=2\n\telse:d[x]-=1\nd[a[-1]]-=1\nres=min(d.values())\nfor i,x in enumerate(d):\n\tif d[x]==res:\n\t\tprint(x);break\n", "n,k = list(map(int,input().split()))\nlis=list(map(int,input().split()))\nans=[]\nfreq=[0]*(k+1)\nfor i in range(n-1):\n\tif lis[i]!=lis[i+1]:\n\t\tans.append(lis[i])\nif lis[-1]!=ans[-1]:\n\tans.append(lis[-1])\n#print(ans,freq)\nl=len(ans)\nfor i in range(1,l-1):\n\tif ans[i-1]==ans[i+1]:\n\t\tfreq[ans[i]]+=2\n\telse:\n\t\tfreq[ans[i]]+=1\nfreq[ans[-1]]+=1\nfreq[ans[0]]+=1        \nprint(freq.index(max(freq)))            \n\t\t\n\n\n", "import math\n#n,m=map(int,input().split())\nfrom collections import Counter\n#for i in range(n):\nimport math\n#for _ in range(int(input())):\n#n = int(input())\n#for _ in range(int(input())):\n#n = int(input())\nimport bisect\n'''for _ in range(int(input())):\n\n\tn=int(input())\n\n\tn,k=map(int, input().split())\n\n\tarr = list(map(int, input().split()))'''\n#n, m, k = [int(x) for x in input().split()]\nn,m=list(map(int,input().split()))\narr=list(map(int,input().split()))\nls=[0]*(10**5+1)\npre=arr[0]\nfor i in range(1,n-1):\n\tif arr[i]!=arr[i+1]:\n\t\tls[arr[i]]+=2 if arr[i+1]==pre else 1\n\t\tpre=arr[i]\n\nif arr[0]!=arr[-1]:\n\tls[arr[-1]]+=1\n\tif arr[0]!=arr[1]:\n\t\tls[arr[0]]+=1\n\nvar=ls.index(max(ls))\nmm=max(ls)\n#print(ls[:4])\nif m==2:\n\tif 1 in arr and 2 in arr:\n\t\tprint(1)\n\telse:\n\t\tprint(0)\nelse:\n\tfor i in range(len(ls)):\n\t\tif ls[i] == mm:\n\t\t\tprint(i)\n\t\t\tbreak\n\n\n\n\n\n\n\n\n\n\n\n", "n,k=map(int,input().split())\nr=list(map(int,input().split()))\ndist=[]\nans=[0]*(k+1)#precomp\nfor i in range(n):\n\tif i == 0 or r[i] != r[i - 1]:\n\t\tdist.append(r[i])\n# dist = distinct\nfor i in range(len(dist)):\n\tif 0 < i < len(dist) - 1 and dist[i - 1] == dist[i + 1]:\n\t\tans[dist[i]] += 2 # removing dist[i] subtracts 2\n\telse:\n\t\tans[dist[i]] += 1\nu, v = -1, -1\nfor k in range(1, k + 1):\n\tif ans[k] > u: u, v = ans[k], k\nprint (v)\n"], "id": "id5117"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5117", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 1], ["film", 1], ["festival", 1], ["is", 1], ["coming", 1], ["up", 1], ["in", 1], ["the", 1], ["city", 1], ["n", 1], ["the", 1], ["festival", 1], ["will", 1], ["last", 1], ["for", 1], ["exactly", 1], ["n", 1], ["days", 1], ["and", 1], ["each", 1], ["day", 1], ["will", 1], ["have", 1], ["a", 1], ["premiere", 1], ["of", 1], ["exactly", 1], ["one", 1], ["film", 1], ["each", 1], ["film", 1], ["has", 1], ["a", 1], ["genre", 1], ["—", 1], ["an", 1], ["integer", 1], ["from", 1], ["1", 1], ["to", 1], ["k", 1], ["on", 1], ["the", 0], ["i", 0], ["th", 0], ["day", 0], ["the", 0], ["festival", 0], ["will", 0], ["show", 0], ["a", 0], ["movie", 0], ["of", 0], ["genre", 0], ["a", 0], ["i", 0], ["we", 1], ["know", 1], ["that", 1], ["a", 1], ["movie", 1], ["of", 1], ["each", 1], ["of", 1], ["k", 1], ["genres", 1], ["occurs", 1], ["in", 1], ["the", 1], ["festival", 1], ["programme", 1], ["at", 1], ["least", 1], ["once", 1], ["in", 1], ["other", 0], ["words", 0], ["each", 0], ["integer", 0], ["from", 0], ["1", 0], ["to", 0], ["k", 0], ["occurs", 0], ["in", 0], ["the", 0], ["sequence", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["at", 1], ["least", 1], ["once", 1], ["valentine", 1], ["is", 1], ["a", 1], ["movie", 1], ["critic", 1], ["he", 1], ["wants", 1], ["to", 1], ["watch", 1], ["some", 1], ["movies", 1], ["of", 1], ["the", 1], ["festival", 1], ["and", 1], ["then", 1], ["describe", 1], ["his", 1], ["impressions", 1], ["on", 1], ["his", 1], ["site", 1], ["as", 1], ["any", 1], ["creative", 1], ["person", 1], ["valentine", 1], ["is", 1], ["very", 1], ["susceptive", 1], ["after", 1], ["he", 1], ["watched", 1], ["the", 1], ["movie", 1], ["of", 1], ["a", 1], ["certain", 1], ["genre", 1], ["valentine", 1], ["forms", 1], ["the", 1], ["mood", 1], ["he", 1], ["preserves", 1], ["until", 1], ["he", 1], ["watches", 1], ["the", 1], ["next", 1], ["movie", 1], ["if", 1], ["the", 1], ["genre", 1], ["of", 1], ["the", 1], ["next", 1], ["movie", 1], ["is", 1], ["the", 1], ["same", 1], ["it", 1], ["does", 1], ["not", 1], ["change", 1], ["valentine", 1], ["s", 1], ["mood", 1], ["if", 1], ["the", 1], ["genres", 1], ["are", 1], ["different", 1], ["valentine", 1], ["s", 1], ["mood", 1], ["changes", 1], ["according", 1], ["to", 1], ["the", 1], ["new", 1], ["genre", 1], ["and", 1], ["valentine", 1], ["has", 1], ["a", 1], ["stress", 1], ["valentine", 1], ["can", 1], ["t", 1], ["watch", 1], ["all", 1], ["n", 1], ["movies", 1], ["so", 1], ["he", 1], ["decided", 1], ["to", 1], ["exclude", 1], ["from", 1], ["his", 1], ["to", 1], ["watch", 1], ["list", 1], ["movies", 1], ["of", 1], ["one", 1], ["of", 1], ["the", 1], ["genres", 1], ["in", 1], ["other", 1], ["words", 1], ["valentine", 1], ["is", 1], ["going", 1], ["to", 1], ["choose", 1], ["exactly", 1], ["one", 1], ["of", 1], ["the", 1], ["k", 1], ["genres", 1], ["and", 1], ["will", 1], ["skip", 1], ["all", 1], ["the", 1], ["movies", 1], ["of", 1], ["this", 1], ["genre", 1], ["he", 1], ["is", 1], ["sure", 1], ["to", 1], ["visit", 1], ["other", 1], ["movies", 1], ["valentine", 1], ["wants", 1], ["to", 1], ["choose", 1], ["such", 1], ["genre", 1], ["x", 1], ["1", 1], ["≤", 1], ["x", 1], ["≤", 1], ["k", 1], ["that", 1], ["the", 1], ["total", 1], ["number", 1], ["of", 1], ["after", 1], ["movie", 0], ["stresses", 0], ["after", 0], ["all", 0], ["movies", 0], ["of", 0], ["genre", 0], ["x", 0], ["are", 0], ["excluded", 0], ["were", 0], ["minimum", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["the", 1], ["input", 2], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["k", 0], ["2", 0], ["≤", 0], ["k", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["where", 1], ["n", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["movies", 1], ["and", 1], ["k", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["genres", 1], ["the", 1], ["second", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["a", 0], ["sequence", 0], ["of", 0], ["n", 0], ["positive", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["k", 0], ["where", 0], ["a", 0], ["i", 0], ["is", 1], ["the", 1], ["genre", 1], ["of", 1], ["the", 1], ["i", 1], ["th", 1], ["movie", 1], ["it", 1], ["is", 1], ["guaranteed", 1], ["that", 1], ["each", 1], ["number", 0], ["from", 0], ["1", 0], ["to", 0], ["k", 0], ["occurs", 0], ["at", 0], ["least", 0], ["once", 0], ["in", 0], ["this", 0], ["sequence", 0], ["output", 0], ["print", 1], ["a", 1], ["single", 1], ["number", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["the", 1], ["genre", 1], ["from", 1], ["1", 1], ["to", 1], ["k", 1], ["of", 1], ["the", 1], ["excluded", 1], ["films", 1], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["answers", 0], ["print", 0], ["the", 0], ["genre", 0], ["with", 0], ["the", 0], ["minimum", 0], ["number", 0], ["examples", 0], ["input", 0], ["10", 0], ["3", 0], ["1", 0], ["1", 0], ["2", 0], ["3", 0], ["2", 0], ["3", 0], ["3", 0], ["1", 0], ["1", 0], ["3", 0], ["output", 0], ["3", 0], ["input", 0], ["7", 0], ["3", 0], ["3", 0], ["1", 0], ["3", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["output", 0], ["1", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["sample", 1], ["if", 1], ["we", 1], ["exclude", 1], ["the", 1], ["movies", 1], ["of", 1], ["the", 1], ["1st", 1], ["genre", 1], ["the", 1], ["genres", 1], ["2", 1], ["3", 1], ["2", 1], ["3", 1], ["3", 1], ["3", 2], ["remain", 1], ["that", 1], ["is", 1], ["3", 1], ["stresses", 1], ["if", 1], ["we", 1], ["exclude", 1], ["the", 1], ["movies", 1], ["of", 1], ["the", 1], ["2nd", 1], ["genre", 1], ["the", 1], ["genres", 1], ["1", 1], ["1", 1], ["3", 1], ["3", 1], ["3", 1], ["1", 1], ["1", 1], ["3", 2], ["remain", 1], ["that", 1], ["is", 1], ["3", 1], ["stresses", 1], ["if", 1], ["we", 1], ["exclude", 1], ["the", 1], ["movies", 1], ["of", 1], ["the", 1], ["3rd", 1], ["genre", 1], ["the", 1], ["genres", 1], ["1", 1], ["1", 1], ["2", 1], ["2", 1], ["1", 1], ["1", 1], ["remain", 1], ["that", 1], ["is", 1], ["2", 1], ["stresses", 1], ["in", 1], ["the", 1], ["second", 0], ["sample", 0], ["whatever", 0], ["genre", 0], ["valentine", 0], ["excludes", 0], ["he", 0], ["will", 0], ["have", 0], ["exactly", 0], ["3", 0], ["stresses", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6973947895791583, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6943887775551102, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8688845401174168, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8688845401174168, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6973947895791583, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6943887775551102, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8688845401174168, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8688845401174168, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["t", 0], ["0", 0], ["t", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["t", 0], ["if", 0], ["t", 0], ["i", 0], ["t", 0], ["i", 0], ["1", 0], ["p", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["t", 0], ["1", 0], ["if", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["p", 0], ["t", 0], ["i", 0], ["2", 0], ["else", 0], ["p", 0], ["t", 0], ["i", 0], ["1", 0], ["p", 0], ["t", 0], ["0", 0], ["1", 0], ["p", 0], ["t", 0], ["1", 0], ["1", 0], ["print", 0], ["p", 0], ["index", 0], ["max", 0], ["p", 0], ["import", 0], ["sys", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bada", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["bada", 0], ["if", 0], ["len", 0], ["a", 0], ["0", 0], ["and", 0], ["bada", 0], ["i", 0], ["a", 0], ["1", 0], ["continue", 0], ["a", 0], ["append", 0], ["bada", 0], ["i", 0], ["bad", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["val", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["if", 0], ["i", 0], ["1", 0], ["len", 0], ["a", 0], ["and", 0], ["i", 0], ["0", 0], ["continue", 0], ["if", 0], ["i", 0], ["1", 0], ["len", 0], ["a", 0], ["bad", 0], ["val", 0], ["1", 0], ["elif", 0], ["i", 0], ["0", 0], ["bad", 0], ["val", 0], ["1", 0], ["else", 0], ["before", 0], ["a", 0], ["i", 0], ["1", 0], ["after", 0], ["a", 0], ["i", 0], ["1", 0], ["bad", 0], ["val", 0], ["2", 0], ["if", 0], ["before", 0], ["after", 0], ["else", 0], ["1", 0], ["which", 0], ["1", 0], ["howmany", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["bad", 0], ["if", 0], ["bad", 0], ["i", 0], ["howmany", 0], ["which", 0], ["i", 0], ["howmany", 0], ["bad", 0], ["i", 0], ["print", 0], ["which", 0], ["if", 0], ["sys", 0], ["hexversion", 0], ["50594544", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["test", 0], ["txt", 0], ["solve", 0], ["author", 0], ["michael", 0], ["ilyin", 0], ["def", 0], ["prepare", 0], ["a", 0], ["na", 0], ["last", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["a", 0], ["if", 0], ["last", 0], ["a", 0], ["i", 0], ["na", 0], ["append", 0], ["a", 0], ["i", 0], ["last", 0], ["a", 0], ["i", 0], ["return", 0], ["na", 0], ["header", 0], ["input", 0], ["films", 0], ["int", 0], ["header", 0], ["header", 0], ["find", 0], ["genres", 0], ["int", 0], ["header", 0], ["header", 0], ["find", 0], ["numbers", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["res", 0], ["genre", 0], ["0", 0], ["for", 0], ["genre", 0], ["in", 0], ["range", 0], ["1", 0], ["genres", 0], ["1", 0], ["numbers", 0], ["prepare", 0], ["numbers", 0], ["films", 0], ["len", 0], ["numbers", 0], ["for", 0], ["i", 0], ["obj", 0], ["in", 0], ["enumerate", 0], ["numbers", 0], ["if", 0], ["i", 0], ["0", 0], ["res", 0], ["obj", 0], ["1", 0], ["1", 0], ["1", 0], ["continue", 0], ["if", 0], ["i", 0], ["films", 0], ["1", 0], ["res", 0], ["obj", 0], ["1", 0], ["1", 0], ["1", 0], ["continue", 0], ["if", 0], ["numbers", 0], ["i", 0], ["1", 0], ["numbers", 0], ["i", 0], ["1", 0], ["res", 0], ["obj", 0], ["1", 0], ["1", 0], ["2", 0], ["else", 0], ["res", 0], ["obj", 0], ["1", 0], ["1", 0], ["1", 0], ["res", 0], ["sorted", 0], ["res", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["reverse", 0], ["false", 0], ["res", 0], ["sorted", 0], ["res", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["1", 0], ["reverse", 0], ["true", 0], ["print", 0], ["str", 0], ["res", 0], ["0", 0], ["0", 0], ["1", 0], ["2", 0], ["3", 0], ["2", 0], ["3", 0], ["1", 0], ["3", 0], ["12", 0], ["23", 0], ["32", 0], ["23", 0], ["31", 0], ["13", 0], ["1", 0], ["1", 0], ["2", 0], ["3", 0], ["2", 0], ["3", 0], ["3", 0], ["1", 0], ["1", 0], ["3", 0], ["112", 0], ["123", 0], ["232", 0], ["323", 0], ["233", 0], ["331", 0], ["311", 0], ["113", 0], ["12", 0], ["21", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["0", 0], ["23", 0], ["32", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["13", 0], ["31", 0], ["0", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["123", 0], ["231", 0], ["312", 0], ["123", 0], ["231", 0], ["312", 0], ["123", 0], ["231", 0], ["12", 0], ["21", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["23", 0], ["32", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["13", 0], ["31", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["with", 0], ["open", 0], ["h", 0], ["in", 0], ["r", 0], ["as", 0], ["inputfile", 0], ["open", 0], ["h", 0], ["out", 0], ["w", 0], ["as", 0], ["outputfile", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["inputfile", 0], ["readline", 0], ["strip", 0], ["split", 0], ["dataf", 0], ["inputfile", 0], ["readline", 0], ["strip", 0], ["split", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["dataf", 0], ["input", 0], ["strip", 0], ["split", 0], ["dataf", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["dataf", 0], ["data", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["dataf", 0], ["if", 0], ["data", 0], ["len", 0], ["data", 0], ["1", 0], ["dataf", 0], ["i", 0], ["data", 0], ["append", 0], ["dataf", 0], ["i", 0], ["data", 0], ["data", 0], ["1", 0], ["res", 0], ["x", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["set", 0], ["data", 0], ["res", 0], ["data", 0], ["0", 0], ["1", 0], ["res", 0], ["data", 0], ["len", 0], ["data", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["data", 0], ["2", 0], ["1", 0], ["prev", 0], ["data", 0], ["i", 0], ["curr", 0], ["data", 0], ["i", 0], ["1", 0], ["next", 0], ["data", 0], ["i", 0], ["2", 0], ["if", 0], ["prev", 0], ["next", 0], ["res", 0], ["curr", 0], ["2", 0], ["if", 0], ["prev", 0], ["next", 0], ["res", 0], ["curr", 0], ["1", 0], ["print", 0], ["max", 0], ["res", 0], ["key", 0], ["res", 0], ["get", 0], ["num", 0], ["days", 0], ["num", 0], ["genres", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["schedule", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["compressed", 0], ["current", 0], ["schedule", 0], ["0", 0], ["pos", 0], ["1", 0], ["while", 0], ["true", 0], ["compressed", 0], ["append", 0], ["current", 0], ["while", 0], ["pos", 0], ["num", 0], ["days", 0], ["and", 0], ["schedule", 0], ["pos", 0], ["current", 0], ["pos", 0], ["1", 0], ["if", 0], ["pos", 0], ["num", 0], ["days", 0], ["current", 0], ["schedule", 0], ["pos", 0], ["else", 0], ["break", 0], ["score", 0], ["num", 0], ["genres", 0], ["1", 0], ["0", 0], ["score", 0], ["compressed", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["len", 0], ["compressed", 0], ["score", 0], ["compressed", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["compressed", 0], ["i", 0], ["2", 0], ["compressed", 0], ["i", 0], ["score", 0], ["compressed", 0], ["i", 0], ["1", 0], ["1", 0], ["score", 0], ["compressed", 0], ["len", 0], ["compressed", 0], ["1", 0], ["1", 0], ["best", 0], ["score", 0], ["best", 0], ["genre", 0], ["1", 0], ["1", 0], ["for", 0], ["genre", 0], ["in", 0], ["range", 0], ["1", 0], ["num", 0], ["genres", 0], ["1", 0], ["if", 0], ["score", 0], ["genre", 0], ["best", 0], ["score", 0], ["best", 0], ["score", 0], ["score", 0], ["genre", 0], ["best", 0], ["genre", 0], ["genre", 0], ["print", 0], ["best", 0], ["genre", 0], ["num", 0], ["days", 0], ["num", 0], ["genres", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["schedule", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["compressed", 0], ["current", 0], ["schedule", 0], ["0", 0], ["pos", 0], ["1", 0], ["while", 0], ["true", 0], ["compressed", 0], ["append", 0], ["current", 0], ["while", 0], ["pos", 0], ["num", 0], ["days", 0], ["and", 0], ["schedule", 0], ["pos", 0], ["current", 0], ["pos", 0], ["1", 0], ["if", 0], ["pos", 0], ["num", 0], ["days", 0], ["current", 0], ["schedule", 0], ["pos", 0], ["else", 0], ["break", 0], ["score", 0], ["num", 0], ["genres", 0], ["1", 0], ["0", 0], ["score", 0], ["compressed", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["len", 0], ["compressed", 0], ["score", 0], ["compressed", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["compressed", 0], ["i", 0], ["2", 0], ["compressed", 0], ["i", 0], ["score", 0], ["compressed", 0], ["i", 0], ["1", 0], ["1", 0], ["score", 0], ["compressed", 0], ["len", 0], ["compressed", 0], ["1", 0], ["1", 0], ["best", 0], ["score", 0], ["best", 0], ["genre", 0], ["1", 0], ["1", 0], ["for", 0], ["genre", 0], ["in", 0], ["range", 0], ["1", 0], ["num", 0], ["genres", 0], ["1", 0], ["if", 0], ["score", 0], ["genre", 0], ["best", 0], ["score", 0], ["best", 0], ["score", 0], ["score", 0], ["genre", 0], ["best", 0], ["genre", 0], ["genre", 0], ["print", 0], ["best", 0], ["genre", 0], ["made", 0], ["by", 0], ["mostafa", 0], ["khaled", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["a", 0], ["0", 0], ["i", 0], ["1", 0], ["tot", 0], ["0", 0], ["j", 0], ["1", 0], ["cnt", 0], ["0", 0], ["k", 0], ["1", 0], ["while", 0], ["i", 0], ["n", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["a", 0], ["j", 0], ["a", 0], ["i", 0], ["j", 0], ["1", 0], ["tot", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["j", 0], ["cnt", 0], ["a", 0], ["i", 0], ["2", 0], ["gain", 0], ["a", 0], ["strain", 0], ["of", 0], ["2", 0], ["if", 0], ["we", 0], ["remove", 0], ["a", 0], ["i", 0], ["else", 0], ["cnt", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["j", 0], ["tot", 0], ["1", 0], ["ans", 0], ["tot", 0], ["print", 0], ["cnt", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["ans", 0], ["tot", 0], ["cnt", 0], ["i", 0], ["ans", 0], ["tot", 0], ["cnt", 0], ["i", 0], ["res", 0], ["i", 0], ["print", 0], ["res", 0], ["import", 0], ["sys", 0], ["from", 0], ["math", 0], ["import", 0], ["def", 0], ["minp", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["mint", 0], ["return", 0], ["int", 0], ["minp", 0], ["def", 0], ["mints", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["minp", 0], ["split", 0], ["n", 0], ["k", 0], ["mints", 0], ["a", 0], ["list", 0], ["mints", 0], ["i", 0], ["0", 0], ["c", 0], ["0", 0], ["k", 0], ["1", 0], ["while", 0], ["i", 0], ["n", 0], ["j", 0], ["i", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["a", 0], ["j", 0], ["a", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["i", 0], ["1", 0], ["0", 0], ["if", 0], ["j", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["j", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["else", 0], ["c", 0], ["a", 0], ["i", 0], ["2", 0], ["else", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["elif", 0], ["j", 0], ["n", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["j", 0], ["z", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["if", 0], ["c", 0], ["z", 0], ["c", 0], ["i", 0], ["z", 0], ["i", 0], ["print", 0], ["z", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["b", 0], ["a", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["1", 0], ["continue", 0], ["else", 0], ["b", 0], ["append", 0], ["a", 0], ["i", 0], ["y", 0], ["len", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["y", 0], ["if", 0], ["i", 0], ["0", 0], ["and", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["s", 0], ["a", 0], ["0", 0], ["1", 0], ["1", 0], ["elif", 0], ["i", 0], ["y", 0], ["1", 0], ["and", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["s", 0], ["b", 0], ["y", 0], ["1", 0], ["1", 0], ["1", 0], ["else", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["s", 0], ["b", 0], ["i", 0], ["1", 0], ["2", 0], ["else", 0], ["s", 0], ["b", 0], ["i", 0], ["1", 0], ["1", 0], ["x", 0], ["max", 0], ["s", 0], ["print", 0], ["s", 0], ["index", 0], ["x", 0], ["1", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["t", 0], ["0", 0], ["t", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["t", 0], ["if", 0], ["t", 0], ["i", 0], ["t", 0], ["i", 0], ["1", 0], ["p", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["t", 0], ["1", 0], ["if", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["p", 0], ["t", 0], ["i", 0], ["2", 0], ["else", 0], ["p", 0], ["t", 0], ["i", 0], ["1", 0], ["p", 0], ["t", 0], ["0", 0], ["1", 0], ["p", 0], ["t", 0], ["1", 0], ["1", 0], ["print", 0], ["p", 0], ["index", 0], ["max", 0], ["p", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lst", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["length", 0], ["lst", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["lst", 0], ["1", 0], ["if", 0], ["x", 0], ["lst", 0], ["i", 0], ["a", 0], ["append", 0], ["x", 0], ["length", 0], ["1", 0], ["d", 0], ["i", 0], ["length", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["d", 0], ["a", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["2", 0], ["d", 0], ["x", 0], ["2", 0], ["else", 0], ["d", 0], ["x", 0], ["1", 0], ["d", 0], ["a", 0], ["1", 0], ["1", 0], ["res", 0], ["min", 0], ["d", 0], ["values", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["d", 0], ["if", 0], ["d", 0], ["x", 0], ["res", 0], ["print", 0], ["x", 0], ["break", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lis", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["freq", 0], ["0", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["lis", 0], ["i", 0], ["lis", 0], ["i", 0], ["1", 0], ["ans", 0], ["append", 0], ["lis", 0], ["i", 0], ["if", 0], ["lis", 0], ["1", 0], ["ans", 0], ["1", 0], ["ans", 0], ["append", 0], ["lis", 0], ["1", 0], ["print", 0], ["ans", 0], ["freq", 0], ["l", 0], ["len", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["l", 0], ["1", 0], ["if", 0], ["ans", 0], ["i", 0], ["1", 0], ["ans", 0], ["i", 0], ["1", 0], ["freq", 0], ["ans", 0], ["i", 0], ["2", 0], ["else", 0], ["freq", 0], ["ans", 0], ["i", 0], ["1", 0], ["freq", 0], ["ans", 0], ["1", 0], ["1", 0], ["freq", 0], ["ans", 0], ["0", 0], ["1", 0], ["print", 0], ["freq", 0], ["index", 0], ["max", 0], ["freq", 0], ["import", 0], ["math", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["import", 0], ["math", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["import", 0], ["bisect", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ls", 0], ["0", 0], ["10", 0], ["5", 0], ["1", 0], ["pre", 0], ["arr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["arr", 0], ["i", 0], ["arr", 0], ["i", 0], ["1", 0], ["ls", 0], ["arr", 0], ["i", 0], ["2", 0], ["if", 0], ["arr", 0], ["i", 0], ["1", 0], ["pre", 0], ["else", 0], ["1", 0], ["pre", 0], ["arr", 0], ["i", 0], ["if", 0], ["arr", 0], ["0", 0], ["arr", 0], ["1", 0], ["ls", 0], ["arr", 0], ["1", 0], ["1", 0], ["if", 0], ["arr", 0], ["0", 0], ["arr", 0], ["1", 0], ["ls", 0], ["arr", 0], ["0", 0], ["1", 0], ["var", 0], ["ls", 0], ["index", 0], ["max", 0], ["ls", 0], ["mm", 0], ["max", 0], ["ls", 0], ["print", 0], ["ls", 0], ["4", 0], ["if", 0], ["m", 0], ["2", 0], ["if", 0], ["1", 0], ["in", 0], ["arr", 0], ["and", 0], ["2", 0], ["in", 0], ["arr", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ls", 0], ["if", 0], ["ls", 0], ["i", 0], ["mm", 0], ["print", 0], ["i", 0], ["break", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dist", 0], ["ans", 0], ["0", 0], ["k", 0], ["1", 0], ["precomp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["0", 0], ["or", 0], ["r", 0], ["i", 0], ["r", 0], ["i", 0], ["1", 0], ["dist", 0], ["append", 0], ["r", 0], ["i", 0], ["dist", 0], ["distinct", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["dist", 0], ["if", 0], ["0", 0], ["i", 0], ["len", 0], ["dist", 0], ["1", 0], ["and", 0], ["dist", 0], ["i", 0], ["1", 0], ["dist", 0], ["i", 0], ["1", 0], ["ans", 0], ["dist", 0], ["i", 0], ["2", 0], ["removing", 0], ["dist", 0], ["i", 0], ["subtracts", 0], ["2", 0], ["else", 0], ["ans", 0], ["dist", 0], ["i", 0], ["1", 0], ["u", 0], ["v", 0], ["1", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["ans", 0], ["k", 0], ["u", 0], ["u", 0], ["v", 0], ["ans", 0], ["k", 0], ["k", 0], ["print", 0], ["v", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThe Newton brothers are planning to rob a bank in the city of Alviso and want to figure out a way to escape the city’s only police car. They know that their car is faster than the police car so if they could just reach one of the highways exiting the city they will be able to speed away from the police.\n\nThe police car has a maximum speed of 160 km/h. Luckily, the brothers know where the police car will start (it’s parked at the police station). To be on the safe side they assume that the police car will start moving as soon as they leave the bank and start their car (this is when the alarm goes off).\n\nThe brothers want to find a fixed route that ensures that they are able to leave the city no matter what route the police car take and at what speed it drives. However, since the brothers are not very confident drivers they don’t want to drive faster than necessary. Luckily they have recently invested in a new hi-tech in-car police escape system that you have constructed. This system will tell them what the minimal top speed needed to escape is (and probably other useful things like what route to take).\n\nLet’s turn the clock back a bit to the time when you were constructing the escape system and focused on finding the minimal required speed. Can you get it right?\n\nYou may treat all roads as infinitesimally narrow and both cars as point objects. If the brothers ever end up at the same point (on any road or intersection) at the same time as the police car they will be caught and by Murphy’s law if there is any possibility of this happening it will happen. The two cars start simultaneously and can accelerate/decelerate instantaneously at any time to any speed below or equal to its maximum speed. They can also change roads at intersections or direction anywhere on a road instantaneously no matter what speed they are traveling at.\n\n-----Input-----\nThe first line of the input consists of three integers $n$, $m$ and $e$, where $2 \\le n \\le 100$ describe the number of intersections, $1 \\le m \\le 5000$ describes the number of roads in the city and $1 \\le e \\le n$ describes the number of highway exits. Then follow $m$ lines, each consisting of three integers $a,b,l$ such that $1 \\le a < b \\le n$ and $1 \\le l \\le 100$ describing a road of length $l$ hundred meters from intersection $a$ to intersection $b$. Then follows a line of $e$ integers, each one a number in $1, \\ldots , n$ describing which intersections are connected to highway exits. Finally there is a line with two integers $b$ and $p$ ($1 \\le b,p \\le n \\text { and } b \\neq p$) describing the intersections where the brothers and the police cars start, respectively.\n\nIt will always be possible to travel from any intersection to any other intersection. Roads are only connected at intersection points (although they may cross using bridges or tunnels at others points). Roads can be used in both directions but there cannot be more than one road between two intersections.\n\n-----Output-----\nThe minimal speed in km/h required to escape or the word IMPOSSIBLE if it is impossible. In the first case any answer with either absolute or relative error smaller than $10^{-6}$ is acceptable.\n\n-----Examples-----\nSample Input 1:\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\nSample Output 1:\nIMPOSSIBLE\n\nSample Input 2:\n3 2 1\n1 2 7\n2 3 8\n1\n2 3\nSample Output 2:\n74.6666666667\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9413"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9413", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 1], ["newton", 1], ["brothers", 1], ["are", 1], ["planning", 1], ["to", 1], ["rob", 1], ["a", 1], ["bank", 1], ["in", 1], ["the", 1], ["city", 1], ["of", 1], ["alviso", 1], ["and", 1], ["want", 1], ["to", 1], ["figure", 1], ["out", 1], ["a", 1], ["way", 1], ["to", 1], ["escape", 1], ["the", 1], ["city’s", 1], ["only", 1], ["police", 1], ["car", 1], ["they", 1], ["know", 1], ["that", 1], ["their", 1], ["car", 1], ["is", 1], ["faster", 1], ["than", 1], ["the", 1], ["police", 1], ["car", 1], ["so", 1], ["if", 1], ["they", 1], ["could", 1], ["just", 1], ["reach", 1], ["one", 1], ["of", 1], ["the", 1], ["highways", 1], ["exiting", 1], ["the", 1], ["city", 1], ["they", 1], ["will", 1], ["be", 1], ["able", 1], ["to", 1], ["speed", 1], ["away", 1], ["from", 1], ["the", 1], ["police", 1], ["the", 1], ["police", 1], ["car", 1], ["has", 1], ["a", 1], ["maximum", 1], ["speed", 1], ["of", 1], ["160", 1], ["km", 1], ["h", 1], ["luckily", 1], ["the", 1], ["brothers", 1], ["know", 1], ["where", 1], ["the", 1], ["police", 1], ["car", 1], ["will", 1], ["start", 1], ["it’s", 1], ["parked", 1], ["at", 1], ["the", 1], ["police", 1], ["station", 1], ["to", 1], ["be", 1], ["on", 1], ["the", 1], ["safe", 1], ["side", 1], ["they", 1], ["assume", 1], ["that", 1], ["the", 1], ["police", 1], ["car", 1], ["will", 1], ["start", 1], ["moving", 1], ["as", 1], ["soon", 1], ["as", 1], ["they", 1], ["leave", 1], ["the", 1], ["bank", 1], ["and", 1], ["start", 1], ["their", 1], ["car", 1], ["this", 1], ["is", 1], ["when", 1], ["the", 1], ["alarm", 1], ["goes", 1], ["off", 1], ["the", 1], ["brothers", 1], ["want", 1], ["to", 1], ["find", 1], ["a", 1], ["fixed", 1], ["route", 1], ["that", 1], ["ensures", 1], ["that", 1], ["they", 1], ["are", 1], ["able", 1], ["to", 1], ["leave", 1], ["the", 1], ["city", 1], ["no", 1], ["matter", 1], ["what", 1], ["route", 1], ["the", 1], ["police", 1], ["car", 1], ["take", 1], ["and", 1], ["at", 1], ["what", 1], ["speed", 1], ["it", 1], ["drives", 1], ["however", 1], ["since", 1], ["the", 1], ["brothers", 1], ["are", 1], ["not", 1], ["very", 1], ["confident", 1], ["drivers", 1], ["they", 1], ["don’t", 1], ["want", 1], ["to", 1], ["drive", 1], ["faster", 1], ["than", 1], ["necessary", 1], ["luckily", 1], ["they", 1], ["have", 1], ["recently", 1], ["invested", 1], ["in", 1], ["a", 1], ["new", 1], ["hi", 1], ["tech", 1], ["in", 1], ["car", 1], ["police", 1], ["escape", 1], ["system", 1], ["that", 1], ["you", 1], ["have", 1], ["constructed", 1], ["this", 1], ["system", 1], ["will", 1], ["tell", 1], ["them", 1], ["what", 1], ["the", 1], ["minimal", 1], ["top", 1], ["speed", 1], ["needed", 1], ["to", 1], ["escape", 1], ["is", 1], ["and", 1], ["probably", 1], ["other", 1], ["useful", 1], ["things", 1], ["like", 1], ["what", 1], ["route", 1], ["to", 1], ["take", 1], ["let’s", 1], ["turn", 1], ["the", 1], ["clock", 1], ["back", 1], ["a", 1], ["bit", 1], ["to", 1], ["the", 1], ["time", 1], ["when", 1], ["you", 1], ["were", 1], ["constructing", 1], ["the", 1], ["escape", 1], ["system", 1], ["and", 1], ["focused", 1], ["on", 1], ["finding", 1], ["the", 1], ["minimal", 1], ["required", 1], ["speed", 1], ["can", 1], ["you", 1], ["get", 1], ["it", 1], ["right", 1], ["you", 1], ["may", 1], ["treat", 1], ["all", 1], ["roads", 1], ["as", 1], ["infinitesimally", 1], ["narrow", 1], ["and", 1], ["both", 1], ["cars", 1], ["as", 1], ["point", 1], ["objects", 1], ["if", 1], ["the", 1], ["brothers", 1], ["ever", 1], ["end", 1], ["up", 1], ["at", 1], ["the", 1], ["same", 1], ["point", 1], ["on", 1], ["any", 1], ["road", 1], ["or", 1], ["intersection", 1], ["at", 1], ["the", 1], ["same", 1], ["time", 1], ["as", 1], ["the", 1], ["police", 1], ["car", 1], ["they", 1], ["will", 1], ["be", 1], ["caught", 1], ["and", 1], ["by", 1], ["murphy’s", 1], ["law", 1], ["if", 1], ["there", 1], ["is", 1], ["any", 1], ["possibility", 1], ["of", 1], ["this", 1], ["happening", 1], ["it", 1], ["will", 1], ["happen", 1], ["the", 1], ["two", 1], ["cars", 1], ["start", 1], ["simultaneously", 1], ["and", 1], ["can", 1], ["accelerate", 1], ["decelerate", 1], ["instantaneously", 1], ["at", 1], ["any", 1], ["time", 1], ["to", 1], ["any", 1], ["speed", 1], ["below", 1], ["or", 1], ["equal", 1], ["to", 1], ["its", 1], ["maximum", 1], ["speed", 1], ["they", 1], ["can", 1], ["also", 1], ["change", 1], ["roads", 1], ["at", 1], ["intersections", 1], ["or", 1], ["direction", 1], ["anywhere", 1], ["on", 0], ["a", 0], ["road", 0], ["instantaneously", 0], ["no", 0], ["matter", 0], ["what", 0], ["speed", 0], ["they", 0], ["are", 0], ["traveling", 0], ["at", 0], ["input", 0], ["the", 6], ["first", 1], ["line", 1], ["of", 1], ["the", 0], ["input", 0], ["consists", 0], ["of", 0], ["three", 0], ["integers", 0], ["n", 0], ["m", 0], ["and", 0], ["e", 0], ["where", 0], ["2", 0], ["le", 0], ["n", 0], ["le", 0], ["100", 0], ["describe", 0], ["the", 0], ["number", 0], ["of", 0], ["intersections", 0], ["1", 0], ["le", 0], ["m", 0], ["le", 0], ["5000", 0], ["describes", 0], ["the", 0], ["number", 0], ["of", 0], ["roads", 0], ["in", 0], ["the", 0], ["city", 0], ["and", 0], ["1", 0], ["le", 0], ["e", 0], ["le", 0], ["n", 1], ["describes", 1], ["the", 1], ["number", 1], ["of", 1], ["highway", 1], ["exits", 1], ["then", 1], ["follow", 1], ["m", 1], ["lines", 0], ["each", 0], ["consisting", 0], ["of", 0], ["three", 0], ["integers", 0], ["a", 0], ["b", 0], ["l", 0], ["such", 0], ["that", 0], ["1", 0], ["le", 0], ["a", 0], ["b", 0], ["le", 0], ["n", 0], ["and", 0], ["1", 0], ["le", 0], ["l", 0], ["le", 0], ["100", 1], ["describing", 1], ["a", 1], ["road", 1], ["of", 1], ["length", 1], ["l", 1], ["hundred", 1], ["meters", 1], ["from", 1], ["intersection", 1], ["a", 1], ["to", 1], ["intersection", 1], ["b", 1], ["then", 1], ["follows", 0], ["a", 0], ["line", 0], ["of", 0], ["e", 0], ["integers", 0], ["each", 0], ["one", 0], ["a", 0], ["number", 0], ["in", 0], ["1", 0], ["ldots", 0], ["n", 1], ["describing", 1], ["which", 1], ["intersections", 1], ["are", 1], ["connected", 1], ["to", 1], ["highway", 1], ["exits", 1], ["finally", 0], ["there", 0], ["is", 0], ["a", 0], ["line", 0], ["with", 0], ["two", 0], ["integers", 0], ["b", 0], ["and", 0], ["p", 0], ["1", 0], ["le", 0], ["b", 0], ["p", 0], ["le", 0], ["n", 0], ["text", 0], ["and", 0], ["b", 0], ["neq", 0], ["p", 1], ["describing", 1], ["the", 1], ["intersections", 1], ["where", 1], ["the", 1], ["brothers", 1], ["and", 1], ["the", 1], ["police", 1], ["cars", 1], ["start", 1], ["respectively", 1], ["it", 1], ["will", 1], ["always", 1], ["be", 1], ["possible", 1], ["to", 1], ["travel", 1], ["from", 1], ["any", 1], ["intersection", 1], ["to", 1], ["any", 1], ["other", 1], ["intersection", 1], ["roads", 1], ["are", 1], ["only", 1], ["connected", 1], ["at", 1], ["intersection", 1], ["points", 1], ["although", 1], ["they", 1], ["may", 1], ["cross", 1], ["using", 1], ["bridges", 1], ["or", 1], ["tunnels", 1], ["at", 1], ["others", 1], ["points", 1], ["roads", 1], ["can", 1], ["be", 1], ["used", 1], ["in", 1], ["both", 1], ["directions", 0], ["but", 0], ["there", 0], ["cannot", 0], ["be", 0], ["more", 0], ["than", 0], ["one", 0], ["road", 0], ["between", 0], ["two", 0], ["intersections", 0], ["output", 0], ["the", 1], ["minimal", 1], ["speed", 1], ["in", 1], ["km", 1], ["h", 1], ["required", 1], ["to", 1], ["escape", 1], ["or", 1], ["the", 1], ["word", 1], ["impossible", 1], ["if", 1], ["it", 1], ["is", 1], ["impossible", 1], ["in", 1], ["the", 1], ["first", 0], ["case", 0], ["any", 0], ["answer", 0], ["with", 0], ["either", 0], ["absolute", 0], ["or", 0], ["relative", 0], ["error", 0], ["smaller", 0], ["than", 0], ["10", 0], ["6", 0], ["is", 0], ["acceptable", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["3", 0], ["2", 0], ["1", 0], ["1", 0], ["2", 0], ["7", 0], ["2", 0], ["3", 0], ["8", 0], ["1", 0], ["3", 0], ["2", 0], ["sample", 0], ["output", 0], ["1", 0], ["impossible", 0], ["sample", 0], ["input", 0], ["2", 0], ["3", 0], ["2", 0], ["1", 0], ["1", 0], ["2", 0], ["7", 0], ["2", 0], ["3", 0], ["8", 0], ["1", 0], ["2", 0], ["3", 0], ["sample", 0], ["output", 0], ["2", 0], ["74", 0], ["6666666667", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7152103559870551, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7138619201725999, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.834920634920635, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8335978835978837, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7152103559870551, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7138619201725999, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.834920634920635, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8335978835978837, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nProfessor Zac is trying to finish a collection of tasks during the first week at the start of the term. He knows precisely how long each task will take, down to the millisecond. Unfortunately, it is also Frosh Week. Zac’s office window has a clear view of the stage where loud music is played. He cannot focus on any task when music is blaring.\n\nThe event organizers are also very precise. They supply Zac with intervals of time when music will not be playing. These intervals are specified by their start and end times down to the millisecond.\n\nEach task that Zac completes must be completed in one quiet interval. He cannot pause working on a task when music plays (he loses his train of thought). Interstingly, the lengths of the tasks and quiet intervals are such that it is impossible to finish more than one task per quiet interval!\n\nGiven a list of times $t_ i$ (in milliseconds) that each task will take and a list of times $\\ell _ j$ (in milliseconds) specifying the lengths of the intervals when no music is being played, what is the maximum number of tasks that Zac can complete?\n\n-----Input-----\nThe first line of input contains a pair of integers $n$ and $m$, where $n$ is the number of tasks and $m$ is the number of time intervals when no music is played. The second line consists of a list of integers $t_1, t_2, \\ldots , t_ n$ indicating the length of time of each task. The final line consists of a list of times $\\ell _1, \\ell _2, \\ldots , \\ell _ m$ indicating the length of time of each quiet interval when Zac is at work this week.\n\nYou may assume that $1 \\leq n,m \\leq 200000$ and $100000 \\leq t_ i, \\ell _ j \\leq 199999$ for each task $i$ and each quiet interval $j$.\n\n-----Output-----\nOutput consists of a single line containing a single integer indicating the number of tasks that Zac can accomplish from his list during this first week.\n\n-----Examples-----\nSample Input 1:\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\nSample Output 1:\n4\n\nSample Input 2:\n4 4\n180000 185000 199999 100000\n199999 180000 170000 120000\nSample Output 2:\n3\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5660"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5660", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["professor", 1], ["zac", 1], ["is", 1], ["trying", 1], ["to", 1], ["finish", 1], ["a", 1], ["collection", 1], ["of", 1], ["tasks", 1], ["during", 1], ["the", 1], ["first", 1], ["week", 1], ["at", 1], ["the", 1], ["start", 1], ["of", 1], ["the", 1], ["term", 1], ["he", 1], ["knows", 1], ["precisely", 1], ["how", 1], ["long", 1], ["each", 1], ["task", 1], ["will", 1], ["take", 1], ["down", 1], ["to", 1], ["the", 1], ["millisecond", 1], ["unfortunately", 1], ["it", 1], ["is", 1], ["also", 1], ["frosh", 1], ["week", 1], ["zac’s", 1], ["office", 1], ["window", 1], ["has", 1], ["a", 1], ["clear", 1], ["view", 1], ["of", 1], ["the", 1], ["stage", 1], ["where", 1], ["loud", 1], ["music", 1], ["is", 1], ["played", 1], ["he", 1], ["cannot", 1], ["focus", 1], ["on", 1], ["any", 1], ["task", 1], ["when", 1], ["music", 1], ["is", 1], ["blaring", 1], ["the", 1], ["event", 1], ["organizers", 1], ["are", 1], ["also", 1], ["very", 1], ["precise", 1], ["they", 1], ["supply", 1], ["zac", 1], ["with", 1], ["intervals", 1], ["of", 1], ["time", 1], ["when", 1], ["music", 1], ["will", 1], ["not", 1], ["be", 1], ["playing", 1], ["these", 1], ["intervals", 1], ["are", 1], ["specified", 1], ["by", 1], ["their", 1], ["start", 1], ["and", 1], ["end", 1], ["times", 1], ["down", 1], ["to", 1], ["the", 1], ["millisecond", 1], ["each", 1], ["task", 1], ["that", 1], ["zac", 1], ["completes", 1], ["must", 1], ["be", 1], ["completed", 1], ["in", 1], ["one", 1], ["quiet", 1], ["interval", 1], ["he", 1], ["cannot", 1], ["pause", 1], ["working", 1], ["on", 1], ["a", 1], ["task", 1], ["when", 1], ["music", 1], ["plays", 1], ["he", 1], ["loses", 1], ["his", 1], ["train", 1], ["of", 1], ["thought", 1], ["interstingly", 1], ["the", 1], ["lengths", 1], ["of", 1], ["the", 1], ["tasks", 1], ["and", 1], ["quiet", 1], ["intervals", 1], ["are", 1], ["such", 1], ["that", 1], ["it", 1], ["is", 1], ["impossible", 1], ["to", 1], ["finish", 1], ["more", 1], ["than", 1], ["one", 1], ["task", 1], ["per", 1], ["quiet", 1], ["interval", 1], ["given", 1], ["a", 1], ["list", 1], ["of", 1], ["times", 1], ["t", 1], ["i", 1], ["in", 1], ["milliseconds", 1], ["that", 1], ["each", 1], ["task", 1], ["will", 1], ["take", 1], ["and", 1], ["a", 1], ["list", 1], ["of", 1], ["times", 1], ["ell", 1], ["j", 1], ["in", 1], ["milliseconds", 1], ["specifying", 1], ["the", 1], ["lengths", 1], ["of", 1], ["the", 1], ["intervals", 1], ["when", 1], ["no", 1], ["music", 1], ["is", 1], ["being", 1], ["played", 0], ["what", 0], ["is", 0], ["the", 0], ["maximum", 0], ["number", 0], ["of", 0], ["tasks", 0], ["that", 0], ["zac", 0], ["can", 0], ["complete", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["a", 1], ["pair", 1], ["of", 1], ["integers", 1], ["n", 1], ["and", 1], ["m", 2], ["where", 7], ["n", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["tasks", 1], ["and", 1], ["m", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["time", 1], ["intervals", 1], ["when", 1], ["no", 1], ["music", 1], ["is", 1], ["played", 1], ["the", 1], ["second", 1], ["line", 1], ["consists", 1], ["of", 1], ["a", 1], ["list", 1], ["of", 1], ["integers", 1], ["t", 1], ["1", 1], ["t", 1], ["2", 1], ["ldots", 1], ["t", 1], ["n", 1], ["indicating", 1], ["the", 1], ["length", 1], ["of", 1], ["time", 1], ["of", 1], ["each", 1], ["task", 1], ["the", 1], ["final", 1], ["line", 1], ["consists", 1], ["of", 1], ["a", 1], ["list", 1], ["of", 1], ["times", 1], ["ell", 1], ["1", 1], ["ell", 1], ["2", 1], ["ldots", 1], ["ell", 1], ["m", 1], ["indicating", 1], ["the", 1], ["length", 1], ["of", 1], ["time", 1], ["of", 1], ["each", 1], ["quiet", 1], ["interval", 1], ["when", 1], ["zac", 1], ["is", 1], ["at", 1], ["work", 0], ["this", 0], ["week", 0], ["you", 0], ["may", 0], ["assume", 0], ["that", 0], ["1", 0], ["leq", 0], ["n", 0], ["m", 0], ["leq", 0], ["200000", 0], ["and", 0], ["100000", 0], ["leq", 0], ["t", 0], ["i", 0], ["ell", 0], ["j", 0], ["leq", 0], ["199999", 0], ["for", 0], ["each", 0], ["task", 0], ["i", 0], ["and", 0], ["each", 0], ["quiet", 0], ["interval", 0], ["j", 0], ["output", 0], ["output", 1], ["consists", 1], ["of", 1], ["a", 1], ["single", 1], ["line", 1], ["containing", 1], ["a", 1], ["single", 1], ["integer", 1], ["indicating", 1], ["the", 1], ["number", 1], ["of", 1], ["tasks", 0], ["that", 0], ["zac", 0], ["can", 0], ["accomplish", 0], ["from", 0], ["his", 0], ["list", 0], ["during", 0], ["this", 0], ["first", 0], ["week", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["5", 0], ["4", 0], ["150000", 0], ["100000", 0], ["160000", 0], ["100000", 0], ["180000", 0], ["190000", 0], ["170000", 0], ["140000", 0], ["160000", 0], ["sample", 0], ["output", 0], ["1", 0], ["4", 0], ["sample", 0], ["input", 0], ["2", 0], ["4", 0], ["4", 0], ["180000", 0], ["185000", 0], ["199999", 0], ["100000", 0], ["199999", 0], ["180000", 0], ["170000", 0], ["120000", 0], ["sample", 0], ["output", 0], ["2", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7553191489361702, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7517097264437689, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8247422680412371, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8247422680412371, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7553191489361702, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7517097264437689, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8247422680412371, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8247422680412371, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nIn Arcady's garden there grows a peculiar apple-tree that fruits one time per year. Its peculiarity can be explained in following way: there are n inflorescences, numbered from 1 to n. Inflorescence number 1 is situated near base of tree and any other inflorescence with number i (i > 1) is situated at the top of branch, which bottom is p_{i}-th inflorescence and p_{i} < i.\n\nOnce tree starts fruiting, there appears exactly one apple in each inflorescence. The same moment as apples appear, they start to roll down along branches to the very base of tree. Each second all apples, except ones in first inflorescence simultaneously roll down one branch closer to tree base, e.g. apple in a-th inflorescence gets to p_{a}-th inflorescence. Apples that end up in first inflorescence are gathered by Arcady in exactly the same moment. Second peculiarity of this tree is that once two apples are in same inflorescence they annihilate. This happens with each pair of apples, e.g. if there are 5 apples in same inflorescence in same time, only one will not be annihilated and if there are 8 apples, all apples will be annihilated. Thus, there can be no more than one apple in each inflorescence in each moment of time.\n\nHelp Arcady with counting number of apples he will be able to collect from first inflorescence during one harvest.\n\n\n-----Input-----\n\nFirst line of input contains single integer number n (2 ≤ n ≤ 100 000)  — number of inflorescences.\n\nSecond line of input contains sequence of n - 1 integer numbers p_2, p_3, ..., p_{n} (1 ≤ p_{i} < i), where p_{i} is number of inflorescence into which the apple from i-th inflorescence rolls down.\n\n\n-----Output-----\n\nSingle line of output should contain one integer number: amount of apples that Arcady will be able to collect from first inflorescence during one harvest.\n\n\n-----Examples-----\nInput\n3\n1 1\n\nOutput\n1\n\nInput\n5\n1 2 2 2\n\nOutput\n3\n\nInput\n18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn first example Arcady will be able to collect only one apple, initially situated in 1st inflorescence. In next second apples from 2nd and 3rd inflorescences will roll down and annihilate, and Arcady won't be able to collect them.\n\nIn the second example Arcady will be able to collect 3 apples. First one is one initially situated in first inflorescence. In a second apple from 2nd inflorescence will roll down to 1st (Arcady will collect it) and apples from 3rd, 4th, 5th inflorescences will roll down to 2nd. Two of them will annihilate and one not annihilated will roll down from 2-nd inflorescence to 1st one in the next second and Arcady will collect it.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\np = [-1, 0] + [int(x) for x in input().split()]\nh = [0] * (n+1)\ncount = [0] * n\ncount[0] = 1\nmax_h = 0\nfor i in range(2, n+1):\n\th[i] = h[p[i]]+1\n\tcount[h[i]]+=1\n\tmax_h = max(max_h,h[i])\nans = 0\nfor i in range(max_h+1):\n\tans += count[i]%2\nprint(ans)\n", "import sys, math\n\n#f = open('input/input_2', 'r')\nf = sys.stdin\n\nN = int(f.readline())\npl = list(map(int, f.readline().split()))\n\ne = [[] for _ in range(N+1)]\nlv = [0] * (N+1)\nfor i, p in enumerate(pl):\n\te[p].append(i+2)\n\nc = [0] * (N+1)\n\nfor i in range(1, N+1):\n\tc[lv[i]] = 1 - c[lv[i]]\n\tfor j in e[i]:\n\t\tlv[j] = lv[i]+1\n\nprint(sum(c))\n", "# python3\n\n\ndef main():\n\tn = int(input())\n\tparent = tuple(int(x) - 1 for x in input().split())\n\n\tdepth = [0]\n\tfor v in range(n - 1):\n\t\tdepth.append(depth[parent[v]] + 1)\n\n\tparity = [0] * n\n\tfor d in depth:\n\t\tparity[d] ^= 1\n\n\tprint(sum(parity))\n\n\nmain()\n", "n = int(input().strip())\ncount = [0]*n\nparams = [-1, 0]+list(map(int, input().split()))\ni = 2\nlayer = [0]*(n+1)\nnodes_in_layer = {}\nwhile i <= n:\n\tlayer[i] = layer[params[i]] + 1\n\tcount[params[i]] += 1\n\tif nodes_in_layer.get(layer[i]) is None:\n\t\tnodes_in_layer.setdefault(layer[i], 1)\n\telse:\n\t\tnodes_in_layer[layer[i]] += 1\n\ti += 1\nmax_layer = max(layer)\nresult = 1\nfor i in range(1, max_layer+1):\n\tresult += nodes_in_layer[i] % 2\n\nprint(result)\n", "import collections\nn = int(input())\na = list(map(int, input().split()))\n\nto = {}\nfor i, node in enumerate(a):\n\tto[i+2] = node\n\nlayers = collections.defaultdict(list)\nfor k, v in to.items():\n\tlayers[v].append(k)\n\nqueue = [1]\nans = 0\nwhile queue:\n\tans += len(queue)%2\n\tn = len(queue)\n\tfor _ in range(n):\n\t\tnode = queue.pop(0)\n\t\tif node in layers:\n\t\t\tqueue.extend(layers[node])\n\nprint(ans)\n", "import threading\nfrom sys import setrecursionlimit, exc_info\n\n\ndef main():\n\ttry:\n\t\tn = int(input())\n\t\tpar = list(map(int, input().split()))\n\n\t\tgr = [[] for i in range(n)]\n\t\tfor i in range(n - 1):\n\t\t\tgr[par[i] - 1].append(i + 1)\n\n\t\tcnt = [0] * n\n\n\n\n\t\tdef dfs(v, depth=0):\n\t\t\tcnt[depth] += 1\n\t\t\twhile depth >= len(cnt):\n\t\t\t\tpass\n\t\t\tfor u in gr[v]:\n\t\t\t\tdfs(u, depth + 1)\n\n\n\n\t\tdfs(0)\n\t\tprint(sum([x % 2 for x in cnt]))\n\texcept:\n\t\tprint(exc_info()[0])\n\n\nsetrecursionlimit(100000000)\nthreading.stack_size(102400000)\nthread = threading.Thread(target=main)\nthread.start()\n", "n=int(input())\na=[0,0]+list(map(int,input().split()))\nb=[0]*(n+1);c=[0]*(n+1)\nfor i in range(2,n+1):\n\tif a[i]==1:\n\t\tb[i]=1\nfor i in range(2,n+1):\n\tcou=0;s=i\n\twhile b[s]==0:  \n\t\tcou+=1;s=a[s]\n\tb[i]=cou+b[s]\nfor i in b[2:]:\n\tc[i]+=1\nans=1\nfor i in c:\n\tans+=i%2\nprint(ans)\n", "n=int(input())\n\n\n\n\n\na=list(map(int,input().split()))\n\ndp=[0,]\n\ncount=[0 for i in range(n)]\n\ncount[0]+=1\n\nfor i in range(n-1):\n\n\tdp.append(dp[a[i]-1]+1)\n\n\tcount[dp[-1]]+=1\n\nans=0\n\nfor i in range(n):\n\n\tans+=count[i]%2\n\nprint(ans)\n\n\n\n# Made By Mostafa_Khaled\n", "def bfs(d,n):\n\tqueue = [[1,0]]\n\tres = 0\n\tmark = {i:False for i in range(1,n+1)}\n\tmark[1]=True\n\tres = [0 for i in range(n)]\n\twhile queue:\n\t\tq = queue.pop(0)\n\t\tx,level = q[0],q[1]\n\t\tlev = level+1\n\t\tres[level]=(res[level]+1)%2\n\t\tfor i,y in enumerate(d[x]):\n\t\t\tif mark[y]==False:\n\t\t\t\tmark[y]=True\n\t\t\t\tqueue.append([y,lev])\n\tprint(sum(res))\nn = int(input())\nlst = list(map(int,input().split()))\nd = {1:[]}\nfor i,x in enumerate(lst):\n\td[x].append(i+2)\n\td[i+2]=[]\nbfs(d,n)\n", "from sys import setrecursionlimit\n\na = int(input())\n\nsetrecursionlimit(200000)\n\nh = [[] for i in range(a)]\ns = list(map(int, input().split()))\nfor i in range(a - 1):\n\th[s[i] - 1].append(i + 1)\n\nmetka = [False for i in range(a)]\ndat = [0 for i in range(a)]\ndis = [0 for i in range(a)]\n\n\ndef dfs(x):\n\tstack = []\n\tstack.append(x)\n\twhile stack:\n\t\tx = stack.pop(-1)\n\t\tdat[dis[x]] += 1\n\t\tmetka[x] = True\n\t\tfor i in h[x]:\n\t\t\tif not metka[i]:\n\t\t\t\tstack.append(i)\n\t\t\t\tdis[i] = dis[x] + 1\n\n\ndfs(0)\n\nprint(sum([x % 2 for x in dat]))\n", "# 930A\nimport collections\ndef do():\n\tn = int(input())\n\tnums = [0] + [int(c)-1 for c in input().split(\" \")]\n\tg = collections.defaultdict(list)\n\tfor i, j in enumerate(nums):\n\t\tif i != j:\n\t\t\tg[j].append(i)  # children\n\tcur = [0]\n\tres = 0\n\twhile cur:\n\t\tres += len(cur) % 2\n\t\tnext = []\n\t\tfor c in cur:\n\t\t\tfor nei in g[c]:\n\t\t\t\tnext.append(nei)\n\t\tcur = next\n\treturn res\n\nprint(do())\n", "n = int(input())\n\npar = [None] + [int(i) - 1 for i in input().split()]\nchildren = [[] for _ in range(n)]\nfor child in range(1, n):\n\tchildren[par[child]].append(child)\n\ncount = 0\nnodesAtCurrLevel = [0]\n\nwhile nodesAtCurrLevel:\n\tcount += len(nodesAtCurrLevel) % 2\n\t\n\tnodesAtNextLevel = []\n\tfor node in nodesAtCurrLevel:\n\t\tnodesAtNextLevel += children[node]\n\t\n\tnodesAtCurrLevel = nodesAtNextLevel\n\nprint(count)\n", "import sys\ninput = sys.stdin.readline\nfrom collections import deque, Counter\n\ndef bfs():\n\tq = deque([0])\n\tdist = [-1]*n\n\tdist[0] = 0\n\t\n\twhile q:\n\t\tv = q.popleft()\n\t\t\n\t\tfor nv in G[v]:\n\t\t\tif dist[nv]==-1:\n\t\t\t\tdist[nv] = dist[v]+1\n\t\t\t\tq.append(nv)\n\t\n\treturn dist\n\nn = int(input())\np = list(map(int, input().split()))\nG = [[] for _ in range(n)]\n\nfor i in range(n-1):\n\tG[i+1].append(p[i]-1)\n\tG[p[i]-1].append(i+1)\n\ndist = bfs()\ncnt = Counter(dist)\nans = 0\n\nfor v in cnt.values():\n\tans += v%2\n\nprint(ans)\n", "n = int(input())\np = [-1, 0] + list(map(int, input().split()))\nh = [0] * (n+1)\ncnt = [1] + [0] * n\nfor i in range(2, n+1):\n\th[i] = h[p[i]] + 1\n\tcnt[h[i]] += 1\nres = 0\nfor i in range(max(h)+1):\n\tif cnt[i] % 2 == 1:\n\t\tres += 1\nprint(res)\n", "n = int(input())\na = [int(e) for e in input().split()]\nd = {1:0}\nfor k, v in enumerate(a):\n\td[k+2] = d[v] + 1\nd2 = {}\nfor k, v in d.items():\n\td2[v] = d2.get(v,0) + 1\ns = sum([v%2 for v in d2.values()])\nprint(s)\n", "\nclass Node: \n\tdef __init__(self, id):\n\t\tself.id = id\n\t\tself.parent = -1\n\t\tself.children = set()\n\t\tself.apples = 1\n\nnodes = dict()\n\nnb_nodes = int(input())\nfor i in range(nb_nodes): \n\tnodes[i+1] = Node(i+1)\n\nparents = [int(i) for i in input().split(\" \")]\n\nbase = 2\nfor p in parents: \n\tnodes[base].parent = p\n\tnodes[p].children.add(base)\n\tbase += 1\n\n#for n in nodes.values(): \n#    print(\"%d -> %s\" % (n.id, n.children))\n\t\nrecolt = 0\ntodo = { 1 }\nwhile len(todo) > 0: \n\trecolt += len(todo) % 2\n\tnext = set()\n\tfor t in todo: \n\t\tnext |= nodes[t].children\n\ttodo = next\n\t\t\nprint(recolt)\n", "n = int(input())\nparent = tuple(int(x) - 1 for x in input().split())\n \ndepth = [0]\nfor v in range(n - 1):\n\tdepth.append(depth[parent[v]] + 1)\n \nparity = [0] * n\nfor d in depth:\n\tparity[d] ^= 1\n \nprint(sum(parity))\n", "n = int(input())\nparent = tuple(int(x) - 1 for x in input().split())\n\ndepth = [0]\nfor v in range(n - 1):\n\tdepth.append(depth[parent[v]] + 1)\n\nparity = [0] * n\nfor d in depth:\n\tparity[d] ^= 1\n\nprint(sum(parity))\n", "n = int(input())\nparent = tuple(int(x) - 1 for x in input().split())\n \ndepth = [0]\nfor v in range(n - 1):\n\tdepth.append(depth[parent[v]] + 1)\n \n# parity = [0] * n\n# for d in depth:\n#     parity[d] ^= 1\n\nfreq = {}\n\nfor d in depth:\n\tif d in freq:\n\t\tfreq[d] += 1\n\telse:\n\t\tfreq[d] = 1\n\nres = 0\nfor d in freq:\n\tres+= freq[d]%2\nprint(res)\n \n# print(sum(parity))\n", "inflos = int(input())\nparent = tuple(int(x) - 1 for x in input().split())\n \ndepth = [0]\nfor v in range(inflos - 1):\n\tdepth.append(depth[parent[v]] + 1)\n\nfreq = {}\n\nfor d in depth:\n\tif d in freq:\n\t\tfreq[d] += 1\n\telse:\n\t\tfreq[d] = 1\nres = 0\nfor d in freq:\n\tres+= freq[d]%2\nprint(res)\n", "inflos = int(input())\nroots = [int(x) - 1 for x in input().split()]\n \n\ndepth = [0]\nfor v in range(inflos - 1):\n\tdepth.append(depth[roots[v]] + 1)\n\nfreq = {}\n\nfor d in depth:\n\tif d in freq:\n\t\tfreq[d] += 1\n\telse:\n\t\tfreq[d] = 1\nres = 0\nfor d in freq:\n\tres+= freq[d]%2\nprint(res)\n", "inflos = int(input())\nroots = input()\nroots = [int(x) - 1 for x in roots.split()]\n \n\ndepth = [0]\nfor v in range(inflos - 1):\n\tdepth.append(depth[roots[v]] + 1)\n\nfreq = {}\n\nfor d in depth:\n\tif d in freq:\n\t\tfreq[d] += 1\n\telse:\n\t\tfreq[d] = 1\nres = 0\nfor d in freq:\n\tres+= freq[d]%2\nprint(res)\n", "inflos = int(input())\nroots = input()\nroots = [int(x) - 1 for x in roots.split()]\n \n\nson = [0]\nfor v in range(inflos - 1):\n\tson.append(son[roots[v]] + 1)\n\nfreq = {}\n\nfor d in son:\n\tif d in freq:\n\t\tfreq[d] += 1\n\telse:\n\t\tfreq[d] = 1\nres = 0\nfor d in freq:\n\tres+= freq[d]%2\nprint(res)\n", "import sys\nimport bisect\n# from collections import deque\n\nRi = lambda : [int(x) for x in sys.stdin.readline().split()]\nri = lambda : sys.stdin.readline().strip()\n \ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 30  \nMOD = 998244353\n\nn = int(ri())\na  = Ri()\n\ndic = {}\nfor i in range(len(a)):\n\tif a[i] == 1:\n\t\tdic[i+2] = 1\n\telse:\n\t\ttime = dic[a[i]]\n\t\tdic[i+2] = time+1\ncnt = 0\ntime = {}\nfor i in dic:\n\tif dic[i] in time:\n\t\ttime[dic[i]]+=1\n\telse:\n\t\ttime[dic[i]] = 1\n\t\nfor i in time:\n\tcnt +=(time[i]%2)\nprint(cnt+1)\n", "n = int(input())\nparent = tuple(int(x)-1 for x in input().split())\n \ndepth = [0]\nfor v in range(n - 1):\n\tdepth.append(depth[parent[v]] + 1)\n \n\nfreq = {}\n \nfor d in depth:\n\tif d in freq:\n\t\tfreq[d] += 1\n\telse:\n\t\tfreq[d] = 1\n \nres = 0\nfor d in freq:\n\tres+= freq[d]%2\nprint(res)\n"], "id": "id8035"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8035", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["in", 1], ["arcady", 1], ["s", 1], ["garden", 1], ["there", 1], ["grows", 1], ["a", 1], ["peculiar", 1], ["apple", 1], ["tree", 1], ["that", 1], ["fruits", 1], ["one", 1], ["time", 1], ["per", 1], ["year", 1], ["its", 1], ["peculiarity", 1], ["can", 1], ["be", 1], ["explained", 1], ["in", 1], ["following", 1], ["way", 1], ["there", 1], ["are", 1], ["n", 1], ["inflorescences", 1], ["numbered", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["inflorescence", 1], ["number", 1], ["1", 1], ["is", 1], ["situated", 1], ["near", 1], ["base", 1], ["of", 1], ["tree", 1], ["and", 1], ["any", 1], ["other", 1], ["inflorescence", 1], ["with", 1], ["number", 1], ["i", 1], ["i", 0], ["1", 0], ["is", 0], ["situated", 0], ["at", 0], ["the", 0], ["top", 0], ["of", 0], ["branch", 0], ["which", 0], ["bottom", 0], ["is", 0], ["p", 0], ["i", 0], ["th", 0], ["inflorescence", 0], ["and", 0], ["p", 0], ["i", 0], ["i", 1], ["once", 1], ["tree", 1], ["starts", 1], ["fruiting", 1], ["there", 1], ["appears", 1], ["exactly", 1], ["one", 1], ["apple", 1], ["in", 1], ["each", 1], ["inflorescence", 1], ["the", 1], ["same", 1], ["moment", 1], ["as", 1], ["apples", 1], ["appear", 1], ["they", 1], ["start", 1], ["to", 1], ["roll", 1], ["down", 1], ["along", 1], ["branches", 1], ["to", 1], ["the", 1], ["very", 1], ["base", 1], ["of", 1], ["tree", 1], ["each", 1], ["second", 1], ["all", 1], ["apples", 1], ["except", 1], ["ones", 1], ["in", 1], ["first", 1], ["inflorescence", 1], ["simultaneously", 1], ["roll", 1], ["down", 1], ["one", 1], ["branch", 1], ["closer", 1], ["to", 0], ["tree", 0], ["base", 0], ["e", 0], ["g", 0], ["apple", 0], ["in", 0], ["a", 0], ["th", 0], ["inflorescence", 0], ["gets", 0], ["to", 0], ["p", 0], ["a", 0], ["th", 1], ["inflorescence", 1], ["apples", 1], ["that", 1], ["end", 1], ["up", 1], ["in", 1], ["first", 1], ["inflorescence", 1], ["are", 1], ["gathered", 1], ["by", 1], ["arcady", 1], ["in", 1], ["exactly", 1], ["the", 1], ["same", 1], ["moment", 1], ["second", 1], ["peculiarity", 1], ["of", 1], ["this", 1], ["tree", 1], ["is", 1], ["that", 1], ["once", 1], ["two", 1], ["apples", 1], ["are", 1], ["in", 1], ["same", 1], ["inflorescence", 1], ["they", 1], ["annihilate", 1], ["this", 1], ["happens", 1], ["with", 1], ["each", 1], ["pair", 1], ["of", 1], ["apples", 1], ["e", 1], ["g", 1], ["if", 1], ["there", 1], ["are", 1], ["5", 1], ["apples", 1], ["in", 1], ["same", 1], ["inflorescence", 1], ["in", 1], ["same", 1], ["time", 1], ["only", 1], ["one", 1], ["will", 1], ["not", 1], ["be", 1], ["annihilated", 1], ["and", 1], ["if", 1], ["there", 1], ["are", 1], ["8", 1], ["apples", 1], ["all", 1], ["apples", 1], ["will", 1], ["be", 1], ["annihilated", 1], ["thus", 1], ["there", 1], ["can", 1], ["be", 1], ["no", 1], ["more", 1], ["than", 1], ["one", 1], ["apple", 1], ["in", 1], ["each", 1], ["inflorescence", 1], ["in", 1], ["each", 1], ["moment", 1], ["of", 1], ["time", 1], ["help", 1], ["arcady", 1], ["with", 1], ["counting", 1], ["number", 1], ["of", 1], ["apples", 1], ["he", 0], ["will", 0], ["be", 0], ["able", 0], ["to", 0], ["collect", 0], ["from", 0], ["first", 0], ["inflorescence", 0], ["during", 0], ["one", 0], ["harvest", 0], ["input", 0], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["single", 1], ["integer", 1], ["number", 1], ["n", 1], ["2", 1], ["≤", 1], ["n", 1], ["≤", 1], ["100", 1], ["000", 1], ["—", 1], ["number", 1], ["of", 1], ["inflorescences", 0], ["second", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["sequence", 0], ["of", 0], ["n", 0], ["1", 0], ["integer", 0], ["numbers", 0], ["p", 0], ["2", 0], ["p", 0], ["3", 0], ["p", 0], ["n", 0], ["1", 0], ["≤", 0], ["p", 0], ["i", 0], ["i", 0], ["where", 0], ["p", 0], ["i", 0], ["is", 1], ["number", 1], ["of", 0], ["inflorescence", 0], ["into", 0], ["which", 0], ["the", 0], ["apple", 0], ["from", 0], ["i", 0], ["th", 0], ["inflorescence", 0], ["rolls", 0], ["down", 0], ["output", 0], ["single", 1], ["line", 1], ["of", 1], ["output", 1], ["should", 1], ["contain", 1], ["one", 1], ["integer", 1], ["number", 1], ["amount", 1], ["of", 1], ["apples", 1], ["that", 1], ["arcady", 0], ["will", 0], ["be", 0], ["able", 0], ["to", 0], ["collect", 0], ["from", 0], ["first", 0], ["inflorescence", 0], ["during", 0], ["one", 0], ["harvest", 0], ["examples", 0], ["input", 0], ["3", 0], ["1", 0], ["1", 0], ["output", 0], ["1", 0], ["input", 0], ["5", 0], ["1", 0], ["2", 0], ["2", 0], ["2", 0], ["output", 0], ["3", 0], ["input", 0], ["18", 0], ["1", 0], ["1", 0], ["1", 0], ["4", 0], ["4", 0], ["3", 0], ["2", 0], ["2", 0], ["2", 0], ["10", 0], ["8", 0], ["9", 0], ["9", 0], ["9", 0], ["10", 0], ["10", 0], ["4", 0], ["output", 0], ["4", 0], ["note", 0], ["in", 1], ["first", 1], ["example", 1], ["arcady", 1], ["will", 1], ["be", 1], ["able", 1], ["to", 1], ["collect", 1], ["only", 1], ["one", 1], ["apple", 1], ["initially", 1], ["situated", 1], ["in", 1], ["1st", 1], ["inflorescence", 1], ["in", 1], ["next", 1], ["second", 1], ["apples", 1], ["from", 1], ["2nd", 1], ["and", 1], ["3rd", 1], ["inflorescences", 1], ["will", 1], ["roll", 1], ["down", 1], ["and", 1], ["annihilate", 1], ["and", 1], ["arcady", 1], ["won", 1], ["t", 1], ["be", 1], ["able", 1], ["to", 1], ["collect", 1], ["them", 1], ["in", 1], ["the", 1], ["second", 1], ["example", 1], ["arcady", 1], ["will", 1], ["be", 1], ["able", 1], ["to", 1], ["collect", 1], ["3", 1], ["apples", 1], ["first", 1], ["one", 1], ["is", 1], ["one", 1], ["initially", 1], ["situated", 1], ["in", 1], ["first", 1], ["inflorescence", 1], ["in", 1], ["a", 1], ["second", 1], ["apple", 1], ["from", 1], ["2nd", 1], ["inflorescence", 1], ["will", 1], ["roll", 1], ["down", 1], ["to", 1], ["1st", 1], ["arcady", 1], ["will", 1], ["collect", 1], ["it", 1], ["and", 1], ["apples", 1], ["from", 1], ["3rd", 1], ["4th", 1], ["5th", 1], ["inflorescences", 1], ["will", 1], ["roll", 1], ["down", 1], ["to", 1], ["2nd", 1], ["two", 1], ["of", 1], ["them", 1], ["will", 1], ["annihilate", 1], ["and", 1], ["one", 1], ["not", 1], ["annihilated", 1], ["will", 1], ["roll", 1], ["down", 1], ["from", 1], ["2", 1], ["nd", 1], ["inflorescence", 1], ["to", 0], ["1st", 0], ["one", 0], ["in", 0], ["the", 0], ["next", 0], ["second", 0], ["and", 0], ["arcady", 0], ["will", 0], ["collect", 0], ["it", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6940928270042194, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6940928270042194, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8497942386831275, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8497942386831275, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6940928270042194, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6940928270042194, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8497942386831275, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8497942386831275, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["p", 0], ["1", 0], ["0", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["h", 0], ["0", 0], ["n", 0], ["1", 0], ["count", 0], ["0", 0], ["n", 0], ["count", 0], ["0", 0], ["1", 0], ["max", 0], ["h", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["h", 0], ["i", 0], ["h", 0], ["p", 0], ["i", 0], ["1", 0], ["count", 0], ["h", 0], ["i", 0], ["1", 0], ["max", 0], ["h", 0], ["max", 0], ["max", 0], ["h", 0], ["h", 0], ["i", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["max", 0], ["h", 0], ["1", 0], ["ans", 0], ["count", 0], ["i", 0], ["2", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["math", 0], ["f", 0], ["open", 0], ["input", 0], ["input", 0], ["2", 0], ["r", 0], ["f", 0], ["sys", 0], ["stdin", 0], ["n", 0], ["int", 0], ["f", 0], ["readline", 0], ["pl", 0], ["list", 0], ["map", 0], ["int", 0], ["f", 0], ["readline", 0], ["split", 0], ["e", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["lv", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["p", 0], ["in", 0], ["enumerate", 0], ["pl", 0], ["e", 0], ["p", 0], ["append", 0], ["i", 0], ["2", 0], ["c", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["c", 0], ["lv", 0], ["i", 0], ["1", 0], ["c", 0], ["lv", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["e", 0], ["i", 0], ["lv", 0], ["j", 0], ["lv", 0], ["i", 0], ["1", 0], ["print", 0], ["sum", 0], ["c", 0], ["python3", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["parent", 0], ["tuple", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["depth", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["depth", 0], ["append", 0], ["depth", 0], ["parent", 0], ["v", 0], ["1", 0], ["parity", 0], ["0", 0], ["n", 0], ["for", 0], ["d", 0], ["in", 0], ["depth", 0], ["parity", 0], ["d", 0], ["1", 0], ["print", 0], ["sum", 0], ["parity", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["strip", 0], ["count", 0], ["0", 0], ["n", 0], ["params", 0], ["1", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["2", 0], ["layer", 0], ["0", 0], ["n", 0], ["1", 0], ["nodes", 0], ["in", 0], ["layer", 0], ["while", 0], ["i", 0], ["n", 0], ["layer", 0], ["i", 0], ["layer", 0], ["params", 0], ["i", 0], ["1", 0], ["count", 0], ["params", 0], ["i", 0], ["1", 0], ["if", 0], ["nodes", 0], ["in", 0], ["layer", 0], ["get", 0], ["layer", 0], ["i", 0], ["is", 0], ["none", 0], ["nodes", 0], ["in", 0], ["layer", 0], ["setdefault", 0], ["layer", 0], ["i", 0], ["1", 0], ["else", 0], ["nodes", 0], ["in", 0], ["layer", 0], ["layer", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["max", 0], ["layer", 0], ["max", 0], ["layer", 0], ["result", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["max", 0], ["layer", 0], ["1", 0], ["result", 0], ["nodes", 0], ["in", 0], ["layer", 0], ["i", 0], ["2", 0], ["print", 0], ["result", 0], ["import", 0], ["collections", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["to", 0], ["for", 0], ["i", 0], ["node", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["to", 0], ["i", 0], ["2", 0], ["node", 0], ["layers", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["k", 0], ["v", 0], ["in", 0], ["to", 0], ["items", 0], ["layers", 0], ["v", 0], ["append", 0], ["k", 0], ["queue", 0], ["1", 0], ["ans", 0], ["0", 0], ["while", 0], ["queue", 0], ["ans", 0], ["len", 0], ["queue", 0], ["2", 0], ["n", 0], ["len", 0], ["queue", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["node", 0], ["queue", 0], ["pop", 0], ["0", 0], ["if", 0], ["node", 0], ["in", 0], ["layers", 0], ["queue", 0], ["extend", 0], ["layers", 0], ["node", 0], ["print", 0], ["ans", 0], ["import", 0], ["threading", 0], ["from", 0], ["sys", 0], ["import", 0], ["setrecursionlimit", 0], ["exc", 0], ["info", 0], ["def", 0], ["main", 0], ["try", 0], ["n", 0], ["int", 0], ["input", 0], ["par", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["gr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["gr", 0], ["par", 0], ["i", 0], ["1", 0], ["append", 0], ["i", 0], ["1", 0], ["cnt", 0], ["0", 0], ["n", 0], ["def", 0], ["dfs", 0], ["v", 0], ["depth", 0], ["0", 0], ["cnt", 0], ["depth", 0], ["1", 0], ["while", 0], ["depth", 0], ["len", 0], ["cnt", 0], ["pass", 0], ["for", 0], ["u", 0], ["in", 0], ["gr", 0], ["v", 0], ["dfs", 0], ["u", 0], ["depth", 0], ["1", 0], ["dfs", 0], ["0", 0], ["print", 0], ["sum", 0], ["x", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["cnt", 0], ["except", 0], ["print", 0], ["exc", 0], ["info", 0], ["0", 0], ["setrecursionlimit", 0], ["100000000", 0], ["threading", 0], ["stack", 0], ["size", 0], ["102400000", 0], ["thread", 0], ["threading", 0], ["thread", 0], ["target", 0], ["main", 0], ["thread", 0], ["start", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["0", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["0", 0], ["n", 0], ["1", 0], ["c", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["cou", 0], ["0", 0], ["s", 0], ["i", 0], ["while", 0], ["b", 0], ["s", 0], ["0", 0], ["cou", 0], ["1", 0], ["s", 0], ["a", 0], ["s", 0], ["b", 0], ["i", 0], ["cou", 0], ["b", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["2", 0], ["c", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["c", 0], ["ans", 0], ["i", 0], ["2", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dp", 0], ["0", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["count", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dp", 0], ["append", 0], ["dp", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["count", 0], ["dp", 0], ["1", 0], ["1", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["count", 0], ["i", 0], ["2", 0], ["print", 0], ["ans", 0], ["made", 0], ["by", 0], ["mostafa", 0], ["khaled", 0], ["def", 0], ["bfs", 0], ["d", 0], ["n", 0], ["queue", 0], ["1", 0], ["0", 0], ["res", 0], ["0", 0], ["mark", 0], ["i", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["mark", 0], ["1", 0], ["true", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["while", 0], ["queue", 0], ["q", 0], ["queue", 0], ["pop", 0], ["0", 0], ["x", 0], ["level", 0], ["q", 0], ["0", 0], ["q", 0], ["1", 0], ["lev", 0], ["level", 0], ["1", 0], ["res", 0], ["level", 0], ["res", 0], ["level", 0], ["1", 0], ["2", 0], ["for", 0], ["i", 0], ["y", 0], ["in", 0], ["enumerate", 0], ["d", 0], ["x", 0], ["if", 0], ["mark", 0], ["y", 0], ["false", 0], ["mark", 0], ["y", 0], ["true", 0], ["queue", 0], ["append", 0], ["y", 0], ["lev", 0], ["print", 0], ["sum", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["lst", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["1", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["lst", 0], ["d", 0], ["x", 0], ["append", 0], ["i", 0], ["2", 0], ["d", 0], ["i", 0], ["2", 0], ["bfs", 0], ["d", 0], ["n", 0], ["from", 0], ["sys", 0], ["import", 0], ["setrecursionlimit", 0], ["a", 0], ["int", 0], ["input", 0], ["setrecursionlimit", 0], ["200000", 0], ["h", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["1", 0], ["h", 0], ["s", 0], ["i", 0], ["1", 0], ["append", 0], ["i", 0], ["1", 0], ["metka", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["dat", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["dis", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["def", 0], ["dfs", 0], ["x", 0], ["stack", 0], ["stack", 0], ["append", 0], ["x", 0], ["while", 0], ["stack", 0], ["x", 0], ["stack", 0], ["pop", 0], ["1", 0], ["dat", 0], ["dis", 0], ["x", 0], ["1", 0], ["metka", 0], ["x", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["h", 0], ["x", 0], ["if", 0], ["not", 0], ["metka", 0], ["i", 0], ["stack", 0], ["append", 0], ["i", 0], ["dis", 0], ["i", 0], ["dis", 0], ["x", 0], ["1", 0], ["dfs", 0], ["0", 0], ["print", 0], ["sum", 0], ["x", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["dat", 0], ["930a", 0], ["import", 0], ["collections", 0], ["def", 0], ["do", 0], ["n", 0], ["int", 0], ["input", 0], ["nums", 0], ["0", 0], ["int", 0], ["c", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["input", 0], ["split", 0], ["g", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["enumerate", 0], ["nums", 0], ["if", 0], ["i", 0], ["j", 0], ["g", 0], ["j", 0], ["append", 0], ["i", 0], ["children", 0], ["cur", 0], ["0", 0], ["res", 0], ["0", 0], ["while", 0], ["cur", 0], ["res", 0], ["len", 0], ["cur", 0], ["2", 0], ["next", 0], ["for", 0], ["c", 0], ["in", 0], ["cur", 0], ["for", 0], ["nei", 0], ["in", 0], ["g", 0], ["c", 0], ["next", 0], ["append", 0], ["nei", 0], ["cur", 0], ["next", 0], ["return", 0], ["res", 0], ["print", 0], ["do", 0], ["n", 0], ["int", 0], ["input", 0], ["par", 0], ["none", 0], ["int", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["children", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["child", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["children", 0], ["par", 0], ["child", 0], ["append", 0], ["child", 0], ["count", 0], ["0", 0], ["nodesatcurrlevel", 0], ["0", 0], ["while", 0], ["nodesatcurrlevel", 0], ["count", 0], ["len", 0], ["nodesatcurrlevel", 0], ["2", 0], ["nodesatnextlevel", 0], ["for", 0], ["node", 0], ["in", 0], ["nodesatcurrlevel", 0], ["nodesatnextlevel", 0], ["children", 0], ["node", 0], ["nodesatcurrlevel", 0], ["nodesatnextlevel", 0], ["print", 0], ["count", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["counter", 0], ["def", 0], ["bfs", 0], ["q", 0], ["deque", 0], ["0", 0], ["dist", 0], ["1", 0], ["n", 0], ["dist", 0], ["0", 0], ["0", 0], ["while", 0], ["q", 0], ["v", 0], ["q", 0], ["popleft", 0], ["for", 0], ["nv", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["dist", 0], ["nv", 0], ["1", 0], ["dist", 0], ["nv", 0], ["dist", 0], ["v", 0], ["1", 0], ["q", 0], ["append", 0], ["nv", 0], ["return", 0], ["dist", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["g", 0], ["i", 0], ["1", 0], ["append", 0], ["p", 0], ["i", 0], ["1", 0], ["g", 0], ["p", 0], ["i", 0], ["1", 0], ["append", 0], ["i", 0], ["1", 0], ["dist", 0], ["bfs", 0], ["cnt", 0], ["counter", 0], ["dist", 0], ["ans", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["cnt", 0], ["values", 0], ["ans", 0], ["v", 0], ["2", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["1", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["0", 0], ["n", 0], ["1", 0], ["cnt", 0], ["1", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["h", 0], ["i", 0], ["h", 0], ["p", 0], ["i", 0], ["1", 0], ["cnt", 0], ["h", 0], ["i", 0], ["1", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["max", 0], ["h", 0], ["1", 0], ["if", 0], ["cnt", 0], ["i", 0], ["2", 0], ["1", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["e", 0], ["for", 0], ["e", 0], ["in", 0], ["input", 0], ["split", 0], ["d", 0], ["1", 0], ["0", 0], ["for", 0], ["k", 0], ["v", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["d", 0], ["k", 0], ["2", 0], ["d", 0], ["v", 0], ["1", 0], ["d2", 0], ["for", 0], ["k", 0], ["v", 0], ["in", 0], ["d", 0], ["items", 0], ["d2", 0], ["v", 0], ["d2", 0], ["get", 0], ["v", 0], ["0", 0], ["1", 0], ["s", 0], ["sum", 0], ["v", 0], ["2", 0], ["for", 0], ["v", 0], ["in", 0], ["d2", 0], ["values", 0], ["print", 0], ["s", 0], ["class", 0], ["node", 0], ["def", 0], ["init", 0], ["self", 0], ["id", 0], ["self", 0], ["id", 0], ["id", 0], ["self", 0], ["parent", 0], ["1", 0], ["self", 0], ["children", 0], ["set", 0], ["self", 0], ["apples", 0], ["1", 0], ["nodes", 0], ["dict", 0], ["nb", 0], ["nodes", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["nb", 0], ["nodes", 0], ["nodes", 0], ["i", 0], ["1", 0], ["node", 0], ["i", 0], ["1", 0], ["parents", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["base", 0], ["2", 0], ["for", 0], ["p", 0], ["in", 0], ["parents", 0], ["nodes", 0], ["base", 0], ["parent", 0], ["p", 0], ["nodes", 0], ["p", 0], ["children", 0], ["add", 0], ["base", 0], ["base", 0], ["1", 0], ["for", 0], ["n", 0], ["in", 0], ["nodes", 0], ["values", 0], ["print", 0], ["d", 0], ["s", 0], ["n", 0], ["id", 0], ["n", 0], ["children", 0], ["recolt", 0], ["0", 0], ["todo", 0], ["1", 0], ["while", 0], ["len", 0], ["todo", 0], ["0", 0], ["recolt", 0], ["len", 0], ["todo", 0], ["2", 0], ["next", 0], ["set", 0], ["for", 0], ["t", 0], ["in", 0], ["todo", 0], ["next", 0], ["nodes", 0], ["t", 0], ["children", 0], ["todo", 0], ["next", 0], ["print", 0], ["recolt", 0], ["n", 0], ["int", 0], ["input", 0], ["parent", 0], ["tuple", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["depth", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["depth", 0], ["append", 0], ["depth", 0], ["parent", 0], ["v", 0], ["1", 0], ["parity", 0], ["0", 0], ["n", 0], ["for", 0], ["d", 0], ["in", 0], ["depth", 0], ["parity", 0], ["d", 0], ["1", 0], ["print", 0], ["sum", 0], ["parity", 0], ["n", 0], ["int", 0], ["input", 0], ["parent", 0], ["tuple", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["depth", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["depth", 0], ["append", 0], ["depth", 0], ["parent", 0], ["v", 0], ["1", 0], ["parity", 0], ["0", 0], ["n", 0], ["for", 0], ["d", 0], ["in", 0], ["depth", 0], ["parity", 0], ["d", 0], ["1", 0], ["print", 0], ["sum", 0], ["parity", 0], ["n", 0], ["int", 0], ["input", 0], ["parent", 0], ["tuple", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["depth", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["depth", 0], ["append", 0], ["depth", 0], ["parent", 0], ["v", 0], ["1", 0], ["parity", 0], ["0", 0], ["n", 0], ["for", 0], ["d", 0], ["in", 0], ["depth", 0], ["parity", 0], ["d", 0], ["1", 0], ["freq", 0], ["for", 0], ["d", 0], ["in", 0], ["depth", 0], ["if", 0], ["d", 0], ["in", 0], ["freq", 0], ["freq", 0], ["d", 0], ["1", 0], ["else", 0], ["freq", 0], ["d", 0], ["1", 0], ["res", 0], ["0", 0], ["for", 0], ["d", 0], ["in", 0], ["freq", 0], ["res", 0], ["freq", 0], ["d", 0], ["2", 0], ["print", 0], ["res", 0], ["print", 0], ["sum", 0], ["parity", 0], ["inflos", 0], ["int", 0], ["input", 0], ["parent", 0], ["tuple", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["depth", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["inflos", 0], ["1", 0], ["depth", 0], ["append", 0], ["depth", 0], ["parent", 0], ["v", 0], ["1", 0], ["freq", 0], ["for", 0], ["d", 0], ["in", 0], ["depth", 0], ["if", 0], ["d", 0], ["in", 0], ["freq", 0], ["freq", 0], ["d", 0], ["1", 0], ["else", 0], ["freq", 0], ["d", 0], ["1", 0], ["res", 0], ["0", 0], ["for", 0], ["d", 0], ["in", 0], ["freq", 0], ["res", 0], ["freq", 0], ["d", 0], ["2", 0], ["print", 0], ["res", 0], ["inflos", 0], ["int", 0], ["input", 0], ["roots", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["depth", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["inflos", 0], ["1", 0], ["depth", 0], ["append", 0], ["depth", 0], ["roots", 0], ["v", 0], ["1", 0], ["freq", 0], ["for", 0], ["d", 0], ["in", 0], ["depth", 0], ["if", 0], ["d", 0], ["in", 0], ["freq", 0], ["freq", 0], ["d", 0], ["1", 0], ["else", 0], ["freq", 0], ["d", 0], ["1", 0], ["res", 0], ["0", 0], ["for", 0], ["d", 0], ["in", 0], ["freq", 0], ["res", 0], ["freq", 0], ["d", 0], ["2", 0], ["print", 0], ["res", 0], ["inflos", 0], ["int", 0], ["input", 0], ["roots", 0], ["input", 0], ["roots", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["roots", 0], ["split", 0], ["depth", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["inflos", 0], ["1", 0], ["depth", 0], ["append", 0], ["depth", 0], ["roots", 0], ["v", 0], ["1", 0], ["freq", 0], ["for", 0], ["d", 0], ["in", 0], ["depth", 0], ["if", 0], ["d", 0], ["in", 0], ["freq", 0], ["freq", 0], ["d", 0], ["1", 0], ["else", 0], ["freq", 0], ["d", 0], ["1", 0], ["res", 0], ["0", 0], ["for", 0], ["d", 0], ["in", 0], ["freq", 0], ["res", 0], ["freq", 0], ["d", 0], ["2", 0], ["print", 0], ["res", 0], ["inflos", 0], ["int", 0], ["input", 0], ["roots", 0], ["input", 0], ["roots", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["roots", 0], ["split", 0], ["son", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["inflos", 0], ["1", 0], ["son", 0], ["append", 0], ["son", 0], ["roots", 0], ["v", 0], ["1", 0], ["freq", 0], ["for", 0], ["d", 0], ["in", 0], ["son", 0], ["if", 0], ["d", 0], ["in", 0], ["freq", 0], ["freq", 0], ["d", 0], ["1", 0], ["else", 0], ["freq", 0], ["d", 0], ["1", 0], ["res", 0], ["0", 0], ["for", 0], ["d", 0], ["in", 0], ["freq", 0], ["res", 0], ["freq", 0], ["d", 0], ["2", 0], ["print", 0], ["res", 0], ["import", 0], ["sys", 0], ["import", 0], ["bisect", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["ri", 0], ["lambda", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["ri", 0], ["lambda", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["list2d", 0], ["a", 0], ["b", 0], ["c", 0], ["return", 0], ["c", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["def", 0], ["list3d", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["return", 0], ["d", 0], ["c", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["def", 0], ["list4d", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["return", 0], ["e", 0], ["d", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["c", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["def", 0], ["ceil", 0], ["x", 0], ["y", 0], ["1", 0], ["return", 0], ["int", 0], ["x", 0], ["y", 0], ["def", 0], ["int", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["map", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["list", 0], ["n", 0], ["none", 0], ["return", 0], ["list", 0], ["map", 0], ["if", 0], ["n", 0], ["is", 0], ["none", 0], ["else", 0], ["int", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["yes", 0], ["print", 0], ["yes", 0], ["def", 0], ["no", 0], ["print", 0], ["no", 0], ["def", 0], ["yes", 0], ["print", 0], ["yes", 0], ["def", 0], ["no", 0], ["print", 0], ["no", 0], ["inf", 0], ["10", 0], ["30", 0], ["mod", 0], ["998244353", 0], ["n", 0], ["int", 0], ["ri", 0], ["a", 0], ["ri", 0], ["dic", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["dic", 0], ["i", 0], ["2", 0], ["1", 0], ["else", 0], ["time", 0], ["dic", 0], ["a", 0], ["i", 0], ["dic", 0], ["i", 0], ["2", 0], ["time", 0], ["1", 0], ["cnt", 0], ["0", 0], ["time", 0], ["for", 0], ["i", 0], ["in", 0], ["dic", 0], ["if", 0], ["dic", 0], ["i", 0], ["in", 0], ["time", 0], ["time", 0], ["dic", 0], ["i", 0], ["1", 0], ["else", 0], ["time", 0], ["dic", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["time", 0], ["cnt", 0], ["time", 0], ["i", 0], ["2", 0], ["print", 0], ["cnt", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["parent", 0], ["tuple", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["depth", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["depth", 0], ["append", 0], ["depth", 0], ["parent", 0], ["v", 0], ["1", 0], ["freq", 0], ["for", 0], ["d", 0], ["in", 0], ["depth", 0], ["if", 0], ["d", 0], ["in", 0], ["freq", 0], ["freq", 0], ["d", 0], ["1", 0], ["else", 0], ["freq", 0], ["d", 0], ["1", 0], ["res", 0], ["0", 0], ["for", 0], ["d", 0], ["in", 0], ["freq", 0], ["res", 0], ["freq", 0], ["d", 0], ["2", 0], ["print", 0], ["res", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nSereja showed an interesting game to his friends. The game goes like that. Initially, there is a table with an empty cup and n water mugs on it. Then all players take turns to move. During a move, a player takes a non-empty mug of water and pours all water from it into the cup. If the cup overfills, then we assume that this player lost.\n\nAs soon as Sereja's friends heard of the game, they wanted to play it. Sereja, on the other hand, wanted to find out whether his friends can play the game in such a way that there are no losers. You are given the volumes of all mugs and the cup. Also, you know that Sereja has (n - 1) friends. Determine if Sereja's friends can play the game so that nobody loses.\n\n\n-----Input-----\n\nThe first line contains integers n and s (2 ≤ n ≤ 100; 1 ≤ s ≤ 1000) — the number of mugs and the volume of the cup. The next line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10). Number a_{i} means the volume of the i-th mug.\n\n\n-----Output-----\n\nIn a single line, print \"YES\" (without the quotes) if his friends can play in the described manner, and \"NO\" (without the quotes) otherwise.\n\n\n-----Examples-----\nInput\n3 4\n1 1 1\n\nOutput\nYES\n\nInput\n3 4\n3 1 3\n\nOutput\nYES\n\nInput\n3 4\n4 4 4\n\nOutput\nNO\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n,s=map(int,input().split())\na=list(map(int,input().split()))\na.sort()\nif sum(a[:-1])<=s:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "n,m = list(map(int,input().split()))\na=list(map(int,input().split()))\nif sum(a) - max(a) <= m :\n\tprint('YES')\nelse:\n\tprint('NO')\n", "n, v = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nprint('YES' if sum(a) - max(a) <= v else 'NO')\n", "n, s = list(map(int, input().split()))\na = list(map(int, input().split()))\na.remove(max(a))\nans = sum(a) > s\nprint(\"NO\" if ans else \"YES\")\n", "n,s = [int(i) for i in input().split()]\nl = [int(i) for i in input().split()]\nl.sort()\nif sum(l[:-1]) <= s:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "from sys import stdin\n\nn, s = list(map(int, stdin.readline().split()))\narr = list(map(int, stdin.readline().split()))\nif(sum(arr) - max(arr) > s):\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")\n", "n, s = list(map(int, input().split()))\nlist_an = list(map(int, input().split()))\nif sum(list_an)- max(list_an) <= s:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n, m = map(int, input().split())\na = sorted(list(map(int, input().split())))\nif sum(a[:-1]) <= m:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n, s = map(int, input().split())\na = sorted(map(int, input().split()))\nprint(\"NO\" if sum(a[:n - 1]) > s else \"YES\")\n", "__author__ = 'Lipen'\n\ndef main():\n\tn, s = map(int, input().split())\n\ta = list(map(int, input().split()))\n\n\tif sum(a)-max(a) <= s:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\nmain()\n", "n,s=map(int,input().split())\nalist=[int(x) for x in input().split()]\n\nalist.sort()\n\nif sum(alist[:(n-1)])<=s:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n, s = map(int, input().split())\n\narr = [int(x) for x in input().split()]\n\narr.sort()\n\n#print(n, s, arr)\n\n#print(sum(arr[:-1]))\n\nif sum(arr[:-1]) <= s:\n\tprint(\"YES\")\nelse: print(\"NO\")\n", "\nn, s = list(map(int, input().split()))\na = [i for i in map(int, input().split())]\n\nr = [\"NO\", \"YES\"]\nz = sum(a) - max(a) <= s\n#print(max(a))\nprint(r[z])\n\n\n", "n,s = list(map(int,input().split()))\na = list(map(int,input().split()))\ns_a=sorted(a)\nt=0\nfor i in range(n-1):\n\tt+=s_a[i]\nprint('YES' if t<=s else 'NO')\n\n", "n, s = list(map(int, input().split()))\nkrush = list(map(int, input().split()))\nchasha = 0\nres = 'YES'\nkrush.sort()\nfriend = 0\nwhile res == 'YES' and friend < len(krush)-1:\n\tchasha += krush[friend]\n\tif chasha > s:\n\t\tres = 'NO'\n\tfriend += 1\nprint(res)\n", "n, s = map(int, input().split())\nt = list(map(int, input().split()))\nt = sorted(t)\nif sum(t[:n - 1]) <= s:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "data = input().rstrip().split()\nn = int(data[0])\ns = int(data[1])\n\nsu = 0\nma = 0\ndata = input().rstrip().split()\nfor i in range(n):\n\ta = int(data[i])\n\tsu += a\n\tif ma < a:\n\t\tma = a\n\nsu -= ma\nprint('YES' if su <= s else 'NO')\n", "n,s=map(int,input().split())\na=list(map(int,input().split()))\na=sorted(a)\nif sum(a[0:n-1])<=s:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "n, s = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nresult = \"NO\"\n\nm = max(a)\nif sum(a) - m <= s:\n\tresult = \"YES\"\n\nprint(result)\n", "n, s = tuple(map(int, str.split(input())))\nif sum(sorted(map(int, str.split(input())))[:-1]) <= s:\n\n\tprint(\"YES\")\n\nelse:\n\n\tprint(\"NO\")\n", "def readln(): return tuple(map(int, input().split()))\n\nn, s = readln()\na = readln()\nprint('YES' if sum(a) - max(a) <= s else 'NO')\n", "n, s = map(int, input().split())\na = list(map(int, input().split()))\na = sorted(a)\nif sum(a[:-1]) <= s:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n,m = map(int,input().split())\na = list(map(int,input().split()))\nif sum(a) - max(a) <= m:\n\tprint('YES')\nelse:\n\tprint('NO')\n"], "id": "id6544"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6544", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["sereja", 5], ["showed", 5], ["an", 5], ["interesting", 5], ["game", 5], ["to", 5], ["his", 5], ["friends", 5], ["the", 5], ["game", 5], ["goes", 5], ["like", 5], ["that", 5], ["initially", 5], ["there", 5], ["is", 5], ["a", 5], ["table", 5], ["with", 5], ["an", 5], ["empty", 5], ["cup", 5], ["and", 5], ["n", 5], ["water", 5], ["mugs", 5], ["on", 5], ["it", 5], ["then", 5], ["all", 5], ["players", 5], ["take", 5], ["turns", 5], ["to", 5], ["move", 5], ["during", 5], ["a", 5], ["move", 5], ["a", 5], ["player", 5], ["takes", 5], ["a", 5], ["non", 5], ["empty", 5], ["mug", 5], ["of", 5], ["water", 5], ["and", 5], ["pours", 5], ["all", 5], ["water", 5], ["from", 5], ["it", 5], ["into", 5], ["the", 5], ["cup", 5], ["if", 5], ["the", 5], ["cup", 5], ["overfills", 5], ["then", 5], ["we", 5], ["assume", 5], ["that", 5], ["this", 5], ["player", 5], ["lost", 5], ["as", 5], ["soon", 5], ["as", 5], ["sereja", 5], ["s", 5], ["friends", 5], ["heard", 5], ["of", 5], ["the", 5], ["game", 5], ["they", 5], ["wanted", 5], ["to", 5], ["play", 5], ["it", 5], ["sereja", 5], ["on", 5], ["the", 5], ["other", 5], ["hand", 5], ["wanted", 5], ["to", 5], ["find", 5], ["out", 5], ["whether", 5], ["his", 5], ["friends", 5], ["can", 5], ["play", 5], ["the", 5], ["game", 5], ["in", 5], ["such", 5], ["a", 5], ["way", 5], ["that", 5], ["there", 5], ["are", 5], ["no", 5], ["losers", 5], ["you", 5], ["are", 5], ["given", 5], ["the", 5], ["volumes", 5], ["of", 5], ["all", 5], ["mugs", 5], ["and", 5], ["the", 5], ["cup", 5], ["also", 5], ["you", 5], ["know", 5], ["that", 5], ["sereja", 5], ["has", 5], ["n", 5], ["1", 5], ["friends", 5], ["determine", 5], ["if", 0], ["sereja", 0], ["s", 0], ["friends", 0], ["can", 0], ["play", 0], ["the", 0], ["game", 0], ["so", 0], ["that", 0], ["nobody", 0], ["loses", 0], ["input", 0], ["the", 5], ["first", 5], ["line", 5], ["contains", 5], ["integers", 5], ["n", 5], ["and", 5], ["s", 5], ["2", 5], ["≤", 6], ["n", 5], ["≤", 5], ["100", 5], ["1", 5], ["≤", 5], ["s", 5], ["≤", 5], ["1000", 5], ["—", 5], ["the", 5], ["number", 5], ["of", 5], ["mugs", 5], ["and", 0], ["the", 0], ["volume", 0], ["of", 0], ["the", 0], ["cup", 0], ["the", 0], ["next", 0], ["line", 1], ["contains", 1], ["n", 1], ["integers", 1], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["10", 0], ["number", 0], ["a", 0], ["i", 0], ["means", 0], ["the", 0], ["volume", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["mug", 0], ["output", 0], ["in", 5], ["a", 5], ["single", 5], ["line", 5], ["print", 5], ["yes", 5], ["without", 5], ["the", 5], ["quotes", 5], ["if", 5], ["his", 5], ["friends", 5], ["can", 0], ["play", 0], ["in", 0], ["the", 0], ["described", 0], ["manner", 0], ["and", 0], ["no", 0], ["without", 0], ["the", 0], ["quotes", 0], ["otherwise", 0], ["examples", 0], ["input", 0], ["3", 0], ["4", 0], ["1", 0], ["1", 0], ["1", 0], ["output", 0], ["yes", 0], ["input", 0], ["3", 0], ["4", 0], ["3", 0], ["1", 0], ["3", 0], ["output", 0], ["yes", 0], ["input", 0], ["3", 0], ["4", 0], ["4", 0], ["4", 0], ["4", 0], ["output", 0], ["no", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6733870967741935, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.14744623655913963, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8115384615384615, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2115384615384616, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6733870967741935, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.14744623655913963, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8115384615384615, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2115384615384616, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["if", 0], ["sum", 0], ["a", 0], ["1", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["max", 0], ["a", 0], ["m", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["yes", 0], ["if", 0], ["sum", 0], ["a", 0], ["max", 0], ["a", 0], ["v", 0], ["else", 0], ["no", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["remove", 0], ["max", 0], ["a", 0], ["ans", 0], ["sum", 0], ["a", 0], ["s", 0], ["print", 0], ["no", 0], ["if", 0], ["ans", 0], ["else", 0], ["yes", 0], ["n", 0], ["s", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["l", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["l", 0], ["sort", 0], ["if", 0], ["sum", 0], ["l", 0], ["1", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["if", 0], ["sum", 0], ["arr", 0], ["max", 0], ["arr", 0], ["s", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["an", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["list", 0], ["an", 0], ["max", 0], ["list", 0], ["an", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["1", 0], ["m", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sorted", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["no", 0], ["if", 0], ["sum", 0], ["a", 0], ["n", 0], ["1", 0], ["s", 0], ["else", 0], ["yes", 0], ["author", 0], ["lipen", 0], ["def", 0], ["main", 0], ["n", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["max", 0], ["a", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["main", 0], ["n", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["alist", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["alist", 0], ["sort", 0], ["if", 0], ["sum", 0], ["alist", 0], ["n", 0], ["1", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["arr", 0], ["sort", 0], ["print", 0], ["n", 0], ["s", 0], ["arr", 0], ["print", 0], ["sum", 0], ["arr", 0], ["1", 0], ["if", 0], ["sum", 0], ["arr", 0], ["1", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["r", 0], ["no", 0], ["yes", 0], ["z", 0], ["sum", 0], ["a", 0], ["max", 0], ["a", 0], ["s", 0], ["print", 0], ["max", 0], ["a", 0], ["print", 0], ["r", 0], ["z", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["a", 0], ["sorted", 0], ["a", 0], ["t", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["t", 0], ["s", 0], ["a", 0], ["i", 0], ["print", 0], ["yes", 0], ["if", 0], ["t", 0], ["s", 0], ["else", 0], ["no", 0], ["n", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["krush", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["chasha", 0], ["0", 0], ["res", 0], ["yes", 0], ["krush", 0], ["sort", 0], ["friend", 0], ["0", 0], ["while", 0], ["res", 0], ["yes", 0], ["and", 0], ["friend", 0], ["len", 0], ["krush", 0], ["1", 0], ["chasha", 0], ["krush", 0], ["friend", 0], ["if", 0], ["chasha", 0], ["s", 0], ["res", 0], ["no", 0], ["friend", 0], ["1", 0], ["print", 0], ["res", 0], ["n", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["sorted", 0], ["t", 0], ["if", 0], ["sum", 0], ["t", 0], ["n", 0], ["1", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["data", 0], ["input", 0], ["rstrip", 0], ["split", 0], ["n", 0], ["int", 0], ["data", 0], ["0", 0], ["s", 0], ["int", 0], ["data", 0], ["1", 0], ["su", 0], ["0", 0], ["ma", 0], ["0", 0], ["data", 0], ["input", 0], ["rstrip", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["int", 0], ["data", 0], ["i", 0], ["su", 0], ["a", 0], ["if", 0], ["ma", 0], ["a", 0], ["ma", 0], ["a", 0], ["su", 0], ["ma", 0], ["print", 0], ["yes", 0], ["if", 0], ["su", 0], ["s", 0], ["else", 0], ["no", 0], ["n", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sorted", 0], ["a", 0], ["if", 0], ["sum", 0], ["a", 0], ["0", 0], ["n", 0], ["1", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["s", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["result", 0], ["no", 0], ["m", 0], ["max", 0], ["a", 0], ["if", 0], ["sum", 0], ["a", 0], ["m", 0], ["s", 0], ["result", 0], ["yes", 0], ["print", 0], ["result", 0], ["n", 0], ["s", 0], ["tuple", 0], ["map", 0], ["int", 0], ["str", 0], ["split", 0], ["input", 0], ["if", 0], ["sum", 0], ["sorted", 0], ["map", 0], ["int", 0], ["str", 0], ["split", 0], ["input", 0], ["1", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["readln", 0], ["return", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["s", 0], ["readln", 0], ["a", 0], ["readln", 0], ["print", 0], ["yes", 0], ["if", 0], ["sum", 0], ["a", 0], ["max", 0], ["a", 0], ["s", 0], ["else", 0], ["no", 0], ["n", 0], ["s", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sorted", 0], ["a", 0], ["if", 0], ["sum", 0], ["a", 0], ["1", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["max", 0], ["a", 0], ["m", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nPasha has a wooden stick of some positive integer length n. He wants to perform exactly three cuts to get four parts of the stick. Each part must have some positive integer length and the sum of these lengths will obviously be n. \n\nPasha likes rectangles but hates squares, so he wonders, how many ways are there to split a stick into four parts so that it's possible to form a rectangle using these parts, but is impossible to form a square.\n\nYour task is to help Pasha and count the number of such ways. Two ways to cut the stick are considered distinct if there exists some integer x, such that the number of parts of length x in the first way differ from the number of parts of length x in the second way.\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 ≤ n ≤ 2·10^9) — the length of Pasha's stick.\n\n\n-----Output-----\n\nThe output should contain a single integer — the number of ways to split Pasha's stick into four parts of positive integer length so that it's possible to make a rectangle by connecting the ends of these parts, but is impossible to form a square. \n\n\n-----Examples-----\nInput\n6\n\nOutput\n1\n\nInput\n20\n\nOutput\n4\n\n\n\n-----Note-----\n\nThere is only one way to divide the stick in the first sample {1, 1, 2, 2}.\n\nFour ways to divide the stick in the second sample are {1, 1, 9, 9}, {2, 2, 8, 8}, {3, 3, 7, 7} and {4, 4, 6, 6}. Note that {5, 5, 5, 5} doesn't work.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["x = int(input())\nif x%2==1:\n\tprint(0)\n\tquit()\nif x%2 ==0:\n\tx//=2\n\tif x%2==0:\n\t\tprint(x//2-1)\n\telse:\n\t\tprint(x//2)\n", "n = int(input())\nif n%2==1:\n\tprint(0)\nelif n%4==2:\n\tprint(n//4)\nelse:\n\tprint(n//4-1)\n", "n = int(input())\np = n // 2\nif (n % 2 == 1):\n\tprint(0)\nelse:\n\tif (n % 4 == 0):\n\t\tprint((p-1)//2)\n\telse:\n\t\tprint(p//2)\n", "x = int(input())\nif x%2:\n\tprint(0)\nelse:\n\tx//=2\n\tprint((x-1)//2)\n", "n = int(input())\nif n % 2:\n\tprint(0)\nelse:\n\tn //= 2\n\tprint((n - 1) // 2)\n", "a=int(input())\nif a%2!=0:\n\tprint(0)\nelif a<=4:\n\tprint(0)\nelse:\n\tprint(a//4-(a%4==0))\n", "n = int(input())\nif n%2 == 1:\n\tprint(0)\nelse:\n\tprint((n-2)//4)\n", "import itertools\nimport math\n\nn = int(input())\nif n%2:\n\tprint(0)\nelse:\n\tm = n // 2\n\tprint((m-1)//2 )\n\n\n", "n=int(input())\nif n%2==1:\n\tprint(0)\nelse:\n\tn=n//2\n\tif n%2==0:\n\t\tprint(n//2-1)\n\telse:\n\t\tprint(n//2)\n\t\n", "n = int(input())\nif n % 2 == 1:\n\tprint(0)\nelse:\n\tn //= 2\n\tprint((n - 1) // 2)\n", "n = int(input())\nif n % 2: print(0)\nelse:\n\tk = n // 2\n\tcnt = k // 2\n\tif k % 2 == 0: cnt -= 1\n\tprint(cnt)\n", "n = int(input())\nif n % 2 == 1:\n\tprint(0)\nelse:\n\tprint((n // 2 - 1) // 2)\n", "n = int(input())\nif n % 2 == 1:\n\tprint(0)\nelif n % 4 == 0:\n\tprint((n - 1) // 4)\nelse:\n\tprint(n // 4)\n", "\nimport math\nimport sys\n\nn=int(input())\n  \nm = int((n-1)/2)\nk = int(m/2)\n\nif n%2 == 1:\n\tk=0\nprint(k)\n\t\n\n\t\n\n\n\t\n", "n=int(input())\n\nif n%2==0:\n\tprint((n-2)//4)\nelse:\n\tprint(0)\n", "n = int(input())\nif n % 2 == 1 or n == 2 or n == 4:\n\tprint(0)\nelif n % 4 == 2:\n\tprint(n // 4)\nelse:\n\tprint(n // 4 - 1)\n", "n = int(input())\nif n % 2 == 1:\n\tprint(0)\nelse:\n\tif (n//2) % 2 == 1:\n\t\tprint((n//2-1)//2)\n\telse:\n\t\tprint(n//4-1)\n\t\n", "n = int(input())\nif n % 2 == 1:\n\tprint(0)\nelse:\n\tprint((n // 2 - 1) // 2)\n", "x = int(input())\n\nif (x % 2 == 1 or x < 4):\n\tprint(0)\nelse:\n\thalf = x//2\n\tif (half % 2 == 0):\n\t\tprint(half//2-1)\n\telse:\n\t\tprint((half-1)//2)\n", "import sys\nif False:\n\tinp = open('A.txt', 'r')\nelse:\n\tinp = sys.stdin\n\nn = int(inp.readline())\nans = 0\nif n%2 != 0:\n\tprint(0)\nelse:\n\tif n%4 == 0:\n\t\tprint(n//4 - 1)\n\telse:\n\t\tprint(n//4)\n", "n = int(input())\nif n % 2 == 0:\n\tif n % 4 == 0:\n\t\tprint(n // 4 - 1)\n\telse:\n\t\tprint(n // 4)\nelse:\n\tprint(0)\n", "import math;\n\nn = int(input());\n\nif(n%2!=0):\n\tprint(0);\nelse:\n\tprint(math.ceil(n/4)-1);\n", "n=int(input())\nif n%2==1:\n\tans=0\nelse:\n\tc=n/2\n\tif c%2==1:\n\t\tans=int(n/4)\n\telse:\n\t\tans=int(n/4-1)\n\nprint(ans)\n", "def main():\n\tn = int(input())\n\tif n > 6 and n % 2 == 0:\n\t\tprint(int((n // 2 - 1) / 2))\n\telif n == 6:\n\t\tprint(1)\n\telse:\n\t\tprint(0)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n=int(input())\nif n%2==1:\n\tans=0\nelse:\n\tc=n/2\n\tif c%2==1:\n\t\tans=int(n/4)\n\telse:\n\t\tans=int(n/4-1)\nprint(ans)\n"], "id": "id5381"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5381", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["pasha", 2], ["has", 2], ["a", 2], ["wooden", 2], ["stick", 2], ["of", 2], ["some", 2], ["positive", 2], ["integer", 2], ["length", 2], ["n", 2], ["he", 2], ["wants", 2], ["to", 2], ["perform", 2], ["exactly", 2], ["three", 2], ["cuts", 2], ["to", 2], ["get", 2], ["four", 2], ["parts", 2], ["of", 2], ["the", 2], ["stick", 2], ["each", 2], ["part", 2], ["must", 2], ["have", 2], ["some", 2], ["positive", 2], ["integer", 2], ["length", 2], ["and", 2], ["the", 2], ["sum", 2], ["of", 2], ["these", 2], ["lengths", 2], ["will", 2], ["obviously", 2], ["be", 2], ["n", 2], ["pasha", 2], ["likes", 2], ["rectangles", 2], ["but", 2], ["hates", 2], ["squares", 2], ["so", 2], ["he", 2], ["wonders", 2], ["how", 2], ["many", 2], ["ways", 2], ["are", 2], ["there", 2], ["to", 2], ["split", 2], ["a", 2], ["stick", 2], ["into", 2], ["four", 2], ["parts", 2], ["so", 2], ["that", 2], ["it", 2], ["s", 2], ["possible", 2], ["to", 2], ["form", 2], ["a", 2], ["rectangle", 2], ["using", 2], ["these", 2], ["parts", 2], ["but", 2], ["is", 2], ["impossible", 2], ["to", 2], ["form", 2], ["a", 2], ["square", 2], ["your", 2], ["task", 2], ["is", 2], ["to", 2], ["help", 2], ["pasha", 2], ["and", 2], ["count", 2], ["the", 2], ["number", 2], ["of", 2], ["such", 2], ["ways", 2], ["two", 2], ["ways", 2], ["to", 2], ["cut", 2], ["the", 2], ["stick", 2], ["are", 2], ["considered", 2], ["distinct", 2], ["if", 2], ["there", 2], ["exists", 2], ["some", 2], ["integer", 2], ["x", 2], ["such", 2], ["that", 2], ["the", 2], ["number", 2], ["of", 2], ["parts", 2], ["of", 2], ["length", 2], ["x", 2], ["in", 2], ["the", 2], ["first", 2], ["way", 2], ["differ", 2], ["from", 0], ["the", 0], ["number", 0], ["of", 0], ["parts", 0], ["of", 0], ["length", 0], ["x", 0], ["in", 0], ["the", 0], ["second", 0], ["way", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["a", 0], ["positive", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["2·10", 0], ["9", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["pasha", 0], ["s", 0], ["stick", 0], ["output", 0], ["the", 1], ["output", 1], ["should", 1], ["contain", 1], ["a", 1], ["single", 1], ["integer", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["ways", 1], ["to", 1], ["split", 1], ["pasha", 1], ["s", 1], ["stick", 1], ["into", 1], ["four", 1], ["parts", 1], ["of", 1], ["positive", 1], ["integer", 1], ["length", 1], ["so", 1], ["that", 1], ["it", 1], ["s", 1], ["possible", 1], ["to", 1], ["make", 1], ["a", 1], ["rectangle", 1], ["by", 1], ["connecting", 1], ["the", 0], ["ends", 0], ["of", 0], ["these", 0], ["parts", 0], ["but", 0], ["is", 0], ["impossible", 0], ["to", 0], ["form", 0], ["a", 0], ["square", 0], ["examples", 0], ["input", 0], ["6", 0], ["output", 0], ["1", 0], ["input", 0], ["20", 0], ["output", 0], ["4", 0], ["note", 0], ["there", 1], ["is", 1], ["only", 1], ["one", 1], ["way", 1], ["to", 1], ["divide", 1], ["the", 1], ["stick", 1], ["in", 1], ["the", 1], ["first", 1], ["sample", 1], ["1", 1], ["1", 1], ["2", 1], ["2", 1], ["four", 1], ["ways", 1], ["to", 1], ["divide", 1], ["the", 1], ["stick", 1], ["in", 1], ["the", 1], ["second", 1], ["sample", 1], ["are", 1], ["1", 1], ["1", 1], ["9", 1], ["9", 1], ["2", 1], ["2", 1], ["8", 1], ["8", 1], ["3", 1], ["3", 1], ["7", 1], ["7", 1], ["and", 1], ["4", 1], ["4", 0], ["6", 0], ["6", 0], ["note", 0], ["that", 0], ["5", 0], ["5", 0], ["5", 0], ["5", 0], ["doesn", 0], ["t", 0], ["work", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7509157509157509, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.521978021978022, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.887719298245614, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6473684210526316, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7509157509157509, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.521978021978022, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.887719298245614, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6473684210526316, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["x", 0], ["int", 0], ["input", 0], ["if", 0], ["x", 0], ["2", 0], ["1", 0], ["print", 0], ["0", 0], ["quit", 0], ["if", 0], ["x", 0], ["2", 0], ["0", 0], ["x", 0], ["2", 0], ["if", 0], ["x", 0], ["2", 0], ["0", 0], ["print", 0], ["x", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["x", 0], ["2", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["0", 0], ["elif", 0], ["n", 0], ["4", 0], ["2", 0], ["print", 0], ["n", 0], ["4", 0], ["else", 0], ["print", 0], ["n", 0], ["4", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["n", 0], ["2", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["if", 0], ["n", 0], ["4", 0], ["0", 0], ["print", 0], ["p", 0], ["1", 0], ["2", 0], ["else", 0], ["print", 0], ["p", 0], ["2", 0], ["x", 0], ["int", 0], ["input", 0], ["if", 0], ["x", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["x", 0], ["2", 0], ["print", 0], ["x", 0], ["1", 0], ["2", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["n", 0], ["2", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["a", 0], ["int", 0], ["input", 0], ["if", 0], ["a", 0], ["2", 0], ["0", 0], ["print", 0], ["0", 0], ["elif", 0], ["a", 0], ["4", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["a", 0], ["4", 0], ["a", 0], ["4", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["n", 0], ["2", 0], ["4", 0], ["import", 0], ["itertools", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["m", 0], ["n", 0], ["2", 0], ["print", 0], ["m", 0], ["1", 0], ["2", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["n", 0], ["n", 0], ["2", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["2", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["n", 0], ["2", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["k", 0], ["n", 0], ["2", 0], ["cnt", 0], ["k", 0], ["2", 0], ["if", 0], ["k", 0], ["2", 0], ["0", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["2", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["0", 0], ["elif", 0], ["n", 0], ["4", 0], ["0", 0], ["print", 0], ["n", 0], ["1", 0], ["4", 0], ["else", 0], ["print", 0], ["n", 0], ["4", 0], ["import", 0], ["math", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["m", 0], ["int", 0], ["n", 0], ["1", 0], ["2", 0], ["k", 0], ["int", 0], ["m", 0], ["2", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["k", 0], ["0", 0], ["print", 0], ["k", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["n", 0], ["2", 0], ["4", 0], ["else", 0], ["print", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["or", 0], ["n", 0], ["2", 0], ["or", 0], ["n", 0], ["4", 0], ["print", 0], ["0", 0], ["elif", 0], ["n", 0], ["4", 0], ["2", 0], ["print", 0], ["n", 0], ["4", 0], ["else", 0], ["print", 0], ["n", 0], ["4", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["if", 0], ["n", 0], ["2", 0], ["2", 0], ["1", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["2", 0], ["else", 0], ["print", 0], ["n", 0], ["4", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["2", 0], ["x", 0], ["int", 0], ["input", 0], ["if", 0], ["x", 0], ["2", 0], ["1", 0], ["or", 0], ["x", 0], ["4", 0], ["print", 0], ["0", 0], ["else", 0], ["half", 0], ["x", 0], ["2", 0], ["if", 0], ["half", 0], ["2", 0], ["0", 0], ["print", 0], ["half", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["half", 0], ["1", 0], ["2", 0], ["import", 0], ["sys", 0], ["if", 0], ["false", 0], ["inp", 0], ["open", 0], ["a", 0], ["txt", 0], ["r", 0], ["else", 0], ["inp", 0], ["sys", 0], ["stdin", 0], ["n", 0], ["int", 0], ["inp", 0], ["readline", 0], ["ans", 0], ["0", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["if", 0], ["n", 0], ["4", 0], ["0", 0], ["print", 0], ["n", 0], ["4", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["4", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["if", 0], ["n", 0], ["4", 0], ["0", 0], ["print", 0], ["n", 0], ["4", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["4", 0], ["else", 0], ["print", 0], ["0", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["math", 0], ["ceil", 0], ["n", 0], ["4", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["ans", 0], ["0", 0], ["else", 0], ["c", 0], ["n", 0], ["2", 0], ["if", 0], ["c", 0], ["2", 0], ["1", 0], ["ans", 0], ["int", 0], ["n", 0], ["4", 0], ["else", 0], ["ans", 0], ["int", 0], ["n", 0], ["4", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["6", 0], ["and", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["int", 0], ["n", 0], ["2", 0], ["1", 0], ["2", 0], ["elif", 0], ["n", 0], ["6", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["0", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["ans", 0], ["0", 0], ["else", 0], ["c", 0], ["n", 0], ["2", 0], ["if", 0], ["c", 0], ["2", 0], ["1", 0], ["ans", 0], ["int", 0], ["n", 0], ["4", 0], ["else", 0], ["ans", 0], ["int", 0], ["n", 0], ["4", 0], ["1", 0], ["print", 0], ["ans", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nVasya has a sequence of cubes and exactly one integer is written on each cube. Vasya exhibited all his cubes in a row. So the sequence of numbers written on the cubes in the order from the left to the right equals to a_1, a_2, ..., a_{n}.\n\nWhile Vasya was walking, his little brother Stepan played with Vasya's cubes and changed their order, so now the sequence of numbers written on the cubes became equal to b_1, b_2, ..., b_{n}. \n\nStepan said that he swapped only cubes which where on the positions between l and r, inclusive, and did not remove or add any other cubes (i. e. he said that he reordered cubes between positions l and r, inclusive, in some way).\n\nYour task is to determine if it is possible that Stepan said the truth, or it is guaranteed that Stepan deceived his brother.\n\n\n-----Input-----\n\nThe first line contains three integers n, l, r (1 ≤ n ≤ 10^5, 1 ≤ l ≤ r ≤ n) — the number of Vasya's cubes and the positions told by Stepan.\n\nThe second line contains the sequence a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ n) — the sequence of integers written on cubes in the Vasya's order.\n\nThe third line contains the sequence b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ n) — the sequence of integers written on cubes after Stepan rearranged their order.\n\nIt is guaranteed that Stepan did not remove or add other cubes, he only rearranged Vasya's cubes.\n\n\n-----Output-----\n\nPrint \"LIE\" (without quotes) if it is guaranteed that Stepan deceived his brother. In the other case, print \"TRUTH\" (without quotes).\n\n\n-----Examples-----\nInput\n5 2 4\n3 4 2 3 1\n3 2 3 4 1\n\nOutput\nTRUTH\n\nInput\n3 1 2\n1 2 3\n3 1 2\n\nOutput\nLIE\n\nInput\n4 2 4\n1 1 1 1\n1 1 1 1\n\nOutput\nTRUTH\n\n\n\n-----Note-----\n\nIn the first example there is a situation when Stepan said the truth. Initially the sequence of integers on the cubes was equal to [3, 4, 2, 3, 1]. Stepan could at first swap cubes on positions 2 and 3 (after that the sequence of integers on cubes became equal to [3, 2, 4, 3, 1]), and then swap cubes in positions 3 and 4 (after that the sequence of integers on cubes became equal to [3, 2, 3, 4, 1]).\n\nIn the second example it is not possible that Stepan said truth because he said that he swapped cubes only between positions 1 and 2, but we can see that it is guaranteed that he changed the position of the cube which was on the position 3 at first. So it is guaranteed that Stepan deceived his brother.\n\nIn the third example for any values l and r there is a situation when Stepan said the truth.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, l, r = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\nd = []\n\nisOk = 0\n\nfor i in range(0, l - 1):\n\tif a[i] != b[i]:\n\t\tisOk = 1\n\nfor i in range(r, n):\n\tif a[i] != b[i]:\n\t\tisOk = 1\n\nfor i in range(l - 1, r):\n\tc.append(a[i])\n\td.append(b[i])\n\nc.sort()\nd.sort()\n\nif c != d:\n\tisOk = 1\n\nif isOk == 1:\n\tprint(\"LIE\")\nelse:\n\tprint(\"TRUTH\")\n", "import sys\n\ndef main():\n\tyes = True\n\tarray = sys.stdin.readline().strip().split(' ')\n\tarray1 = sys.stdin.readline().strip().split(' ')\n\tarray2 = sys.stdin.readline().strip().split(' ')\n\tfor i in range(len(array1)):\n\t\tif i < int(array[1])-1 or i >= int(array[2]):\n\t\t\tif array1[i] != array2[i]:\n\t\t\t\tyes = False\n\t\t\t\tbreak\n\tif yes:\n\t\tprint(\"TRUTH\")\n\telse:\n\t\tprint(\"LIE\")\n\treturn\n\n\nmain()\n", "import sys\n\nn, l, r = list(map(int, (sys.stdin.readline()).split(\" \")))\na = list(map(int, (sys.stdin.readline()).split(\" \")))\nb = list(map(int, (sys.stdin.readline()).split(\" \")))\nl -= 1\nfor i in range(0, l):\n\tif a[i] != b[i]:\n\t\tprint(\"LIE\")\n\t\treturn\nfor i in range(r, n):\n\tif a[i] != b[i]:\n\t\tprint(\"LIE\")\n\t\treturn\nprint(\"TRUTH\")\n", "\nvals=lambda:map(int,input().split())\nn,l,r=vals()\n\na1=list(vals())\na2=list(vals())\n\nif a1[:l-1] == a2[:l-1] and a1[r:] == a2[r:]:\n\tprint(\"TRUTH\")\nelse:\n\tprint(\"LIE\")\n", "n, l, r = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nf = True\nfor i in range(l - 1):\n\tif a[i] != b[i]:\n\t\tf = False\nfor i in range(r, n):\n\tif a[i] != b[i]:\n\t\tf = False\na1 = []\nb1 = []\nfor i in range(l - 1, r):\n\tb1.append(b[i])\n\ta1.append(a[i])\na1.sort()\nb1.sort()\nfor i in range(len(a1)):\n\tif a1[i] != b1[i]:\n\t\tf = False\nif f:\n\tprint(\"TRUTH\")\nelse:\n\tprint(\"LIE\")\n\n", "lmap = lambda f, x: list(map(f, x))\nn,l,r = lmap(int, input().split())\nl-=1 \na = lmap(int, input().split())\nb = lmap(int, input().split())\n\na1 = a[l:r]\na2 = b[l:r]\ngood = (sorted(a1)==sorted(a2)) and (a[:l] == b[:l]) and (a[r:] == b[r:])\nif good:\n\tprint('TRUTH')\nelse:\n\tprint(\"LIE\")\n", "n, l, r = map(int, input().split())\na = input().split()\nb = input().split()\nif a[:l - 1] == b[:l - 1] and a[r:] == b[r:]:\n\tprint('TRUTH')\nelse:\n\tprint('LIE')\n", "n, l, r = map(int, input().split())\nl -= 1\nr -= 1\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(n):\n\tif (b[i] != a[i]) and (i < l or i > r):\n\t\tprint(\"LIE\")\n\t\tbreak\nelse:\n\tprint(\"TRUTH\")\n", "nlr = input().split()\na = input().split()\nb = input().split()\n\nif (a[:int(nlr[1])-1] != b[:int(nlr[1])-1]) | (a[int(nlr[2])+1:] != b[int(nlr[2])+1:]) | (sorted(a[int(nlr[1])-1:int(nlr[2])]) != sorted(b[int(nlr[1])-1:int(nlr[2])])):\n\tprint(\"LIE\")\nelse:\n\tprint(\"TRUTH\")\n\n# for i in range(nlr[1]):\n#     if a[i] != b[i]:\n#         print(\"LIE\")\n#         return\n# for i in range(nlr[2] + 1, n):\n#     if a[i] != b[i]:\n#         print(\"LIE\")\n#         return\n", "n, x1, x2 = [int(i) for i in input().split()]\na = input().split()\na = a[:x1 - 1] + a[x2:]\nb = input().split()\nb = b[:x1 - 1] + b[x2:]\ncheck = True\nfor i in range(len(a)):\n\tif (a[i] != b[i]):\n\t\tcheck = False\n\t\tbreak\nif (check):\n\tprint(\"TRUTH\")\nelse:\n\tprint(\"LIE\")\n", "n, l, r = list(map(int, input().split()))\nl -= 1\na = input().split()\nb = input().split()\n\nif a[:l] == b[:l] and a[r:] == b[r:]:\n\tprint(\"TRUTH\")\nelse:\n\tprint(\"LIE\")\n", "n=list(map(int,  input().split(' ')))\nai= list(map(int, input().split(' ')))\nbi= list(map(int, input().split(' ')))\nflag=True\nfor i in range(n[1]-1):\n\tif(ai[i]!= bi[i]):\n\t\tflag=False\n\t\tprint(\"LIE\")\n\t\tbreak\nif(flag):\n\tfor i in range(n[0]-n[2]):\n\t\tif(ai[n[2]+i]!=bi[n[2]+i]):\n\t\t\tflag=False\n\t\t\tprint(\"LIE\")\n\t\t\tbreak\nif (flag==True):\n\tprint('TRUTH')\n", "n,l,r=list(map(int,input().split()))\n\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\n\nc=[0 for i in range(100005)]\nfor i in range(l-1,r):\n\tc[a[i]]+=1\n\tc[b[i]]-=1\nt=True\nfor i in range(0,l-1):\n\tif a[i]!=b[i]:\n\t\tt=False\nfor i in range(r, n):\n\tif a[i] != b[i]:\n\t\tt = False\nfor i in c:\n\tif i!=0:\n\t\tt=False\nif t:\n\tprint('TRUTH')\nelse:\n\tprint('LIE')\n", "N = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\na=set()\nb=set()\nfor i in range (N[1]-1,N[2]):\n\ta.add(A[i])\n\tb.add(B[i])\nflag=True\nfor i in range (N[1]-1):\n\tif A[i]!=B[i]:\n\t\tflag=False\nfor i in range (N[2],N[0]):\n\tif A[i]!=B[i]:\n\t\tflag=False\nif a!=b:\n\tflag=False\nif flag==True:\n\tprint(\"TRUTH\")\nelse:\n\tprint (\"LIE\")\n", "n,l,r=list(map(int,input().split()))\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\na1=list()\nb1=list()\nu=1\nfor i in range(0,n):\n\tif(i>=l-1 and i<=r-1):\n\t\ta1.append(a[i])\n\t\tb1.append(b[i])\n\telse:\n\t\tif(a[i]!=b[i]):\n\t\t\tu=0\n\t\t\tbreak\na1.sort()\nb1.sort()       \nif(a1!=b1 or u==0):\n\tprint(\"LIE\")\nelse:\n\tprint(\"TRUTH\")\n", "def main():\n\ts = input().split()\n\tn = int(s[0])\n\tl = int(s[1])\n\tr = int(s[2])\n\ts = input().split()\n\tarr1 = []\n\tfor i in range(n):\n\t\tk = int(s[i])\n\t\tarr1.append(k)\n\ts = input().split()\n\tfor i in range(n):\n\t\tk = int(s[i])\n\t\tif arr1[i] != k and (i+1 < l or i+1 > r):\n\t\t\tprint('LIE')\n\t\t\treturn\n\tprint('TRUTH')\n\treturn\n\t\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "A = list(map(int, input().split()))\nn = A[0]\nl = A[1]\nr = A[2]\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = 1\nfor i in range(0, l - 1):\n\tif a[i] != b[i]:\n\t\tans = 0\nfor i in range(r, n):\n\tif a[i] != b[i]:\n\t\tans = 0\nif ans == 0:\n\tprint('LIE')\nelse:\n\tprint('TRUTH')\n", "n, l,r = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nif a[0 : l - 1] == b[0 : l - 1] and a[r : ] == b[r : ] and sorted(a[l - 1 : r]) == sorted(b[l - 1 : r]):\n\tprint('TRUTH')\nelse:\n\tprint('LIE')\n", "n, l, r = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nans = 'TRUTH'\n\nfor i in range(0, l - 1):\n\tif a[i] != b[i]:\n\t\tans = 'LIE'\n\t\t#print(i)\n\t\tbreak\n\nfor i in range(r, n):\n\tif a[i] != b[i]:\n\t\tans = 'LIE'\n\t\t#print(i)\n\t\tbreak\n\nprint(ans)\n", "n, l, r = map(int, input().split())\nl -= 1\na = input().split()\nb = input().split()\n\nif a[:l] == b[:l] and a[r:] == b[r:]:\n\tprint(\"TRUTH\")\nelse:\n\tprint(\"LIE\")\n", "import sys\nfrom collections import defaultdict\n\nN=[];N1=[];\nM=defaultdict(int);M1=defaultdict(int);\nn,l,r=list(map(int,input().split()));\nN=list(map(int,input().split()))\nN1=list(map(int,input().split()))\n\nPass=True\nfor i in range(l-1):\n\tif N[i]!=N1[i]:\n\t\tPass=False\n\t\tbreak\nif Pass is True:\n\tfor i in range(r,n):\n\t\tif N[i]!=N1[i]:\n\t\t\tPass=False\n\t\t\tbreak\nif Pass is True:\n\tfor i in range(l-1,r):\n\t\tM[N[i]]+=1\n\t\tM1[N1[i]]+=1\n\tfor i in range(n+1):\n\t\tif M[i]!=M1[i]:\n\t\t\tPass=False\n\t\t\tbreak\nif Pass:print(\"TRUTH\")\nelse:print(\"LIE\")\n", "'''input\n5 2 4\n3 4 2 3 1\n3 2 3 4 1\n'''\nn, l, r = map(int, input().split())\na, b = list(map(int, input().split())), list(map(int, input().split()))\nif a[:l-1] == b[:l-1] and a[r:] == b[r:] and sorted(a[l-1:r]) == sorted(b[l-1:r]):\n\tprint(\"TRUTH\")\nelse:\n\tprint(\"LIE\")\n", "l, a, b = list(map(int, input().split()))\nbefore = list(map(int, input().split()))\nafter = list(map(int, input().split()))\n\nif sorted(before[a - 1: b]) != sorted(after[a - 1: b]):\n\tprint(\"LIE\")\nelif before[:a-1] != after[:a-1]:\n\tprint(\"LIE\")\nelif before[b:] != after[b:]:\n\tprint(\"LIE\")\nelse:\n\tprint(\"TRUTH\")\n", "i=lambda:list(map(int,input().split()))\nn,l,r=i()\na=list(i())\nb=list(i())\na0=a[0:l-1]\na1=a[l-1:r]\na2=a[r:n]\nb0=b[0:l-1]\nb1=b[l-1:r]\nb2=b[r:n]\na1.sort()\nb1.sort()\nprint(\"TRUTH\" if a0==b0 and a1==b1 and a2==b2 else \"LIE\")\n"], "id": "id8634"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8634", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["vasya", 4], ["has", 4], ["a", 4], ["sequence", 4], ["of", 4], ["cubes", 4], ["and", 4], ["exactly", 4], ["one", 4], ["integer", 4], ["is", 4], ["written", 4], ["on", 4], ["each", 4], ["cube", 4], ["vasya", 4], ["exhibited", 4], ["all", 4], ["his", 4], ["cubes", 4], ["in", 4], ["a", 4], ["row", 4], ["so", 4], ["the", 4], ["sequence", 4], ["of", 4], ["numbers", 4], ["written", 4], ["on", 4], ["the", 4], ["cubes", 0], ["in", 0], ["the", 0], ["order", 0], ["from", 0], ["the", 0], ["left", 0], ["to", 0], ["the", 0], ["right", 0], ["equals", 0], ["to", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["while", 4], ["vasya", 4], ["was", 4], ["walking", 4], ["his", 4], ["little", 4], ["brother", 4], ["stepan", 4], ["played", 4], ["with", 4], ["vasya", 4], ["s", 4], ["cubes", 4], ["and", 4], ["changed", 4], ["their", 4], ["order", 4], ["so", 4], ["now", 0], ["the", 0], ["sequence", 0], ["of", 0], ["numbers", 0], ["written", 0], ["on", 0], ["the", 0], ["cubes", 0], ["became", 0], ["equal", 0], ["to", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["b", 0], ["n", 0], ["stepan", 4], ["said", 4], ["that", 4], ["he", 4], ["swapped", 4], ["only", 4], ["cubes", 4], ["which", 4], ["where", 4], ["on", 4], ["the", 4], ["positions", 4], ["between", 4], ["l", 4], ["and", 4], ["r", 4], ["inclusive", 4], ["and", 4], ["did", 4], ["not", 4], ["remove", 4], ["or", 4], ["add", 4], ["any", 4], ["other", 4], ["cubes", 4], ["i", 4], ["e", 4], ["he", 4], ["said", 4], ["that", 4], ["he", 4], ["reordered", 4], ["cubes", 4], ["between", 4], ["positions", 4], ["l", 4], ["and", 4], ["r", 4], ["inclusive", 4], ["in", 4], ["some", 4], ["way", 4], ["your", 4], ["task", 4], ["is", 4], ["to", 4], ["determine", 4], ["if", 4], ["it", 4], ["is", 4], ["possible", 4], ["that", 4], ["stepan", 4], ["said", 0], ["the", 0], ["truth", 0], ["or", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["stepan", 0], ["deceived", 0], ["his", 0], ["brother", 0], ["input", 0], ["the", 4], ["first", 0], ["line", 0], ["contains", 0], ["three", 0], ["integers", 0], ["n", 0], ["l", 0], ["r", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["1", 4], ["≤", 4], ["l", 4], ["≤", 4], ["r", 4], ["≤", 4], ["n", 4], ["—", 4], ["the", 4], ["number", 4], ["of", 4], ["vasya", 4], ["s", 4], ["cubes", 4], ["and", 0], ["the", 0], ["positions", 0], ["told", 0], ["by", 0], ["stepan", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["the", 0], ["sequence", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 4], ["n", 4], ["—", 4], ["the", 4], ["sequence", 4], ["of", 4], ["integers", 4], ["written", 4], ["on", 4], ["cubes", 0], ["in", 0], ["the", 0], ["vasya", 0], ["s", 0], ["order", 0], ["the", 0], ["third", 0], ["line", 0], ["contains", 0], ["the", 0], ["sequence", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["b", 0], ["n", 0], ["1", 0], ["≤", 0], ["b", 0], ["i", 0], ["≤", 4], ["n", 4], ["—", 4], ["the", 4], ["sequence", 4], ["of", 4], ["integers", 4], ["written", 4], ["on", 4], ["cubes", 4], ["after", 4], ["stepan", 4], ["rearranged", 4], ["their", 4], ["order", 4], ["it", 4], ["is", 4], ["guaranteed", 4], ["that", 4], ["stepan", 4], ["did", 4], ["not", 0], ["remove", 0], ["or", 0], ["add", 0], ["other", 0], ["cubes", 0], ["he", 0], ["only", 0], ["rearranged", 0], ["vasya", 0], ["s", 0], ["cubes", 0], ["output", 0], ["print", 4], ["lie", 4], ["without", 4], ["quotes", 4], ["if", 4], ["it", 4], ["is", 4], ["guaranteed", 4], ["that", 4], ["stepan", 0], ["deceived", 0], ["his", 0], ["brother", 0], ["in", 0], ["the", 0], ["other", 0], ["case", 0], ["print", 0], ["truth", 0], ["without", 0], ["quotes", 0], ["examples", 0], ["input", 0], ["5", 0], ["2", 0], ["4", 0], ["3", 0], ["4", 0], ["2", 0], ["3", 0], ["1", 0], ["3", 0], ["2", 0], ["3", 0], ["4", 0], ["1", 0], ["output", 0], ["truth", 0], ["input", 0], ["3", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["3", 0], ["3", 0], ["1", 0], ["2", 0], ["output", 0], ["lie", 0], ["input", 0], ["4", 0], ["2", 0], ["4", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["output", 0], ["truth", 0], ["note", 0], ["in", 4], ["the", 4], ["first", 4], ["example", 4], ["there", 4], ["is", 4], ["a", 4], ["situation", 4], ["when", 4], ["stepan", 4], ["said", 4], ["the", 4], ["truth", 4], ["initially", 4], ["the", 4], ["sequence", 4], ["of", 4], ["integers", 4], ["on", 4], ["the", 4], ["cubes", 4], ["was", 4], ["equal", 4], ["to", 4], ["3", 4], ["4", 4], ["2", 4], ["3", 4], ["1", 4], ["stepan", 4], ["could", 4], ["at", 4], ["first", 4], ["swap", 4], ["cubes", 4], ["on", 4], ["positions", 4], ["2", 4], ["and", 4], ["3", 4], ["after", 8], ["that", 4], ["the", 4], ["sequence", 4], ["of", 4], ["integers", 4], ["on", 4], ["cubes", 4], ["became", 4], ["equal", 4], ["to", 4], ["3", 4], ["2", 4], ["4", 4], ["3", 4], ["1", 4], ["and", 4], ["then", 4], ["swap", 4], ["cubes", 4], ["in", 4], ["positions", 4], ["3", 4], ["and", 4], ["4", 4], ["after", 8], ["that", 4], ["the", 4], ["sequence", 4], ["of", 4], ["integers", 4], ["on", 4], ["cubes", 4], ["became", 4], ["equal", 4], ["to", 4], ["3", 4], ["2", 4], ["3", 4], ["4", 4], ["1", 4], ["in", 4], ["the", 4], ["second", 4], ["example", 4], ["it", 4], ["is", 4], ["not", 4], ["possible", 4], ["that", 4], ["stepan", 4], ["said", 4], ["truth", 4], ["because", 4], ["he", 4], ["said", 4], ["that", 4], ["he", 4], ["swapped", 4], ["cubes", 4], ["only", 4], ["between", 4], ["positions", 4], ["1", 4], ["and", 4], ["2", 4], ["but", 4], ["we", 4], ["can", 4], ["see", 4], ["that", 4], ["it", 4], ["is", 4], ["guaranteed", 4], ["that", 4], ["he", 4], ["changed", 4], ["the", 4], ["position", 4], ["of", 4], ["the", 4], ["cube", 4], ["which", 4], ["was", 4], ["on", 4], ["the", 4], ["position", 4], ["3", 4], ["at", 4], ["first", 4], ["so", 4], ["it", 4], ["is", 4], ["guaranteed", 4], ["that", 4], ["stepan", 4], ["deceived", 4], ["his", 4], ["brother", 4], ["in", 4], ["the", 4], ["third", 4], ["example", 4], ["for", 4], ["any", 4], ["values", 4], ["l", 0], ["and", 0], ["r", 0], ["there", 0], ["is", 0], ["a", 0], ["situation", 0], ["when", 0], ["stepan", 0], ["said", 0], ["the", 0], ["truth", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6183673469387755, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1540816326530612, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8187250996015937, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.20468127490039842, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6183673469387755, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1540816326530612, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8187250996015937, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.20468127490039842, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["d", 0], ["isok", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["l", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["isok", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["isok", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["1", 0], ["r", 0], ["c", 0], ["append", 0], ["a", 0], ["i", 0], ["d", 0], ["append", 0], ["b", 0], ["i", 0], ["c", 0], ["sort", 0], ["d", 0], ["sort", 0], ["if", 0], ["c", 0], ["d", 0], ["isok", 0], ["1", 0], ["if", 0], ["isok", 0], ["1", 0], ["print", 0], ["lie", 0], ["else", 0], ["print", 0], ["truth", 0], ["import", 0], ["sys", 0], ["def", 0], ["main", 0], ["yes", 0], ["true", 0], ["array", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["array1", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["array2", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["array1", 0], ["if", 0], ["i", 0], ["int", 0], ["array", 0], ["1", 0], ["1", 0], ["or", 0], ["i", 0], ["int", 0], ["array", 0], ["2", 0], ["if", 0], ["array1", 0], ["i", 0], ["array2", 0], ["i", 0], ["yes", 0], ["false", 0], ["break", 0], ["if", 0], ["yes", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["return", 0], ["main", 0], ["import", 0], ["sys", 0], ["n", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["l", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["l", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["print", 0], ["lie", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["print", 0], ["lie", 0], ["return", 0], ["print", 0], ["truth", 0], ["vals", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["l", 0], ["r", 0], ["vals", 0], ["a1", 0], ["list", 0], ["vals", 0], ["a2", 0], ["list", 0], ["vals", 0], ["if", 0], ["a1", 0], ["l", 0], ["1", 0], ["a2", 0], ["l", 0], ["1", 0], ["and", 0], ["a1", 0], ["r", 0], ["a2", 0], ["r", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["n", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["f", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["f", 0], ["false", 0], ["a1", 0], ["b1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["1", 0], ["r", 0], ["b1", 0], ["append", 0], ["b", 0], ["i", 0], ["a1", 0], ["append", 0], ["a", 0], ["i", 0], ["a1", 0], ["sort", 0], ["b1", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a1", 0], ["if", 0], ["a1", 0], ["i", 0], ["b1", 0], ["i", 0], ["f", 0], ["false", 0], ["if", 0], ["f", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["lmap", 0], ["lambda", 0], ["f", 0], ["x", 0], ["list", 0], ["map", 0], ["f", 0], ["x", 0], ["n", 0], ["l", 0], ["r", 0], ["lmap", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["1", 0], ["a", 0], ["lmap", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["lmap", 0], ["int", 0], ["input", 0], ["split", 0], ["a1", 0], ["a", 0], ["l", 0], ["r", 0], ["a2", 0], ["b", 0], ["l", 0], ["r", 0], ["good", 0], ["sorted", 0], ["a1", 0], ["sorted", 0], ["a2", 0], ["and", 0], ["a", 0], ["l", 0], ["b", 0], ["l", 0], ["and", 0], ["a", 0], ["r", 0], ["b", 0], ["r", 0], ["if", 0], ["good", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["n", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["input", 0], ["split", 0], ["b", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["l", 0], ["1", 0], ["b", 0], ["l", 0], ["1", 0], ["and", 0], ["a", 0], ["r", 0], ["b", 0], ["r", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["n", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["and", 0], ["i", 0], ["l", 0], ["or", 0], ["i", 0], ["r", 0], ["print", 0], ["lie", 0], ["break", 0], ["else", 0], ["print", 0], ["truth", 0], ["nlr", 0], ["input", 0], ["split", 0], ["a", 0], ["input", 0], ["split", 0], ["b", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["int", 0], ["nlr", 0], ["1", 0], ["1", 0], ["b", 0], ["int", 0], ["nlr", 0], ["1", 0], ["1", 0], ["a", 0], ["int", 0], ["nlr", 0], ["2", 0], ["1", 0], ["b", 0], ["int", 0], ["nlr", 0], ["2", 0], ["1", 0], ["sorted", 0], ["a", 0], ["int", 0], ["nlr", 0], ["1", 0], ["1", 0], ["int", 0], ["nlr", 0], ["2", 0], ["sorted", 0], ["b", 0], ["int", 0], ["nlr", 0], ["1", 0], ["1", 0], ["int", 0], ["nlr", 0], ["2", 0], ["print", 0], ["lie", 0], ["else", 0], ["print", 0], ["truth", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["nlr", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["print", 0], ["lie", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["nlr", 0], ["2", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["print", 0], ["lie", 0], ["return", 0], ["n", 0], ["x1", 0], ["x2", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["input", 0], ["split", 0], ["a", 0], ["a", 0], ["x1", 0], ["1", 0], ["a", 0], ["x2", 0], ["b", 0], ["input", 0], ["split", 0], ["b", 0], ["b", 0], ["x1", 0], ["1", 0], ["b", 0], ["x2", 0], ["check", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["check", 0], ["false", 0], ["break", 0], ["if", 0], ["check", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["n", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["1", 0], ["a", 0], ["input", 0], ["split", 0], ["b", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["l", 0], ["b", 0], ["l", 0], ["and", 0], ["a", 0], ["r", 0], ["b", 0], ["r", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ai", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bi", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["flag", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["if", 0], ["ai", 0], ["i", 0], ["bi", 0], ["i", 0], ["flag", 0], ["false", 0], ["print", 0], ["lie", 0], ["break", 0], ["if", 0], ["flag", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["0", 0], ["n", 0], ["2", 0], ["if", 0], ["ai", 0], ["n", 0], ["2", 0], ["i", 0], ["bi", 0], ["n", 0], ["2", 0], ["i", 0], ["flag", 0], ["false", 0], ["print", 0], ["lie", 0], ["break", 0], ["if", 0], ["flag", 0], ["true", 0], ["print", 0], ["truth", 0], ["n", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100005", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["1", 0], ["r", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["c", 0], ["b", 0], ["i", 0], ["1", 0], ["t", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["l", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["t", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["t", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["c", 0], ["if", 0], ["i", 0], ["0", 0], ["t", 0], ["false", 0], ["if", 0], ["t", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["set", 0], ["b", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["n", 0], ["2", 0], ["a", 0], ["add", 0], ["a", 0], ["i", 0], ["b", 0], ["add", 0], ["b", 0], ["i", 0], ["flag", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["flag", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["n", 0], ["0", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["flag", 0], ["false", 0], ["if", 0], ["a", 0], ["b", 0], ["flag", 0], ["false", 0], ["if", 0], ["flag", 0], ["true", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["n", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a1", 0], ["list", 0], ["b1", 0], ["list", 0], ["u", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["i", 0], ["l", 0], ["1", 0], ["and", 0], ["i", 0], ["r", 0], ["1", 0], ["a1", 0], ["append", 0], ["a", 0], ["i", 0], ["b1", 0], ["append", 0], ["b", 0], ["i", 0], ["else", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["u", 0], ["0", 0], ["break", 0], ["a1", 0], ["sort", 0], ["b1", 0], ["sort", 0], ["if", 0], ["a1", 0], ["b1", 0], ["or", 0], ["u", 0], ["0", 0], ["print", 0], ["lie", 0], ["else", 0], ["print", 0], ["truth", 0], ["def", 0], ["main", 0], ["s", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["s", 0], ["0", 0], ["l", 0], ["int", 0], ["s", 0], ["1", 0], ["r", 0], ["int", 0], ["s", 0], ["2", 0], ["s", 0], ["input", 0], ["split", 0], ["arr1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["int", 0], ["s", 0], ["i", 0], ["arr1", 0], ["append", 0], ["k", 0], ["s", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["int", 0], ["s", 0], ["i", 0], ["if", 0], ["arr1", 0], ["i", 0], ["k", 0], ["and", 0], ["i", 0], ["1", 0], ["l", 0], ["or", 0], ["i", 0], ["1", 0], ["r", 0], ["print", 0], ["lie", 0], ["return", 0], ["print", 0], ["truth", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["a", 0], ["0", 0], ["l", 0], ["a", 0], ["1", 0], ["r", 0], ["a", 0], ["2", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["l", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["ans", 0], ["0", 0], ["if", 0], ["ans", 0], ["0", 0], ["print", 0], ["lie", 0], ["else", 0], ["print", 0], ["truth", 0], ["n", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["0", 0], ["l", 0], ["1", 0], ["b", 0], ["0", 0], ["l", 0], ["1", 0], ["and", 0], ["a", 0], ["r", 0], ["b", 0], ["r", 0], ["and", 0], ["sorted", 0], ["a", 0], ["l", 0], ["1", 0], ["r", 0], ["sorted", 0], ["b", 0], ["l", 0], ["1", 0], ["r", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["n", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["truth", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["l", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["ans", 0], ["lie", 0], ["print", 0], ["i", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["ans", 0], ["lie", 0], ["print", 0], ["i", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["1", 0], ["a", 0], ["input", 0], ["split", 0], ["b", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["l", 0], ["b", 0], ["l", 0], ["and", 0], ["a", 0], ["r", 0], ["b", 0], ["r", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["n", 0], ["n1", 0], ["m", 0], ["defaultdict", 0], ["int", 0], ["m1", 0], ["defaultdict", 0], ["int", 0], ["n", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pass", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["n1", 0], ["i", 0], ["pass", 0], ["false", 0], ["break", 0], ["if", 0], ["pass", 0], ["is", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["n", 0], ["if", 0], ["n", 0], ["i", 0], ["n1", 0], ["i", 0], ["pass", 0], ["false", 0], ["break", 0], ["if", 0], ["pass", 0], ["is", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["1", 0], ["r", 0], ["m", 0], ["n", 0], ["i", 0], ["1", 0], ["m1", 0], ["n1", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["m", 0], ["i", 0], ["m1", 0], ["i", 0], ["pass", 0], ["false", 0], ["break", 0], ["if", 0], ["pass", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["input", 0], ["5", 0], ["2", 0], ["4", 0], ["3", 0], ["4", 0], ["2", 0], ["3", 0], ["1", 0], ["3", 0], ["2", 0], ["3", 0], ["4", 0], ["1", 0], ["n", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["l", 0], ["1", 0], ["b", 0], ["l", 0], ["1", 0], ["and", 0], ["a", 0], ["r", 0], ["b", 0], ["r", 0], ["and", 0], ["sorted", 0], ["a", 0], ["l", 0], ["1", 0], ["r", 0], ["sorted", 0], ["b", 0], ["l", 0], ["1", 0], ["r", 0], ["print", 0], ["truth", 0], ["else", 0], ["print", 0], ["lie", 0], ["l", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["before", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["after", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sorted", 0], ["before", 0], ["a", 0], ["1", 0], ["b", 0], ["sorted", 0], ["after", 0], ["a", 0], ["1", 0], ["b", 0], ["print", 0], ["lie", 0], ["elif", 0], ["before", 0], ["a", 0], ["1", 0], ["after", 0], ["a", 0], ["1", 0], ["print", 0], ["lie", 0], ["elif", 0], ["before", 0], ["b", 0], ["after", 0], ["b", 0], ["print", 0], ["lie", 0], ["else", 0], ["print", 0], ["truth", 0], ["i", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["l", 0], ["r", 0], ["i", 0], ["a", 0], ["list", 0], ["i", 0], ["b", 0], ["list", 0], ["i", 0], ["a0", 0], ["a", 0], ["0", 0], ["l", 0], ["1", 0], ["a1", 0], ["a", 0], ["l", 0], ["1", 0], ["r", 0], ["a2", 0], ["a", 0], ["r", 0], ["n", 0], ["b0", 0], ["b", 0], ["0", 0], ["l", 0], ["1", 0], ["b1", 0], ["b", 0], ["l", 0], ["1", 0], ["r", 0], ["b2", 0], ["b", 0], ["r", 0], ["n", 0], ["a1", 0], ["sort", 0], ["b1", 0], ["sort", 0], ["print", 0], ["truth", 0], ["if", 0], ["a0", 0], ["b0", 0], ["and", 0], ["a1", 0], ["b1", 0], ["and", 0], ["a2", 0], ["b2", 0], ["else", 0], ["lie", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nAppleman and Toastman play a game. Initially Appleman gives one group of n numbers to the Toastman, then they start to complete the following tasks:  Each time Toastman gets a group of numbers, he sums up all the numbers and adds this sum to the score. Then he gives the group to the Appleman.  Each time Appleman gets a group consisting of a single number, he throws this group out. Each time Appleman gets a group consisting of more than one number, he splits the group into two non-empty groups (he can do it in any way) and gives each of them to Toastman. \n\nAfter guys complete all the tasks they look at the score value. What is the maximum possible value of score they can get?\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 ≤ n ≤ 3·10^5). The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^6) — the initial group that is given to Toastman.\n\n\n-----Output-----\n\nPrint a single integer — the largest possible score.\n\n\n-----Examples-----\nInput\n3\n3 1 5\n\nOutput\n26\n\nInput\n1\n10\n\nOutput\n10\n\n\n\n-----Note-----\n\nConsider the following situation in the first example. Initially Toastman gets group [3, 1, 5] and adds 9 to the score, then he give the group to Appleman. Appleman splits group [3, 1, 5] into two groups: [3, 5] and [1]. Both of them should be given to Toastman. When Toastman receives group [1], he adds 1 to score and gives the group to Appleman (he will throw it out). When Toastman receives group [3, 5], he adds 8 to the score and gives the group to Appleman. Appleman splits [3, 5] in the only possible way: [5] and [3]. Then he gives both groups to Toastman. When Toastman receives [5], he adds 5 to the score and gives the group to Appleman (he will throws it out). When Toastman receives [3], he adds 3 to the score and gives the group to Appleman (he will throws it out). Finally Toastman have added 9 + 1 + 8 + 5 + 3 = 26 to the score. This is the optimal sequence of actions.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\na = sorted(list(map(int, input().split())))\n\nans = 0\nif n == 1:\n\tans = a[0]\nelse:\n\tmult = 2\n\tfor i in range(n - 1):\n\t\tans += mult * a[i]\n\t\tmult += 1\n\tans += (mult - 1) * a[-1]\nprint(ans)\n\n", "n = int(input())\na = sorted(list(map(int, input().split())))\nans = sum(a)\nfor i in range(n):\n\tans += a[i] * (i + 1)\nprint(ans - a[n - 1])\n", "n=int(input())\ndata=list(map(int,input().split()))\ndata.sort()\nans=0\nfor (i,x) in enumerate(data,2):\n\tans+= x*i\nans-=data[-1]\nprint(ans)\n", "def main():\n\tn = int(input())\n\ta = [int(i) for i in input().split()]\n\t\n\ta.sort()\n\t\n\tif len(a) == 1:\n\t\tprint(a[0])\n\telse:\n\t\ta[-2] += a[-1]; a.pop()\n\t\tresult = 0\n\t\tfor i in range(n - 1):\n\t\t\tresult += a[i] * (i + 2)\n\t\tprint(result)\n\n\nmain()\n", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nprint(sum([(i+1)*a[i] for i in range(n)])+sum(a[:-1]))\n", "n = int(input())\nx = list(map(int, input().split()))\nx.sort()\nres = 0\nfor s,i in enumerate(x, 2):\n\tres += min(n, s) * i\nprint(res)\n", "n = int(input())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\ns = sum(a)\n\nres = s\n\nwhile len(a) > 1:\n\tres += s\n\ts -= a.pop()\n\nprint(res)\n", "inp = input()\nn = int(inp)\nline=input()\nmyarray = line.split(' ')\nmyarray = list(map(int,myarray))\nmyarray=sorted(myarray)\nscore=0\nif(n==1):\n\tprint((int(myarray[0])));\nelif(n==2):\n\tprint(2*(int(myarray[1])+int(myarray[0])))\nelse:\n\tminimum=0;\n\tfor x in range(len(myarray)):\n\t\tscore = score+ (x+2)*(int(myarray[x]))\n\tscore = score-int(int(myarray[n-1]))\n\tprint(score)\n", "Inpt=int(input())\nMainlist=sorted(list(map(int,input().split(' '))))\nScore=0\nif Inpt==1:\n\tprint(int(Mainlist[0]))\nelif Inpt==2:\n\tprint(2*(int(Mainlist[1])+int(Mainlist[0])))\nelse:\n\tfor i in range(len(Mainlist)):\n\t\tScore+=(i+2)*(int(Mainlist[i]))\n\tScore-=int(Mainlist[Inpt-1])\n\tprint(Score)\n", "import sys, os\n\ndef myreadline():\n\n\t#testFile = \"461A-t\"\n\ttestFile = \"\"\n\n\tif testFile:\n\t\tif not hasattr(myreadline, \"fTest\"):\n\t\t\tmyreadline.fTest = open(os.path.join(os.path.dirname(__file__), testFile))\n\t\treturn myreadline.fTest.readline()\n\telse:\n\t\treturn input()\n\ndef myreadlineint():\n\treturn [int(x) for x in myreadline().split()]\n\nn, = myreadlineint()\nl = myreadlineint()\nl.sort()\n\nsm = sum(l)\n#print(sm)\nres = 0\nres += sm*2\nfor x in l:\n\tsm -= x\n\t#print(sm)\n\tres += sm\nres -= l[len(l)-1]\n\nprint(res)\n\n\n\n\n\n\n\n\n\n\n", "input()\nt = list(map(int, input().split()))\nt.sort()\nprint(sum(i * x for i, x in enumerate(t, 2)) - t[-1])\n", "from sys import stdin\n\nfrom heapq import heappush, heappop\ndef main():\n\tinp=stdin\n\tnumero=inp.readline()\n\twhile (numero !=\"\" ):\n\t\tnumero=int(numero.strip())\n\t\tjuego= inp.readline().strip().split()      \n\t\tprint(solucion(juego))\n\t\tnumero=inp.readline()\n\t\t\ndef solucion(Arreglo):\n\tjuego=[]\n\tfor i in range(len(Arreglo)):\n\t\theappush(juego,int(Arreglo[i]))\n\ttotal=sum(juego)\n\tcontador=0\n\twhile (juego):\n\t\tcontador+=total\n\t\tultimo=heappop(juego)\n\t\tcontador+=ultimo\n\t\ttotal-=ultimo\n\tcontador-=ultimo\n\treturn contador\n\nmain()\n", "input()\na = list(map(int,input().split()))\na.sort()\ns = 0\nfor i in enumerate(a, 2):\n\ts += i[0] * i[1]\nprint(s - a[-1])\n", "def sum_l(lst):\n\ttemp = 0\n\tfor i in lst:\n\t\ttemp += i\n\treturn temp\n\nl1 = input()\nl1 = int(l1)\na = input()\nl2 = [int(x) for x in a.split()]\nl2.sort()\nans = 0\nif len(l2) == 1:\n\tans += l2[0]\nelse:\n\tn = 0\n\tfor i in l2:\n\t\tans += i * (n + 2)\n\t\tn += 1\n\tans -= l2[-1]\n\n#ans = sum_l(l2)\n#for i in range(l1-1):\n#    ans += sum_l(l2)\n#    l2.pop(0)\n\t\nprint (ans)\n\t\n\n\n", "n=int(input())\ns=input()\nx=list()\nx=s.split()\ny=sorted(x,key=int)\nans=0\nfor i in range(n):\n\tans+=int(y[i])*(i+2)\n\nans-=int(y[n-1])\nprint(ans)\n", "n = int(input())\narr = list(map(int, input().split()))\nans, cursum = 0, 0\narr.sort()\n\nfor i in range(n):\n\tcursum += arr[i]\n\nfor i in range(n):\n\tans += cursum\n\tif i < n - 1:\n\t\tans += arr[i]\n\tcursum -= arr[i]\n\nprint(ans)\n", "import sys\nimport math\n\nn = int(sys.stdin.readline())\n\nin_str = [int(x) for x in (sys.stdin.readline()).split()]\n\nin_str.sort(reverse=True)\n\nresult = int(math.fsum(in_str))\nk = result\n\nmv = len(in_str) - 1\n\nwhile(mv > 0):\n\tresult += in_str[mv]\n\tk = int(k - in_str[mv])\n\tresult += k\n\tmv -= 1\n\t\nprint (result)\n", "#!/usr/bin/env python\n# encoding: utf-8\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nans = 0\nfor i in range(n - 1):\n\tans = ans + (i + 2) * a[i]\nans = ans + n * a[n - 1]\nprint(ans)\n", "n=int(input())\nl=list(map(int,input().split()))\nl.sort()\n\n\n\nsum=0\nif n!=1:\n\tfor i in range(2,n+1):\n\t\tsum+=i*l[i-2]\n\tsum+=n*l[n-1]\n\tprint(sum)\nelse: print(l[0])\n", "import math\n\nn=int(input())\ndata=list(map(int,input().split()))\n\nsum=0\nfor i in range(n):\n\tsum+=data[i]\n\nans=sum\ndata.sort()\n\nfor i in range(n-1):\n\t#print(ans)\n   # print(data[i:])\n\tans+=sum\n\tsum-=data[i]\n\nprint(ans)\n", "n=int(input())\nar=list(map(int,input().split()))\nar.sort()\ns=0\nsu=sum(ar)\nfor x in range(n):\n\ts+=ar[x]\n\ts+=su\n\tsu-=ar[x]\nprint(s-ar[n-1])\n", "input()\nq = [int(x) for x in input().split()]\nq.sort()\n\ns = delta = sum(q)\nfor item in q:\n\ts += delta\n\tdelta -= item\nprint(s - q[-1])\n", "n=int(input())\nlis=input().split()\nfor i in range(n):\n\tlis[i]=int(lis[i])\nlis.sort()\nm=max(lis)\ns=0\nfor i in range(len(lis)):\n   s+=lis[i]*(i+2) \nprint(s-m)\n", "from sys import stdin\n\n\ndef main():\n\tstdin.readline()\n\tl = sorted(list(map(int, stdin.readline().strip().split())))\n\ttot = delta = sum(l)\n\tfor x in l:\n\t\ttot += delta\n\t\tdelta -= x\n\treturn tot - x\n\n\nprint(main())\n"], "id": "id5220"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5220", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["appleman", 4], ["and", 4], ["toastman", 4], ["play", 4], ["a", 4], ["game", 4], ["initially", 4], ["appleman", 4], ["gives", 4], ["one", 4], ["group", 4], ["of", 4], ["n", 4], ["numbers", 4], ["to", 4], ["the", 4], ["toastman", 4], ["then", 4], ["they", 4], ["start", 4], ["to", 4], ["complete", 4], ["the", 4], ["following", 4], ["tasks", 4], ["each", 4], ["time", 4], ["toastman", 4], ["gets", 4], ["a", 4], ["group", 4], ["of", 4], ["numbers", 4], ["he", 4], ["sums", 4], ["up", 4], ["all", 4], ["the", 4], ["numbers", 4], ["and", 4], ["adds", 4], ["this", 4], ["sum", 4], ["to", 4], ["the", 4], ["score", 4], ["then", 4], ["he", 4], ["gives", 4], ["the", 4], ["group", 4], ["to", 4], ["the", 4], ["appleman", 4], ["each", 5], ["time", 5], ["appleman", 5], ["gets", 5], ["a", 4], ["group", 4], ["consisting", 4], ["of", 4], ["a", 4], ["single", 4], ["number", 4], ["he", 4], ["throws", 4], ["this", 4], ["group", 4], ["out", 4], ["each", 4], ["time", 4], ["appleman", 4], ["gets", 4], ["a", 4], ["group", 4], ["consisting", 4], ["of", 4], ["more", 4], ["than", 4], ["one", 4], ["number", 4], ["he", 4], ["splits", 4], ["the", 4], ["group", 4], ["into", 4], ["two", 4], ["non", 4], ["empty", 4], ["groups", 4], ["he", 4], ["can", 4], ["do", 4], ["it", 4], ["in", 4], ["any", 4], ["way", 4], ["and", 4], ["gives", 4], ["each", 4], ["of", 4], ["them", 4], ["to", 4], ["toastman", 4], ["after", 4], ["guys", 4], ["complete", 4], ["all", 4], ["the", 4], ["tasks", 4], ["they", 4], ["look", 4], ["at", 4], ["the", 4], ["score", 4], ["value", 0], ["what", 0], ["is", 0], ["the", 0], ["maximum", 0], ["possible", 0], ["value", 0], ["of", 0], ["score", 0], ["they", 0], ["can", 0], ["get", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["3·10", 0], ["5", 0], ["the", 1], ["second", 1], ["line", 1], ["contains", 1], ["n", 1], ["integers", 1], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["10", 0], ["6", 0], ["—", 0], ["the", 0], ["initial", 0], ["group", 0], ["that", 0], ["is", 0], ["given", 0], ["to", 0], ["toastman", 0], ["output", 0], ["print", 0], ["a", 0], ["single", 0], ["integer", 0], ["—", 0], ["the", 0], ["largest", 0], ["possible", 0], ["score", 0], ["examples", 0], ["input", 0], ["3", 0], ["3", 0], ["1", 0], ["5", 0], ["output", 0], ["26", 0], ["input", 0], ["1", 0], ["10", 0], ["output", 0], ["10", 0], ["note", 0], ["consider", 4], ["the", 4], ["following", 4], ["situation", 4], ["in", 4], ["the", 4], ["first", 4], ["example", 4], ["initially", 4], ["toastman", 4], ["gets", 4], ["group", 4], ["3", 4], ["1", 4], ["5", 4], ["and", 4], ["adds", 4], ["9", 4], ["to", 4], ["the", 4], ["score", 4], ["then", 4], ["he", 4], ["give", 4], ["the", 4], ["group", 4], ["to", 4], ["appleman", 4], ["appleman", 4], ["splits", 4], ["group", 4], ["3", 4], ["1", 4], ["5", 4], ["into", 4], ["two", 4], ["groups", 4], ["3", 4], ["5", 4], ["and", 4], ["1", 4], ["both", 4], ["of", 4], ["them", 4], ["should", 4], ["be", 4], ["given", 4], ["to", 4], ["toastman", 4], ["when", 4], ["toastman", 4], ["receives", 4], ["group", 4], ["1", 4], ["he", 4], ["adds", 4], ["1", 4], ["to", 4], ["score", 4], ["and", 4], ["gives", 4], ["the", 4], ["group", 4], ["to", 4], ["appleman", 4], ["he", 4], ["will", 4], ["throw", 4], ["it", 4], ["out", 4], ["when", 4], ["toastman", 4], ["receives", 4], ["group", 4], ["3", 4], ["5", 4], ["he", 4], ["adds", 4], ["8", 4], ["to", 4], ["the", 4], ["score", 4], ["and", 4], ["gives", 4], ["the", 4], ["group", 4], ["to", 4], ["appleman", 4], ["appleman", 4], ["splits", 4], ["3", 4], ["5", 4], ["in", 4], ["the", 4], ["only", 4], ["possible", 4], ["way", 4], ["5", 4], ["and", 4], ["3", 4], ["then", 4], ["he", 4], ["gives", 4], ["both", 4], ["groups", 4], ["to", 4], ["toastman", 4], ["when", 4], ["toastman", 4], ["receives", 4], ["5", 4], ["he", 4], ["adds", 4], ["5", 4], ["to", 8], ["the", 8], ["score", 4], ["and", 4], ["gives", 4], ["the", 4], ["group", 4], ["to", 4], ["appleman", 4], ["he", 4], ["will", 4], ["throws", 4], ["it", 4], ["out", 4], ["when", 4], ["toastman", 4], ["receives", 4], ["3", 4], ["he", 4], ["adds", 4], ["3", 4], ["to", 8], ["the", 8], ["score", 4], ["and", 4], ["gives", 4], ["the", 4], ["group", 4], ["to", 4], ["appleman", 4], ["he", 4], ["will", 4], ["throws", 4], ["it", 4], ["out", 4], ["finally", 4], ["toastman", 4], ["have", 4], ["added", 4], ["9", 4], ["1", 4], ["8", 4], ["5", 4], ["3", 0], ["26", 0], ["to", 0], ["the", 0], ["score", 0], ["this", 0], ["is", 0], ["the", 0], ["optimal", 0], ["sequence", 0], ["of", 0], ["actions", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.768595041322314, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.20261707988980715, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.84, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.246, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.768595041322314, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.20261707988980715, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.84, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.246, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["a", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["if", 0], ["n", 0], ["1", 0], ["ans", 0], ["a", 0], ["0", 0], ["else", 0], ["mult", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["ans", 0], ["mult", 0], ["a", 0], ["i", 0], ["mult", 0], ["1", 0], ["ans", 0], ["mult", 0], ["1", 0], ["a", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["sum", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["a", 0], ["n", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["data", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["data", 0], ["sort", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["data", 0], ["2", 0], ["ans", 0], ["x", 0], ["i", 0], ["ans", 0], ["data", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["if", 0], ["len", 0], ["a", 0], ["1", 0], ["print", 0], ["a", 0], ["0", 0], ["else", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["a", 0], ["pop", 0], ["result", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["result", 0], ["a", 0], ["i", 0], ["i", 0], ["2", 0], ["print", 0], ["result", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["print", 0], ["sum", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sum", 0], ["a", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["sort", 0], ["res", 0], ["0", 0], ["for", 0], ["s", 0], ["i", 0], ["in", 0], ["enumerate", 0], ["x", 0], ["2", 0], ["res", 0], ["min", 0], ["n", 0], ["s", 0], ["i", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["s", 0], ["sum", 0], ["a", 0], ["res", 0], ["s", 0], ["while", 0], ["len", 0], ["a", 0], ["1", 0], ["res", 0], ["s", 0], ["s", 0], ["a", 0], ["pop", 0], ["print", 0], ["res", 0], ["inp", 0], ["input", 0], ["n", 0], ["int", 0], ["inp", 0], ["line", 0], ["input", 0], ["myarray", 0], ["line", 0], ["split", 0], ["myarray", 0], ["list", 0], ["map", 0], ["int", 0], ["myarray", 0], ["myarray", 0], ["sorted", 0], ["myarray", 0], ["score", 0], ["0", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["int", 0], ["myarray", 0], ["0", 0], ["elif", 0], ["n", 0], ["2", 0], ["print", 0], ["2", 0], ["int", 0], ["myarray", 0], ["1", 0], ["int", 0], ["myarray", 0], ["0", 0], ["else", 0], ["minimum", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["len", 0], ["myarray", 0], ["score", 0], ["score", 0], ["x", 0], ["2", 0], ["int", 0], ["myarray", 0], ["x", 0], ["score", 0], ["score", 0], ["int", 0], ["int", 0], ["myarray", 0], ["n", 0], ["1", 0], ["print", 0], ["score", 0], ["inpt", 0], ["int", 0], ["input", 0], ["mainlist", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["score", 0], ["0", 0], ["if", 0], ["inpt", 0], ["1", 0], ["print", 0], ["int", 0], ["mainlist", 0], ["0", 0], ["elif", 0], ["inpt", 0], ["2", 0], ["print", 0], ["2", 0], ["int", 0], ["mainlist", 0], ["1", 0], ["int", 0], ["mainlist", 0], ["0", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["mainlist", 0], ["score", 0], ["i", 0], ["2", 0], ["int", 0], ["mainlist", 0], ["i", 0], ["score", 0], ["int", 0], ["mainlist", 0], ["inpt", 0], ["1", 0], ["print", 0], ["score", 0], ["import", 0], ["sys", 0], ["os", 0], ["def", 0], ["myreadline", 0], ["testfile", 0], ["461a", 0], ["t", 0], ["testfile", 0], ["if", 0], ["testfile", 0], ["if", 0], ["not", 0], ["hasattr", 0], ["myreadline", 0], ["ftest", 0], ["myreadline", 0], ["ftest", 0], ["open", 0], ["os", 0], ["path", 0], ["join", 0], ["os", 0], ["path", 0], ["dirname", 0], ["file", 0], ["testfile", 0], ["return", 0], ["myreadline", 0], ["ftest", 0], ["readline", 0], ["else", 0], ["return", 0], ["input", 0], ["def", 0], ["myreadlineint", 0], ["return", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["myreadline", 0], ["split", 0], ["n", 0], ["myreadlineint", 0], ["l", 0], ["myreadlineint", 0], ["l", 0], ["sort", 0], ["sm", 0], ["sum", 0], ["l", 0], ["print", 0], ["sm", 0], ["res", 0], ["0", 0], ["res", 0], ["sm", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["sm", 0], ["x", 0], ["print", 0], ["sm", 0], ["res", 0], ["sm", 0], ["res", 0], ["l", 0], ["len", 0], ["l", 0], ["1", 0], ["print", 0], ["res", 0], ["input", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["sort", 0], ["print", 0], ["sum", 0], ["i", 0], ["x", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["t", 0], ["2", 0], ["t", 0], ["1", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappush", 0], ["heappop", 0], ["def", 0], ["main", 0], ["inp", 0], ["stdin", 0], ["numero", 0], ["inp", 0], ["readline", 0], ["while", 0], ["numero", 0], ["numero", 0], ["int", 0], ["numero", 0], ["strip", 0], ["juego", 0], ["inp", 0], ["readline", 0], ["strip", 0], ["split", 0], ["print", 0], ["solucion", 0], ["juego", 0], ["numero", 0], ["inp", 0], ["readline", 0], ["def", 0], ["solucion", 0], ["arreglo", 0], ["juego", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["arreglo", 0], ["heappush", 0], ["juego", 0], ["int", 0], ["arreglo", 0], ["i", 0], ["total", 0], ["sum", 0], ["juego", 0], ["contador", 0], ["0", 0], ["while", 0], ["juego", 0], ["contador", 0], ["total", 0], ["ultimo", 0], ["heappop", 0], ["juego", 0], ["contador", 0], ["ultimo", 0], ["total", 0], ["ultimo", 0], ["contador", 0], ["ultimo", 0], ["return", 0], ["contador", 0], ["main", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["2", 0], ["s", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["s", 0], ["a", 0], ["1", 0], ["def", 0], ["sum", 0], ["l", 0], ["lst", 0], ["temp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["lst", 0], ["temp", 0], ["i", 0], ["return", 0], ["temp", 0], ["l1", 0], ["input", 0], ["l1", 0], ["int", 0], ["l1", 0], ["a", 0], ["input", 0], ["l2", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["split", 0], ["l2", 0], ["sort", 0], ["ans", 0], ["0", 0], ["if", 0], ["len", 0], ["l2", 0], ["1", 0], ["ans", 0], ["l2", 0], ["0", 0], ["else", 0], ["n", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["l2", 0], ["ans", 0], ["i", 0], ["n", 0], ["2", 0], ["n", 0], ["1", 0], ["ans", 0], ["l2", 0], ["1", 0], ["ans", 0], ["sum", 0], ["l", 0], ["l2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l1", 0], ["1", 0], ["ans", 0], ["sum", 0], ["l", 0], ["l2", 0], ["l2", 0], ["pop", 0], ["0", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["x", 0], ["list", 0], ["x", 0], ["s", 0], ["split", 0], ["y", 0], ["sorted", 0], ["x", 0], ["key", 0], ["int", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["int", 0], ["y", 0], ["i", 0], ["i", 0], ["2", 0], ["ans", 0], ["int", 0], ["y", 0], ["n", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["cursum", 0], ["0", 0], ["0", 0], ["arr", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cursum", 0], ["arr", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["cursum", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["ans", 0], ["arr", 0], ["i", 0], ["cursum", 0], ["arr", 0], ["i", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["in", 0], ["str", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["in", 0], ["str", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["result", 0], ["int", 0], ["math", 0], ["fsum", 0], ["in", 0], ["str", 0], ["k", 0], ["result", 0], ["mv", 0], ["len", 0], ["in", 0], ["str", 0], ["1", 0], ["while", 0], ["mv", 0], ["0", 0], ["result", 0], ["in", 0], ["str", 0], ["mv", 0], ["k", 0], ["int", 0], ["k", 0], ["in", 0], ["str", 0], ["mv", 0], ["result", 0], ["k", 0], ["mv", 0], ["1", 0], ["print", 0], ["result", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["encoding", 0], ["utf", 0], ["8", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["ans", 0], ["ans", 0], ["i", 0], ["2", 0], ["a", 0], ["i", 0], ["ans", 0], ["ans", 0], ["n", 0], ["a", 0], ["n", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["sort", 0], ["sum", 0], ["0", 0], ["if", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["sum", 0], ["i", 0], ["l", 0], ["i", 0], ["2", 0], ["sum", 0], ["n", 0], ["l", 0], ["n", 0], ["1", 0], ["print", 0], ["sum", 0], ["else", 0], ["print", 0], ["l", 0], ["0", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["data", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sum", 0], ["data", 0], ["i", 0], ["ans", 0], ["sum", 0], ["data", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["print", 0], ["ans", 0], ["print", 0], ["data", 0], ["i", 0], ["ans", 0], ["sum", 0], ["sum", 0], ["data", 0], ["i", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["ar", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ar", 0], ["sort", 0], ["s", 0], ["0", 0], ["su", 0], ["sum", 0], ["ar", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["ar", 0], ["x", 0], ["s", 0], ["su", 0], ["su", 0], ["ar", 0], ["x", 0], ["print", 0], ["s", 0], ["ar", 0], ["n", 0], ["1", 0], ["input", 0], ["q", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["q", 0], ["sort", 0], ["s", 0], ["delta", 0], ["sum", 0], ["q", 0], ["for", 0], ["item", 0], ["in", 0], ["q", 0], ["s", 0], ["delta", 0], ["delta", 0], ["item", 0], ["print", 0], ["s", 0], ["q", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["lis", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["lis", 0], ["i", 0], ["int", 0], ["lis", 0], ["i", 0], ["lis", 0], ["sort", 0], ["m", 0], ["max", 0], ["lis", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["lis", 0], ["s", 0], ["lis", 0], ["i", 0], ["i", 0], ["2", 0], ["print", 0], ["s", 0], ["m", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["def", 0], ["main", 0], ["stdin", 0], ["readline", 0], ["l", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["tot", 0], ["delta", 0], ["sum", 0], ["l", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["tot", 0], ["delta", 0], ["delta", 0], ["x", 0], ["return", 0], ["tot", 0], ["x", 0], ["print", 0], ["main", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThe management of the software company JunkCode has recently found, much to their surprise and disappointment, that productivity has gone down since they implemented their enhanced set of coding guidelines. The idea was that all developers should make sure that every code change they push to the master branch of their software repository strictly follows the coding guidelines. After all, one of the developers, Perikles, has been doing this since long before these regulations became effective so how hard could it be? \n\nRather than investing a lot of time figuring out why this degradation in productivity occurred, the line manager suggests that they loosen their requirement: developers can push code that weakly violates the guidelines as long as they run cleanup phases on the code from time to time to make sure the repository is tidy.\n\nShe suggests a metric where the “dirtiness” of a developer’s code is the sum of the pushes that violate the guidelines – so-called dirty pushes – made by that developer, each weighted by the number of days since it was pushed. The number of days since a dirty push is a step function that increases by one each midnight following the push. Hence, if a developer has made dirty pushes on days $1$, $2$, and $5$, the dirtiness on day $6$ is $5+4+1=10$. She suggests that a cleanup phase, completely fixing all violations of the coding guidelines, must be completed before the dirtiness reaches $20$. One of the developers, Petra, senses that this rule must be obeyed not only because it is a company policy. Breaking it will also result in awkward meetings with a lot of concerned managers who all want to know why she cannot be more like Perikles? Still, she wants to run the cleanup phase as seldomly as possible, and always postpones it until it is absolutely necessary. A cleanup phase is always run at the end of the day and fixes every dirty push done up to and including that day. Since all developers are shuffled to new projects at the start of each year, no dirtiness should be left after midnight at the end of new year’s eve.\n\n-----Input-----\nThe first line of input contains an integer $n$ ($1 \\leq n \\leq 365$), the number of dirty pushes made by Petra during a year. The second line contains $n$ integers $d_1, d_2, \\ldots , d_ n$ ($1 \\leq d_ i \\leq 365$ for each $1 \\le i \\le n$) giving the days when Petra made dirty pushes. You can assume that $d_ i < d_ j$ for $i < j$.\n\n-----Output-----\nOutput the total number of cleanup phases needed for Petra to keep the dirtiness strictly below $20$ at all times.\n\n-----Examples-----\nSample Input:\n5\n1 45 65 84 346\nSample Output:\n4\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6461"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6461", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 1], ["management", 1], ["of", 1], ["the", 1], ["software", 1], ["company", 1], ["junkcode", 1], ["has", 1], ["recently", 1], ["found", 1], ["much", 1], ["to", 1], ["their", 1], ["surprise", 1], ["and", 1], ["disappointment", 1], ["that", 1], ["productivity", 1], ["has", 1], ["gone", 1], ["down", 1], ["since", 1], ["they", 1], ["implemented", 1], ["their", 1], ["enhanced", 1], ["set", 1], ["of", 1], ["coding", 1], ["guidelines", 1], ["the", 1], ["idea", 1], ["was", 1], ["that", 1], ["all", 1], ["developers", 1], ["should", 1], ["make", 1], ["sure", 1], ["that", 1], ["every", 1], ["code", 1], ["change", 1], ["they", 1], ["push", 1], ["to", 1], ["the", 1], ["master", 1], ["branch", 1], ["of", 1], ["their", 1], ["software", 1], ["repository", 1], ["strictly", 1], ["follows", 1], ["the", 1], ["coding", 1], ["guidelines", 1], ["after", 1], ["all", 1], ["one", 1], ["of", 1], ["the", 1], ["developers", 1], ["perikles", 1], ["has", 1], ["been", 1], ["doing", 1], ["this", 1], ["since", 1], ["long", 1], ["before", 1], ["these", 1], ["regulations", 1], ["became", 1], ["effective", 1], ["so", 1], ["how", 1], ["hard", 1], ["could", 1], ["it", 1], ["be", 1], ["rather", 1], ["than", 1], ["investing", 1], ["a", 1], ["lot", 1], ["of", 1], ["time", 1], ["figuring", 1], ["out", 1], ["why", 1], ["this", 1], ["degradation", 1], ["in", 1], ["productivity", 1], ["occurred", 1], ["the", 1], ["line", 1], ["manager", 1], ["suggests", 1], ["that", 1], ["they", 1], ["loosen", 1], ["their", 1], ["requirement", 1], ["developers", 1], ["can", 1], ["push", 1], ["code", 1], ["that", 1], ["weakly", 1], ["violates", 1], ["the", 1], ["guidelines", 1], ["as", 1], ["long", 1], ["as", 1], ["they", 1], ["run", 1], ["cleanup", 1], ["phases", 1], ["on", 1], ["the", 1], ["code", 1], ["from", 1], ["time", 1], ["to", 1], ["time", 1], ["to", 1], ["make", 1], ["sure", 1], ["the", 1], ["repository", 1], ["is", 1], ["tidy", 1], ["she", 2], ["suggests", 2], ["a", 2], ["metric", 2], ["where", 2], ["the", 2], ["“dirtiness”", 2], ["of", 2], ["a", 2], ["developer’s", 2], ["code", 2], ["is", 2], ["the", 2], ["sum", 2], ["of", 2], ["the", 2], ["pushes", 2], ["that", 2], ["violate", 2], ["the", 2], ["guidelines", 2], ["–", 2], ["so", 2], ["called", 2], ["dirty", 2], ["pushes", 2], ["–", 2], ["made", 2], ["by", 2], ["that", 2], ["developer", 2], ["each", 2], ["weighted", 2], ["by", 2], ["the", 2], ["number", 2], ["of", 2], ["days", 2], ["since", 2], ["it", 2], ["was", 2], ["pushed", 2], ["the", 2], ["number", 2], ["of", 2], ["days", 2], ["since", 2], ["a", 2], ["dirty", 2], ["push", 2], ["is", 2], ["a", 2], ["step", 2], ["function", 2], ["that", 2], ["increases", 2], ["by", 2], ["one", 2], ["each", 2], ["midnight", 2], ["following", 2], ["the", 2], ["push", 2], ["hence", 2], ["if", 2], ["a", 2], ["developer", 2], ["has", 2], ["made", 2], ["dirty", 2], ["pushes", 2], ["on", 2], ["days", 2], ["1", 2], ["2", 2], ["and", 2], ["5", 2], ["the", 2], ["dirtiness", 2], ["on", 2], ["day", 2], ["6", 2], ["is", 2], ["5", 2], ["4", 2], ["1", 2], ["10", 2], ["she", 2], ["suggests", 2], ["that", 2], ["a", 2], ["cleanup", 2], ["phase", 2], ["completely", 2], ["fixing", 2], ["all", 2], ["violations", 2], ["of", 2], ["the", 2], ["coding", 2], ["guidelines", 2], ["must", 2], ["be", 2], ["completed", 2], ["before", 2], ["the", 2], ["dirtiness", 2], ["reaches", 2], ["20", 2], ["one", 2], ["of", 2], ["the", 2], ["developers", 2], ["petra", 2], ["senses", 2], ["that", 2], ["this", 2], ["rule", 2], ["must", 2], ["be", 2], ["obeyed", 2], ["not", 2], ["only", 2], ["because", 2], ["it", 2], ["is", 2], ["a", 2], ["company", 2], ["policy", 2], ["breaking", 2], ["it", 2], ["will", 2], ["also", 2], ["result", 2], ["in", 2], ["awkward", 2], ["meetings", 2], ["with", 2], ["a", 2], ["lot", 2], ["of", 2], ["concerned", 2], ["managers", 2], ["who", 2], ["all", 2], ["want", 2], ["to", 2], ["know", 2], ["why", 2], ["she", 2], ["cannot", 2], ["be", 2], ["more", 2], ["like", 2], ["perikles", 2], ["still", 2], ["she", 2], ["wants", 2], ["to", 2], ["run", 2], ["the", 2], ["cleanup", 2], ["phase", 2], ["as", 2], ["seldomly", 2], ["as", 2], ["possible", 2], ["and", 2], ["always", 2], ["postpones", 2], ["it", 2], ["until", 2], ["it", 2], ["is", 2], ["absolutely", 2], ["necessary", 2], ["a", 2], ["cleanup", 2], ["phase", 2], ["is", 2], ["always", 2], ["run", 2], ["at", 2], ["the", 2], ["end", 2], ["of", 2], ["the", 2], ["day", 2], ["and", 2], ["fixes", 2], ["every", 2], ["dirty", 2], ["push", 2], ["done", 2], ["up", 2], ["to", 2], ["and", 2], ["including", 2], ["that", 2], ["day", 2], ["since", 2], ["all", 2], ["developers", 2], ["are", 2], ["shuffled", 2], ["to", 2], ["new", 2], ["projects", 2], ["at", 2], ["the", 2], ["start", 2], ["of", 2], ["each", 2], ["year", 2], ["no", 2], ["dirtiness", 2], ["should", 0], ["be", 0], ["left", 0], ["after", 0], ["midnight", 0], ["at", 0], ["the", 0], ["end", 0], ["of", 0], ["new", 0], ["year’s", 0], ["eve", 0], ["input", 1], ["the", 4], ["first", 2], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["an", 1], ["integer", 1], ["n", 1], ["1", 1], ["leq", 1], ["n", 1], ["leq", 1], ["365", 1], ["the", 1], ["number", 1], ["of", 1], ["dirty", 1], ["pushes", 1], ["made", 1], ["by", 1], ["petra", 1], ["during", 1], ["a", 1], ["year", 1], ["the", 1], ["second", 1], ["line", 1], ["contains", 1], ["n", 1], ["integers", 1], ["d", 1], ["1", 1], ["d", 1], ["2", 1], ["ldots", 1], ["d", 1], ["n", 1], ["1", 1], ["leq", 1], ["d", 1], ["i", 1], ["leq", 1], ["365", 1], ["for", 1], ["each", 1], ["1", 1], ["le", 1], ["i", 1], ["le", 1], ["n", 1], ["giving", 1], ["the", 1], ["days", 1], ["when", 1], ["petra", 1], ["made", 1], ["dirty", 1], ["pushes", 1], ["you", 0], ["can", 0], ["assume", 0], ["that", 0], ["d", 0], ["i", 0], ["d", 0], ["j", 0], ["for", 0], ["i", 0], ["j", 0], ["output", 0], ["output", 2], ["the", 2], ["total", 2], ["number", 2], ["of", 2], ["cleanup", 2], ["phases", 2], ["needed", 2], ["for", 0], ["petra", 0], ["to", 0], ["keep", 0], ["the", 0], ["dirtiness", 0], ["strictly", 0], ["below", 0], ["20", 0], ["at", 0], ["all", 0], ["times", 0], ["examples", 0], ["sample", 0], ["input", 0], ["5", 0], ["1", 0], ["45", 0], ["65", 0], ["84", 0], ["346", 0], ["sample", 0], ["output", 0], ["4", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8993576017130621, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6568522483940042, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9519832985386222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9519832985386222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8993576017130621, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6568522483940042, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9519832985386222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9519832985386222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nAlice and Bob love playing one-dimensional battle ships. They play on the field in the form of a line consisting of n square cells (that is, on a 1 × n table).\n\nAt the beginning of the game Alice puts k ships on the field without telling their positions to Bob. Each ship looks as a 1 × a rectangle (that is, it occupies a sequence of a consecutive squares of the field). The ships cannot intersect and even touch each other.\n\nAfter that Bob makes a sequence of \"shots\". He names cells of the field and Alice either says that the cell is empty (\"miss\"), or that the cell belongs to some ship (\"hit\").\n\nBut here's the problem! Alice like to cheat. May be that is why she responds to each Bob's move with a \"miss\". \n\nHelp Bob catch Alice cheating — find Bob's first move, such that after it you can be sure that Alice cheated.\n\n\n-----Input-----\n\nThe first line of the input contains three integers: n, k and a (1 ≤ n, k, a ≤ 2·10^5) — the size of the field, the number of the ships and the size of each ship. It is guaranteed that the n, k and a are such that you can put k ships of size a on the field, so that no two ships intersect or touch each other.\n\nThe second line contains integer m (1 ≤ m ≤ n) — the number of Bob's moves.\n\nThe third line contains m distinct integers x_1, x_2, ..., x_{m}, where x_{i} is the number of the cell where Bob made the i-th shot. The cells are numbered from left to right from 1 to n.\n\n\n-----Output-----\n\nPrint a single integer — the number of such Bob's first move, after which you can be sure that Alice lied. Bob's moves are numbered from 1 to m in the order the were made. If the sought move doesn't exist, then print \"-1\".\n\n\n-----Examples-----\nInput\n11 3 3\n5\n4 8 6 1 11\n\nOutput\n3\n\nInput\n5 1 3\n2\n1 5\n\nOutput\n-1\n\nInput\n5 1 3\n1\n3\n\nOutput\n1\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n,k,a = map(int,input().split())\nm = int(input())\nx = [int(y) for y in input().split()]\n\ndef check(K):\n\tused = [0]*(n+1)\n\tfor i in range(K):\n\t\tused[x[i]] = 1\n\tfor i in range(1,n+1):\n\t\tused[i]+=used[i-1]\n\thave = 0\n\ti = a\n\twhile i<n+1:\n\t\tif used[i]-used[i-a]==0:\n\t\t\thave+=1\n\t\t\ti+=a\n\t\ti+=1\n\treturn have>=k\n\nif check(m):\n\tprint(-1)\nelse:\n\tlow = -1\n\thigh = m\n\twhile high-low>1:\n\t\tif check((low+high+1)//2):\n\t\t\tlow = (low+high+1)//2\n\t\telse:\n\t\t\thigh = (low+high+1)//2\n\tprint(high)\n", "n,k,a=list(map(int,input().split()))\nm=int(input())+1\nx=list(map(int,input().split()))+[0]\nl,r=0,m\nwhile r-l>1:\n\td=(l+r)//2\n\ty=sorted(x[:d])\n\tif sum((q-p)//(a+1) for p,q in zip([0]+y,y+[n+1]))>=k:l=d\n\telse:r=d\nprint(r%m-(r==m))\n", "n,k,b = map(int,input().split())\nm = int(input())+1\nb += 1\na = list(map(int,input().split()))\nl,r = 0,m\nwhile r-l > 1:\n\td = (l+r)//2\n\tc = sorted(a[:d])\n\tif sum([(p-q)//b for q,p in zip([0]+c,c+[n+1])]) >= k:\n\t\tl = d\n\telse:\n\t\tr = d\nprint(r%m-(r==m))\n", "n,k,a=list(map(int,input().split()))\nm=int(input())+1\nx=list(map(int,input().split()))+[0]\nl,r=0,m\nwhile r-l>1:\n\td=(l+r)//2\n\ty=sorted(x[:d])\n\tif sum((q-p)//(a+1) for p,q in zip([0]+y,y+[n+1]))>=k:l=d\n\telse:r=d\nprint(r%m-(r==m))\n\n", "n,k,a=list(map(int,input().split()))\nm=int(input())+1\nx=list(map(int,input().split()))+[0]\nl,r=0,m\nwhile r-l>1:\n\td=(l+r)//2\n\ty=sorted(x[:d])\n\tif sum((q-p)//(a+1) for p,q in zip([0]+y,y+[n+1]))>=k:l=d\n\telse:r=d\nprint(r%m-(r==m))\n\n", "n,k,a=list(map(int,input().split()))\nm=int(input())+1\nx=list(map(int,input().split()))+[0]\nl,r=0,m\nwhile r-l>1:\n\td=(l+r)//2\n\ty=sorted(x[:d])\n\tif sum((q-p)//(a+1) for p,q in zip([0]+y,y+[n+1]))>=k:l=d\n\telse:r=d\nprint(r%m-(r==m))\n\n", "n,k,a=list(map(int,input().split()))\nm=int(input())+1\nx=list(map(int,input().split()))+[0]\nl,r=0,m\nwhile r-l>1:\n\td=(l+r)//2\n\ty=sorted(x[:d])\n\tif sum((q-p)//(a+1) for p,q in zip([0]+y,y+[n+1]))>=k:l=d\n\telse:r=d\nprint(r%m-(r==m))\n\n", "n,k,a=list(map(int,input().split()))\nm=int(input())+1\nx=list(map(int,input().split()))+[0]\nl,r=0,m\nwhile r-l>1:\n\td=(l+r)//2\n\ty=sorted(x[:d])\n\tif sum((q-p)//(a+1) for p,q in zip([0]+y,y+[n+1]))>=k:l=d\n\telse:r=d\nprint(r%m-(r==m))\n\n", "n,k,a=list(map(int,input().split()))\nm=int(input())+1\nx=list(map(int,input().split()))+[0]\nl,r=0,m\nwhile r-l>1:\n\td=(l+r)//2\n\ty=sorted(x[:d])\n\tif sum((q-p)//(a+1) for p,q in zip([0]+y,y+[n+1]))>=k:l=d\n\telse:r=d\nprint(r%m-(r==m))\n\n", "n,k,a=list(map(int,input().split()))\nm=int(input())+1\nx=list(map(int,input().split()))+[0]\nl,r=0,m\nwhile r-l>1:\n\td=(l+r)//2\n\ty=sorted(x[:d])\n\tif sum((q-p)//(a+1) for p,q in zip([0]+y,y+[n+1]))>=k:l=d\n\telse:r=d\nprint(r%m-(r==m))\n\n", "import math\nfrom bisect import bisect_right, bisect_left\nfrom collections import Counter, defaultdict\nfrom heapq import heappop, heappush\nfrom itertools import accumulate\n\nR = lambda: map(int, input().split())\nmm, k, a = R()\njunk = int(input())\narr = list(R())\n\nl, r = 0, len(arr)\nwhile l < r:\n\tm = (l + r) // 2\n\ttarr = [0] + sorted(arr[:m + 1]) + [mm + 1]\n\tcnt = 0\n\tfor i in range(1, len(tarr)):\n\t\tcnt += (tarr[i] - tarr[i - 1]) // (a + 1)\n\tif cnt < k:\n\t\tr = m\n\telse:\n\t\tl = m + 1\nprint(l + 1 if l < len(arr) else -1)\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef solve():\n\tn, k, a = mints()\n\ta += 1\n\tm = mint()\n\tx = list(mints())\n\tl = 0\n\tr = m + 1\n\twhile r - l > 1:\n\t\tc = (l + r) // 2\n\t\tb = x[:c]\n\t\tb.sort()\n\t\tlast = 0\n\t\tcnt = 0\n\t\tfor i in b:\n\t\t\tif i != last:\n\t\t\t\tcnt += (i-last) // a\n\t\t\tlast = i\n\t\tcnt += (n+1-last)//a\n\t\tif cnt < k:\n\t\t\tr = c\n\t\telse:\n\t\t\tl = c\n\tif r == m + 1:\n\t\tr = -1\n\tprint(r)\n\nsolve()\n"], "id": "id5895"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5895", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["alice", 2], ["and", 2], ["bob", 2], ["love", 2], ["playing", 2], ["one", 2], ["dimensional", 2], ["battle", 2], ["ships", 2], ["they", 2], ["play", 2], ["on", 2], ["the", 2], ["field", 2], ["in", 2], ["the", 2], ["form", 2], ["of", 2], ["a", 2], ["line", 2], ["consisting", 2], ["of", 2], ["n", 2], ["square", 2], ["cells", 2], ["that", 2], ["is", 2], ["on", 2], ["a", 2], ["1", 2], ["×", 2], ["n", 2], ["table", 2], ["at", 2], ["the", 2], ["beginning", 2], ["of", 2], ["the", 2], ["game", 2], ["alice", 2], ["puts", 2], ["k", 2], ["ships", 2], ["on", 2], ["the", 2], ["field", 2], ["without", 2], ["telling", 2], ["their", 2], ["positions", 2], ["to", 2], ["bob", 2], ["each", 2], ["ship", 2], ["looks", 2], ["as", 2], ["a", 2], ["1", 2], ["×", 2], ["a", 2], ["rectangle", 2], ["that", 2], ["is", 2], ["it", 2], ["occupies", 2], ["a", 2], ["sequence", 2], ["of", 2], ["a", 2], ["consecutive", 2], ["squares", 2], ["of", 2], ["the", 2], ["field", 2], ["the", 2], ["ships", 2], ["cannot", 2], ["intersect", 2], ["and", 2], ["even", 2], ["touch", 2], ["each", 2], ["other", 2], ["after", 2], ["that", 2], ["bob", 2], ["makes", 2], ["a", 2], ["sequence", 2], ["of", 2], ["shots", 2], ["he", 2], ["names", 2], ["cells", 2], ["of", 2], ["the", 2], ["field", 2], ["and", 2], ["alice", 2], ["either", 2], ["says", 2], ["that", 2], ["the", 2], ["cell", 2], ["is", 2], ["empty", 2], ["miss", 2], ["or", 2], ["that", 2], ["the", 2], ["cell", 2], ["belongs", 2], ["to", 2], ["some", 2], ["ship", 2], ["hit", 2], ["but", 2], ["here", 2], ["s", 2], ["the", 2], ["problem", 2], ["alice", 2], ["like", 2], ["to", 2], ["cheat", 2], ["may", 2], ["be", 2], ["that", 2], ["is", 2], ["why", 2], ["she", 2], ["responds", 2], ["to", 2], ["each", 2], ["bob", 2], ["s", 2], ["move", 2], ["with", 2], ["a", 2], ["miss", 2], ["help", 2], ["bob", 2], ["catch", 2], ["alice", 2], ["cheating", 2], ["—", 2], ["find", 2], ["bob", 2], ["s", 2], ["first", 2], ["move", 0], ["such", 0], ["that", 0], ["after", 0], ["it", 0], ["you", 0], ["can", 0], ["be", 0], ["sure", 0], ["that", 0], ["alice", 0], ["cheated", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 2], ["of", 2], ["the", 2], ["input", 2], ["contains", 2], ["three", 0], ["integers", 0], ["n", 0], ["k", 0], ["and", 0], ["a", 0], ["1", 0], ["≤", 0], ["n", 0], ["k", 0], ["a", 0], ["≤", 0], ["2·10", 0], ["5", 0], ["—", 2], ["the", 2], ["size", 2], ["of", 2], ["the", 2], ["field", 2], ["the", 2], ["number", 2], ["of", 2], ["the", 2], ["ships", 2], ["and", 2], ["the", 2], ["size", 2], ["of", 2], ["each", 2], ["ship", 2], ["it", 2], ["is", 2], ["guaranteed", 2], ["that", 2], ["the", 2], ["n", 2], ["k", 2], ["and", 2], ["a", 2], ["are", 2], ["such", 2], ["that", 2], ["you", 2], ["can", 2], ["put", 2], ["k", 2], ["ships", 2], ["of", 2], ["size", 2], ["a", 2], ["on", 2], ["the", 2], ["field", 2], ["so", 2], ["that", 2], ["no", 2], ["two", 2], ["ships", 2], ["intersect", 2], ["or", 2], ["touch", 2], ["each", 2], ["other", 2], ["the", 2], ["second", 2], ["line", 2], ["contains", 2], ["integer", 2], ["m", 2], ["1", 2], ["≤", 2], ["m", 2], ["≤", 2], ["n", 2], ["—", 2], ["the", 2], ["number", 0], ["of", 0], ["bob", 0], ["s", 0], ["moves", 0], ["the", 0], ["third", 0], ["line", 0], ["contains", 0], ["m", 0], ["distinct", 0], ["integers", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["x", 0], ["m", 0], ["where", 0], ["x", 0], ["i", 0], ["is", 2], ["the", 2], ["number", 2], ["of", 2], ["the", 2], ["cell", 2], ["where", 2], ["bob", 2], ["made", 2], ["the", 2], ["i", 2], ["th", 2], ["shot", 2], ["the", 0], ["cells", 0], ["are", 0], ["numbered", 0], ["from", 0], ["left", 0], ["to", 0], ["right", 0], ["from", 0], ["1", 0], ["to", 0], ["n", 0], ["output", 0], ["print", 2], ["a", 2], ["single", 2], ["integer", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["such", 2], ["bob", 2], ["s", 2], ["first", 2], ["move", 2], ["after", 2], ["which", 2], ["you", 2], ["can", 2], ["be", 2], ["sure", 2], ["that", 2], ["alice", 2], ["lied", 2], ["bob", 2], ["s", 2], ["moves", 2], ["are", 2], ["numbered", 2], ["from", 2], ["1", 2], ["to", 2], ["m", 2], ["in", 2], ["the", 2], ["order", 2], ["the", 2], ["were", 0], ["made", 0], ["if", 0], ["the", 0], ["sought", 0], ["move", 0], ["doesn", 0], ["t", 0], ["exist", 0], ["then", 0], ["print", 0], ["1", 0], ["examples", 0], ["input", 0], ["11", 0], ["3", 0], ["3", 0], ["5", 0], ["4", 0], ["8", 0], ["6", 0], ["1", 0], ["11", 0], ["output", 0], ["3", 0], ["input", 0], ["5", 0], ["1", 0], ["3", 0], ["2", 0], ["1", 0], ["5", 0], ["output", 0], ["1", 0], ["input", 0], ["5", 0], ["1", 0], ["3", 0], ["1", 0], ["3", 0], ["output", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7243243243243244, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3621621621621622, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8586387434554974, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4293193717277487, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7243243243243244, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3621621621621622, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8586387434554974, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4293193717277487, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["k", 0], ["a", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["x", 0], ["int", 0], ["y", 0], ["for", 0], ["y", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["check", 0], ["k", 0], ["used", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["used", 0], ["x", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["used", 0], ["i", 0], ["used", 0], ["i", 0], ["1", 0], ["have", 0], ["0", 0], ["i", 0], ["a", 0], ["while", 0], ["i", 0], ["n", 0], ["1", 0], ["if", 0], ["used", 0], ["i", 0], ["used", 0], ["i", 0], ["a", 0], ["0", 0], ["have", 0], ["1", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["return", 0], ["have", 0], ["k", 0], ["if", 0], ["check", 0], ["m", 0], ["print", 0], ["1", 0], ["else", 0], ["low", 0], ["1", 0], ["high", 0], ["m", 0], ["while", 0], ["high", 0], ["low", 0], ["1", 0], ["if", 0], ["check", 0], ["low", 0], ["high", 0], ["1", 0], ["2", 0], ["low", 0], ["low", 0], ["high", 0], ["1", 0], ["2", 0], ["else", 0], ["high", 0], ["low", 0], ["high", 0], ["1", 0], ["2", 0], ["print", 0], ["high", 0], ["n", 0], ["k", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["1", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["0", 0], ["l", 0], ["r", 0], ["0", 0], ["m", 0], ["while", 0], ["r", 0], ["l", 0], ["1", 0], ["d", 0], ["l", 0], ["r", 0], ["2", 0], ["y", 0], ["sorted", 0], ["x", 0], ["d", 0], ["if", 0], ["sum", 0], ["q", 0], ["p", 0], ["a", 0], ["1", 0], ["for", 0], ["p", 0], ["q", 0], ["in", 0], ["zip", 0], ["0", 0], ["y", 0], ["y", 0], ["n", 0], ["1", 0], ["k", 0], ["l", 0], ["d", 0], ["else", 0], ["r", 0], ["d", 0], ["print", 0], ["r", 0], ["m", 0], ["r", 0], ["m", 0], ["n", 0], ["k", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["1", 0], ["b", 0], ["1", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["r", 0], ["0", 0], ["m", 0], ["while", 0], ["r", 0], ["l", 0], ["1", 0], ["d", 0], ["l", 0], ["r", 0], ["2", 0], ["c", 0], ["sorted", 0], ["a", 0], ["d", 0], ["if", 0], ["sum", 0], ["p", 0], ["q", 0], ["b", 0], ["for", 0], ["q", 0], ["p", 0], ["in", 0], ["zip", 0], ["0", 0], ["c", 0], ["c", 0], ["n", 0], ["1", 0], ["k", 0], ["l", 0], ["d", 0], ["else", 0], ["r", 0], ["d", 0], ["print", 0], ["r", 0], ["m", 0], ["r", 0], ["m", 0], ["n", 0], ["k", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["1", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["0", 0], ["l", 0], ["r", 0], ["0", 0], ["m", 0], ["while", 0], ["r", 0], ["l", 0], ["1", 0], ["d", 0], ["l", 0], ["r", 0], ["2", 0], ["y", 0], ["sorted", 0], ["x", 0], ["d", 0], ["if", 0], ["sum", 0], ["q", 0], ["p", 0], ["a", 0], ["1", 0], ["for", 0], ["p", 0], ["q", 0], ["in", 0], ["zip", 0], ["0", 0], ["y", 0], ["y", 0], ["n", 0], ["1", 0], ["k", 0], ["l", 0], ["d", 0], ["else", 0], ["r", 0], ["d", 0], ["print", 0], ["r", 0], ["m", 0], ["r", 0], ["m", 0], ["n", 0], ["k", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["1", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["0", 0], ["l", 0], ["r", 0], ["0", 0], ["m", 0], ["while", 0], ["r", 0], ["l", 0], ["1", 0], ["d", 0], ["l", 0], ["r", 0], ["2", 0], ["y", 0], ["sorted", 0], ["x", 0], ["d", 0], ["if", 0], ["sum", 0], ["q", 0], ["p", 0], ["a", 0], ["1", 0], ["for", 0], ["p", 0], ["q", 0], ["in", 0], ["zip", 0], ["0", 0], ["y", 0], ["y", 0], ["n", 0], ["1", 0], ["k", 0], ["l", 0], ["d", 0], ["else", 0], ["r", 0], ["d", 0], ["print", 0], ["r", 0], ["m", 0], ["r", 0], ["m", 0], ["n", 0], ["k", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["1", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["0", 0], ["l", 0], ["r", 0], ["0", 0], ["m", 0], ["while", 0], ["r", 0], ["l", 0], ["1", 0], ["d", 0], ["l", 0], ["r", 0], ["2", 0], ["y", 0], ["sorted", 0], ["x", 0], ["d", 0], ["if", 0], ["sum", 0], ["q", 0], ["p", 0], ["a", 0], ["1", 0], ["for", 0], ["p", 0], ["q", 0], ["in", 0], ["zip", 0], ["0", 0], ["y", 0], ["y", 0], ["n", 0], ["1", 0], ["k", 0], ["l", 0], ["d", 0], ["else", 0], ["r", 0], ["d", 0], ["print", 0], ["r", 0], ["m", 0], ["r", 0], ["m", 0], ["n", 0], ["k", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["1", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["0", 0], ["l", 0], ["r", 0], ["0", 0], ["m", 0], ["while", 0], ["r", 0], ["l", 0], ["1", 0], ["d", 0], ["l", 0], ["r", 0], ["2", 0], ["y", 0], ["sorted", 0], ["x", 0], ["d", 0], ["if", 0], ["sum", 0], ["q", 0], ["p", 0], ["a", 0], ["1", 0], ["for", 0], ["p", 0], ["q", 0], ["in", 0], ["zip", 0], ["0", 0], ["y", 0], ["y", 0], ["n", 0], ["1", 0], ["k", 0], ["l", 0], ["d", 0], ["else", 0], ["r", 0], ["d", 0], ["print", 0], ["r", 0], ["m", 0], ["r", 0], ["m", 0], ["n", 0], ["k", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["1", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["0", 0], ["l", 0], ["r", 0], ["0", 0], ["m", 0], ["while", 0], ["r", 0], ["l", 0], ["1", 0], ["d", 0], ["l", 0], ["r", 0], ["2", 0], ["y", 0], ["sorted", 0], ["x", 0], ["d", 0], ["if", 0], ["sum", 0], ["q", 0], ["p", 0], ["a", 0], ["1", 0], ["for", 0], ["p", 0], ["q", 0], ["in", 0], ["zip", 0], ["0", 0], ["y", 0], ["y", 0], ["n", 0], ["1", 0], ["k", 0], ["l", 0], ["d", 0], ["else", 0], ["r", 0], ["d", 0], ["print", 0], ["r", 0], ["m", 0], ["r", 0], ["m", 0], ["n", 0], ["k", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["1", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["0", 0], ["l", 0], ["r", 0], ["0", 0], ["m", 0], ["while", 0], ["r", 0], ["l", 0], ["1", 0], ["d", 0], ["l", 0], ["r", 0], ["2", 0], ["y", 0], ["sorted", 0], ["x", 0], ["d", 0], ["if", 0], ["sum", 0], ["q", 0], ["p", 0], ["a", 0], ["1", 0], ["for", 0], ["p", 0], ["q", 0], ["in", 0], ["zip", 0], ["0", 0], ["y", 0], ["y", 0], ["n", 0], ["1", 0], ["k", 0], ["l", 0], ["d", 0], ["else", 0], ["r", 0], ["d", 0], ["print", 0], ["r", 0], ["m", 0], ["r", 0], ["m", 0], ["n", 0], ["k", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["int", 0], ["input", 0], ["1", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["0", 0], ["l", 0], ["r", 0], ["0", 0], ["m", 0], ["while", 0], ["r", 0], ["l", 0], ["1", 0], ["d", 0], ["l", 0], ["r", 0], ["2", 0], ["y", 0], ["sorted", 0], ["x", 0], ["d", 0], ["if", 0], ["sum", 0], ["q", 0], ["p", 0], ["a", 0], ["1", 0], ["for", 0], ["p", 0], ["q", 0], ["in", 0], ["zip", 0], ["0", 0], ["y", 0], ["y", 0], ["n", 0], ["1", 0], ["k", 0], ["l", 0], ["d", 0], ["else", 0], ["r", 0], ["d", 0], ["print", 0], ["r", 0], ["m", 0], ["r", 0], ["m", 0], ["import", 0], ["math", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["bisect", 0], ["left", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["defaultdict", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappop", 0], ["heappush", 0], ["from", 0], ["itertools", 0], ["import", 0], ["accumulate", 0], ["r", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mm", 0], ["k", 0], ["a", 0], ["r", 0], ["junk", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["r", 0], ["l", 0], ["r", 0], ["0", 0], ["len", 0], ["arr", 0], ["while", 0], ["l", 0], ["r", 0], ["m", 0], ["l", 0], ["r", 0], ["2", 0], ["tarr", 0], ["0", 0], ["sorted", 0], ["arr", 0], ["m", 0], ["1", 0], ["mm", 0], ["1", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["tarr", 0], ["cnt", 0], ["tarr", 0], ["i", 0], ["tarr", 0], ["i", 0], ["1", 0], ["a", 0], ["1", 0], ["if", 0], ["cnt", 0], ["k", 0], ["r", 0], ["m", 0], ["else", 0], ["l", 0], ["m", 0], ["1", 0], ["print", 0], ["l", 0], ["1", 0], ["if", 0], ["l", 0], ["len", 0], ["arr", 0], ["else", 0], ["1", 0], ["import", 0], ["sys", 0], ["def", 0], ["minp", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["mint", 0], ["return", 0], ["int", 0], ["minp", 0], ["def", 0], ["mints", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["minp", 0], ["split", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["a", 0], ["mints", 0], ["a", 0], ["1", 0], ["m", 0], ["mint", 0], ["x", 0], ["list", 0], ["mints", 0], ["l", 0], ["0", 0], ["r", 0], ["m", 0], ["1", 0], ["while", 0], ["r", 0], ["l", 0], ["1", 0], ["c", 0], ["l", 0], ["r", 0], ["2", 0], ["b", 0], ["x", 0], ["c", 0], ["b", 0], ["sort", 0], ["last", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["if", 0], ["i", 0], ["last", 0], ["cnt", 0], ["i", 0], ["last", 0], ["a", 0], ["last", 0], ["i", 0], ["cnt", 0], ["n", 0], ["1", 0], ["last", 0], ["a", 0], ["if", 0], ["cnt", 0], ["k", 0], ["r", 0], ["c", 0], ["else", 0], ["l", 0], ["c", 0], ["if", 0], ["r", 0], ["m", 0], ["1", 0], ["r", 0], ["1", 0], ["print", 0], ["r", 0], ["solve", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThe grille cipher  is a technique that dates back to 1550 when it was first described by Girolamo Cardano. The version we’ll be dealing with comes from the late 1800’s and works as follows. The message to be encoded is written on an $n \\times n$ grid row-wise, top to bottom, and is overlaid with a card with a set of holes punched out of it (this is the grille).\n\nThe message is encrypted by writing down the letters that appear in the holes, row by row, then rotating the grille 90 degrees clockwise, writing the new letters that appear, and repeating this process two more times. Of course the holes in the grille must be chosen so that every letter in the message will eventually appear in a hole (this is actually not that hard to arrange).\n\nAn example is shown below, where the message “Send more monkeys” is encrypted as “noeesrksdmnyemoj”, after adding a random letter to fill out the grid (this example corresponds to the first sample input.)\n\n Figure I.1 \n\nIf the message is larger than the $n \\times n$ grid, then the first $n^2$ letters are written in the grid and encrypted, then the next $n^2$ are encrypted, and so on, always filling the last grid with random letters if needed. Here, we will only be dealing with messages of length $n^2$.\n\nYour job, should you choose to accept it, is to take an encrypted message and the corresponding grille and decrypt it. And we’ll add one additional twist: the grille given might be invalid, i.e., the holes used do not allow every location in the grid to be used during the encryption process. If this is the case, then you must indicate that you can’t decrypt the message.\n\n-----Input-----\nThe input starts with a line containing a positive integer $n\\le 10$ indicating the size of the grid and grille. The next $n$ lines will specify the grille, using ‘.’ for a hole and ‘X’ for a non-hole. Following this will be a line containing the encrypted message, consisting solely of lowercase alphabetic characters. The number of characters in this line will always be $n^2$.\n\n\n\n-----Output-----\nOutput the decrypted text as a single string with no spaces, or the phrase “invalid grille” if the grille is invalid.\n\n-----Examples-----\nSample Input 1:\n4\nXX.X\nX.X.\nXXXX\n.XXX\nnoeesrksdmnyemoj\nSample Output 1:\nsendmoremonkeysj\n\nSample Input 2:\n4\n.XX.\nXXXX\nXXXX\n.XX.\nabcdefghijklmnop\nSample Output 2:\ninvalid grille\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6069"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6069", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 2], ["grille", 2], ["cipher", 2], ["is", 2], ["a", 2], ["technique", 2], ["that", 2], ["dates", 2], ["back", 2], ["to", 2], ["1550", 2], ["when", 2], ["it", 2], ["was", 2], ["first", 2], ["described", 2], ["by", 2], ["girolamo", 2], ["cardano", 2], ["the", 2], ["version", 2], ["we’ll", 2], ["be", 2], ["dealing", 2], ["with", 2], ["comes", 2], ["from", 2], ["the", 2], ["late", 2], ["1800’s", 2], ["and", 2], ["works", 2], ["as", 1], ["follows", 1], ["the", 1], ["message", 1], ["to", 1], ["be", 1], ["encoded", 1], ["is", 1], ["written", 1], ["on", 1], ["an", 1], ["n", 1], ["times", 1], ["n", 2], ["grid", 2], ["row", 2], ["wise", 2], ["top", 2], ["to", 2], ["bottom", 2], ["and", 2], ["is", 2], ["overlaid", 2], ["with", 2], ["a", 2], ["card", 2], ["with", 2], ["a", 1], ["set", 1], ["of", 1], ["holes", 1], ["punched", 1], ["out", 1], ["of", 1], ["it", 1], ["this", 1], ["is", 1], ["the", 1], ["grille", 1], ["the", 1], ["message", 1], ["is", 1], ["encrypted", 1], ["by", 1], ["writing", 1], ["down", 1], ["the", 1], ["letters", 1], ["that", 1], ["appear", 1], ["in", 1], ["the", 1], ["holes", 1], ["row", 1], ["by", 1], ["row", 1], ["then", 1], ["rotating", 1], ["the", 1], ["grille", 1], ["90", 1], ["degrees", 1], ["clockwise", 1], ["writing", 1], ["the", 1], ["new", 1], ["letters", 1], ["that", 1], ["appear", 1], ["and", 1], ["repeating", 1], ["this", 1], ["process", 1], ["two", 1], ["more", 1], ["times", 1], ["of", 1], ["course", 1], ["the", 1], ["holes", 1], ["in", 1], ["the", 1], ["grille", 1], ["must", 1], ["be", 1], ["chosen", 1], ["so", 1], ["that", 1], ["every", 1], ["letter", 1], ["in", 1], ["the", 1], ["message", 1], ["will", 1], ["eventually", 1], ["appear", 0], ["in", 0], ["a", 0], ["hole", 0], ["this", 0], ["is", 0], ["actually", 0], ["not", 0], ["that", 0], ["hard", 0], ["to", 0], ["arrange", 0], ["an", 0], ["example", 0], ["is", 0], ["shown", 0], ["below", 0], ["where", 0], ["the", 0], ["message", 0], ["“send", 0], ["more", 0], ["monkeys”", 0], ["is", 0], ["encrypted", 0], ["as", 0], ["“noeesrksdmnyemoj”", 0], ["after", 0], ["adding", 0], ["a", 0], ["random", 0], ["letter", 0], ["to", 0], ["fill", 0], ["out", 0], ["the", 0], ["grid", 0], ["this", 0], ["example", 0], ["corresponds", 0], ["to", 0], ["the", 0], ["first", 0], ["sample", 0], ["input", 0], ["figure", 0], ["i", 0], ["1", 0], ["if", 1], ["the", 1], ["message", 1], ["is", 1], ["larger", 1], ["than", 1], ["the", 1], ["n", 1], ["times", 1], ["n", 1], ["grid", 1], ["then", 1], ["the", 1], ["first", 1], ["n", 1], ["2", 1], ["letters", 1], ["are", 1], ["written", 1], ["in", 1], ["the", 1], ["grid", 1], ["and", 1], ["encrypted", 1], ["then", 1], ["the", 1], ["next", 1], ["n", 1], ["2", 1], ["are", 2], ["encrypted", 2], ["and", 2], ["so", 2], ["on", 2], ["always", 2], ["filling", 2], ["the", 2], ["last", 2], ["grid", 2], ["with", 2], ["random", 2], ["letters", 2], ["if", 1], ["needed", 1], ["here", 1], ["we", 1], ["will", 1], ["only", 1], ["be", 1], ["dealing", 1], ["with", 1], ["messages", 1], ["of", 1], ["length", 1], ["n", 1], ["2", 1], ["your", 1], ["job", 1], ["should", 1], ["you", 1], ["choose", 1], ["to", 1], ["accept", 1], ["it", 1], ["is", 1], ["to", 1], ["take", 1], ["an", 1], ["encrypted", 1], ["message", 1], ["and", 1], ["the", 1], ["corresponding", 1], ["grille", 1], ["and", 1], ["decrypt", 1], ["it", 1], ["and", 1], ["we’ll", 1], ["add", 1], ["one", 1], ["additional", 1], ["twist", 1], ["the", 1], ["grille", 1], ["given", 1], ["might", 1], ["be", 1], ["invalid", 1], ["i", 1], ["e", 1], ["the", 1], ["holes", 1], ["used", 1], ["do", 1], ["not", 1], ["allow", 1], ["every", 1], ["location", 1], ["in", 1], ["the", 1], ["grid", 1], ["to", 1], ["be", 1], ["used", 1], ["during", 1], ["the", 1], ["encryption", 1], ["process", 1], ["if", 1], ["this", 1], ["is", 1], ["the", 0], ["case", 0], ["then", 0], ["you", 0], ["must", 0], ["indicate", 0], ["that", 0], ["you", 0], ["can’t", 0], ["decrypt", 0], ["the", 0], ["message", 0], ["input", 0], ["the", 1], ["input", 1], ["starts", 1], ["with", 1], ["a", 1], ["line", 1], ["containing", 1], ["a", 1], ["positive", 1], ["integer", 1], ["n", 1], ["le", 1], ["10", 2], ["indicating", 2], ["the", 2], ["size", 2], ["of", 2], ["the", 2], ["grid", 2], ["and", 2], ["grille", 2], ["the", 2], ["next", 2], ["n", 2], ["lines", 2], ["will", 2], ["specify", 2], ["the", 2], ["grille", 2], ["using", 2], ["‘", 2], ["’", 2], ["for", 2], ["a", 2], ["hole", 2], ["and", 2], ["‘x’", 2], ["for", 2], ["a", 2], ["non", 2], ["hole", 2], ["following", 2], ["this", 2], ["will", 2], ["be", 2], ["a", 2], ["line", 2], ["containing", 2], ["the", 2], ["encrypted", 2], ["message", 2], ["consisting", 2], ["solely", 2], ["of", 2], ["lowercase", 2], ["alphabetic", 1], ["characters", 1], ["the", 1], ["number", 0], ["of", 0], ["characters", 0], ["in", 0], ["this", 0], ["line", 0], ["will", 0], ["always", 0], ["be", 0], ["n", 0], ["2", 0], ["output", 0], ["output", 1], ["the", 1], ["decrypted", 1], ["text", 1], ["as", 1], ["a", 1], ["single", 1], ["string", 1], ["with", 1], ["no", 0], ["spaces", 0], ["or", 0], ["the", 0], ["phrase", 0], ["“invalid", 0], ["grille”", 0], ["if", 0], ["the", 0], ["grille", 0], ["is", 0], ["invalid", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["xx", 0], ["x", 0], ["x", 0], ["x", 0], ["xxxx", 0], ["xxx", 0], ["noeesrksdmnyemoj", 0], ["sample", 0], ["output", 0], ["1", 0], ["sendmoremonkeysj", 0], ["sample", 0], ["input", 0], ["2", 0], ["4", 0], ["xx", 0], ["xxxx", 0], ["xxxx", 0], ["xx", 0], ["abcdefghijklmnop", 0], ["sample", 0], ["output", 0], ["2", 0], ["invalid", 0], ["grille", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7285714285714285, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6071428571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8194444444444444, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7824074074074074, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7285714285714285, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6071428571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8194444444444444, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7824074074074074, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nReturn the result of evaluating a given boolean expression, represented as a string.\nAn expression can either be:\n\n\"t\", evaluating to True;\n\"f\", evaluating to False;\n\"!(expr)\", evaluating to the logical NOT of the inner expression expr;\n\"&(expr1,expr2,...)\", evaluating to the logical AND of 2 or more inner expressions expr1, expr2, ...;\n\"|(expr1,expr2,...)\", evaluating to the logical OR of 2 or more inner expressions expr1, expr2, ...\n\n \nExample 1:\nInput: expression = \"!(f)\"\nOutput: true\n\nExample 2:\nInput: expression = \"|(f,t)\"\nOutput: true\n\nExample 3:\nInput: expression = \"&(t,f)\"\nOutput: false\n\nExample 4:\nInput: expression = \"|(&(t,f,t),!(t))\"\nOutput: false\n\n \nConstraints:\n\n1 <= expression.length <= 20000\nexpression[i] consists of characters in {'(', ')', '&', '|', '!', 't', 'f', ','}.\nexpression is a valid expression representing a boolean, as given in the description.\nclass Solution:\n    def parseBoolExpr(self, expression: str) -> bool:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\tif expression == 'f':\n\t\t\treturn False\n\t\tif expression == 't':\n\t\t\treturn True\n\t\tif expression[0] == '!':\n\t\t\treturn not self.parseBoolExpr(expression[2:-1])\n\t\tif expression[0] == '|':\n\t\t\tcursor = 2\n\t\t\twhile cursor < len(expression)-1:\n\t\t\t\tend_of_next = self.getNextExpr(expression, cursor)\n\t\t\t\tif self.parseBoolExpr(expression[cursor:end_of_next]):\n\t\t\t\t\treturn True\n\t\t\t\tcursor = end_of_next + 1\n\t\t\treturn False\n\t\tif expression[0] == '&':\n\t\t\tcursor = 2\n\t\t\twhile cursor < len(expression)-1:\n\t\t\t\tend_of_next = self.getNextExpr(expression, cursor)\n\t\t\t\tif not self.parseBoolExpr(expression[cursor:end_of_next]):\n\t\t\t\t\treturn False\n\t\t\t\tcursor = end_of_next + 1\n\t\t\treturn True\n\t\n\tdef getNextExpr(self, expression, start):\n\t\tif expression[start] == '!' or expression[start] == '|' or expression[start] == '&':\n\t\t\topen_count = 1\n\t\t\tclose_count = 0\n\t\t\tstart += 1\n\t\t\twhile open_count > close_count:\n\t\t\t\tstart += 1\n\t\t\t\tif expression[start] == '(':\n\t\t\t\t\topen_count += 1\n\t\t\t\tif expression[start] == ')':\n\t\t\t\t\tclose_count += 1\n\t\t\t\t\n\t\t\treturn start + 1\n\t\telse:\n\t\t\treturn start + 1\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\t\n\t\tbool_stack = []\n\t\texpr_stack = []\n\t\t\n\t\tcurr = []\n\t\tfor char in expression:\n\t\t\tif char == ',':\n\t\t\t\tcontinue\n\t\t\telif char == '(':\n\t\t\t\texpr_stack.append(curr)\n\t\t\t\tcurr = []\n\t\t\telif char in 'tf':\n\t\t\t\tcurr.append(True if (char == 't') else False)\n\t\t\telif char in '|&!':\n\t\t\t\tbool_stack.append(char)\n\t\t\telse:\n\t\t\t\tb = bool_stack.pop()\n\t\t\t\tprev = expr_stack.pop() if expr_stack else []\n\t\t\t\tif b == '!':\n\t\t\t\t\tcurr = prev + [not curr.pop()]\n\t\t\t\telif b == '&':\n\t\t\t\t\tcurr = prev + [all(curr)]\n\t\t\t\telse:\n\t\t\t\t\tcurr = prev + [any(curr)]\n\t\treturn curr.pop()\n", "from functools import reduce\n\n\nclass Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\tdef parse_or(*l):\n\t\t\treturn reduce(lambda x, y: x or y, l)\n\t\tdef parse_and(*l): \n\t\t\treturn reduce(lambda x, y: x and y, l)\n\t\tdef parse_not(x):\n\t\t\treturn not x\n\t\t\n\t\texpression = expression.replace('t', 'True')\n\t\texpression = expression.replace('f', 'False')\n\t\t\n\t\texpression = expression.replace('|', 'parse_or')\n\t\texpression = expression.replace('&', 'parse_and')\n\t\texpression = expression.replace('!', 'parse_not')\n\n\t\treturn eval(expression)\n", "class Solution:\n\n\tdef get_arg_list(self, s1: List): \n\t\targs = []\n\t\twhile s1 and isinstance(s1[-1], bool): \n\t\t\targs.append(s1.pop())\n\t\treturn args\n\t\n\tdef boolEval(self, symbol, s1: List):\n\t\tif symbol == '!': \n\t\t\treturn not s1[0]\n\t\telif symbol == '&': \n\t\t\treturn all(s1)\n\t\telif symbol == '|': \n\t\t\treturn any(s1)\n\t\telse: \n\t\t\traise ValueError('Invalid Symbol')\n\t\t\t\t\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\t# push ! & | ( onto stack1\n\t\t# push t and f onto stack2 \n\t\t# pop ( from stack 1 when encounter )\n\t\t# if top stack 1 is not paren, then use to evaluate using stack 2\n\t\ts1 = []        \n\t\t\n\t\tfor c in expression: \n\t\t\tif c == '!' or c == '|' or c == '(' or c == '&': \n\t\t\t\ts1.append(c)\n\t\t\telif c == 't' or c == 'f': \n\t\t\t\ts1.append(True if c == 't' else False)\n\t\t\telif c == ')': \n\t\t\t\targs = self.get_arg_list(s1)\n\t\t\t\ts1.pop()\n\t\t\t\ttop = s1[-1]\n\t\t\t\twhile top == '!' or top == '|' or top == '&': \n\t\t\t\t\tret = self.boolEval(s1.pop(), args)\n\t\t\t\t\ts1.append(ret)\n\t\t\t\t\targs = self.get_arg_list(s1)\n\t\t\t\t\ttop = None if not s1 else s1[-1]\n\t\t\t\ts1 += args\n\n\t\t\telif c == ',': \n\t\t\t\tpass\n\t\t\telse: \n\t\t\t\traise ValueError('Invalid character')\n\n\t\treturn s1[0]\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\treturn eval(expression.translate(str.maketrans({'t': '1', 'f': '0', '!': 'not', '|': 'or_', '&': 'and_'})), {'or_': lambda *a: any(a), 'and_': lambda *a: all(a)})\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\texpression = list(expression)\n\n\t\tdef replace_or(start: int):\n\t\t\tbraket = 1\n\t\t\tfor i in range(start, len(expression)):\n\t\t\t\tif expression[i] == '(':\n\t\t\t\t\tbraket += 1\n\t\t\t\telif expression[i] == ')':\n\t\t\t\t\tbraket -= 1\n\t\t\t\telif braket == 1 and expression[i] == ',':\n\t\t\t\t\texpression[i] = 'or'\n\t\t\t\telif braket == 0:\n\t\t\t\t\tbreak\n\n\t\tfor idx, char in enumerate(expression):\n\t\t\tif char == '|':\n\t\t\t\texpression[idx] = ''\n\t\t\t\treplace_or(idx + 2)\n\t\t\telif char == '&':\n\t\t\t\texpression[idx] = ''\n\t\t\telif char == 't':\n\t\t\t\texpression[idx] = 'True'\n\t\t\telif char == 'f':\n\t\t\t\texpression[idx] = 'False'\n\t\t\telif char == '!':\n\t\t\t\texpression[idx] = 'not'\n\n\t\texpr = ' '.join(expression).replace(',', 'and')\n\n\t\treturn eval(expr)\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\texpression = list(expression)\n\t\ttable = {'|': 'or', '&': 'and', 't': 'True', 'f': 'False'}\n\n\t\tlogic = []\n\t\tidx, par = 0, True\n\t\twhile idx < len(expression):\n\t\t\tif expression[idx] in ['&', '|']:\n\t\t\t\tlogic.append(table[expression[idx]])\n\t\t\t\texpression[idx] = ''\n\t\t\t\tidx += 2\n\t\t\telif expression[idx] == '!':\n\t\t\t\tlogic.append('not')\n\t\t\t\texpression[idx] = 'not'\n\t\t\t\tidx += 2\n\t\t\telse:\n\t\t\t\tif not par and logic:\n\t\t\t\t\tlogic.pop()\n\t\t\t\t\tpar = True\n\n\t\t\t\tif expression[idx] in ['t', 'f']:\n\t\t\t\t\texpression[idx] = table[expression[idx]]\n\t\t\t\telif expression[idx] == ',':\n\t\t\t\t\texpression[idx] = logic[-1]\n\t\t\t\telif expression[idx] == ')':\n\t\t\t\t\tif logic[-1] == 'not':\n\t\t\t\t\t\tlogic.pop()\n\t\t\t\t\telse:\n\t\t\t\t\t\tpar = False\n\n\t\t\t\tidx += 1\n\n\t\treturn eval(' '.join(expression))\n", "class Solution:\n\tdef parseBoolExpr(self, ex: str) -> bool:\n\t\tdef recur(i):\n\t\t\tif ex[i] in ('t','f'):\n\t\t\t\treturn True if ex[i]=='t' else False,i+1\n\t\t\top=ex[i]\n\t\t\ti=i+2\n\t\t\tstack=[]\n\t\t\twhile ex[i]!=')':\n\t\t\t\tif ex[i]==',':\n\t\t\t\t\ti+=1\n\t\t\t\t\tcontinue\n\t\t\t\t\n\t\t\t\tres,i=recur(i)\n\t\t\t\tstack.append(res)\n\t\t\t\n\t\t\tif op=='&':\n\t\t\t\treturn all(stack),i+1\n\t\t\telif op=='|':\n\t\t\t\treturn any(stack),i+1\n\t\t\telif op=='!':\n\t\t\t\treturn not stack[0],i+1\n\t\t\treturn res,i+1\n\t\treturn recur(0)[0]\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\texpression = list(expression)\n\n\t\tdef replace(start: int, logical: str):\n\t\t\tbraket = 1\n\t\t\tidxs = []\n\t\t\tfor i in range(start, len(expression)):\n\t\t\t\tif expression[i] == '(':\n\t\t\t\t\tbraket += 1\n\t\t\t\telif expression[i] == ')':\n\t\t\t\t\tbraket -= 1\n\t\t\t\telif braket == 1 and expression[i] == ',':\n\t\t\t\t\tidxs.append(i)\n\t\t\t\telif braket == 0:\n\t\t\t\t\tbreak\n\n\t\t\tfor i in idxs:\n\t\t\t\texpression[i] = logical\n\n\t\tfor idx, char in enumerate(expression):\n\t\t\tif char == '|':\n\t\t\t\texpression[idx] = ''\n\t\t\t\treplace(idx + 2, 'or')\n\t\t\telif char == '&':\n\t\t\t\texpression[idx] = ''\n\n\t\texpr = ' '.join(expression).replace('t', 'True').replace('f', 'False').replace('!', 'not').replace(',', 'and')\n\n\t\treturn eval(expr)\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\texpression = list(expression)\n\n\t\tdef replace(start: int, logical: str):\n\t\t\tbraket = 1\n\t\t\tidxs = []\n\t\t\tfor i in range(start, len(expression)):\n\t\t\t\tif expression[i] == '(':\n\t\t\t\t\tbraket += 1\n\t\t\t\telif expression[i] == ')':\n\t\t\t\t\tbraket -= 1\n\t\t\t\telif braket == 1 and expression[i] == ',':\n\t\t\t\t\tidxs.append(i)\n\t\t\t\telif braket == 0:\n\t\t\t\t\tbreak\n\n\t\t\tfor i in idxs:\n\t\t\t\texpression[i] = logical\n\n\t\tfor idx, char in enumerate(expression):\n\t\t\tif char == '|':\n\t\t\t\texpression[idx] = ''\n\t\t\t\treplace(idx + 2, 'or')\n\t\t\telif char == '&':\n\t\t\t\texpression[idx] = ''\n\t\t\telif char == 't':\n\t\t\t\texpression[idx] = 'True'\n\t\t\telif char == 'f':\n\t\t\t\texpression[idx] = 'False'\n\t\t\telif char == '!':\n\t\t\t\texpression[idx] = 'not'\n\n\t\texpr = ' '.join(expression).replace(',', 'and')\n\n\t\treturn eval(expr)\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\texp=collections.deque(expression)\n\t\t\n\t\tdef or_opt(exp):\n\t\t\texp.popleft() # skip (\n\t\t\tret=False\n\t\t\twhile exp:\n\t\t\t\tret |= exp_opt(exp)\n\t\t\t\tif exp.popleft()==')': return ret\n\t\t\n\t\tdef and_opt(exp):\n\t\t\texp.popleft() # skip (\n\t\t\tret=True\n\t\t\twhile exp:\n\t\t\t\tret &= exp_opt(exp)\n\t\t\t\tif exp.popleft()==')': return ret\n\t\t\t\t\t\t\t\t\n\t\tdef exp_opt(exp):\n\t\t\tch=exp.popleft()\n\t\t\tret=False\n\t\t\tif ch=='t': ret=True\n\t\t\telif ch=='f': ret=False\n\t\t\telif ch=='!': exp.popleft(); ret=not exp_opt(exp); exp.popleft() # remove (,)\n\t\t\telif ch=='|': ret=or_opt(exp)\n\t\t\telif ch=='&': ret=and_opt(exp)\n\t\t\treturn ret\n\t\t\n\t\treturn exp_opt(exp)    \n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\ttable = {'|': 'or', '&': 'and', 't': 'True', 'f': 'False', '(': '('}\n\n\t\texpr, logic = [], []\n\t\tidx, par = 0, True\n\t\twhile idx < len(expression):\n\t\t\tif expression[idx] in ['&', '|']:\n\t\t\t\tlogic.append(table[expression[idx]])\n\t\t\telif expression[idx] == '!':\n\t\t\t\tlogic.append('not')\n\t\t\t\texpr.append('not')\n\t\t\telse:\n\t\t\t\tif not par and logic:\n\t\t\t\t\tlogic.pop()\n\t\t\t\t\tpar = True\n\n\t\t\t\tif expression[idx] in ['t', 'f', '(']:\n\t\t\t\t\texpr.append(table[expression[idx]])\n\t\t\t\telif expression[idx] == ',':\n\t\t\t\t\texpr.append(logic[-1])\n\t\t\t\telif expression[idx] == ')':\n\t\t\t\t\texpr.append(')')\n\t\t\t\t\tif logic[-1] == 'not':\n\t\t\t\t\t\tlogic.pop()\n\t\t\t\t\telse:\n\t\t\t\t\t\tpar = False\n\n\t\t\tidx += 1\n\n\t\treturn eval(' '.join(expr))\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\t\n\t\tdef split_into_list(expression):\n\t\t\t\n\t\t\tres = []\n\t\t\tdepth = 0\n\t\t\tss = ''\n\t\t\t\n\t\t\tfor e in expression:\n\t\t\t\tif depth == 0 and e == ',':\n\t\t\t\t\tres.append(ss)\n\t\t\t\t\tss = ''\n\t\t\t\t\n\t\t\t\telse:\n\t\t\t\t\tif e == '(':\n\t\t\t\t\t\tdepth += 1\n\t\t\t\t\telif e == ')':\n\t\t\t\t\t\tdepth -= 1\n\n\t\t\t\t\tss += e\n\t\t\t\t\n\t\t\tres.append(ss)\n\t\t\t\n\t\t\treturn res\n\t\t\n\t\tif expression == 't':\n\t\t\treturn True\n\t\tif expression == 'f':\n\t\t\treturn False\n\t\t\n\t\tif expression[0] == '!':\n\t\t\treturn not self.parseBoolExpr(expression[2:-1])\n\t\t\t\n\t\tif expression[0] == '&':\n\t\t\t\n\t\t\tres = True\n\t\t\tfor L in split_into_list(expression[2:-1]):\n\t\t\t\tres &= self.parseBoolExpr(L)\n\t\t\t\n\t\t\treturn res\n\t\t\n\t\tif expression[0] == '|':\n\t\t\t\n\t\t\tres = False\n\t\t\tfor L in split_into_list(expression[2:-1]):\n\t\t\t\tres |= self.parseBoolExpr(L)\n\t\t\t\n\t\t\treturn res\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\tif len(expression) == 1:\n\t\t\treturn expression == 't'\n\t\top = expression[0]\n\t\tboolean_list = []\n\t\tlevel = 0\n\t\tstart = 2\n\t\tfor i in range(2, len(expression) - 1):\n\t\t\tch = expression[i]\n\t\t\tif ch == '(':\n\t\t\t\tlevel += 1\n\t\t\telif ch == ')':\n\t\t\t\tlevel -= 1\n\t\t\telif ch == ',' and level == 0:\n\t\t\t\tboolean_list.append(self.parseBoolExpr(expression[start:i]))\n\t\t\t\tstart = i+1\n\t\t\telif ch not in '&|!' and level == 0:\n\t\t\t\tboolean_list.append(True if ch == 't' else False)\n\t\tboolean_list.append(self.parseBoolExpr(expression[start:-1]))\n\t\tif op == '!':\n\t\t\treturn not boolean_list[0]\n\t\telif op == '&':\n\t\t\treturn all(boolean_list)\n\t\telse:\n\t\t\treturn any(boolean_list)\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\tstack = []\n\t\tfor ch in expression:\n\t\t\tif ch == ',':\n\t\t\t\tcontinue\n\t\t\tif ch != ')':\n\t\t\t\tstack.append(ch)\n\t\t\telse:\n\t\t\t\ttemp = ''\n\t\t\t\twhile stack[-1] != '(':\n\t\t\t\t\ttemp += stack.pop()\n\t\t\t\tstack.pop()\n\t\t\t\tif stack[-1] == '&':\n\t\t\t\t\tres = 't' if temp.count('f') == 0 else 'f'\n\t\t\t\telif stack[-1] == '|':\n\t\t\t\t\tres = 'f' if temp.count('t') == 0 else 't'\n\t\t\t\telse:\n\t\t\t\t\tres = 't' if temp == 'f' else 'f'\n\t\t\t\tstack[-1] = res\n\t\treturn True if stack[-1] == 't' else False\n\t\t\n\t\t\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\tdef parse(e: str, left, right):\n\t\t\tif right - left == 1: \n\t\t\t\treturn e[left] == 't'               \n\t\t\tres = e[left] == '&' # only when the first char is '&', ans assigned True.\n\t\t\tlevel, start = 0, left + 2 # e[left + 1] must be '(', so start from lo + 2 to delimit sub-expression.\n\t\t\tfor i in range(left + 2, right):\n\t\t\t\tif level == 0  and e[i] in [',', ')']: # found a sub-expression.\n\t\t\t\t\tcur = parse(e, start, i) \n\t\t\t\t\tstart = i + 1 \n\t\t\t\t\tif e[left] == '&':\n\t\t\t\t\t\tres &= cur\n\t\t\t\t\telif e[left] == '|':\n\t\t\t\t\t\tres |= cur\n\t\t\t\t\telse: # e[lo] is '!'.\n\t\t\t\t\t\tres = not cur\n\t\t\t\tif e[i] == '(':\n\t\t\t\t\tlevel = level + 1\n\t\t\t\telif e[i] == ')':\n\t\t\t\t\tlevel = level - 1\n\t\t\treturn res;        \n\t\t\n\t\treturn parse(expression, 0, len(expression))\n", "from functools import reduce\nclass Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\toperations = {\n\t\t\t'|': any,\n\t\t\t'&': all,\n\t\t\t'!': lambda x: not x[0]\n\t\t}\n\t\t\n\t\tdef getTokens(expression):\n\t\t\tdepth = 0\n\t\t\ttoken = ''\n\t\t\tfor s in expression:\n\t\t\t\tif s == ',' and depth == 0:\n\t\t\t\t\tyield token\n\t\t\t\t\ttoken = ''\n\t\t\t\t\tcontinue\n\t\t\t\tif s == '(':\n\t\t\t\t\tdepth += 1\n\t\t\t\telif s == ')':\n\t\t\t\t\tdepth -= 1\n\t\t\t\ttoken += s\n\t\t\t\t\n\t\t\tyield token\n\t\t\n\t\tdef evaluate(expression):\n\t\t\tif expression == 't':\n\t\t\t\treturn True\n\t\t\telif expression == 'f':\n\t\t\t\treturn False\n\t\t\t\n\t\t\toperator = operations[expression[0]]\n\t\t\tvalues = [evaluate(token) for token in getTokens(expression[2:-1])]\n\t\t\treturn operator(values)\n\t\t\t\n\t\treturn evaluate(expression)\n", "class Solution:\n\t# https://www.youtube.com/watch?v=y2kFBqj_J08&list=PLLuMmzMTgVK45AiaeeEGGc6xqM6jrlXL4&index=1\n\tdef parseBoolExpr1(self, expression: str) -> bool:\n\t\tdef helper(queue):\n\t\t\tres = True\n\t\t\twhile queue:\n\t\t\t\tc = queue.pop()\n\t\t\t\tprint(('c = {0}'.format(c)))\n\t\t\t\tif c in {'t', 'f'}:\n\t\t\t\t\treturn True if c == 't' else False\n\t\t\t\tif c == '!':\n\t\t\t\t\t# remove '('\n\t\t\t\t\tqueue.pop()\n\t\t\t\t\t# print('!, queue = {0}'.format(queue))\n\t\t\t\t\tres = not helper(queue)\n\t\t\t\t\t# remove ')'\n\t\t\t\t\tqueue.pop()\n\t\t\t\t\treturn res\n\t\t\t\t# elif c in {'&', '|'}:\n\t\t\t\t\t# for &, True & exp1 & exp2, for |, False | exp1 | exp2\n\t\t\t\tisAnd = True if c == '&' else False\n\t\t\t\tres = isAnd\n\t\t\t\t# remove '('\n\t\t\t\tqueue.pop()\n\t\t\t\twhile True:\n\t\t\t\t\tif isAnd:\n\t\t\t\t\t\tres &= helper(queue)\n\t\t\t\t\telse:\n\t\t\t\t\t\tres |= helper(queue)\n\t\t\t\t\t# ch can be ')' or ,  e.g \\\"|(&(t,f,t),!(t))\\\"\n\t\t\t\t\tprint(('isAnd = {0}, queue = {1}, res = {2}'.format(isAnd, queue, res)))\n\t\t\t\t\tch = queue.pop()\n\t\t\t\t\tprint(('after pop char, char = {0}, queue = {1}'.format(ch, queue)))\n\t\t\t\t\tif ch == ')':\n\t\t\t\t\t\tbreak\n\t\t\treturn res\n\t\t\n\t\tqueue = collections.deque([])\n\t\tfor c in expression:\n\t\t\tqueue.appendleft(c)\n\t\treturn helper(queue)\n\t\t\t\t\t\t\n\t\t\n\t# slow, time: O(n^2)\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\t# j is inclusive\n\t\tdef helper(exp, i, j):\n\t\t\tif i == j:\n\t\t\t\treturn exp[i] == 't'\n\t\t\top = exp[i]\n\t\t\tres = op == '&'\n\t\t\t# k starts from '('\n\t\t\tk, count, prev = i + 1, 0, i + 2\n\t\t\t# print('i = {0}, j = {1}'.format(i, j))\n\t\t\twhile k <= j:\n\t\t\t\tc = exp[k]\n\t\t\t\tif c == '(':\n\t\t\t\t\tcount += 1\n\t\t\t\telif c == ')':\n\t\t\t\t\tcount -= 1\n\t\t\t\tif (count == 1 and c == ',') or not count:\n\t\t\t\t\t# print('k = {0}, c = {1}, count = {2}, i1 = {3}, j1 = {4}'.format(k, c, count, i + 2, k - 1))\n\t\t\t\t\tval = helper(exp, prev, k - 1)\n\t\t\t\t\tprev = k + 1\n\t\t\t\t\tif op == '!':\n\t\t\t\t\t\tres = not val\n\t\t\t\t\telif op == '&':\n\t\t\t\t\t\tres &= val\n\t\t\t\t\telif op == '|':\n\t\t\t\t\t\tres |= val\n\t\t\t\tk += 1\n\t\t\t# print('i = {0}, j = {1}, res = {2}'.format(i, j, res))\n\t\t\treturn res\n\t\t\n\t\treturn helper(expression, 0, len(expression) - 1)\n\t\n\t\n\t\t# if len(expression) == 1:\n\t\t#     return expression == 't'\n\t\t# if expression[0] == '!':\n\t\t#     return not self.parseBoolExpr(expression[2:-1])\n\t\t# op, stack, i = expression[0], [], 2\n\t\t# while i < len(expression) - 1:\n\t\t#     if expression[i] == 't' or expression[i] == 'f':\n\t\t#         stack.append(self.parseBoolExpr(expression[i]))\n\t\t#         i += 1\n\t\t#     elif expression[i] in {'!', '&', '|'}:\n\t\t#         j, count = i + 2, 1\n\t\t#         while j < len(expression) - 1:\n\t\t#             if expression[j] == '(':\n\t\t#                 count += 1\n\t\t#             elif expression[j] == ')':\n\t\t#                 count -= 1\n\t\t#                 if not count:\n\t\t#                     stack.append(self.parseBoolExpr(expression[i:j + 1]))\n\t\t#                     i = j + 1\n\t\t#                     break\n\t\t#             j += 1\n\t\t#     else:\n\t\t#         i += 1\n\t\t# if op == '&':\n\t\t#     return all(val for val in stack)\n\t\t# return any(val for val in stack)\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\texpression = list(expression)\n\n\t\tdef replace(start: int, logical: str):\n\t\t\tbraket = 1\n\t\t\tidxs = []\n\t\t\tfor i in range(start, len(expression)):\n\t\t\t\tif expression[i] == '(':\n\t\t\t\t\tbraket += 1\n\t\t\t\telif expression[i] == ')':\n\t\t\t\t\tbraket -= 1\n\t\t\t\telif braket == 1 and expression[i] == ',':\n\t\t\t\t\tidxs.append(i)\n\t\t\t\telif braket == 0:\n\t\t\t\t\tbreak\n\n\t\t\tfor i in idxs:\n\t\t\t\texpression[i] = logical\n\n\t\tfor idx, char in enumerate(expression):\n\t\t\tif char == '|':\n\t\t\t\texpression[idx] = ''\n\t\t\t\treplace(idx + 2, 'or')\n\t\t\telif char == '&':\n\t\t\t\texpression[idx] = ''\n\t\t\t\treplace(idx + 2, 'and')\n\n\t\texpr = ' '.join(expression).replace('t', 'True').replace('f', 'False').replace('!', 'not')\n\n\t\treturn eval(expr)\n", "class Solution:\n\tdef parseBoolExpr(self, ex: str) -> bool:\n\t\tdef recur(i):\n\t\t\tif ex[i] in ('t','f'):\n\t\t\t\treturn True if ex[i]=='t' else False,i+1\n\t\t\top=ex[i]\n\t\t\ti,stack=i+2,[]\n\t\t\twhile ex[i]!=')':\n\t\t\t\tif ex[i]==',':\n\t\t\t\t\ti+=1\n\t\t\t\t\tcontinue\n\t\t\t\tres,i=recur(i)\n\t\t\t\tstack.append(res)\n\t\t\tif op=='&':\n\t\t\t\treturn all(stack),i+1\n\t\t\telif op=='|':\n\t\t\t\treturn any(stack),i+1\n\t\t\telif op=='!':\n\t\t\t\treturn not stack[0],i+1\n\t\t\treturn res,i+1\n  \n\t\treturn recur(0)[0]\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\tops = {'!', '&', '|'}\n\t\t\n\t\tdef parse(start):\n\t\t\tif expression[start] == 'f':\n\t\t\t\treturn False, start + 1\n\t\t\tif expression[start] == 't':\n\t\t\t\treturn True, start + 1\n\t\t\tif expression[start] in ops:\n\t\t\t\tnew_start = start + 2\n\t\t\t\tvals = set()\n\t\t\t\twhile new_start < len(expression):\n\t\t\t\t\tval, new_start = parse(new_start)\n\t\t\t\t\tvals.add(val)\n\t\t\t\t\tif expression[new_start] == ')':\n\t\t\t\t\t\tnew_start += 1\n\t\t\t\t\t\tbreak\n\t\t\t\t\tassert expression[new_start] == ','\n\t\t\t\t\tnew_start += 1\n\t\t\t\tif expression[start] == '!':\n\t\t\t\t\tassert len(vals) == 1\n\t\t\t\t\treturn not list(vals)[0], new_start\n\t\t\t\tif expression[start] == '&':\n\t\t\t\t\treturn all(vals), new_start\n\t\t\t\treturn any(vals), new_start\n\t\t\n\t\treturn parse(0)[0]\n", "import operator\nfrom typing import List\n\n\nclass Solution:\n\n\t@staticmethod\n\tdef split_by_comma(expression: str) -> List[str]:\n\t\tstart = 0\n\t\tbracket_balance = 0\n\t\tanswer = []\n\t\tfor i in range(len(expression)):\n\t\t\tif expression[i] == '(':\n\t\t\t\tbracket_balance += 1\n\t\t\tif expression[i] == ')':\n\t\t\t\tbracket_balance -= 1\n\t\t\tif expression[i] == ',' and not bracket_balance:\n\t\t\t\tanswer.append(expression[start: i+1])\n\t\t\t\tstart = i + 1\n\t\tanswer.append(expression[start:])\n\t\treturn answer\n\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\tif expression.startswith('t'):\n\t\t\treturn True\n\t\tif expression.startswith('f'):\n\t\t\treturn False\n\t\tif expression.startswith('!'):\n\t\t\treturn not self.parseBoolExpr(expression[2:-1])\n\t\tif expression.startswith('|'):\n\t\t\treturn any(map(self.parseBoolExpr,\n\t\t\t\t\t\t   self.split_by_comma(expression[2:-1])))\n\t\telse:\n\t\t\treturn all(map(self.parseBoolExpr,\n\t\t\t\t\t\t   self.split_by_comma(expression[2:-1])))\n\n", "class Solution:\n\tdef parseBoolExpr(self, expression: str) -> bool:\n\t\tstack = []\n\t\tfor c in expression:\n\t\t\tif c not in [',', ')']:\n\t\t\t\tstack.append(True if c=='t' else False if c=='f' else c)\n\t\t\telif c == ')':\n\t\t\t\tseen = set() # capturing only distinct values i.e single 'f' and 't' \n\t\t\t\twhile stack[-1] != '(':\n\t\t\t\t\tseen.add(stack.pop())\n\t\t\t\tstack.pop() # removing '('\n\t\t\t\toperator = stack.pop()\n\t\t\t\tstack.append(all(seen) if operator == '&' else any(seen) if operator == '|' else not seen.pop() )\n\t\t\n\t\treturn stack[-1]\n"], "id": "id6351"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6351", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["return", 1], ["the", 1], ["result", 1], ["of", 1], ["evaluating", 1], ["a", 1], ["given", 1], ["boolean", 1], ["expression", 1], ["represented", 1], ["as", 1], ["a", 1], ["string", 1], ["an", 1], ["expression", 1], ["can", 1], ["either", 1], ["be", 1], ["t", 1], ["evaluating", 1], ["to", 1], ["true", 1], ["f", 1], ["evaluating", 1], ["to", 1], ["false", 1], ["expr", 1], ["evaluating", 1], ["to", 1], ["the", 1], ["logical", 1], ["not", 1], ["of", 1], ["the", 1], ["inner", 1], ["expression", 1], ["expr", 1], ["expr1", 1], ["expr2", 1], ["evaluating", 1], ["to", 1], ["the", 1], ["logical", 1], ["and", 1], ["of", 1], ["2", 1], ["or", 1], ["more", 1], ["inner", 1], ["expressions", 1], ["expr1", 1], ["expr2", 1], ["expr1", 1], ["expr2", 1], ["evaluating", 1], ["to", 1], ["the", 1], ["logical", 1], ["or", 1], ["of", 1], ["2", 1], ["or", 1], ["more", 1], ["inner", 1], ["expressions", 1], ["expr1", 1], ["expr2", 1], ["example", 1], ["1", 1], ["input", 1], ["expression", 1], ["f", 1], ["output", 1], ["true", 1], ["example", 1], ["2", 1], ["input", 1], ["expression", 1], ["f", 1], ["t", 1], ["output", 1], ["true", 1], ["example", 1], ["3", 1], ["input", 1], ["expression", 1], ["t", 1], ["f", 1], ["output", 1], ["false", 1], ["example", 1], ["4", 1], ["input", 1], ["expression", 1], ["t", 1], ["f", 1], ["t", 1], ["t", 1], ["output", 1], ["false", 1], ["constraints", 1], ["1", 1], ["expression", 1], ["length", 1], ["20000", 1], ["expression", 1], ["i", 1], ["consists", 1], ["of", 1], ["characters", 1], ["in", 1], ["t", 1], ["f", 1], ["expression", 1], ["is", 0], ["a", 0], ["valid", 0], ["expression", 0], ["representing", 0], ["a", 0], ["boolean", 0], ["as", 0], ["given", 0], ["in", 0], ["the", 0], ["description", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8571428571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8571428571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8689655172413793, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8689655172413793, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8571428571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8571428571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8689655172413793, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8689655172413793, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["if", 0], ["expression", 0], ["f", 0], ["return", 0], ["false", 0], ["if", 0], ["expression", 0], ["t", 0], ["return", 0], ["true", 0], ["if", 0], ["expression", 0], ["0", 0], ["return", 0], ["not", 0], ["self", 0], ["parseboolexpr", 0], ["expression", 0], ["2", 0], ["1", 0], ["if", 0], ["expression", 0], ["0", 0], ["cursor", 0], ["2", 0], ["while", 0], ["cursor", 0], ["len", 0], ["expression", 0], ["1", 0], ["end", 0], ["of", 0], ["next", 0], ["self", 0], ["getnextexpr", 0], ["expression", 0], ["cursor", 0], ["if", 0], ["self", 0], ["parseboolexpr", 0], ["expression", 0], ["cursor", 0], ["end", 0], ["of", 0], ["next", 0], ["return", 0], ["true", 0], ["cursor", 0], ["end", 0], ["of", 0], ["next", 0], ["1", 0], ["return", 0], ["false", 0], ["if", 0], ["expression", 0], ["0", 0], ["cursor", 0], ["2", 0], ["while", 0], ["cursor", 0], ["len", 0], ["expression", 0], ["1", 0], ["end", 0], ["of", 0], ["next", 0], ["self", 0], ["getnextexpr", 0], ["expression", 0], ["cursor", 0], ["if", 0], ["not", 0], ["self", 0], ["parseboolexpr", 0], ["expression", 0], ["cursor", 0], ["end", 0], ["of", 0], ["next", 0], ["return", 0], ["false", 0], ["cursor", 0], ["end", 0], ["of", 0], ["next", 0], ["1", 0], ["return", 0], ["true", 0], ["def", 0], ["getnextexpr", 0], ["self", 0], ["expression", 0], ["start", 0], ["if", 0], ["expression", 0], ["start", 0], ["or", 0], ["expression", 0], ["start", 0], ["or", 0], ["expression", 0], ["start", 0], ["open", 0], ["count", 0], ["1", 0], ["close", 0], ["count", 0], ["0", 0], ["start", 0], ["1", 0], ["while", 0], ["open", 0], ["count", 0], ["close", 0], ["count", 0], ["start", 0], ["1", 0], ["if", 0], ["expression", 0], ["start", 0], ["open", 0], ["count", 0], ["1", 0], ["if", 0], ["expression", 0], ["start", 0], ["close", 0], ["count", 0], ["1", 0], ["return", 0], ["start", 0], ["1", 0], ["else", 0], ["return", 0], ["start", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["bool", 0], ["stack", 0], ["expr", 0], ["stack", 0], ["curr", 0], ["for", 0], ["char", 0], ["in", 0], ["expression", 0], ["if", 0], ["char", 0], ["continue", 0], ["elif", 0], ["char", 0], ["expr", 0], ["stack", 0], ["append", 0], ["curr", 0], ["curr", 0], ["elif", 0], ["char", 0], ["in", 0], ["tf", 0], ["curr", 0], ["append", 0], ["true", 0], ["if", 0], ["char", 0], ["t", 0], ["else", 0], ["false", 0], ["elif", 0], ["char", 0], ["in", 0], ["bool", 0], ["stack", 0], ["append", 0], ["char", 0], ["else", 0], ["b", 0], ["bool", 0], ["stack", 0], ["pop", 0], ["prev", 0], ["expr", 0], ["stack", 0], ["pop", 0], ["if", 0], ["expr", 0], ["stack", 0], ["else", 0], ["if", 0], ["b", 0], ["curr", 0], ["prev", 0], ["not", 0], ["curr", 0], ["pop", 0], ["elif", 0], ["b", 0], ["curr", 0], ["prev", 0], ["all", 0], ["curr", 0], ["else", 0], ["curr", 0], ["prev", 0], ["any", 0], ["curr", 0], ["return", 0], ["curr", 0], ["pop", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["def", 0], ["parse", 0], ["or", 0], ["l", 0], ["return", 0], ["reduce", 0], ["lambda", 0], ["x", 0], ["y", 0], ["x", 0], ["or", 0], ["y", 0], ["l", 0], ["def", 0], ["parse", 0], ["and", 0], ["l", 0], ["return", 0], ["reduce", 0], ["lambda", 0], ["x", 0], ["y", 0], ["x", 0], ["and", 0], ["y", 0], ["l", 0], ["def", 0], ["parse", 0], ["not", 0], ["x", 0], ["return", 0], ["not", 0], ["x", 0], ["expression", 0], ["expression", 0], ["replace", 0], ["t", 0], ["true", 0], ["expression", 0], ["expression", 0], ["replace", 0], ["f", 0], ["false", 0], ["expression", 0], ["expression", 0], ["replace", 0], ["parse", 0], ["or", 0], ["expression", 0], ["expression", 0], ["replace", 0], ["parse", 0], ["and", 0], ["expression", 0], ["expression", 0], ["replace", 0], ["parse", 0], ["not", 0], ["return", 0], ["eval", 0], ["expression", 0], ["class", 0], ["solution", 0], ["def", 0], ["get", 0], ["arg", 0], ["list", 0], ["self", 0], ["s1", 0], ["list", 0], ["args", 0], ["while", 0], ["s1", 0], ["and", 0], ["isinstance", 0], ["s1", 0], ["1", 0], ["bool", 0], ["args", 0], ["append", 0], ["s1", 0], ["pop", 0], ["return", 0], ["args", 0], ["def", 0], ["booleval", 0], ["self", 0], ["symbol", 0], ["s1", 0], ["list", 0], ["if", 0], ["symbol", 0], ["return", 0], ["not", 0], ["s1", 0], ["0", 0], ["elif", 0], ["symbol", 0], ["return", 0], ["all", 0], ["s1", 0], ["elif", 0], ["symbol", 0], ["return", 0], ["any", 0], ["s1", 0], ["else", 0], ["raise", 0], ["valueerror", 0], ["invalid", 0], ["symbol", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["push", 0], ["onto", 0], ["stack1", 0], ["push", 0], ["t", 0], ["and", 0], ["f", 0], ["onto", 0], ["stack2", 0], ["pop", 0], ["from", 0], ["stack", 0], ["1", 0], ["when", 0], ["encounter", 0], ["if", 0], ["top", 0], ["stack", 0], ["1", 0], ["is", 0], ["not", 0], ["paren", 0], ["then", 0], ["use", 0], ["to", 0], ["evaluate", 0], ["using", 0], ["stack", 0], ["2", 0], ["s1", 0], ["for", 0], ["c", 0], ["in", 0], ["expression", 0], ["if", 0], ["c", 0], ["or", 0], ["c", 0], ["or", 0], ["c", 0], ["or", 0], ["c", 0], ["s1", 0], ["append", 0], ["c", 0], ["elif", 0], ["c", 0], ["t", 0], ["or", 0], ["c", 0], ["f", 0], ["s1", 0], ["append", 0], ["true", 0], ["if", 0], ["c", 0], ["t", 0], ["else", 0], ["false", 0], ["elif", 0], ["c", 0], ["args", 0], ["self", 0], ["get", 0], ["arg", 0], ["list", 0], ["s1", 0], ["s1", 0], ["pop", 0], ["top", 0], ["s1", 0], ["1", 0], ["while", 0], ["top", 0], ["or", 0], ["top", 0], ["or", 0], ["top", 0], ["ret", 0], ["self", 0], ["booleval", 0], ["s1", 0], ["pop", 0], ["args", 0], ["s1", 0], ["append", 0], ["ret", 0], ["args", 0], ["self", 0], ["get", 0], ["arg", 0], ["list", 0], ["s1", 0], ["top", 0], ["none", 0], ["if", 0], ["not", 0], ["s1", 0], ["else", 0], ["s1", 0], ["1", 0], ["s1", 0], ["args", 0], ["elif", 0], ["c", 0], ["pass", 0], ["else", 0], ["raise", 0], ["valueerror", 0], ["invalid", 0], ["character", 0], ["return", 0], ["s1", 0], ["0", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["return", 0], ["eval", 0], ["expression", 0], ["translate", 0], ["str", 0], ["maketrans", 0], ["t", 0], ["1", 0], ["f", 0], ["0", 0], ["not", 0], ["or", 0], ["and", 0], ["or", 0], ["lambda", 0], ["a", 0], ["any", 0], ["a", 0], ["and", 0], ["lambda", 0], ["a", 0], ["all", 0], ["a", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["expression", 0], ["list", 0], ["expression", 0], ["def", 0], ["replace", 0], ["or", 0], ["start", 0], ["int", 0], ["braket", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["len", 0], ["expression", 0], ["if", 0], ["expression", 0], ["i", 0], ["braket", 0], ["1", 0], ["elif", 0], ["expression", 0], ["i", 0], ["braket", 0], ["1", 0], ["elif", 0], ["braket", 0], ["1", 0], ["and", 0], ["expression", 0], ["i", 0], ["expression", 0], ["i", 0], ["or", 0], ["elif", 0], ["braket", 0], ["0", 0], ["break", 0], ["for", 0], ["idx", 0], ["char", 0], ["in", 0], ["enumerate", 0], ["expression", 0], ["if", 0], ["char", 0], ["expression", 0], ["idx", 0], ["replace", 0], ["or", 0], ["idx", 0], ["2", 0], ["elif", 0], ["char", 0], ["expression", 0], ["idx", 0], ["elif", 0], ["char", 0], ["t", 0], ["expression", 0], ["idx", 0], ["true", 0], ["elif", 0], ["char", 0], ["f", 0], ["expression", 0], ["idx", 0], ["false", 0], ["elif", 0], ["char", 0], ["expression", 0], ["idx", 0], ["not", 0], ["expr", 0], ["join", 0], ["expression", 0], ["replace", 0], ["and", 0], ["return", 0], ["eval", 0], ["expr", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["expression", 0], ["list", 0], ["expression", 0], ["table", 0], ["or", 0], ["and", 0], ["t", 0], ["true", 0], ["f", 0], ["false", 0], ["logic", 0], ["idx", 0], ["par", 0], ["0", 0], ["true", 0], ["while", 0], ["idx", 0], ["len", 0], ["expression", 0], ["if", 0], ["expression", 0], ["idx", 0], ["in", 0], ["logic", 0], ["append", 0], ["table", 0], ["expression", 0], ["idx", 0], ["expression", 0], ["idx", 0], ["idx", 0], ["2", 0], ["elif", 0], ["expression", 0], ["idx", 0], ["logic", 0], ["append", 0], ["not", 0], ["expression", 0], ["idx", 0], ["not", 0], ["idx", 0], ["2", 0], ["else", 0], ["if", 0], ["not", 0], ["par", 0], ["and", 0], ["logic", 0], ["logic", 0], ["pop", 0], ["par", 0], ["true", 0], ["if", 0], ["expression", 0], ["idx", 0], ["in", 0], ["t", 0], ["f", 0], ["expression", 0], ["idx", 0], ["table", 0], ["expression", 0], ["idx", 0], ["elif", 0], ["expression", 0], ["idx", 0], ["expression", 0], ["idx", 0], ["logic", 0], ["1", 0], ["elif", 0], ["expression", 0], ["idx", 0], ["if", 0], ["logic", 0], ["1", 0], ["not", 0], ["logic", 0], ["pop", 0], ["else", 0], ["par", 0], ["false", 0], ["idx", 0], ["1", 0], ["return", 0], ["eval", 0], ["join", 0], ["expression", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["ex", 0], ["str", 0], ["bool", 0], ["def", 0], ["recur", 0], ["i", 0], ["if", 0], ["ex", 0], ["i", 0], ["in", 0], ["t", 0], ["f", 0], ["return", 0], ["true", 0], ["if", 0], ["ex", 0], ["i", 0], ["t", 0], ["else", 0], ["false", 0], ["i", 0], ["1", 0], ["op", 0], ["ex", 0], ["i", 0], ["i", 0], ["i", 0], ["2", 0], ["stack", 0], ["while", 0], ["ex", 0], ["i", 0], ["if", 0], ["ex", 0], ["i", 0], ["i", 0], ["1", 0], ["continue", 0], ["res", 0], ["i", 0], ["recur", 0], ["i", 0], ["stack", 0], ["append", 0], ["res", 0], ["if", 0], ["op", 0], ["return", 0], ["all", 0], ["stack", 0], ["i", 0], ["1", 0], ["elif", 0], ["op", 0], ["return", 0], ["any", 0], ["stack", 0], ["i", 0], ["1", 0], ["elif", 0], ["op", 0], ["return", 0], ["not", 0], ["stack", 0], ["0", 0], ["i", 0], ["1", 0], ["return", 0], ["res", 0], ["i", 0], ["1", 0], ["return", 0], ["recur", 0], ["0", 0], ["0", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["expression", 0], ["list", 0], ["expression", 0], ["def", 0], ["replace", 0], ["start", 0], ["int", 0], ["logical", 0], ["str", 0], ["braket", 0], ["1", 0], ["idxs", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["len", 0], ["expression", 0], ["if", 0], ["expression", 0], ["i", 0], ["braket", 0], ["1", 0], ["elif", 0], ["expression", 0], ["i", 0], ["braket", 0], ["1", 0], ["elif", 0], ["braket", 0], ["1", 0], ["and", 0], ["expression", 0], ["i", 0], ["idxs", 0], ["append", 0], ["i", 0], ["elif", 0], ["braket", 0], ["0", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["idxs", 0], ["expression", 0], ["i", 0], ["logical", 0], ["for", 0], ["idx", 0], ["char", 0], ["in", 0], ["enumerate", 0], ["expression", 0], ["if", 0], ["char", 0], ["expression", 0], ["idx", 0], ["replace", 0], ["idx", 0], ["2", 0], ["or", 0], ["elif", 0], ["char", 0], ["expression", 0], ["idx", 0], ["expr", 0], ["join", 0], ["expression", 0], ["replace", 0], ["t", 0], ["true", 0], ["replace", 0], ["f", 0], ["false", 0], ["replace", 0], ["not", 0], ["replace", 0], ["and", 0], ["return", 0], ["eval", 0], ["expr", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["expression", 0], ["list", 0], ["expression", 0], ["def", 0], ["replace", 0], ["start", 0], ["int", 0], ["logical", 0], ["str", 0], ["braket", 0], ["1", 0], ["idxs", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["len", 0], ["expression", 0], ["if", 0], ["expression", 0], ["i", 0], ["braket", 0], ["1", 0], ["elif", 0], ["expression", 0], ["i", 0], ["braket", 0], ["1", 0], ["elif", 0], ["braket", 0], ["1", 0], ["and", 0], ["expression", 0], ["i", 0], ["idxs", 0], ["append", 0], ["i", 0], ["elif", 0], ["braket", 0], ["0", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["idxs", 0], ["expression", 0], ["i", 0], ["logical", 0], ["for", 0], ["idx", 0], ["char", 0], ["in", 0], ["enumerate", 0], ["expression", 0], ["if", 0], ["char", 0], ["expression", 0], ["idx", 0], ["replace", 0], ["idx", 0], ["2", 0], ["or", 0], ["elif", 0], ["char", 0], ["expression", 0], ["idx", 0], ["elif", 0], ["char", 0], ["t", 0], ["expression", 0], ["idx", 0], ["true", 0], ["elif", 0], ["char", 0], ["f", 0], ["expression", 0], ["idx", 0], ["false", 0], ["elif", 0], ["char", 0], ["expression", 0], ["idx", 0], ["not", 0], ["expr", 0], ["join", 0], ["expression", 0], ["replace", 0], ["and", 0], ["return", 0], ["eval", 0], ["expr", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["exp", 0], ["collections", 0], ["deque", 0], ["expression", 0], ["def", 0], ["or", 0], ["opt", 0], ["exp", 0], ["exp", 0], ["popleft", 0], ["skip", 0], ["ret", 0], ["false", 0], ["while", 0], ["exp", 0], ["ret", 0], ["exp", 0], ["opt", 0], ["exp", 0], ["if", 0], ["exp", 0], ["popleft", 0], ["return", 0], ["ret", 0], ["def", 0], ["and", 0], ["opt", 0], ["exp", 0], ["exp", 0], ["popleft", 0], ["skip", 0], ["ret", 0], ["true", 0], ["while", 0], ["exp", 0], ["ret", 0], ["exp", 0], ["opt", 0], ["exp", 0], ["if", 0], ["exp", 0], ["popleft", 0], ["return", 0], ["ret", 0], ["def", 0], ["exp", 0], ["opt", 0], ["exp", 0], ["ch", 0], ["exp", 0], ["popleft", 0], ["ret", 0], ["false", 0], ["if", 0], ["ch", 0], ["t", 0], ["ret", 0], ["true", 0], ["elif", 0], ["ch", 0], ["f", 0], ["ret", 0], ["false", 0], ["elif", 0], ["ch", 0], ["exp", 0], ["popleft", 0], ["ret", 0], ["not", 0], ["exp", 0], ["opt", 0], ["exp", 0], ["exp", 0], ["popleft", 0], ["remove", 0], ["elif", 0], ["ch", 0], ["ret", 0], ["or", 0], ["opt", 0], ["exp", 0], ["elif", 0], ["ch", 0], ["ret", 0], ["and", 0], ["opt", 0], ["exp", 0], ["return", 0], ["ret", 0], ["return", 0], ["exp", 0], ["opt", 0], ["exp", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["table", 0], ["or", 0], ["and", 0], ["t", 0], ["true", 0], ["f", 0], ["false", 0], ["expr", 0], ["logic", 0], ["idx", 0], ["par", 0], ["0", 0], ["true", 0], ["while", 0], ["idx", 0], ["len", 0], ["expression", 0], ["if", 0], ["expression", 0], ["idx", 0], ["in", 0], ["logic", 0], ["append", 0], ["table", 0], ["expression", 0], ["idx", 0], ["elif", 0], ["expression", 0], ["idx", 0], ["logic", 0], ["append", 0], ["not", 0], ["expr", 0], ["append", 0], ["not", 0], ["else", 0], ["if", 0], ["not", 0], ["par", 0], ["and", 0], ["logic", 0], ["logic", 0], ["pop", 0], ["par", 0], ["true", 0], ["if", 0], ["expression", 0], ["idx", 0], ["in", 0], ["t", 0], ["f", 0], ["expr", 0], ["append", 0], ["table", 0], ["expression", 0], ["idx", 0], ["elif", 0], ["expression", 0], ["idx", 0], ["expr", 0], ["append", 0], ["logic", 0], ["1", 0], ["elif", 0], ["expression", 0], ["idx", 0], ["expr", 0], ["append", 0], ["if", 0], ["logic", 0], ["1", 0], ["not", 0], ["logic", 0], ["pop", 0], ["else", 0], ["par", 0], ["false", 0], ["idx", 0], ["1", 0], ["return", 0], ["eval", 0], ["join", 0], ["expr", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["def", 0], ["split", 0], ["into", 0], ["list", 0], ["expression", 0], ["res", 0], ["depth", 0], ["0", 0], ["ss", 0], ["for", 0], ["e", 0], ["in", 0], ["expression", 0], ["if", 0], ["depth", 0], ["0", 0], ["and", 0], ["e", 0], ["res", 0], ["append", 0], ["ss", 0], ["ss", 0], ["else", 0], ["if", 0], ["e", 0], ["depth", 0], ["1", 0], ["elif", 0], ["e", 0], ["depth", 0], ["1", 0], ["ss", 0], ["e", 0], ["res", 0], ["append", 0], ["ss", 0], ["return", 0], ["res", 0], ["if", 0], ["expression", 0], ["t", 0], ["return", 0], ["true", 0], ["if", 0], ["expression", 0], ["f", 0], ["return", 0], ["false", 0], ["if", 0], ["expression", 0], ["0", 0], ["return", 0], ["not", 0], ["self", 0], ["parseboolexpr", 0], ["expression", 0], ["2", 0], ["1", 0], ["if", 0], ["expression", 0], ["0", 0], ["res", 0], ["true", 0], ["for", 0], ["l", 0], ["in", 0], ["split", 0], ["into", 0], ["list", 0], ["expression", 0], ["2", 0], ["1", 0], ["res", 0], ["self", 0], ["parseboolexpr", 0], ["l", 0], ["return", 0], ["res", 0], ["if", 0], ["expression", 0], ["0", 0], ["res", 0], ["false", 0], ["for", 0], ["l", 0], ["in", 0], ["split", 0], ["into", 0], ["list", 0], ["expression", 0], ["2", 0], ["1", 0], ["res", 0], ["self", 0], ["parseboolexpr", 0], ["l", 0], ["return", 0], ["res", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["if", 0], ["len", 0], ["expression", 0], ["1", 0], ["return", 0], ["expression", 0], ["t", 0], ["op", 0], ["expression", 0], ["0", 0], ["boolean", 0], ["list", 0], ["level", 0], ["0", 0], ["start", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["len", 0], ["expression", 0], ["1", 0], ["ch", 0], ["expression", 0], ["i", 0], ["if", 0], ["ch", 0], ["level", 0], ["1", 0], ["elif", 0], ["ch", 0], ["level", 0], ["1", 0], ["elif", 0], ["ch", 0], ["and", 0], ["level", 0], ["0", 0], ["boolean", 0], ["list", 0], ["append", 0], ["self", 0], ["parseboolexpr", 0], ["expression", 0], ["start", 0], ["i", 0], ["start", 0], ["i", 0], ["1", 0], ["elif", 0], ["ch", 0], ["not", 0], ["in", 0], ["and", 0], ["level", 0], ["0", 0], ["boolean", 0], ["list", 0], ["append", 0], ["true", 0], ["if", 0], ["ch", 0], ["t", 0], ["else", 0], ["false", 0], ["boolean", 0], ["list", 0], ["append", 0], ["self", 0], ["parseboolexpr", 0], ["expression", 0], ["start", 0], ["1", 0], ["if", 0], ["op", 0], ["return", 0], ["not", 0], ["boolean", 0], ["list", 0], ["0", 0], ["elif", 0], ["op", 0], ["return", 0], ["all", 0], ["boolean", 0], ["list", 0], ["else", 0], ["return", 0], ["any", 0], ["boolean", 0], ["list", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["stack", 0], ["for", 0], ["ch", 0], ["in", 0], ["expression", 0], ["if", 0], ["ch", 0], ["continue", 0], ["if", 0], ["ch", 0], ["stack", 0], ["append", 0], ["ch", 0], ["else", 0], ["temp", 0], ["while", 0], ["stack", 0], ["1", 0], ["temp", 0], ["stack", 0], ["pop", 0], ["stack", 0], ["pop", 0], ["if", 0], ["stack", 0], ["1", 0], ["res", 0], ["t", 0], ["if", 0], ["temp", 0], ["count", 0], ["f", 0], ["0", 0], ["else", 0], ["f", 0], ["elif", 0], ["stack", 0], ["1", 0], ["res", 0], ["f", 0], ["if", 0], ["temp", 0], ["count", 0], ["t", 0], ["0", 0], ["else", 0], ["t", 0], ["else", 0], ["res", 0], ["t", 0], ["if", 0], ["temp", 0], ["f", 0], ["else", 0], ["f", 0], ["stack", 0], ["1", 0], ["res", 0], ["return", 0], ["true", 0], ["if", 0], ["stack", 0], ["1", 0], ["t", 0], ["else", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["def", 0], ["parse", 0], ["e", 0], ["str", 0], ["left", 0], ["right", 0], ["if", 0], ["right", 0], ["left", 0], ["1", 0], ["return", 0], ["e", 0], ["left", 0], ["t", 0], ["res", 0], ["e", 0], ["left", 0], ["only", 0], ["when", 0], ["the", 0], ["first", 0], ["char", 0], ["is", 0], ["ans", 0], ["assigned", 0], ["true", 0], ["level", 0], ["start", 0], ["0", 0], ["left", 0], ["2", 0], ["e", 0], ["left", 0], ["1", 0], ["must", 0], ["be", 0], ["so", 0], ["start", 0], ["from", 0], ["lo", 0], ["2", 0], ["to", 0], ["delimit", 0], ["sub", 0], ["expression", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["left", 0], ["2", 0], ["right", 0], ["if", 0], ["level", 0], ["0", 0], ["and", 0], ["e", 0], ["i", 0], ["in", 0], ["found", 0], ["a", 0], ["sub", 0], ["expression", 0], ["cur", 0], ["parse", 0], ["e", 0], ["start", 0], ["i", 0], ["start", 0], ["i", 0], ["1", 0], ["if", 0], ["e", 0], ["left", 0], ["res", 0], ["cur", 0], ["elif", 0], ["e", 0], ["left", 0], ["res", 0], ["cur", 0], ["else", 0], ["e", 0], ["lo", 0], ["is", 0], ["res", 0], ["not", 0], ["cur", 0], ["if", 0], ["e", 0], ["i", 0], ["level", 0], ["level", 0], ["1", 0], ["elif", 0], ["e", 0], ["i", 0], ["level", 0], ["level", 0], ["1", 0], ["return", 0], ["res", 0], ["return", 0], ["parse", 0], ["expression", 0], ["0", 0], ["len", 0], ["expression", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["operations", 0], ["any", 0], ["all", 0], ["lambda", 0], ["x", 0], ["not", 0], ["x", 0], ["0", 0], ["def", 0], ["gettokens", 0], ["expression", 0], ["depth", 0], ["0", 0], ["token", 0], ["for", 0], ["s", 0], ["in", 0], ["expression", 0], ["if", 0], ["s", 0], ["and", 0], ["depth", 0], ["0", 0], ["yield", 0], ["token", 0], ["token", 0], ["continue", 0], ["if", 0], ["s", 0], ["depth", 0], ["1", 0], ["elif", 0], ["s", 0], ["depth", 0], ["1", 0], ["token", 0], ["s", 0], ["yield", 0], ["token", 0], ["def", 0], ["evaluate", 0], ["expression", 0], ["if", 0], ["expression", 0], ["t", 0], ["return", 0], ["true", 0], ["elif", 0], ["expression", 0], ["f", 0], ["return", 0], ["false", 0], ["operator", 0], ["operations", 0], ["expression", 0], ["0", 0], ["values", 0], ["evaluate", 0], ["token", 0], ["for", 0], ["token", 0], ["in", 0], ["gettokens", 0], ["expression", 0], ["2", 0], ["1", 0], ["return", 0], ["operator", 0], ["values", 0], ["return", 0], ["evaluate", 0], ["expression", 0], ["class", 0], ["solution", 0], ["https", 0], ["www", 0], ["youtube", 0], ["com", 0], ["watch", 0], ["v", 0], ["y2kfbqj", 0], ["j08", 0], ["list", 0], ["pllummzmtgvk45aiaeeeggc6xqm6jrlxl4", 0], ["index", 0], ["1", 0], ["def", 0], ["parseboolexpr1", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["def", 0], ["helper", 0], ["queue", 0], ["res", 0], ["true", 0], ["while", 0], ["queue", 0], ["c", 0], ["queue", 0], ["pop", 0], ["print", 0], ["c", 0], ["0", 0], ["format", 0], ["c", 0], ["if", 0], ["c", 0], ["in", 0], ["t", 0], ["f", 0], ["return", 0], ["true", 0], ["if", 0], ["c", 0], ["t", 0], ["else", 0], ["false", 0], ["if", 0], ["c", 0], ["remove", 0], ["queue", 0], ["pop", 0], ["print", 0], ["queue", 0], ["0", 0], ["format", 0], ["queue", 0], ["res", 0], ["not", 0], ["helper", 0], ["queue", 0], ["remove", 0], ["queue", 0], ["pop", 0], ["return", 0], ["res", 0], ["elif", 0], ["c", 0], ["in", 0], ["for", 0], ["true", 0], ["exp1", 0], ["exp2", 0], ["for", 0], ["false", 0], ["exp1", 0], ["exp2", 0], ["isand", 0], ["true", 0], ["if", 0], ["c", 0], ["else", 0], ["false", 0], ["res", 0], ["isand", 0], ["remove", 0], ["queue", 0], ["pop", 0], ["while", 0], ["true", 0], ["if", 0], ["isand", 0], ["res", 0], ["helper", 0], ["queue", 0], ["else", 0], ["res", 0], ["helper", 0], ["queue", 0], ["ch", 0], ["can", 0], ["be", 0], ["or", 0], ["e", 0], ["g", 0], ["t", 0], ["f", 0], ["t", 0], ["t", 0], ["print", 0], ["isand", 0], ["0", 0], ["queue", 0], ["1", 0], ["res", 0], ["2", 0], ["format", 0], ["isand", 0], ["queue", 0], ["res", 0], ["ch", 0], ["queue", 0], ["pop", 0], ["print", 0], ["after", 0], ["pop", 0], ["char", 0], ["char", 0], ["0", 0], ["queue", 0], ["1", 0], ["format", 0], ["ch", 0], ["queue", 0], ["if", 0], ["ch", 0], ["break", 0], ["return", 0], ["res", 0], ["queue", 0], ["collections", 0], ["deque", 0], ["for", 0], ["c", 0], ["in", 0], ["expression", 0], ["queue", 0], ["appendleft", 0], ["c", 0], ["return", 0], ["helper", 0], ["queue", 0], ["slow", 0], ["time", 0], ["o", 0], ["n", 0], ["2", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["j", 0], ["is", 0], ["inclusive", 0], ["def", 0], ["helper", 0], ["exp", 0], ["i", 0], ["j", 0], ["if", 0], ["i", 0], ["j", 0], ["return", 0], ["exp", 0], ["i", 0], ["t", 0], ["op", 0], ["exp", 0], ["i", 0], ["res", 0], ["op", 0], ["k", 0], ["starts", 0], ["from", 0], ["k", 0], ["count", 0], ["prev", 0], ["i", 0], ["1", 0], ["0", 0], ["i", 0], ["2", 0], ["print", 0], ["i", 0], ["0", 0], ["j", 0], ["1", 0], ["format", 0], ["i", 0], ["j", 0], ["while", 0], ["k", 0], ["j", 0], ["c", 0], ["exp", 0], ["k", 0], ["if", 0], ["c", 0], ["count", 0], ["1", 0], ["elif", 0], ["c", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["1", 0], ["and", 0], ["c", 0], ["or", 0], ["not", 0], ["count", 0], ["print", 0], ["k", 0], ["0", 0], ["c", 0], ["1", 0], ["count", 0], ["2", 0], ["i1", 0], ["3", 0], ["j1", 0], ["4", 0], ["format", 0], ["k", 0], ["c", 0], ["count", 0], ["i", 0], ["2", 0], ["k", 0], ["1", 0], ["val", 0], ["helper", 0], ["exp", 0], ["prev", 0], ["k", 0], ["1", 0], ["prev", 0], ["k", 0], ["1", 0], ["if", 0], ["op", 0], ["res", 0], ["not", 0], ["val", 0], ["elif", 0], ["op", 0], ["res", 0], ["val", 0], ["elif", 0], ["op", 0], ["res", 0], ["val", 0], ["k", 0], ["1", 0], ["print", 0], ["i", 0], ["0", 0], ["j", 0], ["1", 0], ["res", 0], ["2", 0], ["format", 0], ["i", 0], ["j", 0], ["res", 0], ["return", 0], ["res", 0], ["return", 0], ["helper", 0], ["expression", 0], ["0", 0], ["len", 0], ["expression", 0], ["1", 0], ["if", 0], ["len", 0], ["expression", 0], ["1", 0], ["return", 0], ["expression", 0], ["t", 0], ["if", 0], ["expression", 0], ["0", 0], ["return", 0], ["not", 0], ["self", 0], ["parseboolexpr", 0], ["expression", 0], ["2", 0], ["1", 0], ["op", 0], ["stack", 0], ["i", 0], ["expression", 0], ["0", 0], ["2", 0], ["while", 0], ["i", 0], ["len", 0], ["expression", 0], ["1", 0], ["if", 0], ["expression", 0], ["i", 0], ["t", 0], ["or", 0], ["expression", 0], ["i", 0], ["f", 0], ["stack", 0], ["append", 0], ["self", 0], ["parseboolexpr", 0], ["expression", 0], ["i", 0], ["i", 0], ["1", 0], ["elif", 0], ["expression", 0], ["i", 0], ["in", 0], ["j", 0], ["count", 0], ["i", 0], ["2", 0], ["1", 0], ["while", 0], ["j", 0], ["len", 0], ["expression", 0], ["1", 0], ["if", 0], ["expression", 0], ["j", 0], ["count", 0], ["1", 0], ["elif", 0], ["expression", 0], ["j", 0], ["count", 0], ["1", 0], ["if", 0], ["not", 0], ["count", 0], ["stack", 0], ["append", 0], ["self", 0], ["parseboolexpr", 0], ["expression", 0], ["i", 0], ["j", 0], ["1", 0], ["i", 0], ["j", 0], ["1", 0], ["break", 0], ["j", 0], ["1", 0], ["else", 0], ["i", 0], ["1", 0], ["if", 0], ["op", 0], ["return", 0], ["all", 0], ["val", 0], ["for", 0], ["val", 0], ["in", 0], ["stack", 0], ["return", 0], ["any", 0], ["val", 0], ["for", 0], ["val", 0], ["in", 0], ["stack", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["expression", 0], ["list", 0], ["expression", 0], ["def", 0], ["replace", 0], ["start", 0], ["int", 0], ["logical", 0], ["str", 0], ["braket", 0], ["1", 0], ["idxs", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["len", 0], ["expression", 0], ["if", 0], ["expression", 0], ["i", 0], ["braket", 0], ["1", 0], ["elif", 0], ["expression", 0], ["i", 0], ["braket", 0], ["1", 0], ["elif", 0], ["braket", 0], ["1", 0], ["and", 0], ["expression", 0], ["i", 0], ["idxs", 0], ["append", 0], ["i", 0], ["elif", 0], ["braket", 0], ["0", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["idxs", 0], ["expression", 0], ["i", 0], ["logical", 0], ["for", 0], ["idx", 0], ["char", 0], ["in", 0], ["enumerate", 0], ["expression", 0], ["if", 0], ["char", 0], ["expression", 0], ["idx", 0], ["replace", 0], ["idx", 0], ["2", 0], ["or", 0], ["elif", 0], ["char", 0], ["expression", 0], ["idx", 0], ["replace", 0], ["idx", 0], ["2", 0], ["and", 0], ["expr", 0], ["join", 0], ["expression", 0], ["replace", 0], ["t", 0], ["true", 0], ["replace", 0], ["f", 0], ["false", 0], ["replace", 0], ["not", 0], ["return", 0], ["eval", 0], ["expr", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["ex", 0], ["str", 0], ["bool", 0], ["def", 0], ["recur", 0], ["i", 0], ["if", 0], ["ex", 0], ["i", 0], ["in", 0], ["t", 0], ["f", 0], ["return", 0], ["true", 0], ["if", 0], ["ex", 0], ["i", 0], ["t", 0], ["else", 0], ["false", 0], ["i", 0], ["1", 0], ["op", 0], ["ex", 0], ["i", 0], ["i", 0], ["stack", 0], ["i", 0], ["2", 0], ["while", 0], ["ex", 0], ["i", 0], ["if", 0], ["ex", 0], ["i", 0], ["i", 0], ["1", 0], ["continue", 0], ["res", 0], ["i", 0], ["recur", 0], ["i", 0], ["stack", 0], ["append", 0], ["res", 0], ["if", 0], ["op", 0], ["return", 0], ["all", 0], ["stack", 0], ["i", 0], ["1", 0], ["elif", 0], ["op", 0], ["return", 0], ["any", 0], ["stack", 0], ["i", 0], ["1", 0], ["elif", 0], ["op", 0], ["return", 0], ["not", 0], ["stack", 0], ["0", 0], ["i", 0], ["1", 0], ["return", 0], ["res", 0], ["i", 0], ["1", 0], ["return", 0], ["recur", 0], ["0", 0], ["0", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["ops", 0], ["def", 0], ["parse", 0], ["start", 0], ["if", 0], ["expression", 0], ["start", 0], ["f", 0], ["return", 0], ["false", 0], ["start", 0], ["1", 0], ["if", 0], ["expression", 0], ["start", 0], ["t", 0], ["return", 0], ["true", 0], ["start", 0], ["1", 0], ["if", 0], ["expression", 0], ["start", 0], ["in", 0], ["ops", 0], ["new", 0], ["start", 0], ["start", 0], ["2", 0], ["vals", 0], ["set", 0], ["while", 0], ["new", 0], ["start", 0], ["len", 0], ["expression", 0], ["val", 0], ["new", 0], ["start", 0], ["parse", 0], ["new", 0], ["start", 0], ["vals", 0], ["add", 0], ["val", 0], ["if", 0], ["expression", 0], ["new", 0], ["start", 0], ["new", 0], ["start", 0], ["1", 0], ["break", 0], ["assert", 0], ["expression", 0], ["new", 0], ["start", 0], ["new", 0], ["start", 0], ["1", 0], ["if", 0], ["expression", 0], ["start", 0], ["assert", 0], ["len", 0], ["vals", 0], ["1", 0], ["return", 0], ["not", 0], ["list", 0], ["vals", 0], ["0", 0], ["new", 0], ["start", 0], ["if", 0], ["expression", 0], ["start", 0], ["return", 0], ["all", 0], ["vals", 0], ["new", 0], ["start", 0], ["return", 0], ["any", 0], ["vals", 0], ["new", 0], ["start", 0], ["return", 0], ["parse", 0], ["0", 0], ["0", 0], ["import", 0], ["operator", 0], ["from", 0], ["typing", 0], ["import", 0], ["list", 0], ["class", 0], ["solution", 0], ["staticmethod", 0], ["def", 0], ["split", 0], ["by", 0], ["comma", 0], ["expression", 0], ["str", 0], ["list", 0], ["str", 0], ["start", 0], ["0", 0], ["bracket", 0], ["balance", 0], ["0", 0], ["answer", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["expression", 0], ["if", 0], ["expression", 0], ["i", 0], ["bracket", 0], ["balance", 0], ["1", 0], ["if", 0], ["expression", 0], ["i", 0], ["bracket", 0], ["balance", 0], ["1", 0], ["if", 0], ["expression", 0], ["i", 0], ["and", 0], ["not", 0], ["bracket", 0], ["balance", 0], ["answer", 0], ["append", 0], ["expression", 0], ["start", 0], ["i", 0], ["1", 0], ["start", 0], ["i", 0], ["1", 0], ["answer", 0], ["append", 0], ["expression", 0], ["start", 0], ["return", 0], ["answer", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["if", 0], ["expression", 0], ["startswith", 0], ["t", 0], ["return", 0], ["true", 0], ["if", 0], ["expression", 0], ["startswith", 0], ["f", 0], ["return", 0], ["false", 0], ["if", 0], ["expression", 0], ["startswith", 0], ["return", 0], ["not", 0], ["self", 0], ["parseboolexpr", 0], ["expression", 0], ["2", 0], ["1", 0], ["if", 0], ["expression", 0], ["startswith", 0], ["return", 0], ["any", 0], ["map", 0], ["self", 0], ["parseboolexpr", 0], ["self", 0], ["split", 0], ["by", 0], ["comma", 0], ["expression", 0], ["2", 0], ["1", 0], ["else", 0], ["return", 0], ["all", 0], ["map", 0], ["self", 0], ["parseboolexpr", 0], ["self", 0], ["split", 0], ["by", 0], ["comma", 0], ["expression", 0], ["2", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["parseboolexpr", 0], ["self", 0], ["expression", 0], ["str", 0], ["bool", 0], ["stack", 0], ["for", 0], ["c", 0], ["in", 0], ["expression", 0], ["if", 0], ["c", 0], ["not", 0], ["in", 0], ["stack", 0], ["append", 0], ["true", 0], ["if", 0], ["c", 0], ["t", 0], ["else", 0], ["false", 0], ["if", 0], ["c", 0], ["f", 0], ["else", 0], ["c", 0], ["elif", 0], ["c", 0], ["seen", 0], ["set", 0], ["capturing", 0], ["only", 0], ["distinct", 0], ["values", 0], ["i", 0], ["e", 0], ["single", 0], ["f", 0], ["and", 0], ["t", 0], ["while", 0], ["stack", 0], ["1", 0], ["seen", 0], ["add", 0], ["stack", 0], ["pop", 0], ["stack", 0], ["pop", 0], ["removing", 0], ["operator", 0], ["stack", 0], ["pop", 0], ["stack", 0], ["append", 0], ["all", 0], ["seen", 0], ["if", 0], ["operator", 0], ["else", 0], ["any", 0], ["seen", 0], ["if", 0], ["operator", 0], ["else", 0], ["not", 0], ["seen", 0], ["pop", 0], ["return", 0], ["stack", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nMirko found a collection of $N$ toy tanks dating back to the Second World War on his grandfather’s attic. He promptly called his friend Slavko to play with him. They made a battlefield – a wooden board consisting of squares in $N$ rows and $N$ columns.\n\nEach tank can be moved to one of the four neighbouring squares in a single move. A tank can shoot at any square in the same row and column. The tank is said to be guarding the row and column it is in.\n\nAdditionally, no two tanks can be in the same square at any time.\n\nAfter many hours of play and two previous attempts, Mirko’s mom yelled at them to come down for lunch again, and they decided to rearrange the tanks so that each tank guards a different row and column (meaning also that each row and column contains only one tank).\n\nHowever, they want to do this using the minimum number of moves.\n\nWrite a program that finds the minimum number of moves required to rearrange the tanks so that each row and each column contains a single tank, and one such shortest sequence of moves.\n\n-----Input-----\nThe first line of input contains the integer $N$ ($3 \\le N \\le 500$).\n\nEach of the following $N$ lines contains two integers $R$ and $C$ ($1 \\le R, S \\le N$), the row and column of a single tank at the moment of mom’s call. No two tanks are on the same square.\n\nRows and columns are marked $1$ through $N$, top-down and left-to-right.\n\n-----Output-----\nOutput the minimum number of moves (call this number $K$) on the first line.\n\nEach of the next $K$ lines should contain the tank being moved and the direction it is moved in, separated by a single space.\n\nTanks are numbered $1$ through $N$, in the order in which they are given in the input.\n\nThe direction can be one of four uppercase letters: ‘L’ for left, ‘R’ for right, ‘U’ for up and ‘D’ for down.\n\nIf there are multiple optimal solutions, any one will be accepted.\n\n-----Examples-----\nSample Input 1:\n5\n1 1\n1 2\n1 3\n1 4\n1 5\nSample Output 1:\n10\n1 D\n2 D\n3 D\n4 D\n1 D\n2 D\n3 D\n1 D\n2 D\n1 D\n\nSample Input 2:\n5\n2 3\n3 2\n3 3\n3 4\n4 3\nSample Output 2:\n8\n1 R\n1 R\n2 U\n2 U\n4 D\n4 D\n5 L\n5 L\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8925"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8925", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["mirko", 3], ["found", 2], ["a", 1], ["collection", 1], ["of", 1], ["n", 1], ["toy", 1], ["tanks", 1], ["dating", 1], ["back", 1], ["to", 1], ["the", 1], ["second", 1], ["world", 1], ["war", 1], ["on", 1], ["his", 1], ["grandfather’s", 1], ["attic", 1], ["he", 1], ["promptly", 1], ["called", 1], ["his", 1], ["friend", 1], ["slavko", 1], ["to", 1], ["play", 1], ["with", 1], ["him", 1], ["they", 1], ["made", 1], ["a", 1], ["battlefield", 1], ["–", 1], ["a", 1], ["wooden", 1], ["board", 1], ["consisting", 1], ["of", 1], ["squares", 1], ["in", 1], ["n", 1], ["rows", 1], ["and", 1], ["n", 1], ["columns", 1], ["each", 1], ["tank", 1], ["can", 1], ["be", 1], ["moved", 1], ["to", 1], ["one", 1], ["of", 1], ["the", 1], ["four", 1], ["neighbouring", 1], ["squares", 1], ["in", 1], ["a", 1], ["single", 1], ["move", 1], ["a", 1], ["tank", 1], ["can", 1], ["shoot", 1], ["at", 1], ["any", 1], ["square", 1], ["in", 1], ["the", 1], ["same", 1], ["row", 1], ["and", 1], ["column", 1], ["the", 1], ["tank", 1], ["is", 1], ["said", 1], ["to", 1], ["be", 1], ["guarding", 1], ["the", 1], ["row", 1], ["and", 1], ["column", 1], ["it", 1], ["is", 1], ["in", 1], ["additionally", 1], ["no", 1], ["two", 1], ["tanks", 1], ["can", 1], ["be", 1], ["in", 1], ["the", 1], ["same", 1], ["square", 1], ["at", 1], ["any", 1], ["time", 1], ["after", 1], ["many", 1], ["hours", 1], ["of", 1], ["play", 1], ["and", 1], ["two", 1], ["previous", 1], ["attempts", 1], ["mirko’s", 1], ["mom", 1], ["yelled", 1], ["at", 1], ["them", 1], ["to", 1], ["come", 1], ["down", 1], ["for", 1], ["lunch", 1], ["again", 1], ["and", 1], ["they", 1], ["decided", 1], ["to", 1], ["rearrange", 1], ["the", 1], ["tanks", 1], ["so", 1], ["that", 1], ["each", 1], ["tank", 1], ["guards", 1], ["a", 1], ["different", 1], ["row", 1], ["and", 1], ["column", 1], ["meaning", 1], ["also", 1], ["that", 1], ["each", 1], ["row", 1], ["and", 1], ["column", 1], ["contains", 1], ["only", 1], ["one", 1], ["tank", 1], ["however", 1], ["they", 1], ["want", 1], ["to", 1], ["do", 1], ["this", 1], ["using", 1], ["the", 1], ["minimum", 1], ["number", 1], ["of", 1], ["moves", 1], ["write", 1], ["a", 1], ["program", 1], ["that", 1], ["finds", 1], ["the", 1], ["minimum", 1], ["number", 1], ["of", 1], ["moves", 1], ["required", 1], ["to", 1], ["rearrange", 1], ["the", 1], ["tanks", 1], ["so", 1], ["that", 1], ["each", 1], ["row", 1], ["and", 1], ["each", 1], ["column", 0], ["contains", 0], ["a", 0], ["single", 0], ["tank", 0], ["and", 0], ["one", 0], ["such", 0], ["shortest", 0], ["sequence", 0], ["of", 0], ["moves", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["the", 1], ["integer", 1], ["n", 1], ["3", 1], ["le", 1], ["n", 1], ["le", 1], ["500", 1], ["each", 1], ["of", 1], ["the", 1], ["following", 1], ["n", 1], ["lines", 1], ["contains", 1], ["two", 1], ["integers", 1], ["r", 1], ["and", 1], ["c", 1], ["1", 1], ["le", 1], ["r", 1], ["s", 1], ["le", 1], ["n", 1], ["the", 1], ["row", 1], ["and", 1], ["column", 1], ["of", 1], ["a", 1], ["single", 1], ["tank", 1], ["at", 1], ["the", 1], ["moment", 1], ["of", 1], ["mom’s", 1], ["call", 1], ["no", 1], ["two", 1], ["tanks", 1], ["are", 1], ["on", 1], ["the", 1], ["same", 1], ["square", 1], ["rows", 1], ["and", 1], ["columns", 1], ["are", 0], ["marked", 0], ["1", 0], ["through", 0], ["n", 0], ["top", 0], ["down", 0], ["and", 0], ["left", 0], ["to", 0], ["right", 0], ["output", 0], ["output", 1], ["the", 1], ["minimum", 1], ["number", 1], ["of", 1], ["moves", 1], ["call", 1], ["this", 1], ["number", 1], ["k", 1], ["on", 1], ["the", 1], ["first", 1], ["line", 1], ["each", 1], ["of", 1], ["the", 1], ["next", 1], ["k", 1], ["lines", 1], ["should", 1], ["contain", 1], ["the", 1], ["tank", 1], ["being", 1], ["moved", 1], ["and", 1], ["the", 1], ["direction", 1], ["it", 1], ["is", 1], ["moved", 1], ["in", 1], ["separated", 1], ["by", 1], ["a", 1], ["single", 1], ["space", 1], ["tanks", 1], ["are", 1], ["numbered", 1], ["1", 1], ["through", 1], ["n", 2], ["in", 1], ["the", 1], ["order", 1], ["in", 1], ["which", 1], ["they", 1], ["are", 1], ["given", 1], ["in", 1], ["the", 1], ["input", 1], ["the", 1], ["direction", 1], ["can", 1], ["be", 1], ["one", 1], ["of", 1], ["four", 1], ["uppercase", 1], ["letters", 1], ["‘l’", 1], ["for", 1], ["left", 1], ["‘r’", 1], ["for", 1], ["right", 1], ["‘u’", 1], ["for", 1], ["up", 1], ["and", 1], ["‘d’", 1], ["for", 1], ["down", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["optimal", 0], ["solutions", 0], ["any", 0], ["one", 0], ["will", 0], ["be", 0], ["accepted", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["5", 0], ["1", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["1", 0], ["4", 0], ["1", 0], ["5", 0], ["sample", 0], ["output", 0], ["1", 0], ["10", 1], ["1", 35], ["d", 34], ["2", 1], ["d", 1], ["3", 1], ["d", 1], ["4", 1], ["d", 12], ["1", 0], ["d", 0], ["2", 0], ["d", 0], ["3", 0], ["d", 0], ["1", 0], ["d", 0], ["2", 0], ["d", 0], ["1", 0], ["d", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["2", 0], ["3", 0], ["3", 0], ["2", 0], ["3", 0], ["3", 0], ["3", 0], ["4", 0], ["4", 0], ["3", 0], ["sample", 0], ["output", 0], ["2", 0], ["8", 0], ["1", 0], ["r", 0], ["1", 0], ["r", 0], ["2", 0], ["u", 0], ["2", 0], ["u", 0], ["4", 0], ["d", 0], ["4", 0], ["d", 0], ["5", 0], ["l", 0], ["5", 0], ["l", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7647058823529411, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7540579996704562, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8535469107551488, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8508771929824561, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7576470588235295, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7537254901960784, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8535469107551488, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8508771929824561, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nOne day, liouzhou_101 got a chat record of Freda and Rainbow. Out of curiosity, he wanted to know which sentences were said by Freda, and which were said by Rainbow. According to his experience, he thought that Freda always said \"lala.\" at the end of her sentences, while Rainbow always said \"miao.\" at the beginning of his sentences. For each sentence in the chat record, help liouzhou_101 find whose sentence it is. \n\n\n-----Input-----\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 10), number of sentences in the chat record. Each of the next n lines contains a sentence. A sentence is a string that contains only Latin letters (A-Z, a-z), underline (_), comma (,), point (.) and space ( ). Its length doesn’t exceed 100.\n\n\n-----Output-----\n\nFor each sentence, output \"Freda's\" if the sentence was said by Freda, \"Rainbow's\" if the sentence was said by Rainbow, or \"OMG>.< I don't know!\" if liouzhou_101 can’t recognize whose sentence it is. He can’t recognize a sentence if it begins with \"miao.\" and ends with \"lala.\", or satisfies neither of the conditions. \n\n\n-----Examples-----\nInput\n5\nI will go to play with you lala.\nwow, welcome.\nmiao.lala.\nmiao.\nmiao .\n\nOutput\nFreda's\nOMG>.< I don't know!\nOMG>.< I don't know!\nRainbow's\nOMG>.< I don't know!\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["for i in range(int(input())):\n\ts = input()\n\tif s.endswith('lala.') and not s.startswith('miao.'):\n\t\tprint(\"Freda's\")\n\telif s.startswith('miao.') and not s.endswith('lala.'):\n\t\tprint(\"Rainbow's\")\n\telse:\n\t\tprint(\"OMG>.< I don't know!\")\n", "n = int(input())\n\nfor i in range(n):\n\ts = input()\n\n\tif s[len(s) - 5: len(s)] == 'lala.' and s[: 5] == 'miao.':\n\t\tprint(\"OMG>.< I don't know!\")\n\telif s[len(s) - 5: len(s)] == 'lala.':\n\t\tprint(\"Freda's\")\n\telif s[: 5] == 'miao.':\n\t\tprint(\"Rainbow's\")\n\telse:\n\t\tprint(\"OMG>.< I don't know!\")\n", "n = int(input())\nfor i in range(n):\n\tS = input()\n\tflag1 = len(S) >= 5 and S[:5] == \"miao.\"\n\tflag2 = len(S) >= 5 and S[-5:] == \"lala.\"\n\tif flag1 and flag2:\n\t\tprint(\"OMG>.< I don't know!\")\n\telif flag2:\n\t\tprint(\"Freda's\")\n\telif flag1:\n\t\tprint(\"Rainbow's\")\n\telse:\n\t\tprint(\"OMG>.< I don't know!\")\n", "n= int(input())\nans=[]\n\nfor i in range(n):\n\ts=input()\n\ts.lower\n\tif(s[-5:]==\"lala.\" and s[0:5]==\"miao.\"):\n\t\tans.append(\"OMG>.< I don't know!\")\n\t\tcontinue\n\telif(s[-5:]==\"lala.\"):\n\t\tans.append(\"Freda's\")\n\t\tcontinue\n\telif(s[0:5]==\"miao.\"):\n\t\tans.append(\"Rainbow's\")\n\t\tcontinue\n\telse:\n\t\tans.append(\"OMG>.< I don't know!\")\n\nfor i in range(n):\n\tprint(ans[i])\n", "n = int(input())\nfor i in range(n):\n\ta = input()\n\tif a[:5] == \"miao.\" and a[len(a)-5:] == \"lala.\":\n\t\tprint(\"OMG>.< I don't know!\")\n\telif a[len(a)-5:] == \"lala.\":\n\t\tprint(\"Freda's\")\n\telif a[:5] == \"miao.\":\n\t\tprint(\"Rainbow's\")\n\telse:\n\t\tprint(\"OMG>.< I don't know!\")\n", "import re\nn = int( input() )\nr1 = re.compile('^miao\\..*lala\\.$')\nr2 = re.compile('lala\\.$')\nr3 = re.compile('^miao\\.')\n\nfor i in range( 0, n ):\n\ts = str(input())\n\t#res1 = r1.findall( s ) )\n\t#res2 = r2.findall( s ) )\n\tif len( r1.findall( s ) ) > 0:\n\t\tprint( 'OMG>.< I don\\'t know!' )\n\telif len( r2.findall( s ) ) > 0 :\n\t\tprint( 'Freda\\'s' )\n\telif len( r3.findall( s ) ) > 0 :\n\t\tprint ('Rainbow\\'s')\n\telse:\n\t\tprint( 'OMG>.< I don\\'t know!' )\n", "t=int(input())\nfor x in range(t):\n\tl=input()\n\tflag=3\n\tif(l.startswith('miao.')==True):\n\t\tflag=2\n\tif(l.endswith('lala.')==True):\n\t\tflag=1\n\tif(l.startswith('miao.')==True) and (l.endswith('lala.')==True):\n\t\tflag=3\n\tif(flag==3):\n\t\tprint(\"OMG>.< I don't know!\")\n\tif(flag==2):\n\t\tprint(\"Rainbow's\")\n\tif(flag==1):\n\t\tprint(\"Freda's\")\n", "##A\ndef main():\n\tn=int(input())\n\tf,r=0,0\n\tSr=\"Rainbow's\"\n\tSf=\"Freda's\"\n\tSu=\"OMG>.< I don't know!\"\n\tfor _  in range(n):\n\t\ts=str(input())\n\t\tif(s.find('miao.')==0):\n\t\t\tr=1\n\t\telse:\n\t\t\tr=0\n\t\tif (s.rfind('lala.')==len(s)-5):\n\t\t\tf=1\n\t\telse:\n\t\t\tf=0\n\t\tif (r and not f):\n\t\t\tprint(Sr)\n\t\telif (f and not r):\n\t\t\tprint(Sf)\n\t\telif(r and f) or (not f and not r):\n\t\t\tprint(Su)\n\t\nmain()\n", "n = int(input())\nfor i in range(n):\n\ts = input()\n\tans = 0\n\tif s[-5:] == 'lala.':\n\t\tans += 1\n\tif s[:5] == 'miao.':\n\t\tans += 2\n\tif ans == 1:\n\t\tprint(\"Freda's\")\n\telif ans == 2:\n\t\tprint(\"Rainbow's\")\n\telse:\n\t\tprint (\"OMG>.< I don't know!\")\n\n", "n = int(input())\nfor i in range (0, n):\n\ts = input()\n\tns = len(s)\n\tif ns < 5:\n\t\tprint (\"OMG>.< I don't know!\")\n\telse:\n\t\tif s[:5] == \"miao.\" and s[-5:] == \"lala.\":\n\t\t\tprint (\"OMG>.< I don't know!\")\n\t\telse:\n\t\t\tif s[:5] == \"miao.\":\n\t\t\t\tprint (\"Rainbow's\")\n\t\t\telse:\n\t\t\t\tif s[-5:] == \"lala.\":\n\t\t\t\t\tprint (\"Freda's\")\n\t\t\t\telse:\n\t\t\t\t\tprint (\"OMG>.< I don't know!\")\n", "n = int(input())\nfor i in range(n):\n\ts = input()\n\tif s.startswith('miao.') and not s.endswith('lala.'):\n\t\tprint(\"Rainbow's\")\n\telif s.endswith('lala.') and not s.startswith('miao.'):\n\t\tprint(\"Freda's\")\n\telse:\n\t\tprint(\"OMG>.< I don't know!\")\n", "n = int(input())\nfor i in range(n):\n\tsign = False\n\tsign1 = False\n\ts = input()\n\tif s[:5] == 'miao.':\n\t\tsign1 = True\n\tif s[-5:] == 'lala.':\n\t\tsign = True\n\tif sign and sign1 or sign == False and sign1 == False:\n\t\tprint(\"OMG>.< I don't know!\")\n\telif sign:\n\t\tprint(\"Freda's\")\n\telse:\n\t\tprint(\"Rainbow's\")\n", "n = int(input())\nfor i in range(n):\n\tline = input()\n\tresult = 0\n\tif len(line) >= 5 and line[0:5] == 'miao.':\n\t\tresult += 1\n\tif len(line) >= 5 and line[-5:] == 'lala.':\n\t\tresult += 2\n\tif result == 2: print(\"Freda's\")\n\telif result == 1: print(\"Rainbow's\")\n\telse: print(\"OMG>.< I don't know!\")\n", "def main():\n\tn = int(input())\n\tfor i in range(n):\n\t\ts = input()\n\t\tif s.endswith(\"lala.\") and s.endswith(\"miao.\", 0, 5):\n\t\t\tprint(\"OMG>.< I don't know!\")\n\t\telif s.endswith(\"lala.\"):\n\t\t\tprint(\"Freda's\")\n\t\telif s.endswith(\"miao.\", 0, 5):\n\t\t\tprint(\"Rainbow's\")\n\t\telse:\n\t\t\tprint(\"OMG>.< I don't know!\")\n\ndef __starting_point(): main()\n\n__starting_point()\n", "import sys\nfor line in sys.stdin:\n\tline_number = int(line)\n\tfor line in range(line_number):\n\t\ts = input()\n\t\tFreda, Rainbow = False, False\n\t\tif s[-5:] == 'lala.':\n\t\t\tFreda = True\n\t\tif s[:5] == 'miao.':\n\t\t\tRainbow = True\n\t\tif Freda == True and Rainbow == True or Freda == False and Rainbow == False:\n\t\t\tprint(\"OMG>.< I don't know!\")\n\t\telif Freda:\n\t\t\tprint(\"Freda's\")\n\t\telif Rainbow:\n\t\t\tprint(\"Rainbow's\")\n\t\telse:\n\t\t\tpass\n\n", "n = int(input())\nfor i in range(n):\n\tx = input()\n\tf = x.endswith('lala.')\n\tr = x.startswith('miao.')\n\tif (f and r) or not (f or r):\n\t\tprint(\"OMG>.< I don't know!\")\n\telif f:\n\t\tprint(\"Freda's\")\n\telse:\n\t\tprint(\"Rainbow's\")\n", "import math\nimport re\nfrom fractions import Fraction\nfrom collections import Counter\n\nclass Task:\n\tsentences = []\n\tanswer = []\n\t\n\tdef __init__(self):\n\t\tself.sentences = ['' for _ in range(int(input()))]\n\t\tfor i in range(len(self.sentences)):\n\t\t\tself.sentences[i] = input()\n\n\tdef solve(self):\n\t\tsentences = self.sentences\n\t\tfor current in sentences:\n\t\t\tmatcherFirst = re.search('^miao\\.', current) \n\t\t\tmatcherSecond = re.search('lala\\.$', current)\n\t\t\tif matcherFirst != None and matcherSecond == None:\n\t\t\t\tself.answer += [\"Rainbow's\"]\n\t\t\t\tcontinue\n\t\t\tif matcherFirst == None and matcherSecond != None:\n\t\t\t\tself.answer += [\"Freda's\"]\n\t\t\t\tcontinue\n\t\t\tself.answer += [\"OMG>.< I don't know!\"]\n\n\tdef printAnswer(self):\n\t\tfor line in self.answer:\n\t\t\tprint(line)\n\ntask = Task()\ntask.solve()\ntask.printAnswer()\n", "n = int(input())\na = []\n\nfor x in range(n) : a.append(str(input()))\nfor x in range(n):\n\tif (a[x][-5:] == 'lala.' and a[x][:5] == 'miao.'): print('OMG>.< I don\\'t know!')\n\telif (a[x][-5:] == 'lala.'): print('Freda\\'s')\n\telif (a[x][:5] == 'miao.'): print('Rainbow\\'s')\n\telse: print('OMG>.< I don\\'t know!')\n", "import re\nFe = re.compile('.*lala\\.!')\nFeA = \"Freda's\"\nRa = re.compile('miao\\..*')\nRaA = \"Rainbow's\"\nNotSure = \"OMG>.< I don't know!\"\n\ndef __starting_point():\n\tN = int(input())\n\tfor times in range(N):\n\t\tinp = input()\n\t\tinp = inp.strip('\\n') + '!'\n\n\t\tf1 = Fe.match(inp) != None\n\t\tf2 = Ra.match(inp) != None\n\n\t\tif f1:\n\t\t\tif f2:\n\t\t\t\tprint(NotSure)\n\t\t\telse:\n\t\t\t\tprint(FeA)\n\t\telif f2:\n\t\t\tprint(RaA)\n\t\telse:\n\t\t\tprint(NotSure)\n\n\n__starting_point()\n", "f, r, unknow=\"Freda's\", \"Rainbow's\", \"OMG>.< I don't know!\"\nanswer=[]\nn=int(input())\nfor i in range(n):\n\ts=input()\n\tif s[0:5]==\"miao.\":\n\t\tif s[-5:]==\"lala.\": answer.append(unknow)\n\t\telse: answer.append(r)\n\telif s[-5:]==\"lala.\": answer.append(f)\n\telse: answer.append(unknow)\nfor i in answer: print(i)\n", "for _ in range(int(input())):\n\ts = input()\n\tprint(([\"OMG>.< I don't know!\", \"Freda's\", \"Rainbow's\", \"OMG>.< I don't know!\"][s.startswith(\"miao.\")\n\t\t* 2 + s.endswith(\"lala.\")]))\n", "n=int(input())\n\nfor i in range(0,n):\n\ts=input()\n\tif(s.startswith(\"miao.\") and not s.endswith(\"lala.\")):\n\t\tprint(\"Rainbow's\")\n\telif(s.endswith(\"lala.\") and not s.startswith(\"miao.\")):\n\t\tprint(\"Freda's\")\n\telse:\n\t\tprint(\"OMG>.< I don't know!\")\n", "3\n\nn = int(input())\nfor _ in range(n):\n\ts = input()\n\tif not (s.startswith('miao.') ^ s.endswith('lala.')):\n\t\tprint(\"OMG>.< I don't know!\")\n\telif s.startswith('miao.'):\n\t\tprint(\"Rainbow's\")\n\telse:\n\t\tprint(\"Freda's\")\n", "n = int(input())\nfor i in range(n):\n\tt = input()\n\ta = b = len(t) > 4\n\ta = a and t[:5] == 'miao.'\n\tb = b and t[-5:] == 'lala.'\n\tif a:\n\t\tif b: print('OMG>.< I don\\'t know!')\n\t\telse: print('Rainbow\\'s')\n\telse:\n\t\tif b: print('Freda\\'s')\n\t\telse: print('OMG>.< I don\\'t know!')\n", "n=int(input())\nfor i in range(n):\n\ts=input()\n\tf1=0\n\tf2=0\n\tif len(s)>=5 and s[-5:]=='lala.':\n\t\tf1=1\n\tif len(s)>=5 and s[:5]=='miao.':\n\t\tf2=1\n\tif (f1 and f2)or(f1==0 and f2==0):\n\t\tprint('OMG>.< I don\\'t know!')\n\telif f1==1 :\n\t\tprint('Freda\\'s')\n\telse :\n\t\tprint('Rainbow\\'s')\n"], "id": "id8364"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8364", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["one", 2], ["day", 2], ["liouzhou", 2], ["101", 2], ["got", 2], ["a", 2], ["chat", 2], ["record", 2], ["of", 2], ["freda", 2], ["and", 2], ["rainbow", 2], ["out", 2], ["of", 2], ["curiosity", 2], ["he", 2], ["wanted", 2], ["to", 2], ["know", 2], ["which", 2], ["sentences", 2], ["were", 2], ["said", 2], ["by", 2], ["freda", 2], ["and", 2], ["which", 2], ["were", 2], ["said", 2], ["by", 2], ["rainbow", 2], ["according", 2], ["to", 2], ["his", 2], ["experience", 2], ["he", 2], ["thought", 2], ["that", 2], ["freda", 2], ["always", 2], ["said", 2], ["lala", 2], ["at", 2], ["the", 2], ["end", 2], ["of", 2], ["her", 2], ["sentences", 2], ["while", 2], ["rainbow", 2], ["always", 2], ["said", 2], ["miao", 2], ["at", 2], ["the", 2], ["beginning", 2], ["of", 2], ["his", 2], ["sentences", 2], ["for", 2], ["each", 2], ["sentence", 2], ["in", 0], ["the", 0], ["chat", 0], ["record", 0], ["help", 0], ["liouzhou", 0], ["101", 0], ["find", 0], ["whose", 0], ["sentence", 0], ["it", 0], ["is", 0], ["input", 0], ["the", 9], ["first", 9], ["line", 2], ["of", 2], ["the", 2], ["input", 2], ["contains", 2], ["an", 2], ["integer", 2], ["n", 2], ["1", 2], ["≤", 2], ["n", 2], ["≤", 2], ["10", 2], ["number", 2], ["of", 2], ["sentences", 2], ["in", 2], ["the", 2], ["chat", 2], ["record", 2], ["each", 2], ["of", 2], ["the", 2], ["next", 2], ["n", 2], ["lines", 2], ["contains", 2], ["a", 2], ["sentence", 2], ["a", 2], ["sentence", 2], ["is", 2], ["a", 2], ["string", 2], ["that", 2], ["contains", 2], ["only", 2], ["latin", 2], ["letters", 2], ["a", 2], ["z", 2], ["a", 0], ["z", 0], ["underline", 0], ["comma", 0], ["point", 0], ["and", 0], ["space", 0], ["its", 0], ["length", 0], ["doesn’t", 0], ["exceed", 0], ["100", 0], ["output", 0], ["for", 2], ["each", 2], ["sentence", 2], ["output", 2], ["freda", 2], ["s", 2], ["if", 2], ["the", 2], ["sentence", 2], ["was", 2], ["said", 2], ["by", 2], ["freda", 2], ["rainbow", 2], ["s", 2], ["if", 2], ["the", 2], ["sentence", 2], ["was", 2], ["said", 2], ["by", 2], ["rainbow", 2], ["or", 2], ["omg", 2], ["i", 2], ["don", 2], ["t", 2], ["know", 2], ["if", 2], ["liouzhou", 2], ["101", 2], ["can’t", 2], ["recognize", 2], ["whose", 2], ["sentence", 2], ["it", 2], ["is", 2], ["he", 2], ["can’t", 2], ["recognize", 2], ["a", 2], ["sentence", 2], ["if", 2], ["it", 2], ["begins", 2], ["with", 0], ["miao", 0], ["and", 0], ["ends", 0], ["with", 0], ["lala", 0], ["or", 0], ["satisfies", 0], ["neither", 0], ["of", 0], ["the", 0], ["conditions", 0], ["examples", 0], ["input", 0], ["5", 0], ["i", 2], ["will", 2], ["go", 0], ["to", 0], ["play", 0], ["with", 0], ["you", 0], ["lala", 0], ["wow", 0], ["welcome", 0], ["miao", 0], ["lala", 0], ["miao", 0], ["miao", 0], ["output", 0], ["freda", 0], ["s", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["rainbow", 0], ["s", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6785714285714286, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3358134920634921, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.847457627118644, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4204331450094162, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6785714285714286, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3358134920634921, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.847457627118644, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4204331450094162, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["endswith", 0], ["lala", 0], ["and", 0], ["not", 0], ["s", 0], ["startswith", 0], ["miao", 0], ["print", 0], ["freda", 0], ["s", 0], ["elif", 0], ["s", 0], ["startswith", 0], ["miao", 0], ["and", 0], ["not", 0], ["s", 0], ["endswith", 0], ["lala", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["len", 0], ["s", 0], ["5", 0], ["len", 0], ["s", 0], ["lala", 0], ["and", 0], ["s", 0], ["5", 0], ["miao", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["elif", 0], ["s", 0], ["len", 0], ["s", 0], ["5", 0], ["len", 0], ["s", 0], ["lala", 0], ["print", 0], ["freda", 0], ["s", 0], ["elif", 0], ["s", 0], ["5", 0], ["miao", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["flag1", 0], ["len", 0], ["s", 0], ["5", 0], ["and", 0], ["s", 0], ["5", 0], ["miao", 0], ["flag2", 0], ["len", 0], ["s", 0], ["5", 0], ["and", 0], ["s", 0], ["5", 0], ["lala", 0], ["if", 0], ["flag1", 0], ["and", 0], ["flag2", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["elif", 0], ["flag2", 0], ["print", 0], ["freda", 0], ["s", 0], ["elif", 0], ["flag1", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["s", 0], ["lower", 0], ["if", 0], ["s", 0], ["5", 0], ["lala", 0], ["and", 0], ["s", 0], ["0", 0], ["5", 0], ["miao", 0], ["ans", 0], ["append", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["continue", 0], ["elif", 0], ["s", 0], ["5", 0], ["lala", 0], ["ans", 0], ["append", 0], ["freda", 0], ["s", 0], ["continue", 0], ["elif", 0], ["s", 0], ["0", 0], ["5", 0], ["miao", 0], ["ans", 0], ["append", 0], ["rainbow", 0], ["s", 0], ["continue", 0], ["else", 0], ["ans", 0], ["append", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["ans", 0], ["i", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["input", 0], ["if", 0], ["a", 0], ["5", 0], ["miao", 0], ["and", 0], ["a", 0], ["len", 0], ["a", 0], ["5", 0], ["lala", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["elif", 0], ["a", 0], ["len", 0], ["a", 0], ["5", 0], ["lala", 0], ["print", 0], ["freda", 0], ["s", 0], ["elif", 0], ["a", 0], ["5", 0], ["miao", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["import", 0], ["re", 0], ["n", 0], ["int", 0], ["input", 0], ["r1", 0], ["re", 0], ["compile", 0], ["miao", 0], ["lala", 0], ["r2", 0], ["re", 0], ["compile", 0], ["lala", 0], ["r3", 0], ["re", 0], ["compile", 0], ["miao", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["s", 0], ["str", 0], ["input", 0], ["res1", 0], ["r1", 0], ["findall", 0], ["s", 0], ["res2", 0], ["r2", 0], ["findall", 0], ["s", 0], ["if", 0], ["len", 0], ["r1", 0], ["findall", 0], ["s", 0], ["0", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["elif", 0], ["len", 0], ["r2", 0], ["findall", 0], ["s", 0], ["0", 0], ["print", 0], ["freda", 0], ["s", 0], ["elif", 0], ["len", 0], ["r3", 0], ["findall", 0], ["s", 0], ["0", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["t", 0], ["l", 0], ["input", 0], ["flag", 0], ["3", 0], ["if", 0], ["l", 0], ["startswith", 0], ["miao", 0], ["true", 0], ["flag", 0], ["2", 0], ["if", 0], ["l", 0], ["endswith", 0], ["lala", 0], ["true", 0], ["flag", 0], ["1", 0], ["if", 0], ["l", 0], ["startswith", 0], ["miao", 0], ["true", 0], ["and", 0], ["l", 0], ["endswith", 0], ["lala", 0], ["true", 0], ["flag", 0], ["3", 0], ["if", 0], ["flag", 0], ["3", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["if", 0], ["flag", 0], ["2", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["if", 0], ["flag", 0], ["1", 0], ["print", 0], ["freda", 0], ["s", 0], ["a", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["f", 0], ["r", 0], ["0", 0], ["0", 0], ["sr", 0], ["rainbow", 0], ["s", 0], ["sf", 0], ["freda", 0], ["s", 0], ["su", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["str", 0], ["input", 0], ["if", 0], ["s", 0], ["find", 0], ["miao", 0], ["0", 0], ["r", 0], ["1", 0], ["else", 0], ["r", 0], ["0", 0], ["if", 0], ["s", 0], ["rfind", 0], ["lala", 0], ["len", 0], ["s", 0], ["5", 0], ["f", 0], ["1", 0], ["else", 0], ["f", 0], ["0", 0], ["if", 0], ["r", 0], ["and", 0], ["not", 0], ["f", 0], ["print", 0], ["sr", 0], ["elif", 0], ["f", 0], ["and", 0], ["not", 0], ["r", 0], ["print", 0], ["sf", 0], ["elif", 0], ["r", 0], ["and", 0], ["f", 0], ["or", 0], ["not", 0], ["f", 0], ["and", 0], ["not", 0], ["r", 0], ["print", 0], ["su", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["if", 0], ["s", 0], ["5", 0], ["lala", 0], ["ans", 0], ["1", 0], ["if", 0], ["s", 0], ["5", 0], ["miao", 0], ["ans", 0], ["2", 0], ["if", 0], ["ans", 0], ["1", 0], ["print", 0], ["freda", 0], ["s", 0], ["elif", 0], ["ans", 0], ["2", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["s", 0], ["input", 0], ["ns", 0], ["len", 0], ["s", 0], ["if", 0], ["ns", 0], ["5", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["else", 0], ["if", 0], ["s", 0], ["5", 0], ["miao", 0], ["and", 0], ["s", 0], ["5", 0], ["lala", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["else", 0], ["if", 0], ["s", 0], ["5", 0], ["miao", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["if", 0], ["s", 0], ["5", 0], ["lala", 0], ["print", 0], ["freda", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["startswith", 0], ["miao", 0], ["and", 0], ["not", 0], ["s", 0], ["endswith", 0], ["lala", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["elif", 0], ["s", 0], ["endswith", 0], ["lala", 0], ["and", 0], ["not", 0], ["s", 0], ["startswith", 0], ["miao", 0], ["print", 0], ["freda", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sign", 0], ["false", 0], ["sign1", 0], ["false", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["5", 0], ["miao", 0], ["sign1", 0], ["true", 0], ["if", 0], ["s", 0], ["5", 0], ["lala", 0], ["sign", 0], ["true", 0], ["if", 0], ["sign", 0], ["and", 0], ["sign1", 0], ["or", 0], ["sign", 0], ["false", 0], ["and", 0], ["sign1", 0], ["false", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["elif", 0], ["sign", 0], ["print", 0], ["freda", 0], ["s", 0], ["else", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["line", 0], ["input", 0], ["result", 0], ["0", 0], ["if", 0], ["len", 0], ["line", 0], ["5", 0], ["and", 0], ["line", 0], ["0", 0], ["5", 0], ["miao", 0], ["result", 0], ["1", 0], ["if", 0], ["len", 0], ["line", 0], ["5", 0], ["and", 0], ["line", 0], ["5", 0], ["lala", 0], ["result", 0], ["2", 0], ["if", 0], ["result", 0], ["2", 0], ["print", 0], ["freda", 0], ["s", 0], ["elif", 0], ["result", 0], ["1", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["endswith", 0], ["lala", 0], ["and", 0], ["s", 0], ["endswith", 0], ["miao", 0], ["0", 0], ["5", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["elif", 0], ["s", 0], ["endswith", 0], ["lala", 0], ["print", 0], ["freda", 0], ["s", 0], ["elif", 0], ["s", 0], ["endswith", 0], ["miao", 0], ["0", 0], ["5", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["for", 0], ["line", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["line", 0], ["number", 0], ["int", 0], ["line", 0], ["for", 0], ["line", 0], ["in", 0], ["range", 0], ["line", 0], ["number", 0], ["s", 0], ["input", 0], ["freda", 0], ["rainbow", 0], ["false", 0], ["false", 0], ["if", 0], ["s", 0], ["5", 0], ["lala", 0], ["freda", 0], ["true", 0], ["if", 0], ["s", 0], ["5", 0], ["miao", 0], ["rainbow", 0], ["true", 0], ["if", 0], ["freda", 0], ["true", 0], ["and", 0], ["rainbow", 0], ["true", 0], ["or", 0], ["freda", 0], ["false", 0], ["and", 0], ["rainbow", 0], ["false", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["elif", 0], ["freda", 0], ["print", 0], ["freda", 0], ["s", 0], ["elif", 0], ["rainbow", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["pass", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["input", 0], ["f", 0], ["x", 0], ["endswith", 0], ["lala", 0], ["r", 0], ["x", 0], ["startswith", 0], ["miao", 0], ["if", 0], ["f", 0], ["and", 0], ["r", 0], ["or", 0], ["not", 0], ["f", 0], ["or", 0], ["r", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["elif", 0], ["f", 0], ["print", 0], ["freda", 0], ["s", 0], ["else", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["import", 0], ["math", 0], ["import", 0], ["re", 0], ["from", 0], ["fractions", 0], ["import", 0], ["fraction", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["class", 0], ["task", 0], ["sentences", 0], ["answer", 0], ["def", 0], ["init", 0], ["self", 0], ["self", 0], ["sentences", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["self", 0], ["sentences", 0], ["self", 0], ["sentences", 0], ["i", 0], ["input", 0], ["def", 0], ["solve", 0], ["self", 0], ["sentences", 0], ["self", 0], ["sentences", 0], ["for", 0], ["current", 0], ["in", 0], ["sentences", 0], ["matcherfirst", 0], ["re", 0], ["search", 0], ["miao", 0], ["current", 0], ["matchersecond", 0], ["re", 0], ["search", 0], ["lala", 0], ["current", 0], ["if", 0], ["matcherfirst", 0], ["none", 0], ["and", 0], ["matchersecond", 0], ["none", 0], ["self", 0], ["answer", 0], ["rainbow", 0], ["s", 0], ["continue", 0], ["if", 0], ["matcherfirst", 0], ["none", 0], ["and", 0], ["matchersecond", 0], ["none", 0], ["self", 0], ["answer", 0], ["freda", 0], ["s", 0], ["continue", 0], ["self", 0], ["answer", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["def", 0], ["printanswer", 0], ["self", 0], ["for", 0], ["line", 0], ["in", 0], ["self", 0], ["answer", 0], ["print", 0], ["line", 0], ["task", 0], ["task", 0], ["task", 0], ["solve", 0], ["task", 0], ["printanswer", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["append", 0], ["str", 0], ["input", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["x", 0], ["5", 0], ["lala", 0], ["and", 0], ["a", 0], ["x", 0], ["5", 0], ["miao", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["elif", 0], ["a", 0], ["x", 0], ["5", 0], ["lala", 0], ["print", 0], ["freda", 0], ["s", 0], ["elif", 0], ["a", 0], ["x", 0], ["5", 0], ["miao", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["import", 0], ["re", 0], ["fe", 0], ["re", 0], ["compile", 0], ["lala", 0], ["fea", 0], ["freda", 0], ["s", 0], ["ra", 0], ["re", 0], ["compile", 0], ["miao", 0], ["raa", 0], ["rainbow", 0], ["s", 0], ["notsure", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["times", 0], ["in", 0], ["range", 0], ["n", 0], ["inp", 0], ["input", 0], ["inp", 0], ["inp", 0], ["strip", 0], ["n", 0], ["f1", 0], ["fe", 0], ["match", 0], ["inp", 0], ["none", 0], ["f2", 0], ["ra", 0], ["match", 0], ["inp", 0], ["none", 0], ["if", 0], ["f1", 0], ["if", 0], ["f2", 0], ["print", 0], ["notsure", 0], ["else", 0], ["print", 0], ["fea", 0], ["elif", 0], ["f2", 0], ["print", 0], ["raa", 0], ["else", 0], ["print", 0], ["notsure", 0], ["starting", 0], ["point", 0], ["f", 0], ["r", 0], ["unknow", 0], ["freda", 0], ["s", 0], ["rainbow", 0], ["s", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["answer", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["0", 0], ["5", 0], ["miao", 0], ["if", 0], ["s", 0], ["5", 0], ["lala", 0], ["answer", 0], ["append", 0], ["unknow", 0], ["else", 0], ["answer", 0], ["append", 0], ["r", 0], ["elif", 0], ["s", 0], ["5", 0], ["lala", 0], ["answer", 0], ["append", 0], ["f", 0], ["else", 0], ["answer", 0], ["append", 0], ["unknow", 0], ["for", 0], ["i", 0], ["in", 0], ["answer", 0], ["print", 0], ["i", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["freda", 0], ["s", 0], ["rainbow", 0], ["s", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["s", 0], ["startswith", 0], ["miao", 0], ["2", 0], ["s", 0], ["endswith", 0], ["lala", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["startswith", 0], ["miao", 0], ["and", 0], ["not", 0], ["s", 0], ["endswith", 0], ["lala", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["elif", 0], ["s", 0], ["endswith", 0], ["lala", 0], ["and", 0], ["not", 0], ["s", 0], ["startswith", 0], ["miao", 0], ["print", 0], ["freda", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["3", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["not", 0], ["s", 0], ["startswith", 0], ["miao", 0], ["s", 0], ["endswith", 0], ["lala", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["elif", 0], ["s", 0], ["startswith", 0], ["miao", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["print", 0], ["freda", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["input", 0], ["a", 0], ["b", 0], ["len", 0], ["t", 0], ["4", 0], ["a", 0], ["a", 0], ["and", 0], ["t", 0], ["5", 0], ["miao", 0], ["b", 0], ["b", 0], ["and", 0], ["t", 0], ["5", 0], ["lala", 0], ["if", 0], ["a", 0], ["if", 0], ["b", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["else", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["else", 0], ["if", 0], ["b", 0], ["print", 0], ["freda", 0], ["s", 0], ["else", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["f1", 0], ["0", 0], ["f2", 0], ["0", 0], ["if", 0], ["len", 0], ["s", 0], ["5", 0], ["and", 0], ["s", 0], ["5", 0], ["lala", 0], ["f1", 0], ["1", 0], ["if", 0], ["len", 0], ["s", 0], ["5", 0], ["and", 0], ["s", 0], ["5", 0], ["miao", 0], ["f2", 0], ["1", 0], ["if", 0], ["f1", 0], ["and", 0], ["f2", 0], ["or", 0], ["f1", 0], ["0", 0], ["and", 0], ["f2", 0], ["0", 0], ["print", 0], ["omg", 0], ["i", 0], ["don", 0], ["t", 0], ["know", 0], ["elif", 0], ["f1", 0], ["1", 0], ["print", 0], ["freda", 0], ["s", 0], ["else", 0], ["print", 0], ["rainbow", 0], ["s", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nHeroes in Indian movies are capable of superhuman feats. For example, they can jump between buildings, jump onto and from running trains, catch bullets with their hands and teeth and so on. A perceptive follower of such movies would have noticed that there are limits to what even the superheroes can do. For example, if the hero could directly jump to his ultimate destination, that would reduce the action sequence to nothing and thus make the movie quite boring. So he typically labours through a series of superhuman steps to reach his ultimate destination.\nIn this problem, our hero has to save his wife/mother/child/dog/… held captive by the nasty villain on the top floor of a tall building in the centre of Bombay/Bangkok/Kuala Lumpur/…. Our hero is on top of a (different) building. In order to make the action \"interesting\" the director has decided that the hero can only jump between buildings that are \"close\" to each other. The director decides which pairs of buildings are close enough and which are not.\nGiven the list of buildings, the identity of the building where the hero begins his search, the identity of the building where the captive (wife/mother/child/dog…) is held, and the set of pairs of buildings that the hero can jump across, your aim is determine whether it is possible for the hero to reach the captive. And, if he can reach the captive he would like to do so with minimum number of jumps.\nHere is an example. There are $5$ buildings, numbered $1,2,...,5$, the hero stands on building $1$ and the captive is on building $4$. The director has decided that buildings $1$ and $3$, $2$ and $3, 1$ and $2, 3$ and $5$ and $4$ and $5$ are close enough for the hero to jump across. The hero can save the captive by jumping from $1$ to $3$ and then from $3$ to $5$ and finally from $5$ to $4$. (Note that if $i$ and $j$ are close then the hero can jump from $i$ to $j$ as well as from $j$ to $i$.). In this example, the hero could have also reached $4$ by jumping from $1$ to $2, 2$ to $3, 3$ to $5$ and finally from $5$ to $4$. The first route uses $3$ jumps while the second one uses $4$ jumps. You can verify that $3$ jumps is the best possible.\nIf the director decides that the only pairs of buildings that are close enough are $1$ and $3$, $1$ and $2$ and $4$ and $5$, then the hero would not be able to reach building $4$ to save the captive.\n\n-----Input:-----\nThe first line of the input contains two integers $N$ and $M$. $N$ is the number of buildings: we assume that our buildings are numbered $1,2,...,N$. $M$ is the number of pairs of buildings that the director lists as being close enough to jump from one to the other. Each of the next $M$ lines, lines $2,...,M+1$, contains a pair of integers representing a pair of buildings that are close. Line $i+1$ contains integers $A_i$ and $B_i$, $1 \\leq A_i \\leq N$ and $1 \\leq B_i \\leq N$, indicating that buildings $A_i$ and $B_i$ are close enough. The last line, line $M+2$ contains a pair of integers $S$ and $T$, where $S$ is the building from which the Hero starts his search and $T$ is the building where the captive is held.\n\n-----Output:-----\nIf the hero cannot reach the captive print $0$. If the hero can reach the captive print out a single integer indicating the number of jumps in the shortest route (in terms of the number of jumps) to reach the captive.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 3500$.\n- $1 \\leq M \\leq 1000000$.\n- In at least $50 \\%$ of the inputs $1 \\leq N \\leq 1000$ and $1 \\leq M \\leq 200000$.\n\n-----Sample Input 1:-----\n5 5\n1 3\n2 3\n1 2\n3 5\n4 5 \n1 4\n\n-----Sample Output 1:-----\n3 \n\n-----Sample Input 2:-----\n5 3\n1 3\n1 2\n4 5\n1 4\n\n-----Sample Output 2:-----\n0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from sys  import stdin,stdout\nfrom collections import deque \nst=lambda:list(stdin.readline().strip())\nli=lambda:list(map(int,stdin.readline().split()))\nmp=lambda:list(map(int,stdin.readline().split()))\ninp=lambda:int(stdin.readline())\npr=lambda n: stdout.write(str(n)+\"\\n\")\n\nmod=1000000007\nINF=float('inf')\n\ndef solve():\n\tn,m=mp()\n\td={i:[] for i in range(n+1)}\n\tfor i in range(m):\n\t\ta,b=mp()\n\t\td[a].append(b)\n\t\td[b].append(a)\n\tx,y=mp()\n\tv=[False for i in range(n+1)]\n\tq=deque()\n\tq.append(x)\n\tdis=[INF for i in range(n+1)]\n\tdis[x]=0\n\tv[x]=True\n\twhile q:\n\t\ta=q.popleft()\n\t\tfor i in d[a]:\n\t\t\tif not v[i]:\n\t\t\t\tv[i]=True\n\t\t\t\tq.append(i)\n\t\t\t\tdis[i]=dis[a]+1\n\tif not v[y]:\n\t\tpr(0)\n\telse:\n\t\tpr(dis[y])\n\t\t\t\t\n\t\t\n\t\t\n\n\nfor _ in range(1):\n\tsolve()\n", "n,m=map(int,input().strip().split())\nconnections={}\nfor _ in range(m):\n\tx,y=map(int,input().strip().split())\n\tif x not in connections.keys():\n\t\tconnections[x]=[y]\n\telse:\n\t\tconnections[x].append(y)\n\tif y not in connections.keys():\n\t\tconnections[y]=[x]\n\telse:\n\t\tconnections[y].append(x)\ns,t=map(int,input().split())\ndistances=[-1]*(n+1)\ndistances[s]=0\nunvisited=list(range(1,n+1))\nwhile unvisited!=[]:\n\tmin1=max(distances)\n\tv=-1\n\tflag=0\n\tfor j in unvisited:\n\t\tif distances[j]!=-1 and min1>=distances[j]:\n\t\t\tmin1=distances[j]\n\t\t\tv=j\n\tif v==-1:\n\t\tbreak\n\tunvisited.remove(v)\n\tfor i in connections[v]:\n\t\tif i not in unvisited:\n\t\t\tcontinue\n\t\tif distances[i]==-1 or distances[i]>1+distances[v]:\n\t\t\tdistances[i]=1+distances[v]\n\t\tif i==t:\n\t\t\tflag=1\n\t\t\tbreak\n\tif flag==1:\n\t\tbreak\nif distances[t]==-1:\n\tdistances[t]=0\nprint(distances[t])\n", "from queue import Queue\nn,m=[int(x) for x in input().split()]\nadj=[[] for i in range(n+1)]\nfor _ in range (m) :\n\tsrc,dest=[int(x) for x in input().split()]\n\tadj[src].append(dest)\n\tadj[dest].append(src)\nvis=[0]*(n+1)\nstrt , end = [int(x) for x in input().split()]\nvis[strt]=1\nq=Queue()\nq.put(strt)\nk=0\nwhile not q.empty() :\n\tk+=1\n\tfor i in range(q.qsize()) :\n\t\tele=q.get()\n\t\tfor j in adj[ele] :\n\t\t\tif vis[j]==0 :\n\t\t\t\tq.put(j)\n\t\t\t\tvis[j]=k\nprint(vis[end])\n", "# cook your dish here\nfrom collections import deque\ndef bfs(graph,u,t):\n\tqueue = deque([u])\n\tlevel = {u: 0}\n\twhile queue:\n\t\tver = queue.popleft()\n\t\tfor v in graph[ver]:\n\t\t\tif v not in level:            \n\t\t\t\tqueue.append(v)\n\t\t\t\tlevel[v] = level[ver] + 1\n\treturn level.get(t,0)\ntry:\n\tn,e = map(int,input().split())\n\tgraph = {}\n\tfor i in range(1,n+1):\n\t\tgraph[i] = []\n\tfor _ in range(e):\n\t\ta,b = map(int,input().split())\n\t\tgraph[a].append(b)\n\t\tgraph[b].append(a)\n\ts,t = map(int,input().split())\n\tp = bfs(graph,s,t)\n\tprint(p)\n\t\nexcept:\n\tpass\n"], "id": "id8625"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8625", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["heroes", 1], ["in", 1], ["indian", 1], ["movies", 3], ["are", 3], ["capable", 3], ["of", 3], ["superhuman", 3], ["feats", 3], ["for", 3], ["example", 3], ["they", 3], ["can", 3], ["jump", 3], ["between", 3], ["buildings", 3], ["jump", 3], ["onto", 3], ["and", 3], ["from", 3], ["running", 3], ["trains", 3], ["catch", 3], ["bullets", 3], ["with", 3], ["their", 3], ["hands", 3], ["and", 3], ["teeth", 3], ["and", 3], ["so", 3], ["on", 3], ["a", 3], ["perceptive", 3], ["follower", 3], ["of", 3], ["such", 3], ["movies", 3], ["would", 3], ["have", 3], ["noticed", 3], ["that", 3], ["there", 3], ["are", 3], ["limits", 3], ["to", 3], ["what", 3], ["even", 3], ["the", 3], ["superheroes", 3], ["can", 3], ["do", 3], ["for", 3], ["example", 3], ["if", 3], ["the", 3], ["hero", 3], ["could", 3], ["directly", 3], ["jump", 3], ["to", 3], ["his", 3], ["ultimate", 3], ["destination", 3], ["that", 3], ["would", 3], ["reduce", 3], ["the", 3], ["action", 3], ["sequence", 3], ["to", 3], ["nothing", 3], ["and", 3], ["thus", 3], ["make", 3], ["the", 3], ["movie", 3], ["quite", 3], ["boring", 3], ["so", 3], ["he", 3], ["typically", 3], ["labours", 3], ["through", 3], ["a", 3], ["series", 3], ["of", 3], ["superhuman", 3], ["steps", 3], ["to", 3], ["reach", 3], ["his", 3], ["ultimate", 3], ["destination", 3], ["in", 3], ["this", 0], ["problem", 0], ["our", 0], ["hero", 0], ["has", 0], ["to", 0], ["save", 0], ["his", 0], ["wife", 0], ["mother", 0], ["child", 0], ["dog", 0], ["…", 0], ["held", 3], ["captive", 3], ["by", 3], ["the", 3], ["nasty", 3], ["villain", 3], ["on", 3], ["the", 3], ["top", 3], ["floor", 3], ["of", 0], ["a", 0], ["tall", 0], ["building", 0], ["in", 0], ["the", 0], ["centre", 0], ["of", 0], ["bombay", 0], ["bangkok", 0], ["kuala", 0], ["lumpur", 0], ["…", 0], ["our", 3], ["hero", 3], ["is", 3], ["on", 3], ["top", 3], ["of", 3], ["a", 3], ["different", 3], ["building", 3], ["in", 3], ["order", 3], ["to", 3], ["make", 3], ["the", 3], ["action", 3], ["interesting", 3], ["the", 1], ["director", 1], ["has", 1], ["decided", 1], ["that", 1], ["the", 1], ["hero", 1], ["can", 1], ["only", 1], ["jump", 1], ["between", 1], ["buildings", 1], ["that", 1], ["are", 1], ["close", 1], ["to", 1], ["each", 1], ["other", 1], ["the", 1], ["director", 1], ["decides", 1], ["which", 1], ["pairs", 1], ["of", 1], ["buildings", 1], ["are", 1], ["close", 1], ["enough", 1], ["and", 1], ["which", 1], ["are", 1], ["not", 1], ["given", 1], ["the", 1], ["list", 1], ["of", 1], ["buildings", 1], ["the", 1], ["identity", 1], ["of", 1], ["the", 1], ["building", 1], ["where", 1], ["the", 1], ["hero", 1], ["begins", 1], ["his", 1], ["search", 0], ["the", 0], ["identity", 0], ["of", 0], ["the", 0], ["building", 0], ["where", 0], ["the", 0], ["captive", 0], ["wife", 0], ["mother", 0], ["child", 0], ["dog…", 0], ["is", 1], ["held", 1], ["and", 1], ["the", 1], ["set", 1], ["of", 1], ["pairs", 1], ["of", 1], ["buildings", 1], ["that", 1], ["the", 1], ["hero", 1], ["can", 1], ["jump", 1], ["across", 1], ["your", 3], ["aim", 3], ["is", 3], ["determine", 1], ["whether", 1], ["it", 1], ["is", 1], ["possible", 1], ["for", 1], ["the", 1], ["hero", 1], ["to", 1], ["reach", 1], ["the", 1], ["captive", 1], ["and", 1], ["if", 1], ["he", 1], ["can", 1], ["reach", 1], ["the", 1], ["captive", 1], ["he", 1], ["would", 1], ["like", 1], ["to", 1], ["do", 1], ["so", 1], ["with", 1], ["minimum", 1], ["number", 1], ["of", 1], ["jumps", 1], ["here", 1], ["is", 1], ["an", 1], ["example", 1], ["there", 1], ["are", 1], ["5", 1], ["buildings", 1], ["numbered", 1], ["1", 1], ["2", 1], ["5", 1], ["the", 1], ["hero", 1], ["stands", 1], ["on", 1], ["building", 1], ["1", 1], ["and", 1], ["the", 1], ["captive", 1], ["is", 1], ["on", 1], ["building", 1], ["4", 1], ["the", 1], ["director", 1], ["has", 1], ["decided", 1], ["that", 1], ["buildings", 1], ["1", 1], ["and", 1], ["3", 1], ["2", 1], ["and", 1], ["3", 1], ["1", 1], ["and", 1], ["2", 1], ["3", 1], ["and", 1], ["5", 1], ["and", 1], ["4", 1], ["and", 1], ["5", 1], ["are", 1], ["close", 1], ["enough", 1], ["for", 1], ["the", 1], ["hero", 1], ["to", 1], ["jump", 1], ["across", 1], ["the", 1], ["hero", 1], ["can", 1], ["save", 1], ["the", 1], ["captive", 1], ["by", 1], ["jumping", 1], ["from", 1], ["1", 1], ["to", 1], ["3", 1], ["and", 1], ["then", 1], ["from", 1], ["3", 1], ["to", 1], ["5", 1], ["and", 1], ["finally", 1], ["from", 1], ["5", 1], ["to", 1], ["4", 1], ["note", 1], ["that", 1], ["if", 1], ["i", 1], ["and", 1], ["j", 1], ["are", 1], ["close", 1], ["then", 1], ["the", 1], ["hero", 1], ["can", 1], ["jump", 1], ["from", 1], ["i", 1], ["to", 1], ["j", 1], ["as", 1], ["well", 1], ["as", 1], ["from", 1], ["j", 1], ["to", 1], ["i", 1], ["in", 1], ["this", 1], ["example", 1], ["the", 1], ["hero", 1], ["could", 1], ["have", 1], ["also", 1], ["reached", 1], ["4", 1], ["by", 1], ["jumping", 1], ["from", 1], ["1", 1], ["to", 1], ["2", 1], ["2", 1], ["to", 1], ["3", 1], ["3", 1], ["to", 1], ["5", 1], ["and", 1], ["finally", 1], ["from", 1], ["5", 1], ["to", 1], ["4", 1], ["the", 1], ["first", 1], ["route", 1], ["uses", 1], ["3", 1], ["jumps", 1], ["while", 1], ["the", 1], ["second", 1], ["one", 1], ["uses", 1], ["4", 1], ["jumps", 1], ["you", 1], ["can", 1], ["verify", 1], ["that", 1], ["3", 1], ["jumps", 1], ["is", 1], ["the", 1], ["best", 1], ["possible", 1], ["if", 1], ["the", 1], ["director", 1], ["decides", 1], ["that", 1], ["the", 1], ["only", 1], ["pairs", 1], ["of", 1], ["buildings", 1], ["that", 1], ["are", 1], ["close", 1], ["enough", 1], ["are", 1], ["1", 1], ["and", 1], ["3", 1], ["1", 1], ["and", 1], ["2", 1], ["and", 1], ["4", 1], ["and", 1], ["5", 1], ["then", 1], ["the", 1], ["hero", 1], ["would", 0], ["not", 0], ["be", 0], ["able", 0], ["to", 0], ["reach", 0], ["building", 0], ["4", 0], ["to", 0], ["save", 0], ["the", 0], ["captive", 0], ["input", 0], ["the", 5], ["first", 5], ["line", 5], ["of", 5], ["the", 5], ["input", 1], ["contains", 1], ["two", 1], ["integers", 1], ["n", 1], ["and", 1], ["m", 1], ["n", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["buildings", 1], ["we", 1], ["assume", 1], ["that", 1], ["our", 1], ["buildings", 1], ["are", 1], ["numbered", 1], ["1", 1], ["2", 1], ["n", 1], ["m", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["pairs", 1], ["of", 1], ["buildings", 1], ["that", 1], ["the", 1], ["director", 1], ["lists", 1], ["as", 1], ["being", 1], ["close", 1], ["enough", 1], ["to", 1], ["jump", 1], ["from", 1], ["one", 1], ["to", 1], ["the", 1], ["other", 1], ["each", 1], ["of", 1], ["the", 1], ["next", 1], ["m", 1], ["lines", 1], ["lines", 1], ["2", 1], ["m", 1], ["1", 1], ["contains", 1], ["a", 1], ["pair", 1], ["of", 1], ["integers", 1], ["representing", 1], ["a", 0], ["pair", 0], ["of", 0], ["buildings", 0], ["that", 0], ["are", 0], ["close", 0], ["line", 0], ["i", 0], ["1", 0], ["contains", 0], ["integers", 0], ["a", 0], ["i", 0], ["and", 0], ["b", 0], ["i", 0], ["1", 0], ["leq", 0], ["a", 0], ["i", 0], ["leq", 0], ["n", 0], ["and", 0], ["1", 0], ["leq", 0], ["b", 0], ["i", 0], ["leq", 0], ["n", 0], ["indicating", 0], ["that", 0], ["buildings", 0], ["a", 0], ["i", 0], ["and", 0], ["b", 0], ["i", 0], ["are", 1], ["close", 1], ["enough", 1], ["the", 1], ["last", 1], ["line", 1], ["line", 1], ["m", 1], ["2", 1], ["contains", 1], ["a", 1], ["pair", 1], ["of", 1], ["integers", 1], ["s", 1], ["and", 1], ["t", 1], ["where", 1], ["s", 1], ["is", 1], ["the", 1], ["building", 1], ["from", 1], ["which", 1], ["the", 1], ["hero", 1], ["starts", 1], ["his", 0], ["search", 0], ["and", 0], ["t", 0], ["is", 0], ["the", 0], ["building", 0], ["where", 0], ["the", 0], ["captive", 0], ["is", 0], ["held", 0], ["output", 0], ["if", 1], ["the", 1], ["hero", 1], ["cannot", 1], ["reach", 1], ["the", 1], ["captive", 1], ["print", 1], ["0", 1], ["if", 1], ["the", 1], ["hero", 1], ["can", 1], ["reach", 1], ["the", 1], ["captive", 1], ["print", 1], ["out", 1], ["a", 1], ["single", 1], ["integer", 1], ["indicating", 1], ["the", 1], ["number", 1], ["of", 1], ["jumps", 1], ["in", 1], ["the", 1], ["shortest", 1], ["route", 0], ["in", 0], ["terms", 0], ["of", 0], ["the", 0], ["number", 0], ["of", 0], ["jumps", 0], ["to", 0], ["reach", 0], ["the", 0], ["captive", 0], ["constraints", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["3500", 0], ["1", 0], ["leq", 0], ["m", 0], ["leq", 0], ["1000000", 0], ["in", 0], ["at", 0], ["least", 0], ["50", 0], ["of", 0], ["the", 0], ["inputs", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["1000", 0], ["and", 0], ["1", 0], ["leq", 0], ["m", 0], ["leq", 0], ["200000", 0], ["sample", 0], ["input", 0], ["1", 0], ["5", 0], ["5", 0], ["1", 0], ["3", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["5", 0], ["4", 0], ["5", 0], ["1", 0], ["4", 0], ["sample", 0], ["output", 0], ["1", 0], ["3", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["3", 0], ["1", 0], ["3", 0], ["1", 0], ["2", 0], ["4", 0], ["5", 0], ["1", 0], ["4", 0], ["sample", 0], ["output", 0], ["2", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7425320056899004, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6220957799905168, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8475524475524475, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8065268065268063, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7425320056899004, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6220957799905168, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8475524475524475, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8065268065268063, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["st", 0], ["lambda", 0], ["list", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["li", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["mp", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["inp", 0], ["lambda", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["pr", 0], ["lambda", 0], ["n", 0], ["stdout", 0], ["write", 0], ["str", 0], ["n", 0], ["n", 0], ["mod", 0], ["1000000007", 0], ["inf", 0], ["float", 0], ["inf", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["mp", 0], ["d", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["mp", 0], ["d", 0], ["a", 0], ["append", 0], ["b", 0], ["d", 0], ["b", 0], ["append", 0], ["a", 0], ["x", 0], ["y", 0], ["mp", 0], ["v", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["q", 0], ["deque", 0], ["q", 0], ["append", 0], ["x", 0], ["dis", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dis", 0], ["x", 0], ["0", 0], ["v", 0], ["x", 0], ["true", 0], ["while", 0], ["q", 0], ["a", 0], ["q", 0], ["popleft", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["a", 0], ["if", 0], ["not", 0], ["v", 0], ["i", 0], ["v", 0], ["i", 0], ["true", 0], ["q", 0], ["append", 0], ["i", 0], ["dis", 0], ["i", 0], ["dis", 0], ["a", 0], ["1", 0], ["if", 0], ["not", 0], ["v", 0], ["y", 0], ["pr", 0], ["0", 0], ["else", 0], ["pr", 0], ["dis", 0], ["y", 0], ["for", 0], ["in", 0], ["range", 0], ["1", 0], ["solve", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["connections", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["if", 0], ["x", 0], ["not", 0], ["in", 0], ["connections", 0], ["keys", 0], ["connections", 0], ["x", 0], ["y", 0], ["else", 0], ["connections", 0], ["x", 0], ["append", 0], ["y", 0], ["if", 0], ["y", 0], ["not", 0], ["in", 0], ["connections", 0], ["keys", 0], ["connections", 0], ["y", 0], ["x", 0], ["else", 0], ["connections", 0], ["y", 0], ["append", 0], ["x", 0], ["s", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["distances", 0], ["1", 0], ["n", 0], ["1", 0], ["distances", 0], ["s", 0], ["0", 0], ["unvisited", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["while", 0], ["unvisited", 0], ["min1", 0], ["max", 0], ["distances", 0], ["v", 0], ["1", 0], ["flag", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["unvisited", 0], ["if", 0], ["distances", 0], ["j", 0], ["1", 0], ["and", 0], ["min1", 0], ["distances", 0], ["j", 0], ["min1", 0], ["distances", 0], ["j", 0], ["v", 0], ["j", 0], ["if", 0], ["v", 0], ["1", 0], ["break", 0], ["unvisited", 0], ["remove", 0], ["v", 0], ["for", 0], ["i", 0], ["in", 0], ["connections", 0], ["v", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["unvisited", 0], ["continue", 0], ["if", 0], ["distances", 0], ["i", 0], ["1", 0], ["or", 0], ["distances", 0], ["i", 0], ["1", 0], ["distances", 0], ["v", 0], ["distances", 0], ["i", 0], ["1", 0], ["distances", 0], ["v", 0], ["if", 0], ["i", 0], ["t", 0], ["flag", 0], ["1", 0], ["break", 0], ["if", 0], ["flag", 0], ["1", 0], ["break", 0], ["if", 0], ["distances", 0], ["t", 0], ["1", 0], ["distances", 0], ["t", 0], ["0", 0], ["print", 0], ["distances", 0], ["t", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["adj", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["src", 0], ["dest", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["adj", 0], ["src", 0], ["append", 0], ["dest", 0], ["adj", 0], ["dest", 0], ["append", 0], ["src", 0], ["vis", 0], ["0", 0], ["n", 0], ["1", 0], ["strt", 0], ["end", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["vis", 0], ["strt", 0], ["1", 0], ["q", 0], ["queue", 0], ["q", 0], ["put", 0], ["strt", 0], ["k", 0], ["0", 0], ["while", 0], ["not", 0], ["q", 0], ["empty", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["qsize", 0], ["ele", 0], ["q", 0], ["get", 0], ["for", 0], ["j", 0], ["in", 0], ["adj", 0], ["ele", 0], ["if", 0], ["vis", 0], ["j", 0], ["0", 0], ["q", 0], ["put", 0], ["j", 0], ["vis", 0], ["j", 0], ["k", 0], ["print", 0], ["vis", 0], ["end", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["bfs", 0], ["graph", 0], ["u", 0], ["t", 0], ["queue", 0], ["deque", 0], ["u", 0], ["level", 0], ["u", 0], ["0", 0], ["while", 0], ["queue", 0], ["ver", 0], ["queue", 0], ["popleft", 0], ["for", 0], ["v", 0], ["in", 0], ["graph", 0], ["ver", 0], ["if", 0], ["v", 0], ["not", 0], ["in", 0], ["level", 0], ["queue", 0], ["append", 0], ["v", 0], ["level", 0], ["v", 0], ["level", 0], ["ver", 0], ["1", 0], ["return", 0], ["level", 0], ["get", 0], ["t", 0], ["0", 0], ["try", 0], ["n", 0], ["e", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["graph", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["graph", 0], ["i", 0], ["for", 0], ["in", 0], ["range", 0], ["e", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["graph", 0], ["a", 0], ["append", 0], ["b", 0], ["graph", 0], ["b", 0], ["append", 0], ["a", 0], ["s", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["bfs", 0], ["graph", 0], ["s", 0], ["t", 0], ["print", 0], ["p", 0], ["except", 0], ["pass", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nVasya is reading a e-book. The file of the book consists of $n$ pages, numbered from $1$ to $n$. The screen is currently displaying the contents of page $x$, and Vasya wants to read the page $y$. There are two buttons on the book which allow Vasya to scroll $d$ pages forwards or backwards (but he cannot scroll outside the book). For example, if the book consists of $10$ pages, and $d = 3$, then from the first page Vasya can scroll to the first or to the fourth page by pressing one of the buttons; from the second page — to the first or to the fifth; from the sixth page — to the third or to the ninth; from the eighth — to the fifth or to the tenth.\n\nHelp Vasya to calculate the minimum number of times he needs to press a button to move to page $y$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^3$) — the number of testcases.\n\nEach testcase is denoted by a line containing four integers $n$, $x$, $y$, $d$ ($1\\le n, d \\le 10^9$, $1 \\le x, y \\le n$) — the number of pages, the starting page, the desired page, and the number of pages scrolled by pressing one button, respectively.\n\n\n-----Output-----\n\nPrint one line for each test.\n\nIf Vasya can move from page $x$ to page $y$, print the minimum number of times he needs to press a button to do it. Otherwise print $-1$.\n\n\n-----Example-----\nInput\n3\n10 4 5 2\n5 1 3 4\n20 4 19 3\n\nOutput\n4\n-1\n5\n\n\n\n-----Note-----\n\nIn the first test case the optimal sequence is: $4 \\rightarrow 2 \\rightarrow 1 \\rightarrow 3 \\rightarrow 5$.\n\nIn the second test case it is possible to get to pages $1$ and $5$.\n\nIn the third test case the optimal sequence is: $4 \\rightarrow 7 \\rightarrow 10 \\rightarrow 13 \\rightarrow 16 \\rightarrow 19$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["for _ in range(int(input())):\n\tn, x, y, d = map(int, input().split())\n\ttt = abs(x - y)\n\tif tt % d != 0:\n\t\tans = -1\n\t\tif (y - 1) % d == 0:\n\t\t\tans = (x - 1 + d - 1) // d + (y - 1) // d\n\t\tif (n - y) % d == 0:\n\t\t\tcc = (n - x + d - 1) // d + (n - y) // d\n\t\t\tif ans == -1 or cc < ans:\n\t\t\t\tans = cc\n\t\tprint(ans)\n\telse:\n\t\tprint(tt // d)\n", "df = int(input())\nfor _ in range(df):\n\tn,x,y,d = list(map(int,input().split()))\n\td2 = abs(x-y)\n\tans = 3e9\n\tif d2 % d == 0:\n\t\tans = d2 // d\n\tv = abs(x-1)\n\tv2  = abs(x-n)\n\te = 0\n\tif v % d == 0:\n\t\te = v // d\n\telse:\n\t\te = v // d + 1\n\tto_b  = e\n\te = 0\n\tif v2 % d == 0:\n\t\te = v2 // d\n\telse:\n\t\te = v2 // d + 1\n\tto_e = e\n\tv3 = abs(n-y)\n\tv4 = abs(1-y)\n\tif v3 % d == 0:\n\t\tans = min(ans, v3 // d + to_e)\n\tif v4 % d == 0:\n\t\tans = min(ans, v4 // d + to_b)\n\tif ans < 2e9:\n\t\tprint(ans)\n\telse:\n\t\tprint(-1)\n\n", "from math import ceil\nq = int(input())\nfor _ in range(q):\n\tn,x,y,d = list(map(int,input().split()))\n\tif (y-x)%d==0:\n\t\tprint(abs(y-x)//d)\n\telif (y-1)%d==0 and (n-y)%d==0:\n\t\ta = ceil((x-1)/d) + (y-1)//d\n\t\tb = ceil((n-x)/d) + (n-y)//d\n\t\tprint(min(a,b))\n\telif (y-1)%d==0:\n\t\tprint(ceil((x-1)/d) + (y-1)//d)\n\telif (n-y)%d==0:\n\t\tprint(ceil((n-x)/d) + (n-y)//d)\n\telse:\n\t\tprint(-1)\n", "t = int(input())\nfor i in range(t):\n\tn, x, y, d = list(map(int, input().split()))\n\tif abs(y - x) % d == 0 or y == 1 or y == n:\n\t\tprint((abs(x - y) + d - 1) // d)\n\telse:\n\t\tif abs(y - 1) % d == 0 and abs(n - y) % d == 0:\n\t\t\tprint(min((x - 1 + d - 1) // d + (y - 1) // d, (n - x + d - 1) // d + (n - y) // d))\n\t\telif abs(y - 1) % d != 0 and abs(n - y) % d != 0:\n\t\t\tprint(-1)\n\t\telif abs(y - 1) % d == 0:\n\t\t\tprint((x - 1 + d - 1) // d + (y - 1) // d)\n\t\telse:\n\t\t\tprint((n - x + d - 1) // d + (n - y) // d)\n", "t = int(input())\nINF = 10000000000\nfor t_num in range(t):\n\tn, start, end, d = list(map(int, input().split()))\n\tans = INF\n\tif abs(end - start) % d == 0:\n\t\tans = min(ans, abs(end - start) // d)\n\tif (n - end) % d == 0:\n\t\tans = min(ans, (n - end) // d + (n - start + d - 1) // d)\n\tif (end - 1) % d == 0:\n\t\tans = min(ans, (end - 1) // d + (start - 1 + d - 1) // d)\n\n\tif (ans == INF):\n\t\tprint(-1)\n\telse:\n\t\tprint(ans)\n", "t = int(input())\nfor _ in range(t):\n\tn, x, y, d = list(map(int, input().split()))\n\tans = 1<<64\n\tif abs(x - y) % d == 0:\n\t\tans = abs(x - y) // d\n\tif abs(1 - y) % d == 0:\n\t\tans = min(ans, (abs(x - 1) + d - 1) // d + abs(1 - y) // d)\n\tif abs(n - y) % d == 0:\n\t\tans = min(ans, (abs(x - n) + d - 1) // d + abs(n - y) // d)\n\tprint(ans if ans != (1<<64) else -1)\n", "t=int(input())\nfor i in range(t):\n\tn,x,y,d=list(map(int,input().split()))\n\tif abs(x-y)%d==0:\n\t\tprint(abs(x-y)//d)\n\telse:\n\t\tres=10000000000\n\t\tif (y-1)%d==0:\n\t\t\tres=min(res,-(-(x-1)//d)+(y-1)//d)\n\t\tif (n-y)%d==0:\n\t\t\tres=min(res,-(-(n-x)//d)+(n-y)//d)\n\t\tif res==10000000000:\n\t\t\tres=-1\n\t\tprint(res)\n", "def mi():\n\treturn list(map(int, input().split()))\n'''\n3\n10 4 5 2\n5 1 3 4\n20 4 19 3\n'''\nimport math\nfor _ in range(int(input())):\n\tn,x,y,d = mi()\n\tif abs(x-y)%d==0:\n\t\tprint(abs(x-y)//d)\n\telse:\n\t\tans1 = math.ceil((x-1)/d)\n\t\tans2 = math.ceil((n-x)/d)\n\t\tif abs(y-1)%d==0:\n\t\t\tans1 += (y-1)//d\n\t\telse:\n\t\t\tans1 = 1e19\n\t\tif abs(n-y)%d==0:\n\t\t\tans2 += (n-y)//d\n\t\telse:\n\t\t\tans2 = 1e19\n\t\tif min(ans1, ans2)==1e19:\n\t\t\tprint(-1)\n\t\telse:\n\t\t\tprint(min(ans1, ans2))\n", "from math import ceil\n\ndef solve():\n\tn, x, y, d = [int(x) for x in input().split()]\n\n\tINF = 1e9\n\tsol1 = abs(x - y) // d if (x - y) % d == 0 else INF\n\tsol2 = ceil((x-1) / d) + ceil((y-1) / d) if (y-1) % d == 0 else INF\n\tsol3 = ceil((n - x) / d) + ceil((n - y) / d) if ((n - y) % d == 0) else INF\n\n\tans = min(sol1, sol2, sol3)\n\tans = ans if ans != INF else -1\n\tprint(ans)\n\nnt = int(input())\nfor _ in range(nt):\n\tsolve()\n", "t = int(input())\nfor _ in range(t):\n\tn, x, y, d = list(map(int, input().split()))\n\tx, y = x - 1, y - 1\n\tif x <= y and (y - x) % d == 0:\n\t\tprint((y - x) // d)\n\t\tcontinue\n\tif y < x and (x - y) % d == 0:\n\t\tprint((x - y) // d)\n\t\tcontinue\n\tif y % d == 0 and (n - 1 - y) % d == 0:\n\t\tprint(min((x + y + d - 1) // d, (n - 1 - y + d - 1) // d + (n - 1 - x + d - 1) // d))\n\t\tcontinue\n\tif y % d == 0:\n\t\tprint((x + y + d - 1) // d)\n\t\tcontinue\n\tif (n - 1 - y) % d == 0:\n\t\tprint((n - 1 - y + d - 1) // d + (n - 1 - x + d - 1) // d)\n\t\tcontinue\n\tprint(-1)\n", "import math\n\nfor i in range(int(input())):\n\tn,x,y,d=list(map(int,input().split()))\n\tif y!=n and y!=1:\n\t\tif (abs(y-x))%d==0:\n\t\t\tprint((abs(y-x))//d)\n\t\telse:\n\t\t\tif (y-1)%d==0:\n\t\t\t\tif (n-y)%d!=0:\n\t\t\t\t\tprint(math.ceil((x-1)/d)+(y-1)//d)\n\t\t\t\telse:\n\t\t\t\t\tprint(min(math.ceil((x-1)/d)+(y-1)//d, math.ceil((n-x)/d)+(n-y)//d))\n\t\t\telse:\n\t\t\t\tif (n-y)%d!=0:\n\t\t\t\t\tprint(-1)\n\t\t\t\telse:\n\t\t\t\t\tprint(math.ceil((n-x)/d)+(n-y)//d)\n\telse:\n\t\tif y==1:\n\t\t\tprint(math.ceil((x-1)/d))\n\t\telse:\n\t\t\tprint(math.ceil((n-x)/d))\n", "t=int(input())\nfor i in range(t):\n\tn,x,y,d=list(map(int,input().split()))\n\n\tif abs(x-y)%d==0:\n\t\tprint(abs(x-y)//d)\n\n\telse:\n\t\tANS=10**10\n\t\tif abs(y-1)%d==0:\n\t\t\tANS=min(ANS,abs(y-1)//d+(-(-abs(x-1)//d)))\n\n\t\tif abs(n-y)%d==0:\n\t\t\tANS=min(ANS,abs(y-n)//d+(-(-abs(x-n)//d)))\n\n\t\tif ANS==10**10:\n\t\t\tprint(-1)\n\t\telse:\n\t\t\tprint(ANS)\n", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n\treturn list(map(int, input().split()))    \n\ntry :\n\t#raise ModuleNotFoundError\n\timport numpy\n\tdef dprint(*args, **kwargs):\n\t\t#print(*args, **kwargs, file=sys.stderr)\n\t\t# in python 3.4 **kwargs is invalid???\n\t\tprint(*args,  file=sys.stderr)\n\tdprint('debug mode')\nexcept Exception:\n\tdef dprint(*args, **kwargs):\n\t\tpass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n\tdprint('use input', inId)\n\tsys.stdin = open('input'+ str(inId) + '.txt', 'r') #标准输出重定向至文件\nif outId>0:\n\tdprint('use output', outId)\n\tsys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #标准输出重定向至文件\n\tatexit.register(lambda :sys.stdout.close())     #idle 中不会执行 atexit\n\t\nT, = getIntList()\n#print(N)\n\nfor _ in range(T):\n\tn,x,y,d = getIntList()\n\ty-=1\n\tx-=1\n\tf = abs(y-x)\n\tif f%d ==0:\n\t\tprint(f//d)\n\t\tcontinue\n\tg1 = (x-1)//d + 1\n\tr1 = -1    \n\tif y%d==0:\n\t\tr1 = y//d + g1\n\tg2 = (n-1-x -1)//d + 1\n\tr2 = -1\n\tif (n-1 -y)%d==0:\n\t\tr2 = (n-1-y)//d + g2\n\tif r1>0 and r2 >0:\n\t\tprint(min(r1,r2))\n\t\tcontinue\n\tprint(max(r1,r2))\n\n\n\t\n\n\n", "t = int(input())\n\nfor i in range(t):\n\tn, x, y, d = list(map(int, input().split()))\n\tw = []\n\tif x % d == y % d:\n\t\tw.append(abs(y - x) // d)\n\tif y % d == 1 % d:\n\t\tw.append(((x + d - 1) // d + y // d))\n\tif y % d == n % d:\n\t\tw.append((n - x + d - 1) // d + (n - y) // d)\n\tif w:\n\t\tprint(min(w))\n\telse:\n\t\tprint(-1)\n", "def get(x, y, d):\n\tif abs(x - y) % d == 0:\n\t\treturn abs(x - y) // d\n\treturn -1\n\ndef moves(x, y, d):\n\treturn (abs(x - y) + d - 1) // d\n\nT = int(input())\nfor _ in range(T):\n\t(n, x, y, d) = list(map(int, input().split(' ')))\n\tans = int(2e9)\n\tif abs(x - y) % d == 0:\n\t\tans = abs(x - y) // d\n\telse:\n\t\tif get(1, y, d) != -1:\n\t\t\tans = min(ans, moves(x, 1, d) + get(1, y, d))\n\t\tif get(n, y, d) != -1:\n\t\t\tans = min(ans, moves(x, n, d) + get(n, y, d))\n\tprint(ans if ans != int(2e9) else -1)\n", "t = int(input())\nfor i in range(t):\n\tn, x, y, d = list(map(int, input().split()))\n\tx -= 1\n\ty -= 1\n\tn -= 1\n\ta = abs(x - y)\n\t#print('a', a)\n\tif a % d == 0:\n\t\tprint(a // d)\n\t\tcontinue\n\tif (y % d != 0 and (n - y) % d != 0):\n\t\tprint(-1)\n\t\tcontinue\n\ti1 = max(0, (n - x + d - 1) // d) + (n - y) // d\n\tif (n - y) % d != 0:\n\t\ti1 = 1e10\n\ti2 = max(0, ((x + d - 1) // d)) + y // d\n\tif y % d != 0:\n\t\ti2 = 1e10\n\tprint(min(i1, i2))\n", "t = int(input())\nfor i in range(t):\n\tn, x, y, d = list(map(int, input().split()))\n\tx -= 1\n\ty -= 1\n\tif x % d == y % d:\n\t\tprint(abs(x - y) // d)\n\telif y % d == 0:\n\t\tans = x // d + 1 + y // d\n\t\tif (n - 1) % d == 0:\n\t\t\tans = min(ans, (n - 1 - x) // d + 1 + (n - 1 - y) // d)\n\t\tprint(ans)\n\telif y % d == (n - 1) % d:\n\t\tprint((n - 1 - x) // d + 1 + (n - 1 - y) // d)\n\telse:\n\t\tprint(-1)\n", "import math\nn = int(input())\n\ndef f(x, y, d):\n\tt = abs(x - y)\n\tif y == 1:\n\t\treturn math.ceil(t/d)\n\tif y == n:\n\t\treturn math.ceil(t/d)\n\tif t % d == 0:\n\t\treturn t//d\n\telse:\n\t\treturn 2*(10**9)\n\t\t\nfor i in range(n):\n\tn, x, y, d = list(map(int, input().split()))\n\tans = min([f(x, y, d), f(x, 1, d) + f(1, y, d), f(x, n, d) + f(n, y, d)])\n\tif ans == 2*(10**9):\n\t\tprint(\"-1\")\n\telse:\n\t\tprint(ans)\n", "t = int(input())\nfor i in range(t):\n\tn, x, y, d = map(int, input().split())\n\tif abs(y - x) % d == 0:\n\t\tprint(abs(y - x) // d)\n\telse:\n\t\tflag = False\n\t\tnum1, num2 = float(\"inf\"), float(\"inf\")\n\t\tif (n - y) % d == 0:\n\t\t\tflag = True\n\t\t\tnum1 = (n - y) // d + (n - x) // d + int((n - x) % d != 0)\n\t\tif (y - 1) % d == 0:\n\t\t\tflag = True\n\t\t\tnum2 = (y - 1) // d + (x - 1) // d + int((x - 1) % d != 0)\n\n\t\tif not flag:\n\t\t\tprint(-1)\n\t\telse:\n\t\t\tprint(min(num1, num2))\n", "T = int(input())\nfor i in range(T):\n\tt = input().split(' ')\n\tn,x,y,d = int(t[0]), int(t[1]), int(t[2]), int(t[3])\n\tif (y-x)%d==0:\n\t\tprint(abs(y-x)//d)\n\telse:\n\t\ta,b=-1,-1\n\t\tif (y-1)%d==0:\n\t\t\ta = (x-1)//d+1+(y-1)//d\n\t\tif (n-y)%d==0:\n\t\t\tb = (n-x)//d+1+(n-y)//d\n\t\tif a==-1 and b==-1:\n\t\t\tprint(-1)\n\t\telif a==-1:\n\t\t\tprint(b)\n\t\telif b==-1:\n\t\t\tprint(a)\n\t\telse:\n\t\t\tprint(min(a,b))\n", "import math\nn = int(input())\nfor i in range(n):\n\tc1, c2, c3 = 1e11, 1e11, 1e11\n\tn, x, y, d = list(map(int, input().split()))\n\tif (abs(y - x) % d == 0):\n\t\tc3 = abs((y - x))//d\n\telse:\n\t\tif (abs(y - 1) % d == 0):\n\t\t\tc1 = math.ceil((x - 1) / d) + ((y - 1) // d)\n\t\tif (abs(n - y) % d == 0):\n\t\t\tc2 = math.ceil((n - x) / d) + (abs((y - n)) // d)\n\tm = min(c1, c2, c3)\n\tif (m == 1e11):\n\t\tprint(-1)\n\telse:\n\t\tprint(m)\n\t\t\n", "m = int(input())\nfor q in range(m):\n\tn, x, y, d = list(map(int, input().split()))\n\tanswer = float('inf')\n\tif y % d == 1:\n\t\tanswer = (x-2)//d+1+(y-1)//d\n\tif y % d == n % d:\n\t\tanswer = min(answer, (n-x-1)//d+1+(n-y)//d)\n\tif y % d == x % d:\n\t\tanswer = min(answer, abs(x-y)//d)\n\tif answer == float('inf'):\n\t\tprint(-1)\n\telse:\n\t\tprint(answer)\n", "3.5\nfrom math import ceil\n\nT = int(input())\nfor i in range(0, T):\n\tn, x, y, d = [*list(map(int, input().split()))]\n\tif y == 1 or y == n:\n\t\tprint(int(ceil(abs(x-y)/d)))\n\telse:\n\t\tif abs(x-y)%d == 0:\n\t\t\tprint(abs(x-y)//d)\n\t\telse:\n\t\t\tif (y-1)%d == 0 and (n-y)%d == 0:\n\t\t\t\tret1 = (y-1)//d + int(ceil(abs(x-1)/d))\n\t\t\t\tret2 = (n-y)//d + int(ceil(abs(n-x)/d))\n\n\t\t\t\tprint(min(ret1, ret2))\n\n\t\t\telif (y-1)%d == 0:\n\t\t\t\tprint((y-1)//d + int(ceil(abs(x-1)/d)))\n\t\t\telif (n-y)%d == 0:\n\t\t\t\tprint((n-y)//d + int(ceil(abs(n-x)/d)))\n\t\t\telse:\n\t\t\t\tprint(-1)\n", "for i in range(int(input())):\n\tn,x,y,d=map(int,input().split())\n\tif y==1 or y==n:\n\t\tprint(abs(-abs(x-y)//d))\n\telif abs(x-y)%d==0:\n\t\tprint(abs(x-y)//d)\n\telif abs(1-y)%d==0 and abs(n-y)%d==0:\n\t\tprint(min(abs(-abs(x-1)//d)+(y-1)//d,abs(-abs(x-n)//d)+(n-y)//d))\n\telif abs(1-y)%d==0:\n\t\tprint(abs(-abs(x-1)//d)+(y-1)//d)\n\telif abs(n-y)%d==0:\n\t\tprint(abs(-abs(x-n)//d)+(n-y)//d)\n\telse:\n\t\tprint(-1)\n"], "id": "id5070"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5070", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["vasya", 2], ["is", 2], ["reading", 2], ["a", 2], ["e", 2], ["book", 2], ["the", 2], ["file", 2], ["of", 2], ["the", 2], ["book", 2], ["consists", 2], ["of", 2], ["n", 2], ["pages", 2], ["numbered", 2], ["from", 2], ["1", 2], ["to", 2], ["n", 2], ["the", 2], ["screen", 2], ["is", 2], ["currently", 2], ["displaying", 2], ["the", 2], ["contents", 2], ["of", 2], ["page", 2], ["x", 2], ["and", 2], ["vasya", 2], ["wants", 2], ["to", 2], ["read", 2], ["the", 2], ["page", 2], ["y", 2], ["there", 2], ["are", 2], ["two", 2], ["buttons", 2], ["on", 2], ["the", 2], ["book", 2], ["which", 2], ["allow", 2], ["vasya", 2], ["to", 2], ["scroll", 2], ["d", 2], ["pages", 2], ["forwards", 2], ["or", 2], ["backwards", 2], ["but", 2], ["he", 2], ["cannot", 2], ["scroll", 2], ["outside", 2], ["the", 2], ["book", 2], ["for", 2], ["example", 2], ["if", 2], ["the", 2], ["book", 2], ["consists", 2], ["of", 2], ["10", 2], ["pages", 2], ["and", 2], ["d", 2], ["3", 2], ["then", 2], ["from", 2], ["the", 2], ["first", 2], ["page", 2], ["vasya", 2], ["can", 2], ["scroll", 2], ["to", 2], ["the", 2], ["first", 2], ["or", 2], ["to", 2], ["the", 2], ["fourth", 2], ["page", 2], ["by", 2], ["pressing", 2], ["one", 2], ["of", 2], ["the", 2], ["buttons", 2], ["from", 2], ["the", 2], ["second", 2], ["page", 2], ["—", 2], ["to", 2], ["the", 2], ["first", 2], ["or", 2], ["to", 2], ["the", 2], ["fifth", 2], ["from", 2], ["the", 2], ["sixth", 2], ["page", 2], ["—", 2], ["to", 2], ["the", 2], ["third", 2], ["or", 2], ["to", 2], ["the", 2], ["ninth", 2], ["from", 2], ["the", 2], ["eighth", 2], ["—", 2], ["to", 2], ["the", 2], ["fifth", 2], ["or", 2], ["to", 2], ["the", 2], ["tenth", 2], ["help", 2], ["vasya", 2], ["to", 2], ["calculate", 2], ["the", 2], ["minimum", 2], ["number", 2], ["of", 2], ["times", 0], ["he", 0], ["needs", 0], ["to", 0], ["press", 0], ["a", 0], ["button", 0], ["to", 0], ["move", 0], ["to", 0], ["page", 0], ["y", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 2], ["contains", 2], ["one", 2], ["integer", 2], ["t", 2], ["1", 2], ["le", 2], ["t", 2], ["le", 2], ["10", 2], ["3", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["testcases", 2], ["each", 2], ["testcase", 2], ["is", 2], ["denoted", 2], ["by", 2], ["a", 2], ["line", 2], ["containing", 2], ["four", 2], ["integers", 2], ["n", 2], ["x", 2], ["y", 2], ["d", 2], ["1", 2], ["le", 2], ["n", 2], ["d", 2], ["le", 2], ["10", 2], ["9", 2], ["1", 2], ["le", 2], ["x", 2], ["y", 2], ["le", 2], ["n", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["pages", 2], ["the", 2], ["starting", 2], ["page", 2], ["the", 2], ["desired", 2], ["page", 0], ["and", 0], ["the", 0], ["number", 0], ["of", 0], ["pages", 0], ["scrolled", 0], ["by", 0], ["pressing", 0], ["one", 0], ["button", 0], ["respectively", 0], ["output", 0], ["print", 2], ["one", 2], ["line", 2], ["for", 2], ["each", 2], ["test", 2], ["if", 2], ["vasya", 2], ["can", 2], ["move", 2], ["from", 2], ["page", 2], ["x", 2], ["to", 2], ["page", 2], ["y", 2], ["print", 2], ["the", 2], ["minimum", 2], ["number", 2], ["of", 2], ["times", 2], ["he", 0], ["needs", 0], ["to", 0], ["press", 0], ["a", 0], ["button", 0], ["to", 0], ["do", 0], ["it", 0], ["otherwise", 0], ["print", 0], ["1", 0], ["example", 0], ["input", 0], ["3", 0], ["10", 0], ["4", 0], ["5", 0], ["2", 0], ["5", 0], ["1", 0], ["3", 0], ["4", 0], ["20", 0], ["4", 0], ["19", 0], ["3", 0], ["output", 0], ["4", 0], ["1", 0], ["5", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["test", 2], ["case", 2], ["the", 2], ["optimal", 2], ["sequence", 2], ["is", 2], ["4", 2], ["rightarrow", 2], ["2", 2], ["rightarrow", 2], ["1", 2], ["rightarrow", 2], ["3", 2], ["rightarrow", 2], ["5", 2], ["in", 2], ["the", 2], ["second", 2], ["test", 2], ["case", 2], ["it", 2], ["is", 2], ["possible", 2], ["to", 2], ["get", 2], ["to", 2], ["pages", 2], ["1", 2], ["and", 2], ["5", 2], ["in", 2], ["the", 2], ["third", 2], ["test", 2], ["case", 2], ["the", 2], ["optimal", 2], ["sequence", 2], ["is", 0], ["4", 0], ["rightarrow", 0], ["7", 0], ["rightarrow", 0], ["10", 0], ["rightarrow", 0], ["13", 0], ["rightarrow", 0], ["16", 0], ["rightarrow", 0], ["19", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7883435582822086, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3941717791411043, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9023668639053254, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4511834319526627, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7883435582822086, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3941717791411043, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9023668639053254, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4511834319526627, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["tt", 0], ["abs", 0], ["x", 0], ["y", 0], ["if", 0], ["tt", 0], ["d", 0], ["0", 0], ["ans", 0], ["1", 0], ["if", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["ans", 0], ["x", 0], ["1", 0], ["d", 0], ["1", 0], ["d", 0], ["y", 0], ["1", 0], ["d", 0], ["if", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["cc", 0], ["n", 0], ["x", 0], ["d", 0], ["1", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["if", 0], ["ans", 0], ["1", 0], ["or", 0], ["cc", 0], ["ans", 0], ["ans", 0], ["cc", 0], ["print", 0], ["ans", 0], ["else", 0], ["print", 0], ["tt", 0], ["d", 0], ["df", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["df", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d2", 0], ["abs", 0], ["x", 0], ["y", 0], ["ans", 0], ["3e9", 0], ["if", 0], ["d2", 0], ["d", 0], ["0", 0], ["ans", 0], ["d2", 0], ["d", 0], ["v", 0], ["abs", 0], ["x", 0], ["1", 0], ["v2", 0], ["abs", 0], ["x", 0], ["n", 0], ["e", 0], ["0", 0], ["if", 0], ["v", 0], ["d", 0], ["0", 0], ["e", 0], ["v", 0], ["d", 0], ["else", 0], ["e", 0], ["v", 0], ["d", 0], ["1", 0], ["to", 0], ["b", 0], ["e", 0], ["e", 0], ["0", 0], ["if", 0], ["v2", 0], ["d", 0], ["0", 0], ["e", 0], ["v2", 0], ["d", 0], ["else", 0], ["e", 0], ["v2", 0], ["d", 0], ["1", 0], ["to", 0], ["e", 0], ["e", 0], ["v3", 0], ["abs", 0], ["n", 0], ["y", 0], ["v4", 0], ["abs", 0], ["1", 0], ["y", 0], ["if", 0], ["v3", 0], ["d", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["v3", 0], ["d", 0], ["to", 0], ["e", 0], ["if", 0], ["v4", 0], ["d", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["v4", 0], ["d", 0], ["to", 0], ["b", 0], ["if", 0], ["ans", 0], ["2e9", 0], ["print", 0], ["ans", 0], ["else", 0], ["print", 0], ["1", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["q", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["y", 0], ["x", 0], ["d", 0], ["0", 0], ["print", 0], ["abs", 0], ["y", 0], ["x", 0], ["d", 0], ["elif", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["and", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["a", 0], ["ceil", 0], ["x", 0], ["1", 0], ["d", 0], ["y", 0], ["1", 0], ["d", 0], ["b", 0], ["ceil", 0], ["n", 0], ["x", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["print", 0], ["min", 0], ["a", 0], ["b", 0], ["elif", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["print", 0], ["ceil", 0], ["x", 0], ["1", 0], ["d", 0], ["y", 0], ["1", 0], ["d", 0], ["elif", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["ceil", 0], ["n", 0], ["x", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["else", 0], ["print", 0], ["1", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["abs", 0], ["y", 0], ["x", 0], ["d", 0], ["0", 0], ["or", 0], ["y", 0], ["1", 0], ["or", 0], ["y", 0], ["n", 0], ["print", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["1", 0], ["d", 0], ["else", 0], ["if", 0], ["abs", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["and", 0], ["abs", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["min", 0], ["x", 0], ["1", 0], ["d", 0], ["1", 0], ["d", 0], ["y", 0], ["1", 0], ["d", 0], ["n", 0], ["x", 0], ["d", 0], ["1", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["elif", 0], ["abs", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["and", 0], ["abs", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["1", 0], ["elif", 0], ["abs", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["print", 0], ["x", 0], ["1", 0], ["d", 0], ["1", 0], ["d", 0], ["y", 0], ["1", 0], ["d", 0], ["else", 0], ["print", 0], ["n", 0], ["x", 0], ["d", 0], ["1", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["t", 0], ["int", 0], ["input", 0], ["inf", 0], ["10000000000", 0], ["for", 0], ["t", 0], ["num", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["start", 0], ["end", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["inf", 0], ["if", 0], ["abs", 0], ["end", 0], ["start", 0], ["d", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["abs", 0], ["end", 0], ["start", 0], ["d", 0], ["if", 0], ["n", 0], ["end", 0], ["d", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["n", 0], ["end", 0], ["d", 0], ["n", 0], ["start", 0], ["d", 0], ["1", 0], ["d", 0], ["if", 0], ["end", 0], ["1", 0], ["d", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["end", 0], ["1", 0], ["d", 0], ["start", 0], ["1", 0], ["d", 0], ["1", 0], ["d", 0], ["if", 0], ["ans", 0], ["inf", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["ans", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["64", 0], ["if", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["0", 0], ["ans", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["if", 0], ["abs", 0], ["1", 0], ["y", 0], ["d", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["abs", 0], ["x", 0], ["1", 0], ["d", 0], ["1", 0], ["d", 0], ["abs", 0], ["1", 0], ["y", 0], ["d", 0], ["if", 0], ["abs", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["abs", 0], ["x", 0], ["n", 0], ["d", 0], ["1", 0], ["d", 0], ["abs", 0], ["n", 0], ["y", 0], ["d", 0], ["print", 0], ["ans", 0], ["if", 0], ["ans", 0], ["1", 0], ["64", 0], ["else", 0], ["1", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["else", 0], ["res", 0], ["10000000000", 0], ["if", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["res", 0], ["min", 0], ["res", 0], ["x", 0], ["1", 0], ["d", 0], ["y", 0], ["1", 0], ["d", 0], ["if", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["res", 0], ["min", 0], ["res", 0], ["n", 0], ["x", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["if", 0], ["res", 0], ["10000000000", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["def", 0], ["mi", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["3", 0], ["10", 0], ["4", 0], ["5", 0], ["2", 0], ["5", 0], ["1", 0], ["3", 0], ["4", 0], ["20", 0], ["4", 0], ["19", 0], ["3", 0], ["import", 0], ["math", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["mi", 0], ["if", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["else", 0], ["ans1", 0], ["math", 0], ["ceil", 0], ["x", 0], ["1", 0], ["d", 0], ["ans2", 0], ["math", 0], ["ceil", 0], ["n", 0], ["x", 0], ["d", 0], ["if", 0], ["abs", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["ans1", 0], ["y", 0], ["1", 0], ["d", 0], ["else", 0], ["ans1", 0], ["1e19", 0], ["if", 0], ["abs", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["ans2", 0], ["n", 0], ["y", 0], ["d", 0], ["else", 0], ["ans2", 0], ["1e19", 0], ["if", 0], ["min", 0], ["ans1", 0], ["ans2", 0], ["1e19", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["min", 0], ["ans1", 0], ["ans2", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["def", 0], ["solve", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["inf", 0], ["1e9", 0], ["sol1", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["if", 0], ["x", 0], ["y", 0], ["d", 0], ["0", 0], ["else", 0], ["inf", 0], ["sol2", 0], ["ceil", 0], ["x", 0], ["1", 0], ["d", 0], ["ceil", 0], ["y", 0], ["1", 0], ["d", 0], ["if", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["else", 0], ["inf", 0], ["sol3", 0], ["ceil", 0], ["n", 0], ["x", 0], ["d", 0], ["ceil", 0], ["n", 0], ["y", 0], ["d", 0], ["if", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["else", 0], ["inf", 0], ["ans", 0], ["min", 0], ["sol1", 0], ["sol2", 0], ["sol3", 0], ["ans", 0], ["ans", 0], ["if", 0], ["ans", 0], ["inf", 0], ["else", 0], ["1", 0], ["print", 0], ["ans", 0], ["nt", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["nt", 0], ["solve", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["y", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["if", 0], ["x", 0], ["y", 0], ["and", 0], ["y", 0], ["x", 0], ["d", 0], ["0", 0], ["print", 0], ["y", 0], ["x", 0], ["d", 0], ["continue", 0], ["if", 0], ["y", 0], ["x", 0], ["and", 0], ["x", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["x", 0], ["y", 0], ["d", 0], ["continue", 0], ["if", 0], ["y", 0], ["d", 0], ["0", 0], ["and", 0], ["n", 0], ["1", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["min", 0], ["x", 0], ["y", 0], ["d", 0], ["1", 0], ["d", 0], ["n", 0], ["1", 0], ["y", 0], ["d", 0], ["1", 0], ["d", 0], ["n", 0], ["1", 0], ["x", 0], ["d", 0], ["1", 0], ["d", 0], ["continue", 0], ["if", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["x", 0], ["y", 0], ["d", 0], ["1", 0], ["d", 0], ["continue", 0], ["if", 0], ["n", 0], ["1", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["n", 0], ["1", 0], ["y", 0], ["d", 0], ["1", 0], ["d", 0], ["n", 0], ["1", 0], ["x", 0], ["d", 0], ["1", 0], ["d", 0], ["continue", 0], ["print", 0], ["1", 0], ["import", 0], ["math", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["y", 0], ["n", 0], ["and", 0], ["y", 0], ["1", 0], ["if", 0], ["abs", 0], ["y", 0], ["x", 0], ["d", 0], ["0", 0], ["print", 0], ["abs", 0], ["y", 0], ["x", 0], ["d", 0], ["else", 0], ["if", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["if", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["math", 0], ["ceil", 0], ["x", 0], ["1", 0], ["d", 0], ["y", 0], ["1", 0], ["d", 0], ["else", 0], ["print", 0], ["min", 0], ["math", 0], ["ceil", 0], ["x", 0], ["1", 0], ["d", 0], ["y", 0], ["1", 0], ["d", 0], ["math", 0], ["ceil", 0], ["n", 0], ["x", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["else", 0], ["if", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["math", 0], ["ceil", 0], ["n", 0], ["x", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["else", 0], ["if", 0], ["y", 0], ["1", 0], ["print", 0], ["math", 0], ["ceil", 0], ["x", 0], ["1", 0], ["d", 0], ["else", 0], ["print", 0], ["math", 0], ["ceil", 0], ["n", 0], ["x", 0], ["d", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["else", 0], ["ans", 0], ["10", 0], ["10", 0], ["if", 0], ["abs", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["abs", 0], ["y", 0], ["1", 0], ["d", 0], ["abs", 0], ["x", 0], ["1", 0], ["d", 0], ["if", 0], ["abs", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["abs", 0], ["y", 0], ["n", 0], ["d", 0], ["abs", 0], ["x", 0], ["n", 0], ["d", 0], ["if", 0], ["ans", 0], ["10", 0], ["10", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["ans", 0], ["import", 0], ["collections", 0], ["atexit", 0], ["math", 0], ["sys", 0], ["bisect", 0], ["sys", 0], ["setrecursionlimit", 0], ["1000000", 0], ["def", 0], ["getintlist", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["try", 0], ["raise", 0], ["modulenotfounderror", 0], ["import", 0], ["numpy", 0], ["def", 0], ["dprint", 0], ["args", 0], ["kwargs", 0], ["print", 0], ["args", 0], ["kwargs", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["in", 0], ["python", 0], ["3", 0], ["4", 0], ["kwargs", 0], ["is", 0], ["invalid", 0], ["print", 0], ["args", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["dprint", 0], ["debug", 0], ["mode", 0], ["except", 0], ["exception", 0], ["def", 0], ["dprint", 0], ["args", 0], ["kwargs", 0], ["pass", 0], ["inid", 0], ["0", 0], ["outid", 0], ["0", 0], ["if", 0], ["inid", 0], ["0", 0], ["dprint", 0], ["use", 0], ["input", 0], ["inid", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["input", 0], ["str", 0], ["inid", 0], ["txt", 0], ["r", 0], ["标准输出重定向至文件", 0], ["if", 0], ["outid", 0], ["0", 0], ["dprint", 0], ["use", 0], ["output", 0], ["outid", 0], ["sys", 0], ["stdout", 0], ["open", 0], ["stdout", 0], ["str", 0], ["outid", 0], ["txt", 0], ["w", 0], ["标准输出重定向至文件", 0], ["atexit", 0], ["register", 0], ["lambda", 0], ["sys", 0], ["stdout", 0], ["close", 0], ["idle", 0], ["中不会执行", 0], ["atexit", 0], ["t", 0], ["getintlist", 0], ["print", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["getintlist", 0], ["y", 0], ["1", 0], ["x", 0], ["1", 0], ["f", 0], ["abs", 0], ["y", 0], ["x", 0], ["if", 0], ["f", 0], ["d", 0], ["0", 0], ["print", 0], ["f", 0], ["d", 0], ["continue", 0], ["g1", 0], ["x", 0], ["1", 0], ["d", 0], ["1", 0], ["r1", 0], ["1", 0], ["if", 0], ["y", 0], ["d", 0], ["0", 0], ["r1", 0], ["y", 0], ["d", 0], ["g1", 0], ["g2", 0], ["n", 0], ["1", 0], ["x", 0], ["1", 0], ["d", 0], ["1", 0], ["r2", 0], ["1", 0], ["if", 0], ["n", 0], ["1", 0], ["y", 0], ["d", 0], ["0", 0], ["r2", 0], ["n", 0], ["1", 0], ["y", 0], ["d", 0], ["g2", 0], ["if", 0], ["r1", 0], ["0", 0], ["and", 0], ["r2", 0], ["0", 0], ["print", 0], ["min", 0], ["r1", 0], ["r2", 0], ["continue", 0], ["print", 0], ["max", 0], ["r1", 0], ["r2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["w", 0], ["if", 0], ["x", 0], ["d", 0], ["y", 0], ["d", 0], ["w", 0], ["append", 0], ["abs", 0], ["y", 0], ["x", 0], ["d", 0], ["if", 0], ["y", 0], ["d", 0], ["1", 0], ["d", 0], ["w", 0], ["append", 0], ["x", 0], ["d", 0], ["1", 0], ["d", 0], ["y", 0], ["d", 0], ["if", 0], ["y", 0], ["d", 0], ["n", 0], ["d", 0], ["w", 0], ["append", 0], ["n", 0], ["x", 0], ["d", 0], ["1", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["if", 0], ["w", 0], ["print", 0], ["min", 0], ["w", 0], ["else", 0], ["print", 0], ["1", 0], ["def", 0], ["get", 0], ["x", 0], ["y", 0], ["d", 0], ["if", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["0", 0], ["return", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["return", 0], ["1", 0], ["def", 0], ["moves", 0], ["x", 0], ["y", 0], ["d", 0], ["return", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["1", 0], ["d", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["int", 0], ["2e9", 0], ["if", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["0", 0], ["ans", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["else", 0], ["if", 0], ["get", 0], ["1", 0], ["y", 0], ["d", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["moves", 0], ["x", 0], ["1", 0], ["d", 0], ["get", 0], ["1", 0], ["y", 0], ["d", 0], ["if", 0], ["get", 0], ["n", 0], ["y", 0], ["d", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["moves", 0], ["x", 0], ["n", 0], ["d", 0], ["get", 0], ["n", 0], ["y", 0], ["d", 0], ["print", 0], ["ans", 0], ["if", 0], ["ans", 0], ["int", 0], ["2e9", 0], ["else", 0], ["1", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["n", 0], ["1", 0], ["a", 0], ["abs", 0], ["x", 0], ["y", 0], ["print", 0], ["a", 0], ["a", 0], ["if", 0], ["a", 0], ["d", 0], ["0", 0], ["print", 0], ["a", 0], ["d", 0], ["continue", 0], ["if", 0], ["y", 0], ["d", 0], ["0", 0], ["and", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["1", 0], ["continue", 0], ["i1", 0], ["max", 0], ["0", 0], ["n", 0], ["x", 0], ["d", 0], ["1", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["if", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["i1", 0], ["1e10", 0], ["i2", 0], ["max", 0], ["0", 0], ["x", 0], ["d", 0], ["1", 0], ["d", 0], ["y", 0], ["d", 0], ["if", 0], ["y", 0], ["d", 0], ["0", 0], ["i2", 0], ["1e10", 0], ["print", 0], ["min", 0], ["i1", 0], ["i2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["if", 0], ["x", 0], ["d", 0], ["y", 0], ["d", 0], ["print", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["elif", 0], ["y", 0], ["d", 0], ["0", 0], ["ans", 0], ["x", 0], ["d", 0], ["1", 0], ["y", 0], ["d", 0], ["if", 0], ["n", 0], ["1", 0], ["d", 0], ["0", 0], ["ans", 0], ["min", 0], ["ans", 0], ["n", 0], ["1", 0], ["x", 0], ["d", 0], ["1", 0], ["n", 0], ["1", 0], ["y", 0], ["d", 0], ["print", 0], ["ans", 0], ["elif", 0], ["y", 0], ["d", 0], ["n", 0], ["1", 0], ["d", 0], ["print", 0], ["n", 0], ["1", 0], ["x", 0], ["d", 0], ["1", 0], ["n", 0], ["1", 0], ["y", 0], ["d", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["def", 0], ["f", 0], ["x", 0], ["y", 0], ["d", 0], ["t", 0], ["abs", 0], ["x", 0], ["y", 0], ["if", 0], ["y", 0], ["1", 0], ["return", 0], ["math", 0], ["ceil", 0], ["t", 0], ["d", 0], ["if", 0], ["y", 0], ["n", 0], ["return", 0], ["math", 0], ["ceil", 0], ["t", 0], ["d", 0], ["if", 0], ["t", 0], ["d", 0], ["0", 0], ["return", 0], ["t", 0], ["d", 0], ["else", 0], ["return", 0], ["2", 0], ["10", 0], ["9", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["min", 0], ["f", 0], ["x", 0], ["y", 0], ["d", 0], ["f", 0], ["x", 0], ["1", 0], ["d", 0], ["f", 0], ["1", 0], ["y", 0], ["d", 0], ["f", 0], ["x", 0], ["n", 0], ["d", 0], ["f", 0], ["n", 0], ["y", 0], ["d", 0], ["if", 0], ["ans", 0], ["2", 0], ["10", 0], ["9", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["ans", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["abs", 0], ["y", 0], ["x", 0], ["d", 0], ["0", 0], ["print", 0], ["abs", 0], ["y", 0], ["x", 0], ["d", 0], ["else", 0], ["flag", 0], ["false", 0], ["num1", 0], ["num2", 0], ["float", 0], ["inf", 0], ["float", 0], ["inf", 0], ["if", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["flag", 0], ["true", 0], ["num1", 0], ["n", 0], ["y", 0], ["d", 0], ["n", 0], ["x", 0], ["d", 0], ["int", 0], ["n", 0], ["x", 0], ["d", 0], ["0", 0], ["if", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["flag", 0], ["true", 0], ["num2", 0], ["y", 0], ["1", 0], ["d", 0], ["x", 0], ["1", 0], ["d", 0], ["int", 0], ["x", 0], ["1", 0], ["d", 0], ["0", 0], ["if", 0], ["not", 0], ["flag", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["min", 0], ["num1", 0], ["num2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["t", 0], ["input", 0], ["split", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["int", 0], ["t", 0], ["0", 0], ["int", 0], ["t", 0], ["1", 0], ["int", 0], ["t", 0], ["2", 0], ["int", 0], ["t", 0], ["3", 0], ["if", 0], ["y", 0], ["x", 0], ["d", 0], ["0", 0], ["print", 0], ["abs", 0], ["y", 0], ["x", 0], ["d", 0], ["else", 0], ["a", 0], ["b", 0], ["1", 0], ["1", 0], ["if", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["a", 0], ["x", 0], ["1", 0], ["d", 0], ["1", 0], ["y", 0], ["1", 0], ["d", 0], ["if", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["b", 0], ["n", 0], ["x", 0], ["d", 0], ["1", 0], ["n", 0], ["y", 0], ["d", 0], ["if", 0], ["a", 0], ["1", 0], ["and", 0], ["b", 0], ["1", 0], ["print", 0], ["1", 0], ["elif", 0], ["a", 0], ["1", 0], ["print", 0], ["b", 0], ["elif", 0], ["b", 0], ["1", 0], ["print", 0], ["a", 0], ["else", 0], ["print", 0], ["min", 0], ["a", 0], ["b", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["c1", 0], ["c2", 0], ["c3", 0], ["1e11", 0], ["1e11", 0], ["1e11", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["abs", 0], ["y", 0], ["x", 0], ["d", 0], ["0", 0], ["c3", 0], ["abs", 0], ["y", 0], ["x", 0], ["d", 0], ["else", 0], ["if", 0], ["abs", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["c1", 0], ["math", 0], ["ceil", 0], ["x", 0], ["1", 0], ["d", 0], ["y", 0], ["1", 0], ["d", 0], ["if", 0], ["abs", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["c2", 0], ["math", 0], ["ceil", 0], ["n", 0], ["x", 0], ["d", 0], ["abs", 0], ["y", 0], ["n", 0], ["d", 0], ["m", 0], ["min", 0], ["c1", 0], ["c2", 0], ["c3", 0], ["if", 0], ["m", 0], ["1e11", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["m", 0], ["m", 0], ["int", 0], ["input", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["m", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["answer", 0], ["float", 0], ["inf", 0], ["if", 0], ["y", 0], ["d", 0], ["1", 0], ["answer", 0], ["x", 0], ["2", 0], ["d", 0], ["1", 0], ["y", 0], ["1", 0], ["d", 0], ["if", 0], ["y", 0], ["d", 0], ["n", 0], ["d", 0], ["answer", 0], ["min", 0], ["answer", 0], ["n", 0], ["x", 0], ["1", 0], ["d", 0], ["1", 0], ["n", 0], ["y", 0], ["d", 0], ["if", 0], ["y", 0], ["d", 0], ["x", 0], ["d", 0], ["answer", 0], ["min", 0], ["answer", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["if", 0], ["answer", 0], ["float", 0], ["inf", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["answer", 0], ["3", 0], ["5", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["t", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["y", 0], ["1", 0], ["or", 0], ["y", 0], ["n", 0], ["print", 0], ["int", 0], ["ceil", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["else", 0], ["if", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["else", 0], ["if", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["and", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["ret1", 0], ["y", 0], ["1", 0], ["d", 0], ["int", 0], ["ceil", 0], ["abs", 0], ["x", 0], ["1", 0], ["d", 0], ["ret2", 0], ["n", 0], ["y", 0], ["d", 0], ["int", 0], ["ceil", 0], ["abs", 0], ["n", 0], ["x", 0], ["d", 0], ["print", 0], ["min", 0], ["ret1", 0], ["ret2", 0], ["elif", 0], ["y", 0], ["1", 0], ["d", 0], ["0", 0], ["print", 0], ["y", 0], ["1", 0], ["d", 0], ["int", 0], ["ceil", 0], ["abs", 0], ["x", 0], ["1", 0], ["d", 0], ["elif", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["n", 0], ["y", 0], ["d", 0], ["int", 0], ["ceil", 0], ["abs", 0], ["n", 0], ["x", 0], ["d", 0], ["else", 0], ["print", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["x", 0], ["y", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["y", 0], ["1", 0], ["or", 0], ["y", 0], ["n", 0], ["print", 0], ["abs", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["elif", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["abs", 0], ["x", 0], ["y", 0], ["d", 0], ["elif", 0], ["abs", 0], ["1", 0], ["y", 0], ["d", 0], ["0", 0], ["and", 0], ["abs", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["min", 0], ["abs", 0], ["abs", 0], ["x", 0], ["1", 0], ["d", 0], ["y", 0], ["1", 0], ["d", 0], ["abs", 0], ["abs", 0], ["x", 0], ["n", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["elif", 0], ["abs", 0], ["1", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["abs", 0], ["abs", 0], ["x", 0], ["1", 0], ["d", 0], ["y", 0], ["1", 0], ["d", 0], ["elif", 0], ["abs", 0], ["n", 0], ["y", 0], ["d", 0], ["0", 0], ["print", 0], ["abs", 0], ["abs", 0], ["x", 0], ["n", 0], ["d", 0], ["n", 0], ["y", 0], ["d", 0], ["else", 0], ["print", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou run a delivery company and must deploy a fleet of vehicles to deliver goods to clients. All of the goods and delivery trucks are initially located at your warehouse. \n\nThe road network consists of one-way streets between junctions. The warehouse and clients are all located at a junction. You know the driving time across each street.\n\nYou guarantee extremely fast shipping: the trucks start driving immediately at the start of the day and each client $i$ will receive the package at time $T_ i$ where $T_ i$ is the shortest possible driving time for a truck to go from the warehouse to the location of the client $i$.\n\nWhat is the minimum number of trucks you have to deploy to ensure this guarantee is met? That is, what is the minimum number of trucks such that it is possible to give each truck a driving route so that every client $i$ is visited by some truck at time $T_ i$. Assume it takes no time to load the trucks with the appropriate goods at the start of the day, and it takes no time to drop goods off at a client once the truck arrives at the client. These goods are small enough that each truck can carry goods for as many clients as necessary.\n\n-----Input-----\nThe input consists of a single test case. The first line of each test case consists of three numbers $N$, $M$, and $C$. Here $N$ denotes the number of junctions in the road network ($2 \\leq N \\leq 10^3$), $M$ denotes the number of streets ($1 \\leq M \\leq 10^5$), and $C$ denotes the number of clients ($1 \\leq C \\leq 300$, $C < N$).\n\nThe junctions are numbered $0$ to $N-1$. The warehouse is always at junction $0$. The second line consists of $C$ distinct integers between $1$ and $N-1$ indicating the junctions where the clients reside.\n\nThe rest of the input consists of $M$ lines, each containing integers $U,V,W$ where $0 \\leq U,V \\leq N-1$ and $U \\neq V$. This indicates there is a one-way street from $U$ to $V$ with driving time $W$. Each street’s driving time $W$ satisfies $1 \\leq W \\leq 10^9$. It will always be possible to reach every client from the warehouse.\n\nThere will be at most one street from a vertex $U$ to another vertex $V$, but there may be streets from both $U$ to $V$ and from $V$ to $U$.\n\n-----Output-----\nOutput a single integer that is the minimum number of vehicles required to ensure each client $i$ is visited at time $T_ i$ by some vehicle.\n\n-----Explanations of Sample Inputs-----\nIn the first sample, one vehicle can follow the path $(0,1,2)$ and the other can follow $(0,3)$. In the second sample, the only solution is to use paths $(0,1)$, $(0,2)$, and $(0,3)$. In the final sample, one vehicle can follow $(0,1)$, another $(0,4,6)$, and the last one $(0,2,3,5,7)$.\n\n-----Examples-----\nSample Input 1:\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 2\n1 2 1\n3 2 1\nSample Output 1:\n2\n\nSample Input 2:\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\nSample Output 2:\n3\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6778"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6778", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["run", 1], ["a", 1], ["delivery", 1], ["company", 1], ["and", 1], ["must", 1], ["deploy", 1], ["a", 1], ["fleet", 1], ["of", 1], ["vehicles", 1], ["to", 1], ["deliver", 1], ["goods", 1], ["to", 1], ["clients", 1], ["all", 1], ["of", 1], ["the", 1], ["goods", 1], ["and", 1], ["delivery", 1], ["trucks", 1], ["are", 1], ["initially", 1], ["located", 1], ["at", 1], ["your", 1], ["warehouse", 1], ["the", 1], ["road", 1], ["network", 1], ["consists", 1], ["of", 1], ["one", 1], ["way", 1], ["streets", 1], ["between", 1], ["junctions", 1], ["the", 1], ["warehouse", 1], ["and", 1], ["clients", 1], ["are", 1], ["all", 1], ["located", 1], ["at", 1], ["a", 1], ["junction", 1], ["you", 1], ["know", 1], ["the", 1], ["driving", 1], ["time", 1], ["across", 1], ["each", 1], ["street", 1], ["you", 2], ["guarantee", 2], ["extremely", 2], ["fast", 2], ["shipping", 2], ["the", 2], ["trucks", 2], ["start", 2], ["driving", 2], ["immediately", 2], ["at", 2], ["the", 2], ["start", 2], ["of", 2], ["the", 1], ["day", 1], ["and", 1], ["each", 1], ["client", 1], ["i", 1], ["will", 1], ["receive", 1], ["the", 1], ["package", 1], ["at", 1], ["time", 1], ["t", 1], ["i", 1], ["where", 1], ["t", 1], ["i", 1], ["is", 2], ["the", 2], ["shortest", 2], ["possible", 2], ["driving", 2], ["time", 2], ["for", 2], ["a", 2], ["truck", 2], ["to", 1], ["go", 1], ["from", 1], ["the", 1], ["warehouse", 1], ["to", 1], ["the", 1], ["location", 1], ["of", 1], ["the", 1], ["client", 1], ["i", 1], ["what", 1], ["is", 1], ["the", 1], ["minimum", 1], ["number", 1], ["of", 1], ["trucks", 1], ["you", 1], ["have", 1], ["to", 1], ["deploy", 1], ["to", 1], ["ensure", 1], ["this", 1], ["guarantee", 1], ["is", 1], ["met", 1], ["that", 1], ["is", 1], ["what", 1], ["is", 1], ["the", 1], ["minimum", 1], ["number", 1], ["of", 1], ["trucks", 1], ["such", 1], ["that", 1], ["it", 1], ["is", 1], ["possible", 1], ["to", 1], ["give", 1], ["each", 1], ["truck", 1], ["a", 1], ["driving", 1], ["route", 1], ["so", 1], ["that", 1], ["every", 1], ["client", 1], ["i", 1], ["is", 1], ["visited", 1], ["by", 1], ["some", 1], ["truck", 1], ["at", 1], ["time", 1], ["t", 1], ["i", 1], ["assume", 1], ["it", 1], ["takes", 1], ["no", 1], ["time", 1], ["to", 1], ["load", 1], ["the", 1], ["trucks", 1], ["with", 1], ["the", 1], ["appropriate", 1], ["goods", 1], ["at", 1], ["the", 1], ["start", 1], ["of", 1], ["the", 1], ["day", 1], ["and", 1], ["it", 1], ["takes", 1], ["no", 1], ["time", 1], ["to", 1], ["drop", 1], ["goods", 1], ["off", 1], ["at", 1], ["a", 1], ["client", 1], ["once", 1], ["the", 1], ["truck", 1], ["arrives", 1], ["at", 1], ["the", 1], ["client", 1], ["these", 1], ["goods", 1], ["are", 1], ["small", 1], ["enough", 1], ["that", 0], ["each", 0], ["truck", 0], ["can", 0], ["carry", 0], ["goods", 0], ["for", 0], ["as", 0], ["many", 0], ["clients", 0], ["as", 0], ["necessary", 0], ["input", 0], ["the", 2], ["input", 2], ["consists", 2], ["of", 2], ["a", 2], ["single", 2], ["test", 2], ["case", 2], ["the", 2], ["first", 2], ["line", 2], ["of", 2], ["each", 2], ["test", 2], ["case", 2], ["consists", 2], ["of", 2], ["three", 2], ["numbers", 2], ["n", 2], ["m", 2], ["and", 2], ["c", 2], ["here", 1], ["n", 1], ["denotes", 1], ["the", 1], ["number", 1], ["of", 1], ["junctions", 1], ["in", 1], ["the", 1], ["road", 1], ["network", 1], ["2", 1], ["leq", 1], ["n", 1], ["leq", 1], ["10", 1], ["3", 1], ["m", 1], ["denotes", 1], ["the", 1], ["number", 1], ["of", 1], ["streets", 1], ["1", 1], ["leq", 1], ["m", 1], ["leq", 1], ["10", 1], ["5", 1], ["and", 1], ["c", 1], ["denotes", 1], ["the", 1], ["number", 1], ["of", 1], ["clients", 1], ["1", 1], ["leq", 1], ["c", 1], ["leq", 1], ["300", 1], ["c", 1], ["n", 1], ["the", 1], ["junctions", 1], ["are", 1], ["numbered", 1], ["0", 1], ["to", 1], ["n", 1], ["1", 2], ["the", 2], ["warehouse", 2], ["is", 2], ["always", 2], ["at", 2], ["junction", 2], ["0", 2], ["the", 1], ["second", 1], ["line", 1], ["consists", 1], ["of", 1], ["c", 1], ["distinct", 1], ["integers", 1], ["between", 1], ["1", 1], ["and", 1], ["n", 1], ["1", 2], ["indicating", 2], ["the", 2], ["junctions", 2], ["where", 2], ["the", 2], ["clients", 2], ["reside", 2], ["the", 2], ["rest", 2], ["of", 2], ["the", 2], ["input", 2], ["consists", 1], ["of", 1], ["m", 1], ["lines", 1], ["each", 1], ["containing", 1], ["integers", 1], ["u", 1], ["v", 1], ["w", 1], ["where", 1], ["0", 1], ["leq", 1], ["u", 1], ["v", 1], ["leq", 1], ["n", 1], ["1", 1], ["and", 1], ["u", 1], ["neq", 1], ["v", 2], ["this", 2], ["indicates", 2], ["there", 2], ["is", 2], ["a", 2], ["one", 2], ["way", 2], ["street", 2], ["from", 2], ["u", 2], ["to", 2], ["v", 1], ["with", 1], ["driving", 1], ["time", 1], ["w", 1], ["each", 1], ["street’s", 1], ["driving", 1], ["time", 1], ["w", 1], ["satisfies", 1], ["1", 1], ["leq", 1], ["w", 1], ["leq", 1], ["10", 1], ["9", 1], ["it", 2], ["will", 2], ["always", 2], ["be", 2], ["possible", 2], ["to", 2], ["reach", 2], ["every", 2], ["client", 2], ["from", 2], ["the", 2], ["warehouse", 2], ["there", 2], ["will", 2], ["be", 2], ["at", 2], ["most", 2], ["one", 2], ["street", 2], ["from", 2], ["a", 2], ["vertex", 2], ["u", 2], ["to", 2], ["another", 2], ["vertex", 2], ["v", 2], ["but", 2], ["there", 2], ["may", 2], ["be", 2], ["streets", 0], ["from", 0], ["both", 0], ["u", 0], ["to", 0], ["v", 0], ["and", 0], ["from", 0], ["v", 0], ["to", 0], ["u", 0], ["output", 0], ["output", 2], ["a", 2], ["single", 2], ["integer", 2], ["that", 2], ["is", 2], ["the", 2], ["minimum", 2], ["number", 2], ["of", 1], ["vehicles", 1], ["required", 1], ["to", 1], ["ensure", 1], ["each", 0], ["client", 0], ["i", 0], ["is", 0], ["visited", 0], ["at", 0], ["time", 0], ["t", 0], ["i", 0], ["by", 0], ["some", 0], ["vehicle", 0], ["explanations", 0], ["of", 0], ["sample", 0], ["inputs", 0], ["in", 2], ["the", 2], ["first", 2], ["sample", 2], ["one", 2], ["vehicle", 2], ["can", 2], ["follow", 2], ["the", 2], ["path", 2], ["0", 2], ["1", 2], ["2", 2], ["and", 2], ["the", 2], ["other", 2], ["can", 2], ["follow", 2], ["0", 2], ["3", 2], ["in", 2], ["the", 2], ["second", 2], ["sample", 2], ["the", 2], ["only", 2], ["solution", 2], ["is", 2], ["to", 2], ["use", 2], ["paths", 2], ["0", 2], ["1", 2], ["0", 2], ["2", 2], ["and", 2], ["0", 2], ["3", 2], ["in", 2], ["the", 2], ["final", 2], ["sample", 2], ["one", 2], ["vehicle", 2], ["can", 2], ["follow", 2], ["0", 2], ["1", 2], ["another", 2], ["0", 0], ["4", 0], ["6", 0], ["and", 0], ["the", 0], ["last", 0], ["one", 0], ["0", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["5", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["3", 0], ["1", 0], ["0", 0], ["2", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["2", 0], ["1", 0], ["sample", 0], ["output", 0], ["1", 0], ["2", 0], ["sample", 0], ["input", 0], ["2", 0], ["4", 0], ["5", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["3", 0], ["1", 0], ["0", 0], ["2", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["2", 0], ["1", 0], ["sample", 0], ["output", 0], ["2", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8067375886524822, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6578014184397163, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8732638888888888, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8003472222222222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8067375886524822, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6578014184397163, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8732638888888888, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8003472222222222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nBerland is going through tough times — the dirt price has dropped and that is a blow to the country's economy. Everybody knows that Berland is the top world dirt exporter!\n\nThe President of Berland was forced to leave only k of the currently existing n subway stations.\n\nThe subway stations are located on a straight line one after another, the trains consecutively visit the stations as they move. You can assume that the stations are on the Ox axis, the i-th station is at point with coordinate x_{i}. In such case the distance between stations i and j is calculated by a simple formula |x_{i} - x_{j}|.\n\nCurrently, the Ministry of Transport is choosing which stations to close and which ones to leave. Obviously, the residents of the capital won't be too enthusiastic about the innovation, so it was decided to show the best side to the people. The Ministry of Transport wants to choose such k stations that minimize the average commute time in the subway!\n\nAssuming that the train speed is constant (it is a fixed value), the average commute time in the subway is calculated as the sum of pairwise distances between stations, divided by the number of pairs (that is $\\frac{n \\cdot(n - 1)}{2}$) and divided by the speed of the train.\n\nHelp the Minister of Transport to solve this difficult problem. Write a program that, given the location of the stations selects such k stations that the average commute time in the subway is minimized.\n\n\n-----Input-----\n\nThe first line of the input contains integer n (3 ≤ n ≤ 3·10^5) — the number of the stations before the innovation. The second line contains the coordinates of the stations x_1, x_2, ..., x_{n} ( - 10^8 ≤ x_{i} ≤ 10^8). The third line contains integer k (2 ≤ k ≤ n - 1) — the number of stations after the innovation.\n\nThe station coordinates are distinct and not necessarily sorted.\n\n\n-----Output-----\n\nPrint a sequence of k distinct integers t_1, t_2, ..., t_{k} (1 ≤ t_{j} ≤ n) — the numbers of the stations that should be left after the innovation in arbitrary order. Assume that the stations are numbered 1 through n in the order they are given in the input. The number of stations you print must have the minimum possible average commute time among all possible ways to choose k stations. If there are multiple such ways, you are allowed to print any of them.\n\n\n-----Examples-----\nInput\n3\n1 100 101\n2\n\nOutput\n2 3 \n\n\n-----Note-----\n\nIn the sample testcase the optimal answer is to destroy the first station (with x = 1). The average commute time will be equal to 1 in this way.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from sys import stdin\n\nn = int(stdin.readline())\na = [int(x) for x in stdin.readline().split()]\na = sorted([(a[x],str(x+1)) for x in range(n)])\nk = int(stdin.readline())\n\nsums = [0]\nfor x in a:\n\tsums.append(sums[-1]+x[0])\n\ntotal = 0\ns = 0\n\nfor x in range(k):\n\ttotal += a[x][0]*x-s\n\ts += a[x][0]\n\nlow = total\nlowInd = 0\n\n#print(total)\n\nfor x in range(n-k):\n\ts -= a[x][0]\n\ttotal -= s-a[x][0]*(k-1)\n\ttotal += a[x+k][0]*(k-1)-s\n\ts += a[x+k][0]\n\tif total < low:\n\t\tlow = total\n\t\tlowInd = x+1\n\nout = []\n\nfor x in range(lowInd,lowInd+k):\n\tout.append(a[x][1])\nprint(' '.join(out))\n"], "id": "id8833"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8833", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["berland", 2], ["is", 2], ["going", 2], ["through", 2], ["tough", 2], ["times", 2], ["—", 2], ["the", 2], ["dirt", 2], ["price", 2], ["has", 2], ["dropped", 2], ["and", 2], ["that", 2], ["is", 2], ["a", 2], ["blow", 2], ["to", 2], ["the", 2], ["country", 2], ["s", 2], ["economy", 2], ["everybody", 2], ["knows", 2], ["that", 2], ["berland", 2], ["is", 2], ["the", 2], ["top", 2], ["world", 2], ["dirt", 2], ["exporter", 2], ["the", 2], ["president", 2], ["of", 2], ["berland", 2], ["was", 2], ["forced", 2], ["to", 2], ["leave", 2], ["only", 2], ["k", 2], ["of", 2], ["the", 2], ["currently", 2], ["existing", 2], ["n", 2], ["subway", 2], ["stations", 2], ["the", 2], ["subway", 2], ["stations", 2], ["are", 2], ["located", 2], ["on", 2], ["a", 2], ["straight", 2], ["line", 2], ["one", 2], ["after", 2], ["another", 2], ["the", 2], ["trains", 2], ["consecutively", 2], ["visit", 2], ["the", 2], ["stations", 2], ["as", 2], ["they", 2], ["move", 2], ["you", 2], ["can", 2], ["assume", 2], ["that", 2], ["the", 2], ["stations", 2], ["are", 2], ["on", 2], ["the", 0], ["ox", 0], ["axis", 0], ["the", 0], ["i", 0], ["th", 0], ["station", 0], ["is", 0], ["at", 0], ["point", 0], ["with", 0], ["coordinate", 0], ["x", 0], ["i", 0], ["in", 2], ["such", 2], ["case", 2], ["the", 2], ["distance", 0], ["between", 0], ["stations", 0], ["i", 0], ["and", 0], ["j", 0], ["is", 0], ["calculated", 0], ["by", 0], ["a", 0], ["simple", 0], ["formula", 0], ["x", 0], ["i", 0], ["x", 0], ["j", 0], ["currently", 2], ["the", 2], ["ministry", 2], ["of", 2], ["transport", 2], ["is", 2], ["choosing", 2], ["which", 2], ["stations", 2], ["to", 2], ["close", 2], ["and", 2], ["which", 2], ["ones", 2], ["to", 2], ["leave", 2], ["obviously", 2], ["the", 2], ["residents", 2], ["of", 2], ["the", 2], ["capital", 2], ["won", 2], ["t", 2], ["be", 2], ["too", 2], ["enthusiastic", 2], ["about", 2], ["the", 2], ["innovation", 2], ["so", 2], ["it", 2], ["was", 2], ["decided", 2], ["to", 2], ["show", 2], ["the", 2], ["best", 2], ["side", 2], ["to", 2], ["the", 2], ["people", 2], ["the", 2], ["ministry", 2], ["of", 2], ["transport", 2], ["wants", 2], ["to", 2], ["choose", 2], ["such", 2], ["k", 2], ["stations", 2], ["that", 2], ["minimize", 2], ["the", 2], ["average", 2], ["commute", 2], ["time", 2], ["in", 2], ["the", 2], ["subway", 2], ["assuming", 2], ["that", 2], ["the", 2], ["train", 2], ["speed", 2], ["is", 2], ["constant", 2], ["it", 2], ["is", 2], ["a", 2], ["fixed", 2], ["value", 2], ["the", 2], ["average", 2], ["commute", 2], ["time", 2], ["in", 2], ["the", 2], ["subway", 2], ["is", 2], ["calculated", 2], ["as", 2], ["the", 2], ["sum", 2], ["of", 2], ["pairwise", 0], ["distances", 0], ["between", 0], ["stations", 0], ["divided", 0], ["by", 0], ["the", 0], ["number", 0], ["of", 0], ["pairs", 0], ["that", 0], ["is", 0], ["frac", 0], ["n", 0], ["cdot", 0], ["n", 0], ["1", 0], ["2", 0], ["and", 2], ["divided", 2], ["by", 2], ["the", 2], ["speed", 2], ["of", 2], ["the", 2], ["train", 2], ["help", 2], ["the", 2], ["minister", 2], ["of", 2], ["transport", 2], ["to", 2], ["solve", 2], ["this", 2], ["difficult", 2], ["problem", 2], ["write", 2], ["a", 2], ["program", 2], ["that", 2], ["given", 2], ["the", 2], ["location", 2], ["of", 2], ["the", 2], ["stations", 2], ["selects", 2], ["such", 2], ["k", 0], ["stations", 0], ["that", 0], ["the", 0], ["average", 0], ["commute", 0], ["time", 0], ["in", 0], ["the", 0], ["subway", 0], ["is", 0], ["minimized", 0], ["input", 0], ["the", 6], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["integer", 0], ["n", 0], ["3", 0], ["≤", 0], ["n", 0], ["≤", 0], ["3·10", 0], ["5", 0], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["the", 2], ["stations", 2], ["before", 0], ["the", 0], ["innovation", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["the", 0], ["coordinates", 0], ["of", 0], ["the", 0], ["stations", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["x", 0], ["n", 0], ["10", 0], ["8", 0], ["≤", 0], ["x", 0], ["i", 0], ["≤", 0], ["10", 0], ["8", 0], ["the", 2], ["third", 2], ["line", 2], ["contains", 2], ["integer", 2], ["k", 2], ["2", 2], ["≤", 2], ["k", 2], ["≤", 2], ["n", 2], ["1", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["stations", 2], ["after", 0], ["the", 0], ["innovation", 0], ["the", 0], ["station", 0], ["coordinates", 0], ["are", 0], ["distinct", 0], ["and", 0], ["not", 0], ["necessarily", 0], ["sorted", 0], ["output", 0], ["print", 0], ["a", 0], ["sequence", 0], ["of", 0], ["k", 0], ["distinct", 0], ["integers", 0], ["t", 0], ["1", 0], ["t", 0], ["2", 0], ["t", 0], ["k", 0], ["1", 0], ["≤", 0], ["t", 0], ["j", 0], ["≤", 2], ["n", 2], ["—", 2], ["the", 2], ["numbers", 2], ["of", 2], ["the", 2], ["stations", 2], ["that", 2], ["should", 2], ["be", 2], ["left", 2], ["after", 2], ["the", 2], ["innovation", 2], ["in", 2], ["arbitrary", 2], ["order", 2], ["assume", 2], ["that", 2], ["the", 2], ["stations", 2], ["are", 2], ["numbered", 2], ["1", 2], ["through", 2], ["n", 2], ["in", 2], ["the", 2], ["order", 2], ["they", 2], ["are", 2], ["given", 2], ["in", 2], ["the", 2], ["input", 2], ["the", 2], ["number", 2], ["of", 2], ["stations", 2], ["you", 2], ["print", 2], ["must", 2], ["have", 2], ["the", 2], ["minimum", 2], ["possible", 2], ["average", 2], ["commute", 2], ["time", 2], ["among", 2], ["all", 2], ["possible", 2], ["ways", 2], ["to", 2], ["choose", 2], ["k", 2], ["stations", 2], ["if", 2], ["there", 2], ["are", 0], ["multiple", 0], ["such", 0], ["ways", 0], ["you", 0], ["are", 0], ["allowed", 0], ["to", 0], ["print", 0], ["any", 0], ["of", 0], ["them", 0], ["examples", 0], ["input", 0], ["3", 0], ["1", 0], ["100", 0], ["101", 0], ["2", 0], ["output", 0], ["2", 0], ["3", 0], ["note", 0], ["in", 2], ["the", 2], ["sample", 2], ["testcase", 2], ["the", 2], ["optimal", 2], ["answer", 2], ["is", 2], ["to", 2], ["destroy", 2], ["the", 2], ["first", 2], ["station", 2], ["with", 2], ["x", 2], ["1", 2], ["the", 0], ["average", 0], ["commute", 0], ["time", 0], ["will", 0], ["be", 0], ["equal", 0], ["to", 0], ["1", 0], ["in", 0], ["this", 0], ["way", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6436285097192225, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.32109431245500364, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8547368421052631, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.41824561403508786, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6436285097192225, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.32109431245500364, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8547368421052631, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.41824561403508786, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["a", 0], ["sorted", 0], ["a", 0], ["x", 0], ["str", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["sums", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["sums", 0], ["append", 0], ["sums", 0], ["1", 0], ["x", 0], ["0", 0], ["total", 0], ["0", 0], ["s", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["k", 0], ["total", 0], ["a", 0], ["x", 0], ["0", 0], ["x", 0], ["s", 0], ["s", 0], ["a", 0], ["x", 0], ["0", 0], ["low", 0], ["total", 0], ["lowind", 0], ["0", 0], ["print", 0], ["total", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["s", 0], ["a", 0], ["x", 0], ["0", 0], ["total", 0], ["s", 0], ["a", 0], ["x", 0], ["0", 0], ["k", 0], ["1", 0], ["total", 0], ["a", 0], ["x", 0], ["k", 0], ["0", 0], ["k", 0], ["1", 0], ["s", 0], ["s", 0], ["a", 0], ["x", 0], ["k", 0], ["0", 0], ["if", 0], ["total", 0], ["low", 0], ["low", 0], ["total", 0], ["lowind", 0], ["x", 0], ["1", 0], ["out", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["lowind", 0], ["lowind", 0], ["k", 0], ["out", 0], ["append", 0], ["a", 0], ["x", 0], ["1", 0], ["print", 0], ["join", 0], ["out", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nFurther research on zombie thought processes yielded interesting results. As we know from the previous problem, the nervous system of a zombie consists of n brains and m brain connectors joining some pairs of brains together. It was observed that the intellectual abilities of a zombie depend mainly on the topology of its nervous system. More precisely, we define the distance between two brains u and v (1 ≤ u, v ≤ n) as the minimum number of brain connectors used when transmitting a thought between these two brains. The brain latency of a zombie is defined to be the maximum distance between any two of its brains. Researchers conjecture that the brain latency is the crucial parameter which determines how smart a given zombie is. Help them test this conjecture by writing a program to compute brain latencies of nervous systems.\n\nIn this problem you may assume that any nervous system given in the input is valid, i.e., it satisfies conditions (1) and (2) from the easy version.\n\n\n-----Input-----\n\nThe first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 100000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n and a ≠ b).\n\n\n-----Output-----\n\nPrint one number – the brain latency.\n\n\n-----Examples-----\nInput\n4 3\n1 2\n1 3\n1 4\n\nOutput\n2\nInput\n5 4\n1 2\n2 3\n3 4\n3 5\n\nOutput\n3\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["3\n\n__import__(\"sys\").setrecursionlimit(10 ** 6)\nimport threading\n\nthreading.stack_size(64 * 1024 * 1024)\n\ndef dfs(u, h, par, tr, arr):\n\tarr[u] = h\n\tfor v in tr[u]:\n\t\tif v != par:\n\t\t\tdfs(v, h + 1, u, tr, arr)\n\ndef longpathv(tr, v):\n\tn = len(tr)\n\tarr = [0] * n\n\tdfs(v, 0, -1, tr, arr)\n\tans = max(list(range(n)), key=lambda x: arr[x])\n\treturn ans, arr[ans]\n\ndef longpath(tr):\n\treturn longpathv(tr, longpathv(tr, 0)[0])[1]\n\ndef main(tr):\n\tprint(longpath(tr))\n\nn, m = list(map(int, input().split()))\ntr = [[] for i in range(n)]\nfor i in range(m):\n\ta, b = list(map(int, input().split()))\n\ta -= 1\n\tb -= 1\n\ttr[a].append(b)\n\ttr[b].append(a)\n\nth = threading.Thread(target=main, args=tuple([tr]))\nth.start()\n", "n, m = list(map(int, input().split()))\ncn = {}\nfor i in range(1, n+1):\n\tcn[i] = set()\nfor _ in range(m):\n\ta, b = list(map(int, input().split()))\n\tcn[a].add(b)\n\tcn[b].add(a)\n\n\ndef dfs(node):\n\tvs = set()\n\tq = [(0, node)]\n\tdist = 0\n\tfnode = node\n\twhile q:\n\t\td, node = q.pop()\n\t\tvs.add(node)\n\t\tif d > dist:\n\t\t\tdist, fnode = d, node\n\t\tfor i in cn[node]:\n\t\t\tif i not in vs:\n\t\t\t\tq.append((d+1, i))\n\treturn dist, fnode\n\n_, fnode = dfs(1)\nprint(dfs(fnode)[0])\n", "def bfs(x, g):\n\tn, q = len(g), [x]\n\tdist = [0 if y == x else -1 for y in range(n)]\n\ti = 0\n\twhile i < len(q):\n\t\tv = q[i]\n\t\ti += 1\n\t\tfor to in g[v]:\n\t\t\tif dist[to] < 0:\n\t\t\t\tdist[to] = dist[v] + 1\n\t\t\t\tq.append(to)\n\treturn (q[-1], dist[q[-1]])\n\nn, m = list(map(int, input().split()))\ng = [[] for _ in range(n)]\n\nfor _ in range(m):\n\ta, b = [int(x) - 1 for x in input().split()]\n\tg[a].append(b)\n\tg[b].append(a)\n\nprint(bfs(bfs(0, g)[0], g)[1])\n", "import sys\n#with open(filename, 'r') as f:\nwith sys.stdin as f:\n\tfor i, line in enumerate(f):\n\t\tif i == 0:\n\t\t\tN, M = line.split(' ')\n\t\t\tN, M = int(N), int(M)\n\t\t\tgraph = [[] for _ in range(N)] # [[]] * N not working, no deepcopy\n\t\telse:\n\t\t\tfromVertex, toVertex = line.split(' ')\n\t\t\tfromVertex, toVertex = int(fromVertex)-1, int(toVertex)-1\n\t\t\tgraph[fromVertex].append(toVertex)\n\t\t\tgraph[toVertex].append(fromVertex)\n\n\n# code is too slow, O(N^3)\n#~ INFINITY = 9999999\n#~ from queue import Queue\n#~ def bfs(start_node, graph):\n\t#~ N = len(graph)\n\t#~ distances = [INFINITY for _ in range(N)]\n\t#~ distances[start_node] = 0\n\t#~ nodes_queue = Queue()\n\t#~ nodes_queue.put(start_node)\n\t#~ while not nodes_queue.empty():\n\t\t#~ node = nodes_queue.get()\n\t\t#~ for neigh in graph[node]:\n\t\t\t#~ if distances[neigh] == INFINITY:\n\t\t\t\t#~ # not yet visited\n\t\t\t\t#~ distances[neigh] = distances[node] + 1\n\t\t\t\t#~ nodes_queue.put(neigh)\n\t\t\n\t#~ return distances\n\t\n# use tree structure\nfrom queue import Queue\ndef farthest_node_distance(start_node, graph):\n\t\"\"\" returns farthest node from start node and its distance \"\"\"\n\tN = len(graph)\n\tvisited = [False for _ in range(N)]\n\tdistances = [-1 for _ in range(N)]\n\tvisited[start_node] = True\n\tdistances[start_node] = 0\n\tnodes_queue = Queue()\n\tnodes_queue.put(start_node)\n\twhile not nodes_queue.empty():\n\t\tnode = nodes_queue.get()\n\t\t#print(\"Taking {}: {}\".format(node, distances[node]))\n\t\tfor neigh in graph[node]:\n\t\t\tif not visited[neigh]:\n\t\t\t\t#print(\"Found {}\".format(neigh))\n\t\t\t\tvisited[neigh] = True\n\t\t\t\tdistances[neigh] = distances[node] + 1\n\t\t\t\tnodes_queue.put(neigh)\n\t\t\t\t#print(\"{}: {}\".format(neigh, distances[neigh]))\n\treturn node, distances[node]\n\nu, dist_u = farthest_node_distance(0, graph)\n#print(\"Done\")\nv, dist_uv = farthest_node_distance(u, graph)\nprint(dist_uv)\n#print(\"u: {}, {}\".format(u, dist_u))\n#print(\"v: {}, {}\".format(v, dist_uv))\n", "f = lambda: map(int, input().split())\n\nn, m = f()\np = [[] for i in range(n)]\nfor j in range(m):\n\ta, b = f()\n\tp[a - 1].append(b - 1)\n\tp[b - 1].append(a - 1)\n\ndef g(i):\n\tu, t = [1] * n, (0, i)\n\ts = [t]\n\twhile s:\n\t\td, i = s.pop()\n\t\tu[i] = 0\n\t\tif d > t[0]: t = (d, i)\n\t\ts += [(d + 1, j) for j in p[i] if u[j]]\n\treturn t\n\nprint(g(g(0)[1])[0])\n", "import copy\nimport sys\nimport threading\n\nthreading.stack_size(64 * 1024 * 1024)\nsys.setrecursionlimit(10 ** 6)\n\nn, m = map(int, input().split())\n\nans = 0\nsz = [0] * (n + 1)\ngraph = []\n\nfor _ in range(n + 1):\n\tgraph.append([])\n\nfor _ in range(m):\n\tu, v = map(int, input().split())\n\tgraph[u].append(v)\n\tgraph[v].append(u)\n\ndef dfs(v, pr):\n\tnonlocal ans\n\tfor to in graph[v]:\n\t\tif to != pr:\n\t\t\tdfs(to, v)\n\tif pr != -1:\n\t\tans = max(ans, sz[pr] + sz[v])\n\t\tsz[pr] = max(sz[pr], sz[v] + 1)\n\ndef main():\n\tdfs(1, -1)\n\tprint(ans + 1)\n\t\nth = threading.Thread(target=main)\nth.start()\n", "n,m=map(int,input().split())\n\ngr=[[] for i in range(n)]\n\nfor i in range(m):\n\tu,v=map(int,input().split())\n\tgr[v-1].append(u-1)\n\tgr[u-1].append(v-1)\n\nv=[False for i in range(n)]\ns=[0]\ntr={}\ntr[0]=0\nwhile s:\n\tx=s.pop()\n\tv[x]=True\n\tfor j in gr[x]:\n\t\tif v[j]:continue\n\t\ts.append(j)\n\t\ttr[j]=tr[x]+1\nva=0\nma=0\nfor j in tr.keys():\n\tif ma<tr[j]:\n\t\tma=tr[j]\n\t\tva=j\nv=[False for i in range(n)]\ns=[va]\ntr={}\ntr[va]=0\nwhile s:\n\tx=s.pop()\n\tv[x]=True\n\tfor i in gr[x]:\n\t\tif v[i]:continue\n\t\ts.append(i)\n\t\ttr[i]=tr[x]+1\nprint(max(tr.values()))\n", "import sys\n\n\ndef find_farest_v(v, g):\n\tqueue_v = [(v, 0)]\n\torder = []\n\tvisited_v = set()\n\twhile queue_v:\n\t\tcurrent_v, dist = queue_v.pop(0)\n\t\tvisited_v.add(current_v)\n\t\torder.append((current_v, dist))\n\t\tfor neib in adj_graph[current_v]:\n\t\t\tif neib not in visited_v:\n\t\t\t\tqueue_v.append((neib, dist + 1))\n\t\n\treturn order[-1]\n\nn, m = list(map(int, input().strip().split(\" \")))\n\nadj_graph = [[] for i in range(n)]\n\nfor i in range(m):\n\tline = input()\n\tv1, v2 = list(map(int, line.split(\" \")))\n\tadj_graph[v1 - 1].append(v2 - 1)\n\tadj_graph[v2 - 1].append(v1 - 1)\n\t\nv1, d1 = find_farest_v(0, adj_graph)\nv2, d2 = find_farest_v(v1, adj_graph)\n\nprint(d2) \n", "import sys\ninput=sys.stdin.readline\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nt=1\nimport math\n \n \ndef bfs(a,i,dis,vis):\n\tvis[i]=1\n\tpp=deque()\n\tpp.append(i)\n\twhile len(pp)!=0:\n\t\t\n\t\tz=pp[0]\n\t\tvis[z]=1\n\t\tpp.popleft()\n\t\tfor j in a[z]:\n\t\t\tif vis[j]==0:\n\t\t\t\tdis[j]=dis[z]+1\n\t\t\t\tpp.append(j)\n\t\t\t\t\n\t\t\t\t\nwhile t>0:\n\tt-=1\n\tn,m=map(int,input().split())\n\ta=[[] for i in range(n+1)]\n\tfor i in range(m):\n\t\tx,y=map(int,input().split())\n\t\ta[x].append(y)\n\t\ta[y].append(x)\n\tvis=[0 for i in range(n+1)]    \n\tdis=[0 for i in range(n+1)]    \n\tbfs(a,1,dis,vis)\n\t#print(dis)\n\tp=[max(dis),dis.index(max(dis))]\n\tvis=[0 for i in range(n+1)]\n\tdis=[0 for i in range(n+1)]\n\tbfs(a,p[1],dis,vis)\n\tp=[max(dis),dis.index(max(dis))]\n\tprint(p[0])\n", "# https://www.youtube.com/watch?v=_q7aMi-5Uos\nimport sys\nfrom collections import defaultdict\n\nn,m = list(map(int,sys.stdin.readline().lstrip().rstrip().split()))\ngraph = defaultdict(list)\nfor i in range(m):\n\tu,v = list(map(int,sys.stdin.readline().lstrip().rstrip().split()))\n\tgraph[u-1].append(v-1)\n\tgraph[v-1].append(u-1)\n\nvisited = [False for i in range(n)]\nq = [[0,0]]\ntemp = []\nvisited[0] = True\nwhile q!=[]:\n\tnode,dist = q[0][0],q[0][1]\n\tq.pop(0)\n\tleaf = True\n\tfor v in graph[node]:\n\t\tif visited[v]==False:\n\t\t\tvisited[v] = True\n\t\t\tq.append([v,dist+1])\n\t\t\tleaf = False\n\tif leaf:\n\t\ttemp.append([dist,node])\ntemp.sort()\n\nvisited = [False for i in range(n)]\nq = [[temp[-1][1],0]]\ntemp = []\nvisited[q[0][0]] = True\nwhile q!=[]:\n\tnode,dist = q[0][0],q[0][1]\n\tq.pop(0)\n\tleaf = True\n\tfor v in graph[node]:\n\t\tif visited[v]==False:\n\t\t\tvisited[v] = True\n\t\t\tq.append([v,dist+1])\n\t\t\tleaf = False\n\tif leaf:\n\t\ttemp.append(dist)\nsys.stdout.write(str(max(temp))+'\\n')\n", "# itne me hi thakk gaye?\ndef bfs(x, g):\n\tn, q = len(g), [x]\n\tdist = [0 if y == x else -1 for y in range(n)]\n\ti = 0\n\twhile i < len(q):\n\t\tv = q[i]\n\t\ti += 1\n\t\tfor to in g[v]:\n\t\t\tif dist[to] < 0:\n\t\t\t\tdist[to] = dist[v] + 1\n\t\t\t\tq.append(to)\n\treturn (q[-1], dist[q[-1]])\n \nn, m = map(int, input().split())\ng = [[] for _ in range(n)]\n \nfor _ in range(m):\n\ta, b = map(lambda x: int(x) - 1, input().split())\n\tg[a].append(b)\n\tg[b].append(a)\n \nprint(bfs(bfs(0, g)[0], g)[1])\n", "f = lambda: map(int, input().split())\n \nn, m = f()\np = [[] for i in range(n)]\nfor j in range(m):\n\ta, b = f()\n\tp[a - 1].append(b - 1)\n\tp[b - 1].append(a - 1)\n \ndef g(i):\n\tu, t = [1] * n, (0, i)\n\ts = [t]\n\twhile s:\n\t\td, i = s.pop()\n\t\tu[i] = 0\n\t\tif d > t[0]: t = (d, i)\n\t\ts += [(d + 1, j) for j in p[i] if u[j]]\n\treturn t\n \nprint(g(g(0)[1])[0])\n", "n,m=list(map(int,input().split()))\nfrom collections import defaultdict,deque\ng=defaultdict(list)\nfor i in range(m):\n\ta,b=list(map(int,input().split()))\n\tg[a-1].append(b-1)\n\tg[b-1].append(a-1)\n\n\n\ndef dfs(x):\n\tvis[x]=1\n\tq=deque()\n\tq.append((x,0))\n\twhile q:\n\t\tcur,d=q.popleft()\n\t\t\n\t\tif maxd[0]<d:\n\t\t\tmaxd[0]=d\n\t\t\tmaxnode[0]=cur\n\t\tfor i in g[cur]:\n\t\t\tif vis[i]==0:\n\t\t\t\tq.append((i,d+1))\n\t\t\t\tvis[i]=1\n\t\n\t \n\t\n\t\nvis=[0]*n\nmaxd=[0]\nmaxnode=[0]\ndfs(0)\nvis=[0]*n\nmaxd=[0]\ndfs(maxnode[0])\n\n\nprint(maxd[0])\n"], "id": "id9613"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9613", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["further", 1], ["research", 1], ["on", 1], ["zombie", 1], ["thought", 1], ["processes", 1], ["yielded", 1], ["interesting", 1], ["results", 1], ["as", 1], ["we", 1], ["know", 1], ["from", 1], ["the", 1], ["previous", 1], ["problem", 1], ["the", 1], ["nervous", 1], ["system", 1], ["of", 1], ["a", 1], ["zombie", 1], ["consists", 1], ["of", 1], ["n", 1], ["brains", 1], ["and", 1], ["m", 1], ["brain", 1], ["connectors", 1], ["joining", 1], ["some", 1], ["pairs", 1], ["of", 1], ["brains", 1], ["together", 1], ["it", 1], ["was", 1], ["observed", 1], ["that", 1], ["the", 1], ["intellectual", 1], ["abilities", 1], ["of", 1], ["a", 1], ["zombie", 1], ["depend", 1], ["mainly", 1], ["on", 1], ["the", 1], ["topology", 1], ["of", 1], ["its", 1], ["nervous", 1], ["system", 1], ["more", 1], ["precisely", 1], ["we", 1], ["define", 1], ["the", 1], ["distance", 1], ["between", 1], ["two", 1], ["brains", 1], ["u", 1], ["and", 1], ["v", 1], ["1", 1], ["≤", 1], ["u", 1], ["v", 1], ["≤", 1], ["n", 1], ["as", 1], ["the", 1], ["minimum", 1], ["number", 1], ["of", 1], ["brain", 1], ["connectors", 1], ["used", 1], ["when", 1], ["transmitting", 1], ["a", 1], ["thought", 1], ["between", 1], ["these", 1], ["two", 1], ["brains", 1], ["the", 1], ["brain", 1], ["latency", 1], ["of", 1], ["a", 1], ["zombie", 1], ["is", 1], ["defined", 1], ["to", 1], ["be", 1], ["the", 1], ["maximum", 1], ["distance", 1], ["between", 1], ["any", 1], ["two", 1], ["of", 1], ["its", 1], ["brains", 1], ["researchers", 1], ["conjecture", 1], ["that", 1], ["the", 1], ["brain", 1], ["latency", 1], ["is", 1], ["the", 1], ["crucial", 1], ["parameter", 1], ["which", 1], ["determines", 1], ["how", 1], ["smart", 1], ["a", 1], ["given", 1], ["zombie", 1], ["is", 1], ["help", 1], ["them", 1], ["test", 1], ["this", 1], ["conjecture", 1], ["by", 1], ["writing", 1], ["a", 1], ["program", 1], ["to", 1], ["compute", 1], ["brain", 1], ["latencies", 1], ["of", 1], ["nervous", 1], ["systems", 1], ["in", 1], ["this", 1], ["problem", 1], ["you", 1], ["may", 1], ["assume", 1], ["that", 1], ["any", 1], ["nervous", 1], ["system", 1], ["given", 1], ["in", 1], ["the", 1], ["input", 1], ["is", 1], ["valid", 1], ["i", 0], ["e", 0], ["it", 0], ["satisfies", 0], ["conditions", 0], ["1", 0], ["and", 0], ["2", 0], ["from", 0], ["the", 0], ["easy", 0], ["version", 0], ["input", 0], ["the", 14], ["first", 7], ["line", 3], ["of", 3], ["the", 3], ["input", 2], ["contains", 14], ["two", 1], ["space", 1], ["separated", 1], ["integers", 1], ["n", 1], ["and", 1], ["m", 1], ["1", 1], ["≤", 1], ["n", 1], ["m", 1], ["≤", 1], ["100000", 1], ["denoting", 1], ["the", 1], ["number", 1], ["of", 1], ["brains", 1], ["which", 1], ["are", 1], ["conveniently", 1], ["numbered", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["and", 1], ["the", 1], ["number", 1], ["of", 1], ["brain", 1], ["connectors", 1], ["in", 1], ["the", 1], ["nervous", 1], ["system", 1], ["respectively", 1], ["in", 1], ["the", 1], ["next", 1], ["m", 1], ["lines", 1], ["descriptions", 1], ["of", 1], ["brain", 1], ["connectors", 1], ["follow", 1], ["every", 1], ["connector", 1], ["is", 1], ["given", 1], ["as", 1], ["a", 1], ["pair", 1], ["of", 1], ["brains", 1], ["a", 1], ["b", 1], ["it", 0], ["connects", 0], ["1", 0], ["≤", 0], ["a", 0], ["b", 0], ["≤", 0], ["n", 0], ["and", 0], ["a", 0], ["≠", 0], ["b", 0], ["output", 0], ["print", 0], ["one", 0], ["number", 0], ["–", 0], ["the", 0], ["brain", 0], ["latency", 0], ["examples", 0], ["input", 0], ["4", 0], ["3", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["1", 0], ["4", 0], ["output", 0], ["2", 0], ["input", 0], ["5", 0], ["4", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["4", 0], ["3", 0], ["5", 0], ["output", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7964285714285714, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7778061224489797, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8458904109589042, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8295009784735813, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7892857142857143, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.777295918367347, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8424657534246576, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.829256360078278, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["3", 0], ["import", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["import", 0], ["threading", 0], ["threading", 0], ["stack", 0], ["size", 0], ["64", 0], ["1024", 0], ["1024", 0], ["def", 0], ["dfs", 0], ["u", 0], ["h", 0], ["par", 0], ["tr", 0], ["arr", 0], ["arr", 0], ["u", 0], ["h", 0], ["for", 0], ["v", 0], ["in", 0], ["tr", 0], ["u", 0], ["if", 0], ["v", 0], ["par", 0], ["dfs", 0], ["v", 0], ["h", 0], ["1", 0], ["u", 0], ["tr", 0], ["arr", 0], ["def", 0], ["longpathv", 0], ["tr", 0], ["v", 0], ["n", 0], ["len", 0], ["tr", 0], ["arr", 0], ["0", 0], ["n", 0], ["dfs", 0], ["v", 0], ["0", 0], ["1", 0], ["tr", 0], ["arr", 0], ["ans", 0], ["max", 0], ["list", 0], ["range", 0], ["n", 0], ["key", 0], ["lambda", 0], ["x", 0], ["arr", 0], ["x", 0], ["return", 0], ["ans", 0], ["arr", 0], ["ans", 0], ["def", 0], ["longpath", 0], ["tr", 0], ["return", 0], ["longpathv", 0], ["tr", 0], ["longpathv", 0], ["tr", 0], ["0", 0], ["0", 0], ["1", 0], ["def", 0], ["main", 0], ["tr", 0], ["print", 0], ["longpath", 0], ["tr", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["tr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["tr", 0], ["a", 0], ["append", 0], ["b", 0], ["tr", 0], ["b", 0], ["append", 0], ["a", 0], ["th", 0], ["threading", 0], ["thread", 0], ["target", 0], ["main", 0], ["args", 0], ["tuple", 0], ["tr", 0], ["th", 0], ["start", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cn", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["cn", 0], ["i", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cn", 0], ["a", 0], ["add", 0], ["b", 0], ["cn", 0], ["b", 0], ["add", 0], ["a", 0], ["def", 0], ["dfs", 0], ["node", 0], ["vs", 0], ["set", 0], ["q", 0], ["0", 0], ["node", 0], ["dist", 0], ["0", 0], ["fnode", 0], ["node", 0], ["while", 0], ["q", 0], ["d", 0], ["node", 0], ["q", 0], ["pop", 0], ["vs", 0], ["add", 0], ["node", 0], ["if", 0], ["d", 0], ["dist", 0], ["dist", 0], ["fnode", 0], ["d", 0], ["node", 0], ["for", 0], ["i", 0], ["in", 0], ["cn", 0], ["node", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["vs", 0], ["q", 0], ["append", 0], ["d", 0], ["1", 0], ["i", 0], ["return", 0], ["dist", 0], ["fnode", 0], ["fnode", 0], ["dfs", 0], ["1", 0], ["print", 0], ["dfs", 0], ["fnode", 0], ["0", 0], ["def", 0], ["bfs", 0], ["x", 0], ["g", 0], ["n", 0], ["q", 0], ["len", 0], ["g", 0], ["x", 0], ["dist", 0], ["0", 0], ["if", 0], ["y", 0], ["x", 0], ["else", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["n", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["q", 0], ["v", 0], ["q", 0], ["i", 0], ["i", 0], ["1", 0], ["for", 0], ["to", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["dist", 0], ["to", 0], ["0", 0], ["dist", 0], ["to", 0], ["dist", 0], ["v", 0], ["1", 0], ["q", 0], ["append", 0], ["to", 0], ["return", 0], ["q", 0], ["1", 0], ["dist", 0], ["q", 0], ["1", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["g", 0], ["a", 0], ["append", 0], ["b", 0], ["g", 0], ["b", 0], ["append", 0], ["a", 0], ["print", 0], ["bfs", 0], ["bfs", 0], ["0", 0], ["g", 0], ["0", 0], ["g", 0], ["1", 0], ["import", 0], ["sys", 0], ["with", 0], ["open", 0], ["filename", 0], ["r", 0], ["as", 0], ["f", 0], ["with", 0], ["sys", 0], ["stdin", 0], ["as", 0], ["f", 0], ["for", 0], ["i", 0], ["line", 0], ["in", 0], ["enumerate", 0], ["f", 0], ["if", 0], ["i", 0], ["0", 0], ["n", 0], ["m", 0], ["line", 0], ["split", 0], ["n", 0], ["m", 0], ["int", 0], ["n", 0], ["int", 0], ["m", 0], ["graph", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["n", 0], ["not", 0], ["working", 0], ["no", 0], ["deepcopy", 0], ["else", 0], ["fromvertex", 0], ["tovertex", 0], ["line", 0], ["split", 0], ["fromvertex", 0], ["tovertex", 0], ["int", 0], ["fromvertex", 0], ["1", 0], ["int", 0], ["tovertex", 0], ["1", 0], ["graph", 0], ["fromvertex", 0], ["append", 0], ["tovertex", 0], ["graph", 0], ["tovertex", 0], ["append", 0], ["fromvertex", 0], ["code", 0], ["is", 0], ["too", 0], ["slow", 0], ["o", 0], ["n", 0], ["3", 0], ["infinity", 0], ["9999999", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["def", 0], ["bfs", 0], ["start", 0], ["node", 0], ["graph", 0], ["n", 0], ["len", 0], ["graph", 0], ["distances", 0], ["infinity", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["distances", 0], ["start", 0], ["node", 0], ["0", 0], ["nodes", 0], ["queue", 0], ["queue", 0], ["nodes", 0], ["queue", 0], ["put", 0], ["start", 0], ["node", 0], ["while", 0], ["not", 0], ["nodes", 0], ["queue", 0], ["empty", 0], ["node", 0], ["nodes", 0], ["queue", 0], ["get", 0], ["for", 0], ["neigh", 0], ["in", 0], ["graph", 0], ["node", 0], ["if", 0], ["distances", 0], ["neigh", 0], ["infinity", 0], ["not", 0], ["yet", 0], ["visited", 0], ["distances", 0], ["neigh", 0], ["distances", 0], ["node", 0], ["1", 0], ["nodes", 0], ["queue", 0], ["put", 0], ["neigh", 0], ["return", 0], ["distances", 0], ["use", 0], ["tree", 0], ["structure", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["def", 0], ["farthest", 0], ["node", 0], ["distance", 0], ["start", 0], ["node", 0], ["graph", 0], ["returns", 0], ["farthest", 0], ["node", 0], ["from", 0], ["start", 0], ["node", 0], ["and", 0], ["its", 0], ["distance", 0], ["n", 0], ["len", 0], ["graph", 0], ["visited", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["distances", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["visited", 0], ["start", 0], ["node", 0], ["true", 0], ["distances", 0], ["start", 0], ["node", 0], ["0", 0], ["nodes", 0], ["queue", 0], ["queue", 0], ["nodes", 0], ["queue", 0], ["put", 0], ["start", 0], ["node", 0], ["while", 0], ["not", 0], ["nodes", 0], ["queue", 0], ["empty", 0], ["node", 0], ["nodes", 0], ["queue", 0], ["get", 0], ["print", 0], ["taking", 0], ["format", 0], ["node", 0], ["distances", 0], ["node", 0], ["for", 0], ["neigh", 0], ["in", 0], ["graph", 0], ["node", 0], ["if", 0], ["not", 0], ["visited", 0], ["neigh", 0], ["print", 0], ["found", 0], ["format", 0], ["neigh", 0], ["visited", 0], ["neigh", 0], ["true", 0], ["distances", 0], ["neigh", 0], ["distances", 0], ["node", 0], ["1", 0], ["nodes", 0], ["queue", 0], ["put", 0], ["neigh", 0], ["print", 0], ["format", 0], ["neigh", 0], ["distances", 0], ["neigh", 0], ["return", 0], ["node", 0], ["distances", 0], ["node", 0], ["u", 0], ["dist", 0], ["u", 0], ["farthest", 0], ["node", 0], ["distance", 0], ["0", 0], ["graph", 0], ["print", 0], ["done", 0], ["v", 0], ["dist", 0], ["uv", 0], ["farthest", 0], ["node", 0], ["distance", 0], ["u", 0], ["graph", 0], ["print", 0], ["dist", 0], ["uv", 0], ["print", 0], ["u", 0], ["format", 0], ["u", 0], ["dist", 0], ["u", 0], ["print", 0], ["v", 0], ["format", 0], ["v", 0], ["dist", 0], ["uv", 0], ["f", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["f", 0], ["p", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["f", 0], ["p", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["p", 0], ["b", 0], ["1", 0], ["append", 0], ["a", 0], ["1", 0], ["def", 0], ["g", 0], ["i", 0], ["u", 0], ["t", 0], ["1", 0], ["n", 0], ["0", 0], ["i", 0], ["s", 0], ["t", 0], ["while", 0], ["s", 0], ["d", 0], ["i", 0], ["s", 0], ["pop", 0], ["u", 0], ["i", 0], ["0", 0], ["if", 0], ["d", 0], ["t", 0], ["0", 0], ["t", 0], ["d", 0], ["i", 0], ["s", 0], ["d", 0], ["1", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["p", 0], ["i", 0], ["if", 0], ["u", 0], ["j", 0], ["return", 0], ["t", 0], ["print", 0], ["g", 0], ["g", 0], ["0", 0], ["1", 0], ["0", 0], ["import", 0], ["copy", 0], ["import", 0], ["sys", 0], ["import", 0], ["threading", 0], ["threading", 0], ["stack", 0], ["size", 0], ["64", 0], ["1024", 0], ["1024", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["sz", 0], ["0", 0], ["n", 0], ["1", 0], ["graph", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["graph", 0], ["append", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["v", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["graph", 0], ["u", 0], ["append", 0], ["v", 0], ["graph", 0], ["v", 0], ["append", 0], ["u", 0], ["def", 0], ["dfs", 0], ["v", 0], ["pr", 0], ["nonlocal", 0], ["ans", 0], ["for", 0], ["to", 0], ["in", 0], ["graph", 0], ["v", 0], ["if", 0], ["to", 0], ["pr", 0], ["dfs", 0], ["to", 0], ["v", 0], ["if", 0], ["pr", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["sz", 0], ["pr", 0], ["sz", 0], ["v", 0], ["sz", 0], ["pr", 0], ["max", 0], ["sz", 0], ["pr", 0], ["sz", 0], ["v", 0], ["1", 0], ["def", 0], ["main", 0], ["dfs", 0], ["1", 0], ["1", 0], ["print", 0], ["ans", 0], ["1", 0], ["th", 0], ["threading", 0], ["thread", 0], ["target", 0], ["main", 0], ["th", 0], ["start", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["gr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["v", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["gr", 0], ["v", 0], ["1", 0], ["append", 0], ["u", 0], ["1", 0], ["gr", 0], ["u", 0], ["1", 0], ["append", 0], ["v", 0], ["1", 0], ["v", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["0", 0], ["tr", 0], ["tr", 0], ["0", 0], ["0", 0], ["while", 0], ["s", 0], ["x", 0], ["s", 0], ["pop", 0], ["v", 0], ["x", 0], ["true", 0], ["for", 0], ["j", 0], ["in", 0], ["gr", 0], ["x", 0], ["if", 0], ["v", 0], ["j", 0], ["continue", 0], ["s", 0], ["append", 0], ["j", 0], ["tr", 0], ["j", 0], ["tr", 0], ["x", 0], ["1", 0], ["va", 0], ["0", 0], ["ma", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["tr", 0], ["keys", 0], ["if", 0], ["ma", 0], ["tr", 0], ["j", 0], ["ma", 0], ["tr", 0], ["j", 0], ["va", 0], ["j", 0], ["v", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["va", 0], ["tr", 0], ["tr", 0], ["va", 0], ["0", 0], ["while", 0], ["s", 0], ["x", 0], ["s", 0], ["pop", 0], ["v", 0], ["x", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["gr", 0], ["x", 0], ["if", 0], ["v", 0], ["i", 0], ["continue", 0], ["s", 0], ["append", 0], ["i", 0], ["tr", 0], ["i", 0], ["tr", 0], ["x", 0], ["1", 0], ["print", 0], ["max", 0], ["tr", 0], ["values", 0], ["import", 0], ["sys", 0], ["def", 0], ["find", 0], ["farest", 0], ["v", 0], ["v", 0], ["g", 0], ["queue", 0], ["v", 0], ["v", 0], ["0", 0], ["order", 0], ["visited", 0], ["v", 0], ["set", 0], ["while", 0], ["queue", 0], ["v", 0], ["current", 0], ["v", 0], ["dist", 0], ["queue", 0], ["v", 0], ["pop", 0], ["0", 0], ["visited", 0], ["v", 0], ["add", 0], ["current", 0], ["v", 0], ["order", 0], ["append", 0], ["current", 0], ["v", 0], ["dist", 0], ["for", 0], ["neib", 0], ["in", 0], ["adj", 0], ["graph", 0], ["current", 0], ["v", 0], ["if", 0], ["neib", 0], ["not", 0], ["in", 0], ["visited", 0], ["v", 0], ["queue", 0], ["v", 0], ["append", 0], ["neib", 0], ["dist", 0], ["1", 0], ["return", 0], ["order", 0], ["1", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["adj", 0], ["graph", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["line", 0], ["input", 0], ["v1", 0], ["v2", 0], ["list", 0], ["map", 0], ["int", 0], ["line", 0], ["split", 0], ["adj", 0], ["graph", 0], ["v1", 0], ["1", 0], ["append", 0], ["v2", 0], ["1", 0], ["adj", 0], ["graph", 0], ["v2", 0], ["1", 0], ["append", 0], ["v1", 0], ["1", 0], ["v1", 0], ["d1", 0], ["find", 0], ["farest", 0], ["v", 0], ["0", 0], ["adj", 0], ["graph", 0], ["v2", 0], ["d2", 0], ["find", 0], ["farest", 0], ["v", 0], ["v1", 0], ["adj", 0], ["graph", 0], ["print", 0], ["d2", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["8", 0], ["t", 0], ["1", 0], ["import", 0], ["math", 0], ["def", 0], ["bfs", 0], ["a", 0], ["i", 0], ["dis", 0], ["vis", 0], ["vis", 0], ["i", 0], ["1", 0], ["pp", 0], ["deque", 0], ["pp", 0], ["append", 0], ["i", 0], ["while", 0], ["len", 0], ["pp", 0], ["0", 0], ["z", 0], ["pp", 0], ["0", 0], ["vis", 0], ["z", 0], ["1", 0], ["pp", 0], ["popleft", 0], ["for", 0], ["j", 0], ["in", 0], ["a", 0], ["z", 0], ["if", 0], ["vis", 0], ["j", 0], ["0", 0], ["dis", 0], ["j", 0], ["dis", 0], ["z", 0], ["1", 0], ["pp", 0], ["append", 0], ["j", 0], ["while", 0], ["t", 0], ["0", 0], ["t", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["x", 0], ["append", 0], ["y", 0], ["a", 0], ["y", 0], ["append", 0], ["x", 0], ["vis", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dis", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["bfs", 0], ["a", 0], ["1", 0], ["dis", 0], ["vis", 0], ["print", 0], ["dis", 0], ["p", 0], ["max", 0], ["dis", 0], ["dis", 0], ["index", 0], ["max", 0], ["dis", 0], ["vis", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dis", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["bfs", 0], ["a", 0], ["p", 0], ["1", 0], ["dis", 0], ["vis", 0], ["p", 0], ["max", 0], ["dis", 0], ["dis", 0], ["index", 0], ["max", 0], ["dis", 0], ["print", 0], ["p", 0], ["0", 0], ["https", 0], ["www", 0], ["youtube", 0], ["com", 0], ["watch", 0], ["v", 0], ["q7ami", 0], ["5uos", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["lstrip", 0], ["rstrip", 0], ["split", 0], ["graph", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["lstrip", 0], ["rstrip", 0], ["split", 0], ["graph", 0], ["u", 0], ["1", 0], ["append", 0], ["v", 0], ["1", 0], ["graph", 0], ["v", 0], ["1", 0], ["append", 0], ["u", 0], ["1", 0], ["visited", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["q", 0], ["0", 0], ["0", 0], ["temp", 0], ["visited", 0], ["0", 0], ["true", 0], ["while", 0], ["q", 0], ["node", 0], ["dist", 0], ["q", 0], ["0", 0], ["0", 0], ["q", 0], ["0", 0], ["1", 0], ["q", 0], ["pop", 0], ["0", 0], ["leaf", 0], ["true", 0], ["for", 0], ["v", 0], ["in", 0], ["graph", 0], ["node", 0], ["if", 0], ["visited", 0], ["v", 0], ["false", 0], ["visited", 0], ["v", 0], ["true", 0], ["q", 0], ["append", 0], ["v", 0], ["dist", 0], ["1", 0], ["leaf", 0], ["false", 0], ["if", 0], ["leaf", 0], ["temp", 0], ["append", 0], ["dist", 0], ["node", 0], ["temp", 0], ["sort", 0], ["visited", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["q", 0], ["temp", 0], ["1", 0], ["1", 0], ["0", 0], ["temp", 0], ["visited", 0], ["q", 0], ["0", 0], ["0", 0], ["true", 0], ["while", 0], ["q", 0], ["node", 0], ["dist", 0], ["q", 0], ["0", 0], ["0", 0], ["q", 0], ["0", 0], ["1", 0], ["q", 0], ["pop", 0], ["0", 0], ["leaf", 0], ["true", 0], ["for", 0], ["v", 0], ["in", 0], ["graph", 0], ["node", 0], ["if", 0], ["visited", 0], ["v", 0], ["false", 0], ["visited", 0], ["v", 0], ["true", 0], ["q", 0], ["append", 0], ["v", 0], ["dist", 0], ["1", 0], ["leaf", 0], ["false", 0], ["if", 0], ["leaf", 0], ["temp", 0], ["append", 0], ["dist", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["max", 0], ["temp", 0], ["n", 0], ["itne", 0], ["me", 0], ["hi", 0], ["thakk", 0], ["gaye", 0], ["def", 0], ["bfs", 0], ["x", 0], ["g", 0], ["n", 0], ["q", 0], ["len", 0], ["g", 0], ["x", 0], ["dist", 0], ["0", 0], ["if", 0], ["y", 0], ["x", 0], ["else", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["n", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["q", 0], ["v", 0], ["q", 0], ["i", 0], ["i", 0], ["1", 0], ["for", 0], ["to", 0], ["in", 0], ["g", 0], ["v", 0], ["if", 0], ["dist", 0], ["to", 0], ["0", 0], ["dist", 0], ["to", 0], ["dist", 0], ["v", 0], ["1", 0], ["q", 0], ["append", 0], ["to", 0], ["return", 0], ["q", 0], ["1", 0], ["dist", 0], ["q", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["lambda", 0], ["x", 0], ["int", 0], ["x", 0], ["1", 0], ["input", 0], ["split", 0], ["g", 0], ["a", 0], ["append", 0], ["b", 0], ["g", 0], ["b", 0], ["append", 0], ["a", 0], ["print", 0], ["bfs", 0], ["bfs", 0], ["0", 0], ["g", 0], ["0", 0], ["g", 0], ["1", 0], ["f", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["f", 0], ["p", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["f", 0], ["p", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["p", 0], ["b", 0], ["1", 0], ["append", 0], ["a", 0], ["1", 0], ["def", 0], ["g", 0], ["i", 0], ["u", 0], ["t", 0], ["1", 0], ["n", 0], ["0", 0], ["i", 0], ["s", 0], ["t", 0], ["while", 0], ["s", 0], ["d", 0], ["i", 0], ["s", 0], ["pop", 0], ["u", 0], ["i", 0], ["0", 0], ["if", 0], ["d", 0], ["t", 0], ["0", 0], ["t", 0], ["d", 0], ["i", 0], ["s", 0], ["d", 0], ["1", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["p", 0], ["i", 0], ["if", 0], ["u", 0], ["j", 0], ["return", 0], ["t", 0], ["print", 0], ["g", 0], ["g", 0], ["0", 0], ["1", 0], ["0", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["deque", 0], ["g", 0], ["defaultdict", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["a", 0], ["1", 0], ["append", 0], ["b", 0], ["1", 0], ["g", 0], ["b", 0], ["1", 0], ["append", 0], ["a", 0], ["1", 0], ["def", 0], ["dfs", 0], ["x", 0], ["vis", 0], ["x", 0], ["1", 0], ["q", 0], ["deque", 0], ["q", 0], ["append", 0], ["x", 0], ["0", 0], ["while", 0], ["q", 0], ["cur", 0], ["d", 0], ["q", 0], ["popleft", 0], ["if", 0], ["maxd", 0], ["0", 0], ["d", 0], ["maxd", 0], ["0", 0], ["d", 0], ["maxnode", 0], ["0", 0], ["cur", 0], ["for", 0], ["i", 0], ["in", 0], ["g", 0], ["cur", 0], ["if", 0], ["vis", 0], ["i", 0], ["0", 0], ["q", 0], ["append", 0], ["i", 0], ["d", 0], ["1", 0], ["vis", 0], ["i", 0], ["1", 0], ["vis", 0], ["0", 0], ["n", 0], ["maxd", 0], ["0", 0], ["maxnode", 0], ["0", 0], ["dfs", 0], ["0", 0], ["vis", 0], ["0", 0], ["n", 0], ["maxd", 0], ["0", 0], ["dfs", 0], ["maxnode", 0], ["0", 0], ["print", 0], ["maxd", 0], ["0", 0], ["", 0]], "metrics": []}}
