{"instance": {"input": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n", "references": ["    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n"], "id": "id19"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id19", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["from", 0], ["typing", 0], ["import", 0], ["list", 0], ["def", 0], ["sort", 0], ["numbers", 0], ["numbers", 0], ["str", 0], ["str", 0], ["input", 0], ["is", 0], ["a", 0], ["space", 0], ["delimited", 0], ["string", 0], ["of", 0], ["numberals", 0], ["from", 0], ["zero", 0], ["to", 0], ["nine", 0], ["valid", 0], ["choices", 0], ["are", 0], ["zero", 0], ["one", 0], ["two", 0], ["three", 0], ["four", 0], ["five", 0], ["six", 0], ["seven", 0], ["eight", 0], ["and", 0], ["nine", 0], ["return", 0], ["the", 0], ["string", 0], ["with", 0], ["numbers", 0], ["sorted", 0], ["from", 0], ["smallest", 0], ["to", 0], ["largest", 0], ["sort", 0], ["numbers", 0], ["three", 0], ["one", 0], ["five", 0], ["one", 0], ["three", 0], ["five", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["value", 0], ["map", 0], ["zero", 0], ["0", 0], ["one", 1], ["1", 4], ["two", 4], ["2", 4], ["three", 4], ["3", 4], ["four", 0], ["4", 0], ["five", 0], ["5", 0], ["six", 0], ["6", 0], ["seven", 0], ["7", 0], ["eight", 0], ["8", 0], ["nine", 0], ["9", 0], ["return", 0], ["join", 0], ["sorted", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["numbers", 0], ["split", 0], ["if", 0], ["x", 0], ["key", 0], ["lambda", 0], ["x", 0], ["value", 0], ["map", 0], ["x", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.20689655172413793, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.07758620689655173, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.43902439024390244, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.43902439024390244, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.20689655172413793, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07758620689655173, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.43902439024390244, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.43902439024390244, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n", "references": ["    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"], "id": "id156"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id156", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["int", 0], ["to", 0], ["mini", 0], ["roman", 0], ["number", 0], ["given", 0], ["a", 0], ["positive", 0], ["integer", 0], ["obtain", 0], ["its", 0], ["roman", 0], ["numeral", 0], ["equivalent", 0], ["as", 0], ["a", 0], ["string", 0], ["and", 0], ["return", 0], ["it", 0], ["in", 0], ["lowercase", 0], ["restrictions", 0], ["1", 0], ["num", 0], ["1000", 0], ["examples", 0], ["int", 0], ["to", 0], ["mini", 0], ["roman", 0], ["19", 0], ["xix", 0], ["int", 0], ["to", 0], ["mini", 0], ["roman", 0], ["152", 0], ["clii", 0], ["int", 0], ["to", 0], ["mini", 0], ["roman", 0], ["426", 0], ["cdxxvi", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["num", 0], ["1", 1], ["4", 0], ["5", 0], ["9", 0], ["10", 0], ["40", 0], ["50", 0], ["90", 0], ["100", 0], ["400", 0], ["500", 0], ["900", 0], ["1000", 0], ["sym", 0], ["i", 1], ["iv", 0], ["v", 0], ["ix", 0], ["x", 0], ["xl", 0], ["l", 0], ["xc", 0], ["c", 0], ["cd", 0], ["d", 0], ["cm", 0], ["m", 0], ["i", 0], ["12", 0], ["res", 0], ["while", 0], ["number", 0], ["div", 0], ["number", 0], ["num", 0], ["i", 0], ["number", 0], ["num", 0], ["i", 0], ["while", 0], ["div", 0], ["res", 0], ["sym", 0], ["i", 0], ["div", 0], ["1", 0], ["i", 0], ["1", 0], ["return", 0], ["res", 0], ["lower", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.047619047619047616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.047619047619047616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.48148148148148145, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.48148148148148145, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.047619047619047616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.047619047619047616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.48148148148148145, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.48148148148148145, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n", "references": ["    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n"], "id": "id105"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id105", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["by", 0], ["length", 0], ["arr", 0], ["given", 0], ["an", 0], ["array", 0], ["of", 0], ["integers", 0], ["sort", 0], ["the", 0], ["integers", 0], ["that", 0], ["are", 0], ["between", 0], ["1", 0], ["and", 0], ["9", 0], ["inclusive", 0], ["reverse", 0], ["the", 0], ["resulting", 0], ["array", 0], ["and", 0], ["then", 0], ["replace", 0], ["each", 0], ["digit", 0], ["by", 0], ["its", 0], ["corresponding", 0], ["name", 0], ["from", 0], ["one", 0], ["two", 0], ["three", 0], ["four", 0], ["five", 0], ["six", 0], ["seven", 0], ["eight", 0], ["nine", 0], ["for", 0], ["example", 0], ["arr", 0], ["2", 0], ["1", 0], ["1", 0], ["4", 0], ["5", 0], ["8", 0], ["2", 0], ["3", 0], ["sort", 0], ["arr", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["8", 0], ["reverse", 0], ["arr", 0], ["8", 0], ["5", 0], ["4", 0], ["3", 0], ["2", 0], ["2", 0], ["1", 0], ["1", 0], ["return", 0], ["eight", 0], ["five", 0], ["four", 0], ["three", 0], ["two", 0], ["two", 0], ["one", 0], ["one", 0], ["if", 0], ["the", 0], ["array", 0], ["is", 0], ["empty", 0], ["return", 0], ["an", 0], ["empty", 0], ["array", 0], ["arr", 0], ["return", 0], ["if", 0], ["the", 0], ["array", 0], ["has", 0], ["any", 0], ["strange", 0], ["number", 0], ["ignore", 0], ["it", 0], ["arr", 0], ["1", 0], ["1", 0], ["55", 0], ["sort", 0], ["arr", 0], ["1", 0], ["1", 0], ["55", 0], ["reverse", 0], ["arr", 0], ["55", 0], ["1", 0], ["1", 0], ["return", 0], ["one", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["dic", 0], ["1", 9], ["one", 9], ["2", 9], ["two", 10], ["3", 9], ["three", 9], ["4", 0], ["four", 0], ["5", 0], ["five", 0], ["6", 0], ["six", 0], ["7", 0], ["seven", 0], ["8", 0], ["eight", 0], ["9", 0], ["nine", 0], ["sorted", 0], ["arr", 0], ["sorted", 0], ["arr", 0], ["reverse", 0], ["true", 0], ["new", 0], ["arr", 0], ["for", 0], ["var", 0], ["in", 0], ["sorted", 0], ["arr", 0], ["try", 0], ["new", 0], ["arr", 0], ["append", 0], ["dic", 0], ["var", 0], ["except", 0], ["pass", 0], ["return", 0], ["new", 0], ["arr", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.18181818181818182, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.019865319865319867, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.04444444444444445, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.18181818181818182, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.019865319865319867, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.04444444444444445, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n", "references": ["    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"], "id": "id94"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id94", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["skjkasdkd", 0], ["lst", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["list", 0], ["of", 0], ["integers", 0], ["you", 0], ["need", 0], ["to", 0], ["find", 0], ["the", 0], ["largest", 0], ["prime", 0], ["value", 0], ["and", 0], ["return", 0], ["the", 0], ["sum", 0], ["of", 0], ["its", 0], ["digits", 0], ["examples", 0], ["for", 0], ["lst", 0], ["0", 0], ["3", 0], ["2", 0], ["1", 0], ["3", 0], ["5", 0], ["7", 0], ["4", 0], ["5", 0], ["5", 0], ["5", 0], ["2", 0], ["181", 0], ["32", 0], ["4", 0], ["32", 0], ["3", 0], ["2", 0], ["32", 0], ["324", 0], ["4", 0], ["3", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["10", 0], ["for", 0], ["lst", 0], ["1", 0], ["0", 0], ["1", 0], ["8", 0], ["2", 0], ["4597", 0], ["2", 0], ["1", 0], ["3", 0], ["40", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["4", 0], ["2", 0], ["5", 0], ["1", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["25", 0], ["for", 0], ["lst", 0], ["1", 0], ["3", 0], ["1", 0], ["32", 0], ["5107", 0], ["34", 0], ["83278", 0], ["109", 0], ["163", 0], ["23", 0], ["2323", 0], ["32", 0], ["30", 0], ["1", 0], ["9", 0], ["3", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["13", 0], ["for", 0], ["lst", 0], ["0", 0], ["724", 0], ["32", 0], ["71", 0], ["99", 0], ["32", 0], ["6", 0], ["0", 0], ["5", 0], ["91", 0], ["83", 0], ["0", 0], ["5", 0], ["6", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["11", 0], ["for", 0], ["lst", 0], ["0", 0], ["81", 0], ["12", 0], ["3", 0], ["1", 0], ["21", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["3", 0], ["for", 0], ["lst", 0], ["0", 0], ["8", 0], ["1", 0], ["2", 0], ["1", 0], ["7", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["7", 0], ["", 0]], "metrics": []}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["def", 1], ["isprime", 1], ["n", 1], ["for", 1], ["i", 1], ["in", 1], ["range", 1], ["2", 1], ["int", 1], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["maxx", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["lst", 0], ["if", 0], ["lst", 0], ["i", 0], ["maxx", 0], ["and", 0], ["isprime", 0], ["lst", 0], ["i", 0], ["maxx", 0], ["lst", 0], ["i", 0], ["i", 0], ["1", 0], ["result", 0], ["sum", 0], ["int", 0], ["digit", 0], ["for", 0], ["digit", 0], ["in", 0], ["str", 0], ["maxx", 0], ["return", 0], ["result", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.20930232558139536, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.20930232558139536, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.38181818181818183, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.38181818181818183, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.20930232558139536, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.20930232558139536, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.38181818181818183, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.38181818181818183, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
