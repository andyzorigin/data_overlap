{"instance": {"input": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "references": ["    return n**2\n"], "id": "id41"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id41", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["car", 0], ["race", 0], ["collision", 0], ["n", 0], ["int", 1], ["imagine", 1], ["a", 1], ["road", 1], ["that", 1], ["s", 1], ["a", 1], ["perfectly", 1], ["straight", 1], ["infinitely", 1], ["long", 1], ["line", 1], ["n", 1], ["cars", 1], ["are", 1], ["driving", 1], ["left", 1], ["to", 1], ["right", 1], ["simultaneously", 1], ["a", 1], ["different", 1], ["set", 1], ["of", 1], ["n", 1], ["cars", 1], ["are", 1], ["driving", 1], ["right", 1], ["to", 1], ["left", 1], ["the", 1], ["two", 1], ["sets", 1], ["of", 1], ["cars", 1], ["start", 1], ["out", 1], ["being", 1], ["very", 1], ["far", 1], ["from", 1], ["each", 1], ["other", 1], ["all", 1], ["cars", 1], ["move", 1], ["in", 1], ["the", 1], ["same", 1], ["speed", 1], ["two", 1], ["cars", 1], ["are", 1], ["said", 1], ["to", 1], ["collide", 1], ["when", 1], ["a", 1], ["car", 1], ["that", 1], ["s", 1], ["moving", 1], ["left", 1], ["to", 1], ["right", 1], ["hits", 1], ["a", 1], ["car", 1], ["that", 1], ["s", 1], ["moving", 1], ["right", 1], ["to", 1], ["left", 1], ["however", 1], ["the", 1], ["cars", 1], ["are", 1], ["infinitely", 1], ["sturdy", 1], ["and", 1], ["strong", 1], ["as", 1], ["a", 1], ["result", 1], ["they", 1], ["continue", 1], ["moving", 1], ["in", 1], ["their", 1], ["trajectory", 1], ["as", 1], ["if", 1], ["they", 0], ["did", 0], ["not", 0], ["collide", 0], ["this", 0], ["function", 0], ["outputs", 0], ["the", 0], ["number", 0], ["of", 0], ["such", 0], ["collisions", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9306930693069307, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9306930693069307, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9380530973451328, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9380530973451328, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9306930693069307, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9306930693069307, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9380530973451328, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9380530973451328, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["return", 0], ["n", 0], ["2", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "references": ["    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"], "id": "id31"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id31", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 2], ["is", 2], ["prime", 2], ["n", 2], ["return", 2], ["true", 2], ["if", 2], ["a", 2], ["given", 2], ["number", 2], ["is", 2], ["prime", 2], ["and", 2], ["false", 2], ["otherwise", 2], ["is", 2], ["prime", 2], ["6", 2], ["false", 2], ["is", 2], ["prime", 2], ["101", 2], ["true", 2], ["is", 2], ["prime", 2], ["11", 2], ["true", 2], ["is", 2], ["prime", 2], ["13441", 2], ["true", 2], ["is", 0], ["prime", 0], ["61", 0], ["true", 0], ["is", 0], ["prime", 0], ["4", 0], ["false", 0], ["is", 0], ["prime", 0], ["1", 0], ["false", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9393939393939394, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4696969696969697, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9555555555555556, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4777777777777778, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9393939393939394, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4696969696969697, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9555555555555556, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4777777777777778, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["false", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["k", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "references": ["    return sorted(list(set(l)))\n"], "id": "id34"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id34", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 1], ["unique", 1], ["l", 1], ["list", 1], ["return", 1], ["sorted", 1], ["unique", 1], ["elements", 1], ["in", 1], ["a", 1], ["list", 1], ["unique", 1], ["5", 1], ["3", 1], ["5", 1], ["2", 0], ["3", 0], ["3", 0], ["9", 0], ["0", 0], ["123", 0], ["0", 0], ["2", 0], ["3", 0], ["5", 0], ["9", 0], ["123", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8823529411764706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8823529411764706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9310344827586207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9310344827586207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8823529411764706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8823529411764706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9310344827586207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9310344827586207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["return", 0], ["sorted", 0], ["list", 0], ["set", 0], ["l", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n", "references": ["    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n"], "id": "id116"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id116", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["sort", 0], ["array", 0], ["arr", 0], ["in", 1], ["this", 1], ["kata", 1], ["you", 1], ["have", 1], ["to", 1], ["sort", 1], ["an", 1], ["array", 1], ["of", 1], ["non", 1], ["negative", 1], ["integers", 1], ["according", 1], ["to", 1], ["number", 1], ["of", 1], ["ones", 1], ["in", 1], ["their", 1], ["binary", 1], ["representation", 1], ["in", 1], ["ascending", 1], ["order", 1], ["for", 1], ["similar", 1], ["number", 1], ["of", 1], ["ones", 1], ["sort", 1], ["based", 1], ["on", 1], ["decimal", 1], ["value", 1], ["it", 1], ["must", 1], ["be", 1], ["implemented", 1], ["like", 1], ["this", 1], ["sort", 1], ["array", 1], ["1", 1], ["5", 1], ["2", 1], ["3", 1], ["4", 1], ["1", 1], ["2", 1], ["3", 1], ["4", 1], ["5", 1], ["sort", 1], ["array", 1], ["2", 1], ["3", 1], ["4", 1], ["5", 1], ["6", 1], ["6", 1], ["5", 1], ["4", 1], ["3", 1], ["2", 1], ["sort", 0], ["array", 0], ["1", 0], ["0", 0], ["2", 0], ["3", 0], ["4", 0], ["0", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9154929577464789, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9154929577464789, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.927710843373494, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.927710843373494, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9154929577464789, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9154929577464789, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.927710843373494, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.927710843373494, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["return", 0], ["sorted", 0], ["sorted", 0], ["arr", 0], ["key", 0], ["lambda", 0], ["x", 0], ["bin", 0], ["x", 0], ["2", 0], ["count", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n", "references": ["    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"], "id": "id161"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id161", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["solve", 0], ["s", 0], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["string", 1], ["s", 1], ["if", 1], ["s", 1], ["i", 1], ["is", 1], ["a", 1], ["letter", 1], ["reverse", 1], ["its", 1], ["case", 1], ["from", 1], ["lower", 1], ["to", 1], ["upper", 1], ["or", 1], ["vise", 1], ["versa", 1], ["otherwise", 1], ["keep", 1], ["it", 1], ["as", 1], ["it", 1], ["is", 1], ["if", 1], ["the", 1], ["string", 1], ["contains", 1], ["no", 1], ["letters", 1], ["reverse", 1], ["the", 1], ["string", 1], ["the", 1], ["function", 1], ["should", 1], ["return", 1], ["the", 1], ["resulted", 1], ["string", 1], ["examples", 0], ["solve", 0], ["1234", 0], ["4321", 0], ["solve", 0], ["ab", 0], ["ab", 0], ["solve", 0], ["a", 0], ["c", 0], ["a", 0], ["c", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8979591836734694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8979591836734694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9180327868852459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9180327868852459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8979591836734694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8979591836734694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9180327868852459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9180327868852459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["flg", 0], ["0", 0], ["idx", 0], ["0", 0], ["new", 0], ["str", 0], ["list", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["isalpha", 0], ["new", 0], ["str", 0], ["idx", 0], ["i", 0], ["swapcase", 0], ["flg", 0], ["1", 0], ["idx", 0], ["1", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["new", 0], ["str", 0], ["s", 0], ["i", 0], ["if", 0], ["flg", 0], ["0", 0], ["return", 0], ["s", 0], ["len", 0], ["s", 0], ["1", 0], ["return", 0], ["s", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n", "references": ["    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"], "id": "id114"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id114", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 1], ["minsubarraysum", 1], ["nums", 1], ["given", 2], ["an", 2], ["array", 2], ["of", 2], ["integers", 2], ["nums", 2], ["find", 1], ["the", 1], ["minimum", 1], ["sum", 1], ["of", 1], ["any", 1], ["non", 1], ["empty", 1], ["sub", 1], ["array", 1], ["of", 1], ["nums", 1], ["example", 1], ["minsubarraysum", 1], ["2", 0], ["3", 0], ["4", 0], ["1", 0], ["2", 0], ["4", 0], ["1", 0], ["minsubarraysum", 0], ["1", 0], ["2", 0], ["3", 0], ["6", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.92, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9459459459459459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9459459459459459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.92, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9459459459459459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9459459459459459, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["max", 0], ["sum", 0], ["0", 0], ["s", 0], ["0", 0], ["for", 0], ["num", 0], ["in", 0], ["nums", 0], ["s", 0], ["num", 0], ["if", 0], ["s", 0], ["0", 0], ["s", 0], ["0", 0], ["max", 0], ["sum", 0], ["max", 0], ["s", 0], ["max", 0], ["sum", 0], ["if", 0], ["max", 0], ["sum", 0], ["0", 0], ["max", 0], ["sum", 0], ["max", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["nums", 0], ["min", 0], ["sum", 0], ["max", 0], ["sum", 0], ["return", 0], ["min", 0], ["sum", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "references": ["    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n"], "id": "id20"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id20", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["from", 0], ["typing", 0], ["import", 0], ["list", 0], ["tuple", 0], ["def", 1], ["find", 1], ["closest", 1], ["elements", 1], ["numbers", 1], ["list", 1], ["float", 1], ["tuple", 1], ["float", 1], ["float", 1], ["from", 1], ["a", 1], ["supplied", 1], ["list", 1], ["of", 1], ["numbers", 1], ["of", 1], ["length", 1], ["at", 1], ["least", 1], ["two", 1], ["select", 1], ["and", 1], ["return", 1], ["two", 1], ["that", 1], ["are", 1], ["the", 1], ["closest", 1], ["to", 1], ["each", 1], ["other", 1], ["and", 1], ["return", 1], ["them", 1], ["in", 1], ["order", 1], ["smaller", 1], ["number", 1], ["larger", 1], ["number", 1], ["find", 2], ["closest", 2], ["elements", 1], ["1", 1], ["0", 1], ["2", 1], ["0", 1], ["3", 1], ["0", 1], ["4", 1], ["0", 1], ["5", 1], ["0", 1], ["2", 1], ["2", 1], ["2", 1], ["0", 1], ["2", 1], ["2", 1], ["find", 2], ["closest", 2], ["elements", 1], ["1", 3], ["0", 3], ["2", 1], ["0", 1], ["3", 0], ["0", 0], ["4", 0], ["0", 0], ["5", 0], ["0", 0], ["2", 0], ["0", 0], ["2", 0], ["0", 0], ["2", 0], ["0", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9178082191780822, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8721461187214613, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9294117647058824, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9294117647058824, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9178082191780822, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8721461187214613, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9294117647058824, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9294117647058824, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["closest", 0], ["pair", 0], ["none", 0], ["distance", 0], ["none", 0], ["for", 0], ["idx", 0], ["elem", 0], ["in", 0], ["enumerate", 0], ["numbers", 0], ["for", 0], ["idx2", 0], ["elem2", 0], ["in", 0], ["enumerate", 0], ["numbers", 0], ["if", 0], ["idx", 0], ["idx2", 0], ["if", 0], ["distance", 0], ["is", 0], ["none", 0], ["distance", 0], ["abs", 0], ["elem", 0], ["elem2", 0], ["closest", 0], ["pair", 0], ["tuple", 0], ["sorted", 0], ["elem", 0], ["elem2", 0], ["else", 0], ["new", 0], ["distance", 0], ["abs", 0], ["elem", 0], ["elem2", 0], ["if", 0], ["new", 0], ["distance", 0], ["distance", 0], ["distance", 0], ["new", 0], ["distance", 0], ["closest", 0], ["pair", 0], ["tuple", 0], ["sorted", 0], ["elem", 0], ["elem2", 0], ["return", 0], ["closest", 0], ["pair", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "references": ["    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n"], "id": "id102"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id102", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 3], ["choose", 3], ["num", 3], ["x", 3], ["y", 3], ["this", 3], ["function", 3], ["takes", 3], ["two", 3], ["positive", 3], ["numbers", 3], ["x", 3], ["and", 3], ["y", 3], ["and", 3], ["returns", 3], ["the", 3], ["biggest", 3], ["even", 3], ["integer", 3], ["number", 3], ["that", 3], ["is", 3], ["in", 3], ["the", 3], ["range", 3], ["x", 3], ["y", 3], ["inclusive", 3], ["if", 2], ["there", 2], ["s", 2], ["no", 2], ["such", 2], ["number", 2], ["then", 2], ["the", 2], ["function", 2], ["should", 2], ["return", 2], ["1", 2], ["for", 0], ["example", 0], ["choose", 0], ["num", 0], ["12", 0], ["15", 0], ["14", 0], ["choose", 0], ["num", 0], ["13", 0], ["12", 0], ["1", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9534883720930233, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3643410852713178, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9636363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3939393939393939, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9534883720930233, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3643410852713178, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9636363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3939393939393939, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["if", 0], ["x", 0], ["y", 0], ["return", 0], ["1", 0], ["if", 0], ["y", 0], ["2", 0], ["0", 0], ["return", 0], ["y", 0], ["if", 0], ["x", 0], ["y", 0], ["return", 0], ["1", 0], ["return", 0], ["y", 0], ["1", 0], ["", 0]], "metrics": []}}
