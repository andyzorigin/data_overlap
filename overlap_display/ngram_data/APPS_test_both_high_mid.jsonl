{"instance": {"input": "\nQUESTION:\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj >= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n\nNote:\nYou may assume the greed factor is always positive. \nYou cannot assign more than one cookie to one child.\n\n\nExample 1:\n\nInput: [1,2,3], [1,1]\n\nOutput: 1\n\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n\n\n\nExample 2:\n\nInput: [1,2], [1,2,3]\n\nOutput: 2\n\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    res = 0\n\t    heapq.heapify(g)\n\t    s.sort()\n\t    for num in s:\n\t\t   if not g:\n\t\t\t  break\n\t\t   elif g[0] <= num:\n\t\t\t  res += 1\n\t\t\t  heapq.heappop(g)\n\t    return res\n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g.sort()\n\t    s.sort()\n\t    res = 0 \n\t    Lg,Ls = len(g),len(s)\n\t    i=j=0 \n\t    while i<Lg and j<Ls:\n\t\t   if s[j] >= g[i]:\n\t\t\t  res += 1\n\t\t\t  j += 1\n\t\t\t  i += 1\n\t\t   else:\n\t\t\t  j += 1\n\t    return res\n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g.sort()\n\t    s.sort()\n\t    i,j = 0,0\n\t    happyKids = 0\n\t    while i < len(g) and j < len(s):\n\t\t   if s[j] >= g[i]:\n\t\t\t  happyKids += 1\n\t\t\t  i += 1\n\t\t   j += 1\n\t    return happyKids\n\t    \n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g.sort(), s.sort()\n\t    count = 0\n\t    i = 0\n\t    while count < len(g) and i < len(s):\n\t\t   if s[i] >= g[count]:\n\t\t\t  count += 1\n\t\t   i+=1\n\t    return count\n  \n\t    \n\t    \n\t\t\t  \n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g = sorted(g)\n\t    s = sorted(s)\n\t    result = 0\n\t    i = 0\n\t    j = 0\n\t    while i<len(g) and j< len(s):\n\t\t   if g[i]<= s[j]:\n\t\t\t  result = result + 1\n\t\t\t  i = i+1\n\t\t\t  j = j+1\n\t\t   else:\n\t\t\t  j = j+1\n\t    return result\n\t    \n\t\t\t  \n", "class Solution:\n\t#     def findContentChildren(self, g, s):\n\t#         \"\"\"\n\t#         :type g: List[int]\n\t#         :type s: List[int]\n\t#         :rtype: int\n\t#         \"\"\"\n\t#         total = 1\n\t#         child_to_give = []\n\t#         child_index = 0\n\t#         s.sort()\n\t#         g.sort()\n\t#         for cookie in s:\n\t#             for child_greed in g:\n\t#                 print(\"child_greed \" + str(child_greed))\n\t#                 print(\"cookie \" + str(cookie))\n\t#                 if child_greed <= cookie:\n\t#                     if child_index not in child_to_give:\n\t#                         child_to_give.append(child_index)\n\t#                         g.remove(child_greed)  \n\t\n\t#                 child_index += 1        \n\t\t\t\t\t\t\t\t\t\n\t#         return len(child_to_give)\n\t\n\t\t\t\t\tdef findContentChildren(self, g, s):\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t:type g: List[int]\n\t\t\t\t\t\t\t\t\t:type s: List[int]\n\t\t\t\t\t\t\t\t\t:rtype: int\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\ts.sort()\n\t\t\t\t\t\t\t\t\tg.sort()\n\t\t\t\t\t\t\t\t\ttotal = 1\n\t\t\t\t\t\t\t\t\tchild_to_give = []\n\t\t\t\t\t\t\t\t\tchild_index = 0\n\t\n\t\t\t\t\t\t\t\t\tstart_i = 0\n\t\t\t\t\t\t\t\t\tfor j in range(0, len(g)):\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor i in range(start_i, len(s)):      \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif s[i] >= g[j]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchild_to_give.append(j)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart_i = i + 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tprint(child_to_give)\n\t\t\t\t\t\t\t\t\treturn len(child_to_give)\n\t\t\t\t\t\n\t#     def findContentChildrenSlow(self, g, s):\n\t#         \"\"\"\n\t#         :type g: List[int]\n\t#         :type s: List[int]\n\t#         :rtype: int\n\t#         \"\"\"\n\t#         s.sort()\n\t#         g.sort()\n\t#         total = 1\n\t#         child_to_give = []\n\t#         child_index = 0\n\t#         for child_greed in g:\n\t#             # Find children greed less than or equal to cookie value\n\t#             for cookie in s:\n\t#                 if child_greed <= cookie:\n\t#                     # print(cookie)\n\t#                     # print(child_greed)\n\t#                     if child_index not in child_to_give:\n\t#                         child_to_give.append(child_index)\n\t#                         # g.remove(child_greed)  \n\t#                         s.remove(cookie)\n\t#                         # print(g)\n\t#                         # print(s)\n\t#                         # break\n\t#             child_index += 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t#         return len(child_to_give)\n\t#         # return 2\n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g.sort()\n\t    s.sort()\n\t    print(g)\n\t    print(s)\n\t    \n\t    count_child = 0\n\t    count_cookie = 0\n\t    \n\t    while(count_child < len(g) and count_cookie < len(s)):\n\t\t   if (g[count_child] <= s[count_cookie]):\n\t\t\t  count_child += 1\n\t\t   count_cookie += 1\n\t\t   \n\t    return count_child\n\t\n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g.sort()\n\t    s.sort()\n\t    \n\t    index, result = 0, 0\n\t    while index < len(s) and len(g) > 0:\n\t\t   if s[index] >= g[0]:\n\t\t\t  result += 1\n\t\t\t  index += 1\n\t\t\t  g.remove(g[0])\n\t\t   else:\n\t\t\t  index += 1\n\t    return result\n\t\t   \n"], "id": "id7839"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7839", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["assume", 10], ["you", 10], ["are", 10], ["an", 10], ["awesome", 10], ["parent", 10], ["and", 10], ["want", 10], ["to", 10], ["give", 10], ["your", 10], ["children", 10], ["some", 10], ["cookies", 10], ["but", 10], ["you", 10], ["should", 10], ["give", 10], ["each", 10], ["child", 9], ["at", 9], ["most", 9], ["one", 9], ["cookie", 9], ["each", 9], ["child", 9], ["i", 9], ["has", 9], ["a", 9], ["greed", 9], ["factor", 9], ["gi", 9], ["which", 10], ["is", 10], ["the", 10], ["minimum", 10], ["size", 10], ["of", 10], ["a", 10], ["cookie", 10], ["that", 10], ["the", 10], ["child", 9], ["will", 9], ["be", 9], ["content", 9], ["with", 9], ["and", 9], ["each", 9], ["cookie", 9], ["j", 9], ["has", 9], ["a", 9], ["size", 9], ["sj", 9], ["if", 9], ["sj", 9], ["gi", 9], ["we", 10], ["can", 10], ["assign", 10], ["the", 10], ["cookie", 10], ["j", 10], ["to", 10], ["the", 10], ["child", 10], ["i", 10], ["and", 10], ["the", 10], ["child", 10], ["i", 10], ["will", 10], ["be", 10], ["content", 10], ["your", 10], ["goal", 10], ["is", 10], ["to", 10], ["maximize", 9], ["the", 9], ["number", 9], ["of", 9], ["your", 9], ["content", 9], ["children", 9], ["and", 9], ["output", 9], ["the", 9], ["maximum", 9], ["number", 9], ["note", 9], ["you", 11], ["may", 11], ["assume", 11], ["the", 11], ["greed", 11], ["factor", 11], ["is", 11], ["always", 8], ["positive", 8], ["you", 7], ["cannot", 7], ["assign", 7], ["more", 7], ["than", 7], ["one", 7], ["cookie", 7], ["to", 7], ["one", 7], ["child", 7], ["example", 7], ["1", 7], ["input", 7], ["1", 7], ["2", 7], ["3", 7], ["1", 7], ["1", 7], ["output", 7], ["1", 7], ["explanation", 9], ["you", 10], ["have", 10], ["3", 10], ["children", 10], ["and", 10], ["2", 9], ["cookies", 9], ["the", 9], ["greed", 9], ["factors", 9], ["of", 9], ["3", 9], ["children", 9], ["are", 9], ["1", 9], ["2", 9], ["3", 9], ["and", 9], ["even", 9], ["though", 9], ["you", 9], ["have", 9], ["2", 9], ["cookies", 9], ["since", 9], ["their", 9], ["size", 9], ["is", 9], ["both", 9], ["1", 9], ["you", 9], ["could", 9], ["only", 9], ["make", 9], ["the", 9], ["child", 7], ["whose", 7], ["greed", 7], ["factor", 7], ["is", 7], ["1", 7], ["content", 7], ["you", 7], ["need", 7], ["to", 7], ["output", 7], ["1", 7], ["example", 7], ["2", 7], ["input", 7], ["1", 7], ["2", 7], ["1", 7], ["2", 7], ["3", 7], ["output", 7], ["2", 7], ["explanation", 9], ["you", 10], ["have", 10], ["2", 10], ["children", 10], ["and", 9], ["3", 8], ["cookies", 8], ["the", 8], ["greed", 8], ["factors", 8], ["of", 8], ["2", 8], ["children", 8], ["are", 8], ["1", 8], ["2", 8], ["you", 9], ["have", 9], ["3", 9], ["cookies", 9], ["and", 9], ["their", 9], ["sizes", 9], ["are", 9], ["big", 9], ["enough", 0], ["to", 0], ["gratify", 0], ["all", 0], ["of", 0], ["the", 0], ["children", 0], ["you", 0], ["need", 0], ["to", 0], ["output", 0], ["2", 0], ["class", 0], ["solution", 0], ["def", 0], ["findcontentchildren", 0], ["self", 0], ["g", 0], ["list", 0], ["int", 0], ["s", 0], ["list", 0], ["int", 0], ["int", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8991228070175439, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.10304691653375844, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9041666666666667, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11504298941798909, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.868421052631579, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.10025584795321614, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9041666666666667, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11504298941798909, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 0], ["s", 0], ["type", 0], ["g", 0], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["res", 0], ["0", 0], ["heapq", 0], ["heapify", 0], ["g", 0], ["s", 0], ["sort", 0], ["for", 0], ["num", 0], ["in", 0], ["s", 0], ["if", 0], ["not", 0], ["g", 0], ["break", 0], ["elif", 0], ["g", 0], ["0", 0], ["num", 0], ["res", 0], ["1", 0], ["heapq", 0], ["heappop", 0], ["g", 0], ["return", 0], ["res", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 1], ["type", 1], ["g", 1], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sort", 0], ["s", 0], ["sort", 0], ["res", 0], ["0", 0], ["lg", 0], ["ls", 0], ["len", 0], ["g", 0], ["len", 0], ["s", 0], ["i", 0], ["j", 0], ["0", 0], ["while", 0], ["i", 0], ["lg", 0], ["and", 0], ["j", 0], ["ls", 0], ["if", 0], ["s", 0], ["j", 0], ["g", 0], ["i", 0], ["res", 0], ["1", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["else", 0], ["j", 0], ["1", 0], ["return", 0], ["res", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 1], ["type", 1], ["g", 1], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sort", 0], ["s", 0], ["sort", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["happykids", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["g", 0], ["and", 0], ["j", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["j", 0], ["g", 0], ["i", 0], ["happykids", 0], ["1", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["return", 0], ["happykids", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 1], ["type", 1], ["g", 1], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sort", 0], ["s", 0], ["sort", 0], ["count", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["count", 0], ["len", 0], ["g", 0], ["and", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["g", 0], ["count", 0], ["count", 0], ["1", 0], ["i", 0], ["1", 0], ["return", 0], ["count", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 0], ["type", 0], ["g", 0], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sorted", 0], ["g", 0], ["s", 0], ["sorted", 0], ["s", 0], ["result", 0], ["0", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["g", 0], ["and", 0], ["j", 0], ["len", 0], ["s", 0], ["if", 0], ["g", 0], ["i", 0], ["s", 0], ["j", 0], ["result", 0], ["result", 0], ["1", 0], ["i", 0], ["i", 0], ["1", 0], ["j", 0], ["j", 0], ["1", 0], ["else", 0], ["j", 0], ["j", 0], ["1", 0], ["return", 0], ["result", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 0], ["s", 0], ["type", 0], ["g", 0], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["total", 0], ["1", 0], ["child", 0], ["to", 0], ["give", 0], ["child", 0], ["index", 0], ["0", 0], ["s", 0], ["sort", 0], ["g", 0], ["sort", 0], ["for", 0], ["cookie", 0], ["in", 0], ["s", 0], ["for", 0], ["child", 0], ["greed", 0], ["in", 0], ["g", 0], ["print", 0], ["child", 0], ["greed", 0], ["str", 0], ["child", 0], ["greed", 0], ["print", 0], ["cookie", 0], ["str", 0], ["cookie", 0], ["if", 0], ["child", 0], ["greed", 0], ["cookie", 0], ["if", 0], ["child", 0], ["index", 0], ["not", 0], ["in", 0], ["child", 0], ["to", 0], ["give", 0], ["child", 0], ["to", 0], ["give", 0], ["append", 0], ["child", 0], ["index", 0], ["g", 0], ["remove", 0], ["child", 0], ["greed", 0], ["child", 0], ["index", 0], ["1", 0], ["return", 0], ["len", 0], ["child", 0], ["to", 0], ["give", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 0], ["s", 0], ["type", 0], ["g", 0], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["s", 0], ["sort", 0], ["g", 0], ["sort", 0], ["total", 0], ["1", 0], ["child", 0], ["to", 0], ["give", 0], ["child", 0], ["index", 0], ["0", 0], ["start", 0], ["i", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["g", 0], ["j", 0], ["child", 0], ["to", 0], ["give", 0], ["append", 0], ["j", 0], ["start", 0], ["i", 0], ["i", 0], ["1", 0], ["break", 0], ["print", 0], ["child", 0], ["to", 0], ["give", 0], ["return", 0], ["len", 0], ["child", 0], ["to", 0], ["give", 0], ["def", 0], ["findcontentchildrenslow", 0], ["self", 1], ["g", 0], ["s", 0], ["type", 0], ["g", 0], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["s", 0], ["sort", 0], ["g", 0], ["sort", 0], ["total", 0], ["1", 0], ["child", 0], ["to", 0], ["give", 0], ["child", 0], ["index", 0], ["0", 0], ["for", 0], ["child", 0], ["greed", 0], ["in", 0], ["g", 0], ["find", 0], ["children", 0], ["greed", 0], ["less", 0], ["than", 0], ["or", 0], ["equal", 0], ["to", 0], ["cookie", 0], ["value", 0], ["for", 0], ["cookie", 0], ["in", 0], ["s", 0], ["if", 0], ["child", 0], ["greed", 0], ["cookie", 0], ["print", 0], ["cookie", 0], ["print", 0], ["child", 0], ["greed", 0], ["if", 0], ["child", 0], ["index", 0], ["not", 0], ["in", 0], ["child", 0], ["to", 0], ["give", 0], ["child", 0], ["to", 0], ["give", 0], ["append", 0], ["child", 0], ["index", 0], ["g", 0], ["remove", 0], ["child", 0], ["greed", 0], ["s", 0], ["remove", 0], ["cookie", 0], ["print", 0], ["g", 0], ["print", 0], ["s", 0], ["break", 0], ["child", 0], ["index", 0], ["1", 0], ["return", 0], ["len", 0], ["child", 0], ["to", 0], ["give", 0], ["return", 0], ["2", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 1], ["type", 1], ["g", 1], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sort", 0], ["s", 0], ["sort", 0], ["print", 0], ["g", 0], ["print", 0], ["s", 0], ["count", 0], ["child", 0], ["0", 0], ["count", 0], ["cookie", 0], ["0", 0], ["while", 0], ["count", 0], ["child", 0], ["len", 0], ["g", 0], ["and", 0], ["count", 0], ["cookie", 0], ["len", 0], ["s", 0], ["if", 0], ["g", 0], ["count", 0], ["child", 0], ["s", 0], ["count", 0], ["cookie", 0], ["count", 0], ["child", 0], ["1", 0], ["count", 0], ["cookie", 0], ["1", 0], ["return", 0], ["count", 0], ["child", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 1], ["type", 1], ["g", 1], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sort", 0], ["s", 0], ["sort", 0], ["index", 0], ["result", 0], ["0", 0], ["0", 0], ["while", 0], ["index", 0], ["len", 0], ["s", 0], ["and", 0], ["len", 0], ["g", 0], ["0", 0], ["if", 0], ["s", 0], ["index", 0], ["g", 0], ["0", 0], ["result", 0], ["1", 0], ["index", 0], ["1", 0], ["g", 0], ["remove", 0], ["g", 0], ["0", 0], ["else", 0], ["index", 0], ["1", 0], ["return", 0], ["result", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08433734939759036, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08433734939759036, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.28499156829679595, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.28499156829679595, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08433734939759036, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08433734939759036, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.28499156829679595, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.28499156829679595, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nGiven head, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n\nReturn true if there is a cycle in the linked list. Otherwise, return false.\n\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n\n\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n\n\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\n\nConstraints:\n\nThe number of the nodes in the list is in the range [0, 104].\n-105 <= Node.val <= 105\npos is -1 or a valid index in the linked-list.\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tif head == None:\n\t\t\treturn False\n\t\t\n\t\tslow = head\n\t\tfast = head.next\n\t\t\n\t\twhile slow != fast:\n\t\t\tif fast is None or fast.next is None:\n\t\t\t\treturn False\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next.next\n\t\t\n\t\treturn True\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tslow = head\n\t\tfast = head\n\t\twhile fast and fast.next:\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next.next\n\t\t\tif slow == fast:\n\t\t\t\treturn True\n\t\treturn False\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\t\n\t\tslow = head\n\t\tfast = head\n\t\t\n\t\t\n\t\twhile fast and fast.next:\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next.next\n\t\t\tif slow == fast:\n\t\t\t\treturn True\n\t\t\n\t\treturn False\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tnodes_seen = set()\n\t\twhile head is not None:\n\t\t\tif head in nodes_seen:\n\t\t\t\treturn True\n\t\t\tnodes_seen.add(head)\n\t\t\thead = head.next\n\t\treturn False\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tcur = head\n\t\tcheck = set()\n\t\twhile cur:\n\t\t\tif cur in check:\n\t\t\t\treturn True\n\t\t\tcheck.add(cur)\n\t\t\tcur = cur.next\n\t\treturn False\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\ttry:\n\t\t\tslow = head\n\t\t\tfast = head.next \n\t\t\twhile slow is not fast:\n\t\t\t\tslow = slow.next\n\t\t\t\tfast = fast.next.next\n\t\t\treturn True\n\t\texcept:\n\t\t\treturn False\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tif head is None:\n\t\t\treturn False\n\n\t\tslow, fast = head, head\n\t\twhile fast.next and fast.next.next:\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next.next\n\t\t\tif slow == fast:\n\t\t\t\treturn True\n\t\treturn False\n"], "id": "id7247"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7247", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["given", 2], ["head", 2], ["the", 2], ["head", 2], ["of", 2], ["a", 3], ["linked", 2], ["list", 2], ["determine", 2], ["if", 2], ["the", 2], ["linked", 2], ["list", 2], ["has", 2], ["a", 2], ["cycle", 2], ["in", 2], ["it", 2], ["there", 7], ["is", 7], ["a", 7], ["cycle", 7], ["in", 7], ["a", 7], ["linked", 7], ["list", 7], ["if", 7], ["there", 7], ["is", 7], ["some", 7], ["node", 7], ["in", 7], ["the", 7], ["list", 7], ["that", 7], ["can", 7], ["be", 7], ["reached", 7], ["again", 7], ["by", 7], ["continuously", 7], ["following", 7], ["the", 7], ["next", 7], ["pointer", 7], ["internally", 7], ["pos", 7], ["is", 7], ["used", 7], ["to", 7], ["denote", 7], ["the", 7], ["index", 5], ["of", 5], ["the", 5], ["node", 5], ["that", 5], ["tail", 5], ["s", 5], ["next", 5], ["pointer", 5], ["is", 2], ["connected", 2], ["to", 2], ["note", 2], ["that", 2], ["pos", 2], ["is", 2], ["not", 2], ["passed", 2], ["as", 2], ["a", 2], ["parameter", 2], ["return", 2], ["true", 2], ["if", 0], ["there", 0], ["is", 0], ["a", 0], ["cycle", 0], ["in", 0], ["the", 0], ["linked", 0], ["list", 0], ["otherwise", 0], ["return", 0], ["false", 0], ["input", 8], ["head", 8], ["3", 8], ["2", 8], ["0", 8], ["4", 8], ["pos", 8], ["1", 8], ["output", 2], ["true", 2], ["explanation", 2], ["there", 2], ["is", 2], ["a", 0], ["cycle", 0], ["in", 0], ["the", 0], ["linked", 0], ["list", 0], ["where", 0], ["the", 0], ["tail", 0], ["connects", 0], ["to", 0], ["the", 0], ["1st", 0], ["node", 0], ["0", 0], ["indexed", 0], ["input", 10], ["head", 10], ["1", 10], ["2", 10], ["pos", 10], ["0", 10], ["output", 2], ["true", 2], ["explanation", 2], ["there", 2], ["is", 2], ["a", 2], ["cycle", 2], ["in", 0], ["the", 0], ["linked", 0], ["list", 0], ["where", 0], ["the", 0], ["tail", 0], ["connects", 0], ["to", 0], ["the", 0], ["0th", 0], ["node", 0], ["input", 9], ["head", 9], ["1", 9], ["pos", 9], ["1", 0], ["output", 0], ["false", 0], ["explanation", 3], ["there", 3], ["is", 3], ["no", 3], ["cycle", 3], ["in", 3], ["the", 4], ["linked", 4], ["list", 4], ["constraints", 5], ["the", 5], ["number", 4], ["of", 2], ["the", 2], ["nodes", 2], ["in", 2], ["the", 2], ["list", 2], ["is", 2], ["in", 2], ["the", 2], ["range", 2], ["0", 2], ["104", 2], ["105", 2], ["node", 2], ["val", 2], ["105", 0], ["pos", 0], ["is", 0], ["1", 0], ["or", 0], ["a", 0], ["valid", 0], ["index", 0], ["in", 1], ["the", 1], ["linked", 3], ["list", 4], ["definition", 120], ["for", 121], ["singly", 121], ["linked", 121], ["list", 121], ["class", 138], ["listnode", 134], ["def", 66], ["init", 2], ["self", 2], ["x", 2], ["self", 2], ["val", 2], ["x", 0], ["self", 0], ["next", 0], ["none", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7061611374407583, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.22080334469837556, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9327354260089686, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.520627802690583, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6682464454976303, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.22046565861731734, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9327354260089686, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.520627802690583, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["if", 0], ["head", 0], ["none", 0], ["return", 0], ["false", 0], ["slow", 0], ["head", 0], ["fast", 0], ["head", 0], ["next", 0], ["while", 0], ["slow", 0], ["fast", 0], ["if", 0], ["fast", 0], ["is", 0], ["none", 0], ["or", 0], ["fast", 0], ["next", 0], ["is", 0], ["none", 0], ["return", 0], ["false", 0], ["slow", 0], ["slow", 0], ["next", 0], ["fast", 0], ["fast", 0], ["next", 0], ["next", 0], ["return", 0], ["true", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["slow", 4], ["head", 4], ["fast", 9], ["head", 13], ["while", 16], ["fast", 9], ["and", 7], ["fast", 9], ["next", 9], ["slow", 37], ["slow", 37], ["next", 0], ["fast", 0], ["fast", 0], ["next", 0], ["next", 0], ["if", 0], ["slow", 0], ["fast", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["slow", 4], ["head", 4], ["fast", 9], ["head", 13], ["while", 16], ["fast", 9], ["and", 7], ["fast", 9], ["next", 9], ["slow", 37], ["slow", 37], ["next", 0], ["fast", 0], ["fast", 0], ["next", 0], ["next", 0], ["if", 0], ["slow", 0], ["fast", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["nodes", 0], ["seen", 0], ["set", 0], ["while", 0], ["head", 0], ["is", 0], ["not", 0], ["none", 0], ["if", 0], ["head", 0], ["in", 0], ["nodes", 0], ["seen", 0], ["return", 0], ["true", 0], ["nodes", 0], ["seen", 0], ["add", 0], ["head", 0], ["head", 0], ["head", 0], ["next", 0], ["return", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["cur", 0], ["head", 0], ["check", 0], ["set", 0], ["while", 0], ["cur", 0], ["if", 0], ["cur", 0], ["in", 0], ["check", 0], ["return", 0], ["true", 0], ["check", 0], ["add", 0], ["cur", 0], ["cur", 0], ["cur", 0], ["next", 0], ["return", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["try", 0], ["slow", 0], ["head", 0], ["fast", 0], ["head", 0], ["next", 0], ["while", 0], ["slow", 0], ["is", 0], ["not", 0], ["fast", 0], ["slow", 0], ["slow", 0], ["next", 0], ["fast", 0], ["fast", 0], ["next", 0], ["next", 0], ["return", 0], ["true", 0], ["except", 0], ["return", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["if", 0], ["head", 0], ["is", 0], ["none", 0], ["return", 0], ["false", 0], ["slow", 4], ["fast", 4], ["head", 4], ["head", 16], ["while", 19], ["fast", 19], ["next", 5], ["and", 4], ["fast", 7], ["next", 1], ["next", 9], ["slow", 37], ["slow", 37], ["next", 26], ["fast", 0], ["fast", 0], ["next", 0], ["next", 0], ["if", 0], ["slow", 0], ["fast", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.16216216216216217, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.023764884869081175, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.3076923076923077, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.13141025641025642, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0990990990990991, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.020849420849420847, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.3076923076923077, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.13141025641025642, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\n=====Problem Statement=====\nYou are given an integer N followed by N email addresses. Your task is to print a list containing only valid email addresses in lexicographical order.\nValid email addresses must follow these rules:\nIt must have the username@websitename.extension format type.\nThe username can only contain letters, digits, dashes and underscores.\nThe website name can only have letters and digits.\nThe maximum length of the extension is 3. \n\nConcept\n\nA filter takes a function returning True or False and applies it to a sequence, returning a list of only those members of the sequence where the function returned True. A Lambda function can be used with filters.\n\nLet's say you have to make a list of the squares of integers from 0 to 9 (both included).\n\n>> l = list(range(10))\n>> l = list(map(lambda x:x*x, l))\n\nNow, you only require those elements that are greater than 10 but less than 80.\n\n>> l = list(filter(lambda x: x > 10 and x < 80, l))\n\nEasy, isn't it?\n\n=====Input Format=====\nThe first line of input is the integer N, the number of email addresses.\nN lines follow, each containing a string.\n\n\n=====Constraints=====\nEach line is a non-empty string.\n\n=====Output Format=====\nOutput a list containing the valid email addresses in lexicographical order. If the list is empty, just output an empty list, [].\ndef fun(s):\n    # return True if s is a valid email, else return False\n\ndef filter_mail(emails):\n    return list(filter(fun, emails))\n\nif __name__ == '__main__':\n    n = int(input())\n    emails = []\n    for _ in range(n):\n        emails.append(input())\n\nfiltered_emails = filter_mail(emails)\nfiltered_emails.sort()\nprint(filtered_emails)\n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport re\nn=int(input())\nar=[]\nfor i in range(0,n):\n\ts=input()\n\tt=re.search(r\"^[a-zA-Z][\\w-]*@[a-zA-Z0-9]+\\.[a-zA-Z]{1,3}$\",s)\n\tif t:\n\t\tar.append(s)\nar.sort()        \nprint(ar)\n"], "id": "id5045"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5045", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["problem", 0], ["statement", 0], ["you", 1], ["are", 1], ["given", 1], ["an", 1], ["integer", 1], ["n", 1], ["followed", 1], ["by", 1], ["n", 2], ["email", 2], ["addresses", 2], ["your", 2], ["task", 2], ["is", 2], ["to", 2], ["print", 2], ["a", 2], ["list", 2], ["containing", 2], ["only", 2], ["valid", 2], ["email", 2], ["addresses", 2], ["in", 2], ["lexicographical", 2], ["order", 2], ["valid", 2], ["email", 2], ["addresses", 2], ["must", 2], ["follow", 2], ["these", 2], ["rules", 2], ["it", 2], ["must", 2], ["have", 2], ["the", 2], ["username", 2], ["websitename", 2], ["extension", 2], ["format", 2], ["type", 2], ["the", 2], ["username", 2], ["can", 2], ["only", 2], ["contain", 2], ["letters", 2], ["digits", 2], ["dashes", 2], ["and", 2], ["underscores", 2], ["the", 2], ["website", 2], ["name", 2], ["can", 2], ["only", 1], ["have", 0], ["letters", 0], ["and", 0], ["digits", 0], ["the", 0], ["maximum", 0], ["length", 0], ["of", 0], ["the", 0], ["extension", 0], ["is", 0], ["3", 1], ["concept", 1], ["a", 1], ["filter", 3], ["takes", 4], ["a", 4], ["function", 4], ["returning", 4], ["true", 4], ["or", 4], ["false", 4], ["and", 4], ["applies", 4], ["it", 4], ["to", 4], ["a", 1], ["sequence", 1], ["returning", 1], ["a", 1], ["list", 1], ["of", 1], ["only", 1], ["those", 1], ["members", 1], ["of", 1], ["the", 1], ["sequence", 1], ["where", 1], ["the", 1], ["function", 1], ["returned", 1], ["true", 1], ["a", 1], ["lambda", 1], ["function", 1], ["can", 1], ["be", 1], ["used", 1], ["with", 1], ["filters", 1], ["let", 1], ["s", 1], ["say", 1], ["you", 0], ["have", 0], ["to", 0], ["make", 0], ["a", 0], ["list", 0], ["of", 0], ["the", 0], ["squares", 0], ["of", 0], ["integers", 0], ["from", 0], ["0", 0], ["to", 0], ["9", 0], ["both", 0], ["included", 0], ["l", 1], ["list", 1], ["range", 1], ["10", 1], ["l", 1], ["list", 1], ["map", 1], ["lambda", 1], ["x", 1], ["x", 1], ["x", 0], ["l", 0], ["now", 0], ["you", 0], ["only", 0], ["require", 0], ["those", 0], ["elements", 0], ["that", 0], ["are", 0], ["greater", 0], ["than", 0], ["10", 0], ["but", 0], ["less", 0], ["than", 0], ["80", 0], ["l", 1], ["list", 1], ["filter", 1], ["lambda", 1], ["x", 1], ["x", 1], ["10", 1], ["and", 1], ["x", 1], ["80", 1], ["l", 1], ["easy", 1], ["isn", 1], ["t", 0], ["it", 0], ["input", 1], ["format", 1], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["is", 1], ["the", 1], ["integer", 1], ["n", 1], ["the", 1], ["number", 1], ["of", 1], ["email", 1], ["addresses", 1], ["n", 2], ["lines", 2], ["follow", 2], ["each", 2], ["containing", 2], ["a", 2], ["string", 2], ["constraints", 2], ["each", 2], ["line", 2], ["is", 2], ["a", 2], ["non", 2], ["empty", 2], ["string", 2], ["output", 2], ["format", 2], ["output", 2], ["a", 2], ["list", 2], ["containing", 2], ["the", 2], ["valid", 2], ["email", 2], ["addresses", 2], ["in", 2], ["lexicographical", 0], ["order", 0], ["if", 0], ["the", 0], ["list", 0], ["is", 0], ["empty", 0], ["just", 0], ["output", 0], ["an", 0], ["empty", 0], ["list", 0], ["def", 0], ["fun", 0], ["s", 0], ["return", 0], ["true", 0], ["if", 0], ["s", 0], ["is", 0], ["a", 0], ["valid", 0], ["email", 0], ["else", 0], ["return", 0], ["false", 0], ["def", 1], ["filter", 1], ["mail", 1], ["emails", 1], ["return", 1], ["list", 1], ["filter", 1], ["fun", 1], ["emails", 1], ["if", 1], ["name", 1], ["main", 1], ["n", 1], ["int", 1], ["input", 1], ["emails", 1], ["for", 1], ["in", 1], ["range", 1], ["n", 1], ["emails", 1], ["append", 1], ["input", 0], ["filtered", 0], ["emails", 0], ["filter", 0], ["mail", 0], ["emails", 0], ["filtered", 0], ["emails", 0], ["sort", 0], ["print", 0], ["filtered", 0], ["emails", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.684981684981685, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5167887667887668, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8701754385964913, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8701754385964913, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.684981684981685, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5167887667887668, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8701754385964913, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8701754385964913, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 2], ["enter", 0], ["your", 0], ["code", 0], ["here", 0], ["read", 0], ["input", 0], ["from", 0], ["stdin", 0], ["print", 0], ["output", 0], ["to", 0], ["stdout", 0], ["import", 0], ["re", 0], ["n", 0], ["int", 0], ["input", 0], ["ar", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["s", 0], ["input", 0], ["t", 0], ["re", 0], ["search", 0], ["r", 0], ["a", 0], ["za", 0], ["z", 0], ["w", 0], ["a", 0], ["za", 0], ["z0", 0], ["9", 0], ["a", 0], ["za", 0], ["z", 0], ["1", 0], ["3", 0], ["s", 0], ["if", 0], ["t", 0], ["ar", 0], ["append", 0], ["s", 0], ["ar", 0], ["sort", 0], ["print", 0], ["ar", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.023255813953488372, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.011627906976744186, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.23636363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11818181818181818, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.023255813953488372, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.011627906976744186, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.23636363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11818181818181818, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
