{"instance": {"input": "\nQUESTION:\nSnark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.\n\nk experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.\n\nDetermine if Snark and Philip can make an interesting problemset!\n\n\n-----Input-----\n\nThe first line contains two integers n, k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams.\n\nEach of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.\n\n\n-----Output-----\n\nPrint \"YES\" (quotes for clarity), if it is possible to make an interesting problemset, and \"NO\" otherwise.\n\nYou can print each character either upper- or lowercase (\"YeS\" and \"yes\" are valid when the answer is \"YES\").\n\n\n-----Examples-----\nInput\n5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n\nOutput\nNO\n\nInput\n3 2\n1 0\n1 1\n0 1\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first example you can't make any interesting problemset, because the first team knows all problems.\n\nIn the second example you can choose the first and the third problems.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["def bel(mask, bit):\n\treturn (mask & (1 << bit)) != 0\nread = lambda: map(int, input().split())\nn, k = read()\nf = [0] * 100\nfor i in range(n):\n\tcur = int(''.join(input().split()), 2)\n\tcur ^= (1 << k) - 1\n\tf[cur] = 1\nans = 'NO'\nif k == 1:\n\tif f[1]:\n\t\tans = 'YES'\nif k == 2:\n\tf1 = f2 = 0\n\tfor i in range(4):\n\t\tif f[i]:\n\t\t\tif bel(i, 0): f1 = 1\n\t\t\tif bel(i, 1): f2 = 1\n\tif f1 and f2:\n\t\tans = 'YES'\nif k == 3:\n\tp = [0] * 3\n\tfor i in range(8):\n\t\tif f[i]:\n\t\t\tfor j in range(3):\n\t\t\t\tif bel(i, j): p[j] = 1\n\tfor i in range(8):\n\t\tif f[i]:\n\t\t\tif bel(i, 0) and bel(i, 1) and p[2]: ans = 'YES'\n\t\t\tif bel(i, 0) and p[1] and bel(i, 2): ans = 'YES'\n\t\t\tif p[0] and bel(i, 1) and bel(i, 2): ans = 'YES'\nif k == 4:\n\tfor i in range(16):\n\t\tif f[i]:\n\t\t\tfor j in range(16):\n\t\t\t\tif f[j]:\n\t\t\t\t\tif (i | j) == 15:\n\t\t\t\t\t\tans = 'YES'\nprint(ans)\n", "n,k=list(map(int,input().split()))\na=[int(input().replace(\" \",\"\"),2) for i in range(n)]\n\n# https://stackoverflow.com/questions/374626/how-can-i-find-all-the-subsets-of-a-set-with-exactly-n-elements\nfrom itertools import chain, combinations\n\ndef powerset(iterable):\n\txs = list(iterable)\n\treturn chain.from_iterable(combinations(xs,n) for n in range(len(xs)+1))\n\nfor s in powerset([x for x in range(1<<k) if x in a]):\n\tif len(s) == 0: continue\n\tgood = True\n\tfor i in range(k):\n\t\tc = [(p >> i) & 1 for p in s]\n\t\tif c.count(1) > c.count(0):\n\t\t\tgood = False\n\tif good:\n\t\tprint(\"YES\")\n\t\treturn\n\nprint(\"NO\")\n", "n, k = map(int, input().split())\na = set()\nyes = False\nfor i in range(n):\n\ta.add(input())\nfor w in a:\n\tfor w2 in a:\n\t\tx = list(map(int, w.split()))\n\t\ty = list(map(int, w2.split()))\n\t\tcount = 0\n\t\tfor i in range(k):\n\t\t\tif x[i] + y[i] != 2:\n\t\t\t\tcount += 1\n\t\tif count == k:\n\t\t\tyes = True\nif yes:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n,k = list(map(int,input().split()))\nprobs = list([0]*n for _ in range(k))\npbtype = [0]*2**k\ne = [False]*2**k\nei = [False]*k\n\nfor i in range(n):\n\tx = list(map(int,input().split()))\n\tsum = 0\n\tfor j in range(k):\n\t\tif x[j] == 0:\n\t\t\tsum += 2**j\n\t\t\tei[j] = True\n\tpbtype[sum] += 1\n\te[sum] = True\n\nsuccess = False\nif e[2**k-1]:\n\tsuccess = True\nfor i in range(k):\n\tif e[2**k-1-2**i] and ei[i]:\n\t\tsuccess = True\nif k == 4:\n\tif e[3] and e[12]:\n\t\tsuccess = True\n\tif e[6] and e[9]:\n\t\tsuccess = True\n\tif e[5] and e[10]:\n\t\tsuccess = True\n\nif success:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Oct  5 13:30:23 2017\n\n@author: savit\n\"\"\"\n\nn,k=list(map(int,input().split()))\ns=[]\nA=[]\nfor i in range(16):\n\tA.append(False)\nfor i in range(n):\n\ts.append(input())\n\ts[i]=s[i].replace(' ','')\n\ts[i]=s[i] + '0'*(4-k)\n\ts[i]=int(s[i],2)\n\tA[s[i]]=True\nfl=False\nif(A[0]):\n\tfl=True\nif(A[1]):\n\tfor i in range(2,16,2):\n\t\tif(A[i]):\n\t\t\tfl=True\nif(A[2] and (A[4] or A[5] or A[8] or A[9] or A[12] or A[13] or A[1])):\n\tfl=True\nif(A[4] and (A[8] or A[9] or A[10] or A[11] or A[3] or A[1] or A[2])):\n\tfl=True\nif(A[8]):\n\tfor i in range(8):\n\t\tif(A[i]):\n\t\t\tfl=True\nif(A[3] and A[12]):\n\tfl=True\nif(A[6] and A[9]):\n\tfl=True\nif(A[5] and A[10]):\n\tfl=True\nif(fl):\n\tprint('YES')\nelse:\n\tprint('NO')\n\n\n", "n,k=list(map(int,input().split()))\nsp=[0]*(2**k)\nfor i in range(n):\n\tci=list(map(int,input().split()))\n\tc=0\n\tfor j in range(k-1,-1,-1):\n\t\tc+=(1-ci[j])*(2**j)\n\tsp[c]+=1\ned=[False]*k\nfor i in range(2**k-1,-1,-1):\n\tci=[]\n\tt=i\n\tfor j in range(k-1,-1,-1):\n\t\tci.append(t//(2**j))\n\t\tt%=2**j\n\tif sp[i]>0:\n\t\tfor j in range(k):\n\t\t\tif ci[j]==1:\n\t\t\t\ted[j]=True\n\t\tbreak\np=i-1\nfor i in range(p,-1,-1):\n\tci=[]\n\tt=i\n\tfor j in range(k-1,-1,-1):\n\t\tci.append(t//(2**j))\n\t\tt%=2**j\n\tif sp[i]>0:\n\t\tfor j in range(k):\n\t\t\tif not(ci[j]==1 or ed[j]):\n\t\t\t\tbreak\n\t\telse:\n\t\t\tprint('YES')\n\t\t\treturn\nif sp[2**k-1]>0:\n\tprint('YES')\nelse:\n\tprint('NO')\n\t\t\t\n\t\n", "# IAWT\nn, k = list(map(int, input().split()))\ncnt = {}\nfor i in range(2 ** k):\n\tcnt[bin(i)[2:].zfill(k)] = 0\n\nfor i in range(n):\n\tl = input().split()\n\ts = ''\n\tfor x in l:\n\t\ts += x\n\tcnt[s] += 1\n\ndef f1():\n\tif cnt['0'] > 0:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n\ndef f2():\n\tif cnt['00'] > 0:\n\t\tprint('YES')\n\t\treturn\n\tif cnt['01'] > 0 and cnt['10'] > 0:\n\t\tprint('YES')\n\t\treturn\n\tprint('NO')\n\ndef f3():\n\tif cnt['000'] > 0:\n\t\tprint('YES')\n\t\treturn\n\ta = int(cnt['100'] > 0)\n\tb = int(cnt['010'] > 0)\n\tc = int(cnt['001'] > 0)\n\tif a + b + c > 1:\n\t\tprint('YES')\n\t\treturn\n\tif a and cnt['011']:\n\t\tprint('YES')\n\t\treturn\n\tif b and cnt['101']:\n\t\tprint('YES')\n\t\treturn\n\tif c and cnt['110']:\n\t\tprint('YES')\n\t\treturn\n\tprint('NO')\n\n\ndef f4():\n\tif cnt['0000'] > 0:\n\t\tprint('YES')\n\t\treturn\n\tms = ['0001', '1110', '0010', '1101',\n\t\t  '0100', '1011', '1000', '0111',\n\t\t  '1100', '0011', '1010', '0101',\n\t\t  '1001', '0110']\n\t\n\tfor i in range(len(ms) // 2):\n\t\tif cnt[ms[2*i]] > 0 and cnt[ms[2*i+1]] > 0:\n\t\t\tprint('YES')\n\t\t\treturn\n\tx = 0\n\tfor i in range(4):\n\t\tif cnt[ms[i * 2]] > 0:\n\t\t\tx += 1\n\tif x > 1:\n\t\tprint('YES')\n\t\treturn\n\tind = []\n\tif cnt['0001'] > 0:\n\t\tind.append(3)\n\tif cnt['0010'] > 0:\n\t\tind.append(2)\n\tif cnt['0100'] > 0:\n\t\tind.append(1)\n\tif cnt['1000'] > 0:\n\t\tind.append(0)\n\t\n\tfor i in range(len(ms)):\n\t\tb = False\n\t\tfor x in ind:\n\t\t\tif ms[i][x] == '0':\n\t\t\t\tb = True\n\t\tif not b: continue\n\t\tif cnt[ms[i]] > 0:\n\t\t\tprint('YES')\n\t\t\treturn\n\tprint('NO')\n\treturn\n\n[f1, f2, f3, f4][k - 1]()\n", "import sys\n\ndef ReadInput():\n\treturn sys.stdin.read().splitlines()\n\ndef GetIA(s, delim=' '):\n\treturn [int(x) for x in s.split(delim)]\n\ndef GetKey(flags):\n\tkey = 0\n\tfor a in flags:\n\t\tkey <<= 1\n\t\tkey += a\n\t# print(flags)\n\t# print(key)\n\treturn key\n\ndef main():\n\tinput = ReadInput()\n\tseen = dict()\n\tfor s in input[1:]:\n\t\tseen[GetKey(GetIA(s))] = True\n\n\tfor a in seen.keys():\n\t\tfor b in seen.keys():\n\t\t\tif (a & b) == 0:\n\t\t\t\tprint('YES')\n\t\t\t\treturn\n\n\tprint('NO')\n\nmain()\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**15\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\ndef main():\n\tn,k = LI()\n\ts = set()\n\tfor _ in range(n):\n\t\tt = LI()\n\t\tc = sum(t)\n\t\tif c == 0:\n\t\t\treturn 'YES'\n\t\ts.add(tuple(t))\n\n\tl = list(s)\n\tll = len(s)\n\tfor i in range(ll):\n\t\tfor j in range(i+1,ll):\n\t\t\tf = True\n\t\t\tfor li in range(k):\n\t\t\t\tif l[i][li] == 1 and l[j][li] == 1:\n\t\t\t\t\tf = False\n\t\t\t\t\tbreak\n\t\t\tif f:\n\t\t\t\treturn 'YES'\n\n\treturn 'NO'\n\n\nprint(main())\n\n\n", "n, k = [int(i) for i in input().split()]\ns = set([int(\"\".join(input().split()), base=2) for j in range(n)])\nfor t in s:\n\tfor m in range(1 << k):\n\t\tif m in s:\n\t\t\tfor i in range(k):\n\t\t\t\tif ((t >> i) & 1) and ((m >> i) & 1):\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn\nprint(\"NO\")\n\t\n", "n, k = [int(i) for i in input().split()]\ns = set([int(\"\".join(input().split()), base=2) for j in range(n)])\nfor t in s:\n\tfor m in range(1 << k):\n\t\tif m in s:\n\t\t\tfor i in range(k):\n\t\t\t\tif ((t >> i) & 1) and ((m >> i) & 1):\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn\nprint(\"NO\")\n\t\n", "import sys\nN,K= list(map( int,input().split() ))\n\nstates=set([(0,0)])\n\nfor _ in range(N):\n\tcan_solve=list( map(int,input().split()) )\n\n\tnext_states=set()\n\tfor (selected,bm) in states:\n\t\tcnts =[(bm>>i)&1 for i in range(K)][::-1]\n\n\t\tnext_cnts=[cnts[i]+can_solve[i] for i in range(K)]\n\t\tnext_selected=selected+1\n\n\t\tif max(next_cnts)<=next_selected/2 and next_selected>0:\n\t\t\tprint(\"YES\")\n\n\t\t\treturn\n\t\t\n\t\tif max(next_cnts)<=1 and next_selected<=4:\n\t\t\tbin_num= int(''.join( map(str,next_cnts) ) ,2)\n\t\t\tnext_states.add( (next_selected,bin_num) )\n\t\t\t\n\tstates|=next_states\n\nprint(\"NO\")\n\n", "n,k=map(int, input().split())\nvis = [0] * 17\nfor _ in range(n):\n\ta = list(map(int, input().split()))\n\tvis[sum(a[i]*(1<<i) for i in range(k))] = 1\nflag=0\nfor i in range(16):\n\tfor j in range(16):\n\t\tif i&j==0 and vis[i] and vis[j]: flag=1\nprint(\"YES\" if flag else \"NO\")\n", "n, k = [int(z) for z in input().split()]\nans = [0] * 16\nfor i in range(n):\n\tproblem = [int(z) for z in input().split()]\n\ts = 0\n\tfor j in range(k):\n\t\ts = s * 2 + problem[j]\n\tans[s] += 1\n#print(ans)\nfor i in range(16):\n\tfor j in range(16):\n\t\tif ans[i] > 0 and ans[j] > 0 and (i & j) == 0:\n\t\t\tprint(\"YES\")\n\t\t\treturn\nprint(\"NO\")\n", "\nn, k = [int(i) for i in input().split()]\ns = set([int(\"\".join(input().split()), base=2) for j in range(n)])\n\nfor t in s:\n\tfor m in range(1 << k):\n\t\tif m in s:\n\t\t\tfor i in range(k):\n\t\t\t\tif ((t >> i) & 1) and ((m >> i) & 1):\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn\n\t\t\t\t\nprint(\"NO\")\n", "n, k = [int(i) for i in input().split()]\n\nK = 1 << k\np = [0] * K\n\nfor i in range(n):\n\tpi = [int(j) for j in input().split()]\n\tpc = sum(pi[j] << j for j in range(k))\n\tp[pc] += 1\n\ns = [0] * k\n\ndef go(i0, used):\n\tif i0 >= K: return False\n\tif p[i0]:\n\t\ts0 = s[:]\n\t\tok = True\n\t\tused += 1\n\t\tfor j in range(k):\n\t\t\tf = (i0 >> j) & 1\n\t\t\tassert f == 0 or f == 1\n\t\t\ts[j] += (i0 >> j) & 1\n\t\t\tif s[j] * 2 > used: ok = False\n\t\tif ok: return True\n\t\tif go(i0+1, used): return True\n\t\ts[:] = s0\n\t\tused -= 1\n\treturn go(i0+1, used)\n\nans = \"YES\" if go(0, 0) else \"NO\"\nprint(ans)\n", "def bel(mask, bit):\n\treturn (mask & (1 << bit)) != 0\nread = lambda: map(int, input().split())\nn, k = read()\nf = [0] * 100\nfor i in range(n):\n\tcur = int(''.join(input().split()), 2)\n\tcur ^= (1 << k) - 1\n\tf[cur] = 1\nans = 'NO'\nif k == 1:\n\tif f[1]:\n\t\tans = 'YES'\nif k == 2:\n\tf1 = f2 = 0\n\tfor i in range(4):\n\t\tif f[i]:\n\t\t\tif bel(i, 0): f1 = 1\n\t\t\tif bel(i, 1): f2 = 1\n\tif f1 and f2:\n\t\tans = 'YES'\nif k == 3:\n\tp = [0] * 3\n\tfor i in range(8):\n\t\tif f[i]:\n\t\t\tfor j in range(3):\n\t\t\t\tif bel(i, j): p[j] = 1\n\tfor i in range(8):\n\t\tif f[i]:\n\t\t\tif bel(i, 0) and bel(i, 1) and p[2]: ans = 'YES'\n\t\t\tif bel(i, 0) and p[1] and bel(i, 2): ans = 'YES'\n\t\t\tif p[0] and bel(i, 1) and bel(i, 2): ans = 'YES'\nif k == 4:\n\tfor i in range(16):\n\t\tif f[i]:\n\t\t\tfor j in range(16):\n\t\t\t\tif f[j]:\n\t\t\t\t\tif (i | j) == 15:\n\t\t\t\t\t\tans = 'YES'\nprint(ans)\n", "\ninp = input().split(\" \")\nn = int(inp[0])\nk = int(inp[1])\n\ns = set()\nfor i in range(n):\n\ta = input().split(' ')\n\tx = 0\n\tfor j in range(k):\n\t\tx = 2 * x + int(a[j])\n\ts.add(x)\n\nfor i in range(16):\n\tif i in s:\n\t\tfor j in range(16):\n\t\t\tif j in s:\n\t\t\t\tif i & j == 0:\n\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\treturn\n\n\nprint(\"NO\")\n", "def main():\n\tm, k = list(map(int, input().split()))\n\tall = set()\n\tzeros = ''\n\tfor _ in range(k):\n\t\tzeros += '0'\n\n\tfor _ in range(m):\n\t\tline = input().replace(' ', '')\n\t\tif line == zeros:\n\t\t\tprint('YES')\n\t\t\treturn\n\t\tall.add(line)\n\n\tfor s1 in all:\n\t\tfor s2 in all:\n\t\t\tif s1 == s2:\n\t\t\t\tcontinue\n\t\t\tbad = False\n\t\t\tfor i in range(0, len(s1)):\n\t\t\t\tif s1[i] == '1' and s2[i] == '1':\n\t\t\t\t\tbad = True\n\t\t\tif not bad:\n\t\t\t\tprint('YES')\n\t\t\t\treturn\n\tprint('NO')\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "def test(masks, wanted):\n\tfor w in wanted:\n\t\tif w not in masks:\n\t\t\treturn False\n\treturn True\n\ndef any_test(masks, tests):\n\tfor t in tests:\n\t\tif test(masks, t):\n\t\t\treturn True\n\treturn False\n\ndef inflate(perm):\n\tcount = max(perm)\n\tmasks = [[0 for i in range(len(perm))] for j in range(count)]\n\n\tfor i in range(len(perm)):\n\t\tif perm[i] == 0:\n\t\t\tcontinue\n\t\tmasks[perm[i] - 1][i] = 1\n\treturn [tuple(m) for m in masks]\n\ndef gen(st, lev, teams, tests):\n\tif lev >= teams:\n\t\tif max(st) > 1:\n\t\t\ttests.append(inflate(st))\n\t\treturn\n\n\tfor i in range(teams + 1):\n\t\tst[lev] = i\n\t\tgen(st, lev + 1, teams, tests)\n\ndef gen_tests(teams):\n\ttests = []\n\tst = [0 for i in range(teams)]\n\n\tgen(st, 0, teams, tests)\n\treturn tests\n\ndef back(masks, teams):\n\ttests = gen_tests(teams)\n\treturn any_test(masks, tests)\n\ndef main():\n\tprobs, teams = list(map(int, input().split()))\n\tmasks = set()\n\t\n\tfor i in range(probs):\n\t\tconf = tuple(list(map(int, input().split())))\n\t\tif 1 not in conf:\n\t\t\tprint('YES')\n\t\t\treturn\n\t\tmasks.add(conf)\n\n\tif teams == 1:\n\t\tprint('NO')\n\t\treturn\n\n\tif teams == 2:\n\t\tgood = test(masks, [(0, 1), (1, 0)])\n\telse:\n\t\tgood = back(masks, teams)\n\n\tprint('YES' if good else 'NO')\n\nmain()\n", "n,k = [int(i) for i in input().split()]\nif k == 1:\n\talert = 0\n\tfor time in range(n):\n\t\tterm = str(input())\n\t\tif term == \"0\":\n\t\t\talert = 1\n\t\t\tbreak\n\tprint(\"NO\") if alert == 0 else print(\"YES\")\nelif k == 2:\n\t(s1,s2) = (0,0)\n\tfor time in range(n):\n\t\tterm = str(input())\n\t\tif term == \"0 0\":\n\t\t\t(s1,s2) = (1,1)\n\t\t\tbreak\n\t\telse:\n\t\t\tif term == \"0 1\":\n\t\t\t\ts1 = 1\n\t\t\telif term == \"1 0\":\n\t\t\t\ts2 = 1\n\t\tif (s1,s2) == (1,1):\n\t\t\tbreak\n\tprint(\"YES\") if (s1,s2) == (1,1) else print(\"NO\")\nelif k == 3:\n\talert = 0\n\ts = {str(input()) for i in range(n)}\n\tif \"0 0 0\" in s:\n\t\talert = 1\n\tif \"0 0 1\" in s:\n\t\tif \"1 1 0\" in s or \"1 0 0\" in s or \"0 1 0\" in s:\n\t\t\talert = 1\n\tif \"0 1 0\" in s:\n\t\tif \"1 0 1\" in s or \"1 0 0\" in s or \"0 0 1\" in s:\n\t\t\talert = 1\n\tif \"1 0 0\" in s:\n\t\tif \"0 0 1\" in s or \"0 1 0\" in s or \"0 1 1\" in s:\n\t\t\talert = 1\n\tprint(\"YES\") if alert == 1 else print(\"NO\")\nelif k == 4:\n\talert = 0\n\ts = {str(input()) for i in range(n)}\n\ts = list(s)\n\t#print(s)\n\tif \"0 0 0 0\" in s:\n\t\talert = 1\n\tif \"1 1 0 0\" in s:\n\t\tfor i in range(len(s)):\n\t\t\tif (s[i])[0] == '0' and (s[i])[2] == '0':\n\t\t\t\talert = 1\n\tif \"1 0 1 0\" in s:\n\t\tfor i in range(len(s)):\n\t\t\tif (s[i])[0] == '0' and (s[i])[4] == '0':\n\t\t\t\talert = 1\n\tif \"1 0 0 1\" in s:\n\t\tfor i in range(len(s)):\n\t\t\tif (s[i])[0] == '0' and (s[i])[6] == '0':\n\t\t\t\talert = 1\n\tif \"0 1 1 0\" in s:\n\t\tfor i in range(len(s)):\n\t\t\tif (s[i])[2] == '0' and (s[i])[4] == '0':\n\t\t\t\talert = 1\n\tif \"0 1 0 1\" in s:\n\t\tfor i in range(len(s)):\n\t\t\tif (s[i])[2] == '0' and (s[i])[6] == '0':\n\t\t\t\talert = 1\n\tif \"0 0 1 1\" in s:\n\t\tfor i in range(len(s)):\n\t\t\tif (s[i])[4] == '0' and (s[i])[6] == '0':\n\t\t\t\talert = 1\n\tif \"1 0 0 0\" in s:\n\t\tfor i in range(len(s)):\n\t\t\tif (s[i])[0] == '0':\n\t\t\t\talert = 1\n\tif \"0 1 0 0\" in s:\n\t\tfor i in range(len(s)):\n\t\t\tif (s[i])[2] == '0':\n\t\t\t\talert = 1\n\tif \"0 0 1 0\" in s:\n\t\tfor i in range(len(s)):\n\t\t\tif (s[i])[4] == '0':\n\t\t\t\talert = 1\n\tif \"0 0 0 1\" in s:\n\t\tfor i in range(len(s)):\n\t\t\tif (s[i])[6] == '0':\n\t\t\t\talert = 1\n\tprint(\"YES\") if alert == 1 else print(\"NO\")\n\n\n", "v = [0 for i in range(20)]\nn,m = list(map(int ,input().split()))\nfor i in range(n):\n\tx = list(map(int, input().split()))\n\tsum = 0\n\tfor j in range(m):\n\t\tsum += x[j] * (1<<j)\n\tv[sum] = 1\nflag = 0\nfor i in range(16):\n\tfor j in range(16):\n\t\tif i&j == 0 and v[i] and v[j]:\n\t\t\tflag = 1\n\nif flag:\n\tprint(\"YES\")\nelse :\n\tprint(\"NO\")\n", "n, k = map(int, input().split())\nexist = [False] * 16\nzero = [False] * 4\nfor i in range(n):\n\tpart = list(map(int, input().split()))\n\tP = [0] * (4 - k)\n\tfor elem in part:\n\t\tP.append(elem)\n\tnum = 0\n\tfor j in range(4):\n\t\tif P[j] == 0:\n\t\t\tzero[j] = True\n\tfor j in range(4):\n\t\tif P[3 - j] == 1:\n\t\t\tnum += 2 ** j\n\texist[num] = True\nans = False\nif exist[0] or (exist[1] and zero[3]) or (exist[2] and zero[2]) or (exist[4] and zero[1]) or (exist[8] and zero[0]) or (exist[3] and exist[12]) or (exist[5] and exist[10]) or (exist[6] and exist[9]):\n\tans = True\nif ans:\n\tprint('YES')\nelse:\n\tprint('NO')\n"], "id": "id6262"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6262", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["snark", 1], ["and", 1], ["philip", 1], ["are", 1], ["preparing", 1], ["the", 1], ["problemset", 1], ["for", 1], ["the", 1], ["upcoming", 1], ["pre", 1], ["qualification", 1], ["round", 1], ["for", 1], ["semi", 1], ["quarter", 1], ["finals", 1], ["they", 1], ["have", 1], ["a", 1], ["bank", 1], ["of", 1], ["n", 1], ["problems", 1], ["and", 1], ["they", 1], ["want", 1], ["to", 1], ["select", 1], ["any", 1], ["non", 1], ["empty", 1], ["subset", 1], ["of", 1], ["it", 1], ["as", 1], ["a", 1], ["problemset", 1], ["k", 1], ["experienced", 1], ["teams", 1], ["are", 1], ["participating", 1], ["in", 1], ["the", 1], ["contest", 1], ["some", 1], ["of", 1], ["these", 1], ["teams", 1], ["already", 1], ["know", 1], ["some", 1], ["of", 1], ["the", 1], ["problems", 1], ["to", 1], ["make", 1], ["the", 1], ["contest", 1], ["interesting", 1], ["for", 1], ["them", 1], ["each", 1], ["of", 1], ["the", 1], ["teams", 1], ["should", 1], ["know", 1], ["at", 1], ["most", 1], ["half", 1], ["of", 1], ["the", 1], ["selected", 0], ["problems", 0], ["determine", 0], ["if", 0], ["snark", 0], ["and", 0], ["philip", 0], ["can", 0], ["make", 0], ["an", 0], ["interesting", 0], ["problemset", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["two", 1], ["integers", 1], ["n", 1], ["k", 1], ["1", 1], ["≤", 1], ["n", 1], ["≤", 1], ["10", 1], ["5", 1], ["1", 2], ["≤", 2], ["k", 2], ["≤", 2], ["4", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["problems", 1], ["and", 1], ["the", 1], ["number", 1], ["of", 1], ["experienced", 1], ["teams", 1], ["each", 1], ["of", 1], ["the", 1], ["next", 1], ["n", 1], ["lines", 1], ["contains", 1], ["k", 1], ["integers", 1], ["each", 1], ["equal", 1], ["to", 1], ["0", 1], ["or", 1], ["1", 1], ["the", 1], ["j", 1], ["th", 1], ["number", 1], ["in", 1], ["the", 1], ["i", 1], ["th", 1], ["line", 1], ["is", 1], ["1", 0], ["if", 0], ["j", 0], ["th", 0], ["team", 0], ["knows", 0], ["i", 0], ["th", 0], ["problem", 0], ["and", 0], ["0", 0], ["otherwise", 0], ["output", 0], ["print", 1], ["yes", 1], ["quotes", 1], ["for", 1], ["clarity", 1], ["if", 1], ["it", 1], ["is", 1], ["possible", 1], ["to", 1], ["make", 1], ["an", 1], ["interesting", 1], ["problemset", 1], ["and", 1], ["no", 1], ["otherwise", 1], ["you", 1], ["can", 1], ["print", 1], ["each", 1], ["character", 1], ["either", 1], ["upper", 1], ["or", 0], ["lowercase", 0], ["yes", 0], ["and", 0], ["yes", 0], ["are", 0], ["valid", 0], ["when", 0], ["the", 0], ["answer", 0], ["is", 0], ["yes", 0], ["examples", 0], ["input", 0], ["5", 0], ["3", 2], ["1", 220], ["0", 229], ["1", 268], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["0", 0], ["output", 0], ["no", 0], ["input", 0], ["3", 0], ["2", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["output", 0], ["yes", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["example", 1], ["you", 1], ["can", 1], ["t", 1], ["make", 1], ["any", 1], ["interesting", 1], ["problemset", 1], ["because", 1], ["the", 1], ["first", 1], ["team", 1], ["knows", 1], ["all", 1], ["problems", 1], ["in", 1], ["the", 0], ["second", 0], ["example", 0], ["you", 0], ["can", 0], ["choose", 0], ["the", 0], ["first", 0], ["and", 0], ["the", 0], ["third", 0], ["problems", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6929133858267716, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6713096205120319, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8872180451127819, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8571428571428571, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6811023622047244, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6712598425196851, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8872180451127819, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8571428571428571, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["def", 0], ["bel", 0], ["mask", 0], ["bit", 0], ["return", 0], ["mask", 0], ["1", 0], ["bit", 0], ["0", 0], ["read", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["read", 0], ["f", 0], ["0", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cur", 0], ["int", 0], ["join", 0], ["input", 0], ["split", 0], ["2", 0], ["cur", 0], ["1", 0], ["k", 0], ["1", 0], ["f", 0], ["cur", 0], ["1", 0], ["ans", 0], ["no", 0], ["if", 0], ["k", 0], ["1", 0], ["if", 0], ["f", 0], ["1", 0], ["ans", 0], ["yes", 0], ["if", 0], ["k", 0], ["2", 0], ["f1", 0], ["f2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["f", 0], ["i", 0], ["if", 0], ["bel", 0], ["i", 0], ["0", 0], ["f1", 0], ["1", 0], ["if", 0], ["bel", 0], ["i", 0], ["1", 0], ["f2", 0], ["1", 0], ["if", 0], ["f1", 0], ["and", 0], ["f2", 0], ["ans", 0], ["yes", 0], ["if", 0], ["k", 0], ["3", 0], ["p", 0], ["0", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["if", 0], ["f", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["bel", 0], ["i", 0], ["j", 0], ["p", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["if", 0], ["f", 0], ["i", 0], ["if", 0], ["bel", 0], ["i", 0], ["0", 0], ["and", 0], ["bel", 0], ["i", 0], ["1", 0], ["and", 0], ["p", 0], ["2", 0], ["ans", 0], ["yes", 0], ["if", 0], ["bel", 0], ["i", 0], ["0", 0], ["and", 0], ["p", 0], ["1", 0], ["and", 0], ["bel", 0], ["i", 0], ["2", 0], ["ans", 0], ["yes", 0], ["if", 0], ["p", 0], ["0", 0], ["and", 0], ["bel", 0], ["i", 0], ["1", 0], ["and", 0], ["bel", 0], ["i", 0], ["2", 0], ["ans", 0], ["yes", 0], ["if", 0], ["k", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["16", 0], ["if", 0], ["f", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["16", 0], ["if", 0], ["f", 0], ["j", 0], ["if", 0], ["i", 0], ["j", 0], ["15", 0], ["ans", 0], ["yes", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["input", 0], ["replace", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["https", 0], ["stackoverflow", 0], ["com", 0], ["questions", 0], ["374626", 0], ["how", 3], ["can", 3], ["i", 0], ["find", 0], ["all", 0], ["the", 0], ["subsets", 0], ["of", 0], ["a", 0], ["set", 0], ["with", 0], ["exactly", 0], ["n", 0], ["elements", 0], ["from", 0], ["itertools", 0], ["import", 0], ["chain", 0], ["combinations", 0], ["def", 0], ["powerset", 0], ["iterable", 0], ["xs", 0], ["list", 0], ["iterable", 0], ["return", 2], ["chain", 2], ["from", 0], ["iterable", 0], ["combinations", 0], ["xs", 0], ["n", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["len", 0], ["xs", 0], ["1", 0], ["for", 0], ["s", 0], ["in", 0], ["powerset", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["if", 0], ["x", 0], ["in", 0], ["a", 0], ["if", 0], ["len", 0], ["s", 0], ["0", 0], ["continue", 0], ["good", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["c", 0], ["p", 0], ["i", 0], ["1", 0], ["for", 0], ["p", 0], ["in", 0], ["s", 0], ["if", 0], ["c", 0], ["count", 0], ["1", 0], ["c", 0], ["count", 0], ["0", 0], ["good", 0], ["false", 0], ["if", 0], ["good", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["set", 0], ["yes", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["add", 0], ["input", 0], ["for", 0], ["w", 0], ["in", 0], ["a", 0], ["for", 0], ["w2", 0], ["in", 0], ["a", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["w", 0], ["split", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["w2", 0], ["split", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["2", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["k", 0], ["yes", 0], ["true", 0], ["if", 0], ["yes", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["probs", 0], ["list", 0], ["0", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["pbtype", 0], ["0", 0], ["2", 0], ["k", 0], ["e", 0], ["false", 0], ["2", 0], ["k", 0], ["ei", 0], ["false", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["x", 0], ["j", 0], ["0", 0], ["sum", 0], ["2", 0], ["j", 0], ["ei", 0], ["j", 0], ["true", 0], ["pbtype", 0], ["sum", 0], ["1", 0], ["e", 0], ["sum", 0], ["true", 0], ["success", 0], ["false", 0], ["if", 0], ["e", 0], ["2", 0], ["k", 0], ["1", 0], ["success", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["e", 0], ["2", 0], ["k", 0], ["1", 0], ["2", 0], ["i", 0], ["and", 0], ["ei", 0], ["i", 0], ["success", 0], ["true", 0], ["if", 0], ["k", 0], ["4", 0], ["if", 0], ["e", 0], ["3", 0], ["and", 0], ["e", 0], ["12", 0], ["success", 0], ["true", 0], ["if", 0], ["e", 0], ["6", 0], ["and", 0], ["e", 0], ["9", 0], ["success", 0], ["true", 0], ["if", 0], ["e", 0], ["5", 0], ["and", 0], ["e", 0], ["10", 0], ["success", 0], ["true", 0], ["if", 0], ["success", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["coding", 0], ["utf", 0], ["8", 0], ["created", 0], ["on", 0], ["thu", 0], ["oct", 0], ["5", 0], ["13", 0], ["30", 0], ["23", 0], ["2017", 0], ["author", 0], ["savit", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["16", 0], ["a", 0], ["append", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["append", 0], ["input", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["replace", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["0", 0], ["4", 0], ["k", 0], ["s", 0], ["i", 0], ["int", 0], ["s", 0], ["i", 0], ["2", 0], ["a", 0], ["s", 0], ["i", 0], ["true", 0], ["fl", 0], ["false", 0], ["if", 0], ["a", 0], ["0", 0], ["fl", 0], ["true", 0], ["if", 0], ["a", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["16", 0], ["2", 0], ["if", 0], ["a", 0], ["i", 0], ["fl", 0], ["true", 0], ["if", 0], ["a", 0], ["2", 0], ["and", 0], ["a", 0], ["4", 0], ["or", 0], ["a", 0], ["5", 0], ["or", 0], ["a", 0], ["8", 0], ["or", 0], ["a", 0], ["9", 0], ["or", 0], ["a", 0], ["12", 0], ["or", 0], ["a", 0], ["13", 0], ["or", 0], ["a", 0], ["1", 0], ["fl", 0], ["true", 0], ["if", 0], ["a", 0], ["4", 0], ["and", 0], ["a", 0], ["8", 0], ["or", 0], ["a", 0], ["9", 0], ["or", 0], ["a", 0], ["10", 0], ["or", 0], ["a", 0], ["11", 0], ["or", 0], ["a", 0], ["3", 0], ["or", 0], ["a", 0], ["1", 0], ["or", 0], ["a", 0], ["2", 0], ["fl", 0], ["true", 0], ["if", 0], ["a", 0], ["8", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["if", 0], ["a", 0], ["i", 0], ["fl", 0], ["true", 0], ["if", 0], ["a", 0], ["3", 0], ["and", 0], ["a", 0], ["12", 0], ["fl", 0], ["true", 0], ["if", 0], ["a", 0], ["6", 0], ["and", 0], ["a", 0], ["9", 0], ["fl", 0], ["true", 0], ["if", 0], ["a", 0], ["5", 0], ["and", 0], ["a", 0], ["10", 0], ["fl", 0], ["true", 0], ["if", 0], ["fl", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sp", 0], ["0", 0], ["2", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ci", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["1", 0], ["1", 0], ["c", 0], ["1", 0], ["ci", 0], ["j", 0], ["2", 0], ["j", 0], ["sp", 0], ["c", 0], ["1", 0], ["ed", 0], ["false", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["k", 0], ["1", 0], ["1", 0], ["1", 0], ["ci", 0], ["t", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["1", 0], ["1", 0], ["ci", 0], ["append", 0], ["t", 0], ["2", 0], ["j", 0], ["t", 0], ["2", 0], ["j", 0], ["if", 0], ["sp", 0], ["i", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["ci", 0], ["j", 0], ["1", 0], ["ed", 0], ["j", 0], ["true", 0], ["break", 0], ["p", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["p", 0], ["1", 0], ["1", 0], ["ci", 0], ["t", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["1", 0], ["1", 0], ["ci", 0], ["append", 0], ["t", 0], ["2", 0], ["j", 0], ["t", 0], ["2", 0], ["j", 0], ["if", 0], ["sp", 0], ["i", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["not", 0], ["ci", 0], ["j", 0], ["1", 0], ["or", 0], ["ed", 0], ["j", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["sp", 0], ["2", 0], ["k", 0], ["1", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["iawt", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["k", 0], ["cnt", 0], ["bin", 0], ["i", 0], ["2", 0], ["zfill", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["input", 0], ["split", 0], ["s", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["s", 0], ["x", 0], ["cnt", 0], ["s", 0], ["1", 0], ["def", 0], ["f1", 0], ["if", 0], ["cnt", 0], ["0", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["f2", 0], ["if", 0], ["cnt", 0], ["00", 0], ["0", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["cnt", 0], ["01", 0], ["0", 0], ["and", 0], ["cnt", 0], ["10", 0], ["0", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["def", 0], ["f3", 0], ["if", 0], ["cnt", 0], ["000", 0], ["0", 0], ["print", 0], ["yes", 0], ["return", 0], ["a", 0], ["int", 0], ["cnt", 0], ["100", 0], ["0", 0], ["b", 0], ["int", 0], ["cnt", 0], ["010", 0], ["0", 0], ["c", 0], ["int", 0], ["cnt", 0], ["001", 0], ["0", 0], ["if", 0], ["a", 0], ["b", 0], ["c", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["a", 0], ["and", 0], ["cnt", 0], ["011", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["b", 0], ["and", 0], ["cnt", 0], ["101", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["c", 0], ["and", 0], ["cnt", 0], ["110", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["def", 0], ["f4", 0], ["if", 0], ["cnt", 0], ["0000", 0], ["0", 0], ["print", 0], ["yes", 0], ["return", 0], ["ms", 0], ["0001", 0], ["1110", 0], ["0010", 0], ["1101", 0], ["0100", 0], ["1011", 0], ["1000", 0], ["0111", 0], ["1100", 0], ["0011", 0], ["1010", 0], ["0101", 0], ["1001", 0], ["0110", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ms", 0], ["2", 0], ["if", 0], ["cnt", 0], ["ms", 0], ["2", 0], ["i", 0], ["0", 0], ["and", 0], ["cnt", 0], ["ms", 0], ["2", 0], ["i", 0], ["1", 0], ["0", 0], ["print", 0], ["yes", 0], ["return", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["cnt", 0], ["ms", 0], ["i", 0], ["2", 0], ["0", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["ind", 0], ["if", 0], ["cnt", 0], ["0001", 0], ["0", 0], ["ind", 0], ["append", 0], ["3", 0], ["if", 0], ["cnt", 0], ["0010", 0], ["0", 0], ["ind", 0], ["append", 0], ["2", 0], ["if", 0], ["cnt", 0], ["0100", 0], ["0", 0], ["ind", 0], ["append", 0], ["1", 0], ["if", 0], ["cnt", 0], ["1000", 0], ["0", 0], ["ind", 0], ["append", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ms", 0], ["b", 0], ["false", 0], ["for", 0], ["x", 0], ["in", 0], ["ind", 0], ["if", 0], ["ms", 0], ["i", 0], ["x", 0], ["0", 0], ["b", 0], ["true", 0], ["if", 0], ["not", 0], ["b", 0], ["continue", 0], ["if", 0], ["cnt", 0], ["ms", 0], ["i", 0], ["0", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["return", 0], ["f1", 0], ["f2", 0], ["f3", 0], ["f4", 0], ["k", 0], ["1", 0], ["import", 0], ["sys", 0], ["def", 0], ["readinput", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["splitlines", 0], ["def", 0], ["getia", 0], ["s", 0], ["delim", 0], ["return", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["s", 0], ["split", 0], ["delim", 0], ["def", 0], ["getkey", 0], ["flags", 0], ["key", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["flags", 0], ["key", 0], ["1", 0], ["key", 0], ["a", 0], ["print", 0], ["flags", 0], ["print", 0], ["key", 0], ["return", 0], ["key", 0], ["def", 0], ["main", 0], ["input", 0], ["readinput", 0], ["seen", 0], ["dict", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["1", 0], ["seen", 0], ["getkey", 0], ["getia", 0], ["s", 0], ["true", 0], ["for", 0], ["a", 0], ["in", 0], ["seen", 0], ["keys", 0], ["for", 0], ["b", 0], ["in", 0], ["seen", 0], ["keys", 0], ["if", 0], ["a", 0], ["b", 0], ["0", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["main", 0], ["import", 0], ["math", 0], ["string", 0], ["itertools", 0], ["fractions", 0], ["heapq", 0], ["collections", 0], ["re", 0], ["array", 0], ["bisect", 0], ["sys", 0], ["random", 0], ["time", 0], ["copy", 0], ["functools", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["7", 0], ["inf", 0], ["10", 0], ["20", 0], ["eps", 0], ["1", 0], ["0", 0], ["10", 0], ["15", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["lf", 0], ["return", 0], ["float", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["ls", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["f", 0], ["return", 0], ["float", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["s", 0], ["return", 0], ["input", 0], ["def", 0], ["main", 0], ["n", 0], ["k", 0], ["li", 0], ["s", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["li", 0], ["c", 0], ["sum", 0], ["t", 0], ["if", 0], ["c", 0], ["0", 0], ["return", 0], ["yes", 0], ["s", 0], ["add", 0], ["tuple", 0], ["t", 0], ["l", 0], ["list", 0], ["s", 0], ["ll", 0], ["len", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ll", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["ll", 0], ["f", 0], ["true", 0], ["for", 0], ["li", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["l", 0], ["i", 0], ["li", 0], ["1", 0], ["and", 0], ["l", 0], ["j", 0], ["li", 0], ["1", 0], ["f", 0], ["false", 0], ["break", 0], ["if", 0], ["f", 0], ["return", 0], ["yes", 0], ["return", 0], ["no", 0], ["print", 0], ["main", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["set", 0], ["int", 0], ["join", 0], ["input", 0], ["split", 0], ["base", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["t", 0], ["in", 0], ["s", 0], ["for", 0], ["m", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["if", 0], ["m", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["t", 0], ["i", 0], ["1", 0], ["and", 0], ["m", 0], ["i", 0], ["1", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["set", 0], ["int", 0], ["join", 0], ["input", 0], ["split", 0], ["base", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["t", 0], ["in", 0], ["s", 0], ["for", 0], ["m", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["if", 0], ["m", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["t", 0], ["i", 0], ["1", 0], ["and", 0], ["m", 0], ["i", 0], ["1", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["states", 0], ["set", 0], ["0", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["can", 0], ["solve", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["next", 0], ["states", 0], ["set", 0], ["for", 0], ["selected", 0], ["bm", 0], ["in", 0], ["states", 0], ["cnts", 0], ["bm", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["next", 0], ["cnts", 0], ["cnts", 0], ["i", 0], ["can", 0], ["solve", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["next", 0], ["selected", 0], ["selected", 0], ["1", 0], ["if", 0], ["max", 0], ["next", 0], ["cnts", 0], ["next", 0], ["selected", 0], ["2", 0], ["and", 0], ["next", 0], ["selected", 0], ["0", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["max", 0], ["next", 0], ["cnts", 0], ["1", 0], ["and", 0], ["next", 0], ["selected", 0], ["4", 0], ["bin", 0], ["num", 0], ["int", 0], ["join", 0], ["map", 0], ["str", 0], ["next", 0], ["cnts", 0], ["2", 0], ["next", 0], ["states", 0], ["add", 0], ["next", 0], ["selected", 0], ["bin", 0], ["num", 0], ["states", 0], ["next", 0], ["states", 0], ["print", 0], ["no", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["vis", 0], ["0", 0], ["17", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["vis", 0], ["sum", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["flag", 0], ["0", 0], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["16", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["16", 0], ["if", 0], ["i", 0], ["j", 0], ["0", 0], ["and", 0], ["vis", 0], ["i", 0], ["and", 0], ["vis", 0], ["j", 0], ["flag", 0], ["1", 0], ["print", 0], ["yes", 0], ["if", 0], ["flag", 0], ["else", 0], ["no", 0], ["n", 0], ["k", 0], ["int", 0], ["z", 0], ["for", 0], ["z", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["16", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["problem", 0], ["int", 0], ["z", 0], ["for", 0], ["z", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["s", 0], ["s", 0], ["2", 0], ["problem", 0], ["j", 0], ["ans", 0], ["s", 0], ["1", 0], ["print", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["16", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["16", 0], ["if", 0], ["ans", 0], ["i", 0], ["0", 0], ["and", 0], ["ans", 0], ["j", 0], ["0", 0], ["and", 0], ["i", 0], ["j", 0], ["0", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["set", 0], ["int", 0], ["join", 0], ["input", 0], ["split", 0], ["base", 0], ["2", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["t", 0], ["in", 0], ["s", 0], ["for", 0], ["m", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["if", 0], ["m", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["t", 0], ["i", 0], ["1", 0], ["and", 0], ["m", 0], ["i", 0], ["1", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["k", 0], ["1", 0], ["k", 0], ["p", 0], ["0", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["pi", 0], ["int", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["input", 0], ["split", 0], ["pc", 0], ["sum", 0], ["pi", 0], ["j", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["p", 0], ["pc", 0], ["1", 0], ["s", 0], ["0", 0], ["k", 0], ["def", 0], ["go", 0], ["i0", 0], ["used", 0], ["if", 0], ["i0", 0], ["k", 0], ["return", 0], ["false", 0], ["if", 0], ["p", 0], ["i0", 0], ["s0", 0], ["s", 0], ["ok", 0], ["true", 0], ["used", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["f", 0], ["i0", 0], ["j", 0], ["1", 0], ["assert", 0], ["f", 0], ["0", 0], ["or", 0], ["f", 0], ["1", 0], ["s", 0], ["j", 0], ["i0", 0], ["j", 0], ["1", 0], ["if", 0], ["s", 0], ["j", 0], ["2", 0], ["used", 0], ["ok", 0], ["false", 0], ["if", 0], ["ok", 0], ["return", 0], ["true", 0], ["if", 0], ["go", 0], ["i0", 0], ["1", 0], ["used", 0], ["return", 0], ["true", 0], ["s", 0], ["s0", 0], ["used", 0], ["1", 0], ["return", 0], ["go", 0], ["i0", 0], ["1", 0], ["used", 0], ["ans", 0], ["yes", 0], ["if", 0], ["go", 0], ["0", 0], ["0", 0], ["else", 0], ["no", 0], ["print", 0], ["ans", 0], ["def", 0], ["bel", 0], ["mask", 0], ["bit", 0], ["return", 0], ["mask", 0], ["1", 0], ["bit", 0], ["0", 0], ["read", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["read", 0], ["f", 0], ["0", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cur", 0], ["int", 0], ["join", 0], ["input", 0], ["split", 0], ["2", 0], ["cur", 0], ["1", 0], ["k", 0], ["1", 0], ["f", 0], ["cur", 0], ["1", 0], ["ans", 0], ["no", 0], ["if", 0], ["k", 0], ["1", 0], ["if", 0], ["f", 0], ["1", 0], ["ans", 0], ["yes", 0], ["if", 0], ["k", 0], ["2", 0], ["f1", 0], ["f2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["f", 0], ["i", 0], ["if", 0], ["bel", 0], ["i", 0], ["0", 0], ["f1", 0], ["1", 0], ["if", 0], ["bel", 0], ["i", 0], ["1", 0], ["f2", 0], ["1", 0], ["if", 0], ["f1", 0], ["and", 0], ["f2", 0], ["ans", 0], ["yes", 0], ["if", 0], ["k", 0], ["3", 0], ["p", 0], ["0", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["if", 0], ["f", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["bel", 0], ["i", 0], ["j", 0], ["p", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["8", 0], ["if", 0], ["f", 0], ["i", 0], ["if", 0], ["bel", 0], ["i", 0], ["0", 0], ["and", 0], ["bel", 0], ["i", 0], ["1", 0], ["and", 0], ["p", 0], ["2", 0], ["ans", 0], ["yes", 0], ["if", 0], ["bel", 0], ["i", 0], ["0", 0], ["and", 0], ["p", 0], ["1", 0], ["and", 0], ["bel", 0], ["i", 0], ["2", 0], ["ans", 0], ["yes", 0], ["if", 0], ["p", 0], ["0", 0], ["and", 0], ["bel", 0], ["i", 0], ["1", 0], ["and", 0], ["bel", 0], ["i", 0], ["2", 0], ["ans", 0], ["yes", 0], ["if", 0], ["k", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["16", 0], ["if", 0], ["f", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["16", 0], ["if", 0], ["f", 0], ["j", 0], ["if", 0], ["i", 0], ["j", 0], ["15", 0], ["ans", 0], ["yes", 0], ["print", 0], ["ans", 0], ["inp", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["inp", 0], ["0", 0], ["k", 0], ["int", 0], ["inp", 0], ["1", 0], ["s", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["input", 0], ["split", 0], ["x", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["x", 0], ["2", 0], ["x", 0], ["int", 0], ["a", 0], ["j", 0], ["s", 0], ["add", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["16", 0], ["if", 0], ["i", 0], ["in", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["16", 0], ["if", 0], ["j", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["j", 0], ["0", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["def", 0], ["main", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["all", 0], ["set", 0], ["zeros", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["zeros", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["line", 0], ["input", 0], ["replace", 0], ["if", 0], ["line", 0], ["zeros", 0], ["print", 0], ["yes", 0], ["return", 0], ["all", 0], ["add", 0], ["line", 0], ["for", 0], ["s1", 0], ["in", 0], ["all", 0], ["for", 0], ["s2", 0], ["in", 0], ["all", 0], ["if", 0], ["s1", 0], ["s2", 0], ["continue", 0], ["bad", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["s1", 0], ["if", 0], ["s1", 0], ["i", 0], ["1", 0], ["and", 0], ["s2", 0], ["i", 0], ["1", 0], ["bad", 0], ["true", 0], ["if", 0], ["not", 0], ["bad", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["test", 0], ["masks", 0], ["wanted", 0], ["for", 0], ["w", 0], ["in", 0], ["wanted", 0], ["if", 0], ["w", 0], ["not", 0], ["in", 0], ["masks", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["def", 0], ["any", 0], ["test", 0], ["masks", 0], ["tests", 0], ["for", 0], ["t", 0], ["in", 0], ["tests", 0], ["if", 0], ["test", 0], ["masks", 0], ["t", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["def", 0], ["inflate", 0], ["perm", 0], ["count", 0], ["max", 0], ["perm", 0], ["masks", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["perm", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["count", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["perm", 0], ["if", 0], ["perm", 0], ["i", 0], ["0", 0], ["continue", 0], ["masks", 0], ["perm", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["return", 0], ["tuple", 0], ["m", 0], ["for", 0], ["m", 0], ["in", 0], ["masks", 0], ["def", 0], ["gen", 0], ["st", 0], ["lev", 0], ["teams", 0], ["tests", 0], ["if", 0], ["lev", 0], ["teams", 0], ["if", 0], ["max", 0], ["st", 0], ["1", 0], ["tests", 0], ["append", 0], ["inflate", 0], ["st", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["teams", 0], ["1", 0], ["st", 0], ["lev", 0], ["i", 0], ["gen", 0], ["st", 0], ["lev", 0], ["1", 0], ["teams", 0], ["tests", 0], ["def", 0], ["gen", 0], ["tests", 0], ["teams", 0], ["tests", 0], ["st", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["teams", 0], ["gen", 0], ["st", 0], ["0", 0], ["teams", 0], ["tests", 0], ["return", 0], ["tests", 0], ["def", 0], ["back", 0], ["masks", 0], ["teams", 0], ["tests", 0], ["gen", 0], ["tests", 0], ["teams", 0], ["return", 0], ["any", 0], ["test", 0], ["masks", 0], ["tests", 0], ["def", 0], ["main", 0], ["probs", 0], ["teams", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["masks", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["probs", 0], ["conf", 0], ["tuple", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["1", 0], ["not", 0], ["in", 0], ["conf", 0], ["print", 0], ["yes", 0], ["return", 0], ["masks", 0], ["add", 0], ["conf", 0], ["if", 0], ["teams", 0], ["1", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["teams", 0], ["2", 0], ["good", 0], ["test", 0], ["masks", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["else", 0], ["good", 0], ["back", 0], ["masks", 0], ["teams", 0], ["print", 0], ["yes", 0], ["if", 0], ["good", 0], ["else", 0], ["no", 0], ["main", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["1", 0], ["alert", 0], ["0", 0], ["for", 0], ["time", 0], ["in", 0], ["range", 0], ["n", 0], ["term", 0], ["str", 0], ["input", 0], ["if", 0], ["term", 0], ["0", 0], ["alert", 0], ["1", 0], ["break", 0], ["print", 0], ["no", 0], ["if", 0], ["alert", 0], ["0", 0], ["else", 0], ["print", 0], ["yes", 0], ["elif", 0], ["k", 0], ["2", 0], ["s1", 0], ["s2", 0], ["0", 0], ["0", 0], ["for", 0], ["time", 0], ["in", 0], ["range", 0], ["n", 0], ["term", 0], ["str", 0], ["input", 0], ["if", 0], ["term", 0], ["0", 0], ["0", 0], ["s1", 0], ["s2", 0], ["1", 0], ["1", 0], ["break", 0], ["else", 0], ["if", 0], ["term", 0], ["0", 0], ["1", 0], ["s1", 0], ["1", 0], ["elif", 0], ["term", 0], ["1", 0], ["0", 0], ["s2", 0], ["1", 0], ["if", 0], ["s1", 0], ["s2", 0], ["1", 0], ["1", 0], ["break", 0], ["print", 0], ["yes", 0], ["if", 0], ["s1", 0], ["s2", 0], ["1", 0], ["1", 0], ["else", 0], ["print", 0], ["no", 0], ["elif", 0], ["k", 0], ["3", 0], ["alert", 0], ["0", 0], ["s", 0], ["str", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["0", 0], ["0", 0], ["0", 0], ["in", 0], ["s", 0], ["alert", 0], ["1", 0], ["if", 0], ["0", 0], ["0", 0], ["1", 0], ["in", 0], ["s", 0], ["if", 0], ["1", 0], ["1", 0], ["0", 0], ["in", 0], ["s", 0], ["or", 0], ["1", 0], ["0", 0], ["0", 0], ["in", 0], ["s", 0], ["or", 0], ["0", 0], ["1", 0], ["0", 0], ["in", 0], ["s", 0], ["alert", 0], ["1", 0], ["if", 0], ["0", 0], ["1", 0], ["0", 0], ["in", 0], ["s", 0], ["if", 0], ["1", 0], ["0", 0], ["1", 0], ["in", 0], ["s", 0], ["or", 0], ["1", 0], ["0", 0], ["0", 0], ["in", 0], ["s", 0], ["or", 0], ["0", 0], ["0", 0], ["1", 0], ["in", 0], ["s", 0], ["alert", 0], ["1", 0], ["if", 0], ["1", 0], ["0", 0], ["0", 0], ["in", 0], ["s", 0], ["if", 0], ["0", 0], ["0", 0], ["1", 0], ["in", 0], ["s", 0], ["or", 0], ["0", 0], ["1", 0], ["0", 0], ["in", 0], ["s", 0], ["or", 0], ["0", 0], ["1", 0], ["1", 0], ["in", 0], ["s", 0], ["alert", 0], ["1", 0], ["print", 0], ["yes", 0], ["if", 0], ["alert", 0], ["1", 0], ["else", 0], ["print", 0], ["no", 0], ["elif", 0], ["k", 0], ["4", 0], ["alert", 0], ["0", 0], ["s", 0], ["str", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["list", 0], ["s", 0], ["print", 0], ["s", 0], ["if", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["in", 0], ["s", 0], ["alert", 0], ["1", 0], ["if", 0], ["1", 0], ["1", 0], ["0", 0], ["0", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["0", 0], ["0", 0], ["and", 0], ["s", 0], ["i", 0], ["2", 0], ["0", 0], ["alert", 0], ["1", 0], ["if", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["0", 0], ["0", 0], ["and", 0], ["s", 0], ["i", 0], ["4", 0], ["0", 0], ["alert", 0], ["1", 0], ["if", 0], ["1", 0], ["0", 0], ["0", 0], ["1", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["0", 0], ["0", 0], ["and", 0], ["s", 0], ["i", 0], ["6", 0], ["0", 0], ["alert", 0], ["1", 0], ["if", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["2", 0], ["0", 0], ["and", 0], ["s", 0], ["i", 0], ["4", 0], ["0", 0], ["alert", 0], ["1", 0], ["if", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["2", 0], ["0", 0], ["and", 0], ["s", 0], ["i", 0], ["6", 0], ["0", 0], ["alert", 0], ["1", 0], ["if", 0], ["0", 0], ["0", 0], ["1", 0], ["1", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["4", 0], ["0", 0], ["and", 0], ["s", 0], ["i", 0], ["6", 0], ["0", 0], ["alert", 0], ["1", 0], ["if", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["0", 0], ["0", 0], ["alert", 0], ["1", 0], ["if", 0], ["0", 0], ["1", 0], ["0", 0], ["0", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["2", 0], ["0", 0], ["alert", 0], ["1", 0], ["if", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["4", 0], ["0", 0], ["alert", 0], ["1", 0], ["if", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["6", 0], ["0", 0], ["alert", 0], ["1", 0], ["print", 0], ["yes", 0], ["if", 0], ["alert", 0], ["1", 0], ["else", 0], ["print", 0], ["no", 0], ["v", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["20", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["sum", 0], ["x", 0], ["j", 0], ["1", 0], ["j", 0], ["v", 0], ["sum", 0], ["1", 0], ["flag", 0], ["0", 0], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["16", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["16", 0], ["if", 0], ["i", 0], ["j", 0], ["0", 0], ["and", 0], ["v", 0], ["i", 0], ["and", 0], ["v", 0], ["j", 0], ["flag", 0], ["1", 0], ["if", 0], ["flag", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["exist", 0], ["false", 0], ["16", 0], ["zero", 0], ["false", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["part", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["0", 0], ["4", 0], ["k", 0], ["for", 0], ["elem", 0], ["in", 0], ["part", 0], ["p", 0], ["append", 0], ["elem", 0], ["num", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["p", 0], ["j", 0], ["0", 0], ["zero", 0], ["j", 0], ["true", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["p", 0], ["3", 0], ["j", 0], ["1", 0], ["num", 0], ["2", 0], ["j", 0], ["exist", 0], ["num", 0], ["true", 0], ["ans", 0], ["false", 0], ["if", 0], ["exist", 0], ["0", 0], ["or", 0], ["exist", 0], ["1", 0], ["and", 0], ["zero", 0], ["3", 0], ["or", 0], ["exist", 0], ["2", 0], ["and", 0], ["zero", 0], ["2", 0], ["or", 0], ["exist", 0], ["4", 0], ["and", 0], ["zero", 0], ["1", 0], ["or", 0], ["exist", 0], ["8", 0], ["and", 0], ["zero", 0], ["0", 0], ["or", 0], ["exist", 0], ["3", 0], ["and", 0], ["exist", 0], ["12", 0], ["or", 0], ["exist", 0], ["5", 0], ["and", 0], ["exist", 0], ["10", 0], ["or", 0], ["exist", 0], ["6", 0], ["and", 0], ["exist", 0], ["9", 0], ["ans", 0], ["true", 0], ["if", 0], ["ans", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0019966722129783694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0012201885745978924, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.017898574743122307, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.012484808308474201, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0019966722129783694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0012201885745978924, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.017898574743122307, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.012484808308474201, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nRecently Polycarp started to develop a text editor that works only with correct bracket sequences (abbreviated as CBS). \n\nNote that a bracket sequence is correct if it is possible to get a correct mathematical expression by adding \"+\"-s and \"1\"-s to it. For example, sequences \"(())()\", \"()\" and \"(()(()))\" are correct, while \")(\", \"(()\" and \"(()))(\" are not. Each bracket in CBS has a pair. For example, in \"(()(()))\":  1st bracket is paired with 8th,  2d bracket is paired with 3d,  3d bracket is paired with 2d,  4th bracket is paired with 7th,  5th bracket is paired with 6th,  6th bracket is paired with 5th,  7th bracket is paired with 4th,  8th bracket is paired with 1st. \n\nPolycarp's editor currently supports only three operations during the use of CBS. The cursor in the editor takes the whole position of one of the brackets (not the position between the brackets!). There are three operations being supported:  «L» — move the cursor one position to the left,  «R» — move the cursor one position to the right,  «D» — delete the bracket in which the cursor is located, delete the bracket it's paired to and all brackets between them (that is, delete a substring between the bracket in which the cursor is located and the one it's paired to). \n\nAfter the operation \"D\" the cursor moves to the nearest bracket to the right (of course, among the non-deleted). If there is no such bracket (that is, the suffix of the CBS was deleted), then the cursor moves to the nearest bracket to the left (of course, among the non-deleted). \n\nThere are pictures illustrated several usages of operation \"D\" below. [Image] \n\nAll incorrect operations (shift cursor over the end of CBS, delete the whole CBS, etc.) are not supported by Polycarp's editor.\n\nPolycarp is very proud of his development, can you implement the functionality of his editor?\n\n\n-----Input-----\n\nThe first line contains three positive integers n, m and p (2 ≤ n ≤ 500 000, 1 ≤ m ≤ 500 000, 1 ≤ p ≤ n) — the number of brackets in the correct bracket sequence, the number of operations and the initial position of cursor. Positions in the sequence are numbered from left to right, starting from one. It is guaranteed that n is even.\n\nIt is followed by the string of n characters \"(\" and \")\" forming the correct bracket sequence.\n\nThen follow a string of m characters \"L\", \"R\" and \"D\" — a sequence of the operations. Operations are carried out one by one from the first to the last. It is guaranteed that the given operations never move the cursor outside the bracket sequence, as well as the fact that after all operations a bracket sequence will be non-empty.\n\n\n-----Output-----\n\nPrint the correct bracket sequence, obtained as a result of applying all operations to the initial sequence.\n\n\n-----Examples-----\nInput\n8 4 5\n(())()()\nRDLD\n\nOutput\n()\n\nInput\n12 5 3\n((()())(()))\nRRDLD\n\nOutput\n(()(()))\n\nInput\n8 8 8\n(())()()\nLLLLLLDD\n\nOutput\n()()\n\n\n\n-----Note-----\n\nIn the first sample the cursor is initially at position 5. Consider actions of the editor:  command \"R\" — the cursor moves to the position 6 on the right;  command \"D\" — the deletion of brackets from the position 5 to the position 6. After that CBS takes the form (())(), the cursor is at the position 5;  command \"L\" — the cursor moves to the position 4 on the left;  command \"D\" — the deletion of brackets from the position 1 to the position 4. After that CBS takes the form (), the cursor is at the position 1. \n\nThus, the answer is equal to ().\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, m, p = [int(x) for x in input().split()]\nA = input().rstrip()\nB = input().rstrip()\n\npair = [0] * n\nstack = []\nfor (i, c) in enumerate(A):\n\tif c == '(':\n\t\tstack.append(i)\n\telse:\n\t\tj = stack.pop()\n\t\tpair[i] = j\n\t\tpair[j] = i\n\nstart = 0\npointer = p - 1\nleft = list(range(-1, n-1))\nright = list(range(1, n+1))\nleft[0] = None\nright[-1] = None\n\nfor c in B:\n\tif c == 'R':\n\t\tpointer = right[pointer]\n\telif c == 'L':\n\t\tpointer = left[pointer]\n\telse:\n\t\tif pair[pointer] < pointer:\n\t\t\tif right[pointer] is not None:\n\t\t\t\tleft[right[pointer]] = left[pair[pointer]]\n\t\t\tif left[pair[pointer]] is not None:\n\t\t\t\tright[left[pair[pointer]]] = right[pointer]\n\t\t\telse:\n\t\t\t\tstart = right[pointer]\n\n\t\t\tif right[pointer] is None:\n\t\t\t\tpointer = left[pair[pointer]]\n\t\t\telse:\n\t\t\t\tpointer = right[pointer]\n\t\telse:\n\t\t\tif right[pair[pointer]] is not None:\n\t\t\t\tleft[right[pair[pointer]]] = left[pointer]\n\t\t\tif left[pointer] is not None:\n\t\t\t\tright[left[pointer]] = right[pair[pointer]]\n\t\t\telse:\n\t\t\t\tstart = right[pair[pointer]]\n\n\n\t\t\tif right[pair[pointer]] is None:\n\t\t\t\tpointer = left[pointer]\n\t\t\telse:\n\t\t\t\tpointer = right[pair[pointer]]\n\ni = start\nwhile right[i] is not None:\n\tprint(A[i], end = '')\n\ti = right[i]\nprint(A[i])\n", "def main():\n\tn, m, p = list(map(int, input().split()))\n\txlat, l, s, ll, lr = [0] * n, [], input(), list(range(-1, n)), list(range(1, n + 2))\n\tp -= 1\n\tfor i, c in enumerate(s):\n\t\tif c == '(':\n\t\t\tl.append(i)\n\t\telse:\n\t\t\tj = l.pop()\n\t\t\txlat[i] = j\n\t\t\txlat[j] = i\n\tfor c in input():\n\t\tif c == 'D':\n\t\t\tif s[p] == '(':\n\t\t\t\tp = xlat[p]\n\t\t\tq = ll[xlat[p]]\n\t\t\tp = lr[p]\n\t\t\tll[p], lr[q] = q, p\n\t\t\tif p == n:\n\t\t\t\tp = ll[p]\n\t\telse:\n\t\t\tp = (lr if c == 'R' else ll)[p]\n\tq = p\n\twhile p != -1:\n\t\tl.append(s[p])\n\t\tp = ll[p]\n\tl.reverse()\n\tdel l[-1]\n\twhile q != n:\n\t\tl.append(s[q])\n\t\tq = lr[q]\n\tprint(''.join(l))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n, m, p = list(map(int, input().split())); x, v, s, l, r = [0]*n, [], input(), list(range(-1, n)), list(range(1, n+2))\np -= 1\nfor i, c in enumerate(s):\n\tif c == '(': v.append(i)\n\telse:\n\t\tj = v.pop()\n\t\tx[i] = j\n\t\tx[j] = i\nfor c in input():\n\tif c == 'D':\n\t\tif s[p] == '(':\n\t\t\tp = x[p]\n\t\tq = l[x[p]]\n\t\tp = r[p]\n\t\tl[p], r[q] = q, p\n\t\tif p == n:\n\t\t\tp = l[p]\n\telse:\n\t\tp = (r if c == 'R' else l)[p]\nq = p\nwhile p != -1:\n\tv.append(s[p])\n\tp = l[p]\nv.reverse()\ndel v[-1]\nwhile q != n:\n\tv.append(s[q])\n\tq = r[q]\nprint(''.join(v))\n", "def preproc(str, leng):\n\tli = []\n\tres = [-1]*leng\n\tfor i in range(leng):\n\t\tif str[i] == '(':\n\t\t\tli.append(i)\n\t\telse:\n\t\t\tstart, end = li.pop(), i\n\t\t\tres[start] = end\n\t\t\tres[end] = start\n\treturn res\n\t\ndef delete(flags, cursor, pairs):\n\tpos = pairs[cursor]\n\tdirection = 1 if pos > cursor else -1\n\twhile(pos+direction > 0 and pos+direction < len(flags) and flags[pos+direction] != -1):\n\t\tpos = flags[pos+direction]\n\treturn pos\n\nleng, op_num, cursor = map(int, input().strip().split())\ncursor = cursor-1\nstr = input().strip()\nops = input().strip()\npairs = preproc(str, leng)\nflags = [-1]*leng\n#print(leng, op_num, cursor, str, ops, pairs)\nfor i in ops:\n\t#print(i, cursor, flags)\n\tif i == 'R' or i == 'L':\n\t\tcursor = {\n\t\t\t'R':(lambda cursor=cursor, flags=flags: cursor+1 if flags[cursor+1] == -1 else flags[cursor+1]+1),\n\t\t\t'L':(lambda cursor=cursor, flags=flags: cursor-1 if flags[cursor-1] == -1 else flags[cursor-1]-1)\n\t\t}[i]()\n\telse:\n\t\tdelete_to = delete(flags, cursor, pairs)\n\t\tdelete_from = delete(flags, pairs[cursor], pairs)\n\t\tflags[delete_from] = delete_to\n\t\tflags[delete_to] = delete_from\n\t\tcursor = max(delete_to, delete_from)\n\t\tif cursor+1 < leng and flags[cursor+1] == -1:\n\t\t\tcursor = cursor+1\n\t\telif cursor+1 < leng and flags[cursor+1] != -1 and flags[cursor+1]+1 < leng:\n\t\t\tcursor = flags[cursor+1]+1\n\t\telif min(delete_from, delete_to) -1 > 0 and flags[min(delete_from, delete_to)-1] == -1:\n\t\t\tcursor = min(delete_from, delete_to)-1\n\t\telse:\n\t\t\tcursor = flags[min(delete_from, delete_to)-1]-1\nidx = 0\nres = ''\nwhile idx < leng:\n\tif flags[idx] != -1:\n\t\tidx = flags[idx]+1\n\t\tcontinue\n\tres += str[idx]\n\tidx = idx+1\nprint(res)\n", "class Node:\n\tdef __init__(self, index):\n\t\tself.left = index - 1\n\t\tself.right = index + 1\n\t\tself.pair = -1\n\ndef __starting_point():\n\tn, m, p = map(int, input().split())\n\tbrackets = input()\n\toperations = input()\n\n\tnodes = [Node(i) for i in range(n + 1)]\n\tstack = []\n\n\tfor i in range(n):\n\t\tif brackets[i] == \"(\":\n\t\t\tstack.append(i + 1)\n\t\telse:\n\t\t\tpair_id = stack.pop()\n\t\t\tnodes[pair_id].pair = i + 1\n\t\t\tnodes[i + 1].pair = pair_id\n\n\tfor i in range(m):\n\t\tif operations[i] == \"L\":\n\t\t\tp = nodes[p].left\n\t\telif operations[i] == \"R\":\n\t\t\tp = nodes[p].right\n\t\telse:\n\t\t\tpair_id = nodes[p].pair\n\t\t\tleft = 0\n\t\t\tright = 0\n\n\t\t\tif p < pair_id:\n\t\t\t\tleft = p\n\t\t\t\tright = pair_id\n\t\t\telse:\n\t\t\t\tleft = pair_id\n\t\t\t\tright = p\n\n\t\t\tleft_node = nodes[left].left\n\t\t\tright_node = nodes[right].right\n\n\t\t\tnodes[left_node].right = right_node\n\t\t\tif right_node != n + 1:\n\t\t\t\tnodes[right_node].left = left_node\n\t\t\t\tp = right_node\n\t\t\telse:\n\t\t\t\tp = left_node\n\n\tp = nodes[0].right\n\tresult = []\n\twhile p != n + 1:\n\t\tresult.append(brackets[p - 1])\n\t\tp = nodes[p].right\n\t\t\n\tprint(\"\".join(result))\n__starting_point()\n", "class Node:\n\tdef __init__(self, index):\n\t\tself.left = index - 1\n\t\tself.right = index + 1\n\t\tself.pair = -1\n\ndef __starting_point():\n\tn, m, p = map(int, input().split())\n\tbrackets = input()\n\toperations = input()\n\n\tnodes = [Node(i) for i in range(n + 1)]\n\tstack = []\n\n\tfor i in range(n):\n\t\tif brackets[i] == \"(\":\n\t\t\tstack.append(i + 1)\n\t\telse:\n\t\t\tpair_id = stack.pop()\n\t\t\tnodes[pair_id].pair = i + 1\n\t\t\tnodes[i + 1].pair = pair_id\n\n\tfor i in range(m):\n\t\tif operations[i] == \"L\":\n\t\t\tp = nodes[p].left\n\t\telif operations[i] == \"R\":\n\t\t\tp = nodes[p].right\n\t\telse:\n\t\t\tpair_id = nodes[p].pair\n\t\t\t\n\t\t\tleft = min(p, pair_id)\n\t\t\tright = max(p, pair_id)\n\n\t\t\tleft_node = nodes[left].left\n\t\t\tright_node = nodes[right].right\n\n\t\t\tnodes[left_node].right = right_node\n\t\t\tif right_node != n + 1:\n\t\t\t\tnodes[right_node].left = left_node\n\t\t\t\tp = right_node\n\t\t\telse:\n\t\t\t\tp = left_node\n\n\tp = nodes[0].right\n\tresult = []\n\twhile p != n + 1:\n\t\tresult.append(brackets[p - 1])\n\t\tp = nodes[p].right\n\n\tprint(\"\".join(result))\n__starting_point()\n", "jump_r = {}\njump_l = {}\n\ndef bracket_to_value(bracket):\n\tif bracket == '(':\n\t\treturn 1\n\tif bracket == ')':\n\t\treturn -1\n\ndef move_r(c):\n\tif c+1 in jump_r:\n\t\treturn jump_r[c+1]+1\n\telse:\n\t\treturn c+1\n\ndef move_l(c):\n\t\tif c-1 in jump_l:\n\t\t\treturn jump_l[c-1]-1\n\t\telse:\n\t\t\treturn c-1\n\ndef remove_bracket(s, c, length):\n\n\tval = bracket_to_value(s[c])\n\tinitial_c = c\n\tdir = bracket_to_value(s[c])\n\t#print(f'started at c ={c} and dir = {dir}')\n\tif dir == 1:\n\t\tc = move_r(c)\n\tif dir == -1:\n\t\tc = move_l(c)\n\tval += bracket_to_value(s[c])\n\twhile val != 0:\n\t\t#print(f'wwwc = {c} val = {val} s[c] = {s[c]}')\n\t\tif dir == 1:\n\t\t\tc = move_r(c)\n\t\tif dir == -1:\n\t\t\tc = move_l(c)\n\t\tval += bracket_to_value(s[c])\n\tfinal_c = c\n\n\tleft_end = min(initial_c, final_c)\n\tright_end = max(initial_c, final_c)\n\treal_r_end = right_end\n\treal_l_end = left_end\n\t#print(f'left_end = {left_end} roght_end = {right_end}')\n\tjump_r[left_end] = right_end\n\tjump_l[right_end] = left_end\n\tif right_end + 1 in jump_r:\n\t\treal_r_end = jump_r[right_end+1]\n\tif left_end - 1 in jump_l:\n\t\treal_l_end = jump_l[left_end-1]\n\n\tjump_l[real_r_end] = real_l_end\n\tjump_r[real_l_end] = real_r_end\n\n\tif real_r_end < length - 1:\n\t\tnew_c = real_r_end+1\n\telse:\n\t\tnew_c = real_l_end - 1\n\n\n\treturn new_c\n\ndef smart_print(s):\n\ti = 0\n\twhile i < n:\n\t\tif i not in jump_r:\n\t\t\tprint(s[i], end='')\n\t\t\ti += 1\n\t\telse:\n\t\t\ti = jump_r[i]+1\n\n\ndef perform_order(order, s, c, length):\n\tif order == 'R':\n\t\treturn move_r(c)\n\tif order == 'L':\n\t\treturn move_l(c)\n\tif order == 'D':\n\t\treturn remove_bracket(s, c, length)\n\nn, m, p = [int(x) for x in input().split()]\np = p-1\nse = input()\norders = input()\nfor ord in orders:\n\tp = perform_order(ord, se, p, n)\n\t#print(f'jump_r = {jump_r} jump_l = {jump_l} p = {p} s = {se}')\n\nsmart_print(se)\n   # print(f'se = {se} p = {p}')\n#print(jump_r)\n\n# 3->6\n#\n# 0 1 2 3 4 5 6 7 8 9 10 11\n# ( ( ( ) ( ) ) ( ( ) )  )\n"], "id": "id5135"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5135", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["recently", 2], ["polycarp", 2], ["started", 2], ["to", 2], ["develop", 2], ["a", 2], ["text", 2], ["editor", 2], ["that", 2], ["works", 2], ["only", 2], ["with", 2], ["correct", 2], ["bracket", 2], ["sequences", 2], ["abbreviated", 2], ["as", 2], ["cbs", 2], ["note", 2], ["that", 2], ["a", 2], ["bracket", 2], ["sequence", 2], ["is", 2], ["correct", 2], ["if", 2], ["it", 2], ["is", 2], ["possible", 2], ["to", 2], ["get", 2], ["a", 2], ["correct", 2], ["mathematical", 2], ["expression", 2], ["by", 2], ["adding", 2], ["s", 2], ["and", 2], ["1", 2], ["s", 2], ["to", 2], ["it", 2], ["for", 2], ["example", 2], ["sequences", 2], ["and", 2], ["are", 2], ["correct", 2], ["while", 2], ["and", 2], ["are", 2], ["not", 2], ["each", 2], ["bracket", 2], ["in", 2], ["cbs", 2], ["has", 2], ["a", 2], ["pair", 2], ["for", 2], ["example", 2], ["in", 2], ["1st", 0], ["bracket", 0], ["is", 0], ["paired", 0], ["with", 0], ["8th", 0], ["2d", 0], ["bracket", 0], ["is", 0], ["paired", 0], ["with", 0], ["3d", 0], ["3d", 0], ["bracket", 0], ["is", 0], ["paired", 0], ["with", 0], ["2d", 0], ["4th", 0], ["bracket", 0], ["is", 0], ["paired", 0], ["with", 0], ["7th", 0], ["5th", 0], ["bracket", 0], ["is", 0], ["paired", 0], ["with", 0], ["6th", 0], ["6th", 0], ["bracket", 0], ["is", 0], ["paired", 0], ["with", 0], ["5th", 0], ["7th", 0], ["bracket", 0], ["is", 0], ["paired", 0], ["with", 0], ["4th", 0], ["8th", 2], ["bracket", 2], ["is", 2], ["paired", 2], ["with", 2], ["1st", 2], ["polycarp", 2], ["s", 2], ["editor", 2], ["currently", 2], ["supports", 2], ["only", 2], ["three", 2], ["operations", 2], ["during", 2], ["the", 2], ["use", 2], ["of", 2], ["cbs", 2], ["the", 2], ["cursor", 2], ["in", 2], ["the", 2], ["editor", 2], ["takes", 2], ["the", 2], ["whole", 2], ["position", 2], ["of", 2], ["one", 2], ["of", 2], ["the", 2], ["brackets", 2], ["not", 2], ["the", 2], ["position", 2], ["between", 2], ["the", 2], ["brackets", 2], ["there", 2], ["are", 2], ["three", 2], ["operations", 2], ["being", 2], ["supported", 2], ["«l»", 2], ["—", 2], ["move", 2], ["the", 2], ["cursor", 2], ["one", 2], ["position", 2], ["to", 2], ["the", 2], ["left", 2], ["«r»", 2], ["—", 2], ["move", 2], ["the", 2], ["cursor", 2], ["one", 2], ["position", 2], ["to", 2], ["the", 2], ["right", 2], ["«d»", 2], ["—", 2], ["delete", 2], ["the", 2], ["bracket", 2], ["in", 2], ["which", 2], ["the", 2], ["cursor", 2], ["is", 2], ["located", 2], ["delete", 2], ["the", 2], ["bracket", 2], ["it", 2], ["s", 2], ["paired", 2], ["to", 2], ["and", 2], ["all", 2], ["brackets", 2], ["between", 2], ["them", 2], ["that", 2], ["is", 2], ["delete", 2], ["a", 2], ["substring", 2], ["between", 2], ["the", 2], ["bracket", 2], ["in", 2], ["which", 2], ["the", 2], ["cursor", 2], ["is", 2], ["located", 2], ["and", 2], ["the", 2], ["one", 2], ["it", 2], ["s", 2], ["paired", 2], ["to", 2], ["after", 2], ["the", 2], ["operation", 2], ["d", 2], ["the", 2], ["cursor", 2], ["moves", 2], ["to", 2], ["the", 2], ["nearest", 2], ["bracket", 2], ["to", 2], ["the", 2], ["right", 2], ["of", 2], ["course", 2], ["among", 2], ["the", 2], ["non", 2], ["deleted", 2], ["if", 2], ["there", 2], ["is", 2], ["no", 2], ["such", 2], ["bracket", 2], ["that", 2], ["is", 2], ["the", 2], ["suffix", 2], ["of", 2], ["the", 2], ["cbs", 2], ["was", 2], ["deleted", 2], ["then", 2], ["the", 2], ["cursor", 2], ["moves", 2], ["to", 2], ["the", 2], ["nearest", 2], ["bracket", 2], ["to", 2], ["the", 2], ["left", 2], ["of", 2], ["course", 2], ["among", 2], ["the", 2], ["non", 0], ["deleted", 0], ["there", 0], ["are", 0], ["pictures", 0], ["illustrated", 0], ["several", 0], ["usages", 0], ["of", 0], ["operation", 0], ["d", 0], ["below", 0], ["image", 0], ["all", 2], ["incorrect", 2], ["operations", 2], ["shift", 2], ["cursor", 2], ["over", 2], ["the", 2], ["end", 2], ["of", 2], ["cbs", 2], ["delete", 2], ["the", 2], ["whole", 2], ["cbs", 2], ["etc", 2], ["are", 2], ["not", 2], ["supported", 2], ["by", 2], ["polycarp", 2], ["s", 2], ["editor", 2], ["polycarp", 2], ["is", 2], ["very", 2], ["proud", 0], ["of", 0], ["his", 0], ["development", 0], ["can", 0], ["you", 0], ["implement", 0], ["the", 0], ["functionality", 0], ["of", 0], ["his", 0], ["editor", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 2], ["contains", 2], ["three", 2], ["positive", 2], ["integers", 2], ["n", 2], ["m", 2], ["and", 2], ["p", 2], ["2", 2], ["≤", 2], ["n", 2], ["≤", 2], ["500", 2], ["000", 2], ["1", 2], ["≤", 2], ["m", 2], ["≤", 2], ["500", 2], ["000", 2], ["1", 2], ["≤", 2], ["p", 2], ["≤", 2], ["n", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["brackets", 2], ["in", 2], ["the", 2], ["correct", 2], ["bracket", 2], ["sequence", 2], ["the", 2], ["number", 2], ["of", 2], ["operations", 2], ["and", 2], ["the", 2], ["initial", 2], ["position", 2], ["of", 2], ["cursor", 2], ["positions", 2], ["in", 2], ["the", 2], ["sequence", 2], ["are", 2], ["numbered", 2], ["from", 2], ["left", 2], ["to", 2], ["right", 2], ["starting", 2], ["from", 2], ["one", 2], ["it", 2], ["is", 2], ["guaranteed", 2], ["that", 2], ["n", 2], ["is", 2], ["even", 2], ["it", 2], ["is", 2], ["followed", 2], ["by", 2], ["the", 2], ["string", 2], ["of", 2], ["n", 2], ["characters", 2], ["and", 2], ["forming", 2], ["the", 2], ["correct", 2], ["bracket", 2], ["sequence", 2], ["then", 2], ["follow", 2], ["a", 2], ["string", 2], ["of", 2], ["m", 2], ["characters", 2], ["l", 2], ["r", 2], ["and", 2], ["d", 2], ["—", 2], ["a", 2], ["sequence", 2], ["of", 2], ["the", 2], ["operations", 2], ["operations", 2], ["are", 2], ["carried", 2], ["out", 2], ["one", 2], ["by", 2], ["one", 2], ["from", 2], ["the", 2], ["first", 2], ["to", 2], ["the", 2], ["last", 2], ["it", 2], ["is", 2], ["guaranteed", 2], ["that", 2], ["the", 2], ["given", 2], ["operations", 2], ["never", 2], ["move", 2], ["the", 2], ["cursor", 2], ["outside", 2], ["the", 2], ["bracket", 2], ["sequence", 2], ["as", 2], ["well", 2], ["as", 2], ["the", 2], ["fact", 0], ["that", 0], ["after", 0], ["all", 0], ["operations", 0], ["a", 0], ["bracket", 0], ["sequence", 0], ["will", 0], ["be", 0], ["non", 0], ["empty", 0], ["output", 0], ["print", 2], ["the", 2], ["correct", 2], ["bracket", 2], ["sequence", 2], ["obtained", 0], ["as", 0], ["a", 0], ["result", 0], ["of", 0], ["applying", 0], ["all", 0], ["operations", 0], ["to", 0], ["the", 0], ["initial", 0], ["sequence", 0], ["examples", 0], ["input", 0], ["8", 0], ["4", 0], ["5", 0], ["rdld", 0], ["output", 0], ["input", 0], ["12", 0], ["5", 0], ["3", 0], ["rrdld", 0], ["output", 0], ["input", 0], ["8", 0], ["8", 0], ["8", 0], ["lllllldd", 0], ["output", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["sample", 2], ["the", 2], ["cursor", 2], ["is", 2], ["initially", 2], ["at", 2], ["position", 2], ["5", 2], ["consider", 2], ["actions", 2], ["of", 2], ["the", 2], ["editor", 2], ["command", 2], ["r", 2], ["—", 2], ["the", 2], ["cursor", 2], ["moves", 2], ["to", 2], ["the", 2], ["position", 2], ["6", 2], ["on", 2], ["the", 2], ["right", 2], ["command", 2], ["d", 2], ["—", 2], ["the", 2], ["deletion", 2], ["of", 2], ["brackets", 2], ["from", 2], ["the", 2], ["position", 2], ["5", 2], ["to", 2], ["the", 2], ["position", 2], ["6", 2], ["after", 2], ["that", 2], ["cbs", 2], ["takes", 2], ["the", 2], ["form", 2], ["the", 2], ["cursor", 2], ["is", 2], ["at", 2], ["the", 2], ["position", 2], ["5", 2], ["command", 2], ["l", 2], ["—", 2], ["the", 2], ["cursor", 2], ["moves", 2], ["to", 2], ["the", 2], ["position", 2], ["4", 2], ["on", 2], ["the", 2], ["left", 2], ["command", 2], ["d", 2], ["—", 2], ["the", 2], ["deletion", 2], ["of", 2], ["brackets", 2], ["from", 2], ["the", 2], ["position", 2], ["1", 2], ["to", 2], ["the", 2], ["position", 2], ["4", 2], ["after", 2], ["that", 2], ["cbs", 2], ["takes", 2], ["the", 2], ["form", 2], ["the", 2], ["cursor", 0], ["is", 0], ["at", 0], ["the", 0], ["position", 0], ["1", 0], ["thus", 0], ["the", 0], ["answer", 0], ["is", 0], ["equal", 0], ["to", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7933333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.39666666666666667, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8954248366013072, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4477124183006536, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7933333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.39666666666666667, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8954248366013072, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4477124183006536, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["m", 0], ["p", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["input", 0], ["rstrip", 0], ["b", 0], ["input", 0], ["rstrip", 0], ["pair", 0], ["0", 0], ["n", 0], ["stack", 0], ["for", 0], ["i", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["if", 0], ["c", 0], ["stack", 0], ["append", 0], ["i", 0], ["else", 0], ["j", 0], ["stack", 0], ["pop", 0], ["pair", 0], ["i", 0], ["j", 0], ["pair", 0], ["j", 0], ["i", 0], ["start", 0], ["0", 0], ["pointer", 0], ["p", 0], ["1", 0], ["left", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["right", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["left", 0], ["0", 0], ["none", 0], ["right", 0], ["1", 0], ["none", 0], ["for", 0], ["c", 0], ["in", 0], ["b", 0], ["if", 0], ["c", 0], ["r", 0], ["pointer", 0], ["right", 0], ["pointer", 0], ["elif", 0], ["c", 0], ["l", 0], ["pointer", 0], ["left", 0], ["pointer", 0], ["else", 0], ["if", 0], ["pair", 0], ["pointer", 0], ["pointer", 0], ["if", 0], ["right", 0], ["pointer", 0], ["is", 0], ["not", 0], ["none", 0], ["left", 0], ["right", 0], ["pointer", 0], ["left", 0], ["pair", 0], ["pointer", 0], ["if", 0], ["left", 0], ["pair", 0], ["pointer", 0], ["is", 0], ["not", 0], ["none", 0], ["right", 0], ["left", 0], ["pair", 0], ["pointer", 0], ["right", 0], ["pointer", 0], ["else", 0], ["start", 0], ["right", 0], ["pointer", 0], ["if", 0], ["right", 0], ["pointer", 0], ["is", 0], ["none", 0], ["pointer", 0], ["left", 0], ["pair", 0], ["pointer", 0], ["else", 0], ["pointer", 0], ["right", 0], ["pointer", 0], ["else", 0], ["if", 0], ["right", 0], ["pair", 0], ["pointer", 0], ["is", 0], ["not", 0], ["none", 0], ["left", 0], ["right", 0], ["pair", 0], ["pointer", 0], ["left", 0], ["pointer", 0], ["if", 0], ["left", 0], ["pointer", 0], ["is", 0], ["not", 0], ["none", 0], ["right", 0], ["left", 0], ["pointer", 0], ["right", 0], ["pair", 0], ["pointer", 0], ["else", 0], ["start", 0], ["right", 0], ["pair", 0], ["pointer", 0], ["if", 0], ["right", 0], ["pair", 0], ["pointer", 0], ["is", 0], ["none", 0], ["pointer", 0], ["left", 0], ["pointer", 0], ["else", 0], ["pointer", 0], ["right", 0], ["pair", 0], ["pointer", 0], ["i", 0], ["start", 0], ["while", 0], ["right", 0], ["i", 0], ["is", 0], ["not", 0], ["none", 0], ["print", 0], ["a", 0], ["i", 0], ["end", 0], ["i", 0], ["right", 0], ["i", 0], ["print", 0], ["a", 0], ["i", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["xlat", 0], ["l", 0], ["s", 0], ["ll", 0], ["lr", 0], ["0", 0], ["n", 0], ["input", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["2", 0], ["p", 0], ["1", 0], ["for", 0], ["i", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["c", 0], ["l", 0], ["append", 0], ["i", 0], ["else", 0], ["j", 0], ["l", 0], ["pop", 0], ["xlat", 0], ["i", 0], ["j", 0], ["xlat", 0], ["j", 0], ["i", 0], ["for", 0], ["c", 0], ["in", 0], ["input", 0], ["if", 0], ["c", 0], ["d", 0], ["if", 0], ["s", 0], ["p", 0], ["p", 0], ["xlat", 0], ["p", 0], ["q", 0], ["ll", 0], ["xlat", 0], ["p", 0], ["p", 0], ["lr", 0], ["p", 0], ["ll", 0], ["p", 0], ["lr", 0], ["q", 0], ["q", 0], ["p", 0], ["if", 0], ["p", 0], ["n", 0], ["p", 0], ["ll", 0], ["p", 0], ["else", 0], ["p", 0], ["lr", 0], ["if", 0], ["c", 0], ["r", 0], ["else", 0], ["ll", 0], ["p", 0], ["q", 0], ["p", 0], ["while", 0], ["p", 0], ["1", 0], ["l", 0], ["append", 0], ["s", 0], ["p", 0], ["p", 0], ["ll", 0], ["p", 0], ["l", 0], ["reverse", 0], ["del", 0], ["l", 0], ["1", 0], ["while", 0], ["q", 0], ["n", 0], ["l", 0], ["append", 0], ["s", 0], ["q", 0], ["q", 0], ["lr", 0], ["q", 0], ["print", 0], ["join", 0], ["l", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["v", 0], ["s", 0], ["l", 0], ["r", 0], ["0", 0], ["n", 0], ["input", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["2", 0], ["p", 0], ["1", 0], ["for", 0], ["i", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["c", 0], ["v", 0], ["append", 0], ["i", 0], ["else", 0], ["j", 0], ["v", 0], ["pop", 0], ["x", 0], ["i", 0], ["j", 0], ["x", 0], ["j", 0], ["i", 0], ["for", 0], ["c", 0], ["in", 0], ["input", 0], ["if", 0], ["c", 0], ["d", 0], ["if", 0], ["s", 0], ["p", 0], ["p", 0], ["x", 0], ["p", 0], ["q", 0], ["l", 0], ["x", 0], ["p", 0], ["p", 0], ["r", 0], ["p", 0], ["l", 0], ["p", 0], ["r", 0], ["q", 0], ["q", 0], ["p", 0], ["if", 0], ["p", 0], ["n", 0], ["p", 0], ["l", 0], ["p", 0], ["else", 0], ["p", 0], ["r", 0], ["if", 0], ["c", 0], ["r", 0], ["else", 0], ["l", 0], ["p", 0], ["q", 0], ["p", 0], ["while", 0], ["p", 0], ["1", 0], ["v", 0], ["append", 0], ["s", 0], ["p", 0], ["p", 0], ["l", 0], ["p", 0], ["v", 0], ["reverse", 0], ["del", 0], ["v", 0], ["1", 0], ["while", 0], ["q", 0], ["n", 0], ["v", 0], ["append", 0], ["s", 0], ["q", 0], ["q", 0], ["r", 0], ["q", 0], ["print", 0], ["join", 0], ["v", 0], ["def", 0], ["preproc", 0], ["str", 0], ["leng", 0], ["li", 0], ["res", 0], ["1", 0], ["leng", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["leng", 0], ["if", 0], ["str", 0], ["i", 0], ["li", 0], ["append", 0], ["i", 0], ["else", 0], ["start", 0], ["end", 0], ["li", 0], ["pop", 0], ["i", 0], ["res", 0], ["start", 0], ["end", 0], ["res", 0], ["end", 0], ["start", 0], ["return", 0], ["res", 0], ["def", 0], ["delete", 0], ["flags", 0], ["cursor", 0], ["pairs", 0], ["pos", 0], ["pairs", 0], ["cursor", 0], ["direction", 0], ["1", 0], ["if", 0], ["pos", 0], ["cursor", 0], ["else", 0], ["1", 0], ["while", 0], ["pos", 0], ["direction", 0], ["0", 0], ["and", 0], ["pos", 0], ["direction", 0], ["len", 0], ["flags", 0], ["and", 0], ["flags", 0], ["pos", 0], ["direction", 0], ["1", 0], ["pos", 0], ["flags", 0], ["pos", 0], ["direction", 0], ["return", 0], ["pos", 0], ["leng", 0], ["op", 0], ["num", 0], ["cursor", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["cursor", 0], ["cursor", 0], ["1", 0], ["str", 0], ["input", 0], ["strip", 0], ["ops", 0], ["input", 0], ["strip", 0], ["pairs", 0], ["preproc", 0], ["str", 0], ["leng", 0], ["flags", 0], ["1", 0], ["leng", 0], ["print", 0], ["leng", 0], ["op", 0], ["num", 0], ["cursor", 0], ["str", 0], ["ops", 0], ["pairs", 0], ["for", 0], ["i", 0], ["in", 0], ["ops", 0], ["print", 0], ["i", 0], ["cursor", 0], ["flags", 0], ["if", 0], ["i", 0], ["r", 0], ["or", 0], ["i", 0], ["l", 0], ["cursor", 0], ["r", 0], ["lambda", 0], ["cursor", 0], ["cursor", 0], ["flags", 0], ["flags", 0], ["cursor", 0], ["1", 0], ["if", 0], ["flags", 0], ["cursor", 0], ["1", 0], ["1", 0], ["else", 0], ["flags", 0], ["cursor", 0], ["1", 0], ["1", 0], ["l", 0], ["lambda", 0], ["cursor", 0], ["cursor", 0], ["flags", 0], ["flags", 0], ["cursor", 0], ["1", 0], ["if", 0], ["flags", 0], ["cursor", 0], ["1", 0], ["1", 0], ["else", 0], ["flags", 0], ["cursor", 0], ["1", 0], ["1", 0], ["i", 0], ["else", 0], ["delete", 0], ["to", 0], ["delete", 0], ["flags", 0], ["cursor", 0], ["pairs", 0], ["delete", 0], ["from", 0], ["delete", 0], ["flags", 0], ["pairs", 0], ["cursor", 0], ["pairs", 0], ["flags", 0], ["delete", 0], ["from", 0], ["delete", 0], ["to", 0], ["flags", 0], ["delete", 0], ["to", 0], ["delete", 0], ["from", 0], ["cursor", 0], ["max", 0], ["delete", 0], ["to", 0], ["delete", 0], ["from", 0], ["if", 0], ["cursor", 0], ["1", 0], ["leng", 0], ["and", 0], ["flags", 0], ["cursor", 0], ["1", 0], ["1", 0], ["cursor", 0], ["cursor", 0], ["1", 0], ["elif", 0], ["cursor", 0], ["1", 0], ["leng", 0], ["and", 0], ["flags", 0], ["cursor", 0], ["1", 0], ["1", 0], ["and", 0], ["flags", 0], ["cursor", 0], ["1", 0], ["1", 0], ["leng", 0], ["cursor", 0], ["flags", 0], ["cursor", 0], ["1", 0], ["1", 0], ["elif", 0], ["min", 0], ["delete", 0], ["from", 0], ["delete", 0], ["to", 0], ["1", 0], ["0", 0], ["and", 0], ["flags", 0], ["min", 0], ["delete", 0], ["from", 0], ["delete", 0], ["to", 0], ["1", 0], ["1", 0], ["cursor", 0], ["min", 0], ["delete", 0], ["from", 0], ["delete", 0], ["to", 0], ["1", 0], ["else", 0], ["cursor", 0], ["flags", 0], ["min", 0], ["delete", 0], ["from", 0], ["delete", 0], ["to", 0], ["1", 0], ["1", 0], ["idx", 0], ["0", 0], ["res", 0], ["while", 0], ["idx", 0], ["leng", 0], ["if", 0], ["flags", 0], ["idx", 0], ["1", 0], ["idx", 0], ["flags", 0], ["idx", 0], ["1", 0], ["continue", 0], ["res", 0], ["str", 0], ["idx", 0], ["idx", 0], ["idx", 0], ["1", 0], ["print", 0], ["res", 0], ["class", 0], ["node", 0], ["def", 0], ["init", 0], ["self", 0], ["index", 0], ["self", 0], ["left", 0], ["index", 0], ["1", 0], ["self", 0], ["right", 0], ["index", 0], ["1", 0], ["self", 0], ["pair", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["p", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["brackets", 0], ["input", 0], ["operations", 0], ["input", 0], ["nodes", 0], ["node", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["stack", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["brackets", 0], ["i", 0], ["stack", 0], ["append", 0], ["i", 0], ["1", 0], ["else", 0], ["pair", 0], ["id", 0], ["stack", 0], ["pop", 0], ["nodes", 0], ["pair", 0], ["id", 0], ["pair", 0], ["i", 0], ["1", 0], ["nodes", 0], ["i", 0], ["1", 0], ["pair", 0], ["pair", 0], ["id", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["operations", 0], ["i", 0], ["l", 0], ["p", 0], ["nodes", 0], ["p", 0], ["left", 0], ["elif", 0], ["operations", 0], ["i", 0], ["r", 0], ["p", 0], ["nodes", 0], ["p", 0], ["right", 0], ["else", 0], ["pair", 0], ["id", 0], ["nodes", 0], ["p", 0], ["pair", 0], ["left", 0], ["0", 0], ["right", 0], ["0", 0], ["if", 0], ["p", 0], ["pair", 0], ["id", 0], ["left", 0], ["p", 0], ["right", 0], ["pair", 0], ["id", 0], ["else", 0], ["left", 0], ["pair", 0], ["id", 0], ["right", 0], ["p", 0], ["left", 0], ["node", 0], ["nodes", 0], ["left", 0], ["left", 0], ["right", 0], ["node", 0], ["nodes", 0], ["right", 0], ["right", 0], ["nodes", 0], ["left", 0], ["node", 0], ["right", 0], ["right", 0], ["node", 0], ["if", 0], ["right", 0], ["node", 0], ["n", 0], ["1", 0], ["nodes", 0], ["right", 0], ["node", 0], ["left", 0], ["left", 0], ["node", 0], ["p", 0], ["right", 0], ["node", 0], ["else", 0], ["p", 0], ["left", 0], ["node", 0], ["p", 0], ["nodes", 0], ["0", 0], ["right", 0], ["result", 0], ["while", 0], ["p", 0], ["n", 0], ["1", 0], ["result", 0], ["append", 0], ["brackets", 0], ["p", 0], ["1", 0], ["p", 0], ["nodes", 0], ["p", 0], ["right", 0], ["print", 0], ["join", 0], ["result", 0], ["starting", 0], ["point", 0], ["class", 0], ["node", 0], ["def", 0], ["init", 0], ["self", 0], ["index", 0], ["self", 0], ["left", 0], ["index", 0], ["1", 0], ["self", 0], ["right", 0], ["index", 0], ["1", 0], ["self", 0], ["pair", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["p", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["brackets", 0], ["input", 0], ["operations", 0], ["input", 0], ["nodes", 0], ["node", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["stack", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["brackets", 0], ["i", 0], ["stack", 0], ["append", 0], ["i", 0], ["1", 0], ["else", 0], ["pair", 0], ["id", 0], ["stack", 0], ["pop", 0], ["nodes", 0], ["pair", 0], ["id", 0], ["pair", 0], ["i", 0], ["1", 0], ["nodes", 0], ["i", 0], ["1", 0], ["pair", 0], ["pair", 0], ["id", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["operations", 0], ["i", 0], ["l", 0], ["p", 0], ["nodes", 0], ["p", 0], ["left", 0], ["elif", 0], ["operations", 0], ["i", 0], ["r", 0], ["p", 0], ["nodes", 0], ["p", 0], ["right", 0], ["else", 0], ["pair", 0], ["id", 0], ["nodes", 0], ["p", 0], ["pair", 0], ["left", 0], ["min", 0], ["p", 0], ["pair", 0], ["id", 0], ["right", 0], ["max", 0], ["p", 0], ["pair", 0], ["id", 0], ["left", 0], ["node", 0], ["nodes", 0], ["left", 0], ["left", 0], ["right", 0], ["node", 0], ["nodes", 0], ["right", 0], ["right", 0], ["nodes", 0], ["left", 0], ["node", 0], ["right", 0], ["right", 0], ["node", 0], ["if", 0], ["right", 0], ["node", 0], ["n", 0], ["1", 0], ["nodes", 0], ["right", 0], ["node", 0], ["left", 0], ["left", 0], ["node", 0], ["p", 0], ["right", 0], ["node", 0], ["else", 0], ["p", 0], ["left", 0], ["node", 0], ["p", 0], ["nodes", 0], ["0", 0], ["right", 0], ["result", 0], ["while", 0], ["p", 0], ["n", 0], ["1", 0], ["result", 0], ["append", 0], ["brackets", 0], ["p", 0], ["1", 0], ["p", 0], ["nodes", 0], ["p", 0], ["right", 0], ["print", 0], ["join", 0], ["result", 0], ["starting", 0], ["point", 0], ["jump", 0], ["r", 0], ["jump", 0], ["l", 0], ["def", 0], ["bracket", 0], ["to", 0], ["value", 0], ["bracket", 0], ["if", 0], ["bracket", 0], ["return", 0], ["1", 0], ["if", 0], ["bracket", 0], ["return", 0], ["1", 0], ["def", 0], ["move", 0], ["r", 0], ["c", 0], ["if", 0], ["c", 0], ["1", 0], ["in", 0], ["jump", 0], ["r", 0], ["return", 0], ["jump", 0], ["r", 0], ["c", 0], ["1", 0], ["1", 0], ["else", 0], ["return", 0], ["c", 0], ["1", 0], ["def", 0], ["move", 0], ["l", 0], ["c", 0], ["if", 0], ["c", 0], ["1", 0], ["in", 0], ["jump", 0], ["l", 0], ["return", 0], ["jump", 0], ["l", 0], ["c", 0], ["1", 0], ["1", 0], ["else", 0], ["return", 0], ["c", 0], ["1", 0], ["def", 0], ["remove", 0], ["bracket", 0], ["s", 0], ["c", 0], ["length", 0], ["val", 0], ["bracket", 0], ["to", 0], ["value", 0], ["s", 0], ["c", 0], ["initial", 0], ["c", 0], ["c", 0], ["dir", 0], ["bracket", 0], ["to", 0], ["value", 0], ["s", 0], ["c", 0], ["print", 0], ["f", 0], ["started", 0], ["at", 0], ["c", 0], ["c", 0], ["and", 0], ["dir", 0], ["dir", 0], ["if", 0], ["dir", 0], ["1", 0], ["c", 0], ["move", 0], ["r", 0], ["c", 0], ["if", 0], ["dir", 0], ["1", 0], ["c", 0], ["move", 0], ["l", 0], ["c", 0], ["val", 0], ["bracket", 0], ["to", 0], ["value", 0], ["s", 0], ["c", 0], ["while", 0], ["val", 0], ["0", 0], ["print", 0], ["f", 0], ["wwwc", 0], ["c", 0], ["val", 0], ["val", 0], ["s", 0], ["c", 0], ["s", 0], ["c", 0], ["if", 0], ["dir", 0], ["1", 0], ["c", 0], ["move", 0], ["r", 0], ["c", 0], ["if", 0], ["dir", 0], ["1", 0], ["c", 0], ["move", 0], ["l", 0], ["c", 0], ["val", 0], ["bracket", 0], ["to", 0], ["value", 0], ["s", 0], ["c", 0], ["final", 0], ["c", 0], ["c", 0], ["left", 0], ["end", 0], ["min", 0], ["initial", 0], ["c", 0], ["final", 0], ["c", 0], ["right", 0], ["end", 0], ["max", 0], ["initial", 0], ["c", 0], ["final", 0], ["c", 0], ["real", 0], ["r", 0], ["end", 0], ["right", 0], ["end", 0], ["real", 0], ["l", 0], ["end", 0], ["left", 0], ["end", 0], ["print", 0], ["f", 0], ["left", 0], ["end", 0], ["left", 0], ["end", 0], ["roght", 0], ["end", 0], ["right", 0], ["end", 0], ["jump", 0], ["r", 0], ["left", 0], ["end", 0], ["right", 0], ["end", 0], ["jump", 0], ["l", 0], ["right", 0], ["end", 0], ["left", 0], ["end", 0], ["if", 0], ["right", 0], ["end", 0], ["1", 0], ["in", 0], ["jump", 0], ["r", 0], ["real", 0], ["r", 0], ["end", 0], ["jump", 0], ["r", 0], ["right", 0], ["end", 0], ["1", 0], ["if", 0], ["left", 0], ["end", 0], ["1", 0], ["in", 0], ["jump", 0], ["l", 0], ["real", 0], ["l", 0], ["end", 0], ["jump", 0], ["l", 0], ["left", 0], ["end", 0], ["1", 0], ["jump", 0], ["l", 0], ["real", 0], ["r", 0], ["end", 0], ["real", 0], ["l", 0], ["end", 0], ["jump", 0], ["r", 0], ["real", 0], ["l", 0], ["end", 0], ["real", 0], ["r", 0], ["end", 0], ["if", 0], ["real", 0], ["r", 0], ["end", 0], ["length", 0], ["1", 0], ["new", 0], ["c", 0], ["real", 0], ["r", 0], ["end", 0], ["1", 0], ["else", 0], ["new", 0], ["c", 0], ["real", 0], ["l", 0], ["end", 0], ["1", 0], ["return", 0], ["new", 0], ["c", 0], ["def", 0], ["smart", 0], ["print", 0], ["s", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["jump", 0], ["r", 0], ["print", 0], ["s", 0], ["i", 0], ["end", 0], ["i", 0], ["1", 0], ["else", 0], ["i", 0], ["jump", 0], ["r", 0], ["i", 0], ["1", 0], ["def", 0], ["perform", 0], ["order", 0], ["order", 0], ["s", 0], ["c", 0], ["length", 0], ["if", 0], ["order", 0], ["r", 0], ["return", 0], ["move", 0], ["r", 0], ["c", 0], ["if", 0], ["order", 0], ["l", 0], ["return", 0], ["move", 0], ["l", 0], ["c", 0], ["if", 0], ["order", 0], ["d", 0], ["return", 0], ["remove", 0], ["bracket", 0], ["s", 0], ["c", 0], ["length", 0], ["n", 0], ["m", 0], ["p", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["p", 0], ["p", 0], ["1", 0], ["se", 0], ["input", 0], ["orders", 0], ["input", 0], ["for", 0], ["ord", 0], ["in", 0], ["orders", 0], ["p", 0], ["perform", 0], ["order", 0], ["ord", 0], ["se", 0], ["p", 0], ["n", 0], ["print", 0], ["f", 0], ["jump", 0], ["r", 0], ["jump", 0], ["r", 0], ["jump", 0], ["l", 0], ["jump", 0], ["l", 0], ["p", 0], ["p", 0], ["s", 0], ["se", 0], ["smart", 0], ["print", 0], ["se", 0], ["print", 0], ["f", 0], ["se", 0], ["se", 0], ["p", 0], ["p", 0], ["print", 0], ["jump", 0], ["r", 0], ["3", 3], ["6", 1932], ["0", 8], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["8", 0], ["9", 0], ["10", 0], ["11", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00211864406779661, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00032404726813348774, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.01050420168067227, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.003501400560224089, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0014124293785310734, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00032368173258003763, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.01050420168067227, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.003501400560224089, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nA robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\n\n\n\nAn obstacle and empty space is marked as 1 and 0 respectively in the grid.\n\nNote: m and n will be at most 100.\n\nExample 1:\n\n\nInput:\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\nOutput: 2\nExplanation:\nThere is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    m = len(obstacleGrid) #row\n\t    n = len(obstacleGrid[0]) #col\n\t    path = [[0 for j in range(n)] for i in range(m)]\n\t    for i in range(m):\n\t\t   if obstacleGrid[i][0] == 0:\n\t\t\t  path[i][0] = 1\n\t\t   else:\n\t\t\t  break\n\t    for i in range(n):\n\t\t   if obstacleGrid[0][i] == 0:\n\t\t\t  path[0][i] = 1\n\t\t   else:\n\t\t\t  break\n\t    for i in range(1,m):\n\t\t   for j in range(1,n):\n\t\t\t  if obstacleGrid[i][j] != 1:\n\t\t\t\t path[i][j] = path[i-1][j] + path[i][j-1]\n\t\t\t  else:\n\t\t\t\t path[i][j] = 0\n\t    return path[m-1][n-1]\n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    \n\t    if not obstacleGrid or not obstacleGrid[0]:\n\t\t   return 0\n \n\t    m, n = len(obstacleGrid), len(obstacleGrid[0])\n \n\t    # DP:\n\t    #   dp(i, j):   no. of unique paths to obstacleGrid[i][j]\n\t    #   bound:\n\t    #       dp(0, 0) = 0 if obstacleGrid[0][0] == 1 else 1\n\t    #       dp(-1, *) = 0\n\t    #       dp(*, -1) =  0\n\t    #   progress:\n\t    #       dp(i, j) = | 0,             if obstacleGrid[i][j] == 1\n\t    #                  | dp(i-1, j) + dp(i, j-1),           else\n \n\t    dp = [0] * n\n\t    for i in range(m):\n\t\t   for j in range(n):\n\t\t\t  if obstacleGrid[i][j] == 1:\n\t\t\t\t dp[j] = 0\n\t\t\t  else:       \n\t\t\t\t if i == 0:\n\t\t\t\t\tif j == 0:\n\t\t\t\t\t    dp[j] = 1\n\t\t\t\t\telse:\n\t\t\t\t\t    dp[j] = dp[j-1]\n\t\t\t\t else:\n\t\t\t\t\tif j > 0:\n\t\t\t\t\t    dp[j] = dp[j] + dp[j-1]\n\t\t\t\t\t    \n\t    \n\t    return dp[n-1]\n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    if not obstacleGrid:\n\t\t   return 0\n\t    if obstacleGrid[-1][-1] == 1:\n\t\t   return 0\n\t    dp = []\n\t    for each in obstacleGrid:\n\t\t   temp = each[:]\n\t\t   dp.append(temp)\n \n\t    for i in range(len(dp[0])):\n\t\t   if obstacleGrid[0][i] == 1:\n\t\t\t  # dp[0][i] = 0\n\t\t\t  break\n\t\t   else:\n\t\t\t  dp[0][i] = 1\n\t    for j in range(len(dp)):\n\t\t   if obstacleGrid[j][0] == 1:\n\t\t\t  break\n\t\t   else:\n\t\t\t  dp[j][0] = 1\n\t    \n\t    # print(dp,obstacleGrid)\n\t    \n\t    for row in range(1, len(obstacleGrid)):\n\t\t   for col in range(1, len(obstacleGrid[0])):\n\t\t\t  if obstacleGrid[row][col] == 0:\n\t\t\t\t if obstacleGrid[row - 1][col] != 1:\n\t\t\t\t\tdp[row][col] += dp[row - 1][col]\n\t\t\t\t if obstacleGrid[row][col - 1] != 1:\n\t\t\t\t\tdp[row][col] += dp[row][col - 1]\n\t    print(dp)\n\t    return dp[-1][-1]\n", "class Solution:\n\tdef paths(self,obstacleGrid,n,m,a,b,memo):\n\t    if n>a or m>b:\n\t\t   return 0\n \n\t    if obstacleGrid[n][m] == 1:\n\t\t   return 0\n \n\t    if n==a and m==b:\n\t\t   return 1\n \n\t    if str(n)+\" \"+str(m) not in memo:\n\t\t   memo[str(n)+\" \"+str(m)]=self.paths(obstacleGrid,n+1,m,a,b,memo)+self.paths(obstacleGrid,n,m+1,a,b,memo)\n \n\t    return memo[str(n)+\" \"+str(m)]\n \n\t    \n\t    \n\t    \n\t    \n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    a = len(obstacleGrid)\n\t    b= len(obstacleGrid[0])\n\t    memo = dict()\n\t    return  self.paths(obstacleGrid,0,0,a-1,b-1,memo)\n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    if len(obstacleGrid)==0 and len(obstacleGrid[0])==0:\n\t\t   return 1\n\t    if len(obstacleGrid)==0:\n\t\t   return 0\n\t    \n\t    \n\t    ob=False\n\t    for i in range(len(obstacleGrid)):\n\t\t   for j in range(len(obstacleGrid[i])):\n\t\t\t  if obstacleGrid[i][j]==1:\n\t\t\t\t obstacleGrid[i][j]=None\n\t\t\t\t ob=True\n\t\t\t\t \n\t    for i in range(len(obstacleGrid)):            \n\t\t   if obstacleGrid[i][0]==0:\n\t\t\t  obstacleGrid[i][0]=1\n\t\t   if obstacleGrid[i][0]==None:\n\t\t\t  break\n\t\t\t  \n\t    for i in range(len(obstacleGrid[0])):            \n\t\t   if obstacleGrid[0][i]==0:\n\t\t\t  obstacleGrid[0][i]=1\n\t\t   if obstacleGrid[0][i]==None:\n\t\t\t  break\n\t\t\t  \n\t    for i in range(1,len(obstacleGrid)):\n\t\t   for j in range(1,len(obstacleGrid[i])):\n\t\t\t  if obstacleGrid[i][j]!=None:\n\t\t\t\t if obstacleGrid[i-1][j]==None and obstacleGrid[i][j-1]==None:\n\t\t\t\t\tobstacleGrid[i][j]=None\n\t\t\t\t elif obstacleGrid[i-1][j]==None and obstacleGrid[i][j-1]!=None:\n\t\t\t\t\tobstacleGrid[i][j]=obstacleGrid[i][j-1]\n\t\t\t\t elif obstacleGrid[i-1][j]!=None and obstacleGrid[i][j-1]==None:\n\t\t\t\t\tobstacleGrid[i][j]=obstacleGrid[i-1][j]\n\t\t\t\t else:\n\t\t\t\t\tobstacleGrid[i][j]=obstacleGrid[i-1][j]+obstacleGrid[i][j-1]\n\t\t\t  \n\t    if len(obstacleGrid)==1 or len(obstacleGrid[0])==1:\n\t\t   if ob:\n\t\t\t  return 0\n\t\t   else:\n\t\t\t  return 1\n\t    \n\t    if obstacleGrid[-1][-1]==None or obstacleGrid[0][0]==None:\n\t\t   return 0\n\t    \n\t    return obstacleGrid[-1][-1]\n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    1 1 0\n\t    1 1 0\n\t    1 1 0\n\t    \"\"\"\n\t    if not any(obstacleGrid):\n\t\t   return 0\n \n\t    n, m = len(obstacleGrid), len(obstacleGrid[0])\n\t    dp = [[1 if i == 0 or j == 0 else 1 for j in range(m)] for i in range(n)]\n \n\t    # Set first column of dp.\n\t    obs = False\n\t    first_col = [i[0] for i in obstacleGrid]\n \n\t    try:\n\t\t   idx = first_col.index(1)\n\t\t   for i in range(n):\n\t\t\t  dp[i][0] = 1 if i < idx else 0\n\t    except ValueError:\n\t\t   pass\n \n\t    # Set first row of dp.\n\t    try:\n\t\t   first_row = obstacleGrid[0]\n\t\t   idx = first_row.index(1)\n\t\t   dp[0] = [1] * idx + [0] * (m - idx)\n\t    except ValueError:\n\t\t   pass\n \n\t    print(obstacleGrid)\n\t    for i in range(1, n):\n\t\t   for j in range(1, m):\n\t\t\t  print(i, j)\n\t\t\t  if obstacleGrid[i][j] == 1:\n\t\t\t\t dp[i][j] = 0\n\t\t\t  else:\n\t\t\t\t dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\t    return dp[n-1][m-1]\n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    m = len(obstacleGrid)\n\t    n = len(obstacleGrid[0])\n\t    P = [[0 for j in range(n+1)] for i in range(m+1)]\n\t    \n\t    P[0][1] = 1\n\t    \n\t    for i in range(1,m+1):\n\t\t   for j in range(1, n+1):\n\t\t\t  if obstacleGrid[i-1][j-1] != 1:\n\t\t\t\t P[i][j] = P[i-1][j] + P[i][j-1]\n\t    return P[m][n]\n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    m = len(obstacleGrid)\n\t    n = len(obstacleGrid[0])\n\t    ResGrid = [[0 for x in range(n+1)] for x in range(m+1)]\n\t    ResGrid[0][1] = 1\n \n\t    for i in range(1, m+1):\n\t\t   for j in range(1, n+1):\n\t\t\t  if not obstacleGrid[i-1][j-1]:\n\t\t\t\t ResGrid[i][j] = ResGrid[i][j-1]+ResGrid[i-1][j]\n \n\t    return ResGrid[m][n]\n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    m = len(obstacleGrid)\n\t    n = len(obstacleGrid[0])\n\t    dp = [0] * n  # 这里先填充了0，这样当i==0时也可以dp[j] += dp[j-1]\n\t    for i in range(m):\n\t\t   for j in range(n):\n\t\t\t  if obstacleGrid[i][j] == 1:  # 遇到障碍物直接为0\n\t\t\t\t dp[j] = 0\n\t\t\t  else:  # 没有遇到障碍物\n\t\t\t\t if i == 0 and j == 0:  # 左上角总是为1，也为后面i!=0而j==0的情况做铺垫\n\t\t\t\t\tdp[j] = 1\n\t\t\t\t elif j != 0:  # 因为j==0时，应该为dp[j] += 0，等于不变，所以continue\n\t\t\t\t\tdp[j] += dp[j - 1]\n\t    return dp[-1]\n", "class Solution:\n\tdef paths(self,obstacleGrid,n,m,a,b,memo):\n\t    if n>a or m>b:\n\t\t   return 0\n \n\t    if obstacleGrid[n][m] == 1:\n\t\t   return 0\n \n\t    if n==a and m==b:\n\t\t   return 1\n \n\t    if str(n)+\" \"+str(m) not in memo:\n\t\t   memo[str(n)+\" \"+str(m)]=self.paths(obstacleGrid,n+1,m,a,b,memo)+self.paths(obstacleGrid,n,m+1,a,b,memo)\n \n\t    return memo[str(n)+\" \"+str(m)]\n \n\t    \n\t    \n\t    \n\t    \n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    a = len(obstacleGrid)\n\t    b= len(obstacleGrid[0])\n\t    memo = dict()\n\t    return  self.paths(obstacleGrid,0,0,a-1,b-1,memo)\n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    if not len(obstacleGrid) >0 :\n\t\t   return 0\n\t\t   \n\t    m = len(obstacleGrid)\n\t    n = len(obstacleGrid[0])\n\t    arr = [[1 for y in range(n)] for x in range(m)]\n\t    for x in range(m):\n\t\t   for y in range(n):\n\t\t\t  if x == 0:\n\t\t\t\t arr[x][y] = arr[x][y-1]\n\t\t\t  elif y == 0:\n\t\t\t\t arr[x][y] = arr[x-1][y]\n\t\t\t  else:\n\t\t\t\t arr[x][y] = arr[x-1][y] + arr[x][y-1]\n\t\t\t  if obstacleGrid[x][y] == 1:\n\t\t\t\t arr[x][y] = 0\n\t    return arr[-1][-1]\n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    # m * n\n\t    m = len(obstacleGrid)\n\t    n = len(obstacleGrid[0])\n\t    ways = [[0 for i in range(n)] for j in range(m)]\n\t    for i in range(m):\n\t\t   for j in range(n):\n\t\t\t  if obstacleGrid[i][j] == 1:\n\t\t\t\t ways[i][j] = 0\n\t\t\t  elif i == 0 and j == 0:\n\t\t\t\t ways[i][j] = 1\n\t\t\t  elif i == 0:\n\t\t\t\t ways[i][j] = ways[i][j-1]\n\t\t\t  elif j == 0:\n\t\t\t\t ways[i][j] = ways[i-1][j]\n\t\t\t  else:\n\t\t\t\t ways[i][j] = ways[i-1][j] + ways[i][j-1]\n\t    return ways[m-1][n-1]\n\t\t\t\t \n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    m, n = len(obstacleGrid), len(obstacleGrid[0])\n\t    dp = [[1] * n for _ in range(m)]\n\t    for i in range(m):\n\t\t   dp[i][0] = 0 if obstacleGrid[i][0] == 1 else dp[i-1][0]\n\t    for j in range(n):\n\t\t   dp[0][j] = 0 if obstacleGrid[0][j] == 1 else dp[0][j-1]\n\t    \n\t    for i in range(1, m):\n\t\t   for j in range(1, n):\n\t\t\t  if obstacleGrid[i][j] == 1:\n\t\t\t\t dp[i][j] = 0\n\t\t\t  else:\n\t\t\t\t dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\t    return dp[m-1][n-1]\n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    m = len(obstacleGrid)\n\t    n = len(obstacleGrid[0])\n\t    mat = [[0] * n for _ in range(m)]\n\t    if not obstacleGrid[0][0]:\n\t\t   mat[0][0] = 1\n\t    for row in range(m):\n\t\t   for col in range(n):\n\t\t\t  if col == 0 and row == 0:\n\t\t\t\t mat[row][col] = obstacleGrid[row][col] * -1 + 1\n\t\t\t  elif obstacleGrid[row][col] == 1:\n\t\t\t\t mat[row][col] == 0\n\t\t\t  else:\n\t\t\t\t mat[row][col] = mat[row - 1][col] + mat[row][col - 1]\n\t    return mat[m - 1][n - 1]\n", "class Solution:\n\tdef uniquePathsWithObstacles(self, obstacleGrid):\n\t    \"\"\"\n\t    :type obstacleGrid: List[List[int]]\n\t    :rtype: int\n\t    \"\"\"\n\t    m = len(obstacleGrid)\n\t    n = len(obstacleGrid[0])\n\t    \n\t    dp = [[0 for _ in range(n)] for _ in range(m)]\n\t    for i in range(n):\n\t\t   if obstacleGrid[0][i] == 0:\n\t\t\t  dp[0][i] = 1\n\t\t   else:\n\t\t\t  break\n\t    for j in range(m):\n\t\t   if obstacleGrid[j][0] == 0:\n\t\t\t  dp[j][0] = 1\n\t\t   else:\n\t\t\t  break\n\t    \n\t    if obstacleGrid[m-1][n-1] == 1:\n\t\t   return 0\n\t    \n\t    print(dp)\n \n\t    for y in range(1, n):\n\t\t   for x in range(1, m):\n\t\t\t  if obstacleGrid[x][y] == 1:\n\t\t\t\t dp[x][y] = 0\n\t\t\t  else: \n\t\t\t\t dp[x][y] = dp[x - 1][y] + dp[x][y - 1]\n \n\t    return dp[m - 1][n - 1]\n"], "id": "id9284"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9284", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 2], ["a", 38], ["robot", 38], ["is", 38], ["located", 35], ["at", 32], ["the", 32], ["top", 32], ["left", 32], ["corner", 32], ["of", 30], ["a", 30], ["m", 30], ["x", 30], ["n", 30], ["grid", 30], ["marked", 30], ["start", 30], ["in", 35], ["the", 35], ["diagram", 33], ["below", 33], ["the", 45], ["robot", 45], ["can", 40], ["only", 40], ["move", 40], ["either", 40], ["down", 40], ["or", 40], ["right", 40], ["at", 40], ["any", 40], ["point", 40], ["in", 40], ["time", 40], ["the", 42], ["robot", 38], ["is", 34], ["trying", 34], ["to", 34], ["reach", 34], ["the", 34], ["bottom", 7], ["right", 7], ["corner", 7], ["of", 7], ["the", 7], ["grid", 7], ["marked", 7], ["finish", 7], ["in", 8], ["the", 8], ["diagram", 8], ["below", 8], ["now", 20], ["consider", 20], ["if", 19], ["some", 19], ["obstacles", 19], ["are", 16], ["added", 16], ["to", 16], ["the", 14], ["grids", 14], ["how", 14], ["many", 14], ["unique", 14], ["paths", 14], ["would", 14], ["there", 15], ["be", 15], ["an", 20], ["obstacle", 20], ["and", 20], ["empty", 3], ["space", 3], ["is", 3], ["marked", 3], ["as", 3], ["1", 3], ["and", 3], ["0", 3], ["respectively", 3], ["in", 3], ["the", 2], ["grid", 2], ["note", 1], ["m", 1], ["and", 1], ["n", 1], ["will", 1], ["be", 1], ["at", 1], ["most", 1], ["100", 1], ["example", 3], ["1", 1], ["input", 1], ["0", 4], ["0", 4], ["0", 4], ["0", 4], ["1", 4], ["0", 4], ["0", 4], ["0", 4], ["0", 4], ["output", 5], ["2", 5], ["explanation", 5], ["there", 5], ["is", 5], ["one", 5], ["obstacle", 5], ["in", 5], ["the", 5], ["middle", 5], ["of", 5], ["the", 5], ["3x3", 5], ["grid", 5], ["above", 5], ["there", 5], ["are", 5], ["two", 5], ["ways", 5], ["to", 5], ["reach", 5], ["the", 5], ["bottom", 5], ["right", 1], ["corner", 1], ["1", 1], ["right", 1], ["right", 1], ["down", 1], ["down", 1], ["2", 1], ["down", 1], ["down", 1], ["right", 0], ["right", 0], ["class", 0], ["solution", 0], ["def", 0], ["uniquepathswithobstacles", 0], ["self", 0], ["obstaclegrid", 0], ["list", 0], ["list", 0], ["int", 0], ["int", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9337748344370861, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.24555009829380367, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9386503067484663, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6717791411042945, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5231788079470199, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.22953327026174697, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9386503067484663, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6717791411042945, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["class", 0], ["solution", 0], ["def", 1], ["uniquepathswithobstacles", 1], ["self", 0], ["obstaclegrid", 0], ["type", 0], ["obstaclegrid", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["m", 0], ["len", 0], ["obstaclegrid", 0], ["row", 0], ["n", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["col", 0], ["path", 0], ["0", 2], ["for", 2], ["j", 2], ["in", 2], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["0", 0], ["0", 0], ["path", 0], ["i", 0], ["0", 0], ["1", 0], ["else", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["obstaclegrid", 0], ["0", 0], ["i", 0], ["0", 0], ["path", 0], ["0", 0], ["i", 0], ["1", 0], ["else", 0], ["break", 0], ["for", 3], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["path", 0], ["i", 0], ["j", 0], ["path", 0], ["i", 0], ["1", 0], ["j", 0], ["path", 0], ["i", 0], ["j", 0], ["1", 0], ["else", 0], ["path", 0], ["i", 0], ["j", 0], ["0", 0], ["return", 0], ["path", 0], ["m", 0], ["1", 0], ["n", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["uniquepathswithobstacles", 0], ["self", 0], ["obstaclegrid", 0], ["type", 0], ["obstaclegrid", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["if", 0], ["not", 0], ["obstaclegrid", 0], ["or", 0], ["not", 0], ["obstaclegrid", 0], ["0", 0], ["return", 0], ["0", 0], ["m", 0], ["n", 0], ["len", 0], ["obstaclegrid", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["dp", 0], ["dp", 0], ["i", 0], ["j", 0], ["no", 0], ["of", 0], ["unique", 0], ["paths", 0], ["to", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["bound", 0], ["dp", 0], ["0", 0], ["0", 0], ["0", 0], ["if", 0], ["obstaclegrid", 0], ["0", 0], ["0", 0], ["1", 0], ["else", 0], ["1", 0], ["dp", 0], ["1", 0], ["0", 0], ["dp", 0], ["1", 0], ["0", 0], ["progress", 0], ["dp", 0], ["i", 0], ["j", 0], ["0", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["else", 0], ["dp", 0], ["0", 0], ["n", 0], ["for", 1], ["i", 1], ["in", 1], ["range", 1], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["dp", 0], ["j", 0], ["0", 0], ["else", 0], ["if", 0], ["i", 0], ["0", 0], ["if", 0], ["j", 0], ["0", 0], ["dp", 0], ["j", 0], ["1", 0], ["else", 0], ["dp", 2], ["j", 0], ["dp", 0], ["j", 0], ["1", 0], ["else", 0], ["if", 0], ["j", 0], ["0", 0], ["dp", 0], ["j", 0], ["dp", 0], ["j", 0], ["dp", 0], ["j", 0], ["1", 0], ["return", 0], ["dp", 0], ["n", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["uniquepathswithobstacles", 0], ["self", 0], ["obstaclegrid", 0], ["type", 0], ["obstaclegrid", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["if", 0], ["not", 0], ["obstaclegrid", 0], ["return", 0], ["0", 0], ["if", 0], ["obstaclegrid", 0], ["1", 0], ["1", 0], ["1", 0], ["return", 0], ["0", 0], ["dp", 0], ["for", 0], ["each", 0], ["in", 0], ["obstaclegrid", 0], ["temp", 0], ["each", 0], ["dp", 0], ["append", 0], ["temp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["dp", 0], ["0", 0], ["if", 0], ["obstaclegrid", 0], ["0", 0], ["i", 0], ["1", 0], ["dp", 0], ["0", 0], ["i", 0], ["0", 0], ["break", 0], ["else", 0], ["dp", 0], ["0", 0], ["i", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["dp", 0], ["if", 0], ["obstaclegrid", 0], ["j", 0], ["0", 0], ["1", 0], ["break", 0], ["else", 0], ["dp", 0], ["j", 0], ["0", 0], ["1", 0], ["print", 0], ["dp", 0], ["obstaclegrid", 0], ["for", 0], ["row", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["obstaclegrid", 0], ["for", 0], ["col", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["if", 0], ["obstaclegrid", 0], ["row", 0], ["col", 0], ["0", 0], ["if", 0], ["obstaclegrid", 0], ["row", 0], ["1", 0], ["col", 0], ["1", 0], ["dp", 0], ["row", 0], ["col", 0], ["dp", 0], ["row", 0], ["1", 0], ["col", 0], ["if", 0], ["obstaclegrid", 0], ["row", 0], ["col", 0], ["1", 0], ["1", 0], ["dp", 0], ["row", 0], ["col", 0], ["dp", 0], ["row", 0], ["col", 0], ["1", 0], ["print", 0], ["dp", 0], ["return", 0], ["dp", 0], ["1", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["paths", 0], ["self", 0], ["obstaclegrid", 0], ["n", 0], ["m", 0], ["a", 0], ["b", 0], ["memo", 0], ["if", 0], ["n", 0], ["a", 0], ["or", 0], ["m", 0], ["b", 0], ["return", 0], ["0", 0], ["if", 0], ["obstaclegrid", 0], ["n", 0], ["m", 0], ["1", 0], ["return", 0], ["0", 0], ["if", 0], ["n", 0], ["a", 0], ["and", 0], ["m", 0], ["b", 0], ["return", 0], ["1", 0], ["if", 0], ["str", 0], ["n", 0], ["str", 0], ["m", 0], ["not", 0], ["in", 0], ["memo", 0], ["memo", 0], ["str", 0], ["n", 0], ["str", 0], ["m", 0], ["self", 0], ["paths", 0], ["obstaclegrid", 0], ["n", 0], ["1", 0], ["m", 0], ["a", 0], ["b", 0], ["memo", 0], ["self", 0], ["paths", 0], ["obstaclegrid", 0], ["n", 0], ["m", 0], ["1", 0], ["a", 0], ["b", 0], ["memo", 0], ["return", 0], ["memo", 0], ["str", 0], ["n", 0], ["str", 0], ["m", 0], ["def", 0], ["uniquepathswithobstacles", 0], ["self", 0], ["obstaclegrid", 0], ["type", 0], ["obstaclegrid", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["a", 0], ["len", 0], ["obstaclegrid", 0], ["b", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["memo", 0], ["dict", 0], ["return", 0], ["self", 0], ["paths", 0], ["obstaclegrid", 0], ["0", 0], ["0", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["memo", 0], ["class", 0], ["solution", 0], ["def", 0], ["uniquepathswithobstacles", 0], ["self", 0], ["obstaclegrid", 0], ["type", 0], ["obstaclegrid", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["if", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["and", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["0", 0], ["return", 0], ["1", 0], ["if", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["return", 0], ["0", 0], ["ob", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["obstaclegrid", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["obstaclegrid", 0], ["i", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["none", 0], ["ob", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["obstaclegrid", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["0", 0], ["0", 0], ["obstaclegrid", 0], ["i", 0], ["0", 0], ["1", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["0", 0], ["none", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["if", 0], ["obstaclegrid", 0], ["0", 0], ["i", 0], ["0", 0], ["obstaclegrid", 0], ["0", 0], ["i", 0], ["1", 0], ["if", 0], ["obstaclegrid", 0], ["0", 0], ["i", 0], ["none", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["obstaclegrid", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["obstaclegrid", 0], ["i", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["none", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["1", 0], ["j", 0], ["none", 0], ["and", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["none", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["none", 0], ["elif", 0], ["obstaclegrid", 0], ["i", 0], ["1", 0], ["j", 0], ["none", 0], ["and", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["none", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["elif", 0], ["obstaclegrid", 0], ["i", 0], ["1", 0], ["j", 0], ["none", 0], ["and", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["none", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["obstaclegrid", 0], ["i", 0], ["1", 0], ["j", 0], ["else", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["obstaclegrid", 0], ["i", 0], ["1", 0], ["j", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["len", 0], ["obstaclegrid", 0], ["1", 0], ["or", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["1", 0], ["if", 0], ["ob", 0], ["return", 0], ["0", 0], ["else", 0], ["return", 0], ["1", 0], ["if", 0], ["obstaclegrid", 0], ["1", 0], ["1", 0], ["none", 0], ["or", 0], ["obstaclegrid", 0], ["0", 0], ["0", 0], ["none", 0], ["return", 0], ["0", 0], ["return", 0], ["obstaclegrid", 0], ["1", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["uniquepathswithobstacles", 0], ["self", 0], ["obstaclegrid", 0], ["type", 0], ["obstaclegrid", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["if", 0], ["not", 0], ["any", 0], ["obstaclegrid", 0], ["return", 0], ["0", 0], ["n", 0], ["m", 0], ["len", 0], ["obstaclegrid", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["dp", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["or", 0], ["j", 0], ["0", 0], ["else", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["set", 0], ["first", 0], ["column", 0], ["of", 0], ["dp", 0], ["obs", 0], ["false", 0], ["first", 0], ["col", 0], ["i", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["obstaclegrid", 0], ["try", 0], ["idx", 0], ["first", 0], ["col", 0], ["index", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dp", 0], ["i", 0], ["0", 0], ["1", 0], ["if", 0], ["i", 0], ["idx", 0], ["else", 0], ["0", 0], ["except", 0], ["valueerror", 0], ["pass", 0], ["set", 0], ["first", 0], ["row", 0], ["of", 0], ["dp", 0], ["try", 0], ["first", 0], ["row", 0], ["obstaclegrid", 0], ["0", 0], ["idx", 0], ["first", 0], ["row", 0], ["index", 0], ["1", 0], ["dp", 0], ["0", 0], ["1", 0], ["idx", 0], ["0", 0], ["m", 0], ["idx", 0], ["except", 0], ["valueerror", 0], ["pass", 0], ["print", 0], ["obstaclegrid", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["print", 0], ["i", 0], ["j", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["dp", 0], ["i", 0], ["j", 0], ["0", 0], ["else", 1], ["dp", 4], ["i", 0], ["j", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["return", 0], ["dp", 0], ["n", 0], ["1", 0], ["m", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 1], ["uniquepathswithobstacles", 1], ["self", 1], ["obstaclegrid", 1], ["type", 1], ["obstaclegrid", 1], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["m", 0], ["len", 0], ["obstaclegrid", 0], ["n", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["p", 0], ["0", 1], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["p", 0], ["0", 0], ["1", 0], ["1", 6], ["for", 13], ["i", 13], ["in", 7], ["range", 1], ["1", 1], ["m", 1], ["1", 1], ["for", 1], ["j", 1], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["1", 0], ["p", 0], ["i", 0], ["j", 0], ["p", 0], ["i", 0], ["1", 0], ["j", 0], ["p", 0], ["i", 0], ["j", 0], ["1", 0], ["return", 0], ["p", 0], ["m", 0], ["n", 0], ["class", 0], ["solution", 0], ["def", 1], ["uniquepathswithobstacles", 1], ["self", 1], ["obstaclegrid", 1], ["type", 1], ["obstaclegrid", 1], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["m", 0], ["len", 0], ["obstaclegrid", 0], ["n", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["resgrid", 0], ["0", 1], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["resgrid", 0], ["0", 0], ["1", 0], ["1", 6], ["for", 13], ["i", 13], ["in", 7], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["not", 0], ["obstaclegrid", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["resgrid", 0], ["i", 0], ["j", 0], ["resgrid", 0], ["i", 0], ["j", 0], ["1", 0], ["resgrid", 0], ["i", 0], ["1", 0], ["j", 0], ["return", 0], ["resgrid", 0], ["m", 0], ["n", 0], ["class", 0], ["solution", 0], ["def", 1], ["uniquepathswithobstacles", 1], ["self", 1], ["obstaclegrid", 1], ["type", 1], ["obstaclegrid", 1], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["m", 0], ["len", 0], ["obstaclegrid", 0], ["n", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["dp", 0], ["0", 0], ["n", 0], ["这里先填充了0，这样当i", 0], ["0时也可以dp", 0], ["j", 0], ["dp", 0], ["j", 0], ["1", 0], ["for", 1], ["i", 1], ["in", 1], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["遇到障碍物直接为0", 0], ["dp", 0], ["j", 0], ["0", 0], ["else", 0], ["没有遇到障碍物", 0], ["if", 0], ["i", 0], ["0", 0], ["and", 0], ["j", 0], ["0", 0], ["左上角总是为1，也为后面i", 0], ["0而j", 0], ["0的情况做铺垫", 0], ["dp", 0], ["j", 0], ["1", 0], ["elif", 0], ["j", 0], ["0", 0], ["因为j", 0], ["0时，应该为dp", 0], ["j", 0], ["0，等于不变，所以continue", 0], ["dp", 0], ["j", 0], ["dp", 0], ["j", 0], ["1", 0], ["return", 0], ["dp", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["paths", 0], ["self", 0], ["obstaclegrid", 0], ["n", 0], ["m", 0], ["a", 0], ["b", 0], ["memo", 0], ["if", 0], ["n", 0], ["a", 0], ["or", 0], ["m", 0], ["b", 0], ["return", 0], ["0", 0], ["if", 0], ["obstaclegrid", 0], ["n", 0], ["m", 0], ["1", 0], ["return", 0], ["0", 0], ["if", 0], ["n", 0], ["a", 0], ["and", 0], ["m", 0], ["b", 0], ["return", 0], ["1", 0], ["if", 0], ["str", 0], ["n", 0], ["str", 0], ["m", 0], ["not", 0], ["in", 0], ["memo", 0], ["memo", 0], ["str", 0], ["n", 0], ["str", 0], ["m", 0], ["self", 0], ["paths", 0], ["obstaclegrid", 0], ["n", 0], ["1", 0], ["m", 0], ["a", 0], ["b", 0], ["memo", 0], ["self", 0], ["paths", 0], ["obstaclegrid", 0], ["n", 0], ["m", 0], ["1", 0], ["a", 0], ["b", 0], ["memo", 0], ["return", 0], ["memo", 0], ["str", 0], ["n", 0], ["str", 0], ["m", 0], ["def", 0], ["uniquepathswithobstacles", 0], ["self", 0], ["obstaclegrid", 0], ["type", 0], ["obstaclegrid", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["a", 0], ["len", 0], ["obstaclegrid", 0], ["b", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["memo", 0], ["dict", 0], ["return", 0], ["self", 0], ["paths", 0], ["obstaclegrid", 0], ["0", 0], ["0", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["memo", 0], ["class", 0], ["solution", 0], ["def", 0], ["uniquepathswithobstacles", 0], ["self", 0], ["obstaclegrid", 0], ["type", 0], ["obstaclegrid", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["if", 0], ["not", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["return", 0], ["0", 0], ["m", 0], ["len", 0], ["obstaclegrid", 0], ["n", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["arr", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["x", 0], ["0", 0], ["arr", 0], ["x", 0], ["y", 0], ["arr", 0], ["x", 0], ["y", 0], ["1", 0], ["elif", 0], ["y", 0], ["0", 0], ["arr", 1], ["x", 0], ["y", 0], ["arr", 0], ["x", 0], ["1", 0], ["y", 0], ["else", 0], ["arr", 0], ["x", 0], ["y", 0], ["arr", 0], ["x", 0], ["1", 0], ["y", 0], ["arr", 0], ["x", 0], ["y", 0], ["1", 0], ["if", 0], ["obstaclegrid", 0], ["x", 0], ["y", 0], ["1", 0], ["arr", 0], ["x", 0], ["y", 0], ["0", 0], ["return", 0], ["arr", 0], ["1", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["uniquepathswithobstacles", 0], ["self", 0], ["obstaclegrid", 0], ["type", 0], ["obstaclegrid", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["m", 0], ["n", 0], ["m", 0], ["len", 0], ["obstaclegrid", 0], ["n", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["ways", 0], ["0", 1], ["for", 1], ["i", 1], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 4], ["range", 2], ["m", 1], ["for", 1], ["i", 1], ["in", 1], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["ways", 0], ["i", 0], ["j", 0], ["0", 0], ["elif", 0], ["i", 0], ["0", 0], ["and", 0], ["j", 0], ["0", 0], ["ways", 0], ["i", 0], ["j", 0], ["1", 0], ["elif", 0], ["i", 0], ["0", 0], ["ways", 0], ["i", 0], ["j", 0], ["ways", 0], ["i", 0], ["j", 0], ["1", 0], ["elif", 0], ["j", 0], ["0", 0], ["ways", 0], ["i", 0], ["j", 0], ["ways", 0], ["i", 0], ["1", 0], ["j", 0], ["else", 0], ["ways", 0], ["i", 0], ["j", 0], ["ways", 0], ["i", 0], ["1", 0], ["j", 0], ["ways", 0], ["i", 0], ["j", 0], ["1", 0], ["return", 0], ["ways", 0], ["m", 0], ["1", 0], ["n", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 0], ["uniquepathswithobstacles", 0], ["self", 0], ["obstaclegrid", 0], ["type", 0], ["obstaclegrid", 0], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["m", 0], ["n", 0], ["len", 0], ["obstaclegrid", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["dp", 0], ["1", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["dp", 0], ["i", 0], ["0", 0], ["0", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["0", 0], ["1", 0], ["else", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["dp", 0], ["0", 0], ["j", 0], ["0", 0], ["if", 0], ["obstaclegrid", 0], ["0", 0], ["j", 0], ["1", 0], ["else", 0], ["dp", 0], ["0", 1], ["j", 1], ["1", 2], ["for", 3], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["obstaclegrid", 0], ["i", 0], ["j", 0], ["1", 0], ["dp", 0], ["i", 0], ["j", 0], ["0", 0], ["else", 1], ["dp", 4], ["i", 3], ["j", 3], ["dp", 3], ["i", 3], ["1", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["return", 0], ["dp", 0], ["m", 0], ["1", 0], ["n", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 1], ["uniquepathswithobstacles", 1], ["self", 1], ["obstaclegrid", 1], ["type", 1], ["obstaclegrid", 1], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["m", 0], ["len", 0], ["obstaclegrid", 0], ["n", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["mat", 0], ["0", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["not", 0], ["obstaclegrid", 0], ["0", 0], ["0", 0], ["mat", 0], ["0", 0], ["0", 0], ["1", 0], ["for", 0], ["row", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["col", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["col", 0], ["0", 0], ["and", 0], ["row", 0], ["0", 0], ["mat", 0], ["row", 0], ["col", 0], ["obstaclegrid", 0], ["row", 0], ["col", 0], ["1", 0], ["1", 0], ["elif", 0], ["obstaclegrid", 0], ["row", 0], ["col", 0], ["1", 0], ["mat", 0], ["row", 0], ["col", 0], ["0", 0], ["else", 0], ["mat", 0], ["row", 0], ["col", 0], ["mat", 0], ["row", 0], ["1", 0], ["col", 0], ["mat", 0], ["row", 0], ["col", 0], ["1", 0], ["return", 0], ["mat", 0], ["m", 0], ["1", 0], ["n", 0], ["1", 0], ["class", 0], ["solution", 0], ["def", 1], ["uniquepathswithobstacles", 1], ["self", 1], ["obstaclegrid", 1], ["type", 1], ["obstaclegrid", 1], ["list", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["m", 0], ["len", 0], ["obstaclegrid", 0], ["n", 0], ["len", 0], ["obstaclegrid", 0], ["0", 0], ["dp", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["obstaclegrid", 0], ["0", 0], ["i", 0], ["0", 0], ["dp", 0], ["0", 0], ["i", 0], ["1", 0], ["else", 0], ["break", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["obstaclegrid", 0], ["j", 0], ["0", 0], ["0", 0], ["dp", 0], ["j", 0], ["0", 0], ["1", 0], ["else", 0], ["break", 0], ["if", 0], ["obstaclegrid", 0], ["m", 0], ["1", 0], ["n", 0], ["1", 0], ["1", 0], ["return", 0], ["0", 0], ["print", 0], ["dp", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["if", 0], ["obstaclegrid", 0], ["x", 0], ["y", 0], ["1", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["else", 0], ["dp", 0], ["x", 0], ["y", 0], ["dp", 0], ["x", 0], ["1", 0], ["y", 0], ["dp", 0], ["x", 0], ["y", 0], ["1", 0], ["return", 0], ["dp", 0], ["m", 0], ["1", 0], ["n", 0], ["1", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.050030138637733576, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.039889535820819735, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.19628964691801318, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.17245162577299014, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.047619047619047616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.03970406728092081, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.19628964691801318, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.17245162577299014, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nConsider the set of all nonnegative integers: ${0, 1, 2, \\dots}$. Given two integers $a$ and $b$ ($1 \\le a, b \\le 10^4$). We paint all the numbers in increasing number first we paint $0$, then we paint $1$, then $2$ and so on.\n\nEach number is painted white or black. We paint a number $i$ according to the following rules:   if $i = 0$, it is colored white;   if $i \\ge a$ and $i - a$ is colored white, $i$ is also colored white;   if $i \\ge b$ and $i - b$ is colored white, $i$ is also colored white;   if $i$ is still not colored white, it is colored black. \n\nIn this way, each nonnegative integer gets one of two colors.\n\nFor example, if $a=3$, $b=5$, then the colors of the numbers (in the order from $0$) are: white ($0$), black ($1$), black ($2$), white ($3$), black ($4$), white ($5$), white ($6$), black ($7$), white ($8$), white ($9$), ...\n\nNote that:   It is possible that there are infinitely many nonnegative integers colored black. For example, if $a = 10$ and $b = 10$, then only $0, 10, 20, 30$ and any other nonnegative integers that end in $0$ when written in base 10 are white. The other integers are colored black.   It is also possible that there are only finitely many nonnegative integers colored black. For example, when $a = 1$ and $b = 10$, then there is no nonnegative integer colored black at all. \n\nYour task is to determine whether or not the number of nonnegative integers colored black is infinite.\n\nIf there are infinitely many nonnegative integers colored black, simply print a line containing \"Infinite\" (without the quotes). Otherwise, print \"Finite\" (without the quotes).\n\n\n-----Input-----\n\nThe first line of input contains a single integer $t$ ($1 \\le t \\le 100$) — the number of test cases in the input. Then $t$ lines follow, each line contains two space-separated integers $a$ and $b$ ($1 \\le a, b \\le 10^4$).\n\n\n-----Output-----\n\nFor each test case, print one line containing either \"Infinite\" or \"Finite\" (without the quotes). Output is case-insensitive (i.e. \"infinite\", \"inFiNite\" or \"finiTE\" are all valid answers).\n\n\n-----Example-----\nInput\n4\n10 10\n1 10\n6 9\n7 3\n\nOutput\nInfinite\nFinite\nInfinite\nFinite\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from math import gcd\n\nn = int(input())\nfor i in range(n):\n\ta, b = list(map(int, input().split()))\n\tg = gcd(a, b)\n\tif g == 1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "from math import gcd\nfor TT in range(1, int(input()) + 1):\n\ta, b = map(int, input().split())\n\tprint(['Infinite', 'Finite'][gcd(a, b) == 1])\n", "from math import  gcd\n\nt=int(input())\nfor i in range(t):\n\ta, b=map(int, input().split())\n\tif gcd(a, b) == 1:\n\t\tprint('Finite')\n\telse:\n\t\tprint('Infinite')\n", "# import sys\n# input = sys.stdin.readline\nn = int(input())\n\ndef gcd(x,y):\n\twhile x != 0 and y != 0:\n\t\tx,y = max(x,y),min(x,y)\n\t\tx %= y\n\treturn y\nfor i in range(n):\n\ta, b = map(int,input().split())\n\tif gcd(a,b) == 1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "def gcd(a, b):\n\treturn a if b == 0 else gcd(b, a % b)\n\nfor _ in range(int(input())):\n\ta, b = list(map(int, input().split()))\n\tif gcd(a, b) == 1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "from math import gcd\n\nt = int(input())\nfor i in range(t):\n\ta, b = map(int, input().split())\n\tif gcd(a, b) > 1:\n\t\tprint('Infinite')\n\telse:\n\t\tprint('Finite')\n", "from math import gcd\n\nt = int(input())\n\nfor _ in range(t):\n\ta, b = list(map(int,input().split()))\n\tif gcd(a, b)==1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "def gcd(a,b):\n\tif a == 0:\n\t\treturn b\n\treturn gcd(b%a, a)\nn = int(input())\nfor eq in range(n):\n\ta, b = map(int,input().split())\n\tif gcd(a,b) == 1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "from math import *\n\nq = int(input())\n\nfor i in range(q):\n\ta, b = map(int, input().split())\n\t\n\tif gcd(a, b) == 1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "from math import gcd\n\n\nt = int(input())\nfor i in range(t):\n\ta, b = map(int, input().split())\n\tif gcd(a, b) == 1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "from math import *\nfrom collections import *\ndef gcd(a,b):  \n\tif (b == 0): \n\t\t return a \n\treturn gcd(b, a%b) \n\nt = int(input())\nfor y in range(t):\n\ta,b = list(map(int,input().split()))\n\tif(gcd(a,b) == 1): print(\"Finite\")\n\telse: print(\"Infinite\")\n", "import math\n\nn, = list(map(int, input().split()))\nfor _ in range(n):\n\ta, b = list(map(int, input().split()))\n\tif math.gcd(a, b) == 1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "import math\nfor _ in range(int(input())):\n\ta,b=map(int,input().split())\n\tif math.gcd(a,b)==1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "from math import *\nt = int(input())\nfor i in range(t):\n\ta, b = map(int, input().split())\n\tif gcd(a, b) > 1:\n\t\tprint('Infinite')\n\telse:\n\t\tprint('Finite')\n", "from math import *\nfor _ in range(int(input())):\n\ta,b=map(int,input().split())\n\tx=gcd(a,b)\n\tif(x!=1 and a%x==0 and b%x==0):\n\t\tprint(\"Infinite\")\n\telse:\n\t\tprint('Finite')\n", "from math import gcd\n\nfor _ in range(int(input())):\n\ta, b = map(int, input().split())\n\tprint(['Infinite', 'Finite'][gcd(a, b) == 1])\n", "import sys\ninput = sys.stdin.readline\n\nimport math\n\nt=int(input())\n\nfor test in range(t):\n\ta,b=list(map(int,input().split()))\n\tk=math.gcd(a,b)\n\n\tif k!=1:\n\t\tprint(\"Infinite\")\n\telse:\n\t\tprint(\"Finite\")\n\t\n", "from math import gcd\nfor i in range(int(input())):\n\ta,b=map(int,input().split())\n\tif gcd(a,b)==1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "def gcd(a, b):\n\twhile b != 0:\n\t\ta,b = b, a%b\n\treturn a\nn = int(input())\nfor i in range(n):\n\ta,b = list(map(int,input().split()))\n\tif gcd(a, b) == 1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "def gcd(a,b):\n\tif b==0:\n\t\treturn a \n\treturn gcd(b,a%b)\nfor _ in range(int(input())):\n\ta,b=map(int,input().split())\n\tprint(\"Finite\" if gcd(a,b)==1 else 'Infinite')\n", "from math import gcd\n\nfor __ in range(int(input())):\n\ta, b = list(map(int, input().split()))\n\tif gcd(a, b) == 1:\n\t\tprint('Finite')\n\telse:\n\t\tprint('Infinite')\n", "t=int(input())\ndef yin(a,b):\n\tif a%b==0:\n\t\treturn b\n\treturn yin(b,a%b)\nfor i in range(0,t):\n\ta,b=map(int,input().split())\n\tj=yin(max(a,b),min(a,b))\n\tif j==1:\n\t\tprint('Finite')\n\telse:\n\t\tprint('Infinite')\n", "import math\n\nt = int(input())\nfor test in range(t):\n\ta,b = map(int, input().split(\" \"))\n\tif math.gcd(a,b) == 1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n", "from math import*\nq=int(input())\nfor t in range(q):\n\ta,b=map(int,input().split())\n\tc=gcd(a,b)\n\tif c==1:\n\t\tprint(\"Finite\")\n\telse:\n\t\tprint(\"Infinite\")\n"], "id": "id8343"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8343", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["consider", 4], ["the", 4], ["set", 4], ["of", 4], ["all", 4], ["nonnegative", 4], ["integers", 4], ["0", 4], ["1", 4], ["2", 4], ["dots", 4], ["given", 4], ["two", 4], ["integers", 4], ["a", 4], ["and", 4], ["b", 4], ["1", 4], ["le", 4], ["a", 4], ["b", 4], ["le", 4], ["10", 4], ["4", 4], ["we", 4], ["paint", 4], ["all", 4], ["the", 4], ["numbers", 4], ["in", 4], ["increasing", 4], ["number", 4], ["first", 4], ["we", 4], ["paint", 4], ["0", 4], ["then", 4], ["we", 4], ["paint", 4], ["1", 4], ["then", 4], ["2", 4], ["and", 4], ["so", 4], ["on", 4], ["each", 4], ["number", 4], ["is", 4], ["painted", 4], ["white", 4], ["or", 4], ["black", 4], ["we", 4], ["paint", 4], ["a", 4], ["number", 4], ["i", 4], ["according", 4], ["to", 4], ["the", 4], ["following", 4], ["rules", 4], ["if", 4], ["i", 4], ["0", 4], ["it", 4], ["is", 4], ["colored", 4], ["white", 4], ["if", 4], ["i", 4], ["ge", 4], ["a", 4], ["and", 4], ["i", 4], ["a", 4], ["is", 4], ["colored", 4], ["white", 4], ["i", 4], ["is", 4], ["also", 4], ["colored", 4], ["white", 4], ["if", 4], ["i", 4], ["ge", 4], ["b", 4], ["and", 4], ["i", 4], ["b", 4], ["is", 4], ["colored", 4], ["white", 4], ["i", 4], ["is", 4], ["also", 4], ["colored", 4], ["white", 4], ["if", 4], ["i", 4], ["is", 4], ["still", 4], ["not", 4], ["colored", 4], ["white", 4], ["it", 4], ["is", 4], ["colored", 4], ["black", 4], ["in", 4], ["this", 4], ["way", 4], ["each", 4], ["nonnegative", 4], ["integer", 4], ["gets", 4], ["one", 4], ["of", 4], ["two", 4], ["colors", 4], ["for", 4], ["example", 4], ["if", 4], ["a", 4], ["3", 4], ["b", 4], ["5", 4], ["then", 4], ["the", 4], ["colors", 4], ["of", 4], ["the", 4], ["numbers", 4], ["in", 4], ["the", 4], ["order", 4], ["from", 4], ["0", 4], ["are", 4], ["white", 4], ["0", 4], ["black", 4], ["1", 5], ["black", 5], ["2", 5], ["white", 4], ["3", 4], ["black", 2], ["4", 2], ["white", 2], ["5", 2], ["white", 2], ["6", 2], ["black", 2], ["7", 2], ["white", 2], ["8", 2], ["white", 2], ["9", 2], ["note", 2], ["that", 2], ["it", 4], ["is", 4], ["possible", 4], ["that", 4], ["there", 4], ["are", 4], ["infinitely", 4], ["many", 4], ["nonnegative", 4], ["integers", 4], ["colored", 4], ["black", 4], ["for", 4], ["example", 4], ["if", 4], ["a", 4], ["10", 4], ["and", 4], ["b", 4], ["10", 4], ["then", 4], ["only", 4], ["0", 4], ["10", 4], ["20", 4], ["30", 4], ["and", 4], ["any", 4], ["other", 4], ["nonnegative", 4], ["integers", 4], ["that", 4], ["end", 4], ["in", 4], ["0", 4], ["when", 4], ["written", 4], ["in", 4], ["base", 4], ["10", 4], ["are", 4], ["white", 4], ["the", 4], ["other", 4], ["integers", 4], ["are", 4], ["colored", 4], ["black", 4], ["it", 4], ["is", 4], ["also", 4], ["possible", 4], ["that", 4], ["there", 4], ["are", 4], ["only", 4], ["finitely", 4], ["many", 4], ["nonnegative", 4], ["integers", 4], ["colored", 4], ["black", 4], ["for", 4], ["example", 4], ["when", 4], ["a", 4], ["1", 4], ["and", 4], ["b", 4], ["10", 4], ["then", 4], ["there", 4], ["is", 4], ["no", 4], ["nonnegative", 4], ["integer", 4], ["colored", 4], ["black", 4], ["at", 4], ["all", 4], ["your", 4], ["task", 4], ["is", 4], ["to", 4], ["determine", 4], ["whether", 4], ["or", 4], ["not", 4], ["the", 4], ["number", 4], ["of", 4], ["nonnegative", 4], ["integers", 4], ["colored", 4], ["black", 4], ["is", 4], ["infinite", 4], ["if", 4], ["there", 4], ["are", 4], ["infinitely", 4], ["many", 4], ["nonnegative", 4], ["integers", 4], ["colored", 4], ["black", 4], ["simply", 4], ["print", 4], ["a", 4], ["line", 0], ["containing", 0], ["infinite", 0], ["without", 0], ["the", 0], ["quotes", 0], ["otherwise", 0], ["print", 0], ["finite", 0], ["without", 0], ["the", 0], ["quotes", 0], ["input", 0], ["the", 4], ["first", 4], ["line", 4], ["of", 4], ["input", 4], ["contains", 12], ["a", 12], ["single", 8], ["integer", 18], ["t", 16], ["1", 16], ["le", 16], ["t", 16], ["le", 16], ["100", 4], ["—", 4], ["the", 4], ["number", 4], ["of", 4], ["test", 4], ["cases", 4], ["in", 4], ["the", 4], ["input", 4], ["then", 4], ["t", 4], ["lines", 4], ["follow", 4], ["each", 4], ["line", 4], ["contains", 6], ["two", 4], ["space", 4], ["separated", 0], ["integers", 0], ["a", 0], ["and", 0], ["b", 0], ["1", 0], ["le", 0], ["a", 0], ["b", 0], ["le", 0], ["10", 0], ["4", 0], ["output", 0], ["for", 4], ["each", 4], ["test", 4], ["case", 4], ["print", 4], ["one", 4], ["line", 4], ["containing", 4], ["either", 4], ["infinite", 4], ["or", 4], ["finite", 4], ["without", 4], ["the", 4], ["quotes", 4], ["output", 4], ["is", 4], ["case", 0], ["insensitive", 0], ["i", 0], ["e", 0], ["infinite", 0], ["infinite", 0], ["or", 0], ["finite", 0], ["are", 0], ["all", 0], ["valid", 0], ["answers", 0], ["example", 0], ["input", 0], ["4", 0], ["10", 0], ["10", 0], ["1", 0], ["10", 0], ["6", 0], ["9", 0], ["7", 0], ["3", 0], ["output", 0], ["infinite", 0], ["finite", 0], ["infinite", 0], ["finite", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8582887700534759, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.21905451574569224, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9248704663212435, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.31865284974093266, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8368983957219251, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.21762477718360074, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9248704663212435, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.31865284974093266, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["gcd", 0], ["a", 0], ["b", 0], ["if", 0], ["g", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["for", 0], ["tt", 0], ["in", 0], ["range", 0], ["1", 0], ["int", 0], ["input", 0], ["1", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["infinite", 0], ["finite", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["def", 0], ["gcd", 0], ["x", 0], ["y", 0], ["while", 0], ["x", 0], ["0", 0], ["and", 0], ["y", 0], ["0", 0], ["x", 0], ["y", 0], ["max", 0], ["x", 0], ["y", 0], ["min", 0], ["x", 0], ["y", 0], ["x", 0], ["y", 0], ["return", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["def", 1], ["gcd", 1], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["if", 0], ["b", 0], ["0", 0], ["else", 0], ["gcd", 0], ["b", 0], ["a", 0], ["b", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["infinite", 0], ["else", 0], ["print", 0], ["finite", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["def", 0], ["gcd", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["0", 0], ["return", 0], ["b", 0], ["return", 0], ["gcd", 0], ["b", 0], ["a", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["eq", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["from", 0], ["math", 0], ["import", 0], ["q", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["from", 0], ["math", 0], ["import", 0], ["from", 0], ["collections", 0], ["import", 0], ["def", 20], ["gcd", 28], ["a", 0], ["b", 0], ["if", 0], ["b", 0], ["0", 0], ["return", 0], ["a", 0], ["return", 0], ["gcd", 0], ["b", 0], ["a", 0], ["b", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["import", 0], ["math", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["math", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["import", 0], ["math", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["math", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["from", 0], ["math", 0], ["import", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["infinite", 0], ["else", 0], ["print", 0], ["finite", 0], ["from", 0], ["math", 0], ["import", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["gcd", 0], ["a", 0], ["b", 0], ["if", 0], ["x", 0], ["1", 0], ["and", 0], ["a", 0], ["x", 0], ["0", 0], ["and", 0], ["b", 0], ["x", 0], ["0", 0], ["print", 0], ["infinite", 0], ["else", 0], ["print", 0], ["finite", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["infinite", 0], ["finite", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["import", 0], ["math", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["test", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["math", 0], ["gcd", 0], ["a", 0], ["b", 0], ["if", 0], ["k", 0], ["1", 0], ["print", 0], ["infinite", 0], ["else", 0], ["print", 0], ["finite", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["def", 7], ["gcd", 7], ["a", 0], ["b", 0], ["while", 0], ["b", 0], ["0", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["def", 20], ["gcd", 28], ["a", 0], ["b", 0], ["if", 0], ["b", 0], ["0", 0], ["return", 0], ["a", 0], ["return", 0], ["gcd", 0], ["b", 0], ["a", 0], ["b", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["finite", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["else", 0], ["infinite", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["t", 0], ["int", 0], ["input", 0], ["def", 0], ["yin", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["b", 0], ["0", 0], ["return", 0], ["b", 0], ["return", 0], ["yin", 0], ["b", 0], ["a", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["j", 0], ["yin", 0], ["max", 0], ["a", 0], ["b", 0], ["min", 0], ["a", 0], ["b", 0], ["if", 0], ["j", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["import", 0], ["math", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["test", 0], ["in", 0], ["range", 0], ["t", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["math", 0], ["gcd", 0], ["a", 0], ["b", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["from", 0], ["math", 0], ["import", 0], ["q", 0], ["int", 0], ["input", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["q", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["gcd", 0], ["a", 0], ["b", 0], ["if", 0], ["c", 0], ["1", 0], ["print", 0], ["finite", 0], ["else", 0], ["print", 0], ["infinite", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.010596026490066225, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0032544938505203397, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.07301173402868318, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.02268578878748372, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.005298013245033113, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0030274361400189215, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.03650586701434159, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.020860495436766616, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nLittle Chris is bored during his physics lessons (too easy), so he has built a toy box to keep himself occupied. The box is special, since it has the ability to change gravity.\n\nThere are n columns of toy cubes in the box arranged in a line. The i-th column contains a_{i} cubes. At first, the gravity in the box is pulling the cubes downwards. When Chris switches the gravity, it begins to pull all the cubes to the right side of the box. The figure shows the initial and final configurations of the cubes in the box: the cubes that have changed their position are highlighted with orange. [Image] \n\nGiven the initial configuration of the toy cubes in the box, find the amounts of cubes in each of the n columns after the gravity switch!\n\n\n-----Input-----\n\nThe first line of input contains an integer n (1 ≤ n ≤ 100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number a_{i} (1 ≤ a_{i} ≤ 100) denotes the number of cubes in the i-th column.\n\n\n-----Output-----\n\nOutput n integer numbers separated by spaces, where the i-th number is the amount of cubes in the i-th column after the gravity switch.\n\n\n-----Examples-----\nInput\n4\n3 2 1 2\n\nOutput\n1 2 2 3 \n\nInput\n3\n2 3 8\n\nOutput\n2 3 8 \n\n\n\n-----Note-----\n\nThe first example case is shown on the figure. The top cube of the first column falls to the top of the last column; the top cube of the second column falls to the top of the third column; the middle cube of the first column falls to the top of the second column.\n\nIn the second example case the gravity switch does not change the heights of the columns.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["cols = int(input())\nnums = [int(i) for i in input().split()]\n\nnums = sorted(nums)\nout = \"\"\nfor num in nums: out=out+str(num)+\" \"\nprint(out[:-1])\n", "n = int(input())\na = list(map(int,input().split()))\ncnt = [0] * 101\nfor i in a:\n\tcnt[i] +=1\nans = [0] * 100\nfor i in range(n-1,-1,-1):\n\tfor j in range(100,0,-1):\n\t\tif cnt[j]>0:\n\t\t\tans[i] = j\n\t\t\tcnt[j]-=1\n\t\t\tbreak\nprint(*ans[:n])\n", "_ = int(input())\nN = list(map(int, input().split()))\nprint(\" \".join(map(str, sorted(N))))\n", "n = int(input())\ninp = [int(x) for x in input().split()]\n\ninv = [0 for x in range(0, 147)]\n\nfor x in inp:\n\tfor v in range(0, x):\n\t\tinv[v] += 1\n\n\nres = []\nfor i in range(0, n):\n\tx = 0\n\twhile (inv[x] >= n - i):\n\t\tx += 1\n\tres.append(str(x))\n\nprint(' '.join(res))\n", "num=input()\nLine_1=input().split(' ')\nLine_2=[]\nfor thing in Line_1:\n\tLine_2.append(int(thing))\nLine_2.sort()\nstring=''\nfor x in range(len(Line_2)-1):\n\tstring+=(str(Line_2[x]))\n\tstring+=' '\nstring+=str(Line_2[-1])\nprint(string)\n", "n = int(input())\na = [int(i) for i in input().split()]\nd = [0] * max(a)\nfor i in a:\n\tfor j in range(i):\n\t\td[j] += 1\nres = [0] * max(d)\nfor i in d:\n\tfor j in range(i):\n\t\tres[j] += 1\nres.reverse()\nprint(\" \".join([str(i) for i in res]))\n", "\nn = int(input())\na = list(map(int, input().split(\" \")))\n\nm = max(a)\n\nw = [0] * m\nr = [0] * n\n\nfor i in range(m):\n\tfor j in range(n):\n\t\tif a[j] >= i + 1:\n\t\t\tw[i] += 1\n\n#print(w)\n\nfor j in range(n):\n\tfor i in range(m):\n\t\tif w[i] > n - (j + 1):\n\t\t\tr[j] += 1\n\n#print(r)\n\t\t\nres = [str(i) for i in r]\nres = \" \".join(res)\nprint(res)\n\n", "input()\nprint(*sorted(map(int, input().split())))\n", "n = int(input())\na = list(map(int,input().split()))\n\nfor i in range(n-1,0,-1):\n\tfor j in range(i-1,-1,-1):\n\t\tif a[j]-a[i]>0:\n\t\t\tdiff = a[j]-a[i]\n\t\t\ta[i] += diff\n\t\t\ta[j] -= diff\n\nprint(' '.join([str(v) for v in a]))\n", "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nprint(*l)\n", "a = []\nn = int(input())\na = list(map(int, input().split()))\na = sorted(a)\nfor i in range(n):\n\tprint(a[i], end = ' ')\n", "n = int(input())\na = map(int, input().split())\nprint(' '.join(map(str, sorted(a))))\n", "input()\nprint(' '.join(map(str, sorted(map(int, input().split())))))\n", "a=input()\nfor i in sorted(list(map(int,input().split()))):\n\tprint(i,end=' ')\n", "n = int(input())\na = [int(i) for i in input().split()]\nbox = [[0]*100 for i in range(n)]\nfor i in range(n):\n\tfor j in range(a[i]):\n\t\tbox[i][j] = 1\nrows = []\nfor i in range(max(a)):\n\trow = 0\n\tfor j in range(n):\n\t\tif box[j][i] == 1:\n\t\t\trow += 1\n\trows.append(row)\nfor i in range(1, n+1):\n\tfor j in range(len(rows)):\n\t\tif i <= rows[j]:\n\t\t\tbox[-i][j] = 1\n\t\telse:\n\t\t\tbox[-i][j] = 0\nans = ''\nfor collumn in box:\n\tans += str((sum(collumn))) + ' '\nprint(ans[:-1])\n", "N = map(int, input().split())\n\nA = sorted(list(map(int, input().split())))\n\nfor i in A:\n\tprint(i, end = ' ')\n", "from sys import stdin\n\ninp = stdin\ninp.readline()\nnums = [ int(x) for x in inp.readline().strip().split() ]\nnums.sort()\nnums = [ str(x) for x in nums ]\nprint(' '.join(nums))\n\n", "input()\ncs = list(map(int, input().split(\" \")))\ncs.sort()\nprint(\" \".join([str(c) for c in cs]))\n", "n=int(input())\na=list(map(int,input().split()))\nli=[ sum( x>=i for x in a) for i in range(1,101)]\nprint(*list( sum( x+i>=n for x in li ) for i in range(0,n) ) )\n", "n = int(input())\n\na = input().split()\nfor i in range(0,n):\n\ta[i] = int(a[i])\na.sort()\n\nfor i in range(0,n):\n\tprint(a[i],end=' ')\n", "input()\n[print(x, end=' ') for x in sorted(list(map(int, input().split())))]\n", "n = int(input())\na = list(map(int, input().split(' ')))\na = sorted(a)\ns = ''\nfor i in range(len(a)):\n\ts+=str(a[i])\n\tif i != len(a):\n\t\ts+=' '\nprint(s)\n", "n = int(input())\nc = input()\nc = c.split()\nc = list(map(int,c))\nr = []\nfor i in range(200):\n\tt = 0\n\tfor j in range(n):\n\t\tif (c[j] > 0):\n\t\t\tc[j] -= 1\n\t\t\tt += 1\n\t\t#print(c)\n\tr.append(t)\n#print(r)\nc2 = []\nfor i in range(n):\n\tt = 0\n\tfor j in range(200):\n\t\tif (r[j] > 0):\n\t\t\tr[j] -= 1\n\t\t\tt += 1\n\t\t#print(r)\n\tc2.append(t)\nc2.reverse()\nfor i in c2:\n\tprint(i,end=' ')\n", "n = input()\ncolumns = [int(x) for x in input().split()]\n\nfor x in sorted(columns):\n\tprint(x, end = ' ')\n", "input()\nprint(' '.join(map(str, sorted(map(int, input().split())))))\n"], "id": "id9266"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9266", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["little", 2], ["chris", 2], ["is", 2], ["bored", 2], ["during", 2], ["his", 2], ["physics", 2], ["lessons", 2], ["too", 2], ["easy", 2], ["so", 2], ["he", 2], ["has", 2], ["built", 2], ["a", 2], ["toy", 2], ["box", 2], ["to", 2], ["keep", 2], ["himself", 2], ["occupied", 2], ["the", 2], ["box", 2], ["is", 2], ["special", 2], ["since", 2], ["it", 2], ["has", 2], ["the", 2], ["ability", 2], ["to", 2], ["change", 2], ["gravity", 2], ["there", 2], ["are", 2], ["n", 2], ["columns", 2], ["of", 2], ["toy", 2], ["cubes", 2], ["in", 0], ["the", 0], ["box", 0], ["arranged", 0], ["in", 0], ["a", 0], ["line", 0], ["the", 0], ["i", 0], ["th", 0], ["column", 0], ["contains", 0], ["a", 0], ["i", 0], ["cubes", 2], ["at", 2], ["first", 2], ["the", 2], ["gravity", 2], ["in", 2], ["the", 2], ["box", 2], ["is", 2], ["pulling", 2], ["the", 2], ["cubes", 2], ["downwards", 2], ["when", 2], ["chris", 2], ["switches", 2], ["the", 2], ["gravity", 2], ["it", 2], ["begins", 2], ["to", 2], ["pull", 2], ["all", 2], ["the", 2], ["cubes", 2], ["to", 2], ["the", 2], ["right", 2], ["side", 2], ["of", 2], ["the", 2], ["box", 2], ["the", 2], ["figure", 2], ["shows", 2], ["the", 3], ["initial", 2], ["and", 2], ["final", 2], ["configurations", 2], ["of", 2], ["the", 2], ["cubes", 2], ["in", 2], ["the", 2], ["box", 0], ["the", 0], ["cubes", 0], ["that", 0], ["have", 0], ["changed", 0], ["their", 0], ["position", 0], ["are", 0], ["highlighted", 0], ["with", 0], ["orange", 0], ["image", 0], ["given", 2], ["the", 2], ["initial", 2], ["configuration", 2], ["of", 2], ["the", 2], ["toy", 2], ["cubes", 2], ["in", 2], ["the", 2], ["box", 2], ["find", 2], ["the", 2], ["amounts", 2], ["of", 0], ["cubes", 0], ["in", 0], ["each", 0], ["of", 0], ["the", 0], ["n", 0], ["columns", 0], ["after", 0], ["the", 0], ["gravity", 0], ["switch", 0], ["input", 0], ["the", 32], ["first", 9], ["line", 2], ["of", 2], ["input", 3], ["contains", 2], ["an", 2], ["integer", 2], ["n", 2], ["1", 2], ["≤", 2], ["n", 2], ["≤", 2], ["100", 2], ["the", 2], ["number", 2], ["of", 2], ["the", 2], ["columns", 2], ["in", 2], ["the", 2], ["box", 2], ["the", 2], ["next", 0], ["line", 0], ["contains", 0], ["n", 0], ["space", 0], ["separated", 0], ["integer", 0], ["numbers", 0], ["the", 0], ["i", 0], ["th", 0], ["number", 0], ["a", 0], ["i", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 2], ["100", 0], ["denotes", 0], ["the", 0], ["number", 0], ["of", 0], ["cubes", 0], ["in", 0], ["the", 0], ["i", 0], ["th", 0], ["column", 0], ["output", 0], ["output", 2], ["n", 2], ["integer", 2], ["numbers", 2], ["separated", 2], ["by", 2], ["spaces", 2], ["where", 2], ["the", 2], ["i", 2], ["th", 2], ["number", 2], ["is", 2], ["the", 2], ["amount", 0], ["of", 0], ["cubes", 0], ["in", 0], ["the", 0], ["i", 0], ["th", 0], ["column", 0], ["after", 0], ["the", 0], ["gravity", 0], ["switch", 0], ["examples", 0], ["input", 0], ["4", 0], ["3", 0], ["2", 0], ["1", 0], ["2", 0], ["output", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["input", 0], ["3", 0], ["2", 0], ["3", 0], ["8", 0], ["output", 0], ["2", 0], ["3", 0], ["8", 0], ["note", 0], ["the", 2], ["first", 2], ["example", 2], ["case", 2], ["is", 2], ["shown", 2], ["on", 2], ["the", 2], ["figure", 2], ["the", 4], ["top", 4], ["cube", 4], ["of", 4], ["the", 4], ["first", 4], ["column", 4], ["falls", 4], ["to", 4], ["the", 4], ["top", 4], ["of", 4], ["the", 4], ["last", 4], ["column", 4], ["the", 4], ["top", 4], ["cube", 4], ["of", 2], ["the", 2], ["second", 2], ["column", 2], ["falls", 2], ["to", 2], ["the", 2], ["top", 2], ["of", 2], ["the", 2], ["third", 2], ["column", 2], ["the", 4], ["middle", 4], ["cube", 4], ["of", 2], ["the", 2], ["first", 2], ["column", 2], ["falls", 2], ["to", 2], ["the", 2], ["top", 2], ["of", 2], ["the", 2], ["second", 2], ["column", 2], ["in", 2], ["the", 2], ["second", 2], ["example", 2], ["case", 0], ["the", 0], ["gravity", 0], ["switch", 0], ["does", 0], ["not", 0], ["change", 0], ["the", 0], ["heights", 0], ["of", 0], ["the", 0], ["columns", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6290322580645161, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.29373879928315416, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8664596273291926, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.43056633885438234, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6258064516129033, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.29363799283154124, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8633540372670807, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.43046928916494137, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["cols", 0], ["int", 0], ["input", 0], ["nums", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["nums", 0], ["sorted", 0], ["nums", 0], ["out", 0], ["for", 0], ["num", 0], ["in", 0], ["nums", 0], ["out", 0], ["out", 0], ["str", 0], ["num", 0], ["print", 0], ["out", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["101", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["cnt", 0], ["i", 0], ["1", 0], ["ans", 0], ["0", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["0", 0], ["1", 0], ["if", 0], ["cnt", 0], ["j", 0], ["0", 0], ["ans", 0], ["i", 0], ["j", 0], ["cnt", 0], ["j", 0], ["1", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["sorted", 0], ["n", 0], ["n", 0], ["int", 0], ["input", 0], ["inp", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["inv", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["0", 0], ["147", 0], ["for", 0], ["x", 0], ["in", 0], ["inp", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["0", 0], ["x", 0], ["inv", 0], ["v", 0], ["1", 0], ["res", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["x", 0], ["0", 0], ["while", 0], ["inv", 0], ["x", 0], ["n", 0], ["i", 0], ["x", 0], ["1", 0], ["res", 0], ["append", 0], ["str", 0], ["x", 0], ["print", 0], ["join", 0], ["res", 0], ["num", 0], ["input", 0], ["line", 0], ["1", 0], ["input", 0], ["split", 0], ["line", 0], ["2", 0], ["for", 0], ["thing", 0], ["in", 0], ["line", 0], ["1", 0], ["line", 0], ["2", 0], ["append", 0], ["int", 0], ["thing", 0], ["line", 0], ["2", 0], ["sort", 0], ["string", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["len", 0], ["line", 0], ["2", 0], ["1", 0], ["string", 0], ["str", 0], ["line", 0], ["2", 0], ["x", 0], ["string", 0], ["string", 0], ["str", 0], ["line", 0], ["2", 0], ["1", 0], ["print", 0], ["string", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["d", 0], ["0", 0], ["max", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["d", 0], ["j", 0], ["1", 0], ["res", 0], ["0", 0], ["max", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["res", 0], ["j", 0], ["1", 0], ["res", 0], ["reverse", 0], ["print", 0], ["join", 0], ["str", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["max", 0], ["a", 0], ["w", 0], ["0", 0], ["m", 0], ["r", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["i", 0], ["1", 0], ["w", 0], ["i", 0], ["1", 0], ["print", 0], ["w", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["w", 0], ["i", 0], ["n", 0], ["j", 0], ["1", 0], ["r", 0], ["j", 0], ["1", 0], ["print", 0], ["r", 0], ["res", 0], ["str", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["r", 0], ["res", 0], ["join", 0], ["res", 0], ["print", 0], ["res", 0], ["input", 0], ["print", 0], ["sorted", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["0", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["j", 0], ["a", 0], ["i", 0], ["0", 0], ["diff", 0], ["a", 0], ["j", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["diff", 0], ["a", 0], ["j", 0], ["diff", 0], ["print", 0], ["join", 0], ["str", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["sort", 0], ["print", 0], ["l", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sorted", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["a", 0], ["i", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["sorted", 0], ["a", 0], ["input", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["sorted", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["i", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["box", 0], ["0", 0], ["100", 0], ["for", 10], ["i", 10], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["a", 0], ["i", 0], ["box", 0], ["i", 0], ["j", 0], ["1", 0], ["rows", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["max", 0], ["a", 0], ["row", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["box", 0], ["j", 0], ["i", 0], ["1", 0], ["row", 0], ["1", 0], ["rows", 0], ["append", 0], ["row", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["rows", 0], ["if", 0], ["i", 0], ["rows", 0], ["j", 0], ["box", 0], ["i", 0], ["j", 0], ["1", 0], ["else", 0], ["box", 0], ["i", 0], ["j", 0], ["0", 0], ["ans", 0], ["for", 0], ["collumn", 0], ["in", 0], ["box", 0], ["ans", 0], ["str", 0], ["sum", 0], ["collumn", 0], ["print", 0], ["ans", 0], ["1", 0], ["n", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["print", 0], ["i", 0], ["end", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["inp", 0], ["stdin", 0], ["inp", 0], ["readline", 0], ["nums", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["inp", 0], ["readline", 0], ["strip", 0], ["split", 0], ["nums", 0], ["sort", 0], ["nums", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["nums", 0], ["print", 0], ["join", 0], ["nums", 0], ["input", 0], ["cs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cs", 0], ["sort", 0], ["print", 0], ["join", 0], ["str", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["cs", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["li", 0], ["sum", 0], ["x", 0], ["i", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["101", 0], ["print", 0], ["list", 0], ["sum", 0], ["x", 0], ["i", 0], ["n", 0], ["for", 0], ["x", 0], ["in", 0], ["li", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["a", 0], ["i", 0], ["int", 0], ["a", 0], ["i", 0], ["a", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["print", 0], ["a", 0], ["i", 0], ["end", 0], ["input", 0], ["print", 0], ["x", 0], ["end", 0], ["for", 0], ["x", 0], ["in", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sorted", 0], ["a", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["s", 0], ["str", 0], ["a", 0], ["i", 0], ["if", 0], ["i", 0], ["len", 0], ["a", 0], ["s", 0], ["print", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["c", 0], ["input", 0], ["c", 0], ["c", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["c", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["200", 0], ["t", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["c", 0], ["j", 0], ["0", 0], ["c", 0], ["j", 0], ["1", 0], ["t", 0], ["1", 0], ["print", 0], ["c", 0], ["r", 0], ["append", 0], ["t", 0], ["print", 0], ["r", 0], ["c2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["200", 0], ["if", 0], ["r", 0], ["j", 0], ["0", 0], ["r", 0], ["j", 0], ["1", 0], ["t", 0], ["1", 0], ["print", 0], ["r", 0], ["c2", 0], ["append", 0], ["t", 0], ["c2", 0], ["reverse", 0], ["for", 0], ["i", 0], ["in", 0], ["c2", 0], ["print", 0], ["i", 0], ["end", 0], ["n", 0], ["input", 0], ["columns", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["x", 0], ["in", 0], ["sorted", 0], ["columns", 0], ["print", 0], ["x", 0], ["end", 0], ["input", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["sorted", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.002466091245376079, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0002466091245376079, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.01701093560145808, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.001701093560145808, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.002466091245376079, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0002466091245376079, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.01701093560145808, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.001701093560145808, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nRunning with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. \n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction — counterclockwise, if you look on a track from above. \n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 ≤ n ≤ 50, n ≤ L ≤ 100) — the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order — the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order — the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n3 8\n2 4 6\n1 5 7\n\nOutput\nYES\n\nInput\n4 9\n2 3 5 8\n0 1 3 6\n\nOutput\nYES\n\nInput\n2 4\n1 3\n1 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe first test is analyzed in the statement.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["def main():\n\tn, l = map(int, input().split())\n\n\tx = list(map(int, input().split()))\n\ty = list(map(int, input().split()))\n\n\tx.append(x[0] + l)\n\ty.append(y[0] + l)\n\n\ta = [x[i + 1] - x[i] for i in range(n)]\n\tb = [y[i + 1] - y[i] for i in range(n)]\n\n\tfor i in range(n):\n\t\tif (a == b[i:] + b[:i]):\n\t\t\tprint(\"YES\")\n\t\t\treturn\n\tprint(\"NO\")\n\n\nmain()\n", "import math, re, itertools as it;prime = lambda n: len([i for i in range(2, int(math.sqrt(n) + 1)) if n % i == 0]) == 0;gcd = lambda a, b: gcd(b, a % b) if b else a;fact = lambda x: x * fact(x - 1) if x else 1;bino = lambda n, k: fact(n) / fact(k) / fact(n - k);fib11 = lambda n: 1 if n < 2 else fib11(n - 1) + fib11(n - 2);fib01 = lambda n: 0 if n == 0 else 1 if n == 1 else fib01(n - 1) + fib01(n - 2);sumofd = lambda x: x if x < 10 else sumofd(x // 10) + x % 10\n\nn, l = map(int, input().split(' '))\nk = list(map(int, input().split()))\ns = list(map(int, input().split()))\nf = False\nfor i in range(l):\n\tfor j in range(len(k)):\n\t\tk[j] -= 1\n\t\t\n\t\tif k[j] < 0:\n\t\t\tk[j] = l - 1\n\tk.sort()\n\tif k == s:\n\t\tf = True\nprint('YES' if f else 'NO')\n", "def calc_distances(points):\n\tdistances = [0] * n\n\tfor i in range(n):\n\t\tdist = points[i] - points[i - 1]\n\t\tif dist < 0:\n\t\t\tdist += length\n\t\tdistances[i] = dist\n\treturn distances\n\n\ndef rotate(lst, i):\n\treturn lst[i:] + lst[:i]\n\n\nn, length = list(map(int, input().split()))\na, b = [calc_distances(list(map(int, input().split()))) for i in range(2)]\nfor i in range(n):\n\tif b[i] == a[0] and rotate(b, i) == a:\n\t\tprint(\"YES\")\n\t\tbreak\nelse:\n\tprint(\"NO\")\n", "n, l = map(int, input().split())\n\nl1 = [int(x) for x in input().split()]\nl2 = [int(x) for x in input().split()]\n\ns1 = ''\n\nprev = -1\nfor i in range(n):\n\ts1 += '0' * (l1[i] - prev - 1) + '1'\n\tprev = l1[i]\ns1 += '0' * (l - prev - 1)\n\ns2 = ''\n\nprev = -1\nfor i in range(n):\n\ts2 += '0' * (l2[i] - prev - 1) + '1'\n\tprev = l2[i]\ns2 += '0' * (l - prev - 1)\n\ns1 = s1 * 2\n\nif s1.find(s2) != -1:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n,l = map(int,input().split())\nA = list(map(int,input().split()))\nB = list(map(int,input().split()))\nans1 = [0] * n\nans2 = [0] * n\nfor j in range(n):\n\tif j == 0:\n\t\t\n\t\tans1[j] = A[j] + (l - A[-1-j])\n\t\tans2[j] = B[j] + (l - B[-1-j])\n\telse:\n\t\tans1[j] = A[j] - A[j-1]\n\t\tans2[j] = B[j] - B[j-1]\nper = 0\nfor j in range(n):\n\tif ans1 == ans2:\n\t\tper = 1\n\t\tbreak\n\telse:\n\t\ts = ans1[0]\n\t\tans1 = ans1[1:]\n\t\tans1.append(s)\nif per == 1:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "def track(tr):\n\tres = [l - tr[-1] + tr[0]]\n\tfor i in range(1, n):\n\t\tres.append(tr[i] - tr[i - 1])\n\treturn res\n\ndef equals(l1, l2):\n\tfor i in range(n):\n\t\tres = True\n\t\tfor k in range(n):\n\t\t\tres = res and l1[k] == l2[(k + i) % n]\n\t\tif res:\n\t\t\treturn True\n\treturn False\n\nn, l = list(map(int, input().split()))\na = track(list(map(int, input().split())))\nb = track(list(map(int, input().split())))\nif equals(a, b):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n, l = list(map(int, input().split()))\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nc = [0] * n\nd = [0] * n\nfor i in range(n-1):\n\tc[i] = a[i+1] - a[i]\nc[n-1] = l - sum(c)\n\nfor i in range(n-1):\n\td[i] = b[i+1] - b[i]\nd[n-1] = l - sum(d)\n\n\n\nf = False\nfor i in range(0, n):\n\tif d == c[i:n] + c[:i]:\n\t\tf = True\n\t\t\nif f:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "import sys\nN, L = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nfor shift in range(N):\n\tcoincide = True\n\tdiff = b[shift] - a[0]\n\tfor i in range(1, N):\n\t\tif (a[i] + diff) % L != b[(i + shift) % N]:\n\t\t\tcoincide = False\n\t\t\tbreak\n\tif coincide:\n\t\tprint(\"YES\")\n\t\treturn\n\nprint(\"NO\")\n", "n, L = map(int, input().split())\n\nif n == 1:\n\tprint('YES')\n\treturn\n\nfirst = list(map(int, input().split()))\nsecond = list(map(int, input().split()))\n\ndef shift(lst, value):\n\tfor i in range(len(lst)):\n\t\tlst[i] -= value\n\treturn lst\n\ndef equal(lst1, lst2):\n\tfor i in range(len(lst1)):\n\t\tif lst1[i] != lst2[i]:\n\t\t\treturn False\n\treturn True\n\nfirst = shift(first, first[0])\nsecond = shift(second, second[0])\n\nfor i in range(n):\n\tfirst = shift(first, first[1])\n\tfirst = first[1:] + [L + first[0]]\n\tif equal(first, second):\n\t\tprint(\"YES\")\n\t\treturn\n\nprint('NO')\n", "n, L = tuple(map(int,input().split()))\nkefa = list(map(int,input().split()))\nsasha = list(map(int,input().split()))\n\ndiffsk, diffss = [],[]\n\nfor k in range(n):\n\tdiffsk.append(kefa[k%n]-kefa[(k-1)%n])\n\tdiffss.append(sasha[k%n]-sasha[(k-1)%n])\n\nres = False\nfor j in range(n):\n\ttmp = True\n\tdiff = (diffsk[0]-diffss[j])%L\n\tfor i in range(n):\n\t\tif (diffsk[i]-diffss[(i+j)%n])%L != diff:\n\t\t\ttmp = False\n\tif tmp:\n\t\tres = True\n\nif res:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "def main():\t\n\ttmp = input()\n\ttmp = tmp.split(\" \")\n\tn = int(tmp[0])\n\tl = int(tmp[1])\n\ttmp = input()\n\ttmp = tmp.split(\" \")\n\ta = []\n\tfor i in tmp : a.append(int(i))\n\ttmp = input()\n\ttmp = tmp.split(\" \")\n\tb = []\n\tfor i in tmp : b.append(int(i))\n\ta1 = []\n\tfor i in range(1,len(a)) : a1.append(a[i]-a[i-1])\n\ta1.append(l-a[-1]+a[0])\n\tb1 = []\n\tfor i in range(1,len(b)) : b1.append(b[i]-b[i-1])\n\tb1.append(l-b[-1]+b[0])\n\ttmp = len(a1)\n\tfor i in range(tmp):\n\t\tlol = a1[0]\n\t\ta1.pop(0)\n\t\ta1.append(lol)\n\t\tif (a1 == b1) : \n\t\t\tprint(\"YES\")\n\t\t\treturn 0\n\tprint(\"NO\")\nmain()\n", "n, l = list(map(int, input().split()))\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\naa = [0] * n\nbb = [0] * n\naa[0] = l - a[-1] + a[0]\nbb[0] = l - b[-1] + b[0]\nfor i in range(1, n):\n\taa[i] = a[i] - a[i - 1]\n\tbb[i] = b[i] - b[i - 1]\nfor i in range(n):\n\tif aa == bb:\n\t\tprint(\"YES\")\n\t\tbreak\n\taa.append(aa[0])\n\taa.pop(0)\nelse:\n\tprint(\"NO\")\n", "\n\n\nn, l = list(map(int, input().split()))\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\n\n\nfirst_diff = A[0]\nA = [x - first_diff for x in A]\n\nfirst_diff = B[0]\nB = [x - first_diff for x in B]\n\nfound = False\n\nfor _ in range(n + 2):\n\tif A == B:\n\t\tfound = True\n\n\tB = B[1:] + [B[0] + l]\n\tfirst_diff = B[0]\n\tB = [x - first_diff for x in B]\n\n\nif found:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n\n", "q,w=list(map(int,input().split()))\na=list(map(int,input().split()))\ns=list(map(int,input().split()))\nz=[0]*q\nfor i in range(1,q):\n\tz[i]=a[i]-a[i-1]\nz[0]=w-a[q-1]+a[0]\nz=z+z+z\nx=[0]*q\nfor i in range(1,q):\n\tx[i]=s[i]-s[i-1]\nx[0]=w-s[q-1]+s[0]\nb=False\nfor i in range(0,q+1):\n\tif z[i:i+q]==x:\n\t\tb=True\nif b:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "n, l = map(int, input().split())\nans = False\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(l):\n\tc = 1\n\tp = b[:]\n\tfor j in range(n):\n\t\tp[j] = (b[j] + i) % l\n\tp.sort()\n\tfor j in range(n):\n\t\tif a[j] != p[j]:\n\t\t\tc = 0\n\t\t\tbreak\n\tif c:\n\t\tprint('YES')\n\t\tbreak\nelse:\n\tprint('NO')\n", "import math, sys\n\ndef main():\n\tn,l = list(map(int,input().split()))\n\ta = list(map(int, input().split()))\n\tmask = []\n\tfor i in range(n-1):\n\t\tmask.append(a[i+1]-a[i])\n\tmask.append(l-a[n-1]+a[0])\n\t\n\tb = list(map(int, input().split()))\n\tpath = []\n\tfor i in range(n-1):\n\t\tpath.append(b[i+1]-b[i])\n\tpath.append(l-b[n-1]+b[0])\n\t\n\tfor offset in range(n):\n\t\tflag = True\n\t\tfor i in range(n):\n\t\t\tif mask[(i+offset)%n] != path[i]:\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tprint('YES')\n\t\t\treturn\n\tprint('NO')\n\t\t\t\n\t\t\n\t\t\n\t\t \n\t\t\t\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n, L = [int(x) for x in input().split()]\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ns1 = a[n - 1]\ns2 = b[n - 1]\nx1 = L - s1\nx2 = L - s2\nc = []\nd = []\nc.append(a[0] + x1)\nd.append(b[0] + x2)\nfor i in range(n - 1):\n\tc.append(a[i + 1] - a[i])\n\td.append(b[i + 1] - b[i])\nfor i in range(n):\n\tk = True\n\tfor j in range(n):\n\t\tif c[j] != d[(j + i) % n]:\n\t\t\tk = False\n\tif (k):\n\t\tprint(\"YES\")\n\t\treturn\nprint(\"NO\")\n", "n, l = list(map(int, input().split()))\n\nk = list(map(int, input().split()))\ns = list(map(int, input().split()))\n\nki = [k[0]]\nsi = [s[0]]\n\ntmp = 0\nfor i in range(1, n):\n\tki.append(k[i] - k[i - 1])\n\tsi.append(s[i] - s[i - 1])\nki[0] += l - k[-1]\nsi[0] += l - s[-1]\n\nif ''.join(map(str, ki * 2)).find(''.join(map(str, si))) != -1:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "n, L = map(int, input().split())\n\nKef = list(map(int, input().split()))\nSas = list(map(int, input().split()))\n\ndKef = [Kef[i+1]-Kef[i] for i in range(n-1)]\ndKef.append(L - Kef[n - 1] + Kef[0])\n\ndSas= [Sas[i+1]-Sas[i] for i in range(n-1)]\ndSas.append(L - Sas[n - 1] + Sas[0])\n\nif ' '.join(map(str, dKef)) in ' '.join(map(str, dSas * 2)):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "from collections import deque\n\nn, L = list(map(int, input().split()))\nd1 = [int(i) for i in input().split()]\nd2 = deque([int(i) for i in input().split()])\nans = False\nif n == 1:\n\tans = True\n\nfor i in range(n):\n\tif ans:\n\t\tbreak\n\tdiff = (d1[0]-d2[0])%L\n\tfl = True\n\tfor j in range(n):\n\t\tif (d1[j]-d2[j])%L != diff:\n\t\t\tfl = False\n\tif fl:\n\t\tans = True\n\td2.rotate(1)\n\nprint([\"NO\",\"YES\"][ans])\n", "k, n = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\nd = []\nfor i in range(k - 1):\n\tc += [a[i + 1] - a[i] + 1]\n\td += [b[i + 1] - b[i] + 1]\nc += [n - a[-1] + a[0] + 1]\nd += [n - b[-1] + b[0] + 1]\nfor i in range(k):\n\tif c == d[i:] + d[:i]:\n\t\tprint(\"YES\")\n\t\tbreak\nelse:\n\t print(\"NO\")\n", "import sys\n\ndef debug(x, table):\n\tfor name, val in table.items():\n\t\tif x is val:\n\t\t\tprint('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n\t\t\treturn None\n\ndef solve():\n\tn, L = map(int, input().split())\n\tA = [int(i) for i in input().split()]\n\tB = [int(i) for i in input().split()]\n\n\tfor i in range(L):\n\t\tB_r = sorted([(b + i) % L for b in B])\n\t\tif A == B_r:\n\t\t\tprint('YES')\n\t\t\tbreak\n\telse:\n\t\tprint('NO')\n\ndef __starting_point():\n\tsolve()\n__starting_point()\n"], "id": "id7926"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7926", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["running", 2], ["with", 2], ["barriers", 2], ["on", 2], ["the", 2], ["circle", 2], ["track", 2], ["is", 2], ["very", 2], ["popular", 2], ["in", 2], ["the", 2], ["country", 2], ["where", 2], ["dasha", 2], ["lives", 2], ["so", 2], ["no", 2], ["wonder", 2], ["that", 2], ["on", 2], ["her", 2], ["way", 2], ["to", 2], ["classes", 2], ["she", 2], ["saw", 2], ["the", 2], ["following", 2], ["situation", 2], ["the", 2], ["track", 2], ["is", 2], ["the", 2], ["circle", 2], ["with", 2], ["length", 2], ["l", 2], ["in", 2], ["distinct", 2], ["points", 2], ["of", 2], ["which", 2], ["there", 2], ["are", 2], ["n", 2], ["barriers", 2], ["athlete", 2], ["always", 2], ["run", 2], ["the", 2], ["track", 2], ["in", 2], ["counterclockwise", 2], ["direction", 2], ["if", 2], ["you", 2], ["look", 2], ["on", 2], ["him", 2], ["from", 2], ["above", 2], ["all", 2], ["barriers", 2], ["are", 2], ["located", 2], ["at", 2], ["integer", 2], ["distance", 2], ["from", 2], ["each", 2], ["other", 2], ["along", 2], ["the", 2], ["track", 2], ["her", 2], ["friends", 2], ["the", 2], ["parrot", 2], ["kefa", 2], ["and", 2], ["the", 2], ["leopard", 2], ["sasha", 2], ["participated", 2], ["in", 2], ["competitions", 2], ["and", 2], ["each", 2], ["of", 2], ["them", 2], ["ran", 2], ["one", 2], ["lap", 2], ["each", 2], ["of", 2], ["the", 2], ["friends", 2], ["started", 2], ["from", 2], ["some", 2], ["integral", 2], ["point", 2], ["on", 2], ["the", 2], ["track", 2], ["both", 2], ["friends", 2], ["wrote", 2], ["the", 2], ["distance", 2], ["from", 2], ["their", 2], ["start", 2], ["along", 2], ["the", 2], ["track", 2], ["to", 2], ["each", 2], ["of", 2], ["the", 2], ["n", 2], ["barriers", 2], ["thus", 2], ["each", 2], ["of", 2], ["them", 2], ["wrote", 2], ["n", 2], ["integers", 2], ["in", 2], ["the", 2], ["ascending", 0], ["order", 0], ["each", 0], ["of", 0], ["them", 0], ["was", 0], ["between", 0], ["0", 0], ["and", 0], ["l", 0], ["1", 0], ["inclusively", 0], ["image", 0], ["consider", 2], ["an", 2], ["example", 2], ["let", 2], ["l", 2], ["8", 2], ["blue", 2], ["points", 2], ["are", 2], ["barriers", 2], ["and", 2], ["green", 2], ["points", 2], ["are", 2], ["kefa", 2], ["s", 2], ["start", 2], ["a", 2], ["and", 2], ["sasha", 2], ["s", 2], ["start", 2], ["b", 2], ["then", 2], ["kefa", 2], ["writes", 2], ["down", 2], ["the", 2], ["sequence", 2], ["2", 2], ["4", 2], ["6", 2], ["and", 2], ["sasha", 2], ["writes", 2], ["down", 2], ["1", 2], ["5", 2], ["7", 2], ["there", 2], ["are", 2], ["several", 2], ["tracks", 2], ["in", 2], ["the", 2], ["country", 2], ["all", 2], ["of", 2], ["them", 2], ["have", 2], ["same", 2], ["length", 2], ["and", 2], ["same", 2], ["number", 2], ["of", 2], ["barriers", 2], ["but", 2], ["the", 2], ["positions", 2], ["of", 2], ["the", 2], ["barriers", 2], ["can", 2], ["differ", 2], ["among", 2], ["different", 2], ["tracks", 2], ["now", 2], ["dasha", 2], ["is", 2], ["interested", 2], ["if", 2], ["it", 2], ["is", 2], ["possible", 2], ["that", 2], ["kefa", 2], ["and", 2], ["sasha", 2], ["ran", 2], ["the", 2], ["same", 2], ["track", 2], ["or", 2], ["they", 2], ["participated", 2], ["on", 2], ["different", 2], ["tracks", 2], ["write", 2], ["the", 2], ["program", 2], ["which", 2], ["will", 2], ["check", 2], ["that", 2], ["kefa", 2], ["s", 2], ["and", 2], ["sasha", 2], ["s", 2], ["tracks", 2], ["coincide", 2], ["it", 2], ["means", 2], ["that", 2], ["one", 2], ["can", 2], ["be", 2], ["obtained", 2], ["from", 2], ["the", 2], ["other", 2], ["by", 2], ["changing", 2], ["the", 2], ["start", 2], ["position", 2], ["note", 2], ["that", 2], ["they", 2], ["always", 2], ["run", 2], ["the", 2], ["track", 2], ["in", 2], ["one", 0], ["direction", 0], ["—", 0], ["counterclockwise", 0], ["if", 0], ["you", 0], ["look", 0], ["on", 0], ["a", 0], ["track", 0], ["from", 0], ["above", 0], ["input", 0], ["the", 3], ["first", 2], ["line", 2], ["contains", 2], ["two", 2], ["integers", 2], ["n", 2], ["and", 2], ["l", 2], ["1", 2], ["≤", 2], ["n", 2], ["≤", 2], ["50", 2], ["n", 2], ["≤", 2], ["l", 2], ["≤", 2], ["100", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["barriers", 2], ["on", 2], ["a", 2], ["track", 2], ["and", 2], ["its", 2], ["length", 2], ["the", 4], ["second", 4], ["line", 4], ["contains", 2], ["n", 2], ["distinct", 2], ["integers", 2], ["in", 2], ["the", 2], ["ascending", 2], ["order", 2], ["—", 2], ["the", 2], ["distance", 2], ["from", 2], ["kefa", 2], ["s", 2], ["start", 2], ["to", 2], ["each", 2], ["barrier", 2], ["in", 2], ["the", 2], ["order", 2], ["of", 2], ["its", 2], ["appearance", 2], ["all", 2], ["integers", 2], ["are", 2], ["in", 2], ["the", 2], ["range", 2], ["from", 2], ["0", 2], ["to", 2], ["l", 2], ["1", 2], ["inclusively", 2], ["the", 4], ["second", 4], ["line", 4], ["contains", 2], ["n", 2], ["distinct", 2], ["integers", 2], ["in", 2], ["the", 2], ["ascending", 2], ["order", 2], ["—", 2], ["the", 2], ["distance", 2], ["from", 2], ["sasha", 2], ["s", 2], ["start", 2], ["to", 2], ["each", 2], ["barrier", 2], ["in", 2], ["the", 2], ["order", 2], ["of", 2], ["its", 2], ["overcoming", 2], ["all", 0], ["integers", 0], ["are", 0], ["in", 0], ["the", 0], ["range", 0], ["from", 0], ["0", 0], ["to", 0], ["l", 0], ["1", 0], ["inclusively", 0], ["output", 0], ["print", 2], ["yes", 2], ["without", 2], ["quotes", 2], ["if", 2], ["kefa", 2], ["and", 2], ["sasha", 2], ["ran", 2], ["the", 2], ["coinciding", 2], ["tracks", 2], ["it", 2], ["means", 2], ["that", 2], ["the", 2], ["position", 2], ["of", 2], ["all", 2], ["barriers", 2], ["coincides", 2], ["if", 2], ["they", 2], ["start", 2], ["running", 2], ["from", 0], ["the", 0], ["same", 0], ["points", 0], ["on", 0], ["the", 0], ["track", 0], ["otherwise", 0], ["print", 0], ["no", 0], ["without", 0], ["quotes", 0], ["examples", 0], ["input", 0], ["3", 0], ["8", 0], ["2", 0], ["4", 0], ["6", 0], ["1", 0], ["5", 0], ["7", 0], ["output", 0], ["yes", 0], ["input", 0], ["4", 0], ["9", 0], ["2", 0], ["3", 0], ["5", 0], ["8", 0], ["0", 0], ["1", 0], ["3", 0], ["6", 0], ["output", 0], ["yes", 0], ["input", 0], ["2", 0], ["4", 0], ["1", 0], ["3", 0], ["1", 0], ["2", 0], ["output", 0], ["no", 0], ["note", 0], ["the", 0], ["first", 0], ["test", 0], ["is", 0], ["analyzed", 0], ["in", 0], ["the", 0], ["statement", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8033826638477801, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.39816772374911913, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8824742268041237, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.44089347079037805, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8033826638477801, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.39816772374911913, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8824742268041237, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.44089347079037805, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["def", 0], ["main", 0], ["n", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["append", 0], ["x", 0], ["0", 0], ["l", 0], ["y", 0], ["append", 0], ["y", 0], ["0", 0], ["l", 0], ["a", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["b", 0], ["y", 0], ["i", 0], ["1", 0], ["y", 1], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["main", 0], ["import", 0], ["math", 0], ["re", 0], ["itertools", 0], ["as", 0], ["it", 0], ["prime", 0], ["lambda", 0], ["n", 0], ["len", 0], ["i", 0], ["for", 7], ["i", 7], ["in", 0], ["range", 0], ["2", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["0", 0], ["gcd", 0], ["lambda", 0], ["a", 0], ["b", 0], ["gcd", 0], ["b", 0], ["a", 0], ["b", 0], ["if", 0], ["b", 0], ["else", 0], ["a", 0], ["fact", 0], ["lambda", 0], ["x", 0], ["x", 0], ["fact", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["else", 0], ["1", 0], ["bino", 0], ["lambda", 0], ["n", 0], ["k", 0], ["fact", 0], ["n", 0], ["fact", 0], ["k", 0], ["fact", 0], ["n", 0], ["k", 0], ["fib11", 0], ["lambda", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["else", 0], ["fib11", 0], ["n", 0], ["1", 0], ["fib11", 0], ["n", 0], ["2", 0], ["fib01", 0], ["lambda", 0], ["n", 0], ["0", 0], ["if", 0], ["n", 0], ["0", 0], ["else", 0], ["1", 0], ["if", 0], ["n", 0], ["1", 0], ["else", 0], ["fib01", 0], ["n", 0], ["1", 0], ["fib01", 0], ["n", 0], ["2", 0], ["sumofd", 0], ["lambda", 0], ["x", 0], ["x", 0], ["if", 0], ["x", 0], ["10", 0], ["else", 0], ["sumofd", 0], ["x", 0], ["10", 0], ["x", 0], ["10", 0], ["n", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["k", 0], ["k", 0], ["j", 0], ["1", 0], ["if", 0], ["k", 0], ["j", 0], ["0", 0], ["k", 0], ["j", 0], ["l", 0], ["1", 0], ["k", 0], ["sort", 0], ["if", 0], ["k", 0], ["s", 0], ["f", 0], ["true", 0], ["print", 0], ["yes", 0], ["if", 0], ["f", 0], ["else", 0], ["no", 0], ["def", 0], ["calc", 0], ["distances", 0], ["points", 0], ["distances", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dist", 0], ["points", 0], ["i", 0], ["points", 0], ["i", 0], ["1", 0], ["if", 0], ["dist", 0], ["0", 0], ["dist", 0], ["length", 0], ["distances", 0], ["i", 0], ["dist", 0], ["return", 0], ["distances", 0], ["def", 0], ["rotate", 0], ["lst", 0], ["i", 0], ["return", 0], ["lst", 0], ["i", 0], ["lst", 0], ["i", 0], ["n", 0], ["length", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["b", 0], ["calc", 0], ["distances", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["a", 0], ["0", 0], ["and", 0], ["rotate", 0], ["b", 0], ["i", 0], ["a", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l1", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["l2", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["s1", 0], ["prev", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s1", 0], ["0", 0], ["l1", 0], ["i", 0], ["prev", 0], ["1", 0], ["1", 0], ["prev", 0], ["l1", 0], ["i", 0], ["s1", 0], ["0", 0], ["l", 0], ["prev", 0], ["1", 0], ["s2", 0], ["prev", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s2", 0], ["0", 0], ["l2", 0], ["i", 0], ["prev", 0], ["1", 0], ["1", 0], ["prev", 0], ["l2", 0], ["i", 0], ["s2", 0], ["0", 0], ["l", 0], ["prev", 0], ["1", 0], ["s1", 0], ["s1", 0], ["2", 0], ["if", 0], ["s1", 0], ["find", 0], ["s2", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans1", 0], ["0", 0], ["n", 0], ["ans2", 0], ["0", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["j", 0], ["0", 0], ["ans1", 0], ["j", 0], ["a", 0], ["j", 0], ["l", 0], ["a", 0], ["1", 0], ["j", 0], ["ans2", 0], ["j", 0], ["b", 0], ["j", 0], ["l", 0], ["b", 0], ["1", 0], ["j", 0], ["else", 0], ["ans1", 0], ["j", 0], ["a", 0], ["j", 0], ["a", 0], ["j", 0], ["1", 0], ["ans2", 0], ["j", 0], ["b", 0], ["j", 0], ["b", 0], ["j", 0], ["1", 0], ["per", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ans1", 0], ["ans2", 0], ["per", 0], ["1", 0], ["break", 0], ["else", 0], ["s", 0], ["ans1", 0], ["0", 0], ["ans1", 0], ["ans1", 0], ["1", 0], ["ans1", 0], ["append", 0], ["s", 0], ["if", 0], ["per", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["track", 0], ["tr", 0], ["res", 0], ["l", 0], ["tr", 0], ["1", 0], ["tr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["res", 0], ["append", 0], ["tr", 0], ["i", 0], ["tr", 0], ["i", 0], ["1", 0], ["return", 0], ["res", 0], ["def", 0], ["equals", 0], ["l1", 0], ["l2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["res", 0], ["true", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["res", 0], ["res", 0], ["and", 0], ["l1", 0], ["k", 0], ["l2", 0], ["k", 0], ["i", 0], ["n", 0], ["if", 0], ["res", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["n", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["track", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["track", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["equals", 0], ["a", 0], ["b", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["c", 0], ["0", 0], ["n", 0], ["d", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["c", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["c", 0], ["n", 0], ["1", 0], ["l", 0], ["sum", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["d", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["d", 0], ["n", 0], ["1", 0], ["l", 0], ["sum", 0], ["d", 0], ["f", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["d", 0], ["c", 0], ["i", 0], ["n", 0], ["c", 0], ["i", 0], ["f", 0], ["true", 0], ["if", 0], ["f", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["n", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["shift", 0], ["in", 0], ["range", 0], ["n", 0], ["coincide", 0], ["true", 0], ["diff", 0], ["b", 0], ["shift", 0], ["a", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["diff", 0], ["l", 0], ["b", 0], ["i", 0], ["shift", 0], ["n", 0], ["coincide", 0], ["false", 0], ["break", 0], ["if", 0], ["coincide", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["n", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["first", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["second", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["shift", 0], ["lst", 0], ["value", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["lst", 0], ["lst", 0], ["i", 0], ["value", 0], ["return", 0], ["lst", 0], ["def", 0], ["equal", 0], ["lst1", 0], ["lst2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["lst1", 0], ["if", 0], ["lst1", 0], ["i", 0], ["lst2", 0], ["i", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["first", 0], ["shift", 0], ["first", 0], ["first", 0], ["0", 0], ["second", 0], ["shift", 0], ["second", 0], ["second", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["first", 0], ["shift", 0], ["first", 0], ["first", 0], ["1", 0], ["first", 0], ["first", 0], ["1", 0], ["l", 0], ["first", 0], ["0", 0], ["if", 0], ["equal", 0], ["first", 0], ["second", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["n", 0], ["l", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["kefa", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sasha", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["diffsk", 0], ["diffss", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["diffsk", 0], ["append", 0], ["kefa", 0], ["k", 0], ["n", 0], ["kefa", 0], ["k", 0], ["1", 0], ["n", 0], ["diffss", 0], ["append", 0], ["sasha", 0], ["k", 0], ["n", 0], ["sasha", 0], ["k", 0], ["1", 0], ["n", 0], ["res", 0], ["false", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["tmp", 0], ["true", 0], ["diff", 0], ["diffsk", 0], ["0", 0], ["diffss", 0], ["j", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["diffsk", 0], ["i", 0], ["diffss", 0], ["i", 0], ["j", 0], ["n", 0], ["l", 0], ["diff", 0], ["tmp", 0], ["false", 0], ["if", 0], ["tmp", 0], ["res", 0], ["true", 0], ["if", 0], ["res", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["main", 0], ["tmp", 0], ["input", 0], ["tmp", 0], ["tmp", 0], ["split", 0], ["n", 0], ["int", 0], ["tmp", 0], ["0", 0], ["l", 0], ["int", 0], ["tmp", 0], ["1", 0], ["tmp", 0], ["input", 0], ["tmp", 0], ["tmp", 0], ["split", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["tmp", 0], ["a", 0], ["append", 0], ["int", 0], ["i", 0], ["tmp", 0], ["input", 0], ["tmp", 0], ["tmp", 0], ["split", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["tmp", 0], ["b", 0], ["append", 0], ["int", 0], ["i", 0], ["a1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["a", 0], ["a1", 0], ["append", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["a1", 0], ["append", 0], ["l", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["b1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["b", 0], ["b1", 0], ["append", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["b1", 0], ["append", 0], ["l", 0], ["b", 0], ["1", 0], ["b", 0], ["0", 0], ["tmp", 0], ["len", 0], ["a1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["tmp", 0], ["lol", 0], ["a1", 0], ["0", 0], ["a1", 0], ["pop", 0], ["0", 0], ["a1", 0], ["append", 0], ["lol", 0], ["if", 0], ["a1", 0], ["b1", 0], ["print", 0], ["yes", 0], ["return", 0], ["0", 0], ["print", 0], ["no", 0], ["main", 0], ["n", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["aa", 0], ["0", 0], ["n", 0], ["bb", 0], ["0", 0], ["n", 0], ["aa", 0], ["0", 0], ["l", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["bb", 0], ["0", 0], ["l", 0], ["b", 0], ["1", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["aa", 0], ["i", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["bb", 0], ["i", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["aa", 0], ["bb", 0], ["print", 0], ["yes", 0], ["break", 0], ["aa", 0], ["append", 0], ["aa", 0], ["0", 0], ["aa", 0], ["pop", 0], ["0", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["first", 0], ["diff", 0], ["a", 0], ["0", 0], ["a", 0], ["x", 0], ["first", 0], ["diff", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["first", 0], ["diff", 0], ["b", 0], ["0", 0], ["b", 0], ["x", 0], ["first", 0], ["diff", 0], ["for", 0], ["x", 0], ["in", 0], ["b", 0], ["found", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["if", 0], ["a", 0], ["b", 0], ["found", 0], ["true", 0], ["b", 0], ["b", 0], ["1", 0], ["b", 0], ["0", 0], ["l", 0], ["first", 0], ["diff", 0], ["b", 0], ["0", 0], ["b", 0], ["x", 0], ["first", 0], ["diff", 0], ["for", 0], ["x", 0], ["in", 0], ["b", 0], ["if", 0], ["found", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["q", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["z", 0], ["0", 0], ["q", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["q", 0], ["z", 0], ["i", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["z", 0], ["0", 0], ["w", 0], ["a", 0], ["q", 0], ["1", 0], ["a", 0], ["0", 0], ["z", 0], ["z", 0], ["z", 0], ["z", 0], ["x", 0], ["0", 0], ["q", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["q", 0], ["x", 0], ["i", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["x", 0], ["0", 0], ["w", 0], ["s", 0], ["q", 0], ["1", 0], ["s", 0], ["0", 0], ["b", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["q", 0], ["1", 0], ["if", 0], ["z", 0], ["i", 0], ["i", 0], ["q", 0], ["x", 0], ["b", 0], ["true", 0], ["if", 0], ["b", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["false", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["c", 0], ["1", 0], ["p", 0], ["b", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["p", 0], ["j", 0], ["b", 0], ["j", 0], ["i", 0], ["l", 0], ["p", 0], ["sort", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["p", 0], ["j", 0], ["c", 0], ["0", 0], ["break", 0], ["if", 0], ["c", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["math", 0], ["sys", 0], ["def", 0], ["main", 0], ["n", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mask", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["mask", 0], ["append", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["mask", 0], ["append", 0], ["l", 0], ["a", 0], ["n", 0], ["1", 0], ["a", 0], ["0", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["path", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["path", 0], ["append", 0], ["b", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["path", 0], ["append", 0], ["l", 0], ["b", 0], ["n", 0], ["1", 0], ["b", 0], ["0", 0], ["for", 0], ["offset", 0], ["in", 0], ["range", 0], ["n", 0], ["flag", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["mask", 0], ["i", 0], ["offset", 0], ["n", 0], ["path", 0], ["i", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s1", 0], ["a", 0], ["n", 0], ["1", 0], ["s2", 0], ["b", 0], ["n", 0], ["1", 0], ["x1", 0], ["l", 0], ["s1", 0], ["x2", 0], ["l", 0], ["s2", 0], ["c", 0], ["d", 0], ["c", 0], ["append", 0], ["a", 0], ["0", 0], ["x1", 0], ["d", 0], ["append", 0], ["b", 0], ["0", 0], ["x2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["c", 0], ["append", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["d", 0], ["append", 0], ["b", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["true", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["c", 0], ["j", 0], ["d", 0], ["j", 0], ["i", 0], ["n", 0], ["k", 0], ["false", 0], ["if", 0], ["k", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["n", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ki", 0], ["k", 0], ["0", 0], ["si", 0], ["s", 0], ["0", 0], ["tmp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["ki", 0], ["append", 0], ["k", 0], ["i", 0], ["k", 0], ["i", 0], ["1", 0], ["si", 0], ["append", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["ki", 0], ["0", 0], ["l", 0], ["k", 0], ["1", 0], ["si", 0], ["0", 0], ["l", 0], ["s", 0], ["1", 0], ["if", 0], ["join", 0], ["map", 0], ["str", 0], ["ki", 0], ["2", 0], ["find", 0], ["join", 0], ["map", 0], ["str", 0], ["si", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["kef", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sas", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dkef", 0], ["kef", 0], ["i", 0], ["1", 0], ["kef", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dkef", 0], ["append", 0], ["l", 0], ["kef", 0], ["n", 0], ["1", 0], ["kef", 0], ["0", 0], ["dsas", 0], ["sas", 0], ["i", 0], ["1", 0], ["sas", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dsas", 0], ["append", 0], ["l", 0], ["sas", 0], ["n", 0], ["1", 0], ["sas", 0], ["0", 0], ["if", 0], ["join", 0], ["map", 0], ["str", 0], ["dkef", 0], ["in", 0], ["join", 0], ["map", 0], ["str", 0], ["dsas", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d1", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["d2", 0], ["deque", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["false", 0], ["if", 0], ["n", 0], ["1", 0], ["ans", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ans", 0], ["break", 0], ["diff", 0], ["d1", 0], ["0", 0], ["d2", 0], ["0", 0], ["l", 0], ["fl", 0], ["true", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["d1", 0], ["j", 0], ["d2", 0], ["j", 0], ["l", 0], ["diff", 0], ["fl", 0], ["false", 0], ["if", 0], ["fl", 0], ["ans", 0], ["true", 0], ["d2", 0], ["rotate", 0], ["1", 0], ["print", 0], ["no", 0], ["yes", 0], ["ans", 0], ["k", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["d", 0], ["b", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["c", 0], ["n", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["1", 0], ["d", 0], ["n", 0], ["b", 0], ["1", 0], ["b", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["c", 0], ["d", 0], ["i", 0], ["d", 0], ["i", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["def", 0], ["debug", 0], ["x", 0], ["table", 0], ["for", 0], ["name", 0], ["val", 0], ["in", 0], ["table", 0], ["items", 0], ["if", 0], ["x", 0], ["is", 0], ["val", 0], ["print", 0], ["debug", 0], ["format", 0], ["name", 0], ["val", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["return", 0], ["none", 0], ["def", 0], ["solve", 0], ["n", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["b", 0], ["r", 0], ["sorted", 0], ["b", 0], ["i", 0], ["l", 0], ["for", 0], ["b", 0], ["in", 0], ["b", 0], ["if", 0], ["a", 0], ["b", 0], ["r", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0015781167806417674, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.000676335763132186, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.014113957135389441, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.007841087297438574, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0015781167806417674, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.000676335763132186, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.014113957135389441, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.007841087297438574, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nLet's consider all integers in the range from $1$ to $n$ (inclusive).\n\nAmong all pairs of distinct integers in this range, find the maximum possible greatest common divisor of integers in pair. Formally, find the maximum value of $\\mathrm{gcd}(a, b)$, where $1 \\leq a < b \\leq n$.\n\nThe greatest common divisor, $\\mathrm{gcd}(a, b)$, of two positive integers $a$ and $b$ is the biggest integer that is a divisor of both $a$ and $b$.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 100$)  — the number of test cases. The description of the test cases follows.\n\nThe only line of each test case contains a single integer $n$ ($2 \\leq n \\leq 10^6$).\n\n\n-----Output-----\n\nFor each test case, output the maximum value of $\\mathrm{gcd}(a, b)$ among all $1 \\leq a < b \\leq n$.\n\n\n-----Example-----\nInput\n2\n3\n5\n\nOutput\n1\n2\n\n\n\n-----Note-----\n\nIn the first test case, $\\mathrm{gcd}(1, 2) = \\mathrm{gcd}(2, 3) = \\mathrm{gcd}(1, 3) = 1$.\n\nIn the second test case, $2$ is the maximum possible value, corresponding to $\\mathrm{gcd}(2, 4)$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\tprint(n//2)\n", "for _ in range(int(input())):\n\t# a, b = map(int, input().split())\n\tn = int(input())\n\t# arr = list(map(int, input().split()))\n\ta = n // 2\n\tprint(a)\n", "for _ in range(int(input())):\n\tn = int(input())\n\tprint(n // 2)\n", "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\nORDA = 97  # a\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n\tif n < 2: return list()\n\tprime = [True for _ in range(n + 1)]\n\tp = 3\n\twhile p * p <= n:\n\t\tif prime[p]:\n\t\t\tfor i in range(p * 2, n + 1, p):\n\t\t\t\tprime[i] = False\n\t\tp += 2\n\tr = [2]\n\tfor p in range(3, n + 1, 2):\n\t\tif prime[p]:\n\t\t\tr.append(p)\n\treturn r\ndef divs(n, start=1):\n\tr = []\n\tfor i in range(start, int(math.sqrt(n) + 1)):\n\t\tif (n % i == 0):\n\t\t\tif (n / i == i):\n\t\t\t\tr.append(i)\n\t\t\telse:\n\t\t\t\tr.extend([i, n // i])\n\treturn r\ndef divn(n, primes):\n\tdivs_number = 1\n\tfor i in primes:\n\t\tif n == 1:\n\t\t\treturn divs_number\n\t\tt = 1\n\t\twhile n % i == 0:\n\t\t\tt += 1\n\t\t\tn //= i\n\t\tdivs_number *= t\ndef prime(n):\n\tif n == 2: return True\n\tif n % 2 == 0 or n <= 1: return False\n\tsqr = int(math.sqrt(n)) + 1\n\tfor d in range(3, sqr, 2):\n\t\tif n % d == 0: return False\n\treturn True\ndef convn(number, base):\n\tnewnumber = 0\n\twhile number > 0:\n\t\tnewnumber += number % base\n\t\tnumber //= base\n\treturn newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\ndef ispal(s):\n\tfor i in range(len(s) // 2 + 1):\n\t\tif s[i] != s[-i - 1]:\n\t\t\treturn False\n\treturn True\n\n\nfor _ in range(ii()):\n\tn = ii()\n\tprint(n // 2)\n", "def r1(t):\n\treturn t(input())\n\ndef r2(t):\n\treturn [t(i) for i in input().split()]\n\nfor _ in range(int(input())):\n\tn = r1(int)\n\tprint(n//2)\n", "t = int(input())\n\nfor case in range(t):\n\tn = int(input())\n\tans = n // 2\n\tprint(ans)\n", "import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn map(int, sys.stdin.readline().split())\n\ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\tn = II()\n\tprint(n//2)\n", "t=int(input())\nfor _ in range(t):\n\tn=int(input())\n\tn=(n//2)*2\n\tprint(n//2)\n", "import sys\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\ndef solve():\n\tn, = I()\n\tprint(n // 2)\n\nt, = I()\nwhile t:\n\tt -= 1\n\tsolve()\n\n\n\"\"\"\nFacts and Data representation\n\"\"\"\n", "T = int(input())\nfor i in range(T):\n\tn = int(input())\n\tprint(n//2 if n != 1 else 1)\n", "for i in range(int(input())):\n\tn = int(input())\n\tprint(n//2)\n", "t = int(input())\n\nfor T in range(t):\n\tn = int(input())\n\tif n % 2 == 0:\n\t\tresult = n//2\n\telse:\n\t\tresult = (n - 1)//2\n\tprint(result)\n"], "id": "id8735"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8735", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["let", 4], ["s", 4], ["consider", 4], ["all", 4], ["integers", 4], ["in", 4], ["the", 4], ["range", 4], ["from", 4], ["1", 4], ["to", 4], ["n", 4], ["inclusive", 4], ["among", 4], ["all", 4], ["pairs", 4], ["of", 4], ["distinct", 4], ["integers", 4], ["in", 4], ["this", 4], ["range", 4], ["find", 4], ["the", 4], ["maximum", 4], ["possible", 4], ["greatest", 4], ["common", 4], ["divisor", 4], ["of", 4], ["integers", 4], ["in", 4], ["pair", 4], ["formally", 4], ["find", 4], ["the", 4], ["maximum", 4], ["value", 4], ["of", 4], ["mathrm", 4], ["gcd", 4], ["a", 4], ["b", 4], ["where", 4], ["1", 4], ["leq", 4], ["a", 4], ["b", 4], ["leq", 4], ["n", 4], ["the", 4], ["greatest", 4], ["common", 4], ["divisor", 4], ["mathrm", 4], ["gcd", 4], ["a", 4], ["b", 4], ["of", 4], ["two", 4], ["positive", 4], ["integers", 4], ["a", 4], ["and", 4], ["b", 4], ["is", 4], ["the", 0], ["biggest", 0], ["integer", 0], ["that", 0], ["is", 0], ["a", 0], ["divisor", 0], ["of", 0], ["both", 0], ["a", 0], ["and", 0], ["b", 0], ["input", 0], ["the", 5], ["first", 4], ["line", 4], ["contains", 4], ["a", 4], ["single", 4], ["integer", 6], ["t", 6], ["1", 4], ["leq", 4], ["t", 4], ["leq", 4], ["100", 4], ["—", 4], ["the", 11], ["number", 4], ["of", 4], ["test", 4], ["cases", 4], ["the", 4], ["description", 4], ["of", 4], ["the", 4], ["test", 6], ["cases", 6], ["follows", 5], ["the", 4], ["only", 4], ["line", 4], ["of", 4], ["each", 4], ["test", 4], ["case", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["2", 0], ["leq", 0], ["n", 0], ["leq", 0], ["10", 0], ["6", 0], ["output", 0], ["for", 4], ["each", 4], ["test", 4], ["case", 4], ["output", 4], ["the", 4], ["maximum", 4], ["value", 4], ["of", 4], ["mathrm", 0], ["gcd", 0], ["a", 0], ["b", 0], ["among", 0], ["all", 0], ["1", 0], ["leq", 0], ["a", 0], ["b", 0], ["leq", 0], ["n", 0], ["example", 0], ["input", 0], ["2", 0], ["3", 0], ["5", 0], ["output", 0], ["1", 0], ["2", 0], ["note", 0], ["in", 4], ["the", 4], ["first", 4], ["test", 4], ["case", 4], ["mathrm", 4], ["gcd", 4], ["1", 4], ["2", 4], ["mathrm", 4], ["gcd", 4], ["2", 4], ["3", 4], ["mathrm", 4], ["gcd", 4], ["1", 4], ["3", 4], ["1", 4], ["in", 4], ["the", 4], ["second", 4], ["test", 4], ["case", 4], ["2", 0], ["is", 0], ["the", 0], ["maximum", 0], ["possible", 0], ["value", 0], ["corresponding", 0], ["to", 0], ["mathrm", 0], ["gcd", 0], ["2", 0], ["4", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6914893617021277, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1697211476466796, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.89, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.22225, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6861702127659575, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.16923758865248228, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.89, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.22225, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["n", 0], ["2", 0], ["print", 0], ["a", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["itertools", 0], ["import", 0], ["functools", 0], ["import", 0], ["collections", 0], ["import", 0], ["operator", 0], ["import", 0], ["fileinput", 0], ["import", 0], ["copy", 0], ["orda", 0], ["97", 0], ["a", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["mi", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["lcm", 0], ["a", 0], ["b", 0], ["return", 0], ["abs", 0], ["a", 0], ["b", 0], ["math", 0], ["gcd", 0], ["a", 0], ["b", 0], ["def", 0], ["revn", 0], ["n", 0], ["return", 0], ["str", 0], ["n", 0], ["1", 0], ["def", 0], ["dd", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["int", 0], ["def", 0], ["ddl", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["def", 0], ["sieve", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["list", 0], ["prime", 0], ["true", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["p", 0], ["3", 0], ["while", 0], ["p", 0], ["p", 0], ["n", 0], ["if", 0], ["prime", 0], ["p", 2], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["p", 0], ["2", 0], ["n", 0], ["1", 0], ["p", 0], ["prime", 0], ["i", 0], ["false", 0], ["p", 0], ["2", 0], ["r", 0], ["2", 0], ["for", 0], ["p", 0], ["in", 0], ["range", 0], ["3", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["prime", 0], ["p", 0], ["r", 0], ["append", 0], ["p", 0], ["return", 0], ["r", 0], ["def", 0], ["divs", 0], ["n", 0], ["start", 0], ["1", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["if", 0], ["n", 0], ["i", 0], ["i", 0], ["r", 0], ["append", 0], ["i", 0], ["else", 0], ["r", 0], ["extend", 0], ["i", 0], ["n", 0], ["i", 0], ["return", 0], ["r", 0], ["def", 0], ["divn", 0], ["n", 0], ["primes", 0], ["divs", 0], ["number", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["primes", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["divs", 0], ["number", 0], ["t", 0], ["1", 0], ["while", 0], ["n", 0], ["i", 0], ["0", 0], ["t", 0], ["1", 0], ["n", 0], ["i", 0], ["divs", 0], ["number", 0], ["t", 0], ["def", 0], ["prime", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["true", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["or", 0], ["n", 0], ["1", 0], ["return", 0], ["false", 0], ["sqr", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["3", 0], ["sqr", 0], ["2", 0], ["if", 0], ["n", 0], ["d", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["def", 0], ["convn", 0], ["number", 0], ["base", 0], ["newnumber", 0], ["0", 0], ["while", 0], ["number", 0], ["0", 0], ["newnumber", 0], ["number", 0], ["base", 0], ["number", 0], ["base", 0], ["return", 0], ["newnumber", 0], ["def", 0], ["cdiv", 0], ["n", 0], ["k", 0], ["return", 0], ["n", 0], ["k", 0], ["n", 0], ["k", 0], ["0", 0], ["def", 0], ["ispal", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["2", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["for", 0], ["in", 0], ["range", 0], ["ii", 0], ["n", 0], ["ii", 0], ["print", 0], ["n", 0], ["2", 0], ["def", 0], ["r1", 0], ["t", 0], ["return", 0], ["t", 0], ["input", 0], ["def", 0], ["r2", 0], ["t", 0], ["return", 0], ["t", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["r1", 0], ["int", 0], ["print", 0], ["n", 0], ["2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["case", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["n", 0], ["2", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["mi", 0], ["return", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["si", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["t", 0], ["ii", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["ii", 0], ["print", 0], ["n", 0], ["2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["n", 0], ["n", 0], ["2", 0], ["2", 0], ["print", 0], ["n", 0], ["2", 0], ["import", 0], ["sys", 0], ["inf", 0], ["10", 0], ["20", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["i", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["from", 0], ["math", 0], ["import", 0], ["gcd", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["counter", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["as", 0], ["bl", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["def", 0], ["solve", 0], ["n", 0], ["i", 0], ["print", 0], ["n", 0], ["2", 0], ["t", 0], ["i", 0], ["while", 0], ["t", 0], ["t", 0], ["1", 0], ["solve", 0], ["facts", 0], ["and", 0], ["data", 0], ["representation", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2", 0], ["if", 0], ["n", 0], ["1", 0], ["else", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["result", 0], ["n", 0], ["2", 0], ["else", 0], ["result", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["result", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.003629764065335753, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0018148820326678765, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.02486678507992895, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.012433392539964476, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.003629764065335753, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0018148820326678765, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.02486678507992895, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.012433392539964476, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nHave you ever played Hanabi? If not, then you've got to try it out! This problem deals with a simplified version of the game.\n\nOverall, the game has 25 types of cards (5 distinct colors and 5 distinct values). Borya is holding n cards. The game is somewhat complicated by the fact that everybody sees Borya's cards except for Borya himself. Borya knows which cards he has but he knows nothing about the order they lie in. Note that Borya can have multiple identical cards (and for each of the 25 types of cards he knows exactly how many cards of this type he has).\n\nThe aim of the other players is to achieve the state when Borya knows the color and number value of each of his cards. For that, other players can give him hints. The hints can be of two types: color hints and value hints. \n\nA color hint goes like that: a player names some color and points at all the cards of this color. \n\nSimilarly goes the value hint. A player names some value and points at all the cards that contain the value.\n\nDetermine what minimum number of hints the other players should make for Borya to be certain about each card's color and value.\n\n\n-----Input-----\n\nThe first line contains integer n (1 ≤ n ≤ 100) — the number of Borya's cards. The next line contains the descriptions of n cards. The description of each card consists of exactly two characters. The first character shows the color (overall this position can contain five distinct letters — R, G, B, Y, W). The second character shows the card's value (a digit from 1 to 5). Borya doesn't know exact order of the cards they lie in.\n\n\n-----Output-----\n\nPrint a single integer — the minimum number of hints that the other players should make.\n\n\n-----Examples-----\nInput\n2\nG3 G3\n\nOutput\n0\n\nInput\n4\nG4 R4 R3 B3\n\nOutput\n2\n\nInput\n5\nB1 Y1 W1 G1 R1\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample Borya already knows for each card that it is a green three.\n\nIn the second sample we can show all fours and all red cards.\n\nIn the third sample you need to make hints about any four colors.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["\"\"\"\nCodeforces Round 253 Div 1 Problem A\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef read(mode=2):\n\t# 0: String\n\t# 1: List of strings\n\t# 2: List of integers\n\tinputs = input().strip()\n\tif mode == 0:\n\t\treturn inputs\n\tif mode == 1:\n\t\treturn inputs.split()\n\tif mode == 2:\n\t\treturn [int(x) for x in inputs.split()]\n\ndef write(s=\"\\n\"):\n\tif isinstance(s, list): s = \" \".join(map(str,s))\n\ts = str(s)\n\tprint(s, end=\"\")\n\n################################################### SOLUTION\nimport itertools\ncovers = itertools.product([0,1], repeat=10)\n\nn, = read()\ns = read(1)\na = [0] * 25\ncolors = \"RGBYW\"\nfor i in s:\n\ta[colors.index(i[0]) * 5 + int(i[1])-1] |= 1\n\ndef check(cover):\n\tnonlocal a\n\tunknowns = [0] * 11\n\tfor i in range(25):\n\t\tif not a[i]: continue\n\t\tid = -1\n\t\tif not cover[i%5]: id = 5+i//5\n\t\tif not cover[5+i//5]:\n\t\t\tif id == -1:\n\t\t\t\tid = i%5\n\t\t\telse:\n\t\t\t\tid = 10\n\t\tif id > -1:\n\t\t\tif unknowns[id]: return False\n\t\t\tunknowns[id] = 1\n\treturn True\n\nmn = 99\nfor i in covers:\n\tif check(i):\n\t\tmn = min(mn, sum(i))\n\nprint(mn)\n", "input()\ncolour = {'R': 0, 'G': 1, 'B': 2, 'Y': 3, 'W': 4}\ncards = {(colour[c], ord(v) - ord('1')) for c, v in input().split()}\n\ndef ok(cs, vs):\n\treturn len({\n\t\t\t(c if (cs >> c) & 1 else -1, v if (vs >> v) & 1 else -1)\n\t\t\tfor c, v in cards\n\t\t}) == len(cards)\n\nprint((min(bin(cs).count('1') + bin(vs).count('1')\n\tfor cs in range(1<<5) for vs in range(1<<5)\n\tif ok(cs, vs)\n)))\n", "import itertools\n\n\ninput()\ncards = tuple(set(str.split(input())))\nn = len(cards)\n\nif n == 1:\n\n\tprint(0)\n\treturn\n\nsymbols = \"RGBYW12345\"\nfor l in range(1, 10):\n\n\tfor comb in itertools.combinations(symbols, l):\n\n\t\tpositions = [cards] * n\n\t\tfor symbol in comb:\n\n\t\t\tfor i in range(n):\n\n\t\t\t\tif symbol in cards[i]:\n\n\t\t\t\t\tpositions[i] = tuple([c for c in positions[i] if symbol in c])\n\n\t\t\t\telse:\n\n\t\t\t\t\tpositions[i] = tuple([c for c in positions[i] if symbol not in c])\n\n\t\tif sum(map(len, positions)) == n:\n\n\t\t\tprint(l)\n\t\t\treturn\n", "input()\ncolour = dict(list(zip('RGBYW', list(range(5)))))\ncards = {(colour[c], ord(v) - ord('1')) for c, v in input().split()}\n\nprint((min(bin(cs).count('1') + bin(vs).count('1')\n\tfor cs in range(1<<5) for vs in range(1<<5)\n\tif len({\n\t\t(c if (cs >> c) & 1 else -1, v if (vs >> v) & 1 else -1)\n\t\tfor c, v in cards\n\t}) == len(cards)\n)))\n", "from itertools import *\npower = lambda i: chain.from_iterable(combinations(i, r) for r in range(len(i) + 1))\ninput()\ncards = set(input().split())\nprint((min(len(s) for s in power(\"RGBYW12345\") if\n\tlen(set(str(set(s) & set(t)) for t in cards)) == len(cards)\n)))\n", "def check(hint, Card):\n\tfor i in Card :\n\t\tfor j in Card :\n\t\t\tif i == j : continue\n\t\t\telif i[0] == j[0] :\n\t\t\t\tif i[1] not in hint and j[1] not in hint :\n\t\t\t\t\treturn False\n\t\t\telif i[1] == j[1] :\n\t\t\t\tif i[0] not in hint and j[0] not in hint :\n\t\t\t\t\treturn False\n\t\t\telse :\n\t\t\t\tif i[0] not in hint and i[1] not in hint and j[0] not in hint and j[1] not in hint :\n\t\t\t\t\treturn False\n\treturn True\nHH = \"RGBYW12345\"\nn = int(input())\nCard = list(input().split(' '))\nans = 20\nfor i in range(1024):\n\thint = \"\"\n\tcnt = 0\n\tfor j in range(10) :\n\t\tif (2**j)&i > 0 :\n\t\t\thint += HH[j]\n\t\t\tcnt+=1\n\tif check(hint, Card) :\n\t\tans = min(ans, cnt)\nprint(ans)        \n", "n = int(input())\ncolour = dict(zip('RGBYW', range(5, 10)))\ncards = list({2 ** colour[c] + 2 ** (ord(v) - ord('1')) for c, v in input().split()})\nans = 10\nn = len(cards)\nif n > 1:\n\tfor bit in range(2 ** 10):\n\t\tok = True\n\t\tfor i in range(n - 1):\n\t\t\tfor j in range(i + 1, n):\n\t\t\t\tif cards[i] & cards[j] == 0:\n\t\t\t\t\tif (cards[i] | cards[j]) & bit == 0:\n\t\t\t\t\t\tok = False\n\t\t\t\t\t\tbreak\n\t\t\t\telif cards[i] != cards[j]:\n\t\t\t\t\tif (cards[i] ^ cards[j]) & bit == 0:\n\t\t\t\t\t\tok = False\n\t\t\t\t\t\tbreak\n\t\t\tif not ok:\n\t\t\t\tbreak\n\t\tif ok:\n\t\t\tans = min(bin(bit).count('1'), ans)\n\tprint(ans)\nelse:\n\tprint(0)\n", "def Checker(hint,card):\n\tfor a in card:\n\t\tfor b in card:\n\t\t\tif a == b:\n\t\t\t\tcontinue\n\t\t\telif a[0] == b[0]:\n\t\t\t\tif a[1] not in hint and b[1] not in hint:\n\t\t\t\t\treturn False\n\t\t\telif a[1] == b[1]:\n\t\t\t\tif a[0] not in hint and b[0] not in hint:\n\t\t\t\t\treturn False\n\t\t\telif a[0] not in hint and a[1] not in hint and b[0] not in hint and b[1] not in hint:\n\t\t\t\treturn False\n\treturn True\n\nuser_input=int(input())\nuser_input = input()\nCard=user_input.split(' ')\npossible_chars=\"RGBYW12345\"\n\nfinal_answer=10\n\ncard_set=set(Card)\nif len(card_set)==1:\n\tprint (\"0\")\n\nelse:\n\n\tfor i in range(1024):\n\t\thint=\"\"\n\t\tcounter=0\n\t\tfor j in range(9,-1,-1):\n\t\t\tif (i-(2**j))>0:\n\t\t\t\thint+=possible_chars[j]\n\t\t\t\ti-=2**j\n\t\t\t\tcounter+=1\n\n\t\tif Checker(hint,card_set):\n\t\t\tfinal_answer=min(final_answer,counter)\n\n\tprint (final_answer)\n", "from itertools import combinations\nn = int(input())\ncolors = {'R':0,'G':1,'B':2,'Y':3,'W':4}\nletters = {'1':0,'2':1,'3':2,'4':3,'5':4}\nl = list(set(list(input().split())))\ndef checker(hint,cards):\n\tfor i in cards:\n\t\tfor j in cards:\n\t\t\tif i == j:\n\t\t\t\tcontinue\n\t\t\tif i[0] == j[0]:\n\t\t\t\tif i[1] not in hint and j[1] not in hint:\n\t\t\t\t\treturn False\n\t\t\telif i[1] == j[1]:\n\t\t\t\tif i[0] not in hint and j[0] not in hint:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tif i[0] not in hint and i[1] not in hint and j[0] not in hint and j[1] not in hint:\n\t\t\t\t\treturn False\n\treturn True\nresult = []\nfor i in l:\n\tif i[0] not in result:\n\t\tresult.append(i[0])\n\tif i[1] not in result:\n\t\tresult.append(i[1])\nall_hints = []\nfor i in range(1,len(result)+1):\n\tcomb = combinations(result,i)\n\tall_hints += comb\nmin_hint = len(result)\nif len(l) == 1:\n\tprint(0)\nelse:\n\tfor i in all_hints:\n\t\tif checker(i,l):\n\t\t\tmin_hint = min(len(i),min_hint)\n\tprint (min_hint)\n\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "from itertools import chain, combinations\nfrom copy import deepcopy\ndef powerset(iterable):\n\ts = list(iterable)\n\treturn chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\nn = int(input())\nlocations = input().split()\nmatrixG = [[0]*5 for i in range(5)]\nfor i in locations:\n\tif i[0] == \"R\":\n\t\tmatrixG[0][int(i[1])-1] += 1\n\telif i[0] == \"G\":\n\t\tmatrixG[1][int(i[1])-1] += 1\n\telif i[0] == \"B\":\n\t\tmatrixG[2][int(i[1])-1] += 1\n\telif i[0] == \"Y\":\n\t\tmatrixG[3][int(i[1])-1] += 1\n\telif i[0] == \"W\":\n\t\tmatrixG[4][int(i[1])-1] += 1\n\nfor i in list(powerset(list(range(10)))):\n\tmatrix = deepcopy(matrixG)\n\tcolor = []\n\tvalue = []\n\tfor j in i:\n\t\tif j <= 4:\n\t\t\tcolor.append(j)\n\t\telse:\n\t\t\tvalue.append(j)\n\tfor v in value:\n\t\tfor c in color:\n\t\t\tmatrix[c][v-5] = 0\n\t\tctr = 0\n\t\tfor r in range(5):\n\t\t\tif matrix[r][v-5] == 0:\n\t\t\t\tctr += 1\n\t\tif ctr == 4:\n\t\t\tfor r in range(5):\n\t\t\t\tmatrix[r][v-5] = 0\n\tfor c in color:\n\t\tif matrix[c].count(0) == 4:\n\t\t\tmatrix[c] = [0]*5\n\tctr = 0\n\tfor k in range(5):\n\t\tfor j in range(5):\n\t\t\tif matrix[k][j] == 0:\n\t\t\t\tctr += 1\n\tif ctr == 24:\n\t\tprint(len(i))\n\t\tbreak\n", "input()\n\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\n\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n\n\n\n\n# Made By Mostafa_Khaled\n", "input()\np={ (1<< 'RGBYW'.index(c)) + (1<<int(k)+4) for c, k in input().split()}\nmn=20\nres=90\nfor i in range(1024):\n\tif len(p)==len(set(i&j for j in p)):\n\t\tmn=min(mn,bin(i).count('1'))\nprint(mn)\n"], "id": "id9458"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9458", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["have", 1], ["you", 1], ["ever", 1], ["played", 1], ["hanabi", 1], ["if", 1], ["not", 1], ["then", 1], ["you", 1], ["ve", 1], ["got", 1], ["to", 1], ["try", 1], ["it", 1], ["out", 1], ["this", 1], ["problem", 1], ["deals", 1], ["with", 1], ["a", 1], ["simplified", 1], ["version", 1], ["of", 1], ["the", 1], ["game", 1], ["overall", 1], ["the", 1], ["game", 1], ["has", 1], ["25", 1], ["types", 1], ["of", 1], ["cards", 1], ["5", 1], ["distinct", 1], ["colors", 1], ["and", 1], ["5", 1], ["distinct", 1], ["values", 1], ["borya", 1], ["is", 1], ["holding", 1], ["n", 1], ["cards", 1], ["the", 1], ["game", 1], ["is", 1], ["somewhat", 1], ["complicated", 1], ["by", 1], ["the", 1], ["fact", 1], ["that", 1], ["everybody", 1], ["sees", 1], ["borya", 1], ["s", 1], ["cards", 1], ["except", 1], ["for", 1], ["borya", 1], ["himself", 1], ["borya", 1], ["knows", 1], ["which", 1], ["cards", 1], ["he", 1], ["has", 1], ["but", 1], ["he", 1], ["knows", 1], ["nothing", 1], ["about", 1], ["the", 1], ["order", 1], ["they", 1], ["lie", 1], ["in", 1], ["note", 1], ["that", 1], ["borya", 1], ["can", 1], ["have", 1], ["multiple", 1], ["identical", 1], ["cards", 1], ["and", 1], ["for", 1], ["each", 1], ["of", 1], ["the", 1], ["25", 1], ["types", 1], ["of", 1], ["cards", 1], ["he", 1], ["knows", 1], ["exactly", 1], ["how", 1], ["many", 1], ["cards", 1], ["of", 1], ["this", 1], ["type", 1], ["he", 1], ["has", 1], ["the", 1], ["aim", 1], ["of", 1], ["the", 1], ["other", 1], ["players", 1], ["is", 1], ["to", 1], ["achieve", 1], ["the", 1], ["state", 1], ["when", 1], ["borya", 1], ["knows", 1], ["the", 1], ["color", 1], ["and", 1], ["number", 1], ["value", 1], ["of", 1], ["each", 1], ["of", 1], ["his", 1], ["cards", 1], ["for", 1], ["that", 1], ["other", 1], ["players", 1], ["can", 1], ["give", 1], ["him", 1], ["hints", 1], ["the", 1], ["hints", 1], ["can", 1], ["be", 1], ["of", 1], ["two", 1], ["types", 1], ["color", 1], ["hints", 1], ["and", 1], ["value", 1], ["hints", 1], ["a", 1], ["color", 1], ["hint", 1], ["goes", 1], ["like", 1], ["that", 1], ["a", 1], ["player", 1], ["names", 1], ["some", 1], ["color", 1], ["and", 1], ["points", 1], ["at", 1], ["all", 1], ["the", 1], ["cards", 1], ["of", 1], ["this", 1], ["color", 1], ["similarly", 1], ["goes", 1], ["the", 1], ["value", 1], ["hint", 1], ["a", 1], ["player", 1], ["names", 1], ["some", 1], ["value", 1], ["and", 1], ["points", 1], ["at", 1], ["all", 1], ["the", 1], ["cards", 1], ["that", 1], ["contain", 1], ["the", 1], ["value", 1], ["determine", 1], ["what", 1], ["minimum", 1], ["number", 1], ["of", 1], ["hints", 1], ["the", 1], ["other", 1], ["players", 1], ["should", 1], ["make", 1], ["for", 0], ["borya", 0], ["to", 0], ["be", 0], ["certain", 0], ["about", 0], ["each", 0], ["card", 0], ["s", 0], ["color", 0], ["and", 0], ["value", 0], ["input", 0], ["the", 5], ["first", 5], ["line", 5], ["contains", 1], ["integer", 1], ["n", 1], ["1", 1], ["≤", 1], ["n", 1], ["≤", 1], ["100", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["borya", 1], ["s", 1], ["cards", 1], ["the", 1], ["next", 1], ["line", 1], ["contains", 1], ["the", 1], ["descriptions", 1], ["of", 1], ["n", 1], ["cards", 1], ["the", 1], ["description", 1], ["of", 1], ["each", 1], ["card", 1], ["consists", 1], ["of", 1], ["exactly", 1], ["two", 1], ["characters", 1], ["the", 1], ["first", 1], ["character", 1], ["shows", 1], ["the", 1], ["color", 1], ["overall", 1], ["this", 1], ["position", 1], ["can", 1], ["contain", 1], ["five", 1], ["distinct", 1], ["letters", 1], ["—", 1], ["r", 1], ["g", 1], ["b", 1], ["y", 1], ["w", 1], ["the", 1], ["second", 1], ["character", 1], ["shows", 1], ["the", 1], ["card", 1], ["s", 1], ["value", 1], ["a", 1], ["digit", 1], ["from", 1], ["1", 1], ["to", 1], ["5", 1], ["borya", 0], ["doesn", 0], ["t", 0], ["know", 0], ["exact", 0], ["order", 0], ["of", 0], ["the", 0], ["cards", 0], ["they", 0], ["lie", 0], ["in", 0], ["output", 0], ["print", 1], ["a", 1], ["single", 1], ["integer", 1], ["—", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["hints", 0], ["that", 0], ["the", 0], ["other", 0], ["players", 0], ["should", 0], ["make", 0], ["examples", 0], ["input", 0], ["2", 0], ["g3", 0], ["g3", 0], ["output", 0], ["0", 0], ["input", 0], ["4", 0], ["g4", 0], ["r4", 0], ["r3", 0], ["b3", 0], ["output", 0], ["2", 0], ["input", 0], ["5", 0], ["b1", 0], ["y1", 0], ["w1", 0], ["g1", 0], ["r1", 0], ["output", 0], ["4", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["sample", 1], ["borya", 1], ["already", 1], ["knows", 1], ["for", 1], ["each", 1], ["card", 1], ["that", 1], ["it", 1], ["is", 1], ["a", 1], ["green", 1], ["three", 1], ["in", 1], ["the", 1], ["second", 1], ["sample", 1], ["we", 1], ["can", 1], ["show", 1], ["all", 1], ["fours", 1], ["and", 1], ["all", 1], ["red", 1], ["cards", 1], ["in", 1], ["the", 0], ["third", 0], ["sample", 0], ["you", 0], ["need", 0], ["to", 0], ["make", 0], ["hints", 0], ["about", 0], ["any", 0], ["four", 0], ["colors", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8057742782152231, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7994750656167978, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9033078880407125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8972010178117047, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8057742782152231, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7994750656167978, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9033078880407125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8972010178117047, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["codeforces", 0], ["round", 0], ["253", 0], ["div", 0], ["1", 0], ["problem", 0], ["a", 0], ["author", 0], ["chaotic", 0], ["iak", 0], ["language", 0], ["python", 0], ["3", 0], ["3", 0], ["4", 0], ["def", 0], ["read", 0], ["mode", 0], ["2", 0], ["0", 0], ["string", 0], ["1", 0], ["list", 0], ["of", 0], ["strings", 0], ["2", 0], ["list", 0], ["of", 0], ["integers", 0], ["inputs", 0], ["input", 0], ["strip", 0], ["if", 0], ["mode", 0], ["0", 0], ["return", 0], ["inputs", 0], ["if", 0], ["mode", 0], ["1", 0], ["return", 0], ["inputs", 0], ["split", 0], ["if", 0], ["mode", 0], ["2", 0], ["return", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["inputs", 0], ["split", 0], ["def", 0], ["write", 0], ["s", 0], ["n", 0], ["if", 0], ["isinstance", 0], ["s", 0], ["list", 0], ["s", 0], ["join", 0], ["map", 0], ["str", 0], ["s", 0], ["s", 0], ["str", 0], ["s", 0], ["print", 0], ["s", 0], ["end", 0], ["solution", 0], ["import", 0], ["itertools", 0], ["covers", 0], ["itertools", 0], ["product", 0], ["0", 0], ["1", 0], ["repeat", 0], ["10", 0], ["n", 0], ["read", 0], ["s", 0], ["read", 0], ["1", 0], ["a", 0], ["0", 0], ["25", 0], ["colors", 0], ["rgbyw", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["a", 0], ["colors", 0], ["index", 0], ["i", 0], ["0", 0], ["5", 0], ["int", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["def", 0], ["check", 0], ["cover", 0], ["nonlocal", 0], ["a", 0], ["unknowns", 0], ["0", 0], ["11", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["25", 0], ["if", 0], ["not", 0], ["a", 0], ["i", 0], ["continue", 0], ["id", 0], ["1", 0], ["if", 0], ["not", 0], ["cover", 0], ["i", 0], ["5", 0], ["id", 0], ["5", 0], ["i", 0], ["5", 0], ["if", 0], ["not", 0], ["cover", 0], ["5", 0], ["i", 0], ["5", 0], ["if", 0], ["id", 0], ["1", 0], ["id", 0], ["i", 0], ["5", 0], ["else", 0], ["id", 0], ["10", 0], ["if", 0], ["id", 0], ["1", 0], ["if", 0], ["unknowns", 0], ["id", 0], ["return", 0], ["false", 0], ["unknowns", 0], ["id", 0], ["1", 0], ["return", 0], ["true", 0], ["mn", 0], ["99", 0], ["for", 0], ["i", 0], ["in", 0], ["covers", 0], ["if", 0], ["check", 0], ["i", 0], ["mn", 0], ["min", 0], ["mn", 0], ["sum", 0], ["i", 0], ["print", 0], ["mn", 0], ["input", 0], ["colour", 0], ["r", 0], ["0", 0], ["g", 0], ["1", 0], ["b", 0], ["2", 0], ["y", 0], ["3", 0], ["w", 0], ["4", 0], ["cards", 0], ["colour", 0], ["c", 0], ["ord", 0], ["v", 0], ["ord", 0], ["1", 0], ["for", 0], ["c", 0], ["v", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["ok", 0], ["cs", 0], ["vs", 0], ["return", 0], ["len", 0], ["c", 0], ["if", 0], ["cs", 0], ["c", 0], ["1", 0], ["else", 0], ["1", 0], ["v", 0], ["if", 0], ["vs", 0], ["v", 0], ["1", 0], ["else", 0], ["1", 0], ["for", 0], ["c", 0], ["v", 0], ["in", 0], ["cards", 0], ["len", 0], ["cards", 0], ["print", 0], ["min", 0], ["bin", 0], ["cs", 0], ["count", 0], ["1", 0], ["bin", 0], ["vs", 0], ["count", 0], ["1", 0], ["for", 0], ["cs", 0], ["in", 0], ["range", 0], ["1", 0], ["5", 0], ["for", 0], ["vs", 0], ["in", 0], ["range", 0], ["1", 0], ["5", 0], ["if", 0], ["ok", 0], ["cs", 0], ["vs", 0], ["import", 0], ["itertools", 0], ["input", 0], ["cards", 0], ["tuple", 0], ["set", 0], ["str", 0], ["split", 0], ["input", 0], ["n", 0], ["len", 0], ["cards", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["0", 0], ["return", 0], ["symbols", 0], ["rgbyw12345", 0], ["for", 0], ["l", 0], ["in", 0], ["range", 0], ["1", 0], ["10", 0], ["for", 0], ["comb", 0], ["in", 0], ["itertools", 0], ["combinations", 0], ["symbols", 0], ["l", 0], ["positions", 0], ["cards", 0], ["n", 0], ["for", 0], ["symbol", 0], ["in", 0], ["comb", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["symbol", 0], ["in", 0], ["cards", 0], ["i", 0], ["positions", 0], ["i", 0], ["tuple", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["positions", 0], ["i", 0], ["if", 0], ["symbol", 0], ["in", 0], ["c", 0], ["else", 0], ["positions", 0], ["i", 0], ["tuple", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["positions", 0], ["i", 0], ["if", 0], ["symbol", 0], ["not", 0], ["in", 0], ["c", 0], ["if", 0], ["sum", 0], ["map", 0], ["len", 0], ["positions", 0], ["n", 0], ["print", 0], ["l", 0], ["return", 0], ["input", 0], ["colour", 0], ["dict", 0], ["list", 0], ["zip", 0], ["rgbyw", 0], ["list", 0], ["range", 0], ["5", 0], ["cards", 0], ["colour", 0], ["c", 0], ["ord", 0], ["v", 0], ["ord", 0], ["1", 0], ["for", 0], ["c", 0], ["v", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["bin", 0], ["cs", 0], ["count", 0], ["1", 0], ["bin", 0], ["vs", 0], ["count", 0], ["1", 0], ["for", 0], ["cs", 0], ["in", 0], ["range", 0], ["1", 0], ["5", 0], ["for", 0], ["vs", 0], ["in", 0], ["range", 0], ["1", 0], ["5", 0], ["if", 0], ["len", 0], ["c", 0], ["if", 0], ["cs", 0], ["c", 0], ["1", 0], ["else", 0], ["1", 0], ["v", 0], ["if", 0], ["vs", 0], ["v", 0], ["1", 0], ["else", 0], ["1", 0], ["for", 0], ["c", 0], ["v", 0], ["in", 0], ["cards", 0], ["len", 0], ["cards", 0], ["from", 0], ["itertools", 0], ["import", 0], ["power", 0], ["lambda", 0], ["i", 0], ["chain", 0], ["from", 0], ["iterable", 0], ["combinations", 0], ["i", 0], ["r", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["len", 0], ["i", 0], ["1", 0], ["input", 0], ["cards", 0], ["set", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["len", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["power", 0], ["rgbyw12345", 0], ["if", 0], ["len", 0], ["set", 0], ["str", 0], ["set", 0], ["s", 0], ["set", 0], ["t", 0], ["for", 0], ["t", 0], ["in", 0], ["cards", 0], ["len", 0], ["cards", 0], ["def", 0], ["check", 0], ["hint", 0], ["card", 0], ["for", 0], ["i", 0], ["in", 0], ["card", 0], ["for", 0], ["j", 0], ["in", 0], ["card", 0], ["if", 0], ["i", 0], ["j", 0], ["continue", 0], ["elif", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["if", 0], ["i", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["j", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["return", 0], ["false", 0], ["elif", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["j", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["return", 0], ["false", 0], ["else", 0], ["if", 0], ["i", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["i", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["j", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["j", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["hh", 0], ["rgbyw12345", 0], ["n", 0], ["int", 0], ["input", 0], ["card", 0], ["list", 0], ["input", 0], ["split", 0], ["ans", 0], ["20", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1024", 0], ["hint", 0], ["cnt", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["10", 0], ["if", 0], ["2", 0], ["j", 0], ["i", 0], ["0", 0], ["hint", 0], ["hh", 0], ["j", 0], ["cnt", 0], ["1", 0], ["if", 0], ["check", 0], ["hint", 0], ["card", 0], ["ans", 0], ["min", 0], ["ans", 0], ["cnt", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["colour", 0], ["dict", 0], ["zip", 0], ["rgbyw", 0], ["range", 0], ["5", 0], ["10", 0], ["cards", 0], ["list", 0], ["2", 0], ["colour", 0], ["c", 0], ["2", 0], ["ord", 0], ["v", 0], ["ord", 0], ["1", 0], ["for", 0], ["c", 0], ["v", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["10", 0], ["n", 0], ["len", 0], ["cards", 0], ["if", 0], ["n", 0], ["1", 0], ["for", 0], ["bit", 0], ["in", 0], ["range", 0], ["2", 0], ["10", 0], ["ok", 0], ["true", 0], ["for", 91], ["i", 11], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["if", 0], ["cards", 0], ["i", 0], ["cards", 0], ["j", 0], ["0", 0], ["if", 0], ["cards", 0], ["i", 0], ["cards", 0], ["j", 0], ["bit", 0], ["0", 0], ["ok", 0], ["false", 0], ["break", 0], ["elif", 0], ["cards", 0], ["i", 0], ["cards", 0], ["j", 0], ["if", 0], ["cards", 0], ["i", 0], ["cards", 0], ["j", 0], ["bit", 0], ["0", 0], ["ok", 0], ["false", 0], ["break", 0], ["if", 0], ["not", 0], ["ok", 0], ["break", 0], ["if", 0], ["ok", 0], ["ans", 0], ["min", 0], ["bin", 0], ["bit", 0], ["count", 0], ["1", 0], ["ans", 0], ["print", 0], ["ans", 0], ["else", 0], ["print", 0], ["0", 0], ["def", 0], ["checker", 0], ["hint", 0], ["card", 0], ["for", 0], ["a", 0], ["in", 0], ["card", 0], ["for", 0], ["b", 0], ["in", 0], ["card", 0], ["if", 0], ["a", 0], ["b", 0], ["continue", 0], ["elif", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["if", 0], ["a", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["b", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["return", 0], ["false", 0], ["elif", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["b", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["return", 0], ["false", 0], ["elif", 0], ["a", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["a", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["b", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["b", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["user", 0], ["input", 0], ["int", 0], ["input", 0], ["user", 0], ["input", 0], ["input", 0], ["card", 0], ["user", 0], ["input", 0], ["split", 0], ["possible", 0], ["chars", 0], ["rgbyw12345", 0], ["final", 0], ["answer", 0], ["10", 0], ["card", 0], ["set", 0], ["set", 0], ["card", 0], ["if", 0], ["len", 0], ["card", 0], ["set", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1024", 0], ["hint", 0], ["counter", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["9", 0], ["1", 0], ["1", 0], ["if", 0], ["i", 0], ["2", 0], ["j", 0], ["0", 0], ["hint", 0], ["possible", 0], ["chars", 0], ["j", 0], ["i", 0], ["2", 0], ["j", 0], ["counter", 0], ["1", 0], ["if", 0], ["checker", 0], ["hint", 0], ["card", 0], ["set", 0], ["final", 0], ["answer", 0], ["min", 0], ["final", 0], ["answer", 0], ["counter", 0], ["print", 0], ["final", 0], ["answer", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["n", 0], ["int", 0], ["input", 0], ["colors", 0], ["r", 0], ["0", 0], ["g", 0], ["1", 0], ["b", 0], ["2", 0], ["y", 0], ["3", 0], ["w", 0], ["4", 0], ["letters", 0], ["1", 0], ["0", 0], ["2", 0], ["1", 0], ["3", 0], ["2", 0], ["4", 0], ["3", 0], ["5", 0], ["4", 0], ["l", 0], ["list", 0], ["set", 0], ["list", 0], ["input", 0], ["split", 0], ["def", 0], ["checker", 0], ["hint", 0], ["cards", 0], ["for", 0], ["i", 0], ["in", 0], ["cards", 0], ["for", 0], ["j", 0], ["in", 0], ["cards", 0], ["if", 0], ["i", 0], ["j", 0], ["continue", 0], ["if", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["if", 0], ["i", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["j", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["return", 0], ["false", 0], ["elif", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["j", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["return", 0], ["false", 0], ["else", 0], ["if", 0], ["i", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["i", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["j", 0], ["0", 0], ["not", 0], ["in", 0], ["hint", 0], ["and", 0], ["j", 0], ["1", 0], ["not", 0], ["in", 0], ["hint", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["result", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["if", 0], ["i", 0], ["0", 0], ["not", 0], ["in", 0], ["result", 0], ["result", 0], ["append", 0], ["i", 0], ["0", 0], ["if", 0], ["i", 0], ["1", 0], ["not", 0], ["in", 0], ["result", 0], ["result", 0], ["append", 0], ["i", 0], ["1", 0], ["all", 0], ["hints", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["result", 0], ["1", 0], ["comb", 0], ["combinations", 0], ["result", 0], ["i", 0], ["all", 0], ["hints", 0], ["comb", 0], ["min", 0], ["hint", 0], ["len", 0], ["result", 0], ["if", 0], ["len", 0], ["l", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["all", 0], ["hints", 0], ["if", 0], ["checker", 0], ["i", 0], ["l", 0], ["min", 0], ["hint", 0], ["min", 0], ["len", 0], ["i", 0], ["min", 0], ["hint", 0], ["print", 0], ["min", 0], ["hint", 0], ["input", 0], ["p", 0], ["1", 0], ["rgbyw", 0], ["index", 0], ["c", 0], ["1", 0], ["int", 0], ["k", 0], ["4", 0], ["for", 0], ["c", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["bin", 0], ["t", 0], ["count", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["1024", 0], ["if", 0], ["len", 0], ["t", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["p", 0], ["len", 0], ["p", 0], ["input", 0], ["p", 0], ["1", 0], ["rgbyw", 0], ["index", 0], ["c", 0], ["1", 0], ["int", 0], ["k", 0], ["4", 0], ["for", 0], ["c", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["bin", 0], ["t", 0], ["count", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["1024", 0], ["if", 0], ["len", 0], ["t", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["p", 0], ["len", 0], ["p", 0], ["input", 0], ["p", 0], ["1", 0], ["rgbyw", 0], ["index", 0], ["c", 0], ["1", 0], ["int", 0], ["k", 0], ["4", 0], ["for", 0], ["c", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["bin", 0], ["t", 0], ["count", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["1024", 0], ["if", 0], ["len", 0], ["t", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["p", 0], ["len", 0], ["p", 0], ["input", 0], ["p", 0], ["1", 0], ["rgbyw", 0], ["index", 0], ["c", 0], ["1", 0], ["int", 0], ["k", 0], ["4", 0], ["for", 0], ["c", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["bin", 0], ["t", 0], ["count", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["1024", 0], ["if", 0], ["len", 0], ["t", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["p", 0], ["len", 0], ["p", 0], ["input", 0], ["p", 0], ["1", 0], ["rgbyw", 0], ["index", 0], ["c", 0], ["1", 0], ["int", 0], ["k", 0], ["4", 0], ["for", 0], ["c", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["bin", 0], ["t", 0], ["count", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["1024", 0], ["if", 0], ["len", 0], ["t", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["p", 0], ["len", 0], ["p", 0], ["input", 0], ["p", 0], ["1", 0], ["rgbyw", 0], ["index", 0], ["c", 0], ["1", 0], ["int", 0], ["k", 0], ["4", 0], ["for", 0], ["c", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["bin", 0], ["t", 0], ["count", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["1024", 0], ["if", 0], ["len", 0], ["t", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["p", 0], ["len", 0], ["p", 0], ["input", 0], ["p", 0], ["1", 0], ["rgbyw", 0], ["index", 0], ["c", 0], ["1", 0], ["int", 0], ["k", 0], ["4", 0], ["for", 0], ["c", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["bin", 0], ["t", 0], ["count", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["1024", 0], ["if", 0], ["len", 0], ["t", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["p", 0], ["len", 0], ["p", 0], ["input", 0], ["p", 0], ["1", 0], ["rgbyw", 0], ["index", 0], ["c", 0], ["1", 0], ["int", 0], ["k", 0], ["4", 0], ["for", 0], ["c", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["bin", 0], ["t", 0], ["count", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["1024", 0], ["if", 0], ["len", 0], ["t", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["p", 0], ["len", 0], ["p", 0], ["input", 0], ["p", 0], ["1", 0], ["rgbyw", 0], ["index", 0], ["c", 0], ["1", 0], ["int", 0], ["k", 0], ["4", 0], ["for", 0], ["c", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["bin", 0], ["t", 0], ["count", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["1024", 0], ["if", 0], ["len", 0], ["t", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["p", 0], ["len", 0], ["p", 0], ["from", 0], ["itertools", 0], ["import", 0], ["chain", 0], ["combinations", 0], ["from", 0], ["copy", 0], ["import", 0], ["deepcopy", 0], ["def", 1], ["powerset", 1], ["iterable", 1], ["s", 55], ["list", 55], ["iterable", 54], ["return", 57], ["chain", 66], ["from", 0], ["iterable", 0], ["combinations", 0], ["s", 0], ["r", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["locations", 0], ["input", 0], ["split", 0], ["matrixg", 0], ["0", 0], ["5", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["i", 0], ["in", 0], ["locations", 0], ["if", 0], ["i", 0], ["0", 0], ["r", 0], ["matrixg", 0], ["0", 0], ["int", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["elif", 0], ["i", 0], ["0", 0], ["g", 0], ["matrixg", 0], ["1", 0], ["int", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["elif", 0], ["i", 0], ["0", 0], ["b", 0], ["matrixg", 0], ["2", 0], ["int", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["elif", 0], ["i", 0], ["0", 0], ["y", 0], ["matrixg", 0], ["3", 0], ["int", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["elif", 0], ["i", 0], ["0", 0], ["w", 0], ["matrixg", 0], ["4", 0], ["int", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["list", 0], ["powerset", 0], ["list", 0], ["range", 0], ["10", 0], ["matrix", 0], ["deepcopy", 0], ["matrixg", 0], ["color", 0], ["value", 0], ["for", 0], ["j", 0], ["in", 0], ["i", 0], ["if", 0], ["j", 0], ["4", 0], ["color", 0], ["append", 0], ["j", 0], ["else", 0], ["value", 0], ["append", 0], ["j", 0], ["for", 0], ["v", 0], ["in", 0], ["value", 0], ["for", 0], ["c", 0], ["in", 0], ["color", 0], ["matrix", 0], ["c", 0], ["v", 0], ["5", 0], ["0", 0], ["ctr", 0], ["0", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["5", 0], ["if", 0], ["matrix", 0], ["r", 0], ["v", 0], ["5", 0], ["0", 0], ["ctr", 0], ["1", 0], ["if", 0], ["ctr", 0], ["4", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["5", 0], ["matrix", 0], ["r", 0], ["v", 0], ["5", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["color", 0], ["if", 0], ["matrix", 0], ["c", 0], ["count", 0], ["0", 0], ["4", 0], ["matrix", 0], ["c", 0], ["0", 0], ["5", 0], ["ctr", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["5", 0], ["if", 0], ["matrix", 0], ["k", 0], ["j", 0], ["0", 0], ["ctr", 0], ["1", 0], ["if", 0], ["ctr", 0], ["24", 0], ["print", 0], ["len", 0], ["i", 0], ["break", 0], ["input", 0], ["p", 0], ["1", 0], ["rgbyw", 0], ["index", 0], ["c", 0], ["1", 0], ["int", 0], ["k", 0], ["4", 0], ["for", 0], ["c", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["min", 0], ["bin", 0], ["t", 0], ["count", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["1024", 0], ["if", 0], ["len", 0], ["t", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["p", 0], ["len", 0], ["p", 0], ["made", 0], ["by", 0], ["mostafa", 0], ["khaled", 0], ["input", 0], ["p", 0], ["1", 0], ["rgbyw", 0], ["index", 0], ["c", 0], ["1", 0], ["int", 0], ["k", 0], ["4", 0], ["for", 0], ["c", 0], ["k", 0], ["in", 0], ["input", 0], ["split", 0], ["mn", 0], ["20", 0], ["res", 0], ["90", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1024", 0], ["if", 0], ["len", 0], ["p", 0], ["len", 0], ["set", 0], ["i", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["p", 0], ["mn", 0], ["min", 0], ["mn", 0], ["bin", 0], ["i", 0], ["count", 0], ["1", 0], ["print", 0], ["mn", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.006045949214026602, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.001928340768791351, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.02040816326530612, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.01272077262473421, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0018137847642079807, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0018137847642079807, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.012004801920768308, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.012004801920768308, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nIn AtCoder city, there are five antennas standing in a straight line. They are called Antenna A, B, C, D and E from west to east, and their coordinates are a, b, c, d and e, respectively.\n\nTwo antennas can communicate directly if the distance between them is k or less, and they cannot if the distance is greater than k.\n\nDetermine if there exists a pair of antennas that cannot communicate directly.\n\nHere, assume that the distance between two antennas at coordinates p and q (p < q) is q - p.  \n\n-----Constraints-----\n - a, b, c, d, e and k are integers between 0 and 123 (inclusive).\n - a < b < c < d < e\n\n-----Input-----\nInput is given from Standard Input in the following format:\na\nb\nc\nd\ne\nk\n\n-----Output-----\nPrint :( if there exists a pair of antennas that cannot communicate directly, and print Yay! if there is no such pair.\n\n-----Sample Input-----\n1\n2\n4\n8\n9\n15\n\n-----Sample Output-----\nYay!\n\nIn this case, there is no pair of antennas that cannot communicate directly, because:\n - the distance between A and B is 2 - 1 = 1\n - the distance between A and C is 4 - 1 = 3\n - the distance between A and D is 8 - 1 = 7\n - the distance between A and E is 9 - 1 = 8\n - the distance between B and C is 4 - 2 = 2\n - the distance between B and D is 8 - 2 = 6\n - the distance between B and E is 9 - 2 = 7\n - the distance between C and D is 8 - 4 = 4\n - the distance between C and E is 9 - 4 = 5\n - the distance between D and E is 9 - 8 = 1\nand none of them is greater than 15. Thus, the correct output is Yay!.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["a=int(input())\nb=int(input())\nc=int(input())\nd=int(input())\ne=int(input())\nx=int(input())\nls=[a,b,c,d,e]\nif (e-a)<=x:\n\tprint(\"Yay!\")\nelse:\n\tprint(\":(\")\n", "a = int (input ())\nb = int (input ())\nc = int (input ())\nd = int (input ())\ne = int (input ())\nk = int (input ())\nif k >= e-a:\n\tprint ('Yay!')\nelse:\n\tprint (':(')\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\nnums = [a,b,c,d,e]\nfor i in nums:\n\tfor j in nums:\n\t\tif abs(i-j) > k:\n\t\t\tprint(\":(\")\n\t\t\treturn\nprint(\"Yay!\")\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\n\nprint('Yay!' if max(b-a, c-a, d-a, e-a, c-b, d-b, e-b, d-c, e-c, e-d) <= k else ':(')\n", "a = [int(input()) for _ in range(5)]\nk = int(input())\n\nif max(a) - min(a) > k:\n\tprint(':(')\nelse:\n\tprint('Yay!')\n", "antennas=[]\nfor i in range(5):\n\tantennas.append(int(input('')))\nlimit=int(input(''))\n\nif antennas[4]-antennas[0]>limit:\n\tprint(\":(\")\nelse:\n\tprint(\"Yay!\")    \n", "v = [int(input()) for _ in range(6)]\na = v[0]\ne = v[-2]\nk = v[-1]\n    \nprint((':(' if e - a > k else 'Yay!'))\n", "A = [int(input()) for i in range(5)]\nk = int(input())\n\nfor j in range(4):\n\tfor h in range(j+1,5):\n\t\tif k < abs(A[j] - A[h]):\n\t\t\tprint(\":(\")\n\t\t\treturn\nprint(\"Yay!\")\n", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n\t(*A,) = list(map(int, read().split()))\n\tk = A[-1]\n\n\tfor i in range(5):\n\t\tfor j in range(i + 1, 5):\n\t\t\tif A[j] - A[i] > k:\n\t\t\t\tprint(':(')\n\t\t\t\treturn\n\n\tprint('Yay!')\n\treturn\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\n\n# 最長距離がk以下ならば、全てのアンテナが直接通信できる \n# 直接通信できないアンテナの組は存在しない => Yay! を出力\n# 最長距離がkより大きいならば、直接通信できないアンテナの組は少なくとも1つ存在する\nif e-a <= k: print('Yay!')\nelse: print(':(')\n", "a = [int(input()) for i in range(5)]\nk = int(input())\nif a[4] - a[0] > k:\n\tprint(\":(\")\n\treturn\nprint(\"Yay!\")\n", "a=int(input())\ninput()\ninput()\ninput()\ne=int(input())\nk=int(input())\nprint(\"Yay!\" if k>=e-a else \":(\")\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\nif max(e-a,e-b,e-c,e-d) <= k:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "import sys\nimport math\n\na = [int(input()) for i in range(5)]\nk = int(input())\nfor i in range(5):\n\tfor j in range(5):\n\t\tif (a[i] - a[j]) > k:\n\t\t\tprint(\":(\")\n\t\t\treturn\nprint(\"Yay!\")\n", "l = [int(input()) for _ in range(6)]\nprint(\"Yay!\" if l[4]-l[0] <= l[5] else \":(\")\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\n\nl = []\nl.append(a)\nl.append(b)\nl.append(c)\nl.append(d)\nl.append(e)\nans = 0\nfor i in range(5):\n\tfor j in range(i+1,5):\n\t\tif l[j] - l[i] > k :\n\t\t\tans += 1\n\nif ans == 0 :\n\tprint(\"Yay!\")\nelse :\n\tprint(\":(\")\n", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(a: int, b: int, c: int, d: int, e: int, k: int):\n\tprint(('Yay!' if e - a <= k else ':('))\n\n\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n\tdef iterate_tokens():\n\t\tfor line in sys.stdin:\n\t\t\tfor word in line.split():\n\t\t\t\tyield word\n\ttokens = iterate_tokens()\n\ta = int(next(tokens))  # type: int\n\tb = int(next(tokens))  # type: int\n\tc = int(next(tokens))  # type: int\n\td = int(next(tokens))  # type: int\n\te = int(next(tokens))  # type: int\n\tk = int(next(tokens))  # type: int\n\tsolve(a, b, c, d, e, k)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "def f():\n\tx = [int(input()) for _ in range(5)]\n\tk = int(input())\n\tfor i in range(5):\n\t\tfor j in range(5):\n\t\t\tif abs(x[i] - x[j]) > k:\n\t\t\t\treturn\":(\"\n\treturn \"Yay!\"\nprint(f())\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\nif e - a <= k:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "a,b,c,d,e,k=[int(input()) for i in range(6)]\nprint(\"Yay!\" if e-a<=k else \":(\")\n", "a = []\nfor i in range(5):\n\ta.append(int(input()))\nk = int(input())\nisOK = True\nfor i in range(5):\n\tfor j in range(i+1,5):\n\t\tif abs(a[i]-a[j])>k:\n\t\t\tisOK = False\n\t\t\tbreak\nif isOK:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "abcde = [int(input()) for _ in range(5)]\nk = int(input())\n\nfor i in range(4):\n\tfor j in range(i, 5):\n\t\tif abcde[j] - abcde[i] > k:\n\t\t\tprint(':(')\n\t\t\treturn\nprint('Yay!')\n", "a=[int(input()) for _ in range(5)]\nk=int(input())\nflag=False\nfor i in range(5):\n\tfor j in range(i+1,5):\n\t\ttmp=abs(a[i]-a[j])\n\t\tif tmp > k:\n\t\t\tflag=True\n\t\t\tbreak\n\tif flag:\n\t\tbreak\nif flag:\n\tprint(\":(\")\nelse:\n\tprint(\"Yay!\")\n", "ans = 0\nposition = []\nfor i in range(5):\n\tx = int(input())\n\tposition.append(x)\nk = int(input())\ndistance_list = []\nfor i in range(5):\n\tfor j in range(5):\n\t\tif i != j:\n\t\t\tdistance = abs(position[i] - position[j]) \n\t\t\tdistance_list.append(distance)\n\ny = max(distance_list)\nif y <= k:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n\n", "a = []\nfor i in range(5):\n\ta.append(int(input()))\nb = int(input())\nif a[4] - a[0] > b:\n\tprint(\":(\")\nelse:\n\tprint(\"Yay!\")\n\n", "a=int(input())\nb=int(input())\nc=int(input())\nd=int(input())\ne=int(input())\nk=int(input())\nif e-a<=k:\n\tprint(\"Yay!\")\nelse:\n\tprint(\":(\")\n", "a=[int(input()) for _ in range(5)]\nk=int(input())\na.sort()\nif a[-1]-a[0]>k:\n\tprint(\":(\")\nelse:\n\tprint(\"Yay!\")\n", "def Input():\n\treturn mapt(int, input().split(\" \"))\n\n\ndef calc(i, h):\n\treturn all(h[i] >= h[j] for j in range(i))\n\n\ndef main():\n\tdata = [int(input()) for _ in range(5)]\n\tk = int(input())\n\tprint(\"Yay!\" if k >= data[-1] - data[0] else \":(\")\n\n\nmain()\n", "a=[]\nfor i in range(6):\n\ttemp=int(input())\n\ta.append(temp)\nfor i in range(4):\n\tfor j in range(1,5):\n\t\tif a[j]-a[i]>a[5]:\n\t\t\tprint(':(')\n\t\t\treturn\nprint('Yay!')\n", "A = [int(input()) for i in range(5)]\nk = int(input())\n\nfor i in range(5):\n\tfor j in range(i+1,5):\n\t\tif A[j]-A[i] > k:\n\t\t\tprint(':(')\n\t\t\treturn\nprint('Yay!')\n", "a,b,c,d,e = [int(input()) for _ in range(5)]\nk = int(input())\n \nd1 = b-a\nd2 = c-a\nd3 = d-a\nd4 = e-a\nd5 = c-b\nd6 = d-b\nd7 = e-b\nd8 = d-c\nd9 = e-c\nd10= e-d\n \nif d1 > k or d2 > k or d3 > k or d4 > k or d5 > k or d6 > k or d7 > k or d8 > k or d9 > k or d10 > k: print(':(')\nelse: print('Yay!')\n", "a = [int(input()) for x in range(5)]\nk = int(input())\n\nflg = False\n\nfor i, x in enumerate(a):\n\tfor j, y in enumerate(a):\n\t\tif i == j:\n\t\t\tcontinue\n\t\t\t\n\t\tflg = flg or abs(y-x) > k\n\t\t\nprint(':(' if flg else \"Yay!\")\n", "antennas = []\nfor i in range(5):\n\tantennas.append(int(input()))\nk = int(input())\n\nfor e in antennas[:0:-1]:\n\tif e - antennas[0] > k:\n\t\tprint(':(')\n\t\tbreak\nelse:\n\tprint('Yay!')\n", "x=[int(input()) for _ in range(6)]\nprint([\"Yay!\",\":(\"][x[4]-x[0]>x[5]])\n", "A = [int(input()) for _ in range(5)]\nk = int(input())\nfor i in range(5):\n\tfor j in range(i+1, 5):\n\t\tif A[j] - A[i] > k:\n\t\t\tprint(':(')\n\t\t\treturn\nprint('Yay!')\n", "A = []\nfor i in range(5):\n\tA.append(int(input()))\nk = int(input())\nans = False\nfor i in range(5):\n\tfor j in range(i+1, 5):\n\t\tif abs(A[i] - A[j]) > k:\n\t\t\tans = True\n\t\t\tbreak\nif ans == False:\n\tprint(\"Yay!\")\nelse:\n\tprint(\":(\")\n", "x = [int(input())  for i in range(5)]\nk=int(input())\nif x[4]-x[0]<=k:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\nif k >= e-a:\n\tprint(\"Yay!\")\nelse:\n\tprint(\":(\")\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\n  \nif e-a <= k: print('Yay!')\nelse: print(':(')\n", "from itertools import combinations\ns=[int(input())for _ in[0]*6]\nk=s.pop()\nr=\"Yay!\"\nfor i,j in combinations(s,2):\n\tif j-i>k:\n\t\tr=\":(\";break\nprint(r)\n", "import sys\ninp = lambda: sys.stdin.readline()\nmi = lambda: map(int, inp().split())\nli = lambda: list(map(int, inp().split()))\nmf = lambda: map(float,inp().split())\nlf = lambda: list(map(float,inp().split()))\n\nA = int(inp())\nB = int(inp())\nC = int(inp())\nD = int(inp())\nE = int(inp())\nK = int(inp())\nprint(\"Yay!\" if E - A <= K else \":(\")\n", "n_l = [int(input()) for _ in range(6)]\n\nif n_l[-2] - n_l[0] > n_l[-1]:\n\tprint(':(')\nelse:\n\tprint('Yay!')\n", "a,b,c,d,e,k=[int(input()) for _ in range(6)]\nif e-a<=k:\n\tprint(\"Yay!\")\nelse:\n\tprint(\":(\")\n", "x = [int(input()) for _ in range(5)]\nk = int(input())\nM = max(x)\nm = min(x)\nif M-m > k:\n\tprint(':(')\nelse:\n\tprint('Yay!')\n", "a=[int(input()) for i in range(5)]\nk=int(input())\nfor i in range(4):\n\tfor j in range(i+1,5):\n\t\tif a[j]-a[i]>k:\n\t\t\tprint(\":(\")\n\t\t\treturn\nprint(\"Yay!\")\n", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\nimport numpy as np\n# from decorator import stop_watch\n# \n# \n# @stop_watch\ndef solve(a, b, c, d, e, k):\n\tarr = np.array([a, b, c, d, e])\n\t# print(arr)\n\tarr, arr2 = [a.flatten() for a in np.meshgrid(arr, arr)]\n\t# print(arr)\n\tarr = np.c_[arr, arr2]\n\t# print(arr)\n\tarr = np.array(list([abs(x[0] - x[1]) for x in arr]))\n\t# print(arr)\n\tprint((':(' if arr.max() > k else 'Yay!'))\n\n\ndef __starting_point():\n\ta, b, c, d, e, k = [int(input()) for _ in range(6)]\n\t# print(a, b, c, d, e, k)\n\tsolve(a, b, c, d, e, k)\n\n\t# # test\n\t# from random import randint\n\t# from func import random_str\n\t# solve()\n\n\n__starting_point()\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\n\nif e-a <= k:\n\tprint(\"Yay!\")\n\nelse:\n\tprint(\":(\")\n", "antena = [int(input()) for i in range(5)]\nk = int(input())\n\nif antena[-1] - antena[0] <= k:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "antenna = [input() for _ in range(5)]\nk = int(input())\n\ncheck = True\nfor i in range(4):\n\tfor j in range(i+1,5):\n\t\tif int(antenna[j]) - int(antenna[i]) > k:\n\t\t\tcheck = False\n\nprint(\"Yay!\" if check else \":(\")\n", "import itertools\na = []\nfor i in range(5):\n\ta.append(int(input()))\nk = int(input())\n\ncnt = 0\nl = list(itertools.combinations(a,2))\nfor i in range(len(l)):\n\tif abs(l[i][0] - l[i][1]) > k:\n\t\tcnt += 1\n\nif cnt >= 1:\n\tprint(\":(\")\nelse:\n\tprint(\"Yay!\")\n", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(a: int, b: int, c: int, d: int, e: int, k: int):\n\tprint(('Yay!' if e - a <= k else ':('))\n\n\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n\tdef iterate_tokens():\n\t\tfor line in sys.stdin:\n\t\t\tfor word in line.split():\n\t\t\t\tyield word\n\ttokens = iterate_tokens()\n\ta = int(next(tokens))  # type: int\n\tb = int(next(tokens))  # type: int\n\tc = int(next(tokens))  # type: int\n\td = int(next(tokens))  # type: int\n\te = int(next(tokens))  # type: int\n\tk = int(next(tokens))  # type: int\n\tsolve(a, b, c, d, e, k)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "a = []\nfor i in range(5):\n\ta.append(int(input()))\nb = int(input())\nfor i in range(4):\n\tif abs(a[0] - a[i+1]) > b:\n\t\tprint(\":(\")\n\t\treturn\nfor i in range(3):\n\tif abs(a[1] - a[i+2]) > b:\n\t\tprint(\":(\")\n\t\treturn\nfor i in range(2):\n\tif abs(a[2] - a[i+3]) > b:\n\t\tprint(\":(\")\n\t\treturn\nfor i in range(1):\n\tif abs(a[3] - a[i+4]) > b:\n\t\tprint(\":(\")\n\t\treturn\nprint(\"Yay!\")\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\nprint(\"Yay!\" if abs(a-e) <= k else \":(\")\n", "dis = []\nfor i in range(5):\n\tdis.append(int(input()))\n\nk = int(input())\n\nif dis[4] - dis[0] <= k:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n\ta, b, c, d, e, k = list(map(int, read().split()))\n\n\tif e - a > k:\n\t\tprint(':(')\n\telse:\n\t\tprint('Yay!')\n\n\treturn\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "a=int(input())\nb=int(input())\nc=int(input())\nd=int(input())\ne=int(input())\n\nk=int(input())\n\nif e-a>k:\n\tprint(\":(\")\nelse:\n\tprint(\"Yay!\")\n", "a,*x,e,k = [int(input()) for _ in range(6)]\nprint(\"Yay!\" if e-a<=k else \":(\")\n", "l = [int(input()) for i in range(5)]\nk = int(input())\n\nif max(l)-min(l) <= k:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "import itertools\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\n\nlst = [a, b, c, d, e]\nc = list(itertools.combinations(lst, 2))\nfor i, j in c:\n\tif j - i > k:\n\t\tprint(':(')\n\t\tbreak\nelse:\n\tprint('Yay!')\n", "a = int(input())\nfor i in range(3):\n\tinput()\ne = int(input())\nprint('Yay!' if e - a <= int(input()) else ':(')\n", "l=[]\nfor i in range(6):\n\tl.append(int(input()))\nif l[4]-l[0]>l[5]:\n\tprint(\":(\")\nelse:\n\tprint(\"Yay!\")\n", "s = []\nfor i in range(5):\n\ts.append(int(input()))\nk = int(input())\nfor i in range(4):\n\tif s[i+1]-s[0] >k:\n\t\tprint(\":(\")\n\t\tbreak\nelse:\n\tprint(\"Yay!\")\n", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(a: int, b: int, c: int, d: int, e: int, k: int):\n\tprint(('Yay!' if e - a <= k else ':('))\n\n\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n\tdef iterate_tokens():\n\t\tfor line in sys.stdin:\n\t\t\tfor word in line.split():\n\t\t\t\tyield word\n\ttokens = iterate_tokens()\n\ta = int(next(tokens))  # type: int\n\tb = int(next(tokens))  # type: int\n\tc = int(next(tokens))  # type: int\n\td = int(next(tokens))  # type: int\n\te = int(next(tokens))  # type: int\n\tk = int(next(tokens))  # type: int\n\tsolve(a, b, c, d, e, k)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "dis = [0 for i in range(5)]\nfor i in range(5):\n\tdis[i] = int(input())\nk = int(input())\n\nif dis[4]-dis[0] > k:\n\tprint(':(')\nelse:\n\tprint('Yay!')\n", "\nl = [int(input()) for i in range(6)]\nk = l[-1]\n\nsub=l[-2]-l[0]\n\nif(sub<=k):\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "lists = []\nfor _ in range(5):\n\tlists.append(int(input()))\nk = int(input())\n\nlists.sort()\nmaximum = lists[-1]\nminimum = lists[0]\n\nif k < maximum - minimum:\n\tans = ':('\nelse:\n\tans = 'Yay!'\n\nprint(ans)\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\n\nif e - a > k:\n\tprint(\":(\")\nelse:\n\tprint(\"Yay!\")\n", "from itertools import combinations\ndef test():\n\tnum_list = [int(input()) for _ in range(5)]\n\tk=int(input())\n\tl=list(combinations(num_list,2))\n\tfor i,j in l:\n\t\tif abs(i-j) >k:\n\t\t\tprint(\":(\")\n\t\t\treturn\n\tprint(\"Yay!\")\ntest()\n", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(a: int, b: int, c: int, d: int, e: int, k: int):\n\tprint(('Yay!' if e - a <= k else ':('))\n\n\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n\tdef iterate_tokens():\n\t\tfor line in sys.stdin:\n\t\t\tfor word in line.split():\n\t\t\t\tyield word\n\ttokens = iterate_tokens()\n\ta = int(next(tokens))  # type: int\n\tb = int(next(tokens))  # type: int\n\tc = int(next(tokens))  # type: int\n\td = int(next(tokens))  # type: int\n\te = int(next(tokens))  # type: int\n\tk = int(next(tokens))  # type: int\n\tsolve(a, b, c, d, e, k)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import itertools\n\n\nL=[int(input()) for _ in range(5)]\nK=int(input())\nLcombi=itertools.combinations(L,2)\n\nfor lc in Lcombi:\n\tif abs(lc[0]-lc[1])>K:\n\t\tprint(\":(\")\n\t\treturn\n\nprint(\"Yay!\")\n", "l = []\nflg = False\n\nfor i in range(5):\n\tl.append(int(input()))\n\t\nk = int(input())\nl.sort(reverse = True)\n\t\nfor i in range(len(l)):\n\tfor j in range(len(l)-i):\n\t\tif(l[i]-l[j]>k):\n\t\t\tflg=True\n\t\t\t\nprint(':(' if flg else 'Yay!')\n", "a = []\nfor i in range(5):\n\ta.append(int(input()))\nk = int(input())\n\nfor i in range(5):\n\tfor j in range(i, 5):\n\t\tif a[j] - a[i] > k:\n\t\t\tprint(':(')\n\t\t\treturn\nprint('Yay!')\n", "a = int(input())\n_ = int(input())\n_ = int(input())\n_ = int(input())\ne = int(input())\nk = int(input())\nprint((\"Yay!\" if e - a <= k else \":(\"))\n", "a=[int(input()) for i in range(6)]\nprint(\"Yay!\" if abs(a[0]-a[4])<=a[5] else \":(\")\n", "num_list = []\ncount_cant_go = 0\n\nfor i in range(5):\n\tnum_list.append(int(input()))\n\nnum_list.append(int(input()))\n\nif max(num_list) - min(num_list) <= num_list[-1]:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "a,b,c,d,e,k=int(input()),int(input()),int(input()),int(input()),int(input()),int(input())\nif e-a<=k:print(\"Yay!\")\nelse:print(\":(\")\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\n \nd1 = b-a\nd2 = c-a\nd3 = d-a\nd4 = e-a\nd5 = c-b\nd6 = d-b\nd7 = e-b\nd8 = d-c\nd9 = e-c\nd10= e-d\n \nif d1 > k or d2 > k or d3 > k or d4 > k or d5 > k or d6 > k or d7 > k or d8 > k or d9 > k or d10 > k: print(':(')\nelse: print('Yay!')\n", "a = [0]*5\nfor i in range(5):\n\ta[i] = int(input())\nk = int(input())\nif a[-1] - a[0] > k:\n\ts = 0\nelse:\n\ts = 1\nprint([\":(\",\"Yay!\"][s])\n", "cor = [0 for i in range(5)]\nfor i in range(5):\n\tcor[i] = int(input())\nk = int(input())\n\nflag = True\nfor i in range(5):\n\tfor j in range(i, 5):\n\t\tif abs(cor[i]-cor[j]) > k:\n\t\t\tflag = False\nif flag:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "w = int(input())\nfor i in range(3):\n\tinput()\ne = int(input())\nk = int(input())\nif e - w <= k:\n\tprint(\"Yay!\")\nelse:\n\tprint(\":(\")\n", "num = [int(input()) for i in range(5)]\nk = int(input())\nx = 'Yay!'\nfor h in num:\n\tfor j in num:\n\t\tif k < j-h:\n\t\t\tx = ':('\nprint(x)\n", "a, b, c, d, e, k = [int(input()) for _ in range(6)]\n\n# 最長距離(=e-a)がk以下 => 全てのアンテナが直接通信できる => 直接通信できないアンテナの組は存在しない\n# 最長距離がkより大きい => 直接通信できないアンテナの組は少なくとも1つ存在する\nif e-a <= k: print('Yay!')\nelse: print(':(')\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\n\nif e - a <= k:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "a = []\nfor i in range(5):\n\ta.append(int(input()))\na.sort()\nj = int(input())\nk = a[4] - a[0]\nif k <= j:\n\tprint(\"Yay!\")\nelse:\n\tprint(\":(\")\n", "#!/usr/bin/env python3\n\ndef main():\n\tantenna = [int(input()) for i in range(5)]\n\tk = int(input())\n\tprint((\":(\" if max(antenna) - min(antenna) > k else \"Yay!\"))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import math\ns = [int(input()) for i in range(5)]\nk=int(input())\nq=0\nif abs(s[4]-s[0])<=k:\n\tq=1\nif q==1:\n\tprint('Yay!')\nif q==0:\n  print(':(')\n", "a,b,c,d,e,k=int(input()), int(input()),int(input()),int(input()),int(input()),int(input())\n\nif e-a<=k:\n\tprint(\"Yay!\")\n\t\nelse:\n\tprint(\":(\")\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nK = int(input())\n\nLIST = [a,b,c,d,e]\nLIST = sorted(LIST)\nif LIST[-1] - LIST[0] <= K:\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "a=list(int(input()) for i in range(5))\nk=int(input())\nif a[4]-a[0]<=k:\n\tprint(\"Yay!\")\nelse:\n\tprint(\":(\")\n", "a,_,_,_,e,k=[int(input()) for _ in range(6)]\nprint([\"Yay!\",\":(\"][e-a>k])\n", "l = [int(input()) for _ in range(5)]\nk = int(input())\nfor i in range(5):\n\tfor j in range(i+1,5):\n\t\tif l[j]-l[i] > k:\n\t\t\tprint(\":(\")\n\t\t\treturn\nprint(\"Yay!\")\n", "antenna = [int(input()) for _ in range(5)]\nk = int(input())\nans = 'Yay!'\n\nfor i in range(5):\n\tfor j in range(5):\n\t\tif i < j:\n\t\t\tif antenna[j] - antenna[i] > k:\n\t\t\t\tans = ':('\n\t\t\t\tbreak\n\telse:\n\t\tcontinue\n\tbreak\n\nprint(ans)\n", "details = []\nfor i in range(6):\n\tdetails.append(int(input()))\nchecker = []\nfor i in details[:len(details)-1]:\n\tfor j in details[:len(details)-1]:\n\t\tchecker.append(j-i)\n\nif (max(checker) > details[-1]):\n\tprint(\":(\")\nelse:\n\tprint(\"Yay!\")\n", "a,b,c,d,e,k=int(input()),int(input()),int(input()),int(input()),int(input()),int(input())\nif k>=max(a,b,c,d,e)-min(a,b,c,d,e):\n\tprint('Yay!')\nelse:\n\tprint(':(')\n", "import itertools\nL = []\nfor i in range(5):\n\tL.append(int(input()))\nk = int(input())\n\nM = []\nfor v in itertools.combinations(L, 2):\n\tM.append(list(v))\n\ndist = []\nfor m in M:\n\tdist.append(abs(m[0]-m[1]))\n\n#print(dist)\n\nif max(dist) > k:\n\tprint(':(')\nelse:\n\tprint('Yay!')\n", "t=[]\nfor i in range(5):\n\tt.append(int(input()))\nk=int(input())\nt.sort()\nif t[4]-t[0]>k:\n\tprint(\":(\")\nelse:\n\tprint(\"Yay!\")\n", "ls =[]\nans = 'Yay!'\nfor i in range(5):\n\tls.append(int(input()))\nk = int(input())\nfor i in range(5):\n\tfor j in range(5):\n\t\tif abs(ls[i]-ls[j]) > k:\n\t\t\tans = ':('\n\t\t\tbreak\nprint(ans)\n", "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\nif(e-a <= k):\n\tprint(\"Yay!\")\nelse:\n\tprint(\":(\")\n", "li=[0]*5\nans=\"Yay!\"\nfor i in range(5):\n\tli[i]=int(input())\nk=int(input())\n\nfor j in range(5):\n\tfor l in range(5):\n\t\tif j<l:\n\t\t\tif k-(li[l]-li[j])<0:\n\t\t\t\tans=\":(\"\nprint(ans)\n", "abcde = [input() for i in range(5)]\n\nk = int(input())\n\nfor ii in range(5):\n\tfor jj in range(ii, 5):\n\t\tif int(abcde[jj]) - int(abcde[ii]) > k:\n\t\t\tprint(':(')\n\t\t\treturn\n\nprint('Yay!')\n"], "id": "id7216"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7216", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["in", 3], ["atcoder", 3], ["city", 3], ["there", 3], ["are", 3], ["five", 3], ["antennas", 3], ["standing", 3], ["in", 3], ["a", 3], ["straight", 3], ["line", 3], ["they", 3], ["are", 3], ["called", 3], ["antenna", 3], ["a", 3], ["b", 3], ["c", 3], ["d", 3], ["and", 3], ["e", 3], ["from", 3], ["west", 3], ["to", 3], ["east", 3], ["and", 3], ["their", 3], ["coordinates", 3], ["are", 3], ["a", 3], ["b", 3], ["c", 3], ["d", 3], ["and", 3], ["e", 3], ["respectively", 3], ["two", 3], ["antennas", 3], ["can", 3], ["communicate", 3], ["directly", 3], ["if", 3], ["the", 3], ["distance", 3], ["between", 3], ["them", 3], ["is", 3], ["k", 3], ["or", 3], ["less", 3], ["and", 3], ["they", 3], ["cannot", 3], ["if", 3], ["the", 3], ["distance", 3], ["is", 3], ["greater", 3], ["than", 3], ["k", 3], ["determine", 3], ["if", 3], ["there", 3], ["exists", 3], ["a", 3], ["pair", 3], ["of", 3], ["antennas", 3], ["that", 3], ["cannot", 3], ["communicate", 3], ["directly", 3], ["here", 3], ["assume", 3], ["that", 3], ["the", 3], ["distance", 3], ["between", 3], ["two", 0], ["antennas", 0], ["at", 0], ["coordinates", 0], ["p", 0], ["and", 0], ["q", 0], ["p", 0], ["q", 0], ["is", 0], ["q", 0], ["p", 0], ["constraints", 0], ["a", 3], ["b", 3], ["c", 2], ["d", 2], ["e", 2], ["and", 2], ["k", 2], ["are", 0], ["integers", 0], ["between", 0], ["0", 0], ["and", 0], ["123", 0], ["inclusive", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["input", 0], ["input", 0], ["is", 0], ["given", 0], ["from", 0], ["standard", 0], ["input", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["output", 0], ["print", 3], ["if", 3], ["there", 3], ["exists", 3], ["a", 3], ["pair", 3], ["of", 3], ["antennas", 3], ["that", 3], ["cannot", 0], ["communicate", 0], ["directly", 0], ["and", 0], ["print", 0], ["yay", 0], ["if", 0], ["there", 0], ["is", 0], ["no", 0], ["such", 0], ["pair", 0], ["sample", 0], ["input", 0], ["1", 0], ["2", 0], ["4", 0], ["8", 0], ["9", 0], ["15", 0], ["sample", 0], ["output", 0], ["yay", 0], ["in", 2], ["this", 2], ["case", 2], ["there", 2], ["is", 2], ["no", 2], ["pair", 2], ["of", 2], ["antennas", 2], ["that", 2], ["cannot", 2], ["communicate", 2], ["directly", 2], ["because", 2], ["the", 2], ["distance", 2], ["between", 2], ["a", 2], ["and", 2], ["b", 2], ["is", 2], ["2", 2], ["1", 2], ["1", 2], ["the", 2], ["distance", 2], ["between", 2], ["a", 2], ["and", 2], ["c", 2], ["is", 2], ["4", 2], ["1", 2], ["3", 2], ["the", 2], ["distance", 2], ["between", 2], ["a", 2], ["and", 2], ["d", 2], ["is", 2], ["8", 2], ["1", 2], ["7", 2], ["the", 2], ["distance", 2], ["between", 2], ["a", 2], ["and", 2], ["e", 2], ["is", 2], ["9", 2], ["1", 2], ["8", 2], ["the", 2], ["distance", 2], ["between", 2], ["b", 2], ["and", 2], ["c", 2], ["is", 2], ["4", 2], ["2", 2], ["2", 2], ["the", 2], ["distance", 2], ["between", 2], ["b", 2], ["and", 2], ["d", 2], ["is", 2], ["8", 2], ["2", 2], ["6", 2], ["the", 2], ["distance", 2], ["between", 2], ["b", 2], ["and", 2], ["e", 2], ["is", 2], ["9", 2], ["2", 2], ["7", 2], ["the", 2], ["distance", 2], ["between", 2], ["c", 2], ["and", 2], ["d", 2], ["is", 2], ["8", 2], ["4", 2], ["4", 2], ["the", 2], ["distance", 2], ["between", 2], ["c", 2], ["and", 2], ["e", 2], ["is", 2], ["9", 2], ["4", 2], ["5", 2], ["the", 2], ["distance", 2], ["between", 2], ["d", 2], ["and", 2], ["e", 2], ["is", 2], ["9", 2], ["8", 2], ["1", 2], ["and", 3], ["none", 3], ["of", 0], ["them", 0], ["is", 0], ["greater", 0], ["than", 0], ["15", 0], ["thus", 0], ["the", 0], ["correct", 0], ["output", 0], ["is", 0], ["yay", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7326388888888888, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.31307870370370355, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8633333333333333, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.36833333333333335, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7326388888888888, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.31307870370370355, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8633333333333333, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.36833333333333335, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["x", 0], ["int", 0], ["input", 0], ["ls", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["if", 0], ["e", 0], ["a", 0], ["x", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["k", 0], ["e", 0], ["a", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["nums", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["for", 0], ["i", 0], ["in", 0], ["nums", 0], ["for", 0], ["j", 0], ["in", 0], ["nums", 0], ["if", 0], ["abs", 0], ["i", 0], ["j", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["print", 0], ["yay", 0], ["if", 0], ["max", 0], ["b", 7], ["a", 5], ["c", 3], ["a", 3], ["d", 5], ["a", 5], ["e", 5], ["a", 5], ["c", 0], ["b", 0], ["d", 0], ["b", 0], ["e", 0], ["b", 0], ["d", 0], ["c", 0], ["e", 0], ["c", 0], ["e", 0], ["d", 0], ["k", 0], ["else", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["max", 0], ["a", 0], ["min", 0], ["a", 0], ["k", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["antennas", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["antennas", 0], ["append", 0], ["int", 0], ["input", 0], ["limit", 0], ["int", 0], ["input", 0], ["if", 0], ["antennas", 0], ["4", 0], ["antennas", 0], ["0", 0], ["limit", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["v", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["6", 0], ["a", 0], ["v", 0], ["0", 0], ["e", 0], ["v", 0], ["2", 0], ["k", 0], ["v", 0], ["1", 0], ["print", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["else", 0], ["yay", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["4", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["5", 0], ["if", 0], ["k", 0], ["abs", 0], ["a", 0], ["j", 0], ["a", 0], ["h", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["import", 0], ["sys", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["readlines", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["inf", 0], ["1", 0], ["60", 0], ["mod", 0], ["1000000007", 0], ["def", 0], ["main", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["read", 0], ["split", 0], ["k", 0], ["a", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["5", 0], ["if", 0], ["a", 0], ["j", 0], ["a", 0], ["i", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["最長距離がk以下ならば、全てのアンテナが直接通信できる", 0], ["直接通信できないアンテナの組は存在しない", 0], ["yay", 0], ["を出力", 0], ["最長距離がkより大きいならば、直接通信できないアンテナの組は少なくとも1つ存在する", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["a", 0], ["4", 0], ["a", 0], ["0", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["a", 0], ["int", 0], ["input", 0], ["input", 0], ["input", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["print", 0], ["yay", 0], ["if", 0], ["k", 0], ["e", 0], ["a", 0], ["else", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["max", 0], ["e", 0], ["a", 0], ["e", 0], ["b", 0], ["e", 0], ["c", 0], ["e", 0], ["d", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["5", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["l", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["6", 0], ["print", 0], ["yay", 0], ["if", 0], ["l", 0], ["4", 0], ["l", 0], ["0", 0], ["l", 0], ["5", 0], ["else", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["l", 0], ["l", 1], ["append", 1], ["a", 1], ["l", 0], ["append", 0], ["b", 0], ["l", 0], ["append", 0], ["c", 0], ["l", 0], ["append", 0], ["d", 0], ["l", 0], ["append", 0], ["e", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["5", 0], ["if", 0], ["l", 0], ["j", 0], ["l", 0], ["i", 0], ["k", 0], ["ans", 0], ["1", 0], ["if", 0], ["ans", 0], ["0", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["def", 0], ["solve", 0], ["a", 0], ["int", 0], ["b", 0], ["int", 0], ["c", 0], ["int", 0], ["d", 0], ["int", 0], ["e", 0], ["int", 0], ["k", 0], ["int", 0], ["print", 0], ["yay", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["else", 0], ["generated", 0], ["by", 0], ["1", 0], ["1", 0], ["7", 0], ["1", 0], ["https", 2], ["github", 2], ["com", 2], ["kyuridenamida", 2], ["atcoder", 2], ["tools", 2], ["tips", 4], ["you", 4], ["use", 4], ["the", 4], ["default", 4], ["template", 0], ["now", 0], ["you", 0], ["can", 0], ["remove", 0], ["this", 0], ["line", 0], ["by", 0], ["using", 0], ["your", 0], ["custom", 0], ["template", 0], ["def", 1], ["main", 1], ["def", 2], ["iterate", 2], ["tokens", 2], ["for", 2], ["line", 2], ["in", 2], ["sys", 0], ["stdin", 0], ["for", 0], ["word", 0], ["in", 0], ["line", 0], ["split", 0], ["yield", 0], ["word", 0], ["tokens", 0], ["iterate", 0], ["tokens", 0], ["a", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["b", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["c", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["d", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["e", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["k", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["solve", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["f", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["5", 0], ["if", 0], ["abs", 0], ["x", 0], ["i", 0], ["x", 0], ["j", 0], ["k", 0], ["return", 0], ["return", 0], ["yay", 0], ["print", 0], ["f", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["6", 0], ["print", 0], ["yay", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["else", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["a", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["isok", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["5", 0], ["if", 0], ["abs", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["k", 0], ["isok", 0], ["false", 0], ["break", 0], ["if", 0], ["isok", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["abcde", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["5", 0], ["if", 0], ["abcde", 0], ["j", 0], ["abcde", 0], ["i", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["flag", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["5", 0], ["tmp", 0], ["abs", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["if", 0], ["tmp", 0], ["k", 0], ["flag", 0], ["true", 0], ["break", 0], ["if", 0], ["flag", 0], ["break", 0], ["if", 0], ["flag", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["ans", 0], ["0", 0], ["position", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["x", 0], ["int", 0], ["input", 0], ["position", 0], ["append", 0], ["x", 0], ["k", 0], ["int", 0], ["input", 0], ["distance", 0], ["list", 0], ["for", 3], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["5", 0], ["if", 0], ["i", 0], ["j", 0], ["distance", 0], ["abs", 0], ["position", 0], ["i", 0], ["position", 0], ["j", 0], ["distance", 0], ["list", 0], ["append", 0], ["distance", 0], ["y", 0], ["max", 0], ["distance", 0], ["list", 0], ["if", 0], ["y", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["a", 0], ["append", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["if", 0], ["a", 0], ["4", 0], ["a", 0], ["0", 0], ["b", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["a", 0], ["sort", 0], ["if", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["k", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["def", 0], ["input", 0], ["return", 0], ["mapt", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["calc", 0], ["i", 0], ["h", 0], ["return", 0], ["all", 0], ["h", 0], ["i", 0], ["h", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["def", 0], ["main", 0], ["data", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["print", 0], ["yay", 0], ["if", 0], ["k", 0], ["data", 0], ["1", 0], ["data", 0], ["0", 0], ["else", 0], ["main", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["6", 0], ["temp", 0], ["int", 0], ["input", 0], ["a", 0], ["append", 0], ["temp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["5", 0], ["if", 0], ["a", 0], ["j", 0], ["a", 0], ["i", 0], ["a", 0], ["5", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["5", 0], ["if", 0], ["a", 0], ["j", 0], ["a", 0], ["i", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["d1", 0], ["b", 0], ["a", 0], ["d2", 0], ["c", 0], ["a", 0], ["d3", 0], ["d", 0], ["a", 0], ["d4", 0], ["e", 0], ["a", 0], ["d5", 0], ["c", 0], ["b", 0], ["d6", 0], ["d", 0], ["b", 0], ["d7", 0], ["e", 0], ["b", 0], ["d8", 0], ["d", 0], ["c", 0], ["d9", 0], ["e", 0], ["c", 0], ["d10", 0], ["e", 0], ["d", 0], ["if", 0], ["d1", 0], ["k", 0], ["or", 0], ["d2", 0], ["k", 0], ["or", 0], ["d3", 0], ["k", 0], ["or", 0], ["d4", 0], ["k", 0], ["or", 0], ["d5", 0], ["k", 0], ["or", 0], ["d6", 0], ["k", 0], ["or", 0], ["d7", 0], ["k", 0], ["or", 0], ["d8", 0], ["k", 0], ["or", 0], ["d9", 0], ["k", 0], ["or", 0], ["d10", 0], ["k", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["flg", 0], ["false", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["for", 0], ["j", 0], ["y", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["if", 0], ["i", 0], ["j", 0], ["continue", 0], ["flg", 0], ["flg", 0], ["or", 0], ["abs", 0], ["y", 0], ["x", 0], ["k", 0], ["print", 0], ["if", 0], ["flg", 0], ["else", 0], ["yay", 0], ["antennas", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["antennas", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["e", 0], ["in", 0], ["antennas", 0], ["0", 0], ["1", 0], ["if", 0], ["e", 0], ["antennas", 0], ["0", 0], ["k", 0], ["print", 0], ["break", 0], ["else", 0], ["print", 0], ["yay", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["6", 0], ["print", 0], ["yay", 0], ["x", 0], ["4", 0], ["x", 0], ["0", 0], ["x", 0], ["5", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["5", 0], ["if", 0], ["a", 0], ["j", 0], ["a", 0], ["i", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["a", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["ans", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["5", 0], ["if", 0], ["abs", 0], ["a", 0], ["i", 0], ["a", 0], ["j", 0], ["k", 0], ["ans", 0], ["true", 0], ["break", 0], ["if", 0], ["ans", 0], ["false", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["x", 0], ["4", 0], ["x", 0], ["0", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["k", 0], ["e", 0], ["a", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["s", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["0", 0], ["6", 0], ["k", 0], ["s", 0], ["pop", 0], ["r", 0], ["yay", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["combinations", 0], ["s", 0], ["2", 0], ["if", 0], ["j", 0], ["i", 0], ["k", 0], ["r", 0], ["break", 0], ["print", 0], ["r", 0], ["import", 0], ["sys", 0], ["inp", 0], ["lambda", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["mi", 0], ["lambda", 0], ["map", 0], ["int", 0], ["inp", 0], ["split", 0], ["li", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["inp", 0], ["split", 0], ["mf", 0], ["lambda", 0], ["map", 0], ["float", 0], ["inp", 0], ["split", 0], ["lf", 0], ["lambda", 0], ["list", 0], ["map", 0], ["float", 0], ["inp", 0], ["split", 0], ["a", 0], ["int", 0], ["inp", 0], ["b", 0], ["int", 0], ["inp", 0], ["c", 0], ["int", 0], ["inp", 0], ["d", 0], ["int", 0], ["inp", 0], ["e", 0], ["int", 0], ["inp", 0], ["k", 0], ["int", 0], ["inp", 0], ["print", 0], ["yay", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["else", 0], ["n", 0], ["l", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["6", 0], ["if", 0], ["n", 0], ["l", 0], ["2", 0], ["n", 0], ["l", 0], ["0", 0], ["n", 0], ["l", 0], ["1", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["6", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["x", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["m", 0], ["max", 0], ["x", 0], ["m", 0], ["min", 0], ["x", 0], ["if", 0], ["m", 0], ["m", 0], ["k", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["5", 0], ["if", 0], ["a", 0], ["j", 0], ["a", 0], ["i", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["import", 0], ["bisect", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["from", 0], ["decorator", 0], ["import", 0], ["stop", 0], ["watch", 0], ["stop", 0], ["watch", 0], ["def", 0], ["solve", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["arr", 0], ["np", 0], ["array", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["print", 0], ["arr", 0], ["arr", 0], ["arr2", 0], ["a", 0], ["flatten", 0], ["for", 0], ["a", 0], ["in", 0], ["np", 0], ["meshgrid", 0], ["arr", 0], ["arr", 0], ["print", 0], ["arr", 0], ["arr", 0], ["np", 0], ["c", 0], ["arr", 0], ["arr2", 0], ["print", 0], ["arr", 0], ["arr", 0], ["np", 0], ["array", 0], ["list", 0], ["abs", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["print", 0], ["arr", 0], ["print", 0], ["if", 0], ["arr", 0], ["max", 0], ["k", 0], ["else", 0], ["yay", 0], ["def", 0], ["starting", 0], ["point", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["6", 0], ["print", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["solve", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["test", 0], ["from", 0], ["random", 0], ["import", 0], ["randint", 0], ["from", 0], ["func", 0], ["import", 0], ["random", 0], ["str", 0], ["solve", 0], ["starting", 0], ["point", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["antena", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["antena", 0], ["1", 0], ["antena", 0], ["0", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["antenna", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["check", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["5", 0], ["if", 0], ["int", 0], ["antenna", 0], ["j", 0], ["int", 0], ["antenna", 0], ["i", 0], ["k", 0], ["check", 0], ["false", 0], ["print", 0], ["yay", 0], ["if", 0], ["check", 0], ["else", 0], ["import", 0], ["itertools", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["a", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["cnt", 0], ["0", 0], ["l", 0], ["list", 0], ["itertools", 0], ["combinations", 0], ["a", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["if", 0], ["abs", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["k", 0], ["cnt", 0], ["1", 0], ["if", 0], ["cnt", 0], ["1", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["def", 0], ["solve", 0], ["a", 0], ["int", 0], ["b", 0], ["int", 0], ["c", 0], ["int", 0], ["d", 0], ["int", 0], ["e", 0], ["int", 0], ["k", 0], ["int", 0], ["print", 0], ["yay", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["else", 0], ["generated", 0], ["by", 0], ["1", 0], ["1", 0], ["7", 0], ["1", 0], ["https", 2], ["github", 2], ["com", 2], ["kyuridenamida", 2], ["atcoder", 2], ["tools", 2], ["tips", 4], ["you", 4], ["use", 4], ["the", 4], ["default", 4], ["template", 0], ["now", 0], ["you", 0], ["can", 0], ["remove", 0], ["this", 0], ["line", 0], ["by", 0], ["using", 0], ["your", 0], ["custom", 0], ["template", 0], ["def", 1], ["main", 1], ["def", 2], ["iterate", 2], ["tokens", 2], ["for", 2], ["line", 2], ["in", 2], ["sys", 0], ["stdin", 0], ["for", 0], ["word", 0], ["in", 0], ["line", 0], ["split", 0], ["yield", 0], ["word", 0], ["tokens", 0], ["iterate", 0], ["tokens", 0], ["a", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["b", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["c", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["d", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["e", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["k", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["solve", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["a", 0], ["append", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["abs", 0], ["a", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["b", 0], ["print", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["abs", 0], ["a", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["b", 0], ["print", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["if", 0], ["abs", 0], ["a", 0], ["2", 0], ["a", 0], ["i", 0], ["3", 0], ["b", 0], ["print", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["if", 0], ["abs", 0], ["a", 0], ["3", 0], ["a", 0], ["i", 0], ["4", 0], ["b", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["print", 0], ["yay", 0], ["if", 0], ["abs", 0], ["a", 0], ["e", 0], ["k", 0], ["else", 0], ["dis", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["dis", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["dis", 0], ["4", 0], ["dis", 0], ["0", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["import", 0], ["sys", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["readlines", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["inf", 0], ["1", 0], ["60", 0], ["mod", 0], ["1000000007", 0], ["def", 0], ["main", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["read", 0], ["split", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["a", 0], ["x", 0], ["e", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["6", 0], ["print", 0], ["yay", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["else", 0], ["l", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["max", 0], ["l", 0], ["min", 0], ["l", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["import", 0], ["itertools", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["lst", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["c", 0], ["list", 0], ["itertools", 0], ["combinations", 0], ["lst", 0], ["2", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["c", 0], ["if", 0], ["j", 0], ["i", 0], ["k", 0], ["print", 0], ["break", 0], ["else", 0], ["print", 0], ["yay", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["print", 0], ["yay", 0], ["if", 0], ["e", 0], ["a", 0], ["int", 0], ["input", 0], ["else", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["6", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["if", 0], ["l", 0], ["4", 0], ["l", 0], ["0", 0], ["l", 0], ["5", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["s", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["0", 0], ["k", 0], ["print", 0], ["break", 0], ["else", 0], ["print", 0], ["yay", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["def", 0], ["solve", 0], ["a", 0], ["int", 0], ["b", 0], ["int", 0], ["c", 0], ["int", 0], ["d", 0], ["int", 0], ["e", 0], ["int", 0], ["k", 0], ["int", 0], ["print", 0], ["yay", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["else", 0], ["generated", 0], ["by", 0], ["1", 0], ["1", 0], ["7", 0], ["1", 0], ["https", 2], ["github", 2], ["com", 2], ["kyuridenamida", 2], ["atcoder", 2], ["tools", 2], ["tips", 4], ["you", 4], ["use", 4], ["the", 4], ["default", 4], ["template", 0], ["now", 0], ["you", 0], ["can", 0], ["remove", 0], ["this", 0], ["line", 0], ["by", 0], ["using", 0], ["your", 0], ["custom", 0], ["template", 0], ["def", 1], ["main", 1], ["def", 2], ["iterate", 2], ["tokens", 2], ["for", 2], ["line", 2], ["in", 2], ["sys", 0], ["stdin", 0], ["for", 0], ["word", 0], ["in", 0], ["line", 0], ["split", 0], ["yield", 0], ["word", 0], ["tokens", 0], ["iterate", 0], ["tokens", 0], ["a", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["b", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["c", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["d", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["e", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["k", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["solve", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["dis", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["dis", 0], ["i", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["dis", 0], ["4", 0], ["dis", 0], ["0", 0], ["k", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["l", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["6", 0], ["k", 0], ["l", 0], ["1", 0], ["sub", 0], ["l", 0], ["2", 0], ["l", 0], ["0", 0], ["if", 0], ["sub", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["lists", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["lists", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["lists", 0], ["sort", 0], ["maximum", 0], ["lists", 0], ["1", 0], ["minimum", 0], ["lists", 0], ["0", 0], ["if", 0], ["k", 0], ["maximum", 0], ["minimum", 0], ["ans", 0], ["else", 0], ["ans", 0], ["yay", 0], ["print", 0], ["ans", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["def", 0], ["test", 0], ["num", 0], ["list", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["combinations", 0], ["num", 0], ["list", 0], ["2", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["l", 0], ["if", 0], ["abs", 0], ["i", 0], ["j", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["test", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["def", 0], ["solve", 0], ["a", 0], ["int", 0], ["b", 0], ["int", 0], ["c", 0], ["int", 0], ["d", 0], ["int", 0], ["e", 0], ["int", 0], ["k", 0], ["int", 0], ["print", 0], ["yay", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["else", 0], ["generated", 0], ["by", 0], ["1", 0], ["1", 0], ["7", 0], ["1", 0], ["https", 2], ["github", 2], ["com", 2], ["kyuridenamida", 2], ["atcoder", 2], ["tools", 2], ["tips", 4], ["you", 4], ["use", 4], ["the", 4], ["default", 4], ["template", 0], ["now", 0], ["you", 0], ["can", 0], ["remove", 0], ["this", 0], ["line", 0], ["by", 0], ["using", 0], ["your", 0], ["custom", 0], ["template", 0], ["def", 1], ["main", 1], ["def", 2], ["iterate", 2], ["tokens", 2], ["for", 2], ["line", 2], ["in", 2], ["sys", 0], ["stdin", 0], ["for", 0], ["word", 0], ["in", 0], ["line", 0], ["split", 0], ["yield", 0], ["word", 0], ["tokens", 0], ["iterate", 0], ["tokens", 0], ["a", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["b", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["c", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["d", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["e", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["k", 0], ["int", 0], ["next", 0], ["tokens", 0], ["type", 0], ["int", 0], ["solve", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["itertools", 0], ["l", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["lcombi", 0], ["itertools", 0], ["combinations", 0], ["l", 0], ["2", 0], ["for", 0], ["lc", 0], ["in", 0], ["lcombi", 0], ["if", 0], ["abs", 0], ["lc", 0], ["0", 0], ["lc", 0], ["1", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["l", 0], ["flg", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["l", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["for", 11], ["i", 5], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["i", 0], ["if", 0], ["l", 0], ["i", 0], ["l", 0], ["j", 0], ["k", 0], ["flg", 0], ["true", 0], ["print", 0], ["if", 0], ["flg", 0], ["else", 0], ["yay", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["a", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["5", 0], ["if", 0], ["a", 0], ["j", 0], ["a", 0], ["i", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["a", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["print", 0], ["yay", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["else", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["6", 0], ["print", 0], ["yay", 0], ["if", 0], ["abs", 0], ["a", 0], ["0", 0], ["a", 0], ["4", 0], ["a", 0], ["5", 0], ["else", 0], ["num", 0], ["list", 0], ["count", 0], ["cant", 0], ["go", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["num", 0], ["list", 0], ["append", 0], ["int", 0], ["input", 0], ["num", 0], ["list", 0], ["append", 0], ["int", 0], ["input", 0], ["if", 0], ["max", 0], ["num", 0], ["list", 0], ["min", 0], ["num", 0], ["list", 0], ["num", 0], ["list", 0], ["1", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["d1", 0], ["b", 0], ["a", 0], ["d2", 0], ["c", 0], ["a", 0], ["d3", 0], ["d", 0], ["a", 0], ["d4", 0], ["e", 0], ["a", 0], ["d5", 0], ["c", 0], ["b", 0], ["d6", 0], ["d", 0], ["b", 0], ["d7", 0], ["e", 0], ["b", 0], ["d8", 0], ["d", 0], ["c", 0], ["d9", 0], ["e", 0], ["c", 0], ["d10", 0], ["e", 0], ["d", 0], ["if", 0], ["d1", 0], ["k", 0], ["or", 0], ["d2", 0], ["k", 0], ["or", 0], ["d3", 0], ["k", 0], ["or", 0], ["d4", 0], ["k", 0], ["or", 0], ["d5", 0], ["k", 0], ["or", 0], ["d6", 0], ["k", 0], ["or", 0], ["d7", 0], ["k", 0], ["or", 0], ["d8", 0], ["k", 0], ["or", 0], ["d9", 0], ["k", 0], ["or", 0], ["d10", 0], ["k", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["a", 0], ["0", 0], ["5", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["a", 0], ["i", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["a", 0], ["1", 0], ["a", 0], ["0", 0], ["k", 0], ["s", 0], ["0", 0], ["else", 0], ["s", 0], ["1", 0], ["print", 0], ["yay", 0], ["s", 0], ["cor", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["cor", 0], ["i", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["flag", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["5", 0], ["if", 0], ["abs", 0], ["cor", 0], ["i", 0], ["cor", 0], ["j", 0], ["k", 0], ["flag", 0], ["false", 0], ["if", 0], ["flag", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["w", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["e", 0], ["w", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["num", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["x", 0], ["yay", 0], ["for", 0], ["h", 0], ["in", 0], ["num", 0], ["for", 0], ["j", 0], ["in", 0], ["num", 0], ["if", 0], ["k", 0], ["j", 0], ["h", 0], ["x", 0], ["print", 0], ["x", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["6", 0], ["最長距離", 0], ["e", 0], ["a", 0], ["がk以下", 0], ["全てのアンテナが直接通信できる", 0], ["直接通信できないアンテナの組は存在しない", 0], ["最長距離がkより大きい", 0], ["直接通信できないアンテナの組は少なくとも1つ存在する", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["a", 0], ["append", 0], ["int", 0], ["input", 0], ["a", 0], ["sort", 0], ["j", 0], ["int", 0], ["input", 0], ["k", 0], ["a", 0], ["4", 0], ["a", 0], ["0", 0], ["if", 0], ["k", 0], ["j", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["def", 0], ["main", 0], ["antenna", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["print", 0], ["if", 0], ["max", 0], ["antenna", 0], ["min", 0], ["antenna", 0], ["k", 0], ["else", 0], ["yay", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["math", 0], ["s", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["q", 0], ["0", 0], ["if", 0], ["abs", 0], ["s", 0], ["4", 0], ["s", 0], ["0", 0], ["k", 0], ["q", 0], ["1", 0], ["if", 0], ["q", 0], ["1", 0], ["print", 0], ["yay", 0], ["if", 0], ["q", 0], ["0", 0], ["print", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["list", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["list", 0], ["sorted", 0], ["list", 0], ["if", 0], ["list", 0], ["1", 0], ["list", 0], ["0", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["list", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["a", 0], ["4", 0], ["a", 0], ["0", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["a", 0], ["e", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["6", 0], ["print", 0], ["yay", 0], ["e", 0], ["a", 0], ["k", 0], ["l", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["5", 0], ["if", 0], ["l", 0], ["j", 0], ["l", 0], ["i", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["antenna", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["ans", 0], ["yay", 0], ["for", 3], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["5", 0], ["if", 0], ["i", 0], ["j", 0], ["if", 0], ["antenna", 0], ["j", 0], ["antenna", 0], ["i", 0], ["k", 0], ["ans", 0], ["break", 0], ["else", 0], ["continue", 0], ["break", 0], ["print", 0], ["ans", 0], ["details", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["6", 0], ["details", 0], ["append", 0], ["int", 0], ["input", 0], ["checker", 0], ["for", 0], ["i", 0], ["in", 0], ["details", 0], ["len", 0], ["details", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["details", 0], ["len", 0], ["details", 0], ["1", 0], ["checker", 0], ["append", 0], ["j", 0], ["i", 0], ["if", 0], ["max", 0], ["checker", 0], ["details", 0], ["1", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["k", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["int", 0], ["input", 0], ["if", 0], ["k", 0], ["max", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["min", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["import", 0], ["itertools", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["l", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["m", 0], ["for", 0], ["v", 0], ["in", 0], ["itertools", 0], ["combinations", 0], ["l", 0], ["2", 0], ["m", 0], ["append", 0], ["list", 0], ["v", 0], ["dist", 0], ["for", 0], ["m", 0], ["in", 0], ["m", 0], ["dist", 0], ["append", 0], ["abs", 0], ["m", 0], ["0", 0], ["m", 0], ["1", 0], ["print", 0], ["dist", 0], ["if", 0], ["max", 0], ["dist", 0], ["k", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["t", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["t", 0], ["sort", 0], ["if", 0], ["t", 0], ["4", 0], ["t", 0], ["0", 0], ["k", 0], ["print", 0], ["else", 0], ["print", 0], ["yay", 0], ["ls", 0], ["ans", 0], ["yay", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["ls", 0], ["append", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["5", 0], ["if", 0], ["abs", 0], ["ls", 0], ["i", 0], ["ls", 0], ["j", 0], ["k", 0], ["ans", 0], ["break", 0], ["print", 0], ["ans", 0], ["a", 0], ["int", 0], ["input", 0], ["b", 0], ["int", 0], ["input", 0], ["c", 0], ["int", 0], ["input", 0], ["d", 0], ["int", 0], ["input", 0], ["e", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["if", 0], ["e", 0], ["a", 0], ["k", 0], ["print", 0], ["yay", 0], ["else", 0], ["print", 0], ["li", 0], ["0", 0], ["5", 0], ["ans", 0], ["yay", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["li", 0], ["i", 0], ["int", 0], ["input", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["l", 0], ["in", 0], ["range", 0], ["5", 0], ["if", 0], ["j", 0], ["l", 0], ["if", 0], ["k", 0], ["li", 0], ["l", 0], ["li", 0], ["j", 0], ["0", 0], ["ans", 0], ["print", 0], ["ans", 0], ["abcde", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["5", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["ii", 0], ["in", 0], ["range", 0], ["5", 0], ["for", 0], ["jj", 0], ["in", 0], ["range", 0], ["ii", 0], ["5", 0], ["if", 0], ["int", 0], ["abcde", 0], ["jj", 0], ["int", 0], ["abcde", 0], ["ii", 0], ["k", 0], ["print", 0], ["return", 0], ["print", 0], ["yay", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.02441642071371076, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.01147493951357649, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.06606044396897566, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.04244461965777826, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.024148108398175477, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.011450547484891464, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.06579299277881787, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.04242030591321846, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nShichikuji is the new resident deity of the South Black Snail Temple. Her first job is as follows:\n\nThere are $n$ new cities located in Prefecture X. Cities are numbered from $1$ to $n$. City $i$ is located $x_i$ km North of the shrine and $y_i$ km East of the shrine. It is possible that $(x_i, y_i) = (x_j, y_j)$ even when $i \\ne j$.\n\nShichikuji must provide electricity to each city either by building a power station in that city, or by making a connection between that city and another one that already has electricity. So the City has electricity if it has a power station in it or it is connected to a City which has electricity by a direct connection or via a chain of connections.\n\n    Building a power station in City $i$ will cost $c_i$ yen;     Making a connection between City $i$ and City $j$ will cost $k_i + k_j$ yen per km of wire used for the connection. However, wires can only go the cardinal directions (North, South, East, West). Wires can cross each other. Each wire must have both of its endpoints in some cities. If City $i$ and City $j$ are connected by a wire, the wire will go through any shortest path from City $i$ to City $j$. Thus, the length of the wire if City $i$ and City $j$ are connected is $|x_i - x_j| + |y_i - y_j|$ km. \n\nShichikuji wants to do this job spending as little money as possible, since according to her, there isn't really anything else in the world other than money. However, she died when she was only in fifth grade so she is not smart enough for this. And thus, the new resident deity asks for your help.\n\nAnd so, you have to provide Shichikuji with the following information: minimum amount of yen needed to provide electricity to all cities, the cities in which power stations will be built, and the connections to be made.\n\nIf there are multiple ways to choose the cities and the connections to obtain the construction of minimum price, then print any of them.\n\n\n-----Input-----\n\nFirst line of input contains a single integer $n$ ($1 \\leq n \\leq 2000$) — the number of cities.\n\nThen, $n$ lines follow. The $i$-th line contains two space-separated integers $x_i$ ($1 \\leq x_i \\leq 10^6$) and $y_i$ ($1 \\leq y_i \\leq 10^6$) — the coordinates of the $i$-th city.\n\nThe next line contains $n$ space-separated integers $c_1, c_2, \\dots, c_n$ ($1 \\leq c_i \\leq 10^9$) — the cost of building a power station in the $i$-th city.\n\nThe last line contains $n$ space-separated integers $k_1, k_2, \\dots, k_n$ ($1 \\leq k_i \\leq 10^9$).\n\n\n-----Output-----\n\nIn the first line print a single integer, denoting the minimum amount of yen needed.\n\nThen, print an integer $v$ — the number of power stations to be built.\n\nNext, print $v$ space-separated integers, denoting the indices of cities in which a power station will be built. Each number should be from $1$ to $n$ and all numbers should be pairwise distinct. You can print the numbers in arbitrary order.\n\nAfter that, print an integer $e$ — the number of connections to be made.\n\nFinally, print $e$ pairs of integers $a$ and $b$ ($1 \\le a, b \\le n$, $a \\ne b$), denoting that a connection between City $a$ and City $b$ will be made. Each unordered pair of cities should be included at most once (for each $(a, b)$ there should be no more $(a, b)$ or $(b, a)$ pairs). You can print the pairs in arbitrary order.\n\nIf there are multiple ways to choose the cities and the connections to obtain the construction of minimum price, then print any of them.\n\n\n-----Examples-----\nInput\n3\n2 3\n1 1\n3 2\n3 2 3\n3 2 3\n\nOutput\n8\n3\n1 2 3 \n0\n\nInput\n3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n\nOutput\n27\n1\n2 \n2\n1 2\n2 3\n\n\n\n-----Note-----\n\nFor the answers given in the samples, refer to the following diagrams (cities with power stations are colored green, other cities are colored blue, and wires are colored red):\n\n[Image]\n\nFor the first example, the cost of building power stations in all cities is $3 + 2 + 3 = 8$. It can be shown that no configuration costs less than 8 yen.\n\nFor the second example, the cost of building a power station in City 2 is 2. The cost of connecting City 1 and City 2 is $2 \\cdot (3 + 2) = 10$. The cost of connecting City 2 and City 3 is $3 \\cdot (2 + 3) = 15$. Thus the total cost is $2 + 10 + 15 = 27$. It can be shown that no configuration costs less than 27 yen.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from math import *\n\nc=int(input())\nx=[0]*c\ny=[0]*c\nvu=[False]*c\nfor i in range(c):\n\tx[i],y[i]=[int(s) for s in input().split()]\nprix=[int(s) for s in input().split()]\nfil=[int(s) for s in input().split()]\nanc=[-1]*c\npmin=prix.copy()\nv=0\npl=[]\ne=0\nppl=[]\ntot=0\nfor i in range(c):\n\tpmina=100000000000000000000000\n\tfor j in range(c):\n\t\tif (not vu[j]) and pmin[j]<pmina:\n\t\t\tpmini=j\n\t\t\tpmina=pmin[j]\n\tvu[pmini]=True\n\ttot+=pmina\n\tif anc[pmini]==-1:\n\t\tv+=1\n\t\tpl.append(str(pmini+1))\n\telse:\n\t\te+=1\n\t\tppl.append([str(pmini+1),str(anc[pmini]+1)])\n\tfor j in range(c):\n\t\tif (abs(x[pmini]-x[j])+abs(y[pmini]-y[j]))*(fil[pmini]+fil[j])<pmin[j]:\n\t\t\tpmin[j]=(abs(x[pmini]-x[j])+abs(y[pmini]-y[j]))*(fil[pmini]+fil[j])\n\t\t\tanc[j]=pmini\nprint(tot)\nprint(v)\nprint(\" \".join(pl))\nprint(e)\nfor i in ppl:\n\tprint(\" \".join(i))\n", "N = int(input())  # 市の数\nXY = [list(map(int, input().split())) for _ in range(N)]\nC = list(map(int, input().split()))  # 市 i に発電所を建てるコスト\nK = list(map(int, input().split()))  # つなげるコスト\n\nCC = [-1] * N\nAns = [-2] * N\ntotal_cost = 0\nfor _ in range(N):\n\tmi = float(\"inf\")\n\tfor i, (c, an) in enumerate(zip(C, Ans)):\n\t\tif an == -2 and mi > c:\n\t\t\tmi = c\n\t\t\tami = i\n\ttotal_cost += mi\n\tAns[ami] = CC[ami]\n\tk1 = K[ami]\n\tx1, y1 = XY[ami]\n\tfor i, (k2, (x2, y2)) in enumerate(zip(K, XY)):\n\t\tnew_cost = (k1+k2) * (abs(x1-x2)+abs(y1-y2))\n\t\tif C[i] > new_cost:\n\t\t\tC[i] = new_cost\n\t\t\tCC[i] = ami\nprint(total_cost)\ncnt = Ans.count(-1)\nprint(cnt)\nA = []\nB = []\nfor i, a in enumerate(Ans, 1):\n\tif a==-1:\n\t\tA.append(i)\n\telse:\n\t\tB.append((i, a+1))\nprint(\" \".join(map(str, A)))\nprint(N - cnt)\nfor a, b in B:\n\tprint(a, b)\n", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nT=[tuple(map(int,input().split())) for i in range(n)]\nC=list(map(int,input().split()))\nK=list(map(int,input().split()))\n\nimport heapq\nH=[]\n\nfor i,c in enumerate(C):\n\tH.append((c,i+1))\n\nheapq.heapify(H)\n\nANS=0\nUSE=[0]*(n+1)\nANS1=[]\nANS2=[]\n\nwhile H:\n\tx=heapq.heappop(H)\n\t#print(x)\n\t#print(H)\n\n\tif len(x)==2:\n\t\tcost,town=x\n\n\t\tif USE[town]==1:\n\t\t\tcontinue\n\n\t\tANS+=cost\n\t\tUSE[town]=1\n\t\tANS1.append(town)\n\n\t\txt,yt=T[town-1]\n\n\t\tfor i in range(n):\n\t\t\tif USE[i+1]==1:\n\t\t\t\tcontinue\n\t\t\tcostp=(abs(T[i][0]-xt)+abs(T[i][1]-yt))*(K[i]+K[town-1])\n\t\t\t#print(costp,xt,yt,i)\n\t\t\tif costp<C[i]:\n\t\t\t\tC[i]=costp\n\t\t\t\theapq.heappush(H,(costp,town,i+1))\n\n\telse:\n\t\tcost,town1,town2=x\n\t\tif USE[town1]==1 and USE[town2]==1:\n\t\t\tcontinue\n\n\t\tANS+=cost\n\t\tUSE[town2]=1\n\t\tANS2.append((town1,town2))\n\n\t\txt,yt=T[town2-1]\n\n\t\tfor i in range(n):\n\t\t\tif USE[i+1]==1:\n\t\t\t\tcontinue\n\t\t\tcostp=(abs(T[i][0]-xt)+abs(T[i][1]-yt))*(K[i]+K[town2-1])\n\t\t\tif costp<C[i]:\n\t\t\t\tC[i]=costp\n\t\t\t\theapq.heappush(H,(costp,town2,i+1))\n\nsys.stdout.write(str(ANS)+\"\\n\")\nsys.stdout.write(str(len(ANS1))+\"\\n\")\nprint(*ANS1)\n\nsys.stdout.write(str(len(ANS2))+\"\\n\")\nfor x,y in ANS2:\n\tsys.stdout.write(str(x)+\" \"+str(y)+\"\\n\")\n\n\t\t\n\t\t\t\n\t\t\n\t\t\n", "import sys\n\n# inf = open('input.txt', 'r')\n# reader = (map(int, line.split()) for line in inf)\nreader = (map(int, s.split()) for s in sys.stdin)\n\nn, = next(reader)\ncities = [None]\nfor _ in range(n):\n\tx, y = next(reader)\n\tcities.append((x, y))\ncs = [None] + list(next(reader))\nks = [None] + list(next(reader))\n\nn += 1\ng = [[None] * n for _ in range(n)]\nfor i in range(1, n):\n\tfor j in range(i + 1, n):\n\t\twire = ks[i] + ks[j]\n\t\tdist = abs(cities[i][0] - cities[j][0]) + \\\n\t\t\t\tabs(cities[i][1] - cities[j][1])\n\t\tg[i][j] = g[j][i] = wire * dist\nfor i in range(1, n):\n\tg[0][i] = g[i][0] = cs[i]\nfor i in range(n):\n\tg[i][i] = float('inf')\n\ntotalCost = 0\nstations = []\nconnections = []\n\nused = [False] * n\nmin_e = [float('inf')] * n\nsel_e = [-1] * n\n\nstart = 0  # starting from 0-node (dummy node)\nmin_e[start] = 0\nfor i in range(n):\n\tv = -1\n\tfor j in range(n):\n\t\tif (not used[j] and (v == -1 or min_e[j] < min_e[v])):\n\t\t\tv = j\n#     if min_e[v] == float('inf'): break\n\tused[v] = True\n\n\tfromNode = sel_e[v]\n\tif not fromNode:  # edge (0, v) <=> v-node has station\n\t\ttotalCost += g[v][fromNode]\n\t\tstations.append(v)\n\telif fromNode > 0:\n\t\ttotalCost += g[v][fromNode]\n\t\tconnections.append((v, fromNode))\n\t\t\n\tfor to in range(n):\n\t\tif g[v][to] < min_e[to]:\n\t\t\tmin_e[to] = g[v][to]\n\t\t\tsel_e[to] = v\n\nprint(totalCost)\nprint(len(stations))\nprint(*stations)\nprint(len(connections))\n[print(c1, c2) for c1, c2 in connections];\n\t\n# inf.close()\n", "import sys\n\n\n# inf = open('input.txt', 'r')\n# reader = (map(int, line.split()) for line in inf)\nreader = (list(map(int, s.split())) for s in sys.stdin)\n\nn, = next(reader)\ncities = [None]\nfor _ in range(n):\n\tx, y = next(reader)\n\tcities.append((x, y))\ncs = [None] + list(next(reader))\nks = [None] + list(next(reader))\n\nn += 1  # extra 0 node (dummy node); edge (0, v) <=> v-node has station\ng = [[None] * n for _ in range(n)]\nfor i in range(1, n):\n\tfor j in range(i + 1, n):\n\t\twire = ks[i] + ks[j]\n\t\tdist = abs(cities[i][0] - cities[j][0]) + \\\n\t\t\t\tabs(cities[i][1] - cities[j][1])\n\t\tg[i][j] = g[j][i] = wire * dist\nfor i in range(1, n):\n\tg[0][i] = g[i][0] = cs[i]\nfor i in range(n):\n\tg[i][i] = float('inf')\n\ntotalCost = 0\nstations = []\nconnections = []\n\nused = [False] * n\nmin_e = [float('inf')] * n\nsel_e = [-1] * n\n\nstart = 0  # starting from 0-node (dummy node)\nmin_e[start] = 0\nfor i in range(n):\n\tv = -1\n\tfor j in range(n):\n\t\tif (not used[j] and (v == -1 or min_e[j] < min_e[v])):\n\t\t\tv = j\n#     if min_e[v] == float('inf'): break\n\tused[v] = True\n\n\tfromNode = sel_e[v]\n\tif not fromNode:  # edge (0, v) <=> v-node has station\n\t\ttotalCost += g[v][fromNode]\n\t\tstations.append(v)\n\telif fromNode > 0:\n\t\ttotalCost += g[v][fromNode]\n\t\tconnections.append((v, fromNode))\n\t\t\n\tfor to in range(n):\n\t\tif g[v][to] < min_e[to]:\n\t\t\tmin_e[to] = g[v][to]\n\t\t\tsel_e[to] = v\n\nmyprint = sys.stdout.write\nmyprint(str(totalCost) + '\\n')\nmyprint(str(len(stations)) + '\\n')\n[myprint(str(st) + ' ') for st in stations];\nmyprint(str(len(connections)) + '\\n')\n[myprint(str(c1) + ' ' + str(c2) + '\\n') for c1, c2 in connections];\n\n# print(totalCost)\n# print(len(stations))\n# print(*stations)\n# print(len(connections))\n# [print(c1, c2) for c1, c2 in connections];\n\t\n# inf.close()\n", "import sys\n\n\n# inf = open('input.txt', 'r')\n# reader = (map(int, line.split()) for line in inf)\nreader = (list(map(int, s.split())) for s in sys.stdin)\n\nn, = next(reader)\nlocs = [tuple(next(reader)) for _ in range(n)]\ncs = list(next(reader))\nks = list(next(reader))\n\ntotalCost = 0\nstations = []\nconnections = []\n\nconnCosts = {i: cost for i, cost in enumerate(cs)}\nconnTo = [-1] * n\nwhile connCosts:\n\tv = min(connCosts, key=connCosts.get)\n\ttotalCost += connCosts[v]\n\t\n\tif connCosts[v] < cs[v]:\n\t\tto = connTo[v]\n\t\tconnections.append((v, to))        \n\telse:\n\t\tstations.append(v)\n\t\t\n\tconnCosts.pop(v)\n\tfor to, cost in list(connCosts.items()):\n\t\twire = ks[v] + ks[to]\n\t\tdist = abs(locs[v][0] - locs[to][0]) + \\\n\t\t\t\tabs(locs[v][1] - locs[to][1])\n\t\tnewCost = wire * dist\n\t\tif connCosts[to] > newCost:\n\t\t\tconnCosts[to] = newCost\n\t\t\tconnTo[to] = v\n\t\t\t\nmyprint = sys.stdout.write\nmyprint(str(totalCost) + '\\n')\nmyprint(str(len(stations)) + '\\n')\n[myprint(str(st + 1) + ' ') for st in stations];\nmyprint(str(len(connections)) + '\\n')\n[myprint(str(c1 + 1) + ' ' + str(c2 + 1) + '\\n') for c1, c2 in connections];\n\n# print(totalCost)\n# print(len(stations))\n# print(*(st + 1 for st in stations))\n# print(len(connections))\n# [print(c1 + 1, c2 + 1) for c1, c2 in connections];\n\t\n# inf.close()\n", "# refactored Prim's algorithm \n# (with dummy 0-node)\nimport sys\n\n\n# inf = open('input.txt', 'r')\n# reader = (map(int, line.split()) for line in inf)\nreader = (list(map(int, s.split())) for s in sys.stdin)\n\nn, = next(reader)\ncities = [None]\nfor _ in range(n):\n\tx, y = next(reader)\n\tcities.append((x, y))\ncs = [None] + list(next(reader))\nks = [None] + list(next(reader))\n\nn += 1  # extra dummy 0-node (source of power); edge (0, v) = c_v\ng = [[None] * n for _ in range(n)]\nfor i in range(1, n):\n\tfor j in range(i + 1, n):\n\t\twire = ks[i] + ks[j]\n\t\tdist = abs(cities[i][0] - cities[j][0]) + \\\n\t\t\t\tabs(cities[i][1] - cities[j][1])\n\t\tg[i][j] = g[j][i] = wire * dist\nfor i in range(1, n):\n\tg[0][i] = g[i][0] = cs[i]\nfor i in range(n):\n\tg[i][i] = float('inf')\n\ntotalCost = 0\nstations = []\nconnections = []\n\nconnCosts = {i: float('inf') for i in range(n)}\nconnTo = [-1] * n\n\nstart = 0  # starting from dummy node\nconnCosts[start] = 0\nwhile connCosts:\n\t# node with min connection cost\n\tv = min(connCosts, key=connCosts.get)\n\tif connCosts[v] == float('inf'): break\n\n\tfromNode = connTo[v]\n\tif not fromNode:  # edge (0, v) <=> v-node has station\n\t\ttotalCost += g[v][fromNode]\n\t\tstations.append(v)\n\telif fromNode > 0:\n\t\ttotalCost += g[v][fromNode]\n\t\tconnections.append((v, fromNode))\n\t\t\n\tconnCosts.pop(v)\n\tfor to, cost in list(connCosts.items()):\n\t\tif g[v][to] < connCosts[to]:\n\t\t\tconnCosts[to] = g[v][to]\n\t\t\tconnTo[to] = v\n\nmyprint = sys.stdout.write\nmyprint(str(totalCost) + '\\n')\nmyprint(str(len(stations)) + '\\n')\n[myprint(str(st) + ' ') for st in stations];\nmyprint(str(len(connections)) + '\\n')\n[myprint(str(c1) + ' ' + str(c2) + '\\n') for c1, c2 in connections];\n\n# print(totalCost)\n# print(len(stations))\n# print(*stations)\n# print(len(connections))\n# [print(c1, c2) for c1, c2 in connections];\n\t\n# inf.close()\n", "def prim(matrix, inf=10**18):\n\tn = len(matrix)\n\tcosts = [inf] + [inf-1]*(n-1)\n\tnearest = [-1]*n\n\tcurrent = 0\n\ttotal_cost = 0\n\n\tbuild, connect = [], []\n\n\tfor _ in range(n-1):\n\t\tmin_cost = inf\n\t\tsrc, dest = -1, -1\n\n\t\tfor i in range(n):\n\t\t\tif costs[i] == inf:\n\t\t\t\tcontinue\n\t\t\tif matrix[current][i] < costs[i]:\n\t\t\t\tcosts[i] = matrix[current][i]\n\t\t\t\tnearest[i] = current\n\t\t\tif min_cost > costs[i]:\n\t\t\t\tmin_cost = costs[i]\n\t\t\t\tsrc, dest = nearest[i], i\n\n\t\ttotal_cost += min_cost\n\t\tcosts[dest] = inf\n\n\t\tif src == 0:\n\t\t\tbuild.append(dest)\n\t\telse:\n\t\t\tconnect.append('%d %d' % (src, dest))\n\n\t\tcurrent = dest\n\n\treturn build, connect, total_cost\n\n\ndef __starting_point():\n\timport sys\n\tn = int(input())\n\tpos = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n\tc_costs = list(map(int, input().split()))\n\tk_costs = list(map(int, input().split()))\n\n\tinf = 10**18\n\tmatrix = [[inf]*(n+1) for _ in range(n+1)]\n\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tmatrix[i+1][j+1] = matrix[j+1][i+1] = \\\n\t\t\t\t(abs(pos[i][0]-pos[j][0]) + abs(pos[i][1]-pos[j][1])) * (k_costs[i]+k_costs[j])\n\n\t\tmatrix[i+1][0] = matrix[0][i+1] = c_costs[i]\n\n\tbuild, connect, cost = prim(matrix)\n\tprint(cost)\n\tprint(len(build))\n\tprint(*build)\n\tprint(len(connect))\n\tif connect:\n\t\tprint(*connect, sep='\\n')\n\n__starting_point()\n", "def prim_matrix(matrix: list, inf=10**18):\n\tn = len(matrix)\n\tcosts, unused = [inf]*n, [0]+[1]*(n-1)\n\tcurrent = 0\n\ttotal_cost = 0\n\n\tnearest = [-1]*n\n\tbuild, connect = [], []\n\n\tfor _ in range(n-1):\n\t\tmin_cost = inf\n\t\tdest = -1\n\t\tsrc = -1\n\n\t\tfor i in range(n):\n\t\t\tif unused[i]:\n\t\t\t\tif matrix[current][i] < costs[i]:\n\t\t\t\t\tcosts[i] = matrix[current][i]\n\t\t\t\t\tnearest[i] = current\n\t\t\t\tif min_cost > costs[i]:\n\t\t\t\t\tmin_cost = costs[i]\n\t\t\t\t\tdest = i\n\t\t\t\t\tsrc = nearest[i]\n\n\t\ttotal_cost += min_cost\n\t\tunused[dest] = 0\n\n\t\tif src == 0:\n\t\t\tbuild.append(dest)\n\t\telse:\n\t\t\tconnect.append('%d %d' % (src, dest))\n\t\tcurrent = dest\n\n\tprint(total_cost)\n\tprint(len(build))\n\tprint(*build)\n\tprint(len(connect))\n\tif connect:\n\t\tprint(*connect, sep='\\n')\n\n\treturn total_cost\n\n\ndef __starting_point():\n\timport sys\n\tn = int(input())\n\tpos = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n\tc_costs = list(map(int, input().split()))\n\tk_costs = list(map(int, input().split()))\n\n\tinf = 10**18\n\tmatrix = [[inf]*(n+1) for _ in range(n+1)]\n\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tmatrix[i+1][j+1] = matrix[j+1][i+1] = \\\n\t\t\t\t(abs(pos[i][0]-pos[j][0]) + abs(pos[i][1]-pos[j][1])) * (k_costs[i]+k_costs[j])\n\n\t\tmatrix[i+1][0] = matrix[0][i+1] = c_costs[i]\n\n\tcost = prim_matrix(matrix)\n\n__starting_point()\n", "import sys\n\nreader = (list(map(int, s.split())) for s in sys.stdin)\n \nn, = next(reader)\nxy = []\nfor _ in range(n):\n\tx, y = next(reader)\n\txy.append([x, y])\nc = list(next(reader))\nk = list(next(reader))\n\n\n# n = int(input())\n# xy = [[]]*n\n# for i in range(n):\n#     xy[i] = list(map(int,input().split()))\n\n# c = list(map(int,input().split()))\n# k = list(map(int,input().split()))\n\ngraph = [[0 for _ in range(n+1)] for _i in range(n+1)]\n\nfor i in range(n):\n\tfor j in range(i+1,n):\n\t\tcost = (abs(xy[i][0]-xy[j][0])+abs(xy[i][1]-xy[j][1]))*(k[i]+k[j])\n\t\tgraph[i][j] = graph[j][i] = cost\n\tgraph[n][i] = graph[i][n] = c[i]\n\n# def output(parent):\n#     es = []\n#     vs = []\n#     cost = 0\n#     for i in range(1,(n+1)):\n#         if parent[i]==n:\n#             vs.append(i+1)\n#         elif i==n:\n#             vs.append(parent[i]+1)\n#         else:\n#             es.append([i+1,parent[i]+1])\n#         cost+= graph[i][parent[i]]\n#     print(cost)\n#     print(len(vs))\n#     print(*vs)\n#     print(len(es))\n#     for i in es:\n#         print(i[0],i[1])\n\t\t\t\n\n# def minKey(key, mstSet): \n#     # Initilaize min value \n#     min = 1000000000000 \n\n#     for v in range((n+1)): \n#         if key[v] < min and mstSet[v] == False: \n#             min = key[v] \n#             min_index = v \n\n#     return min_index \n\ndef primMST():\n\t# Key values used to pick minimum weight edge in cut \n\tkey = [1000000000000] * (n+1)\n\tparent = [None] * (n+1) # Array to store constructed MST \n\t# Make key 0 so that this vertex is picked as first vertex \n\tkey[0] = 0 \n\tmstSet = [False] * (n+1) \n\n\tparent[0] = -1 # First node is always the root of \n\n\tfor cout in range((n+1)): \n\n\t\t# Pick the minimum distance vertex from  \n\t\t# the set of vertices not yet processed.  \n\t\t# u is always equal to src in first iteration \n\t\tmn = 1000000000000 \n\n\t\tfor v in range((n+1)): \n\t\t\tif key[v] < mn and mstSet[v] == False: \n\t\t\t\tmn = key[v] \n\t\t\t\tmin_index = v \n\n\t\tu = min_index \n\n\t\t# Put the minimum distance vertex in  \n\t\t# the shortest path tree \n\t\tmstSet[u] = True\n\n\t\t# Update dist value of the adjacent vertices  \n\t\t# of the picked vertex only if the current  \n\t\t# distance is greater than new distance and \n\t\t# the vertex in not in the shotest path tree \n\t\tfor v in range((n+1)): \n\t\t\t# graph[u][v] is non zero only for adjacent vertices of m \n\t\t\t# mstSet[v] is false for vertices not yet included in MST \n\t\t\t# Update the key only if graph[u][v] is smaller than key[v] \n\t\t\tif graph[u][v] > 0 and mstSet[v] == False and key[v] > graph[u][v]: \n\t\t\t\t\tkey[v] = graph[u][v] \n\t\t\t\t\tparent[v] = u\n\t\t\n\t# es = []\n\tvss = 0\n\t# vs = []\n\tcost = 0\n\tfor i in range(1,(n+1)):\n\t\tif parent[i]==n or i==n:\n\t\t\tvss += 1\n\t\t#     vs.append(i+1)\n\t\t# elif i==n:\n\t\t#     vs.append(parent[i]+1)\n\t\t# else:\n\t\t#     es.append([i+1,parent[i]+1])\n\t\tcost+= graph[i][parent[i]]\n\t\n\tmyprint = sys.stdout.write\n\n\tmyprint(str(cost) + '\\n')\n\t# print(cost)\n\t# print(vss)\n\tmyprint(str(vss)+'\\n')\n\t\n\n\tvs = [0]*(vss)\n\tes = [[]]*(n-vss)\n\tk1,k2 = 0,0\n\n\tfor i in range(1,(n+1)):\n\t\tif parent[i]==n:\n\t\t\tvs[k1] = i+1\n\t\t\tk1+=1\n\t\telif i==n:\n\t\t\tvs[k1] = parent[i]+1\n\t\t\tk1+=1\n\t\telse:\n\t\t\tes[k2] = [i+1,parent[i]+1]\n\t\t\tk2+=1\n\t\t# cost+= graph[i][parent[i]]\n\n\t# print(*vs)\n\t[myprint(str(st) + ' ') for st in vs]\n\tmyprint('\\n')\n\tmyprint(str(len(es))+'\\n')\n\t[myprint(str(i[0]) + ' ' + str(i[1]) + '\\n') for i in es]\n\t# print(len(es))\n\t# for i in es:\n\t#     print(i[0],i[1])\n\t\t\n\t\n\t\n\t# myprint(str(totalCost) + '\\n')\n\t# myprint(str(len(stations)) + '\\n')\n\t# [myprint(str(st) + ' ') for st in stations];\n\t# myprint(str(len(connections)) + '\\n')\n\t# [myprint(str(c1) + ' ' + str(c2) + '\\n') for c1, c2 in connections];\n\n\nprimMST()\n\n# e = 0\n# i=0\n# ans = []\n# ret = 0\n# while e<n:\n#     edge = edges[i]\n#     i+=1\n#     cost,a,b = edge\n#     if find(a)!=find(b):\n#         e+=1\n#         ans.append([cost,a,b])\n#         union(a,b)\n#         ret += cost\n\n# vs = []\n# es = []\n# for i in ans:\n#     if i[1]==n:\n#         vs.append(i[2]+1)\n#     else:\n#         es.append(i)\n\n# print(ret)\n# print(len(vs))\n# print(*vs)\n# print(len(es))\n# for i in es:\n#     print(i[1]+1,i[2]+1)\n\n", "from collections import deque\nfrom math import inf\n\ndef run_testcase():\n\tn = int(input())\n\n\tcoords = [None] * (n + 1)\n\n\tfor i in range(1, n + 1):\n\t\tcoords[i] = [int(x) for x in input().split()]\n\n\tci = [0] + [int(x) for x in input().split()]\n\tki = [0] + [int(x) for x in input().split()]\n\n\n\tdef cost(i, j):\n\t\tif i == j:\n\t\t\treturn 0\n\n\t\tif i > j:\n\t\t\ti, j = j, i\n\n\t\tif i == 0:\n\t\t\treturn ci[j]\n\n\t\treturn (abs(coords[i][0] - coords[j][0]) + abs(coords[i][1] - coords[j][1])) * (ki[i] + ki[j])\n\n\n\tcurrent_cost = 0\n\ttree = set([0])\n\trest = set(range(1, n + 1))\n\tincluded = [True] + [False] * n\n\tconnections = deque()\n\tconnections_to_station = 0\n\n\t# min_attach_cost = [0] + [inf] * n\n\t# min_attach_cost = [0] + [cost(0, j) for j in range(1, n + 1)]\n\tmin_attach_cost = [(0, 0)] + [(cost(0, j), 0) for j in range(1, n + 1)]\n\n\n\twhile len(tree) < n + 1:\n\t\tmin_pair = (0, 0)\n\t\tmin_cost = inf\n\t\t# for tree_node in tree:\n\t\t# \tfor i in range(1, n + 1):\n\t\t# \t\tif included[i]:\n\t\t# \t\t\tcontinue\n\t\t# \t\tcurr_cost = cost(tree_node, i)\n\t\t# \t\tif curr_cost < min_cost:\n\t\t# \t\t\tmin_pair = (tree_node, i)\n\t\t# \t\t\tmin_cost = curr_cost\n\n\t\tfor node in rest:\n\t\t\tif min_attach_cost[node][0] < min_cost:\n\t\t\t\tmin_pair = (min_attach_cost[node][1], node)\n\t\t\t\tmin_cost = min_attach_cost[node][0]\n\n\n\n\t\ttree.add(min_pair[1])\n\t\tincluded[min_pair[1]] = True\n\t\tcurrent_cost += min_cost\n\n\t\trest.remove(min_pair[1])\n\t\tfor node in rest:\n\t\t\tif cost(min_pair[1], node) < min_attach_cost[node][0]:\n\t\t\t\tmin_attach_cost[node] = (cost(min_pair[1], node), min_pair[1])\n\n\t\tmin_pair = tuple(sorted(min_pair))\n\n\t\tif min_pair[0] == 0:\n\t\t\tconnections.appendleft(min_pair)\n\t\t\tconnections_to_station += 1\n\t\telse:\n\t\t\tconnections.append(min_pair)\n\n\tconnections_list = list(connections)\n\n\tprint(current_cost)\n\tprint(connections_to_station)\n\tprint(' '.join([str(x[1]) for x in connections_list[:connections_to_station]]))\n\n\tprint(len(connections_list) - connections_to_station)\n\tfor i in range(connections_to_station, len(connections_list)):\n\t\tprint(connections_list[i][0], connections_list[i][1])\n\n\n\n\n\n\n# testcase_count = int(input())\n\n# for i in range(testcase_count):\n# \tprint(str(run_testcase()))\n\nrun_testcase()\n", "N = int(input())  # 市の数\nXY = [list(map(int, input().split())) for _ in range(N)]\nC = list(map(int, input().split()))  # 市 i に発電所を建てるコスト\nK = list(map(int, input().split()))  # つなげるコスト\n \nCC = [-1] * N\nAns = [-2] * N\ntotal_cost = 0\nfor _ in range(N):\n\tmi = float(\"inf\")\n\tfor i, (c, an) in enumerate(zip(C, Ans)):\n\t\tif an == -2 and mi > c:\n\t\t\tmi = c\n\t\t\tami = i\n\ttotal_cost += mi\n\tAns[ami] = CC[ami]\n\tk1 = K[ami]\n\tx1, y1 = XY[ami]\n\tfor i, (k2, (x2, y2)) in enumerate(zip(K, XY)):\n\t\tnew_cost = (k1+k2) * (abs(x1-x2)+abs(y1-y2))\n\t\tif C[i] > new_cost:\n\t\t\tC[i] = new_cost\n\t\t\tCC[i] = ami\nprint(total_cost)\ncnt = Ans.count(-1)\nprint(cnt)\nA = []\nB = []\nfor i, a in enumerate(Ans, 1):\n\tif a==-1:\n\t\tA.append(i)\n\telse:\n\t\tB.append((i, a+1))\nprint(\" \".join(map(str, A)))\nprint(N - cnt)\nfor a, b in B:\n\tprint(a, b)\n", "n=int(input())\npos=[[*map(int,input().split())] for i in range(n)]\n*c,=map(int, input().split())\n*k,=map(int, input().split())\nused = [False for i in range(n)]\nparent = [-1 for i in range(n)]\nplants = []\nconnections = []\nans = 0\n_n = n\nwhile(_n):\n\t_n -= 1\n\tmn, u = min([(ci, i) for i, ci in enumerate(c) if not used[i]])\n\tans += mn\n\tused[u] = True\n\tif parent[u] == -1:\n\t\tplants.append(u)\n\telse:\n\t\tconnections.append((min(parent[u], u), max(parent[u], u)))\n\tfor i in range(n):\n\t\tcon_cost = (k[u] + k[i])*(abs(pos[u][0]-pos[i][0])+abs(pos[u][1]-pos[i][1]))\n\t\tif con_cost < c[i]:\n\t\t\tc[i] = con_cost\n\t\t\tparent[i] = u\nprint(ans)\nprint(len(plants))\nfor p in sorted(plants):\n\tprint(p+1, end=' ')\nprint('')\nprint(len(connections))\nfor con in connections:\n\tprint(con[0]+1, con[1]+1)\n", "n = int(input())\ncord = [[*map(int, input().split())]for _ in range(n)]\nc = [*map(int, input().split())]\nk = [*map(int, input().split())]\nplant = set()\ncovered = set()\nparent = [-1] * n\nsum = 0\nfor _ in range(n):\n\tcost, idx = min([cost, idx] for idx, cost in enumerate(c) if idx not in covered)\n\tsum += cost\n\tcovered.add(idx)\n\tif parent[idx] == -1:\n\t\tplant.add(idx)\n\tfor i in range(n):\n\t\tif i in covered:\n\t\t\tcontinue\n\t\tc_l = (k[i]+k[idx])*(abs(cord[i][0]-cord[idx][0])+abs(cord[i][1]-cord[idx][1]))\n\t\tif c_l <c[i]:\n\t\t\tc[i] = c_l\n\t\t\tparent[i] = idx\nprint('{}\\n{}'.format(sum, len(plant)))\nprint(*map(lambda x: x+1, plant))\nlinks = 0\nout = ''\nfor i, _ in enumerate(parent):\n\tif _ != -1:\n\t\tlinks += 1\n\t\tout += '\\n' + str(_+1) + ' ' + str(i+1)\nprint(links, out)\n", "import bisect\nimport functools\nimport math\nimport sys\nfrom collections import defaultdict\n\n# input = sys.stdin.readline\nrt = lambda: map(int, input().split())\nri = lambda: int(input())\nrl = lambda: list(map(int, input().split()))\n\n\ndef dist(x1, y1, x2, y2):\n\treturn abs(x1-x2)+abs(y1-y2)\n\ndef main():\n\tn = ri()\n\tx, y = [0] * n, [0] * n\n\tfor i in range(n):\n\t\tx[i], y[i] = rt()\n\tc = rl()\n\tk = rl()\n\n\tval = c.copy()\n\tused = [False] * n\n\tlink = [-1] * n\n\tto_build = []\n\tfor _ in range(n):  # each step removes 1 city\n\t\t# find min\n\t\tmin_index = -1\n\t\tmin_val = math.inf\n\t\tfor i in range(n):\n\t\t\tif not used[i] and val[i] < min_val:\n\t\t\t\tmin_index = i\n\t\t\t\tmin_val = val[i]\n\n\t\tused[min_index] = True\n\t\tif link[min_index] == -1:\n\t\t\tto_build.append(min_index+1)\n\t\tfor i in range(n):\n\t\t\tif not used[i]:\n\t\t\t\tto_link  = (k[i]+k[min_index])*dist(x[i], y[i], x[min_index], y[min_index])\n\t\t\t\tif to_link < val[i]:\n\t\t\t\t\tval[i] = to_link\n\t\t\t\t\tlink[i] = min_index\n\n\tprint(sum(val))\n\tprint(len(to_build))\n\tprint(*to_build)\n\tprint(len([x for x in link if x > -1]))\n\tfor i in range(n):\n\t\tif link[i] > -1:\n\t\t\tprint(i+1, link[i]+1)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n=int(input())\nX=[[0]*7 for _ in range(n)]\nfor i in range(n):\n\tx,y=map(int,input().split())\n\tX[i][0]=i+1\n\tX[i][1]=x\n\tX[i][2]=y\nC=[int(i) for i in input().split()]\nK=[int(i) for i in input().split()]\nfor i in range(n):\n\tX[i][3]=C[i]\n\tX[i][4]=K[i]\nX.sort(key=lambda x:x[3])\nans_am=0\nans_ps=0\nAns=[]\nans_con=0\nCon=[]\n\nwhile X:\n\tind,x,y,c,k,flag,source=X.pop(0)\n\tans_am+=c\n\tif flag==0:\n\t\tans_ps+=1\n\t\tAns.append(ind)\n\telse:\n\t\tans_con+=1\n\t\tCon.append([ind,source])\n\tfor i in range(len(X)):\n\t\tindi,xi,yi,ci,ki,flagi,sourcei=X[i]\n\t\tif (k+ki)*(abs(x-xi)+abs(y-yi))<ci:\n\t\t\tX[i][3]=(k+ki)*(abs(x-xi)+abs(y-yi))\n\t\t\tX[i][5]=1\n\t\t\tX[i][6]=ind\n\tX.sort(key=lambda x:x[3])\n\nprint(ans_am)\nprint(ans_ps)\nprint(*Ans)\nprint(ans_con)\nfor i,j in Con:\n\tprint(i,j)\n", "n=int(input())\nX=[[0]*7 for _ in range(n)]\nfor i in range(n):\n\tx,y=map(int,input().split())\n\tX[i][0]=i+1\n\tX[i][1]=x\n\tX[i][2]=y\nC=[int(i) for i in input().split()]\nK=[int(i) for i in input().split()]\nfor i in range(n):\n\tX[i][3]=C[i]\n\tX[i][4]=K[i]\n\nans_am=0\nans_ps=0\nAns=[]\nans_con=0\nCon=[]\n\ndef m(X):\n\tret=0\n\tcur=X[0][3]\n\tfor i in range(1,len(X)):\n\t\tif X[i][3]<cur:\n\t\t\tret=i\n\t\t\tcur=X[i][3]\n\treturn ret\n\n\nwhile X:\n\tr=m(X)\n\tind,x,y,c,k,flag,source=X.pop(r)\n\tans_am+=c\n\tif flag==0:\n\t\tans_ps+=1\n\t\tAns.append(ind)\n\telse:\n\t\tans_con+=1\n\t\tCon.append([ind,source])\n\tfor i in range(len(X)):\n\t\tindi,xi,yi,ci,ki,flagi,sourcei=X[i]\n\t\tif (k+ki)*(abs(x-xi)+abs(y-yi))<ci:\n\t\t\tX[i][3]=(k+ki)*(abs(x-xi)+abs(y-yi))\n\t\t\tX[i][5]=1\n\t\t\tX[i][6]=ind\n\nprint(ans_am)\nprint(ans_ps)\nprint(*Ans)\nprint(ans_con)\nfor i,j in Con:\n\tprint(i,j)\n", "import sys\ninput=sys.stdin.readline\nn=int(input())\nX=[[0]*7 for _ in range(n)]\nfor i in range(n):\n\tx,y=map(int,input().split())\n\tX[i][0],X[i][1],X[i][2]=i+1,x,y\nC=[int(i) for i in input().split()]\nK=[int(i) for i in input().split()]\nfor i in range(n):\n\tX[i][3],X[i][4]=C[i],K[i]\n\nans_am=0\nans_ps=0\nAns=[]\nans_con=0\nCon=[]\n\ndef m(X):\n\tret=0\n\tcur=X[0][3]\n\tfor i in range(1,len(X)):\n\t\tif X[i][3]<cur:\n\t\t\tret=i\n\t\t\tcur=X[i][3]\n\treturn ret\n\n\nwhile X:\n\tr=m(X)\n\tind,x,y,c,k,flag,source=X.pop(r)\n\tans_am+=c\n\tif flag==0:\n\t\tans_ps+=1\n\t\tAns.append(ind)\n\telse:\n\t\tans_con+=1\n\t\tCon.append((ind,source))\n\tfor i in range(len(X)):\n\t\tindi,xi,yi,ci,ki,flagi,sourcei=X[i]\n\t\tcost=(k+ki)*(abs(x-xi)+abs(y-yi))\n\t\tif cost<ci:\n\t\t\tX[i][3],X[i][5],X[i][6]=cost,1,ind\n\nprint(ans_am)\nprint(ans_ps)\nprint(*Ans)\nprint(ans_con)\nfor i,j in Con:\n\tprint(i,j)\n", "import sys\ninput=sys.stdin.readline\nn=int(input())\nX=[[0]*7 for _ in range(n)]\nfor i in range(n):\n\tx,y=map(int,input().split())\n\tX[i][0],X[i][1],X[i][2]=i+1,x,y\nC=[int(i) for i in input().split()]\nK=[int(i) for i in input().split()]\nfor i in range(n):\n\tX[i][3],X[i][4]=C[i],K[i]\n\nans_am=0\nans_ps=0\nAns=[]\nans_con=0\nCon=[]\n\ndef m(X):\n\tret=0\n\tcur=X[0][3]\n\tfor i in range(1,len(X)):\n\t\tif X[i][3]<cur:\n\t\t\tret=i\n\t\t\tcur=X[i][3]\n\treturn ret\n\ndef cost(k,ki,x,xi,y,yi):\n\treturn (k+ki)*(abs(x-xi)+abs(y-yi))\n\nwhile X:\n\tr=m(X)\n\tind,x,y,c,k,flag,source=X.pop(r)\n\tans_am+=c\n\tif not flag:\n\t\tans_ps+=1\n\t\tAns.append(ind)\n\telse:\n\t\tans_con+=1\n\t\tCon.append((ind,source))\n\tfor i in range(len(X)):\n\t\tindi,xi,yi,ci,ki,flagi,sourcei=X[i]\n\t\tco=cost(k,ki,x,xi,y,yi)\n\t\tif co<ci:\n\t\t\tX[i][3],X[i][5],X[i][6]=co,1,ind\n\nprint(ans_am)\nprint(ans_ps)\nprint(*Ans)\nprint(ans_con)\nfor i,j in Con:\n\tprint(i,j)\n", "# copy from https://codeforces.com/contest/1245/submission/64023056\n\nN = int(input())  # 市の数\nXY = [list(map(int, input().split())) for _ in range(N)]\nC = list(map(int, input().split()))  # 市 i に発電所を建てるコスト\nK = list(map(int, input().split()))  # つなげるコスト\n\nCC = [-1] * N\nAns = [-2] * N\ntotal_cost = 0\nfor _ in range(N):\n\tmi = float(\"inf\")\n\tfor i, (c, an) in enumerate(zip(C, Ans)):\n\t\tif an == -2 and mi > c:\n\t\t\tmi = c\n\t\t\tami = i\n\ttotal_cost += mi\n\tAns[ami] = CC[ami]\n\tk1 = K[ami]\n\tx1, y1 = XY[ami]\n\tfor i, (k2, (x2, y2)) in enumerate(zip(K, XY)):\n\t\tnew_cost = (k1+k2) * (abs(x1-x2)+abs(y1-y2))\n\t\tif C[i] > new_cost:\n\t\t\tC[i] = new_cost\n\t\t\tCC[i] = ami\nprint(total_cost)\ncnt = Ans.count(-1)\nprint(cnt)\nA = []\nB = []\nfor i, a in enumerate(Ans, 1):\n\tif a==-1:\n\t\tA.append(i)\n\telse:\n\t\tB.append((i, a+1))\nprint(\" \".join(map(str, A)))\nprint(N - cnt)\nfor a, b in B:\n\tprint(a, b)\n", "n=int(input())\nX=[[0]*7 for _ in range(n)]\nfor i in range(n):\n\tx,y=map(int,input().split())\n\tX[i][0]=i+1\n\tX[i][1]=x\n\tX[i][2]=y\nC=[int(i) for i in input().split()]\nK=[int(i) for i in input().split()]\nfor i in range(n):\n\tX[i][3]=C[i]\n\tX[i][4]=K[i]\nX.sort(key=lambda x:x[3])\nans_am=0\nans_ps=0\nAns=[]\nans_con=0\nCon=[]\n \nwhile X:\n\tind,x,y,c,k,flag,source=X.pop(0)\n\tans_am+=c\n\tif flag==0:\n\t\tans_ps+=1\n\t\tAns.append(ind)\n\telse:\n\t\tans_con+=1\n\t\tCon.append([ind,source])\n\tfor i in range(len(X)):\n\t\tindi,xi,yi,ci,ki,flagi,sourcei=X[i]\n\t\tif (k+ki)*(abs(x-xi)+abs(y-yi))<ci:\n\t\t\tX[i][3]=(k+ki)*(abs(x-xi)+abs(y-yi))\n\t\t\tX[i][5]=1\n\t\t\tX[i][6]=ind\n\tX.sort(key=lambda x:x[3])\n \nprint(ans_am)\nprint(ans_ps)\nprint(*Ans)\nprint(ans_con)\nfor i,j in Con:\n\tprint(i,j)\n", "import math\n\nn = int(input())\ncityNo=[0]*n\nfor i in range(n):\n\tcityNo[i]=list(map(int,input().split()))\ncost=list(map(int,input().split()))\nks  =list(map(int,input().split()))\n\npowerStation=[0]*n\n\ntotalCost=0\n\nreq_Powerstation=[]\nnotReq_Powerstation=[]\ntotalCost=0\nestablished={}\nupdated=[-1]*n\n\nfor j in range(n):\n\n\tcity=-1\n\tmini=9999999999999999\n\tfor i in range(n):\n\t\tif mini>cost[i] and i not in established:\n\t\t\tcity=i\n\t\t\tmini=cost[i]\n\tif updated[city]==-1:\n\t\treq_Powerstation.append(city+1)\n\telse:\n\t\tnotReq_Powerstation.append([city+1,updated[city]+1])\t\n\ttotalCost+=cost[city]\n\testablished[city]=1\n\n\tfor i in range(n):\n\n\t\tcost_From_City = (ks[i]+ks[city])*(abs(cityNo[i][0]-cityNo[city][0])+abs(cityNo[i][1]-cityNo[city][1]))\n\t\t\n\t\tif cost_From_City<cost[i]:\n\t\t\tcost[i]=cost_From_City\n\t\t\tupdated[i]=city\n\n\t\t# print(updated)\nprint(totalCost)\nprint(len(req_Powerstation))\nprint(*req_Powerstation)\nprint(len(notReq_Powerstation))\nfor i in range(len(notReq_Powerstation)):\n\tprint(*notReq_Powerstation[i])\n", "from sys import stdin,stdout\nfrom collections import Counter\ndef ai(): return list(map(int, stdin.readline().split()))\ndef ei(): return map(int, stdin.readline().split())\ndef ip(): return  int(stdin.readline().strip())\ndef op(ans): return stdout.write(str(ans) + '\\n')\n\nn = ip()\npos = [ai() for i in range(n)]\nc = ai()\nk = ai()\n\nconnections = []\nplants = []\nused = [False]*n\nparent = [-1]*n\n\nans = 0 \nn_ = n\nwhile n_:\n\tn_ -= 1\n\tmn , u = min([(ci,i) for i,ci in enumerate(c) if not used[i]])\n\tans += mn\n\tused[u] = True\n\tif parent[u] == -1:\n\t\tplants.append(u)\n\telse:\n\t\tconnections.append((min(parent[u],u),max(parent[u],u)))\n\tfor i in range(n):\n\t\tcon_cost = (k[u]+k[i])*(abs(pos[u][0]-pos[i][0])+abs(pos[u][1]-pos[i][1]))\n\t\tif con_cost < c[i]:\n\t\t\tc[i] = con_cost\n\t\t\tparent[i] = u\nprint(ans)\nprint(len(plants))\nfor i in sorted(plants):\n\tprint(i+1,end=' ')\nprint()\nprint(len(connections))\nfor i in connections:\n\tprint(i[0]+1,i[1]+1)\n\n", "def dist(a,b):\n\treturn abs(a[0] - b[0]) + abs(a[1] - b[1])\nn = int(input())\np = []\nfor i in range(n):\n\tp.append(list(map(int, input().split())))\nc = list(map(int, input().split()))\nk = list(map(int, input().split()))\nst = []\ned = []\nans = 0\nis_st = [1] * n\nparent = [-1] * n\nd = { i:  c[i] for i in range(n)}\nfor i in range(n):\n\tm = min(d, key = d.get)\n\tif(is_st[m]):\n\t\tst.append(m)\n\telse:\n\t\ted.append([m, parent[m]])\n\tans = ans + d[m]\n\tdel d[m]\n\tfor j in d.keys():\n\t\tt_cost = (k[m] + k[j])*dist(p[m], p[j])\n\t\tif(t_cost < d[j]):\n\t\t\td[j] = t_cost\n\t\t\tparent[j] = m\n\t\t\tis_st[j] = 0\nprint(ans)\nprint(len(st))\nfor i in st:\n\tprint(i+1,end = \" \")\nprint()\nprint(len(ed))\nfor i in ed:\n\tprint(i[0]+1,i[1]+1)\n", "import sys\n#import heapq as hq\n#from collections import deque\n#sys.stdin = open('in', 'r')\nreadline = sys.stdin.readline\nrdw = lambda: readline().rstrip()\nrdws = lambda: readline().split()\nrdwl = lambda: list(readline().split())\nrdi = lambda: int(readline())\nrdis = lambda: list(map(int, readline().split()))\nrdil = lambda: list(map(int, readline().split()))\nrdilrows = lambda cnt: [rdil() for _ in range(cnt)]\n\ndef solve():\n\tres = 0\n\tbld = []\n\twire = []\n\tn = rdi()\n\tcities = rdilrows(n)\n\tc = rdil()\n\tp = [-1 for i in range(n)]\n\tk = rdil()\n\tused = set()\n\tused.add(-1)\n\t\n\tfor i in range(n):\n\t\tcost, bst = min([(c[i], i) for i in range(n) if i not in used])\n\t\tpar = p[bst]\n\t\tused.add(bst)\n\t\tres += cost\n\t\tif par == -1:\n\t\t\tbld.append(bst + 1)\n\t\telse:\n\t\t\twire.append((bst + 1, par + 1))\n\t\tfor j in range(n):\n\t\t\tif j not in used:\n\t\t\t\twcost = (k[bst]+k[j])*(abs(cities[bst][0]-cities[j][0]) \\\n\t\t\t\t\t\t\t\t\t+ abs(cities[bst][1]-cities[j][1]))\n\t\t\t\tif wcost < c[j]:\n\t\t\t\t\tc[j] = wcost\n\t\t\t\t\tp[j] = bst\n\t\n\tsys.stdout.write(f'{res}\\n')\n\tsys.stdout.write(f'{len(bld)}\\n')\n\tsys.stdout.write(f'{\" \".join(map(str, bld))}\\n')\n\tsys.stdout.write(f'{len(wire)}\\n')\n\tfor i in range(len(wire)):\n\t\tsys.stdout.write(f'{wire[i][0]} {wire[i][1]}\\n')\n\n\ntests = 1\n#tests = rdi()\nfor testnum in range(tests):\n\tsolve()\n\t\n#n = rdi()\n#n,m = rdis()\n#s = rdw()\n#a = rdil()\n#op, *s = rdws()\n\n#print(f'Case #{testnum+1}: {res}')\n#print(*res, sep='\\n')\n#sys.stdout.write('YES\\n')\n#sys.stdout.write(f'{res}\\n')\n#sys.stdout.write(f'{y1} {x1} {y2} {x2}\\n')\n"], "id": "id6892"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6892", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["shichikuji", 4], ["is", 4], ["the", 4], ["new", 4], ["resident", 4], ["deity", 4], ["of", 4], ["the", 4], ["south", 4], ["black", 4], ["snail", 4], ["temple", 4], ["her", 4], ["first", 4], ["job", 4], ["is", 4], ["as", 4], ["follows", 4], ["there", 4], ["are", 4], ["n", 4], ["new", 4], ["cities", 4], ["located", 4], ["in", 4], ["prefecture", 4], ["x", 4], ["cities", 4], ["are", 4], ["numbered", 4], ["from", 4], ["1", 4], ["to", 4], ["n", 4], ["city", 4], ["i", 4], ["is", 4], ["located", 4], ["x", 4], ["i", 4], ["km", 4], ["north", 4], ["of", 4], ["the", 4], ["shrine", 4], ["and", 4], ["y", 4], ["i", 4], ["km", 4], ["east", 4], ["of", 4], ["the", 4], ["shrine", 4], ["it", 4], ["is", 4], ["possible", 4], ["that", 4], ["x", 4], ["i", 4], ["y", 4], ["i", 4], ["x", 4], ["j", 4], ["y", 4], ["j", 4], ["even", 4], ["when", 4], ["i", 4], ["ne", 4], ["j", 4], ["shichikuji", 4], ["must", 4], ["provide", 4], ["electricity", 4], ["to", 4], ["each", 4], ["city", 4], ["either", 4], ["by", 4], ["building", 4], ["a", 4], ["power", 4], ["station", 4], ["in", 4], ["that", 4], ["city", 4], ["or", 4], ["by", 4], ["making", 4], ["a", 4], ["connection", 4], ["between", 4], ["that", 4], ["city", 4], ["and", 4], ["another", 4], ["one", 4], ["that", 4], ["already", 4], ["has", 4], ["electricity", 4], ["so", 4], ["the", 4], ["city", 4], ["has", 4], ["electricity", 4], ["if", 4], ["it", 4], ["has", 4], ["a", 4], ["power", 4], ["station", 4], ["in", 4], ["it", 4], ["or", 4], ["it", 4], ["is", 4], ["connected", 4], ["to", 4], ["a", 4], ["city", 4], ["which", 4], ["has", 4], ["electricity", 4], ["by", 4], ["a", 4], ["direct", 4], ["connection", 4], ["or", 4], ["via", 4], ["a", 4], ["chain", 4], ["of", 4], ["connections", 4], ["building", 4], ["a", 4], ["power", 4], ["station", 4], ["in", 4], ["city", 4], ["i", 4], ["will", 4], ["cost", 4], ["c", 4], ["i", 4], ["yen", 4], ["making", 4], ["a", 4], ["connection", 4], ["between", 4], ["city", 4], ["i", 4], ["and", 4], ["city", 4], ["j", 4], ["will", 4], ["cost", 4], ["k", 4], ["i", 4], ["k", 4], ["j", 4], ["yen", 4], ["per", 4], ["km", 4], ["of", 4], ["wire", 4], ["used", 4], ["for", 4], ["the", 4], ["connection", 4], ["however", 4], ["wires", 4], ["can", 4], ["only", 4], ["go", 4], ["the", 4], ["cardinal", 4], ["directions", 4], ["north", 4], ["south", 4], ["east", 4], ["west", 4], ["wires", 4], ["can", 4], ["cross", 4], ["each", 4], ["other", 4], ["each", 4], ["wire", 4], ["must", 4], ["have", 4], ["both", 4], ["of", 4], ["its", 4], ["endpoints", 4], ["in", 4], ["some", 4], ["cities", 4], ["if", 4], ["city", 4], ["i", 4], ["and", 4], ["city", 4], ["j", 4], ["are", 4], ["connected", 4], ["by", 4], ["a", 4], ["wire", 4], ["the", 4], ["wire", 4], ["will", 4], ["go", 4], ["through", 4], ["any", 4], ["shortest", 4], ["path", 4], ["from", 4], ["city", 4], ["i", 4], ["to", 4], ["city", 4], ["j", 4], ["thus", 4], ["the", 4], ["length", 4], ["of", 4], ["the", 4], ["wire", 4], ["if", 4], ["city", 4], ["i", 4], ["and", 4], ["city", 4], ["j", 4], ["are", 4], ["connected", 4], ["is", 4], ["x", 4], ["i", 4], ["x", 4], ["j", 4], ["y", 4], ["i", 4], ["y", 4], ["j", 4], ["km", 4], ["shichikuji", 4], ["wants", 4], ["to", 4], ["do", 4], ["this", 4], ["job", 4], ["spending", 4], ["as", 4], ["little", 4], ["money", 4], ["as", 4], ["possible", 4], ["since", 4], ["according", 4], ["to", 4], ["her", 4], ["there", 4], ["isn", 4], ["t", 4], ["really", 4], ["anything", 4], ["else", 4], ["in", 4], ["the", 4], ["world", 4], ["other", 4], ["than", 4], ["money", 4], ["however", 4], ["she", 4], ["died", 4], ["when", 4], ["she", 4], ["was", 4], ["only", 4], ["in", 4], ["fifth", 4], ["grade", 4], ["so", 4], ["she", 4], ["is", 4], ["not", 4], ["smart", 4], ["enough", 4], ["for", 4], ["this", 4], ["and", 4], ["thus", 4], ["the", 4], ["new", 4], ["resident", 4], ["deity", 4], ["asks", 4], ["for", 4], ["your", 4], ["help", 4], ["and", 4], ["so", 4], ["you", 4], ["have", 4], ["to", 4], ["provide", 4], ["shichikuji", 4], ["with", 4], ["the", 4], ["following", 4], ["information", 4], ["minimum", 4], ["amount", 4], ["of", 4], ["yen", 4], ["needed", 4], ["to", 4], ["provide", 4], ["electricity", 4], ["to", 4], ["all", 4], ["cities", 4], ["the", 4], ["cities", 4], ["in", 4], ["which", 4], ["power", 4], ["stations", 4], ["will", 4], ["be", 4], ["built", 4], ["and", 4], ["the", 4], ["connections", 4], ["to", 4], ["be", 4], ["made", 4], ["if", 4], ["there", 4], ["are", 4], ["multiple", 4], ["ways", 4], ["to", 4], ["choose", 4], ["the", 4], ["cities", 4], ["and", 4], ["the", 4], ["connections", 4], ["to", 0], ["obtain", 0], ["the", 0], ["construction", 0], ["of", 0], ["minimum", 0], ["price", 0], ["then", 0], ["print", 0], ["any", 0], ["of", 0], ["them", 0], ["input", 0], ["first", 6], ["line", 6], ["of", 6], ["input", 6], ["contains", 6], ["a", 8], ["single", 4], ["integer", 4], ["n", 4], ["1", 4], ["leq", 4], ["n", 4], ["leq", 4], ["2000", 4], ["—", 4], ["the", 4], ["number", 4], ["of", 4], ["cities", 4], ["then", 4], ["n", 4], ["lines", 4], ["follow", 4], ["the", 4], ["i", 4], ["th", 4], ["line", 4], ["contains", 4], ["two", 4], ["space", 4], ["separated", 4], ["integers", 4], ["x", 4], ["i", 4], ["1", 4], ["leq", 4], ["x", 4], ["i", 4], ["leq", 4], ["10", 4], ["6", 4], ["and", 4], ["y", 4], ["i", 4], ["1", 4], ["leq", 4], ["y", 4], ["i", 4], ["leq", 4], ["10", 4], ["6", 4], ["—", 4], ["the", 4], ["coordinates", 4], ["of", 4], ["the", 4], ["i", 4], ["th", 4], ["city", 4], ["the", 4], ["next", 4], ["line", 4], ["contains", 4], ["n", 4], ["space", 4], ["separated", 4], ["integers", 4], ["c", 4], ["1", 4], ["c", 4], ["2", 4], ["dots", 4], ["c", 4], ["n", 4], ["1", 4], ["leq", 4], ["c", 4], ["i", 4], ["leq", 4], ["10", 4], ["9", 4], ["—", 4], ["the", 4], ["cost", 4], ["of", 4], ["building", 4], ["a", 4], ["power", 4], ["station", 4], ["in", 4], ["the", 4], ["i", 4], ["th", 4], ["city", 4], ["the", 4], ["last", 4], ["line", 4], ["contains", 4], ["n", 4], ["space", 4], ["separated", 4], ["integers", 4], ["k", 4], ["1", 4], ["k", 0], ["2", 0], ["dots", 0], ["k", 0], ["n", 0], ["1", 0], ["leq", 0], ["k", 0], ["i", 0], ["leq", 0], ["10", 0], ["9", 0], ["output", 0], ["in", 4], ["the", 4], ["first", 4], ["line", 4], ["print", 4], ["a", 4], ["single", 4], ["integer", 4], ["denoting", 4], ["the", 4], ["minimum", 4], ["amount", 4], ["of", 4], ["yen", 4], ["needed", 4], ["then", 4], ["print", 4], ["an", 4], ["integer", 4], ["v", 4], ["—", 4], ["the", 4], ["number", 4], ["of", 4], ["power", 4], ["stations", 4], ["to", 4], ["be", 4], ["built", 4], ["next", 4], ["print", 4], ["v", 4], ["space", 4], ["separated", 4], ["integers", 4], ["denoting", 4], ["the", 4], ["indices", 4], ["of", 4], ["cities", 4], ["in", 4], ["which", 4], ["a", 4], ["power", 4], ["station", 4], ["will", 4], ["be", 4], ["built", 4], ["each", 4], ["number", 4], ["should", 4], ["be", 4], ["from", 4], ["1", 4], ["to", 4], ["n", 4], ["and", 4], ["all", 4], ["numbers", 4], ["should", 4], ["be", 4], ["pairwise", 4], ["distinct", 4], ["you", 4], ["can", 4], ["print", 4], ["the", 4], ["numbers", 4], ["in", 4], ["arbitrary", 4], ["order", 4], ["after", 4], ["that", 4], ["print", 4], ["an", 4], ["integer", 4], ["e", 4], ["—", 4], ["the", 4], ["number", 4], ["of", 4], ["connections", 4], ["to", 4], ["be", 4], ["made", 4], ["finally", 4], ["print", 4], ["e", 4], ["pairs", 4], ["of", 4], ["integers", 5], ["a", 4], ["and", 4], ["b", 4], ["1", 4], ["le", 4], ["a", 4], ["b", 4], ["le", 4], ["n", 4], ["a", 4], ["ne", 4], ["b", 4], ["denoting", 4], ["that", 4], ["a", 4], ["connection", 4], ["between", 4], ["city", 4], ["a", 4], ["and", 4], ["city", 4], ["b", 4], ["will", 4], ["be", 4], ["made", 4], ["each", 4], ["unordered", 4], ["pair", 4], ["of", 4], ["cities", 4], ["should", 4], ["be", 4], ["included", 4], ["at", 4], ["most", 4], ["once", 4], ["for", 4], ["each", 4], ["a", 4], ["b", 4], ["there", 4], ["should", 4], ["be", 4], ["no", 4], ["more", 4], ["a", 4], ["b", 4], ["or", 0], ["b", 0], ["a", 0], ["pairs", 0], ["you", 0], ["can", 0], ["print", 0], ["the", 0], ["pairs", 0], ["in", 0], ["arbitrary", 0], ["order", 0], ["if", 4], ["there", 4], ["are", 4], ["multiple", 4], ["ways", 4], ["to", 4], ["choose", 4], ["the", 4], ["cities", 4], ["and", 4], ["the", 4], ["connections", 4], ["to", 0], ["obtain", 0], ["the", 0], ["construction", 0], ["of", 0], ["minimum", 0], ["price", 0], ["then", 0], ["print", 0], ["any", 0], ["of", 0], ["them", 0], ["examples", 0], ["input", 0], ["3", 0], ["2", 0], ["3", 0], ["1", 0], ["1", 0], ["3", 0], ["2", 0], ["3", 0], ["2", 0], ["3", 0], ["3", 0], ["2", 0], ["3", 0], ["output", 0], ["8", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["0", 0], ["input", 0], ["3", 0], ["2", 0], ["1", 0], ["1", 0], ["2", 0], ["3", 0], ["3", 0], ["23", 0], ["2", 0], ["23", 0], ["3", 0], ["2", 0], ["3", 0], ["output", 0], ["27", 0], ["1", 0], ["2", 0], ["2", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["note", 0], ["for", 4], ["the", 4], ["answers", 4], ["given", 4], ["in", 4], ["the", 4], ["samples", 4], ["refer", 4], ["to", 4], ["the", 4], ["following", 4], ["diagrams", 4], ["cities", 4], ["with", 4], ["power", 4], ["stations", 4], ["are", 4], ["colored", 0], ["green", 0], ["other", 0], ["cities", 0], ["are", 0], ["colored", 0], ["blue", 0], ["and", 0], ["wires", 0], ["are", 0], ["colored", 0], ["red", 0], ["image", 0], ["for", 4], ["the", 4], ["first", 4], ["example", 4], ["the", 4], ["cost", 4], ["of", 4], ["building", 4], ["power", 4], ["stations", 4], ["in", 4], ["all", 4], ["cities", 4], ["is", 4], ["3", 4], ["2", 4], ["3", 4], ["8", 4], ["it", 4], ["can", 4], ["be", 4], ["shown", 4], ["that", 4], ["no", 4], ["configuration", 4], ["costs", 4], ["less", 4], ["than", 4], ["8", 4], ["yen", 4], ["for", 4], ["the", 4], ["second", 4], ["example", 4], ["the", 4], ["cost", 4], ["of", 4], ["building", 4], ["a", 4], ["power", 4], ["station", 4], ["in", 4], ["city", 4], ["2", 4], ["is", 4], ["2", 4], ["the", 4], ["cost", 4], ["of", 4], ["connecting", 4], ["city", 4], ["1", 4], ["and", 4], ["city", 4], ["2", 4], ["is", 4], ["2", 4], ["cdot", 4], ["3", 4], ["2", 4], ["10", 4], ["the", 4], ["cost", 4], ["of", 4], ["connecting", 4], ["city", 4], ["2", 4], ["and", 4], ["city", 4], ["3", 4], ["is", 4], ["3", 4], ["cdot", 4], ["2", 4], ["3", 4], ["15", 4], ["thus", 4], ["the", 4], ["total", 4], ["cost", 4], ["is", 4], ["2", 4], ["10", 4], ["15", 4], ["27", 4], ["it", 0], ["can", 0], ["be", 0], ["shown", 0], ["that", 0], ["no", 0], ["configuration", 0], ["costs", 0], ["less", 0], ["than", 0], ["27", 0], ["yen", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.855072463768116, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.21305354267310792, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9285714285714286, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.23154761904761909, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.855072463768116, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.21305354267310792, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9285714285714286, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.23154761904761909, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["math", 0], ["import", 0], ["c", 0], ["int", 0], ["input", 0], ["x", 0], ["0", 0], ["c", 0], ["y", 0], ["0", 0], ["c", 0], ["vu", 0], ["false", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["prix", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["fil", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["anc", 0], ["1", 0], ["c", 0], ["pmin", 0], ["prix", 0], ["copy", 0], ["v", 0], ["0", 0], ["pl", 0], ["e", 0], ["0", 0], ["ppl", 0], ["tot", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c", 0], ["pmina", 0], ["100000000000000000000000", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["c", 0], ["if", 0], ["not", 0], ["vu", 0], ["j", 0], ["and", 0], ["pmin", 0], ["j", 0], ["pmina", 0], ["pmini", 0], ["j", 0], ["pmina", 0], ["pmin", 0], ["j", 0], ["vu", 0], ["pmini", 0], ["true", 0], ["tot", 0], ["pmina", 0], ["if", 0], ["anc", 0], ["pmini", 0], ["1", 0], ["v", 0], ["1", 0], ["pl", 0], ["append", 0], ["str", 0], ["pmini", 0], ["1", 0], ["else", 0], ["e", 0], ["1", 0], ["ppl", 0], ["append", 0], ["str", 0], ["pmini", 0], ["1", 0], ["str", 0], ["anc", 0], ["pmini", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["c", 0], ["if", 0], ["abs", 0], ["x", 0], ["pmini", 0], ["x", 0], ["j", 0], ["abs", 0], ["y", 0], ["pmini", 0], ["y", 0], ["j", 0], ["fil", 0], ["pmini", 0], ["fil", 0], ["j", 0], ["pmin", 0], ["j", 0], ["pmin", 0], ["j", 0], ["abs", 0], ["x", 0], ["pmini", 0], ["x", 0], ["j", 0], ["abs", 0], ["y", 0], ["pmini", 0], ["y", 0], ["j", 0], ["fil", 0], ["pmini", 0], ["fil", 0], ["j", 0], ["anc", 0], ["j", 0], ["pmini", 0], ["print", 0], ["tot", 0], ["print", 0], ["v", 0], ["print", 0], ["join", 0], ["pl", 0], ["print", 0], ["e", 0], ["for", 0], ["i", 0], ["in", 0], ["ppl", 0], ["print", 0], ["join", 0], ["i", 0], ["n", 0], ["int", 0], ["input", 0], ["市の数", 0], ["xy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["市", 0], ["i", 0], ["に発電所を建てるコスト", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["つなげるコスト", 0], ["cc", 0], ["1", 0], ["n", 0], ["ans", 0], ["2", 0], ["n", 0], ["total", 0], ["cost", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["mi", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["c", 0], ["an", 0], ["in", 0], ["enumerate", 0], ["zip", 0], ["c", 0], ["ans", 0], ["if", 0], ["an", 0], ["2", 0], ["and", 0], ["mi", 0], ["c", 0], ["mi", 0], ["c", 0], ["ami", 0], ["i", 0], ["total", 0], ["cost", 0], ["mi", 0], ["ans", 0], ["ami", 0], ["cc", 0], ["ami", 0], ["k1", 0], ["k", 0], ["ami", 0], ["x1", 0], ["y1", 0], ["xy", 0], ["ami", 0], ["for", 0], ["i", 0], ["k2", 0], ["x2", 0], ["y2", 0], ["in", 0], ["enumerate", 0], ["zip", 0], ["k", 0], ["xy", 0], ["new", 0], ["cost", 0], ["k1", 0], ["k2", 0], ["abs", 0], ["x1", 0], ["x2", 0], ["abs", 0], ["y1", 0], ["y2", 0], ["if", 0], ["c", 0], ["i", 0], ["new", 0], ["cost", 0], ["c", 0], ["i", 0], ["new", 0], ["cost", 0], ["cc", 0], ["i", 0], ["ami", 0], ["print", 0], ["total", 0], ["cost", 0], ["cnt", 0], ["ans", 0], ["count", 0], ["1", 0], ["print", 0], ["cnt", 0], ["a", 0], ["b", 0], ["for", 0], ["i", 0], ["a", 0], ["in", 0], ["enumerate", 0], ["ans", 0], ["1", 0], ["if", 0], ["a", 0], ["1", 0], ["a", 0], ["append", 0], ["i", 0], ["else", 0], ["b", 0], ["append", 0], ["i", 0], ["a", 0], ["1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["print", 0], ["n", 0], ["cnt", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["b", 0], ["print", 0], ["a", 0], ["b", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["import", 0], ["heapq", 0], ["h", 0], ["for", 0], ["i", 0], ["c", 0], ["in", 0], ["enumerate", 0], ["c", 0], ["h", 0], ["append", 0], ["c", 0], ["i", 0], ["1", 0], ["heapq", 0], ["heapify", 0], ["h", 0], ["ans", 0], ["0", 0], ["use", 0], ["0", 0], ["n", 0], ["1", 0], ["ans1", 0], ["ans2", 0], ["while", 0], ["h", 0], ["x", 0], ["heapq", 0], ["heappop", 0], ["h", 0], ["print", 0], ["x", 0], ["print", 0], ["h", 0], ["if", 0], ["len", 0], ["x", 0], ["2", 0], ["cost", 0], ["town", 0], ["x", 0], ["if", 0], ["use", 0], ["town", 0], ["1", 0], ["continue", 0], ["ans", 0], ["cost", 0], ["use", 0], ["town", 0], ["1", 0], ["ans1", 0], ["append", 0], ["town", 0], ["xt", 0], ["yt", 0], ["t", 0], ["town", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["use", 0], ["i", 0], ["1", 0], ["1", 0], ["continue", 0], ["costp", 0], ["abs", 0], ["t", 0], ["i", 0], ["0", 0], ["xt", 0], ["abs", 0], ["t", 0], ["i", 0], ["1", 0], ["yt", 0], ["k", 0], ["i", 0], ["k", 0], ["town", 0], ["1", 0], ["print", 0], ["costp", 0], ["xt", 0], ["yt", 0], ["i", 0], ["if", 0], ["costp", 0], ["c", 0], ["i", 0], ["c", 0], ["i", 0], ["costp", 0], ["heapq", 0], ["heappush", 0], ["h", 0], ["costp", 0], ["town", 0], ["i", 0], ["1", 0], ["else", 0], ["cost", 0], ["town1", 0], ["town2", 0], ["x", 0], ["if", 0], ["use", 0], ["town1", 0], ["1", 0], ["and", 0], ["use", 0], ["town2", 0], ["1", 0], ["continue", 0], ["ans", 0], ["cost", 0], ["use", 0], ["town2", 0], ["1", 0], ["ans2", 0], ["append", 0], ["town1", 0], ["town2", 0], ["xt", 0], ["yt", 0], ["t", 0], ["town2", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["use", 0], ["i", 0], ["1", 0], ["1", 0], ["continue", 0], ["costp", 0], ["abs", 0], ["t", 0], ["i", 0], ["0", 0], ["xt", 0], ["abs", 0], ["t", 0], ["i", 0], ["1", 0], ["yt", 0], ["k", 0], ["i", 0], ["k", 0], ["town2", 0], ["1", 0], ["if", 0], ["costp", 0], ["c", 0], ["i", 0], ["c", 0], ["i", 0], ["costp", 0], ["heapq", 0], ["heappush", 0], ["h", 0], ["costp", 0], ["town2", 0], ["i", 0], ["1", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["ans", 0], ["n", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["len", 0], ["ans1", 0], ["n", 0], ["print", 0], ["ans1", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["len", 0], ["ans2", 0], ["n", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["ans2", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["x", 0], ["str", 0], ["y", 0], ["n", 0], ["import", 0], ["sys", 0], ["inf", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["reader", 0], ["map", 0], ["int", 0], ["line", 0], ["split", 0], ["for", 0], ["line", 0], ["in", 0], ["inf", 0], ["reader", 0], ["map", 0], ["int", 0], ["s", 0], ["split", 0], ["for", 0], ["s", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["n", 0], ["next", 0], ["reader", 0], ["cities", 0], ["none", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["next", 0], ["reader", 0], ["cities", 0], ["append", 0], ["x", 0], ["y", 0], ["cs", 0], ["none", 0], ["list", 0], ["next", 0], ["reader", 0], ["ks", 0], ["none", 0], ["list", 0], ["next", 0], ["reader", 0], ["n", 0], ["1", 0], ["g", 0], ["none", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["wire", 0], ["ks", 0], ["i", 0], ["ks", 0], ["j", 0], ["dist", 0], ["abs", 0], ["cities", 0], ["i", 0], ["0", 0], ["cities", 0], ["j", 0], ["0", 0], ["abs", 0], ["cities", 0], ["i", 0], ["1", 0], ["cities", 0], ["j", 0], ["1", 0], ["g", 0], ["i", 0], ["j", 0], ["g", 0], ["j", 0], ["i", 0], ["wire", 0], ["dist", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["g", 0], ["0", 0], ["i", 0], ["g", 0], ["i", 0], ["0", 0], ["cs", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["g", 0], ["i", 0], ["i", 0], ["float", 0], ["inf", 0], ["totalcost", 0], ["0", 0], ["stations", 0], ["connections", 0], ["used", 0], ["false", 0], ["n", 0], ["min", 0], ["e", 0], ["float", 0], ["inf", 0], ["n", 0], ["sel", 0], ["e", 0], ["1", 0], ["n", 0], ["start", 0], ["0", 0], ["starting", 0], ["from", 0], ["0", 0], ["node", 0], ["dummy", 0], ["node", 0], ["min", 0], ["e", 0], ["start", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["v", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["used", 0], ["j", 0], ["and", 0], ["v", 0], ["1", 0], ["or", 0], ["min", 0], ["e", 0], ["j", 0], ["min", 0], ["e", 0], ["v", 0], ["v", 0], ["j", 0], ["if", 0], ["min", 0], ["e", 0], ["v", 0], ["float", 0], ["inf", 0], ["break", 0], ["used", 0], ["v", 0], ["true", 0], ["fromnode", 0], ["sel", 0], ["e", 0], ["v", 0], ["if", 0], ["not", 0], ["fromnode", 0], ["edge", 0], ["0", 0], ["v", 0], ["v", 0], ["node", 0], ["has", 0], ["station", 0], ["totalcost", 0], ["g", 0], ["v", 0], ["fromnode", 0], ["stations", 0], ["append", 0], ["v", 0], ["elif", 0], ["fromnode", 0], ["0", 0], ["totalcost", 0], ["g", 0], ["v", 0], ["fromnode", 0], ["connections", 0], ["append", 0], ["v", 0], ["fromnode", 0], ["for", 0], ["to", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 1], ["g", 1], ["v", 1], ["to", 1], ["min", 1], ["e", 0], ["to", 0], ["min", 0], ["e", 0], ["to", 0], ["g", 0], ["v", 0], ["to", 0], ["sel", 0], ["e", 0], ["to", 0], ["v", 0], ["print", 0], ["totalcost", 0], ["print", 0], ["len", 0], ["stations", 0], ["print", 0], ["stations", 0], ["print", 0], ["len", 0], ["connections", 0], ["print", 0], ["c1", 0], ["c2", 0], ["for", 0], ["c1", 0], ["c2", 0], ["in", 0], ["connections", 0], ["inf", 0], ["close", 0], ["import", 0], ["sys", 0], ["inf", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["reader", 0], ["map", 0], ["int", 0], ["line", 0], ["split", 0], ["for", 0], ["line", 0], ["in", 0], ["inf", 0], ["reader", 0], ["list", 0], ["map", 0], ["int", 0], ["s", 0], ["split", 0], ["for", 0], ["s", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["n", 0], ["next", 0], ["reader", 0], ["cities", 0], ["none", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["next", 0], ["reader", 0], ["cities", 0], ["append", 0], ["x", 0], ["y", 0], ["cs", 0], ["none", 0], ["list", 0], ["next", 0], ["reader", 0], ["ks", 0], ["none", 0], ["list", 0], ["next", 0], ["reader", 0], ["n", 0], ["1", 0], ["extra", 0], ["0", 0], ["node", 0], ["dummy", 0], ["node", 0], ["edge", 0], ["0", 0], ["v", 0], ["v", 0], ["node", 0], ["has", 0], ["station", 0], ["g", 0], ["none", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["wire", 0], ["ks", 0], ["i", 0], ["ks", 0], ["j", 0], ["dist", 0], ["abs", 0], ["cities", 0], ["i", 0], ["0", 0], ["cities", 0], ["j", 0], ["0", 0], ["abs", 0], ["cities", 0], ["i", 0], ["1", 0], ["cities", 0], ["j", 0], ["1", 0], ["g", 0], ["i", 0], ["j", 0], ["g", 0], ["j", 0], ["i", 0], ["wire", 0], ["dist", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["g", 0], ["0", 0], ["i", 0], ["g", 0], ["i", 0], ["0", 0], ["cs", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["g", 0], ["i", 0], ["i", 0], ["float", 0], ["inf", 0], ["totalcost", 0], ["0", 0], ["stations", 0], ["connections", 0], ["used", 0], ["false", 0], ["n", 0], ["min", 0], ["e", 0], ["float", 0], ["inf", 0], ["n", 0], ["sel", 0], ["e", 0], ["1", 0], ["n", 0], ["start", 0], ["0", 0], ["starting", 0], ["from", 0], ["0", 0], ["node", 0], ["dummy", 0], ["node", 0], ["min", 0], ["e", 0], ["start", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["v", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["used", 0], ["j", 0], ["and", 0], ["v", 0], ["1", 0], ["or", 0], ["min", 0], ["e", 0], ["j", 0], ["min", 0], ["e", 0], ["v", 0], ["v", 0], ["j", 0], ["if", 0], ["min", 0], ["e", 0], ["v", 0], ["float", 0], ["inf", 0], ["break", 0], ["used", 0], ["v", 0], ["true", 0], ["fromnode", 0], ["sel", 0], ["e", 0], ["v", 0], ["if", 0], ["not", 0], ["fromnode", 0], ["edge", 0], ["0", 0], ["v", 0], ["v", 0], ["node", 0], ["has", 0], ["station", 0], ["totalcost", 0], ["g", 0], ["v", 0], ["fromnode", 0], ["stations", 0], ["append", 0], ["v", 0], ["elif", 0], ["fromnode", 0], ["0", 0], ["totalcost", 0], ["g", 0], ["v", 0], ["fromnode", 0], ["connections", 0], ["append", 0], ["v", 0], ["fromnode", 0], ["for", 0], ["to", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 1], ["g", 1], ["v", 1], ["to", 1], ["min", 1], ["e", 0], ["to", 0], ["min", 0], ["e", 0], ["to", 0], ["g", 0], ["v", 0], ["to", 0], ["sel", 0], ["e", 0], ["to", 0], ["v", 0], ["myprint", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["myprint", 0], ["str", 0], ["totalcost", 0], ["n", 0], ["myprint", 0], ["str", 0], ["len", 0], ["stations", 0], ["n", 0], ["myprint", 0], ["str", 0], ["st", 0], ["for", 0], ["st", 0], ["in", 0], ["stations", 0], ["myprint", 0], ["str", 0], ["len", 0], ["connections", 0], ["n", 0], ["myprint", 0], ["str", 0], ["c1", 0], ["str", 0], ["c2", 0], ["n", 0], ["for", 0], ["c1", 0], ["c2", 0], ["in", 0], ["connections", 0], ["print", 0], ["totalcost", 0], ["print", 0], ["len", 0], ["stations", 0], ["print", 0], ["stations", 0], ["print", 0], ["len", 0], ["connections", 0], ["print", 0], ["c1", 0], ["c2", 0], ["for", 0], ["c1", 0], ["c2", 0], ["in", 0], ["connections", 0], ["inf", 0], ["close", 0], ["import", 0], ["sys", 0], ["inf", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["reader", 0], ["map", 0], ["int", 0], ["line", 0], ["split", 0], ["for", 0], ["line", 0], ["in", 0], ["inf", 0], ["reader", 0], ["list", 0], ["map", 0], ["int", 0], ["s", 0], ["split", 0], ["for", 0], ["s", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["n", 0], ["next", 0], ["reader", 0], ["locs", 0], ["tuple", 0], ["next", 0], ["reader", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["cs", 0], ["list", 0], ["next", 0], ["reader", 0], ["ks", 0], ["list", 0], ["next", 0], ["reader", 0], ["totalcost", 0], ["0", 0], ["stations", 0], ["connections", 0], ["conncosts", 0], ["i", 0], ["cost", 0], ["for", 0], ["i", 0], ["cost", 0], ["in", 0], ["enumerate", 0], ["cs", 0], ["connto", 0], ["1", 0], ["n", 0], ["while", 0], ["conncosts", 0], ["v", 0], ["min", 0], ["conncosts", 0], ["key", 0], ["conncosts", 0], ["get", 0], ["totalcost", 0], ["conncosts", 0], ["v", 0], ["if", 0], ["conncosts", 0], ["v", 0], ["cs", 0], ["v", 0], ["to", 0], ["connto", 0], ["v", 0], ["connections", 0], ["append", 0], ["v", 0], ["to", 0], ["else", 0], ["stations", 0], ["append", 0], ["v", 0], ["conncosts", 0], ["pop", 0], ["v", 0], ["for", 0], ["to", 0], ["cost", 0], ["in", 0], ["list", 0], ["conncosts", 0], ["items", 0], ["wire", 0], ["ks", 0], ["v", 0], ["ks", 0], ["to", 0], ["dist", 0], ["abs", 0], ["locs", 0], ["v", 0], ["0", 0], ["locs", 0], ["to", 0], ["0", 0], ["abs", 0], ["locs", 0], ["v", 0], ["1", 0], ["locs", 0], ["to", 0], ["1", 0], ["newcost", 0], ["wire", 0], ["dist", 0], ["if", 0], ["conncosts", 0], ["to", 0], ["newcost", 0], ["conncosts", 0], ["to", 0], ["newcost", 0], ["connto", 0], ["to", 0], ["v", 0], ["myprint", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["myprint", 0], ["str", 0], ["totalcost", 0], ["n", 0], ["myprint", 0], ["str", 0], ["len", 0], ["stations", 0], ["n", 0], ["myprint", 0], ["str", 0], ["st", 0], ["1", 0], ["for", 0], ["st", 0], ["in", 0], ["stations", 0], ["myprint", 0], ["str", 0], ["len", 0], ["connections", 0], ["n", 0], ["myprint", 0], ["str", 0], ["c1", 0], ["1", 0], ["str", 0], ["c2", 0], ["1", 0], ["n", 0], ["for", 0], ["c1", 0], ["c2", 0], ["in", 0], ["connections", 0], ["print", 0], ["totalcost", 0], ["print", 0], ["len", 0], ["stations", 0], ["print", 0], ["st", 0], ["1", 0], ["for", 0], ["st", 0], ["in", 0], ["stations", 0], ["print", 0], ["len", 0], ["connections", 0], ["print", 0], ["c1", 0], ["1", 0], ["c2", 0], ["1", 0], ["for", 0], ["c1", 0], ["c2", 0], ["in", 0], ["connections", 0], ["inf", 0], ["close", 0], ["refactored", 0], ["prim", 0], ["s", 0], ["algorithm", 0], ["with", 0], ["dummy", 0], ["0", 0], ["node", 0], ["import", 0], ["sys", 0], ["inf", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["reader", 0], ["map", 0], ["int", 0], ["line", 0], ["split", 0], ["for", 0], ["line", 0], ["in", 0], ["inf", 0], ["reader", 0], ["list", 0], ["map", 0], ["int", 0], ["s", 0], ["split", 0], ["for", 0], ["s", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["n", 0], ["next", 0], ["reader", 0], ["cities", 0], ["none", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["next", 0], ["reader", 0], ["cities", 0], ["append", 0], ["x", 0], ["y", 0], ["cs", 0], ["none", 0], ["list", 0], ["next", 0], ["reader", 0], ["ks", 0], ["none", 0], ["list", 0], ["next", 0], ["reader", 0], ["n", 0], ["1", 0], ["extra", 0], ["dummy", 0], ["0", 0], ["node", 0], ["source", 0], ["of", 0], ["power", 0], ["edge", 0], ["0", 0], ["v", 0], ["c", 0], ["v", 0], ["g", 0], ["none", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["wire", 0], ["ks", 0], ["i", 0], ["ks", 0], ["j", 0], ["dist", 0], ["abs", 0], ["cities", 0], ["i", 0], ["0", 0], ["cities", 0], ["j", 0], ["0", 0], ["abs", 0], ["cities", 0], ["i", 0], ["1", 0], ["cities", 0], ["j", 0], ["1", 0], ["g", 0], ["i", 0], ["j", 0], ["g", 0], ["j", 0], ["i", 0], ["wire", 0], ["dist", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["g", 0], ["0", 0], ["i", 0], ["g", 0], ["i", 0], ["0", 0], ["cs", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["g", 0], ["i", 0], ["i", 0], ["float", 0], ["inf", 0], ["totalcost", 0], ["0", 0], ["stations", 0], ["connections", 0], ["conncosts", 0], ["i", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["connto", 0], ["1", 0], ["n", 0], ["start", 0], ["0", 0], ["starting", 0], ["from", 0], ["dummy", 0], ["node", 0], ["conncosts", 0], ["start", 0], ["0", 0], ["while", 0], ["conncosts", 0], ["node", 0], ["with", 0], ["min", 0], ["connection", 0], ["cost", 0], ["v", 0], ["min", 0], ["conncosts", 0], ["key", 0], ["conncosts", 0], ["get", 0], ["if", 0], ["conncosts", 0], ["v", 0], ["float", 0], ["inf", 0], ["break", 0], ["fromnode", 0], ["connto", 0], ["v", 0], ["if", 0], ["not", 0], ["fromnode", 0], ["edge", 0], ["0", 0], ["v", 0], ["v", 0], ["node", 0], ["has", 0], ["station", 0], ["totalcost", 0], ["g", 0], ["v", 0], ["fromnode", 0], ["stations", 0], ["append", 0], ["v", 0], ["elif", 0], ["fromnode", 0], ["0", 0], ["totalcost", 0], ["g", 0], ["v", 0], ["fromnode", 0], ["connections", 0], ["append", 0], ["v", 0], ["fromnode", 0], ["conncosts", 0], ["pop", 0], ["v", 0], ["for", 0], ["to", 0], ["cost", 0], ["in", 0], ["list", 0], ["conncosts", 0], ["items", 0], ["if", 0], ["g", 0], ["v", 0], ["to", 0], ["conncosts", 0], ["to", 0], ["conncosts", 0], ["to", 0], ["g", 0], ["v", 0], ["to", 0], ["connto", 0], ["to", 0], ["v", 0], ["myprint", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["myprint", 0], ["str", 0], ["totalcost", 0], ["n", 0], ["myprint", 0], ["str", 0], ["len", 0], ["stations", 0], ["n", 0], ["myprint", 0], ["str", 0], ["st", 0], ["for", 0], ["st", 0], ["in", 0], ["stations", 0], ["myprint", 0], ["str", 0], ["len", 0], ["connections", 0], ["n", 0], ["myprint", 0], ["str", 0], ["c1", 0], ["str", 0], ["c2", 0], ["n", 0], ["for", 0], ["c1", 0], ["c2", 0], ["in", 0], ["connections", 0], ["print", 0], ["totalcost", 0], ["print", 0], ["len", 0], ["stations", 0], ["print", 0], ["stations", 0], ["print", 0], ["len", 0], ["connections", 0], ["print", 0], ["c1", 0], ["c2", 0], ["for", 0], ["c1", 0], ["c2", 0], ["in", 0], ["connections", 0], ["inf", 0], ["close", 0], ["def", 0], ["prim", 0], ["matrix", 0], ["inf", 0], ["10", 0], ["18", 0], ["n", 0], ["len", 0], ["matrix", 0], ["costs", 0], ["inf", 0], ["inf", 0], ["1", 0], ["n", 0], ["1", 0], ["nearest", 0], ["1", 0], ["n", 0], ["current", 0], ["0", 0], ["total", 0], ["cost", 0], ["0", 0], ["build", 0], ["connect", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["min", 0], ["cost", 0], ["inf", 0], ["src", 0], ["dest", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["costs", 0], ["i", 0], ["inf", 0], ["continue", 0], ["if", 0], ["matrix", 0], ["current", 0], ["i", 0], ["costs", 0], ["i", 0], ["costs", 0], ["i", 0], ["matrix", 0], ["current", 0], ["i", 0], ["nearest", 0], ["i", 0], ["current", 0], ["if", 0], ["min", 0], ["cost", 0], ["costs", 0], ["i", 0], ["min", 0], ["cost", 0], ["costs", 0], ["i", 0], ["src", 0], ["dest", 0], ["nearest", 0], ["i", 0], ["i", 0], ["total", 0], ["cost", 0], ["min", 0], ["cost", 0], ["costs", 0], ["dest", 0], ["inf", 0], ["if", 0], ["src", 0], ["0", 0], ["build", 0], ["append", 0], ["dest", 0], ["else", 0], ["connect", 0], ["append", 0], ["d", 0], ["d", 0], ["src", 0], ["dest", 0], ["current", 0], ["dest", 0], ["return", 0], ["build", 0], ["connect", 0], ["total", 0], ["cost", 0], ["def", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["pos", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["costs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["costs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["inf", 0], ["10", 0], ["18", 0], ["matrix", 0], ["inf", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 1], ["range", 0], ["n", 0], ["1", 3], ["for", 1], ["i", 1], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["matrix", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["matrix", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["abs", 0], ["pos", 0], ["i", 0], ["0", 0], ["pos", 0], ["j", 0], ["0", 0], ["abs", 0], ["pos", 0], ["i", 0], ["1", 0], ["pos", 0], ["j", 0], ["1", 0], ["k", 0], ["costs", 0], ["i", 0], ["k", 0], ["costs", 0], ["j", 0], ["matrix", 0], ["i", 0], ["1", 0], ["0", 0], ["matrix", 0], ["0", 0], ["i", 0], ["1", 0], ["c", 0], ["costs", 0], ["i", 0], ["build", 0], ["connect", 0], ["cost", 0], ["prim", 0], ["matrix", 0], ["print", 0], ["cost", 0], ["print", 0], ["len", 0], ["build", 0], ["print", 0], ["build", 0], ["print", 0], ["len", 0], ["connect", 0], ["if", 0], ["connect", 0], ["print", 0], ["connect", 0], ["sep", 0], ["n", 0], ["starting", 0], ["point", 0], ["def", 0], ["prim", 0], ["matrix", 0], ["matrix", 0], ["list", 0], ["inf", 0], ["10", 0], ["18", 0], ["n", 0], ["len", 0], ["matrix", 0], ["costs", 0], ["unused", 0], ["inf", 0], ["n", 0], ["0", 0], ["1", 0], ["n", 0], ["1", 0], ["current", 0], ["0", 0], ["total", 0], ["cost", 0], ["0", 0], ["nearest", 0], ["1", 0], ["n", 0], ["build", 0], ["connect", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["min", 0], ["cost", 0], ["inf", 0], ["dest", 0], ["1", 0], ["src", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["unused", 0], ["i", 0], ["if", 0], ["matrix", 0], ["current", 0], ["i", 0], ["costs", 0], ["i", 0], ["costs", 0], ["i", 0], ["matrix", 0], ["current", 0], ["i", 0], ["nearest", 0], ["i", 0], ["current", 0], ["if", 0], ["min", 0], ["cost", 0], ["costs", 0], ["i", 0], ["min", 0], ["cost", 0], ["costs", 0], ["i", 0], ["dest", 0], ["i", 0], ["src", 0], ["nearest", 0], ["i", 0], ["total", 0], ["cost", 0], ["min", 0], ["cost", 0], ["unused", 0], ["dest", 0], ["0", 0], ["if", 0], ["src", 0], ["0", 0], ["build", 0], ["append", 0], ["dest", 0], ["else", 0], ["connect", 0], ["append", 0], ["d", 0], ["d", 0], ["src", 0], ["dest", 0], ["current", 0], ["dest", 0], ["print", 0], ["total", 0], ["cost", 0], ["print", 0], ["len", 0], ["build", 0], ["print", 0], ["build", 0], ["print", 0], ["len", 0], ["connect", 0], ["if", 0], ["connect", 0], ["print", 0], ["connect", 0], ["sep", 0], ["n", 0], ["return", 0], ["total", 0], ["cost", 0], ["def", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["pos", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["costs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["costs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["inf", 0], ["10", 0], ["18", 0], ["matrix", 0], ["inf", 0], ["n", 0], ["1", 0], ["for", 0], ["in", 1], ["range", 0], ["n", 0], ["1", 3], ["for", 1], ["i", 1], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["matrix", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["matrix", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["abs", 0], ["pos", 0], ["i", 0], ["0", 0], ["pos", 0], ["j", 0], ["0", 0], ["abs", 0], ["pos", 0], ["i", 0], ["1", 0], ["pos", 0], ["j", 0], ["1", 0], ["k", 0], ["costs", 0], ["i", 0], ["k", 0], ["costs", 0], ["j", 0], ["matrix", 0], ["i", 0], ["1", 0], ["0", 0], ["matrix", 0], ["0", 0], ["i", 0], ["1", 0], ["c", 0], ["costs", 0], ["i", 0], ["cost", 0], ["prim", 0], ["matrix", 0], ["matrix", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["reader", 0], ["list", 0], ["map", 0], ["int", 0], ["s", 0], ["split", 0], ["for", 0], ["s", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["n", 0], ["next", 0], ["reader", 0], ["xy", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["next", 0], ["reader", 0], ["xy", 0], ["append", 0], ["x", 0], ["y", 0], ["c", 0], ["list", 0], ["next", 0], ["reader", 0], ["k", 0], ["list", 0], ["next", 0], ["reader", 0], ["n", 0], ["int", 0], ["input", 0], ["xy", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["xy", 0], ["i", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["graph", 0], ["0", 0], ["for", 0], ["in", 2], ["range", 2], ["n", 2], ["1", 1], ["for", 1], ["i", 1], ["in", 1], ["range", 0], ["n", 0], ["1", 3], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["cost", 0], ["abs", 0], ["xy", 0], ["i", 0], ["0", 0], ["xy", 0], ["j", 0], ["0", 0], ["abs", 0], ["xy", 0], ["i", 0], ["1", 0], ["xy", 0], ["j", 0], ["1", 0], ["k", 0], ["i", 0], ["k", 0], ["j", 0], ["graph", 0], ["i", 0], ["j", 0], ["graph", 0], ["j", 0], ["i", 0], ["cost", 0], ["graph", 0], ["n", 0], ["i", 0], ["graph", 0], ["i", 0], ["n", 0], ["c", 0], ["i", 0], ["def", 0], ["output", 0], ["parent", 0], ["es", 0], ["vs", 0], ["cost", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["parent", 0], ["i", 0], ["n", 0], ["vs", 0], ["append", 0], ["i", 0], ["1", 0], ["elif", 0], ["i", 0], ["n", 0], ["vs", 0], ["append", 0], ["parent", 0], ["i", 0], ["1", 0], ["else", 0], ["es", 0], ["append", 0], ["i", 0], ["1", 0], ["parent", 0], ["i", 0], ["1", 0], ["cost", 0], ["graph", 0], ["i", 0], ["parent", 0], ["i", 0], ["print", 0], ["cost", 0], ["print", 0], ["len", 0], ["vs", 0], ["print", 0], ["vs", 0], ["print", 0], ["len", 0], ["es", 0], ["for", 0], ["i", 0], ["in", 0], ["es", 0], ["print", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["def", 0], ["minkey", 0], ["key", 0], ["mstset", 0], ["initilaize", 0], ["min", 0], ["value", 0], ["min", 0], ["1000000000000", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 1], ["key", 1], ["v", 1], ["min", 1], ["and", 1], ["mstset", 0], ["v", 0], ["false", 0], ["min", 0], ["key", 0], ["v", 0], ["min", 0], ["index", 0], ["v", 0], ["return", 0], ["min", 0], ["index", 0], ["def", 0], ["primmst", 0], ["key", 0], ["values", 0], ["used", 0], ["to", 0], ["pick", 0], ["minimum", 0], ["weight", 0], ["edge", 0], ["in", 0], ["cut", 0], ["key", 0], ["1000000000000", 0], ["n", 0], ["1", 0], ["parent", 0], ["none", 0], ["n", 0], ["1", 0], ["array", 0], ["to", 0], ["store", 0], ["constructed", 0], ["mst", 0], ["make", 0], ["key", 0], ["0", 0], ["so", 0], ["that", 0], ["this", 0], ["vertex", 0], ["is", 0], ["picked", 0], ["as", 0], ["first", 0], ["vertex", 0], ["key", 0], ["0", 0], ["0", 0], ["mstset", 0], ["false", 0], ["n", 0], ["1", 0], ["parent", 1], ["0", 1], ["1", 0], ["first", 0], ["node", 0], ["is", 0], ["always", 0], ["the", 0], ["root", 0], ["of", 0], ["for", 0], ["cout", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["pick", 14], ["the", 14], ["minimum", 14], ["distance", 14], ["vertex", 14], ["from", 14], ["the", 14], ["set", 14], ["of", 12], ["vertices", 12], ["not", 0], ["yet", 0], ["processed", 0], ["u", 0], ["is", 0], ["always", 0], ["equal", 0], ["to", 0], ["src", 0], ["in", 0], ["first", 0], ["iteration", 0], ["mn", 0], ["1000000000000", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["key", 0], ["v", 0], ["mn", 0], ["and", 0], ["mstset", 0], ["v", 0], ["false", 0], ["mn", 0], ["key", 0], ["v", 0], ["min", 0], ["index", 0], ["v", 0], ["u", 0], ["min", 0], ["index", 0], ["put", 1], ["the", 1], ["minimum", 1], ["distance", 1], ["vertex", 1], ["in", 1], ["the", 1], ["shortest", 1], ["path", 1], ["tree", 1], ["mstset", 1], ["u", 16], ["true", 3], ["update", 3], ["dist", 3], ["value", 3], ["of", 3], ["the", 3], ["adjacent", 3], ["vertices", 3], ["of", 3], ["the", 3], ["picked", 3], ["vertex", 3], ["only", 3], ["if", 3], ["the", 3], ["current", 3], ["distance", 3], ["is", 1], ["greater", 1], ["than", 1], ["new", 1], ["distance", 1], ["and", 1], ["the", 1], ["vertex", 0], ["in", 0], ["not", 0], ["in", 0], ["the", 0], ["shotest", 0], ["path", 0], ["tree", 0], ["for", 0], ["v", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["graph", 3], ["u", 3], ["v", 3], ["is", 3], ["non", 3], ["zero", 3], ["only", 3], ["for", 3], ["adjacent", 3], ["vertices", 3], ["of", 3], ["m", 3], ["mstset", 3], ["v", 3], ["is", 3], ["false", 3], ["for", 3], ["vertices", 3], ["not", 3], ["yet", 3], ["included", 3], ["in", 3], ["mst", 3], ["update", 3], ["the", 3], ["key", 2], ["only", 2], ["if", 2], ["graph", 2], ["u", 0], ["v", 0], ["is", 0], ["smaller", 0], ["than", 0], ["key", 0], ["v", 0], ["if", 0], ["graph", 0], ["u", 0], ["v", 0], ["0", 0], ["and", 0], ["mstset", 0], ["v", 0], ["false", 0], ["and", 0], ["key", 0], ["v", 0], ["graph", 0], ["u", 0], ["v", 0], ["key", 0], ["v", 0], ["graph", 0], ["u", 0], ["v", 0], ["parent", 0], ["v", 0], ["u", 0], ["es", 0], ["vss", 0], ["0", 0], ["vs", 0], ["cost", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["parent", 0], ["i", 0], ["n", 0], ["or", 0], ["i", 0], ["n", 0], ["vss", 0], ["1", 0], ["vs", 0], ["append", 0], ["i", 0], ["1", 0], ["elif", 0], ["i", 0], ["n", 0], ["vs", 0], ["append", 0], ["parent", 0], ["i", 0], ["1", 0], ["else", 0], ["es", 0], ["append", 0], ["i", 0], ["1", 0], ["parent", 0], ["i", 0], ["1", 0], ["cost", 0], ["graph", 0], ["i", 0], ["parent", 0], ["i", 0], ["myprint", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["myprint", 0], ["str", 0], ["cost", 0], ["n", 0], ["print", 0], ["cost", 0], ["print", 0], ["vss", 0], ["myprint", 0], ["str", 0], ["vss", 0], ["n", 0], ["vs", 0], ["0", 0], ["vss", 0], ["es", 0], ["n", 0], ["vss", 0], ["k1", 0], ["k2", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["parent", 0], ["i", 0], ["n", 0], ["vs", 0], ["k1", 0], ["i", 0], ["1", 0], ["k1", 0], ["1", 0], ["elif", 0], ["i", 0], ["n", 0], ["vs", 0], ["k1", 0], ["parent", 0], ["i", 0], ["1", 0], ["k1", 0], ["1", 0], ["else", 0], ["es", 0], ["k2", 0], ["i", 0], ["1", 0], ["parent", 0], ["i", 0], ["1", 0], ["k2", 0], ["1", 0], ["cost", 0], ["graph", 0], ["i", 0], ["parent", 0], ["i", 0], ["print", 0], ["vs", 0], ["myprint", 0], ["str", 0], ["st", 0], ["for", 0], ["st", 0], ["in", 0], ["vs", 0], ["myprint", 0], ["n", 0], ["myprint", 0], ["str", 0], ["len", 0], ["es", 0], ["n", 0], ["myprint", 0], ["str", 0], ["i", 0], ["0", 0], ["str", 0], ["i", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["es", 0], ["print", 0], ["len", 0], ["es", 0], ["for", 0], ["i", 0], ["in", 0], ["es", 0], ["print", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["myprint", 0], ["str", 0], ["totalcost", 0], ["n", 0], ["myprint", 0], ["str", 0], ["len", 0], ["stations", 0], ["n", 0], ["myprint", 0], ["str", 0], ["st", 0], ["for", 0], ["st", 0], ["in", 0], ["stations", 0], ["myprint", 0], ["str", 0], ["len", 0], ["connections", 0], ["n", 0], ["myprint", 0], ["str", 0], ["c1", 0], ["str", 0], ["c2", 0], ["n", 0], ["for", 0], ["c1", 0], ["c2", 0], ["in", 0], ["connections", 0], ["primmst", 0], ["e", 0], ["0", 0], ["i", 0], ["0", 0], ["ans", 0], ["ret", 0], ["0", 0], ["while", 0], ["e", 0], ["n", 0], ["edge", 0], ["edges", 0], ["i", 0], ["i", 0], ["1", 0], ["cost", 0], ["a", 0], ["b", 0], ["edge", 0], ["if", 0], ["find", 0], ["a", 0], ["find", 0], ["b", 0], ["e", 0], ["1", 0], ["ans", 0], ["append", 0], ["cost", 0], ["a", 0], ["b", 0], ["union", 0], ["a", 0], ["b", 0], ["ret", 0], ["cost", 0], ["vs", 0], ["es", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["if", 0], ["i", 0], ["1", 0], ["n", 0], ["vs", 0], ["append", 0], ["i", 0], ["2", 0], ["1", 0], ["else", 0], ["es", 0], ["append", 0], ["i", 0], ["print", 0], ["ret", 0], ["print", 0], ["len", 0], ["vs", 0], ["print", 0], ["vs", 0], ["print", 0], ["len", 0], ["es", 0], ["for", 0], ["i", 0], ["in", 0], ["es", 0], ["print", 0], ["i", 0], ["1", 0], ["1", 0], ["i", 0], ["2", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["math", 0], ["import", 0], ["inf", 0], ["def", 0], ["run", 0], ["testcase", 0], ["n", 0], ["int", 0], ["input", 0], ["coords", 0], ["none", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["coords", 0], ["i", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["ci", 0], ["0", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["ki", 0], ["0", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["cost", 0], ["i", 0], ["j", 0], ["if", 0], ["i", 0], ["j", 0], ["return", 0], ["0", 0], ["if", 0], ["i", 0], ["j", 0], ["i", 0], ["j", 0], ["j", 0], ["i", 0], ["if", 0], ["i", 0], ["0", 0], ["return", 0], ["ci", 0], ["j", 0], ["return", 0], ["abs", 0], ["coords", 0], ["i", 0], ["0", 0], ["coords", 0], ["j", 0], ["0", 0], ["abs", 0], ["coords", 0], ["i", 0], ["1", 0], ["coords", 0], ["j", 0], ["1", 0], ["ki", 0], ["i", 0], ["ki", 0], ["j", 0], ["current", 0], ["cost", 0], ["0", 0], ["tree", 0], ["set", 0], ["0", 0], ["rest", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["included", 0], ["true", 0], ["false", 0], ["n", 0], ["connections", 0], ["deque", 0], ["connections", 0], ["to", 0], ["station", 0], ["0", 0], ["min", 0], ["attach", 0], ["cost", 0], ["0", 0], ["inf", 0], ["n", 0], ["min", 0], ["attach", 0], ["cost", 0], ["0", 0], ["cost", 0], ["0", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["min", 0], ["attach", 0], ["cost", 0], ["0", 0], ["0", 0], ["cost", 0], ["0", 0], ["j", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["while", 0], ["len", 0], ["tree", 0], ["n", 0], ["1", 0], ["min", 0], ["pair", 0], ["0", 0], ["0", 0], ["min", 0], ["cost", 0], ["inf", 0], ["for", 0], ["tree", 0], ["node", 0], ["in", 0], ["tree", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["included", 0], ["i", 0], ["continue", 0], ["curr", 0], ["cost", 0], ["cost", 0], ["tree", 0], ["node", 0], ["i", 0], ["if", 0], ["curr", 0], ["cost", 0], ["min", 0], ["cost", 0], ["min", 0], ["pair", 0], ["tree", 0], ["node", 0], ["i", 0], ["min", 0], ["cost", 0], ["curr", 0], ["cost", 0], ["for", 0], ["node", 0], ["in", 0], ["rest", 0], ["if", 0], ["min", 0], ["attach", 0], ["cost", 0], ["node", 0], ["0", 0], ["min", 0], ["cost", 0], ["min", 0], ["pair", 0], ["min", 0], ["attach", 0], ["cost", 0], ["node", 0], ["1", 0], ["node", 0], ["min", 0], ["cost", 0], ["min", 0], ["attach", 0], ["cost", 0], ["node", 0], ["0", 0], ["tree", 0], ["add", 0], ["min", 0], ["pair", 0], ["1", 0], ["included", 0], ["min", 0], ["pair", 0], ["1", 0], ["true", 0], ["current", 0], ["cost", 0], ["min", 0], ["cost", 0], ["rest", 0], ["remove", 0], ["min", 0], ["pair", 0], ["1", 0], ["for", 0], ["node", 0], ["in", 0], ["rest", 0], ["if", 0], ["cost", 0], ["min", 0], ["pair", 0], ["1", 0], ["node", 0], ["min", 0], ["attach", 0], ["cost", 0], ["node", 0], ["0", 0], ["min", 0], ["attach", 0], ["cost", 0], ["node", 0], ["cost", 0], ["min", 0], ["pair", 0], ["1", 0], ["node", 0], ["min", 0], ["pair", 0], ["1", 0], ["min", 0], ["pair", 0], ["tuple", 0], ["sorted", 0], ["min", 0], ["pair", 0], ["if", 0], ["min", 0], ["pair", 0], ["0", 0], ["0", 0], ["connections", 0], ["appendleft", 0], ["min", 0], ["pair", 0], ["connections", 0], ["to", 0], ["station", 0], ["1", 0], ["else", 0], ["connections", 0], ["append", 0], ["min", 0], ["pair", 0], ["connections", 0], ["list", 0], ["list", 0], ["connections", 0], ["print", 0], ["current", 0], ["cost", 0], ["print", 0], ["connections", 0], ["to", 0], ["station", 0], ["print", 0], ["join", 0], ["str", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["connections", 0], ["list", 0], ["connections", 0], ["to", 0], ["station", 0], ["print", 0], ["len", 0], ["connections", 0], ["list", 0], ["connections", 0], ["to", 0], ["station", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["connections", 0], ["to", 0], ["station", 0], ["len", 0], ["connections", 0], ["list", 0], ["print", 0], ["connections", 0], ["list", 0], ["i", 0], ["0", 0], ["connections", 0], ["list", 0], ["i", 0], ["1", 0], ["testcase", 0], ["count", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["testcase", 0], ["count", 0], ["print", 0], ["str", 0], ["run", 0], ["testcase", 0], ["run", 0], ["testcase", 0], ["n", 0], ["int", 0], ["input", 0], ["市の数", 0], ["xy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["市", 0], ["i", 0], ["に発電所を建てるコスト", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["つなげるコスト", 0], ["cc", 0], ["1", 0], ["n", 0], ["ans", 0], ["2", 0], ["n", 0], ["total", 0], ["cost", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["mi", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["c", 0], ["an", 0], ["in", 0], ["enumerate", 0], ["zip", 0], ["c", 0], ["ans", 0], ["if", 0], ["an", 0], ["2", 0], ["and", 0], ["mi", 0], ["c", 0], ["mi", 0], ["c", 0], ["ami", 0], ["i", 0], ["total", 0], ["cost", 0], ["mi", 0], ["ans", 0], ["ami", 0], ["cc", 0], ["ami", 0], ["k1", 0], ["k", 0], ["ami", 0], ["x1", 0], ["y1", 0], ["xy", 0], ["ami", 0], ["for", 0], ["i", 0], ["k2", 0], ["x2", 0], ["y2", 0], ["in", 0], ["enumerate", 0], ["zip", 0], ["k", 0], ["xy", 0], ["new", 0], ["cost", 0], ["k1", 0], ["k2", 0], ["abs", 0], ["x1", 0], ["x2", 0], ["abs", 0], ["y1", 0], ["y2", 0], ["if", 0], ["c", 0], ["i", 0], ["new", 0], ["cost", 0], ["c", 0], ["i", 0], ["new", 0], ["cost", 0], ["cc", 0], ["i", 0], ["ami", 0], ["print", 0], ["total", 0], ["cost", 0], ["cnt", 0], ["ans", 0], ["count", 0], ["1", 0], ["print", 0], ["cnt", 0], ["a", 0], ["b", 0], ["for", 0], ["i", 0], ["a", 0], ["in", 0], ["enumerate", 0], ["ans", 0], ["1", 0], ["if", 0], ["a", 0], ["1", 0], ["a", 0], ["append", 0], ["i", 0], ["else", 0], ["b", 0], ["append", 0], ["i", 0], ["a", 0], ["1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["print", 0], ["n", 0], ["cnt", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["b", 0], ["print", 0], ["a", 0], ["b", 0], ["n", 0], ["int", 0], ["input", 0], ["pos", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["used", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["parent", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["plants", 0], ["connections", 0], ["ans", 0], ["0", 0], ["n", 0], ["n", 0], ["while", 0], ["n", 0], ["n", 0], ["1", 0], ["mn", 0], ["u", 0], ["min", 0], ["ci", 0], ["i", 0], ["for", 0], ["i", 0], ["ci", 0], ["in", 0], ["enumerate", 0], ["c", 0], ["if", 0], ["not", 0], ["used", 0], ["i", 0], ["ans", 0], ["mn", 0], ["used", 0], ["u", 0], ["true", 0], ["if", 0], ["parent", 0], ["u", 0], ["1", 0], ["plants", 0], ["append", 0], ["u", 0], ["else", 0], ["connections", 0], ["append", 0], ["min", 0], ["parent", 0], ["u", 0], ["u", 0], ["max", 0], ["parent", 0], ["u", 0], ["u", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["con", 0], ["cost", 0], ["k", 0], ["u", 0], ["k", 0], ["i", 0], ["abs", 0], ["pos", 0], ["u", 0], ["0", 0], ["pos", 0], ["i", 0], ["0", 0], ["abs", 0], ["pos", 0], ["u", 0], ["1", 0], ["pos", 0], ["i", 0], ["1", 0], ["if", 0], ["con", 0], ["cost", 0], ["c", 0], ["i", 0], ["c", 0], ["i", 0], ["con", 0], ["cost", 0], ["parent", 0], ["i", 0], ["u", 0], ["print", 0], ["ans", 0], ["print", 0], ["len", 0], ["plants", 0], ["for", 0], ["p", 0], ["in", 0], ["sorted", 0], ["plants", 0], ["print", 0], ["p", 0], ["1", 0], ["end", 0], ["print", 0], ["print", 0], ["len", 0], ["connections", 0], ["for", 0], ["con", 0], ["in", 0], ["connections", 0], ["print", 0], ["con", 0], ["0", 0], ["1", 0], ["con", 0], ["1", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["cord", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["plant", 0], ["set", 0], ["covered", 0], ["set", 0], ["parent", 0], ["1", 0], ["n", 0], ["sum", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["cost", 0], ["idx", 0], ["min", 0], ["cost", 0], ["idx", 0], ["for", 0], ["idx", 0], ["cost", 0], ["in", 0], ["enumerate", 0], ["c", 0], ["if", 0], ["idx", 0], ["not", 0], ["in", 0], ["covered", 0], ["sum", 0], ["cost", 0], ["covered", 0], ["add", 0], ["idx", 0], ["if", 0], ["parent", 0], ["idx", 0], ["1", 0], ["plant", 0], ["add", 0], ["idx", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["in", 0], ["covered", 0], ["continue", 0], ["c", 0], ["l", 0], ["k", 0], ["i", 0], ["k", 0], ["idx", 0], ["abs", 0], ["cord", 0], ["i", 0], ["0", 0], ["cord", 0], ["idx", 0], ["0", 0], ["abs", 0], ["cord", 0], ["i", 0], ["1", 0], ["cord", 0], ["idx", 0], ["1", 0], ["if", 0], ["c", 0], ["l", 0], ["c", 0], ["i", 0], ["c", 0], ["i", 0], ["c", 0], ["l", 0], ["parent", 0], ["i", 0], ["idx", 0], ["print", 0], ["n", 0], ["format", 0], ["sum", 0], ["len", 0], ["plant", 0], ["print", 0], ["map", 0], ["lambda", 0], ["x", 0], ["x", 0], ["1", 0], ["plant", 0], ["links", 0], ["0", 0], ["out", 0], ["for", 0], ["i", 0], ["in", 0], ["enumerate", 0], ["parent", 0], ["if", 0], ["1", 0], ["links", 0], ["1", 0], ["out", 0], ["n", 0], ["str", 0], ["1", 0], ["str", 0], ["i", 0], ["1", 0], ["print", 0], ["links", 0], ["out", 0], ["import", 0], ["bisect", 0], ["import", 0], ["functools", 0], ["import", 0], ["math", 0], ["import", 0], ["sys", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rt", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ri", 0], ["lambda", 0], ["int", 0], ["input", 0], ["rl", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["dist", 0], ["x1", 0], ["y1", 0], ["x2", 0], ["y2", 0], ["return", 0], ["abs", 0], ["x1", 0], ["x2", 0], ["abs", 0], ["y1", 0], ["y2", 0], ["def", 0], ["main", 0], ["n", 0], ["ri", 0], ["x", 1], ["y", 1], ["0", 1], ["n", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["rt", 0], ["c", 0], ["rl", 0], ["k", 0], ["rl", 0], ["val", 0], ["c", 0], ["copy", 0], ["used", 0], ["false", 0], ["n", 0], ["link", 0], ["1", 0], ["n", 0], ["to", 0], ["build", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["each", 0], ["step", 0], ["removes", 0], ["1", 0], ["city", 0], ["find", 0], ["min", 0], ["min", 0], ["index", 0], ["1", 0], ["min", 0], ["val", 0], ["math", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["used", 0], ["i", 0], ["and", 0], ["val", 0], ["i", 0], ["min", 0], ["val", 0], ["min", 0], ["index", 0], ["i", 0], ["min", 0], ["val", 0], ["val", 0], ["i", 0], ["used", 0], ["min", 0], ["index", 0], ["true", 0], ["if", 0], ["link", 0], ["min", 0], ["index", 0], ["1", 0], ["to", 0], ["build", 0], ["append", 0], ["min", 0], ["index", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["not", 0], ["used", 0], ["i", 0], ["to", 0], ["link", 0], ["k", 0], ["i", 0], ["k", 0], ["min", 0], ["index", 0], ["dist", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["x", 0], ["min", 0], ["index", 0], ["y", 0], ["min", 0], ["index", 0], ["if", 0], ["to", 0], ["link", 0], ["val", 0], ["i", 0], ["val", 0], ["i", 0], ["to", 0], ["link", 0], ["link", 0], ["i", 0], ["min", 0], ["index", 0], ["print", 0], ["sum", 0], ["val", 0], ["print", 0], ["len", 0], ["to", 0], ["build", 0], ["print", 0], ["to", 0], ["build", 0], ["print", 0], ["len", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["link", 0], ["if", 0], ["x", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["link", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["1", 0], ["link", 0], ["i", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["0", 0], ["7", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["x", 0], ["i", 0], ["2", 0], ["y", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["i", 0], ["3", 0], ["c", 0], ["i", 0], ["x", 0], ["i", 0], ["4", 0], ["k", 0], ["i", 0], ["x", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["3", 0], ["ans", 0], ["am", 0], ["0", 0], ["ans", 0], ["ps", 0], ["0", 0], ["ans", 0], ["ans", 0], ["con", 0], ["0", 0], ["con", 0], ["while", 0], ["x", 0], ["ind", 0], ["x", 0], ["y", 0], ["c", 0], ["k", 0], ["flag", 0], ["source", 0], ["x", 0], ["pop", 0], ["0", 0], ["ans", 0], ["am", 0], ["c", 0], ["if", 0], ["flag", 0], ["0", 0], ["ans", 0], ["ps", 0], ["1", 0], ["ans", 0], ["append", 0], ["ind", 0], ["else", 0], ["ans", 0], ["con", 0], ["1", 0], ["con", 0], ["append", 0], ["ind", 0], ["source", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["x", 0], ["indi", 0], ["xi", 0], ["yi", 0], ["ci", 0], ["ki", 0], ["flagi", 0], ["sourcei", 0], ["x", 0], ["i", 0], ["if", 0], ["k", 0], ["ki", 0], ["abs", 0], ["x", 0], ["xi", 0], ["abs", 0], ["y", 0], ["yi", 0], ["ci", 0], ["x", 0], ["i", 0], ["3", 0], ["k", 0], ["ki", 0], ["abs", 0], ["x", 0], ["xi", 0], ["abs", 0], ["y", 0], ["yi", 0], ["x", 0], ["i", 0], ["5", 0], ["1", 0], ["x", 0], ["i", 0], ["6", 0], ["ind", 0], ["x", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["3", 0], ["print", 0], ["ans", 0], ["am", 0], ["print", 0], ["ans", 0], ["ps", 0], ["print", 0], ["ans", 0], ["print", 0], ["ans", 0], ["con", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["con", 0], ["print", 0], ["i", 0], ["j", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["0", 0], ["7", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["x", 0], ["i", 0], ["2", 0], ["y", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["i", 0], ["3", 0], ["c", 0], ["i", 0], ["x", 0], ["i", 0], ["4", 0], ["k", 0], ["i", 0], ["ans", 0], ["am", 0], ["0", 0], ["ans", 0], ["ps", 0], ["0", 0], ["ans", 0], ["ans", 0], ["con", 0], ["0", 0], ["con", 0], ["def", 0], ["m", 0], ["x", 0], ["ret", 0], ["0", 0], ["cur", 0], ["x", 0], ["0", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["x", 0], ["if", 0], ["x", 0], ["i", 0], ["3", 0], ["cur", 0], ["ret", 0], ["i", 0], ["cur", 0], ["x", 0], ["i", 0], ["3", 0], ["return", 0], ["ret", 0], ["while", 0], ["x", 0], ["r", 0], ["m", 0], ["x", 0], ["ind", 0], ["x", 0], ["y", 0], ["c", 0], ["k", 0], ["flag", 0], ["source", 0], ["x", 0], ["pop", 0], ["r", 0], ["ans", 0], ["am", 0], ["c", 0], ["if", 0], ["flag", 0], ["0", 0], ["ans", 0], ["ps", 0], ["1", 0], ["ans", 0], ["append", 0], ["ind", 0], ["else", 0], ["ans", 0], ["con", 0], ["1", 0], ["con", 0], ["append", 0], ["ind", 0], ["source", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["x", 0], ["indi", 0], ["xi", 0], ["yi", 0], ["ci", 0], ["ki", 0], ["flagi", 0], ["sourcei", 0], ["x", 0], ["i", 0], ["if", 0], ["k", 0], ["ki", 0], ["abs", 0], ["x", 0], ["xi", 0], ["abs", 0], ["y", 0], ["yi", 0], ["ci", 0], ["x", 0], ["i", 0], ["3", 0], ["k", 0], ["ki", 0], ["abs", 0], ["x", 0], ["xi", 0], ["abs", 0], ["y", 0], ["yi", 0], ["x", 0], ["i", 0], ["5", 0], ["1", 0], ["x", 0], ["i", 0], ["6", 0], ["ind", 0], ["print", 0], ["ans", 0], ["am", 0], ["print", 0], ["ans", 0], ["ps", 0], ["print", 0], ["ans", 0], ["print", 0], ["ans", 0], ["con", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["con", 0], ["print", 0], ["i", 0], ["j", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["0", 0], ["7", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["i", 0], ["0", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["2", 0], ["i", 0], ["1", 0], ["x", 0], ["y", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["i", 0], ["3", 0], ["x", 0], ["i", 0], ["4", 0], ["c", 0], ["i", 0], ["k", 0], ["i", 0], ["ans", 0], ["am", 0], ["0", 0], ["ans", 0], ["ps", 0], ["0", 0], ["ans", 0], ["ans", 0], ["con", 0], ["0", 0], ["con", 0], ["def", 0], ["m", 0], ["x", 0], ["ret", 0], ["0", 0], ["cur", 0], ["x", 0], ["0", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["x", 0], ["if", 0], ["x", 0], ["i", 0], ["3", 0], ["cur", 0], ["ret", 0], ["i", 0], ["cur", 0], ["x", 0], ["i", 0], ["3", 0], ["return", 0], ["ret", 0], ["while", 0], ["x", 0], ["r", 0], ["m", 0], ["x", 0], ["ind", 0], ["x", 0], ["y", 0], ["c", 0], ["k", 0], ["flag", 0], ["source", 0], ["x", 0], ["pop", 0], ["r", 0], ["ans", 0], ["am", 0], ["c", 0], ["if", 0], ["flag", 0], ["0", 0], ["ans", 0], ["ps", 0], ["1", 0], ["ans", 0], ["append", 0], ["ind", 0], ["else", 0], ["ans", 0], ["con", 0], ["1", 0], ["con", 0], ["append", 0], ["ind", 0], ["source", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["x", 0], ["indi", 0], ["xi", 0], ["yi", 0], ["ci", 0], ["ki", 0], ["flagi", 0], ["sourcei", 0], ["x", 0], ["i", 0], ["cost", 0], ["k", 0], ["ki", 0], ["abs", 0], ["x", 0], ["xi", 0], ["abs", 0], ["y", 0], ["yi", 0], ["if", 0], ["cost", 0], ["ci", 0], ["x", 0], ["i", 0], ["3", 0], ["x", 0], ["i", 0], ["5", 0], ["x", 0], ["i", 0], ["6", 0], ["cost", 0], ["1", 0], ["ind", 0], ["print", 0], ["ans", 0], ["am", 0], ["print", 0], ["ans", 0], ["ps", 0], ["print", 0], ["ans", 0], ["print", 0], ["ans", 0], ["con", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["con", 0], ["print", 0], ["i", 0], ["j", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["0", 0], ["7", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["i", 0], ["0", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["2", 0], ["i", 0], ["1", 0], ["x", 0], ["y", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["i", 0], ["3", 0], ["x", 0], ["i", 0], ["4", 0], ["c", 0], ["i", 0], ["k", 0], ["i", 0], ["ans", 0], ["am", 0], ["0", 0], ["ans", 0], ["ps", 0], ["0", 0], ["ans", 0], ["ans", 0], ["con", 0], ["0", 0], ["con", 0], ["def", 0], ["m", 0], ["x", 0], ["ret", 0], ["0", 0], ["cur", 0], ["x", 0], ["0", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["x", 0], ["if", 0], ["x", 0], ["i", 0], ["3", 0], ["cur", 0], ["ret", 0], ["i", 0], ["cur", 0], ["x", 0], ["i", 0], ["3", 0], ["return", 0], ["ret", 0], ["def", 0], ["cost", 0], ["k", 0], ["ki", 0], ["x", 0], ["xi", 0], ["y", 0], ["yi", 0], ["return", 0], ["k", 0], ["ki", 0], ["abs", 0], ["x", 0], ["xi", 0], ["abs", 0], ["y", 0], ["yi", 0], ["while", 0], ["x", 0], ["r", 0], ["m", 0], ["x", 0], ["ind", 0], ["x", 0], ["y", 0], ["c", 0], ["k", 0], ["flag", 0], ["source", 0], ["x", 0], ["pop", 0], ["r", 0], ["ans", 0], ["am", 0], ["c", 0], ["if", 0], ["not", 0], ["flag", 0], ["ans", 0], ["ps", 0], ["1", 0], ["ans", 0], ["append", 0], ["ind", 0], ["else", 0], ["ans", 0], ["con", 0], ["1", 0], ["con", 0], ["append", 0], ["ind", 0], ["source", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["x", 0], ["indi", 0], ["xi", 0], ["yi", 0], ["ci", 0], ["ki", 0], ["flagi", 0], ["sourcei", 0], ["x", 0], ["i", 0], ["co", 0], ["cost", 0], ["k", 0], ["ki", 0], ["x", 0], ["xi", 0], ["y", 0], ["yi", 0], ["if", 0], ["co", 0], ["ci", 0], ["x", 0], ["i", 0], ["3", 0], ["x", 0], ["i", 0], ["5", 0], ["x", 0], ["i", 0], ["6", 0], ["co", 0], ["1", 0], ["ind", 0], ["print", 0], ["ans", 0], ["am", 0], ["print", 0], ["ans", 0], ["ps", 0], ["print", 0], ["ans", 0], ["print", 0], ["ans", 0], ["con", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["con", 0], ["print", 0], ["i", 0], ["j", 0], ["copy", 0], ["from", 0], ["https", 0], ["codeforces", 0], ["com", 0], ["contest", 0], ["1245", 0], ["submission", 0], ["64023056", 0], ["n", 0], ["int", 0], ["input", 0], ["市の数", 0], ["xy", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["市", 0], ["i", 0], ["に発電所を建てるコスト", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["つなげるコスト", 0], ["cc", 0], ["1", 0], ["n", 0], ["ans", 0], ["2", 0], ["n", 0], ["total", 0], ["cost", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["mi", 0], ["float", 0], ["inf", 0], ["for", 0], ["i", 0], ["c", 0], ["an", 0], ["in", 0], ["enumerate", 0], ["zip", 0], ["c", 0], ["ans", 0], ["if", 0], ["an", 0], ["2", 0], ["and", 0], ["mi", 0], ["c", 0], ["mi", 0], ["c", 0], ["ami", 0], ["i", 0], ["total", 0], ["cost", 0], ["mi", 0], ["ans", 0], ["ami", 0], ["cc", 0], ["ami", 0], ["k1", 0], ["k", 0], ["ami", 0], ["x1", 0], ["y1", 0], ["xy", 0], ["ami", 0], ["for", 0], ["i", 0], ["k2", 0], ["x2", 0], ["y2", 0], ["in", 0], ["enumerate", 0], ["zip", 0], ["k", 0], ["xy", 0], ["new", 0], ["cost", 0], ["k1", 0], ["k2", 0], ["abs", 0], ["x1", 0], ["x2", 0], ["abs", 0], ["y1", 0], ["y2", 0], ["if", 0], ["c", 0], ["i", 0], ["new", 0], ["cost", 0], ["c", 0], ["i", 0], ["new", 0], ["cost", 0], ["cc", 0], ["i", 0], ["ami", 0], ["print", 0], ["total", 0], ["cost", 0], ["cnt", 0], ["ans", 0], ["count", 0], ["1", 0], ["print", 0], ["cnt", 0], ["a", 0], ["b", 0], ["for", 0], ["i", 0], ["a", 0], ["in", 0], ["enumerate", 0], ["ans", 0], ["1", 0], ["if", 0], ["a", 0], ["1", 0], ["a", 0], ["append", 0], ["i", 0], ["else", 0], ["b", 0], ["append", 0], ["i", 0], ["a", 0], ["1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["print", 0], ["n", 0], ["cnt", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["b", 0], ["print", 0], ["a", 0], ["b", 0], ["n", 0], ["int", 0], ["input", 0], ["x", 0], ["0", 0], ["7", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["x", 0], ["i", 0], ["2", 0], ["y", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["i", 0], ["3", 0], ["c", 0], ["i", 0], ["x", 0], ["i", 0], ["4", 0], ["k", 0], ["i", 0], ["x", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["3", 0], ["ans", 0], ["am", 0], ["0", 0], ["ans", 0], ["ps", 0], ["0", 0], ["ans", 0], ["ans", 0], ["con", 0], ["0", 0], ["con", 0], ["while", 0], ["x", 0], ["ind", 0], ["x", 0], ["y", 0], ["c", 0], ["k", 0], ["flag", 0], ["source", 0], ["x", 0], ["pop", 0], ["0", 0], ["ans", 0], ["am", 0], ["c", 0], ["if", 0], ["flag", 0], ["0", 0], ["ans", 0], ["ps", 0], ["1", 0], ["ans", 0], ["append", 0], ["ind", 0], ["else", 0], ["ans", 0], ["con", 0], ["1", 0], ["con", 0], ["append", 0], ["ind", 0], ["source", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["x", 0], ["indi", 0], ["xi", 0], ["yi", 0], ["ci", 0], ["ki", 0], ["flagi", 0], ["sourcei", 0], ["x", 0], ["i", 0], ["if", 0], ["k", 0], ["ki", 0], ["abs", 0], ["x", 0], ["xi", 0], ["abs", 0], ["y", 0], ["yi", 0], ["ci", 0], ["x", 0], ["i", 0], ["3", 0], ["k", 0], ["ki", 0], ["abs", 0], ["x", 0], ["xi", 0], ["abs", 0], ["y", 0], ["yi", 0], ["x", 0], ["i", 0], ["5", 0], ["1", 0], ["x", 0], ["i", 0], ["6", 0], ["ind", 0], ["x", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["3", 0], ["print", 0], ["ans", 0], ["am", 0], ["print", 0], ["ans", 0], ["ps", 0], ["print", 0], ["ans", 0], ["print", 0], ["ans", 0], ["con", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["con", 0], ["print", 0], ["i", 0], ["j", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["cityno", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cityno", 0], ["i", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cost", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ks", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["powerstation", 0], ["0", 0], ["n", 0], ["totalcost", 0], ["0", 0], ["req", 0], ["powerstation", 0], ["notreq", 0], ["powerstation", 0], ["totalcost", 0], ["0", 0], ["established", 0], ["updated", 0], ["1", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["city", 0], ["1", 0], ["mini", 0], ["9999999999999999", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["mini", 0], ["cost", 0], ["i", 0], ["and", 0], ["i", 0], ["not", 0], ["in", 0], ["established", 0], ["city", 0], ["i", 0], ["mini", 0], ["cost", 0], ["i", 0], ["if", 0], ["updated", 0], ["city", 0], ["1", 0], ["req", 0], ["powerstation", 0], ["append", 0], ["city", 0], ["1", 0], ["else", 0], ["notreq", 0], ["powerstation", 0], ["append", 0], ["city", 0], ["1", 0], ["updated", 0], ["city", 0], ["1", 0], ["totalcost", 0], ["cost", 0], ["city", 0], ["established", 0], ["city", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cost", 0], ["from", 0], ["city", 0], ["ks", 0], ["i", 0], ["ks", 0], ["city", 0], ["abs", 0], ["cityno", 0], ["i", 0], ["0", 0], ["cityno", 0], ["city", 0], ["0", 0], ["abs", 0], ["cityno", 0], ["i", 0], ["1", 0], ["cityno", 0], ["city", 0], ["1", 0], ["if", 0], ["cost", 0], ["from", 0], ["city", 0], ["cost", 0], ["i", 0], ["cost", 0], ["i", 0], ["cost", 0], ["from", 0], ["city", 0], ["updated", 0], ["i", 0], ["city", 0], ["print", 0], ["updated", 0], ["print", 0], ["totalcost", 0], ["print", 0], ["len", 0], ["req", 0], ["powerstation", 0], ["print", 0], ["req", 0], ["powerstation", 0], ["print", 0], ["len", 0], ["notreq", 0], ["powerstation", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["notreq", 0], ["powerstation", 0], ["print", 0], ["notreq", 0], ["powerstation", 0], ["i", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["def", 0], ["ai", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["ei", 0], ["return", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["ip", 0], ["return", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["op", 0], ["ans", 0], ["return", 0], ["stdout", 0], ["write", 0], ["str", 0], ["ans", 0], ["n", 0], ["n", 0], ["ip", 0], ["pos", 0], ["ai", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["ai", 0], ["k", 0], ["ai", 0], ["connections", 0], ["plants", 0], ["used", 0], ["false", 0], ["n", 0], ["parent", 0], ["1", 0], ["n", 0], ["ans", 0], ["0", 0], ["n", 0], ["n", 0], ["while", 0], ["n", 0], ["n", 0], ["1", 0], ["mn", 0], ["u", 0], ["min", 0], ["ci", 0], ["i", 0], ["for", 0], ["i", 0], ["ci", 0], ["in", 0], ["enumerate", 0], ["c", 0], ["if", 0], ["not", 0], ["used", 0], ["i", 0], ["ans", 0], ["mn", 0], ["used", 0], ["u", 0], ["true", 0], ["if", 0], ["parent", 0], ["u", 0], ["1", 0], ["plants", 0], ["append", 0], ["u", 0], ["else", 0], ["connections", 0], ["append", 0], ["min", 0], ["parent", 0], ["u", 0], ["u", 0], ["max", 0], ["parent", 0], ["u", 0], ["u", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["con", 0], ["cost", 0], ["k", 0], ["u", 0], ["k", 0], ["i", 0], ["abs", 0], ["pos", 0], ["u", 0], ["0", 0], ["pos", 0], ["i", 0], ["0", 0], ["abs", 0], ["pos", 0], ["u", 0], ["1", 0], ["pos", 0], ["i", 0], ["1", 0], ["if", 0], ["con", 0], ["cost", 0], ["c", 0], ["i", 0], ["c", 0], ["i", 0], ["con", 0], ["cost", 0], ["parent", 0], ["i", 0], ["u", 0], ["print", 0], ["ans", 0], ["print", 0], ["len", 0], ["plants", 0], ["for", 0], ["i", 0], ["in", 0], ["sorted", 0], ["plants", 0], ["print", 0], ["i", 0], ["1", 0], ["end", 0], ["print", 0], ["print", 0], ["len", 0], ["connections", 0], ["for", 0], ["i", 0], ["in", 0], ["connections", 0], ["print", 0], ["i", 0], ["0", 0], ["1", 0], ["i", 0], ["1", 0], ["1", 0], ["def", 0], ["dist", 0], ["a", 3], ["b", 0], ["return", 0], ["abs", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["abs", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["p", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["p", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["st", 0], ["ed", 0], ["ans", 0], ["0", 0], ["is", 0], ["st", 0], ["1", 0], ["n", 0], ["parent", 0], ["1", 0], ["n", 0], ["d", 0], ["i", 0], ["c", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["m", 0], ["min", 0], ["d", 0], ["key", 0], ["d", 0], ["get", 0], ["if", 0], ["is", 0], ["st", 0], ["m", 0], ["st", 0], ["append", 0], ["m", 0], ["else", 0], ["ed", 0], ["append", 0], ["m", 0], ["parent", 0], ["m", 0], ["ans", 0], ["ans", 0], ["d", 0], ["m", 0], ["del", 0], ["d", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["d", 0], ["keys", 0], ["t", 0], ["cost", 0], ["k", 0], ["m", 0], ["k", 0], ["j", 0], ["dist", 0], ["p", 0], ["m", 0], ["p", 0], ["j", 0], ["if", 0], ["t", 0], ["cost", 0], ["d", 0], ["j", 0], ["d", 0], ["j", 0], ["t", 0], ["cost", 0], ["parent", 0], ["j", 0], ["m", 0], ["is", 0], ["st", 0], ["j", 0], ["0", 0], ["print", 0], ["ans", 0], ["print", 0], ["len", 0], ["st", 0], ["for", 0], ["i", 0], ["in", 0], ["st", 0], ["print", 0], ["i", 0], ["1", 0], ["end", 0], ["print", 0], ["print", 0], ["len", 0], ["ed", 0], ["for", 0], ["i", 0], ["in", 0], ["ed", 0], ["print", 0], ["i", 0], ["0", 0], ["1", 0], ["i", 0], ["1", 0], ["1", 0], ["import", 0], ["sys", 0], ["import", 0], ["heapq", 0], ["as", 0], ["hq", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["in", 0], ["r", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rdw", 0], ["lambda", 0], ["readline", 0], ["rstrip", 0], ["rdws", 0], ["lambda", 0], ["readline", 0], ["split", 0], ["rdwl", 0], ["lambda", 0], ["list", 0], ["readline", 0], ["split", 0], ["rdi", 0], ["lambda", 0], ["int", 0], ["readline", 0], ["rdis", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["rdil", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["rdilrows", 0], ["lambda", 0], ["cnt", 0], ["rdil", 0], ["for", 0], ["in", 0], ["range", 0], ["cnt", 0], ["def", 0], ["solve", 0], ["res", 0], ["0", 0], ["bld", 0], ["wire", 0], ["n", 0], ["rdi", 0], ["cities", 0], ["rdilrows", 0], ["n", 0], ["c", 0], ["rdil", 0], ["p", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["rdil", 0], ["used", 0], ["set", 0], ["used", 0], ["add", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cost", 0], ["bst", 0], ["min", 0], ["c", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["used", 0], ["par", 0], ["p", 0], ["bst", 0], ["used", 0], ["add", 0], ["bst", 0], ["res", 0], ["cost", 0], ["if", 0], ["par", 0], ["1", 0], ["bld", 0], ["append", 0], ["bst", 0], ["1", 0], ["else", 0], ["wire", 0], ["append", 0], ["bst", 0], ["1", 0], ["par", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["j", 0], ["not", 0], ["in", 0], ["used", 0], ["wcost", 0], ["k", 0], ["bst", 0], ["k", 0], ["j", 0], ["abs", 0], ["cities", 0], ["bst", 0], ["0", 0], ["cities", 0], ["j", 0], ["0", 0], ["abs", 0], ["cities", 0], ["bst", 0], ["1", 0], ["cities", 0], ["j", 0], ["1", 0], ["if", 0], ["wcost", 0], ["c", 0], ["j", 0], ["c", 0], ["j", 0], ["wcost", 0], ["p", 0], ["j", 0], ["bst", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["f", 0], ["res", 0], ["n", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["f", 0], ["len", 0], ["bld", 0], ["n", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["f", 0], ["join", 0], ["map", 0], ["str", 0], ["bld", 0], ["n", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["f", 0], ["len", 0], ["wire", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["wire", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["f", 0], ["wire", 0], ["i", 0], ["0", 0], ["wire", 0], ["i", 0], ["1", 0], ["n", 0], ["tests", 0], ["1", 0], ["tests", 0], ["rdi", 0], ["for", 0], ["testnum", 0], ["in", 0], ["range", 0], ["tests", 0], ["solve", 0], ["n", 0], ["rdi", 0], ["n", 0], ["m", 0], ["rdis", 0], ["s", 0], ["rdw", 0], ["a", 0], ["rdil", 0], ["op", 0], ["s", 0], ["rdws", 0], ["print", 0], ["f", 0], ["case", 0], ["testnum", 0], ["1", 0], ["res", 0], ["print", 0], ["res", 0], ["sep", 0], ["n", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["yes", 0], ["n", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["f", 0], ["res", 0], ["n", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["f", 0], ["y1", 0], ["x1", 0], ["y2", 0], ["x2", 0], ["n", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.020216103171836877, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.012222713240053789, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.052521739130434786, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.03954865424430652, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.018299058905542, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.012083188102707115, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.04869565217391304, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.039246376811594264, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nDevu is a renowned classical singer. He is invited to many big functions/festivals. Recently he was invited to \"All World Classical Singing Festival\". Other than Devu, comedian Churu was also invited.\n\nDevu has provided organizers a list of the songs and required time for singing them. He will sing n songs, i^{th} song will take t_{i} minutes exactly. \n\nThe Comedian, Churu will crack jokes. All his jokes are of 5 minutes exactly.\n\nPeople have mainly come to listen Devu. But you know that he needs rest of 10 minutes after each song. On the other hand, Churu being a very active person, doesn't need any rest.\n\nYou as one of the organizers should make an optimal sсhedule for the event. For some reasons you must follow the conditions:  The duration of the event must be no more than d minutes;  Devu must complete all his songs;  With satisfying the two previous conditions the number of jokes cracked by Churu should be as many as possible. \n\nIf it is not possible to find a way to conduct all the songs of the Devu, output -1. Otherwise find out maximum number of jokes that Churu can crack in the grand event.\n\n\n-----Input-----\n\nThe first line contains two space separated integers n, d (1 ≤ n ≤ 100; 1 ≤ d ≤ 10000). The second line contains n space-separated integers: t_1, t_2, ..., t_{n} (1 ≤ t_{i} ≤ 100).\n\n\n-----Output-----\n\nIf there is no way to conduct all the songs of Devu, output -1. Otherwise output the maximum number of jokes that Churu can crack in the grand event.\n\n\n-----Examples-----\nInput\n3 30\n2 2 1\n\nOutput\n5\n\nInput\n3 20\n2 1 1\n\nOutput\n-1\n\n\n\n-----Note-----\n\nConsider the first example. The duration of the event is 30 minutes. There could be maximum 5 jokes in the following way:  First Churu cracks a joke in 5 minutes.  Then Devu performs the first song for 2 minutes.  Then Churu cracks 2 jokes in 10 minutes.  Now Devu performs second song for 2 minutes.  Then Churu cracks 2 jokes in 10 minutes.  Now finally Devu will perform his last song in 1 minutes.  \n\nTotal time spent is 5 + 2 + 10 + 2 + 10 + 1 = 30 minutes.\n\nConsider the second example. There is no way of organizing Devu's all songs. Hence the answer is -1.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["\"\"\"\nCodeforces Round 251 Div 2 Problem A\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef read(mode=2):\n\t# 0: String\n\t# 1: List of strings\n\t# 2: List of integers\n\tinputs = input().strip()\n\tif mode == 0:\n\t\treturn inputs\n\tif mode == 1:\n\t\treturn inputs.split()\n\tif mode == 2:\n\t\treturn [int(x) for x in inputs.split()]\n\ndef write(s=\"\\n\"):\n\tif isinstance(s, list): s = \" \".join(s)\n\ts = str(s)\n\tprint(s, end=\"\")\n\n################################################### SOLUTION\nn,d = read()\nt = read()\ns = sum(t) + 10*n - 10\nif s > d:\n\tprint(-1)\nelse:\n\tprint((d-sum(t))//5)\n", "n, d = map(int, input().split())\nt = list(map(int, input().split()))\nT = sum(t) + 10 * (n - 1)\nif T > d:\n\tprint(-1)\nelse:\n\tprint(2 * (n - 1) + (d - T) // 5)\n", "sa=input().split(' ')\nsongs=int(sa[0])\nmins=int(sa[1])\nsa2=input().split(' ')\nsa3=[]\nfor item in sa2:\n\tsa3.append(int(item))\n\nsums=0\nfor item in sa3:\n\tsums+=item\n\t\nif (songs-1)*10+sums>mins:\n\tprint(-1)\n\nelse:\n\tprint((mins-sums)//(5))\n", "n, d = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()]\n\nresult = -2\ntime = -10\nfor i in t:\n\ttime += i + 10\n\tresult += 2\n\nif time > d:\n\tprint(-1)\nelse:\n\tprint(result + (d - time) // 5)\n", "# -*- coding: utf-8 -*-\n\nn, d = list(map(int, input().split()))\n\nts = list(map(int, input().split()))\n\nx = d-(sum(ts)+ (n-1)*10)\n\nif x >= 0:\n\tprint(2*(n-1)+x//5)\nelse:\n\tprint(-1)\n\n", "(n, d)=list(map(int, input().split()))\na=list(map(int, input().split()))\nif sum(a)+(len(a)-1)*10<=d:\n\tprint((d-sum(a))//5)\nelse:\n\tprint(-1)\n", "n, d = [int(c) for c in input().split()]\nt = sum([int(c) for c in input().split()])\n\nbreaks = (n - 1) * 10\n\nif t + breaks > d:\n\tprint(-1)\nelse:\n\tfree = d - (t + breaks)\n\tprint(2*(n - 1) + (free // 5))\n", "(n, d) = list(map(int, input().split()))\nsongs = list(map(int, input().split()))\n\ntime_used = sum(songs) + (n-1)*10\nif (time_used > d):\n\tprint(-1)\nelse:\n\tprint((d - time_used) // 5 + 2*(n - 1))\n", "n, d = map(int,input().split())\nt = list(map(int,input().split()))\nsum = 0\nfor ti in t:\n\tsum += ti\nif sum+(n-1)*10 <= d:\n\tprint((d-sum)//5)\nelse:\n\tprint(-1)\n", "n,d = map(int,input().split(' '))\nns = list(map(int,input().split(' ')))\n\nif d<sum(ns)+10*(len(ns)-1):\n\tprint(-1)\nelse:\n\tanswer = (d-sum(ns))//5\n\tprint(answer)\n", "n, t = list(map(int, input().split()))\ns = list(map(int, input().split()))\n\nif sum(s)+(len(s)-1)*10>t:\n\tprint(-1)\nelse:\n\tprint(((len(s)-1)*2) + (t-sum(s)-(len(s)-1)*10)//5)\n", "n, d = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\nif s+10*(n-1) > d:\n\tprint(-1)\nelse:\n\tprint((d-s)//5)\n", "n,d=list(map(int,input().split()))\nsongs=list(map(int,input().split()))\nsparetime=d-(n-1)*10-sum(songs)\nif(sparetime<0):\n\tprint(-1)\nelse:\n\tprint((n-1)*2+sparetime//5)\n", "n , d = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\ntot = sum(t)\nlimit = tot + (n-1)*10\n\nrest = d - limit\n\nc = 0\n#print(rest)\nif limit > d :\n\tprint(-1)\nelse:\n\tfor i in range(n-1):\n\t\tc += 2\n\n\tc += (rest // 5)\n\n\tprint(c)\n", "a=list(map(int,input().split()))\nn=a[0]\nd=a[1]\ns=0\ngg=list(map(int,input().split()))\ns=sum(gg)\nif s+(n-1)*10>d:\n\tprint('-1')\nelse:\n\tprint((n-1)*2+(d-(s+(n-1)*10))//5 )\n", "n, d = map(int, input().split())\nt = list(map(int, input().split()))\nsum_time = (n - 1) * 10 + sum(t)\nif sum_time > d:\n\tprint(-1)\nelse:\n\tres_time = d - sum_time\n\tcnt = res_time / 5 + (n - 1) * 2\n\tprint(int(cnt))\n", "from sys import stdin as cin,stdout as cout\nfrom math import factorial as f\nfrom itertools import combinations as comb\nn,d = list(map(int,(cin.readline().split())))\na = list(map(int,(cin.readline().split())))\ns = sum(a)\nr = d-s-(n-1)*10\nif r <0:\n\tprint(-1)\nelse:\n\tprint(int((d-s)/5))\n\n\n", "n,d=list(map(int,input().split()))\n\nL=list(map(int,input().split()))\n\ns=sum(L)\n\ns+=10*(n-1)\n\nif(s>d):\n\tprint(-1)\nelse:\n\ts-=10*(n-1)\n\tprint((d-s)//5)\n", "n,d=[int(x) for x in input().split()]\nt=[int(x) for x in input().split()]\nprint(-1) if sum(t)+(len(t)-1)*10>d else print((d-sum(t))//5)\n", "import sys\n\n# f = open(\"a.txt\", \"r+\")\nf = sys.stdin\n\nn, d = map(int, f.readline().strip().split())\nt = list(map(int, f.readline().strip().split()))\n\ns = sum(t)\n\nif 10*(n-1)+s > d:\n\tprint(-1)\nelse:\n\tjokes = 0\n\td -= s\n\tprint(d // 5)\n", "def solve():\n\tn, d = list(map(int, input().split()))\n\tt = list(map(int, input().split()))\n\n\tsum_t = sum(t)\n\tif sum_t + 10 * (n - 1) > d:\n\t\treturn -1\n\t\n\tans = 2 * (n - 1) + (d - sum_t - 10 * (n - 1)) // 5\n\treturn ans\n\nprint(solve())\n", "n, d = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\nsum_t = sum(t)\njoke_time = (n-1)*10\nif sum_t + joke_time <= d:\n\tleft = d-(joke_time+sum_t)\n\tprint((joke_time+left)//5)\nelse:\n\tprint(-1)\n"], "id": "id7311"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7311", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["devu", 4], ["is", 4], ["a", 4], ["renowned", 4], ["classical", 4], ["singer", 4], ["he", 4], ["is", 4], ["invited", 4], ["to", 4], ["many", 4], ["big", 4], ["functions", 4], ["festivals", 4], ["recently", 4], ["he", 4], ["was", 4], ["invited", 4], ["to", 4], ["all", 4], ["world", 4], ["classical", 4], ["singing", 4], ["festival", 4], ["other", 4], ["than", 4], ["devu", 4], ["comedian", 4], ["churu", 4], ["was", 4], ["also", 4], ["invited", 4], ["devu", 4], ["has", 4], ["provided", 4], ["organizers", 4], ["a", 4], ["list", 4], ["of", 4], ["the", 4], ["songs", 0], ["and", 0], ["required", 0], ["time", 0], ["for", 0], ["singing", 0], ["them", 0], ["he", 0], ["will", 0], ["sing", 0], ["n", 0], ["songs", 0], ["i", 0], ["th", 0], ["song", 0], ["will", 0], ["take", 0], ["t", 0], ["i", 0], ["minutes", 4], ["exactly", 4], ["the", 4], ["comedian", 4], ["churu", 4], ["will", 4], ["crack", 4], ["jokes", 4], ["all", 4], ["his", 4], ["jokes", 4], ["are", 4], ["of", 4], ["5", 4], ["minutes", 4], ["exactly", 4], ["people", 4], ["have", 4], ["mainly", 4], ["come", 4], ["to", 4], ["listen", 4], ["devu", 4], ["but", 4], ["you", 4], ["know", 4], ["that", 4], ["he", 4], ["needs", 4], ["rest", 4], ["of", 4], ["10", 4], ["minutes", 4], ["after", 4], ["each", 4], ["song", 4], ["on", 4], ["the", 4], ["other", 4], ["hand", 4], ["churu", 4], ["being", 4], ["a", 4], ["very", 4], ["active", 4], ["person", 4], ["doesn", 4], ["t", 4], ["need", 4], ["any", 4], ["rest", 4], ["you", 4], ["as", 4], ["one", 4], ["of", 4], ["the", 4], ["organizers", 4], ["should", 4], ["make", 4], ["an", 4], ["optimal", 4], ["sсhedule", 4], ["for", 4], ["the", 4], ["event", 4], ["for", 4], ["some", 4], ["reasons", 4], ["you", 4], ["must", 4], ["follow", 4], ["the", 4], ["conditions", 4], ["the", 4], ["duration", 4], ["of", 4], ["the", 4], ["event", 4], ["must", 4], ["be", 4], ["no", 4], ["more", 4], ["than", 4], ["d", 4], ["minutes", 4], ["devu", 4], ["must", 4], ["complete", 4], ["all", 4], ["his", 4], ["songs", 4], ["with", 4], ["satisfying", 4], ["the", 4], ["two", 4], ["previous", 4], ["conditions", 4], ["the", 4], ["number", 4], ["of", 4], ["jokes", 4], ["cracked", 4], ["by", 4], ["churu", 4], ["should", 4], ["be", 4], ["as", 4], ["many", 4], ["as", 4], ["possible", 4], ["if", 4], ["it", 4], ["is", 4], ["not", 4], ["possible", 4], ["to", 4], ["find", 4], ["a", 4], ["way", 4], ["to", 4], ["conduct", 4], ["all", 4], ["the", 4], ["songs", 4], ["of", 4], ["the", 4], ["devu", 4], ["output", 4], ["1", 4], ["otherwise", 4], ["find", 4], ["out", 4], ["maximum", 0], ["number", 0], ["of", 0], ["jokes", 0], ["that", 0], ["churu", 0], ["can", 0], ["crack", 0], ["in", 0], ["the", 0], ["grand", 0], ["event", 0], ["input", 0], ["the", 4], ["first", 4], ["line", 4], ["contains", 4], ["two", 4], ["space", 4], ["separated", 4], ["integers", 4], ["n", 4], ["d", 4], ["1", 4], ["≤", 4], ["n", 4], ["≤", 4], ["100", 4], ["1", 4], ["≤", 0], ["d", 0], ["≤", 0], ["10000", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["space", 0], ["separated", 0], ["integers", 0], ["t", 0], ["1", 0], ["t", 0], ["2", 0], ["t", 0], ["n", 0], ["1", 0], ["≤", 0], ["t", 0], ["i", 0], ["≤", 0], ["100", 0], ["output", 0], ["if", 4], ["there", 4], ["is", 4], ["no", 4], ["way", 4], ["to", 4], ["conduct", 4], ["all", 4], ["the", 4], ["songs", 4], ["of", 4], ["devu", 4], ["output", 4], ["1", 4], ["otherwise", 4], ["output", 4], ["the", 4], ["maximum", 0], ["number", 0], ["of", 0], ["jokes", 0], ["that", 0], ["churu", 0], ["can", 0], ["crack", 0], ["in", 0], ["the", 0], ["grand", 0], ["event", 0], ["examples", 0], ["input", 0], ["3", 0], ["30", 0], ["2", 0], ["2", 0], ["1", 0], ["output", 0], ["5", 0], ["input", 0], ["3", 0], ["20", 0], ["2", 0], ["1", 0], ["1", 0], ["output", 0], ["1", 0], ["note", 0], ["consider", 4], ["the", 4], ["first", 4], ["example", 4], ["the", 4], ["duration", 4], ["of", 4], ["the", 4], ["event", 4], ["is", 4], ["30", 4], ["minutes", 4], ["there", 4], ["could", 4], ["be", 4], ["maximum", 4], ["5", 4], ["jokes", 4], ["in", 4], ["the", 4], ["following", 4], ["way", 4], ["first", 4], ["churu", 4], ["cracks", 4], ["a", 4], ["joke", 4], ["in", 4], ["5", 4], ["minutes", 4], ["then", 4], ["devu", 4], ["performs", 4], ["the", 4], ["first", 4], ["song", 4], ["for", 4], ["2", 4], ["minutes", 4], ["then", 4], ["churu", 4], ["cracks", 4], ["2", 4], ["jokes", 0], ["in", 0], ["10", 0], ["minutes", 0], ["now", 0], ["devu", 0], ["performs", 0], ["second", 0], ["song", 4], ["for", 0], ["2", 0], ["minutes", 0], ["then", 0], ["churu", 0], ["cracks", 0], ["2", 0], ["jokes", 0], ["in", 0], ["10", 0], ["minutes", 4], ["now", 4], ["finally", 4], ["devu", 4], ["will", 4], ["perform", 4], ["his", 4], ["last", 4], ["song", 4], ["in", 4], ["1", 4], ["minutes", 4], ["total", 4], ["time", 4], ["spent", 4], ["is", 4], ["5", 4], ["2", 4], ["10", 4], ["2", 4], ["10", 4], ["1", 4], ["30", 4], ["minutes", 4], ["consider", 4], ["the", 4], ["second", 4], ["example", 4], ["there", 4], ["is", 4], ["no", 4], ["way", 0], ["of", 0], ["organizing", 0], ["devu", 0], ["s", 0], ["all", 0], ["songs", 0], ["hence", 0], ["the", 0], ["answer", 0], ["is", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7070707070707071, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.17676767676767677, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8774509803921569, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2193627450980392, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7070707070707071, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.17676767676767677, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8774509803921569, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2193627450980392, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["codeforces", 0], ["round", 0], ["251", 0], ["div", 0], ["2", 0], ["problem", 0], ["a", 0], ["author", 0], ["chaotic", 0], ["iak", 0], ["language", 0], ["python", 0], ["3", 0], ["3", 0], ["4", 0], ["def", 0], ["read", 0], ["mode", 0], ["2", 0], ["0", 0], ["string", 0], ["1", 0], ["list", 0], ["of", 0], ["strings", 0], ["2", 0], ["list", 0], ["of", 0], ["integers", 0], ["inputs", 0], ["input", 0], ["strip", 0], ["if", 0], ["mode", 0], ["0", 0], ["return", 0], ["inputs", 0], ["if", 0], ["mode", 0], ["1", 0], ["return", 0], ["inputs", 0], ["split", 0], ["if", 0], ["mode", 0], ["2", 0], ["return", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["inputs", 0], ["split", 0], ["def", 0], ["write", 0], ["s", 0], ["n", 0], ["if", 0], ["isinstance", 0], ["s", 0], ["list", 0], ["s", 0], ["join", 0], ["s", 0], ["s", 0], ["str", 0], ["s", 0], ["print", 0], ["s", 0], ["end", 0], ["solution", 0], ["n", 0], ["d", 0], ["read", 0], ["t", 0], ["read", 0], ["s", 0], ["sum", 0], ["t", 0], ["10", 0], ["n", 0], ["10", 0], ["if", 0], ["s", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["d", 0], ["sum", 0], ["t", 0], ["5", 0], ["n", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["sum", 0], ["t", 0], ["10", 0], ["n", 0], ["1", 0], ["if", 0], ["t", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["2", 0], ["n", 0], ["1", 0], ["d", 0], ["t", 0], ["5", 0], ["sa", 0], ["input", 0], ["split", 0], ["songs", 0], ["int", 0], ["sa", 0], ["0", 0], ["mins", 0], ["int", 0], ["sa", 0], ["1", 0], ["sa2", 0], ["input", 0], ["split", 0], ["sa3", 0], ["for", 0], ["item", 0], ["in", 0], ["sa2", 0], ["sa3", 0], ["append", 0], ["int", 0], ["item", 0], ["sums", 0], ["0", 0], ["for", 0], ["item", 0], ["in", 0], ["sa3", 0], ["sums", 0], ["item", 0], ["if", 0], ["songs", 0], ["1", 0], ["10", 0], ["sums", 0], ["mins", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["mins", 0], ["sums", 0], ["5", 0], ["n", 0], ["d", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["t", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["result", 0], ["2", 0], ["time", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["t", 0], ["time", 0], ["i", 0], ["10", 0], ["result", 0], ["2", 0], ["if", 0], ["time", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["result", 0], ["d", 0], ["time", 0], ["5", 0], ["coding", 0], ["utf", 0], ["8", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ts", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["d", 0], ["sum", 0], ["ts", 0], ["n", 0], ["1", 0], ["10", 0], ["if", 0], ["x", 0], ["0", 0], ["print", 0], ["2", 0], ["n", 0], ["1", 0], ["x", 0], ["5", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["len", 0], ["a", 0], ["1", 0], ["10", 0], ["d", 0], ["print", 0], ["d", 0], ["sum", 0], ["a", 0], ["5", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["d", 0], ["int", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["input", 0], ["split", 0], ["t", 0], ["sum", 0], ["int", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["input", 0], ["split", 0], ["breaks", 0], ["n", 0], ["1", 0], ["10", 0], ["if", 0], ["t", 0], ["breaks", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["free", 0], ["d", 0], ["t", 0], ["breaks", 0], ["print", 0], ["2", 0], ["n", 0], ["1", 0], ["free", 0], ["5", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["songs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["time", 0], ["used", 0], ["sum", 0], ["songs", 0], ["n", 0], ["1", 0], ["10", 0], ["if", 0], ["time", 0], ["used", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["d", 0], ["time", 0], ["used", 0], ["5", 0], ["2", 0], ["n", 0], ["1", 0], ["n", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["for", 0], ["ti", 0], ["in", 0], ["t", 0], ["sum", 0], ["ti", 0], ["if", 0], ["sum", 0], ["n", 0], ["1", 0], ["10", 0], ["d", 0], ["print", 0], ["d", 0], ["sum", 0], ["5", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ns", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["d", 0], ["sum", 0], ["ns", 0], ["10", 0], ["len", 0], ["ns", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["answer", 0], ["d", 0], ["sum", 0], ["ns", 0], ["5", 0], ["print", 0], ["answer", 0], ["n", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["s", 0], ["len", 0], ["s", 0], ["1", 0], ["10", 0], ["t", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["s", 0], ["1", 0], ["2", 0], ["t", 0], ["sum", 0], ["s", 0], ["len", 0], ["s", 0], ["1", 0], ["10", 0], ["5", 0], ["n", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["sum", 0], ["a", 0], ["if", 0], ["s", 0], ["10", 0], ["n", 0], ["1", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["d", 0], ["s", 0], ["5", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["songs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sparetime", 0], ["d", 0], ["n", 0], ["1", 0], ["10", 0], ["sum", 0], ["songs", 0], ["if", 0], ["sparetime", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["sparetime", 0], ["5", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["tot", 0], ["sum", 0], ["t", 0], ["limit", 0], ["tot", 0], ["n", 0], ["1", 0], ["10", 0], ["rest", 0], ["d", 0], ["limit", 0], ["c", 0], ["0", 0], ["print", 0], ["rest", 0], ["if", 0], ["limit", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["c", 0], ["2", 0], ["c", 0], ["rest", 0], ["5", 0], ["print", 0], ["c", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["a", 0], ["0", 0], ["d", 0], ["a", 0], ["1", 0], ["s", 0], ["0", 0], ["gg", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["sum", 0], ["gg", 0], ["if", 0], ["s", 0], ["n", 0], ["1", 0], ["10", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["d", 0], ["s", 0], ["n", 0], ["1", 0], ["10", 0], ["5", 0], ["n", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["time", 0], ["n", 0], ["1", 0], ["10", 0], ["sum", 0], ["t", 0], ["if", 0], ["sum", 0], ["time", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["res", 0], ["time", 0], ["d", 0], ["sum", 0], ["time", 0], ["cnt", 0], ["res", 0], ["time", 0], ["5", 0], ["n", 0], ["1", 0], ["2", 0], ["print", 0], ["int", 0], ["cnt", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["as", 0], ["cin", 0], ["stdout", 0], ["as", 0], ["cout", 0], ["from", 0], ["math", 0], ["import", 0], ["factorial", 0], ["as", 0], ["f", 0], ["from", 0], ["itertools", 0], ["import", 0], ["combinations", 0], ["as", 0], ["comb", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["cin", 0], ["readline", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["cin", 0], ["readline", 0], ["split", 0], ["s", 0], ["sum", 0], ["a", 0], ["r", 0], ["d", 0], ["s", 0], ["n", 0], ["1", 0], ["10", 0], ["if", 0], ["r", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["int", 0], ["d", 0], ["s", 0], ["5", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["sum", 0], ["l", 0], ["s", 0], ["10", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["s", 0], ["10", 0], ["n", 0], ["1", 0], ["print", 0], ["d", 0], ["s", 0], ["5", 0], ["n", 0], ["d", 0], ["int", 1], ["x", 1], ["for", 1], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["t", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["1", 0], ["if", 0], ["sum", 0], ["t", 0], ["len", 0], ["t", 0], ["1", 0], ["10", 0], ["d", 0], ["else", 0], ["print", 0], ["d", 0], ["sum", 0], ["t", 0], ["5", 0], ["import", 0], ["sys", 0], ["f", 0], ["open", 0], ["a", 0], ["txt", 0], ["r", 0], ["f", 0], ["sys", 0], ["stdin", 0], ["n", 0], ["d", 0], ["map", 0], ["int", 0], ["f", 0], ["readline", 0], ["strip", 0], ["split", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["f", 0], ["readline", 0], ["strip", 0], ["split", 0], ["s", 0], ["sum", 0], ["t", 0], ["if", 0], ["10", 0], ["n", 0], ["1", 0], ["s", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["jokes", 0], ["0", 0], ["d", 0], ["s", 0], ["print", 0], ["d", 0], ["5", 0], ["def", 0], ["solve", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["t", 0], ["sum", 0], ["t", 0], ["if", 0], ["sum", 0], ["t", 0], ["10", 0], ["n", 0], ["1", 0], ["d", 0], ["return", 0], ["1", 0], ["ans", 0], ["2", 0], ["n", 0], ["1", 0], ["d", 0], ["sum", 0], ["t", 0], ["10", 0], ["n", 0], ["1", 0], ["5", 0], ["return", 0], ["ans", 0], ["print", 0], ["solve", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["t", 0], ["sum", 0], ["t", 0], ["joke", 0], ["time", 0], ["n", 0], ["1", 0], ["10", 0], ["if", 0], ["sum", 0], ["t", 0], ["joke", 0], ["time", 0], ["d", 0], ["left", 0], ["d", 0], ["joke", 0], ["time", 0], ["sum", 0], ["t", 0], ["print", 0], ["joke", 0], ["time", 0], ["left", 0], ["5", 0], ["else", 0], ["print", 0], ["1", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00340522133938706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00340522133938706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.0167973124300112, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0167973124300112, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00340522133938706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00340522133938706, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0167973124300112, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0167973124300112, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nA star is a figure of the following type: an asterisk character '*' in the center of the figure and four rays (to the left, right, top, bottom) of the same positive length. The size of a star is the length of its rays. The size of a star must be a positive number (i.e. rays of length $0$ are not allowed).\n\nLet's consider empty cells are denoted by '.', then the following figures are stars:\n\n [Image] The leftmost figure is a star of size $1$, the middle figure is a star of size $2$ and the rightmost figure is a star of size $3$. \n\nYou are given a rectangular grid of size $n \\times m$ consisting only of asterisks '*' and periods (dots) '.'. Rows are numbered from $1$ to $n$, columns are numbered from $1$ to $m$. Your task is to draw this grid using any number of stars or find out that it is impossible. Stars can intersect, overlap or even coincide with each other. The number of stars in the output can't exceed $n \\cdot m$. Each star should be completely inside the grid. You can use stars of same and arbitrary sizes.\n\nIn this problem, you do not need to minimize the number of stars. Just find any way to draw the given grid with at most $n \\cdot m$ stars.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($3 \\le n, m \\le 100$) — the sizes of the given grid.\n\nThe next $n$ lines contains $m$ characters each, the $i$-th line describes the $i$-th row of the grid. It is guaranteed that grid consists of characters '*' and '.' only.\n\n\n-----Output-----\n\nIf it is impossible to draw the given grid using stars only, print \"-1\".\n\nOtherwise in the first line print one integer $k$ ($0 \\le k \\le n \\cdot m$) — the number of stars needed to draw the given grid. The next $k$ lines should contain three integers each — $x_j$, $y_j$ and $s_j$, where $x_j$ is the row index of the central star character, $y_j$ is the column index of the central star character and $s_j$ is the size of the star. Each star should be completely inside the grid.\n\n\n-----Examples-----\nInput\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n\nOutput\n3\n3 4 1\n3 5 2\n3 5 1\n\nInput\n5 5\n.*...\n****.\n.****\n..**.\n.....\n\nOutput\n3\n2 2 1\n3 3 1\n3 4 1\n\nInput\n5 5\n.*...\n***..\n.*...\n.*...\n.....\n\nOutput\n-1\n\nInput\n3 3\n*.*\n.*.\n*.*\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example the output 2\n\n3 4 1\n\n3 5 2\n\n\n\nis also correct.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, m = map(int, input().split())\npole = []\nmetka = []\nfor i in range(n):\n\tpole.append([])\n\tmetka.append([])\n\ts = input()\n\tfor j in range(m):\n\t\tpole[i].append(s[j])\n\t\tif s[j] == '.':\n\t\t\tmetka[i].append(0)\n\t\telse:\n\t\t\tmetka[i].append(1)\nk = 0\nans = []\n\nfor i in range(n):\n\tfor j in range(m):\n\t\tif pole[i][j] == '*':\n\t\t\te = 0\n\t\t\twhile i - e - 1>= 0 and j - e - 1>= 0 and i + e + 1 < n and j + e + 1< m and pole[i - e - 1][j] == '*' and pole[i][j - e - 1] == '*' and pole[i + e + 1][j] == '*' and pole[i][j + e + 1] == '*':\n\t\t\t\te = e + 1\n\t\t\t\tmetka[i][j] = 0\n\t\t\t\tmetka[i - e][j] = 0\n\t\t\t\tmetka[i][j - e] = 0\n\t\t\t\tmetka[i + e][j] = 0\n\t\t\t\tmetka[i][j + e] = 0\n\t\t\tif e != 0:\n\t\t\t\tk = k + 1\n\t\t\t\tans.append((i + 1,j + 1, e))\nflag = True\nfor i in range(n):\n\tif 1 in metka[i]:\n\t\tflag = False\n\t\tbreak\nif not flag:\n\tprint(-1)\nelse:\n\tprint(k)\n\tfor i in range(k):\n\t\tprint(ans[i][0], ans[i][1], ans[i][2], end='\\n')\n", "n, m = map(int,input().split())\ntable = [[0]*(m+2)]\nfor i in range(n):\n\ttable.append([0])\n\ts = input()\n\tfor j in range(m):\n\t\ttable[i+1].append(2 if s[j]=='*' else 0)\n\ttable[i+1].append(0)\ntable.append([0]*(m+2))\ndx = [-1, 0, 1, 0]\ndy = [0, 1, 0, -1]\nanswer = []\nfor i in range(1, n+1):\n\tfor j in range(1, m+1):\n\t\tif table[i][j] == 0:\n\t\t\tcontinue\n\t\table = True\n\t\tsize = 0\n\t\twhile able:\n\t\t\tsize += 1\n\t\t\tfor k in range(4):\n\t\t\t\tif table[i + dx[k]*size][j + dy[k]*size] == 0:\n\t\t\t\t\table = False\n\t\tsize -= 1\n\t\tif size > 0:\n\t\t\ttable[i][j] = 1\n\t\t\tfor k in range(1, size+1):\n\t\t\t\tfor q in range(4):\n\t\t\t\t\ttable[i + dx[q]*k][j + dy[q]*k] = 1\n\t\t\tanswer.append([i, j, size])\nOk = True\nfor i in range(1, n+1):\n\tfor j in range(1, m+1):\n\t\tif table[i][j] == 2:\n\t\t\tOk = False\nif not Ok:\n\tprint(-1)\nelse:\n\tprint(len(answer))\n\tfor i in answer:\n\t\tprint(*i)\n", "n, m = list(map(int, input().split()))\nused = [[True] * m for i in range(n)]\nPole = [0] * n\nM = []\nfor i in range(n):\n\tPole[i] = list(input())\nfor i in range(n):\n\tfor g in range(m):\n\t\tif Pole[i][g] == '*':\n\t\t\tk = 0\n\t\t\twhile i - k - 1 >= 0 and i + k + 1 < n and g - k - 1 >= 0 and g + k + 1 < m:\n\t\t\t\tif Pole[i - k - 1][g] == '*' and Pole[i + k + 1][g] == '*' and Pole[i][g - k - 1] == '*' and Pole[i][g + k + 1] == '*':\n\t\t\t\t\tused[i - k - 1][g] = False\n\t\t\t\t\tused[i + k + 1][g] = False\n\t\t\t\t\tused[i][g - k - 1] = False\n\t\t\t\t\tused[i][g + k + 1] = False\n\t\t\t\t\tk += 1\n\t\t\t\t\tcontinue\n\t\t\t\tbreak\n\t\t\tif k != 0:\n\t\t\t\tused[i][g] = False\n\t\t\t\tM.append([i + 1, g + 1, k])\nfor i in range(n):\n\tfor g in range(m):\n\t\tif Pole[i][g] == '*':\n\t\t\tif used[i][g]:\n\t\t\t\tprint(-1)\n\t\t\t\tbreak\n\telse:\n\t\tcontinue\n\tbreak\nelse:\n\tprint(len(M))\n\tfor i in range(len(M)):\n\t\tprint(*M[i])\n\t\t\t\t\n\t\t\t\t\n", "n, m = map(int, input().split())\nnum = []\nused = []\nfor i in range(n):\n\tnum.append(input())\n\tused.append([False] * m)\nans = []\nfor i in range(1, n - 1):\n\tfor j in range(1, m - 1):\n\t\tif num[i][j] == '*':\n\t\t\td1 = 0\n\t\t\td2 = 0\n\t\t\td3 = 0\n\t\t\td4 = 0\n\t\t\tfor x in range(j + 1, m):\n\t\t\t\tif num[i][x] == '.':\n\t\t\t\t\td1 = x - j - 1\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\td1 = m - j - 1\n\t\t\tfor x in range(j - 1, -1, -1):\n\t\t\t\tif num[i][x] == '.':\n\t\t\t\t\td2 = abs(j - x - 1)\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\td2 = j\n\t\t\tfor y in range(i + 1, n):\n\t\t\t\tif num[y][j] == '.':\n\t\t\t\t\td3 = y - i - 1\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\td3 = n - i - 1\n\t\t\tfor y in range(i - 1, -1, -1):\n\t\t\t\tif num[y][j] == '.':\n\t\t\t\t\td4 = abs(i - y - 1)\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\td4 = i\n\t\t\tdist = min(d1, d2, d3, d4)\n\t\t\tif dist != 0:\n\t\t\t\tans.append([i + 1, j + 1, dist])\n\t\t\t\tfor x in range(j - dist, j + dist + 1):\n\t\t\t\t\tused[i][x] = True\n\t\t\t\tfor y in range(i - dist, i + dist + 1):\n\t\t\t\t\tused[y][j] = True\nfl = True\nfor i in range(n):\n\tfor j in range(m):\n\t\tif num[i][j] == '*' and not used[i][j]:\n\t\t\tfl = False\nif not fl:\n\tprint(-1)\nelse:\n\tprint(len(ans))\n\tfor i in range(len(ans)):\n\t\tprint(*ans[i])\n", "n, m = [int(i) for i in input().split()]\nstars = []\ndirectionx = [0, -1, 0, 1]\ndirectiony = [1, 0, -1, 0]\nfor i in range(n):\n\tstars.append(list(input()))\n\ns = 0\nf = [[False] * m for i in range(n)]\nfor i in range(n):\n\tfor j in range(m):\n\t\tif stars[i][j] == \"*\":\n\t\t\ts += 1\n\nanslist = []\nans = 0\nfor i in range(1, n - 1):\n\tfor j in range(1, m - 1):\n\t\tif (stars[i][j] == \"*\") and (stars[i][j - 1] == \"*\") and (stars[i - 1][j] == \"*\") and (stars[i][j + 1] == \"*\") and (stars[i + 1][j] == \"*\"):\n\t\t\twkf = True\n\t\t\tcount = 0\n\t\t\twhile wkf:\n\t\t\t\tfor k in range(4):\n\t\t\t\t\tf[i + directionx[k] * count][j + directiony[k] * count] = True\n\t\t\t\tcount += 1\n\t\t\t\tfor k in range(4):\n\t\t\t\t\tif i + directionx[k] * count >= n:\n\t\t\t\t\t\twkf = False\n\t\t\t\t\t\tbreak\n\t\t\t\t\tif j + directiony[k] * count >= m:\n\t\t\t\t\t\twkf = False\n\t\t\t\t\t\tbreak\n\t\t\t\t\tif i + directionx[k] * count < 0:\n\t\t\t\t\t\twkf = False\n\t\t\t\t\t\tbreak\n\t\t\t\t\tif j + directiony[k] * count < 0:\n\t\t\t\t\t\twkf = False\n\t\t\t\t\t\tbreak\n\t\t\t\t\tif stars[i + directionx[k] * count][j + directiony[k] * count] != \"*\":\n\t\t\t\t\t\twkf = False\n\t\t\t\t\t\tbreak\n\t\t\tanslist.append([i + 1, j + 1, count - 1])\n\t\t\tans += 1\nif sum([sum(f[i]) for i in range(n)]) == s:\n\tprint(ans)\n\tfor i in range(ans):\n\t\tfor j in anslist[i]:\n\t\t\tprint(j, end = \" \")\n\t\tprint()\nelse:\n\tprint(\"-1\")\n\n\n\n", "n, m = list(map(int, input().split()))\narr = [input() for i in range(n)]\ns1 = set()\ns2 = set()\nres = list()\nfor i in range(n):\n\tfor j in range(m):\n\t\tif arr[i][j] == '*':\n\t\t\ts1.add((i, j))\n\t\t\tl = 1\n\t\t\twhile True:\n\t\t\t\tif i - l >= 0 and i + l < n and j - l >= 0 and j + l < m:\n\t\t\t\t\tif arr[i - l][j] == arr[i + l][j] == arr[i][j - l] == arr[i][j + l] == '*':\n\t\t\t\t\t\ts2 |= {(i - l, j), (i + l, j), (i, j - l), (i, j + l)}\n\t\t\t\t\t\tl += 1\n\t\t\t\t\telse:\n\t\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tl -= 1\n\t\t\tif l > 0:\n\t\t\t\ts2.add((i, j))\n\t\t\t\tres.append([i + 1, j + 1, l])\nif len(s1 - s2) > 0:\n\tprint(-1)\nelse:\n\tprint(len(res))\n\tfor x in res:\n\t\tprint(*x)\n", "n, m  = list(map(int, input().split()))\npole = []\nunfitted = []\n\ndef star_fits(x,y,r):\n\n\tif x-r >=0 and x+r<m and y-r>=0 and y+r <n:\n\t\tres = True\n\t\tfor k in range(x - r, x + r + 1):\n\t\t\tif pole[y][k] != '*':\n\t\t\t\tres = False\n\t\tfor k in range(y - r, y + r + 1):\n\t\t\tif pole[k][x] != '*':\n\t\t\t\tres = False\n\telse:\n\t\treturn False\n\treturn res\n\ndef get_max_r(x,y):\n\tr=1\n\twhile (x-r >= 0) and (x+r < m) and (y-r >= 0) and (y+r < n):\n\t\tif pole[y][x+r] == '*' and  pole[y][x-r] == '*' and pole[y+r][x] == '*' and  pole[y-r][x] == '*':\n\t\t\tr+=1\n\t\telse:\n\t\t\treturn r-1\n\treturn r-1\n\n\ndef mark_star(x,y,r):\n\tif x-r >= 0 and x+r < m and y-r >= 0 and y+r <n:\n\t\tfor k in range(x - r, x + r + 1):\n\t\t\tunfitted[y][k] = False\n\t\tfor k in range(y - r, y + r + 1):\n\t\t\tunfitted[k][x] = False\n\n\nfor i in range(n):\n\tpole.append(input().strip()[:m])\n\tunfitted.append([True]*m)\n\nfin_res  =[]\nfor x in range(m):\n\tfor y in range(n):\n\t\tif pole[y][x] == '*':\n\t\t\tr = get_max_r(x,y)\n\t\t\tif r>0:\n\t\t\t\tmark_star(x,y,r)\n\t\t\t\t# print('found atar at', x,y,r)\n\t\t\t\tfin_res.append((y+1,x+1,r))\n\n\nfor x in range(m):\n\tfor y in range(n):\n\t\tif pole[y][x] == '*' and unfitted[y][x]:\n\t\t\tprint(-1)\n\t\t\treturn\n\nprint(len(fin_res))\nfor t in fin_res:\n\tprint(*t)\n\n\n\n\n\n", "# import logging\n\n\n# fmt = r'%(levelname)s - %(name)s (line:%(lineno)s) - %(message)s'\n# formatter = logging.Formatter(fmt)\n\n# ch = logging.StreamHandler()\n# ch.setLevel(logging.ERROR)\n# ch.setFormatter(formatter)\n\n# logger = logging.getLogger()\n# logger.setLevel(logging.ERROR)\n# logger.addHandler(ch)\n\n\nclass StarCell:\n\tdef __init__(self, row, col, top=None, bot=None, left=None, right=None):\n\t\tself.row = row\n\t\tself.col = col\n\n\t\tself.covered = False\n\n\t\tself.top = top\n\t\tself.bot = bot\n\t\tself.left = left\n\t\tself.right = right\n\n\t\tself._size = None\n\t\tself._size_top = None\n\t\tself._size_bot = None\n\t\tself._size_left = None\n\t\tself._size_right = None\n\t\n\n\tdef set_adjacents(self, cells):\n\t\trow, col = self.row, self.col\n\t\tself.top = cells.get((row - 1, col), None)\n\t\tself.bot = cells.get((row + 1, col), None)\n\t\tself.left = cells.get((row, col - 1), None)\n\t\tself.right = cells.get((row, col + 1), None)\n\n\tdef set_covered(self):\n\t\tsize = self.size\n\t\tctop = self\n\t\tcbot = self\n\t\tcleft = self\n\t\tcright = self\n\t\tfor _ in range(size):\n\t\t\tctop = ctop.top\n\t\t\tcbot = cbot.bot\n\t\t\tcleft = cleft.left\n\t\t\tcright = cright.right\n\t\t\tctop.covered = True\n\t\t\tcbot.covered = True\n\t\t\tcleft.covered = True\n\t\t\tcright.covered = True\n\n\t@property\n\tdef size_top(self):\n\t\tif not self.top:\n\t\t\treturn 0\n\t\tif not self._size_top:\n\t\t\t# Update cache\n\t\t\tself._size_top = 1 + self.top.size_top\n\t\treturn self._size_top\n\t\n\t@property\n\tdef size_bot(self):\n\t\tif not self.bot:\n\t\t\treturn 0\n\t\tif not self._size_bot:\n\t\t\tself._size_bot = 1 + self.bot.size_bot\n\t\treturn self._size_bot\n\t\n\t@property\n\tdef size_left(self):\n\t\tif not self.left:\n\t\t\treturn 0\n\t\tif not self._size_left:\n\t\t\tself._size_left = 1 + self.left.size_left\n\t\treturn self._size_left\n\t\n\t@property\n\tdef size_right(self):\n\t\tif not self.right:\n\t\t\treturn 0\n\t\tif not self._size_right:\n\t\t\tself._size_right = 1 + self.right.size_right\n\t\treturn self._size_right\n\t\n\t@property\n\tdef size(self):\n\t\tif not self._size:\n\t\t\tself._size = min(\n\t\t\t\t[self.size_top,\n\t\t\t\tself.size_bot,\n\t\t\t\tself.size_left,\n\t\t\t\tself.size_right])\n\t\treturn self._size\n\t\n\tdef __repr__(self):\n\t\tif self.size > 0:\n\t\t\treturn 'Star of max size {}'.format(self.size)\n\t\treturn 'Cell covered? {}'.format(self.covered)\n\n\ndef solve(grid):\n\tn, m = len(grid), len(grid[0])\n\t\n\tcells = {}\n\tfor row in range(n):\n\t\tfor col in range(m):\n\t\t\tif grid[row][col] == '.':\n\t\t\t\tcontinue\n\t\t\tcells[(row, col)] = StarCell(row, col)\n\t\n\tfor key, val in list(cells.items()):\n\t\tval.set_adjacents(cells)\n\n\tfor key, val in list(cells.items()):\n\t\tval.set_covered()\n\n\t# for key, val in cells.items():\n\t#     print(key, val)\n\n\n\tans = []\n\tfor key, val in list(cells.items()):\n\t\tif val.size == 0 and not val.covered:\n\t\t\treturn None\n\t\tif val.size > 0:\n\t\t\tans.append([val.row + 1, val.col + 1, val.size])  # Rebase index 1\n\treturn ans\n\n\ndef main():\n\tn, m = list(map(int, input().strip().split()))\n\tgrid = [list(input().strip()) for _ in range(n)]\n\n\tresults = solve(grid)\n\tif results is None:\n\t\tprint('-1')\n\telse:\n\t\tprint(len(results))\n\t\tfor result in results:\n\t\t\tprint(*result)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n, m = input().split()\nn = int(n)\nm = int(m)\nlst = [[0]*m for i in range(n)]\nrec = [[0]*m for i in range(n)]\nfin = [[0]*m for i in range(n)]\nans = 0\ncnt = 0\nfor i in range(n):\n\ttmp = input()\n\tfor j, x in enumerate(tmp):\n\t\tif x == '*':\n\t\t\tlst[i][j] = 1\nfor i in range(n):\n\tfor j in range(m):\n\t\tif lst[i][j] == 1 and i > 0 and j > 0 and i < n-1 and j < m-1:\n\t\t\ttmp = min(i, j, n-1-i, m-1-j)\n\t\t\tfor k in range(tmp, 0, -1):\n\t\t\t\tflag = True\n\t\t\t\tfor x in range(1, k+1):\n\t\t\t\t\tif lst[i][j-x] == 0 or lst[i][j+x] == 0 or lst[i-x][j] == 0 or lst[i+x][j] == 0:\n\t\t\t\t\t\tflag = False\n\t\t\t\tif flag:\n\t\t\t\t\tfin[i][j] = k\n\t\t\t\t\tbreak\nfor i in range(n):\n\tfor j in range(m):\n\t\tif fin[i][j] > 0:\n\t\t\ttmp = fin[i][j]\n\t\t\tans += 1\n\t\t\tcnt += 1 + tmp * 4\n\t\t\trec[i][j] = 1\n\t\t\tfor x in range(tmp+1):\n\t\t\t\trec[i][j+x] = 1\n\t\t\t\trec[i][j-x] = 1\n\t\t\t\trec[i-x][j] = 1\n\t\t\t\trec[i+x][j] = 1\nif rec != lst:\n\tprint(-1)\nelse:\n\tprint(ans)\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif fin[i][j] > 0:\n\t\t\t\tprint(i+1, j+1, fin[i][j])\n", "n, m = map(int, input().split())\nT = [[] for i in range(n)]\nfor i in range(n):\n\ta = list(input())\n\tT[i] = a\n\nS = [[0] * m for i in range(n)]\nfor i in range(n):\n\tfor j in range(m):\n\t\tif T[i][j] == \"*\":\n\t\t\tS[i][j] = 1\n\nrec = []\nfor i in range(n):\n\tfor j in range(m):\n\t\tif 1 <= i < n - 1 and 1 <= j < m - 1 and T[i][j] == \"*\" and T[i - 1][j] == \"*\" and T[i][j - 1] == \"*\" and T[i + 1][j] == \"*\" and T[i][j + 1] == \"*\":\n\t\t\tS[i][j] = 0\n\t\t\tS[i - 1][j] = 0\n\t\t\tS[i][j - 1] = 0\n\t\t\tS[i + 1][j] = 0\n\t\t\tS[i][j + 1] = 0\n\t\t\tk = 2\n\t\t\twhile True:\n\t\t\t\tif not (0 <= i - k and i + k < n and 0 <= j - k and j + k < m):\n\t\t\t\t\tbreak\n\t\t\t\tif T[i - k][j] == \"*\" and T[i][j - k] == \"*\" and T[i + k][j] == \"*\" and T[i][j + k] == \"*\":\n\t\t\t\t\tS[i - k][j] = 0\n\t\t\t\t\tS[i][j - k] = 0\n\t\t\t\t\tS[i + k][j] = 0\n\t\t\t\t\tS[i][j + k] = 0\n\t\t\t\t\tk += 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\trec.append((i + 1, j + 1, k - 1))\n\nq = 0\nfor i in range(n):\n\tfor j in range(m):\n\t\tq += S[i][j]\n\nif q == 0:\n\tprint(len(rec))\n\tfor i in range(len(rec)):\n\t\tprint(\"{} {} {}\".format(rec[i][0], rec[i][1], rec[i][2]))\nelse:\n\tprint(-1)\n", "def all_true(stars, n, m):\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif not stars[i][j]:\n\t\t\t\treturn False\n\treturn True\n\ndef get_biggest_star(ar, i, j):\n\tans = 0\n\tcur = i - 1\n\twhile cur >= 0 and ar[cur][j] == '*':\n\t\tans += 1\n\t\tcur -= 1\n\n\tlength = 0\n\tcur = i + 1\n\twhile cur < n and ar[cur][j] == '*':\n\t\tlength += 1\n\t\tcur += 1\n\tans = min(ans, length)\n\n\tlength = 0\n\tcur = j - 1\n\twhile cur >= 0 and ar[i][cur] == '*':\n\t\tlength += 1\n\t\tcur -= 1\n\tans = min(ans, length)\n\n\tlength = 0\n\tcur = j + 1\n\twhile cur < m and ar[i][cur] == '*':\n\t\tlength += 1\n\t\tcur += 1\n\tans = min(ans, length)\n\n\treturn ans\n\nn, m = list(map(int, input().split()))\n\nar = []\n\nstars = []\n\nfor i in range(n):\n\tcur = input()\n\tst = []\n\tfor i in range(m):\n\t\tif cur[i] == '.': st.append(True)\n\t\telse: st.append(False)\n\tstars.append(st)\n\tar.append(cur)\n\nfinalAns = []\nans = 0\nfor i in range(1, n - 1):\n\tfor j in range(1, m - 1):\n\t\tif ar[i][j] == '.': continue\n\t\tlength = get_biggest_star(ar, i, j)\n\t\tif length > 0:\n\t\t\tans += 1\n\t\t\tfinalAns.append([i+1, j+1, length])\n\t\t\tstars[i][j] = True\n\t\t\ttemp = 0\n\t\t\twhile temp < length:\n\t\t\t\ttemp += 1\n\t\t\t\tstars[i-temp][j] = True\n\t\t\ttemp = 0\n\t\t\twhile temp < length:\n\t\t\t\ttemp += 1\n\t\t\t\tstars[i+temp][j] = True\n\t\t\ttemp = 0\n\t\t\twhile temp < length:\n\t\t\t\ttemp += 1\n\t\t\t\tstars[i][j-temp] = True\n\t\t\ttemp = 0\n\t\t\twhile temp < length:\n\t\t\t\ttemp += 1\n\t\t\t\tstars[i][j+temp] = True\n\n##print(*stars, sep = '\\n')\n\nif all_true(stars, n, m):\n\tprint(ans)\n\tfor i in finalAns:\n\t\tprint(*i)\nelse:\n\tprint(-1)\n\t\t\t\n", "def main():\n\tinp = []\n\tn, m = list(map(int, input().split()))\n\tremaining = 0\n\tfor _ in range(n):\n\t\tcur_inp = input()\n\t\tinp.append(cur_inp)\n\t\tremaining += cur_inp.count(\"*\")\n\tremaining2 = [[True]*m for _ in range(n)]\n\tres = []\n\tfor x in range(1, n-1):\n\t\tfor y in range(1, m-1):\n\t\t\tif inp[x][y] == \"*\":\n\t\t\t\tlast_size = None\n\t\t\t\tfor size in range(1, min(x+1, n-x, y+1, m-y)):\n\t\t\t\t\tif inp[x-size][y] == inp[x+size][y] == inp[x][y-size] == inp[x][y+size] == \"*\":\n\t\t\t\t\t\tfor x1, y1 in (x-size, y), (x+size, y), (x, y-size), (x, y+size):\n\t\t\t\t\t\t\tif remaining2[x1][y1]:\n\t\t\t\t\t\t\t\tremaining -= 1\n\t\t\t\t\t\t\t\tremaining2[x1][y1] = False\n\t\t\t\t\t\tlast_size = size\n\t\t\t\t\telse:\n\t\t\t\t\t\tbreak\n\t\t\t\tif last_size is not None:\n\t\t\t\t\tif remaining2[x][y]:\n\t\t\t\t\t\tremaining -= 1\n\t\t\t\t\t\tremaining2[x][y] = False\n\t\t\t\t\tres.append((x+1, y+1, last_size))\n\tif remaining:\n\t\tprint('-1')\n\telse:\n\t\tprint(len(res))\n\t\tfor x in res:\n\t\t\tprint(*x)\nmain()\n", "\nimport sys\nimport math\nimport os.path\nfrom copy import deepcopy\nfrom functools import reduce\nfrom pprint import pprint\n\nfrom collections import Counter, ChainMap, defaultdict\nfrom itertools import cycle, chain\nfrom queue import Queue, PriorityQueue, deque\nfrom heapq import heappush, heappop, heappushpop, heapify, heapreplace, nlargest, nsmallest\nimport bisect\n\nfrom statistics import mean, mode, median, median_low, median_high\n\n\n# CONFIG\nsys.setrecursionlimit(10**9)\n\n# LOG \ndef log(*args, **kwargs):\n\tprint(*args, file=sys.stderr, **kwargs)\n\n\n# INPUT\ndef ni():\n\treturn list(map(int, input().split()))\n\n\ndef nio(offset):\n\treturn [int(x) + offset for x in input().split()]\n\n\ndef nia():\n\treturn list(map(int, input().split()))\n\n\n# CONVERT\ndef toString(aList, sep=\" \"):\n\treturn sep.join(str(x) for x in aList)\n\n\ndef toMapInvertIndex(aList):\n\treturn {k: v for v, k in enumerate(aList)}\n\n\n# SORT\ndef sortId(arr):\n\treturn sorted(list(range(len(arr))), key=lambda k: arr[k])\n\n\n# MAIN\n\nn,m = ni()\n\ns = [0]*n\n\nfor i in range(n):\n\tss = input()\n\ts[i] = ss\n\ndd = [['.' for j in range(m)] for i in range(n)]\n\n# pprint(s)\n# pprint(dd)\n\nres = deque()\nfor i in range(n):\n\tfor j in range(m):\n\t\tif s[i][j] == '*':            \n\t\t\t# print(i,j)\n\t\t\tk = 1\n\t\t\twhile 0 <= i - k < n and 0 <= i + k < n and 0 <= j - k < m and 0 <= j + k < m and s[i-k][j] == \"*\" and s[i+k][j] == \"*\" and s[i][j-k] == \"*\" and s[i][j+k] == \"*\":\n\t\t\t\tdd[i-k][j] = \"*\"\n\t\t\t\tdd[i+k][j] = \"*\"\n\t\t\t\tdd[i][j-k] = \"*\"\n\t\t\t\tdd[i][j+k] = \"*\"\n\t\t\t\tif k == 1:\n\t\t\t\t\tdd[i][j] = \"*\"\n\t\t\t\t\tres.append((i+1, j+1, k))\n\t\t\t\telse:\n\t\t\t\t\tres[-1] = (i+1, j+1, k)\n\t\t\t\t# print(i,j,k)\n\t\t\t\tk+=1\n\n# pprint(dd)\n\ndef check():\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif s[i][j] != dd[i][j]:\n\t\t\t\treturn False\n\treturn True\n\nif check():\n\tlres = len(res)\n\tprint(lres)\n\tif (lres > 0):\n\t\tprint(\"\\n\".join((\" \".join(str(y) for y in x)) for x in res))\nelse:\n\tprint(-1)\n", "N,M=list(map(int,input().split()))\nL=[]\nfor a in range(N):\n\tL.append(list(input()))\nANS=[]\nfor i in range(N):\n\tfor j in range(M):\n\t\tif(L[i][j]=='*' or L[i][j]=='-'):\n\t\t\tk=1\n\t\t\tl=min(i,j,(N-1-i),(M-1-j))\n\t\t\twhile(k<=l):\n\t\t\t\tif((L[i+k][j]=='*' or L[i+k][j]=='-') and (L[i][j+k]=='*' or L[i][j+k]=='-') and (L[i-k][j]=='*' or L[i-k][j]=='-') and (L[i][j-k]=='*' or L[i][j-k]=='-')):\n\t\t\t\t\tL[i][j]='-'\n\t\t\t\t\tL[i+k][j]='-'\n\t\t\t\t\tL[i-k][j]='-'\n\t\t\t\t\tL[i][j+k]='-'\n\t\t\t\t\tL[i][j-k]='-'\n\t\t\t\t\tk+=1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tif(k>1):\n\t\t\t\tANS.append((i+1,j+1,k-1))\nf=True\nfor a in L:\n\tif('*' in a):\n\t\tf=False\n\t\tbreak\nif(f):\n\tprint(len(ANS))\n\tfor a in ANS:\n\t\tprint(' '.join(map(str,a)))\nelse:\n\tprint(-1)\n", "n,m=map(int,input().split())\ng=[[*input()] for _ in range(n)]\nc=[[0 for _ in range(m)] for _ in range(n)]\nfor i in range(n):\n\tv=0\n\tfor j in range(m):\n\t\tv=(v+1)*(g[i][j]=='*')\n\t\tc[i][j]=v\n\tv=0\n\tfor j in range(m-1,-1,-1):\n\t\tv=(v+1)*(g[i][j]=='*')\n\t\tc[i][j]=min(c[i][j],v)\nfor j in range(m):\n\tv=0\n\tfor i in range(n):\n\t\tv=(v+1)*(g[i][j]=='*')\n\t\tc[i][j]=min(c[i][j],v)\n\tv=0\n\tfor i in range(n-1,-1,-1):\n\t\tv=(v+1)*(g[i][j]=='*')\n\t\tc[i][j]=min(c[i][j],v)\nfor i in range(n):\n\tfor j in range(m):\n\t\tif c[i][j]==1: c[i][j]=0\nfor i in range(n):\n\tv=0\n\tfor j in range(m):\n\t\tv=max(v-1,c[i][j])\n\t\tif v:g[i][j]='.'\n\tv=0\n\tfor j in range(m-1,-1,-1):\n\t\tv=max(v-1,c[i][j])\n\t\tif v:g[i][j]='.'\nfor j in range(m):\n\tv=0\n\tfor i in range(n):\n\t\tv=max(v-1,c[i][j])\n\t\tif v:g[i][j]='.'\n\tfor i in range(n-1,-1,-1):\n\t\tv=max(v-1,c[i][j])\n\t\tif v:g[i][j]='.'\nif all(g[i][j]=='.' for i in range(n) for j in range(m)):\n\tr=[(i+1,j+1,c[i][j]-1) for i in range(n) for j in range(m) if c[i][j]]\n\tprint(len(r))\n\tfor t in r: print(*t)\nelse:\n\tprint(-1)\n", "import math as ma\nfrom decimal import Decimal as dec\n\n\ndef li():\n\treturn list(map(int , input().split()))\n\n\n# https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/\ndef modInverse(a , m):\n\tm0 = m\n\ty = 0\n\tx = 1\n\tif (m == 1):\n\t\treturn 0\n\twhile (a > 1):\n\t\tq = a // m\n\t\tt = m\n\t\tm = a % m\n\t\ta = t\n\t\tt = y\n\t\ty = x - q * y\n\t\tx = t\n\tif (x < 0):\n\t\tx = x + m0\n\treturn x\n\n\nm = 10000019\n\n\ndef binomialCoefficient(n , k):\n\tif (k > n - k):\n\t\tk = (n - k) % m\n\tres = 1\n\tfor i in range(k):\n\t\tres = (res * (n - i)) % m\n\t\tres = (res * modInverse((i + 1) , m)) % m\n\treturn res\n\n\ndef num():\n\treturn map(int , input().split())\n\n\ndef nu():\n\treturn int(input())\n\n\ndef find_gcd(x , y):\n\twhile (y):\n\t\tx , y = y , x % y\n\treturn x\n\n\nn , m = num()\na = [0] * n\nb = [0] * n\nfor i in range(n):\n\tx = input()\n\ta[i] = [0] * m\n\tb[i] = [0] * m\n\tfor j in range(m):\n\t\tif (x[j] == \"*\"):\n\t\t\ta[i][j] = 1\npp=[]\nfor i in range(n):\n\tfor j in range(m):\n\t\tu = 0\n\t\td = 0\n\t\tl = 0\n\t\tr = 0\n\t\tif (a[i][j] == 1):\n\t\t\tfor k in range(i - 1 , -1 , -1):\n\t\t\t\tif (a[k][j] == 1):\n\t\t\t\t\tu += 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tfor k in range(i + 1 , n):\n\t\t\t\tif (a[k][j] == 1):\n\t\t\t\t\td += 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tfor k in range(j - 1 , -1 , -1):\n\t\t\t\tif (a[i][k] == 1):\n\t\t\t\t\tl += 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tfor k in range(j + 1 , m):\n\t\t\t\tif (a[i][k] == 1):\n\t\t\t\t\tr += 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tzz = min(u , d , l , r)\n\t\t\t#print(i,j,zz)\n\t\t\tif(zz==0):\n\t\t\t\tcontinue\n\t\t\tpp.append((i+1,j+1,zz))\n\t\t\tb[i][j] = 1\n\t\t\tc=0\n\t\t\tfor k in range(i - 1 , -1 , -1):\n\t\t\t\tb[k][j]=1\n\t\t\t\tc+=1\n\t\t\t\tif(c==zz):\n\t\t\t\t\tbreak\n\t\t\tc=0\n\t\t\tfor k in range(i + 1 , n):\n\t\t\t\tb[k][j] = 1\n\t\t\t\tc += 1\n\t\t\t\tif (c == zz):\n\t\t\t\t\tbreak\n\t\t\tc=0\n\t\t\tfor k in range(j - 1 , -1 , -1):\n\t\t\t\tb[i][k]=1\n\t\t\t\tc += 1\n\t\t\t\tif (c == zz):\n\t\t\t\t\tbreak\n\t\t\tc=0\n\t\t\tfor k in range(j + 1 , m):\n\t\t\t\tb[i][k] = 1\n\t\t\t\tc+=1\n\t\t\t\tif(c==zz):\n\t\t\t\t\tbreak\nfl=True\nfor i in range(n):\n\tfor j in range(m):\n\t\tif(a[i][j]==1 and b[i][j]==0):\n\t\t\tfl=False\n\t\t\tbreak\nif(fl):\n\tprint(len(pp))\n\tfor i in range(len(pp)):\n\t\tprint(pp[i][0],pp[i][1],pp[i][2])\nelse:\n\tprint(-1)\n", "def find_stars(h, w, matrix):\n\tmax_size = 0\n\tif matrix[h][w] == '.':\n\t\treturn max_size\n\n\tsize = 1\n\twhile True:\n\t\tfor next_h in range(h, h + size + 1):\n\t\t\tif next_h >= height or matrix[next_h][w] != '*':\n\t\t\t\treturn max_size\n\t\tfor next_h in range(h, h - size - 1, -1):\n\t\t\tif next_h < 0 or matrix[next_h][w] != '*':\n\t\t\t\treturn max_size\n\t\tfor next_w in range(w, w + size + 1):\n\t\t\tif next_w >= width or matrix[h][next_w] != '*':\n\t\t\t\treturn max_size\n\t\tfor next_w in range(w, w - size - 1, -1):\n\t\t\tif next_w < 0 or matrix[h][next_w] != '*':\n\t\t\t\treturn max_size\n\n\t\tmax_size = size\n\t\tsize += 1\n\n\nheight, width = list(map(int, input().split()))\nmatrix = []\nfor h in range(height):\n\trow = input()\n\tmatrix.append(row)\n\nresult_matrix = [['.'] * width for h in range(height)]\nresult_stars = []\nfor h in range(height):\n\tfor w in range(width):\n\t\tfound_max_size = find_stars(h, w, matrix)\n\t\tif found_max_size == 0:\n\t\t\tcontinue\n\n\t\tfor next_h in range(h, h + found_max_size + 1):\n\t\t\tresult_matrix[next_h][w] = '*'\n\t\tfor next_h in range(h, h - found_max_size - 1, -1):\n\t\t\tresult_matrix[next_h][w] = '*'\n\t\tfor next_w in range(w, w + found_max_size + 1):\n\t\t\tresult_matrix[h][next_w] = '*'\n\t\tfor next_w in range(w, w - found_max_size - 1, -1):\n\t\t\tresult_matrix[h][next_w] = '*'\n\n\t\tresult_stars.append(str(h + 1) + ' ' + str(w + 1) + ' ' + str(found_max_size))\n\nis_equal = True\nfor h in range(height):\n\tfor w in range(width):\n\t\tif matrix[h][w] != result_matrix[h][w]:\n\t\t\tis_equal = False\n\nif is_equal:\n\tprint(len(result_stars))\n\tfor star in result_stars:\n\t\tprint(star)\nelse:\n\tprint(-1)\n", "n, m = map(int, input().split())\nG = []\nL = [[0 for x in range(m + 2)] for x in range(n + 2)]\nR = [[0 for x in range(m + 2)] for x in range(n + 2)]\nU = [[0 for x in range(m + 2)] for x in range(n + 2)]\nD = [[0 for x in range(m + 2)] for x in range(n + 2)]\n\nfor i in range(n):\n\ts = input()\n\tG.append(s)\n\t\nfor i in range(n):\n\t\n\tnm = 0\n\tfor j in range(m):\n\t\tif(G[i][j] == '*'):\n\t\t\tnm += 1\n\t\telse:\n\t\t\tnm = 0\n\t\tL[i][j] = nm\n\t\t\n\tnm = 0\n\tfor j in range(m - 1, -1, -1):\n\t\tif(G[i][j] == '*'):\n\t\t\tnm += 1\n\t\telse:\n\t\t\tnm = 0\n\t\tR[i][j] = nm\n\t\t\nfor j in range(m):\n\t\n\tnm = 0\n\tfor i in range(n):\n\t\tif(G[i][j] == '*'):\n\t\t\tnm += 1\n\t\telse:\n\t\t\tnm = 0\n\t\tU[i][j] = nm\n\t\n\tnm = 0\n\tfor i in range(n - 1, -1, -1):\n\t\tif(G[i][j] == '*'):\n\t\t\tnm += 1\n\t\telse:\n\t\t\tnm = 0\n\t\tD[i][j] = nm\n\ncol = [[0 for x in range(m + 2)] for x in range(n + 2)]\nrow = [[0 for x in range(m + 2)] for x in range(n + 2)]\nANS = []\n\nfor i in range(n):\n\tfor j in range(m):\n\t\tif(G[i][j] == '.'):\n\t\t\tcontinue\n\t\tans = min(U[i][j], L[i][j], R[i][j], D[i][j]) - 1\n\t\tif(ans <= 0):\n\t\t\tcontinue\n\t\tANS.append([i + 1, j + 1, ans])\n\t\trow[i][j - ans] += 1\n\t\trow[i][j + ans + 1] -=1\n\t\tcol[i - ans][j] += 1\n\t\tcol[i + ans + 1][j] -= 1\n\t\t\n\t\t\nfor i in range(n):\n\tfor j in range(1, m):\n\t\trow[i][j] += row[i][j - 1]\n\nfor j in range(m):\n\tfor i in range(1, n):\n\t\tcol[i][j] += col[i - 1][j]\n\t\t\nokay = True\nfor i in range(n):\n\tfor j in range(m):\n\t\tif(G[i][j] == '*' and row[i][j] == 0 and col[i][j] == 0):\n\t\t\tokay = False\n\t\t\t\nif(okay):\n\tprint(len(ANS))\n\tfor x in ANS:\n\t\tprint(x[0], x[1], x[2])\nelse:\n\tprint(-1)\n", "n, m = map(int, input().split())\nsky = [0] * (n + 1)\nfor i in range(n):\n\tsky[i] = list(input()) + ['.']\nsky[n] = ['.'] * m\nused = [[False] * m for i in range(n)]\nans = []\nfor i in range(n):\n\tfor j in range(m):\n\t\tif sky[i][j] == '.':\n\t\t\tcontinue\n\t\tln = 1\n\t\twhile sky[i - ln][j] == '*' and sky[i + ln][j] == '*' and sky[i][j - ln] == '*' and sky[i][j + ln] == '*':\n\t\t\tused[i - ln][j] = used[i + ln][j] = used[i][j - ln] = used[i][j + ln] = True\n\t\t\tln += 1\n\t\tif ln > 1:\n\t\t\tused[i][j] = True\n\t\t\tans += [[i + 1, j + 1, ln - 1]]\nfor i in range(n):\n\tfor j in range(m):\n\t\tif sky[i][j] == '*' and not used[i][j]:\n\t\t\tprint(-1)\n\t\t\treturn\nprint(len(ans))\nfor i in range(len(ans)):\n\tprint(*ans[i])\n", "import sys\nn,m=list(map(int,input().split()))\ns=[input() for i in range(n)]\ndp=[[-1 for i in range(m)] for j in range(n)]\nans=[]\nfor i in range(1,n-1):\n\tfor j in range(1,m-1):\n\t\tif (s[i][j]=='*' and s[i+1][j]=='*' and s[i-1][j]=='*' and s[i][j-1]=='*' and s[i][j+1]=='*'):\n\t\t\tx=0\n\t\t\twhile i-x>-1 and x+i<n and j-x>-1 and x+j<m and s[i+x][j]=='*' and s[i-x][j]=='*' and s[i][j-x]=='*' and s[i][j+x]=='*':\n\t\t\t\tdp[i+x][j],dp[i-x][j],dp[i][j-x],dp[i][j+x]=1,1,1,1\n\t\t\t\tx+=1\n\t\t\tif x!=1:  ans.append([i+1,j+1,x-1])\n\t\t\telse:dp[i][j]=-1\nfor i in range(n):\n\tfor j in range(m):\n\t\tif s[i][j]=='*' and dp[i][j]==-1:\n\t\t\tprint(-1)\n\t\t\treturn\nprint(len(ans))\nfor i in ans:\n\tprint(*i)\n", "import sys\nn,m=list(map(int,input().split()))\ns=[input() for i in range(n)]\ndp=[[-1 for i in range(m)] for j in range(n)]\nans=[]\nfor i in range(1,n-1):\n\tfor j in range(1,m-1):\n\t\tif (s[i][j]=='*' and s[i+1][j]=='*' and s[i-1][j]=='*' and s[i][j-1]=='*' and s[i][j+1]=='*'):\n\t\t\tx=0\n\t\t\twhile i-x>-1 and x+i<n and j-x>-1 and x+j<m and s[i+x][j]=='*' and s[i-x][j]=='*' and s[i][j-x]=='*' and s[i][j+x]=='*':\n\t\t\t\tdp[i+x][j],dp[i-x][j],dp[i][j-x],dp[i][j+x]=1,1,1,1\n\t\t\t\tx+=1\n\t\t\tif x!=1:  ans.append([i+1,j+1,x-1])\n\t\t\telse:dp[i][j]=-1\nfor i in range(n):\n\tfor j in range(m):\n\t\tif s[i][j]=='*' and dp[i][j]==-1:\n\t\t\tprint(-1)\n\t\t\treturn\nprint(len(ans))\nfor i in ans:\n\tprint(*i)\n"], "id": "id5866"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5866", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 1], ["star", 1], ["is", 1], ["a", 1], ["figure", 1], ["of", 1], ["the", 1], ["following", 1], ["type", 1], ["an", 1], ["asterisk", 1], ["character", 1], ["in", 1], ["the", 1], ["center", 1], ["of", 1], ["the", 1], ["figure", 1], ["and", 1], ["four", 1], ["rays", 1], ["to", 1], ["the", 1], ["left", 1], ["right", 1], ["top", 1], ["bottom", 1], ["of", 1], ["the", 1], ["same", 1], ["positive", 1], ["length", 1], ["the", 1], ["size", 1], ["of", 1], ["a", 1], ["star", 1], ["is", 1], ["the", 1], ["length", 1], ["of", 1], ["its", 1], ["rays", 1], ["the", 1], ["size", 1], ["of", 1], ["a", 1], ["star", 1], ["must", 1], ["be", 1], ["a", 1], ["positive", 1], ["number", 1], ["i", 1], ["e", 1], ["rays", 1], ["of", 1], ["length", 1], ["0", 1], ["are", 1], ["not", 1], ["allowed", 1], ["let", 1], ["s", 1], ["consider", 0], ["empty", 0], ["cells", 0], ["are", 0], ["denoted", 0], ["by", 0], ["then", 0], ["the", 0], ["following", 0], ["figures", 0], ["are", 0], ["stars", 0], ["image", 0], ["the", 1], ["leftmost", 1], ["figure", 1], ["is", 1], ["a", 1], ["star", 1], ["of", 1], ["size", 1], ["1", 1], ["the", 1], ["middle", 1], ["figure", 1], ["is", 1], ["a", 1], ["star", 1], ["of", 1], ["size", 1], ["2", 1], ["and", 1], ["the", 1], ["rightmost", 1], ["figure", 1], ["is", 1], ["a", 1], ["star", 1], ["of", 1], ["size", 1], ["3", 1], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["rectangular", 1], ["grid", 1], ["of", 1], ["size", 1], ["n", 1], ["times", 1], ["m", 1], ["consisting", 1], ["only", 1], ["of", 1], ["asterisks", 1], ["and", 1], ["periods", 1], ["dots", 1], ["rows", 1], ["are", 1], ["numbered", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["columns", 1], ["are", 1], ["numbered", 1], ["from", 1], ["1", 1], ["to", 1], ["m", 1], ["your", 1], ["task", 1], ["is", 1], ["to", 1], ["draw", 1], ["this", 1], ["grid", 1], ["using", 1], ["any", 1], ["number", 1], ["of", 1], ["stars", 1], ["or", 1], ["find", 1], ["out", 1], ["that", 1], ["it", 1], ["is", 1], ["impossible", 1], ["stars", 1], ["can", 1], ["intersect", 1], ["overlap", 1], ["or", 1], ["even", 1], ["coincide", 1], ["with", 1], ["each", 1], ["other", 1], ["the", 1], ["number", 1], ["of", 1], ["stars", 1], ["in", 1], ["the", 1], ["output", 1], ["can", 1], ["t", 1], ["exceed", 1], ["n", 1], ["cdot", 1], ["m", 1], ["each", 1], ["star", 1], ["should", 1], ["be", 1], ["completely", 1], ["inside", 1], ["the", 1], ["grid", 1], ["you", 1], ["can", 1], ["use", 1], ["stars", 1], ["of", 1], ["same", 1], ["and", 1], ["arbitrary", 1], ["sizes", 1], ["in", 1], ["this", 1], ["problem", 1], ["you", 1], ["do", 1], ["not", 1], ["need", 1], ["to", 1], ["minimize", 1], ["the", 1], ["number", 1], ["of", 1], ["stars", 1], ["just", 1], ["find", 1], ["any", 1], ["way", 1], ["to", 0], ["draw", 0], ["the", 0], ["given", 0], ["grid", 0], ["with", 0], ["at", 0], ["most", 0], ["n", 0], ["cdot", 0], ["m", 0], ["stars", 0], ["input", 0], ["the", 4], ["first", 1], ["line", 1], ["of", 1], ["the", 1], ["input", 1], ["contains", 1], ["two", 1], ["integers", 1], ["n", 1], ["and", 1], ["m", 1], ["3", 1], ["le", 1], ["n", 1], ["m", 1], ["le", 1], ["100", 1], ["—", 1], ["the", 1], ["sizes", 1], ["of", 1], ["the", 1], ["given", 1], ["grid", 1], ["the", 1], ["next", 1], ["n", 1], ["lines", 1], ["contains", 1], ["m", 1], ["characters", 1], ["each", 1], ["the", 1], ["i", 1], ["th", 1], ["line", 1], ["describes", 1], ["the", 1], ["i", 1], ["th", 1], ["row", 1], ["of", 1], ["the", 0], ["grid", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["grid", 0], ["consists", 0], ["of", 0], ["characters", 0], ["and", 0], ["only", 0], ["output", 0], ["if", 1], ["it", 1], ["is", 1], ["impossible", 1], ["to", 1], ["draw", 1], ["the", 1], ["given", 1], ["grid", 1], ["using", 1], ["stars", 1], ["only", 1], ["print", 1], ["1", 1], ["otherwise", 1], ["in", 1], ["the", 1], ["first", 1], ["line", 1], ["print", 1], ["one", 1], ["integer", 1], ["k", 1], ["0", 1], ["le", 1], ["k", 1], ["le", 1], ["n", 1], ["cdot", 1], ["m", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["stars", 1], ["needed", 1], ["to", 1], ["draw", 1], ["the", 1], ["given", 1], ["grid", 1], ["the", 1], ["next", 1], ["k", 1], ["lines", 1], ["should", 1], ["contain", 1], ["three", 1], ["integers", 1], ["each", 1], ["—", 1], ["x", 1], ["j", 1], ["y", 1], ["j", 1], ["and", 1], ["s", 1], ["j", 1], ["where", 1], ["x", 1], ["j", 1], ["is", 1], ["the", 1], ["row", 1], ["index", 1], ["of", 1], ["the", 1], ["central", 1], ["star", 1], ["character", 1], ["y", 1], ["j", 1], ["is", 1], ["the", 1], ["column", 1], ["index", 1], ["of", 1], ["the", 1], ["central", 1], ["star", 1], ["character", 1], ["and", 1], ["s", 1], ["j", 1], ["is", 1], ["the", 1], ["size", 0], ["of", 0], ["the", 0], ["star", 0], ["each", 0], ["star", 0], ["should", 0], ["be", 0], ["completely", 0], ["inside", 0], ["the", 0], ["grid", 0], ["examples", 0], ["input", 0], ["6", 0], ["8", 0], ["output", 0], ["3", 0], ["3", 0], ["4", 0], ["1", 0], ["3", 0], ["5", 0], ["2", 0], ["3", 0], ["5", 0], ["1", 0], ["input", 0], ["5", 0], ["5", 0], ["output", 0], ["3", 0], ["2", 0], ["2", 0], ["1", 0], ["3", 0], ["3", 0], ["1", 0], ["3", 0], ["4", 0], ["1", 0], ["input", 0], ["5", 0], ["5", 0], ["output", 0], ["1", 0], ["input", 0], ["3", 0], ["3", 0], ["output", 0], ["1", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["example", 0], ["the", 0], ["output", 0], ["2", 0], ["3", 0], ["4", 0], ["1", 0], ["3", 0], ["5", 0], ["2", 0], ["is", 0], ["also", 0], ["correct", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7563218390804598, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7545977011494253, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.843400447427293, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8417225950782998, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7563218390804598, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7545977011494253, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.843400447427293, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8417225950782998, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pole", 0], ["metka", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["pole", 0], ["append", 0], ["metka", 0], ["append", 0], ["s", 0], ["input", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["pole", 0], ["i", 0], ["append", 0], ["s", 0], ["j", 0], ["if", 0], ["s", 0], ["j", 0], ["metka", 0], ["i", 0], ["append", 0], ["0", 0], ["else", 0], ["metka", 0], ["i", 0], ["append", 0], ["1", 0], ["k", 0], ["0", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["pole", 0], ["i", 0], ["j", 0], ["e", 0], ["0", 0], ["while", 0], ["i", 0], ["e", 0], ["1", 0], ["0", 0], ["and", 0], ["j", 0], ["e", 0], ["1", 0], ["0", 0], ["and", 0], ["i", 0], ["e", 0], ["1", 0], ["n", 0], ["and", 0], ["j", 0], ["e", 0], ["1", 0], ["m", 0], ["and", 0], ["pole", 0], ["i", 0], ["e", 0], ["1", 0], ["j", 0], ["and", 0], ["pole", 0], ["i", 0], ["j", 0], ["e", 0], ["1", 0], ["and", 0], ["pole", 0], ["i", 0], ["e", 0], ["1", 0], ["j", 0], ["and", 0], ["pole", 0], ["i", 0], ["j", 0], ["e", 0], ["1", 0], ["e", 0], ["e", 0], ["1", 0], ["metka", 0], ["i", 0], ["j", 0], ["0", 0], ["metka", 0], ["i", 0], ["e", 0], ["j", 0], ["0", 0], ["metka", 0], ["i", 0], ["j", 0], ["e", 0], ["0", 0], ["metka", 0], ["i", 0], ["e", 0], ["j", 0], ["0", 0], ["metka", 0], ["i", 0], ["j", 0], ["e", 0], ["0", 0], ["if", 0], ["e", 0], ["0", 0], ["k", 0], ["k", 0], ["1", 0], ["ans", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["e", 0], ["flag", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["1", 0], ["in", 0], ["metka", 0], ["i", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["not", 0], ["flag", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["print", 0], ["ans", 0], ["i", 0], ["0", 0], ["ans", 0], ["i", 0], ["1", 0], ["ans", 0], ["i", 0], ["2", 0], ["end", 0], ["n", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["table", 0], ["0", 0], ["m", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["table", 0], ["append", 0], ["0", 0], ["s", 0], ["input", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["table", 0], ["i", 0], ["1", 0], ["append", 0], ["2", 0], ["if", 0], ["s", 0], ["j", 0], ["else", 0], ["0", 0], ["table", 0], ["i", 0], ["1", 0], ["append", 0], ["0", 0], ["table", 0], ["append", 0], ["0", 0], ["m", 0], ["2", 0], ["dx", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["dy", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["answer", 0], ["for", 15], ["i", 15], ["in", 7], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["table", 0], ["i", 0], ["j", 0], ["0", 0], ["continue", 0], ["able", 0], ["true", 0], ["size", 0], ["0", 0], ["while", 0], ["able", 0], ["size", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["table", 0], ["i", 0], ["dx", 0], ["k", 0], ["size", 0], ["j", 0], ["dy", 0], ["k", 0], ["size", 0], ["0", 0], ["able", 0], ["false", 0], ["size", 0], ["1", 0], ["if", 0], ["size", 0], ["0", 0], ["table", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["1", 0], ["size", 0], ["1", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["4", 0], ["table", 0], ["i", 0], ["dx", 0], ["q", 0], ["k", 0], ["j", 0], ["dy", 0], ["q", 0], ["k", 0], ["1", 0], ["answer", 0], ["append", 0], ["i", 0], ["j", 0], ["size", 0], ["ok", 0], ["true", 0], ["for", 15], ["i", 15], ["in", 7], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["table", 0], ["i", 0], ["j", 0], ["2", 0], ["ok", 0], ["false", 0], ["if", 0], ["not", 0], ["ok", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["answer", 0], ["for", 0], ["i", 0], ["in", 0], ["answer", 0], ["print", 0], ["i", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["used", 0], ["true", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["pole", 0], ["0", 0], ["n", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["pole", 0], ["i", 0], ["list", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["g", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["pole", 0], ["i", 0], ["g", 0], ["k", 0], ["0", 0], ["while", 0], ["i", 0], ["k", 0], ["1", 0], ["0", 0], ["and", 0], ["i", 0], ["k", 0], ["1", 0], ["n", 0], ["and", 0], ["g", 0], ["k", 0], ["1", 0], ["0", 0], ["and", 0], ["g", 0], ["k", 0], ["1", 0], ["m", 0], ["if", 0], ["pole", 0], ["i", 0], ["k", 0], ["1", 0], ["g", 0], ["and", 0], ["pole", 0], ["i", 0], ["k", 0], ["1", 0], ["g", 0], ["and", 0], ["pole", 0], ["i", 0], ["g", 0], ["k", 0], ["1", 0], ["and", 0], ["pole", 0], ["i", 0], ["g", 0], ["k", 0], ["1", 0], ["used", 0], ["i", 0], ["k", 0], ["1", 0], ["g", 0], ["false", 0], ["used", 0], ["i", 0], ["k", 0], ["1", 0], ["g", 0], ["false", 0], ["used", 0], ["i", 0], ["g", 0], ["k", 0], ["1", 0], ["false", 0], ["used", 0], ["i", 0], ["g", 0], ["k", 0], ["1", 0], ["false", 0], ["k", 0], ["1", 0], ["continue", 0], ["break", 0], ["if", 0], ["k", 0], ["0", 0], ["used", 0], ["i", 0], ["g", 0], ["false", 0], ["m", 0], ["append", 0], ["i", 0], ["1", 0], ["g", 0], ["1", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["g", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["pole", 0], ["i", 0], ["g", 0], ["if", 0], ["used", 0], ["i", 0], ["g", 0], ["print", 0], ["1", 0], ["break", 0], ["else", 0], ["continue", 0], ["break", 0], ["else", 0], ["print", 0], ["len", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["m", 0], ["print", 0], ["m", 0], ["i", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["num", 0], ["used", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["num", 0], ["append", 0], ["input", 0], ["used", 0], ["append", 0], ["false", 0], ["m", 0], ["ans", 0], ["for", 15], ["i", 15], ["in", 7], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["num", 0], ["i", 0], ["j", 0], ["d1", 0], ["0", 0], ["d2", 0], ["0", 0], ["d3", 0], ["0", 0], ["d4", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["m", 0], ["if", 0], ["num", 0], ["i", 0], ["x", 0], ["d1", 0], ["x", 0], ["j", 0], ["1", 0], ["break", 0], ["else", 0], ["d1", 0], ["m", 0], ["j", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["num", 0], ["i", 0], ["x", 0], ["d2", 0], ["abs", 0], ["j", 0], ["x", 0], ["1", 0], ["break", 0], ["else", 0], ["d2", 0], ["j", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["if", 0], ["num", 0], ["y", 0], ["j", 0], ["d3", 0], ["y", 0], ["i", 0], ["1", 0], ["break", 0], ["else", 0], ["d3", 0], ["n", 0], ["i", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["num", 0], ["y", 0], ["j", 0], ["d4", 0], ["abs", 0], ["i", 0], ["y", 0], ["1", 0], ["break", 0], ["else", 0], ["d4", 0], ["i", 0], ["dist", 0], ["min", 0], ["d1", 0], ["d2", 0], ["d3", 0], ["d4", 0], ["if", 0], ["dist", 0], ["0", 0], ["ans", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["dist", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["j", 0], ["dist", 0], ["j", 0], ["dist", 0], ["1", 0], ["used", 0], ["i", 0], ["x", 0], ["true", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["i", 0], ["dist", 0], ["i", 0], ["dist", 0], ["1", 0], ["used", 0], ["y", 0], ["j", 0], ["true", 0], ["fl", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["num", 0], ["i", 0], ["j", 0], ["and", 0], ["not", 0], ["used", 0], ["i", 0], ["j", 0], ["fl", 0], ["false", 0], ["if", 0], ["not", 0], ["fl", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ans", 0], ["print", 0], ["ans", 0], ["i", 0], ["n", 0], ["m", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["stars", 0], ["directionx", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["directiony", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["stars", 0], ["append", 0], ["list", 0], ["input", 0], ["s", 0], ["0", 0], ["f", 0], ["false", 0], ["m", 0], ["for", 10], ["i", 10], ["in", 3], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["stars", 0], ["i", 0], ["j", 0], ["s", 0], ["1", 0], ["anslist", 0], ["ans", 0], ["0", 9], ["for", 15], ["i", 15], ["in", 7], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["stars", 0], ["i", 0], ["j", 0], ["and", 0], ["stars", 0], ["i", 0], ["j", 0], ["1", 0], ["and", 0], ["stars", 0], ["i", 0], ["1", 0], ["j", 0], ["and", 0], ["stars", 0], ["i", 0], ["j", 0], ["1", 0], ["and", 0], ["stars", 0], ["i", 0], ["1", 0], ["j", 0], ["wkf", 0], ["true", 0], ["count", 0], ["0", 0], ["while", 0], ["wkf", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["4", 0], ["f", 0], ["i", 0], ["directionx", 0], ["k", 0], ["count", 0], ["j", 0], ["directiony", 0], ["k", 0], ["count", 0], ["true", 0], ["count", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["i", 0], ["directionx", 0], ["k", 0], ["count", 0], ["n", 0], ["wkf", 0], ["false", 0], ["break", 0], ["if", 0], ["j", 0], ["directiony", 0], ["k", 0], ["count", 0], ["m", 0], ["wkf", 0], ["false", 0], ["break", 0], ["if", 0], ["i", 0], ["directionx", 0], ["k", 0], ["count", 0], ["0", 0], ["wkf", 0], ["false", 0], ["break", 0], ["if", 0], ["j", 0], ["directiony", 0], ["k", 0], ["count", 0], ["0", 0], ["wkf", 0], ["false", 0], ["break", 0], ["if", 0], ["stars", 0], ["i", 0], ["directionx", 0], ["k", 0], ["count", 0], ["j", 0], ["directiony", 0], ["k", 0], ["count", 0], ["wkf", 0], ["false", 0], ["break", 0], ["anslist", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["count", 0], ["1", 0], ["ans", 0], ["1", 0], ["if", 0], ["sum", 0], ["sum", 0], ["f", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["print", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ans", 0], ["for", 0], ["j", 0], ["in", 0], ["anslist", 0], ["i", 0], ["print", 0], ["j", 0], ["end", 0], ["print", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s1", 0], ["set", 0], ["s2", 0], ["set", 0], ["res", 0], ["list", 0], ["for", 1], ["i", 1], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["arr", 0], ["i", 0], ["j", 0], ["s1", 0], ["add", 0], ["i", 0], ["j", 0], ["l", 0], ["1", 0], ["while", 0], ["true", 0], ["if", 0], ["i", 0], ["l", 0], ["0", 0], ["and", 0], ["i", 0], ["l", 0], ["n", 0], ["and", 0], ["j", 0], ["l", 0], ["0", 0], ["and", 0], ["j", 0], ["l", 0], ["m", 0], ["if", 0], ["arr", 0], ["i", 0], ["l", 0], ["j", 0], ["arr", 0], ["i", 0], ["l", 0], ["j", 0], ["arr", 0], ["i", 0], ["j", 0], ["l", 0], ["arr", 0], ["i", 0], ["j", 0], ["l", 0], ["s2", 0], ["i", 0], ["l", 0], ["j", 0], ["i", 0], ["l", 0], ["j", 0], ["i", 0], ["j", 0], ["l", 0], ["i", 0], ["j", 0], ["l", 0], ["l", 0], ["1", 0], ["else", 0], ["break", 0], ["else", 0], ["break", 0], ["l", 0], ["1", 0], ["if", 0], ["l", 0], ["0", 0], ["s2", 0], ["add", 0], ["i", 0], ["j", 0], ["res", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["l", 0], ["if", 0], ["len", 0], ["s1", 0], ["s2", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["res", 0], ["for", 0], ["x", 0], ["in", 0], ["res", 0], ["print", 0], ["x", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pole", 0], ["unfitted", 0], ["def", 0], ["star", 0], ["fits", 0], ["x", 0], ["y", 0], ["r", 0], ["if", 0], ["x", 0], ["r", 0], ["0", 0], ["and", 0], ["x", 0], ["r", 0], ["m", 0], ["and", 0], ["y", 0], ["r", 0], ["0", 0], ["and", 0], ["y", 0], ["r", 0], ["n", 0], ["res", 0], ["true", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["x", 0], ["r", 0], ["x", 0], ["r", 0], ["1", 0], ["if", 0], ["pole", 0], ["y", 0], ["k", 0], ["res", 0], ["false", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["y", 0], ["r", 0], ["y", 0], ["r", 0], ["1", 0], ["if", 0], ["pole", 0], ["k", 0], ["x", 0], ["res", 0], ["false", 0], ["else", 0], ["return", 0], ["false", 0], ["return", 0], ["res", 0], ["def", 0], ["get", 0], ["max", 0], ["r", 0], ["x", 0], ["y", 0], ["r", 0], ["1", 0], ["while", 0], ["x", 0], ["r", 0], ["0", 0], ["and", 0], ["x", 0], ["r", 0], ["m", 0], ["and", 0], ["y", 0], ["r", 0], ["0", 0], ["and", 0], ["y", 0], ["r", 0], ["n", 0], ["if", 0], ["pole", 0], ["y", 0], ["x", 0], ["r", 0], ["and", 0], ["pole", 0], ["y", 0], ["x", 0], ["r", 0], ["and", 0], ["pole", 0], ["y", 0], ["r", 0], ["x", 0], ["and", 0], ["pole", 0], ["y", 0], ["r", 0], ["x", 0], ["r", 0], ["1", 0], ["else", 0], ["return", 0], ["r", 0], ["1", 0], ["return", 0], ["r", 0], ["1", 0], ["def", 0], ["mark", 0], ["star", 0], ["x", 0], ["y", 0], ["r", 0], ["if", 0], ["x", 0], ["r", 0], ["0", 0], ["and", 0], ["x", 0], ["r", 0], ["m", 0], ["and", 0], ["y", 0], ["r", 0], ["0", 0], ["and", 0], ["y", 0], ["r", 0], ["n", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["x", 0], ["r", 0], ["x", 0], ["r", 0], ["1", 0], ["unfitted", 0], ["y", 0], ["k", 0], ["false", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["y", 0], ["r", 0], ["y", 0], ["r", 0], ["1", 0], ["unfitted", 0], ["k", 0], ["x", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["pole", 0], ["append", 0], ["input", 0], ["strip", 0], ["m", 0], ["unfitted", 0], ["append", 0], ["true", 0], ["m", 0], ["fin", 0], ["res", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["pole", 0], ["y", 0], ["x", 0], ["r", 0], ["get", 0], ["max", 0], ["r", 0], ["x", 0], ["y", 0], ["if", 0], ["r", 0], ["0", 0], ["mark", 0], ["star", 0], ["x", 0], ["y", 0], ["r", 0], ["print", 0], ["found", 0], ["atar", 0], ["at", 0], ["x", 0], ["y", 0], ["r", 0], ["fin", 0], ["res", 0], ["append", 0], ["y", 0], ["1", 0], ["x", 0], ["1", 0], ["r", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["pole", 0], ["y", 0], ["x", 0], ["and", 0], ["unfitted", 0], ["y", 0], ["x", 0], ["print", 0], ["1", 0], ["return", 0], ["print", 0], ["len", 0], ["fin", 0], ["res", 0], ["for", 0], ["t", 0], ["in", 0], ["fin", 0], ["res", 0], ["print", 0], ["t", 0], ["import", 0], ["logging", 0], ["fmt", 0], ["r", 0], ["levelname", 0], ["s", 0], ["name", 0], ["s", 0], ["line", 0], ["lineno", 0], ["s", 0], ["message", 0], ["s", 0], ["formatter", 0], ["logging", 0], ["formatter", 0], ["fmt", 0], ["ch", 0], ["logging", 0], ["streamhandler", 0], ["ch", 0], ["setlevel", 0], ["logging", 0], ["error", 0], ["ch", 0], ["setformatter", 0], ["formatter", 0], ["logger", 0], ["logging", 0], ["getlogger", 0], ["logger", 0], ["setlevel", 0], ["logging", 0], ["error", 0], ["logger", 0], ["addhandler", 0], ["ch", 0], ["class", 0], ["starcell", 0], ["def", 0], ["init", 0], ["self", 0], ["row", 0], ["col", 0], ["top", 0], ["none", 0], ["bot", 0], ["none", 0], ["left", 0], ["none", 0], ["right", 0], ["none", 0], ["self", 0], ["row", 0], ["row", 0], ["self", 0], ["col", 0], ["col", 0], ["self", 0], ["covered", 0], ["false", 0], ["self", 0], ["top", 0], ["top", 0], ["self", 0], ["bot", 0], ["bot", 0], ["self", 0], ["left", 0], ["left", 0], ["self", 0], ["right", 0], ["right", 0], ["self", 0], ["size", 0], ["none", 0], ["self", 0], ["size", 0], ["top", 0], ["none", 0], ["self", 0], ["size", 0], ["bot", 0], ["none", 0], ["self", 0], ["size", 0], ["left", 0], ["none", 0], ["self", 0], ["size", 0], ["right", 0], ["none", 0], ["def", 0], ["set", 0], ["adjacents", 0], ["self", 0], ["cells", 0], ["row", 0], ["col", 0], ["self", 0], ["row", 0], ["self", 0], ["col", 0], ["self", 0], ["top", 0], ["cells", 0], ["get", 0], ["row", 0], ["1", 0], ["col", 0], ["none", 0], ["self", 0], ["bot", 0], ["cells", 0], ["get", 0], ["row", 0], ["1", 0], ["col", 0], ["none", 0], ["self", 0], ["left", 0], ["cells", 0], ["get", 0], ["row", 0], ["col", 0], ["1", 0], ["none", 0], ["self", 0], ["right", 0], ["cells", 0], ["get", 0], ["row", 0], ["col", 0], ["1", 0], ["none", 0], ["def", 0], ["set", 0], ["covered", 0], ["self", 0], ["size", 0], ["self", 0], ["size", 0], ["ctop", 0], ["self", 0], ["cbot", 0], ["self", 0], ["cleft", 0], ["self", 0], ["cright", 0], ["self", 0], ["for", 0], ["in", 0], ["range", 0], ["size", 0], ["ctop", 0], ["ctop", 0], ["top", 0], ["cbot", 0], ["cbot", 0], ["bot", 0], ["cleft", 0], ["cleft", 0], ["left", 0], ["cright", 0], ["cright", 0], ["right", 0], ["ctop", 0], ["covered", 0], ["true", 0], ["cbot", 0], ["covered", 0], ["true", 0], ["cleft", 0], ["covered", 0], ["true", 0], ["cright", 0], ["covered", 0], ["true", 0], ["property", 0], ["def", 0], ["size", 0], ["top", 0], ["self", 0], ["if", 0], ["not", 0], ["self", 0], ["top", 0], ["return", 0], ["0", 0], ["if", 0], ["not", 0], ["self", 0], ["size", 0], ["top", 0], ["update", 0], ["cache", 0], ["self", 0], ["size", 0], ["top", 0], ["1", 0], ["self", 0], ["top", 0], ["size", 0], ["top", 0], ["return", 0], ["self", 0], ["size", 0], ["top", 0], ["property", 0], ["def", 0], ["size", 0], ["bot", 0], ["self", 0], ["if", 0], ["not", 0], ["self", 0], ["bot", 0], ["return", 0], ["0", 0], ["if", 0], ["not", 0], ["self", 0], ["size", 0], ["bot", 0], ["self", 0], ["size", 0], ["bot", 0], ["1", 0], ["self", 0], ["bot", 0], ["size", 0], ["bot", 0], ["return", 0], ["self", 0], ["size", 0], ["bot", 0], ["property", 0], ["def", 0], ["size", 0], ["left", 0], ["self", 0], ["if", 0], ["not", 0], ["self", 0], ["left", 0], ["return", 0], ["0", 0], ["if", 0], ["not", 0], ["self", 0], ["size", 0], ["left", 0], ["self", 0], ["size", 0], ["left", 0], ["1", 0], ["self", 0], ["left", 0], ["size", 0], ["left", 0], ["return", 0], ["self", 0], ["size", 0], ["left", 0], ["property", 0], ["def", 0], ["size", 0], ["right", 0], ["self", 0], ["if", 0], ["not", 0], ["self", 0], ["right", 0], ["return", 0], ["0", 0], ["if", 0], ["not", 0], ["self", 0], ["size", 0], ["right", 0], ["self", 0], ["size", 0], ["right", 0], ["1", 0], ["self", 0], ["right", 0], ["size", 0], ["right", 0], ["return", 0], ["self", 0], ["size", 0], ["right", 0], ["property", 0], ["def", 0], ["size", 0], ["self", 0], ["if", 0], ["not", 0], ["self", 0], ["size", 0], ["self", 0], ["size", 0], ["min", 0], ["self", 0], ["size", 0], ["top", 0], ["self", 0], ["size", 0], ["bot", 0], ["self", 0], ["size", 0], ["left", 0], ["self", 0], ["size", 0], ["right", 0], ["return", 0], ["self", 0], ["size", 0], ["def", 0], ["repr", 0], ["self", 0], ["if", 0], ["self", 0], ["size", 0], ["0", 0], ["return", 0], ["star", 0], ["of", 0], ["max", 0], ["size", 0], ["format", 0], ["self", 0], ["size", 0], ["return", 0], ["cell", 0], ["covered", 0], ["format", 0], ["self", 0], ["covered", 0], ["def", 0], ["solve", 0], ["grid", 0], ["n", 0], ["m", 0], ["len", 0], ["grid", 0], ["len", 0], ["grid", 0], ["0", 0], ["cells", 0], ["for", 0], ["row", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["col", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["grid", 0], ["row", 0], ["col", 0], ["continue", 0], ["cells", 0], ["row", 0], ["col", 0], ["starcell", 0], ["row", 0], ["col", 0], ["for", 0], ["key", 0], ["val", 0], ["in", 0], ["list", 0], ["cells", 0], ["items", 0], ["val", 0], ["set", 0], ["adjacents", 0], ["cells", 0], ["for", 0], ["key", 0], ["val", 0], ["in", 0], ["list", 0], ["cells", 0], ["items", 0], ["val", 0], ["set", 0], ["covered", 0], ["for", 0], ["key", 0], ["val", 0], ["in", 0], ["cells", 0], ["items", 0], ["print", 0], ["key", 0], ["val", 0], ["ans", 0], ["for", 0], ["key", 0], ["val", 0], ["in", 0], ["list", 0], ["cells", 0], ["items", 0], ["if", 0], ["val", 0], ["size", 0], ["0", 0], ["and", 0], ["not", 0], ["val", 0], ["covered", 0], ["return", 0], ["none", 0], ["if", 0], ["val", 0], ["size", 0], ["0", 0], ["ans", 0], ["append", 0], ["val", 0], ["row", 0], ["1", 0], ["val", 0], ["col", 0], ["1", 0], ["val", 0], ["size", 0], ["rebase", 0], ["index", 0], ["1", 0], ["return", 0], ["ans", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["grid", 0], ["list", 0], ["input", 0], ["strip", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["results", 0], ["solve", 0], ["grid", 0], ["if", 0], ["results", 0], ["is", 0], ["none", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["results", 0], ["for", 0], ["result", 0], ["in", 0], ["results", 0], ["print", 0], ["result", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["m", 0], ["int", 0], ["m", 0], ["lst", 0], ["0", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["rec", 0], ["0", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["fin", 0], ["0", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["tmp", 0], ["input", 0], ["for", 0], ["j", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["tmp", 0], ["if", 0], ["x", 0], ["lst", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["lst", 0], ["i", 0], ["j", 0], ["1", 0], ["and", 0], ["i", 0], ["0", 0], ["and", 0], ["j", 0], ["0", 0], ["and", 0], ["i", 0], ["n", 0], ["1", 0], ["and", 0], ["j", 0], ["m", 0], ["1", 0], ["tmp", 0], ["min", 0], ["i", 0], ["j", 0], ["n", 0], ["1", 0], ["i", 0], ["m", 0], ["1", 0], ["j", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["tmp", 0], ["0", 0], ["1", 0], ["flag", 0], ["true", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["lst", 0], ["i", 0], ["j", 0], ["x", 0], ["0", 0], ["or", 0], ["lst", 0], ["i", 0], ["j", 0], ["x", 0], ["0", 0], ["or", 0], ["lst", 0], ["i", 0], ["x", 0], ["j", 0], ["0", 0], ["or", 0], ["lst", 0], ["i", 0], ["x", 0], ["j", 0], ["0", 0], ["flag", 0], ["false", 0], ["if", 0], ["flag", 0], ["fin", 0], ["i", 0], ["j", 0], ["k", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["fin", 0], ["i", 0], ["j", 0], ["0", 0], ["tmp", 0], ["fin", 0], ["i", 0], ["j", 0], ["ans", 0], ["1", 0], ["cnt", 0], ["1", 0], ["tmp", 0], ["4", 0], ["rec", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["tmp", 0], ["1", 0], ["rec", 0], ["i", 0], ["j", 0], ["x", 0], ["1", 0], ["rec", 0], ["i", 0], ["j", 0], ["x", 0], ["1", 0], ["rec", 0], ["i", 0], ["x", 0], ["j", 0], ["1", 0], ["rec", 0], ["i", 0], ["x", 0], ["j", 0], ["1", 0], ["if", 0], ["rec", 0], ["lst", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["fin", 0], ["i", 0], ["j", 0], ["0", 0], ["print", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["fin", 0], ["i", 0], ["j", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["list", 0], ["input", 0], ["t", 0], ["i", 0], ["a", 0], ["s", 0], ["0", 0], ["m", 0], ["for", 10], ["i", 10], ["in", 3], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["t", 0], ["i", 0], ["j", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["rec", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["1", 0], ["i", 0], ["n", 0], ["1", 0], ["and", 0], ["1", 0], ["j", 0], ["m", 0], ["1", 0], ["and", 0], ["t", 0], ["i", 0], ["j", 0], ["and", 0], ["t", 0], ["i", 0], ["1", 0], ["j", 0], ["and", 0], ["t", 0], ["i", 0], ["j", 0], ["1", 0], ["and", 0], ["t", 0], ["i", 0], ["1", 0], ["j", 0], ["and", 0], ["t", 0], ["i", 0], ["j", 0], ["1", 0], ["s", 0], ["i", 0], ["j", 0], ["0", 0], ["s", 0], ["i", 0], ["1", 0], ["j", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["0", 0], ["s", 0], ["i", 0], ["1", 0], ["j", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["0", 0], ["k", 0], ["2", 0], ["while", 0], ["true", 0], ["if", 0], ["not", 0], ["0", 0], ["i", 0], ["k", 0], ["and", 0], ["i", 0], ["k", 0], ["n", 0], ["and", 0], ["0", 0], ["j", 0], ["k", 0], ["and", 0], ["j", 0], ["k", 0], ["m", 0], ["break", 0], ["if", 0], ["t", 0], ["i", 0], ["k", 0], ["j", 0], ["and", 0], ["t", 0], ["i", 0], ["j", 0], ["k", 0], ["and", 0], ["t", 0], ["i", 0], ["k", 0], ["j", 0], ["and", 0], ["t", 0], ["i", 0], ["j", 0], ["k", 0], ["s", 0], ["i", 0], ["k", 0], ["j", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["0", 0], ["s", 0], ["i", 0], ["k", 0], ["j", 0], ["0", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["0", 0], ["k", 0], ["1", 0], ["else", 0], ["break", 0], ["rec", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["k", 0], ["1", 0], ["q", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["q", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["q", 0], ["0", 0], ["print", 0], ["len", 0], ["rec", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["rec", 0], ["print", 0], ["format", 0], ["rec", 0], ["i", 0], ["0", 0], ["rec", 0], ["i", 0], ["1", 0], ["rec", 0], ["i", 0], ["2", 0], ["else", 0], ["print", 0], ["1", 0], ["def", 0], ["all", 0], ["true", 0], ["stars", 0], ["n", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["not", 0], ["stars", 0], ["i", 0], ["j", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["def", 0], ["get", 0], ["biggest", 0], ["star", 0], ["ar", 0], ["i", 0], ["j", 0], ["ans", 0], ["0", 0], ["cur", 0], ["i", 0], ["1", 0], ["while", 0], ["cur", 0], ["0", 0], ["and", 0], ["ar", 0], ["cur", 0], ["j", 0], ["ans", 0], ["1", 0], ["cur", 0], ["1", 0], ["length", 0], ["0", 0], ["cur", 0], ["i", 0], ["1", 0], ["while", 0], ["cur", 0], ["n", 0], ["and", 0], ["ar", 0], ["cur", 0], ["j", 0], ["length", 0], ["1", 0], ["cur", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["length", 0], ["length", 0], ["0", 0], ["cur", 0], ["j", 0], ["1", 0], ["while", 0], ["cur", 0], ["0", 0], ["and", 0], ["ar", 0], ["i", 0], ["cur", 0], ["length", 0], ["1", 0], ["cur", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["length", 0], ["length", 0], ["0", 0], ["cur", 0], ["j", 0], ["1", 0], ["while", 0], ["cur", 0], ["m", 0], ["and", 0], ["ar", 0], ["i", 0], ["cur", 0], ["length", 0], ["1", 0], ["cur", 0], ["1", 0], ["ans", 0], ["min", 0], ["ans", 0], ["length", 0], ["return", 0], ["ans", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ar", 0], ["stars", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cur", 0], ["input", 0], ["st", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["cur", 0], ["i", 0], ["st", 0], ["append", 0], ["true", 0], ["else", 0], ["st", 0], ["append", 0], ["false", 0], ["stars", 0], ["append", 0], ["st", 0], ["ar", 0], ["append", 0], ["cur", 0], ["finalans", 0], ["ans", 0], ["0", 9], ["for", 15], ["i", 15], ["in", 7], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["ar", 0], ["i", 0], ["j", 0], ["continue", 0], ["length", 0], ["get", 0], ["biggest", 0], ["star", 0], ["ar", 0], ["i", 0], ["j", 0], ["if", 0], ["length", 0], ["0", 0], ["ans", 0], ["1", 0], ["finalans", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["length", 0], ["stars", 0], ["i", 0], ["j", 0], ["true", 0], ["temp", 0], ["0", 0], ["while", 0], ["temp", 0], ["length", 0], ["temp", 0], ["1", 0], ["stars", 0], ["i", 0], ["temp", 0], ["j", 0], ["true", 0], ["temp", 0], ["0", 0], ["while", 0], ["temp", 0], ["length", 0], ["temp", 0], ["1", 0], ["stars", 0], ["i", 0], ["temp", 0], ["j", 0], ["true", 0], ["temp", 0], ["0", 0], ["while", 0], ["temp", 0], ["length", 0], ["temp", 0], ["1", 0], ["stars", 0], ["i", 0], ["j", 0], ["temp", 0], ["true", 0], ["temp", 0], ["0", 0], ["while", 0], ["temp", 0], ["length", 0], ["temp", 0], ["1", 0], ["stars", 0], ["i", 0], ["j", 0], ["temp", 0], ["true", 0], ["print", 0], ["stars", 0], ["sep", 0], ["n", 0], ["if", 0], ["all", 0], ["true", 0], ["stars", 0], ["n", 0], ["m", 0], ["print", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["finalans", 0], ["print", 0], ["i", 0], ["else", 0], ["print", 0], ["1", 0], ["def", 0], ["main", 0], ["inp", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["remaining", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["cur", 0], ["inp", 0], ["input", 0], ["inp", 0], ["append", 0], ["cur", 0], ["inp", 0], ["remaining", 0], ["cur", 0], ["inp", 0], ["count", 0], ["remaining2", 0], ["true", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["res", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["inp", 0], ["x", 0], ["y", 0], ["last", 0], ["size", 0], ["none", 0], ["for", 0], ["size", 0], ["in", 0], ["range", 0], ["1", 0], ["min", 0], ["x", 0], ["1", 0], ["n", 0], ["x", 0], ["y", 0], ["1", 0], ["m", 0], ["y", 0], ["if", 0], ["inp", 0], ["x", 0], ["size", 0], ["y", 0], ["inp", 0], ["x", 0], ["size", 0], ["y", 0], ["inp", 0], ["x", 0], ["y", 0], ["size", 0], ["inp", 0], ["x", 0], ["y", 0], ["size", 0], ["for", 0], ["x1", 0], ["y1", 0], ["in", 0], ["x", 0], ["size", 0], ["y", 0], ["x", 0], ["size", 0], ["y", 0], ["x", 0], ["y", 0], ["size", 0], ["x", 0], ["y", 0], ["size", 0], ["if", 0], ["remaining2", 0], ["x1", 0], ["y1", 0], ["remaining", 0], ["1", 0], ["remaining2", 0], ["x1", 0], ["y1", 0], ["false", 0], ["last", 0], ["size", 0], ["size", 0], ["else", 0], ["break", 0], ["if", 0], ["last", 0], ["size", 0], ["is", 0], ["not", 0], ["none", 0], ["if", 0], ["remaining2", 0], ["x", 0], ["y", 0], ["remaining", 0], ["1", 0], ["remaining2", 0], ["x", 0], ["y", 0], ["false", 0], ["res", 0], ["append", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["last", 0], ["size", 0], ["if", 0], ["remaining", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["len", 0], ["res", 0], ["for", 0], ["x", 0], ["in", 0], ["res", 0], ["print", 0], ["x", 0], ["main", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["os", 0], ["path", 0], ["from", 0], ["copy", 0], ["import", 0], ["deepcopy", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["from", 0], ["pprint", 0], ["import", 0], ["pprint", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["chainmap", 0], ["defaultdict", 0], ["from", 0], ["itertools", 0], ["import", 0], ["cycle", 0], ["chain", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["priorityqueue", 0], ["deque", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappush", 0], ["heappop", 0], ["heappushpop", 0], ["heapify", 0], ["heapreplace", 0], ["nlargest", 0], ["nsmallest", 0], ["import", 0], ["bisect", 0], ["from", 0], ["statistics", 0], ["import", 0], ["mean", 0], ["mode", 0], ["median", 0], ["median", 0], ["low", 0], ["median", 0], ["high", 0], ["config", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["log", 0], ["def", 0], ["log", 0], ["args", 0], ["kwargs", 0], ["print", 0], ["args", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["kwargs", 0], ["input", 0], ["def", 0], ["ni", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["nio", 0], ["offset", 0], ["return", 0], ["int", 0], ["x", 0], ["offset", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["nia", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["convert", 0], ["def", 0], ["tostring", 0], ["alist", 0], ["sep", 0], ["return", 0], ["sep", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["alist", 0], ["def", 0], ["tomapinvertindex", 0], ["alist", 0], ["return", 0], ["k", 0], ["v", 0], ["for", 0], ["v", 0], ["k", 0], ["in", 0], ["enumerate", 0], ["alist", 0], ["sort", 0], ["def", 0], ["sortid", 0], ["arr", 0], ["return", 0], ["sorted", 0], ["list", 0], ["range", 0], ["len", 0], ["arr", 0], ["key", 0], ["lambda", 0], ["k", 0], ["arr", 0], ["k", 0], ["main", 0], ["n", 0], ["m", 0], ["ni", 0], ["s", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ss", 0], ["input", 0], ["s", 0], ["i", 0], ["ss", 0], ["dd", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["pprint", 0], ["s", 0], ["pprint", 0], ["dd", 0], ["res", 0], ["deque", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["s", 0], ["i", 0], ["j", 0], ["print", 0], ["i", 0], ["j", 0], ["k", 0], ["1", 0], ["while", 0], ["0", 0], ["i", 0], ["k", 0], ["n", 0], ["and", 0], ["0", 0], ["i", 0], ["k", 0], ["n", 0], ["and", 0], ["0", 0], ["j", 0], ["k", 0], ["m", 0], ["and", 0], ["0", 0], ["j", 0], ["k", 0], ["m", 0], ["and", 0], ["s", 0], ["i", 0], ["k", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["k", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["k", 0], ["dd", 0], ["i", 0], ["k", 0], ["j", 0], ["dd", 0], ["i", 0], ["k", 0], ["j", 0], ["dd", 0], ["i", 0], ["j", 0], ["k", 0], ["dd", 0], ["i", 0], ["j", 0], ["k", 0], ["if", 0], ["k", 0], ["1", 0], ["dd", 0], ["i", 0], ["j", 0], ["res", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["k", 0], ["else", 0], ["res", 0], ["1", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["k", 0], ["print", 0], ["i", 0], ["j", 0], ["k", 0], ["k", 0], ["1", 0], ["pprint", 0], ["dd", 0], ["def", 0], ["check", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["s", 0], ["i", 0], ["j", 0], ["dd", 0], ["i", 0], ["j", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["if", 0], ["check", 0], ["lres", 0], ["len", 0], ["res", 0], ["print", 0], ["lres", 0], ["if", 0], ["lres", 0], ["0", 0], ["print", 0], ["n", 0], ["join", 0], ["join", 0], ["str", 0], ["y", 0], ["for", 0], ["y", 0], ["in", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["res", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["for", 0], ["a", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["list", 0], ["input", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["l", 0], ["i", 0], ["j", 0], ["or", 0], ["l", 0], ["i", 0], ["j", 0], ["k", 0], ["1", 0], ["l", 0], ["min", 0], ["i", 0], ["j", 0], ["n", 0], ["1", 0], ["i", 0], ["m", 0], ["1", 0], ["j", 0], ["while", 0], ["k", 0], ["l", 0], ["if", 0], ["l", 0], ["i", 0], ["k", 0], ["j", 0], ["or", 0], ["l", 0], ["i", 0], ["k", 0], ["j", 0], ["and", 0], ["l", 0], ["i", 0], ["j", 0], ["k", 0], ["or", 0], ["l", 0], ["i", 0], ["j", 0], ["k", 0], ["and", 0], ["l", 0], ["i", 0], ["k", 0], ["j", 0], ["or", 0], ["l", 0], ["i", 0], ["k", 0], ["j", 0], ["and", 0], ["l", 0], ["i", 0], ["j", 0], ["k", 0], ["or", 0], ["l", 0], ["i", 0], ["j", 0], ["k", 0], ["l", 0], ["i", 0], ["j", 0], ["l", 0], ["i", 0], ["k", 0], ["j", 0], ["l", 0], ["i", 0], ["k", 0], ["j", 0], ["l", 0], ["i", 0], ["j", 0], ["k", 0], ["l", 0], ["i", 0], ["j", 0], ["k", 0], ["k", 0], ["1", 0], ["else", 0], ["break", 0], ["if", 0], ["k", 0], ["1", 0], ["ans", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["k", 0], ["1", 0], ["f", 0], ["true", 0], ["for", 0], ["a", 0], ["in", 0], ["l", 0], ["if", 0], ["in", 0], ["a", 0], ["f", 0], ["false", 0], ["break", 0], ["if", 0], ["f", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["a", 0], ["in", 0], ["ans", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["0", 1], ["for", 1], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["v", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["v", 0], ["v", 0], ["1", 0], ["g", 0], ["i", 0], ["j", 0], ["c", 0], ["i", 0], ["j", 0], ["v", 0], ["v", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["1", 0], ["1", 0], ["v", 0], ["v", 0], ["1", 0], ["g", 0], ["i", 0], ["j", 0], ["c", 0], ["i", 0], ["j", 0], ["min", 0], ["c", 0], ["i", 0], ["j", 0], ["v", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["v", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["v", 0], ["v", 0], ["1", 0], ["g", 0], ["i", 0], ["j", 0], ["c", 0], ["i", 0], ["j", 0], ["min", 0], ["c", 0], ["i", 0], ["j", 0], ["v", 0], ["v", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["v", 0], ["v", 0], ["1", 0], ["g", 0], ["i", 0], ["j", 0], ["c", 0], ["i", 0], ["j", 0], ["min", 0], ["c", 0], ["i", 0], ["j", 0], ["v", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["c", 0], ["i", 0], ["j", 0], ["1", 0], ["c", 0], ["i", 0], ["j", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["v", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["v", 0], ["max", 0], ["v", 0], ["1", 0], ["c", 0], ["i", 0], ["j", 0], ["if", 0], ["v", 0], ["g", 0], ["i", 0], ["j", 0], ["v", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["1", 0], ["1", 0], ["v", 0], ["max", 0], ["v", 0], ["1", 0], ["c", 0], ["i", 0], ["j", 0], ["if", 0], ["v", 0], ["g", 0], ["i", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["v", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["v", 0], ["max", 0], ["v", 0], ["1", 0], ["c", 0], ["i", 0], ["j", 0], ["if", 0], ["v", 0], ["g", 0], ["i", 0], ["j", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["v", 0], ["max", 0], ["v", 0], ["1", 0], ["c", 0], ["i", 0], ["j", 0], ["if", 0], ["v", 0], ["g", 0], ["i", 0], ["j", 0], ["if", 0], ["all", 0], ["g", 0], ["i", 0], ["j", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["r", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["c", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["c", 0], ["i", 0], ["j", 0], ["print", 0], ["len", 0], ["r", 0], ["for", 0], ["t", 0], ["in", 0], ["r", 0], ["print", 0], ["t", 0], ["else", 0], ["print", 0], ["1", 0], ["import", 0], ["math", 0], ["as", 0], ["ma", 0], ["from", 0], ["decimal", 0], ["import", 0], ["decimal", 0], ["as", 0], ["dec", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["https", 0], ["www", 0], ["geeksforgeeks", 0], ["org", 0], ["multiplicative", 0], ["inverse", 0], ["under", 0], ["modulo", 0], ["m", 0], ["def", 0], ["modinverse", 0], ["a", 0], ["m", 0], ["m0", 0], ["m", 0], ["y", 0], ["0", 0], ["x", 0], ["1", 0], ["if", 0], ["m", 0], ["1", 0], ["return", 0], ["0", 0], ["while", 0], ["a", 0], ["1", 0], ["q", 0], ["a", 0], ["m", 0], ["t", 0], ["m", 0], ["m", 0], ["a", 0], ["m", 0], ["a", 0], ["t", 0], ["t", 0], ["y", 0], ["y", 0], ["x", 0], ["q", 0], ["y", 0], ["x", 0], ["t", 0], ["if", 0], ["x", 0], ["0", 0], ["x", 0], ["x", 0], ["m0", 0], ["return", 0], ["x", 0], ["m", 0], ["10000019", 0], ["def", 0], ["binomialcoefficient", 0], ["n", 0], ["k", 0], ["if", 0], ["k", 0], ["n", 0], ["k", 0], ["k", 0], ["n", 0], ["k", 0], ["m", 0], ["res", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["res", 0], ["res", 0], ["n", 0], ["i", 0], ["m", 0], ["res", 0], ["res", 0], ["modinverse", 0], ["i", 0], ["1", 0], ["m", 0], ["m", 0], ["return", 0], ["res", 0], ["def", 0], ["num", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["nu", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["find", 0], ["gcd", 0], ["x", 0], ["y", 0], ["while", 0], ["y", 0], ["x", 0], ["y", 0], ["y", 0], ["x", 0], ["y", 0], ["return", 0], ["x", 0], ["n", 0], ["m", 0], ["num", 0], ["a", 0], ["0", 0], ["n", 0], ["b", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["input", 0], ["a", 0], ["i", 0], ["0", 0], ["m", 0], ["b", 0], ["i", 0], ["0", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["x", 0], ["j", 0], ["a", 0], ["i", 0], ["j", 0], ["1", 0], ["pp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["0", 0], ["d", 0], ["0", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["if", 0], ["a", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["k", 0], ["j", 0], ["1", 0], ["u", 0], ["1", 0], ["else", 0], ["break", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["k", 0], ["j", 0], ["1", 0], ["d", 0], ["1", 0], ["else", 0], ["break", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["k", 0], ["1", 0], ["l", 0], ["1", 0], ["else", 0], ["break", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["m", 0], ["if", 0], ["a", 0], ["i", 0], ["k", 0], ["1", 0], ["r", 0], ["1", 0], ["else", 0], ["break", 0], ["zz", 0], ["min", 0], ["u", 0], ["d", 0], ["l", 0], ["r", 0], ["print", 0], ["i", 0], ["j", 0], ["zz", 0], ["if", 0], ["zz", 0], ["0", 0], ["continue", 0], ["pp", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["zz", 0], ["b", 0], ["i", 0], ["j", 0], ["1", 0], ["c", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["b", 0], ["k", 0], ["j", 0], ["1", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["zz", 0], ["break", 0], ["c", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["b", 0], ["k", 0], ["j", 0], ["1", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["zz", 0], ["break", 0], ["c", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["1", 0], ["1", 0], ["b", 0], ["i", 0], ["k", 0], ["1", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["zz", 0], ["break", 0], ["c", 0], ["0", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["m", 0], ["b", 0], ["i", 0], ["k", 0], ["1", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["zz", 0], ["break", 0], ["fl", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["a", 0], ["i", 0], ["j", 0], ["1", 0], ["and", 0], ["b", 0], ["i", 0], ["j", 0], ["0", 0], ["fl", 0], ["false", 0], ["break", 0], ["if", 0], ["fl", 0], ["print", 0], ["len", 0], ["pp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["pp", 0], ["print", 0], ["pp", 0], ["i", 0], ["0", 0], ["pp", 0], ["i", 0], ["1", 0], ["pp", 0], ["i", 0], ["2", 0], ["else", 0], ["print", 0], ["1", 0], ["def", 0], ["find", 0], ["stars", 0], ["h", 0], ["w", 0], ["matrix", 0], ["max", 0], ["size", 0], ["0", 0], ["if", 0], ["matrix", 0], ["h", 0], ["w", 0], ["return", 0], ["max", 0], ["size", 0], ["size", 0], ["1", 0], ["while", 0], ["true", 0], ["for", 0], ["next", 0], ["h", 0], ["in", 0], ["range", 0], ["h", 0], ["h", 0], ["size", 0], ["1", 0], ["if", 0], ["next", 0], ["h", 0], ["height", 0], ["or", 0], ["matrix", 0], ["next", 0], ["h", 0], ["w", 0], ["return", 0], ["max", 0], ["size", 0], ["for", 0], ["next", 0], ["h", 0], ["in", 0], ["range", 0], ["h", 0], ["h", 0], ["size", 0], ["1", 0], ["1", 0], ["if", 0], ["next", 0], ["h", 0], ["0", 0], ["or", 0], ["matrix", 0], ["next", 0], ["h", 0], ["w", 0], ["return", 0], ["max", 0], ["size", 0], ["for", 0], ["next", 0], ["w", 0], ["in", 0], ["range", 0], ["w", 0], ["w", 0], ["size", 0], ["1", 0], ["if", 0], ["next", 0], ["w", 0], ["width", 0], ["or", 0], ["matrix", 0], ["h", 0], ["next", 0], ["w", 0], ["return", 0], ["max", 0], ["size", 0], ["for", 0], ["next", 0], ["w", 0], ["in", 0], ["range", 0], ["w", 0], ["w", 0], ["size", 0], ["1", 0], ["1", 0], ["if", 0], ["next", 0], ["w", 0], ["0", 0], ["or", 0], ["matrix", 0], ["h", 0], ["next", 0], ["w", 0], ["return", 0], ["max", 0], ["size", 0], ["max", 0], ["size", 0], ["size", 0], ["size", 0], ["1", 0], ["height", 0], ["width", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["matrix", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["height", 0], ["row", 0], ["input", 0], ["matrix", 0], ["append", 0], ["row", 0], ["result", 0], ["matrix", 0], ["width", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["height", 0], ["result", 0], ["stars", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["height", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["width", 0], ["found", 0], ["max", 0], ["size", 0], ["find", 0], ["stars", 0], ["h", 0], ["w", 0], ["matrix", 0], ["if", 0], ["found", 0], ["max", 0], ["size", 0], ["0", 0], ["continue", 0], ["for", 0], ["next", 0], ["h", 0], ["in", 0], ["range", 0], ["h", 0], ["h", 0], ["found", 0], ["max", 0], ["size", 0], ["1", 0], ["result", 0], ["matrix", 0], ["next", 0], ["h", 0], ["w", 0], ["for", 0], ["next", 0], ["h", 0], ["in", 0], ["range", 0], ["h", 0], ["h", 0], ["found", 0], ["max", 0], ["size", 0], ["1", 0], ["1", 0], ["result", 0], ["matrix", 0], ["next", 0], ["h", 0], ["w", 0], ["for", 0], ["next", 0], ["w", 0], ["in", 0], ["range", 0], ["w", 0], ["w", 0], ["found", 0], ["max", 0], ["size", 0], ["1", 0], ["result", 0], ["matrix", 0], ["h", 0], ["next", 0], ["w", 0], ["for", 0], ["next", 0], ["w", 0], ["in", 0], ["range", 0], ["w", 0], ["w", 0], ["found", 0], ["max", 0], ["size", 0], ["1", 0], ["1", 0], ["result", 0], ["matrix", 0], ["h", 0], ["next", 0], ["w", 0], ["result", 0], ["stars", 0], ["append", 0], ["str", 0], ["h", 0], ["1", 0], ["str", 0], ["w", 0], ["1", 0], ["str", 0], ["found", 0], ["max", 0], ["size", 0], ["is", 0], ["equal", 0], ["true", 0], ["for", 0], ["h", 0], ["in", 0], ["range", 0], ["height", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["width", 0], ["if", 0], ["matrix", 0], ["h", 0], ["w", 0], ["result", 0], ["matrix", 0], ["h", 0], ["w", 0], ["is", 0], ["equal", 0], ["false", 0], ["if", 0], ["is", 0], ["equal", 0], ["print", 0], ["len", 0], ["result", 0], ["stars", 0], ["for", 0], ["star", 0], ["in", 0], ["result", 0], ["stars", 0], ["print", 0], ["star", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["g", 0], ["l", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["r", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["u", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["d", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["g", 0], ["append", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["nm", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["g", 0], ["i", 0], ["j", 0], ["nm", 0], ["1", 0], ["else", 0], ["nm", 0], ["0", 0], ["l", 0], ["i", 0], ["j", 0], ["nm", 0], ["nm", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["g", 0], ["i", 0], ["j", 0], ["nm", 0], ["1", 0], ["else", 0], ["nm", 0], ["0", 0], ["r", 0], ["i", 0], ["j", 0], ["nm", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["nm", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["g", 0], ["i", 0], ["j", 0], ["nm", 0], ["1", 0], ["else", 0], ["nm", 0], ["0", 0], ["u", 0], ["i", 0], ["j", 0], ["nm", 0], ["nm", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["g", 0], ["i", 0], ["j", 0], ["nm", 0], ["1", 0], ["else", 0], ["nm", 0], ["0", 0], ["d", 0], ["i", 0], ["j", 0], ["nm", 0], ["col", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["row", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["m", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["g", 0], ["i", 0], ["j", 0], ["continue", 0], ["ans", 0], ["min", 0], ["u", 0], ["i", 0], ["j", 0], ["l", 0], ["i", 0], ["j", 0], ["r", 0], ["i", 0], ["j", 0], ["d", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["ans", 0], ["0", 0], ["continue", 0], ["ans", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["ans", 0], ["row", 0], ["i", 0], ["j", 0], ["ans", 0], ["1", 0], ["row", 0], ["i", 0], ["j", 0], ["ans", 0], ["1", 0], ["1", 0], ["col", 0], ["i", 0], ["ans", 0], ["j", 0], ["1", 0], ["col", 0], ["i", 0], ["ans", 0], ["1", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["row", 0], ["i", 0], ["j", 0], ["row", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["col", 0], ["i", 0], ["j", 0], ["col", 0], ["i", 0], ["1", 0], ["j", 0], ["okay", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["g", 0], ["i", 0], ["j", 0], ["and", 0], ["row", 0], ["i", 0], ["j", 0], ["0", 0], ["and", 0], ["col", 0], ["i", 0], ["j", 0], ["0", 0], ["okay", 0], ["false", 0], ["if", 0], ["okay", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["x", 0], ["in", 0], ["ans", 0], ["print", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sky", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sky", 0], ["i", 0], ["list", 0], ["input", 0], ["sky", 0], ["n", 0], ["m", 0], ["used", 0], ["false", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["sky", 0], ["i", 0], ["j", 0], ["continue", 0], ["ln", 0], ["1", 0], ["while", 0], ["sky", 0], ["i", 0], ["ln", 0], ["j", 0], ["and", 0], ["sky", 0], ["i", 0], ["ln", 0], ["j", 0], ["and", 0], ["sky", 0], ["i", 0], ["j", 0], ["ln", 0], ["and", 0], ["sky", 0], ["i", 0], ["j", 0], ["ln", 0], ["used", 0], ["i", 0], ["ln", 0], ["j", 0], ["used", 0], ["i", 0], ["ln", 0], ["j", 0], ["used", 0], ["i", 0], ["j", 0], ["ln", 0], ["used", 0], ["i", 0], ["j", 0], ["ln", 0], ["true", 0], ["ln", 0], ["1", 0], ["if", 0], ["ln", 0], ["1", 0], ["used", 0], ["i", 0], ["j", 0], ["true", 0], ["ans", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["ln", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["sky", 0], ["i", 0], ["j", 0], ["and", 0], ["not", 0], ["used", 0], ["i", 0], ["j", 0], ["print", 0], ["1", 0], ["return", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ans", 0], ["print", 0], ["ans", 0], ["i", 0], ["import", 0], ["sys", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dp", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["for", 15], ["i", 15], ["in", 7], ["range", 1], ["1", 1], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["x", 0], ["0", 0], ["while", 0], ["i", 0], ["x", 0], ["1", 0], ["and", 0], ["x", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["x", 0], ["1", 0], ["and", 0], ["x", 0], ["j", 0], ["m", 0], ["and", 0], ["s", 0], ["i", 0], ["x", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["x", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["x", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["x", 0], ["dp", 0], ["i", 0], ["x", 0], ["j", 0], ["dp", 0], ["i", 0], ["x", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["x", 0], ["dp", 0], ["i", 0], ["j", 0], ["x", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["1", 0], ["ans", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["x", 0], ["1", 0], ["else", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["s", 0], ["i", 0], ["j", 0], ["and", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["print", 0], ["i", 0], ["import", 0], ["sys", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dp", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["for", 15], ["i", 15], ["in", 7], ["range", 1], ["1", 1], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["x", 0], ["0", 0], ["while", 0], ["i", 0], ["x", 0], ["1", 0], ["and", 0], ["x", 0], ["i", 0], ["n", 0], ["and", 0], ["j", 0], ["x", 0], ["1", 0], ["and", 0], ["x", 0], ["j", 0], ["m", 0], ["and", 0], ["s", 0], ["i", 0], ["x", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["x", 0], ["j", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["x", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["x", 0], ["dp", 0], ["i", 0], ["x", 0], ["j", 0], ["dp", 0], ["i", 0], ["x", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["x", 0], ["dp", 0], ["i", 0], ["j", 0], ["x", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["1", 0], ["ans", 0], ["append", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["x", 0], ["1", 0], ["else", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["s", 0], ["i", 0], ["j", 0], ["and", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["print", 0], ["i", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.007432703897147449, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.002254363644480157, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.033867735470941886, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.01522473518465503, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.004620329449578144, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0020668720146422037, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.03186372745490982, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.015091134650252887, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj >= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n\nNote:\nYou may assume the greed factor is always positive. \nYou cannot assign more than one cookie to one child.\n\n\nExample 1:\n\nInput: [1,2,3], [1,1]\n\nOutput: 1\n\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n\n\n\nExample 2:\n\nInput: [1,2], [1,2,3]\n\nOutput: 2\n\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    res = 0\n\t    heapq.heapify(g)\n\t    s.sort()\n\t    for num in s:\n\t\t   if not g:\n\t\t\t  break\n\t\t   elif g[0] <= num:\n\t\t\t  res += 1\n\t\t\t  heapq.heappop(g)\n\t    return res\n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g.sort()\n\t    s.sort()\n\t    res = 0 \n\t    Lg,Ls = len(g),len(s)\n\t    i=j=0 \n\t    while i<Lg and j<Ls:\n\t\t   if s[j] >= g[i]:\n\t\t\t  res += 1\n\t\t\t  j += 1\n\t\t\t  i += 1\n\t\t   else:\n\t\t\t  j += 1\n\t    return res\n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g.sort()\n\t    s.sort()\n\t    i,j = 0,0\n\t    happyKids = 0\n\t    while i < len(g) and j < len(s):\n\t\t   if s[j] >= g[i]:\n\t\t\t  happyKids += 1\n\t\t\t  i += 1\n\t\t   j += 1\n\t    return happyKids\n\t    \n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g.sort(), s.sort()\n\t    count = 0\n\t    i = 0\n\t    while count < len(g) and i < len(s):\n\t\t   if s[i] >= g[count]:\n\t\t\t  count += 1\n\t\t   i+=1\n\t    return count\n  \n\t    \n\t    \n\t\t\t  \n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g = sorted(g)\n\t    s = sorted(s)\n\t    result = 0\n\t    i = 0\n\t    j = 0\n\t    while i<len(g) and j< len(s):\n\t\t   if g[i]<= s[j]:\n\t\t\t  result = result + 1\n\t\t\t  i = i+1\n\t\t\t  j = j+1\n\t\t   else:\n\t\t\t  j = j+1\n\t    return result\n\t    \n\t\t\t  \n", "class Solution:\n\t#     def findContentChildren(self, g, s):\n\t#         \"\"\"\n\t#         :type g: List[int]\n\t#         :type s: List[int]\n\t#         :rtype: int\n\t#         \"\"\"\n\t#         total = 1\n\t#         child_to_give = []\n\t#         child_index = 0\n\t#         s.sort()\n\t#         g.sort()\n\t#         for cookie in s:\n\t#             for child_greed in g:\n\t#                 print(\"child_greed \" + str(child_greed))\n\t#                 print(\"cookie \" + str(cookie))\n\t#                 if child_greed <= cookie:\n\t#                     if child_index not in child_to_give:\n\t#                         child_to_give.append(child_index)\n\t#                         g.remove(child_greed)  \n\t\n\t#                 child_index += 1        \n\t\t\t\t\t\t\t\t\t\n\t#         return len(child_to_give)\n\t\n\t\t\t\t\tdef findContentChildren(self, g, s):\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t:type g: List[int]\n\t\t\t\t\t\t\t\t\t:type s: List[int]\n\t\t\t\t\t\t\t\t\t:rtype: int\n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\ts.sort()\n\t\t\t\t\t\t\t\t\tg.sort()\n\t\t\t\t\t\t\t\t\ttotal = 1\n\t\t\t\t\t\t\t\t\tchild_to_give = []\n\t\t\t\t\t\t\t\t\tchild_index = 0\n\t\n\t\t\t\t\t\t\t\t\tstart_i = 0\n\t\t\t\t\t\t\t\t\tfor j in range(0, len(g)):\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor i in range(start_i, len(s)):      \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif s[i] >= g[j]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchild_to_give.append(j)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart_i = i + 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tprint(child_to_give)\n\t\t\t\t\t\t\t\t\treturn len(child_to_give)\n\t\t\t\t\t\n\t#     def findContentChildrenSlow(self, g, s):\n\t#         \"\"\"\n\t#         :type g: List[int]\n\t#         :type s: List[int]\n\t#         :rtype: int\n\t#         \"\"\"\n\t#         s.sort()\n\t#         g.sort()\n\t#         total = 1\n\t#         child_to_give = []\n\t#         child_index = 0\n\t#         for child_greed in g:\n\t#             # Find children greed less than or equal to cookie value\n\t#             for cookie in s:\n\t#                 if child_greed <= cookie:\n\t#                     # print(cookie)\n\t#                     # print(child_greed)\n\t#                     if child_index not in child_to_give:\n\t#                         child_to_give.append(child_index)\n\t#                         # g.remove(child_greed)  \n\t#                         s.remove(cookie)\n\t#                         # print(g)\n\t#                         # print(s)\n\t#                         # break\n\t#             child_index += 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t#         return len(child_to_give)\n\t#         # return 2\n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g.sort()\n\t    s.sort()\n\t    print(g)\n\t    print(s)\n\t    \n\t    count_child = 0\n\t    count_cookie = 0\n\t    \n\t    while(count_child < len(g) and count_cookie < len(s)):\n\t\t   if (g[count_child] <= s[count_cookie]):\n\t\t\t  count_child += 1\n\t\t   count_cookie += 1\n\t\t   \n\t    return count_child\n\t\n", "class Solution:\n\tdef findContentChildren(self, g, s):\n\t    \"\"\"\n\t    :type g: List[int]\n\t    :type s: List[int]\n\t    :rtype: int\n\t    \"\"\"\n\t    g.sort()\n\t    s.sort()\n\t    \n\t    index, result = 0, 0\n\t    while index < len(s) and len(g) > 0:\n\t\t   if s[index] >= g[0]:\n\t\t\t  result += 1\n\t\t\t  index += 1\n\t\t\t  g.remove(g[0])\n\t\t   else:\n\t\t\t  index += 1\n\t    return result\n\t\t   \n"], "id": "id7839"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7839", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["assume", 10], ["you", 10], ["are", 10], ["an", 10], ["awesome", 10], ["parent", 10], ["and", 10], ["want", 10], ["to", 10], ["give", 10], ["your", 10], ["children", 10], ["some", 10], ["cookies", 10], ["but", 10], ["you", 10], ["should", 10], ["give", 10], ["each", 10], ["child", 9], ["at", 9], ["most", 9], ["one", 9], ["cookie", 9], ["each", 9], ["child", 9], ["i", 9], ["has", 9], ["a", 9], ["greed", 9], ["factor", 9], ["gi", 9], ["which", 10], ["is", 10], ["the", 10], ["minimum", 10], ["size", 10], ["of", 10], ["a", 10], ["cookie", 10], ["that", 10], ["the", 10], ["child", 9], ["will", 9], ["be", 9], ["content", 9], ["with", 9], ["and", 9], ["each", 9], ["cookie", 9], ["j", 9], ["has", 9], ["a", 9], ["size", 9], ["sj", 9], ["if", 9], ["sj", 9], ["gi", 9], ["we", 10], ["can", 10], ["assign", 10], ["the", 10], ["cookie", 10], ["j", 10], ["to", 10], ["the", 10], ["child", 10], ["i", 10], ["and", 10], ["the", 10], ["child", 10], ["i", 10], ["will", 10], ["be", 10], ["content", 10], ["your", 10], ["goal", 10], ["is", 10], ["to", 10], ["maximize", 9], ["the", 9], ["number", 9], ["of", 9], ["your", 9], ["content", 9], ["children", 9], ["and", 9], ["output", 9], ["the", 9], ["maximum", 9], ["number", 9], ["note", 9], ["you", 11], ["may", 11], ["assume", 11], ["the", 11], ["greed", 11], ["factor", 11], ["is", 11], ["always", 8], ["positive", 8], ["you", 7], ["cannot", 7], ["assign", 7], ["more", 7], ["than", 7], ["one", 7], ["cookie", 7], ["to", 7], ["one", 7], ["child", 7], ["example", 7], ["1", 7], ["input", 7], ["1", 7], ["2", 7], ["3", 7], ["1", 7], ["1", 7], ["output", 7], ["1", 7], ["explanation", 9], ["you", 10], ["have", 10], ["3", 10], ["children", 10], ["and", 10], ["2", 9], ["cookies", 9], ["the", 9], ["greed", 9], ["factors", 9], ["of", 9], ["3", 9], ["children", 9], ["are", 9], ["1", 9], ["2", 9], ["3", 9], ["and", 9], ["even", 9], ["though", 9], ["you", 9], ["have", 9], ["2", 9], ["cookies", 9], ["since", 9], ["their", 9], ["size", 9], ["is", 9], ["both", 9], ["1", 9], ["you", 9], ["could", 9], ["only", 9], ["make", 9], ["the", 9], ["child", 7], ["whose", 7], ["greed", 7], ["factor", 7], ["is", 7], ["1", 7], ["content", 7], ["you", 7], ["need", 7], ["to", 7], ["output", 7], ["1", 7], ["example", 7], ["2", 7], ["input", 7], ["1", 7], ["2", 7], ["1", 7], ["2", 7], ["3", 7], ["output", 7], ["2", 7], ["explanation", 9], ["you", 10], ["have", 10], ["2", 10], ["children", 10], ["and", 9], ["3", 8], ["cookies", 8], ["the", 8], ["greed", 8], ["factors", 8], ["of", 8], ["2", 8], ["children", 8], ["are", 8], ["1", 8], ["2", 8], ["you", 9], ["have", 9], ["3", 9], ["cookies", 9], ["and", 9], ["their", 9], ["sizes", 9], ["are", 9], ["big", 9], ["enough", 0], ["to", 0], ["gratify", 0], ["all", 0], ["of", 0], ["the", 0], ["children", 0], ["you", 0], ["need", 0], ["to", 0], ["output", 0], ["2", 0], ["class", 0], ["solution", 0], ["def", 0], ["findcontentchildren", 0], ["self", 0], ["g", 0], ["list", 0], ["int", 0], ["s", 0], ["list", 0], ["int", 0], ["int", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8991228070175439, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.10304691653375844, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9041666666666667, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11504298941798909, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.868421052631579, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.10025584795321614, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9041666666666667, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11504298941798909, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 0], ["s", 0], ["type", 0], ["g", 0], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["res", 0], ["0", 0], ["heapq", 0], ["heapify", 0], ["g", 0], ["s", 0], ["sort", 0], ["for", 0], ["num", 0], ["in", 0], ["s", 0], ["if", 0], ["not", 0], ["g", 0], ["break", 0], ["elif", 0], ["g", 0], ["0", 0], ["num", 0], ["res", 0], ["1", 0], ["heapq", 0], ["heappop", 0], ["g", 0], ["return", 0], ["res", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 1], ["type", 1], ["g", 1], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sort", 0], ["s", 0], ["sort", 0], ["res", 0], ["0", 0], ["lg", 0], ["ls", 0], ["len", 0], ["g", 0], ["len", 0], ["s", 0], ["i", 0], ["j", 0], ["0", 0], ["while", 0], ["i", 0], ["lg", 0], ["and", 0], ["j", 0], ["ls", 0], ["if", 0], ["s", 0], ["j", 0], ["g", 0], ["i", 0], ["res", 0], ["1", 0], ["j", 0], ["1", 0], ["i", 0], ["1", 0], ["else", 0], ["j", 0], ["1", 0], ["return", 0], ["res", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 1], ["type", 1], ["g", 1], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sort", 0], ["s", 0], ["sort", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["happykids", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["g", 0], ["and", 0], ["j", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["j", 0], ["g", 0], ["i", 0], ["happykids", 0], ["1", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["return", 0], ["happykids", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 1], ["type", 1], ["g", 1], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sort", 0], ["s", 0], ["sort", 0], ["count", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["count", 0], ["len", 0], ["g", 0], ["and", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["g", 0], ["count", 0], ["count", 0], ["1", 0], ["i", 0], ["1", 0], ["return", 0], ["count", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 0], ["type", 0], ["g", 0], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sorted", 0], ["g", 0], ["s", 0], ["sorted", 0], ["s", 0], ["result", 0], ["0", 0], ["i", 0], ["0", 0], ["j", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["g", 0], ["and", 0], ["j", 0], ["len", 0], ["s", 0], ["if", 0], ["g", 0], ["i", 0], ["s", 0], ["j", 0], ["result", 0], ["result", 0], ["1", 0], ["i", 0], ["i", 0], ["1", 0], ["j", 0], ["j", 0], ["1", 0], ["else", 0], ["j", 0], ["j", 0], ["1", 0], ["return", 0], ["result", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 0], ["s", 0], ["type", 0], ["g", 0], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["total", 0], ["1", 0], ["child", 0], ["to", 0], ["give", 0], ["child", 0], ["index", 0], ["0", 0], ["s", 0], ["sort", 0], ["g", 0], ["sort", 0], ["for", 0], ["cookie", 0], ["in", 0], ["s", 0], ["for", 0], ["child", 0], ["greed", 0], ["in", 0], ["g", 0], ["print", 0], ["child", 0], ["greed", 0], ["str", 0], ["child", 0], ["greed", 0], ["print", 0], ["cookie", 0], ["str", 0], ["cookie", 0], ["if", 0], ["child", 0], ["greed", 0], ["cookie", 0], ["if", 0], ["child", 0], ["index", 0], ["not", 0], ["in", 0], ["child", 0], ["to", 0], ["give", 0], ["child", 0], ["to", 0], ["give", 0], ["append", 0], ["child", 0], ["index", 0], ["g", 0], ["remove", 0], ["child", 0], ["greed", 0], ["child", 0], ["index", 0], ["1", 0], ["return", 0], ["len", 0], ["child", 0], ["to", 0], ["give", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 0], ["s", 0], ["type", 0], ["g", 0], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["s", 0], ["sort", 0], ["g", 0], ["sort", 0], ["total", 0], ["1", 0], ["child", 0], ["to", 0], ["give", 0], ["child", 0], ["index", 0], ["0", 0], ["start", 0], ["i", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["g", 0], ["j", 0], ["child", 0], ["to", 0], ["give", 0], ["append", 0], ["j", 0], ["start", 0], ["i", 0], ["i", 0], ["1", 0], ["break", 0], ["print", 0], ["child", 0], ["to", 0], ["give", 0], ["return", 0], ["len", 0], ["child", 0], ["to", 0], ["give", 0], ["def", 0], ["findcontentchildrenslow", 0], ["self", 1], ["g", 0], ["s", 0], ["type", 0], ["g", 0], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["s", 0], ["sort", 0], ["g", 0], ["sort", 0], ["total", 0], ["1", 0], ["child", 0], ["to", 0], ["give", 0], ["child", 0], ["index", 0], ["0", 0], ["for", 0], ["child", 0], ["greed", 0], ["in", 0], ["g", 0], ["find", 0], ["children", 0], ["greed", 0], ["less", 0], ["than", 0], ["or", 0], ["equal", 0], ["to", 0], ["cookie", 0], ["value", 0], ["for", 0], ["cookie", 0], ["in", 0], ["s", 0], ["if", 0], ["child", 0], ["greed", 0], ["cookie", 0], ["print", 0], ["cookie", 0], ["print", 0], ["child", 0], ["greed", 0], ["if", 0], ["child", 0], ["index", 0], ["not", 0], ["in", 0], ["child", 0], ["to", 0], ["give", 0], ["child", 0], ["to", 0], ["give", 0], ["append", 0], ["child", 0], ["index", 0], ["g", 0], ["remove", 0], ["child", 0], ["greed", 0], ["s", 0], ["remove", 0], ["cookie", 0], ["print", 0], ["g", 0], ["print", 0], ["s", 0], ["break", 0], ["child", 0], ["index", 0], ["1", 0], ["return", 0], ["len", 0], ["child", 0], ["to", 0], ["give", 0], ["return", 0], ["2", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 1], ["type", 1], ["g", 1], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sort", 0], ["s", 0], ["sort", 0], ["print", 0], ["g", 0], ["print", 0], ["s", 0], ["count", 0], ["child", 0], ["0", 0], ["count", 0], ["cookie", 0], ["0", 0], ["while", 0], ["count", 0], ["child", 0], ["len", 0], ["g", 0], ["and", 0], ["count", 0], ["cookie", 0], ["len", 0], ["s", 0], ["if", 0], ["g", 0], ["count", 0], ["child", 0], ["s", 0], ["count", 0], ["cookie", 0], ["count", 0], ["child", 0], ["1", 0], ["count", 0], ["cookie", 0], ["1", 0], ["return", 0], ["count", 0], ["child", 0], ["class", 0], ["solution", 0], ["def", 1], ["findcontentchildren", 1], ["self", 1], ["g", 1], ["s", 1], ["type", 1], ["g", 1], ["list", 0], ["int", 0], ["type", 0], ["s", 0], ["list", 0], ["int", 0], ["rtype", 0], ["int", 0], ["g", 0], ["sort", 0], ["s", 0], ["sort", 0], ["index", 0], ["result", 0], ["0", 0], ["0", 0], ["while", 0], ["index", 0], ["len", 0], ["s", 0], ["and", 0], ["len", 0], ["g", 0], ["0", 0], ["if", 0], ["s", 0], ["index", 0], ["g", 0], ["0", 0], ["result", 0], ["1", 0], ["index", 0], ["1", 0], ["g", 0], ["remove", 0], ["g", 0], ["0", 0], ["else", 0], ["index", 0], ["1", 0], ["return", 0], ["result", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08433734939759036, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08433734939759036, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.28499156829679595, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.28499156829679595, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08433734939759036, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08433734939759036, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.28499156829679595, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.28499156829679595, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nIt was decided in IT City to distinguish successes of local IT companies by awards in the form of stars covered with gold from one side. To order the stars it is necessary to estimate order cost that depends on the area of gold-plating. Write a program that can calculate the area of a star.\n\nA \"star\" figure having n ≥ 5 corners where n is a prime number is constructed the following way. On the circle of radius r n points are selected so that the distances between the adjacent ones are equal. Then every point is connected by a segment with two maximally distant points. All areas bounded by the segments parts are the figure parts. [Image] \n\n\n-----Input-----\n\nThe only line of the input contains two integers n (5 ≤ n < 10^9, n is prime) and r (1 ≤ r ≤ 10^9) — the number of the star corners and the radius of the circumcircle correspondingly.\n\n\n-----Output-----\n\nOutput one number — the star area. The relative error of your answer should not be greater than 10^{ - 7}.\n\n\n-----Examples-----\nInput\n7 10\n\nOutput\n108.395919545675\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from math import sin, cos, pi\n\nn, r = map(int, input().split())\n\nprint(n * r**2 * sin(pi / n) * cos(pi * (n // 2) / n) / cos(pi * (n // 2 - 1) / n))\n", "import math\nn, R = [int(x) for x in input().split()]\nphi = math.pi/(2*n)\nA = math.sin(2*phi) * (math.cos(2*phi) - math.sin(2*phi) * math.tan(math.pi/2 - 3*phi))\nprint(n*R*R*A)\n\n\n", "3\n\nimport math\n# from matplotlib import pyplot as plt\n\nclass Vector:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\n\tdef length(self):\n\t\treturn math.hypot(self.x, self.y)\n\n\tdef dot(self, other):\n\t\treturn self.x * other.x + self.y * other.y\n\n\tdef angleWith(self, other):\n\t\treturn math.acos( self.dot(other) / (self.length() * other.length()) )\n\n\tdef normalize(self):\n\t\tself /= self.length()\n\n\tdef normalized(self):\n\t\treturn self / self.length()\n\n\tdef rotate(self, angle):\n\t\tsine = math.sin(angle)\n\t\tcosine = math.cos(angle)\n\t\tx = self.x * cosine - self.y * sine\n\t\ty = self.x * sine + self.y * cosine\n\n\t\tself.x = x\n\t\tself.y = y\n\n\tdef rotated(self, angle):\n\t\tsine = math.sin(angle)\n\t\tcosine = math.cos(angle)\n\t\tx = self.x * cosine - self.y * sine\n\t\ty = self.x * sine + self.y * cosine\n\n\t\treturn Vector(x, y)\n\n\tdef __iadd__(self, other):\n\t\tself.x += other.x\n\t\tself.y += other.y\n\t\treturn self\n\n\tdef __isub__(self, other):\n\t\tself.x -= other.x\n\t\tself.y -= other.y\n\t\treturn self\n\n\tdef __add__(self, other):\n\t\treturn Vector(self.x + other.x, self.y + other.y)\n\n\tdef __sub__(self, other):\n\t\treturn Vector(self.x - other.x, self.y - other.y)\n\n\tdef __imul__(self, other):\n\t\tself.x *= other\n\t\tself.y *= other\n\t\treturn self\n\n\tdef __itruediv__(self, other):\n\t\tself.x /= other\n\t\tself.y /= other\n\t\treturn self\n\n\tdef  __mul__(self, other):\n\t\treturn Vector(self.x * other, self.y * other)\n\n\tdef __truediv__(self, other):\n\t\treturn Vector(self.x / other, self.y / other)\n\n\tdef __neg__(self):\n\t\treturn Vector(-self.x, -self.y)\n\n\tdef __str__(self):\n\t\treturn str(self.x) + ' ' + str(self.y)\n\t\t# return \"{:.2f} {:.2f}\".format(self.x, self.y)\n\ndef point_coord(n, r, i):\n\td_angle = 2*math.pi / n\n\n\treturn Vector(0, r).rotated(-i*d_angle)\n\n# def line_intersection(p0, p1, p2, p3):\n# \t# xdiff = (line1[0][0] - line1[1][0], line2[0][0] - line2[1][0])\n# \t# ydiff = (line1[0][1] - line1[1][1], line2[0][1] - line2[1][1])\n\n# \tdx = (p0.x - p2.x, p1.x - p3.x)\n# \tdy = (p0.y - p2.y, p1.y - p3.y)\n\n# \tdef det(a, b):\n# \t\treturn a[0] * b[1] - a[1] * b[0]\n\n# \tdiv = det(dx, dy)\n# \tif div == 0:\n# \t\traise Exception('lines do not intersect')\n\n# \tline1 = ((p0.x, p0.y), (p1.x, p1.y))\n# \tline2 = ((p2.x, p2.y), (p3.x, p3.y))\n\n# \td = ( det(*line1), det(*line2) )\n\n# \tx = det(d, dx) / div\n# \ty = det(d, dy) / div\n# \treturn Vector(x, y)\n\ndef line_intersection(line1, line2):\n\txdiff = (line1[0][0] - line1[1][0], line2[0][0] - line2[1][0])\n\tydiff = (line1[0][1] - line1[1][1], line2[0][1] - line2[1][1]) #Typo was here\n\n\tdef det(a, b):\n\t\treturn a[0] * b[1] - a[1] * b[0]\n\n\tdiv = det(xdiff, ydiff)\n\tif div == 0:\n\t\traise Exception('lines do not intersect')\n\n\td = (det(*line1), det(*line2))\n\tx = det(d, xdiff) / div\n\ty = det(d, ydiff) / div\n\treturn x, y\n\n# print(line_intersection(((0,0), (4,4)), ((1,3), (3,1))))\n# print(line_intersection(Vector(0,0), Vector(4,4), Vector(1,3), Vector(3,1)))\n\nn, r = [int(i) for i in input().split()]\n\n# n = 7\n# r = 10\n\nfrom1 = 0\nfrom2 = 1\nto1 = n//2\nto2 = to1 + 2\n\n# p = []\n# for i in range(n):\n# \tp.append(point_coord(n, r, i))\n\n# x = [i.x for i in p]\n# y = [i.y for i in p]\n\n# plt.scatter(x, y)\n# plt.axis('equal')\n# plt.show()\n\np0 = point_coord(n, r, from1)\np1 = point_coord(n, r, from2)\np2 = point_coord(n, r, to1)\np3 = point_coord(n, r, to2)\n\n# plt.plot([p0.x, p2.x], [p0.y, p2.y])\n# plt.plot([p1.x, p3.x], [p1.y, p3.y])\n\n# print(p0)\n# print(p1)\n# print(p2)\n# print(p3)\n\nv1 = p2 - p0\nv2 = p3 - p1\n\n# phi = v1.angleWith(v2)\n# # omega = math.pi - phi\n# print(phi)\n\nline1 = ((p0.x, p0.y), (p2.x, p2.y))\nline2 = ((p1.x, p1.y), (p3.x, p3.y))\n\n# p_int =line_intersection(p0, p1, p2, p3)\nx,y =line_intersection(line1, line2)\np_int = Vector(x, y)\n# print(p_int)\n# plt.scatter([p_int.x], [p_int.y], c='r')\n# plt.show()\n\na = p_int.length()\n# print(a)\ntheta = math.pi / n\n# print(theta)\ns = 0.5*r*a*math.sin(theta)\nprint(2*n*s)\n\n# print(p_int)\n# print(p0)\n# print(p_int - p0)\n# print(d)\n# print()\n\n# s = 0.5 * d * d * phi\n# print(s)\n# print(math.pi*r*r - n*s)\n", "import math\nn, R = [int(x) for x in input().split()]\nphi = math.pi/(2*n)\nA = math.sin(2*phi) * (math.cos(2*phi) - math.sin(2*phi) * math.tan(math.pi/2 - 3*phi))\nprint(n*R*R*A)\n", "import math\nn,r = list(map(int,input().split()))\na = math.pi/n\nb = a/2\nc = math.pi-a-b\nside = r*math.sin(a)/(2*math.sin(c))\narea = 0.5*math.sin(b)*side*r*n*4\nprint(area)\n", "import math\n\nn, r = list(map(float, input().split()))\n\npi = math.pi\n\npart = pi / n\ns = n * r * r * math.sin(2. * part) / 2.\nbad = n * (math.sin(part) * r) ** 2 * math.tan(pi / 2. - 1.5 * part)\n\nprint(s - bad)\n", "from math import sin, cos, pi\n\nn, r = map(int, input().split())\n\nprint(n * r ** 2 * sin(pi / n) * cos(pi * (n // 2) / n) / cos(pi * (n // 2 - 1) / n))\n", "from decimal import *\nfrom math import sin , pi , sqrt\n\ndef getRadian( x ):\n\treturn x*Decimal(pi)/180\n\ndef area( a , b , c ):\n\n\tp = (a+b+c)/2\n\treturn Decimal( sqrt( p*(p-a)*(p-b)*(p-c) ) )\n\ndef __starting_point():\n\n\tgetcontext().prec = 100\n\tn , r = map( Decimal , input().split() )\n\n\tbeta = 90/n\n\tbeta_radian = getRadian( beta )\n\t#print( beta_radian )\n\n\tgamma = 180/n\n\tgamma_radian = getRadian( gamma )\n\t#print( gamma_radian )\n\n\tS = r*r*Decimal(sin(beta_radian))*Decimal(sin(gamma_radian))/Decimal(sin(beta_radian+gamma_radian))\n\tprint(n*S)\n__starting_point()\n", "from math import sin, cos, pi\n\nn, r = map(int, input().split())\n\nprint(n * r**2 * sin(pi / n) * cos(pi * (n // 2) / n) / cos(pi * (n // 2 - 1) / n))\n", "import math\n\nn, r = list(map(int, input().split(' ')))\n\nalpha = math.pi/n/2\nbeta = math.pi/n\ngamma = math.pi-alpha-beta\n\nprint(r*r*math.sin(alpha)*math.sin(beta)/math.sin(gamma)*n)\n", "import math\nn, r = list(map(int, input().split()))\na = math.pi / n\nb = a / 2\nprint(r * math.sin(b) / math.sin(math.pi - a - b) * math.sin(a) * r * n)\n                               \n", "import math\nn, r = list(map(int, input().split()))\n\nX = 2 * r * math.sin(math.pi / n)\nY = X * math.sin(math.pi * (n - 3) / (2 * n)) / math.sin(3 * math.pi / n)\n\nS1 = 1 / 2 * Y * Y * math.sin(3 * math.pi / n)\nS2 = r * r * (math.pi / n - 1 / 2 * math.sin(2 * math.pi / n))\nans = math.pi * r * r - n * (S1 + S2)\nprint(ans)\n", "import math\nPI = math.acos(-1)\n\nn, R = list(map(int, input().split()))\nag = 2*PI / n\nL = 2 * math.sin(ag/2) * R\n\nSP = n * L / 2 * R * math.cos(ag/2) \n\nang = (PI - ag - ag / 2) / 2\nS = L**2 / 4 * math.tan(ang)\nSS = SP - S * n\nprint(\"%.10f\" % SS)\n    \n", "from sys import stdin\nfrom math import pi, sin, tan\nn, r = map(int, stdin.readline().split())\na = 2*pi/n\nA = r*r/2 * (a - sin(a))\nc = n//2 * 2*pi/n\nb = (c-a)/2\ns = 2*r*sin(a/2)\nh = tan(b)*s/2\nA = A + h*s/2\nresult = pi*r*r - n*A\nprint(result)\n", "import math\n\np,r = list(map(int,input().split() ))\n\nprint((math.sin(math.pi/p)**2 /math.tan(1.5*math.pi/p) - math.sin(2*math.pi/p)/2)*-r*r*p)\n", "import math\n\nn, r = list(map(int, input().split()))\nprint(n * r * r / (1 / math.tan(math.pi / (2*n)) + 1 / math.tan(math.pi/n)))\n", "import math\nPi = math.pi\nn, r = list(map(float, input().split()))\nx = math.tan (Pi / n)\ny = math.tan (Pi / n / 2)\nbase = r / (1 / x + 1 / y)\nprint(n * r * base)\n", "import math\nln = input().split(\" \")\nn = int(ln[0])\nr = int(ln[1])\n\ntot_area = n / 2 * (math.sin(2 * math.pi / n)) * r * r\n\nif n < 10 ** 6:\n\tx = (1 - math.cos(2 * math.pi / n)) / (1 - math.cos(3 * math.pi / n))\nelse:\n\tx = 4 / 9\nx *= r ** 2\n\nsmall_area = n / 2 * math.sin(3 * math.pi / n) * x\n\nprint(tot_area - small_area)\n", "from math import sin, sqrt, radians\n\nn, r = map(int, input().split())\n\no = 360 / (n * 2)\na = o / 2\nc = 180 - o - a\n\nA = (r * sin(radians(a))) / sin(radians(c))\nO = (r * sin(radians(o))) / sin(radians(c))\n\nS = (A + O + r) / 2\n\narea = 0.5 * A * r * sin(radians(o))\nprint(2 * n * area)\n", "from math import*\nn, r = map(int, input().split())\nx=360/n\na=x/4/180*pi\nb=x*3/4/180*pi\nx=tan(a)\ny=tan(b)\nS = (r**2)*sin(a)*cos(a)/2\nS1 = (r*sin(a)/tan(b))*r*sin(a)/2\nS2=S-S1\nprint(S2*2*n)\n", "from math import pi, sin, tan\n\n\ndef zvezda(n, r):\n\talpha = (2 * pi) / n\n\ts1 = r * r * sin(alpha * 0.5) * sin(alpha * 0.5) / tan(0.5 * (alpha + 0.5 * alpha))\n\ts2 = 0.5 * (alpha - sin(alpha)) * r * r\n\ts3 = pi * r * r\n\treturn format(s3 - n * (s2 + s1), '.10f')\n\n\nN, R = [int(j) for j in input().split()]\nprint(zvezda(N, R))\n", "from math import *\n\npi = 3.141592653589793238462643383279502884197\nn, r = list(map(int, input().split()))\n\na = tan(pi/(2*n))\nb = tan(pi/n)\na = 1/a + 1/b\nprint(r*r/a*n)\n", "#More es mi pastor nada me faltara\nimport math\nln = input().split(\" \")\nn = int(ln[0])\nr = int(ln[1])\ntot_area = n / 2 * (math.sin(2 * math.pi / n)) * r * r\nif n < 10 ** 6:\n\tx = (1 - math.cos(2 * math.pi / n)) / (1 - math.cos(3 * math.pi / n))\nelse:\n\tx = 4 / 9\nx *= r ** 2\nsmall_area = n / 2 * math.sin(3 * math.pi / n) * x\nprint(tot_area - small_area)\n", "from math import *\n\nN, R = list(map(int, input().split()))\n\ndef get(i):\n\ttheta = 2 * pi / N * i\n\treturn R * cos(theta), R * sin(theta)\n\ndef line(p, q):\n\tm = (q[1] - p[1]) / (q[0] - p[0])\n\tb = p[1] - m * p[0]\n\treturn (m, b)\n\ndef intersect(l1, l2):\n\tx = (l1[1] - l2[1]) / (l2[0] - l1[0])\n\ty = l1[0] * x + l1[1]\n\treturn (x, y)\n\ndef dist(p, q):\n\treturn sqrt((p[0] - q[0])**2 + (p[1] - q[1])**2)\n\np0 = get(0)\np1 = get(N // 2)\n\np2 = get(1)\np3 = get(N // 2 + 2)\n\np4 = intersect(line(p0, p1), line(p2, p3))\n\nmidpt = (p0[0] + p2[0]) / 2, (p0[1] + p2[1]) / 2\n\nh1 = dist(midpt, p4)\nh2 = dist(midpt, (0, 0))\n\narea = 0.5 * (h2 - h1) * dist(p0, p2)\n\nprint(area * N)\n", "import os, sys, pdb\nimport time, calendar, datetime\nimport math, itertools\nimport operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n\tr = min(r, n-r)\n\tnumer = reduce(op.mul, list(range(n, n-r, -1)), 1)\n\tdenom = reduce(op.mul, list(range(1, r+1)), 1)\n\treturn numer // denom\n\nn, r = list(map(int, input().split()))\ns = 2 * r * math.sin(math.pi / n)\nApoly = 1 / (4 * math.tan(math.pi / n))\nAsub  = math.tan(math.pi * (1/2 - 3/(2*n))) / 4\n\nprint(n*s**2*(Apoly - Asub))\n\n\n"], "id": "id5641"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5641", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["it", 1], ["was", 1], ["decided", 1], ["in", 1], ["it", 1], ["city", 1], ["to", 1], ["distinguish", 1], ["successes", 1], ["of", 1], ["local", 1], ["it", 1], ["companies", 1], ["by", 1], ["awards", 1], ["in", 1], ["the", 1], ["form", 1], ["of", 1], ["stars", 1], ["covered", 1], ["with", 1], ["gold", 1], ["from", 1], ["one", 1], ["side", 1], ["to", 1], ["order", 1], ["the", 1], ["stars", 1], ["it", 1], ["is", 1], ["necessary", 1], ["to", 1], ["estimate", 1], ["order", 1], ["cost", 1], ["that", 1], ["depends", 1], ["on", 1], ["the", 1], ["area", 1], ["of", 1], ["gold", 1], ["plating", 1], ["write", 1], ["a", 1], ["program", 1], ["that", 1], ["can", 1], ["calculate", 1], ["the", 1], ["area", 1], ["of", 1], ["a", 1], ["star", 1], ["a", 1], ["star", 1], ["figure", 1], ["having", 1], ["n", 1], ["≥", 1], ["5", 1], ["corners", 1], ["where", 1], ["n", 1], ["is", 1], ["a", 1], ["prime", 1], ["number", 1], ["is", 1], ["constructed", 1], ["the", 1], ["following", 1], ["way", 1], ["on", 1], ["the", 1], ["circle", 1], ["of", 1], ["radius", 1], ["r", 1], ["n", 1], ["points", 1], ["are", 1], ["selected", 1], ["so", 1], ["that", 1], ["the", 1], ["distances", 1], ["between", 1], ["the", 1], ["adjacent", 1], ["ones", 1], ["are", 1], ["equal", 1], ["then", 1], ["every", 1], ["point", 1], ["is", 1], ["connected", 1], ["by", 1], ["a", 1], ["segment", 1], ["with", 1], ["two", 1], ["maximally", 1], ["distant", 1], ["points", 0], ["all", 0], ["areas", 0], ["bounded", 0], ["by", 0], ["the", 0], ["segments", 0], ["parts", 0], ["are", 0], ["the", 0], ["figure", 0], ["parts", 0], ["image", 0], ["input", 0], ["the", 1], ["only", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["5", 0], ["≤", 0], ["n", 0], ["10", 0], ["9", 0], ["n", 0], ["is", 0], ["prime", 0], ["and", 0], ["r", 0], ["1", 0], ["≤", 0], ["r", 0], ["≤", 0], ["10", 0], ["9", 0], ["—", 1], ["the", 1], ["number", 1], ["of", 0], ["the", 0], ["star", 0], ["corners", 0], ["and", 0], ["the", 0], ["radius", 0], ["of", 0], ["the", 0], ["circumcircle", 0], ["correspondingly", 0], ["output", 0], ["output", 1], ["one", 1], ["number", 1], ["—", 1], ["the", 1], ["star", 1], ["area", 1], ["the", 1], ["relative", 0], ["error", 0], ["of", 0], ["your", 0], ["answer", 0], ["should", 0], ["not", 0], ["be", 0], ["greater", 0], ["than", 0], ["10", 0], ["7", 0], ["examples", 0], ["input", 0], ["7", 0], ["10", 0], ["output", 0], ["108", 0], ["395919545675", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6329787234042553, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6329787234042553, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.835, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.835, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6329787234042553, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6329787234042553, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.835, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.835, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["math", 0], ["import", 0], ["sin", 0], ["cos", 0], ["pi", 0], ["n", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["n", 0], ["r", 0], ["2", 0], ["sin", 0], ["pi", 0], ["n", 0], ["cos", 0], ["pi", 0], ["n", 0], ["2", 0], ["n", 0], ["cos", 0], ["pi", 0], ["n", 0], ["2", 0], ["1", 0], ["n", 0], ["import", 0], ["math", 0], ["n", 0], ["r", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["phi", 0], ["math", 0], ["pi", 0], ["2", 0], ["n", 0], ["a", 0], ["math", 0], ["sin", 0], ["2", 0], ["phi", 0], ["math", 0], ["cos", 0], ["2", 0], ["phi", 0], ["math", 0], ["sin", 0], ["2", 0], ["phi", 0], ["math", 0], ["tan", 0], ["math", 0], ["pi", 0], ["2", 0], ["3", 0], ["phi", 0], ["print", 0], ["n", 0], ["r", 0], ["r", 0], ["a", 0], ["3", 0], ["import", 0], ["math", 0], ["from", 0], ["matplotlib", 0], ["import", 0], ["pyplot", 0], ["as", 0], ["plt", 0], ["class", 17], ["vector", 18], ["def", 0], ["init", 0], ["self", 0], ["x", 0], ["y", 0], ["self", 0], ["x", 0], ["x", 0], ["self", 0], ["y", 0], ["y", 0], ["def", 0], ["length", 0], ["self", 0], ["return", 0], ["math", 0], ["hypot", 0], ["self", 0], ["x", 0], ["self", 0], ["y", 0], ["def", 9], ["dot", 4], ["self", 0], ["other", 0], ["return", 0], ["self", 0], ["x", 0], ["other", 0], ["x", 0], ["self", 0], ["y", 0], ["other", 0], ["y", 0], ["def", 0], ["anglewith", 0], ["self", 0], ["other", 0], ["return", 0], ["math", 0], ["acos", 0], ["self", 0], ["dot", 0], ["other", 0], ["self", 0], ["length", 0], ["other", 0], ["length", 0], ["def", 0], ["normalize", 0], ["self", 0], ["self", 0], ["self", 0], ["length", 0], ["def", 0], ["normalized", 0], ["self", 0], ["return", 0], ["self", 0], ["self", 0], ["length", 0], ["def", 0], ["rotate", 0], ["self", 0], ["angle", 0], ["sine", 0], ["math", 0], ["sin", 0], ["angle", 0], ["cosine", 0], ["math", 0], ["cos", 0], ["angle", 0], ["x", 0], ["self", 0], ["x", 0], ["cosine", 0], ["self", 0], ["y", 0], ["sine", 0], ["y", 0], ["self", 0], ["x", 0], ["sine", 0], ["self", 0], ["y", 0], ["cosine", 0], ["self", 0], ["x", 0], ["x", 0], ["self", 0], ["y", 0], ["y", 0], ["def", 0], ["rotated", 0], ["self", 0], ["angle", 0], ["sine", 0], ["math", 0], ["sin", 0], ["angle", 0], ["cosine", 0], ["math", 0], ["cos", 0], ["angle", 0], ["x", 0], ["self", 0], ["x", 0], ["cosine", 0], ["self", 0], ["y", 0], ["sine", 0], ["y", 0], ["self", 0], ["x", 0], ["sine", 0], ["self", 0], ["y", 0], ["cosine", 0], ["return", 0], ["vector", 0], ["x", 0], ["y", 0], ["def", 1], ["iadd", 1], ["self", 4], ["other", 1], ["self", 1], ["x", 1], ["other", 1], ["x", 1], ["self", 1], ["y", 1], ["other", 1], ["y", 1], ["return", 1], ["self", 1], ["def", 1], ["isub", 1], ["self", 4], ["other", 0], ["self", 0], ["x", 0], ["other", 0], ["x", 0], ["self", 0], ["y", 0], ["other", 0], ["y", 0], ["return", 0], ["self", 0], ["def", 4], ["add", 4], ["self", 2], ["other", 0], ["return", 0], ["vector", 0], ["self", 14], ["x", 0], ["other", 0], ["x", 0], ["self", 0], ["y", 0], ["other", 0], ["y", 1], ["def", 3], ["sub", 3], ["self", 2], ["other", 0], ["return", 0], ["vector", 0], ["self", 0], ["x", 0], ["other", 0], ["x", 0], ["self", 0], ["y", 0], ["other", 0], ["y", 0], ["def", 0], ["imul", 0], ["self", 0], ["other", 0], ["self", 0], ["x", 0], ["other", 0], ["self", 0], ["y", 0], ["other", 0], ["return", 0], ["self", 0], ["def", 0], ["itruediv", 0], ["self", 0], ["other", 0], ["self", 0], ["x", 0], ["other", 0], ["self", 0], ["y", 0], ["other", 0], ["return", 0], ["self", 0], ["def", 0], ["mul", 0], ["self", 0], ["other", 0], ["return", 0], ["vector", 0], ["self", 0], ["x", 0], ["other", 0], ["self", 0], ["y", 0], ["other", 0], ["def", 0], ["truediv", 0], ["self", 0], ["other", 0], ["return", 0], ["vector", 0], ["self", 0], ["x", 0], ["other", 0], ["self", 0], ["y", 0], ["other", 0], ["def", 0], ["neg", 0], ["self", 0], ["return", 0], ["vector", 0], ["self", 3], ["x", 3], ["self", 0], ["y", 0], ["def", 0], ["str", 0], ["self", 0], ["return", 0], ["str", 0], ["self", 0], ["x", 0], ["str", 0], ["self", 0], ["y", 0], ["return", 0], ["2f", 0], ["2f", 0], ["format", 0], ["self", 0], ["x", 0], ["self", 0], ["y", 0], ["def", 0], ["point", 0], ["coord", 0], ["n", 0], ["r", 0], ["i", 0], ["d", 0], ["angle", 0], ["2", 0], ["math", 0], ["pi", 0], ["n", 0], ["return", 0], ["vector", 0], ["0", 0], ["r", 0], ["rotated", 0], ["i", 0], ["d", 0], ["angle", 0], ["def", 0], ["line", 0], ["intersection", 0], ["p0", 0], ["p1", 0], ["p2", 0], ["p3", 0], ["xdiff", 4], ["line1", 4], ["0", 4], ["0", 4], ["line1", 4], ["1", 4], ["0", 4], ["line2", 4], ["0", 4], ["0", 4], ["line2", 4], ["1", 4], ["0", 4], ["ydiff", 4], ["line1", 0], ["0", 0], ["1", 0], ["line1", 0], ["1", 0], ["1", 0], ["line2", 0], ["0", 0], ["1", 0], ["line2", 0], ["1", 0], ["1", 0], ["dx", 0], ["p0", 0], ["x", 0], ["p2", 0], ["x", 0], ["p1", 0], ["x", 0], ["p3", 0], ["x", 0], ["dy", 0], ["p0", 0], ["y", 0], ["p2", 0], ["y", 0], ["p1", 0], ["y", 0], ["p3", 0], ["y", 0], ["def", 4], ["det", 3], ["a", 3], ["b", 0], ["return", 0], ["a", 0], ["0", 0], ["b", 0], ["1", 0], ["a", 0], ["1", 0], ["b", 0], ["0", 0], ["div", 0], ["det", 0], ["dx", 0], ["dy", 0], ["if", 0], ["div", 0], ["0", 0], ["raise", 0], ["exception", 0], ["lines", 0], ["do", 0], ["not", 0], ["intersect", 0], ["line1", 0], ["p0", 0], ["x", 0], ["p0", 0], ["y", 0], ["p1", 0], ["x", 0], ["p1", 0], ["y", 0], ["line2", 0], ["p2", 0], ["x", 0], ["p2", 0], ["y", 0], ["p3", 0], ["x", 0], ["p3", 0], ["y", 0], ["d", 0], ["det", 0], ["line1", 0], ["det", 0], ["line2", 0], ["x", 0], ["det", 0], ["d", 0], ["dx", 0], ["div", 0], ["y", 0], ["det", 0], ["d", 0], ["dy", 0], ["div", 0], ["return", 0], ["vector", 0], ["x", 0], ["y", 0], ["def", 2], ["line", 2], ["intersection", 2], ["line1", 2], ["line2", 3], ["xdiff", 4], ["line1", 4], ["0", 4], ["0", 4], ["line1", 4], ["1", 4], ["0", 4], ["line2", 4], ["0", 4], ["0", 4], ["line2", 4], ["1", 4], ["0", 4], ["ydiff", 4], ["line1", 1], ["0", 1], ["1", 1], ["line1", 1], ["1", 1], ["1", 1], ["line2", 1], ["0", 1], ["1", 1], ["line2", 1], ["1", 1], ["1", 1], ["typo", 1], ["was", 1], ["here", 1], ["def", 4], ["det", 3], ["a", 3], ["b", 3], ["return", 3], ["a", 3], ["0", 3], ["b", 3], ["1", 1], ["a", 1], ["1", 1], ["b", 1], ["0", 1], ["div", 1], ["det", 1], ["xdiff", 1], ["ydiff", 1], ["if", 1], ["div", 1], ["0", 1], ["raise", 1], ["exception", 1], ["lines", 1], ["do", 1], ["not", 1], ["intersect", 1], ["d", 4], ["det", 4], ["line1", 4], ["det", 3], ["line2", 3], ["x", 3], ["det", 0], ["d", 0], ["xdiff", 0], ["div", 0], ["y", 0], ["det", 0], ["d", 0], ["ydiff", 0], ["div", 0], ["return", 0], ["x", 0], ["y", 0], ["print", 0], ["line", 0], ["intersection", 0], ["0", 0], ["0", 0], ["4", 0], ["4", 0], ["1", 0], ["3", 0], ["3", 0], ["1", 0], ["print", 0], ["line", 0], ["intersection", 0], ["vector", 0], ["0", 0], ["0", 0], ["vector", 0], ["4", 0], ["4", 0], ["vector", 0], ["1", 0], ["3", 0], ["vector", 0], ["3", 0], ["1", 0], ["n", 0], ["r", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["7", 0], ["r", 0], ["10", 0], ["from1", 0], ["0", 0], ["from2", 0], ["1", 0], ["to1", 0], ["n", 0], ["2", 0], ["to2", 0], ["to1", 0], ["2", 0], ["p", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["p", 0], ["append", 0], ["point", 0], ["coord", 0], ["n", 0], ["r", 0], ["i", 0], ["x", 0], ["i", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["p", 0], ["y", 0], ["i", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["p", 0], ["plt", 0], ["scatter", 0], ["x", 0], ["y", 0], ["plt", 0], ["axis", 0], ["equal", 0], ["plt", 0], ["show", 0], ["p0", 0], ["point", 0], ["coord", 0], ["n", 0], ["r", 0], ["from1", 0], ["p1", 0], ["point", 0], ["coord", 0], ["n", 0], ["r", 0], ["from2", 0], ["p2", 0], ["point", 0], ["coord", 0], ["n", 0], ["r", 0], ["to1", 0], ["p3", 0], ["point", 0], ["coord", 0], ["n", 0], ["r", 0], ["to2", 0], ["plt", 0], ["plot", 0], ["p0", 0], ["x", 0], ["p2", 0], ["x", 0], ["p0", 0], ["y", 0], ["p2", 0], ["y", 0], ["plt", 0], ["plot", 0], ["p1", 0], ["x", 0], ["p3", 0], ["x", 0], ["p1", 0], ["y", 0], ["p3", 0], ["y", 0], ["print", 0], ["p0", 0], ["print", 0], ["p1", 0], ["print", 0], ["p2", 0], ["print", 0], ["p3", 0], ["v1", 0], ["p2", 0], ["p0", 0], ["v2", 0], ["p3", 0], ["p1", 0], ["phi", 0], ["v1", 0], ["anglewith", 0], ["v2", 0], ["omega", 0], ["math", 0], ["pi", 0], ["phi", 0], ["print", 0], ["phi", 0], ["line1", 0], ["p0", 0], ["x", 0], ["p0", 0], ["y", 0], ["p2", 0], ["x", 0], ["p2", 0], ["y", 0], ["line2", 0], ["p1", 0], ["x", 0], ["p1", 0], ["y", 0], ["p3", 0], ["x", 0], ["p3", 0], ["y", 0], ["p", 0], ["int", 0], ["line", 0], ["intersection", 0], ["p0", 0], ["p1", 0], ["p2", 0], ["p3", 0], ["x", 0], ["y", 0], ["line", 0], ["intersection", 0], ["line1", 0], ["line2", 0], ["p", 0], ["int", 0], ["vector", 0], ["x", 0], ["y", 0], ["print", 0], ["p", 0], ["int", 0], ["plt", 0], ["scatter", 0], ["p", 0], ["int", 0], ["x", 0], ["p", 0], ["int", 0], ["y", 0], ["c", 0], ["r", 0], ["plt", 0], ["show", 0], ["a", 0], ["p", 0], ["int", 0], ["length", 0], ["print", 0], ["a", 0], ["theta", 0], ["math", 0], ["pi", 0], ["n", 0], ["print", 0], ["theta", 0], ["s", 0], ["0", 0], ["5", 0], ["r", 0], ["a", 0], ["math", 0], ["sin", 0], ["theta", 0], ["print", 0], ["2", 0], ["n", 0], ["s", 0], ["print", 0], ["p", 0], ["int", 0], ["print", 0], ["p0", 0], ["print", 0], ["p", 0], ["int", 0], ["p0", 0], ["print", 0], ["d", 0], ["print", 0], ["s", 0], ["0", 0], ["5", 0], ["d", 0], ["d", 0], ["phi", 0], ["print", 0], ["s", 0], ["print", 0], ["math", 0], ["pi", 0], ["r", 0], ["r", 0], ["n", 0], ["s", 0], ["import", 0], ["math", 0], ["n", 0], ["r", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["phi", 0], ["math", 0], ["pi", 0], ["2", 0], ["n", 0], ["a", 0], ["math", 0], ["sin", 0], ["2", 0], ["phi", 0], ["math", 0], ["cos", 0], ["2", 0], ["phi", 0], ["math", 0], ["sin", 0], ["2", 0], ["phi", 0], ["math", 0], ["tan", 0], ["math", 0], ["pi", 0], ["2", 0], ["3", 0], ["phi", 0], ["print", 0], ["n", 0], ["r", 0], ["r", 0], ["a", 0], ["import", 0], ["math", 0], ["n", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["math", 0], ["pi", 0], ["n", 0], ["b", 0], ["a", 0], ["2", 0], ["c", 0], ["math", 0], ["pi", 0], ["a", 0], ["b", 0], ["side", 0], ["r", 0], ["math", 0], ["sin", 0], ["a", 0], ["2", 0], ["math", 0], ["sin", 0], ["c", 0], ["area", 0], ["0", 0], ["5", 0], ["math", 0], ["sin", 0], ["b", 0], ["side", 0], ["r", 0], ["n", 0], ["4", 0], ["print", 0], ["area", 0], ["import", 0], ["math", 0], ["n", 0], ["r", 0], ["list", 0], ["map", 0], ["float", 0], ["input", 0], ["split", 0], ["pi", 0], ["math", 0], ["pi", 0], ["part", 0], ["pi", 0], ["n", 0], ["s", 0], ["n", 0], ["r", 0], ["r", 0], ["math", 0], ["sin", 0], ["2", 0], ["part", 0], ["2", 0], ["bad", 0], ["n", 0], ["math", 0], ["sin", 0], ["part", 0], ["r", 0], ["2", 0], ["math", 0], ["tan", 0], ["pi", 0], ["2", 0], ["1", 0], ["5", 0], ["part", 0], ["print", 0], ["s", 0], ["bad", 0], ["from", 0], ["math", 0], ["import", 0], ["sin", 0], ["cos", 0], ["pi", 0], ["n", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["n", 0], ["r", 0], ["2", 0], ["sin", 0], ["pi", 0], ["n", 0], ["cos", 0], ["pi", 0], ["n", 0], ["2", 0], ["n", 0], ["cos", 0], ["pi", 0], ["n", 0], ["2", 0], ["1", 0], ["n", 0], ["from", 0], ["decimal", 0], ["import", 0], ["from", 0], ["math", 0], ["import", 0], ["sin", 0], ["pi", 0], ["sqrt", 0], ["def", 0], ["getradian", 0], ["x", 0], ["return", 0], ["x", 0], ["decimal", 0], ["pi", 0], ["180", 0], ["def", 0], ["area", 0], ["a", 0], ["b", 0], ["c", 0], ["p", 0], ["a", 0], ["b", 0], ["c", 0], ["2", 0], ["return", 0], ["decimal", 0], ["sqrt", 0], ["p", 0], ["p", 0], ["a", 0], ["p", 0], ["b", 0], ["p", 0], ["c", 0], ["def", 0], ["starting", 0], ["point", 0], ["getcontext", 0], ["prec", 0], ["100", 0], ["n", 0], ["r", 0], ["map", 0], ["decimal", 0], ["input", 0], ["split", 0], ["beta", 0], ["90", 0], ["n", 0], ["beta", 0], ["radian", 0], ["getradian", 0], ["beta", 0], ["print", 0], ["beta", 0], ["radian", 0], ["gamma", 0], ["180", 0], ["n", 0], ["gamma", 0], ["radian", 0], ["getradian", 0], ["gamma", 0], ["print", 0], ["gamma", 0], ["radian", 0], ["s", 0], ["r", 0], ["r", 0], ["decimal", 0], ["sin", 0], ["beta", 0], ["radian", 0], ["decimal", 0], ["sin", 0], ["gamma", 0], ["radian", 0], ["decimal", 0], ["sin", 0], ["beta", 0], ["radian", 0], ["gamma", 0], ["radian", 0], ["print", 0], ["n", 0], ["s", 0], ["starting", 0], ["point", 0], ["from", 0], ["math", 0], ["import", 0], ["sin", 0], ["cos", 0], ["pi", 0], ["n", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["n", 0], ["r", 0], ["2", 0], ["sin", 0], ["pi", 0], ["n", 0], ["cos", 0], ["pi", 0], ["n", 0], ["2", 0], ["n", 0], ["cos", 0], ["pi", 0], ["n", 0], ["2", 0], ["1", 0], ["n", 0], ["import", 0], ["math", 0], ["n", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["alpha", 0], ["math", 0], ["pi", 0], ["n", 0], ["2", 0], ["beta", 0], ["math", 0], ["pi", 0], ["n", 0], ["gamma", 0], ["math", 0], ["pi", 0], ["alpha", 0], ["beta", 0], ["print", 0], ["r", 0], ["r", 0], ["math", 0], ["sin", 0], ["alpha", 0], ["math", 0], ["sin", 0], ["beta", 0], ["math", 0], ["sin", 0], ["gamma", 0], ["n", 0], ["import", 0], ["math", 0], ["n", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["math", 0], ["pi", 0], ["n", 0], ["b", 0], ["a", 0], ["2", 0], ["print", 0], ["r", 0], ["math", 0], ["sin", 0], ["b", 0], ["math", 0], ["sin", 0], ["math", 0], ["pi", 0], ["a", 0], ["b", 0], ["math", 0], ["sin", 0], ["a", 0], ["r", 0], ["n", 0], ["import", 0], ["math", 0], ["n", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["2", 0], ["r", 0], ["math", 0], ["sin", 0], ["math", 0], ["pi", 0], ["n", 0], ["y", 0], ["x", 0], ["math", 0], ["sin", 0], ["math", 0], ["pi", 0], ["n", 0], ["3", 0], ["2", 0], ["n", 0], ["math", 0], ["sin", 0], ["3", 0], ["math", 0], ["pi", 0], ["n", 0], ["s1", 0], ["1", 0], ["2", 0], ["y", 0], ["y", 0], ["math", 0], ["sin", 0], ["3", 0], ["math", 0], ["pi", 0], ["n", 0], ["s2", 0], ["r", 0], ["r", 0], ["math", 0], ["pi", 0], ["n", 0], ["1", 0], ["2", 0], ["math", 0], ["sin", 0], ["2", 0], ["math", 0], ["pi", 0], ["n", 0], ["ans", 0], ["math", 0], ["pi", 0], ["r", 0], ["r", 0], ["n", 0], ["s1", 0], ["s2", 0], ["print", 0], ["ans", 0], ["import", 0], ["math", 0], ["pi", 0], ["math", 0], ["acos", 0], ["1", 0], ["n", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ag", 0], ["2", 0], ["pi", 0], ["n", 0], ["l", 0], ["2", 0], ["math", 0], ["sin", 0], ["ag", 0], ["2", 0], ["r", 0], ["sp", 0], ["n", 0], ["l", 0], ["2", 0], ["r", 0], ["math", 0], ["cos", 0], ["ag", 0], ["2", 0], ["ang", 0], ["pi", 0], ["ag", 0], ["ag", 0], ["2", 0], ["2", 0], ["s", 0], ["l", 0], ["2", 0], ["4", 0], ["math", 0], ["tan", 0], ["ang", 0], ["ss", 0], ["sp", 0], ["s", 0], ["n", 0], ["print", 0], ["10f", 0], ["ss", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["from", 0], ["math", 0], ["import", 0], ["pi", 0], ["sin", 0], ["tan", 0], ["n", 0], ["r", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["a", 0], ["2", 0], ["pi", 0], ["n", 0], ["a", 0], ["r", 0], ["r", 0], ["2", 0], ["a", 0], ["sin", 0], ["a", 0], ["c", 0], ["n", 0], ["2", 0], ["2", 0], ["pi", 0], ["n", 0], ["b", 0], ["c", 0], ["a", 0], ["2", 0], ["s", 0], ["2", 0], ["r", 0], ["sin", 0], ["a", 0], ["2", 0], ["h", 0], ["tan", 0], ["b", 0], ["s", 0], ["2", 0], ["a", 0], ["a", 0], ["h", 0], ["s", 0], ["2", 0], ["result", 0], ["pi", 0], ["r", 0], ["r", 0], ["n", 0], ["a", 0], ["print", 0], ["result", 0], ["import", 0], ["math", 0], ["p", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["math", 0], ["sin", 0], ["math", 0], ["pi", 0], ["p", 0], ["2", 0], ["math", 0], ["tan", 0], ["1", 0], ["5", 0], ["math", 0], ["pi", 0], ["p", 0], ["math", 0], ["sin", 0], ["2", 0], ["math", 0], ["pi", 0], ["p", 0], ["2", 0], ["r", 0], ["r", 0], ["p", 0], ["import", 0], ["math", 0], ["n", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["n", 0], ["r", 0], ["r", 0], ["1", 0], ["math", 0], ["tan", 0], ["math", 0], ["pi", 0], ["2", 0], ["n", 0], ["1", 0], ["math", 0], ["tan", 0], ["math", 0], ["pi", 0], ["n", 0], ["import", 0], ["math", 0], ["pi", 0], ["math", 0], ["pi", 0], ["n", 0], ["r", 0], ["list", 0], ["map", 0], ["float", 0], ["input", 0], ["split", 0], ["x", 0], ["math", 0], ["tan", 0], ["pi", 0], ["n", 0], ["y", 0], ["math", 0], ["tan", 0], ["pi", 0], ["n", 0], ["2", 0], ["base", 0], ["r", 0], ["1", 0], ["x", 0], ["1", 0], ["y", 0], ["print", 0], ["n", 0], ["r", 0], ["base", 0], ["import", 0], ["math", 0], ["ln", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["ln", 0], ["0", 0], ["r", 0], ["int", 0], ["ln", 0], ["1", 0], ["tot", 0], ["area", 0], ["n", 0], ["2", 0], ["math", 0], ["sin", 0], ["2", 0], ["math", 0], ["pi", 0], ["n", 0], ["r", 0], ["r", 0], ["if", 0], ["n", 0], ["10", 0], ["6", 0], ["x", 0], ["1", 0], ["math", 0], ["cos", 0], ["2", 0], ["math", 0], ["pi", 0], ["n", 0], ["1", 0], ["math", 0], ["cos", 0], ["3", 0], ["math", 0], ["pi", 0], ["n", 0], ["else", 0], ["x", 0], ["4", 0], ["9", 0], ["x", 0], ["r", 0], ["2", 0], ["small", 0], ["area", 0], ["n", 0], ["2", 0], ["math", 0], ["sin", 0], ["3", 0], ["math", 0], ["pi", 0], ["n", 0], ["x", 0], ["print", 0], ["tot", 0], ["area", 0], ["small", 0], ["area", 0], ["from", 0], ["math", 0], ["import", 0], ["sin", 0], ["sqrt", 0], ["radians", 0], ["n", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["o", 0], ["360", 0], ["n", 0], ["2", 0], ["a", 0], ["o", 0], ["2", 0], ["c", 0], ["180", 0], ["o", 0], ["a", 0], ["a", 0], ["r", 0], ["sin", 0], ["radians", 0], ["a", 0], ["sin", 0], ["radians", 0], ["c", 0], ["o", 0], ["r", 0], ["sin", 0], ["radians", 0], ["o", 0], ["sin", 0], ["radians", 0], ["c", 0], ["s", 0], ["a", 0], ["o", 0], ["r", 0], ["2", 0], ["area", 0], ["0", 0], ["5", 0], ["a", 0], ["r", 0], ["sin", 0], ["radians", 0], ["o", 0], ["print", 0], ["2", 0], ["n", 0], ["area", 0], ["from", 0], ["math", 0], ["import", 0], ["n", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["360", 0], ["n", 0], ["a", 0], ["x", 0], ["4", 0], ["180", 0], ["pi", 0], ["b", 0], ["x", 0], ["3", 0], ["4", 0], ["180", 0], ["pi", 0], ["x", 0], ["tan", 0], ["a", 0], ["y", 0], ["tan", 0], ["b", 0], ["s", 0], ["r", 0], ["2", 0], ["sin", 0], ["a", 0], ["cos", 0], ["a", 0], ["2", 0], ["s1", 0], ["r", 0], ["sin", 0], ["a", 0], ["tan", 0], ["b", 0], ["r", 0], ["sin", 0], ["a", 0], ["2", 0], ["s2", 0], ["s", 0], ["s1", 0], ["print", 0], ["s2", 0], ["2", 0], ["n", 0], ["from", 0], ["math", 0], ["import", 0], ["pi", 0], ["sin", 0], ["tan", 0], ["def", 0], ["zvezda", 0], ["n", 0], ["r", 0], ["alpha", 0], ["2", 0], ["pi", 0], ["n", 0], ["s1", 0], ["r", 0], ["r", 0], ["sin", 0], ["alpha", 0], ["0", 0], ["5", 0], ["sin", 0], ["alpha", 0], ["0", 0], ["5", 0], ["tan", 0], ["0", 0], ["5", 0], ["alpha", 0], ["0", 0], ["5", 0], ["alpha", 0], ["s2", 0], ["0", 0], ["5", 0], ["alpha", 0], ["sin", 0], ["alpha", 0], ["r", 0], ["r", 0], ["s3", 0], ["pi", 0], ["r", 0], ["r", 0], ["return", 0], ["format", 0], ["s3", 0], ["n", 0], ["s2", 0], ["s1", 0], ["10f", 0], ["n", 0], ["r", 0], ["int", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["zvezda", 0], ["n", 0], ["r", 0], ["from", 0], ["math", 0], ["import", 0], ["pi", 0], ["3", 0], ["141592653589793238462643383279502884197", 0], ["n", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["tan", 0], ["pi", 0], ["2", 0], ["n", 0], ["b", 0], ["tan", 0], ["pi", 0], ["n", 0], ["a", 0], ["1", 0], ["a", 0], ["1", 0], ["b", 0], ["print", 0], ["r", 0], ["r", 0], ["a", 0], ["n", 0], ["more", 0], ["es", 0], ["mi", 0], ["pastor", 0], ["nada", 0], ["me", 0], ["faltara", 0], ["import", 0], ["math", 0], ["ln", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["ln", 0], ["0", 0], ["r", 0], ["int", 0], ["ln", 0], ["1", 0], ["tot", 0], ["area", 0], ["n", 0], ["2", 0], ["math", 0], ["sin", 0], ["2", 0], ["math", 0], ["pi", 0], ["n", 0], ["r", 0], ["r", 0], ["if", 0], ["n", 0], ["10", 0], ["6", 0], ["x", 0], ["1", 0], ["math", 0], ["cos", 0], ["2", 0], ["math", 0], ["pi", 0], ["n", 0], ["1", 0], ["math", 0], ["cos", 0], ["3", 0], ["math", 0], ["pi", 0], ["n", 0], ["else", 0], ["x", 0], ["4", 0], ["9", 0], ["x", 0], ["r", 0], ["2", 0], ["small", 0], ["area", 0], ["n", 0], ["2", 0], ["math", 0], ["sin", 0], ["3", 0], ["math", 0], ["pi", 0], ["n", 0], ["x", 0], ["print", 0], ["tot", 0], ["area", 0], ["small", 0], ["area", 0], ["from", 0], ["math", 0], ["import", 0], ["n", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["get", 0], ["i", 0], ["theta", 0], ["2", 0], ["pi", 0], ["n", 0], ["i", 0], ["return", 0], ["r", 0], ["cos", 0], ["theta", 0], ["r", 0], ["sin", 0], ["theta", 0], ["def", 0], ["line", 0], ["p", 0], ["q", 0], ["m", 0], ["q", 0], ["1", 0], ["p", 0], ["1", 0], ["q", 0], ["0", 0], ["p", 0], ["0", 0], ["b", 0], ["p", 0], ["1", 0], ["m", 0], ["p", 0], ["0", 0], ["return", 0], ["m", 0], ["b", 0], ["def", 0], ["intersect", 0], ["l1", 0], ["l2", 0], ["x", 0], ["l1", 0], ["1", 0], ["l2", 0], ["1", 0], ["l2", 0], ["0", 0], ["l1", 0], ["0", 0], ["y", 0], ["l1", 0], ["0", 0], ["x", 0], ["l1", 0], ["1", 0], ["return", 0], ["x", 0], ["y", 0], ["def", 0], ["dist", 0], ["p", 0], ["q", 0], ["return", 0], ["sqrt", 0], ["p", 0], ["0", 0], ["q", 0], ["0", 0], ["2", 0], ["p", 0], ["1", 0], ["q", 0], ["1", 0], ["2", 0], ["p0", 0], ["get", 0], ["0", 0], ["p1", 0], ["get", 0], ["n", 0], ["2", 0], ["p2", 0], ["get", 0], ["1", 0], ["p3", 0], ["get", 0], ["n", 0], ["2", 0], ["2", 0], ["p4", 0], ["intersect", 0], ["line", 0], ["p0", 0], ["p1", 0], ["line", 0], ["p2", 0], ["p3", 0], ["midpt", 0], ["p0", 0], ["0", 0], ["p2", 0], ["0", 0], ["2", 0], ["p0", 0], ["1", 0], ["p2", 0], ["1", 0], ["2", 0], ["h1", 0], ["dist", 0], ["midpt", 0], ["p4", 0], ["h2", 0], ["dist", 0], ["midpt", 0], ["0", 0], ["0", 0], ["area", 0], ["0", 0], ["5", 0], ["h2", 0], ["h1", 0], ["dist", 0], ["p0", 0], ["p2", 0], ["print", 0], ["area", 0], ["n", 0], ["import", 0], ["os", 0], ["sys", 0], ["pdb", 0], ["import", 0], ["time", 0], ["calendar", 0], ["datetime", 0], ["import", 0], ["math", 0], ["itertools", 0], ["import", 0], ["operator", 0], ["as", 0], ["op", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["def", 0], ["ncr", 0], ["n", 0], ["r", 0], ["r", 0], ["min", 0], ["r", 0], ["n", 0], ["r", 0], ["numer", 0], ["reduce", 0], ["op", 0], ["mul", 0], ["list", 0], ["range", 0], ["n", 0], ["n", 0], ["r", 0], ["1", 0], ["1", 0], ["denom", 0], ["reduce", 0], ["op", 0], ["mul", 0], ["list", 0], ["range", 0], ["1", 0], ["r", 0], ["1", 0], ["1", 0], ["return", 0], ["numer", 0], ["denom", 0], ["n", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["2", 0], ["r", 0], ["math", 0], ["sin", 0], ["math", 0], ["pi", 0], ["n", 0], ["apoly", 0], ["1", 0], ["4", 0], ["math", 0], ["tan", 0], ["math", 0], ["pi", 0], ["n", 0], ["asub", 0], ["math", 0], ["tan", 0], ["math", 0], ["pi", 0], ["1", 0], ["2", 0], ["3", 0], ["2", 0], ["n", 0], ["4", 0], ["print", 0], ["n", 0], ["s", 0], ["2", 0], ["apoly", 0], ["asub", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.05731523378582202, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.03391834360692492, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.1089455272363818, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.07284756314653128, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.05580693815987934, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.033824925981788725, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.10194902548725637, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07243600422011215, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nGiven head, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n\nReturn true if there is a cycle in the linked list. Otherwise, return false.\n\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n\n\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n\n\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\n\nConstraints:\n\nThe number of the nodes in the list is in the range [0, 104].\n-105 <= Node.val <= 105\npos is -1 or a valid index in the linked-list.\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        \n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tif head == None:\n\t\t\treturn False\n\t\t\n\t\tslow = head\n\t\tfast = head.next\n\t\t\n\t\twhile slow != fast:\n\t\t\tif fast is None or fast.next is None:\n\t\t\t\treturn False\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next.next\n\t\t\n\t\treturn True\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tslow = head\n\t\tfast = head\n\t\twhile fast and fast.next:\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next.next\n\t\t\tif slow == fast:\n\t\t\t\treturn True\n\t\treturn False\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\t\n\t\tslow = head\n\t\tfast = head\n\t\t\n\t\t\n\t\twhile fast and fast.next:\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next.next\n\t\t\tif slow == fast:\n\t\t\t\treturn True\n\t\t\n\t\treturn False\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tnodes_seen = set()\n\t\twhile head is not None:\n\t\t\tif head in nodes_seen:\n\t\t\t\treturn True\n\t\t\tnodes_seen.add(head)\n\t\t\thead = head.next\n\t\treturn False\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tcur = head\n\t\tcheck = set()\n\t\twhile cur:\n\t\t\tif cur in check:\n\t\t\t\treturn True\n\t\t\tcheck.add(cur)\n\t\t\tcur = cur.next\n\t\treturn False\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\ttry:\n\t\t\tslow = head\n\t\t\tfast = head.next \n\t\t\twhile slow is not fast:\n\t\t\t\tslow = slow.next\n\t\t\t\tfast = fast.next.next\n\t\t\treturn True\n\t\texcept:\n\t\t\treturn False\n", "class Solution:\n\tdef hasCycle(self, head: ListNode) -> bool:\n\t\tif head is None:\n\t\t\treturn False\n\n\t\tslow, fast = head, head\n\t\twhile fast.next and fast.next.next:\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next.next\n\t\t\tif slow == fast:\n\t\t\t\treturn True\n\t\treturn False\n"], "id": "id7247"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7247", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["given", 2], ["head", 2], ["the", 2], ["head", 2], ["of", 2], ["a", 3], ["linked", 2], ["list", 2], ["determine", 2], ["if", 2], ["the", 2], ["linked", 2], ["list", 2], ["has", 2], ["a", 2], ["cycle", 2], ["in", 2], ["it", 2], ["there", 7], ["is", 7], ["a", 7], ["cycle", 7], ["in", 7], ["a", 7], ["linked", 7], ["list", 7], ["if", 7], ["there", 7], ["is", 7], ["some", 7], ["node", 7], ["in", 7], ["the", 7], ["list", 7], ["that", 7], ["can", 7], ["be", 7], ["reached", 7], ["again", 7], ["by", 7], ["continuously", 7], ["following", 7], ["the", 7], ["next", 7], ["pointer", 7], ["internally", 7], ["pos", 7], ["is", 7], ["used", 7], ["to", 7], ["denote", 7], ["the", 7], ["index", 5], ["of", 5], ["the", 5], ["node", 5], ["that", 5], ["tail", 5], ["s", 5], ["next", 5], ["pointer", 5], ["is", 2], ["connected", 2], ["to", 2], ["note", 2], ["that", 2], ["pos", 2], ["is", 2], ["not", 2], ["passed", 2], ["as", 2], ["a", 2], ["parameter", 2], ["return", 2], ["true", 2], ["if", 0], ["there", 0], ["is", 0], ["a", 0], ["cycle", 0], ["in", 0], ["the", 0], ["linked", 0], ["list", 0], ["otherwise", 0], ["return", 0], ["false", 0], ["input", 8], ["head", 8], ["3", 8], ["2", 8], ["0", 8], ["4", 8], ["pos", 8], ["1", 8], ["output", 2], ["true", 2], ["explanation", 2], ["there", 2], ["is", 2], ["a", 0], ["cycle", 0], ["in", 0], ["the", 0], ["linked", 0], ["list", 0], ["where", 0], ["the", 0], ["tail", 0], ["connects", 0], ["to", 0], ["the", 0], ["1st", 0], ["node", 0], ["0", 0], ["indexed", 0], ["input", 10], ["head", 10], ["1", 10], ["2", 10], ["pos", 10], ["0", 10], ["output", 2], ["true", 2], ["explanation", 2], ["there", 2], ["is", 2], ["a", 2], ["cycle", 2], ["in", 0], ["the", 0], ["linked", 0], ["list", 0], ["where", 0], ["the", 0], ["tail", 0], ["connects", 0], ["to", 0], ["the", 0], ["0th", 0], ["node", 0], ["input", 9], ["head", 9], ["1", 9], ["pos", 9], ["1", 0], ["output", 0], ["false", 0], ["explanation", 3], ["there", 3], ["is", 3], ["no", 3], ["cycle", 3], ["in", 3], ["the", 4], ["linked", 4], ["list", 4], ["constraints", 5], ["the", 5], ["number", 4], ["of", 2], ["the", 2], ["nodes", 2], ["in", 2], ["the", 2], ["list", 2], ["is", 2], ["in", 2], ["the", 2], ["range", 2], ["0", 2], ["104", 2], ["105", 2], ["node", 2], ["val", 2], ["105", 0], ["pos", 0], ["is", 0], ["1", 0], ["or", 0], ["a", 0], ["valid", 0], ["index", 0], ["in", 1], ["the", 1], ["linked", 3], ["list", 4], ["definition", 120], ["for", 121], ["singly", 121], ["linked", 121], ["list", 121], ["class", 138], ["listnode", 134], ["def", 66], ["init", 2], ["self", 2], ["x", 2], ["self", 2], ["val", 2], ["x", 0], ["self", 0], ["next", 0], ["none", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7061611374407583, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.22080334469837556, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9327354260089686, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.520627802690583, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6682464454976303, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.22046565861731734, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9327354260089686, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.520627802690583, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["if", 0], ["head", 0], ["none", 0], ["return", 0], ["false", 0], ["slow", 0], ["head", 0], ["fast", 0], ["head", 0], ["next", 0], ["while", 0], ["slow", 0], ["fast", 0], ["if", 0], ["fast", 0], ["is", 0], ["none", 0], ["or", 0], ["fast", 0], ["next", 0], ["is", 0], ["none", 0], ["return", 0], ["false", 0], ["slow", 0], ["slow", 0], ["next", 0], ["fast", 0], ["fast", 0], ["next", 0], ["next", 0], ["return", 0], ["true", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["slow", 4], ["head", 4], ["fast", 9], ["head", 13], ["while", 16], ["fast", 9], ["and", 7], ["fast", 9], ["next", 9], ["slow", 37], ["slow", 37], ["next", 0], ["fast", 0], ["fast", 0], ["next", 0], ["next", 0], ["if", 0], ["slow", 0], ["fast", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["slow", 4], ["head", 4], ["fast", 9], ["head", 13], ["while", 16], ["fast", 9], ["and", 7], ["fast", 9], ["next", 9], ["slow", 37], ["slow", 37], ["next", 0], ["fast", 0], ["fast", 0], ["next", 0], ["next", 0], ["if", 0], ["slow", 0], ["fast", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["nodes", 0], ["seen", 0], ["set", 0], ["while", 0], ["head", 0], ["is", 0], ["not", 0], ["none", 0], ["if", 0], ["head", 0], ["in", 0], ["nodes", 0], ["seen", 0], ["return", 0], ["true", 0], ["nodes", 0], ["seen", 0], ["add", 0], ["head", 0], ["head", 0], ["head", 0], ["next", 0], ["return", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["cur", 0], ["head", 0], ["check", 0], ["set", 0], ["while", 0], ["cur", 0], ["if", 0], ["cur", 0], ["in", 0], ["check", 0], ["return", 0], ["true", 0], ["check", 0], ["add", 0], ["cur", 0], ["cur", 0], ["cur", 0], ["next", 0], ["return", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["try", 0], ["slow", 0], ["head", 0], ["fast", 0], ["head", 0], ["next", 0], ["while", 0], ["slow", 0], ["is", 0], ["not", 0], ["fast", 0], ["slow", 0], ["slow", 0], ["next", 0], ["fast", 0], ["fast", 0], ["next", 0], ["next", 0], ["return", 0], ["true", 0], ["except", 0], ["return", 0], ["false", 0], ["class", 0], ["solution", 0], ["def", 0], ["hascycle", 0], ["self", 0], ["head", 0], ["listnode", 0], ["bool", 0], ["if", 0], ["head", 0], ["is", 0], ["none", 0], ["return", 0], ["false", 0], ["slow", 4], ["fast", 4], ["head", 4], ["head", 16], ["while", 19], ["fast", 19], ["next", 5], ["and", 4], ["fast", 7], ["next", 1], ["next", 9], ["slow", 37], ["slow", 37], ["next", 26], ["fast", 0], ["fast", 0], ["next", 0], ["next", 0], ["if", 0], ["slow", 0], ["fast", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.16216216216216217, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.023764884869081175, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.3076923076923077, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.13141025641025642, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0990990990990991, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.020849420849420847, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.3076923076923077, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.13141025641025642, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nYou are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.\nHere, a ACGT string is a string that contains no characters other than A, C, G and T.\n\n-----Notes-----\nA substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.\nFor example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.\n\n-----Constraints-----\n - S is a string of length between 1 and 10 (inclusive).\n - Each character in S is an uppercase English letter.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the length of the longest ACGT string that is a substring of S.\n\n-----Sample Input-----\nATCODER\n\n-----Sample Output-----\n3\n\nAmong the ACGT strings that are substrings of ATCODER, the longest one is ATC.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["a = input()\n\natcg =[\"A\",\"T\",\"C\",\"G\"]\n\nresult =[]\nres= 0\nfor i in a:\n\tif i in atcg:\n\t\tres +=1\n\telse:\n\t\tres = 0\n\tresult.append(res)\n\nprint(max(result))\n", "def __starting_point():\n\tS = input()\n\tx = ['A', 'C', 'G', 'T']\n\tans = 0\n\tnow = 0\n\tfor s in S:\n\t\tif s in x:\n\t\t\tnow += 1\n\t\telse:\n\t\t\tnow = 0\n\t\tans = max(now, ans)\n\tprint(ans)\n__starting_point()\n", "s = input()\nans = 0\nlength = 0\n\nfor c in s:\n\tif c in {'A', 'C', 'G', 'T'}:\n\t\tlength += 1\n\telse:\n\t\tlength = 0\n\n\tans = max(length, ans)\n\nprint(ans)\n", "s = input()\nscore=0\nans=[]\nfor i in s:\n\tif i in {\"A\", \"T\", \"C\", \"G\"}:\n\t\tscore+=1\n\telse:\n\t\tscore=0\n\tans.append(score)\nprint(max(ans))\n", "str_list = list(input())\n\ncount = 0\nmax_count = 0\nfor char in str_list:\n\tif char == 'A' or char == 'C' or char == 'G' or char == 'T':\n\t\tcount += 1\n\telse:\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\tcount = 0\nif count > max_count:\n\tmax_count = count\nprint(max_count)\n", "s = input()\ndata = ['A','T','G','C']\nans = 0\nfor i in range(len(s)):\n\tfor j in range(i,len(s)):\n\t\tif s[j] not in data:\n\t\t\tans = max(ans,j-i)\n\t\t\tbreak\n\t\telif j == len(s) - 1:\n\t\t\tans = max(ans,len(s) - i)\nprint(ans)\n", "def judge(c):\n\tif c=='A' or c=='G' or c == 'C' or c == 'T':\n\t\treturn True\n\telse:\n\t\treturn False\n\ns = input()\n\nans = 0\n\nfor i in range(0,len(s)):\n\tfor j in range(i+1,len(s)+1):\n\t\tok = True\n\t\tfor k in range(i,j):\n\t\t\t#print(i,j,k)\n\t\t\tif not judge(s[k]):\n\t\t\t\tok = False\n\t\tif ok:\n\t\t\tans = max(ans,j-i)\n\nprint(ans)\n", "import re\ns = input()\nres = re.findall(r'[ATGC]+',s)\nans = 0\n\nfor e in res:\n\tans = max(ans,len(e))\n\t\nprint(ans)\n", "str1 = input()\ntable = list(str1)\ncount = 0\nans = 0\nfor i in range(len(str1)):\n\tif table[i] == 'A' or table[i] =='T' or table[i] =='C' or table[i] == 'G':\n\t\tcount += 1\n\t\tif ans < count:\n\t\t\tans = count\n\telse:\n\t\tcount = 0\nprint(ans)\n", "S = input()\n\n# Sの部分文字列は、空文字列以外に N+(N−1)+(N−2)+...+1 = N(N+1)/2 個存在する\n# 今回は N<=10 であり、この個数は最大で 10(10+1)/2 = 55 なので間に合う\n# 全て調べて、最も長い「ACGT文字列」の長さを求める\n# ここで「ACGT 文字列」は、A,C,G,Tのいずれかから成る文字列\n\nN = len(S)\nans = 0\nfor i in range(N):\n\tfor j in range(i, N):\n\t\tT = list(S[i:j+1])\n\t\tM = j-i+1\n\t# ACGT文字列かどうかの判定\n\t\tflag = True\n\t\tfor k in range(M):\n\t\t\tif T[k] != 'A' and T[k] != 'C' and T[k] != 'G' and T[k] != 'T':\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\t# ACGT文字列なら長さを更新\n\t\tif flag: ans = max(ans, M)\n\t\t\t\nprint(ans)\n", "S=input()\ncount=0\ndef rec(n):\n\tif n >= len(S): return 0\n\tif S[n] in 'ACGT': return rec(n+1) + 1\n\telse: return 0\nfor i in range(len(S)):\n\tc=rec(i)\n\tcount = max(count, c)\nprint(count)\n", "s = input()\n\nres = 0\nc = 0\nfor i in range(len(s)):\n\tif s[i] == \"A\" or s[i] == \"G\" or s[i] == \"C\" or s[i] == \"T\":\n\t\tc += 1\n\telse:\n\t\tres = max(res,c)\n\t\tc = 0\nres = max(res,c)\nprint(res)\n", "S=input()\nd=[\"A\",\"T\",\"C\",\"G\"]\nl=len(S)\n \nacgt = []\na = \"\"\n \nfor i in range(l):\n\tif S[i] in d:\n\t\ta = a + S[i]\n\t\tif i == l-1:\n\t\t\tacgt.append(a)\n\telse:\n\t\tacgt.append(a)\n\t\ta = \"\"\n\nmax = 0\nfor a in acgt:\n\tif len(a) > max:\n\t\tmax = len(a)\n \nprint(max)\n", "S = input ()\nS = S.replace('A', 'a')\nS = S.replace('T', 'a')\nS = S.replace('C', 'a')\nS = S.replace('G', 'a')\nans = 0\nx = 0\nfor i in range (len(S)):\n\tif S[i] == 'a':\n\t\tx += 1\n\telse:\n\t\tif ans < x:\n\t\t\tans = x\n\t\tx = 0\nif ans < x:\n\tans = x\nprint (ans)\n", "S = input()\nS += '*'\nst = 'ACGT'\ni, n = 0, len(S)\nmax_len = 0\nwhile i < n:\n\tj = i\n\tsize = 0\n\twhile S[j] in st:\n\t\tsize += 1\n\t\tj += 1\n\ti = j+1\n\tmax_len = max(max_len, size)\nprint(max_len)\n", "s=input()\ntmp, ans = 0, 0\nfor i in s:\n\tif i in {'A', 'C', 'G', 'T'}: \n\t\ttmp += 1\n\telse:\n\t\ttmp = 0\n\tans = max(ans, tmp)\nprint(ans)\n", "S = str(input())\ncount = 0\ndata = []\n\n\nfor i in range(len(S)):\n\tif (S[i] == 'A') or (S[i] == 'T') or (S[i] == 'C') or (S[i] == 'G'):\n\t\tcount += 1\n\telse:\n\t\tdata.append(count)\n\t\tcount = 0\n\ndata.append(count)\n\nprint(max(data))\n", "s = input()\ncount = 0\ntmp = 0\nfor i in range(len(s)):\n\tif s[i] == \"A\" or s[i] == \"C\" or s[i] == \"G\" or s[i] == \"T\":\n\t\ttmp += 1\n\telse:    \n\t\ttmp = 0\n\tcount = max(tmp,count)\nprint(count)\n", "s=input()\nma,cnt=0,0\nfor i in range(len(s)):\n\tif s[i] in [\"A\",\"C\",\"G\",\"T\"]:\n\t\tcnt+=1\n\t\tma=max(ma,cnt)\n\telse:\n\t\tcnt=0\nprint(ma)\n", "S=input()\n\ncnt = 0\nans = 0\nfor x in S:\n\tif x in [\"A\",\"C\",\"G\",\"T\"]:\n\t\tcnt += 1\n\t\tans = max(cnt, ans)\n\telse:\n\t\tcnt = 0\nprint(ans)\n", "# B - ATCoder\nS = list(input())\n\nans = 0\nfor i in range(len(S)):\n\tfor j in range(i,len(S)+1):\n\t\ttgt = S[i:j]\n\t\tcnt = 0\n\t\tfor s in tgt:\n\t\t\tif s == 'A' or s == 'C' or s == 'G' or s == 'T':\n\t\t\t\tcnt += 1\n\t\t\telse:\n\t\t\t\tcnt = 0\n\t\t\t\tbreak\n\t\tans = max(cnt,ans)\nprint(ans)\n", "s = input()\nchar = \"ACGT\"\nnow = 0\nans = 0\n\nfor i in s:\n\tif i in char:\n\t\tnow += 1\n\telse:\n\t\tnow = 0\n\tans = max(ans, now)\nprint(ans)\n", "s = input()\ncount=0\nmax_count=0\nfor i in range(len(s)):\n\tif(s[i]==\"A\"or s[i]==\"T\"or s[i]==\"G\"or s[i]==\"C\"):\n\t\tcount+=1\n\telse:\n\t\tif(max_count<count):\n\t\t\tmax_count=count\n\t\t\tcount=0\n\t\telse:\n\t\t\tcount=0\nprint((max(max_count,count)))\n", "S = input()\nmax_ = 0\n\nfor i in range(len(S)):\n\tfor j in range(i,len(S)):\n\t\tif all(\"ACGT\".count(c) == 1 for c in S[i:j+1]):\n\t\t\tmax_ = max(j+1-i,max_)\nprint(max_)\n", "s = input()\ncount = 0\nmax = 0\nfor i in range(0, len(s)):\n\tif s[i] == 'A' or s[i] == 'T' or s[i] == 'G' or s[i] == 'C':\n\t\tcount += 1\n\t\tif max < count:\n\t\t\tmax = count\n\telse: count = 0\nprint(max)\n", "s=list(input())\n#print(s)\nrmax=0\nr=0\nfor ss in s:\n\tif ss in [\"A\",\"C\",\"G\",\"T\"]:\n\t\tr+=1\n\telse:\n\t\trmax=max(rmax,r)\n\t\tr=0\nrmax=max(rmax,r)\nprint(rmax)\n", "s = input()\n\ncount = 0\nans = 0\n\nfor i in s:\n\tif i in {'A', 'T', 'C', 'G'}:\n\t\tcount += 1\n\telse:\n\t\tcount = 0\n\tans = max(ans, count)\n\nprint(ans)\n", "S=input()\ncount=0\ndef rec(n):\n\tif n >= len(S): return 0\n\tif S[n] == 'A' or S[n] == 'C' or S[n] == 'G' or S[n] == 'T': return rec(n+1) + 1\n\telse: return 0\nfor i in range(len(S)):\n\tc=rec(i)\n\tcount = max(count, c)\nprint(count)\n", "X = [\"A\",\"C\", \"G\", \"T\"]\nS = input()\nsum = 0\nans = 0\nfor i in S:\n\tif i in X:\n\t\tsum += 1\n\telse:\n\t\tsum = 0\n\tans = max(sum, ans)\nprint(ans)\n", "S = input()\ncnt = 0\nmaxv = 0\nfor i in range(len(S)):\n\tif S[i] == 'A' or S[i] == 'C' or S[i] == 'G' or S[i] == 'T':\n\t\tcnt += 1\n\t\tif cnt > maxv:\n\t\t\tmaxv = cnt\n\telse:\n\t\tcnt = 0\nprint(maxv)\n", "s = input()\nls = len(s)\n\ncnt = 0\nma = 0\nfor i in range(ls):\n\tif(s[i] in 'ACGT'):\n\t\tcnt += 1\n\telse:\n\t\tma=max(ma,cnt)\n\t\tcnt = 0\n\nma = max(ma,cnt)\nprint(ma)\n", "S = input()\nl = len(S)\nanswer = 0\nfor i in range(l):\n\tfor j in reversed(range(i+1,l+1)):\n\t\tT = S[i:j]\n\t\tT_1 = T.replace('A', '').replace('C', '').replace('G', '').replace('T', '')\n\t\tif len(T_1) == 0:\n\t\t\tpri = j-i\n\t\t\tif pri > answer:\n\t\t\t\tanswer = pri\nprint(answer)\n", "S = input()\n\nacgt = ['A', 'C', 'G', 'T']\nans, cnt = 0, 0\nfor i in range(len(S)):\n\tif S[i] in acgt:\n\t\tcnt += 1\n\telse:\n\t\tans = max(ans, cnt)\n\t\tcnt = 0\nprint(max(ans, cnt))\n", "S = input()\nN = len(S)\nans = 0\nfor i in range(N):\n\tfor j in range(i, N):\n\t\tif all('ACGT'.count(c) == 1 for c in S[i : j + 1]):\n\t\t\tans = max(ans, j - i + 1)\nprint(ans)\n", "S = input()\n\nans = 0\nN = len(S)\nfor i in range(N):\n\tfor j in range(i+1, N+1):\n\t\tT = list(S[i:j])\n\t\tM = len(T)\n\n\t\tflag = True\n\t\tfor k in range(M):\n\t\t\tif T[k] != 'A' and T[k] != 'C' and T[k] != 'G' and T[k] != 'T':\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif flag: ans = max(ans, M)\n\t\t\t\nprint(ans)\n", "S = input()\n\nlst = ['A', 'C', 'G',  'T']\ncount = 0\ntop = 0\n\nfor i in S:\n\tif i in lst:\n\t\tcount += 1\n\telse:\n\t\tif count > top:\n\t\t\ttop = count\n\t\tcount = 0\nif count > top:\n\ttop = count\nprint(top)\n", "import itertools\nS = input()\nans = 0\nfor i,j in itertools.combinations(list(range(len(S)+1)), 2):\n\tif all('ACTG'.count(c)==1 for c in S[i:j]):\n\t\tans = max(ans, len(S[i:j]))\nprint(ans)\n", "remove = ['A', 'C', 'G', 'T']\ns = input()\ncnt = [0]*10\nj = 0\nfor i in range(len(s)):\n\tif s[i] in remove:\n\t\tcnt[j] += 1\n\telse:\n\t\tj += 1   \n\nprint(max(cnt))\n", "s = input()\nans = 0\nzantei = 0\nfor i in range(len(s)):\n\tif s[i] == \"A\" or s[i] == \"C\" or s[i] == \"G\" or s[i] == \"T\":\n\t\tzantei += 1\n\telse:\n\t\tans = max(ans,zantei)\n\t\tzantei = 0\nans = max(ans,zantei)\nprint(ans)\n", "s = input() + 'I'\nList = []\n\nfor i in range(len(s)):\n\tcount = 0\n\tfor j in range(len(s) - i):\n\t\tif s[i] == 'A' or s[i] == 'T' or s[i] == 'G' or s[i] == 'C':\n\t\t\tcount += 1\n\t\t\ti += 1\n\t\telse:\n\t\t\tList.append(count)\n\t\t\tbreak\n\nprint(max(List))\n", "S = input()\nT = []\n\nfor i in range(len(S)):\n\ts = S[i]\n\tif (s == \"A\")or(s == \"T\")or(s == \"C\")or(s == \"G\"):\n\t\tT.append(0)\n\telse:\n\t\tT.append(1)\n\npoint = [0]*(len(S)+1)\n\nfor i in range(len(S)):\n\tif T[i] == 0:\n\t\tpoint[i+1]=point[i]+1\n\telse:\n\t\tpoint[i+1]=0\n\nprint((max(point)))\n", "s = list(input())\nn = len(s)\nans = 0\n\nfor i in range(n):\n\tif s[i] in ['A', 'G', 'C', 'T']:\n\t\ts[i] = 'a'\n\nfor i in range(n):\n\tfor j in range(i, n):\n\t\tflag = True\n\t\tfor k in range(i, j+1):\n\t\t\tif s[k] != 'a':\n\t\t\t\tflag = False\n\t\tif flag:\n\t\t\tans = max([ans, j-i+1])\n\nprint(ans)\n", "S = str(input())\nN = len(S)\n\ncount = 0 \n\nsaidai = 0\n\nvernon = ['A', 'G', 'T', 'C']\n\nfor i in range (0, N):\n\tif vernon.count(S[i]) > 0:\n\t\tcount+=1\n\telse:\n\t\tsaidai = max(saidai, count)\n\t\tcount = 0\n        \nsaidai = max(saidai, count)\nprint(saidai)\n", "s = input()\nt = [\"A\", \"C\", \"G\", \"T\"]\ncnt = 0\nans = 0\nfor i in range(len(s)):\n\tif s[i] in t:\n\t\tcnt += 1\n\t\tif cnt > ans:\n\t\t\tans = cnt\n\telse:\n\t\tcnt = 0\nprint(ans)\n", "s = list(input())\n\nc = 0\nans = [0]\n\nfor i in s:\n\tif i == 'A' or i == 'C' or i == 'G' or i == 'T':\n\t\tc += 1\n\telse:\n\t\tc = 0\n\tans.append(c)\n\nprint(max(ans))\n", "s=input()\nans=0\nfor i in range(len(s)):\n\tfor j in range(i,len(s)):\n\t\tif all(\"ACGT\".count(c)==1 for c in s[i:j+1]):\n\t\t\tans=max(ans,j-i+1)\nprint(ans)\n", "# ACGT\nS =input()\nct = 0\nctM = [0]\nfor i in range(len(S)):\n\tif S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\":\n\t\tct +=1\n\t\tif i == len(S)-1:\n\t\t\tctM.append(ct)\n\telse:\n\t\tctM.append(ct)\n\t\tct = 0\nprint((max(ctM)))\n", "s = input()\nscore=0\nans=0\nfor i in s:\n\tif i in {\"A\", \"T\", \"C\", \"G\"}:\n\t\tscore+=1\n\telse:\n\t\tscore=0\n\tans=max(score,ans)\nprint(ans)\n", "\ns = input()\nans = 0 \ntmp = 0 \nfor i in s :\n\tif i == \"A\" or i == \"T\" or i == \"G\" or i == \"C\" :\n\t\ttmp+=1\n\telse :\n\t\ttmp = 0\n\tans = max(tmp,ans)\nprint(ans)\n", "S = input()\n\nres = 0\ncnt = 0\nfor i in range(len(S)):\n\tif S[i] in ['A','T','G','C']:\n\t\tcnt += 1\n\telse:\n\t\tres = max(res, cnt)\n\t\tcnt = 0\n\nres = max(res, cnt)\n\nprint(res)\n", "s=input()\ntmp, ans = 0, 0\nfor i in range(len(s)):\n\tfor j in range(i, len(s)):\n\t\tif all('AGCT'.count(h) == 1 for h in s[i:j +1]):\n\t\t\tans = max(ans, j -i +1)\nprint(ans)\n", "s = input()\n\nans = []\n\nx = 0\n\nfor i in range(len(s)):\n\tif s[i] == \"A\" or s[i] == \"C\" or s[i] == \"G\" or s[i] == \"T\":\n\t\tx += 1\n\telse:\n\t\tans.append(x)\n\t\tx = 0\n\nans.append(x)\n\nprint((max(ans)))\n", "s = list(input())\nn = len(s)\nres = 0\nfor i in range(n):\n\tfor j in range(i,n):\n\t\ttemp = s[i:j+1]\n\t\tif all(i in 'ATGC' for i in temp):\n\t\t\tres = max(res,len(temp))\nprint(res)\n", "s = input()\n\nacgt = ['A','C','G','T']\ni = 0\nmax_ans = 0\ncurr_ans = 0\n\nwhile(i < len(s)):\n\tif s[i] in acgt:\n\t\tcurr_ans += 1\n\telse:\n\t\tmax_ans = max(max_ans, curr_ans)\n\t\tcurr_ans = 0\n\ti += 1\nmax_ans = max(max_ans, curr_ans)\nprint(max_ans)\n", "s = input()\ncnt = 0\nmax = 0\nfor i in range(0, len(s)):\n\tif s[i] in [\"A\", \"C\", \"G\", \"T\"]:\n\t\tcnt += 1\n\telse:\n\t\tif max < cnt:\n\t\t\tmax = cnt\n\t\tcnt = 0\nif max < cnt:\n\tmax = cnt\ncnt = 0\nprint(max)\n", "s = list(input())\nc = 0\nans = [0]\n\nfor i in s:\n\tif i == 'A' or i == 'C' or i == 'G' or i == 'T':\n\t\tc += 1\n\telse:\n\t\tc = 0\n\tans.append(c)\n\nprint(max(ans))\n", "S = input()\nL = len(S)\nans = 0\nfor i in range(L):\n\tc = 0\n\tfor s in S[i:]:\n\t\tif s in ['A', 'C', 'G', 'T']:\n\t\t\tc += 1\n\t\telse:\n\t\t\tbreak\n\tans = max(ans, c)\n\nprint(ans)\n", "text = input()\n\ncount = 0\nmax_count = 0\nfor i in range(len(text)):\n\tif text[i] == \"A\" or text[i] == \"C\" or text[i] == \"G\" or text[i] == \"T\":\n\t\tcount += 1;\n\telse:\n\t\tif max_count < count:\n\t\t\tmax_count = count\n\t\t\tcount = 0\n\t\telse:\n\t\t\tcount = 0\n\t\t\t\nprint(max(max_count,count))\n", "S = input()\n\nN = len(S)\nans = 0\n# Sの部分文字列は、空文字列以外に N+(N−1)+(N−2)+...+1 = N(N+1)/2 個存在する\n# 今回は N<=10 であり、この個数は最大で 10(10+1)/2 = 55 なので間に合う\n# 全て調べて、最も長い「ACGT文字列」の長さを求める\nfor i in range(N):\n\tfor j in range(i, N):\n\t\tif all('ACGT'.count(c) == 1 for c in S[i:j+1]): ans = max(ans, j-i+1)\n\t\t\t\nprint(ans)\n", "s = list(input()) + [\"X\"]\n\nl = [\"A\",\"G\",\"C\",\"T\"]\n\nfor i in range(len(s)):\n\tif s[i] in l:\n\t\ts[i] = 1\n\telse:\n\t\ts[i] = 0\n\ncnt = 0\nli = []\nfor i in range(len(s)):\n\tif s[i] == 1:\n\t\tcnt +=1\n\telse:\n\t\tli.append(cnt)\n\t\tcnt = 0\n\nprint(max(li))\n", "S = input()\n\ns_len = len(S)\nACGT = {\"A\", \"C\", \"G\", \"T\"}\nmax_len = 0\nmax_str = ''\nstr = ''\n\nfor i in range(s_len):\n\tstr = ''\n\tfor j in range(i, s_len):\n\t\tif S[j] in ACGT:\n\t\t\tstr += S[j]\n\t\t\tif len(str) >= max_len:\n\t\t\t\tmax_len = len(str)\n\t\t\t\tmax_str = str\n\t\telse:\n\t\t\tstr = ''\n\n\nprint(max_len)\n", "\ntarget_a = ['A', 'C', 'G', 'T']\n\ndef main():\n\tS = str(input())\n\n\tmax_cnt = 0\n\tcnt = 0\n\tfor s in S:\n\t\tif s in target_a:\n\t\t\tcnt += 1\n\t\telse:\n\t\t\tif cnt > max_cnt:\n\t\t\t\tmax_cnt = cnt\n\t\t\tcnt = 0\n\tif cnt > max_cnt:\n\t\tmax_cnt = cnt\n\tprint(max_cnt)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "s = input()\nmaxlen = 0\nfor i in range(len(s)):\n\tfor j in range(1,len(s)+1):\n\t\tt = s[i:j]\n\t\tif all([c in 'ACGT' for c in s[i:j]]):\n\t\t\tmaxlen = max(maxlen, j-i)\nprint(maxlen)\n", "a = input()\n \natcg =[\"A\",\"T\",\"C\",\"G\"]\n \nresult =[]\nres= 0\nfor i in a:\n\tif i in atcg:\n\t\tres +=1\n\telse:\n\t\tres = 0\n\tresult.append(res)\n \nprint(max(result))\n", "moji = str(input())\nans = 0\ncans = 0\ncorrect = [\"A\",\"C\",\"G\",\"T\"]\nfor i in range(len(moji)):\n\tif moji[i] in correct:\n\t\tcans += 1\n\t\tif cans > ans:\n\t\t\tans = cans\n\telse:\n\t\tif cans > ans:\n\t\t\tans = cans\n\t\tcans = 0\nprint(ans)\n", "S = input()\ncnt = 0\nres = 0\nfor s in S:\n\tif s in \"AGCT\":\n\t   cnt += 1\n\t   res = max(res,cnt)\n\telse:\n\t\tcnt = 0\nprint(res)\n", "s=input()\nans=0\ntmp=0\nfor i in range(len(s)):\n\tfor j in range(i,len(s)):\n\t\tif s[j]==\"A\" or s[j]==\"C\" or s[j]==\"G\" or s[j]==\"T\":\n\t\t\ttmp+=1\n\t\telse:\n\t\t\tans=max(ans,tmp)\n\t\t\ttmp=0\n\t\t\tbreak\n\telse:\n\t\tans=max(ans,tmp)\n\t\ttmp=0\nprint(ans)\n", "words = ['A','G','C','T']\ns = input()\nans = 0\ncnt = 0\nfor i in range(len(s)):\n\tif s[i] in words:\n\t\tcnt += 1\n\telse:\n\t\tans = max(ans,cnt)\n\t\tcnt = 0\nans = max(ans,cnt)\nprint(ans)\n", "S=str(input())\nle=len(S)\ncnt=0\nAns=0\n\nfor i in range(le):\n\tif S[i] in 'A' or S[i] in 'C' or \\\n\tS[i] in 'G' or S[i] in 'T':\n\t\tcnt+=1\n\t\tif Ans<cnt:\n\t\t\tAns=cnt\n\telse:\n\t\tcnt=0\n\nprint(Ans)\n", "import sys\ninput = sys.stdin.readline\n\ndef slove():\n\tS = input()\n\tn = len(S)\n\tl = 0\n\tans = 0\n\tfor i in range(n):\n\t\tif S[i]==\"A\" or S[i]==\"C\" or S[i]==\"G\" or S[i]==\"T\":\n\t\t\tl += 1\n\t\telse:\n\t\t\tans = max(ans,l)\n\t\t\tl = 0\n\tans = max(ans,l)\n\tprint(ans)\n\ndef __starting_point():\n\tslove()\n__starting_point()\n", "import re\nS = input()\nr = re.findall('[ACTG]+', S)\nprint(max([len(_) for _ in r], default=0))\n", "S = input()\nlength = 0\nfor i in range(0, len(S)+1):\n\tfor j in range(i, len(S)+1):\n\t\tT = S[i:j]\n\t\tif T.replace('A', '').replace('C', '').replace('G', '').replace('T', '') == '':\n\t\t\tif len(T) > length:\n\t\t\t\tlength = len(T)\nprint(length)\n", "n=str(input())\n\npattern = 'ACGT'\nr, tmp = 0, 0\nc = False\nfor s in n:\n\tif s in pattern:\n\t\ttmp += 1\n\telse:\n\t\tif r < tmp:\n\t\t\tr = tmp\n\t\ttmp = 0\nif r < tmp:\n  r = tmp\nprint(r)\n", "S=input()\nl=len(S)\nACGT=[\"A\",\"G\",\"C\",\"T\"]\ncount=0\nans=[]\nfor i in range(l):\n\tif S[i] in ACGT:\n\t\tcount+=1\n\t\tans.append(count)\n\telse:\n\t\tans.append(count)\n\t\tcount=0\nprint(max(ans))\n", "X = str(input())\nN = len(X)\nans = 0\ncount = 0\nfor i in range(N):\n\tif X[i] == \"A\" or X[i] == \"C\" or X[i] == \"G\" or X[i] == \"T\":\n\t\tcount += 1\n\telse:\n\t\tans = max(ans, count)\n\t\tcount = 0\nelse:\n\tans = max(ans, count)\nprint(ans)\n", "s = input()\nS = \"\"\nfor i in s:\n\tif i in \"ACGT\":S+=\"1\"\n\telse:S+=\"0\"\nprint(max(list(map(len,S.split(\"0\")))))\n", "s = input()\nl = len(s)\nmax_l = 0\ncount = 0\nlst = ['A', 'C', 'G', 'T']\nfor i in range(l):\n\tif s[i] in lst:\n\t\tcount += 1\n\t\tif count > max_l:\n\t\t\tmax_l = count\n\telse:\n\t\tcount = 0\nprint(max_l)\n", "acgt=[\"A\",\"C\",\"G\",\"T\"]\nS=input()\n\ncount = 0\nmax = 0\nfor i in S:\n\tif i in acgt:\n\t\tcount += 1\n\telse:\n\t\tif count > max:\n\t\t\tmax = count\n\t\t\tcount = 0\nif count > max:\n\tmax = count\n\tcount = 0\n\nprint(max)\n", "S=input()\nagct='AGCT'\nans=0\ns=0\nfor i in range(len(S)):\n\tcnt=0\n\tif S[i] in agct:\n\t\tj=0\n\t\twhile i+j<len(S) and S[i+j] in agct:\n\t\t\tcnt+=1\n\t\t\tj+=1\n\t\tans=max(ans,cnt)\nprint(ans)\n", "S = str(input())\nans = 0\n\nfor i in range(len(S)):\n\tfor j in range(len(S)):\n\t\tcnt = 0\n\t\tflag = True\n\t\tfor k in S[i:j+1]:\n\t\t\tif k == 'A' or k == 'C' or k == 'G' or k == 'T':\n\t\t\t\tcnt += 1\n\t\t\telse:\n\t\t\t\tflag = False\n\t\tif flag:\n\t\t\tans = max(ans,cnt)\n\nprint(ans)\n", "s = input()\na, l = 0, 0\nfor i in s:\n\tif i in \"ATGC\":\n\t\tl += 1\n\telse:\n\t\tl = 0\n\ta = max(a, l)\nprint(a)\n", "s = input()\n\nm = [\"A\",\"C\",\"G\",\"T\"]\nans = 0\nt = 0\nfor i in range(len(s)):\n\tif s[i] in m: t += 1\n\telse:\n\t\tans = max(ans, t)\n\t\tt = 0\nprint(max(ans, t))\n", "S=input()\nACGT=[\"A\",\"C\",\"G\",\"T\"]\nans=0\ncnt=0\n\nfor i in range(len(S)):\n\tif S[i] in ACGT:\n\t\tcnt+=1\n\telse:\n\t\tans=max(ans,cnt)\n\t\tcnt=0\nans=max(ans,cnt)\n\nprint(ans)\n", "s = input()\nl = len(s)\ncnt = 0\nans = 0\n\nfor i in range(l):\n\tif s[i] == 'A' or s[i] == 'C' or s[i] == 'G' or s[i] == 'T':\n\t\tcnt += 1\n\t\tif ans < cnt:\n\t\t\tans = cnt\n\telse:\n\t\tcnt = 0\n\nprint(ans)\n", "S = input()\n \nN = len(S)\nans = 0\nfor i in range(N):\n\tfor j in range(i, N):\n\t\tT = list(S[i:j+1])\n\t\tM = len(T)\n \n\t\tflag = True\n\t\tfor k in range(M):\n\t\t\tif T[k] != 'A' and T[k] != 'C' and T[k] != 'G' and T[k] != 'T':\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif flag: ans = max(ans, M)\n\t\t\t\nprint(ans)\n", "S = input()\n\nans = 0\ncnt = 0\nfor i in S:\n\tif i in ['A', 'C', 'G', 'T']:\n\t\tcnt += 1\n\t\tans = max(ans, cnt)\n\telse:\n\t\tcnt = 0\n\nprint(ans)\n", "S = input()\n \nN = len(S)\nans = 0\n\n# Sの部分文字列は、空文字列以外に N+(N−1)+(N−2)+...+1 = N(N+1)/2 個存在する\n# 今回は N<=10 であり、この個数は最大で 10(10+1)/2 = 55 なので間に合う\n# 全て調べて、最も長い「ACGT文字列」の長さを求める\n# ここで「ACGT 文字列」は、A,C,G,Tのいずれかから成る文字列\n\n'''\ns = 'aAaAAbAccdd' # 'A'という文字が何個あるか調べる\ns.count('A') # 4\n'''\n\nfor i in range(N):\n\tfor j in range(i, N):\n\t\t# 'ACGT'.count(c) == 1 -> 文字cがA,C,G,Tのいずれかであるとき:True / otherwise: False\n\t\t# all() -> 引数に指定したListの要素がすべてTrue => True / otherwise: False\n\t\tif all(['ACGT'.count(c) == 1 for c in S[i:j+1]]): ans = max(ans, j-i+1)\n\t\t\t\nprint(ans)\n", "s = input()\n\nmx = 0\ncnt = 0\n\nfor (i, char) in enumerate(s):\n\tif char in \"ACGT\":\n\t\tcnt += 1\n\telse:\n\t\tmx = max(mx, cnt)\n\t\tcnt = 0\n\nmx = max(cnt, mx)\n\nprint(mx)\n", "S = input()\n\nans = 0\ncnt = 0\nfor i in list(S):\n\tif i in (\"A\", \"T\", \"C\", \"G\"):\n\t\tcnt += 1\n\t\tans = max(ans, cnt)\n\telse:\n\t\tcnt = 0\n\nprint(ans)\n", "L = ['A', 'C', 'G', 'T']\n\ns = input()\ncnt = [0]*len(s)\n\nfor i in range(len(s)):\n\tfor j in range(i, len(s)):\n\t\tif s[j] in L:\n\t\t\tcnt[i] += 1\n\t\telse:\n\t\t\tbreak\nprint((max(cnt)))\n", "s=input()\n\ntmp=0\nlength=[]\n\nfor i in range(len(s)):\n\tif s[i]==\"A\" or s[i]==\"C\" or s[i]==\"G\" or s[i]==\"T\":\n\t\ttmp+=1\n\t\tif i==len(s)-1:\n\t\t\tlength.append(tmp)\n\telse:\n\t\tlength.append(tmp)\n\t\ttmp=0\nprint(max(length))\n", "# -*- coding:utf-8 -*-\nimport re\nS = input()\nS_sp = re.split(\"[^ACGT]\",S)\nans = 0\nfor moji in S_sp:\n\tif len(moji) > ans:\n\t\tans = len(moji) \n\nprint(ans)\n", "S=input()\nS=list(S)\nfor i in range(len(S)):\n\ts=S[i]\n\tif (s==\"A\")|(s==\"T\")|(s==\"C\")|(s==\"G\"):\n\t\tS[i]=0\n\telse:\n\t\tS[i]=1\n\n\npoint=[0]*(len(S)+1)\nfor i in range(0,len(S)):\n\tif S[i]==0:\n\t\tpoint[i+1]=point[i]+1\n\telse:\n\t\tpoint[i+1]=0\n\nprint(max(point))\n", "S = str(input())\n\nN = len(S)\ncnt = [0 for i in range(N)]\nfor i in range(N):\n\tif S[i]=='A' or S[i]=='C' or S[i]=='G' or S[i]=='T':\n\t\tcnt[i] += 1\n\t\tfor j in range(i+1, N):\n\t\t\tif S[j]=='A' or S[j]=='C' or S[j]=='G' or S[j]=='T':\n\t\t\t\tcnt[i] += 1\n\t\t\telse:\n\t\t\t\tbreak\nprint(max(cnt))\n", "import re\n\n\ndef answer(s: str) -> int:\n\tpattern = r'[ACTG]+'\n\tresult = re.findall(pattern, s)\n\tif not result:\n\t\treturn 0\n\t  \n\treturn len(max(result, key=len))\n\n\ndef main():\n\ts = input()\n\tprint((answer(s)))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "S = input()\n\nans=0\nfor i in range(len(S)):\n\tcnt=0\n\tfor j in range(i,len(S)):\n\t\tif S[j] in [\"A\",\"C\",\"G\",\"T\"]:\n\t\t\tcnt+=1\n\t\telse:\n\t\t\tbreak\n\tans = max(ans,cnt)\nprint(ans)\n", "S = list(input())\ntemp = 0\nans = 0\nletter = [\"A\", \"T\", \"C\", \"G\"]\nfor i, val in enumerate(S):\n\tif val in letter:\n\t\ttemp += 1\n\telse:\n\t\tif ans < temp:\n\t\t\tans = temp\n\t\ttemp = 0\nif ans < temp:\n\tans = temp\nprint(ans)\n\t\t\t\n\n", "S=input()\nans=0\nacgt=['A','C','G','T']\nfor i in range(len(S)):\n\tif S[i] in acgt:\n\t\tcnt=0\n\t\tj=i\n\t\twhile j <len(S) and S[j] in acgt :\n\t\t\tcnt+=1\n\t\t\tj+=1\n\t\tans=max(ans,cnt)\n\nprint(ans)\n", "items = ['A', 'C', 'G', 'T']\n \ndef max(a, b):\n\treturn a if a > b else b\nx= 0\ny = 0\nfor c in list(input()):\n\tif c in items:\n \n\t\ty += 1\n\t\tx = max(x, y)\n\telse:\n\t\ty = 0\nprint(x)\n", "s = input()\na = \"\"\nb = 0\nfor i in s:\n\tif i in \"ACGT\":\n\t\ta += i\n\t\tif b < len(a):\n\t\t\tb = len(a)\n\telse:\n\t\ta = \"\"\nprint(b)\n"], "id": "id8631"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8631", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["string", 1], ["s", 1], ["consisting", 1], ["of", 1], ["uppercase", 1], ["english", 1], ["letters", 1], ["find", 1], ["the", 1], ["length", 1], ["of", 1], ["the", 1], ["longest", 1], ["acgt", 1], ["string", 1], ["that", 1], ["is", 1], ["a", 1], ["substring", 1], ["see", 1], ["notes", 1], ["of", 1], ["s", 1], ["here", 1], ["a", 1], ["acgt", 1], ["string", 1], ["is", 1], ["a", 1], ["string", 0], ["that", 0], ["contains", 0], ["no", 0], ["characters", 0], ["other", 0], ["than", 0], ["a", 0], ["c", 0], ["g", 0], ["and", 0], ["t", 0], ["notes", 0], ["a", 1], ["substring", 1], ["of", 1], ["a", 1], ["string", 1], ["t", 1], ["is", 1], ["a", 1], ["string", 1], ["obtained", 1], ["by", 1], ["removing", 1], ["zero", 1], ["or", 1], ["more", 1], ["characters", 1], ["from", 1], ["the", 1], ["beginning", 1], ["and", 1], ["the", 1], ["end", 1], ["of", 1], ["t", 1], ["for", 1], ["example", 1], ["the", 1], ["substrings", 1], ["of", 1], ["atcoder", 1], ["include", 0], ["tco", 0], ["at", 0], ["coder", 0], ["atcoder", 0], ["and", 0], ["the", 0], ["empty", 0], ["string", 0], ["but", 0], ["not", 0], ["ac", 0], ["constraints", 0], ["s", 1], ["is", 1], ["a", 1], ["string", 1], ["of", 1], ["length", 1], ["between", 1], ["1", 1], ["and", 0], ["10", 0], ["inclusive", 0], ["each", 0], ["character", 0], ["in", 0], ["s", 0], ["is", 0], ["an", 0], ["uppercase", 0], ["english", 0], ["letter", 0], ["input", 0], ["input", 0], ["is", 0], ["given", 0], ["from", 0], ["standard", 0], ["input", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["s", 0], ["output", 0], ["print", 1], ["the", 1], ["length", 0], ["of", 0], ["the", 0], ["longest", 0], ["acgt", 0], ["string", 0], ["that", 0], ["is", 0], ["a", 0], ["substring", 0], ["of", 0], ["s", 0], ["sample", 0], ["input", 0], ["atcoder", 0], ["sample", 0], ["output", 0], ["3", 0], ["among", 1], ["the", 1], ["acgt", 0], ["strings", 0], ["that", 0], ["are", 0], ["substrings", 0], ["of", 0], ["atcoder", 0], ["the", 0], ["longest", 0], ["one", 0], ["is", 0], ["atc", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4838709677419355, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4838709677419355, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8083832335329342, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8083832335329342, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4838709677419355, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4838709677419355, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8083832335329342, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8083832335329342, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["a", 0], ["input", 0], ["atcg", 0], ["a", 0], ["t", 0], ["c", 0], ["g", 0], ["result", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["in", 0], ["atcg", 0], ["res", 0], ["1", 0], ["else", 0], ["res", 0], ["0", 0], ["result", 0], ["append", 0], ["res", 0], ["print", 0], ["max", 0], ["result", 0], ["def", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["x", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["ans", 0], ["0", 0], ["now", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["in", 0], ["x", 0], ["now", 0], ["1", 0], ["else", 0], ["now", 0], ["0", 0], ["ans", 0], ["max", 0], ["now", 0], ["ans", 0], ["print", 0], ["ans", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["length", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["c", 0], ["in", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["length", 0], ["1", 0], ["else", 0], ["length", 0], ["0", 0], ["ans", 0], ["max", 0], ["length", 0], ["ans", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["score", 0], ["0", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["a", 0], ["t", 0], ["c", 0], ["g", 0], ["score", 0], ["1", 0], ["else", 0], ["score", 0], ["0", 0], ["ans", 0], ["append", 0], ["score", 0], ["print", 0], ["max", 0], ["ans", 0], ["str", 0], ["list", 0], ["list", 0], ["input", 0], ["count", 0], ["0", 0], ["max", 0], ["count", 0], ["0", 0], ["for", 0], ["char", 0], ["in", 0], ["str", 0], ["list", 0], ["if", 0], ["char", 0], ["a", 0], ["or", 0], ["char", 0], ["c", 0], ["or", 0], ["char", 0], ["g", 0], ["or", 0], ["char", 0], ["t", 0], ["count", 0], ["1", 0], ["else", 0], ["if", 0], ["count", 0], ["max", 0], ["count", 0], ["max", 0], ["count", 0], ["count", 0], ["count", 0], ["0", 0], ["if", 0], ["count", 0], ["max", 0], ["count", 0], ["max", 0], ["count", 0], ["count", 0], ["print", 0], ["max", 0], ["count", 0], ["s", 0], ["input", 0], ["data", 0], ["a", 0], ["t", 0], ["g", 0], ["c", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["j", 0], ["not", 0], ["in", 0], ["data", 0], ["ans", 0], ["max", 0], ["ans", 0], ["j", 0], ["i", 0], ["break", 0], ["elif", 0], ["j", 0], ["len", 0], ["s", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["len", 0], ["s", 0], ["i", 0], ["print", 0], ["ans", 0], ["def", 0], ["judge", 0], ["c", 0], ["if", 0], ["c", 0], ["a", 0], ["or", 0], ["c", 0], ["g", 0], ["or", 0], ["c", 0], ["c", 0], ["or", 0], ["c", 0], ["t", 0], ["return", 0], ["true", 0], ["else", 0], ["return", 0], ["false", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["len", 0], ["s", 0], ["1", 0], ["ok", 0], ["true", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["i", 0], ["j", 0], ["print", 0], ["i", 0], ["j", 0], ["k", 0], ["if", 0], ["not", 0], ["judge", 0], ["s", 0], ["k", 0], ["ok", 0], ["false", 0], ["if", 0], ["ok", 0], ["ans", 0], ["max", 0], ["ans", 0], ["j", 0], ["i", 0], ["print", 0], ["ans", 0], ["import", 0], ["re", 0], ["s", 0], ["input", 0], ["res", 0], ["re", 0], ["findall", 0], ["r", 0], ["atgc", 0], ["s", 0], ["ans", 0], ["0", 0], ["for", 0], ["e", 0], ["in", 0], ["res", 0], ["ans", 0], ["max", 0], ["ans", 0], ["len", 0], ["e", 0], ["print", 0], ["ans", 0], ["str1", 0], ["input", 0], ["table", 0], ["list", 0], ["str1", 0], ["count", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["str1", 0], ["if", 0], ["table", 0], ["i", 0], ["a", 0], ["or", 0], ["table", 0], ["i", 0], ["t", 0], ["or", 0], ["table", 0], ["i", 0], ["c", 0], ["or", 0], ["table", 0], ["i", 0], ["g", 0], ["count", 0], ["1", 0], ["if", 0], ["ans", 0], ["count", 0], ["ans", 0], ["count", 0], ["else", 0], ["count", 0], ["0", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["sの部分文字列は、空文字列以外に", 0], ["n", 0], ["n−1", 0], ["n−2", 0], ["1", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["個存在する", 0], ["今回は", 0], ["n", 0], ["10", 0], ["であり、この個数は最大で", 0], ["10", 0], ["10", 0], ["1", 0], ["2", 0], ["55", 0], ["なので間に合う", 0], ["全て調べて、最も長い「acgt文字列」の長さを求める", 0], ["ここで「acgt", 0], ["文字列」は、a", 0], ["c", 0], ["g", 0], ["tのいずれかから成る文字列", 0], ["n", 0], ["len", 0], ["s", 0], ["ans", 1], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["t", 0], ["list", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["m", 0], ["j", 0], ["i", 0], ["1", 0], ["acgt文字列かどうかの判定", 0], ["flag", 0], ["true", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["t", 0], ["k", 0], ["a", 0], ["and", 0], ["t", 0], ["k", 0], ["c", 0], ["and", 0], ["t", 0], ["k", 0], ["g", 0], ["and", 0], ["t", 0], ["k", 0], ["t", 0], ["flag", 0], ["false", 0], ["break", 0], ["acgt文字列なら長さを更新", 0], ["if", 0], ["flag", 0], ["ans", 0], ["max", 0], ["ans", 0], ["m", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["def", 0], ["rec", 0], ["n", 0], ["if", 0], ["n", 0], ["len", 0], ["s", 0], ["return", 0], ["0", 0], ["if", 0], ["s", 0], ["n", 0], ["in", 0], ["acgt", 0], ["return", 0], ["rec", 0], ["n", 0], ["1", 0], ["1", 0], ["else", 0], ["return", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["c", 0], ["rec", 0], ["i", 0], ["count", 0], ["max", 0], ["count", 0], ["c", 0], ["print", 0], ["count", 0], ["s", 0], ["input", 0], ["res", 0], ["0", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["c", 0], ["1", 0], ["else", 0], ["res", 0], ["max", 0], ["res", 0], ["c", 0], ["c", 0], ["0", 0], ["res", 0], ["max", 0], ["res", 0], ["c", 0], ["print", 0], ["res", 0], ["s", 0], ["input", 0], ["d", 0], ["a", 0], ["t", 0], ["c", 0], ["g", 0], ["l", 0], ["len", 0], ["s", 0], ["acgt", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["d", 0], ["a", 0], ["a", 0], ["s", 0], ["i", 0], ["if", 0], ["i", 0], ["l", 0], ["1", 0], ["acgt", 0], ["append", 0], ["a", 0], ["else", 0], ["acgt", 0], ["append", 0], ["a", 0], ["a", 0], ["max", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["acgt", 0], ["if", 0], ["len", 0], ["a", 0], ["max", 0], ["max", 0], ["len", 0], ["a", 0], ["print", 0], ["max", 0], ["s", 0], ["input", 0], ["s", 0], ["s", 0], ["replace", 0], ["a", 0], ["a", 0], ["s", 0], ["s", 0], ["replace", 0], ["t", 0], ["a", 0], ["s", 0], ["s", 0], ["replace", 0], ["c", 0], ["a", 0], ["s", 0], ["s", 0], ["replace", 0], ["g", 0], ["a", 0], ["ans", 0], ["0", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["x", 0], ["1", 0], ["else", 0], ["if", 0], ["ans", 0], ["x", 0], ["ans", 0], ["x", 0], ["x", 0], ["0", 0], ["if", 0], ["ans", 0], ["x", 0], ["ans", 0], ["x", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["s", 0], ["st", 0], ["acgt", 0], ["i", 0], ["n", 0], ["0", 0], ["len", 0], ["s", 0], ["max", 0], ["len", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["j", 0], ["i", 0], ["size", 0], ["0", 0], ["while", 0], ["s", 0], ["j", 0], ["in", 0], ["st", 0], ["size", 0], ["1", 0], ["j", 0], ["1", 0], ["i", 0], ["j", 0], ["1", 0], ["max", 0], ["len", 0], ["max", 0], ["max", 0], ["len", 0], ["size", 0], ["print", 0], ["max", 0], ["len", 0], ["s", 0], ["input", 0], ["tmp", 0], ["ans", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["tmp", 0], ["1", 0], ["else", 0], ["tmp", 0], ["0", 0], ["ans", 0], ["max", 0], ["ans", 0], ["tmp", 0], ["print", 0], ["ans", 0], ["s", 0], ["str", 0], ["input", 0], ["count", 0], ["0", 0], ["data", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["count", 0], ["1", 0], ["else", 0], ["data", 0], ["append", 0], ["count", 0], ["count", 0], ["0", 0], ["data", 0], ["append", 0], ["count", 0], ["print", 0], ["max", 0], ["data", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["tmp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["tmp", 0], ["1", 0], ["else", 0], ["tmp", 0], ["0", 0], ["count", 0], ["max", 0], ["tmp", 0], ["count", 0], ["print", 0], ["count", 0], ["s", 0], ["input", 0], ["ma", 0], ["cnt", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["cnt", 0], ["1", 0], ["ma", 0], ["max", 0], ["ma", 0], ["cnt", 0], ["else", 0], ["cnt", 0], ["0", 0], ["print", 0], ["ma", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["s", 0], ["if", 0], ["x", 0], ["in", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["cnt", 0], ["1", 0], ["ans", 0], ["max", 0], ["cnt", 0], ["ans", 0], ["else", 0], ["cnt", 0], ["0", 0], ["print", 0], ["ans", 0], ["b", 0], ["atcoder", 0], ["s", 0], ["list", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["s", 0], ["1", 0], ["tgt", 0], ["s", 0], ["i", 0], ["j", 0], ["cnt", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["tgt", 0], ["if", 0], ["s", 0], ["a", 0], ["or", 0], ["s", 0], ["c", 0], ["or", 0], ["s", 0], ["g", 0], ["or", 0], ["s", 0], ["t", 0], ["cnt", 0], ["1", 0], ["else", 0], ["cnt", 0], ["0", 0], ["break", 0], ["ans", 0], ["max", 0], ["cnt", 0], ["ans", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["char", 0], ["acgt", 0], ["now", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["char", 0], ["now", 0], ["1", 0], ["else", 0], ["now", 0], ["0", 0], ["ans", 0], ["max", 0], ["ans", 0], ["now", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["max", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["count", 0], ["1", 0], ["else", 0], ["if", 0], ["max", 0], ["count", 0], ["count", 0], ["max", 0], ["count", 0], ["count", 0], ["count", 0], ["0", 0], ["else", 0], ["count", 0], ["0", 0], ["print", 0], ["max", 0], ["max", 0], ["count", 0], ["count", 0], ["s", 0], ["input", 0], ["max", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["all", 0], ["acgt", 0], ["count", 0], ["c", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["max", 0], ["max", 0], ["j", 0], ["1", 0], ["i", 0], ["max", 0], ["print", 0], ["max", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["max", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["count", 0], ["1", 0], ["if", 0], ["max", 0], ["count", 0], ["max", 0], ["count", 0], ["else", 0], ["count", 0], ["0", 0], ["print", 0], ["max", 0], ["s", 0], ["list", 0], ["input", 0], ["print", 0], ["s", 0], ["rmax", 0], ["0", 0], ["r", 0], ["0", 0], ["for", 0], ["ss", 0], ["in", 0], ["s", 0], ["if", 0], ["ss", 0], ["in", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["r", 0], ["1", 0], ["else", 0], ["rmax", 0], ["max", 0], ["rmax", 0], ["r", 0], ["r", 0], ["0", 0], ["rmax", 0], ["max", 0], ["rmax", 0], ["r", 0], ["print", 0], ["rmax", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["a", 0], ["t", 0], ["c", 0], ["g", 0], ["count", 0], ["1", 0], ["else", 0], ["count", 0], ["0", 0], ["ans", 0], ["max", 0], ["ans", 0], ["count", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["def", 0], ["rec", 0], ["n", 0], ["if", 0], ["n", 0], ["len", 0], ["s", 0], ["return", 0], ["0", 0], ["if", 0], ["s", 0], ["n", 0], ["a", 0], ["or", 0], ["s", 0], ["n", 0], ["c", 0], ["or", 0], ["s", 0], ["n", 0], ["g", 0], ["or", 0], ["s", 0], ["n", 0], ["t", 0], ["return", 0], ["rec", 0], ["n", 0], ["1", 0], ["1", 0], ["else", 0], ["return", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["c", 0], ["rec", 0], ["i", 0], ["count", 0], ["max", 0], ["count", 0], ["c", 0], ["print", 0], ["count", 0], ["x", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["s", 0], ["input", 0], ["sum", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["x", 0], ["sum", 0], ["1", 0], ["else", 0], ["sum", 0], ["0", 0], ["ans", 0], ["max", 0], ["sum", 0], ["ans", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["maxv", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["cnt", 0], ["1", 0], ["if", 0], ["cnt", 0], ["maxv", 0], ["maxv", 0], ["cnt", 0], ["else", 0], ["cnt", 0], ["0", 0], ["print", 0], ["maxv", 0], ["s", 0], ["input", 0], ["ls", 0], ["len", 0], ["s", 0], ["cnt", 0], ["0", 0], ["ma", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ls", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["acgt", 0], ["cnt", 0], ["1", 0], ["else", 0], ["ma", 0], ["max", 0], ["ma", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["ma", 0], ["max", 0], ["ma", 0], ["cnt", 0], ["print", 0], ["ma", 0], ["s", 0], ["input", 0], ["l", 0], ["len", 0], ["s", 0], ["answer", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["for", 0], ["j", 0], ["in", 0], ["reversed", 0], ["range", 0], ["i", 0], ["1", 0], ["l", 0], ["1", 0], ["t", 0], ["s", 0], ["i", 0], ["j", 0], ["t", 0], ["1", 0], ["t", 0], ["replace", 0], ["a", 0], ["replace", 0], ["c", 0], ["replace", 0], ["g", 0], ["replace", 0], ["t", 0], ["if", 0], ["len", 0], ["t", 0], ["1", 0], ["0", 0], ["pri", 0], ["j", 0], ["i", 0], ["if", 0], ["pri", 0], ["answer", 0], ["answer", 0], ["pri", 0], ["print", 0], ["answer", 0], ["s", 0], ["input", 0], ["acgt", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["ans", 0], ["cnt", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["acgt", 0], ["cnt", 0], ["1", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["print", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["s", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["ans", 1], ["0", 1], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["if", 0], ["all", 0], ["acgt", 0], ["count", 0], ["c", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["j", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["n", 0], ["len", 0], ["s", 0], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["1", 0], ["t", 0], ["list", 0], ["s", 0], ["i", 0], ["j", 0], ["m", 0], ["len", 0], ["t", 0], ["flag", 0], ["true", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["t", 0], ["k", 0], ["a", 0], ["and", 0], ["t", 0], ["k", 0], ["c", 0], ["and", 0], ["t", 0], ["k", 0], ["g", 0], ["and", 0], ["t", 0], ["k", 0], ["t", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["ans", 0], ["max", 0], ["ans", 0], ["m", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["lst", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["count", 0], ["0", 0], ["top", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["lst", 0], ["count", 0], ["1", 0], ["else", 0], ["if", 0], ["count", 0], ["top", 0], ["top", 0], ["count", 0], ["count", 0], ["0", 0], ["if", 0], ["count", 0], ["top", 0], ["top", 0], ["count", 0], ["print", 0], ["top", 0], ["import", 0], ["itertools", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["itertools", 0], ["combinations", 0], ["list", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["2", 0], ["if", 0], ["all", 0], ["actg", 0], ["count", 0], ["c", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["i", 0], ["j", 0], ["ans", 0], ["max", 0], ["ans", 0], ["len", 0], ["s", 0], ["i", 0], ["j", 0], ["print", 0], ["ans", 0], ["remove", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["10", 0], ["j", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["remove", 0], ["cnt", 0], ["j", 0], ["1", 0], ["else", 0], ["j", 0], ["1", 0], ["print", 0], ["max", 0], ["cnt", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["zantei", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["zantei", 0], ["1", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["zantei", 0], ["zantei", 0], ["0", 0], ["ans", 0], ["max", 0], ["ans", 0], ["zantei", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["i", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["count", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["count", 0], ["1", 0], ["i", 0], ["1", 0], ["else", 0], ["list", 0], ["append", 0], ["count", 0], ["break", 0], ["print", 0], ["max", 0], ["list", 0], ["s", 0], ["input", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["s", 0], ["s", 0], ["i", 0], ["if", 0], ["s", 0], ["a", 0], ["or", 0], ["s", 0], ["t", 0], ["or", 0], ["s", 0], ["c", 0], ["or", 0], ["s", 0], ["g", 0], ["t", 0], ["append", 0], ["0", 0], ["else", 0], ["t", 0], ["append", 0], ["1", 0], ["point", 0], ["0", 0], ["len", 0], ["s", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["t", 0], ["i", 0], ["0", 0], ["point", 0], ["i", 0], ["1", 0], ["point", 0], ["i", 0], ["1", 0], ["else", 0], ["point", 0], ["i", 0], ["1", 0], ["0", 0], ["print", 0], ["max", 0], ["point", 0], ["s", 0], ["list", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["a", 0], ["g", 0], ["c", 0], ["t", 0], ["s", 0], ["i", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["flag", 0], ["true", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["s", 0], ["k", 0], ["a", 0], ["flag", 0], ["false", 0], ["if", 0], ["flag", 0], ["ans", 0], ["max", 0], ["ans", 0], ["j", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["s", 0], ["str", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["count", 0], ["0", 0], ["saidai", 0], ["0", 0], ["vernon", 0], ["a", 0], ["g", 0], ["t", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["vernon", 0], ["count", 0], ["s", 0], ["i", 0], ["0", 0], ["count", 0], ["1", 0], ["else", 0], ["saidai", 0], ["max", 0], ["saidai", 0], ["count", 0], ["count", 0], ["0", 0], ["saidai", 0], ["max", 0], ["saidai", 0], ["count", 0], ["print", 0], ["saidai", 0], ["s", 0], ["input", 0], ["t", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["cnt", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["t", 0], ["cnt", 0], ["1", 0], ["if", 0], ["cnt", 0], ["ans", 0], ["ans", 0], ["cnt", 0], ["else", 0], ["cnt", 0], ["0", 0], ["print", 0], ["ans", 0], ["s", 0], ["list", 0], ["input", 0], ["c", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["a", 0], ["or", 0], ["i", 0], ["c", 0], ["or", 0], ["i", 0], ["g", 0], ["or", 0], ["i", 0], ["t", 0], ["c", 0], ["1", 0], ["else", 0], ["c", 0], ["0", 0], ["ans", 0], ["append", 0], ["c", 0], ["print", 0], ["max", 0], ["ans", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["all", 0], ["acgt", 0], ["count", 0], ["c", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["j", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["acgt", 0], ["s", 0], ["input", 0], ["ct", 0], ["0", 0], ["ctm", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["ct", 0], ["1", 0], ["if", 0], ["i", 0], ["len", 0], ["s", 0], ["1", 0], ["ctm", 0], ["append", 0], ["ct", 0], ["else", 0], ["ctm", 0], ["append", 0], ["ct", 0], ["ct", 0], ["0", 0], ["print", 0], ["max", 0], ["ctm", 0], ["s", 0], ["input", 0], ["score", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["a", 0], ["t", 0], ["c", 0], ["g", 0], ["score", 0], ["1", 0], ["else", 0], ["score", 0], ["0", 0], ["ans", 0], ["max", 0], ["score", 0], ["ans", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["tmp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["a", 0], ["or", 0], ["i", 0], ["t", 0], ["or", 0], ["i", 0], ["g", 0], ["or", 0], ["i", 0], ["c", 0], ["tmp", 0], ["1", 0], ["else", 0], ["tmp", 0], ["0", 0], ["ans", 0], ["max", 0], ["tmp", 0], ["ans", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["res", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["a", 0], ["t", 0], ["g", 0], ["c", 0], ["cnt", 0], ["1", 0], ["else", 0], ["res", 0], ["max", 0], ["res", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["res", 0], ["max", 0], ["res", 0], ["cnt", 0], ["print", 0], ["res", 0], ["s", 0], ["input", 0], ["tmp", 0], ["ans", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["all", 0], ["agct", 0], ["count", 0], ["h", 0], ["1", 0], ["for", 0], ["h", 0], ["in", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["j", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["ans", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["x", 0], ["1", 0], ["else", 0], ["ans", 0], ["append", 0], ["x", 0], ["x", 0], ["0", 0], ["ans", 0], ["append", 0], ["x", 0], ["print", 0], ["max", 0], ["ans", 0], ["s", 0], ["list", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["temp", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["all", 0], ["i", 0], ["in", 0], ["atgc", 0], ["for", 0], ["i", 0], ["in", 0], ["temp", 0], ["res", 0], ["max", 0], ["res", 0], ["len", 0], ["temp", 0], ["print", 0], ["res", 0], ["s", 0], ["input", 0], ["acgt", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["i", 0], ["0", 0], ["max", 0], ["ans", 0], ["0", 0], ["curr", 0], ["ans", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["acgt", 0], ["curr", 0], ["ans", 0], ["1", 0], ["else", 0], ["max", 0], ["ans", 0], ["max", 0], ["max", 0], ["ans", 0], ["curr", 0], ["ans", 0], ["curr", 0], ["ans", 0], ["0", 0], ["i", 0], ["1", 0], ["max", 0], ["ans", 0], ["max", 0], ["max", 0], ["ans", 0], ["curr", 0], ["ans", 0], ["print", 0], ["max", 0], ["ans", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["max", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["cnt", 0], ["1", 0], ["else", 0], ["if", 0], ["max", 0], ["cnt", 0], ["max", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["if", 0], ["max", 0], ["cnt", 0], ["max", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["print", 0], ["max", 0], ["s", 0], ["list", 0], ["input", 0], ["c", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["a", 0], ["or", 0], ["i", 0], ["c", 0], ["or", 0], ["i", 0], ["g", 0], ["or", 0], ["i", 0], ["t", 0], ["c", 0], ["1", 0], ["else", 0], ["c", 0], ["0", 0], ["ans", 0], ["append", 0], ["c", 0], ["print", 0], ["max", 0], ["ans", 0], ["s", 0], ["input", 0], ["l", 0], ["len", 0], ["s", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["c", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["i", 0], ["if", 0], ["s", 0], ["in", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["c", 0], ["1", 0], ["else", 0], ["break", 0], ["ans", 0], ["max", 0], ["ans", 0], ["c", 0], ["print", 0], ["ans", 0], ["text", 0], ["input", 0], ["count", 0], ["0", 0], ["max", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["text", 0], ["if", 0], ["text", 0], ["i", 0], ["a", 0], ["or", 0], ["text", 0], ["i", 0], ["c", 0], ["or", 0], ["text", 0], ["i", 0], ["g", 0], ["or", 0], ["text", 0], ["i", 0], ["t", 0], ["count", 0], ["1", 0], ["else", 0], ["if", 0], ["max", 0], ["count", 0], ["count", 0], ["max", 0], ["count", 0], ["count", 0], ["count", 0], ["0", 0], ["else", 0], ["count", 0], ["0", 0], ["print", 0], ["max", 0], ["max", 0], ["count", 0], ["count", 0], ["s", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["ans", 0], ["0", 0], ["sの部分文字列は、空文字列以外に", 0], ["n", 0], ["n−1", 0], ["n−2", 0], ["1", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["個存在する", 0], ["今回は", 0], ["n", 0], ["10", 0], ["であり、この個数は最大で", 0], ["10", 0], ["10", 0], ["1", 0], ["2", 0], ["55", 0], ["なので間に合う", 0], ["全て調べて、最も長い「acgt文字列」の長さを求める", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["if", 0], ["all", 0], ["acgt", 0], ["count", 0], ["c", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["j", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["s", 0], ["list", 0], ["input", 0], ["x", 0], ["l", 0], ["a", 0], ["g", 0], ["c", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["l", 0], ["s", 0], ["i", 0], ["1", 0], ["else", 0], ["s", 0], ["i", 0], ["0", 0], ["cnt", 0], ["0", 0], ["li", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["cnt", 0], ["1", 0], ["else", 0], ["li", 0], ["append", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["print", 0], ["max", 0], ["li", 0], ["s", 0], ["input", 0], ["s", 0], ["len", 0], ["len", 0], ["s", 0], ["acgt", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["max", 0], ["len", 0], ["0", 0], ["max", 0], ["str", 0], ["str", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["s", 0], ["len", 0], ["str", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["s", 0], ["len", 0], ["if", 0], ["s", 0], ["j", 0], ["in", 0], ["acgt", 0], ["str", 0], ["s", 0], ["j", 0], ["if", 0], ["len", 0], ["str", 0], ["max", 0], ["len", 0], ["max", 0], ["len", 0], ["len", 0], ["str", 0], ["max", 0], ["str", 0], ["str", 0], ["else", 0], ["str", 0], ["print", 0], ["max", 0], ["len", 0], ["target", 0], ["a", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["def", 0], ["main", 0], ["s", 0], ["str", 0], ["input", 0], ["max", 0], ["cnt", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["in", 0], ["target", 0], ["a", 0], ["cnt", 0], ["1", 0], ["else", 0], ["if", 0], ["cnt", 0], ["max", 0], ["cnt", 0], ["max", 0], ["cnt", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["if", 0], ["cnt", 0], ["max", 0], ["cnt", 0], ["max", 0], ["cnt", 0], ["cnt", 0], ["print", 0], ["max", 0], ["cnt", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["maxlen", 0], ["0", 0], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["s", 0], ["1", 0], ["t", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["all", 0], ["c", 0], ["in", 0], ["acgt", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["i", 0], ["j", 0], ["maxlen", 0], ["max", 0], ["maxlen", 0], ["j", 0], ["i", 0], ["print", 0], ["maxlen", 0], ["a", 0], ["input", 0], ["atcg", 0], ["a", 0], ["t", 0], ["c", 0], ["g", 0], ["result", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["in", 0], ["atcg", 0], ["res", 0], ["1", 0], ["else", 0], ["res", 0], ["0", 0], ["result", 0], ["append", 0], ["res", 0], ["print", 0], ["max", 0], ["result", 0], ["moji", 0], ["str", 0], ["input", 0], ["ans", 0], ["0", 0], ["cans", 0], ["0", 0], ["correct", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["moji", 0], ["if", 0], ["moji", 0], ["i", 0], ["in", 0], ["correct", 0], ["cans", 0], ["1", 0], ["if", 0], ["cans", 0], ["ans", 0], ["ans", 0], ["cans", 0], ["else", 0], ["if", 0], ["cans", 0], ["ans", 0], ["ans", 0], ["cans", 0], ["cans", 0], ["0", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["res", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["in", 0], ["agct", 0], ["cnt", 0], ["1", 0], ["res", 0], ["max", 0], ["res", 0], ["cnt", 0], ["else", 0], ["cnt", 0], ["0", 0], ["print", 0], ["res", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["tmp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["j", 0], ["a", 0], ["or", 0], ["s", 0], ["j", 0], ["c", 0], ["or", 0], ["s", 0], ["j", 0], ["g", 0], ["or", 0], ["s", 0], ["j", 0], ["t", 0], ["tmp", 0], ["1", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["tmp", 0], ["tmp", 0], ["0", 0], ["break", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["tmp", 0], ["tmp", 0], ["0", 0], ["print", 0], ["ans", 0], ["words", 0], ["a", 0], ["g", 0], ["c", 0], ["t", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["words", 0], ["cnt", 0], ["1", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["print", 0], ["ans", 0], ["s", 0], ["str", 0], ["input", 0], ["le", 0], ["len", 0], ["s", 0], ["cnt", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["le", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["in", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["in", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["in", 0], ["t", 0], ["cnt", 0], ["1", 0], ["if", 0], ["ans", 0], ["cnt", 0], ["ans", 0], ["cnt", 0], ["else", 0], ["cnt", 0], ["0", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["slove", 0], ["s", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["l", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["l", 0], ["1", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["l", 0], ["l", 0], ["0", 0], ["ans", 0], ["max", 0], ["ans", 0], ["l", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["slove", 0], ["starting", 0], ["point", 0], ["import", 0], ["re", 0], ["s", 0], ["input", 0], ["r", 0], ["re", 0], ["findall", 0], ["actg", 0], ["s", 0], ["print", 0], ["max", 0], ["len", 0], ["for", 0], ["in", 0], ["r", 0], ["default", 0], ["0", 0], ["s", 0], ["input", 0], ["length", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["s", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["s", 0], ["1", 0], ["t", 0], ["s", 0], ["i", 0], ["j", 0], ["if", 0], ["t", 0], ["replace", 0], ["a", 0], ["replace", 0], ["c", 0], ["replace", 0], ["g", 0], ["replace", 0], ["t", 0], ["if", 0], ["len", 0], ["t", 0], ["length", 0], ["length", 0], ["len", 0], ["t", 0], ["print", 0], ["length", 0], ["n", 0], ["str", 0], ["input", 0], ["pattern", 0], ["acgt", 0], ["r", 0], ["tmp", 0], ["0", 0], ["0", 0], ["c", 0], ["false", 0], ["for", 0], ["s", 0], ["in", 0], ["n", 0], ["if", 0], ["s", 0], ["in", 0], ["pattern", 0], ["tmp", 0], ["1", 0], ["else", 0], ["if", 0], ["r", 0], ["tmp", 0], ["r", 0], ["tmp", 0], ["tmp", 0], ["0", 0], ["if", 0], ["r", 0], ["tmp", 0], ["r", 0], ["tmp", 0], ["print", 0], ["r", 0], ["s", 0], ["input", 0], ["l", 0], ["len", 0], ["s", 0], ["acgt", 0], ["a", 0], ["g", 0], ["c", 0], ["t", 0], ["count", 0], ["0", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["acgt", 0], ["count", 0], ["1", 0], ["ans", 0], ["append", 0], ["count", 0], ["else", 0], ["ans", 0], ["append", 0], ["count", 0], ["count", 0], ["0", 0], ["print", 0], ["max", 0], ["ans", 0], ["x", 0], ["str", 0], ["input", 0], ["n", 0], ["len", 0], ["x", 0], ["ans", 0], ["0", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["x", 0], ["i", 0], ["a", 0], ["or", 0], ["x", 0], ["i", 0], ["c", 0], ["or", 0], ["x", 0], ["i", 0], ["g", 0], ["or", 0], ["x", 0], ["i", 0], ["t", 0], ["count", 0], ["1", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["count", 0], ["count", 0], ["0", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["count", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["acgt", 0], ["s", 0], ["1", 0], ["else", 0], ["s", 0], ["0", 0], ["print", 0], ["max", 0], ["list", 0], ["map", 0], ["len", 0], ["s", 0], ["split", 0], ["0", 0], ["s", 0], ["input", 0], ["l", 0], ["len", 0], ["s", 0], ["max", 0], ["l", 0], ["0", 0], ["count", 0], ["0", 0], ["lst", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["lst", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["max", 0], ["l", 0], ["max", 0], ["l", 0], ["count", 0], ["else", 0], ["count", 0], ["0", 0], ["print", 0], ["max", 0], ["l", 0], ["acgt", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["max", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["acgt", 0], ["count", 0], ["1", 0], ["else", 0], ["if", 0], ["count", 0], ["max", 0], ["max", 0], ["count", 0], ["count", 0], ["0", 0], ["if", 0], ["count", 0], ["max", 0], ["max", 0], ["count", 0], ["count", 0], ["0", 0], ["print", 0], ["max", 0], ["s", 0], ["input", 0], ["agct", 0], ["agct", 0], ["ans", 0], ["0", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["cnt", 0], ["0", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["agct", 0], ["j", 0], ["0", 0], ["while", 0], ["i", 0], ["j", 0], ["len", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["j", 0], ["in", 0], ["agct", 0], ["cnt", 0], ["1", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["print", 0], ["ans", 0], ["s", 0], ["str", 0], ["input", 0], ["ans", 0], ["0", 1], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["cnt", 0], ["0", 0], ["flag", 0], ["true", 0], ["for", 0], ["k", 0], ["in", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["k", 0], ["a", 0], ["or", 0], ["k", 0], ["c", 0], ["or", 0], ["k", 0], ["g", 0], ["or", 0], ["k", 0], ["t", 0], ["cnt", 0], ["1", 0], ["else", 0], ["flag", 0], ["false", 0], ["if", 0], ["flag", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["a", 0], ["l", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["atgc", 0], ["l", 0], ["1", 0], ["else", 0], ["l", 0], ["0", 0], ["a", 0], ["max", 0], ["a", 0], ["l", 0], ["print", 0], ["a", 0], ["s", 0], ["input", 0], ["m", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["ans", 0], ["0", 0], ["t", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["m", 0], ["t", 0], ["1", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["t", 0], ["t", 0], ["0", 0], ["print", 0], ["max", 0], ["ans", 0], ["t", 0], ["s", 0], ["input", 0], ["acgt", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["ans", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["acgt", 0], ["cnt", 0], ["1", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["l", 0], ["len", 0], ["s", 0], ["cnt", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["cnt", 0], ["1", 0], ["if", 0], ["ans", 0], ["cnt", 0], ["ans", 0], ["cnt", 0], ["else", 0], ["cnt", 0], ["0", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["ans", 1], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["t", 0], ["list", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["m", 0], ["len", 0], ["t", 0], ["flag", 0], ["true", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["t", 0], ["k", 0], ["a", 0], ["and", 0], ["t", 0], ["k", 0], ["c", 0], ["and", 0], ["t", 0], ["k", 0], ["g", 0], ["and", 0], ["t", 0], ["k", 0], ["t", 0], ["flag", 0], ["false", 0], ["break", 0], ["if", 0], ["flag", 0], ["ans", 0], ["max", 0], ["ans", 0], ["m", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["cnt", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["else", 0], ["cnt", 0], ["0", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["ans", 0], ["0", 0], ["sの部分文字列は、空文字列以外に", 0], ["n", 0], ["n−1", 0], ["n−2", 0], ["1", 0], ["n", 0], ["n", 0], ["1", 0], ["2", 0], ["個存在する", 0], ["今回は", 0], ["n", 0], ["10", 0], ["であり、この個数は最大で", 0], ["10", 0], ["10", 0], ["1", 0], ["2", 0], ["55", 0], ["なので間に合う", 0], ["全て調べて、最も長い「acgt文字列」の長さを求める", 0], ["ここで「acgt", 0], ["文字列」は、a", 0], ["c", 0], ["g", 0], ["tのいずれかから成る文字列", 0], ["s", 0], ["aaaaabaccdd", 0], ["a", 0], ["という文字が何個あるか調べる", 0], ["s", 0], ["count", 0], ["a", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["n", 0], ["acgt", 0], ["count", 0], ["c", 0], ["1", 0], ["文字cがa", 0], ["c", 0], ["g", 0], ["tのいずれかであるとき", 0], ["true", 0], ["otherwise", 0], ["false", 0], ["all", 0], ["引数に指定したlistの要素がすべてtrue", 0], ["true", 0], ["otherwise", 0], ["false", 0], ["if", 0], ["all", 0], ["acgt", 0], ["count", 0], ["c", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["i", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["j", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["mx", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["char", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["char", 0], ["in", 0], ["acgt", 0], ["cnt", 0], ["1", 0], ["else", 0], ["mx", 0], ["max", 0], ["mx", 0], ["cnt", 0], ["cnt", 0], ["0", 0], ["mx", 0], ["max", 0], ["cnt", 0], ["mx", 0], ["print", 0], ["mx", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["list", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["a", 0], ["t", 0], ["c", 0], ["g", 0], ["cnt", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["else", 0], ["cnt", 0], ["0", 0], ["print", 0], ["ans", 0], ["l", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["len", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["j", 0], ["in", 0], ["l", 0], ["cnt", 0], ["i", 0], ["1", 0], ["else", 0], ["break", 0], ["print", 0], ["max", 0], ["cnt", 0], ["s", 0], ["input", 0], ["tmp", 0], ["0", 0], ["length", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["tmp", 0], ["1", 0], ["if", 0], ["i", 0], ["len", 0], ["s", 0], ["1", 0], ["length", 0], ["append", 0], ["tmp", 0], ["else", 0], ["length", 0], ["append", 0], ["tmp", 0], ["tmp", 0], ["0", 0], ["print", 0], ["max", 0], ["length", 0], ["coding", 0], ["utf", 0], ["8", 0], ["import", 0], ["re", 0], ["s", 0], ["input", 0], ["s", 0], ["sp", 0], ["re", 0], ["split", 0], ["acgt", 0], ["s", 0], ["ans", 0], ["0", 0], ["for", 0], ["moji", 0], ["in", 0], ["s", 0], ["sp", 0], ["if", 0], ["len", 0], ["moji", 0], ["ans", 0], ["ans", 0], ["len", 0], ["moji", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["s", 0], ["list", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["s", 0], ["s", 0], ["i", 0], ["if", 0], ["s", 0], ["a", 0], ["s", 0], ["t", 0], ["s", 0], ["c", 0], ["s", 0], ["g", 0], ["s", 0], ["i", 0], ["0", 0], ["else", 0], ["s", 0], ["i", 0], ["1", 0], ["point", 0], ["0", 0], ["len", 0], ["s", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["0", 0], ["point", 0], ["i", 0], ["1", 0], ["point", 0], ["i", 0], ["1", 0], ["else", 0], ["point", 0], ["i", 0], ["1", 0], ["0", 0], ["print", 0], ["max", 0], ["point", 0], ["s", 0], ["str", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["or", 0], ["s", 0], ["i", 0], ["c", 0], ["or", 0], ["s", 0], ["i", 0], ["g", 0], ["or", 0], ["s", 0], ["i", 0], ["t", 0], ["cnt", 0], ["i", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["j", 0], ["a", 0], ["or", 0], ["s", 0], ["j", 0], ["c", 0], ["or", 0], ["s", 0], ["j", 0], ["g", 0], ["or", 0], ["s", 0], ["j", 0], ["t", 0], ["cnt", 0], ["i", 0], ["1", 0], ["else", 0], ["break", 0], ["print", 0], ["max", 0], ["cnt", 0], ["import", 0], ["re", 0], ["def", 0], ["answer", 0], ["s", 0], ["str", 0], ["int", 0], ["pattern", 0], ["r", 0], ["actg", 0], ["result", 0], ["re", 0], ["findall", 0], ["pattern", 0], ["s", 0], ["if", 0], ["not", 0], ["result", 0], ["return", 0], ["0", 0], ["return", 0], ["len", 0], ["max", 0], ["result", 0], ["key", 0], ["len", 0], ["def", 0], ["main", 0], ["s", 0], ["input", 0], ["print", 0], ["answer", 0], ["s", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["cnt", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["j", 0], ["in", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["cnt", 0], ["1", 0], ["else", 0], ["break", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["print", 0], ["ans", 0], ["s", 0], ["list", 0], ["input", 0], ["temp", 0], ["0", 0], ["ans", 0], ["0", 0], ["letter", 0], ["a", 0], ["t", 0], ["c", 0], ["g", 0], ["for", 0], ["i", 0], ["val", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["val", 0], ["in", 0], ["letter", 0], ["temp", 0], ["1", 0], ["else", 0], ["if", 0], ["ans", 0], ["temp", 0], ["ans", 0], ["temp", 0], ["temp", 0], ["0", 0], ["if", 0], ["ans", 0], ["temp", 0], ["ans", 0], ["temp", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["acgt", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["in", 0], ["acgt", 0], ["cnt", 0], ["0", 0], ["j", 0], ["i", 0], ["while", 0], ["j", 0], ["len", 0], ["s", 0], ["and", 0], ["s", 0], ["j", 0], ["in", 0], ["acgt", 0], ["cnt", 0], ["1", 0], ["j", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["cnt", 0], ["print", 0], ["ans", 0], ["items", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["def", 0], ["max", 0], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["if", 0], ["a", 0], ["b", 0], ["else", 0], ["b", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["list", 0], ["input", 0], ["if", 0], ["c", 0], ["in", 0], ["items", 0], ["y", 0], ["1", 0], ["x", 0], ["max", 0], ["x", 0], ["y", 0], ["else", 0], ["y", 0], ["0", 0], ["print", 0], ["x", 0], ["s", 0], ["input", 0], ["a", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["in", 0], ["acgt", 0], ["a", 0], ["i", 0], ["if", 0], ["b", 0], ["len", 0], ["a", 0], ["b", 0], ["len", 0], ["a", 0], ["else", 0], ["a", 0], ["print", 0], ["b", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0016859344894026974, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0015655105973025048, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.018972142170989432, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.017411143131604228, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0016859344894026974, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0015655105973025048, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.018972142170989432, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.017411143131604228, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nLittle Chris is a huge fan of linear algebra. This time he has been given a homework about the unusual square of a square matrix.\n\nThe dot product of two integer number vectors x and y of size n is the sum of the products of the corresponding components of the vectors. The unusual square of an n × n square matrix A is defined as the sum of n dot products. The i-th of them is the dot product of the i-th row vector and the i-th column vector in the matrix A.\n\nFortunately for Chris, he has to work only in GF(2)! This means that all operations (addition, multiplication) are calculated modulo 2. In fact, the matrix A is binary: each element of A is either 0 or 1. For example, consider the following matrix A: $\\left(\\begin{array}{l l l}{1} & {1} & {1} \\\\{0} & {1} & {1} \\\\{1} & {0} & {0} \\end{array} \\right)$ \n\nThe unusual square of A is equal to (1·1 + 1·0 + 1·1) + (0·1 + 1·1 + 1·0) + (1·1 + 0·1 + 0·0) = 0 + 1 + 1 = 0.\n\nHowever, there is much more to the homework. Chris has to process q queries; each query can be one of the following:   given a row index i, flip all the values in the i-th row in A;  given a column index i, flip all the values in the i-th column in A;  find the unusual square of A. \n\nTo flip a bit value w means to change it to 1 - w, i.e., 1 changes to 0 and 0 changes to 1.\n\nGiven the initial matrix A, output the answers for each query of the third type! Can you solve Chris's homework?\n\n\n-----Input-----\n\nThe first line of input contains an integer n (1 ≤ n ≤ 1000), the number of rows and the number of columns in the matrix A. The next n lines describe the matrix: the i-th line contains n space-separated bits and describes the i-th row of A. The j-th number of the i-th line a_{ij} (0 ≤ a_{ij} ≤ 1) is the element on the intersection of the i-th row and the j-th column of A.\n\nThe next line of input contains an integer q (1 ≤ q ≤ 10^6), the number of queries. Each of the next q lines describes a single query, which can be one of the following:   1 i — flip the values of the i-th row;  2 i — flip the values of the i-th column;  3 — output the unusual square of A. \n\nNote: since the size of the input and output could be very large, don't use slow output techniques in your language. For example, do not use input and output streams (cin, cout) in C++.\n\n\n-----Output-----\n\nLet the number of the 3rd type queries in the input be m. Output a single string s of length m, where the i-th symbol of s is the value of the unusual square of A for the i-th query of the 3rd type as it appears in the input.\n\n\n-----Examples-----\nInput\n3\n1 1 1\n0 1 1\n1 0 0\n12\n3\n2 3\n3\n2 2\n2 2\n1 3\n3\n3\n1 2\n2 1\n1 1\n3\n\nOutput\n01001\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from functools import reduce\ndef main():\n\tfrom sys import stdin\n\tfrom operator import xor\n\tfrom functools import reduce\n\tx, res = reduce(xor, (input()[i] == '1' for i in range(0, int(input()) * 2, 2))), []\n\tinput()\n\tfor s in stdin.read().splitlines():\n\t\tif s == '3':\n\t\t\tres.append(\"01\"[x])\n\t\telse:\n\t\t\tx ^= True\n\tprint(''.join(res))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from sys import stdin\ninput = stdin.readline\nn = int(input())\narr = list(list(map(int, input().split())) for _ in range(n))\ncurr, res = 0, []\nfor i in range(n):\n\tfor j in range(n):\n\t\tif i == j:\n\t\t\tcurr ^= arr[i][j]\nq = int(input())\nfor _ in range(q):\n\ts = input()\n\tif s[0] == '3':\n\t\tres.append(str(curr))\n\telse:\n\t\tcurr ^= 1\nprint(''.join(res))\n", "from sys import stdin\ninput = stdin.readline\nn = int(input())\nlis=list(list(map(int, input().split())) for _ in range(n))\nu=0\nfor i in range(n):\n\tfor j in range(n):\n\t\tif i==j:\n\t\t\tu^=lis[i][j]\nans =[]\nk = int(input())\nfor i in range(k):\n\ts = input()\n\tif s[0]=='3':\n\t\tans.append(str(u))\n\telse:\n\t\tu^=1\nprint(''.join(ans))            \n\n\n\n", "from functools import reduce\ndef main():\n\tfrom sys import stdin, stdout\n\tfrom functools import reduce\n\tfrom operator import xor\n\n\tn = int(int(input()))\n\tmat = [list(map(int, input().split())) for _ in range(n)]\n\tans, q, a = reduce(xor, [mat[i][i] for i in range(n)]), int(input()), []\n\tqueries = [stdin.readline() for i in range(q)]\n\n\tfor query in queries:\n\t\tif query[0] == '3':\n\t\t\ta.append(str(ans))\n\t\telse:\n\t\t\tans ^= 1\n\tprint(''.join(a))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from sys import stdin\n\ntest = stdin.readlines()\nn = int(test[0])\nmatrix = [test[i+1].split() for i in range(n)]\n\ndot = 0\nfor i in range(n):\n\tdot ^= matrix[i][i] == '1'\n\nout = []\nfor q in range(int(test[n + 1])):\n\tquery = test[n + q + 2].split()\n\tif len(query) == 1:\n\t\tout.append(dot)\n\telse:\n\t\tdot ^= 1\n\nprint(''.join(map(str, out)))\n", "from sys import stdin\n\ntest = stdin.readlines()\nn = int(test[0])\n\n\ndot = 0\nj = 0\nfor i in range(n):\n\tif test[i+1][j] == '1':\n\t\tdot ^= 1\n\tj += 2\n\nout = []\nfor q in range(int(test[n + 1])):\n\tquery = test[n + q + 2].split()\n\tif len(query) == 1:\n\t\tout.append(dot)\n\telse:\n\t\tdot ^= 1\n\nprint(''.join(map(str, out)))\n", "from sys import stdin\n\nn = int(stdin.readline())\ndot = 0\nj = 0\nfor i in range(n):\n\tline = stdin.readline()\n\tif line[j] == '1':\n\t\tdot ^= 1\n\tj += 2\n\nout = []\nstdin.readline()\nfor query in stdin:\n\tif len(query) < 3:\n\t\tout.append('1' if dot else '0')\n\telse:\n\t\tdot ^= 1\n\nprint(''.join(out))\n", "from sys import stdin\n\nn = int(stdin.readline())\ndot = 0\nj = 0\nfor i in range(n):\n\tline = stdin.readline()\n\tif line[j] == '1':\n\t\tdot ^= 1\n\tj += 2\n\nout = []\nstdin.readline()\nfor query in stdin:\n\tif len(query) < 3:\n\t\tout.append('1' if dot else '0')\n\telse:\n\t\tdot ^= 1\n\nprint(''.join(out))\n", "from sys import stdin\n\nn = int(stdin.readline())\ndot = 0\nj = 0\nfor i in range(0, 2 * n, 2):\n\tline = stdin.readline()\n\tif line[i] == '1':\n\t\tdot ^= 1\n\nout = []\nstdin.readline()\nfor query in stdin:\n\tif len(query) < 3:\n\t\tout.append('1' if dot else '0')\n\telse:\n\t\tdot ^= 1\n\nprint(''.join(out))\n", "from sys import stdin\ninput = stdin.readline\nn = int(input())\nlis=list(list(map(int, input().split())) for _ in range(n))\nval=0\nfor i in range(n):\n\ttmp=0\n\tfor j in range(n):\n\t\ttmp+=lis[i][j]*lis[j][i]\n\tval+=tmp%2\nval = val%2        \nq = int(input())\nans=[]\nfor i in range(q):\n\tss = input()\n\tif ss[0]=='3':\n\t\tans.append(str(val))\n\telse:\n\t\tval=val^1\nprint(''.join(ans))        \n\n\n\n", "# from operator import and_, xor\n# from functools import reduce\n# from itertools import chain\nfrom sys import stdin\ninput = stdin.readline\n\nn = int(input())\nl = list(list(map(int, input().split())) for _ in range(n))\nq = int(input())\noutput = []\nans = 0\n\n# We don't care about anything except for the trace of the matrix\n# Why? write the matrix with symbols not 0's and 1's\n\nfor i in range(n):\n\tans ^= l[i][i]\n\nfor i in range(q):\n\tcommand = input()\n\tif command[0] == '3':\n\t\toutput.append(ans)\n\telse:\n\t\tans^=1\n# Why? first, put in mind that all we care about is the trace of the matrix\n# We will flip either the column or the row, we will be facing two possibilities\n# either to subtract from the original answer or do addition ... well thanks to GF(2)\n# both of the operations are just XORing \n\nprint(''.join([*map(str, output)]))\n"], "id": "id7809"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7809", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["little", 2], ["chris", 2], ["is", 2], ["a", 2], ["huge", 2], ["fan", 2], ["of", 2], ["linear", 2], ["algebra", 2], ["this", 2], ["time", 2], ["he", 2], ["has", 2], ["been", 2], ["given", 2], ["a", 2], ["homework", 2], ["about", 2], ["the", 2], ["unusual", 2], ["square", 2], ["of", 2], ["a", 2], ["square", 2], ["matrix", 2], ["the", 2], ["dot", 2], ["product", 2], ["of", 2], ["two", 2], ["integer", 2], ["number", 2], ["vectors", 2], ["x", 2], ["and", 2], ["y", 2], ["of", 2], ["size", 2], ["n", 2], ["is", 2], ["the", 2], ["sum", 2], ["of", 2], ["the", 2], ["products", 2], ["of", 2], ["the", 2], ["corresponding", 2], ["components", 2], ["of", 2], ["the", 2], ["vectors", 2], ["the", 2], ["unusual", 2], ["square", 2], ["of", 2], ["an", 2], ["n", 2], ["×", 2], ["n", 2], ["square", 2], ["matrix", 2], ["a", 2], ["is", 2], ["defined", 2], ["as", 2], ["the", 2], ["sum", 2], ["of", 2], ["n", 2], ["dot", 2], ["products", 2], ["the", 2], ["i", 2], ["th", 2], ["of", 2], ["them", 2], ["is", 2], ["the", 2], ["dot", 2], ["product", 2], ["of", 2], ["the", 2], ["i", 2], ["th", 2], ["row", 2], ["vector", 2], ["and", 2], ["the", 2], ["i", 2], ["th", 2], ["column", 2], ["vector", 2], ["in", 2], ["the", 2], ["matrix", 2], ["a", 2], ["fortunately", 2], ["for", 2], ["chris", 2], ["he", 2], ["has", 2], ["to", 2], ["work", 2], ["only", 2], ["in", 2], ["gf", 2], ["2", 2], ["this", 2], ["means", 2], ["that", 2], ["all", 2], ["operations", 2], ["addition", 2], ["multiplication", 2], ["are", 2], ["calculated", 2], ["modulo", 2], ["2", 2], ["in", 2], ["fact", 2], ["the", 2], ["matrix", 2], ["a", 2], ["is", 2], ["binary", 2], ["each", 2], ["element", 2], ["of", 2], ["a", 2], ["is", 0], ["either", 0], ["0", 0], ["or", 0], ["1", 0], ["for", 0], ["example", 0], ["consider", 0], ["the", 0], ["following", 0], ["matrix", 0], ["a", 0], ["left", 0], ["begin", 0], ["array", 0], ["l", 0], ["l", 0], ["l", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["0", 0], ["end", 0], ["array", 0], ["right", 0], ["the", 2], ["unusual", 2], ["square", 2], ["of", 2], ["a", 2], ["is", 2], ["equal", 2], ["to", 2], ["1·1", 2], ["1·0", 2], ["1·1", 2], ["0·1", 2], ["1·1", 2], ["1·0", 2], ["1·1", 2], ["0·1", 2], ["0·0", 2], ["0", 2], ["1", 2], ["1", 2], ["0", 2], ["however", 2], ["there", 2], ["is", 2], ["much", 2], ["more", 2], ["to", 2], ["the", 2], ["homework", 2], ["chris", 2], ["has", 2], ["to", 2], ["process", 2], ["q", 2], ["queries", 2], ["each", 2], ["query", 2], ["can", 2], ["be", 2], ["one", 2], ["of", 2], ["the", 2], ["following", 2], ["given", 2], ["a", 2], ["row", 2], ["index", 2], ["i", 2], ["flip", 2], ["all", 2], ["the", 2], ["values", 2], ["in", 2], ["the", 2], ["i", 2], ["th", 2], ["row", 2], ["in", 2], ["a", 2], ["given", 2], ["a", 2], ["column", 2], ["index", 2], ["i", 2], ["flip", 2], ["all", 2], ["the", 2], ["values", 2], ["in", 2], ["the", 2], ["i", 2], ["th", 2], ["column", 2], ["in", 2], ["a", 2], ["find", 2], ["the", 2], ["unusual", 2], ["square", 2], ["of", 2], ["a", 2], ["to", 2], ["flip", 2], ["a", 2], ["bit", 2], ["value", 2], ["w", 2], ["means", 2], ["to", 2], ["change", 2], ["it", 2], ["to", 2], ["1", 2], ["w", 2], ["i", 2], ["e", 2], ["1", 2], ["changes", 2], ["to", 2], ["0", 2], ["and", 2], ["0", 2], ["changes", 2], ["to", 2], ["1", 2], ["given", 2], ["the", 2], ["initial", 2], ["matrix", 2], ["a", 2], ["output", 2], ["the", 2], ["answers", 2], ["for", 2], ["each", 0], ["query", 0], ["of", 0], ["the", 0], ["third", 0], ["type", 0], ["can", 0], ["you", 0], ["solve", 0], ["chris", 0], ["s", 0], ["homework", 0], ["input", 0], ["the", 32], ["first", 3], ["line", 2], ["of", 2], ["input", 2], ["contains", 2], ["an", 2], ["integer", 2], ["n", 2], ["1", 2], ["≤", 2], ["n", 2], ["≤", 2], ["1000", 2], ["the", 2], ["number", 2], ["of", 2], ["rows", 2], ["and", 2], ["the", 2], ["number", 2], ["of", 2], ["columns", 2], ["in", 2], ["the", 2], ["matrix", 2], ["a", 2], ["the", 2], ["next", 2], ["n", 2], ["lines", 2], ["describe", 2], ["the", 2], ["matrix", 2], ["the", 2], ["i", 2], ["th", 2], ["line", 2], ["contains", 2], ["n", 2], ["space", 2], ["separated", 2], ["bits", 2], ["and", 2], ["describes", 2], ["the", 2], ["i", 2], ["th", 2], ["row", 0], ["of", 0], ["a", 0], ["the", 0], ["j", 0], ["th", 0], ["number", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["line", 0], ["a", 0], ["ij", 0], ["0", 0], ["≤", 0], ["a", 0], ["ij", 0], ["≤", 2], ["1", 2], ["is", 6], ["the", 6], ["element", 6], ["on", 11], ["the", 23], ["intersection", 9], ["of", 2], ["the", 2], ["i", 2], ["th", 2], ["row", 2], ["and", 2], ["the", 2], ["j", 2], ["th", 2], ["column", 2], ["of", 2], ["a", 2], ["the", 2], ["next", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["an", 0], ["integer", 0], ["q", 0], ["1", 0], ["≤", 0], ["q", 0], ["≤", 0], ["10", 0], ["6", 0], ["the", 2], ["number", 2], ["of", 2], ["queries", 2], ["each", 2], ["of", 2], ["the", 2], ["next", 2], ["q", 2], ["lines", 2], ["describes", 2], ["a", 2], ["single", 2], ["query", 2], ["which", 2], ["can", 2], ["be", 2], ["one", 2], ["of", 2], ["the", 2], ["following", 2], ["1", 2], ["i", 2], ["—", 2], ["flip", 2], ["the", 2], ["values", 2], ["of", 2], ["the", 2], ["i", 2], ["th", 2], ["row", 2], ["2", 2], ["i", 2], ["—", 2], ["flip", 2], ["the", 2], ["values", 2], ["of", 2], ["the", 2], ["i", 2], ["th", 2], ["column", 2], ["3", 2], ["—", 2], ["output", 2], ["the", 2], ["unusual", 2], ["square", 2], ["of", 2], ["a", 2], ["note", 2], ["since", 2], ["the", 2], ["size", 2], ["of", 2], ["the", 2], ["input", 2], ["and", 2], ["output", 2], ["could", 2], ["be", 2], ["very", 2], ["large", 2], ["don", 2], ["t", 2], ["use", 2], ["slow", 2], ["output", 2], ["techniques", 2], ["in", 2], ["your", 2], ["language", 2], ["for", 2], ["example", 0], ["do", 0], ["not", 0], ["use", 0], ["input", 0], ["and", 0], ["output", 0], ["streams", 0], ["cin", 0], ["cout", 0], ["in", 0], ["c", 0], ["output", 0], ["let", 2], ["the", 2], ["number", 2], ["of", 2], ["the", 2], ["3rd", 2], ["type", 2], ["queries", 2], ["in", 2], ["the", 2], ["input", 2], ["be", 2], ["m", 2], ["output", 2], ["a", 2], ["single", 2], ["string", 2], ["s", 2], ["of", 2], ["length", 2], ["m", 2], ["where", 2], ["the", 2], ["i", 2], ["th", 2], ["symbol", 2], ["of", 2], ["s", 2], ["is", 2], ["the", 2], ["value", 2], ["of", 2], ["the", 2], ["unusual", 2], ["square", 2], ["of", 2], ["a", 2], ["for", 2], ["the", 2], ["i", 2], ["th", 0], ["query", 0], ["of", 0], ["the", 0], ["3rd", 0], ["type", 0], ["as", 0], ["it", 0], ["appears", 0], ["in", 0], ["the", 0], ["input", 0], ["examples", 0], ["input", 0], ["3", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["0", 0], ["12", 0], ["3", 0], ["2", 0], ["3", 0], ["3", 0], ["2", 0], ["2", 0], ["2", 0], ["2", 0], ["1", 0], ["3", 0], ["3", 0], ["3", 0], ["1", 0], ["2", 0], ["2", 0], ["1", 0], ["1", 0], ["1", 0], ["3", 0], ["output", 0], ["01001", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7625, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.37608943177896975, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8723776223776224, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4350779428904429, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7571428571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.37579365079365074, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8706293706293706, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.43502331002331, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["def", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["from", 0], ["operator", 0], ["import", 0], ["xor", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["x", 0], ["res", 0], ["reduce", 0], ["xor", 0], ["input", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["int", 0], ["input", 0], ["2", 0], ["2", 0], ["input", 0], ["for", 0], ["s", 0], ["in", 0], ["stdin", 0], ["read", 0], ["splitlines", 0], ["if", 0], ["s", 0], ["3", 0], ["res", 0], ["append", 0], ["01", 0], ["x", 0], ["else", 0], ["x", 0], ["true", 0], ["print", 0], ["join", 0], ["res", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["curr", 0], ["res", 0], ["0", 0], ["for", 27], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["j", 0], ["curr", 0], ["arr", 0], ["i", 0], ["j", 0], ["q", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["0", 0], ["3", 0], ["res", 0], ["append", 0], ["str", 0], ["curr", 0], ["else", 0], ["curr", 0], ["1", 0], ["print", 0], ["join", 0], ["res", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["lis", 0], ["list", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["u", 0], ["0", 0], ["for", 27], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["j", 0], ["u", 0], ["lis", 0], ["i", 0], ["j", 0], ["ans", 0], ["k", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["0", 0], ["3", 0], ["ans", 0], ["append", 0], ["str", 0], ["u", 0], ["else", 0], ["u", 0], ["1", 0], ["print", 0], ["join", 0], ["ans", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["def", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["from", 0], ["operator", 0], ["import", 0], ["xor", 0], ["n", 0], ["int", 0], ["int", 1], ["input", 0], ["mat", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["q", 0], ["a", 0], ["reduce", 0], ["xor", 0], ["mat", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["int", 0], ["input", 0], ["queries", 0], ["stdin", 0], ["readline", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["for", 0], ["query", 0], ["in", 0], ["queries", 0], ["if", 0], ["query", 0], ["0", 0], ["3", 0], ["a", 0], ["append", 0], ["str", 0], ["ans", 0], ["else", 0], ["ans", 0], ["1", 0], ["print", 0], ["join", 0], ["a", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["test", 0], ["stdin", 0], ["readlines", 0], ["n", 0], ["int", 0], ["test", 0], ["0", 0], ["matrix", 0], ["test", 0], ["i", 0], ["1", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dot", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dot", 0], ["matrix", 0], ["i", 0], ["i", 0], ["1", 0], ["out", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["int", 0], ["test", 0], ["n", 0], ["1", 0], ["query", 0], ["test", 0], ["n", 0], ["q", 0], ["2", 0], ["split", 0], ["if", 0], ["len", 0], ["query", 0], ["1", 0], ["out", 0], ["append", 0], ["dot", 0], ["else", 0], ["dot", 0], ["1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["out", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["test", 0], ["stdin", 0], ["readlines", 0], ["n", 0], ["int", 0], ["test", 0], ["0", 0], ["dot", 0], ["0", 0], ["j", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["test", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["dot", 0], ["1", 0], ["j", 0], ["2", 0], ["out", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["int", 0], ["test", 0], ["n", 0], ["1", 0], ["query", 0], ["test", 0], ["n", 0], ["q", 0], ["2", 0], ["split", 0], ["if", 0], ["len", 0], ["query", 0], ["1", 0], ["out", 0], ["append", 0], ["dot", 0], ["else", 0], ["dot", 0], ["1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["out", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["dot", 0], ["0", 0], ["j", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["line", 0], ["stdin", 0], ["readline", 0], ["if", 0], ["line", 0], ["j", 0], ["1", 0], ["dot", 0], ["1", 0], ["j", 0], ["2", 0], ["out", 0], ["stdin", 0], ["readline", 0], ["for", 0], ["query", 0], ["in", 0], ["stdin", 0], ["if", 0], ["len", 0], ["query", 0], ["3", 0], ["out", 0], ["append", 0], ["1", 0], ["if", 0], ["dot", 0], ["else", 0], ["0", 0], ["else", 0], ["dot", 0], ["1", 0], ["print", 0], ["join", 0], ["out", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["dot", 0], ["0", 0], ["j", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["line", 0], ["stdin", 0], ["readline", 0], ["if", 0], ["line", 0], ["j", 0], ["1", 0], ["dot", 0], ["1", 0], ["j", 0], ["2", 0], ["out", 0], ["stdin", 0], ["readline", 0], ["for", 0], ["query", 0], ["in", 0], ["stdin", 0], ["if", 0], ["len", 0], ["query", 0], ["3", 0], ["out", 0], ["append", 0], ["1", 0], ["if", 0], ["dot", 0], ["else", 0], ["0", 0], ["else", 0], ["dot", 0], ["1", 0], ["print", 0], ["join", 0], ["out", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["dot", 0], ["0", 0], ["j", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["2", 0], ["n", 0], ["2", 0], ["line", 0], ["stdin", 0], ["readline", 0], ["if", 0], ["line", 0], ["i", 0], ["1", 0], ["dot", 0], ["1", 0], ["out", 0], ["stdin", 0], ["readline", 0], ["for", 0], ["query", 0], ["in", 0], ["stdin", 0], ["if", 0], ["len", 0], ["query", 0], ["3", 0], ["out", 0], ["append", 0], ["1", 0], ["if", 0], ["dot", 0], ["else", 0], ["0", 0], ["else", 0], ["dot", 0], ["1", 0], ["print", 0], ["join", 0], ["out", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["lis", 0], ["list", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["val", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["tmp", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["tmp", 0], ["lis", 0], ["i", 0], ["j", 0], ["lis", 0], ["j", 0], ["i", 0], ["val", 0], ["tmp", 0], ["2", 0], ["val", 0], ["val", 0], ["2", 0], ["q", 0], ["int", 0], ["input", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["ss", 0], ["input", 0], ["if", 0], ["ss", 0], ["0", 0], ["3", 0], ["ans", 0], ["append", 0], ["str", 0], ["val", 0], ["else", 0], ["val", 0], ["val", 0], ["1", 0], ["print", 0], ["join", 0], ["ans", 0], ["from", 0], ["operator", 0], ["import", 0], ["and", 0], ["xor", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["from", 0], ["itertools", 0], ["import", 0], ["chain", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["q", 0], ["int", 0], ["input", 0], ["output", 0], ["ans", 0], ["0", 0], ["we", 0], ["don", 0], ["t", 0], ["care", 0], ["about", 0], ["anything", 0], ["except", 0], ["for", 0], ["the", 0], ["trace", 0], ["of", 0], ["the", 0], ["matrix", 0], ["why", 0], ["write", 0], ["the", 0], ["matrix", 0], ["with", 0], ["symbols", 0], ["not", 0], ["0", 0], ["s", 0], ["and", 0], ["1", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["l", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["command", 0], ["input", 0], ["if", 0], ["command", 0], ["0", 0], ["3", 0], ["output", 0], ["append", 0], ["ans", 0], ["else", 0], ["ans", 0], ["1", 0], ["why", 0], ["first", 0], ["put", 0], ["in", 0], ["mind", 0], ["that", 0], ["all", 0], ["we", 0], ["care", 0], ["about", 0], ["is", 0], ["the", 0], ["trace", 0], ["of", 0], ["the", 0], ["matrix", 0], ["we", 0], ["will", 0], ["flip", 0], ["either", 0], ["the", 0], ["column", 0], ["or", 0], ["the", 0], ["row", 0], ["we", 0], ["will", 0], ["be", 0], ["facing", 0], ["two", 0], ["possibilities", 0], ["either", 0], ["to", 0], ["subtract", 0], ["from", 0], ["the", 0], ["original", 0], ["answer", 0], ["or", 0], ["do", 0], ["addition", 0], ["well", 0], ["thanks", 0], ["to", 0], ["gf", 0], ["2", 0], ["both", 0], ["of", 0], ["the", 0], ["operations", 0], ["are", 0], ["just", 0], ["xoring", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["output", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.003942181340341655, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0014113982576531852, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.050452781371280724, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.01806334147860668, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.001314060446780552, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.001314060446780552, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.016817593790426907, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.016817593790426907, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nAs you may know, MemSQL has American offices in both San Francisco and Seattle. Being a manager in the company, you travel a lot between the two cities, always by plane.\n\nYou prefer flying from Seattle to San Francisco than in the other direction, because it's warmer in San Francisco. You are so busy that you don't remember the number of flights you have made in either direction. However, for each of the last n days you know whether you were in San Francisco office or in Seattle office. You always fly at nights, so you never were at both offices on the same day. Given this information, determine if you flew more times from Seattle to San Francisco during the last n days, or not.\n\n\n-----Input-----\n\nThe first line of input contains single integer n (2 ≤ n ≤ 100) — the number of days.\n\nThe second line contains a string of length n consisting of only capital 'S' and 'F' letters. If the i-th letter is 'S', then you were in Seattle office on that day. Otherwise you were in San Francisco. The days are given in chronological order, i.e. today is the last day in this sequence.\n\n\n-----Output-----\n\nPrint \"YES\" if you flew more times from Seattle to San Francisco, and \"NO\" otherwise.\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n4\nFSSF\n\nOutput\nNO\n\nInput\n2\nSF\n\nOutput\nYES\n\nInput\n10\nFFFFFFFFFF\n\nOutput\nNO\n\nInput\n10\nSSFFSFFSFF\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first example you were initially at San Francisco, then flew to Seattle, were there for two days and returned to San Francisco. You made one flight in each direction, so the answer is \"NO\".\n\nIn the second example you just flew from Seattle to San Francisco, so the answer is \"YES\".\n\nIn the third example you stayed the whole period in San Francisco, so the answer is \"NO\".\n\nIn the fourth example if you replace 'S' with ones, and 'F' with zeros, you'll get the first few digits of π in binary representation. Not very useful information though.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\ns = input()\nsi, sf = 0, 0\nfor i in range(1, n):\n\tif s[i] == 'S' and s[i - 1] != 'S':\n\t\tsi += 1\n\telif s[i] == 'F' and s[i - 1] != 'F':\n\t\tsf += 1\nif sf > si:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "n = int(input())\ns = input()\nsf = 0\nfs = 0\nfor i in range(1, n):\n\tif s[i] == 'F' and s[i - 1] == 'S':\n\t\tsf += 1\n\telif s[i] == 'S' and s[i - 1] == 'F':\n\t\tfs += 1\nif sf > fs:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n = int(input())\ns = input()\nc1, c2 = 0, 0\nfor i in range(1, n):\n\tif s[i - 1] == 'S' and s[i] == 'F':\n\t\tc1 += 1\n\telif s[i - 1] == 'F' and s[i] == 'S':\n\t\tc2 += 1\nif c1 > c2:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n = int(input())\n\na = input()\n\nif a.count('SF') > a.count('FS'):\n\tprint('YES')\nelse:\n\tprint('NO')\n", "_ = input()\n\nnights = input()\nans = 'YES' if (nights[0] == 'S' and nights[-1] == 'F') else 'NO'\n\nprint(ans)\n", "n = int(input())\nsl = input()\n\nsf = 0\nfs = 0\n\nlast = \"-1\"\nfor x in sl:\n\tif last == \"-1\" or last == x:\n\t\tlast = x\n\t\tcontinue\n\telif last == \"S\" and x == \"F\":\n\t\tsf += 1\n\telse:\n\t\tfs += 1\n\tlast = x\n\nif (sf > fs):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n = int(input())\ns = input()\n\nk1 = 0\nk2 = 0\nfor x in range(len(s) - 1):\n\tif s[x] != s[x + 1]:\n\t\tif s[x] == 'S':\n\t\t\tk1 += 1\n\t\telse:\n\t\t\tk2 += 1\nif k1 > k2:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "n = int(input())\ns = input().strip()\ns1 = 0\ns2 = 0\nfor i in range(1, len(s)):\n\tif s[i] != s[i - 1]:\n\t\tif s[i - 1] == 'S':\n\t\t\ts1 += 1\n\t\telse:\n\t\t\ts2 += 1\nif s1 > s2:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n = int(input())\ns = input()\nscount = 0\nfcount = 0\nfor i in range(len(s) - 1):\n\tif s[i] + s[i + 1] == \"SF\":\n\t\tscount += 1\n\telif s[i] + s[i + 1] == \"FS\":\n\t\tfcount += 1\nif scount > fcount:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "def __starting_point():\n\tinput()\n\tdays = input()\n\n\tm = {}\n\tm[\"SF\"] = 0\n\tm[\"FS\"] = 0\n\tloc = days[0]\n\tfor d in days:\n\t\tif loc != d:\n\t\t\tm[loc + d] += 1\n\t\t\tloc = d\n\n\tif m[\"SF\"] > m[\"FS\"]:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\n__starting_point()\n", "n = int(input())\ns = input()\na = 0\nb = 0\nfor i in range(n - 1):\n\tif s[i] == 'S' and s[i + 1] == 'F':\n\t\ta += 1\n\tif s[i] == 'F' and s[i + 1] == 'S':\n\t\tb += 1\nif a > b:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n=int(input())\ns=input()\nsf,fs=[0,0]\nfor i in range(1,n):\n\tif s[i]=='F' and s[i-1]=='S':\n\t\tsf+=1\n\telif s[i]=='S' and s[i-1]=='F':\n\t\tfs+=1\nif sf>fs:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n = int(input())\na = input()\ns, f = 0, 0\nfor i in range(n-1):\n\tif a[i] == 'S' and a[i+1] == 'F':\n\t\tf += 1\n\tif a[i] == 'F' and a[i+1] == 'S':\n\t\ts += 1\nprint('YES' if f > s else 'NO')\n\n", "n = int(input())\ns = input()\na = 0\nb = 0\nfor i in range(n - 1):\n\tif s[i] == 'S' and s[i + 1] ==  'F':\n\t\ta += 1\n\telif s[i] == 'F' and s[i + 1] ==  'S':\n\t\tb += 1\nif a > b:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "a=int(input())\nd=input()\ns=0\nf=0\nnow=d[0]\nfor i in range(1,a):\n\tif d[i]==\"S\":\n\t\tif now!=d[i]:\n\t\t\tnow=d[i]\n\t\t\tf+=1\n\telse:\n\t\tif now!=d[i]:\n\t\t\tnow=d[i]\n\t\t\ts+=1\n\tnow=d[i]\nif s>f:\n\t\tprint(\"YES\")\nelse:\n\t\tprint(\"NO\")\n", "n=int(input())\ns=input()\ncnt1,cnt2=0,0\n\nfor i in range(n-1):\n\tif s[i]=='S' and s[i+1]=='F':\n\t\tcnt1+=1\n\tif s[i]=='F' and s[i+1]=='S':\n\t\tcnt2+=1\nif cnt1>cnt2:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "n = int(input())\ns=input().strip()\n\nc=[0,0]\n\nfor i in range(n-1):\n\tif s[i]!=s[i+1]:\n\t\tif s[i]=='S': \n\t\t\tc[0]+=1\n\t\telse:\n\t\t\tc[1]+=1\nprint(\"YES\" if c[0]>c[1] else \"NO\")\n", "n = int(input())\na = input()\n\ndic = {'SF': 0, 'FS': 0}\n\nfor i in range(1, n):\n\tif a[i - 1] == 'F' and a[i] == 'S':\n\t\tdic['FS'] += 1\n\telif a[i - 1] == 'S' and a[i] == 'F':\n\t\tdic['SF'] += 1\nif dic['SF'] > dic['FS']:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "n = int(input())\ns = input()\nsf = 0\nfs = 0\nlast = s[0]\nfor i in range(n):\n\tif s[i] != last:\n\t\tif last == 'F':\n\t\t\tfs += 1\n\t\telse:\n\t\t\tsf += 1\n\t\tlast = s[i]\nif sf > fs:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "n = int(input())\ns = input()\nc = 0\nco = 0\nfor i in range(1, len(s)):\n\tif s[i - 1] + s[i] == \"SF\":\n\t\tc += 1\n\telif s[i - 1] + s[i] == \"FS\":\n\t\tco += 1\nif c > co:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n = int(input())\n\nss = list(input())\nf = 0\ns = 0\nl = ss[0]\nfor i in range(1, len(ss)):\n\tc = ss[i]\n\tif c == l:\n\t\tcontinue\n\tif c == 'F':\n\t\tf += 1\n\telse:\n\t\ts += 1\n\tl = c\n\nprint(\"YES\") if f > s else print(\"NO\")\n", "n = int(input())\ns = input()\n\nfs = 0\nsf = 0 \n\nfor i in range(1,len(s)):\n\tif s[i] == \"F\" and s[i-1] == \"S\":\n\t\tsf += 1\n\telif s[i] == \"S\" and s[i-1] == \"F\":\n\t\tfs += 1\n\t\t\nif sf > fs:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n=int(input())\ns=input()\nS=0\nF=0\nfor i in range(1,n):\n\tif s[i]=='S':\n\t\tif s[i-1]=='F':\n\t\t\tS+=1\n\telse:\n\t\tif s[i-1]=='S':\n\t\t\tF+=1\nif F>S:\n\tprint('YES')\nelse:\n\tprint('NO')\n\t\t\n\t\n"], "id": "id7980"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7980", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["as", 1], ["you", 1], ["may", 1], ["know", 1], ["memsql", 1], ["has", 1], ["american", 1], ["offices", 1], ["in", 1], ["both", 1], ["san", 1], ["francisco", 1], ["and", 1], ["seattle", 1], ["being", 1], ["a", 1], ["manager", 1], ["in", 1], ["the", 1], ["company", 1], ["you", 1], ["travel", 1], ["a", 1], ["lot", 1], ["between", 1], ["the", 1], ["two", 1], ["cities", 1], ["always", 1], ["by", 1], ["plane", 1], ["you", 1], ["prefer", 1], ["flying", 1], ["from", 1], ["seattle", 1], ["to", 1], ["san", 1], ["francisco", 1], ["than", 1], ["in", 1], ["the", 1], ["other", 1], ["direction", 1], ["because", 1], ["it", 1], ["s", 1], ["warmer", 1], ["in", 1], ["san", 1], ["francisco", 1], ["you", 1], ["are", 1], ["so", 1], ["busy", 1], ["that", 1], ["you", 1], ["don", 1], ["t", 1], ["remember", 1], ["the", 1], ["number", 1], ["of", 1], ["flights", 1], ["you", 1], ["have", 1], ["made", 1], ["in", 1], ["either", 1], ["direction", 1], ["however", 1], ["for", 1], ["each", 1], ["of", 1], ["the", 1], ["last", 1], ["n", 1], ["days", 1], ["you", 1], ["know", 1], ["whether", 1], ["you", 1], ["were", 1], ["in", 1], ["san", 1], ["francisco", 1], ["office", 1], ["or", 1], ["in", 1], ["seattle", 1], ["office", 1], ["you", 1], ["always", 1], ["fly", 1], ["at", 1], ["nights", 1], ["so", 1], ["you", 1], ["never", 1], ["were", 1], ["at", 1], ["both", 1], ["offices", 1], ["on", 1], ["the", 1], ["same", 1], ["day", 1], ["given", 1], ["this", 1], ["information", 1], ["determine", 1], ["if", 1], ["you", 1], ["flew", 1], ["more", 1], ["times", 1], ["from", 0], ["seattle", 0], ["to", 0], ["san", 0], ["francisco", 0], ["during", 0], ["the", 0], ["last", 0], ["n", 0], ["days", 0], ["or", 0], ["not", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["single", 3], ["integer", 1], ["n", 1], ["2", 1], ["≤", 1], ["n", 1], ["≤", 1], ["100", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["days", 1], ["the", 1], ["second", 1], ["line", 1], ["contains", 1], ["a", 1], ["string", 1], ["of", 1], ["length", 1], ["n", 1], ["consisting", 1], ["of", 1], ["only", 1], ["capital", 1], ["s", 1], ["and", 1], ["f", 1], ["letters", 1], ["if", 1], ["the", 1], ["i", 1], ["th", 1], ["letter", 1], ["is", 1], ["s", 1], ["then", 1], ["you", 1], ["were", 1], ["in", 1], ["seattle", 1], ["office", 1], ["on", 1], ["that", 1], ["day", 1], ["otherwise", 1], ["you", 1], ["were", 1], ["in", 1], ["san", 1], ["francisco", 1], ["the", 1], ["days", 1], ["are", 1], ["given", 1], ["in", 1], ["chronological", 0], ["order", 0], ["i", 0], ["e", 0], ["today", 0], ["is", 0], ["the", 0], ["last", 0], ["day", 0], ["in", 0], ["this", 0], ["sequence", 0], ["output", 0], ["print", 1], ["yes", 1], ["if", 1], ["you", 0], ["flew", 0], ["more", 0], ["times", 0], ["from", 0], ["seattle", 0], ["to", 0], ["san", 0], ["francisco", 0], ["and", 3], ["no", 3], ["otherwise", 0], ["you", 0], ["can", 0], ["print", 0], ["each", 0], ["letter", 0], ["in", 0], ["any", 0], ["case", 0], ["upper", 0], ["or", 0], ["lower", 0], ["examples", 0], ["input", 0], ["4", 0], ["fssf", 0], ["output", 0], ["no", 0], ["input", 0], ["2", 0], ["sf", 0], ["output", 0], ["yes", 0], ["input", 0], ["10", 0], ["ffffffffff", 0], ["output", 0], ["no", 0], ["input", 0], ["10", 0], ["ssffsffsff", 0], ["output", 0], ["yes", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["example", 1], ["you", 1], ["were", 1], ["initially", 1], ["at", 1], ["san", 1], ["francisco", 1], ["then", 1], ["flew", 1], ["to", 1], ["seattle", 1], ["were", 1], ["there", 1], ["for", 1], ["two", 1], ["days", 1], ["and", 1], ["returned", 1], ["to", 1], ["san", 1], ["francisco", 1], ["you", 1], ["made", 1], ["one", 1], ["flight", 1], ["in", 1], ["each", 1], ["direction", 1], ["so", 1], ["the", 1], ["answer", 1], ["is", 1], ["no", 1], ["in", 1], ["the", 1], ["second", 1], ["example", 1], ["you", 1], ["just", 1], ["flew", 1], ["from", 1], ["seattle", 1], ["to", 1], ["san", 1], ["francisco", 1], ["so", 1], ["the", 1], ["answer", 1], ["is", 1], ["yes", 1], ["in", 1], ["the", 1], ["third", 1], ["example", 1], ["you", 1], ["stayed", 1], ["the", 1], ["whole", 1], ["period", 1], ["in", 1], ["san", 1], ["francisco", 1], ["so", 1], ["the", 1], ["answer", 1], ["is", 1], ["no", 1], ["in", 1], ["the", 1], ["fourth", 1], ["example", 1], ["if", 1], ["you", 1], ["replace", 1], ["s", 1], ["with", 1], ["ones", 1], ["and", 1], ["f", 1], ["with", 1], ["zeros", 1], ["you", 1], ["ll", 1], ["get", 1], ["the", 1], ["first", 1], ["few", 0], ["digits", 0], ["of", 0], ["π", 0], ["in", 0], ["binary", 0], ["representation", 0], ["not", 0], ["very", 0], ["useful", 0], ["information", 0], ["though", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.773371104815864, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7677053824362606, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9041095890410958, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.9041095890410958, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.773371104815864, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7677053824362606, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9041095890410958, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.9041095890410958, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["si", 0], ["sf", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["si", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["f", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["f", 0], ["sf", 0], ["1", 0], ["if", 0], ["sf", 0], ["si", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["sf", 0], ["0", 0], ["fs", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["f", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["sf", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["f", 0], ["fs", 0], ["1", 0], ["if", 0], ["sf", 0], ["fs", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["c1", 0], ["c2", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["f", 0], ["c1", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["1", 0], ["f", 0], ["and", 0], ["s", 0], ["i", 0], ["s", 0], ["c2", 0], ["1", 0], ["if", 0], ["c1", 0], ["c2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["if", 0], ["a", 0], ["count", 0], ["sf", 0], ["a", 0], ["count", 0], ["fs", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["input", 0], ["nights", 0], ["input", 0], ["ans", 0], ["yes", 0], ["if", 0], ["nights", 0], ["0", 0], ["s", 0], ["and", 0], ["nights", 0], ["1", 0], ["f", 0], ["else", 0], ["no", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["sl", 0], ["input", 0], ["sf", 0], ["0", 0], ["fs", 0], ["0", 0], ["last", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["sl", 0], ["if", 0], ["last", 0], ["1", 0], ["or", 0], ["last", 0], ["x", 0], ["last", 0], ["x", 0], ["continue", 0], ["elif", 0], ["last", 0], ["s", 0], ["and", 0], ["x", 0], ["f", 0], ["sf", 0], ["1", 0], ["else", 0], ["fs", 0], ["1", 0], ["last", 0], ["x", 0], ["if", 0], ["sf", 0], ["fs", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["k1", 0], ["0", 0], ["k2", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["x", 0], ["s", 0], ["x", 0], ["1", 0], ["if", 0], ["s", 0], ["x", 0], ["s", 0], ["k1", 0], ["1", 0], ["else", 0], ["k2", 0], ["1", 0], ["if", 0], ["k1", 0], ["k2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["strip", 0], ["s1", 0], ["0", 0], ["s2", 0], ["0", 2], ["for", 7], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["s1", 0], ["1", 0], ["else", 0], ["s2", 0], ["1", 0], ["if", 0], ["s1", 0], ["s2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["scount", 0], ["0", 0], ["fcount", 0], ["0", 0], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["sf", 0], ["scount", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["fs", 0], ["fcount", 0], ["1", 0], ["if", 0], ["scount", 0], ["fcount", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["input", 0], ["days", 0], ["input", 0], ["m", 0], ["m", 0], ["sf", 0], ["0", 0], ["m", 0], ["fs", 0], ["0", 0], ["loc", 0], ["days", 0], ["0", 0], ["for", 0], ["d", 0], ["in", 0], ["days", 0], ["if", 0], ["loc", 0], ["d", 0], ["m", 0], ["loc", 0], ["d", 0], ["1", 0], ["loc", 0], ["d", 0], ["if", 0], ["m", 0], ["sf", 0], ["m", 0], ["fs", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["f", 0], ["a", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["f", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["b", 0], ["1", 0], ["if", 0], ["a", 0], ["b", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["sf", 0], ["fs", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["f", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["sf", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["f", 0], ["fs", 0], ["1", 0], ["if", 0], ["sf", 0], ["fs", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["s", 0], ["f", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["s", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 0], ["f", 0], ["f", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["f", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 0], ["s", 0], ["s", 0], ["1", 0], ["print", 0], ["yes", 0], ["if", 0], ["f", 0], ["s", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["f", 0], ["a", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["f", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["b", 0], ["1", 0], ["if", 0], ["a", 0], ["b", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["a", 0], ["int", 0], ["input", 0], ["d", 0], ["input", 0], ["s", 0], ["0", 0], ["f", 0], ["0", 0], ["now", 0], ["d", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["a", 0], ["if", 0], ["d", 0], ["i", 0], ["s", 0], ["if", 0], ["now", 0], ["d", 0], ["i", 0], ["now", 0], ["d", 0], ["i", 0], ["f", 0], ["1", 0], ["else", 0], ["if", 0], ["now", 0], ["d", 0], ["i", 0], ["now", 0], ["d", 0], ["i", 0], ["s", 0], ["1", 0], ["now", 0], ["d", 0], ["i", 0], ["if", 0], ["s", 0], ["f", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["cnt1", 0], ["cnt2", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["f", 0], ["cnt1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["f", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["cnt2", 0], ["1", 0], ["if", 0], ["cnt1", 0], ["cnt2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["strip", 0], ["c", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["c", 0], ["0", 0], ["1", 0], ["else", 0], ["c", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["if", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["dic", 0], ["sf", 0], ["0", 0], ["fs", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["f", 0], ["and", 0], ["a", 0], ["i", 0], ["s", 0], ["dic", 0], ["fs", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["1", 0], ["s", 0], ["and", 0], ["a", 0], ["i", 0], ["f", 0], ["dic", 0], ["sf", 0], ["1", 0], ["if", 0], ["dic", 0], ["sf", 0], ["dic", 0], ["fs", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["sf", 0], ["0", 0], ["fs", 0], ["0", 0], ["last", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["last", 0], ["if", 0], ["last", 0], ["f", 0], ["fs", 0], ["1", 0], ["else", 0], ["sf", 0], ["1", 0], ["last", 0], ["s", 0], ["i", 0], ["if", 0], ["sf", 0], ["fs", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["c", 0], ["0", 0], ["co", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["sf", 0], ["c", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["fs", 0], ["co", 0], ["1", 0], ["if", 0], ["c", 0], ["co", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["ss", 0], ["list", 0], ["input", 0], ["f", 0], ["0", 0], ["s", 0], ["0", 0], ["l", 0], ["ss", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["ss", 0], ["c", 0], ["ss", 0], ["i", 0], ["if", 0], ["c", 0], ["l", 0], ["continue", 0], ["if", 0], ["c", 0], ["f", 0], ["f", 0], ["1", 0], ["else", 0], ["s", 0], ["1", 0], ["l", 0], ["c", 0], ["print", 0], ["yes", 0], ["if", 0], ["f", 0], ["s", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["fs", 0], ["0", 0], ["sf", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["f", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["sf", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["f", 0], ["fs", 0], ["1", 0], ["if", 0], ["sf", 0], ["fs", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["s", 0], ["0", 0], ["f", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["f", 0], ["s", 0], ["1", 0], ["else", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["f", 0], ["1", 0], ["if", 0], ["f", 0], ["s", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0031645569620253164, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0017329716696805305, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.028125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.020833333333333332, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0031645569620253164, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0017329716696805305, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.028125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.020833333333333332, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nThere are two sisters Alice and Betty. You have $n$ candies. You want to distribute these $n$ candies between two sisters in such a way that:  Alice will get $a$ ($a > 0$) candies;  Betty will get $b$ ($b > 0$) candies;  each sister will get some integer number of candies;  Alice will get a greater amount of candies than Betty (i.e. $a > b$);  all the candies will be given to one of two sisters (i.e. $a+b=n$). \n\nYour task is to calculate the number of ways to distribute exactly $n$ candies between sisters in a way described above. Candies are indistinguishable.\n\nFormally, find the number of ways to represent $n$ as the sum of $n=a+b$, where $a$ and $b$ are positive integers and $a>b$.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Then $t$ test cases follow.\n\nThe only line of a test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^9$) — the number of candies you have.\n\n\n-----Output-----\n\nFor each test case, print the answer — the number of ways to distribute exactly $n$ candies between two sisters in a way described in the problem statement. If there is no way to satisfy all the conditions, print $0$.\n\n\n-----Example-----\nInput\n6\n7\n1\n2\n3\n2000000000\n763243547\n\nOutput\n3\n0\n0\n1\n999999999\n381621773\n\n\n\n-----Note-----\n\nFor the test case of the example, the $3$ possible ways to distribute candies are:  $a=6$, $b=1$;  $a=5$, $b=2$;  $a=4$, $b=3$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["t = int(input())\nfor i in range(t):\n\tn = int(input())\n\tprint((n-1)//2)\n", "for _ in range(int(input())):\n\tn = int(input())\n\tprint((n-1)//2)\n", "t = int(input())\nfor q in range(0, t):\n\tn = int(input())\n\tif (n % 2 == 0):\n\t\tprint(n // 2 - 1)\n\telse:\n\t\tprint(n // 2)\n", "def solve():\n\tt = int(input())\n\tfor _ in range(t):\n\t\tn = int(input())\n\t\tif n % 2 == 0:\n\t\t\tprint(n // 2 - 1)\n\t\telse:\n\t\t\tprint(n // 2)\n\n\nsolve()\n", "from math import *\nt = int(input())\nfor y in range(t):\n\tn = int(input())\n\tprint((n-1)//2)\n", "# WeirdBugsButOkay\n\nt = int(input())\n\nfor wqe in range (0, t) :\n\tn = int(input())\n\tif n % 2 == 0 :\n\t\tprint(n // 2 - 1)\n\telse :\n\t\tprint((n - 1) // 2)\n", "t=int(input())\nfor j in range(t):\n\tn=int(input())\n\tif n%2==0:\n\t\tprint(n//2-1)\n\telse:\n\t\tprint(n//2)\n", "import sys\ninput = sys.stdin.readline\ndef getInt(): return int(input())\ndef getVars(): return list(map(int, input().split()))\ndef getList(): return list(map(int, input().split()))\ndef getStr(): return input().strip()\n## -------------------------------\n\nt = getInt()\nfor _ in range(t):\n\tn = getInt()\n\tif n%2 == 0:\n\t\tprint(n//2 -1)\n\telse:\n\t\tprint(n//2)\n", "t = int(input())\nfor case_num in range(t):\n\tn = int(input())\n\tprint((n - 1) // 2)\n", "from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\nfrom fractions import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 1000010\nMOD = 10**9+7\nspf = [i for i in range(MAXN)]\nspf[0]=spf[1] = -1\ndef sieve():\n\tfor i in range(2,MAXN,2):\n\t\tspf[i] = 2\n\tfor i in range(3,int(MAXN**0.5)+1):\n\t\tif spf[i]==i:\n\t\t\tfor j in range(i*i,MAXN,i):\n\t\t\t\tif spf[j]==j:\n\t\t\t\t\tspf[j]=i\ndef fib(n,m):\n\tif n == 0:\n\t\treturn [0, 1]\n\telse:\n\t\ta, b = fib(n // 2)\n\t\tc = ((a%m) * ((b%m) * 2 - (a%m)))%m\n\t\td = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m\n\t\tif n % 2 == 0:\n\t\t\treturn [c, d]\n\t\telse:\n\t\t\treturn [d, c + d]\n \ndef charIN(x= ' '):\n\treturn(sys.stdin.readline().strip().split(x))\n \ndef arrIN(x = ' '):\n\treturn list(map(int,sys.stdin.readline().strip().split(x)))\n \ndef ncr(n,r):\n\tnum=den=1\n\tfor i in range(r):\n\t\tnum = (num*(n-i))%MOD\n\t\tden = (den*(i+1))%MOD\n \n\treturn (num*(pow(den,MOD-2,MOD)))%MOD\n \ndef flush():\n\treturn sys.stdout.flush()\n \n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nfor _ in range(int(input())):\n\tn = int(input())\n\tif n%2:\n\t\tprint(n//2)\n\telse:\n\t\tprint(n//2-1)\n", "for _ in range(int(input())):\n\tn = int(input())\n\tif n%2==0:\n\t\tprint(n//2-1)\n\telse:\n\t\tprint(n//2)\n", "#!usr/bin/env python3\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom itertools import permutations, accumulate\nimport sys\nimport math\nimport bisect\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\ndef S():\n\tres = list(sys.stdin.readline())\n\tif res[-1] == \"\\n\":\n\t\treturn res[:-1]\n\treturn res\ndef IR(n):\n\treturn [I() for i in range(n)]\ndef LIR(n):\n\treturn [LI() for i in range(n)]\ndef SR(n):\n\treturn [S() for i in range(n)]\ndef LSR(n):\n\treturn [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\ndef solve():\n\tt = I()\n\tfor _ in range(t):\n\t\tn = I()\n\t\tprint((n-1) >> 1)\n\treturn\n\n#Solve\ndef __starting_point():\n\tsolve()\n\n__starting_point()\n", "t,*x=map(int,open(0).read().split())\nans=[(y-1)//2 for y in x]\nprint(\"\\n\".join(map(str,ans)))\n", "t=int(input())\nfor _ in range(t):\n\tn=int(input())\n\tprint((n-1)//2)\n", "t = int(input())\nfor i in range(t):\n\tn = int(input())\n\tprint(n//2 if n%2 == 1 else n//2-1)\n", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n\ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\nfor _ in range(val()):\n\tn = val()\n\tprint(n//2 if n&1 else n//2 - 1)\n", "t = int(input())\nfor i in range(t):\n\tx = int(input())\n\tif x % 2 == 0:\n\t\tprint((x-2)//2)\n\telse:\n\t\tprint((x-1)//2)\n\n\t\n", "t=int(input())\nfor i in range(t):\n\tn = int(input())\n\tprint((n-1)//2)\n", "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\nORDA = 97\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n\tif n < 2: return list()\n\tprime = [True for _ in range(n + 1)]\n\tp = 3\n\twhile p * p <= n:\n\t\tif prime[p]:\n\t\t\tfor i in range(p * 2, n + 1, p):\n\t\t\t\tprime[i] = False\n\t\tp += 2\n\tr = [2]\n\tfor p in range(3, n + 1, 2):\n\t\tif prime[p]:\n\t\t\tr.append(p)\n\treturn r\ndef divs(n, start=1):\n\tr = []\n\tfor i in range(start, int(math.sqrt(n) + 1)):\n\t\tif (n % i == 0):\n\t\t\tif (n / i == i):\n\t\t\t\tr.append(i)\n\t\t\telse:\n\t\t\t\tr.extend([i, n // i])\n\treturn r\ndef divn(n, primes):\n\tdivs_number = 1\n\tfor i in primes:\n\t\tif n == 1:\n\t\t\treturn divs_number\n\t\tt = 1\n\t\twhile n % i == 0:\n\t\t\tt += 1\n\t\t\tn //= i\n\t\tdivs_number *= t\ndef prime(n):\n\tif n == 2: return True\n\tif n % 2 == 0 or n <= 1: return False\n\tsqr = int(math.sqrt(n)) + 1\n\tfor d in range(3, sqr, 2):\n\t\tif n % d == 0: return False\n\treturn True\ndef convn(number, base):\n\tnewnumber = 0\n\twhile number > 0:\n\t\tnewnumber += number % base\n\t\tnumber //= base\n\treturn newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nfor i in range(ii()):\n\tn = ii()\n\tif n & 1:\n\t\tprint(n // 2)\n\telse:\n\t\tprint(n // 2 - 1)\n", "t = int(input())\nfor _ in range(t):\n\tprint((int(input())-1)//2)\n", "from sys import stdin, exit, setrecursionlimit\nsetrecursionlimit(10000000)\n\ninput = stdin.readline\nlmi = lambda: list(map(int, input().split()))\nmi = lambda: map(int, input().split())\nsi = lambda: input().strip('\\n')\nssi = lambda: input().strip('\\n').split()\n\nfor _ in range(int(input())):\n\tn = int(input())\n\tprint((n-1)//2)\n"], "id": "id7692"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7692", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["there", 6], ["are", 6], ["two", 6], ["sisters", 6], ["alice", 6], ["and", 6], ["betty", 6], ["you", 6], ["have", 6], ["n", 6], ["candies", 6], ["you", 6], ["want", 6], ["to", 6], ["distribute", 6], ["these", 6], ["n", 6], ["candies", 6], ["between", 6], ["two", 6], ["sisters", 6], ["in", 6], ["such", 6], ["a", 6], ["way", 6], ["that", 6], ["alice", 6], ["will", 6], ["get", 6], ["a", 6], ["a", 6], ["0", 6], ["candies", 6], ["betty", 6], ["will", 6], ["get", 6], ["b", 6], ["b", 6], ["0", 6], ["candies", 6], ["each", 6], ["sister", 6], ["will", 6], ["get", 6], ["some", 6], ["integer", 6], ["number", 6], ["of", 6], ["candies", 6], ["alice", 6], ["will", 6], ["get", 6], ["a", 6], ["greater", 6], ["amount", 6], ["of", 6], ["candies", 6], ["than", 6], ["betty", 6], ["i", 6], ["e", 6], ["a", 6], ["b", 6], ["all", 6], ["the", 6], ["candies", 6], ["will", 6], ["be", 6], ["given", 6], ["to", 6], ["one", 6], ["of", 6], ["two", 6], ["sisters", 6], ["i", 6], ["e", 6], ["a", 6], ["b", 6], ["n", 6], ["your", 6], ["task", 6], ["is", 6], ["to", 6], ["calculate", 6], ["the", 6], ["number", 6], ["of", 6], ["ways", 6], ["to", 6], ["distribute", 6], ["exactly", 6], ["n", 6], ["candies", 6], ["between", 6], ["sisters", 6], ["in", 6], ["a", 6], ["way", 6], ["described", 6], ["above", 6], ["candies", 6], ["are", 6], ["indistinguishable", 6], ["formally", 6], ["find", 6], ["the", 6], ["number", 6], ["of", 6], ["ways", 6], ["to", 6], ["represent", 6], ["n", 6], ["as", 6], ["the", 6], ["sum", 6], ["of", 6], ["n", 6], ["a", 4], ["b", 4], ["where", 4], ["a", 4], ["and", 4], ["b", 4], ["are", 4], ["positive", 4], ["integers", 4], ["and", 4], ["a", 4], ["b", 4], ["you", 8], ["have", 8], ["to", 8], ["answer", 8], ["t", 8], ["independent", 8], ["test", 8], ["cases", 8], ["input", 20], ["the", 46], ["first", 46], ["line", 27], ["of", 27], ["the", 27], ["input", 27], ["contains", 27], ["one", 27], ["integer", 26], ["t", 32], ["1", 22], ["le", 22], ["t", 22], ["le", 22], ["10", 28], ["4", 22], ["—", 10], ["the", 11], ["number", 11], ["of", 10], ["test", 10], ["cases", 10], ["then", 10], ["t", 4], ["test", 4], ["cases", 4], ["follow", 4], ["the", 6], ["only", 6], ["line", 16], ["of", 6], ["a", 6], ["test", 18], ["case", 6], ["contains", 6], ["one", 6], ["integer", 6], ["n", 6], ["1", 6], ["le", 6], ["n", 6], ["le", 6], ["2", 6], ["cdot", 6], ["10", 6], ["9", 6], ["—", 6], ["the", 6], ["number", 6], ["of", 6], ["candies", 6], ["you", 6], ["have", 6], ["output", 6], ["for", 6], ["each", 6], ["test", 6], ["case", 6], ["print", 6], ["the", 6], ["answer", 6], ["—", 6], ["the", 6], ["number", 6], ["of", 6], ["ways", 6], ["to", 6], ["distribute", 6], ["exactly", 6], ["n", 6], ["candies", 6], ["between", 6], ["two", 6], ["sisters", 6], ["in", 6], ["a", 6], ["way", 6], ["described", 6], ["in", 6], ["the", 6], ["problem", 6], ["statement", 6], ["if", 0], ["there", 0], ["is", 0], ["no", 0], ["way", 0], ["to", 0], ["satisfy", 0], ["all", 0], ["the", 0], ["conditions", 0], ["print", 0], ["0", 0], ["example", 0], ["input", 0], ["6", 0], ["7", 0], ["1", 0], ["2", 0], ["3", 0], ["2000000000", 0], ["763243547", 0], ["output", 0], ["3", 0], ["0", 0], ["0", 0], ["1", 0], ["999999999", 0], ["381621773", 0], ["note", 0], ["for", 6], ["the", 6], ["test", 6], ["case", 6], ["of", 6], ["the", 6], ["example", 6], ["the", 6], ["3", 0], ["possible", 0], ["ways", 0], ["to", 0], ["distribute", 0], ["candies", 0], ["are", 0], ["a", 0], ["6", 0], ["b", 0], ["1", 0], ["a", 0], ["5", 0], ["b", 0], ["2", 0], ["a", 0], ["4", 0], ["b", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8290909090909091, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.13132705250392998, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8780487804878049, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.17973286875725883, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7527272727272727, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.12787878787878793, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8780487804878049, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.17973286875725883, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["0", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["2", 0], ["def", 0], ["solve", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["2", 0], ["solve", 0], ["from", 0], ["math", 0], ["import", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["weirdbugsbutokay", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["wqe", 0], ["in", 0], ["range", 0], ["0", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["2", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["getint", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["getvars", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["getlist", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["getstr", 0], ["return", 0], ["input", 0], ["strip", 0], ["t", 0], ["getint", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["getint", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["case", 0], ["num", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["from", 0], ["bisect", 0], ["import", 0], ["from", 0], ["collections", 0], ["import", 0], ["from", 0], ["itertools", 0], ["import", 0], ["import", 0], ["functools", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["from", 0], ["decimal", 0], ["import", 0], ["from", 0], ["copy", 0], ["import", 0], ["from", 0], ["heapq", 0], ["import", 0], ["from", 0], ["fractions", 0], ["import", 0], ["getcontext", 0], ["prec", 0], ["30", 0], ["max", 0], ["sys", 0], ["maxsize", 0], ["maxn", 0], ["1000010", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["spf", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["maxn", 0], ["spf", 0], ["0", 0], ["spf", 0], ["1", 0], ["1", 0], ["def", 0], ["sieve", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["maxn", 0], ["2", 0], ["spf", 0], ["i", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["int", 0], ["maxn", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["spf", 0], ["i", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["i", 0], ["maxn", 0], ["i", 0], ["if", 0], ["spf", 0], ["j", 0], ["j", 0], ["spf", 0], ["j", 0], ["i", 0], ["def", 0], ["fib", 0], ["n", 0], ["m", 0], ["if", 0], ["n", 0], ["0", 0], ["return", 0], ["0", 0], ["1", 0], ["else", 0], ["a", 0], ["b", 0], ["fib", 0], ["n", 0], ["2", 0], ["c", 0], ["a", 0], ["m", 0], ["b", 0], ["m", 0], ["2", 0], ["a", 0], ["m", 0], ["m", 0], ["d", 0], ["a", 0], ["m", 0], ["a", 0], ["m", 0], ["m", 0], ["b", 0], ["m", 0], ["b", 0], ["m", 0], ["m", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["return", 0], ["c", 0], ["d", 0], ["else", 0], ["return", 0], ["d", 0], ["c", 0], ["d", 0], ["def", 0], ["charin", 0], ["x", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["x", 0], ["def", 0], ["arrin", 0], ["x", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["x", 0], ["def", 0], ["ncr", 0], ["n", 0], ["r", 0], ["num", 0], ["den", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["num", 0], ["num", 0], ["n", 0], ["i", 0], ["mod", 0], ["den", 0], ["den", 0], ["i", 0], ["1", 0], ["mod", 0], ["return", 0], ["num", 0], ["pow", 0], ["den", 0], ["mod", 0], ["2", 0], ["mod", 0], ["mod", 0], ["def", 0], ["flush", 0], ["return", 0], ["sys", 0], ["stdout", 0], ["flush", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["n", 0], ["2", 0], ["else", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["2", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["deque", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappush", 0], ["heappop", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["accumulate", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["bisect", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["i", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["ls", 0], ["return", 0], ["list", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["s", 0], ["res", 0], ["list", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["if", 0], ["res", 0], ["1", 0], ["n", 0], ["return", 0], ["res", 0], ["1", 0], ["return", 0], ["res", 0], ["def", 0], ["ir", 0], ["n", 0], ["return", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["lir", 0], ["n", 0], ["return", 0], ["li", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["sr", 0], ["n", 0], ["return", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["def", 0], ["lsr", 0], ["n", 0], ["return", 0], ["ls", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sys", 0], ["setrecursionlimit", 0], ["1000000", 0], ["mod", 0], ["1000000007", 0], ["def", 0], ["solve", 0], ["t", 0], ["i", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["i", 0], ["print", 0], ["n", 0], ["1", 0], ["1", 0], ["return", 0], ["solve", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["t", 0], ["x", 0], ["map", 0], ["int", 0], ["open", 0], ["0", 0], ["read", 0], ["split", 0], ["ans", 0], ["y", 0], ["1", 0], ["2", 0], ["for", 0], ["y", 0], ["in", 0], ["x", 0], ["print", 0], ["n", 0], ["join", 0], ["map", 0], ["str", 0], ["ans", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["2", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["else", 0], ["n", 0], ["2", 0], ["1", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["as", 0], ["bl", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heappush", 0], ["heappop", 0], ["import", 0], ["math", 0], ["from", 0], ["collections", 0], ["import", 0], ["from", 0], ["functools", 0], ["import", 0], ["reduce", 0], ["cmp", 0], ["to", 0], ["key", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["m", 0], ["mod", 0], ["998244353", 0], ["def", 0], ["factors", 0], ["n", 0], ["return", 0], ["sorted", 0], ["set", 13], ["reduce", 13], ["list", 13], ["add", 13], ["i", 16], ["n", 16], ["i", 16], ["for", 16], ["i", 16], ["in", 4], ["range", 0], ["1", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["def", 0], ["inv", 0], ["mod", 0], ["n", 0], ["return", 0], ["pow", 0], ["n", 0], ["mod", 0], ["2", 0], ["mod", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["split", 0], ["def", 0], ["st", 0], ["return", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["val", 0], ["return", 0], ["int", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["li2", 0], ["return", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["def", 0], ["li3", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["rstrip", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["val", 0], ["n", 0], ["val", 0], ["print", 0], ["n", 0], ["2", 0], ["if", 0], ["n", 0], ["1", 0], ["else", 0], ["n", 0], ["2", 0], ["1", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["x", 0], ["int", 0], ["input", 0], ["if", 0], ["x", 0], ["2", 0], ["0", 0], ["print", 0], ["x", 0], ["2", 0], ["2", 0], ["else", 0], ["print", 0], ["x", 0], ["1", 0], ["2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["itertools", 0], ["import", 0], ["functools", 0], ["import", 0], ["collections", 0], ["import", 0], ["operator", 0], ["import", 0], ["fileinput", 0], ["import", 0], ["copy", 0], ["orda", 0], ["97", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["mi", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["lcm", 0], ["a", 0], ["b", 0], ["return", 0], ["abs", 0], ["a", 0], ["b", 0], ["math", 0], ["gcd", 0], ["a", 0], ["b", 0], ["def", 0], ["revn", 0], ["n", 0], ["return", 0], ["str", 0], ["n", 0], ["1", 0], ["def", 0], ["dd", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["int", 0], ["def", 0], ["ddl", 0], ["return", 0], ["collections", 0], ["defaultdict", 0], ["list", 0], ["def", 0], ["sieve", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["list", 0], ["prime", 0], ["true", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["p", 0], ["3", 0], ["while", 0], ["p", 0], ["p", 0], ["n", 0], ["if", 0], ["prime", 0], ["p", 2], ["for", 2], ["i", 0], ["in", 0], ["range", 0], ["p", 0], ["2", 0], ["n", 0], ["1", 0], ["p", 0], ["prime", 0], ["i", 0], ["false", 0], ["p", 0], ["2", 0], ["r", 0], ["2", 0], ["for", 0], ["p", 0], ["in", 0], ["range", 0], ["3", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["prime", 0], ["p", 0], ["r", 0], ["append", 0], ["p", 0], ["return", 0], ["r", 0], ["def", 0], ["divs", 0], ["n", 0], ["start", 0], ["1", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["start", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["if", 0], ["n", 0], ["i", 0], ["i", 0], ["r", 0], ["append", 0], ["i", 0], ["else", 0], ["r", 0], ["extend", 0], ["i", 0], ["n", 0], ["i", 0], ["return", 0], ["r", 0], ["def", 0], ["divn", 0], ["n", 0], ["primes", 0], ["divs", 0], ["number", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["primes", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["divs", 0], ["number", 0], ["t", 0], ["1", 0], ["while", 0], ["n", 0], ["i", 0], ["0", 0], ["t", 0], ["1", 0], ["n", 0], ["i", 0], ["divs", 0], ["number", 0], ["t", 0], ["def", 0], ["prime", 0], ["n", 0], ["if", 0], ["n", 0], ["2", 0], ["return", 0], ["true", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["or", 0], ["n", 0], ["1", 0], ["return", 0], ["false", 0], ["sqr", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["3", 0], ["sqr", 0], ["2", 0], ["if", 0], ["n", 0], ["d", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["def", 0], ["convn", 0], ["number", 0], ["base", 0], ["newnumber", 0], ["0", 0], ["while", 0], ["number", 0], ["0", 0], ["newnumber", 0], ["number", 0], ["base", 0], ["number", 0], ["base", 0], ["return", 0], ["newnumber", 0], ["def", 0], ["cdiv", 0], ["n", 0], ["k", 0], ["return", 0], ["n", 0], ["k", 0], ["n", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ii", 0], ["n", 0], ["ii", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["n", 0], ["2", 0], ["else", 0], ["print", 0], ["n", 0], ["2", 0], ["1", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["print", 0], ["int", 0], ["input", 0], ["1", 0], ["2", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["exit", 0], ["setrecursionlimit", 0], ["setrecursionlimit", 0], ["10000000", 0], ["input", 0], ["stdin", 0], ["readline", 0], ["lmi", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mi", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["si", 0], ["lambda", 0], ["input", 0], ["strip", 0], ["n", 0], ["ssi", 0], ["lambda", 0], ["input", 0], ["strip", 0], ["n", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["n", 0], ["1", 0], ["2", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.010480349344978166, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00163335572724219, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.03111495246326707, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.009457482880127653, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0026200873362445414, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.001091703056768559, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.023336214347450302, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.008859118409680207, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nSonya decided that having her own hotel business is the best way of earning money because she can profit and rest wherever she wants.\n\nThe country where Sonya lives is an endless line. There is a city in each integer coordinate on this line. She has $n$ hotels, where the $i$-th hotel is located in the city with coordinate $x_i$. Sonya is a smart girl, so she does not open two or more hotels in the same city.\n\nSonya understands that her business needs to be expanded by opening new hotels, so she decides to build one more. She wants to make the minimum distance from this hotel to all others to be equal to $d$. The girl understands that there are many possible locations to construct such a hotel. Thus she wants to know the number of possible coordinates of the cities where she can build a new hotel. \n\nBecause Sonya is lounging in a jacuzzi in one of her hotels, she is asking you to find the number of cities where she can build a new hotel so that the minimum distance from the original $n$ hotels to the new one is equal to $d$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $d$ ($1\\leq n\\leq 100$, $1\\leq d\\leq 10^9$) — the number of Sonya's hotels and the needed minimum distance from a new hotel to all others.\n\nThe second line contains $n$ different integers in strictly increasing order $x_1, x_2, \\ldots, x_n$ ($-10^9\\leq x_i\\leq 10^9$) — coordinates of Sonya's hotels.\n\n\n-----Output-----\n\nPrint the number of cities where Sonya can build a new hotel so that the minimum distance from this hotel to all others is equal to $d$.\n\n\n-----Examples-----\nInput\n4 3\n-3 2 9 16\n\nOutput\n6\n\nInput\n5 2\n4 8 11 18 19\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first example, there are $6$ possible cities where Sonya can build a hotel. These cities have coordinates $-6$, $5$, $6$, $12$, $13$, and $19$.\n\nIn the second example, there are $5$ possible cities where Sonya can build a hotel. These cities have coordinates $2$, $6$, $13$, $16$, and $21$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["read = lambda: map(int, input().split())\nn, d = read()\nx = sorted(read())\nans = 2\nfor i in range(1, n):\n\tdx = x[i] - x[i - 1]\n\tif dx == 2 * d:\n\t\tans += 1\n\telif dx > 2 * d:\n\t\tans += 2\nprint(ans)\n", "n, d = list(map(int, input().split()))\na = list(map(int, input().split()))\n\n\ncands = set()\nfor x in a:\n\tcands.add(x - d)\n\tcands.add(x + d)\n\nans = 0\nfor x in cands:\n\tmn_dist = min([abs(t - x) for t in a])\n\tans += mn_dist == d\n\nprint(ans)\n", "n,d=list(map(int,input().split()))\na=list(map(int,input().split()))\nans=2\nfor i in range(n-1):\n\tif a[i+1]-a[i]==2*d:\n\t\tans+=1\n\telif a[i+1]-a[i]>2*d:\n\t\tans+=2\nprint(ans)\n", "n, d = map(int, input().split())\nx = list(map(int, input().split()))\nans = 2\nfor i in range(n - 1):\n\tif x[i + 1] - x[i] > 2 * d: ans += 2\n\telif x[i + 1] - x[i] == 2 * d: ans += 1\nprint(ans)\n", "n, d = [int(x) for x in input().strip().split()]\nx = [int(x) for x in input().strip().split()]\n\nd *= 2\nx.sort()\n\nans = 2\nfor i in range(len(x) - 1):\n\tdiff = x[i+1] - x[i]\n\tif diff == d:\n\t\tans += 1\n\telif diff > d:\n\t\tans += 2\n\nprint(ans)\n", "from sys import stdin, stdout\nfrom collections import deque\n\nn, d = map(int, stdin.readline().split())\nvalues = list(map(int, stdin.readline().split()))\nans = set()\n\nfor i in range(n):\n\tcur = values[i] - d\n\tmn = 10 ** 10\n\t\n\tfor j in range(n):\n\t\tif abs(cur - values[j]) < mn:\n\t\t\tmn = abs(cur- values[j])\n\t\n\tif mn == d:\n\t\tans.add(cur)\n\t\t\n\t\n\tcur = values[i] + d\n\tmn = 10 ** 10\n\t\n\tfor j in range(n):\n\t\tif abs(cur - values[j]) < mn:\n\t\t\tmn = abs(cur- values[j])\n\t\n\tif mn == d:\n\t\tans.add(cur)  \n\nstdout.write(str(len(ans)))\n", "def main():\n\t#string     input()\n\t#strList    input().split()\n\t#integer    int(input())\n\tn, d = list(map(int, input().split()))\n\tx = list(map(int, input().split()))\n\tret = 2\n\tfor i in range(n - 1):\n\t\tif x[i + 1] - x[i] >= 2 * d:\n\t\t\tret += 1 + (x[i + 1] - x[i] >= 2 * d + 1)\n\tprint(ret)\n\treturn 0\nmain()\n", "n, d = [int(v) for v in input().split()]\na = {int(v) for v in input().split()}\n\nb1 = {v - d for v in a}\nb2 = {v + d for v in a}\ns = (b1 | b2) - a\n\ns = {v for v in b1 | b2 if min(abs(v - vv) for vv in a) == d}\n\nprint(len(s))\n", "n,m = list(map(int,input().split()))\na = list(map(int,input().split()))\nt = 2\nfor i in range(1,n):\n\tdi = a[i]-a[i-1]\n\tif(di==2*m):t+=1\n\tif(di>2*m):t+=2\nprint(t)\n", "n, d = list(map(int, input().split()))\nkoord = list(map(int, input().split()))\nans = 2\nsums = []\nfor i in range(1, n):\n\tsums.append(koord[i] - koord[i - 1])\nfor i in sums:\n\tif i > 2 * d:\n\t\tans += 2\n\telif i == 2 * d:\n\t\tans += 1\nprint(ans)\n\t\t\n", "\nn, d = list(map(int,input().split()))\n\ndata = list(map(int,input().split()))\n\nans = 1\n\nfor i in range(n):\n\tif i == 0:\n\t\tans += 1\n\t\tcontinue\n\tif (data[i] - data[i - 1] >= 2*d):\n\t\tif data[i] - data[i - 1] != 2 * d:\n\t\t\tans += 2\n\t\telse:\n\t\t\tans +=1\n\t\t\t\nprint(ans)\n", "n,d=input().split()\nn=int(n)\nd=int(d)\na=list(map(int,input().split()))\nt=2\nfor i in range(n-1):\n\tif a[i+1]-a[i]>2*d:\n\t\tt+=2\n\telif a[i+1]-a[i]==2*d:\n\t\tt+=1\nprint(t)\n", "n, d = map(int, input().split())\na = list(map(int, input().split()))\n\nl = set()\nfor i in a:\n\tx = i + d\n\tr = 100000000000\n\tfor j in a:\n\t\tr = min(abs(x - j), r)\n\tif r == d:\n\t\tl.add(x)\n\tx = i - d\n\tr = 100000000000\n\tfor j in a:\n\t\tr = min(abs(x - j), r)\n\tif r == d:\n\t\tl.add(x)\nprint(len(l))\n", "def ii():\n\treturn int(input())\ndef mi():\n\treturn map(int, input().split())\ndef li():\n\treturn list(mi())\n\nn, d = mi()\na = li()\na.sort()\nans = set()\nfor i in range(n):\n\tx = a[i] - d\n\ty = a[i] + d\n\tif i == 0 or a[i - 1] <= x - d:\n\t\tans.add(x)\n\tif i == n - 1 or y + d <= a[i + 1]:\n\t\tans.add(y)\nprint(len(ans))\n", "n, d = list(map(int, input().split()))\nx = list(map(int, input().split()))\n\nans = 2\nfor i in range(n - 1):\n\tif x[i + 1] - x[i] == 2 * d:\n\t\tans += 1\n\telif x[i + 1] - x[i] > 2 * d:\n\t\tans += 2\nprint(ans)\n", "#!/usr/bin/env python3\n\nn, d = [int(i) for i in input().split()]\n\nx = [int(i) for i in input().split()]\n\nans = 2\nfor i in range(1, len(x)):\n\tif x[i] - x[i - 1] == 2 * d:\n\t\tans += 1\n\tif x[i] - x[i - 1] > 2 * d:\n\t\tans += 2\nprint(ans)\n\n", "n,d=map(int,input().strip().split())\ncity=list(map(int,input().strip().split()))\ncount=2\nfor i in range(1,n):\n\tif city[i]-city[i-1]==2*d:\n\t\tcount=count+1\n\telif city[i]-city[i-1]>2*d:\n\t\tcount=count+2\n\telse:\n\t\tcontinue\nprint (count)\n", "n, d = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\na = [-10**10] + a + [10**10]\nans = 0\nfor i in range(1, n+1):\n\tif(abs((a[i] - d) - a[i-1]) >= d):\n\t\tif abs((a[i] - d) - a[i-1]) != d:\n\t\t\tans += 1\n\tif (abs((a[i] + d) - a[i+1]) >= d):\n\t\tans += 1\nprint(ans)\n", "from sys import stdin, stdout \nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict\nimport math\nfrom random import random\ncin = stdin.readline\ndef cout(x):\n\tstdout.write(str(x)+'\\n')\ndef var(type = int):\n    return type(stdin.readline())\ndef readline(type = int):\n    return map(type,stdin.readline().split())\ndef readlist(type = int):\n    return list(map(type,stdin.readline().split()))\ndef sorted_indexes(arr):\n    return sorted(range(len(arr)),key=arr.__getitem__)\ndef printr(arr):\n    [stdout.write(str(x)+' ')   for x in arr]\n    cout('')\ndef find_lt(a, x):#'Find rightmost value less than x'\n    i = bisect_left(a, x)\n    if i:\n        return a[i-1]\n    raise ValueError\ndef find_gt(a, x):#'Find leftmost value greater than x'\n    i = bisect_right(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\ndef dist(x,y):\n    return math.sqrt(x*x + y*y)\ndef binary_search(arr, x):\n    i = bisect_left(arr, x)\n    if i == len(arr) or arr[i] != x:\n        return -1\n    return i\n\n# ---------------------Template ends-------------sdpt,sdpt131[Sudipta Banik]---------------------\n\nn,d = readline()\na = readlist()\n\nmp = {}\nfor i in range(n):\n\tleft = a[i]-d;\n\tright = a[i]+d;\n\tif (i==0):\n\t\tmp[left]=1\n\telse:\n\t\tif abs(left - a[i-1])>=d:\n\t\t\tmp[left]=1\n\t\telse:\n\t\t\tpass\n\n\tif i==n-1:\n\t\tmp[right]=1\n\telse:\n\t\tif(abs(right - a[i+1]))>=d:\n\t\t\tmp[right]=1\n\t\telse:\n\t\t\tpass\nprint(len(mp))\n", "import sys\n\nn, d = [int(x) for x in input().split()]\nx = [int(x) for x in input().split()]\n\nres = 2\n\nfor i in range(len(x)):\n\tif i > 0 and abs(x[i] - d - x[i-1]) >= d:\n\t\tres += 1\n\tif i < len(x) - 1 and abs(x[i] + d - x[i+1]) > d:\n\t\tres += 1\n\nprint(res)\n", "n, m  = [int(el) for el in input().split()]\ncol = 2\na = [int(el) for el in input().split()]\nfor i in range(n - 1):\n\tif a[i + 1] - a[i] == m * 2:\n\t\tcol += 1\n\tif a[i+1] - a[i] > m*2:\n\t\tcol += 2\nprint(col)\n", "n,d=list(map(int,input().split()))\na=sorted(list(map(int,input().split())))\nans=2\nfor i in range(1,n):\n\tif(a[i]-a[i-1]-2*d>0):\n\t\tans+=2\n\telif(a[i]-a[i-1]-2*d==0):\n\t\tans+=1\nprint(ans)\n", "n, d = map(int, input().split())\na = list(map(int, input().split()))\nans = 2\nfor i in range(n - 1):\n\tif a[i + 1] - a[i] > 2 * d:\n\t\tans += 2\n\telif a[i + 1] - a[i] == 2 * d:\n\t\tans += 1\nprint(ans)\n", "n, d = input().split(\" \")\nn = int(n)\nd = int(d)\nx = input().split(\" \")\nfor i in range(n):\n\tx[i] = int(x[i])\ncounter = 2\nfor i in range(n - 1):\n\tstart = x[i]\n\tend = x[i + 1]\n\tif end - start < 2 * d:\n\t\tcounter += 0\n\telif end - start == 2 * d:\n\t\tcounter += 1\n\telse:\n\t\tcounter += 2\nprint(counter)\n"], "id": "id5087"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5087", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["sonya", 2], ["decided", 2], ["that", 2], ["having", 2], ["her", 2], ["own", 2], ["hotel", 2], ["business", 2], ["is", 2], ["the", 2], ["best", 2], ["way", 2], ["of", 2], ["earning", 2], ["money", 2], ["because", 2], ["she", 2], ["can", 2], ["profit", 2], ["and", 2], ["rest", 2], ["wherever", 2], ["she", 2], ["wants", 2], ["the", 2], ["country", 2], ["where", 2], ["sonya", 2], ["lives", 2], ["is", 2], ["an", 2], ["endless", 2], ["line", 2], ["there", 2], ["is", 2], ["a", 2], ["city", 2], ["in", 2], ["each", 2], ["integer", 2], ["coordinate", 2], ["on", 2], ["this", 2], ["line", 2], ["she", 2], ["has", 2], ["n", 2], ["hotels", 2], ["where", 2], ["the", 2], ["i", 2], ["th", 2], ["hotel", 2], ["is", 2], ["located", 2], ["in", 2], ["the", 2], ["city", 2], ["with", 2], ["coordinate", 2], ["x", 2], ["i", 2], ["sonya", 2], ["is", 2], ["a", 2], ["smart", 2], ["girl", 2], ["so", 2], ["she", 2], ["does", 2], ["not", 2], ["open", 2], ["two", 2], ["or", 2], ["more", 2], ["hotels", 2], ["in", 2], ["the", 2], ["same", 2], ["city", 2], ["sonya", 2], ["understands", 2], ["that", 2], ["her", 2], ["business", 2], ["needs", 2], ["to", 2], ["be", 2], ["expanded", 2], ["by", 2], ["opening", 2], ["new", 2], ["hotels", 2], ["so", 2], ["she", 2], ["decides", 2], ["to", 2], ["build", 2], ["one", 2], ["more", 2], ["she", 2], ["wants", 2], ["to", 2], ["make", 2], ["the", 2], ["minimum", 2], ["distance", 2], ["from", 2], ["this", 2], ["hotel", 2], ["to", 2], ["all", 2], ["others", 2], ["to", 2], ["be", 2], ["equal", 2], ["to", 2], ["d", 2], ["the", 2], ["girl", 2], ["understands", 2], ["that", 2], ["there", 2], ["are", 2], ["many", 2], ["possible", 2], ["locations", 2], ["to", 2], ["construct", 2], ["such", 2], ["a", 2], ["hotel", 2], ["thus", 2], ["she", 2], ["wants", 2], ["to", 2], ["know", 2], ["the", 2], ["number", 2], ["of", 2], ["possible", 2], ["coordinates", 2], ["of", 2], ["the", 2], ["cities", 2], ["where", 2], ["she", 2], ["can", 2], ["build", 2], ["a", 2], ["new", 2], ["hotel", 2], ["because", 2], ["sonya", 2], ["is", 2], ["lounging", 2], ["in", 2], ["a", 2], ["jacuzzi", 2], ["in", 2], ["one", 2], ["of", 2], ["her", 2], ["hotels", 2], ["she", 2], ["is", 2], ["asking", 2], ["you", 2], ["to", 2], ["find", 2], ["the", 2], ["number", 2], ["of", 2], ["cities", 2], ["where", 2], ["she", 2], ["can", 2], ["build", 2], ["a", 2], ["new", 2], ["hotel", 2], ["so", 2], ["that", 2], ["the", 2], ["minimum", 2], ["distance", 2], ["from", 2], ["the", 0], ["original", 0], ["n", 0], ["hotels", 0], ["to", 0], ["the", 0], ["new", 0], ["one", 0], ["is", 0], ["equal", 0], ["to", 0], ["d", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 2], ["contains", 2], ["two", 2], ["integers", 2], ["n", 2], ["and", 2], ["d", 2], ["1", 2], ["leq", 2], ["n", 2], ["leq", 2], ["100", 2], ["1", 2], ["leq", 2], ["d", 2], ["leq", 2], ["10", 2], ["9", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["sonya", 2], ["s", 2], ["hotels", 2], ["and", 2], ["the", 2], ["needed", 2], ["minimum", 2], ["distance", 2], ["from", 2], ["a", 2], ["new", 2], ["hotel", 2], ["to", 2], ["all", 2], ["others", 2], ["the", 2], ["second", 2], ["line", 2], ["contains", 2], ["n", 2], ["different", 2], ["integers", 2], ["in", 2], ["strictly", 2], ["increasing", 2], ["order", 2], ["x", 2], ["1", 2], ["x", 2], ["2", 2], ["ldots", 2], ["x", 2], ["n", 2], ["10", 2], ["9", 2], ["leq", 0], ["x", 0], ["i", 0], ["leq", 0], ["10", 0], ["9", 0], ["—", 0], ["coordinates", 0], ["of", 0], ["sonya", 0], ["s", 0], ["hotels", 0], ["output", 0], ["print", 2], ["the", 2], ["number", 2], ["of", 2], ["cities", 2], ["where", 2], ["sonya", 2], ["can", 2], ["build", 2], ["a", 2], ["new", 2], ["hotel", 2], ["so", 2], ["that", 2], ["the", 2], ["minimum", 0], ["distance", 0], ["from", 0], ["this", 0], ["hotel", 0], ["to", 0], ["all", 0], ["others", 0], ["is", 0], ["equal", 0], ["to", 0], ["d", 0], ["examples", 0], ["input", 0], ["4", 0], ["3", 0], ["3", 0], ["2", 0], ["9", 0], ["16", 0], ["output", 0], ["6", 0], ["input", 0], ["5", 0], ["2", 0], ["4", 0], ["8", 0], ["11", 0], ["18", 0], ["19", 0], ["output", 0], ["5", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["example", 2], ["there", 2], ["are", 2], ["6", 2], ["possible", 2], ["cities", 2], ["where", 2], ["sonya", 2], ["can", 2], ["build", 2], ["a", 2], ["hotel", 2], ["these", 2], ["cities", 2], ["have", 2], ["coordinates", 2], ["6", 2], ["5", 2], ["6", 2], ["12", 2], ["13", 2], ["and", 2], ["19", 2], ["in", 2], ["the", 2], ["second", 2], ["example", 2], ["there", 2], ["are", 2], ["5", 2], ["possible", 2], ["cities", 2], ["where", 2], ["sonya", 2], ["can", 2], ["build", 2], ["a", 0], ["hotel", 0], ["these", 0], ["cities", 0], ["have", 0], ["coordinates", 0], ["2", 0], ["6", 0], ["13", 0], ["16", 0], ["and", 0], ["21", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8108108108108109, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.40540540540540543, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.9109947643979057, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.45549738219895286, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8108108108108109, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.40540540540540543, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.9109947643979057, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.45549738219895286, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["read", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["d", 0], ["read", 0], ["x", 0], ["sorted", 0], ["read", 0], ["ans", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["dx", 0], ["x", 0], ["i", 0], ["x", 0], ["i", 0], ["1", 0], ["if", 0], ["dx", 0], ["2", 0], ["d", 0], ["ans", 0], ["1", 0], ["elif", 0], ["dx", 0], ["2", 0], ["d", 0], ["ans", 0], ["2", 0], ["print", 0], ["ans", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cands", 0], ["set", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["cands", 0], ["add", 0], ["x", 0], ["d", 0], ["cands", 0], ["add", 0], ["x", 0], ["d", 0], ["ans", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["cands", 0], ["mn", 0], ["dist", 0], ["min", 0], ["abs", 0], ["t", 0], ["x", 0], ["for", 0], ["t", 0], ["in", 0], ["a", 0], ["ans", 0], ["mn", 0], ["dist", 0], ["d", 0], ["print", 0], ["ans", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["d", 0], ["ans", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["d", 0], ["ans", 0], ["2", 0], ["print", 0], ["ans", 0], ["n", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["2", 0], ["d", 0], ["ans", 0], ["2", 0], ["elif", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["2", 0], ["d", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["d", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["x", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["d", 0], ["2", 0], ["x", 0], ["sort", 0], ["ans", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["x", 0], ["1", 0], ["diff", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["if", 0], ["diff", 0], ["d", 0], ["ans", 0], ["1", 0], ["elif", 0], ["diff", 0], ["d", 0], ["ans", 0], ["2", 0], ["print", 0], ["ans", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["n", 0], ["d", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["values", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["ans", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cur", 0], ["values", 0], ["i", 0], ["d", 0], ["mn", 0], ["10", 0], ["10", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["abs", 0], ["cur", 0], ["values", 0], ["j", 0], ["mn", 0], ["mn", 0], ["abs", 0], ["cur", 0], ["values", 0], ["j", 0], ["if", 0], ["mn", 0], ["d", 0], ["ans", 0], ["add", 0], ["cur", 0], ["cur", 0], ["values", 0], ["i", 0], ["d", 0], ["mn", 0], ["10", 0], ["10", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["abs", 0], ["cur", 0], ["values", 0], ["j", 0], ["mn", 0], ["mn", 0], ["abs", 0], ["cur", 0], ["values", 0], ["j", 0], ["if", 0], ["mn", 0], ["d", 0], ["ans", 0], ["add", 0], ["cur", 0], ["stdout", 0], ["write", 0], ["str", 0], ["len", 0], ["ans", 0], ["def", 0], ["main", 0], ["string", 0], ["input", 0], ["strlist", 0], ["input", 0], ["split", 0], ["integer", 0], ["int", 0], ["input", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ret", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["2", 0], ["d", 0], ["ret", 0], ["1", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["2", 0], ["d", 0], ["1", 0], ["print", 0], ["ret", 0], ["return", 0], ["0", 0], ["main", 0], ["n", 0], ["d", 0], ["int", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["input", 0], ["split", 0], ["b1", 0], ["v", 0], ["d", 0], ["for", 0], ["v", 0], ["in", 0], ["a", 0], ["b2", 0], ["v", 0], ["d", 0], ["for", 0], ["v", 0], ["in", 0], ["a", 0], ["s", 0], ["b1", 0], ["b2", 0], ["a", 0], ["s", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["b1", 0], ["b2", 0], ["if", 0], ["min", 0], ["abs", 0], ["v", 0], ["vv", 0], ["for", 0], ["vv", 0], ["in", 0], ["a", 0], ["d", 0], ["print", 0], ["len", 0], ["s", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["di", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["di", 0], ["2", 0], ["m", 0], ["t", 0], ["1", 0], ["if", 0], ["di", 0], ["2", 0], ["m", 0], ["t", 0], ["2", 0], ["print", 0], ["t", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["koord", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["2", 0], ["sums", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["sums", 0], ["append", 0], ["koord", 0], ["i", 0], ["koord", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["sums", 0], ["if", 0], ["i", 0], ["2", 0], ["d", 0], ["ans", 0], ["2", 0], ["elif", 0], ["i", 0], ["2", 0], ["d", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["data", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["0", 0], ["ans", 0], ["1", 0], ["continue", 0], ["if", 0], ["data", 0], ["i", 0], ["data", 0], ["i", 0], ["1", 0], ["2", 0], ["d", 0], ["if", 0], ["data", 0], ["i", 0], ["data", 0], ["i", 0], ["1", 0], ["2", 0], ["d", 0], ["ans", 0], ["2", 0], ["else", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["d", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["d", 0], ["int", 0], ["d", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["d", 0], ["t", 0], ["2", 0], ["elif", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["d", 0], ["t", 0], ["1", 0], ["print", 0], ["t", 0], ["n", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["x", 0], ["i", 0], ["d", 0], ["r", 0], ["100000000000", 0], ["for", 0], ["j", 0], ["in", 0], ["a", 0], ["r", 0], ["min", 0], ["abs", 0], ["x", 0], ["j", 0], ["r", 0], ["if", 0], ["r", 0], ["d", 0], ["l", 0], ["add", 0], ["x", 0], ["x", 0], ["i", 0], ["d", 0], ["r", 0], ["100000000000", 0], ["for", 0], ["j", 0], ["in", 0], ["a", 0], ["r", 0], ["min", 0], ["abs", 0], ["x", 0], ["j", 0], ["r", 0], ["if", 0], ["r", 0], ["d", 0], ["l", 0], ["add", 0], ["x", 0], ["print", 0], ["len", 0], ["l", 0], ["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["mi", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["mi", 0], ["n", 0], ["d", 0], ["mi", 0], ["a", 0], ["li", 0], ["a", 0], ["sort", 0], ["ans", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["a", 0], ["i", 0], ["d", 0], ["y", 0], ["a", 0], ["i", 0], ["d", 0], ["if", 0], ["i", 0], ["0", 0], ["or", 0], ["a", 0], ["i", 0], ["1", 0], ["x", 0], ["d", 0], ["ans", 0], ["add", 0], ["x", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["or", 0], ["y", 0], ["d", 0], ["a", 0], ["i", 0], ["1", 0], ["ans", 0], ["add", 0], ["y", 0], ["print", 0], ["len", 0], ["ans", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["2", 0], ["d", 0], ["ans", 0], ["1", 0], ["elif", 0], ["x", 0], ["i", 0], ["1", 0], ["x", 0], ["i", 0], ["2", 0], ["d", 0], ["ans", 0], ["2", 0], ["print", 0], ["ans", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["n", 0], ["d", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["x", 0], ["if", 0], ["x", 0], ["i", 0], ["x", 0], ["i", 0], ["1", 0], ["2", 0], ["d", 0], ["ans", 0], ["1", 0], ["if", 0], ["x", 0], ["i", 0], ["x", 0], ["i", 0], ["1", 0], ["2", 0], ["d", 0], ["ans", 0], ["2", 0], ["print", 0], ["ans", 0], ["n", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["city", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["count", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["city", 0], ["i", 0], ["city", 0], ["i", 0], ["1", 0], ["2", 0], ["d", 0], ["count", 0], ["count", 0], ["1", 0], ["elif", 0], ["city", 0], ["i", 0], ["city", 0], ["i", 0], ["1", 0], ["2", 0], ["d", 0], ["count", 0], ["count", 0], ["2", 0], ["else", 0], ["continue", 0], ["print", 0], ["count", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["a", 0], ["10", 0], ["10", 0], ["a", 0], ["10", 0], ["10", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["abs", 0], ["a", 0], ["i", 0], ["d", 0], ["a", 0], ["i", 0], ["1", 0], ["d", 0], ["if", 0], ["abs", 0], ["a", 0], ["i", 0], ["d", 0], ["a", 0], ["i", 0], ["1", 0], ["d", 0], ["ans", 0], ["1", 0], ["if", 0], ["abs", 0], ["a", 0], ["i", 0], ["d", 0], ["a", 0], ["i", 0], ["1", 0], ["d", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["bisect", 0], ["right", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["import", 0], ["math", 0], ["from", 0], ["random", 0], ["import", 0], ["random", 0], ["cin", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["cout", 0], ["x", 0], ["stdout", 0], ["write", 0], ["str", 0], ["x", 0], ["n", 0], ["def", 0], ["var", 0], ["type", 0], ["int", 0], ["return", 0], ["type", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["readline", 0], ["type", 0], ["int", 0], ["return", 0], ["map", 0], ["type", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["readlist", 0], ["type", 0], ["int", 0], ["return", 0], ["list", 0], ["map", 0], ["type", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["sorted", 0], ["indexes", 0], ["arr", 0], ["return", 0], ["sorted", 0], ["range", 0], ["len", 0], ["arr", 0], ["key", 0], ["arr", 0], ["getitem", 0], ["def", 0], ["printr", 0], ["arr", 0], ["stdout", 0], ["write", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["cout", 0], ["def", 2], ["find", 0], ["lt", 0], ["a", 0], ["x", 0], ["find", 0], ["rightmost", 0], ["value", 0], ["less", 0], ["than", 0], ["x", 0], ["i", 0], ["bisect", 1], ["left", 1], ["a", 1], ["x", 1], ["if", 1], ["i", 1], ["return", 1], ["a", 1], ["i", 2], ["1", 2], ["raise", 2], ["valueerror", 2], ["def", 1], ["find", 0], ["gt", 0], ["a", 0], ["x", 0], ["find", 0], ["leftmost", 0], ["value", 0], ["greater", 0], ["than", 0], ["x", 0], ["i", 0], ["bisect", 1], ["right", 1], ["a", 0], ["x", 0], ["if", 0], ["i", 0], ["len", 0], ["a", 0], ["return", 0], ["a", 0], ["i", 0], ["raise", 0], ["valueerror", 0], ["def", 0], ["dist", 0], ["x", 0], ["y", 0], ["return", 0], ["math", 0], ["sqrt", 0], ["x", 0], ["x", 0], ["y", 0], ["y", 0], ["def", 0], ["binary", 0], ["search", 0], ["arr", 0], ["x", 0], ["i", 0], ["bisect", 0], ["left", 0], ["arr", 0], ["x", 0], ["if", 0], ["i", 0], ["len", 0], ["arr", 0], ["or", 0], ["arr", 0], ["i", 0], ["x", 0], ["return", 0], ["1", 0], ["return", 0], ["i", 0], ["template", 0], ["ends", 0], ["sdpt", 0], ["sdpt131", 0], ["sudipta", 0], ["banik", 0], ["n", 0], ["d", 0], ["readline", 0], ["a", 0], ["readlist", 0], ["mp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["left", 0], ["a", 0], ["i", 0], ["d", 0], ["right", 0], ["a", 0], ["i", 0], ["d", 0], ["if", 0], ["i", 0], ["0", 0], ["mp", 0], ["left", 0], ["1", 0], ["else", 0], ["if", 0], ["abs", 0], ["left", 0], ["a", 0], ["i", 0], ["1", 0], ["d", 0], ["mp", 0], ["left", 0], ["1", 0], ["else", 0], ["pass", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["mp", 0], ["right", 0], ["1", 0], ["else", 0], ["if", 0], ["abs", 0], ["right", 0], ["a", 0], ["i", 0], ["1", 0], ["d", 0], ["mp", 0], ["right", 0], ["1", 0], ["else", 0], ["pass", 0], ["print", 0], ["len", 0], ["mp", 0], ["import", 0], ["sys", 0], ["n", 0], ["d", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["res", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["x", 0], ["if", 0], ["i", 0], ["0", 0], ["and", 0], ["abs", 0], ["x", 0], ["i", 0], ["d", 0], ["x", 0], ["i", 0], ["1", 0], ["d", 0], ["res", 0], ["1", 0], ["if", 0], ["i", 0], ["len", 0], ["x", 0], ["1", 0], ["and", 0], ["abs", 0], ["x", 0], ["i", 0], ["d", 0], ["x", 0], ["i", 0], ["1", 0], ["d", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["n", 0], ["m", 0], ["int", 0], ["el", 0], ["for", 0], ["el", 0], ["in", 0], ["input", 0], ["split", 0], ["col", 0], ["2", 0], ["a", 0], ["int", 0], ["el", 0], ["for", 0], ["el", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["m", 0], ["2", 0], ["col", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["m", 0], ["2", 0], ["col", 0], ["2", 0], ["print", 0], ["col", 0], ["n", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["d", 0], ["0", 0], ["ans", 0], ["2", 0], ["elif", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["d", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["d", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["d", 0], ["ans", 0], ["2", 0], ["elif", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["d", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["d", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["d", 0], ["int", 0], ["d", 0], ["x", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["i", 0], ["int", 0], ["x", 0], ["i", 0], ["counter", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["start", 0], ["x", 0], ["i", 0], ["end", 0], ["x", 0], ["i", 0], ["1", 0], ["if", 0], ["end", 0], ["start", 0], ["2", 0], ["d", 0], ["counter", 0], ["0", 0], ["elif", 0], ["end", 0], ["start", 0], ["2", 0], ["d", 0], ["counter", 0], ["1", 0], ["else", 0], ["counter", 0], ["2", 0], ["print", 0], ["counter", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.011267605633802818, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.009507042253521126, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.034916201117318434, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.030726256983240222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.011267605633802818, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.009507042253521126, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.034916201117318434, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.030726256983240222, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nEvery Codeforces user has rating, described with one integer, possibly negative or zero. Users are divided into two divisions. The first division is for users with rating 1900 or higher. Those with rating 1899 or lower belong to the second division. In every contest, according to one's performance, his or her rating changes by some value, possibly negative or zero.\n\nLimak competed in n contests in the year 2016. He remembers that in the i-th contest he competed in the division d_{i} (i.e. he belonged to this division just before the start of this contest) and his rating changed by c_{i} just after the contest. Note that negative c_{i} denotes the loss of rating.\n\nWhat is the maximum possible rating Limak can have right now, after all n contests? If his rating may be arbitrarily big, print \"Infinity\". If there is no scenario matching the given information, print \"Impossible\".\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000).\n\nThe i-th of next n lines contains two integers c_{i} and d_{i} ( - 100 ≤ c_{i} ≤ 100, 1 ≤ d_{i} ≤ 2), describing Limak's rating change after the i-th contest and his division during the i-th contest contest.\n\n\n-----Output-----\n\nIf Limak's current rating can be arbitrarily big, print \"Infinity\" (without quotes). If the situation is impossible, print \"Impossible\" (without quotes). Otherwise print one integer, denoting the maximum possible value of Limak's current rating, i.e. rating after the n contests.\n\n\n-----Examples-----\nInput\n3\n-7 1\n5 2\n8 2\n\nOutput\n1907\n\nInput\n2\n57 1\n22 2\n\nOutput\nImpossible\n\nInput\n1\n-5 1\n\nOutput\nInfinity\n\nInput\n4\n27 2\n13 1\n-50 1\n8 2\n\nOutput\n1897\n\n\n\n-----Note-----\n\nIn the first sample, the following scenario matches all information Limak remembers and has maximum possible final rating:  Limak has rating 1901 and belongs to the division 1 in the first contest. His rating decreases by 7.  With rating 1894 Limak is in the division 2. His rating increases by 5.  Limak has rating 1899 and is still in the division 2. In the last contest of the year he gets  + 8 and ends the year with rating 1907. \n\nIn the second sample, it's impossible that Limak is in the division 1, his rating increases by 57 and after that Limak is in the division 2 in the second contest.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["\"\"\"\nCodeforces Good Bye 2016 Contest Problem C\n\nAuthor  : chaotic_iak\nLanguage: Python 3.5.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef main():\n\tn, = read()\n\tmn, mx = -10**18, 10**18\n\tfor _ in range(n):\n\t\tc, d = read()\n\t\tif d == 1:\n\t\t\tmn = max(mn, 1900)\n\t\telif d == 2:\n\t\t\tmx = min(mx, 1899)\n\t\tmn += c\n\t\tmx += c\n\tif mn > mx:\n\t\tprint(\"Impossible\")\n\t\treturn\n\tif mx > 10**17:\n\t\tprint(\"Infinity\")\n\t\treturn\n\tprint(mx)\n\n#################################################### HELPERS\n\ndef read(callback=int):\n\treturn list(map(callback, input().strip().split()))\n\ndef write(value, end=\"\\n\"):\n\tif value is None: return\n\ttry:\n\t\tvalue = \" \".join(map(str, value))\n\texcept:\n\t\tpass\n\tprint(value, end=end)\n\nwrite(main())\n", "n=int(input())\nmx=10**9\nmn=-mx\np=0\nfor i in range(n):\n\tc,d=[int(i) for i in input().split()]\n\tif d==1:\n\t\tmn=max(mn,1900-p)\n\telse:\n\t\tmx=min(mx,1899-p)\n\tp+=c\nif mx==10**9:\n\tprint('Infinity')\nelif mx>=mn:\n\tprint(mx+p)\nelse:\n\tprint('Impossible')\n", "#!/usr/bin/env python3\n\ndef main():\n\ttry:\n\t\twhile True:\n\t\t\tn = int(input())\n\t\t\tc = [0] * n\n\t\t\td = [0] * n\n\t\t\thas_2 = False\n\t\t\tfor i in range(n):\n\t\t\t\tc[i], d[i] = list(map(int, input().split()))\n\t\t\t\tif d[i] == 2:\n\t\t\t\t\thas_2 = True\n\n\t\t\tif not has_2:\n\t\t\t\tprint(\"Infinity\")\n\t\t\t\tcontinue\n\n\t\t\tminr = -10**9\n\t\t\tmaxr = 10**9\n\t\t\tfor i in range(n):\n\t\t\t\tif d[i] == 1:\n\t\t\t\t\tminr = max(minr, 1900)\n\t\t\t\telse:\n\t\t\t\t\tmaxr = min(maxr, 1899)\n\t\t\t\tif minr > maxr:\n\t\t\t\t\tprint(\"Impossible\")\n\t\t\t\t\tbreak\n\t\t\t\tminr += c[i]\n\t\t\t\tmaxr += c[i]\n\t\t\telse:\n\t\t\t\tprint(maxr)\n\n\texcept EOFError:\n\t\tpass\n\nmain()\n", "num_contests = int(input())\n\nrating = 0\n\nupper_bound = None\nlower_bound = None\n\nfor contest_num in range(num_contests):\n\tci, di = list(map(int, input().split()))\n\n\tif di == 1:\n\t\tif upper_bound is None or rating < upper_bound:\n\t\t\tupper_bound = rating\n\telse:\n\t\tassert di == 2\n\t\tif lower_bound is None or rating > lower_bound:\n\t\t\tlower_bound = rating\n\n\trating += ci\n\nif lower_bound is None:\n\tprint(\"Infinity\")\nelif upper_bound is not None and lower_bound >= upper_bound:\n\tprint(\"Impossible\")\nelse:\n\tprint(rating - (lower_bound + 1) + 1900)\n", "import sys\nimport math\n\ndef solve():\n\tn = int(input())\n\tl, r = -float('inf'), float('inf')\n\tfor line in sys.stdin:\n\t\tc, d = list(map(int, line.split()))\n\t\tif d == 1:\n\t\t\tl = max(1900, l)\n\t\telse:\n\t\t\tr = min(1899, r)\n\t\tl += c\n\t\tr += c\n\n\tif r < l:\n\t\treturn None\n\telse:\n\t\treturn r\n\nres = solve()\nif res is None:\n\tprint('Impossible')\nelif math.isinf(res):\n\tprint('Infinity')\nelse:\n\tprint(res)\n", "n = int(input())\nINF = 2 ** 60\nlo, hi = -INF, INF\nfor i in range(n):\n\tx, y = (int(_) for _ in input().split())\n\tif y == 2:\n\t\thi = min(hi, 1899)\n\telse:\n\t\tlo = max(lo, 1900)\n\thi += x\n\tlo += x\nif lo > hi:\n\tprint('Impossible')\nelif hi > 2 ** 31:\n\tprint('Infinity')\nelse:\n\tprint(hi)\n", "MAX = 999999999\ndef do():\n\tn = int(input())\n\tmx = MAX\n\tmn = -MAX\n\tchange, thisDiv = list(map(int,input().split()))\n\tratingChange = [0, change]\n\tdivChange = [0, thisDiv]\n\tfor i in range(n-1):\n\t\tchange, thisDiv = list(map(int,input().split()))\n\t\tratingChange.append(ratingChange[-1]+change)\n\t\tdivChange.append(thisDiv)\n\tfor i in range(n):\n\t\tif divChange[i+1] == 1:\n\t\t\tmn = max(1900 - ratingChange[i], mn)\n\t\telse:\n\t\t\tmx = min(1899 - ratingChange[i], mx)\n\t\t#print(mn, mx)\n\tif mn > mx: return \"Impossible\"\n\telse:\n\t\tif mx == MAX: return \"Infinity\"\n\t\telse: return str(mx + ratingChange[-1])\n\nprint(do())\n", "n = int(input())\nminr = -1000000000000000000\nmaxr = 1000000000000000000\nfor i in range(n):\n\tc, div = [int(x) for x in input().split()]\n\tif div == 1:\n\t\tif minr < 1900:\n\t\t\tminr = 1900\n\telse:\n\t\tif maxr >= 1900:\n\t\t\tmaxr = 1899\n\tminr += c\n\tmaxr += c\n\nif minr > maxr:\n\tprint(\"Impossible\")\nelif maxr > 10000000000:\n\tprint(\"Infinity\")\nelse:\n\tprint(maxr)\n", "n = int(input())\nA = [0] * n\nper = 0\nans1 = float('infinity')\nans2 = -float('infinity')\nfor j in range(n):\n\tper1,per2 = map(int,input().split())\n\tif per2 == 1:\n\t\tif ans1 < 1900:\n\t\t\tper = 1\n\t\t\tbreak\n\t\telse:\n\t\t\tans2 = max(ans2,1900)\n\t\t\tans1 += per1\n\t\t\tans2 += per1\n\telse:\n\t\tif ans2 >= 1900:\n\t\t\tper =1 \n\t\t\tbreak\n\t\telse:\n\t\t\tans1 = min(ans1,1899)\n\t\t\tans1 += per1\n\t\t\tans2 += per1\n   \n\tif ans1 < ans2:\n\t\tper = 1\n\t\tbreak\n\t\nif per == 0:\n\tif ans1 == float('infinity'):\n\t\tprint('Infinity')\n\telse:\n\t\t\n\t\tprint(ans1)\nelse:\n\tprint('Impossible')\n", "from math import inf\n\ndef main():\n\tn = int(input())\n\tl = -inf\n\tr = inf\n\tfor i in range(n):\n\t\tc, d = list(map(int, input().split()))\n\t\tif d == 1:\n\t\t\tl = max(1900, l)\n\t\telse:\n\t\t\tr = min(1899, r)\n\t\tif l > r:\n\t\t\tprint('Impossible')\n\t\t\treturn\n\t\tl += c\n\t\tr += c\n\tif r == inf:\n\t\tprint('Infinity')\n\telse:\n\t\tprint(r)\n\nmain()\n", "q=int(input())\nq-=1\na,s=list(map(int,input().split()))\nif s==1:\n\tz=1900\n\tx=9000000000\nelse:\n\tz=-9000000000\n\tx=1899\nz+=a\nx+=a\nfor j in range(0,q):\n\ta,s=list(map(int,input().split()))\n\tif s==1:\n\t\tz=max(1900,z)\n\telse:\n\t\tx=min(1899,x)\n\tz+=a\n\tx+=a\nif x<z:\n\tprint('Impossible')\nelif x>=7000000000:\n\tprint('Infinity')\nelse:\n\tprint(x)\n", "from sys import *\n\nn = int(stdin.readline())\n\nINF = 100000000000000000000000\nMAX = 2 * INF\nMIN = - MAX\npossible = True\n\nfor _ in range(n):\n\tc, d = stdin.readline().split(' ')\n\tc = int(c)\n\td = int(d)\n\t\n\tif d is 1:\n\t\tMIN = max(MIN, 1900)\n\tif d is 2:\n\t\tMAX = min(MAX, 1899)\n\n\tif MIN > MAX:\n\t\tpossible = False\n\n\tMIN += c\n\tMAX += c\n\nif not possible:\n\tprint('Impossible')\nelse:\n\tif MAX > INF:\n\t\tprint('Infinity')\n\telse:\n\t\tprint(MAX)\n", "#!/usr/bin/env python3\n\nFIRST_DIV_START = 1900\n\n\ndef solve():\n\tn = int(input())\n\tmin_rating = None\n\tmax_rating = None\n\tfor _ in range(n):\n\t\tc, d = list(map(int, input().split()))\n\t\t# print(\"was div{}, took {} rating\".format(d, c))\n\t\tif d == 2:\n\t\t\tif max_rating is None:\n\t\t\t\tmax_rating = FIRST_DIV_START - 1\n\t\t\telse:\n\t\t\t\tmax_rating = min(FIRST_DIV_START - 1, max_rating)\n\t\t\tif min_rating is not None and min_rating > max_rating:\n\t\t\t\treturn \"Impossible\"\n\n\t\t\tmax_rating += c\n\t\t\tif min_rating is not None:\n\t\t\t\tmin_rating += c\n\t\telse:\n\t\t\tif min_rating is None:\n\t\t\t\tmin_rating = FIRST_DIV_START\n\t\t\telse:\n\t\t\t\tmin_rating = max(min_rating, FIRST_DIV_START)\n\t\t\tif max_rating is not None and min_rating > max_rating:\n\t\t\t\treturn \"Impossible\"\n\n\t\t\tmin_rating += c\n\t\t\tif max_rating is not None:\n\t\t\t\tmax_rating += c\n\t\t# print(\"min: {}, max: {}\".format(min_rating, max_rating))\n\n\tif max_rating is None:\n\t\treturn \"Infinity\"\n\treturn max_rating\n\ndef __starting_point():\n\tprint(solve())\n\n__starting_point()\n", "'''\nCreated on 30 dec. 2016\n\n@author: Moldovan\n'''\n\nn = int(input())\n\nfor i in range(n):\n\tchange, division = input().split()\n\tchange = int(change)\n\tdivision = int(division)\n\tif i == 0:\n\t\tif division == 1:\n\t\t\tmaxx = 10 ** 15\n\t\t\tminn = 1900\n\t\telse:\n\t\t\tmaxx = 1899\n\t\t\tminn = -(10**10)\n\tif division == 1:\n\t\tif maxx < 1900:\n\t\t\tprint(\"Impossible\")\n\t\t\treturn\n\t\tminn = max(minn, 1900)\n\t\tminn = minn + change\n\t\tmaxx = maxx + change\n\telse:#div 2\n\t\tif minn >=1900:\n\t\t\tprint(\"Impossible\")\n\t\t\treturn\n\t\tmaxx = min(maxx, 1899)\n\t\tminn = minn + change\n\t\tmaxx = maxx +change\nif maxx > 10**10:\n\tprint(\"Infinity\")\nelse:\n\tprint(maxx)\n\t\t\t\n", "n = int(input())\nup = 0\nwasup = 0\ndown = 0\nwasdown = 0\nfor i in range(n):\n\tc, d = [int(i) for i in input().split()]\n\tif d == 1:\n\t\tif not wasdown:\n\t\t\tdown = 1900\n\t\t\twasdown = 1\n\t\tdown = max(down, 1900)\n\t\tdown+=c\n\t\tif wasup:\n\t\t\tup+=c\n\n\tif d == 2:\n\t\tif not wasup:\n\t\t\tup = 1899\n\t\t\twasup = 1\n\t\tup = min(up, 1899)\n\t\tup+=c\n\t\tif wasdown:\n\t\t\tdown+=c\n\tif wasup and wasdown:\n\t\tif up<down:\n\t\t\tprint(\"Impossible\")\n\t\t\tbreak\nelse:\n\tif wasup:\n\t\tprint(up)\n\telse:\n\t\tprint(\"Infinity\")\n", "from collections import defaultdict\nimport sys, os, math\n\ndef __starting_point():\n\t#n, m = list(map(int, input().split()))\n\tn = int(input())\n\tl, r = -200000000, 200000000 #>=, <\n\ttemp = 0\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tif b == 1:\n\t\t\tl = max(1900 - temp, l)\n\t\telse:\n\t\t\tr = min(1900 - temp, r)\n\t\ttemp += a\n\tif r == 200000000:\n\t\tprint('Infinity')\n\telif l >= r:\n\t\tprint('Impossible')\n\telse:\n\t\tprint(temp + r - 1)\n__starting_point()\n", "n = int(input())\nc, div = map(int, input().split())\nif (div == 1):\n\tx = None\n\ty = 1900\nelse:\n\tx = 1899\n\ty = None\nproof = True\nfor i in range (n - 1):\n\tif (x != None):\n\t\tx += c\n\tif (y != None):\n\t\ty += c\n\tc, div = map(int, input().split())\n\tif (div == 1):\n\t\tif (x != None) and (x < 1900):\n\t\t\tproof = False\n\t\telse:\n\t\t\tif (y == None):\n\t\t\t\ty = 1900\n\t\t\telse:\n\t\t\t\ty = max(y, 1900)\n\telse:\n\t\tif (y != None) and (y > 1899):\n\t\t\tproof = False\n\t\telse:\n\t\t\tif (x == None):\n\t\t\t\tx = 1899\n\t\t\telse:\n\t\t\t\tx = min(x, 1899)\nif (proof):\n\tif (x == None):\n\t\tprint(\"Infinity\")\n\telse:\n\t\tprint(x + c)\nelse:\n\tprint(\"Impossible\")\n", "import sys\n\ndef change_rating(div,change):\n\tif div == 1:\n\t\tranged[0] = max(ranged[0],1900)\n\telse:\n\t\tranged[1] = min(ranged[1],1899)\n\tif ranged[0] > ranged[1]:\n\t\treturn False\n\tranged[0] += change\n\tranged[1] += change\n\treturn True\n\ndef get_max_cur(start):\n\tt = start\n\tm = start\n\tfor change in reversed(changes):\n\t\tm = max(m, start - change)\n\t\tstart -= change\n\tif m >= inf:\n\t\treturn m\n\treturn t\nn = int(input())\ninf = sys.maxsize * 2000\nranged = [-inf,inf]\nchanges = []\nfor _ in range(n):\n\tchnage, div = list(map(int,input().split()))\n\tif not change_rating(div,chnage):\n\t\tprint('Impossible')\n\t\treturn\n\tchanges.append(chnage)\nmax_r = get_max_cur(ranged[1])\nif max_r >= inf:\n\tprint('Infinity')\nelse:\n\tprint(max_r)\n\n", "# Author: Maharshi Gor\nimport sys\n\nsys.setrecursionlimit(5000000)\n\n\ndef read(type=int):\n\treturn type(input())\n\n\ndef read_arr(type=int):\n\treturn [type(token) for token in input().split()]\n\n\ndef abs(num):\n\treturn num if num > 0 else -num\n\n\ninf = 10 ** 9\n\nc = 1899\n\nu, l = inf, -inf\ndiff = 0\nn = read()\nA = []\nfor i in range(n):\n\tr, d = read_arr()\n\tA.append((r, d))\n\ne = False\nfor r, d in A:\n\tif d == 1:\n\t\tl = max(l, 1900 - diff)\n\telse:\n\t\tu = min(u, 1899 - diff)\n\t# print(diff, d, l, u)\n\tdiff += r\n\tif u < l:\n\t\te = True\n\t\tbreak\n\n\nif e or l > u:\n\tprint(\"Impossible\")\nelif u == inf:\n\tprint(\"Infinity\")\nelse:\n\tprint(u + diff)\n", "n = int(input())\nc, d = list(map(int, input().split()))\nmin_ = 0\nmax_ = 0\nflag = True\nif d == 1:\n\tmin_ = 1900\n\tmax_ = float(\"+Inf\")\nelse:\n\tmin_ = float(\"-Inf\")\n\tmax_ = 1899\nfor i in range(n - 1):\n\tc1, d = list(map(int, input().split()))\n\tif d == 1:\n\t\tmin_ = max(min_ + c, 1900)\n\t\tmax_ += c\n\telse:\n\t\tmax_ = min(max_ + c, 1899)\n\t\tmin_ += c\n\tif min_ > max_:\n\t\tflag = False\n\tc = c1\nmin_ += c\nmax_ += c\nif not(flag):\n\tprint(\"Impossible\")\nelif max_ == float(\"+Inf\"):\n\tprint(\"Infinity\")\nelse:\n\tprint(max_)\n", "n = int(input())\n\n# Init\n\nloi = []\n\ninfinity  = False\nimpossible = False\n\nfor i in range(n):\n\tloi.append(list(map(int, input().split(\" \"))))\n\n\nif loi[0][1] == 1:\n\t\tupper_bound = 99999999999999999\n\t\tlower_bound = 1900\n\t\tlast_div = 1\nif loi[0][1] == 2:\n\t\tupper_bound = 1899\n\t\tlower_bound = -99999999999999999\n\t\tlast_div = 2\n\n\n# Loop\n\nfor (c,d) in loi:\n\t\tif d == 2 and lower_bound > 1899:\n\t\t\t\timpossible = True\n\t\tif d == 1 and upper_bound < 1900:\n\t\t\t\timpossible = True\n\t\t# print(\"-----\")\n\t\t# print(lower_bound, upper_bound)\n\n\t\tif d == 1:\n\t\t\t\tlower_bound = max(lower_bound, 1900)\n\t\tif d == 2:\n\t\t\t\tupper_bound = min(upper_bound, 1899)\n\t\t# print(lower_bound, upper_bound)\n\n\t\t# if last_div == d:\n\t\tupper_bound += c\n\t\tlower_bound += c\n\n\t\t# if last_div ==1 and d == 2:\n\t\t#     upper_bound = min(1899, upper_bound+c)\n\t\t#     lower_bound = lower_bound+c\n\t\t# if last_div ==2 and d == 1:\n\t\t#     upper_bound = upper_bound + c\n\t\t#     lower_bound = max(1900,lower_bound+c)\n\n\t\tif lower_bound > upper_bound:\n\t\t\t\timpossible = True\n\n\t\t# print(lower_bound, upper_bound)\n\t\tlast_div = d\n\n\nif impossible:\n\t\tprint(\"Impossible\")\nelif upper_bound>10000000000000000:\n\t\tprint(\"Infinity\")\nelse:\n\t\tprint(upper_bound)\n", "n = int(input())\n\nratings = []\ndivs = []\n\nfor i in range(n):\n\ta, b = map(int, input().split())\n\tratings.append(a)\n\tdivs.append(b)\n\ncurmax = float('inf')\ncurmin = float('-inf')\n\nif n == 1:\n\tif divs[0] == 1:\n\t\tprint('Infinity')\n\telse:\n\t\tprint(1899 + ratings[0])\nelse:\n\tfor k in range(n - 1):\n\t\tst = divs[k]\n\t\tfin = divs[k + 1]\n\t\tchange = ratings[k]\n\n\t\tif st == 1 and fin == 2:\n\t\t\tif change >= 0:\n\t\t\t\tprint('Impossible')\n\t\t\t\tbreak\n\t\t\tcurmax = min(curmax + change, 1899)\n\t\t\tcurmin = max(curmin + change, 1900 + change)\n\t\telif st == 2 and fin == 2:\n\t\t\tcurmax = min(curmax + change, 1899, 1899 + change)\n\t\t\tcurmin += change\n\t\telif st == 1 and fin == 1:\n\t\t\tcurmin = max(curmin + change, 1900, 1900 + change)\n\t\t\tcurmax += change\n\t\telif st == 2 and fin == 1:\n\t\t\tif change <= 0:\n\t\t\t\tprint('Impossible')\n\t\t\t\tbreak\n\t\t\tcurmax = min(curmax + change, 1899 + change)\n\t\t\tcurmin = max(curmin + change, 1900)\n\telse:\n\t\tif curmax == float('inf'):\n\t\t\tprint('Infinity')\n\t\telif curmin > curmax:\n\t\t\tprint('Impossible')\n\t\telse:\n\t\t\tprint(curmax + ratings[-1])\n", "import math\n\nn = int(input())\nc, d = [], []\nno = False\nfor _ in range(0, n):\n\tstring = list(map(int, input().split()))\n\tc.append(string[0])\n\td.append(string[1])\nif all([x == 1 for x in d]):\n\tprint('Infinity')\nelif n == 1:\n\tprint(1899+c[0]) # !!!\nelse:\n\tif d[0] == 1:\n\t\tx = (1900, math.inf)\n\telse:\n\t\tx = (-math.inf, 1899)\n\tdiv = d[0]\n\tfor i in range(0, n-1):\n\t\tx_next = x\n\t\tif d[i] == 1 and d[i+1] == 2:\n\t\t\tx_next = x[0]+c[i], min(1899, x[1]+c[i])\n\t\telif d[i] == 2 and d[i+1] == 1:\n\t\t\tx_next = max(1900, x[0]+c[i]), x[1]+c[i]\n\t\telse:\n\t\t\tx_next = max(x[0] + c[i], 1900) if d[i+1] == 1 else x[0] + c[i], min(x[1] + c[i], 1899) if d[i+1] == 2 else x[1] + c[i]\n\t\tif (x_next[0] > x_next[1]):\n\t\t\tno = True\n\t\t\tbreak\n\t\telse:\n\t\t\tx = x_next\n\n\tprint('Impossible' if no else x[1] + c[-1])\n"], "id": "id8700"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8700", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["every", 2], ["codeforces", 2], ["user", 2], ["has", 2], ["rating", 2], ["described", 2], ["with", 2], ["one", 2], ["integer", 2], ["possibly", 2], ["negative", 2], ["or", 2], ["zero", 2], ["users", 2], ["are", 2], ["divided", 2], ["into", 2], ["two", 2], ["divisions", 2], ["the", 2], ["first", 2], ["division", 2], ["is", 2], ["for", 2], ["users", 2], ["with", 2], ["rating", 2], ["1900", 2], ["or", 2], ["higher", 2], ["those", 2], ["with", 2], ["rating", 2], ["1899", 2], ["or", 2], ["lower", 2], ["belong", 2], ["to", 2], ["the", 2], ["second", 2], ["division", 2], ["in", 2], ["every", 2], ["contest", 2], ["according", 2], ["to", 2], ["one", 2], ["s", 2], ["performance", 2], ["his", 2], ["or", 2], ["her", 2], ["rating", 2], ["changes", 2], ["by", 2], ["some", 2], ["value", 2], ["possibly", 2], ["negative", 2], ["or", 2], ["zero", 2], ["limak", 2], ["competed", 2], ["in", 2], ["n", 2], ["contests", 2], ["in", 2], ["the", 2], ["year", 2], ["2016", 2], ["he", 2], ["remembers", 0], ["that", 0], ["in", 0], ["the", 0], ["i", 0], ["th", 0], ["contest", 0], ["he", 0], ["competed", 0], ["in", 0], ["the", 0], ["division", 0], ["d", 0], ["i", 0], ["i", 2], ["e", 2], ["he", 2], ["belonged", 2], ["to", 2], ["this", 2], ["division", 2], ["just", 0], ["before", 0], ["the", 0], ["start", 0], ["of", 0], ["this", 0], ["contest", 0], ["and", 0], ["his", 0], ["rating", 0], ["changed", 0], ["by", 0], ["c", 0], ["i", 0], ["just", 0], ["after", 0], ["the", 0], ["contest", 0], ["note", 0], ["that", 0], ["negative", 0], ["c", 0], ["i", 0], ["denotes", 2], ["the", 2], ["loss", 2], ["of", 2], ["rating", 2], ["what", 2], ["is", 2], ["the", 2], ["maximum", 2], ["possible", 2], ["rating", 2], ["limak", 2], ["can", 2], ["have", 2], ["right", 2], ["now", 2], ["after", 2], ["all", 2], ["n", 2], ["contests", 2], ["if", 2], ["his", 2], ["rating", 2], ["may", 2], ["be", 2], ["arbitrarily", 2], ["big", 2], ["print", 2], ["infinity", 0], ["if", 0], ["there", 0], ["is", 0], ["no", 0], ["scenario", 0], ["matching", 0], ["the", 0], ["given", 0], ["information", 0], ["print", 0], ["impossible", 0], ["input", 2], ["the", 30], ["first", 31], ["line", 33], ["of", 3], ["the", 3], ["input", 2], ["contains", 2], ["a", 2], ["single", 2], ["integer", 2], ["n", 2], ["1", 2], ["≤", 2], ["n", 2], ["≤", 2], ["200", 0], ["000", 0], ["the", 0], ["i", 0], ["th", 0], ["of", 0], ["next", 0], ["n", 0], ["lines", 0], ["contains", 0], ["two", 0], ["integers", 0], ["c", 0], ["i", 0], ["and", 0], ["d", 0], ["i", 0], ["100", 0], ["≤", 0], ["c", 0], ["i", 0], ["≤", 0], ["100", 0], ["1", 0], ["≤", 0], ["d", 0], ["i", 0], ["≤", 2], ["2", 2], ["describing", 2], ["limak", 2], ["s", 2], ["rating", 2], ["change", 2], ["after", 2], ["the", 2], ["i", 0], ["th", 0], ["contest", 0], ["and", 0], ["his", 0], ["division", 0], ["during", 0], ["the", 0], ["i", 0], ["th", 0], ["contest", 0], ["contest", 0], ["output", 0], ["if", 2], ["limak", 2], ["s", 2], ["current", 2], ["rating", 2], ["can", 2], ["be", 2], ["arbitrarily", 2], ["big", 2], ["print", 2], ["infinity", 2], ["without", 2], ["quotes", 2], ["if", 2], ["the", 2], ["situation", 2], ["is", 2], ["impossible", 2], ["print", 2], ["impossible", 2], ["without", 2], ["quotes", 2], ["otherwise", 2], ["print", 2], ["one", 2], ["integer", 2], ["denoting", 2], ["the", 2], ["maximum", 2], ["possible", 2], ["value", 2], ["of", 0], ["limak", 0], ["s", 0], ["current", 0], ["rating", 0], ["i", 0], ["e", 0], ["rating", 0], ["after", 0], ["the", 0], ["n", 0], ["contests", 0], ["examples", 0], ["input", 0], ["3", 0], ["7", 0], ["1", 0], ["5", 0], ["2", 0], ["8", 0], ["2", 0], ["output", 0], ["1907", 0], ["input", 0], ["2", 0], ["57", 0], ["1", 0], ["22", 0], ["2", 0], ["output", 0], ["impossible", 0], ["input", 0], ["1", 0], ["5", 0], ["1", 0], ["output", 0], ["infinity", 0], ["input", 0], ["4", 0], ["27", 0], ["2", 0], ["13", 0], ["1", 0], ["50", 0], ["1", 0], ["8", 0], ["2", 0], ["output", 0], ["1897", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["sample", 1], ["the", 1], ["following", 1], ["scenario", 1], ["matches", 1], ["all", 1], ["information", 1], ["limak", 1], ["remembers", 1], ["and", 1], ["has", 1], ["maximum", 1], ["possible", 1], ["final", 1], ["rating", 1], ["limak", 3], ["has", 3], ["rating", 3], ["1901", 3], ["and", 3], ["belongs", 3], ["to", 3], ["the", 3], ["division", 3], ["1", 3], ["in", 3], ["the", 3], ["first", 3], ["contest", 3], ["his", 3], ["rating", 3], ["decreases", 3], ["by", 3], ["7", 3], ["with", 3], ["rating", 3], ["1894", 3], ["limak", 3], ["is", 3], ["in", 3], ["the", 3], ["division", 3], ["2", 3], ["his", 3], ["rating", 3], ["increases", 3], ["by", 3], ["5", 3], ["limak", 3], ["has", 3], ["rating", 3], ["1899", 3], ["and", 3], ["is", 3], ["still", 3], ["in", 3], ["the", 3], ["division", 3], ["2", 3], ["in", 3], ["the", 3], ["last", 3], ["contest", 3], ["of", 3], ["the", 3], ["year", 3], ["he", 3], ["gets", 3], ["8", 3], ["and", 3], ["ends", 3], ["the", 3], ["year", 3], ["with", 3], ["rating", 3], ["1907", 3], ["in", 3], ["the", 3], ["second", 3], ["sample", 3], ["it", 3], ["s", 3], ["impossible", 3], ["that", 3], ["limak", 3], ["is", 3], ["in", 3], ["the", 3], ["division", 3], ["1", 3], ["his", 3], ["rating", 3], ["increases", 3], ["by", 3], ["57", 3], ["and", 3], ["after", 0], ["that", 0], ["limak", 0], ["is", 0], ["in", 0], ["the", 0], ["division", 0], ["2", 0], ["in", 0], ["the", 0], ["second", 0], ["contest", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.635036496350365, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3023419977976126, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8156028368794326, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5390070921985816, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6277372262773723, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3021086780210859, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8156028368794326, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5390070921985816, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["codeforces", 0], ["good", 0], ["bye", 0], ["2016", 0], ["contest", 0], ["problem", 0], ["c", 0], ["author", 0], ["chaotic", 0], ["iak", 0], ["language", 0], ["python", 0], ["3", 0], ["5", 0], ["2", 0], ["solution", 0], ["def", 0], ["main", 0], ["n", 0], ["read", 0], ["mn", 0], ["mx", 0], ["10", 0], ["18", 0], ["10", 0], ["18", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["d", 0], ["read", 0], ["if", 0], ["d", 0], ["1", 0], ["mn", 0], ["max", 0], ["mn", 0], ["1900", 0], ["elif", 0], ["d", 0], ["2", 0], ["mx", 0], ["min", 0], ["mx", 0], ["1899", 0], ["mn", 0], ["c", 0], ["mx", 0], ["c", 0], ["if", 0], ["mn", 0], ["mx", 0], ["print", 0], ["impossible", 0], ["return", 0], ["if", 0], ["mx", 0], ["10", 0], ["17", 0], ["print", 0], ["infinity", 0], ["return", 0], ["print", 0], ["mx", 0], ["helpers", 0], ["def", 0], ["read", 0], ["callback", 0], ["int", 0], ["return", 0], ["list", 0], ["map", 0], ["callback", 0], ["input", 0], ["strip", 0], ["split", 0], ["def", 0], ["write", 0], ["value", 0], ["end", 0], ["n", 0], ["if", 0], ["value", 0], ["is", 0], ["none", 0], ["return", 0], ["try", 0], ["value", 0], ["join", 0], ["map", 0], ["str", 0], ["value", 0], ["except", 0], ["pass", 0], ["print", 0], ["value", 0], ["end", 0], ["end", 0], ["write", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["mx", 0], ["10", 0], ["9", 0], ["mn", 0], ["mx", 0], ["p", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["d", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["d", 0], ["1", 0], ["mn", 0], ["max", 0], ["mn", 0], ["1900", 0], ["p", 0], ["else", 0], ["mx", 0], ["min", 0], ["mx", 0], ["1899", 0], ["p", 0], ["p", 0], ["c", 0], ["if", 0], ["mx", 0], ["10", 0], ["9", 0], ["print", 0], ["infinity", 0], ["elif", 0], ["mx", 0], ["mn", 0], ["print", 0], ["mx", 0], ["p", 0], ["else", 0], ["print", 0], ["impossible", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["def", 0], ["main", 0], ["try", 0], ["while", 0], ["true", 0], ["n", 0], ["int", 0], ["input", 0], ["c", 0], ["0", 0], ["n", 0], ["d", 0], ["0", 0], ["n", 0], ["has", 0], ["2", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["i", 0], ["d", 0], ["i", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["d", 0], ["i", 0], ["2", 0], ["has", 0], ["2", 0], ["true", 0], ["if", 0], ["not", 0], ["has", 0], ["2", 0], ["print", 0], ["infinity", 0], ["continue", 0], ["minr", 0], ["10", 0], ["9", 0], ["maxr", 0], ["10", 0], ["9", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["d", 0], ["i", 0], ["1", 0], ["minr", 0], ["max", 0], ["minr", 0], ["1900", 0], ["else", 0], ["maxr", 0], ["min", 0], ["maxr", 0], ["1899", 0], ["if", 0], ["minr", 0], ["maxr", 0], ["print", 0], ["impossible", 0], ["break", 0], ["minr", 0], ["c", 0], ["i", 0], ["maxr", 0], ["c", 0], ["i", 0], ["else", 0], ["print", 0], ["maxr", 0], ["except", 0], ["eoferror", 0], ["pass", 0], ["main", 0], ["num", 0], ["contests", 0], ["int", 0], ["input", 0], ["rating", 0], ["0", 0], ["upper", 0], ["bound", 0], ["none", 0], ["lower", 0], ["bound", 0], ["none", 0], ["for", 0], ["contest", 0], ["num", 0], ["in", 0], ["range", 0], ["num", 0], ["contests", 0], ["ci", 0], ["di", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["di", 0], ["1", 0], ["if", 0], ["upper", 0], ["bound", 0], ["is", 0], ["none", 0], ["or", 0], ["rating", 0], ["upper", 0], ["bound", 0], ["upper", 0], ["bound", 0], ["rating", 0], ["else", 0], ["assert", 0], ["di", 0], ["2", 0], ["if", 0], ["lower", 0], ["bound", 0], ["is", 0], ["none", 0], ["or", 0], ["rating", 0], ["lower", 0], ["bound", 0], ["lower", 0], ["bound", 0], ["rating", 0], ["rating", 0], ["ci", 0], ["if", 0], ["lower", 0], ["bound", 0], ["is", 0], ["none", 0], ["print", 0], ["infinity", 0], ["elif", 0], ["upper", 0], ["bound", 0], ["is", 0], ["not", 0], ["none", 0], ["and", 0], ["lower", 0], ["bound", 0], ["upper", 0], ["bound", 0], ["print", 0], ["impossible", 0], ["else", 0], ["print", 0], ["rating", 0], ["lower", 0], ["bound", 0], ["1", 0], ["1900", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["def", 0], ["solve", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["r", 0], ["float", 0], ["inf", 0], ["float", 0], ["inf", 0], ["for", 0], ["line", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["c", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["line", 0], ["split", 0], ["if", 0], ["d", 0], ["1", 0], ["l", 0], ["max", 0], ["1900", 0], ["l", 0], ["else", 0], ["r", 0], ["min", 0], ["1899", 0], ["r", 0], ["l", 0], ["c", 0], ["r", 0], ["c", 0], ["if", 0], ["r", 0], ["l", 0], ["return", 0], ["none", 0], ["else", 0], ["return", 0], ["r", 0], ["res", 0], ["solve", 0], ["if", 0], ["res", 0], ["is", 0], ["none", 0], ["print", 0], ["impossible", 0], ["elif", 0], ["math", 0], ["isinf", 0], ["res", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["inf", 0], ["2", 0], ["60", 0], ["lo", 0], ["hi", 0], ["inf", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["y", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["y", 0], ["2", 0], ["hi", 0], ["min", 0], ["hi", 0], ["1899", 0], ["else", 0], ["lo", 0], ["max", 0], ["lo", 0], ["1900", 0], ["hi", 0], ["x", 0], ["lo", 0], ["x", 0], ["if", 0], ["lo", 0], ["hi", 0], ["print", 0], ["impossible", 0], ["elif", 0], ["hi", 0], ["2", 0], ["31", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["hi", 0], ["max", 0], ["999999999", 0], ["def", 0], ["do", 0], ["n", 0], ["int", 0], ["input", 0], ["mx", 0], ["max", 0], ["mn", 0], ["max", 0], ["change", 0], ["thisdiv", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ratingchange", 0], ["0", 0], ["change", 0], ["divchange", 0], ["0", 0], ["thisdiv", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["change", 0], ["thisdiv", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ratingchange", 0], ["append", 0], ["ratingchange", 0], ["1", 0], ["change", 0], ["divchange", 0], ["append", 0], ["thisdiv", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["divchange", 0], ["i", 0], ["1", 0], ["1", 0], ["mn", 0], ["max", 0], ["1900", 0], ["ratingchange", 0], ["i", 0], ["mn", 0], ["else", 0], ["mx", 0], ["min", 0], ["1899", 0], ["ratingchange", 0], ["i", 0], ["mx", 0], ["print", 0], ["mn", 0], ["mx", 0], ["if", 0], ["mn", 0], ["mx", 0], ["return", 0], ["impossible", 0], ["else", 0], ["if", 0], ["mx", 0], ["max", 0], ["return", 0], ["infinity", 0], ["else", 0], ["return", 0], ["str", 0], ["mx", 0], ["ratingchange", 0], ["1", 0], ["print", 0], ["do", 0], ["n", 0], ["int", 0], ["input", 0], ["minr", 0], ["1000000000000000000", 0], ["maxr", 0], ["1000000000000000000", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["div", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["div", 0], ["1", 0], ["if", 0], ["minr", 0], ["1900", 0], ["minr", 0], ["1900", 0], ["else", 0], ["if", 0], ["maxr", 0], ["1900", 0], ["maxr", 0], ["1899", 0], ["minr", 0], ["c", 0], ["maxr", 0], ["c", 0], ["if", 0], ["minr", 0], ["maxr", 0], ["print", 0], ["impossible", 0], ["elif", 0], ["maxr", 0], ["10000000000", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["maxr", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["0", 0], ["n", 0], ["per", 0], ["0", 0], ["ans1", 0], ["float", 0], ["infinity", 0], ["ans2", 0], ["float", 0], ["infinity", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["per1", 0], ["per2", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["per2", 0], ["1", 0], ["if", 0], ["ans1", 0], ["1900", 0], ["per", 0], ["1", 0], ["break", 0], ["else", 0], ["ans2", 0], ["max", 0], ["ans2", 0], ["1900", 0], ["ans1", 0], ["per1", 0], ["ans2", 0], ["per1", 0], ["else", 0], ["if", 0], ["ans2", 0], ["1900", 0], ["per", 0], ["1", 0], ["break", 0], ["else", 0], ["ans1", 0], ["min", 0], ["ans1", 0], ["1899", 0], ["ans1", 0], ["per1", 0], ["ans2", 0], ["per1", 0], ["if", 0], ["ans1", 0], ["ans2", 0], ["per", 0], ["1", 0], ["break", 0], ["if", 0], ["per", 0], ["0", 0], ["if", 0], ["ans1", 0], ["float", 0], ["infinity", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["ans1", 0], ["else", 0], ["print", 0], ["impossible", 0], ["from", 0], ["math", 0], ["import", 0], ["inf", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["inf", 0], ["r", 0], ["inf", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["d", 0], ["1", 0], ["l", 0], ["max", 0], ["1900", 0], ["l", 0], ["else", 0], ["r", 0], ["min", 0], ["1899", 0], ["r", 0], ["if", 0], ["l", 0], ["r", 0], ["print", 0], ["impossible", 0], ["return", 0], ["l", 0], ["c", 0], ["r", 0], ["c", 0], ["if", 0], ["r", 0], ["inf", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["r", 0], ["main", 0], ["q", 0], ["int", 0], ["input", 0], ["q", 0], ["1", 0], ["a", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["s", 0], ["1", 0], ["z", 0], ["1900", 0], ["x", 0], ["9000000000", 0], ["else", 0], ["z", 0], ["9000000000", 0], ["x", 0], ["1899", 0], ["z", 0], ["a", 0], ["x", 0], ["a", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["q", 0], ["a", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["s", 0], ["1", 0], ["z", 0], ["max", 0], ["1900", 0], ["z", 0], ["else", 0], ["x", 0], ["min", 0], ["1899", 0], ["x", 0], ["z", 0], ["a", 0], ["x", 0], ["a", 0], ["if", 0], ["x", 0], ["z", 0], ["print", 0], ["impossible", 0], ["elif", 0], ["x", 0], ["7000000000", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["x", 0], ["from", 0], ["sys", 0], ["import", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["inf", 0], ["100000000000000000000000", 0], ["max", 0], ["2", 0], ["inf", 0], ["min", 0], ["max", 0], ["possible", 0], ["true", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["d", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["c", 0], ["int", 0], ["c", 0], ["d", 0], ["int", 0], ["d", 0], ["if", 0], ["d", 0], ["is", 0], ["1", 0], ["min", 0], ["max", 0], ["min", 0], ["1900", 0], ["if", 0], ["d", 0], ["is", 0], ["2", 0], ["max", 0], ["min", 0], ["max", 0], ["1899", 0], ["if", 0], ["min", 0], ["max", 0], ["possible", 0], ["false", 0], ["min", 0], ["c", 0], ["max", 0], ["c", 0], ["if", 0], ["not", 0], ["possible", 0], ["print", 0], ["impossible", 0], ["else", 0], ["if", 0], ["max", 0], ["inf", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["max", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["first", 0], ["div", 0], ["start", 0], ["1900", 0], ["def", 0], ["solve", 0], ["n", 0], ["int", 0], ["input", 0], ["min", 0], ["rating", 0], ["none", 0], ["max", 0], ["rating", 0], ["none", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["was", 0], ["div", 0], ["took", 0], ["rating", 0], ["format", 0], ["d", 0], ["c", 0], ["if", 0], ["d", 0], ["2", 0], ["if", 0], ["max", 0], ["rating", 0], ["is", 0], ["none", 0], ["max", 0], ["rating", 0], ["first", 0], ["div", 0], ["start", 0], ["1", 0], ["else", 0], ["max", 0], ["rating", 0], ["min", 0], ["first", 0], ["div", 0], ["start", 0], ["1", 0], ["max", 0], ["rating", 0], ["if", 0], ["min", 0], ["rating", 0], ["is", 0], ["not", 0], ["none", 0], ["and", 0], ["min", 0], ["rating", 0], ["max", 0], ["rating", 0], ["return", 0], ["impossible", 0], ["max", 0], ["rating", 0], ["c", 0], ["if", 0], ["min", 0], ["rating", 0], ["is", 0], ["not", 0], ["none", 0], ["min", 0], ["rating", 0], ["c", 0], ["else", 0], ["if", 0], ["min", 0], ["rating", 0], ["is", 0], ["none", 0], ["min", 0], ["rating", 0], ["first", 0], ["div", 0], ["start", 0], ["else", 0], ["min", 0], ["rating", 0], ["max", 0], ["min", 0], ["rating", 0], ["first", 0], ["div", 0], ["start", 0], ["if", 0], ["max", 0], ["rating", 0], ["is", 0], ["not", 0], ["none", 0], ["and", 0], ["min", 0], ["rating", 0], ["max", 0], ["rating", 0], ["return", 0], ["impossible", 0], ["min", 0], ["rating", 0], ["c", 0], ["if", 0], ["max", 0], ["rating", 0], ["is", 0], ["not", 0], ["none", 0], ["max", 0], ["rating", 0], ["c", 0], ["print", 0], ["min", 0], ["max", 0], ["format", 0], ["min", 0], ["rating", 0], ["max", 0], ["rating", 0], ["if", 0], ["max", 0], ["rating", 0], ["is", 0], ["none", 0], ["return", 0], ["infinity", 0], ["return", 0], ["max", 0], ["rating", 0], ["def", 0], ["starting", 0], ["point", 0], ["print", 0], ["solve", 0], ["starting", 0], ["point", 0], ["created", 0], ["on", 0], ["30", 0], ["dec", 0], ["2016", 0], ["author", 0], ["moldovan", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["change", 0], ["division", 0], ["input", 0], ["split", 0], ["change", 0], ["int", 0], ["change", 0], ["division", 0], ["int", 0], ["division", 0], ["if", 0], ["i", 0], ["0", 0], ["if", 0], ["division", 0], ["1", 0], ["maxx", 0], ["10", 0], ["15", 0], ["minn", 0], ["1900", 0], ["else", 0], ["maxx", 0], ["1899", 0], ["minn", 0], ["10", 0], ["10", 0], ["if", 0], ["division", 0], ["1", 0], ["if", 0], ["maxx", 0], ["1900", 0], ["print", 0], ["impossible", 0], ["return", 0], ["minn", 0], ["max", 0], ["minn", 0], ["1900", 0], ["minn", 0], ["minn", 0], ["change", 0], ["maxx", 0], ["maxx", 0], ["change", 0], ["else", 0], ["div", 0], ["2", 0], ["if", 0], ["minn", 0], ["1900", 0], ["print", 0], ["impossible", 0], ["return", 0], ["maxx", 0], ["min", 0], ["maxx", 0], ["1899", 0], ["minn", 0], ["minn", 0], ["change", 0], ["maxx", 0], ["maxx", 0], ["change", 0], ["if", 0], ["maxx", 0], ["10", 0], ["10", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["maxx", 0], ["n", 0], ["int", 0], ["input", 0], ["up", 0], ["0", 0], ["wasup", 0], ["0", 0], ["down", 0], ["0", 0], ["wasdown", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["c", 0], ["d", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["d", 0], ["1", 0], ["if", 0], ["not", 0], ["wasdown", 0], ["down", 0], ["1900", 0], ["wasdown", 0], ["1", 0], ["down", 0], ["max", 0], ["down", 0], ["1900", 0], ["down", 0], ["c", 0], ["if", 0], ["wasup", 0], ["up", 0], ["c", 0], ["if", 0], ["d", 0], ["2", 0], ["if", 0], ["not", 0], ["wasup", 0], ["up", 0], ["1899", 0], ["wasup", 0], ["1", 0], ["up", 0], ["min", 0], ["up", 0], ["1899", 0], ["up", 0], ["c", 0], ["if", 0], ["wasdown", 0], ["down", 0], ["c", 0], ["if", 0], ["wasup", 0], ["and", 0], ["wasdown", 0], ["if", 0], ["up", 0], ["down", 0], ["print", 0], ["impossible", 0], ["break", 0], ["else", 0], ["if", 0], ["wasup", 0], ["print", 0], ["up", 0], ["else", 0], ["print", 0], ["infinity", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["import", 0], ["sys", 0], ["os", 0], ["math", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["r", 0], ["200000000", 0], ["200000000", 0], ["temp", 0], ["0", 0], ["for", 1], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["b", 0], ["1", 0], ["l", 0], ["max", 0], ["1900", 0], ["temp", 0], ["l", 0], ["else", 0], ["r", 0], ["min", 0], ["1900", 0], ["temp", 0], ["r", 0], ["temp", 0], ["a", 0], ["if", 0], ["r", 0], ["200000000", 0], ["print", 0], ["infinity", 0], ["elif", 0], ["l", 0], ["r", 0], ["print", 0], ["impossible", 0], ["else", 0], ["print", 0], ["temp", 0], ["r", 0], ["1", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["c", 0], ["div", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["div", 0], ["1", 0], ["x", 0], ["none", 0], ["y", 0], ["1900", 0], ["else", 0], ["x", 0], ["1899", 0], ["y", 0], ["none", 0], ["proof", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["x", 0], ["none", 0], ["x", 0], ["c", 0], ["if", 0], ["y", 0], ["none", 0], ["y", 0], ["c", 0], ["c", 0], ["div", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["div", 0], ["1", 0], ["if", 0], ["x", 0], ["none", 0], ["and", 0], ["x", 0], ["1900", 0], ["proof", 0], ["false", 0], ["else", 0], ["if", 0], ["y", 0], ["none", 0], ["y", 0], ["1900", 0], ["else", 0], ["y", 0], ["max", 0], ["y", 0], ["1900", 0], ["else", 0], ["if", 0], ["y", 0], ["none", 0], ["and", 0], ["y", 0], ["1899", 0], ["proof", 0], ["false", 0], ["else", 0], ["if", 0], ["x", 0], ["none", 0], ["x", 0], ["1899", 0], ["else", 0], ["x", 0], ["min", 0], ["x", 0], ["1899", 0], ["if", 0], ["proof", 0], ["if", 0], ["x", 0], ["none", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["x", 0], ["c", 0], ["else", 0], ["print", 0], ["impossible", 0], ["import", 0], ["sys", 0], ["def", 0], ["change", 0], ["rating", 0], ["div", 0], ["change", 0], ["if", 0], ["div", 0], ["1", 0], ["ranged", 0], ["0", 0], ["max", 0], ["ranged", 0], ["0", 0], ["1900", 0], ["else", 0], ["ranged", 0], ["1", 0], ["min", 0], ["ranged", 0], ["1", 0], ["1899", 0], ["if", 0], ["ranged", 0], ["0", 0], ["ranged", 0], ["1", 0], ["return", 0], ["false", 0], ["ranged", 0], ["0", 0], ["change", 0], ["ranged", 0], ["1", 0], ["change", 0], ["return", 0], ["true", 0], ["def", 0], ["get", 0], ["max", 0], ["cur", 0], ["start", 0], ["t", 0], ["start", 0], ["m", 0], ["start", 0], ["for", 0], ["change", 0], ["in", 0], ["reversed", 0], ["changes", 0], ["m", 0], ["max", 0], ["m", 0], ["start", 0], ["change", 0], ["start", 0], ["change", 0], ["if", 0], ["m", 0], ["inf", 0], ["return", 0], ["m", 0], ["return", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["inf", 0], ["sys", 0], ["maxsize", 0], ["2000", 0], ["ranged", 0], ["inf", 0], ["inf", 0], ["changes", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["chnage", 0], ["div", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["not", 0], ["change", 0], ["rating", 0], ["div", 0], ["chnage", 0], ["print", 0], ["impossible", 0], ["return", 0], ["changes", 0], ["append", 0], ["chnage", 0], ["max", 0], ["r", 0], ["get", 0], ["max", 0], ["cur", 0], ["ranged", 0], ["1", 0], ["if", 0], ["max", 0], ["r", 0], ["inf", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["max", 0], ["r", 0], ["author", 0], ["maharshi", 0], ["gor", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["5000000", 0], ["def", 0], ["read", 0], ["type", 0], ["int", 0], ["return", 0], ["type", 0], ["input", 0], ["def", 0], ["read", 0], ["arr", 0], ["type", 0], ["int", 0], ["return", 0], ["type", 0], ["token", 0], ["for", 0], ["token", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["abs", 0], ["num", 0], ["return", 0], ["num", 0], ["if", 0], ["num", 0], ["0", 0], ["else", 0], ["num", 0], ["inf", 0], ["10", 0], ["9", 0], ["c", 0], ["1899", 0], ["u", 0], ["l", 0], ["inf", 0], ["inf", 0], ["diff", 0], ["0", 0], ["n", 0], ["read", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["r", 0], ["d", 0], ["read", 0], ["arr", 0], ["a", 0], ["append", 0], ["r", 0], ["d", 0], ["e", 0], ["false", 0], ["for", 0], ["r", 0], ["d", 0], ["in", 0], ["a", 0], ["if", 0], ["d", 0], ["1", 0], ["l", 0], ["max", 0], ["l", 0], ["1900", 0], ["diff", 0], ["else", 0], ["u", 0], ["min", 0], ["u", 0], ["1899", 0], ["diff", 0], ["print", 0], ["diff", 0], ["d", 0], ["l", 0], ["u", 0], ["diff", 0], ["r", 0], ["if", 0], ["u", 0], ["l", 0], ["e", 0], ["true", 0], ["break", 0], ["if", 0], ["e", 0], ["or", 0], ["l", 0], ["u", 0], ["print", 0], ["impossible", 0], ["elif", 0], ["u", 0], ["inf", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["u", 0], ["diff", 0], ["n", 0], ["int", 0], ["input", 0], ["c", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["min", 0], ["0", 0], ["max", 0], ["0", 0], ["flag", 0], ["true", 0], ["if", 0], ["d", 0], ["1", 0], ["min", 0], ["1900", 0], ["max", 0], ["float", 0], ["inf", 0], ["else", 0], ["min", 0], ["float", 0], ["inf", 0], ["max", 0], ["1899", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["c1", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["d", 0], ["1", 0], ["min", 0], ["max", 0], ["min", 0], ["c", 0], ["1900", 0], ["max", 0], ["c", 0], ["else", 0], ["max", 0], ["min", 0], ["max", 0], ["c", 0], ["1899", 0], ["min", 0], ["c", 0], ["if", 0], ["min", 0], ["max", 0], ["flag", 0], ["false", 0], ["c", 0], ["c1", 0], ["min", 0], ["c", 0], ["max", 0], ["c", 0], ["if", 0], ["not", 0], ["flag", 0], ["print", 0], ["impossible", 0], ["elif", 0], ["max", 0], ["float", 0], ["inf", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["max", 0], ["n", 0], ["int", 0], ["input", 0], ["init", 0], ["loi", 0], ["infinity", 0], ["false", 0], ["impossible", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["loi", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["loi", 0], ["0", 0], ["1", 0], ["1", 0], ["upper", 0], ["bound", 0], ["99999999999999999", 0], ["lower", 0], ["bound", 0], ["1900", 0], ["last", 0], ["div", 0], ["1", 0], ["if", 0], ["loi", 0], ["0", 0], ["1", 0], ["2", 0], ["upper", 0], ["bound", 0], ["1899", 0], ["lower", 0], ["bound", 0], ["99999999999999999", 0], ["last", 0], ["div", 0], ["2", 0], ["loop", 0], ["for", 0], ["c", 0], ["d", 0], ["in", 0], ["loi", 0], ["if", 0], ["d", 0], ["2", 0], ["and", 0], ["lower", 0], ["bound", 0], ["1899", 0], ["impossible", 0], ["true", 0], ["if", 0], ["d", 0], ["1", 0], ["and", 0], ["upper", 0], ["bound", 0], ["1900", 0], ["impossible", 0], ["true", 0], ["print", 0], ["print", 0], ["lower", 0], ["bound", 0], ["upper", 0], ["bound", 0], ["if", 0], ["d", 0], ["1", 0], ["lower", 0], ["bound", 0], ["max", 0], ["lower", 0], ["bound", 0], ["1900", 0], ["if", 0], ["d", 0], ["2", 0], ["upper", 0], ["bound", 0], ["min", 0], ["upper", 0], ["bound", 0], ["1899", 0], ["print", 0], ["lower", 0], ["bound", 0], ["upper", 0], ["bound", 0], ["if", 0], ["last", 0], ["div", 0], ["d", 0], ["upper", 0], ["bound", 0], ["c", 0], ["lower", 0], ["bound", 0], ["c", 0], ["if", 0], ["last", 0], ["div", 0], ["1", 0], ["and", 0], ["d", 0], ["2", 0], ["upper", 0], ["bound", 0], ["min", 0], ["1899", 0], ["upper", 0], ["bound", 0], ["c", 0], ["lower", 0], ["bound", 0], ["lower", 0], ["bound", 0], ["c", 0], ["if", 0], ["last", 0], ["div", 0], ["2", 0], ["and", 0], ["d", 0], ["1", 0], ["upper", 0], ["bound", 0], ["upper", 0], ["bound", 0], ["c", 0], ["lower", 0], ["bound", 0], ["max", 0], ["1900", 0], ["lower", 0], ["bound", 0], ["c", 0], ["if", 0], ["lower", 0], ["bound", 0], ["upper", 0], ["bound", 0], ["impossible", 0], ["true", 0], ["print", 0], ["lower", 0], ["bound", 0], ["upper", 0], ["bound", 0], ["last", 0], ["div", 0], ["d", 0], ["if", 0], ["impossible", 0], ["print", 0], ["impossible", 0], ["elif", 0], ["upper", 0], ["bound", 0], ["10000000000000000", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["upper", 0], ["bound", 0], ["n", 0], ["int", 0], ["input", 0], ["ratings", 0], ["divs", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ratings", 0], ["append", 0], ["a", 0], ["divs", 0], ["append", 0], ["b", 0], ["curmax", 0], ["float", 0], ["inf", 0], ["curmin", 0], ["float", 0], ["inf", 0], ["if", 0], ["n", 0], ["1", 0], ["if", 0], ["divs", 0], ["0", 0], ["1", 0], ["print", 0], ["infinity", 0], ["else", 0], ["print", 0], ["1899", 0], ["ratings", 0], ["0", 0], ["else", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["st", 0], ["divs", 0], ["k", 0], ["fin", 0], ["divs", 0], ["k", 0], ["1", 0], ["change", 0], ["ratings", 0], ["k", 0], ["if", 0], ["st", 0], ["1", 0], ["and", 0], ["fin", 0], ["2", 0], ["if", 0], ["change", 0], ["0", 0], ["print", 0], ["impossible", 0], ["break", 0], ["curmax", 0], ["min", 0], ["curmax", 0], ["change", 0], ["1899", 0], ["curmin", 0], ["max", 0], ["curmin", 0], ["change", 0], ["1900", 0], ["change", 0], ["elif", 0], ["st", 0], ["2", 0], ["and", 0], ["fin", 0], ["2", 0], ["curmax", 0], ["min", 0], ["curmax", 0], ["change", 0], ["1899", 0], ["1899", 0], ["change", 0], ["curmin", 0], ["change", 0], ["elif", 0], ["st", 0], ["1", 0], ["and", 0], ["fin", 0], ["1", 0], ["curmin", 0], ["max", 0], ["curmin", 0], ["change", 0], ["1900", 0], ["1900", 0], ["change", 0], ["curmax", 0], ["change", 0], ["elif", 0], ["st", 0], ["2", 0], ["and", 0], ["fin", 0], ["1", 0], ["if", 0], ["change", 0], ["0", 0], ["print", 0], ["impossible", 0], ["break", 0], ["curmax", 0], ["min", 0], ["curmax", 0], ["change", 0], ["1899", 0], ["change", 0], ["curmin", 0], ["max", 0], ["curmin", 0], ["change", 0], ["1900", 0], ["else", 0], ["if", 0], ["curmax", 0], ["float", 0], ["inf", 0], ["print", 0], ["infinity", 0], ["elif", 0], ["curmin", 0], ["curmax", 0], ["print", 0], ["impossible", 0], ["else", 0], ["print", 0], ["curmax", 0], ["ratings", 0], ["1", 0], ["import", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["c", 0], ["d", 0], ["no", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["string", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["append", 0], ["string", 0], ["0", 0], ["d", 0], ["append", 0], ["string", 0], ["1", 0], ["if", 0], ["all", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["d", 0], ["print", 0], ["infinity", 0], ["elif", 0], ["n", 0], ["1", 0], ["print", 0], ["1899", 0], ["c", 0], ["0", 0], ["else", 0], ["if", 0], ["d", 0], ["0", 0], ["1", 0], ["x", 0], ["1900", 0], ["math", 0], ["inf", 0], ["else", 0], ["x", 0], ["math", 0], ["inf", 0], ["1899", 0], ["div", 0], ["d", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["x", 0], ["next", 0], ["x", 0], ["if", 0], ["d", 0], ["i", 0], ["1", 0], ["and", 0], ["d", 0], ["i", 0], ["1", 0], ["2", 0], ["x", 0], ["next", 0], ["x", 0], ["0", 0], ["c", 0], ["i", 0], ["min", 0], ["1899", 0], ["x", 0], ["1", 0], ["c", 0], ["i", 0], ["elif", 0], ["d", 0], ["i", 0], ["2", 0], ["and", 0], ["d", 0], ["i", 0], ["1", 0], ["1", 0], ["x", 0], ["next", 0], ["max", 0], ["1900", 0], ["x", 0], ["0", 0], ["c", 0], ["i", 0], ["x", 0], ["1", 0], ["c", 0], ["i", 0], ["else", 0], ["x", 0], ["next", 0], ["max", 0], ["x", 0], ["0", 0], ["c", 0], ["i", 0], ["1900", 0], ["if", 0], ["d", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["x", 0], ["0", 0], ["c", 0], ["i", 0], ["min", 0], ["x", 0], ["1", 0], ["c", 0], ["i", 0], ["1899", 0], ["if", 0], ["d", 0], ["i", 0], ["1", 0], ["2", 0], ["else", 0], ["x", 0], ["1", 0], ["c", 0], ["i", 0], ["if", 0], ["x", 0], ["next", 0], ["0", 0], ["x", 0], ["next", 0], ["1", 0], ["no", 0], ["true", 0], ["break", 0], ["else", 0], ["x", 0], ["x", 0], ["next", 0], ["print", 0], ["impossible", 0], ["if", 0], ["no", 0], ["else", 0], ["x", 0], ["1", 0], ["c", 0], ["1", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0004576659038901602, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0004576659038901602, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.005917159763313609, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.005917159763313609, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0004576659038901602, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0004576659038901602, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.005917159763313609, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.005917159763313609, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nMaksim has $n$ objects and $m$ boxes, each box has size exactly $k$. Objects are numbered from $1$ to $n$ in order from left to right, the size of the $i$-th object is $a_i$.\n\nMaksim wants to pack his objects into the boxes and he will pack objects by the following algorithm: he takes one of the empty boxes he has, goes from left to right through the objects, and if the $i$-th object fits in the current box (the remaining size of the box is greater than or equal to $a_i$), he puts it in the box, and the remaining size of the box decreases by $a_i$. Otherwise he takes the new empty box and continues the process above. If he has no empty boxes and there is at least one object not in some box then Maksim cannot pack the chosen set of objects.\n\nMaksim wants to know the maximum number of objects he can pack by the algorithm above. To reach this target, he will throw out the leftmost object from the set until the remaining set of objects can be packed in boxes he has. Your task is to say the maximum number of objects Maksim can pack in boxes he has.\n\nEach time when Maksim tries to pack the objects into the boxes, he will make empty all the boxes he has before do it (and the relative order of the remaining set of objects will not change).\n\n\n-----Input-----\n\nThe first line of the input contains three integers $n$, $m$, $k$ ($1 \\le n, m \\le 2 \\cdot 10^5$, $1 \\le k \\le 10^9$) — the number of objects, the number of boxes and the size of each box.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$), where $a_i$ is the size of the $i$-th object.\n\n\n-----Output-----\n\nPrint the maximum number of objects Maksim can pack using the algorithm described in the problem statement.\n\n\n-----Examples-----\nInput\n5 2 6\n5 2 1 4 2\n\nOutput\n4\n\nInput\n5 1 4\n4 2 3 4 1\n\nOutput\n1\n\nInput\n5 3 3\n1 2 3 1 1\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first example Maksim can pack only $4$ objects. Firstly, he tries to pack all the $5$ objects. Distribution of objects will be $[5], [2, 1]$. Maxim cannot pack the next object in the second box and he has no more empty boxes at all. Next he will throw out the first object and the objects distribution will be $[2, 1], [4, 2]$. So the answer is $4$.\n\nIn the second example it is obvious that Maksim cannot pack all the objects starting from first, second, third and fourth (in all these cases the distribution of objects is $[4]$), but he can pack the last object ($[1]$).\n\nIn the third example Maksim can pack all the objects he has. The distribution will be $[1, 2], [3], [1, 1]$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, m, k = [int(_) for _ in input().split()]\na = [int(_) for _ in input().split()]\n\nb = k\ncount = 0\nfor obj in a[::-1]:\n\tif obj > k:\n\t\tbreak\n\tif obj > b:\n\t\tif m > 1:\n\t\t\tm -= 1\n\t\t\tb = k - obj\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\telse:\n\t\tb -= obj\n\t\tcount += 1\n\nprint(count)\n\n", "n,m,k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\na = a[::-1]\nboxes = 0\nans = 0\nloc = 0\nfor i in range(n):\n\tloc += a[i]\n\tif loc > k:\n\t\tboxes += 1\n\t\tloc = a[i]\n\tif boxes == m:\n\t\tbreak\n\tans += 1\n\t# print(ans,boxes,loc)\nprint(ans)\n\n", "n,m,k = list(map(int, input().split()))\nlist_a = list(map(int, input().split()))\nlist_a.reverse()\ncount_b = 0\nsum_now = 0\nans = 0\ni = 0\nwhile i < n:\n\tif count_b >= m:\n\t\tans = i - 1\n\t\tbreak\n\tsum_now += list_a[i]\n\tif sum_now > k:\n\t\tsum_now = 0\n\t\tcount_b +=1\n\telse:\n\t\ti += 1\nelse:\n\tans = n-1\nprint(ans+1)\n", "n, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# left = -1\n# right = n-1\n\n# while right - left > 1:\n# \tmid = (right+left)//2\n\t\n# \tcount = 0\n# \tcurr = 0\n# \tfor i in range(mid, n):\n# \t\tif curr + a[i] <= k:\n# \t\t\tcurr += a[i]\n# \t\telse:\n# \t\t\tcount += 1\n# \t\t\tcurr = a[i]\n# \tcount += 1\n\t\n# \tif count > m:\n# \t\tleft = mid\n# \telse:\n# \t\tright = mid\n\n# print(n-right)\n\ncount = 0\ncurr = 0\ni = n\nwhile count < m and i >= 0:\n\ti -= 1\n\tif curr + a[i] <= k:\n\t\tcurr += a[i]\n\telse:\n\t\tcount += 1\n\t\tcurr = a[i]\n\nprint(n-i-1)\n", "def fit(a, m, k, res):\n\tk1 = k\n\tfor ai in a[-res:]:\n\t\tif ai <= k1:\n\t\t\tk1 -= ai\n\t\telse:\n\t\t\tk1 = k-ai\n\t\t\tif m == 1:\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tm -= 1\n\treturn True\n\t# С нек. момента моё воспоминание об алгоритме, описанном в условии, изменилось (исправлено)\n\n\ndef bisect(n, m, k, a):\n\tleft, right = 0, n+1\n\twhile left + 1 < right:\n\t\tmiddle = (left + right) // 2\n\t\tif fit(a, m, k, middle):\n\t\t\tleft = middle\n\t\telse:\n\t\t\tright = middle\n\treturn left\n\n\ndef main():\n\tn, m, k = list(map(int, input().split()))\n\ta = tuple(map(int, input().split()))\n\tprint(bisect(n, m, k, a))\nmain()\n", "n,m,k = [int(s) for s in input().split()]\na = [int(s) for s in input().split()]\nans = 0\nboxi = 0\nrem_size = k\nfor i in range(n-1, -1, -1):\n\tif a[i] > k:\n\t\tbreak\n\tif a[i] > rem_size:\n\t\tif boxi >= m-1:\n\t\t\tbreak\n\t\telse:\n\t\t\tboxi += 1\n\t\t\trem_size = k\n\trem_size -= a[i]\n\tans += 1\n\nprint(ans)\n", "from sys import stdin\nn,m,k=list(map(int,stdin.readline().strip().split()))\ns=tuple(map(int,stdin.readline().strip().split()))\nx=0\ny=0\nans=0\nfor i in range(n-1,-1,-1):\n\tif x==m:\n\t\tbreak\n\tif y+s[i]>k:\n\t\tif s[i]>k:\n\t\t\tbreak\n\t\tx+=1\n\t\tif x==m:\n\t\t\tbreak\n\t\tans+=1\n\t\ty=s[i]\n\telse:\n\t\ty+=s[i]\n\t\tans+=1\n\t\nprint(ans)\n", "n,m,k=[int(x)for x in input().split()]\nns=[int(x)for x in input().split()]\nns.reverse()\nrem=k\nnum=0\nans=[]\nfor i in range(n):\n\tif rem>=ns[i]:\n\t\trem-=ns[i]\n\t\tnum+=1\n\telse:\n\t\tans.append(num)\n\t\trem=k-ns[i]\n\t\tnum=1\nif num>0:\n\tans.append(num)\n\n# print(ans)\n\nif len(ans)<=m:\n\tprint(sum(ans))\nelse:\n\ta=[sum(ans[:m])]\n\t# for i in range(m,len(ans)):\n\t#     a.append(a[-1]+ans[i]-ans[i-m])\n\tprint(max(a))\n", "def main():\n\tnobj, nbox, boxsize = list(map(int, input().split()))\n\tobj = list(map(int, input().split()))\n\tbox = boxsize\n\tcurr = 0\n\tans = 0\n\ti = nobj - 1\n\twhile i >= 0:\n\t\to = obj[i]\n\t\t#print('box: ' + str(box) + ' i = ' + str(i) + ', o = ' + str(o))\n\t\tif o <= box:\n\t\t\tbox -= o\n\t\t\tans += 1\n\t\telse:\n\t\t\tcurr += 1\n\t\t\tbox = boxsize\n\t\t\tif curr >= nbox:\n\t\t\t\tbreak\n\t\t\tcontinue\n\t\ti -= 1\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "# coding=utf-8\n\nn, m, k = map(int, input().split())\n\na = [int(i) for i in input().split()]\n\ncur = 0\nans = 0\nbox = k\ni = n - 1\n\nwhile i >= 0:\n\tobj = a[i]\n\tif obj <= box:\n\t\tbox -= obj\n\t\tans += 1\n\telse:\n\t\tcur += 1\n\t\tbox = k\n\t\tif cur >= m:\n\t\t\tbreak\n\t\tcontinue\n\ti -= 1\n\nprint(ans)\n", "# coding=utf-8\n\nn, m, k = map(int, input().split())\n\na = [int(i) for i in input().split()]\n\ncur = 0\nans = 0\nbox = k\ni = n - 1\n\nwhile i >= 0:\n\tobj = a[i]\n\tif obj <= box:\n\t\tbox -= obj\n\t\tans += 1\n\telse:\n\t\tcur += 1\n\t\tbox = k\n\t\tif cur >= m:\n\t\t\tbreak\n\t\tcontinue\n\ti -= 1\n\nprint(ans)\n", "n, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na = a[::-1]\n\nres = 0\nweight = 0\n\nfor i in range(n):\n\tweight += a[i]\n\tif weight > k:\n\t\tweight = a[i]\n\t\tm -= 1\n\tif m <= 0:\n\t\tbreak\n\tres += 1\n\nprint(res)\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\nn,mm,k = map(int,minp().split())\na = list(map(int,minp().split()))\ndef tt(x):\n\tm = mm-1\n\tc = 0\n\tfor j in range(x,n):\n\t\ti = a[j]\n\t\tif c + i > k:\n\t\t\tif m == 0 or i > k:\n\t\t\t\treturn False\n\t\t\tc = i\n\t\t\tm -= 1\n\t\t\t#if i == k:\n\t\t\t#\tif m == 0:\n\t\t\t#\t\treturn False\n\t\t\t#\tm -= 1\n\t\t\t#\tc = 0\n\t\telse:\n\t\t\tc += i\n\treturn True\nl = 0\nr = n\nwhile l < r:\n\tc = (l+r)//2\n\tif tt(c):\n\t\tr = c\n\telse:\n\t\tl = c+1\nprint(n-r)\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\nn,mm,k = list(map(int,minp().split()))\na = list(map(int,minp().split()))\ndef tt(x):\n\tm = mm-1\n\tc = 0\n\tres = 0\n\tfor i in reversed(a):\n\t\tif c + i > k:\n\t\t\tif m == 0 or i > k:\n\t\t\t\treturn res\n\t\t\tc = i\n\t\t\tm -= 1\n\t\t\t#if i == k:\n\t\t\t#\tif m == 0:\n\t\t\t#\t\treturn False\n\t\t\t#\tm -= 1\n\t\t\t#\tc = 0\n\t\telse:\n\t\t\tc += i\n\t\tres += 1\n\treturn res\nprint(tt(0))\n#l = 0\n#r = n\n#while l < r:\n#\tc = (l+r)//2\n#\tif tt(c):\n#\t\tr = c\n#\telse:\n#\t\tl = c+1\n#print(n-r)\n", "import sys\ninput = sys.stdin.readline\n\ndef main():\n\tn, m, k = map(int, input().split())\n\ta = list(map(int, input().split()))\n\tif min(a) > k:\n\t\treturn 0\n\ta = a[::-1]\n\tcurrent = 0\n\tanswer = 0\n\tfor i in range(n):\n\t\tif current + a[i] <= k:\n\t\t\tcurrent += a[i]\n\t\t\tanswer += 1\n\t\telse:\n\t\t\tcurrent = 0\n\t\t\tm -= 1\n\t\t\tif m == 0:\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tif current + a[i] < k:\n\t\t\t\t\tcurrent += a[i]\n\t\t\t\t\tanswer += 1\n\t\t\t\telif current + a[i] == k:\n\t\t\t\t\tanswer += 1\n\t\t\t\t\tm -= 1\n\t\t\t\t\tif m == 0:\n\t\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tcontinue\n\treturn answer\ndef __starting_point():\n\tprint(main())\n__starting_point()\n", "n,m,k=list(map(int,input().split()))\narr=list(map(int,input().split()))\narr1=[0]*n\ni=n-1\nprevval=0\nans=0\nwhile(i>=0 and m>0):\n\tif(prevval+arr[i]<=k):\n\t\tprevval+=arr[i]\n\telse:\n\t\tm-=1\n\t\tprevval=arr[i]\n\ti-=1\n\tans+=1\nif(m==0):\n\tans-=1\nprint(ans)\n", "n,m,k=list(map(int,input().split()))#object,箱,size,\nA=list(map(int,input().split()))#size\n\n\nA.reverse()\ninb=0\nbox=0\ni=0\nwhile box<m and i<n:\n\tif inb+A[i]<=k:\n\t   inb+=A[i]\n\t   i+=1\n\telse:\n\t\tbox+=1\n\t\tinb=0\n\t\nprint(i)\n", "import sys\nimport math\n\nn,m,k=map(int,input().split())\njobs=[int(x) for x in input().strip().split()]\nsteve=jobs[:]\nnade=steve[::-1]\nsuma,con,kik=0,0,0\nfor i in range(n):\n\tif(nade[i]>k):\n\t\tbreak\n\tif(suma+nade[i]<k):\n\t\t#print(\"A\")\n\t\tsuma+=nade[i]\n\t\tkik+=1\n\t\tif(i<n-1):\n\t\t\tif(suma+nade[i+1]>k):\n\t\t\t\tsuma=0\n\t\t\t\tcon+=1\n\telif(suma+nade[i]==k):\n\t\t#print(\"B\")\n\t\t#print(\"SPC CASE\",suma,nade[i],suma+nade[i])\n\t\tcon+=1\n\t\tkik+=1\n\t\tsuma=0\n\telif(suma+nade[i]>k):\n\t\t#print(\"C\")\n\t\tcon+=1\n\t\tsuma=0\n\t#print(suma,kik)\n\tif(con>=m):\n\t\tbreak\nprint(kik)\n", "import math\nimport sys\nn,m,k = map(int, sys.stdin.readline().split())\na =[int(x) for x in sys.stdin.readline().split()]\na.reverse()\nans = 0\nbag = m - 1\nsize = k\nfor x in a:\n\tif size < x:\n\t\tif bag > 0:\n\t\t\tbag -= 1\n\t\t\tsize = k - x\n\t\telse: break\n\telse: size -= x\n\tans += 1\nsys.stdout.write(str(ans))\n", "def bS(alist, item):\n\tfirst = 0\n\tlast = len(alist)-1\n\tfound = False\n\tposi=-1\t\n\twhile (first<=last+1) and (not found):\n\t\tmidpoint = (first + last)//2\n\t\t#print(midpoint,alist[midpoint-1] )\n\t\tif (alist[midpoint]>=item):#and (alist[midpoint+1] <= item):\n\t\t\tfound = True\n\t\t\tposi=midpoint\n\t\telse:\n\t\t\tif item < alist[midpoint]:\n\t\t\t\tlast = midpoint-1\n\t\t\telse:\n\t\t\t\tfirst = midpoint+1\n\t\n\treturn posi\n\n\nn,m,k=list(map(int,input().split()))\na=list(input().split())\nmaxi=0\ncc=0\nnow=-1\nalr=0\nalfa=[0]*n\nlast=0\nfor ii in range(n):\n\ti=n-ii-1\n\talfa[ii]=int(a[i])+last\n\tlast=alfa[ii]\n\n#print(alfa)\nif alfa[-1]>m*k:\n\tpos=bS(alfa,m*k)\nelse:\n\tpos=n-1\n\n#print(pos)\nii=n-pos-1\n#b=a[ii+1:].copy()\nb=a\nb.reverse()\nmaxi=0\nstart=0\n#for start in range(n):\nif (1==1):\n\t#if n-start<maxi:\n\t#    break\n\talr=0\n\tcc=0\n\tfor i in b[start:]:\n\t\talr+=int(i)\n\t\tcc+=1\n\t\t\n\t\tif alr>k:\n\t\t\talr=int(i)\n\t\t\tif alr>k:\n\t\t\t\tcc-=1\n\t\t\tm-=1\n\t\t\tif m==0:\n\t\t\t\tcc-=1\n\t\t\t\tbreak\n\tif cc>maxi:\n\t\tmaxi=cc\n\t\t\n\t\nprint(maxi)   \n\n\n\n\n   \n\n\t\n", "def go():\n\tn, m, k = [int(i) for i in input().split(' ')]\n\ta = [int(i) for i in input().split(' ')]\n\tcurrent_box = k\n\tm -= 1\n\tc = 0\n\tfor i in range(n - 1, -1, -1):\n\t\tif a[i] <= current_box:\n\t\t\tcurrent_box -= a[i]\n\t\t\tc += 1\n\t\telif a[i] > current_box:\n\t\t\tcurrent_box = k - a[i]\n\t\t\tif m == 0:\n\t\t\t\tbreak\n\t\t\tm -= 1\n\t\t\tc += 1\n\treturn c\n\nprint(go())\n", "n, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\na.reverse()\nlast = 0\nfor i in range(n):\n\tif a[i] > last:\n\t\tif m == 0:\n\t\t\tprint(i)\n\t\t\treturn\n\t\telse:\n\t\t\tm -= 1\n\t\t\tlast = k - a[i]\n\telse:\n\t\tlast -= a[i]\nprint(n)\n", "n,m,k=list(map(int,input().split()))\ncnt=0\ncount=0\nsum=0\na=[int(s) for s in input().split()]\nfor i in range(n-1,-1,-1):\n\tsum+=a[i]\n\tif sum>k:\n\t\tsum=a[i]\n\t\tcount+=1\n\t\tif count>=m:\n\t\t\tbreak\n\tcnt+=1\nprint(cnt)\n", "\nn,k,m=list(map(int,input().split()))\nl=[int(i) for i in input().split()]\ndef ispzbl(l,n,m,k,mid):\n\tz=l[mid:]\n\tif not z:\n\t\treturn True \n\ts=0\n\tbox=1\n\tfor i in z:\n\t\ts+=i \n\t\tif s>m:\n\t\t\tbox+=1 \n\t\t\ts=i\n\treturn box<=k\nlow=0 \nhigh=n-1 \nwhile low<=high:\n\tmid=(low+high)//2\n   # print(mid)\n\tif ispzbl(l,n,m,k,mid):\n\t\tans=mid \n\t\thigh=mid-1 \n\telse:\n\t\tlow=mid+1 \n#print(ans)\nprint(n-ans)\n"], "id": "id9569"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9569", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["maksim", 1], ["has", 1], ["n", 1], ["objects", 1], ["and", 1], ["m", 1], ["boxes", 1], ["each", 1], ["box", 1], ["has", 1], ["size", 1], ["exactly", 1], ["k", 1], ["objects", 1], ["are", 1], ["numbered", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["in", 1], ["order", 1], ["from", 1], ["left", 1], ["to", 1], ["right", 1], ["the", 1], ["size", 1], ["of", 1], ["the", 1], ["i", 1], ["th", 1], ["object", 1], ["is", 1], ["a", 1], ["i", 1], ["maksim", 1], ["wants", 1], ["to", 1], ["pack", 1], ["his", 1], ["objects", 1], ["into", 1], ["the", 1], ["boxes", 1], ["and", 1], ["he", 1], ["will", 1], ["pack", 1], ["objects", 1], ["by", 1], ["the", 1], ["following", 1], ["algorithm", 1], ["he", 1], ["takes", 1], ["one", 1], ["of", 1], ["the", 1], ["empty", 1], ["boxes", 1], ["he", 1], ["has", 1], ["goes", 1], ["from", 1], ["left", 1], ["to", 1], ["right", 1], ["through", 1], ["the", 1], ["objects", 1], ["and", 1], ["if", 1], ["the", 1], ["i", 1], ["th", 1], ["object", 1], ["fits", 1], ["in", 1], ["the", 1], ["current", 1], ["box", 1], ["the", 1], ["remaining", 1], ["size", 1], ["of", 1], ["the", 1], ["box", 1], ["is", 1], ["greater", 1], ["than", 1], ["or", 1], ["equal", 1], ["to", 1], ["a", 1], ["i", 1], ["he", 1], ["puts", 1], ["it", 1], ["in", 1], ["the", 1], ["box", 1], ["and", 1], ["the", 1], ["remaining", 1], ["size", 1], ["of", 1], ["the", 1], ["box", 1], ["decreases", 1], ["by", 1], ["a", 1], ["i", 1], ["otherwise", 1], ["he", 1], ["takes", 1], ["the", 1], ["new", 1], ["empty", 1], ["box", 1], ["and", 1], ["continues", 1], ["the", 1], ["process", 1], ["above", 1], ["if", 1], ["he", 1], ["has", 1], ["no", 1], ["empty", 1], ["boxes", 1], ["and", 1], ["there", 1], ["is", 1], ["at", 1], ["least", 1], ["one", 1], ["object", 1], ["not", 1], ["in", 1], ["some", 1], ["box", 1], ["then", 1], ["maksim", 1], ["cannot", 1], ["pack", 1], ["the", 1], ["chosen", 1], ["set", 1], ["of", 1], ["objects", 1], ["maksim", 2], ["wants", 2], ["to", 2], ["know", 2], ["the", 2], ["maximum", 2], ["number", 2], ["of", 2], ["objects", 2], ["he", 2], ["can", 2], ["pack", 2], ["by", 2], ["the", 2], ["algorithm", 2], ["above", 2], ["to", 2], ["reach", 2], ["this", 2], ["target", 2], ["he", 2], ["will", 2], ["throw", 2], ["out", 2], ["the", 2], ["leftmost", 2], ["object", 2], ["from", 2], ["the", 2], ["set", 2], ["until", 2], ["the", 2], ["remaining", 2], ["set", 2], ["of", 2], ["objects", 2], ["can", 2], ["be", 2], ["packed", 2], ["in", 2], ["boxes", 2], ["he", 2], ["has", 2], ["your", 2], ["task", 2], ["is", 2], ["to", 2], ["say", 2], ["the", 1], ["maximum", 1], ["number", 1], ["of", 1], ["objects", 1], ["maksim", 1], ["can", 1], ["pack", 1], ["in", 1], ["boxes", 1], ["he", 1], ["has", 1], ["each", 1], ["time", 1], ["when", 1], ["maksim", 1], ["tries", 1], ["to", 1], ["pack", 1], ["the", 1], ["objects", 1], ["into", 1], ["the", 1], ["boxes", 1], ["he", 1], ["will", 1], ["make", 1], ["empty", 1], ["all", 1], ["the", 1], ["boxes", 1], ["he", 1], ["has", 1], ["before", 1], ["do", 1], ["it", 1], ["and", 1], ["the", 0], ["relative", 0], ["order", 0], ["of", 0], ["the", 0], ["remaining", 0], ["set", 0], ["of", 0], ["objects", 0], ["will", 0], ["not", 0], ["change", 0], ["input", 0], ["the", 3], ["first", 1], ["line", 1], ["of", 1], ["the", 1], ["input", 1], ["contains", 1], ["three", 1], ["integers", 1], ["n", 1], ["m", 1], ["k", 1], ["1", 1], ["le", 1], ["n", 1], ["m", 1], ["le", 1], ["2", 1], ["cdot", 1], ["10", 1], ["5", 1], ["1", 1], ["le", 1], ["k", 1], ["le", 1], ["10", 1], ["9", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["objects", 1], ["the", 1], ["number", 1], ["of", 1], ["boxes", 1], ["and", 1], ["the", 1], ["size", 1], ["of", 1], ["each", 1], ["box", 1], ["the", 8], ["second", 8], ["line", 8], ["of", 8], ["the", 7], ["input", 7], ["contains", 28], ["n", 30], ["integers", 35], ["a", 1], ["1", 1], ["a", 1], ["2", 1], ["dots", 1], ["a", 1], ["n", 1], ["1", 1], ["le", 1], ["a", 1], ["i", 1], ["le", 1], ["k", 0], ["where", 0], ["a", 0], ["i", 0], ["is", 0], ["the", 0], ["size", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["object", 0], ["output", 0], ["print", 1], ["the", 1], ["maximum", 1], ["number", 1], ["of", 1], ["objects", 0], ["maksim", 0], ["can", 0], ["pack", 0], ["using", 0], ["the", 0], ["algorithm", 0], ["described", 0], ["in", 0], ["the", 0], ["problem", 0], ["statement", 0], ["examples", 0], ["input", 0], ["5", 0], ["2", 0], ["6", 0], ["5", 0], ["2", 0], ["1", 0], ["4", 0], ["2", 0], ["output", 0], ["4", 0], ["input", 0], ["5", 0], ["1", 0], ["4", 0], ["4", 0], ["2", 0], ["3", 0], ["4", 0], ["1", 0], ["output", 0], ["1", 0], ["input", 0], ["5", 0], ["3", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["1", 0], ["output", 0], ["5", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["example", 1], ["maksim", 1], ["can", 1], ["pack", 1], ["only", 1], ["4", 1], ["objects", 1], ["firstly", 1], ["he", 1], ["tries", 0], ["to", 0], ["pack", 0], ["all", 0], ["the", 0], ["5", 0], ["objects", 0], ["distribution", 0], ["of", 0], ["objects", 0], ["will", 0], ["be", 0], ["5", 0], ["2", 1], ["1", 1], ["maxim", 1], ["cannot", 1], ["pack", 1], ["the", 1], ["next", 1], ["object", 1], ["in", 1], ["the", 1], ["second", 1], ["box", 1], ["and", 1], ["he", 1], ["has", 1], ["no", 1], ["more", 1], ["empty", 1], ["boxes", 1], ["at", 1], ["all", 1], ["next", 1], ["he", 1], ["will", 1], ["throw", 1], ["out", 1], ["the", 1], ["first", 1], ["object", 1], ["and", 1], ["the", 1], ["objects", 1], ["distribution", 1], ["will", 1], ["be", 1], ["2", 1], ["1", 1], ["4", 1], ["2", 1], ["so", 1], ["the", 1], ["answer", 1], ["is", 1], ["4", 1], ["in", 1], ["the", 1], ["second", 1], ["example", 1], ["it", 1], ["is", 1], ["obvious", 1], ["that", 1], ["maksim", 1], ["cannot", 1], ["pack", 1], ["all", 1], ["the", 1], ["objects", 1], ["starting", 1], ["from", 1], ["first", 1], ["second", 1], ["third", 0], ["and", 0], ["fourth", 0], ["in", 0], ["all", 0], ["these", 0], ["cases", 0], ["the", 0], ["distribution", 0], ["of", 0], ["objects", 0], ["is", 0], ["4", 0], ["but", 0], ["he", 0], ["can", 0], ["pack", 0], ["the", 0], ["last", 0], ["object", 0], ["1", 0], ["in", 1], ["the", 1], ["third", 1], ["example", 1], ["maksim", 1], ["can", 1], ["pack", 0], ["all", 0], ["the", 0], ["objects", 0], ["he", 0], ["has", 0], ["the", 0], ["distribution", 0], ["will", 0], ["be", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7603960396039604, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6954785478547856, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8820116054158608, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.880722114764668, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7544554455445545, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6952852428099953, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8820116054158608, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.880722114764668, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["m", 0], ["k", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["k", 0], ["count", 0], ["0", 0], ["for", 0], ["obj", 0], ["in", 0], ["a", 0], ["1", 0], ["if", 0], ["obj", 0], ["k", 0], ["break", 0], ["if", 0], ["obj", 0], ["b", 0], ["if", 0], ["m", 0], ["1", 0], ["m", 0], ["1", 0], ["b", 0], ["k", 0], ["obj", 0], ["count", 0], ["1", 0], ["else", 0], ["break", 0], ["else", 0], ["b", 0], ["obj", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["a", 0], ["1", 0], ["boxes", 0], ["0", 0], ["ans", 0], ["0", 0], ["loc", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["loc", 0], ["a", 0], ["i", 0], ["if", 0], ["loc", 0], ["k", 0], ["boxes", 0], ["1", 0], ["loc", 0], ["a", 0], ["i", 0], ["if", 0], ["boxes", 0], ["m", 0], ["break", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["boxes", 0], ["loc", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["a", 0], ["reverse", 0], ["count", 0], ["b", 0], ["0", 0], ["sum", 0], ["now", 0], ["0", 0], ["ans", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["if", 0], ["count", 0], ["b", 0], ["m", 0], ["ans", 0], ["i", 0], ["1", 0], ["break", 0], ["sum", 0], ["now", 0], ["list", 0], ["a", 0], ["i", 0], ["if", 0], ["sum", 0], ["now", 0], ["k", 0], ["sum", 0], ["now", 0], ["0", 0], ["count", 0], ["b", 0], ["1", 0], ["else", 0], ["i", 0], ["1", 0], ["else", 0], ["ans", 0], ["n", 0], ["1", 0], ["print", 0], ["ans", 0], ["1", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["left", 0], ["1", 0], ["right", 0], ["n", 0], ["1", 0], ["while", 0], ["right", 0], ["left", 0], ["1", 0], ["mid", 0], ["right", 0], ["left", 0], ["2", 0], ["count", 0], ["0", 0], ["curr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["mid", 0], ["n", 0], ["if", 0], ["curr", 0], ["a", 0], ["i", 0], ["k", 0], ["curr", 0], ["a", 0], ["i", 0], ["else", 0], ["count", 0], ["1", 0], ["curr", 0], ["a", 0], ["i", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["m", 0], ["left", 0], ["mid", 0], ["else", 0], ["right", 0], ["mid", 0], ["print", 0], ["n", 0], ["right", 0], ["count", 0], ["0", 0], ["curr", 0], ["0", 0], ["i", 0], ["n", 0], ["while", 0], ["count", 0], ["m", 0], ["and", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["if", 0], ["curr", 0], ["a", 0], ["i", 0], ["k", 0], ["curr", 0], ["a", 0], ["i", 0], ["else", 0], ["count", 0], ["1", 0], ["curr", 0], ["a", 0], ["i", 0], ["print", 0], ["n", 0], ["i", 0], ["1", 0], ["def", 0], ["fit", 0], ["a", 0], ["m", 0], ["k", 0], ["res", 0], ["k1", 0], ["k", 0], ["for", 0], ["ai", 0], ["in", 0], ["a", 0], ["res", 0], ["if", 0], ["ai", 0], ["k1", 0], ["k1", 0], ["ai", 0], ["else", 0], ["k1", 0], ["k", 0], ["ai", 0], ["if", 0], ["m", 0], ["1", 0], ["return", 0], ["false", 0], ["else", 0], ["m", 0], ["1", 0], ["return", 0], ["true", 0], ["с", 0], ["нек", 0], ["момента", 0], ["моё", 0], ["воспоминание", 0], ["об", 0], ["алгоритме", 0], ["описанном", 0], ["в", 0], ["условии", 0], ["изменилось", 0], ["исправлено", 0], ["def", 0], ["bisect", 0], ["n", 0], ["m", 0], ["k", 0], ["a", 0], ["left", 0], ["right", 0], ["0", 0], ["n", 0], ["1", 0], ["while", 0], ["left", 0], ["1", 0], ["right", 0], ["middle", 0], ["left", 0], ["right", 0], ["2", 0], ["if", 0], ["fit", 0], ["a", 0], ["m", 0], ["k", 0], ["middle", 0], ["left", 0], ["middle", 0], ["else", 0], ["right", 0], ["middle", 0], ["return", 0], ["left", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["bisect", 0], ["n", 0], ["m", 0], ["k", 0], ["a", 0], ["main", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["boxi", 0], ["0", 0], ["rem", 0], ["size", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["k", 0], ["break", 0], ["if", 0], ["a", 0], ["i", 0], ["rem", 0], ["size", 0], ["if", 0], ["boxi", 0], ["m", 0], ["1", 0], ["break", 0], ["else", 0], ["boxi", 0], ["1", 0], ["rem", 0], ["size", 0], ["k", 0], ["rem", 0], ["size", 0], ["a", 0], ["i", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["s", 0], ["tuple", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["x", 0], ["m", 0], ["break", 0], ["if", 0], ["y", 0], ["s", 0], ["i", 0], ["k", 0], ["if", 0], ["s", 0], ["i", 0], ["k", 0], ["break", 0], ["x", 0], ["1", 0], ["if", 0], ["x", 0], ["m", 0], ["break", 0], ["ans", 0], ["1", 0], ["y", 0], ["s", 0], ["i", 0], ["else", 0], ["y", 0], ["s", 0], ["i", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["ns", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["ns", 0], ["reverse", 0], ["rem", 0], ["k", 0], ["num", 0], ["0", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["rem", 0], ["ns", 0], ["i", 0], ["rem", 0], ["ns", 0], ["i", 0], ["num", 0], ["1", 0], ["else", 0], ["ans", 0], ["append", 0], ["num", 0], ["rem", 0], ["k", 0], ["ns", 0], ["i", 0], ["num", 0], ["1", 0], ["if", 0], ["num", 0], ["0", 0], ["ans", 0], ["append", 0], ["num", 0], ["print", 0], ["ans", 0], ["if", 0], ["len", 0], ["ans", 0], ["m", 0], ["print", 0], ["sum", 0], ["ans", 0], ["else", 0], ["a", 0], ["sum", 0], ["ans", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["len", 0], ["ans", 0], ["a", 0], ["append", 0], ["a", 0], ["1", 0], ["ans", 0], ["i", 0], ["ans", 0], ["i", 0], ["m", 0], ["print", 0], ["max", 0], ["a", 0], ["def", 0], ["main", 0], ["nobj", 0], ["nbox", 0], ["boxsize", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["obj", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["box", 0], ["boxsize", 0], ["curr", 0], ["0", 0], ["ans", 0], ["0", 0], ["i", 0], ["nobj", 0], ["1", 0], ["while", 0], ["i", 0], ["0", 0], ["o", 0], ["obj", 0], ["i", 0], ["print", 0], ["box", 0], ["str", 0], ["box", 0], ["i", 0], ["str", 0], ["i", 0], ["o", 0], ["str", 0], ["o", 0], ["if", 0], ["o", 0], ["box", 0], ["box", 0], ["o", 0], ["ans", 0], ["1", 0], ["else", 0], ["curr", 0], ["1", 0], ["box", 0], ["boxsize", 0], ["if", 0], ["curr", 0], ["nbox", 0], ["break", 0], ["continue", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["coding", 0], ["utf", 0], ["8", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["cur", 0], ["0", 0], ["ans", 0], ["0", 0], ["box", 0], ["k", 0], ["i", 0], ["n", 0], ["1", 0], ["while", 0], ["i", 0], ["0", 0], ["obj", 0], ["a", 0], ["i", 0], ["if", 0], ["obj", 0], ["box", 0], ["box", 0], ["obj", 0], ["ans", 0], ["1", 0], ["else", 0], ["cur", 0], ["1", 0], ["box", 0], ["k", 0], ["if", 0], ["cur", 0], ["m", 0], ["break", 0], ["continue", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["coding", 0], ["utf", 0], ["8", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["cur", 0], ["0", 0], ["ans", 0], ["0", 0], ["box", 0], ["k", 0], ["i", 0], ["n", 0], ["1", 0], ["while", 0], ["i", 0], ["0", 0], ["obj", 0], ["a", 0], ["i", 0], ["if", 0], ["obj", 0], ["box", 0], ["box", 0], ["obj", 0], ["ans", 0], ["1", 0], ["else", 0], ["cur", 0], ["1", 0], ["box", 0], ["k", 0], ["if", 0], ["cur", 0], ["m", 0], ["break", 0], ["continue", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["a", 0], ["1", 0], ["res", 0], ["0", 0], ["weight", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["weight", 0], ["a", 0], ["i", 0], ["if", 0], ["weight", 0], ["k", 0], ["weight", 0], ["a", 0], ["i", 0], ["m", 0], ["1", 0], ["if", 0], ["m", 0], ["0", 0], ["break", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["import", 0], ["sys", 0], ["def", 0], ["minp", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["n", 0], ["mm", 0], ["k", 0], ["map", 0], ["int", 0], ["minp", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["minp", 0], ["split", 0], ["def", 0], ["tt", 0], ["x", 0], ["m", 0], ["mm", 0], ["1", 0], ["c", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["x", 0], ["n", 0], ["i", 0], ["a", 0], ["j", 0], ["if", 0], ["c", 0], ["i", 0], ["k", 0], ["if", 0], ["m", 0], ["0", 0], ["or", 0], ["i", 0], ["k", 0], ["return", 0], ["false", 0], ["c", 0], ["i", 0], ["m", 0], ["1", 0], ["if", 0], ["i", 0], ["k", 0], ["if", 0], ["m", 0], ["0", 0], ["return", 0], ["false", 0], ["m", 0], ["1", 0], ["c", 0], ["0", 0], ["else", 0], ["c", 0], ["i", 0], ["return", 0], ["true", 0], ["l", 0], ["0", 0], ["r", 0], ["n", 0], ["while", 0], ["l", 0], ["r", 0], ["c", 0], ["l", 0], ["r", 0], ["2", 0], ["if", 0], ["tt", 0], ["c", 0], ["r", 0], ["c", 0], ["else", 0], ["l", 0], ["c", 0], ["1", 0], ["print", 0], ["n", 0], ["r", 0], ["import", 0], ["sys", 0], ["def", 0], ["minp", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["n", 0], ["mm", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["minp", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["minp", 0], ["split", 0], ["def", 0], ["tt", 0], ["x", 0], ["m", 0], ["mm", 0], ["1", 0], ["c", 0], ["0", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["reversed", 0], ["a", 0], ["if", 0], ["c", 0], ["i", 0], ["k", 0], ["if", 0], ["m", 0], ["0", 0], ["or", 0], ["i", 0], ["k", 0], ["return", 0], ["res", 0], ["c", 0], ["i", 0], ["m", 0], ["1", 0], ["if", 0], ["i", 0], ["k", 0], ["if", 0], ["m", 0], ["0", 0], ["return", 0], ["false", 0], ["m", 0], ["1", 0], ["c", 0], ["0", 0], ["else", 0], ["c", 0], ["i", 0], ["res", 0], ["1", 0], ["return", 0], ["res", 0], ["print", 0], ["tt", 0], ["0", 0], ["l", 0], ["0", 0], ["r", 0], ["n", 0], ["while", 0], ["l", 0], ["r", 0], ["c", 0], ["l", 0], ["r", 0], ["2", 0], ["if", 0], ["tt", 0], ["c", 0], ["r", 0], ["c", 0], ["else", 0], ["l", 0], ["c", 0], ["1", 0], ["print", 0], ["n", 0], ["r", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["main", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["min", 0], ["a", 0], ["k", 0], ["return", 0], ["0", 0], ["a", 0], ["a", 0], ["1", 0], ["current", 0], ["0", 0], ["answer", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["current", 0], ["a", 0], ["i", 0], ["k", 0], ["current", 0], ["a", 0], ["i", 0], ["answer", 0], ["1", 0], ["else", 0], ["current", 0], ["0", 0], ["m", 0], ["1", 0], ["if", 0], ["m", 0], ["0", 0], ["break", 0], ["else", 0], ["if", 0], ["current", 0], ["a", 0], ["i", 0], ["k", 0], ["current", 0], ["a", 0], ["i", 0], ["answer", 0], ["1", 0], ["elif", 0], ["current", 0], ["a", 0], ["i", 0], ["k", 0], ["answer", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["m", 0], ["0", 0], ["break", 0], ["else", 0], ["continue", 0], ["return", 0], ["answer", 0], ["def", 0], ["starting", 0], ["point", 0], ["print", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr1", 0], ["0", 0], ["n", 0], ["i", 0], ["n", 0], ["1", 0], ["prevval", 0], ["0", 0], ["ans", 0], ["0", 0], ["while", 0], ["i", 0], ["0", 0], ["and", 0], ["m", 0], ["0", 0], ["if", 0], ["prevval", 0], ["arr", 0], ["i", 0], ["k", 0], ["prevval", 0], ["arr", 0], ["i", 0], ["else", 0], ["m", 0], ["1", 0], ["prevval", 0], ["arr", 0], ["i", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["if", 0], ["m", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["object", 0], ["箱", 0], ["size", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["size", 0], ["a", 0], ["reverse", 0], ["inb", 0], ["0", 0], ["box", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["box", 0], ["m", 0], ["and", 0], ["i", 0], ["n", 0], ["if", 0], ["inb", 0], ["a", 0], ["i", 0], ["k", 0], ["inb", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["else", 0], ["box", 0], ["1", 0], ["inb", 0], ["0", 0], ["print", 0], ["i", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["jobs", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["steve", 0], ["jobs", 0], ["nade", 0], ["steve", 0], ["1", 0], ["suma", 0], ["con", 0], ["kik", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["nade", 0], ["i", 0], ["k", 0], ["break", 0], ["if", 0], ["suma", 0], ["nade", 0], ["i", 0], ["k", 0], ["print", 0], ["a", 0], ["suma", 0], ["nade", 0], ["i", 0], ["kik", 0], ["1", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["if", 0], ["suma", 0], ["nade", 0], ["i", 0], ["1", 0], ["k", 0], ["suma", 0], ["0", 0], ["con", 0], ["1", 0], ["elif", 0], ["suma", 0], ["nade", 0], ["i", 0], ["k", 0], ["print", 0], ["b", 0], ["print", 0], ["spc", 0], ["case", 0], ["suma", 0], ["nade", 0], ["i", 0], ["suma", 0], ["nade", 0], ["i", 0], ["con", 0], ["1", 0], ["kik", 0], ["1", 0], ["suma", 0], ["0", 0], ["elif", 0], ["suma", 0], ["nade", 0], ["i", 0], ["k", 0], ["print", 0], ["c", 0], ["con", 0], ["1", 0], ["suma", 0], ["0", 0], ["print", 0], ["suma", 0], ["kik", 0], ["if", 0], ["con", 0], ["m", 0], ["break", 0], ["print", 0], ["kik", 0], ["import", 0], ["math", 0], ["import", 0], ["sys", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["a", 0], ["reverse", 0], ["ans", 0], ["0", 0], ["bag", 0], ["m", 0], ["1", 0], ["size", 0], ["k", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["if", 0], ["size", 0], ["x", 0], ["if", 0], ["bag", 0], ["0", 0], ["bag", 0], ["1", 0], ["size", 0], ["k", 0], ["x", 0], ["else", 0], ["break", 0], ["else", 0], ["size", 0], ["x", 0], ["ans", 0], ["1", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["ans", 0], ["def", 0], ["bs", 0], ["alist", 0], ["item", 0], ["first", 0], ["0", 0], ["last", 0], ["len", 0], ["alist", 0], ["1", 0], ["found", 0], ["false", 0], ["posi", 0], ["1", 0], ["while", 0], ["first", 0], ["last", 0], ["1", 0], ["and", 0], ["not", 0], ["found", 0], ["midpoint", 0], ["first", 0], ["last", 0], ["2", 0], ["print", 0], ["midpoint", 0], ["alist", 0], ["midpoint", 0], ["1", 0], ["if", 0], ["alist", 0], ["midpoint", 0], ["item", 0], ["and", 0], ["alist", 0], ["midpoint", 0], ["1", 0], ["item", 0], ["found", 0], ["true", 0], ["posi", 0], ["midpoint", 0], ["else", 1], ["if", 0], ["item", 0], ["alist", 0], ["midpoint", 0], ["last", 0], ["midpoint", 0], ["1", 0], ["else", 0], ["first", 0], ["midpoint", 0], ["1", 0], ["return", 0], ["posi", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["input", 0], ["split", 0], ["maxi", 0], ["0", 0], ["cc", 0], ["0", 0], ["now", 0], ["1", 0], ["alr", 0], ["0", 0], ["alfa", 0], ["0", 0], ["n", 0], ["last", 0], ["0", 0], ["for", 0], ["ii", 0], ["in", 0], ["range", 0], ["n", 0], ["i", 0], ["n", 0], ["ii", 0], ["1", 0], ["alfa", 0], ["ii", 0], ["int", 0], ["a", 0], ["i", 0], ["last", 0], ["last", 0], ["alfa", 0], ["ii", 0], ["print", 0], ["alfa", 0], ["if", 0], ["alfa", 0], ["1", 0], ["m", 0], ["k", 0], ["pos", 0], ["bs", 0], ["alfa", 0], ["m", 0], ["k", 0], ["else", 0], ["pos", 0], ["n", 0], ["1", 0], ["print", 0], ["pos", 0], ["ii", 0], ["n", 0], ["pos", 0], ["1", 0], ["b", 0], ["a", 0], ["ii", 0], ["1", 0], ["copy", 0], ["b", 0], ["a", 0], ["b", 0], ["reverse", 0], ["maxi", 0], ["0", 0], ["start", 0], ["0", 0], ["for", 0], ["start", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["1", 0], ["1", 0], ["if", 0], ["n", 0], ["start", 0], ["maxi", 0], ["break", 0], ["alr", 0], ["0", 0], ["cc", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["start", 0], ["alr", 0], ["int", 0], ["i", 0], ["cc", 0], ["1", 0], ["if", 0], ["alr", 0], ["k", 0], ["alr", 0], ["int", 0], ["i", 0], ["if", 0], ["alr", 0], ["k", 0], ["cc", 0], ["1", 0], ["m", 0], ["1", 0], ["if", 0], ["m", 0], ["0", 0], ["cc", 0], ["1", 0], ["break", 0], ["if", 0], ["cc", 0], ["maxi", 0], ["maxi", 0], ["cc", 0], ["print", 0], ["maxi", 0], ["def", 0], ["go", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["current", 0], ["box", 0], ["k", 0], ["m", 0], ["1", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["current", 0], ["box", 0], ["current", 0], ["box", 0], ["a", 0], ["i", 0], ["c", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["current", 0], ["box", 0], ["current", 0], ["box", 0], ["k", 0], ["a", 0], ["i", 0], ["if", 0], ["m", 0], ["0", 0], ["break", 0], ["m", 0], ["1", 0], ["c", 0], ["1", 0], ["return", 0], ["c", 0], ["print", 0], ["go", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["reverse", 0], ["last", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["last", 0], ["if", 0], ["m", 0], ["0", 0], ["print", 0], ["i", 0], ["return", 0], ["else", 0], ["m", 0], ["1", 0], ["last", 0], ["k", 0], ["a", 0], ["i", 0], ["else", 0], ["last", 0], ["a", 0], ["i", 0], ["print", 0], ["n", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["count", 0], ["0", 0], ["sum", 0], ["0", 0], ["a", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["sum", 0], ["a", 0], ["i", 0], ["if", 0], ["sum", 0], ["k", 0], ["sum", 0], ["a", 0], ["i", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["m", 0], ["break", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["n", 0], ["k", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["ispzbl", 0], ["l", 0], ["n", 0], ["m", 0], ["k", 0], ["mid", 0], ["z", 0], ["l", 0], ["mid", 0], ["if", 0], ["not", 0], ["z", 0], ["return", 0], ["true", 0], ["s", 0], ["0", 0], ["box", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["z", 0], ["s", 0], ["i", 0], ["if", 0], ["s", 0], ["m", 0], ["box", 0], ["1", 0], ["s", 0], ["i", 0], ["return", 0], ["box", 0], ["k", 0], ["low", 0], ["0", 0], ["high", 0], ["n", 0], ["1", 0], ["while", 0], ["low", 0], ["high", 0], ["mid", 0], ["low", 0], ["high", 0], ["2", 0], ["print", 0], ["mid", 0], ["if", 0], ["ispzbl", 0], ["l", 0], ["n", 0], ["m", 0], ["k", 0], ["mid", 0], ["ans", 0], ["mid", 0], ["high", 0], ["mid", 0], ["1", 0], ["else", 0], ["low", 0], ["mid", 0], ["1", 0], ["print", 0], ["ans", 0], ["print", 0], ["n", 0], ["ans", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0005595970900951316, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0005595970900951316, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.007226236798221234, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.007226236798221234, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0005595970900951316, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0005595970900951316, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.007226236798221234, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.007226236798221234, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nZonal Computing Olympiad 2013, 10 Nov 2012\n\nSpaceman Spiff has crash landed on Planet Quorg. He has to reach his ship quickly. But the evil Yukbarfs have stolen many Death Ray Blasters and have placed them along the way. You'll have to help him out!\n\nSpaceman Spiff is initially at the top left corner (1,1) of a rectangular N × M grid . He needs to reach the bottom right corner (N,M). He can only move down or right. He moves at the speed of 1 cell per second. He has to move every second—that is, he cannot stop and wait at any cell.\n\nThere are K special cells that contain the Death Ray Blasters planted by the Yukbarfs. Each Blaster has a starting time t and a frequency f.  It first fires at time t seconds, followed by another round at time t+f seconds, then at time t+2f seconds ….  When a Blaster fires, it simultaneously emits four pulses, one in each of the four directions: up, down, left and right.  The pulses travel at 1 cell per second.\n\nSuppose a blaster is located at (x,y) with starting time t and frequency f.  At time t seconds, it shoots its first set of pulses. The pulse travelling upwards will be at the cell (x,y-s) at time t+s seconds.  At this time, the pulse travelling left will be at cell (x-s,y), the pulse travelling right will be at cell (x+s,y) and the pulse travelling down will be at cell (x,y+s).  It will fire next at time t+f seconds.  If a pulse crosses an edge of the grid, it disappears. Pulses do not affect each other if they meet. They continue along their original path. At any time, if Spaceman Spiff and a pulse are in the same cell, he dies. That is the only way pulses interact with Spaceman Spiff. Spaceman Spiff can also never be on a cell which has a blaster. Given these, you should find the least time (in seconds) in which Spaceman Spiff can reach his ship safely.  \n\nAs an example consider a 4×4 grid that has only one Blaster, at (3,2), with starting time 1 and frequency 3.  In the grids below, S denotes Spaceman Spiff, B denotes the blaster and P denotes a pulse.  The sequence of grids describes a successful attempt to reach his ship that takes 6 seconds.\nt=0                t=1                t=2                t=3  \nS  .  .  .         .  S  .  .         .  .  S  .         .  P  .  S\n.  .  .  .         .  .  .  .         .  P  .  .         .  .  .  .\n.  B  .  .         .  P  .  .         P  B  P  .         .  B  .  P\n.  .  .  .         .  .  .  .         .  P  .  .         .  .  .  .\n\nt=4                t=5                t=6\n.  .  .  .         .  .  .  .         .  P  .  .\n.  .  .  S         .  P  .  .         .  .  .  .\n.  P  .  .         P  B  P  S         .  B  .  P\n.  .  .  .         .  P  .  .         .  .  .  S\n\n-----Input format-----\nLine 1: Three space separated integers N, M and K, describing the number of rows and columns in the grid and the number of Blasters, respectively.\n\nLines 2 to K+1: These lines describe the K blasters.  Each line has four space separated integers. The first two integers on the line denote the row and column where the Blaster is located, the third integer is its starting time, and the fourth integer is its frequency.\n\n-----Output format-----\nThe first line of output must either consist of the word YES, if Spaceman Spiff can reach his ship safely, or the word NO, if he cannot do so. If the output on the first line is YES then the second line should contain a single integer giving the least time, in seconds, that it takes him to reach his ship safely.\n\n-----Sample Input 1-----\n4 4 1\n3 2 1 3\n\n-----Sample Output 1-----\nYES\n6\n\n-----Sample Input 2-----\n5 5 2\n5 1 1 2\n4 4 1 2\n\n-----Sample Output 2-----\nYES\n8\n\n-----Test data-----\nIn all subtasks, you may assume that:\n- \n2 ≤ N,M ≤ 2500. \n- \nAll the frequencies are guaranteed to be integers between 1 and 3000, inclusive.\n- \nAll the starting times are guaranteed to be integers between 0 and 3000, inclusive.\n- \nAll the coordinates of the Blasters are guaranteed to be valid cells in the N×M grid. No two Blasters will be on the same cell.\n\n- Subtask 1 (30 marks) : K = 1.\n- Subtask 2 (70 marks) : 1 ≤ K ≤ 2500.\n\n-----Live evaluation data-----\n- Subtask 1: Testcases 0,1.\n- Subtask 2: Testcases 2,3,4,5.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["# cook your dish here\nn, m, k =map(int, input().split())\nblasters=[]\nfor _ in range(k):\n\tblasters.append(list(map(int, input().split())))\ngrid=[[0 for _ in range(m)] for _ in range(n)]\nfor blaster in blasters:\n\tflag=0\n\tx, y, t, f = blaster\n\tx-=1 \n\ty-=1\n\tgrid[x][y]=-1\n\tfor i in range(n):\n\t\tif i+y-t-abs(x-i)>=0 and (i+y-t-abs(x-i))%f==0:\n\t\t\tif i>x:\n\t\t\t\tflag=1\n\t\t\tgrid[i][y]=-1\n\t\tif i>x and flag==0:\n\t\t\tbreak\n\tflag=0\n\tfor j in range(m):\n\t\tif j+x-t-abs(y-j)>=0 and (j+x-t-abs(y-j))%f==0:\n\t\t\tif j>y:\n\t\t\t\tflag=1\n\t\t\tgrid[x][j]=-1\n\t\tif j>y and flag==0:\n\t\t\tbreak\nfor i in range(1,n):\n\tif grid[i-1][0]==-1:\n\t\tgrid[i][0]=-1\nfor j in range(1,m):\n\tif grid[0][j-1]==-1:\n\t\tgrid[0][j]=grid[0][j-1]\nfor i in range(1,n):\n\tfor j in range(1,m):\n\t\tif grid[i][j-1]==-1 and grid[i-1][j]==-1:\n\t\t\tgrid[i][j]=-1\nif grid[-1][-1]==0:\n\tprint('YES')\n\tprint(n+m-2)\nelse:\n\tprint('NO')\n", "# cook your dish here\nn, m, k =map(int, input().split())\nblasters=[]\nfor _ in range(k):\n\tblasters.append(list(map(int, input().split())))\ngrid=[[0 for _ in range(m)] for _ in range(n)]\nfor blaster in blasters:\n\tx, y, t, f = blaster\n\tx-=1 \n\ty-=1\n\tgrid[x][y]=-1\n\tfor i in range(n):\n\t\tif i+y-t-abs(x-i)>=0 and (i+y-t-abs(x-i))%f==0:\n\t\t\tgrid[i][y]=-1\n\tfor j in range(m):\n\t\tif j+x-t-abs(y-j)>=0 and (j+x-t-abs(y-j))%f==0:\n\t\t\tgrid[x][j]=-1\nfor i in range(1,n):\n\tif grid[i-1][0]==-1:\n\t\tgrid[i][0]=-1\nfor j in range(1,m):\n\tif grid[0][j-1]==-1:\n\t\tgrid[0][j]=grid[0][j-1]\nfor i in range(1,n):\n\tfor j in range(1,m):\n\t\tif grid[i][j-1]==-1 and grid[i-1][j]==-1:\n\t\t\tgrid[i][j]=-1\nif grid[-1][-1]==0:\n\tprint('YES')\n\tprint(n+m-2)\nelse:\n\tprint('NO')\n", "# cook your dish here\nn, m, k =map(int, input().split())\nblasters=[]\nfor _ in range(k):\n\tblasters.append(list(map(int, input().split())))\ngrid=[[0 for _ in range(m)] for _ in range(n)]\nfor blaster in blasters:\n\tx, y, t, f = blaster\n\tx-=1 \n\ty-=1\n\tgrid[x][y]=-1\n\tfor i in range(n):\n\t\tif (i+y-t-abs(x-i))%f==0:\n\t\t\tgrid[i][y]=-1\n\tfor j in range(m):\n\t\tif (j+x-t-abs(y-j))%f==0:\n\t\t\tgrid[x][j]=-1\nfor i in range(1,n):\n\tif grid[i-1][0]==-1:\n\t\tgrid[i][0]=-1\nfor j in range(1,m):\n\tif grid[0][j-1]==-1:\n\t\tgrid[0][j]=grid[0][j-1]\nfor i in range(1,n):\n\tfor j in range(1,m):\n\t\tif grid[i][j-1]==-1 and grid[i-1][j]==-1:\n\t\t\tgrid[i][j]=-1\nif grid[-1][-1]==0:\n\tprint('YES')\n\tprint(n+m-2)\nelse:\n\tprint('NO')\n", "# cook your dish here\nn, m, k =map(int, input().split())\nblasters=[]\nfor _ in range(k):\n\tblasters.append(list(map(int, input().split())))\ngrid=[[0 for _ in range(m)] for _ in range(n)]\nfor blaster in blasters:\n\tx, y, t, f = blaster\n\tx-=1 \n\ty-=1\n\tgrid[x][y]=-1\n\tfor i in range(n):\n\t\tif (i+y-t)%f==abs(x-i):\n\t\t\tgrid[i][y]=-1\n\tfor j in range(m):\n\t\tif (j+x-t)%f==abs(y-j):\n\t\t\tgrid[x][j]=-1\nfor i in range(1,n):\n\tif grid[i-1][0]==-1:\n\t\tgrid[i][0]=-1\nfor j in range(1,m):\n\tif grid[0][j-1]==-1:\n\t\tgrid[0][j]=grid[0][j-1]\nfor i in range(1,n):\n\tfor j in range(1,m):\n\t\tif grid[i][j-1]==-1 and grid[i-1][j]==-1:\n\t\t\tgrid[i][j]=-1\nif grid[-1][-1]==0:\n\tprint('YES')\n\tprint(n+m-2)\nelse:\n\tprint('NO')\n", "# cook your dish here\ndef main():\n\tfrom sys import stdin, stdout\n\trl = stdin.readline\n\n\t# Time taken to reach end is determined purely by size of grid\n\t# We simply need to determine if it is possible to reach it\n\n\t# Create dp table, mark all as visitable\n\t# Mark cells with blasters as unvisitable\n\n\t# Now, iterate over blasters.\n\t# For each blaster, check every cell in its row and col.\n\t# For each cell, there is a definite time at which spaceman can be at it\n\n\t# Pulse will take time t1 extra to reach cell after fire\n\t# Therefore, t0 should be = t1 + tstart + nf\n\t# Hence, we mod t0 - t1 - tstart with f\n\n\t# Finally, just try to find a path.\n\t# If a path exists, simply print n + m - 2 as the time to reach\n\n\tn, m, k = (int(x) for x in rl().split())\n\ta = [[int(x) for x in rl().split()] for _ in range(k)]\n\n\tdp = [[1] * m for _ in range(n)]\n\tfor b in a:\n\t\tb[0] -= 1\n\t\tb[1] -= 1\n\t\tdp[b[0]][b[1]] = 0\n\n\t\tx, y = b[0], 0\n\t\twhile y < m:\n\t\t\tt_cell = x + y\n\t\t\tt_check = t_cell - b[2] - abs(y - b[1])\n\t\t\tif t_check < 0:  # Negative time is impossible\n\t\t\t\ty += 1\n\t\t\t\tcontinue\n\n\t\t\tif t_check % b[3] == 0:\n\t\t\t\tdp[x][y] = 0\n\t\t\ty += 1\n\n\t\tx, y = 0, b[1]\n\t\twhile x < n:\n\t\t\tt_cell = x + y\n\t\t\tt_check = t_cell - b[2] - abs(x - b[0])\n\t\t\tif t_check < 0:\n\t\t\t\tx += 1\n\t\t\t\tcontinue\n\n\t\t\tif t_check % b[3] == 0:\n\t\t\t\tdp[x][y] = 0\n\t\t\tx += 1\n\n\tfor x in range(1, n):\n\t\tdp[x][0] = dp[x][0] and dp[x - 1][0]\n\n\tfor y in range(1, m):\n\t\tdp[0][y] = dp[0][y] and dp[0][y - 1]\n\n\tfor x in range(1, n):\n\t\tfor y in range(1, m):\n\t\t\tdp[x][y] = dp[x][y] and (dp[x - 1][y] or dp[x][y - 1])\n\n\tif dp[-1][-1]:\n\t\tstdout.write('YES\\n')\n\t\tstdout.write(str(n + m - 2))\n\telse:\n\t\tstdout.write('NO')\n\n\nmain()\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Jul 16 13:36:30 2020\n\n@author: shubham gupta\n\"\"\"\n# cook your dish here\ndef main():\n\tfrom sys import stdin, stdout\n\trl = stdin.readline\n\tn, m, k = (int(x) for x in rl().split())\n\ta = [[int(x) for x in rl().split()] for _ in range(k)]\n\tdp = [[1] * m for _ in range(n)]\n\tfor b in a:\n\t\tb[0] -= 1\n\t\tb[1] -= 1\n\t\tdp[b[0]][b[1]] = 0\n\t\tx, y = b[0], 0\n\t\twhile y < m:\n\t\t\tt_cell = x + y\n\t\t\tt_check = t_cell - b[2] - abs(y - b[1])\n\t\t\tif t_check < 0:  # Negative time is impossible\n\t\t\t\ty += 1\n\t\t\t\tcontinue\n\t\t\tif t_check % b[3] == 0:dp[x][y] = 0\n\t\t\ty += 1\n\n\t\tx, y = 0, b[1]\n\t\twhile x < n:\n\t\t\tt_cell = x + y\n\t\t\tt_check = t_cell - b[2] - abs(x - b[0])\n\t\t\tif t_check < 0:\n\t\t\t\tx += 1\n\t\t\t\tcontinue\n\t\t\tif t_check % b[3] == 0:dp[x][y] = 0\n\t\t\tx += 1\n\tfor x in range(1, n):dp[x][0] = dp[x][0] and dp[x - 1][0]\n\tfor y in range(1, m):dp[0][y] = dp[0][y] and dp[0][y - 1]\n\tfor x in range(1, n):\n\t\tfor y in range(1, m):dp[x][y] = dp[x][y] and (dp[x - 1][y] or dp[x][y - 1])\n\tif dp[-1][-1]:\n\t\tstdout.write('YES\\n')\n\t\tstdout.write(str(n + m - 2))\n\telse:\n\t\tstdout.write('NO')\nmain()\n", "# cook your dish here\ndef main():\n\tfrom sys import stdin, stdout\n\trl = stdin.readline\n\n\t# Time taken to reach end is determined purely by size of grid\n\t# We simply need to determine if it is possible to reach it\n\n\t# Create dp table, mark all as visitable\n\t# Mark cells with blasters as unvisitable\n\n\t# Now, iterate over blasters.\n\t# For each blaster, check every cell in its row and col.\n\t# For each cell, there is a definite time at which spaceman can be at it\n\n\t# Pulse will take time t1 extra to reach cell after fire\n\t# Therefore, t0 should be = t1 + tstart + nf\n\t# Hence, we mod t0 - t1 - tstart with f\n\n\t# Finally, just try to find a path.\n\t# If a path exists, simply print n + m - 2 as the time to reach\n\n\tn, m, k = (int(x) for x in rl().split())\n\ta = [[int(x) for x in rl().split()] for _ in range(k)]\n\n\tdp = [[1] * m for _ in range(n)]\n\tfor b in a:\n\t\tb[0] -= 1\n\t\tb[1] -= 1\n\t\tdp[b[0]][b[1]] = 0\n\n\t\tx, y = b[0], 0\n\t\twhile y < m:\n\t\t\tt_cell = x + y\n\t\t\tt_check = t_cell - b[2] - abs(y - b[1])\n\t\t\tif t_check < 0:  # Negative time is impossible\n\t\t\t\ty += 1\n\t\t\t\tcontinue\n\n\t\t\tif t_check % b[3] == 0:\n\t\t\t\tdp[x][y] = 0\n\t\t\ty += 1\n\n\t\tx, y = 0, b[1]\n\t\twhile x < n:\n\t\t\tt_cell = x + y\n\t\t\tt_check = t_cell - b[2] - abs(x - b[0])\n\t\t\tif t_check < 0:\n\t\t\t\tx += 1\n\t\t\t\tcontinue\n\n\t\t\tif t_check % b[3] == 0:\n\t\t\t\tdp[x][y] = 0\n\t\t\tx += 1\n\n\tfor x in range(1, n):\n\t\tdp[x][0] = dp[x][0] and dp[x - 1][0]\n\n\tfor y in range(1, m):\n\t\tdp[0][y] = dp[0][y] and dp[0][y - 1]\n\n\tfor x in range(1, n):\n\t\tfor y in range(1, m):\n\t\t\tdp[x][y] = dp[x][y] and (dp[x - 1][y] or dp[x][y - 1])\n\n\tif dp[-1][-1]:\n\t\tstdout.write('YES\\n')\n\t\tstdout.write(str(n + m - 2))\n\telse:\n\t\tstdout.write('NO')\n\n\nmain()\n", "from sys import stdin\nip = lambda :[int(w) for w in stdin.readline().split()]\n\nn,m,k = [int(w) for w in stdin.readline().split()]\nsp = 2 if k == 1 else 0\ndp = [[1]*(m+1) for j in range(n+1)]\nfor j in range(k):\n\tx,y,t,f = [int(w) for w in stdin.readline().split()]\n\tdp[x][y] = 0\n\tfor i in range(1,n+1):\n\t\treach = i + y -2 - t - abs(x-i) +sp\n\t\tif reach > 0 and reach % f == 0:\n\t\t\tdp[i][y] = 0\n\tfor i in range(1,m+1):\n\t\treach = i + x -2 - t - abs(y-i) +sp\n\t\tif reach > 0 and reach % f == 0:\n\t\t\tdp[x][i] = 0\nfor i in range(1,n+1):\n\tfor j in range(1,m+1):\n\t\tdp[i][j] = dp[i][j] and (dp[i][j-1] or dp[i-1][j])\n\nif dp[-1][-1]:\n\tprint(\"YES\")\n\tprint(n+m-2)\nelse:\n\tprint(\"NO\")\n", "from sys import stdin\nip = lambda :[int(w) for w in stdin.readline().split()]\n\nn,m,k = [int(w) for w in stdin.readline().split()]\nsp = 2 if k == 1 else 0\ndp = [[1]*(m+1) for j in range(n+1)]\nfor j in range(k):\n\tx,y,t,f = [int(w) for w in stdin.readline().split()]\n\tdp[x][y] = 0\n\tfor i in range(1,n+1):\n\t\treach = i + y -2 - t - abs(x-i) +sp\n\t\tif reach > 0 and reach % f == 0:\n\t\t\tdp[i][y] = 0\n\tfor i in range(1,m+1):\n\t\treach = i + x -2 - t - abs(y-i) +sp\n\t\tif reach > 0 and reach % f == 0:\n\t\t\tdp[x][i] = 0\nfor i in range(1,n+1):\n\tfor j in range(1,m+1):\n\t\tcur,left,up = dp[i][j],dp[i][j-1],dp[i-1][j]\n\t\tdp[i][j] = cur*left or cur*up\n\nif dp[-1][-1]:\n\tprint(\"YES\")\n\tprint(n+m-2)\nelse:\n\tprint(\"NO\")\n", "#dt = {} for i in x: dt[i] = dt.get(i,0)+1\n#dt = {k:v for k,v in sorted(x.items(), key=lambda i: i[1])}\nipnl = lambda n: [int(input()) for _ in range(n)]\ninp = lambda :int(input())\nip = lambda :[int(w) for w in input().split()]\n\nn,m,k = ip()\nlaz = [ip() for i in range(k)]\ndp = [[1 for i in range(m+1)] for j in range(n+1)]\nfor j in laz:\n\tx,y,t,f = j\n\tdp[x][y] = 0\n\tfor i in range(1,n+1):\n\t\treach = i + x - t - abs(y-i)\n\t\tif reach > 0 and reach % f == 0:\n\t\t\tdp[i][y] = 0\n\tfor i in range(1,m+1):\n\t\treach = i + y - t - abs(x-i)\n\t\tif reach > 0 and reach % f == 0:\n\t\t\tdp[x][i] = 0\nfor i in range(1,n+1):\n\tfor j in range(1,m+1):\n\t\tcur,left,up = dp[i][j],dp[i][j-1],dp[i-1][j]\n\t\tdp[i][j] = cur*left or cur*up\n\nif dp[-1][-1]:\n\tprint(\"YES\")\n\tprint(n+m-2)\nelse:\n\tprint(\"NO\")\n\n\n\n", "#dt = {} for i in x: dt[i] = dt.get(i,0)+1\n#dt = {k:v for k,v in sorted(x.items(), key=lambda i: i[1])}\nipnl = lambda n: [int(input()) for _ in range(n)]\ninp = lambda :int(input())\nip = lambda :[int(w) for w in input().split()]\n\nn,m,k = ip()\nlaz = [ip() for i in range(k)]\ndp = [[1 for i in range(m+1)] for j in range(n+1)]\nfor j in laz:\n\tx,y,t,f = j\n\tdp[x][y] = 0\n\tfor i in range(1,n+1):\n\t\treach = i + y - t - abs(x-i)\n\t\tif reach > 0 and reach % f == 0:\n\t\t\tdp[i][y] = 0\n\tfor i in range(1,m+1):\n\t\treach = i + x - t - abs(y-i)\n\t\tif reach > 0 and reach % f == 0:\n\t\t\tdp[x][i] = 0\nfor i in range(1,n+1):\n\tfor j in range(1,m+1):\n\t\tcur,left,up = dp[i][j],dp[i][j-1],dp[i-1][j]\n\t\tdp[i][j] = cur*left or cur*up\n\nif dp[-1][-1]:\n\tprint(\"YES\")\n\tprint(n+m-2)\nelse:\n\tprint(\"NO\")\n\n\n\n", "intput = lambda: [int(i) for i in input().split()]\n# Write your code here\nn, m, k = intput()\nblasters = [intput() for i in range(k)]\ngrid = [[1] * n for i in range(m)]\n\nfor bx, by, t, f in blasters:\n\tbx -= 1\n\tby -= 1\n\tgrid[by][bx] = 0\n\t\n\tfor x in range(n):\n\t\tk = x + by - abs(bx - x) - t\n\t\tif k > 0 and k % f == 0:\n\t\t\tgrid[by][x] = 0\n\t\n\tfor y in range(m):\n\t\tk = bx + y - abs(by - y) - t\n\t\tif k > 0 and k % f == 0:\n\t\t\tgrid[y][bx] = 0\n\t\nfor x in range(1, n):\n\tgrid[0][x] = grid[0][x] and grid[0][x - 1]\nfor y in range(1, m):\n\tgrid[y][0] = grid[y][0] and grid[y - 1][0]\n\nfor x in range(1, n):\n\tfor y in range(1, m):\n\t\tgrid[y][x] = grid[y][x] and (grid[y][x - 1] or grid[y - 1][x])\n\t\nif grid[-1][-1]:\n\tprint('YES')\n\tprint(n + m - 2)\nelse:\n\tprint('NO')\n", "intput = lambda: [int(i) for i in input().split()]\n# Write your code here\nn, m, k = intput()\nblasters = [intput() for i in range(k)]\ngrid = [[1] * n for i in range(m)]\n\nfor bx, by, t, f in blasters:\n\tbx -= 1\n\tby -= 1\n\t\n\tfor x in range(n):\n\t\tk = (x + by - abs(bx - x) - t) % f\n\t\tif k == 0:\n\t\t\tgrid[by][x] = 0\n\t\n\tfor y in range(m):\n\t\tk = (bx + y - abs(by - y) - t) % f\n\t\tif k == 0:\n\t\t\tgrid[y][bx] = 0\n\t\nfor x in range(1, n):\n\tgrid[0][x] = grid[0][x] and grid[0][x - 1]\nfor y in range(1, m):\n\tgrid[y][0] = grid[y][0] and grid[y - 1][0]\n\nfor x in range(1, n):\n\tfor y in range(1, m):\n\t\tgrid[y][x] = grid[y][x] and (grid[y][x - 1] or grid[y - 1][x])\n\t\nif grid[-1][-1]:\n\tprint('YES')\n\tprint(n + m - 2)\nelse:\n\tprint('NO')\n", "from sys import setrecursionlimit\nsetrecursionlimit(int(1e9))\nintput = lambda: [int(i) for i in input().split()]\n# Write your code here\nn, m, k = intput()\nblasters = [intput() for i in range(k)]\ngrid = [[1] * n for i in range(m)]\n\nfor bx, by, t, f in blasters:\n\tbx -= 1\n\tby -= 1\n\t\n\tfor x in range(n):\n\t\tk = x + by - abs(bx - x) - t\n\t\tif k >= 0 and k % f == 0:\n\t\t\tgrid[by][x] = 0\n\t\n\tfor y in range(m):\n\t\tk = bx + y - abs(by - y) - t\n\t\tif k >= 0 and k % f == 0:\n\t\t\tgrid[y][bx] = 0\n\ndef solve(x, y):\n\tif not grid[y][x]:\n\t\treturn 0\n\tif x == n - 1 and y == m - 1:\n\t\treturn 1\n\tres = 0\n\tif x != n - 1:\n\t\tres = solve(x + 1, y)\n\tif y != m - 1:\n\t\tres = res or solve(x, y + 1)\n\treturn res\n\t\nif solve(0, 0):\n\tprint('YES')\n\tprint(n + m - 2)\nelse:\n\tprint('NO')\n", "intput = lambda: [int(i) for i in input().split()]\n# Write your code here\nn, m, k = intput()\nblasters = [intput() for i in range(k)]\ngrid = [[1] * n for i in range(m)]\n\nfor bx, by, t, f in blasters:\n\tbx -= 1\n\tby -= 1\n\t\n\tfor x in range(n):\n\t\tk = x + by - abs(bx - x) - t\n\t\tif k >= 0 and k % f == 0:\n\t\t\tgrid[by][x] = 0\n\t\n\tfor y in range(m):\n\t\tk = bx + y - abs(by - y) - t\n\t\tif k >= 0 and k % f == 0:\n\t\t\tgrid[y][bx] = 0\n\t\nfor x in range(1, n):\n\tgrid[0][x] = grid[0][x] and grid[0][x - 1]\nfor y in range(1, m):\n\tgrid[y][0] = grid[y][0] and grid[y - 1][0]\n\nfor x in range(1, n):\n\tfor y in range(1, m):\n\t\tgrid[y][x] = grid[y][x] and (grid[y][x - 1] or grid[y - 1][x])\n\t\nif grid[-1][-1]:\n\tprint('YES')\n\tprint(n + m - 2)\nelse:\n\tprint('NO')\n", "intput = lambda: [int(i) for i in input().split()]\n# Write your code here\nn, m, k = intput()\nblasters = [intput() for i in range(k)]\ngrid = [[1] * n for i in range(m)]\n\nfor bx, by, t, f in blasters:\n\tbx -= 1\n\tby -= 1\n\t\n\tfor x in range(n):\n\t\tk = x + by - abs(bx - x) - t\n\t\tif k >= 0 and k % f == 0:\n\t\t\tgrid[by][x] = 0\n\t\n\tfor y in range(m):\n\t\tk = bx + y - abs(by - y) - t\n\t\tif k >= 0 and k % f == 0:\n\t\t\tgrid[y][bx] = 0\n\t\nfor x in range(1, n):\n\tgrid[0][x] = grid[0][x] and grid[0][x - 1]\nfor y in range(1, m):\n\tgrid[0][y] = grid[0][y] and grid[0][y - 1]\n\nfor x in range(1, n):\n\tfor y in range(1, m):\n\t\tgrid[y][x] = grid[y][x] and (grid[y][x - 1] or grid[y - 1][x])\n\t\nif grid[-1][-1]:\n\tprint('YES')\n\tprint(n + m - 2)\nelse:\n\tprint('NO')\n", "def main():\n\tfrom sys import stdin, stdout\n\trl = stdin.readline\n\n\t# Time taken to reach end is determined purely by size of grid\n\t# We simply need to determine if it is possible to reach it\n\n\t# Create dp table, mark all as visitable\n\t# Mark cells with blasters as unvisitable\n\n\t# Now, iterate over blasters.\n\t# For each blaster, check every cell in its row and col.\n\t# For each cell, there is a definite time at which spaceman can be at it\n\n\t# Pulse will take time t1 extra to reach cell after fire\n\t# Therefore, t0 should be = t1 + tstart + nf\n\t# Hence, we mod t0 - t1 - tstart with f\n\n\t# Finally, just try to find a path.\n\t# If a path exists, simply print n + m - 2 as the time to reach\n\n\tn, m, k = (int(x) for x in rl().split())\n\ta = [[int(x) for x in rl().split()] for _ in range(k)]\n\n\tdp = [[1] * m for _ in range(n)]\n\tfor b in a:\n\t\tb[0] -= 1\n\t\tb[1] -= 1\n\t\tdp[b[0]][b[1]] = 0\n\n\t\tx, y = b[0], 0\n\t\twhile y < m:\n\t\t\tt_cell = x + y\n\t\t\tt_check = t_cell - b[2] - abs(y - b[1])\n\t\t\tif t_check < 0:  # Negative time is impossible\n\t\t\t\ty += 1\n\t\t\t\tcontinue\n\n\t\t\tif t_check % b[3] == 0:\n\t\t\t\tdp[x][y] = 0\n\t\t\ty += 1\n\n\t\tx, y = 0, b[1]\n\t\twhile x < n:\n\t\t\tt_cell = x + y\n\t\t\tt_check = t_cell - b[2] - abs(x - b[0])\n\t\t\tif t_check < 0:\n\t\t\t\tx += 1\n\t\t\t\tcontinue\n\n\t\t\tif t_check % b[3] == 0:\n\t\t\t\tdp[x][y] = 0\n\t\t\tx += 1\n\n\tfor x in range(1, n):\n\t\tdp[x][0] = dp[x][0] and dp[x - 1][0]\n\n\tfor y in range(1, m):\n\t\tdp[0][y] = dp[0][y] and dp[0][y - 1]\n\n\tfor x in range(1, n):\n\t\tfor y in range(1, m):\n\t\t\tdp[x][y] = dp[x][y] and (dp[x - 1][y] or dp[x][y - 1])\n\n\tif dp[-1][-1]:\n\t\tstdout.write('YES\\n')\n\t\tstdout.write(str(n + m - 2))\n\telse:\n\t\tstdout.write('NO')\n\n\nmain()\n", "# cook your dish here\nn,m,k = map(int, input().split())\nbom = []\nfor _ in range(k):\n\tbom.append(list(map(int, input().split())))\ncount = n+m-2\n\nif k==3 or k== 4:\n\tprint('NO')\nelse:\n\tcan = True\n\tfor b in bom:\n\t\ty, x, t, f = b\n\t\tif y == 1 and x == 1:\n\t\t\tcan = False\n\tif can:\n\t\tsets = {1}\n\telse:\n\t\tsets = set()\n\t\n\tfor i in range(1, count+1):\n\t\tfor b in bom:\n\t\t\ty, x, t, f = b\n\t\t\tgap = x+y-i-1\n\t\t\ts_dura = i-t-1\n\t\t\tif s_dura > 0:\n\t\t\t\tgap = abs(gap)\n\t\t\t\ttemp = s_dura-gap\n\t\t\t\tif temp >= 0 and temp%f == 0:\n\t\t\t\t\tif 1 <= abs(i-x+1) <= n:\n\t\t\t\t\t\tsets.discard(x)\n\t\t\t\t\tif 1 <= abs(i-y+1) <= m:\n\t\t\t\t\t\tsets.discard(abs(i-y+1))\n\t\t\tif gap == 0:\n\t\t\t\tsets.discard(x)\n\t\t\n\t\tif len(sets) == 0:\n\t\t\tbreak\n\t\t\n\t\t# print(sets)\n\t\tfor v in list(sets):\n\t\t\tif v <= i-n+1:\n\t\t\t\tsets.remove(v)\n\t\t\tif v+1 > i-n+1:\n\t\t\t\tsets.add(v+1)\n\t\tsets.discard(m+1)\n\t\t\n\tif m in sets:\n\t\tprint(\"YES\")\n\t\tprint(count)\n\telse:\n\t\tprint(\"NO\")\n\t\t\t\n", "# cook your dish here\nn,m,k = map(int, input().split())\nbom = []\nfor _ in range(k):\n\tbom.append(list(map(int, input().split())))\ncount = n+m-2\n\nif k < 1:\n\tprint('NO')\nelse:\n\tcan = True\n\tfor b in bom:\n\t\ty, x, t, f = b\n\t\tif y == 1 and x == 1:\n\t\t\tcan = False\n\tif can:\n\t\tsets = {1}\n\telse:\n\t\tsets = set()\n\t\n\tfor i in range(1, count+1):\n\t\tfor b in bom:\n\t\t\ty, x, t, f = b\n\t\t\tgap = x+y-i-1\n\t\t\ts_dura = i-t-1\n\t\t\tif s_dura > 0:\n\t\t\t\tgap = abs(gap)\n\t\t\t\ttemp = s_dura-gap\n\t\t\t\tif temp >= 0 and temp%f == 0:\n\t\t\t\t\tif 1 <= abs(i-x+1) <= n:\n\t\t\t\t\t\tsets.discard(x)\n\t\t\t\t\tif 1 <= abs(i-y+1) <= m:\n\t\t\t\t\t\tsets.discard(abs(i-y+1))\n\t\t\tif gap == 0:\n\t\t\t\tsets.discard(x)\n\t\t\n\t\tif len(sets) == 0:\n\t\t\tbreak\n\t\t\n\t\t# print(sets)\n\t\tfor v in list(sets):\n\t\t\tif v <= i-n+1:\n\t\t\t\tsets.remove(v)\n\t\t\tif v+1 > i-n+1:\n\t\t\t\tsets.add(v+1)\n\t\tsets.discard(m+1)\n\t\t\n\tif m in sets:\n\t\tprint(\"YES\")\n\t\tprint(count)\n\telse:\n\t\tprint(\"NO\")\n\t\t\t\n", "# cook your dish here\nn,m,k = map(int, input().split())\nbom = []\nfor _ in range(k):\n\tbom.append(list(map(int, input().split())))\ncount = n+m-2\n\ncan = True\nfor b in bom:\n\ty, x, t, f = b\n\tif y == 1 and x == 1:\n\t\tcan = False\nif can:\n\tsets = {1}\nelse:\n\tsets = set()\n\nfor i in range(1, count+1):\n\tfor b in bom:\n\t\ty, x, t, f = b\n\t\tgap = x+y-i-1\n\t\ts_dura = i-t-1\n\t\tif s_dura > 0:\n\t\t\tgap = abs(gap)\n\t\t\ttemp = s_dura-gap\n\t\t\tif temp >= 0 and temp%f == 0:\n\t\t\t\tif 1 <= abs(i-x+1) <= n:\n\t\t\t\t\tsets.discard(x)\n\t\t\t\tif 1 <= abs(i-y+1) <= m:\n\t\t\t\t\tsets.discard(abs(i-y+1))\n\t\tif gap == 0:\n\t\t\tsets.discard(x)\n\t\n\tif len(sets) == 0:\n\t\tbreak\n\t\n\t# print(sets)\n\tfor v in list(sets):\n\t\tif v <= i-n+1:\n\t\t\tsets.remove(v)\n\t\tif v+1 > i-n+1:\n\t\t\tsets.add(v+1)\n\tsets.discard(m+1)\n\t\nif m in sets:\n\tprint(\"YES\")\n\tprint(count)\nelse:\n\tprint(\"NO\")\n\t\t\n"], "id": "id5496"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5496", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["zonal", 0], ["computing", 0], ["olympiad", 0], ["2013", 0], ["10", 0], ["nov", 0], ["2012", 0], ["spaceman", 3], ["spiff", 3], ["has", 3], ["crash", 3], ["landed", 3], ["on", 3], ["planet", 3], ["quorg", 3], ["he", 3], ["has", 3], ["to", 3], ["reach", 3], ["his", 3], ["ship", 3], ["quickly", 3], ["but", 3], ["the", 3], ["evil", 3], ["yukbarfs", 3], ["have", 3], ["stolen", 3], ["many", 3], ["death", 3], ["ray", 3], ["blasters", 3], ["and", 3], ["have", 3], ["placed", 3], ["them", 3], ["along", 3], ["the", 3], ["way", 3], ["you", 3], ["ll", 3], ["have", 3], ["to", 3], ["help", 3], ["him", 3], ["out", 3], ["spaceman", 3], ["spiff", 3], ["is", 3], ["initially", 3], ["at", 3], ["the", 3], ["top", 3], ["left", 3], ["corner", 3], ["1", 3], ["1", 3], ["of", 3], ["a", 3], ["rectangular", 3], ["n", 3], ["×", 3], ["m", 3], ["grid", 3], ["he", 3], ["needs", 3], ["to", 3], ["reach", 3], ["the", 3], ["bottom", 3], ["right", 3], ["corner", 3], ["n", 3], ["m", 3], ["he", 3], ["can", 3], ["only", 3], ["move", 3], ["down", 3], ["or", 3], ["right", 3], ["he", 3], ["moves", 3], ["at", 3], ["the", 3], ["speed", 3], ["of", 3], ["1", 3], ["cell", 3], ["per", 3], ["second", 3], ["he", 3], ["has", 3], ["to", 3], ["move", 3], ["every", 3], ["second—that", 3], ["is", 3], ["he", 3], ["cannot", 3], ["stop", 3], ["and", 3], ["wait", 3], ["at", 3], ["any", 3], ["cell", 3], ["there", 3], ["are", 3], ["k", 3], ["special", 3], ["cells", 3], ["that", 3], ["contain", 3], ["the", 3], ["death", 3], ["ray", 3], ["blasters", 3], ["planted", 3], ["by", 3], ["the", 3], ["yukbarfs", 3], ["each", 3], ["blaster", 3], ["has", 3], ["a", 3], ["starting", 3], ["time", 3], ["t", 3], ["and", 3], ["a", 3], ["frequency", 3], ["f", 3], ["it", 3], ["first", 3], ["fires", 3], ["at", 3], ["time", 3], ["t", 3], ["seconds", 3], ["followed", 3], ["by", 3], ["another", 3], ["round", 3], ["at", 3], ["time", 3], ["t", 3], ["f", 3], ["seconds", 3], ["then", 3], ["at", 3], ["time", 3], ["t", 3], ["2f", 3], ["seconds", 3], ["…", 3], ["when", 3], ["a", 3], ["blaster", 3], ["fires", 3], ["it", 3], ["simultaneously", 3], ["emits", 3], ["four", 3], ["pulses", 3], ["one", 3], ["in", 3], ["each", 3], ["of", 3], ["the", 3], ["four", 3], ["directions", 3], ["up", 3], ["down", 3], ["left", 3], ["and", 3], ["right", 3], ["the", 3], ["pulses", 3], ["travel", 3], ["at", 3], ["1", 3], ["cell", 3], ["per", 3], ["second", 3], ["suppose", 3], ["a", 3], ["blaster", 3], ["is", 3], ["located", 3], ["at", 3], ["x", 3], ["y", 3], ["with", 3], ["starting", 3], ["time", 3], ["t", 3], ["and", 3], ["frequency", 3], ["f", 3], ["at", 3], ["time", 3], ["t", 3], ["seconds", 3], ["it", 3], ["shoots", 3], ["its", 3], ["first", 3], ["set", 3], ["of", 3], ["pulses", 3], ["the", 3], ["pulse", 3], ["travelling", 3], ["upwards", 3], ["will", 3], ["be", 3], ["at", 3], ["the", 3], ["cell", 3], ["x", 3], ["y", 3], ["s", 3], ["at", 3], ["time", 3], ["t", 3], ["s", 3], ["seconds", 3], ["at", 3], ["this", 3], ["time", 3], ["the", 3], ["pulse", 3], ["travelling", 3], ["left", 3], ["will", 3], ["be", 3], ["at", 3], ["cell", 3], ["x", 3], ["s", 3], ["y", 3], ["the", 3], ["pulse", 3], ["travelling", 3], ["right", 3], ["will", 3], ["be", 3], ["at", 3], ["cell", 3], ["x", 3], ["s", 3], ["y", 3], ["and", 3], ["the", 3], ["pulse", 3], ["travelling", 3], ["down", 3], ["will", 3], ["be", 3], ["at", 3], ["cell", 3], ["x", 3], ["y", 3], ["s", 3], ["it", 3], ["will", 3], ["fire", 3], ["next", 3], ["at", 3], ["time", 3], ["t", 3], ["f", 3], ["seconds", 3], ["if", 3], ["a", 3], ["pulse", 3], ["crosses", 3], ["an", 3], ["edge", 3], ["of", 3], ["the", 3], ["grid", 3], ["it", 3], ["disappears", 3], ["pulses", 3], ["do", 3], ["not", 3], ["affect", 3], ["each", 3], ["other", 3], ["if", 3], ["they", 3], ["meet", 3], ["they", 3], ["continue", 3], ["along", 3], ["their", 3], ["original", 3], ["path", 3], ["at", 3], ["any", 3], ["time", 3], ["if", 3], ["spaceman", 3], ["spiff", 3], ["and", 3], ["a", 3], ["pulse", 3], ["are", 3], ["in", 3], ["the", 3], ["same", 3], ["cell", 3], ["he", 0], ["dies", 0], ["that", 0], ["is", 0], ["the", 0], ["only", 0], ["way", 0], ["pulses", 0], ["interact", 0], ["with", 0], ["spaceman", 0], ["spiff", 0], ["spaceman", 0], ["spiff", 0], ["can", 0], ["also", 0], ["never", 0], ["be", 0], ["on", 0], ["a", 0], ["cell", 0], ["which", 0], ["has", 0], ["a", 0], ["blaster", 0], ["given", 3], ["these", 3], ["you", 3], ["should", 3], ["find", 3], ["the", 3], ["least", 3], ["time", 3], ["in", 3], ["seconds", 3], ["in", 3], ["which", 3], ["spaceman", 3], ["spiff", 3], ["can", 3], ["reach", 3], ["his", 3], ["ship", 3], ["safely", 3], ["as", 3], ["an", 3], ["example", 3], ["consider", 3], ["a", 3], ["4×4", 3], ["grid", 3], ["that", 3], ["has", 3], ["only", 3], ["one", 3], ["blaster", 3], ["at", 3], ["3", 3], ["2", 3], ["with", 3], ["starting", 3], ["time", 3], ["1", 3], ["and", 3], ["frequency", 3], ["3", 3], ["in", 3], ["the", 3], ["grids", 3], ["below", 3], ["s", 3], ["denotes", 3], ["spaceman", 3], ["spiff", 3], ["b", 3], ["denotes", 3], ["the", 3], ["blaster", 3], ["and", 3], ["p", 3], ["denotes", 3], ["a", 3], ["pulse", 3], ["the", 3], ["sequence", 3], ["of", 3], ["grids", 3], ["describes", 2], ["a", 2], ["successful", 2], ["attempt", 2], ["to", 2], ["reach", 2], ["his", 2], ["ship", 2], ["that", 2], ["takes", 2], ["6", 2], ["seconds", 2], ["t", 2], ["0", 2], ["t", 2], ["1", 2], ["t", 2], ["2", 2], ["t", 2], ["3", 2], ["s", 2], ["s", 0], ["s", 0], ["p", 0], ["s", 0], ["p", 0], ["b", 0], ["p", 0], ["p", 0], ["b", 0], ["p", 0], ["b", 0], ["p", 0], ["p", 2], ["t", 2], ["4", 2], ["t", 2], ["5", 2], ["t", 2], ["6", 2], ["p", 0], ["s", 0], ["p", 0], ["p", 0], ["p", 0], ["b", 0], ["p", 0], ["s", 0], ["b", 0], ["p", 0], ["p", 0], ["s", 0], ["input", 0], ["format", 0], ["line", 3], ["1", 3], ["three", 3], ["space", 3], ["separated", 3], ["integers", 3], ["n", 3], ["m", 3], ["and", 3], ["k", 3], ["describing", 3], ["the", 3], ["number", 3], ["of", 3], ["rows", 3], ["and", 3], ["columns", 3], ["in", 3], ["the", 3], ["grid", 3], ["and", 3], ["the", 3], ["number", 3], ["of", 3], ["blasters", 3], ["respectively", 3], ["lines", 3], ["2", 3], ["to", 3], ["k", 3], ["1", 3], ["these", 3], ["lines", 3], ["describe", 3], ["the", 3], ["k", 3], ["blasters", 3], ["each", 3], ["line", 3], ["has", 3], ["four", 3], ["space", 3], ["separated", 3], ["integers", 3], ["the", 3], ["first", 3], ["two", 3], ["integers", 3], ["on", 3], ["the", 3], ["line", 3], ["denote", 3], ["the", 3], ["row", 3], ["and", 3], ["column", 3], ["where", 3], ["the", 3], ["blaster", 3], ["is", 3], ["located", 3], ["the", 3], ["third", 3], ["integer", 0], ["is", 0], ["its", 0], ["starting", 0], ["time", 0], ["and", 0], ["the", 0], ["fourth", 0], ["integer", 0], ["is", 0], ["its", 0], ["frequency", 0], ["output", 0], ["format", 0], ["the", 4], ["first", 3], ["line", 3], ["of", 3], ["output", 3], ["must", 3], ["either", 3], ["consist", 3], ["of", 3], ["the", 3], ["word", 3], ["yes", 3], ["if", 3], ["spaceman", 3], ["spiff", 3], ["can", 3], ["reach", 3], ["his", 3], ["ship", 3], ["safely", 3], ["or", 3], ["the", 3], ["word", 3], ["no", 3], ["if", 3], ["he", 3], ["cannot", 3], ["do", 3], ["so", 3], ["if", 4], ["the", 4], ["output", 4], ["on", 4], ["the", 4], ["first", 4], ["line", 4], ["is", 4], ["yes", 3], ["then", 3], ["the", 3], ["second", 3], ["line", 3], ["should", 3], ["contain", 3], ["a", 3], ["single", 3], ["integer", 3], ["giving", 3], ["the", 3], ["least", 3], ["time", 2], ["in", 2], ["seconds", 2], ["that", 0], ["it", 0], ["takes", 0], ["him", 0], ["to", 0], ["reach", 0], ["his", 0], ["ship", 0], ["safely", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["4", 0], ["1", 0], ["3", 0], ["2", 0], ["1", 0], ["3", 0], ["sample", 0], ["output", 0], ["1", 0], ["yes", 0], ["6", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["5", 0], ["2", 0], ["5", 0], ["1", 0], ["1", 0], ["2", 0], ["4", 0], ["4", 0], ["1", 0], ["2", 0], ["sample", 0], ["output", 0], ["2", 0], ["yes", 0], ["8", 0], ["test", 0], ["data", 0], ["in", 2], ["all", 2], ["subtasks", 2], ["you", 2], ["may", 2], ["assume", 2], ["that", 2], ["2", 3], ["≤", 3], ["n", 3], ["m", 3], ["≤", 3], ["2500", 3], ["all", 3], ["the", 3], ["frequencies", 3], ["are", 3], ["guaranteed", 3], ["to", 3], ["be", 3], ["integers", 3], ["between", 3], ["1", 3], ["and", 3], ["3000", 3], ["inclusive", 3], ["all", 3], ["the", 3], ["starting", 3], ["times", 3], ["are", 3], ["guaranteed", 3], ["to", 3], ["be", 3], ["integers", 3], ["between", 3], ["0", 3], ["and", 3], ["3000", 3], ["inclusive", 3], ["all", 3], ["the", 3], ["coordinates", 3], ["of", 3], ["the", 3], ["blasters", 3], ["are", 3], ["guaranteed", 3], ["to", 3], ["be", 3], ["valid", 3], ["cells", 3], ["in", 3], ["the", 3], ["n×m", 3], ["grid", 3], ["no", 3], ["two", 3], ["blasters", 3], ["will", 3], ["be", 3], ["on", 3], ["the", 3], ["same", 3], ["cell", 3], ["subtask", 3], ["1", 3], ["30", 3], ["marks", 0], ["k", 0], ["1", 0], ["subtask", 0], ["2", 0], ["70", 0], ["marks", 0], ["1", 0], ["≤", 0], ["k", 0], ["≤", 0], ["2500", 0], ["live", 0], ["evaluation", 0], ["data", 0], ["subtask", 0], ["1", 0], ["testcases", 0], ["0", 0], ["1", 0], ["subtask", 0], ["2", 0], ["testcases", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8022130013831259, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.27512678653757616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8870748299319728, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.32891156462585097, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8022130013831259, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.27512678653757616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8870748299319728, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.32891156462585097, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["blasters", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["blasters", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["grid", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["blaster", 0], ["in", 0], ["blasters", 0], ["flag", 0], ["0", 0], ["x", 0], ["y", 0], ["t", 0], ["f", 0], ["blaster", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["grid", 0], ["x", 0], ["y", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["y", 0], ["t", 0], ["abs", 0], ["x", 0], ["i", 0], ["0", 0], ["and", 0], ["i", 0], ["y", 0], ["t", 0], ["abs", 0], ["x", 0], ["i", 0], ["f", 0], ["0", 0], ["if", 0], ["i", 0], ["x", 0], ["flag", 0], ["1", 0], ["grid", 0], ["i", 0], ["y", 0], ["1", 0], ["if", 0], ["i", 0], ["x", 0], ["and", 0], ["flag", 0], ["0", 0], ["break", 0], ["flag", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["j", 0], ["x", 0], ["t", 0], ["abs", 0], ["y", 0], ["j", 0], ["0", 0], ["and", 0], ["j", 0], ["x", 0], ["t", 0], ["abs", 0], ["y", 0], ["j", 0], ["f", 0], ["0", 0], ["if", 0], ["j", 0], ["y", 0], ["flag", 0], ["1", 0], ["grid", 0], ["x", 0], ["j", 0], ["1", 0], ["if", 0], ["j", 0], ["y", 0], ["and", 0], ["flag", 0], ["0", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["grid", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["grid", 0], ["i", 0], ["0", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["if", 0], ["grid", 0], ["0", 0], ["j", 0], ["1", 0], ["1", 0], ["grid", 0], ["0", 0], ["j", 0], ["grid", 0], ["0", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["if", 0], ["grid", 0], ["i", 0], ["j", 0], ["1", 0], ["1", 0], ["and", 0], ["grid", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["grid", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["grid", 0], ["1", 0], ["1", 0], ["0", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["blasters", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["blasters", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["grid", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["blaster", 0], ["in", 0], ["blasters", 0], ["x", 0], ["y", 0], ["t", 0], ["f", 0], ["blaster", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["grid", 0], ["x", 0], ["y", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["y", 0], ["t", 0], ["abs", 0], ["x", 0], ["i", 0], ["0", 0], ["and", 0], ["i", 0], ["y", 0], ["t", 0], ["abs", 0], ["x", 0], ["i", 0], ["f", 0], ["0", 0], ["grid", 0], ["i", 0], ["y", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["j", 0], ["x", 0], ["t", 0], ["abs", 0], ["y", 0], ["j", 0], ["0", 0], ["and", 0], ["j", 0], ["x", 0], ["t", 0], ["abs", 0], ["y", 0], ["j", 0], ["f", 0], ["0", 0], ["grid", 0], ["x", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["grid", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["grid", 0], ["i", 0], ["0", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["if", 0], ["grid", 0], ["0", 0], ["j", 0], ["1", 0], ["1", 0], ["grid", 0], ["0", 0], ["j", 0], ["grid", 0], ["0", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["if", 0], ["grid", 0], ["i", 0], ["j", 0], ["1", 0], ["1", 0], ["and", 0], ["grid", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["grid", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["grid", 0], ["1", 0], ["1", 0], ["0", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["blasters", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["blasters", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["grid", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["blaster", 0], ["in", 0], ["blasters", 0], ["x", 0], ["y", 0], ["t", 0], ["f", 0], ["blaster", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["grid", 0], ["x", 0], ["y", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["y", 0], ["t", 0], ["abs", 0], ["x", 0], ["i", 0], ["f", 0], ["0", 0], ["grid", 0], ["i", 0], ["y", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["j", 0], ["x", 0], ["t", 0], ["abs", 0], ["y", 0], ["j", 0], ["f", 0], ["0", 0], ["grid", 0], ["x", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["grid", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["grid", 0], ["i", 0], ["0", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["if", 0], ["grid", 0], ["0", 0], ["j", 0], ["1", 0], ["1", 0], ["grid", 0], ["0", 0], ["j", 0], ["grid", 0], ["0", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["if", 0], ["grid", 0], ["i", 0], ["j", 0], ["1", 0], ["1", 0], ["and", 0], ["grid", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["grid", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["grid", 0], ["1", 0], ["1", 0], ["0", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["blasters", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["blasters", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["grid", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["blaster", 0], ["in", 0], ["blasters", 0], ["x", 0], ["y", 0], ["t", 0], ["f", 0], ["blaster", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["grid", 0], ["x", 0], ["y", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["y", 0], ["t", 0], ["f", 0], ["abs", 0], ["x", 0], ["i", 0], ["grid", 0], ["i", 0], ["y", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["j", 0], ["x", 0], ["t", 0], ["f", 0], ["abs", 0], ["y", 0], ["j", 0], ["grid", 0], ["x", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["grid", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["grid", 0], ["i", 0], ["0", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["if", 0], ["grid", 0], ["0", 0], ["j", 0], ["1", 0], ["1", 0], ["grid", 0], ["0", 0], ["j", 0], ["grid", 0], ["0", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["if", 0], ["grid", 0], ["i", 0], ["j", 0], ["1", 0], ["1", 0], ["and", 0], ["grid", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["grid", 0], ["i", 0], ["j", 0], ["1", 0], ["if", 0], ["grid", 0], ["1", 0], ["1", 0], ["0", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["def", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["rl", 0], ["stdin", 0], ["readline", 0], ["time", 0], ["taken", 0], ["to", 0], ["reach", 0], ["end", 0], ["is", 0], ["determined", 0], ["purely", 0], ["by", 0], ["size", 0], ["of", 0], ["grid", 0], ["we", 0], ["simply", 0], ["need", 0], ["to", 0], ["determine", 0], ["if", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["reach", 0], ["it", 0], ["create", 0], ["dp", 0], ["table", 0], ["mark", 0], ["all", 0], ["as", 0], ["visitable", 0], ["mark", 0], ["cells", 0], ["with", 0], ["blasters", 0], ["as", 0], ["unvisitable", 0], ["now", 0], ["iterate", 0], ["over", 0], ["blasters", 0], ["for", 0], ["each", 0], ["blaster", 0], ["check", 0], ["every", 0], ["cell", 0], ["in", 0], ["its", 0], ["row", 0], ["and", 0], ["col", 0], ["for", 0], ["each", 0], ["cell", 0], ["there", 0], ["is", 0], ["a", 0], ["definite", 0], ["time", 0], ["at", 0], ["which", 0], ["spaceman", 0], ["can", 0], ["be", 0], ["at", 0], ["it", 0], ["pulse", 0], ["will", 0], ["take", 0], ["time", 0], ["t1", 0], ["extra", 0], ["to", 0], ["reach", 0], ["cell", 0], ["after", 0], ["fire", 0], ["therefore", 0], ["t0", 0], ["should", 0], ["be", 0], ["t1", 0], ["tstart", 0], ["nf", 0], ["hence", 0], ["we", 0], ["mod", 0], ["t0", 0], ["t1", 0], ["tstart", 0], ["with", 0], ["f", 0], ["finally", 0], ["just", 0], ["try", 0], ["to", 0], ["find", 0], ["a", 0], ["path", 0], ["if", 0], ["a", 0], ["path", 0], ["exists", 0], ["simply", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["as", 0], ["the", 0], ["time", 0], ["to", 0], ["reach", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["rl", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["rl", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["dp", 0], ["1", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["b", 0], ["in", 0], ["a", 0], ["b", 0], ["0", 0], ["1", 0], ["b", 0], ["1", 0], ["1", 0], ["dp", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["0", 0], ["x", 0], ["y", 0], ["b", 0], ["0", 0], ["0", 0], ["while", 0], ["y", 0], ["m", 0], ["t", 0], ["cell", 0], ["x", 0], ["y", 0], ["t", 0], ["check", 0], ["t", 0], ["cell", 0], ["b", 0], ["2", 0], ["abs", 0], ["y", 0], ["b", 0], ["1", 0], ["if", 0], ["t", 0], ["check", 0], ["0", 0], ["negative", 0], ["time", 0], ["is", 0], ["impossible", 0], ["y", 0], ["1", 0], ["continue", 0], ["if", 0], ["t", 0], ["check", 0], ["b", 0], ["3", 0], ["0", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["y", 0], ["1", 0], ["x", 0], ["y", 0], ["0", 0], ["b", 0], ["1", 0], ["while", 0], ["x", 0], ["n", 0], ["t", 0], ["cell", 0], ["x", 0], ["y", 0], ["t", 0], ["check", 0], ["t", 0], ["cell", 0], ["b", 0], ["2", 0], ["abs", 0], ["x", 0], ["b", 0], ["0", 0], ["if", 0], ["t", 0], ["check", 0], ["0", 0], ["x", 0], ["1", 0], ["continue", 0], ["if", 0], ["t", 0], ["check", 0], ["b", 0], ["3", 0], ["0", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["dp", 0], ["x", 0], ["0", 0], ["dp", 0], ["x", 0], ["0", 0], ["and", 0], ["dp", 0], ["x", 0], ["1", 0], ["0", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["dp", 0], ["0", 0], ["y", 0], ["dp", 0], ["0", 0], ["y", 0], ["and", 0], ["dp", 0], ["0", 0], ["y", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["dp", 0], ["x", 0], ["y", 0], ["dp", 0], ["x", 0], ["y", 0], ["and", 0], ["dp", 0], ["x", 0], ["1", 0], ["y", 0], ["or", 0], ["dp", 0], ["x", 0], ["y", 0], ["1", 0], ["if", 0], ["dp", 0], ["1", 0], ["1", 0], ["stdout", 0], ["write", 0], ["yes", 0], ["n", 0], ["stdout", 0], ["write", 0], ["str", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["stdout", 0], ["write", 0], ["no", 0], ["main", 0], ["coding", 0], ["utf", 0], ["8", 0], ["created", 0], ["on", 0], ["thu", 0], ["jul", 0], ["16", 0], ["13", 0], ["36", 0], ["30", 0], ["2020", 0], ["author", 0], ["shubham", 0], ["gupta", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["def", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["rl", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["rl", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["rl", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["dp", 0], ["1", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["b", 0], ["in", 0], ["a", 0], ["b", 0], ["0", 0], ["1", 0], ["b", 0], ["1", 0], ["1", 0], ["dp", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["0", 0], ["x", 0], ["y", 0], ["b", 0], ["0", 0], ["0", 0], ["while", 0], ["y", 0], ["m", 0], ["t", 0], ["cell", 0], ["x", 0], ["y", 0], ["t", 0], ["check", 0], ["t", 0], ["cell", 0], ["b", 0], ["2", 0], ["abs", 0], ["y", 0], ["b", 0], ["1", 0], ["if", 0], ["t", 0], ["check", 0], ["0", 0], ["negative", 0], ["time", 0], ["is", 0], ["impossible", 0], ["y", 0], ["1", 0], ["continue", 0], ["if", 0], ["t", 0], ["check", 0], ["b", 0], ["3", 0], ["0", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["y", 0], ["1", 0], ["x", 0], ["y", 0], ["0", 0], ["b", 0], ["1", 0], ["while", 0], ["x", 0], ["n", 0], ["t", 0], ["cell", 0], ["x", 0], ["y", 0], ["t", 0], ["check", 0], ["t", 0], ["cell", 0], ["b", 0], ["2", 0], ["abs", 0], ["x", 0], ["b", 0], ["0", 0], ["if", 0], ["t", 0], ["check", 0], ["0", 0], ["x", 0], ["1", 0], ["continue", 0], ["if", 0], ["t", 0], ["check", 0], ["b", 0], ["3", 0], ["0", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["dp", 0], ["x", 0], ["0", 0], ["dp", 0], ["x", 0], ["0", 0], ["and", 0], ["dp", 0], ["x", 0], ["1", 0], ["0", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["dp", 0], ["0", 0], ["y", 0], ["dp", 0], ["0", 0], ["y", 0], ["and", 0], ["dp", 0], ["0", 0], ["y", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["dp", 0], ["x", 0], ["y", 0], ["dp", 0], ["x", 0], ["y", 0], ["and", 0], ["dp", 0], ["x", 0], ["1", 0], ["y", 0], ["or", 0], ["dp", 0], ["x", 0], ["y", 0], ["1", 0], ["if", 0], ["dp", 0], ["1", 0], ["1", 0], ["stdout", 0], ["write", 0], ["yes", 0], ["n", 0], ["stdout", 0], ["write", 0], ["str", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["stdout", 0], ["write", 0], ["no", 0], ["main", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["def", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["rl", 0], ["stdin", 0], ["readline", 0], ["time", 0], ["taken", 0], ["to", 0], ["reach", 0], ["end", 0], ["is", 0], ["determined", 0], ["purely", 0], ["by", 0], ["size", 0], ["of", 0], ["grid", 0], ["we", 0], ["simply", 0], ["need", 0], ["to", 0], ["determine", 0], ["if", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["reach", 0], ["it", 0], ["create", 0], ["dp", 0], ["table", 0], ["mark", 0], ["all", 0], ["as", 0], ["visitable", 0], ["mark", 0], ["cells", 0], ["with", 0], ["blasters", 0], ["as", 0], ["unvisitable", 0], ["now", 0], ["iterate", 0], ["over", 0], ["blasters", 0], ["for", 0], ["each", 0], ["blaster", 0], ["check", 0], ["every", 0], ["cell", 0], ["in", 0], ["its", 0], ["row", 0], ["and", 0], ["col", 0], ["for", 0], ["each", 0], ["cell", 0], ["there", 0], ["is", 0], ["a", 0], ["definite", 0], ["time", 0], ["at", 0], ["which", 0], ["spaceman", 0], ["can", 0], ["be", 0], ["at", 0], ["it", 0], ["pulse", 0], ["will", 0], ["take", 0], ["time", 0], ["t1", 0], ["extra", 0], ["to", 0], ["reach", 0], ["cell", 0], ["after", 0], ["fire", 0], ["therefore", 0], ["t0", 0], ["should", 0], ["be", 0], ["t1", 0], ["tstart", 0], ["nf", 0], ["hence", 0], ["we", 0], ["mod", 0], ["t0", 0], ["t1", 0], ["tstart", 0], ["with", 0], ["f", 0], ["finally", 0], ["just", 0], ["try", 0], ["to", 0], ["find", 0], ["a", 0], ["path", 0], ["if", 0], ["a", 0], ["path", 0], ["exists", 0], ["simply", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["as", 0], ["the", 0], ["time", 0], ["to", 0], ["reach", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["rl", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["rl", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["dp", 0], ["1", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["b", 0], ["in", 0], ["a", 0], ["b", 0], ["0", 0], ["1", 0], ["b", 0], ["1", 0], ["1", 0], ["dp", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["0", 0], ["x", 0], ["y", 0], ["b", 0], ["0", 0], ["0", 0], ["while", 0], ["y", 0], ["m", 0], ["t", 0], ["cell", 0], ["x", 0], ["y", 0], ["t", 0], ["check", 0], ["t", 0], ["cell", 0], ["b", 0], ["2", 0], ["abs", 0], ["y", 0], ["b", 0], ["1", 0], ["if", 0], ["t", 0], ["check", 0], ["0", 0], ["negative", 0], ["time", 0], ["is", 0], ["impossible", 0], ["y", 0], ["1", 0], ["continue", 0], ["if", 0], ["t", 0], ["check", 0], ["b", 0], ["3", 0], ["0", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["y", 0], ["1", 0], ["x", 0], ["y", 0], ["0", 0], ["b", 0], ["1", 0], ["while", 0], ["x", 0], ["n", 0], ["t", 0], ["cell", 0], ["x", 0], ["y", 0], ["t", 0], ["check", 0], ["t", 0], ["cell", 0], ["b", 0], ["2", 0], ["abs", 0], ["x", 0], ["b", 0], ["0", 0], ["if", 0], ["t", 0], ["check", 0], ["0", 0], ["x", 0], ["1", 0], ["continue", 0], ["if", 0], ["t", 0], ["check", 0], ["b", 0], ["3", 0], ["0", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["dp", 0], ["x", 0], ["0", 0], ["dp", 0], ["x", 0], ["0", 0], ["and", 0], ["dp", 0], ["x", 0], ["1", 0], ["0", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["dp", 0], ["0", 0], ["y", 0], ["dp", 0], ["0", 0], ["y", 0], ["and", 0], ["dp", 0], ["0", 0], ["y", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["dp", 0], ["x", 0], ["y", 0], ["dp", 0], ["x", 0], ["y", 0], ["and", 0], ["dp", 0], ["x", 0], ["1", 0], ["y", 0], ["or", 0], ["dp", 0], ["x", 0], ["y", 0], ["1", 0], ["if", 0], ["dp", 0], ["1", 0], ["1", 0], ["stdout", 0], ["write", 0], ["yes", 0], ["n", 0], ["stdout", 0], ["write", 0], ["str", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["stdout", 0], ["write", 0], ["no", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["ip", 0], ["lambda", 0], ["int", 0], ["w", 0], ["for", 0], ["w", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["w", 0], ["for", 0], ["w", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["sp", 0], ["2", 0], ["if", 0], ["k", 0], ["1", 0], ["else", 0], ["0", 0], ["dp", 0], ["1", 0], ["m", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["x", 0], ["y", 0], ["t", 0], ["f", 0], ["int", 0], ["w", 0], ["for", 0], ["w", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["reach", 0], ["i", 0], ["y", 0], ["2", 0], ["t", 0], ["abs", 0], ["x", 0], ["i", 0], ["sp", 0], ["if", 0], ["reach", 0], ["0", 0], ["and", 0], ["reach", 0], ["f", 0], ["0", 0], ["dp", 0], ["i", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["reach", 0], ["i", 0], ["x", 0], ["2", 0], ["t", 0], ["abs", 0], ["y", 0], ["i", 0], ["sp", 0], ["if", 0], ["reach", 0], ["0", 0], ["and", 0], ["reach", 0], ["f", 0], ["0", 0], ["dp", 0], ["x", 0], ["i", 0], ["0", 9], ["for", 15], ["i", 15], ["in", 2], ["range", 2], ["1", 2], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["dp", 0], ["i", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["and", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["or", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["if", 0], ["dp", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["ip", 0], ["lambda", 0], ["int", 0], ["w", 0], ["for", 0], ["w", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["w", 0], ["for", 0], ["w", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["sp", 0], ["2", 0], ["if", 0], ["k", 0], ["1", 0], ["else", 0], ["0", 0], ["dp", 0], ["1", 0], ["m", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["k", 0], ["x", 0], ["y", 0], ["t", 0], ["f", 0], ["int", 0], ["w", 0], ["for", 0], ["w", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["reach", 0], ["i", 0], ["y", 0], ["2", 0], ["t", 0], ["abs", 0], ["x", 0], ["i", 0], ["sp", 0], ["if", 0], ["reach", 0], ["0", 0], ["and", 0], ["reach", 0], ["f", 0], ["0", 0], ["dp", 0], ["i", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["reach", 0], ["i", 0], ["x", 0], ["2", 0], ["t", 0], ["abs", 0], ["y", 0], ["i", 0], ["sp", 0], ["if", 0], ["reach", 0], ["0", 0], ["and", 0], ["reach", 0], ["f", 0], ["0", 0], ["dp", 0], ["x", 0], ["i", 0], ["0", 9], ["for", 15], ["i", 15], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["cur", 0], ["left", 0], ["up", 0], ["dp", 0], ["i", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["cur", 0], ["left", 0], ["or", 0], ["cur", 0], ["up", 0], ["if", 0], ["dp", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["dt", 0], ["for", 0], ["i", 0], ["in", 0], ["x", 0], ["dt", 0], ["i", 0], ["dt", 0], ["get", 0], ["i", 0], ["0", 0], ["1", 0], ["dt", 0], ["k", 0], ["v", 0], ["for", 0], ["k", 0], ["v", 0], ["in", 0], ["sorted", 0], ["x", 0], ["items", 0], ["key", 0], ["lambda", 0], ["i", 0], ["i", 0], ["1", 0], ["ipnl", 0], ["lambda", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["inp", 0], ["lambda", 0], ["int", 0], ["input", 0], ["ip", 0], ["lambda", 0], ["int", 0], ["w", 0], ["for", 0], ["w", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["k", 0], ["ip", 0], ["laz", 0], ["ip", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["dp", 0], ["1", 1], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["laz", 0], ["x", 0], ["y", 0], ["t", 0], ["f", 0], ["j", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["reach", 0], ["i", 0], ["x", 0], ["t", 0], ["abs", 0], ["y", 0], ["i", 0], ["if", 0], ["reach", 0], ["0", 0], ["and", 0], ["reach", 0], ["f", 0], ["0", 0], ["dp", 0], ["i", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["reach", 0], ["i", 0], ["y", 0], ["t", 0], ["abs", 0], ["x", 0], ["i", 0], ["if", 0], ["reach", 0], ["0", 0], ["and", 0], ["reach", 0], ["f", 0], ["0", 0], ["dp", 0], ["x", 0], ["i", 0], ["0", 9], ["for", 15], ["i", 15], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["cur", 0], ["left", 0], ["up", 0], ["dp", 0], ["i", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["cur", 0], ["left", 0], ["or", 0], ["cur", 0], ["up", 0], ["if", 0], ["dp", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["dt", 0], ["for", 0], ["i", 0], ["in", 0], ["x", 0], ["dt", 0], ["i", 0], ["dt", 0], ["get", 0], ["i", 0], ["0", 0], ["1", 0], ["dt", 0], ["k", 0], ["v", 0], ["for", 0], ["k", 0], ["v", 0], ["in", 0], ["sorted", 0], ["x", 0], ["items", 0], ["key", 0], ["lambda", 0], ["i", 0], ["i", 0], ["1", 0], ["ipnl", 0], ["lambda", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["inp", 0], ["lambda", 0], ["int", 0], ["input", 0], ["ip", 0], ["lambda", 0], ["int", 0], ["w", 0], ["for", 0], ["w", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["k", 0], ["ip", 0], ["laz", 0], ["ip", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["dp", 0], ["1", 1], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["laz", 0], ["x", 0], ["y", 0], ["t", 0], ["f", 0], ["j", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["reach", 0], ["i", 0], ["y", 0], ["t", 0], ["abs", 0], ["x", 0], ["i", 0], ["if", 0], ["reach", 0], ["0", 0], ["and", 0], ["reach", 0], ["f", 0], ["0", 0], ["dp", 0], ["i", 0], ["y", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["reach", 0], ["i", 0], ["x", 0], ["t", 0], ["abs", 0], ["y", 0], ["i", 0], ["if", 0], ["reach", 0], ["0", 0], ["and", 0], ["reach", 0], ["f", 0], ["0", 0], ["dp", 0], ["x", 0], ["i", 0], ["0", 9], ["for", 15], ["i", 15], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["cur", 0], ["left", 0], ["up", 0], ["dp", 0], ["i", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["cur", 0], ["left", 0], ["or", 0], ["cur", 0], ["up", 0], ["if", 0], ["dp", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["intput", 0], ["lambda", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["write", 0], ["your", 0], ["code", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["intput", 0], ["blasters", 0], ["intput", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["grid", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["bx", 0], ["by", 0], ["t", 0], ["f", 0], ["in", 0], ["blasters", 0], ["bx", 0], ["1", 0], ["by", 0], ["1", 0], ["grid", 0], ["by", 0], ["bx", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["x", 0], ["by", 0], ["abs", 0], ["bx", 0], ["x", 0], ["t", 0], ["if", 0], ["k", 0], ["0", 0], ["and", 0], ["k", 0], ["f", 0], ["0", 0], ["grid", 0], ["by", 0], ["x", 0], ["0", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["m", 0], ["k", 0], ["bx", 0], ["y", 0], ["abs", 0], ["by", 0], ["y", 0], ["t", 0], ["if", 0], ["k", 0], ["0", 0], ["and", 0], ["k", 0], ["f", 0], ["0", 0], ["grid", 0], ["y", 0], ["bx", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["grid", 0], ["0", 0], ["x", 0], ["grid", 0], ["0", 0], ["x", 0], ["and", 0], ["grid", 0], ["0", 0], ["x", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["grid", 0], ["y", 0], ["0", 0], ["grid", 0], ["y", 0], ["0", 0], ["and", 0], ["grid", 0], ["y", 0], ["1", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["grid", 0], ["y", 0], ["x", 0], ["grid", 0], ["y", 0], ["x", 0], ["and", 0], ["grid", 0], ["y", 0], ["x", 0], ["1", 0], ["or", 0], ["grid", 0], ["y", 0], ["1", 0], ["x", 0], ["if", 0], ["grid", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["intput", 0], ["lambda", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["write", 0], ["your", 0], ["code", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["intput", 0], ["blasters", 0], ["intput", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["grid", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["bx", 0], ["by", 0], ["t", 0], ["f", 0], ["in", 0], ["blasters", 0], ["bx", 0], ["1", 0], ["by", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["x", 0], ["by", 0], ["abs", 0], ["bx", 0], ["x", 0], ["t", 0], ["f", 0], ["if", 0], ["k", 0], ["0", 0], ["grid", 0], ["by", 0], ["x", 0], ["0", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["m", 0], ["k", 0], ["bx", 0], ["y", 0], ["abs", 0], ["by", 0], ["y", 0], ["t", 0], ["f", 0], ["if", 0], ["k", 0], ["0", 0], ["grid", 0], ["y", 0], ["bx", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["grid", 0], ["0", 0], ["x", 0], ["grid", 0], ["0", 0], ["x", 0], ["and", 0], ["grid", 0], ["0", 0], ["x", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["grid", 0], ["y", 0], ["0", 0], ["grid", 0], ["y", 0], ["0", 0], ["and", 0], ["grid", 0], ["y", 0], ["1", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["grid", 0], ["y", 0], ["x", 0], ["grid", 0], ["y", 0], ["x", 0], ["and", 0], ["grid", 0], ["y", 0], ["x", 0], ["1", 0], ["or", 0], ["grid", 0], ["y", 0], ["1", 0], ["x", 0], ["if", 0], ["grid", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["sys", 0], ["import", 0], ["setrecursionlimit", 0], ["setrecursionlimit", 0], ["int", 0], ["1e9", 0], ["intput", 0], ["lambda", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["write", 0], ["your", 0], ["code", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["intput", 0], ["blasters", 0], ["intput", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["grid", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["bx", 0], ["by", 0], ["t", 0], ["f", 0], ["in", 0], ["blasters", 0], ["bx", 0], ["1", 0], ["by", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["x", 0], ["by", 0], ["abs", 0], ["bx", 0], ["x", 0], ["t", 0], ["if", 0], ["k", 0], ["0", 0], ["and", 0], ["k", 0], ["f", 0], ["0", 0], ["grid", 0], ["by", 0], ["x", 0], ["0", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["m", 0], ["k", 0], ["bx", 0], ["y", 0], ["abs", 0], ["by", 0], ["y", 0], ["t", 0], ["if", 0], ["k", 0], ["0", 0], ["and", 0], ["k", 0], ["f", 0], ["0", 0], ["grid", 0], ["y", 0], ["bx", 0], ["0", 0], ["def", 0], ["solve", 0], ["x", 0], ["y", 0], ["if", 0], ["not", 0], ["grid", 0], ["y", 0], ["x", 0], ["return", 0], ["0", 0], ["if", 0], ["x", 0], ["n", 0], ["1", 0], ["and", 0], ["y", 0], ["m", 0], ["1", 0], ["return", 0], ["1", 0], ["res", 0], ["0", 0], ["if", 0], ["x", 0], ["n", 0], ["1", 0], ["res", 0], ["solve", 0], ["x", 0], ["1", 0], ["y", 0], ["if", 0], ["y", 0], ["m", 0], ["1", 0], ["res", 0], ["res", 0], ["or", 0], ["solve", 0], ["x", 0], ["y", 0], ["1", 0], ["return", 0], ["res", 0], ["if", 0], ["solve", 0], ["0", 0], ["0", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["intput", 0], ["lambda", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["write", 0], ["your", 0], ["code", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["intput", 0], ["blasters", 0], ["intput", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["grid", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["bx", 0], ["by", 0], ["t", 0], ["f", 0], ["in", 0], ["blasters", 0], ["bx", 0], ["1", 0], ["by", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["x", 0], ["by", 0], ["abs", 0], ["bx", 0], ["x", 0], ["t", 0], ["if", 0], ["k", 0], ["0", 0], ["and", 0], ["k", 0], ["f", 0], ["0", 0], ["grid", 0], ["by", 0], ["x", 0], ["0", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["m", 0], ["k", 0], ["bx", 0], ["y", 0], ["abs", 0], ["by", 0], ["y", 0], ["t", 0], ["if", 0], ["k", 0], ["0", 0], ["and", 0], ["k", 0], ["f", 0], ["0", 0], ["grid", 0], ["y", 0], ["bx", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["grid", 0], ["0", 0], ["x", 0], ["grid", 0], ["0", 0], ["x", 0], ["and", 0], ["grid", 0], ["0", 0], ["x", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["grid", 0], ["y", 0], ["0", 0], ["grid", 0], ["y", 0], ["0", 0], ["and", 0], ["grid", 0], ["y", 0], ["1", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["grid", 0], ["y", 0], ["x", 0], ["grid", 0], ["y", 0], ["x", 0], ["and", 0], ["grid", 0], ["y", 0], ["x", 0], ["1", 0], ["or", 0], ["grid", 0], ["y", 0], ["1", 0], ["x", 0], ["if", 0], ["grid", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["intput", 0], ["lambda", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["write", 0], ["your", 0], ["code", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["intput", 0], ["blasters", 0], ["intput", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["grid", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["bx", 0], ["by", 0], ["t", 0], ["f", 0], ["in", 0], ["blasters", 0], ["bx", 0], ["1", 0], ["by", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["x", 0], ["by", 0], ["abs", 0], ["bx", 0], ["x", 0], ["t", 0], ["if", 0], ["k", 0], ["0", 0], ["and", 0], ["k", 0], ["f", 0], ["0", 0], ["grid", 0], ["by", 0], ["x", 0], ["0", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["m", 0], ["k", 0], ["bx", 0], ["y", 0], ["abs", 0], ["by", 0], ["y", 0], ["t", 0], ["if", 0], ["k", 0], ["0", 0], ["and", 0], ["k", 0], ["f", 0], ["0", 0], ["grid", 0], ["y", 0], ["bx", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["grid", 0], ["0", 0], ["x", 0], ["grid", 0], ["0", 0], ["x", 0], ["and", 0], ["grid", 0], ["0", 0], ["x", 0], ["1", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["grid", 0], ["0", 0], ["y", 0], ["grid", 0], ["0", 0], ["y", 0], ["and", 0], ["grid", 0], ["0", 0], ["y", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["grid", 0], ["y", 0], ["x", 0], ["grid", 0], ["y", 0], ["x", 0], ["and", 0], ["grid", 0], ["y", 0], ["x", 0], ["1", 0], ["or", 0], ["grid", 0], ["y", 0], ["1", 0], ["x", 0], ["if", 0], ["grid", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["main", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["rl", 0], ["stdin", 0], ["readline", 0], ["time", 0], ["taken", 0], ["to", 0], ["reach", 0], ["end", 0], ["is", 0], ["determined", 0], ["purely", 0], ["by", 0], ["size", 0], ["of", 0], ["grid", 0], ["we", 0], ["simply", 0], ["need", 0], ["to", 0], ["determine", 0], ["if", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["reach", 0], ["it", 0], ["create", 0], ["dp", 0], ["table", 0], ["mark", 0], ["all", 0], ["as", 0], ["visitable", 0], ["mark", 0], ["cells", 0], ["with", 0], ["blasters", 0], ["as", 0], ["unvisitable", 0], ["now", 0], ["iterate", 0], ["over", 0], ["blasters", 0], ["for", 0], ["each", 0], ["blaster", 0], ["check", 0], ["every", 0], ["cell", 0], ["in", 0], ["its", 0], ["row", 0], ["and", 0], ["col", 0], ["for", 0], ["each", 0], ["cell", 0], ["there", 0], ["is", 0], ["a", 0], ["definite", 0], ["time", 0], ["at", 0], ["which", 0], ["spaceman", 0], ["can", 0], ["be", 0], ["at", 0], ["it", 0], ["pulse", 0], ["will", 0], ["take", 0], ["time", 0], ["t1", 0], ["extra", 0], ["to", 0], ["reach", 0], ["cell", 0], ["after", 0], ["fire", 0], ["therefore", 0], ["t0", 0], ["should", 0], ["be", 0], ["t1", 0], ["tstart", 0], ["nf", 0], ["hence", 0], ["we", 0], ["mod", 0], ["t0", 0], ["t1", 0], ["tstart", 0], ["with", 0], ["f", 0], ["finally", 0], ["just", 0], ["try", 0], ["to", 0], ["find", 0], ["a", 0], ["path", 0], ["if", 0], ["a", 0], ["path", 0], ["exists", 0], ["simply", 0], ["print", 0], ["n", 0], ["m", 0], ["2", 0], ["as", 0], ["the", 0], ["time", 0], ["to", 0], ["reach", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["rl", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["rl", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["dp", 0], ["1", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["b", 0], ["in", 0], ["a", 0], ["b", 0], ["0", 0], ["1", 0], ["b", 0], ["1", 0], ["1", 0], ["dp", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["0", 0], ["x", 0], ["y", 0], ["b", 0], ["0", 0], ["0", 0], ["while", 0], ["y", 0], ["m", 0], ["t", 0], ["cell", 0], ["x", 0], ["y", 0], ["t", 0], ["check", 0], ["t", 0], ["cell", 0], ["b", 0], ["2", 0], ["abs", 0], ["y", 0], ["b", 0], ["1", 0], ["if", 0], ["t", 0], ["check", 0], ["0", 0], ["negative", 0], ["time", 0], ["is", 0], ["impossible", 0], ["y", 0], ["1", 0], ["continue", 0], ["if", 0], ["t", 0], ["check", 0], ["b", 0], ["3", 0], ["0", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["y", 0], ["1", 0], ["x", 0], ["y", 0], ["0", 0], ["b", 0], ["1", 0], ["while", 0], ["x", 0], ["n", 0], ["t", 0], ["cell", 0], ["x", 0], ["y", 0], ["t", 0], ["check", 0], ["t", 0], ["cell", 0], ["b", 0], ["2", 0], ["abs", 0], ["x", 0], ["b", 0], ["0", 0], ["if", 0], ["t", 0], ["check", 0], ["0", 0], ["x", 0], ["1", 0], ["continue", 0], ["if", 0], ["t", 0], ["check", 0], ["b", 0], ["3", 0], ["0", 0], ["dp", 0], ["x", 0], ["y", 0], ["0", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["dp", 0], ["x", 0], ["0", 0], ["dp", 0], ["x", 0], ["0", 0], ["and", 0], ["dp", 0], ["x", 0], ["1", 0], ["0", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["dp", 0], ["0", 0], ["y", 0], ["dp", 0], ["0", 0], ["y", 0], ["and", 0], ["dp", 0], ["0", 0], ["y", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["dp", 0], ["x", 0], ["y", 0], ["dp", 0], ["x", 0], ["y", 0], ["and", 0], ["dp", 0], ["x", 0], ["1", 0], ["y", 0], ["or", 0], ["dp", 0], ["x", 0], ["y", 0], ["1", 0], ["if", 0], ["dp", 0], ["1", 0], ["1", 0], ["stdout", 0], ["write", 0], ["yes", 0], ["n", 0], ["stdout", 0], ["write", 0], ["str", 0], ["n", 0], ["m", 0], ["2", 0], ["else", 0], ["stdout", 0], ["write", 0], ["no", 0], ["main", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bom", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["bom", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["n", 0], ["m", 0], ["2", 0], ["if", 0], ["k", 0], ["3", 0], ["or", 0], ["k", 0], ["4", 0], ["print", 0], ["no", 0], ["else", 0], ["can", 0], ["true", 0], ["for", 0], ["b", 0], ["in", 0], ["bom", 0], ["y", 0], ["x", 0], ["t", 0], ["f", 0], ["b", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["x", 0], ["1", 0], ["can", 0], ["false", 0], ["if", 0], ["can", 0], ["sets", 0], ["1", 0], ["else", 0], ["sets", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["count", 0], ["1", 0], ["for", 0], ["b", 0], ["in", 0], ["bom", 0], ["y", 0], ["x", 0], ["t", 0], ["f", 0], ["b", 0], ["gap", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["s", 0], ["dura", 0], ["i", 0], ["t", 0], ["1", 0], ["if", 0], ["s", 0], ["dura", 0], ["0", 0], ["gap", 0], ["abs", 0], ["gap", 0], ["temp", 0], ["s", 0], ["dura", 0], ["gap", 0], ["if", 0], ["temp", 0], ["0", 0], ["and", 0], ["temp", 0], ["f", 0], ["0", 0], ["if", 0], ["1", 0], ["abs", 0], ["i", 0], ["x", 0], ["1", 0], ["n", 0], ["sets", 0], ["discard", 0], ["x", 0], ["if", 0], ["1", 0], ["abs", 0], ["i", 0], ["y", 0], ["1", 0], ["m", 0], ["sets", 0], ["discard", 0], ["abs", 0], ["i", 0], ["y", 0], ["1", 0], ["if", 0], ["gap", 0], ["0", 0], ["sets", 0], ["discard", 0], ["x", 0], ["if", 0], ["len", 0], ["sets", 0], ["0", 0], ["break", 0], ["print", 0], ["sets", 0], ["for", 0], ["v", 0], ["in", 0], ["list", 0], ["sets", 0], ["if", 0], ["v", 0], ["i", 0], ["n", 0], ["1", 0], ["sets", 0], ["remove", 0], ["v", 0], ["if", 0], ["v", 0], ["1", 0], ["i", 0], ["n", 0], ["1", 0], ["sets", 0], ["add", 0], ["v", 0], ["1", 0], ["sets", 0], ["discard", 0], ["m", 0], ["1", 0], ["if", 0], ["m", 0], ["in", 0], ["sets", 0], ["print", 0], ["yes", 0], ["print", 0], ["count", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bom", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["bom", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["n", 0], ["m", 0], ["2", 0], ["if", 0], ["k", 0], ["1", 0], ["print", 0], ["no", 0], ["else", 0], ["can", 0], ["true", 0], ["for", 0], ["b", 0], ["in", 0], ["bom", 0], ["y", 0], ["x", 0], ["t", 0], ["f", 0], ["b", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["x", 0], ["1", 0], ["can", 0], ["false", 0], ["if", 0], ["can", 0], ["sets", 0], ["1", 0], ["else", 0], ["sets", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["count", 0], ["1", 0], ["for", 0], ["b", 0], ["in", 0], ["bom", 0], ["y", 0], ["x", 0], ["t", 0], ["f", 0], ["b", 0], ["gap", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["s", 0], ["dura", 0], ["i", 0], ["t", 0], ["1", 0], ["if", 0], ["s", 0], ["dura", 0], ["0", 0], ["gap", 0], ["abs", 0], ["gap", 0], ["temp", 0], ["s", 0], ["dura", 0], ["gap", 0], ["if", 0], ["temp", 0], ["0", 0], ["and", 0], ["temp", 0], ["f", 0], ["0", 0], ["if", 0], ["1", 0], ["abs", 0], ["i", 0], ["x", 0], ["1", 0], ["n", 0], ["sets", 0], ["discard", 0], ["x", 0], ["if", 0], ["1", 0], ["abs", 0], ["i", 0], ["y", 0], ["1", 0], ["m", 0], ["sets", 0], ["discard", 0], ["abs", 0], ["i", 0], ["y", 0], ["1", 0], ["if", 0], ["gap", 0], ["0", 0], ["sets", 0], ["discard", 0], ["x", 0], ["if", 0], ["len", 0], ["sets", 0], ["0", 0], ["break", 0], ["print", 0], ["sets", 0], ["for", 0], ["v", 0], ["in", 0], ["list", 0], ["sets", 0], ["if", 0], ["v", 0], ["i", 0], ["n", 0], ["1", 0], ["sets", 0], ["remove", 0], ["v", 0], ["if", 0], ["v", 0], ["1", 0], ["i", 0], ["n", 0], ["1", 0], ["sets", 0], ["add", 0], ["v", 0], ["1", 0], ["sets", 0], ["discard", 0], ["m", 0], ["1", 0], ["if", 0], ["m", 0], ["in", 0], ["sets", 0], ["print", 0], ["yes", 0], ["print", 0], ["count", 0], ["else", 0], ["print", 0], ["no", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bom", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["bom", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["n", 0], ["m", 0], ["2", 0], ["can", 0], ["true", 0], ["for", 0], ["b", 0], ["in", 0], ["bom", 0], ["y", 0], ["x", 0], ["t", 0], ["f", 0], ["b", 0], ["if", 0], ["y", 0], ["1", 0], ["and", 0], ["x", 0], ["1", 0], ["can", 0], ["false", 0], ["if", 0], ["can", 0], ["sets", 0], ["1", 0], ["else", 0], ["sets", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["count", 0], ["1", 0], ["for", 0], ["b", 0], ["in", 0], ["bom", 0], ["y", 0], ["x", 0], ["t", 0], ["f", 0], ["b", 0], ["gap", 0], ["x", 0], ["y", 0], ["i", 0], ["1", 0], ["s", 0], ["dura", 0], ["i", 0], ["t", 0], ["1", 0], ["if", 0], ["s", 0], ["dura", 0], ["0", 0], ["gap", 0], ["abs", 0], ["gap", 0], ["temp", 0], ["s", 0], ["dura", 0], ["gap", 0], ["if", 0], ["temp", 0], ["0", 0], ["and", 0], ["temp", 0], ["f", 0], ["0", 0], ["if", 0], ["1", 0], ["abs", 0], ["i", 0], ["x", 0], ["1", 0], ["n", 0], ["sets", 0], ["discard", 0], ["x", 0], ["if", 0], ["1", 0], ["abs", 0], ["i", 0], ["y", 0], ["1", 0], ["m", 0], ["sets", 0], ["discard", 0], ["abs", 0], ["i", 0], ["y", 0], ["1", 0], ["if", 0], ["gap", 0], ["0", 0], ["sets", 0], ["discard", 0], ["x", 0], ["if", 0], ["len", 0], ["sets", 0], ["0", 0], ["break", 0], ["print", 0], ["sets", 0], ["for", 0], ["v", 0], ["in", 0], ["list", 0], ["sets", 0], ["if", 0], ["v", 0], ["i", 0], ["n", 0], ["1", 0], ["sets", 0], ["remove", 0], ["v", 0], ["if", 0], ["v", 0], ["1", 0], ["i", 0], ["n", 0], ["1", 0], ["sets", 0], ["add", 0], ["v", 0], ["1", 0], ["sets", 0], ["discard", 0], ["m", 0], ["1", 0], ["if", 0], ["m", 0], ["in", 0], ["sets", 0], ["print", 0], ["yes", 0], ["print", 0], ["count", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.004259584064144325, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0011219688744118711, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.022233325006245315, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.009701057540178208, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0022550739163117012, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.000988334864556363, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.022233325006245315, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.009701057540178208, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\n=====Problem Statement=====\nYou are given an integer N followed by N email addresses. Your task is to print a list containing only valid email addresses in lexicographical order.\nValid email addresses must follow these rules:\nIt must have the username@websitename.extension format type.\nThe username can only contain letters, digits, dashes and underscores.\nThe website name can only have letters and digits.\nThe maximum length of the extension is 3. \n\nConcept\n\nA filter takes a function returning True or False and applies it to a sequence, returning a list of only those members of the sequence where the function returned True. A Lambda function can be used with filters.\n\nLet's say you have to make a list of the squares of integers from 0 to 9 (both included).\n\n>> l = list(range(10))\n>> l = list(map(lambda x:x*x, l))\n\nNow, you only require those elements that are greater than 10 but less than 80.\n\n>> l = list(filter(lambda x: x > 10 and x < 80, l))\n\nEasy, isn't it?\n\n=====Input Format=====\nThe first line of input is the integer N, the number of email addresses.\nN lines follow, each containing a string.\n\n\n=====Constraints=====\nEach line is a non-empty string.\n\n=====Output Format=====\nOutput a list containing the valid email addresses in lexicographical order. If the list is empty, just output an empty list, [].\ndef fun(s):\n    # return True if s is a valid email, else return False\n\ndef filter_mail(emails):\n    return list(filter(fun, emails))\n\nif __name__ == '__main__':\n    n = int(input())\n    emails = []\n    for _ in range(n):\n        emails.append(input())\n\nfiltered_emails = filter_mail(emails)\nfiltered_emails.sort()\nprint(filtered_emails)\n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport re\nn=int(input())\nar=[]\nfor i in range(0,n):\n\ts=input()\n\tt=re.search(r\"^[a-zA-Z][\\w-]*@[a-zA-Z0-9]+\\.[a-zA-Z]{1,3}$\",s)\n\tif t:\n\t\tar.append(s)\nar.sort()        \nprint(ar)\n"], "id": "id5045"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5045", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["problem", 0], ["statement", 0], ["you", 1], ["are", 1], ["given", 1], ["an", 1], ["integer", 1], ["n", 1], ["followed", 1], ["by", 1], ["n", 2], ["email", 2], ["addresses", 2], ["your", 2], ["task", 2], ["is", 2], ["to", 2], ["print", 2], ["a", 2], ["list", 2], ["containing", 2], ["only", 2], ["valid", 2], ["email", 2], ["addresses", 2], ["in", 2], ["lexicographical", 2], ["order", 2], ["valid", 2], ["email", 2], ["addresses", 2], ["must", 2], ["follow", 2], ["these", 2], ["rules", 2], ["it", 2], ["must", 2], ["have", 2], ["the", 2], ["username", 2], ["websitename", 2], ["extension", 2], ["format", 2], ["type", 2], ["the", 2], ["username", 2], ["can", 2], ["only", 2], ["contain", 2], ["letters", 2], ["digits", 2], ["dashes", 2], ["and", 2], ["underscores", 2], ["the", 2], ["website", 2], ["name", 2], ["can", 2], ["only", 1], ["have", 0], ["letters", 0], ["and", 0], ["digits", 0], ["the", 0], ["maximum", 0], ["length", 0], ["of", 0], ["the", 0], ["extension", 0], ["is", 0], ["3", 1], ["concept", 1], ["a", 1], ["filter", 3], ["takes", 4], ["a", 4], ["function", 4], ["returning", 4], ["true", 4], ["or", 4], ["false", 4], ["and", 4], ["applies", 4], ["it", 4], ["to", 4], ["a", 1], ["sequence", 1], ["returning", 1], ["a", 1], ["list", 1], ["of", 1], ["only", 1], ["those", 1], ["members", 1], ["of", 1], ["the", 1], ["sequence", 1], ["where", 1], ["the", 1], ["function", 1], ["returned", 1], ["true", 1], ["a", 1], ["lambda", 1], ["function", 1], ["can", 1], ["be", 1], ["used", 1], ["with", 1], ["filters", 1], ["let", 1], ["s", 1], ["say", 1], ["you", 0], ["have", 0], ["to", 0], ["make", 0], ["a", 0], ["list", 0], ["of", 0], ["the", 0], ["squares", 0], ["of", 0], ["integers", 0], ["from", 0], ["0", 0], ["to", 0], ["9", 0], ["both", 0], ["included", 0], ["l", 1], ["list", 1], ["range", 1], ["10", 1], ["l", 1], ["list", 1], ["map", 1], ["lambda", 1], ["x", 1], ["x", 1], ["x", 0], ["l", 0], ["now", 0], ["you", 0], ["only", 0], ["require", 0], ["those", 0], ["elements", 0], ["that", 0], ["are", 0], ["greater", 0], ["than", 0], ["10", 0], ["but", 0], ["less", 0], ["than", 0], ["80", 0], ["l", 1], ["list", 1], ["filter", 1], ["lambda", 1], ["x", 1], ["x", 1], ["10", 1], ["and", 1], ["x", 1], ["80", 1], ["l", 1], ["easy", 1], ["isn", 1], ["t", 0], ["it", 0], ["input", 1], ["format", 1], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["is", 1], ["the", 1], ["integer", 1], ["n", 1], ["the", 1], ["number", 1], ["of", 1], ["email", 1], ["addresses", 1], ["n", 2], ["lines", 2], ["follow", 2], ["each", 2], ["containing", 2], ["a", 2], ["string", 2], ["constraints", 2], ["each", 2], ["line", 2], ["is", 2], ["a", 2], ["non", 2], ["empty", 2], ["string", 2], ["output", 2], ["format", 2], ["output", 2], ["a", 2], ["list", 2], ["containing", 2], ["the", 2], ["valid", 2], ["email", 2], ["addresses", 2], ["in", 2], ["lexicographical", 0], ["order", 0], ["if", 0], ["the", 0], ["list", 0], ["is", 0], ["empty", 0], ["just", 0], ["output", 0], ["an", 0], ["empty", 0], ["list", 0], ["def", 0], ["fun", 0], ["s", 0], ["return", 0], ["true", 0], ["if", 0], ["s", 0], ["is", 0], ["a", 0], ["valid", 0], ["email", 0], ["else", 0], ["return", 0], ["false", 0], ["def", 1], ["filter", 1], ["mail", 1], ["emails", 1], ["return", 1], ["list", 1], ["filter", 1], ["fun", 1], ["emails", 1], ["if", 1], ["name", 1], ["main", 1], ["n", 1], ["int", 1], ["input", 1], ["emails", 1], ["for", 1], ["in", 1], ["range", 1], ["n", 1], ["emails", 1], ["append", 1], ["input", 0], ["filtered", 0], ["emails", 0], ["filter", 0], ["mail", 0], ["emails", 0], ["filtered", 0], ["emails", 0], ["sort", 0], ["print", 0], ["filtered", 0], ["emails", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.684981684981685, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5167887667887668, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.8701754385964913, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.8701754385964913, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.684981684981685, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5167887667887668, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.8701754385964913, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.8701754385964913, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 2], ["enter", 0], ["your", 0], ["code", 0], ["here", 0], ["read", 0], ["input", 0], ["from", 0], ["stdin", 0], ["print", 0], ["output", 0], ["to", 0], ["stdout", 0], ["import", 0], ["re", 0], ["n", 0], ["int", 0], ["input", 0], ["ar", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["s", 0], ["input", 0], ["t", 0], ["re", 0], ["search", 0], ["r", 0], ["a", 0], ["za", 0], ["z", 0], ["w", 0], ["a", 0], ["za", 0], ["z0", 0], ["9", 0], ["a", 0], ["za", 0], ["z", 0], ["1", 0], ["3", 0], ["s", 0], ["if", 0], ["t", 0], ["ar", 0], ["append", 0], ["s", 0], ["ar", 0], ["sort", 0], ["print", 0], ["ar", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.023255813953488372, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.011627906976744186, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.23636363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11818181818181818, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.023255813953488372, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.011627906976744186, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.23636363636363636, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11818181818181818, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
{"instance": {"input": "\nQUESTION:\nA few years ago, Hitagi encountered a giant crab, who stole the whole of her body weight. Ever since, she tried to avoid contact with others, for fear that this secret might be noticed.\n\nTo get rid of the oddity and recover her weight, a special integer sequence is needed. Hitagi's sequence has been broken for a long time, but now Kaiki provides an opportunity.\n\nHitagi's sequence a has a length of n. Lost elements in it are denoted by zeros. Kaiki provides another sequence b, whose length k equals the number of lost elements in a (i.e. the number of zeros). Hitagi is to replace each zero in a with an element from b so that each element in b should be used exactly once. Hitagi knows, however, that, apart from 0, no integer occurs in a and b more than once in total.\n\nIf the resulting sequence is not an increasing sequence, then it has the power to recover Hitagi from the oddity. You are to determine whether this is possible, or Kaiki's sequence is just another fake. In other words, you should detect whether it is possible to replace each zero in a with an integer from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.\n\n\n-----Input-----\n\nThe first line of input contains two space-separated positive integers n (2 ≤ n ≤ 100) and k (1 ≤ k ≤ n) — the lengths of sequence a and b respectively.\n\nThe second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 200) — Hitagi's broken sequence with exactly k zero elements.\n\nThe third line contains k space-separated integers b_1, b_2, ..., b_{k} (1 ≤ b_{i} ≤ 200) — the elements to fill into Hitagi's sequence.\n\nInput guarantees that apart from 0, no integer occurs in a and b more than once in total.\n\n\n-----Output-----\n\nOutput \"Yes\" if it's possible to replace zeros in a with elements in b and make the resulting sequence not increasing, and \"No\" otherwise.\n\n\n-----Examples-----\nInput\n4 2\n11 0 0 14\n5 4\n\nOutput\nYes\n\nInput\n6 1\n2 3 0 8 9 10\n5\n\nOutput\nNo\n\nInput\n4 1\n8 94 0 4\n89\n\nOutput\nYes\n\nInput\n7 7\n0 0 0 0 0 0 0\n1 2 3 4 5 6 7\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first sample:   Sequence a is 11, 0, 0, 14.  Two of the elements are lost, and the candidates in b are 5 and 4.  There are two possible resulting sequences: 11, 5, 4, 14 and 11, 4, 5, 14, both of which fulfill the requirements. Thus the answer is \"Yes\". \n\nIn the second sample, the only possible resulting sequence is 2, 3, 5, 8, 9, 10, which is an increasing sequence and therefore invalid.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\n\nn, k = list(map(int, input().split()))\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nb.sort(reverse=True)\n\nres = []\ncur_b = 0\nfor a_i in a:\n\tif a_i != 0:\n\t\tres.append(a_i)\n\telse:\n\t\tres.append(b[cur_b])\n\t\tcur_b += 1\n\nif res != list(sorted(res)):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "R=lambda:list(map(int,input().split()))\ninput()\na=R()\nb=sorted(list(R()),reverse=True)\np=0\nfor i in range(len(a)):\n\tif a[i]==0:\n\t\ta[i]=b[p]\n\t\tp+=1\nprint('Yes'if any(a[i]<=a[i-1] for i in range(1,len(a)))else'No')\n", "# int(input())\n# map(int,input().split())\n# list(map(int,input().split()))\n# for _ in range(int(input())):\n\nn,m = list(map(int,input().split()))\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nb.sort(reverse = True)\n\nc1 = 0\nfor i in range(n):\n\tif a[i] == 0:\n\t\ta[i] = b[c1]\n\t\tc1 += 1\n\nfor i in range(1,n):\n\tif a[i] <= a[i-1]:\n\t\tprint(\"Yes\")\n\t\tbreak\nelse:\n\tprint(\"No\")\n", "import sys\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nneed = a.count(0)\nb.sort(reverse = True)\nptr = 0\nfor i in range(n):\n\tif (a[i] == 0):\n\t\ta[i] = b[ptr]\n\t\tptr += 1\nz = a[:]\nz.sort()\nif (z == a):\n\tprint('No')\nelse:\n\tprint('Yes')\n", "a, b = map(int, input().split())\ns1 = list(map(int, input().split()))\ns2 = list(map(int, input().split()))\ns2.sort()\nfor i in range(a):\n\tif s1[i] == 0:\n\t\ts1[i] = s2.pop()\nif s1 == sorted(s1):\n\tprint(\"No\")\nelse:\n\tprint(\"Yes\")\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nif k == 1:\n\tind = a.index(0)\n\ta[ind] = b[0]\n\tst = False\n\tfor i in range(n - 1):\n\t\tif a[i] >= a[i + 1]:\n\t\t\tst = True\n\t\t\tbreak\n\tif st:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\nelse:\n\tprint('Yes')\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nb = list(reversed(sorted(b)))\nj = 0\nfor i in range(n):\n\tif a[i] == 0:\n\t\ta[i] = b[j]\n\t\tj += 1\nans = 'No'\nfor i in range(n - 1):\n\tif a[i] >= a[i + 1]:\n\t\tans = 'Yes'\n\t\tbreak\nprint(ans)\n", "n, k = map(int, input().split())\n\na = [-10 ** 9] + list(map(int, input().split())) + [10 ** 9]\nif k > 1:\n\tprint('Yes')\nelse:\n\ti = a.index(0)\n\tb = int(input())\n\t\n\tf = True\n\tfor j in range(1, n):\n\t\tif a[j] <= a[j - 1] and a[j] != 0:\n\t\t\tf = False\n\t\t\t\n\tif f and a[i - 1] < b and a[i + 1] > b:\n\t\tprint('No')\n\telse:\n\t\tprint('Yes')\n", "n,k = list(map(int,input().split()))\nai = list(map(int,input().split()))\nbi = list(map(int,input().split()))\nbi.sort()\nj = k-1\nfor i in range(n):\n\tif ai[i] == 0:\n\t\tai[i] = bi[j]\n\t\tj -= 1\n\nans = 0\nfor i in range(1,n):\n\tif ai[i-1] >= ai[i]:\n\t\tans = 1\nif ans  == 1:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "n, k=[int(i) for i in input().split()]\na=[int(i) for i in input().split()]\nb=[int(i) for i in input().split()]\nif len(b) != 1:\n\tprint('Yes')\nelse:\n\ta[a.index(0)] = b[0]\n\tfor i in range(len(a)-1):\n\t\tif a[i]>a[i+1]:\n\t\t\tprint('Yes')\n\t\t\tbreak\n\telse:\n\t\tprint('No')\n", "input()\nseq = [int(num) for num in input().split()]\nnums = reversed(sorted(map(int, input().split())))\n\nind = 0\nfor num in nums:\n\twhile seq[ind] > 0:\n\t\tind += 1\n\tseq[ind] = num\n\nfor prev, nxt in zip(seq, seq[1:]):\n\tif prev >= nxt:\n\t\tprint('Yes')\n\t\treturn\nprint('No')\n", "from sys import stdin, stdout\n\n\nn,k = list(map(int,stdin.readline().rstrip().split()))\na = [int(x) for x in stdin.readline().rstrip().split()]\nb = [int(x) for x in stdin.readline().rstrip().split()]\n\nif k>1:\n\tprint('Yes')\nelse:\n\tzeroInd = a.index(0)\n\ta[zeroInd] = b[0]\n\taSort = sorted(a)\n\tidentical = True\n\tfor i in range(n):\n\t\tif aSort[i]!=a[i]:\n\t\t\tidentical=False\n\tif identical:\n\t\tprint('No')\n\telse:\n\t\tprint('Yes')\n", "n, k = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nif k > 1:\n\tprint(\"Yes\")\nelse:\n\ta[a.index(0)] = b[0]\n\tfor i in range(1, n):\n\t\tif a[i] <= a[i - 1]:\n\t\t\tprint(\"Yes\")\n\t\t\tbreak\n\telse:\n\t\tprint(\"No\")\n", "n1,n2 = list(map(int,input().split()))\nn = list(map(int,input().split()))\nk = sorted(list(map(int,input().split())))[::-1]\nt = 0\nfor i in range(n1):\n\tif n[i] ==0:\n\t\tn[i] = k[t]\n\t\tt += 1\nif sorted(n) == n:\n\tprint(\"No\")\nelse:\n\tprint(\"Yes\")\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nb.sort(reverse=True)\nj = -1\nfor i in range(len(a)):\n\tif a[i] == 0:\n\t\tj += 1\n\t\ta[i] = b[j]\n\t\tif j == len(b):\n\t\t\tbreak\nflag = 0\nfor i in range(len(a) - 1):\n\tif a[i] >= a[i + 1]:\n\t\tflag = 1\n\t\tbreak\nif flag == 1:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "import sys\n\n\ndef main():\n\tn,k = map(int,sys.stdin.readline().split())\n\t\n\ta = list(map(int, sys.stdin.readline().split()))\n\tb = list(map(int, sys.stdin.readline().split()))\n\tb.sort(reverse=True)\n\tj = 0 \n\tfor i in range(n):\n\t\tif a[i] ==0:\n\t\t\ta[i] = b[j]\n\t\t\tj+=1\n\n\tp = a[0]\n\tfor i in range(1,n):\n\t\tif a[i] <= p:\n\t\t\tprint(\"Yes\")\n\t\t\treturn \n\t\tp = a[i]\n\t\n\tprint(\"No\")\n\t   \n\n\nmain()\n", "I = lambda: list(map(int, input().split()))\nn, k = I()\na, b = list(I()), list(I())\nif k == 1:\n\tc = list(a)\n\tc[c.index(0)] = b[0]\n\tif sorted(c) == c:\n\t\tprint('No')\n\t\treturn\nprint('Yes')\n", "n,k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nif k > 1:\n\tprint('Yes')\n\treturn\nelse:\n\tfor i in range(len(a)):\n\t\tif a[i] == 0:\n\t\t\ta[i] = b[0]\n\t\t\tbreak\n\tfor i in range(len(a) - 1):\n\t\tif a[i] > a[i + 1]:\n\t\t\tprint('Yes')\n\t\t\treturn\nprint('No')\n", "n,k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nc = [i for i in a if i!=0]\n\nif (c != sorted(c)):\n\tprint(\"Yes\")\nelse:\n\tif k == 1:\n\t\tfor i in range(len(a)):\n\t\t\tif a[i] == 0:\n\t\t\t\ta[i] = b[0]\n\t\tif a == sorted(a):\n\t\t\tprint(\"No\")\n\t\telse:\n\t\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"Yes\")\n\t\t\n\t\n", "n, k = map(int, input().split())\na, b = list(map(int, input().split())), list(map(int, input().split()))\nif k > 1:\n\tprint(\"Yes\")\nelse:\n\ta[a.index(0)] = b[0]\n\tif a == sorted(a):\n\t\tprint(\"No\")\n\telse:\n\t\tprint(\"Yes\")\n", "input()\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nn =len(a)\nk =len(b)\n\nb.sort()\n\ni = k-1\nc = []\nfor e in a:\n\tif e==0:\n\t\tc.append(b[i])\n\t\ti-=1\n\telse:\n\t\tc.append(e)\n\nyes = False\n\nfor i in range(1,n):\n\tif c[i] < c[i-1]:\n\t\tyes = True\n\nif yes:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\n", "n, k = map(int, input().split())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nif a.count(0) > 1:\n\tprint(\"Yes\")\nelse:\n\ta[a.index(0)] = b[0]\n\tif a == sorted(a):\n\t\tprint(\"No\")\n\telse:\n\t\tprint(\"Yes\")\n", "n,k = map(int,input().split())\nl1 = list(map(int,input().split()))\nl2 = list(map(int,input().split()))\nif(k!=1):\n\tprint('Yes')\n\treturn\nfor i in range(n):\n\tif(l1[i]==0):\n\t\tl1[i]=l2[0]\n\t\tbreak\nok = True\nfor i in range(n-1):\n\tif(l1[i+1]<l1[i]):\n\t\tok = False\n\t\tbreak\nif(ok==True):\n\tprint('No')\nelse:\n\tprint('Yes')\n"], "id": "id6530"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6530", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 2], ["few", 2], ["years", 2], ["ago", 2], ["hitagi", 2], ["encountered", 2], ["a", 2], ["giant", 2], ["crab", 2], ["who", 2], ["stole", 2], ["the", 2], ["whole", 2], ["of", 2], ["her", 2], ["body", 2], ["weight", 2], ["ever", 2], ["since", 2], ["she", 2], ["tried", 2], ["to", 2], ["avoid", 2], ["contact", 2], ["with", 2], ["others", 2], ["for", 2], ["fear", 2], ["that", 2], ["this", 2], ["secret", 2], ["might", 2], ["be", 2], ["noticed", 2], ["to", 2], ["get", 2], ["rid", 2], ["of", 2], ["the", 1], ["oddity", 1], ["and", 1], ["recover", 1], ["her", 1], ["weight", 1], ["a", 1], ["special", 1], ["integer", 1], ["sequence", 1], ["is", 1], ["needed", 1], ["hitagi", 1], ["s", 1], ["sequence", 2], ["has", 2], ["been", 1], ["broken", 1], ["for", 1], ["a", 1], ["long", 1], ["time", 1], ["but", 1], ["now", 1], ["kaiki", 1], ["provides", 1], ["an", 1], ["opportunity", 1], ["hitagi", 1], ["s", 1], ["sequence", 2], ["a", 2], ["has", 2], ["a", 2], ["length", 2], ["of", 2], ["n", 2], ["lost", 2], ["elements", 2], ["in", 2], ["it", 2], ["are", 2], ["denoted", 2], ["by", 2], ["zeros", 2], ["kaiki", 2], ["provides", 2], ["another", 2], ["sequence", 2], ["b", 2], ["whose", 2], ["length", 2], ["k", 2], ["equals", 2], ["the", 2], ["number", 2], ["of", 2], ["lost", 2], ["elements", 2], ["in", 2], ["a", 2], ["i", 2], ["e", 2], ["the", 2], ["number", 2], ["of", 2], ["zeros", 2], ["hitagi", 2], ["is", 2], ["to", 2], ["replace", 2], ["each", 2], ["zero", 2], ["in", 2], ["a", 2], ["with", 2], ["an", 2], ["element", 2], ["from", 2], ["b", 2], ["so", 2], ["that", 2], ["each", 2], ["element", 2], ["in", 2], ["b", 2], ["should", 2], ["be", 2], ["used", 2], ["exactly", 2], ["once", 2], ["hitagi", 2], ["knows", 2], ["however", 2], ["that", 4], ["apart", 4], ["from", 4], ["0", 4], ["no", 2], ["integer", 2], ["occurs", 2], ["in", 2], ["a", 2], ["and", 2], ["b", 2], ["more", 2], ["than", 2], ["once", 2], ["in", 2], ["total", 2], ["if", 2], ["the", 2], ["resulting", 2], ["sequence", 2], ["is", 2], ["not", 2], ["an", 2], ["increasing", 2], ["sequence", 2], ["then", 2], ["it", 2], ["has", 2], ["the", 2], ["power", 2], ["to", 2], ["recover", 2], ["hitagi", 2], ["from", 1], ["the", 1], ["oddity", 1], ["you", 1], ["are", 1], ["to", 1], ["determine", 1], ["whether", 1], ["this", 1], ["is", 1], ["possible", 1], ["or", 1], ["kaiki", 1], ["s", 1], ["sequence", 2], ["is", 2], ["just", 2], ["another", 2], ["fake", 2], ["in", 2], ["other", 2], ["words", 2], ["you", 2], ["should", 2], ["detect", 2], ["whether", 2], ["it", 2], ["is", 2], ["possible", 2], ["to", 2], ["replace", 2], ["each", 2], ["zero", 2], ["in", 2], ["a", 2], ["with", 2], ["an", 2], ["integer", 2], ["from", 2], ["b", 2], ["so", 2], ["that", 2], ["each", 2], ["integer", 2], ["from", 2], ["b", 0], ["is", 0], ["used", 0], ["exactly", 0], ["once", 0], ["and", 0], ["the", 0], ["resulting", 0], ["sequence", 0], ["is", 0], ["not", 0], ["increasing", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 2], ["of", 2], ["input", 2], ["contains", 2], ["two", 2], ["space", 2], ["separated", 2], ["positive", 2], ["integers", 2], ["n", 2], ["2", 2], ["≤", 2], ["n", 2], ["≤", 2], ["100", 2], ["and", 2], ["k", 2], ["1", 1], ["≤", 1], ["k", 1], ["≤", 1], ["n", 1], ["—", 1], ["the", 1], ["lengths", 1], ["of", 1], ["sequence", 1], ["a", 0], ["and", 0], ["b", 0], ["respectively", 0], ["the", 1], ["second", 1], ["line", 0], ["contains", 0], ["n", 0], ["space", 0], ["separated", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["0", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 1], ["200", 1], ["—", 1], ["hitagi", 1], ["s", 1], ["broken", 2], ["sequence", 2], ["with", 2], ["exactly", 0], ["k", 0], ["zero", 0], ["elements", 0], ["the", 0], ["third", 0], ["line", 0], ["contains", 0], ["k", 0], ["space", 0], ["separated", 0], ["integers", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["b", 0], ["k", 0], ["1", 0], ["≤", 0], ["b", 0], ["i", 0], ["≤", 1], ["200", 1], ["—", 1], ["the", 1], ["elements", 1], ["to", 1], ["fill", 1], ["into", 1], ["hitagi", 1], ["s", 1], ["sequence", 2], ["input", 2], ["guarantees", 2], ["that", 4], ["apart", 4], ["from", 4], ["0", 4], ["no", 2], ["integer", 0], ["occurs", 0], ["in", 0], ["a", 0], ["and", 0], ["b", 0], ["more", 0], ["than", 0], ["once", 0], ["in", 0], ["total", 0], ["output", 0], ["output", 1], ["yes", 1], ["if", 1], ["it", 1], ["s", 1], ["possible", 2], ["to", 2], ["replace", 2], ["zeros", 2], ["in", 2], ["a", 2], ["with", 1], ["elements", 1], ["in", 0], ["b", 0], ["and", 0], ["make", 0], ["the", 0], ["resulting", 0], ["sequence", 0], ["not", 0], ["increasing", 0], ["and", 0], ["no", 0], ["otherwise", 0], ["examples", 0], ["input", 0], ["4", 0], ["2", 0], ["11", 0], ["0", 0], ["0", 0], ["14", 0], ["5", 0], ["4", 0], ["output", 0], ["yes", 0], ["input", 0], ["6", 0], ["1", 0], ["2", 0], ["3", 0], ["0", 0], ["8", 0], ["9", 0], ["10", 0], ["5", 0], ["output", 0], ["no", 0], ["input", 0], ["4", 0], ["1", 0], ["8", 0], ["94", 0], ["0", 0], ["4", 0], ["89", 0], ["output", 0], ["yes", 0], ["input", 0], ["7", 0], ["7", 0], ["0", 371], ["0", 394], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["output", 0], ["yes", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["sample", 1], ["sequence", 1], ["a", 1], ["is", 1], ["11", 1], ["0", 1], ["0", 1], ["14", 1], ["two", 1], ["of", 1], ["the", 1], ["elements", 1], ["are", 1], ["lost", 1], ["and", 1], ["the", 1], ["candidates", 1], ["in", 1], ["b", 1], ["are", 1], ["5", 1], ["and", 1], ["4", 1], ["there", 1], ["are", 1], ["two", 1], ["possible", 1], ["resulting", 1], ["sequences", 1], ["11", 1], ["5", 1], ["4", 1], ["14", 1], ["and", 1], ["11", 1], ["4", 1], ["5", 1], ["14", 1], ["both", 1], ["of", 1], ["which", 1], ["fulfill", 1], ["the", 1], ["requirements", 1], ["thus", 1], ["the", 1], ["answer", 1], ["is", 1], ["yes", 1], ["in", 1], ["the", 1], ["second", 1], ["sample", 1], ["the", 1], ["only", 1], ["possible", 1], ["resulting", 1], ["sequence", 1], ["is", 1], ["2", 1], ["3", 1], ["5", 0], ["8", 0], ["9", 0], ["10", 0], ["which", 0], ["is", 0], ["an", 0], ["increasing", 0], ["sequence", 0], ["and", 0], ["therefore", 0], ["invalid", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7090163934426229, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4918140030509339, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.868, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7830754716981134, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7049180327868853, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4918032786885246, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.84, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.783, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["res", 0], ["cur", 0], ["b", 0], ["0", 0], ["for", 0], ["a", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["res", 0], ["append", 0], ["a", 0], ["i", 0], ["else", 0], ["res", 0], ["append", 0], ["b", 0], ["cur", 0], ["b", 0], ["cur", 0], ["b", 0], ["1", 0], ["if", 0], ["res", 0], ["list", 0], ["sorted", 0], ["res", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["r", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["input", 0], ["a", 0], ["r", 0], ["b", 0], ["sorted", 0], ["list", 0], ["r", 0], ["reverse", 0], ["true", 0], ["p", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["b", 0], ["p", 0], ["p", 0], ["1", 0], ["print", 0], ["yes", 0], ["if", 0], ["any", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["a", 0], ["else", 0], ["no", 0], ["int", 0], ["input", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["c1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["b", 0], ["c1", 0], ["c1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["need", 0], ["a", 0], ["count", 0], ["0", 0], ["b", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ptr", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["b", 0], ["ptr", 0], ["ptr", 0], ["1", 0], ["z", 0], ["a", 0], ["z", 0], ["sort", 0], ["if", 0], ["z", 0], ["a", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s2", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["if", 0], ["s1", 0], ["i", 0], ["0", 0], ["s1", 0], ["i", 0], ["s2", 0], ["pop", 0], ["if", 0], ["s1", 0], ["sorted", 0], ["s1", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["1", 0], ["ind", 0], ["a", 0], ["index", 0], ["0", 0], ["a", 0], ["ind", 0], ["b", 0], ["0", 0], ["st", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["st", 0], ["true", 0], ["break", 0], ["if", 0], ["st", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["reversed", 0], ["sorted", 0], ["b", 0], ["j", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["ans", 0], ["no", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["ans", 0], ["yes", 0], ["break", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["10", 0], ["9", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["10", 0], ["9", 0], ["if", 0], ["k", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["i", 0], ["a", 0], ["index", 0], ["0", 0], ["b", 0], ["int", 0], ["input", 0], ["f", 0], ["true", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["a", 0], ["j", 0], ["1", 0], ["and", 0], ["a", 0], ["j", 0], ["0", 0], ["f", 0], ["false", 0], ["if", 0], ["f", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 0], ["b", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 0], ["b", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ai", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bi", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bi", 0], ["sort", 0], ["j", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ai", 0], ["i", 0], ["0", 0], ["ai", 0], ["i", 0], ["bi", 0], ["j", 0], ["j", 0], ["1", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["ai", 0], ["i", 0], ["1", 0], ["ai", 0], ["i", 0], ["ans", 0], ["1", 0], ["if", 0], ["ans", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["len", 0], ["b", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["a", 0], ["a", 0], ["index", 0], ["0", 0], ["b", 0], ["0", 0], ["for", 11], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["input", 0], ["seq", 0], ["int", 0], ["num", 0], ["for", 0], ["num", 0], ["in", 0], ["input", 0], ["split", 0], ["nums", 0], ["reversed", 0], ["sorted", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ind", 0], ["0", 0], ["for", 0], ["num", 0], ["in", 0], ["nums", 0], ["while", 0], ["seq", 0], ["ind", 0], ["0", 0], ["ind", 0], ["1", 0], ["seq", 0], ["ind", 0], ["num", 0], ["for", 0], ["prev", 0], ["nxt", 0], ["in", 0], ["zip", 0], ["seq", 0], ["seq", 0], ["1", 0], ["if", 0], ["prev", 0], ["nxt", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["if", 0], ["k", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["zeroind", 0], ["a", 0], ["index", 0], ["0", 0], ["a", 0], ["zeroind", 0], ["b", 0], ["0", 0], ["asort", 0], ["sorted", 0], ["a", 0], ["identical", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["asort", 0], ["i", 0], ["a", 0], ["i", 0], ["identical", 0], ["false", 0], ["if", 0], ["identical", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["a", 0], ["a", 0], ["index", 0], ["0", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["n1", 0], ["n2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["1", 0], ["t", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n1", 0], ["if", 0], ["n", 0], ["i", 0], ["0", 0], ["n", 0], ["i", 0], ["k", 0], ["t", 0], ["t", 0], ["1", 0], ["if", 0], ["sorted", 0], ["n", 0], ["n", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["j", 0], ["1", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["if", 0], ["j", 0], ["len", 0], ["b", 0], ["break", 0], ["flag", 0], ["0", 0], ["for", 11], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["flag", 0], ["1", 0], ["break", 0], ["if", 0], ["flag", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["def", 0], ["main", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["b", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["j", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["b", 0], ["j", 0], ["j", 0], ["1", 0], ["p", 0], ["a", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["p", 0], ["print", 0], ["yes", 0], ["return", 0], ["p", 0], ["a", 0], ["i", 0], ["print", 0], ["no", 0], ["main", 0], ["i", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["i", 0], ["a", 0], ["b", 0], ["list", 0], ["i", 0], ["list", 0], ["i", 0], ["if", 0], ["k", 0], ["1", 0], ["c", 0], ["list", 0], ["a", 0], ["c", 0], ["c", 0], ["index", 0], ["0", 0], ["b", 0], ["0", 0], ["if", 0], ["sorted", 0], ["c", 0], ["c", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["b", 0], ["0", 0], ["break", 0], ["for", 11], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["c", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["0", 0], ["if", 0], ["c", 0], ["sorted", 0], ["c", 0], ["print", 0], ["yes", 0], ["else", 0], ["if", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["b", 0], ["0", 0], ["if", 0], ["a", 0], ["sorted", 0], ["a", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["a", 0], ["a", 0], ["index", 0], ["0", 0], ["b", 0], ["0", 0], ["if", 0], ["a", 0], ["sorted", 0], ["a", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["len", 0], ["a", 0], ["k", 0], ["len", 0], ["b", 0], ["b", 0], ["sort", 0], ["i", 0], ["k", 0], ["1", 0], ["c", 0], ["for", 0], ["e", 0], ["in", 0], ["a", 0], ["if", 0], ["e", 0], ["0", 0], ["c", 0], ["append", 0], ["b", 0], ["i", 0], ["i", 0], ["1", 0], ["else", 0], ["c", 0], ["append", 0], ["e", 0], ["yes", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["c", 0], ["i", 0], ["c", 0], ["i", 0], ["1", 0], ["yes", 0], ["true", 0], ["if", 0], ["yes", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["count", 0], ["0", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["a", 0], ["a", 0], ["index", 0], ["0", 0], ["b", 0], ["0", 0], ["if", 0], ["a", 0], ["sorted", 0], ["a", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l1", 0], ["i", 0], ["0", 0], ["l1", 0], ["i", 0], ["l2", 0], ["0", 0], ["break", 0], ["ok", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["l1", 0], ["i", 0], ["1", 0], ["l1", 0], ["i", 0], ["ok", 0], ["false", 0], ["break", 0], ["if", 0], ["ok", 0], ["true", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.002276176024279211, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0002069250931162919, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.029323308270676692, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0026657552973342433, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}}
