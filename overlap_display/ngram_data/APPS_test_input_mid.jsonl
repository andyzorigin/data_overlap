{"instance": {"input": "\nQUESTION:\nDanny has a hand-held game of Yahtzee that he likes to play (how 90’s!). The object of Yahztee is to score points by placing the result of rolls of $5$ dice into one of $13$ categories. The categories are listed below, along with how you score points for each category:\n\nCategory\n\nScoring\n\nCategory\n\nScoring\n\n$1$’s\n\n$1$ point for each $1$\n\n$3$-of-a-Kind\n\ntotal of all $5$ dice\n\n$2$’s\n\n$2$ points for each $2$\n\n$4$-of-a-Kind\n\ntotal of all $5$ dice\n\n$3$’s\n\n$3$ points for each $3$\n\nFull House\n\n$25$\n\n$4$’s\n\n$4$ points for each $4$\n\nSmall Straight\n\n$30$\n\n$5$’s\n\n$5$ points for each $5$\n\nLong Straight\n\n$40$\n\n$6$’s\n\n$6$ points for each $6$\n\nChance\n\ntotal of all $5$ dice  \n\nYahtzee\n\n$50$\n\nA $3$(or $4$)-of-a-Kind is any $5$ dice where at least three (or four) show the same value. A Full House consists of $3$ dice with the same value and the other two with the same value (different from the first value); a Small Straight is four consecutive values on any of four of the dice, a Long Straight is five consecutive values, and a Yahtzee is all five dice showing the same value. Finally the Chance category can be used for any set of five dice. For example, if the five dice showed four $2$’s and one $5$, you would score $8$ points if you put it in the $2$’s category, $5$ points if you put it in the $5$’s category, and $13$ points if you put it in either the $3$-of-Kind, $4$-of-a-Kind or Chance categories. If you put it in any other category you would get $0$ points.\n\nA game consists of $13$ rounds. At the start of each round, you roll all $5$ dice. You can either assign the $5$ dice to any of the unused categories or (more likely) re-roll any number of the dice (even all $5$ if you like). You get to do this one more time and after (at most) the third roll you must place the dice in an unused category. After $13$ rounds, all the categories have been used and you total up the points you got for each category.\n\nIn regular Yahtzee you have your choice of which of the scoring categories to use after every round – in fact, the decision on which category to use is one of the challenges of Yahtzee. Danny normally plays this way, but as we said he plays A LOT of Yahtzee, so sometimes he like to switch things up a bit. One of his favorite variations is something he calls sequential yahtzee. In this version, the only category you can use after the first set of rolls is the $1$’s (the first category on his hand-held game); after this, you must use the $2$’s for your second category, and so on (in the order the categories are given in the table above) until you reach the Yahtzee category.\n\nFor example, suppose there’s a glitch in Danny’s game and the dice only roll $1$’s (it is a pretty old game). After the first round Danny has (what else) a set of five $1$’s. In regular Yahtzee he could score $50$ points for a Yahtzee, but in sequential yahtzee he must put it in the $1$’s category and scores $5$ points. After he rolls five $1$’s again, he must put it in the $2$’s category and scores $0$. He scores $0$ for the next $4$ rounds, putting his five $1$’s in the $3$’s, $4$’s, $5$’s and $6$’s category. He gets $5$ points for each of the next two rounds, placing his five $1$’s first in the $3$-of-a-Kind and then in the $4$-Of-A-Kind. He gets nothing in the next two rounds, scores $5$ points for the Chance category and then FINALLY gets $50$ points for a Yahtzee in the $13$th round. All together he scores $70$ points\n\nDanny keeps track of all the dice rolls in the game and often wonders if he could have done better than he did in a game of sequential yahtzee, assuming that the same overall sequence of dice appears regardless of the way he chooses to re-roll dice in any given round. Another example should make things clear. Suppose the sequence of dice is that of the second sample input. If Danny assigns the first five dice to the “$1$’s” category he will get a score of $4$, but if he re-rolls the $3$, obtaining another $1$, his score will improve to $5$. In round $2$, if he assigns the next $5$ dice his score for the “$2$’s” category will be $4$, but if he re-rolls the $4$, $5$, and $6$ (obtaining $1$, $2$, and $3$), and then re-rolls these three new dice again, he obtains three more $2$s for an improved score of $10$ in the second category. At the end of the game, the sequence of five $1$s yields a yahtzee; the final $4$ is not used. The best score obtainable for this sequence of dice is $340$.\n\nYour job is simple: given a sequence of consecutive dice rolls, what’s the maximum score possible in a game of sequential yahtzee? Well, maybe it’s just the description of the problem that’s simple.\n\n-----Input-----\nInput starts with a line containing an integer $n$ ($65 \\leq n \\leq 195$) indicating the number of dice rolls. Following this, on one or more lines, are the $n$ dice rolls, all values between $1$ and $6$ inclusive.\n\n-----Output-----\nDisplay the maximum possible sequential yahtzee score using the given dice rolls, filling in all $13$ categories. Not all the dice rolls need to be used, but those that are must be consecutive starting with the first roll.\n\n-----Examples-----\nSample Input:\n65\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\nSample Output:\n70\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9347"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9347", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["danny", 0], ["has", 0], ["a", 0], ["hand", 0], ["held", 0], ["game", 0], ["of", 0], ["yahtzee", 0], ["that", 0], ["he", 0], ["likes", 0], ["to", 0], ["play", 0], ["how", 0], ["90’s", 0], ["the", 0], ["object", 0], ["of", 0], ["yahztee", 0], ["is", 0], ["to", 0], ["score", 0], ["points", 0], ["by", 0], ["placing", 0], ["the", 0], ["result", 0], ["of", 0], ["rolls", 0], ["of", 0], ["5", 0], ["dice", 0], ["into", 0], ["one", 0], ["of", 0], ["13", 0], ["categories", 0], ["the", 0], ["categories", 0], ["are", 0], ["listed", 0], ["below", 0], ["along", 0], ["with", 0], ["how", 0], ["you", 0], ["score", 0], ["points", 0], ["for", 0], ["each", 0], ["category", 0], ["category", 0], ["scoring", 0], ["category", 0], ["scoring", 0], ["1", 0], ["’s", 0], ["1", 0], ["point", 0], ["for", 0], ["each", 0], ["1", 0], ["3", 0], ["of", 0], ["a", 0], ["kind", 0], ["total", 0], ["of", 0], ["all", 0], ["5", 0], ["dice", 0], ["2", 0], ["’s", 0], ["2", 0], ["points", 0], ["for", 0], ["each", 0], ["2", 0], ["4", 0], ["of", 0], ["a", 0], ["kind", 0], ["total", 0], ["of", 0], ["all", 0], ["5", 0], ["dice", 0], ["3", 0], ["’s", 0], ["3", 0], ["points", 0], ["for", 0], ["each", 0], ["3", 0], ["full", 0], ["house", 0], ["25", 0], ["4", 0], ["’s", 0], ["4", 0], ["points", 0], ["for", 0], ["each", 0], ["4", 0], ["small", 0], ["straight", 0], ["30", 0], ["5", 0], ["’s", 0], ["5", 0], ["points", 0], ["for", 0], ["each", 0], ["5", 0], ["long", 0], ["straight", 0], ["40", 0], ["6", 0], ["’s", 0], ["6", 0], ["points", 0], ["for", 0], ["each", 0], ["6", 0], ["chance", 0], ["total", 0], ["of", 0], ["all", 0], ["5", 0], ["dice", 0], ["yahtzee", 0], ["50", 0], ["a", 1], ["3", 1], ["or", 1], ["4", 1], ["of", 1], ["a", 1], ["kind", 1], ["is", 1], ["any", 1], ["5", 1], ["dice", 1], ["where", 1], ["at", 1], ["least", 1], ["three", 1], ["or", 1], ["four", 1], ["show", 1], ["the", 1], ["same", 1], ["value", 1], ["a", 1], ["full", 1], ["house", 1], ["consists", 1], ["of", 1], ["3", 1], ["dice", 1], ["with", 1], ["the", 1], ["same", 1], ["value", 1], ["and", 1], ["the", 1], ["other", 1], ["two", 1], ["with", 1], ["the", 1], ["same", 1], ["value", 1], ["different", 1], ["from", 1], ["the", 1], ["first", 1], ["value", 1], ["a", 1], ["small", 1], ["straight", 1], ["is", 1], ["four", 1], ["consecutive", 1], ["values", 1], ["on", 1], ["any", 1], ["of", 1], ["four", 1], ["of", 1], ["the", 1], ["dice", 1], ["a", 1], ["long", 1], ["straight", 1], ["is", 1], ["five", 1], ["consecutive", 1], ["values", 1], ["and", 1], ["a", 1], ["yahtzee", 1], ["is", 1], ["all", 1], ["five", 1], ["dice", 1], ["showing", 1], ["the", 1], ["same", 1], ["value", 1], ["finally", 1], ["the", 1], ["chance", 1], ["category", 1], ["can", 1], ["be", 1], ["used", 1], ["for", 1], ["any", 1], ["set", 1], ["of", 1], ["five", 1], ["dice", 1], ["for", 1], ["example", 1], ["if", 1], ["the", 1], ["five", 1], ["dice", 1], ["showed", 1], ["four", 1], ["2", 1], ["’s", 1], ["and", 1], ["one", 1], ["5", 1], ["you", 1], ["would", 1], ["score", 1], ["8", 1], ["points", 1], ["if", 1], ["you", 1], ["put", 1], ["it", 1], ["in", 1], ["the", 1], ["2", 1], ["’s", 1], ["category", 1], ["5", 1], ["points", 1], ["if", 1], ["you", 1], ["put", 1], ["it", 1], ["in", 1], ["the", 1], ["5", 1], ["’s", 1], ["category", 1], ["and", 1], ["13", 1], ["points", 1], ["if", 1], ["you", 1], ["put", 1], ["it", 1], ["in", 1], ["either", 1], ["the", 1], ["3", 1], ["of", 1], ["kind", 1], ["4", 1], ["of", 1], ["a", 1], ["kind", 1], ["or", 1], ["chance", 1], ["categories", 1], ["if", 1], ["you", 1], ["put", 1], ["it", 1], ["in", 1], ["any", 1], ["other", 1], ["category", 1], ["you", 1], ["would", 1], ["get", 1], ["0", 1], ["points", 1], ["a", 1], ["game", 1], ["consists", 1], ["of", 1], ["13", 1], ["rounds", 1], ["at", 1], ["the", 1], ["start", 1], ["of", 1], ["each", 1], ["round", 1], ["you", 1], ["roll", 1], ["all", 1], ["5", 1], ["dice", 1], ["you", 1], ["can", 1], ["either", 1], ["assign", 1], ["the", 1], ["5", 1], ["dice", 1], ["to", 1], ["any", 1], ["of", 1], ["the", 1], ["unused", 1], ["categories", 1], ["or", 1], ["more", 1], ["likely", 1], ["re", 1], ["roll", 1], ["any", 1], ["number", 1], ["of", 1], ["the", 1], ["dice", 1], ["even", 1], ["all", 1], ["5", 1], ["if", 1], ["you", 1], ["like", 1], ["you", 1], ["get", 1], ["to", 1], ["do", 1], ["this", 1], ["one", 1], ["more", 1], ["time", 1], ["and", 1], ["after", 1], ["at", 1], ["most", 1], ["the", 1], ["third", 1], ["roll", 1], ["you", 1], ["must", 1], ["place", 1], ["the", 1], ["dice", 1], ["in", 1], ["an", 1], ["unused", 1], ["category", 1], ["after", 1], ["13", 1], ["rounds", 1], ["all", 1], ["the", 1], ["categories", 1], ["have", 1], ["been", 1], ["used", 1], ["and", 1], ["you", 1], ["total", 1], ["up", 1], ["the", 1], ["points", 1], ["you", 1], ["got", 1], ["for", 1], ["each", 1], ["category", 1], ["in", 1], ["regular", 1], ["yahtzee", 1], ["you", 1], ["have", 1], ["your", 1], ["choice", 1], ["of", 1], ["which", 1], ["of", 1], ["the", 1], ["scoring", 1], ["categories", 1], ["to", 1], ["use", 1], ["after", 1], ["every", 1], ["round", 1], ["–", 1], ["in", 1], ["fact", 1], ["the", 1], ["decision", 1], ["on", 1], ["which", 1], ["category", 1], ["to", 1], ["use", 1], ["is", 1], ["one", 1], ["of", 1], ["the", 1], ["challenges", 1], ["of", 1], ["yahtzee", 1], ["danny", 1], ["normally", 1], ["plays", 1], ["this", 1], ["way", 1], ["but", 1], ["as", 1], ["we", 1], ["said", 1], ["he", 1], ["plays", 1], ["a", 1], ["lot", 1], ["of", 1], ["yahtzee", 1], ["so", 1], ["sometimes", 1], ["he", 1], ["like", 1], ["to", 1], ["switch", 1], ["things", 1], ["up", 1], ["a", 1], ["bit", 1], ["one", 1], ["of", 1], ["his", 1], ["favorite", 1], ["variations", 1], ["is", 1], ["something", 1], ["he", 1], ["calls", 1], ["sequential", 1], ["yahtzee", 1], ["in", 1], ["this", 1], ["version", 1], ["the", 1], ["only", 1], ["category", 1], ["you", 1], ["can", 1], ["use", 1], ["after", 1], ["the", 1], ["first", 1], ["set", 1], ["of", 1], ["rolls", 1], ["is", 1], ["the", 1], ["1", 1], ["’s", 1], ["the", 1], ["first", 1], ["category", 1], ["on", 1], ["his", 1], ["hand", 1], ["held", 1], ["game", 1], ["after", 1], ["this", 1], ["you", 1], ["must", 1], ["use", 1], ["the", 1], ["2", 1], ["’s", 1], ["for", 1], ["your", 1], ["second", 1], ["category", 1], ["and", 1], ["so", 1], ["on", 1], ["in", 1], ["the", 1], ["order", 1], ["the", 1], ["categories", 1], ["are", 0], ["given", 0], ["in", 0], ["the", 0], ["table", 0], ["above", 0], ["until", 0], ["you", 0], ["reach", 0], ["the", 0], ["yahtzee", 0], ["category", 0], ["for", 0], ["example", 0], ["suppose", 0], ["there’s", 0], ["a", 0], ["glitch", 0], ["in", 0], ["danny’s", 0], ["game", 0], ["and", 0], ["the", 0], ["dice", 0], ["only", 0], ["roll", 0], ["1", 0], ["’s", 0], ["it", 0], ["is", 0], ["a", 0], ["pretty", 0], ["old", 0], ["game", 0], ["after", 0], ["the", 0], ["first", 0], ["round", 0], ["danny", 0], ["has", 0], ["what", 0], ["else", 0], ["a", 0], ["set", 0], ["of", 0], ["five", 0], ["1", 0], ["’s", 0], ["in", 0], ["regular", 0], ["yahtzee", 0], ["he", 0], ["could", 0], ["score", 0], ["50", 0], ["points", 0], ["for", 0], ["a", 0], ["yahtzee", 0], ["but", 0], ["in", 0], ["sequential", 0], ["yahtzee", 0], ["he", 0], ["must", 0], ["put", 0], ["it", 0], ["in", 0], ["the", 0], ["1", 0], ["’s", 0], ["category", 0], ["and", 0], ["scores", 0], ["5", 0], ["points", 0], ["after", 0], ["he", 0], ["rolls", 0], ["five", 0], ["1", 0], ["’s", 0], ["again", 0], ["he", 0], ["must", 0], ["put", 0], ["it", 0], ["in", 0], ["the", 0], ["2", 0], ["’s", 0], ["category", 0], ["and", 0], ["scores", 0], ["0", 0], ["he", 0], ["scores", 0], ["0", 0], ["for", 0], ["the", 0], ["next", 0], ["4", 0], ["rounds", 0], ["putting", 0], ["his", 0], ["five", 0], ["1", 0], ["’s", 0], ["in", 0], ["the", 0], ["3", 0], ["’s", 0], ["4", 0], ["’s", 0], ["5", 0], ["’s", 0], ["and", 0], ["6", 0], ["’s", 0], ["category", 0], ["he", 0], ["gets", 0], ["5", 0], ["points", 0], ["for", 0], ["each", 0], ["of", 0], ["the", 0], ["next", 0], ["two", 0], ["rounds", 0], ["placing", 0], ["his", 0], ["five", 0], ["1", 0], ["’s", 0], ["first", 0], ["in", 0], ["the", 0], ["3", 0], ["of", 0], ["a", 0], ["kind", 0], ["and", 0], ["then", 0], ["in", 0], ["the", 0], ["4", 0], ["of", 0], ["a", 0], ["kind", 0], ["he", 0], ["gets", 0], ["nothing", 0], ["in", 0], ["the", 0], ["next", 0], ["two", 0], ["rounds", 0], ["scores", 0], ["5", 0], ["points", 0], ["for", 0], ["the", 0], ["chance", 0], ["category", 0], ["and", 0], ["then", 0], ["finally", 0], ["gets", 0], ["50", 0], ["points", 0], ["for", 0], ["a", 0], ["yahtzee", 0], ["in", 0], ["the", 0], ["13", 0], ["th", 0], ["round", 0], ["all", 0], ["together", 0], ["he", 0], ["scores", 0], ["70", 0], ["points", 0], ["danny", 1], ["keeps", 1], ["track", 1], ["of", 1], ["all", 1], ["the", 1], ["dice", 1], ["rolls", 1], ["in", 1], ["the", 1], ["game", 1], ["and", 1], ["often", 1], ["wonders", 1], ["if", 1], ["he", 1], ["could", 1], ["have", 1], ["done", 1], ["better", 1], ["than", 1], ["he", 1], ["did", 1], ["in", 1], ["a", 1], ["game", 1], ["of", 1], ["sequential", 1], ["yahtzee", 1], ["assuming", 1], ["that", 1], ["the", 1], ["same", 1], ["overall", 1], ["sequence", 1], ["of", 1], ["dice", 1], ["appears", 1], ["regardless", 1], ["of", 1], ["the", 1], ["way", 1], ["he", 1], ["chooses", 1], ["to", 1], ["re", 1], ["roll", 1], ["dice", 1], ["in", 1], ["any", 1], ["given", 1], ["round", 1], ["another", 1], ["example", 1], ["should", 1], ["make", 1], ["things", 1], ["clear", 1], ["suppose", 1], ["the", 1], ["sequence", 1], ["of", 1], ["dice", 1], ["is", 1], ["that", 1], ["of", 1], ["the", 1], ["second", 1], ["sample", 1], ["input", 1], ["if", 1], ["danny", 1], ["assigns", 1], ["the", 1], ["first", 1], ["five", 1], ["dice", 1], ["to", 1], ["the", 1], ["“", 1], ["1", 1], ["’s”", 1], ["category", 1], ["he", 1], ["will", 1], ["get", 1], ["a", 1], ["score", 1], ["of", 1], ["4", 1], ["but", 1], ["if", 1], ["he", 1], ["re", 1], ["rolls", 1], ["the", 1], ["3", 1], ["obtaining", 1], ["another", 1], ["1", 1], ["his", 1], ["score", 1], ["will", 1], ["improve", 1], ["to", 1], ["5", 1], ["in", 1], ["round", 1], ["2", 1], ["if", 1], ["he", 1], ["assigns", 1], ["the", 1], ["next", 1], ["5", 1], ["dice", 1], ["his", 1], ["score", 1], ["for", 1], ["the", 1], ["“", 1], ["2", 1], ["’s”", 1], ["category", 1], ["will", 1], ["be", 1], ["4", 1], ["but", 1], ["if", 1], ["he", 1], ["re", 1], ["rolls", 1], ["the", 1], ["4", 1], ["5", 1], ["and", 1], ["6", 1], ["obtaining", 1], ["1", 1], ["2", 1], ["and", 1], ["3", 1], ["and", 1], ["then", 1], ["re", 1], ["rolls", 1], ["these", 1], ["three", 1], ["new", 1], ["dice", 1], ["again", 1], ["he", 1], ["obtains", 1], ["three", 1], ["more", 1], ["2", 1], ["s", 1], ["for", 1], ["an", 1], ["improved", 1], ["score", 1], ["of", 1], ["10", 1], ["in", 1], ["the", 1], ["second", 1], ["category", 1], ["at", 1], ["the", 1], ["end", 1], ["of", 1], ["the", 1], ["game", 1], ["the", 1], ["sequence", 1], ["of", 1], ["five", 1], ["1", 1], ["s", 1], ["yields", 1], ["a", 1], ["yahtzee", 1], ["the", 1], ["final", 1], ["4", 1], ["is", 1], ["not", 1], ["used", 1], ["the", 1], ["best", 1], ["score", 1], ["obtainable", 1], ["for", 1], ["this", 1], ["sequence", 1], ["of", 1], ["dice", 1], ["is", 1], ["340", 1], ["your", 1], ["job", 1], ["is", 1], ["simple", 1], ["given", 1], ["a", 1], ["sequence", 1], ["of", 1], ["consecutive", 1], ["dice", 1], ["rolls", 1], ["what’s", 1], ["the", 1], ["maximum", 1], ["score", 1], ["possible", 1], ["in", 1], ["a", 1], ["game", 1], ["of", 1], ["sequential", 1], ["yahtzee", 1], ["well", 0], ["maybe", 0], ["it’s", 0], ["just", 0], ["the", 0], ["description", 0], ["of", 0], ["the", 0], ["problem", 0], ["that’s", 0], ["simple", 0], ["input", 0], ["input", 1], ["starts", 1], ["with", 1], ["a", 1], ["line", 1], ["containing", 1], ["an", 1], ["integer", 1], ["n", 1], ["65", 1], ["leq", 1], ["n", 1], ["leq", 1], ["195", 1], ["indicating", 1], ["the", 1], ["number", 1], ["of", 1], ["dice", 1], ["rolls", 1], ["following", 1], ["this", 1], ["on", 1], ["one", 1], ["or", 1], ["more", 1], ["lines", 1], ["are", 0], ["the", 0], ["n", 0], ["dice", 0], ["rolls", 0], ["all", 0], ["values", 0], ["between", 0], ["1", 0], ["and", 0], ["6", 0], ["inclusive", 0], ["output", 0], ["display", 1], ["the", 1], ["maximum", 1], ["possible", 1], ["sequential", 1], ["yahtzee", 1], ["score", 1], ["using", 1], ["the", 1], ["given", 1], ["dice", 1], ["rolls", 1], ["filling", 1], ["in", 1], ["all", 1], ["13", 1], ["categories", 1], ["not", 1], ["all", 1], ["the", 1], ["dice", 1], ["rolls", 1], ["need", 1], ["to", 1], ["be", 1], ["used", 1], ["but", 0], ["those", 0], ["that", 0], ["are", 0], ["must", 0], ["be", 0], ["consecutive", 0], ["starting", 0], ["with", 0], ["the", 0], ["first", 0], ["roll", 0], ["examples", 0], ["sample", 0], ["input", 0], ["65", 36], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 608198], ["1", 1], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["sample", 0], ["output", 0], ["70", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6529466791393826, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6024582459499057, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7012025901942646, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6526364477335825, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6024321796071095, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6024321796071095, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6512488436632747, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6512488436632747, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nDigits $4$ and $7$ are lucky, while all others are unlucky. An integer is lucky if it contains only lucky digits in decimal notation. We would like to know the $K$-th lucky positive integer.\n\n-----Input-----\nThe first and only line of input contains a positive integer $K$ ($1 \\le K \\le 10^9$).\n\n-----Output-----\nThe first and only line of output must contain the $K$-th lucky positive integer.\n\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\n4\n\nSample Input 2:\n2\nSample Output 2:\n7\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6414"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6414", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["digits", 1], ["4", 1], ["and", 1], ["7", 1], ["are", 1], ["lucky", 1], ["while", 1], ["all", 1], ["others", 1], ["are", 1], ["unlucky", 1], ["an", 1], ["integer", 1], ["is", 1], ["lucky", 1], ["if", 1], ["it", 1], ["contains", 1], ["only", 1], ["lucky", 1], ["digits", 1], ["in", 1], ["decimal", 1], ["notation", 0], ["we", 0], ["would", 0], ["like", 0], ["to", 0], ["know", 0], ["the", 0], ["k", 0], ["th", 0], ["lucky", 0], ["positive", 0], ["integer", 0], ["input", 0], ["the", 1], ["first", 1], ["and", 1], ["only", 1], ["line", 1], ["of", 1], ["input", 0], ["contains", 0], ["a", 0], ["positive", 0], ["integer", 0], ["k", 0], ["1", 0], ["le", 0], ["k", 0], ["le", 0], ["10", 0], ["9", 0], ["output", 0], ["the", 1], ["first", 1], ["and", 1], ["only", 0], ["line", 0], ["of", 0], ["output", 0], ["must", 0], ["contain", 0], ["the", 0], ["k", 0], ["th", 0], ["lucky", 0], ["positive", 0], ["integer", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["1", 0], ["sample", 0], ["output", 0], ["1", 0], ["4", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["sample", 0], ["output", 0], ["2", 0], ["7", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.37209302325581395, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.37209302325581395, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6938775510204082, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6938775510204082, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.37209302325581395, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.37209302325581395, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6938775510204082, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6938775510204082, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nAn ironman triathlon is a race where participants swim for $3.86$ km, ride a bicycle for $180.25$ km, and finally run a marathon, and it is considered one of the toughest sport events. Viveka has been training for an even more challenging competition: the $n$-athlon. In an $n$-athlon race, participants have to go from the starting point to the finishing point through several types of terrain: water, sand, ice, asphalt, etc. To make the race more interesting, participants are free to pick the route that they think suits best their abilities. Last year Viveka achieved an epic victory by skating the last $40$ km in $1$ hour over ice, while her arch-rival Veronica was stuck in a tar pit $1$ m from the finishing point.\n\nThe terrain distribution for this year has been published and now it is your task as the optimization expert in Viveka’s team to help her figure out the best route for the race. The competition takes place in a flat area, which we model as the 2D plane, and each type of terrain is shaped as a horizontal strip. Participants are not allowed to leave the race area. You know the position of each strip and Viveka’s speed in that type of terrain.\n\n-----Input-----\nThe first line contains two pairs of decimal numbers $x_ s$, $y_ s$, $x_ f$, $y_ f$, the $x$ and $y$ coordinates of the starting and finishing point, respectively, in meters. The second line contains one integer $n$ ($1 \\leq n \\leq 10000$), the number of layers. The third line contains $n-1$ decimal numbers, the $y$ coordinate of each change between layers. Layers are given in order, that is, $y_ s < y_1 < y_2 < \\cdots < y_{n-1} < y_ f$, so the shape of layer $i$ is $(-10000,10000)\\times (y_{i-1},y_{i})$. The first and last layers extend only until the $y$ coordinate of the starting and finishing point, this is they have shape $(-10000,10000)\\times (y_ s,y_1)$ and $(-10000,10000)\\times (y_{n-1},y_ f)$ respectively. The fourth line contains $n$ decimal numbers, Viveka’s speed in each layer, in meters per second. All decimal numbers have absolute value at most $10^4$ and at most $4$ decimals.\n\n-----Output-----\nOutput the minimum time required for Viveka to go from the starting to the finishing point. Your answer should be within absolute or relative error at most $10^{-6}$.\n\n-----Examples-----\nSample Input:\n0 0 0 100\n2\n50\n5 1\nSample Output:\n60\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6299"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6299", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["an", 1], ["ironman", 1], ["triathlon", 1], ["is", 1], ["a", 1], ["race", 1], ["where", 1], ["participants", 1], ["swim", 1], ["for", 1], ["3", 1], ["86", 1], ["km", 1], ["ride", 1], ["a", 1], ["bicycle", 1], ["for", 1], ["180", 1], ["25", 1], ["km", 1], ["and", 1], ["finally", 1], ["run", 1], ["a", 1], ["marathon", 1], ["and", 1], ["it", 1], ["is", 1], ["considered", 1], ["one", 1], ["of", 1], ["the", 1], ["toughest", 1], ["sport", 1], ["events", 1], ["viveka", 1], ["has", 1], ["been", 1], ["training", 1], ["for", 1], ["an", 1], ["even", 1], ["more", 1], ["challenging", 1], ["competition", 1], ["the", 1], ["n", 1], ["athlon", 1], ["in", 1], ["an", 1], ["n", 1], ["athlon", 1], ["race", 1], ["participants", 1], ["have", 1], ["to", 1], ["go", 1], ["from", 1], ["the", 1], ["starting", 1], ["point", 1], ["to", 1], ["the", 1], ["finishing", 1], ["point", 1], ["through", 1], ["several", 1], ["types", 1], ["of", 1], ["terrain", 1], ["water", 1], ["sand", 1], ["ice", 1], ["asphalt", 1], ["etc", 1], ["to", 1], ["make", 1], ["the", 1], ["race", 1], ["more", 1], ["interesting", 1], ["participants", 1], ["are", 1], ["free", 1], ["to", 1], ["pick", 1], ["the", 1], ["route", 1], ["that", 1], ["they", 1], ["think", 1], ["suits", 1], ["best", 1], ["their", 1], ["abilities", 1], ["last", 1], ["year", 1], ["viveka", 1], ["achieved", 1], ["an", 1], ["epic", 1], ["victory", 1], ["by", 1], ["skating", 1], ["the", 1], ["last", 1], ["40", 1], ["km", 1], ["in", 1], ["1", 1], ["hour", 1], ["over", 1], ["ice", 1], ["while", 1], ["her", 1], ["arch", 1], ["rival", 1], ["veronica", 1], ["was", 1], ["stuck", 1], ["in", 1], ["a", 1], ["tar", 1], ["pit", 1], ["1", 1], ["m", 1], ["from", 1], ["the", 1], ["finishing", 1], ["point", 1], ["the", 1], ["terrain", 1], ["distribution", 1], ["for", 1], ["this", 1], ["year", 1], ["has", 1], ["been", 1], ["published", 1], ["and", 1], ["now", 1], ["it", 1], ["is", 1], ["your", 1], ["task", 1], ["as", 1], ["the", 1], ["optimization", 1], ["expert", 1], ["in", 1], ["viveka’s", 1], ["team", 1], ["to", 1], ["help", 1], ["her", 1], ["figure", 1], ["out", 1], ["the", 1], ["best", 1], ["route", 1], ["for", 1], ["the", 1], ["race", 1], ["the", 1], ["competition", 1], ["takes", 1], ["place", 1], ["in", 1], ["a", 1], ["flat", 1], ["area", 1], ["which", 1], ["we", 1], ["model", 1], ["as", 1], ["the", 1], ["2d", 1], ["plane", 1], ["and", 1], ["each", 1], ["type", 1], ["of", 1], ["terrain", 1], ["is", 1], ["shaped", 1], ["as", 1], ["a", 1], ["horizontal", 1], ["strip", 1], ["participants", 1], ["are", 1], ["not", 1], ["allowed", 1], ["to", 1], ["leave", 1], ["the", 1], ["race", 1], ["area", 1], ["you", 1], ["know", 1], ["the", 1], ["position", 0], ["of", 0], ["each", 0], ["strip", 0], ["and", 0], ["viveka’s", 0], ["speed", 0], ["in", 0], ["that", 0], ["type", 0], ["of", 0], ["terrain", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["two", 0], ["pairs", 0], ["of", 0], ["decimal", 0], ["numbers", 0], ["x", 0], ["s", 0], ["y", 0], ["s", 0], ["x", 0], ["f", 0], ["y", 0], ["f", 0], ["the", 1], ["x", 1], ["and", 1], ["y", 1], ["coordinates", 1], ["of", 1], ["the", 1], ["starting", 1], ["and", 1], ["finishing", 1], ["point", 0], ["respectively", 0], ["in", 0], ["meters", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["one", 0], ["integer", 0], ["n", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["10000", 0], ["the", 0], ["number", 0], ["of", 0], ["layers", 0], ["the", 0], ["third", 0], ["line", 0], ["contains", 0], ["n", 0], ["1", 1], ["decimal", 1], ["numbers", 1], ["the", 1], ["y", 0], ["coordinate", 0], ["of", 0], ["each", 0], ["change", 0], ["between", 0], ["layers", 0], ["layers", 0], ["are", 0], ["given", 0], ["in", 0], ["order", 0], ["that", 0], ["is", 0], ["y", 0], ["s", 0], ["y", 0], ["1", 0], ["y", 0], ["2", 0], ["cdots", 0], ["y", 0], ["n", 0], ["1", 0], ["y", 0], ["f", 0], ["so", 0], ["the", 0], ["shape", 0], ["of", 0], ["layer", 0], ["i", 0], ["is", 0], ["10000", 0], ["10000", 0], ["times", 0], ["y", 0], ["i", 0], ["1", 0], ["y", 0], ["i", 0], ["the", 1], ["first", 1], ["and", 1], ["last", 1], ["layers", 1], ["extend", 1], ["only", 1], ["until", 1], ["the", 1], ["y", 1], ["coordinate", 0], ["of", 0], ["the", 0], ["starting", 0], ["and", 0], ["finishing", 0], ["point", 0], ["this", 0], ["is", 0], ["they", 0], ["have", 0], ["shape", 0], ["10000", 0], ["10000", 0], ["times", 0], ["y", 0], ["s", 0], ["y", 0], ["1", 0], ["and", 0], ["10000", 0], ["10000", 0], ["times", 0], ["y", 0], ["n", 0], ["1", 0], ["y", 0], ["f", 0], ["respectively", 1], ["the", 1], ["fourth", 1], ["line", 1], ["contains", 1], ["n", 1], ["decimal", 1], ["numbers", 1], ["viveka’s", 1], ["speed", 1], ["in", 1], ["each", 1], ["layer", 1], ["in", 0], ["meters", 0], ["per", 0], ["second", 0], ["all", 0], ["decimal", 0], ["numbers", 0], ["have", 0], ["absolute", 0], ["value", 0], ["at", 0], ["most", 0], ["10", 0], ["4", 0], ["and", 0], ["at", 0], ["most", 0], ["4", 0], ["decimals", 0], ["output", 0], ["output", 1], ["the", 1], ["minimum", 1], ["time", 1], ["required", 1], ["for", 1], ["viveka", 1], ["to", 1], ["go", 1], ["from", 1], ["the", 1], ["starting", 1], ["to", 1], ["the", 1], ["finishing", 1], ["point", 0], ["your", 0], ["answer", 0], ["should", 0], ["be", 0], ["within", 0], ["absolute", 0], ["or", 0], ["relative", 0], ["error", 0], ["at", 0], ["most", 0], ["10", 0], ["6", 0], ["examples", 0], ["sample", 0], ["input", 0], ["0", 0], ["0", 0], ["0", 0], ["100", 0], ["2", 0], ["50", 0], ["5", 0], ["1", 0], ["sample", 0], ["output", 0], ["60", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5966981132075472, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5966981132075472, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7454128440366973, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7454128440366973, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5966981132075472, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5966981132075472, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7454128440366973, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7454128440366973, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\n=====Function Descriptions=====\ncollections.namedtuple()\n\nBasically, namedtuples are easy to create, lightweight object types.\nThey turn tuples into convenient containers for simple tasks.\nWith namedtuples, you don’t have to use integer indices for accessing members of a tuple.\n\nExample\nCode 01\n>>> from collections import namedtuple\n>>> Point = namedtuple('Point','x,y')\n>>> pt1 = Point(1,2)\n>>> pt2 = Point(3,4)\n>>> dot_product = ( pt1.x * pt2.x ) +( pt1.y * pt2.y )\n>>> print dot_product\n11\n\nCode 02\n>>> from collections import namedtuple\n>>> Car = namedtuple('Car','Price Mileage Colour Class')\n>>> xyz = Car(Price = 100000, Mileage = 30, Colour = 'Cyan', Class = 'Y')\n>>> print xyz\nCar(Price=100000, Mileage=30, Colour='Cyan', Class='Y')\n>>> print xyz.Class\nY\n\n=====Problem Statement=====\nDr. John Wesley has a spreadsheet containing a list of student's IDs, marks, class and name.\nYour task is to help Dr. Wesley calculate the average marks of the students.\nAverage = Sum of all marks / Total students\n\nNote:\n1. Columns can be in any order. IDs, marks, class and name can be written in any order in the spreadsheet.\n2. Column names are ID, MARKS, CLASS and NAME. (The spelling and case type of these names won't change.)\n\n=====Input Format=====\nThe first line contains an integer N, the total number of students.\nThe second line contains the names of the columns in any order.\nThe next N lines contains the marks, IDs, name and class, under their respective column names.\n\n=====Constraints=====\n0<N≤100\n\n=====Output Format=====\nPrint the average marks of the list corrected to 2 decimal places.\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nUse Call-Based format\n\nANSWER in Python code:\n", "references": ["n = int(input())\ncol_list = list(input().split())\nmarks_col = col_list.index(\"MARKS\")\nmarks_list = []\nfor i in range(n):\n\tinfo_list = list(input().split())\n\tmarks_list.append(float(info_list[marks_col]))\nprint((sum(marks_list)/n))\n", "#!/usr/bin/env python3\n\nfrom collections import namedtuple\n\ndef __starting_point():\n\ts_num = int(input().strip())\n\ttuple_fields = input().strip().split()\n\t\n\tstudent = namedtuple('student', tuple_fields)\n\tlibrary = []\n\tres = 0\n\t\n\tfor _ in range(s_num):\n\t\tst_info = input().strip().split()\n\t\tlibrary.append(student(st_info[0], st_info[1], st_info[2], st_info[3]))\n\t\t\n\tfor el in library:\n\t\tres += int(el.MARKS)\n\t\n\tprint(res/s_num)\n__starting_point()\n"], "id": "id8961"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8961", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["function", 0], ["descriptions", 0], ["collections", 1], ["namedtuple", 1], ["basically", 1], ["namedtuples", 1], ["are", 1], ["easy", 2], ["to", 2], ["create", 2], ["lightweight", 2], ["object", 2], ["types", 2], ["they", 2], ["turn", 2], ["tuples", 2], ["into", 2], ["convenient", 2], ["containers", 1], ["for", 1], ["simple", 1], ["tasks", 1], ["with", 1], ["namedtuples", 1], ["you", 1], ["don’t", 0], ["have", 0], ["to", 0], ["use", 0], ["integer", 0], ["indices", 0], ["for", 1], ["accessing", 1], ["members", 1], ["of", 1], ["a", 1], ["tuple", 1], ["example", 1], ["code", 1], ["01", 1], ["from", 1], ["collections", 1], ["import", 1], ["namedtuple", 1], ["point", 1], ["namedtuple", 1], ["point", 1], ["x", 1], ["y", 1], ["pt1", 1], ["point", 1], ["1", 1], ["2", 1], ["pt2", 1], ["point", 1], ["3", 1], ["4", 1], ["dot", 1], ["product", 1], ["pt1", 1], ["x", 1], ["pt2", 1], ["x", 1], ["pt1", 1], ["y", 1], ["pt2", 1], ["y", 1], ["print", 1], ["dot", 1], ["product", 1], ["11", 1], ["code", 1], ["02", 1], ["from", 1], ["collections", 1], ["import", 1], ["namedtuple", 2], ["car", 2], ["namedtuple", 2], ["car", 2], ["price", 2], ["mileage", 2], ["colour", 1], ["class", 1], ["xyz", 1], ["car", 1], ["price", 1], ["100000", 1], ["mileage", 1], ["30", 1], ["colour", 1], ["cyan", 1], ["class", 1], ["y", 1], ["print", 1], ["xyz", 1], ["car", 1], ["price", 0], ["100000", 0], ["mileage", 0], ["30", 0], ["colour", 0], ["cyan", 0], ["class", 0], ["y", 0], ["print", 0], ["xyz", 0], ["class", 0], ["y", 0], ["problem", 0], ["statement", 0], ["dr", 0], ["john", 0], ["wesley", 0], ["has", 0], ["a", 0], ["spreadsheet", 0], ["containing", 0], ["a", 0], ["list", 1], ["of", 1], ["student", 1], ["s", 1], ["ids", 0], ["marks", 0], ["class", 0], ["and", 0], ["name", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["help", 0], ["dr", 0], ["wesley", 0], ["calculate", 0], ["the", 0], ["average", 0], ["marks", 0], ["of", 0], ["the", 0], ["students", 0], ["average", 0], ["sum", 0], ["of", 0], ["all", 0], ["marks", 0], ["total", 0], ["students", 0], ["note", 0], ["1", 0], ["columns", 0], ["can", 0], ["be", 0], ["in", 0], ["any", 0], ["order", 0], ["ids", 0], ["marks", 0], ["class", 0], ["and", 0], ["name", 0], ["can", 0], ["be", 0], ["written", 0], ["in", 0], ["any", 0], ["order", 0], ["in", 0], ["the", 0], ["spreadsheet", 0], ["2", 0], ["column", 0], ["names", 0], ["are", 0], ["id", 0], ["marks", 0], ["class", 0], ["and", 0], ["name", 0], ["the", 0], ["spelling", 0], ["and", 0], ["case", 0], ["type", 0], ["of", 0], ["these", 0], ["names", 0], ["won", 0], ["t", 0], ["change", 0], ["input", 3], ["format", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["an", 0], ["integer", 0], ["n", 0], ["the", 0], ["total", 0], ["number", 0], ["of", 0], ["students", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["the", 0], ["names", 0], ["of", 0], ["the", 0], ["columns", 0], ["in", 0], ["any", 0], ["order", 0], ["the", 0], ["next", 0], ["n", 0], ["lines", 0], ["contains", 0], ["the", 0], ["marks", 0], ["ids", 0], ["name", 0], ["and", 0], ["class", 0], ["under", 0], ["their", 0], ["respective", 0], ["column", 0], ["names", 0], ["constraints", 0], ["0", 0], ["n≤100", 0], ["output", 0], ["format", 0], ["print", 0], ["the", 0], ["average", 0], ["marks", 0], ["of", 0], ["the", 0], ["list", 0], ["corrected", 0], ["to", 0], ["2", 0], ["decimal", 0], ["places", 0], ["enter", 0], ["your", 0], ["code", 0], ["here", 0], ["read", 0], ["input", 0], ["from", 0], ["stdin", 0], ["print", 0], ["output", 0], ["to", 0], ["stdout", 0], ["use", 0], ["call", 0], ["based", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.36015325670498083, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.32503192848020435, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4981684981684982, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4664224664224662, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.36015325670498083, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.32503192848020435, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4981684981684982, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4664224664224662, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["col", 0], ["list", 0], ["list", 0], ["input", 0], ["split", 0], ["marks", 0], ["col", 0], ["col", 0], ["list", 0], ["index", 0], ["marks", 0], ["marks", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["info", 0], ["list", 0], ["list", 0], ["input", 0], ["split", 0], ["marks", 0], ["list", 0], ["append", 0], ["float", 0], ["info", 0], ["list", 0], ["marks", 0], ["col", 0], ["print", 0], ["sum", 0], ["marks", 0], ["list", 0], ["n", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["from", 0], ["collections", 0], ["import", 0], ["namedtuple", 0], ["def", 0], ["starting", 0], ["point", 0], ["s", 0], ["num", 0], ["int", 0], ["input", 0], ["strip", 0], ["tuple", 0], ["fields", 0], ["input", 0], ["strip", 0], ["split", 0], ["student", 0], ["namedtuple", 0], ["student", 0], ["tuple", 0], ["fields", 0], ["library", 0], ["res", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["s", 0], ["num", 0], ["st", 0], ["info", 0], ["input", 0], ["strip", 0], ["split", 0], ["library", 0], ["append", 0], ["student", 0], ["st", 0], ["info", 0], ["0", 0], ["st", 0], ["info", 0], ["1", 0], ["st", 0], ["info", 0], ["2", 0], ["st", 0], ["info", 0], ["3", 0], ["for", 0], ["el", 0], ["in", 0], ["library", 0], ["res", 0], ["int", 0], ["el", 0], ["marks", 0], ["print", 0], ["res", 0], ["s", 0], ["num", 0], ["starting", 0], ["point", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nJeff's got n cards, each card contains either digit 0, or digit 5. Jeff can choose several cards and put them in a line so that he gets some number. What is the largest possible number divisible by 90 Jeff can make from the cards he's got?\n\nJeff must make the number without leading zero. At that, we assume that number 0 doesn't contain any leading zeroes. Jeff doesn't have to use all the cards.\n\n\n-----Input-----\n\nThe first line contains integer n (1 ≤ n ≤ 10^3). The next line contains n integers a_1, a_2, ..., a_{n} (a_{i} = 0 or a_{i} = 5). Number a_{i} represents the digit that is written on the i-th card.\n\n\n-----Output-----\n\nIn a single line print the answer to the problem — the maximum number, divisible by 90. If you can't make any divisible by 90 number from the cards, print -1.\n\n\n-----Examples-----\nInput\n4\n5 0 5 0\n\nOutput\n0\n\nInput\n11\n5 5 5 5 5 5 5 5 0 5 5\n\nOutput\n5555555550\n\n\n\n-----Note-----\n\nIn the first test you can make only one number that is a multiple of 90 — 0.\n\nIn the second test you can make number 5555555550, it is a multiple of 90.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from math import*\nfrom random import*\n\n# input = open(file = \"input.txt\", mode = \"r\")\n# output = open(file = \"output.txt\", mode = \"w\")\n# list(map(int, input().split()))\n\nn = int(input())\nA = list(map(int, input().split()))\nz, f = 0, 0\nfor i in range(n):\n\tif A[i] == 0:\n\t\tz += 1\n\telse:\n\t\tf += 1\nif (z == 0):\n\tprint(-1)\n\treturn\nif (f // 9 == 0):\n\tprint(0)\nelse:\n\tprint (\"5\" * (f - f % 9) + \"0\" * z)\n", "input()\nA = input().split()\ncount5 = 0\nfor elem in A:\n\tif elem == '5':\n\t\tcount5 += 1\ncount0 = len(A) - count5\nif count0 == 0:\n\tprint(-1)\nelse:\n\tprint(int('5' * ((count5 // 9) * 9) + '0' * count0))\n", "#!/usr/bin/env python\nn = int(input())\nnums = [int(x) for x in input().split()]\n\nfives = 0\nzeros = 0\n\nfor n in nums:\n\tif n == 5: \n\t\tfives += 1\n\telif n == 0:\n\t\tzeros += 1\n\nif (zeros < 1):\n\tprint(-1)\nelse:\n\tactfives = (fives // 9) * 9\n\tif (actfives > 0):\n\t\tprint('5' * actfives + '0' * zeros)\n\telse:\n\t\tprint(0)\n\n", "N = int(input())\nNumbers = list(map(int, input().split()))\nZeros, Fives = 0, 0\nfor Num in Numbers:\n\tif Num == 0:\n\t\tZeros += 1\n\telse:\n\t\tFives += 1\nif Zeros == 0:\n\tprint(-1)\nelif Fives < 9:\n\tprint(0)\nelse:\n\tprint(\"5\" * (Fives // 9 * 9) + \"0\" * Zeros)\n", "n=int(input())\n\nA=list(map(int,input().split()))\n\nA.sort()\n\nif(A.count(0)==0):\n\tprint(-1)\nelse:\n\tans=\"0\"*A.count(0)\n\tx=A.count(5)\n\twhile((x*5)%9!=0):\n\t\tx-=1\n\tans=(\"5\"*x)+ans\n\tif( \"5\" not in ans ):\n\t\tprint(0)\n\telse:\n\t\tprint(ans)\n", "n = int(input())\na = sorted(list(map(int, input().split())))[::-1]\ni = 0\nif (a[-1] == 5):\n\tprint(-1)\nelse:\n\twhile (a[i] == 5):\n\t\ti += 1\n\tif (i < 9):\n\t\tif (i < n):\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(-1)\n\telse:\n\t\tfor j in range(i - i % 9):\n\t\t\tprint('5', end = '')\n\t\tfor j in range(n - i):\n\t\t\tprint('0', end = '')\n", "n = int(input())\nd = dict()\nd[5] = 0\nd[0] = 0\na = list(map(int, input().split()))\nfor i in range(n):\n\td[a[i]] += 1\nd[5] -= d[5] % 9\nif d[5] == 0 and d[0] == 0:\n\tprint(-1)\nelif d[5] == 0:\n\tprint(0)\nelif d[0] == 0:\n\tprint(-1)\nelse:\n\tfor i in range(d[5]):\n\t\tprint(5, sep = '', end = '')\n\tfor i in range(d[0]):\n\t\tprint(0, sep = '', end = '')\n", "n = int(input())\ns = list(map(int, input().split()))\nk = 0\nm = 0\nfor i in range(len(s)):\n\tif s[i] == 0:\n\t\tk += 1\n\telse:\n\t\tm += 1\nif k == 0:\n\tprint(-1)\nelif m < 9:\n\tprint(0)\nelse:\n\tx = m // 9\n\tprint('5' * 9 * x + '0' * k)\n", "n, cards = int(input()), sorted(input().split())\nprint(int(max(('555555555' * (cards.count('5') // 9) + '0' * cards.count('0')) * (cards.count('0') != 0), '-1')))\n", "def __starting_point():\n\tinp = input()\n\tarr = input().split(' ')\n\tcz =0\n\tcf =0\n\tfor a in arr:\n\t\tif int(a)==0:\n\t\t\tcz+=1\n\t\tif int(a)==5:\n\t\t\tcf+=1\n\tans = '-1'\n##    print(cf)\n##    print(cz)\n\tif cz==0:\n\t\tans = '-1'\n\telse:\n\t\tng = cf//9\n\t\tans = '555555555'*ng+'0'*cz\n\tprint(int(ans))\n\t\t\n\t\t\n\n__starting_point()\n", "n = int(input())\na = list(map(int,input().split()))\nc5 = 0\nc0 = 0\nfor j in a:\n\tif j == 5:\n\t\tc5+=1\n\telse:\n\t\tc0+=1\nif c5<9:\n\tif c0>0:\n\t\tprint(0)\n\t\treturn\n\telse:\n\t\tprint(-1)\n\t\treturn\nelse:\n\tif c0>0:\n\t\tprint(int(\"5\"*(c5-c5%9)+'0'*c0))\n\telse:\n\t\tprint(-1)\n", "n = int(input())\narr = list(map(int, input().split()))\nc0 = arr.count(0)\nc5 = n - c0\nif c5 >= 9 and c0 > 0:\n\tstr = ((c5//9) * 9) * '5'\n\tstr += c0 * '0'\nelif c0 >= 1:\n\tstr = '0'\nelse:\n\tstr = '-1'\nprint(str)\n", "n = int(input())\ncards  = list(map(int, input().split()))\nfive = cards.count(5) - (cards.count(5) % 9)\nzero = cards.count(0)\nif zero == 0:\n\tprint(-1)\nelif five == 0:\n\tprint(0)\nelse:\n\tprint('5'*five+zero*'0')\n\t\n", "while(1):\n\ttry:\n\t\tn=int(input())\n\t\ta=list(map(int,input().split()))\n\t\tcount5=a.count(5)\n\t\tcount0=a.count(0)\n\t\tif count5//9==0 and count0!=0:\n\t\t\tprint(0)\n\t\telif  count0==0:\n\t\t\tprint(-1)\n\t\telse:\n\t\t\tprint((count5//9)*9*'5'+count0*'0')\n\texcept EOFError:\n\t\tbreak\n\t\t\n", "n=int(input())\nm=list(map(int,input().split()))\nif 0 in m :\n\tif 5 in m:\n\t\tk=0\n\t\tl=0\n\t\tfor i in range(n):\n\t\t\tk+=m[i]\n\t\t\tif m[i]==0:\n\t\t\t\tl+=1\n\t\tp=k//9\n\t\t#print(p)\n\t\tp1=p//5\n\t\t#print(p1)\n\t\tif p1 !=0:\n\t\t\tprint('5'*p1*9+'0'*l)\n\t\telse:\n\t\t\tprint(0)\n\telse:\n\t\tprint(0)\nelse :\n\tprint(-1)\n", "n = int(input())\nseq = list(map(int, input().split()))\n\nfive = 0\nzero = 0\n\nfor i in seq:\n\tif i == 5:\n\t\tfive += 1\n\telif i == 0:\n\t\tzero += 1\n\nif five >= 9:\n\tmod = five % 9\n\tif zero >= 1:\n\t\tprint((five - mod) * '5' + zero * '0')\n\telse:\n\t\tprint(-1)\nelse:\n\tif zero > 0:\n\t\tprint(0)\n\telse:\n\t\tprint(-1)\n", "n = int(input())\na = list(map(int, input().split()))\n\ncount0 = 0\ncount5 = 0\nfor i in range(n):\n\tif a[i] == 5:\n\t\tcount5 += 1\n\telse:\n\t\tcount0 += 1\n\nif count0 == 0:\n\tprint(-1)\nelif count5 < 9:\n\tprint(0)\nelse:\n\tprint('5' * (count5 - count5 % 9) + '0' * count0)\n", "n = int(input())\narr = list(map(int, input().split()))\nfives = 0 \nif 5 in arr:\n\tfives = arr.count(5)\nnulls = n - fives\nfives -= fives % 9\nif nulls == 0 :\n\tprint(-1)\nelse:\n\tprint(int(str(5) * fives + str(0) * nulls))\n", "num = int(input())\ncards = input().split(' ')\n\nfor i in range(num):\n\tcards[i] = int(cards[i])\n\nnum_5 = 0\nnum_0 = 0\nresult = ''\nfor i in range(num):\n\tif cards[i] == 5:\n\t\tnum_5 += 1\n\tif cards[i] == 0:\n\t\tnum_0 += 1\n\nif num_0 == 0:\n\tprint(-1)\nelif num_5 // 9 < 0:\n\tprint(-1)\nelse:\n\tresult = '5' * ((num_5 // 9) * 9) + '0' * num_0\n\tprint(int(result))\n", "n = int(input())\ns5 = 0\ns0 = 0\nar = list(input().split())\nfor i in range(n):\n\tif ar[i] == '5':\n\t\ts5 += 1\n\telse:\n\t\ts0 += 1\nwhile s5 % 9 and s5:\n\ts5 -= 1\nif s5 and s0:\n\tprint(s5*'5' + '0'*s0)\nelif s0:\n\tprint(0)\nelse:\n\tprint(-1)\n", "# your code goes here\n\nimport string\n\nn = int ( input() )\n\nstr = input()\nL = str.split()\nS = 0\nSzero = 0\nSfive = 0\n\nwhile n>0:\n\tS+=int(L[n-1])\n\tif int(L[n-1]) == 0:\n\t\tSzero+=1\n\telse:\n\t\tSfive+=1\n\tn-=1\n\t\nnewstr = \"\"\n\t\nif Sfive>=9 and Szero>0:\n\n\ti = int ( Sfive/9 )\n\ti = i*9\n\twhile i>0:\n\t\tnewstr += '5'\n\t\ti-=1\n\t\n\ti = Szero\n\t\n\twhile i>0:\n\t\tnewstr += '0'\n\t\t\n\t\ti-=1\n\t\n\tprint (newstr)\nelif Sfive<9 and Szero>0:\n\tprint (\"0\")\nelse:\n\tprint (\"-1\")\n", "x=int(input())\ny=[int(p) for p in input().split()]\n\n\nx=a=y.count(5)\nb=y.count(0)\nwhile((x*5)%9!=0):\n\tx-=1\nif(y.count(0)==0):\n\tprint(-1)\n\nelif(a!=0 and x!=0):\n\tprint('5'*x+'0'*b)\nelif(x==0):\n\tprint(0)\n", "import os\nimport sys\nimport math\n\nfin = sys.stdin\nif os.path.exists(\"in.txt\"):\n\tfin = open(\"in.txt\")\n\n\nn = int(fin.readline().split()[0])\nx = [int(i) for i in fin.readline().split()]\nc0 = len([i for i in x if i == 0])\nc5 = len([i for i in x if i == 5])\nc5 = int(c5 / 9) * 9\nif c0 == 0:\n\tprint(-1)\nelif c5 == 0:\n\tprint(0)\nelse:\n\ts = \"\"\n\tfor i in range(c5):\n\t\ts += \"5\"\n\tfor i in range(c0):\n\t\ts += \"0\"\n\tprint(s)\n", "n, t = int(input()), input()\na = t.count('5')\nb = n - a\nprint(int('5' * (a - a % 9) + '0' * b) if b else -1)\n", "def main():\n\tn = int(input())\n\tnulls = fives = 0\n\n\tfor item in input().split():\n\t\tif int(item)==0:\n\t\t\tnulls+=1\n\t\telse:\n\t\t\tfives+=1\n\n\tif nulls>=1:\n\t\tif fives>=9:\n\t\t\tprint(int('5'*(fives-fives%9)+'0'*nulls))\n\t\telse:\n\t\t\tprint(0)\n\telse:\n\t\tprint(-1)\n\nmain()\n"], "id": "id5776"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5776", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["jeff", 1], ["s", 1], ["got", 1], ["n", 1], ["cards", 1], ["each", 1], ["card", 1], ["contains", 1], ["either", 1], ["digit", 1], ["0", 1], ["or", 1], ["digit", 1], ["5", 1], ["jeff", 1], ["can", 1], ["choose", 1], ["several", 1], ["cards", 1], ["and", 1], ["put", 1], ["them", 1], ["in", 1], ["a", 1], ["line", 1], ["so", 1], ["that", 1], ["he", 1], ["gets", 1], ["some", 1], ["number", 1], ["what", 1], ["is", 1], ["the", 1], ["largest", 1], ["possible", 1], ["number", 1], ["divisible", 1], ["by", 1], ["90", 1], ["jeff", 1], ["can", 1], ["make", 1], ["from", 1], ["the", 1], ["cards", 1], ["he", 1], ["s", 1], ["got", 1], ["jeff", 1], ["must", 1], ["make", 1], ["the", 1], ["number", 1], ["without", 1], ["leading", 1], ["zero", 1], ["at", 1], ["that", 1], ["we", 1], ["assume", 1], ["that", 1], ["number", 1], ["0", 1], ["doesn", 1], ["t", 1], ["contain", 1], ["any", 0], ["leading", 0], ["zeroes", 0], ["jeff", 0], ["doesn", 0], ["t", 0], ["have", 0], ["to", 0], ["use", 0], ["all", 0], ["the", 0], ["cards", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["3", 0], ["the", 0], ["next", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["a", 0], ["i", 0], ["0", 0], ["or", 0], ["a", 0], ["i", 0], ["5", 0], ["number", 0], ["a", 0], ["i", 0], ["represents", 0], ["the", 0], ["digit", 0], ["that", 0], ["is", 0], ["written", 0], ["on", 0], ["the", 0], ["i", 0], ["th", 0], ["card", 0], ["output", 0], ["in", 1], ["a", 1], ["single", 1], ["line", 1], ["print", 1], ["the", 1], ["answer", 1], ["to", 1], ["the", 1], ["problem", 1], ["—", 1], ["the", 1], ["maximum", 1], ["number", 1], ["divisible", 1], ["by", 1], ["90", 1], ["if", 1], ["you", 1], ["can", 1], ["t", 0], ["make", 0], ["any", 0], ["divisible", 0], ["by", 0], ["90", 0], ["number", 0], ["from", 0], ["the", 0], ["cards", 0], ["print", 0], ["1", 0], ["examples", 0], ["input", 0], ["4", 0], ["5", 0], ["0", 0], ["5", 0], ["0", 0], ["output", 0], ["0", 0], ["input", 0], ["11", 0], ["5", 0], ["5", 0], ["5", 0], ["5", 0], ["5", 0], ["5", 0], ["5", 0], ["5", 0], ["0", 0], ["5", 0], ["5", 0], ["output", 0], ["5555555550", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["test", 1], ["you", 1], ["can", 1], ["make", 1], ["only", 1], ["one", 1], ["number", 1], ["that", 1], ["is", 1], ["a", 1], ["multiple", 1], ["of", 1], ["90", 1], ["—", 1], ["0", 1], ["in", 1], ["the", 1], ["second", 1], ["test", 0], ["you", 0], ["can", 0], ["make", 0], ["number", 0], ["5555555550", 0], ["it", 0], ["is", 0], ["a", 0], ["multiple", 0], ["of", 0], ["90", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5023255813953489, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5023255813953489, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6343612334801763, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6343612334801763, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5023255813953489, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5023255813953489, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6343612334801763, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6343612334801763, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["math", 0], ["import", 0], ["from", 0], ["random", 0], ["import", 0], ["input", 0], ["open", 0], ["file", 0], ["input", 0], ["txt", 0], ["mode", 0], ["r", 0], ["output", 0], ["open", 0], ["file", 0], ["output", 0], ["txt", 0], ["mode", 0], ["w", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["z", 0], ["f", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["z", 0], ["1", 0], ["else", 0], ["f", 0], ["1", 0], ["if", 0], ["z", 0], ["0", 0], ["print", 0], ["1", 0], ["return", 0], ["if", 0], ["f", 0], ["9", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["5", 0], ["f", 0], ["f", 0], ["9", 0], ["0", 0], ["z", 0], ["input", 0], ["a", 0], ["input", 0], ["split", 0], ["count5", 0], ["0", 0], ["for", 0], ["elem", 0], ["in", 0], ["a", 0], ["if", 0], ["elem", 0], ["5", 0], ["count5", 0], ["1", 0], ["count0", 0], ["len", 0], ["a", 0], ["count5", 0], ["if", 0], ["count0", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["int", 0], ["5", 0], ["count5", 0], ["9", 0], ["9", 0], ["0", 0], ["count0", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["n", 0], ["int", 0], ["input", 0], ["nums", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["fives", 0], ["0", 0], ["zeros", 0], ["0", 0], ["for", 0], ["n", 0], ["in", 0], ["nums", 0], ["if", 0], ["n", 0], ["5", 0], ["fives", 0], ["1", 0], ["elif", 0], ["n", 0], ["0", 0], ["zeros", 0], ["1", 0], ["if", 0], ["zeros", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["actfives", 0], ["fives", 0], ["9", 0], ["9", 0], ["if", 0], ["actfives", 0], ["0", 0], ["print", 0], ["5", 0], ["actfives", 0], ["0", 0], ["zeros", 0], ["else", 0], ["print", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["numbers", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["zeros", 0], ["fives", 0], ["0", 0], ["0", 0], ["for", 0], ["num", 0], ["in", 0], ["numbers", 0], ["if", 0], ["num", 0], ["0", 0], ["zeros", 0], ["1", 0], ["else", 0], ["fives", 0], ["1", 0], ["if", 0], ["zeros", 0], ["0", 0], ["print", 0], ["1", 0], ["elif", 0], ["fives", 0], ["9", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["5", 0], ["fives", 0], ["9", 0], ["9", 0], ["0", 0], ["zeros", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["if", 0], ["a", 0], ["count", 0], ["0", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["ans", 0], ["0", 0], ["a", 0], ["count", 0], ["0", 0], ["x", 0], ["a", 0], ["count", 0], ["5", 0], ["while", 0], ["x", 0], ["5", 0], ["9", 0], ["0", 0], ["x", 0], ["1", 0], ["ans", 0], ["5", 0], ["x", 0], ["ans", 0], ["if", 0], ["5", 0], ["not", 0], ["in", 0], ["ans", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["1", 0], ["i", 0], ["0", 0], ["if", 0], ["a", 0], ["1", 0], ["5", 0], ["print", 0], ["1", 0], ["else", 0], ["while", 0], ["a", 0], ["i", 0], ["5", 0], ["i", 0], ["1", 0], ["if", 0], ["i", 0], ["9", 0], ["if", 0], ["i", 0], ["n", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["1", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["i", 0], ["9", 0], ["print", 0], ["5", 0], ["end", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["i", 0], ["print", 0], ["0", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["dict", 0], ["d", 0], ["5", 0], ["0", 0], ["d", 0], ["0", 0], ["0", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["a", 0], ["i", 0], ["1", 0], ["d", 0], ["5", 0], ["d", 0], ["5", 0], ["9", 0], ["if", 0], ["d", 0], ["5", 0], ["0", 0], ["and", 0], ["d", 0], ["0", 0], ["0", 0], ["print", 0], ["1", 0], ["elif", 0], ["d", 0], ["5", 0], ["0", 0], ["print", 0], ["0", 0], ["elif", 0], ["d", 0], ["0", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["5", 0], ["print", 0], ["5", 0], ["sep", 0], ["end", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["d", 0], ["0", 0], ["print", 0], ["0", 0], ["sep", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["0", 0], ["m", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["0", 0], ["k", 0], ["1", 0], ["else", 0], ["m", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["print", 0], ["1", 0], ["elif", 0], ["m", 0], ["9", 0], ["print", 0], ["0", 0], ["else", 0], ["x", 0], ["m", 0], ["9", 0], ["print", 0], ["5", 0], ["9", 0], ["x", 0], ["0", 0], ["k", 0], ["n", 0], ["cards", 0], ["int", 0], ["input", 0], ["sorted", 0], ["input", 0], ["split", 0], ["print", 0], ["int", 0], ["max", 0], ["555555555", 0], ["cards", 0], ["count", 0], ["5", 0], ["9", 0], ["0", 0], ["cards", 0], ["count", 0], ["0", 0], ["cards", 0], ["count", 0], ["0", 0], ["0", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["inp", 0], ["input", 0], ["arr", 0], ["input", 0], ["split", 0], ["cz", 0], ["0", 0], ["cf", 0], ["0", 0], ["for", 0], ["a", 0], ["in", 0], ["arr", 0], ["if", 0], ["int", 0], ["a", 0], ["0", 0], ["cz", 0], ["1", 0], ["if", 0], ["int", 0], ["a", 0], ["5", 0], ["cf", 0], ["1", 0], ["ans", 0], ["1", 0], ["print", 0], ["cf", 0], ["print", 0], ["cz", 0], ["if", 0], ["cz", 0], ["0", 0], ["ans", 0], ["1", 0], ["else", 0], ["ng", 0], ["cf", 0], ["9", 0], ["ans", 0], ["555555555", 0], ["ng", 0], ["0", 0], ["cz", 0], ["print", 0], ["int", 0], ["ans", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c5", 0], ["0", 0], ["c0", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["a", 0], ["if", 0], ["j", 0], ["5", 0], ["c5", 0], ["1", 0], ["else", 0], ["c0", 0], ["1", 0], ["if", 0], ["c5", 0], ["9", 0], ["if", 0], ["c0", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["else", 0], ["print", 0], ["1", 0], ["return", 0], ["else", 0], ["if", 0], ["c0", 0], ["0", 0], ["print", 0], ["int", 0], ["5", 0], ["c5", 0], ["c5", 0], ["9", 0], ["0", 0], ["c0", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c0", 0], ["arr", 0], ["count", 0], ["0", 0], ["c5", 0], ["n", 0], ["c0", 0], ["if", 0], ["c5", 0], ["9", 0], ["and", 0], ["c0", 0], ["0", 0], ["str", 0], ["c5", 0], ["9", 0], ["9", 0], ["5", 0], ["str", 0], ["c0", 0], ["0", 0], ["elif", 0], ["c0", 0], ["1", 0], ["str", 0], ["0", 0], ["else", 0], ["str", 0], ["1", 0], ["print", 0], ["str", 0], ["n", 0], ["int", 0], ["input", 0], ["cards", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["five", 0], ["cards", 0], ["count", 0], ["5", 0], ["cards", 0], ["count", 0], ["5", 0], ["9", 0], ["zero", 0], ["cards", 0], ["count", 0], ["0", 0], ["if", 0], ["zero", 0], ["0", 0], ["print", 0], ["1", 0], ["elif", 0], ["five", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["5", 0], ["five", 0], ["zero", 0], ["0", 0], ["while", 0], ["1", 0], ["try", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count5", 0], ["a", 0], ["count", 0], ["5", 0], ["count0", 0], ["a", 0], ["count", 0], ["0", 0], ["if", 0], ["count5", 0], ["9", 0], ["0", 0], ["and", 0], ["count0", 0], ["0", 0], ["print", 0], ["0", 0], ["elif", 0], ["count0", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["count5", 0], ["9", 0], ["9", 0], ["5", 0], ["count0", 0], ["0", 0], ["except", 0], ["eoferror", 0], ["break", 0], ["n", 0], ["int", 0], ["input", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["0", 0], ["in", 0], ["m", 0], ["if", 0], ["5", 0], ["in", 0], ["m", 0], ["k", 0], ["0", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["m", 0], ["i", 0], ["if", 0], ["m", 0], ["i", 0], ["0", 0], ["l", 0], ["1", 0], ["p", 0], ["k", 0], ["9", 0], ["print", 0], ["p", 0], ["p1", 0], ["p", 0], ["5", 0], ["print", 0], ["p1", 0], ["if", 0], ["p1", 0], ["0", 0], ["print", 0], ["5", 0], ["p1", 0], ["9", 0], ["0", 0], ["l", 0], ["else", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["seq", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["five", 0], ["0", 0], ["zero", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["seq", 0], ["if", 0], ["i", 0], ["5", 0], ["five", 0], ["1", 0], ["elif", 0], ["i", 0], ["0", 0], ["zero", 0], ["1", 0], ["if", 0], ["five", 0], ["9", 0], ["mod", 0], ["five", 0], ["9", 0], ["if", 0], ["zero", 0], ["1", 0], ["print", 0], ["five", 0], ["mod", 0], ["5", 0], ["zero", 0], ["0", 0], ["else", 0], ["print", 0], ["1", 0], ["else", 0], ["if", 0], ["zero", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count0", 0], ["0", 0], ["count5", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["5", 0], ["count5", 0], ["1", 0], ["else", 0], ["count0", 0], ["1", 0], ["if", 0], ["count0", 0], ["0", 0], ["print", 0], ["1", 0], ["elif", 0], ["count5", 0], ["9", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["5", 0], ["count5", 0], ["count5", 0], ["9", 0], ["0", 0], ["count0", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["fives", 0], ["0", 0], ["if", 0], ["5", 0], ["in", 0], ["arr", 0], ["fives", 0], ["arr", 0], ["count", 0], ["5", 0], ["nulls", 0], ["n", 0], ["fives", 0], ["fives", 0], ["fives", 0], ["9", 0], ["if", 0], ["nulls", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["int", 0], ["str", 0], ["5", 0], ["fives", 0], ["str", 0], ["0", 0], ["nulls", 0], ["num", 0], ["int", 0], ["input", 0], ["cards", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["num", 0], ["cards", 0], ["i", 0], ["int", 0], ["cards", 0], ["i", 0], ["num", 0], ["5", 0], ["0", 0], ["num", 0], ["0", 0], ["0", 0], ["result", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["num", 0], ["if", 0], ["cards", 0], ["i", 0], ["5", 0], ["num", 0], ["5", 0], ["1", 0], ["if", 0], ["cards", 0], ["i", 0], ["0", 0], ["num", 0], ["0", 0], ["1", 0], ["if", 0], ["num", 0], ["0", 0], ["0", 0], ["print", 0], ["1", 0], ["elif", 0], ["num", 0], ["5", 0], ["9", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["result", 0], ["5", 0], ["num", 0], ["5", 0], ["9", 0], ["9", 0], ["0", 0], ["num", 0], ["0", 0], ["print", 0], ["int", 0], ["result", 0], ["n", 0], ["int", 0], ["input", 0], ["s5", 0], ["0", 0], ["s0", 0], ["0", 0], ["ar", 0], ["list", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ar", 0], ["i", 0], ["5", 0], ["s5", 0], ["1", 0], ["else", 0], ["s0", 0], ["1", 0], ["while", 0], ["s5", 0], ["9", 0], ["and", 0], ["s5", 0], ["s5", 0], ["1", 0], ["if", 0], ["s5", 0], ["and", 0], ["s0", 0], ["print", 0], ["s5", 0], ["5", 0], ["0", 0], ["s0", 0], ["elif", 0], ["s0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["1", 0], ["your", 0], ["code", 0], ["goes", 0], ["here", 0], ["import", 0], ["string", 0], ["n", 0], ["int", 0], ["input", 0], ["str", 0], ["input", 0], ["l", 0], ["str", 0], ["split", 0], ["s", 0], ["0", 0], ["szero", 0], ["0", 0], ["sfive", 0], ["0", 0], ["while", 0], ["n", 0], ["0", 0], ["s", 0], ["int", 0], ["l", 0], ["n", 0], ["1", 0], ["if", 0], ["int", 0], ["l", 0], ["n", 0], ["1", 0], ["0", 0], ["szero", 0], ["1", 0], ["else", 0], ["sfive", 0], ["1", 0], ["n", 0], ["1", 0], ["newstr", 0], ["if", 0], ["sfive", 0], ["9", 0], ["and", 0], ["szero", 0], ["0", 0], ["i", 0], ["int", 0], ["sfive", 0], ["9", 0], ["i", 0], ["i", 0], ["9", 0], ["while", 0], ["i", 0], ["0", 0], ["newstr", 0], ["5", 0], ["i", 0], ["1", 0], ["i", 0], ["szero", 0], ["while", 0], ["i", 0], ["0", 0], ["newstr", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["newstr", 0], ["elif", 0], ["sfive", 0], ["9", 0], ["and", 0], ["szero", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["1", 0], ["x", 0], ["int", 0], ["input", 0], ["y", 0], ["int", 0], ["p", 0], ["for", 0], ["p", 0], ["in", 0], ["input", 0], ["split", 0], ["x", 0], ["a", 0], ["y", 0], ["count", 0], ["5", 0], ["b", 0], ["y", 0], ["count", 0], ["0", 0], ["while", 0], ["x", 0], ["5", 0], ["9", 0], ["0", 0], ["x", 0], ["1", 0], ["if", 0], ["y", 0], ["count", 0], ["0", 0], ["0", 0], ["print", 0], ["1", 0], ["elif", 0], ["a", 0], ["0", 0], ["and", 0], ["x", 0], ["0", 0], ["print", 0], ["5", 0], ["x", 0], ["0", 0], ["b", 0], ["elif", 0], ["x", 0], ["0", 0], ["print", 0], ["0", 0], ["import", 0], ["os", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["fin", 0], ["sys", 0], ["stdin", 0], ["if", 0], ["os", 0], ["path", 0], ["exists", 0], ["in", 0], ["txt", 0], ["fin", 0], ["open", 0], ["in", 0], ["txt", 0], ["n", 0], ["int", 0], ["fin", 0], ["readline", 0], ["split", 0], ["0", 0], ["x", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["fin", 0], ["readline", 0], ["split", 0], ["c0", 0], ["len", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["x", 0], ["if", 0], ["i", 0], ["0", 0], ["c5", 0], ["len", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["x", 0], ["if", 0], ["i", 0], ["5", 0], ["c5", 0], ["int", 0], ["c5", 0], ["9", 0], ["9", 0], ["if", 0], ["c0", 0], ["0", 0], ["print", 0], ["1", 0], ["elif", 0], ["c5", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c5", 0], ["s", 0], ["5", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c0", 0], ["s", 0], ["0", 0], ["print", 0], ["s", 0], ["n", 0], ["t", 0], ["int", 0], ["input", 0], ["input", 0], ["a", 0], ["t", 0], ["count", 0], ["5", 0], ["b", 0], ["n", 0], ["a", 0], ["print", 0], ["int", 0], ["5", 0], ["a", 0], ["a", 0], ["9", 0], ["0", 0], ["b", 0], ["if", 0], ["b", 0], ["else", 0], ["1", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["nulls", 0], ["fives", 0], ["0", 0], ["for", 0], ["item", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["int", 0], ["item", 0], ["0", 0], ["nulls", 0], ["1", 0], ["else", 0], ["fives", 0], ["1", 0], ["if", 0], ["nulls", 0], ["1", 0], ["if", 0], ["fives", 0], ["9", 0], ["print", 0], ["int", 0], ["5", 0], ["fives", 0], ["fives", 0], ["9", 0], ["0", 0], ["nulls", 0], ["else", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["1", 0], ["main", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are given $n$ rectangles on a plane with coordinates of their bottom left and upper right points. Some $(n-1)$ of the given $n$ rectangles have some common point. A point belongs to a rectangle if this point is strictly inside the rectangle or belongs to its boundary.\n\nFind any point with integer coordinates that belongs to at least $(n-1)$ given rectangles.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\le n \\le 132\\,674$) — the number of given rectangles.\n\nEach the next $n$ lines contains four integers $x_1$, $y_1$, $x_2$ and $y_2$ ($-10^9 \\le x_1 < x_2 \\le 10^9$, $-10^9 \\le y_1 < y_2 \\le 10^9$) — the coordinates of the bottom left and upper right corners of a rectangle.\n\n\n-----Output-----\n\nPrint two integers $x$ and $y$ — the coordinates of any point that belongs to at least $(n-1)$ given rectangles.\n\n\n-----Examples-----\nInput\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n\nOutput\n1 1\n\nInput\n3\n0 0 1 1\n0 1 1 2\n1 0 2 1\n\nOutput\n1 1\n\nInput\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n\nOutput\n1 1\n\nInput\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n\nOutput\n3 4\n\n\n\n-----Note-----\n\nThe picture below shows the rectangles in the first and second samples. The possible answers are highlighted. [Image] \n\nThe picture below shows the rectangles in the third and fourth samples. [Image]\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["def excl_max_list(a):\n\tfirst_max = max(a)\n\timax = a.index(first_max)\n\tsecond_max = max(a[:imax] + a[imax + 1:])\n\treturn [second_max if elem == first_max else first_max for elem in a]\n\ndef excl_min_list(a):\n\tfirst_min = min(a)\n\timin = a.index(first_min)\n\tsecond_min = min(a[:imin] + a[imin + 1:])\n\treturn [second_min if elem == first_min else first_min for elem in a]\n\nn = int(input())\nrectangles = [tuple(map(int, input().split())) for i in range(n)]\nlefts = [l for l, d, r, u in rectangles]\nrights = [r for l, d, r, u in rectangles]\ndowns = [d for l, d, r, u in rectangles]\nups = [u for l, d, r, u in rectangles]\n\nmax_lefts = excl_max_list(lefts)\nmax_downs = excl_max_list(downs)\nmin_rights = excl_min_list(rights)\nmin_ups = excl_min_list(ups)\n\nfor i in range(n):\n\tif max_lefts[i] <= min_rights[i] and max_downs[i] <= min_ups[i]:\n\t\tprint(max_lefts[i], max_downs[i])\n\t\tbreak\n", "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nl1, l2 = max(a[0][0], a[1][0]), min(a[0][0], a[1][0])\nd1, d2 = max(a[0][1], a[1][1]), min(a[0][1], a[1][1])\nr1, r2 = min(a[0][2], a[1][2]), max(a[0][2], a[1][2])\nu1, u2 = min(a[0][3], a[1][3]), max(a[0][3], a[1][3])\nfor i in range(2, n):\n\tif a[i][0] > l1:\n\t\tl1, l2 = a[i][0], l1\n\telif a[i][0] > l2:\n\t\tl2 = a[i][0]\n\tif a[i][1] > d1:\n\t\td1, d2 = a[i][1], d1\n\telif a[i][1] > d2:\n\t\td2 = a[i][1]\n\tif a[i][2] < r1:\n\t\tr1, r2 = a[i][2], r1\n\telif a[i][2] < r2:\n\t\tr2 = a[i][2]\n\tif a[i][3] < u1:\n\t\tu1, u2 = a[i][3], u1\n\telif a[i][3] < u2:\n\t\tu2 = a[i][3]\nfor i in range(n):\n\tif a[i][0] == l1:\n\t\ta[i][0] = l2\n\telse:\n\t\ta[i][0] = l1\n\tif a[i][1] == d1:\n\t\ta[i][1] = d2\n\telse:\n\t\ta[i][1] = d1\n\tif a[i][2] == r1:\n\t\ta[i][2] = r2\n\telse:\n\t\ta[i][2] = r1\n\tif a[i][3] == u1:\n\t\ta[i][3] = u2\n\telse:\n\t\ta[i][3] = u1\n\tif a[i][0] <= a[i][2] and a[i][1] <= a[i][3]:\n\t\tprint(a[i][0], a[i][1])\n\t\treturn\n", "n=int(input())\nox=[]\ncx=[]\nl3=[]\noy=[]\ncy=[]\nfor i in range(n):\n\tr,s,a,b=list(map(int,input().strip().split()))\n\tl3.append([r,s,a,b])\n\tox.append(r)\n\toy.append(s)\n\tcx.append(a)\n\tcy.append(b)\nox.sort()\ncx.sort()\noy.sort()\ncy.sort()\ne1=ox[-1]\ne2=cx[0]\ne3=oy[-1]\ne4=cy[0]\n\nfor i in l3:\n\ta1=i[0]\n\ta2=i[1]\n\ta3=i[2]\n\ta4=i[3]\n\tif a1==e1:\n\t\tw=ox[-2]\n\telse:\n\t\tw=ox[-1]\n\tif a2==e3:\n\t\ty=oy[-2]\n\telse:\n\t\ty=oy[-1]\n\t\t\n\tif a3==e2:\n\t\tx=cx[1]\n\telse:\n\t\tx=cx[0]\n\t\t\n\tif a4==e4:\n\t\tz=cy[1]\n\telse:\n\t\tz=cy[0]\n\t\t\n\tif(w<=x and y<=z):\n\t\tprint(w,y)\n\t\treturn\n\t\t\n", "import sys\nn = int(input())\nl, d, r, u = map(int, input().split())\nl1 = d1 = r1 = u1 = 0\nrects = [(l, d, r, u)]\nmay = (0, 0)\nfor i in range(n - 1):\n\ta, b, c, e = map(int, input().split())\n\trects.append((a, b, c, e))\n\nfor i in range(n):\n\ta, b, c, e = rects[i]\n\tif a > r:\n\t\tmay = (r1, i)\n\t\tbreak\n\tif b > u:\n\t\tmay = (u1, i)\n\t\tbreak\n\tif c < l:\n\t\tmay = (l1, i)\n\t\tbreak\n\tif e < d:\n\t\tmay = (d1, i)\n\t\tbreak\n\tif a > l:\n\t\tl = a\n\t\tl1 = i\n\tif b > d:\n\t\td = b\n\t\td1 = i\n\tif c < r:\n\t\tr = c\n\t\tr1 = i\n\tif e < u:\n\t\tu = e\n\t\tu1 = i    \nfor x in may:\n\tind = max(1 - x, 0)\n\tl, d, r, u = rects[ind]\n\tfor i in range(n):\n\t\tif i != x:\n\t\t\tl = max(l, rects[i][0])\n\t\t\td = max(d, rects[i][1])\n\t\t\tr = min(r, rects[i][2])\n\t\t\tu = min(u, rects[i][3])\n\tif l <= r and d <= u:\n\t\tprint(l, d)\n\t\treturn\n", "n=int(input())\narr=[]\nbig=10000000000\nnegbig=-10000000000\nfor i in range(n):\n\tx1,x2,y1,y2=[int(j) for j in input().split()]\n\tarr.append([[x1,x2],[y1,y2]])\nprefix_arr=[ [[negbig,negbig],[big,big]] ]\nfor i in range(1,n):\n\tfirst=prefix_arr[-1]\n\tsecond=arr[i-1]\n\tx1,y1=first[0]\n\tx2,y2=first[1]\n\tx3,y3=second[0]\n\tx4,y4=second[1]\n\ta1=max(x1,x3)\n\tb1=max(y1,y3)\n\ta2=min(x2,x4)\n\tb2=min(y2,y4)\n\tif ((x1==negbig and x2==negbig and y1==negbig and y2==negbig) or (x3==negbig and x4==negbig and y3==negbig and y4==negbig )):\n\t\tprefix_arr.append([ [negbig,negbig],[negbig,negbig] ] )\n\telse:\n\t\tif (a1<=a2 and b1<=b2):\n\t\t\tprefix_arr.append([[a1,b1],[a2,b2]])\n\t\telse:\n\t\t\tprefix_arr.append([ [negbig,negbig],[negbig,negbig] ] )\nsuffix_arr=[]\nfor i in range(n):\n\tsuffix_arr.append([])\nsuffix_arr[-1].append([negbig,negbig])\nsuffix_arr[-1].append([big,big])\nfor i in range(n-2,-1,-1):\n\tflag=1\n\tfirst=suffix_arr[i+1]\n\tsecond=arr[i+1]\n\tx1,y1=first[0]\n\tx2,y2=first[1]\n\tx3,y3=second[0]\n\tx4,y4=second[1]\n\ta1=max(x1,x3)\n\tb1=max(y1,y3)\n\ta2=min(x2,x4)\n\tb2=min(y2,y4)\n\tif ((x1==negbig and x2==negbig and y1==negbig and y2==negbig) or (x3==negbig and x4==negbig and y3==negbig and y4==negbig ) ):\n\t\tsuffix_arr[i].extend([[negbig,negbig],[negbig,negbig]])\n\telse:\n\t\tif (a1<=a2 and b1<=b2):\n\t\t\tsuffix_arr[i].extend([[a1,b1],[a2,b2]])\n\t\telse:\n\t\t\tsuffix_arr[i].extend([[negbig,negbig],[negbig,negbig]])\n\nfor i in range(n):\n\tfirst=prefix_arr[i]\n\tsecond=suffix_arr[i]\n\tx1,y1=first[0]\n\tx2,y2=first[1]\n\tx3,y3=second[0]\n\tx4,y4=second[1]\n\ta1=max(x1,x3)\n\tb1=max(y1,y3)\n\ta2=min(x2,x4)\n\tb2=min(y2,y4)\n\tif ((x1==negbig and x2==negbig and y1==negbig and y2==negbig) or (x3==negbig and x4==negbig and y3==negbig and y4==negbig)):\n\t\tcontinue\n\telse:\n\t\tif (a1<=a2 and b1<=b2):\n\t\t\tprint(a1,b1)\n\t\t\tbreak\n\n\n\n\n\n", "n = int(input())\nu = []\nfor i in range(n):\n\tu.append(list(map(int, input().split())))\nl1, l2 = max(u[0][0], u[1][0]), min(u[0][0], u[1][0])\nd1, d2 = max(u[0][1], u[1][1]), min(u[0][1], u[1][1])\nr1, r2 = min(u[0][2], u[1][2]), max(u[0][2], u[1][2])\nu1, u2 = min(u[0][3], u[1][3]), max(u[0][3], u[1][3])\nfor i in range(2, n):\n\tif u[i][0] > l1:\n\t\tl1, l2 = u[i][0], l1\n\telif u[i][0] > l2:\n\t\tl2 = u[i][0]\n\tif u[i][1] > d1:\n\t\td1, d2 = u[i][1], d1\n\telif u[i][1] > d2:\n\t\td2 = u[i][1]\n\tif u[i][2] < r1:\n\t\tr1, r2 = u[i][2], r1\n\telif u[i][2] < r2:\n\t\tr2 = u[i][2]\n\tif u[i][3] < u1:\n\t\tu1, u2 = u[i][3], u1\n\telif u[i][3] < u2:\n\t\tu2 = u[i][3]\nfor i in range(n):\n\tif u[i][0] == l1:\n\t\tu[i][0] = l2\n\telse:\n\t\tu[i][0] = l1\n\tif u[i][1] == d1:\n\t\tu[i][1] = d2\n\telse:\n\t\tu[i][1] = d1\n\tif u[i][2] == r1:\n\t\tu[i][2] = r2\n\telse:\n\t\tu[i][2] = r1\n\tif u[i][3] == u1:\n\t\tu[i][3] = u2\n\telse:\n\t\tu[i][3] = u1\n\tif u[i][0] <= u[i][2] and u[i][1] <= u[i][3]:\n\t\tprint(u[i][0], u[i][1])\n\t\tbreak\n"], "id": "id7118"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7118", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["are", 1], ["given", 1], ["n", 1], ["rectangles", 1], ["on", 1], ["a", 1], ["plane", 1], ["with", 1], ["coordinates", 1], ["of", 1], ["their", 1], ["bottom", 1], ["left", 1], ["and", 1], ["upper", 1], ["right", 1], ["points", 1], ["some", 1], ["n", 1], ["1", 1], ["of", 1], ["the", 1], ["given", 1], ["n", 1], ["rectangles", 1], ["have", 1], ["some", 1], ["common", 1], ["point", 1], ["a", 1], ["point", 1], ["belongs", 1], ["to", 1], ["a", 1], ["rectangle", 1], ["if", 1], ["this", 1], ["point", 1], ["is", 1], ["strictly", 1], ["inside", 1], ["the", 1], ["rectangle", 1], ["or", 1], ["belongs", 1], ["to", 1], ["its", 1], ["boundary", 1], ["find", 1], ["any", 1], ["point", 1], ["with", 0], ["integer", 0], ["coordinates", 0], ["that", 0], ["belongs", 0], ["to", 0], ["at", 0], ["least", 0], ["n", 0], ["1", 0], ["given", 0], ["rectangles", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["a", 1], ["single", 1], ["integer", 1], ["n", 1], ["2", 1], ["le", 1], ["n", 1], ["le", 1], ["132", 1], ["674", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["given", 1], ["rectangles", 1], ["each", 1], ["the", 1], ["next", 1], ["n", 1], ["lines", 1], ["contains", 1], ["four", 1], ["integers", 1], ["x", 1], ["1", 1], ["y", 1], ["1", 1], ["x", 1], ["2", 1], ["and", 1], ["y", 1], ["2", 1], ["10", 1], ["9", 1], ["le", 1], ["x", 1], ["1", 1], ["x", 1], ["2", 1], ["le", 1], ["10", 1], ["9", 1], ["10", 1], ["9", 1], ["le", 1], ["y", 1], ["1", 1], ["y", 1], ["2", 1], ["le", 1], ["10", 1], ["9", 1], ["—", 1], ["the", 1], ["coordinates", 0], ["of", 0], ["the", 0], ["bottom", 0], ["left", 0], ["and", 0], ["upper", 0], ["right", 0], ["corners", 0], ["of", 0], ["a", 0], ["rectangle", 0], ["output", 0], ["print", 1], ["two", 1], ["integers", 1], ["x", 1], ["and", 1], ["y", 1], ["—", 1], ["the", 1], ["coordinates", 1], ["of", 0], ["any", 0], ["point", 0], ["that", 0], ["belongs", 0], ["to", 0], ["at", 0], ["least", 0], ["n", 0], ["1", 0], ["given", 0], ["rectangles", 0], ["examples", 0], ["input", 0], ["3", 0], ["0", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["0", 0], ["4", 0], ["1", 0], ["output", 0], ["1", 0], ["1", 0], ["input", 0], ["3", 0], ["0", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["0", 0], ["2", 0], ["1", 0], ["output", 0], ["1", 0], ["1", 0], ["input", 0], ["4", 0], ["0", 0], ["0", 0], ["5", 0], ["5", 0], ["0", 0], ["0", 0], ["4", 0], ["4", 0], ["1", 0], ["1", 0], ["4", 0], ["4", 0], ["1", 0], ["1", 0], ["4", 0], ["4", 0], ["output", 0], ["1", 0], ["1", 0], ["input", 0], ["5", 0], ["0", 0], ["0", 0], ["10", 0], ["8", 0], ["1", 0], ["2", 0], ["6", 0], ["7", 0], ["2", 0], ["3", 0], ["5", 0], ["6", 0], ["3", 0], ["4", 0], ["4", 0], ["5", 0], ["8", 0], ["1", 0], ["9", 0], ["2", 0], ["output", 0], ["3", 0], ["4", 0], ["note", 0], ["the", 1], ["picture", 1], ["below", 1], ["shows", 1], ["the", 1], ["rectangles", 0], ["in", 0], ["the", 0], ["first", 0], ["and", 0], ["second", 0], ["samples", 0], ["the", 0], ["possible", 0], ["answers", 0], ["are", 0], ["highlighted", 0], ["image", 0], ["the", 0], ["picture", 0], ["below", 0], ["shows", 0], ["the", 0], ["rectangles", 0], ["in", 0], ["the", 0], ["third", 0], ["and", 0], ["fourth", 0], ["samples", 0], ["image", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.46296296296296297, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.46296296296296297, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6134751773049646, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6134751773049646, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.46296296296296297, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.46296296296296297, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6134751773049646, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6134751773049646, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["def", 0], ["excl", 0], ["max", 0], ["list", 0], ["a", 0], ["first", 0], ["max", 0], ["max", 0], ["a", 0], ["imax", 0], ["a", 0], ["index", 0], ["first", 0], ["max", 0], ["second", 0], ["max", 0], ["max", 0], ["a", 0], ["imax", 0], ["a", 0], ["imax", 0], ["1", 0], ["return", 0], ["second", 0], ["max", 0], ["if", 0], ["elem", 0], ["first", 0], ["max", 0], ["else", 0], ["first", 0], ["max", 0], ["for", 0], ["elem", 0], ["in", 0], ["a", 0], ["def", 0], ["excl", 0], ["min", 0], ["list", 0], ["a", 0], ["first", 0], ["min", 0], ["min", 0], ["a", 0], ["imin", 0], ["a", 0], ["index", 0], ["first", 0], ["min", 0], ["second", 0], ["min", 0], ["min", 0], ["a", 0], ["imin", 0], ["a", 0], ["imin", 0], ["1", 0], ["return", 0], ["second", 0], ["min", 0], ["if", 0], ["elem", 0], ["first", 0], ["min", 0], ["else", 0], ["first", 0], ["min", 0], ["for", 0], ["elem", 0], ["in", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["rectangles", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["lefts", 0], ["l", 0], ["for", 0], ["l", 0], ["d", 0], ["r", 0], ["u", 0], ["in", 0], ["rectangles", 0], ["rights", 0], ["r", 0], ["for", 0], ["l", 0], ["d", 0], ["r", 0], ["u", 0], ["in", 0], ["rectangles", 0], ["downs", 0], ["d", 0], ["for", 0], ["l", 0], ["d", 0], ["r", 0], ["u", 0], ["in", 0], ["rectangles", 0], ["ups", 0], ["u", 0], ["for", 0], ["l", 0], ["d", 0], ["r", 0], ["u", 0], ["in", 0], ["rectangles", 0], ["max", 0], ["lefts", 0], ["excl", 0], ["max", 0], ["list", 0], ["lefts", 0], ["max", 0], ["downs", 0], ["excl", 0], ["max", 0], ["list", 0], ["downs", 0], ["min", 0], ["rights", 0], ["excl", 0], ["min", 0], ["list", 0], ["rights", 0], ["min", 0], ["ups", 0], ["excl", 0], ["min", 0], ["list", 0], ["ups", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["max", 0], ["lefts", 0], ["i", 0], ["min", 0], ["rights", 0], ["i", 0], ["and", 0], ["max", 0], ["downs", 0], ["i", 0], ["min", 0], ["ups", 0], ["i", 0], ["print", 0], ["max", 0], ["lefts", 0], ["i", 0], ["max", 0], ["downs", 0], ["i", 0], ["break", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l1", 0], ["l2", 0], ["max", 0], ["a", 0], ["0", 0], ["0", 0], ["a", 0], ["1", 0], ["0", 0], ["min", 0], ["a", 0], ["0", 0], ["0", 0], ["a", 0], ["1", 0], ["0", 0], ["d1", 0], ["d2", 0], ["max", 0], ["a", 0], ["0", 0], ["1", 0], ["a", 0], ["1", 0], ["1", 0], ["min", 0], ["a", 0], ["0", 0], ["1", 0], ["a", 0], ["1", 0], ["1", 0], ["r1", 0], ["r2", 0], ["min", 0], ["a", 0], ["0", 0], ["2", 0], ["a", 0], ["1", 0], ["2", 0], ["max", 0], ["a", 0], ["0", 0], ["2", 0], ["a", 0], ["1", 0], ["2", 0], ["u1", 0], ["u2", 0], ["min", 0], ["a", 0], ["0", 0], ["3", 0], ["a", 0], ["1", 0], ["3", 0], ["max", 0], ["a", 0], ["0", 0], ["3", 0], ["a", 0], ["1", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["l1", 0], ["l1", 0], ["l2", 0], ["a", 0], ["i", 0], ["0", 0], ["l1", 0], ["elif", 0], ["a", 0], ["i", 0], ["0", 0], ["l2", 0], ["l2", 0], ["a", 0], ["i", 0], ["0", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["d1", 0], ["d1", 0], ["d2", 0], ["a", 0], ["i", 0], ["1", 0], ["d1", 0], ["elif", 0], ["a", 0], ["i", 0], ["1", 0], ["d2", 0], ["d2", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["2", 0], ["r1", 0], ["r1", 0], ["r2", 0], ["a", 0], ["i", 0], ["2", 0], ["r1", 0], ["elif", 0], ["a", 0], ["i", 0], ["2", 0], ["r2", 0], ["r2", 0], ["a", 0], ["i", 0], ["2", 0], ["if", 0], ["a", 0], ["i", 0], ["3", 0], ["u1", 0], ["u1", 0], ["u2", 0], ["a", 0], ["i", 0], ["3", 0], ["u1", 0], ["elif", 0], ["a", 0], ["i", 0], ["3", 0], ["u2", 0], ["u2", 0], ["a", 0], ["i", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["l1", 0], ["a", 0], ["i", 0], ["0", 0], ["l2", 0], ["else", 0], ["a", 0], ["i", 0], ["0", 0], ["l1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["d1", 0], ["a", 0], ["i", 0], ["1", 0], ["d2", 0], ["else", 0], ["a", 0], ["i", 0], ["1", 0], ["d1", 0], ["if", 0], ["a", 0], ["i", 0], ["2", 0], ["r1", 0], ["a", 0], ["i", 0], ["2", 0], ["r2", 0], ["else", 0], ["a", 0], ["i", 0], ["2", 0], ["r1", 0], ["if", 0], ["a", 0], ["i", 0], ["3", 0], ["u1", 0], ["a", 0], ["i", 0], ["3", 0], ["u2", 0], ["else", 0], ["a", 0], ["i", 0], ["3", 0], ["u1", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["2", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["3", 0], ["print", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["return", 0], ["n", 0], ["int", 0], ["input", 0], ["ox", 0], ["cx", 0], ["l3", 0], ["oy", 0], ["cy", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["r", 0], ["s", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["l3", 0], ["append", 0], ["r", 0], ["s", 0], ["a", 0], ["b", 0], ["ox", 0], ["append", 0], ["r", 0], ["oy", 0], ["append", 0], ["s", 0], ["cx", 0], ["append", 0], ["a", 0], ["cy", 0], ["append", 0], ["b", 0], ["ox", 0], ["sort", 0], ["cx", 0], ["sort", 0], ["oy", 0], ["sort", 0], ["cy", 0], ["sort", 0], ["e1", 0], ["ox", 0], ["1", 0], ["e2", 0], ["cx", 0], ["0", 0], ["e3", 0], ["oy", 0], ["1", 0], ["e4", 0], ["cy", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["l3", 0], ["a1", 0], ["i", 0], ["0", 0], ["a2", 0], ["i", 0], ["1", 0], ["a3", 0], ["i", 0], ["2", 0], ["a4", 0], ["i", 0], ["3", 0], ["if", 0], ["a1", 0], ["e1", 0], ["w", 0], ["ox", 0], ["2", 0], ["else", 0], ["w", 0], ["ox", 0], ["1", 0], ["if", 0], ["a2", 0], ["e3", 0], ["y", 0], ["oy", 0], ["2", 0], ["else", 0], ["y", 0], ["oy", 0], ["1", 0], ["if", 0], ["a3", 0], ["e2", 0], ["x", 0], ["cx", 0], ["1", 0], ["else", 0], ["x", 0], ["cx", 0], ["0", 0], ["if", 0], ["a4", 0], ["e4", 0], ["z", 0], ["cy", 0], ["1", 0], ["else", 0], ["z", 0], ["cy", 0], ["0", 0], ["if", 0], ["w", 0], ["x", 0], ["and", 0], ["y", 0], ["z", 0], ["print", 0], ["w", 0], ["y", 0], ["return", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["d", 0], ["r", 0], ["u", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l1", 0], ["d1", 0], ["r1", 0], ["u1", 0], ["0", 0], ["rects", 0], ["l", 0], ["d", 0], ["r", 0], ["u", 0], ["may", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["a", 0], ["b", 0], ["c", 0], ["e", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["rects", 0], ["append", 0], ["a", 0], ["b", 0], ["c", 0], ["e", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["c", 0], ["e", 0], ["rects", 0], ["i", 0], ["if", 0], ["a", 0], ["r", 0], ["may", 0], ["r1", 0], ["i", 0], ["break", 0], ["if", 0], ["b", 0], ["u", 0], ["may", 0], ["u1", 0], ["i", 0], ["break", 0], ["if", 0], ["c", 0], ["l", 0], ["may", 0], ["l1", 0], ["i", 0], ["break", 0], ["if", 0], ["e", 0], ["d", 0], ["may", 0], ["d1", 0], ["i", 0], ["break", 0], ["if", 0], ["a", 0], ["l", 0], ["l", 0], ["a", 0], ["l1", 0], ["i", 0], ["if", 0], ["b", 0], ["d", 0], ["d", 0], ["b", 0], ["d1", 0], ["i", 0], ["if", 0], ["c", 0], ["r", 0], ["r", 0], ["c", 0], ["r1", 0], ["i", 0], ["if", 0], ["e", 0], ["u", 0], ["u", 0], ["e", 0], ["u1", 0], ["i", 0], ["for", 0], ["x", 0], ["in", 0], ["may", 0], ["ind", 0], ["max", 0], ["1", 0], ["x", 0], ["0", 0], ["l", 0], ["d", 0], ["r", 0], ["u", 0], ["rects", 0], ["ind", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["x", 0], ["l", 0], ["max", 0], ["l", 0], ["rects", 0], ["i", 0], ["0", 0], ["d", 0], ["max", 0], ["d", 0], ["rects", 0], ["i", 0], ["1", 0], ["r", 0], ["min", 0], ["r", 0], ["rects", 0], ["i", 0], ["2", 0], ["u", 0], ["min", 0], ["u", 0], ["rects", 0], ["i", 0], ["3", 0], ["if", 0], ["l", 0], ["r", 0], ["and", 0], ["d", 0], ["u", 0], ["print", 0], ["l", 0], ["d", 0], ["return", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["big", 0], ["10000000000", 0], ["negbig", 0], ["10000000000", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x1", 0], ["x2", 0], ["y1", 0], ["y2", 0], ["int", 0], ["j", 0], ["for", 0], ["j", 0], ["in", 0], ["input", 0], ["split", 0], ["arr", 0], ["append", 0], ["x1", 0], ["x2", 0], ["y1", 0], ["y2", 0], ["prefix", 0], ["arr", 0], ["negbig", 0], ["negbig", 0], ["big", 0], ["big", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["first", 0], ["prefix", 0], ["arr", 0], ["1", 0], ["second", 0], ["arr", 0], ["i", 0], ["1", 0], ["x1", 0], ["y1", 0], ["first", 0], ["0", 0], ["x2", 0], ["y2", 0], ["first", 0], ["1", 0], ["x3", 0], ["y3", 0], ["second", 0], ["0", 0], ["x4", 0], ["y4", 0], ["second", 0], ["1", 0], ["a1", 0], ["max", 0], ["x1", 0], ["x3", 0], ["b1", 0], ["max", 0], ["y1", 0], ["y3", 0], ["a2", 0], ["min", 0], ["x2", 0], ["x4", 0], ["b2", 0], ["min", 0], ["y2", 0], ["y4", 0], ["if", 0], ["x1", 0], ["negbig", 0], ["and", 0], ["x2", 0], ["negbig", 0], ["and", 0], ["y1", 0], ["negbig", 0], ["and", 0], ["y2", 0], ["negbig", 0], ["or", 0], ["x3", 0], ["negbig", 0], ["and", 0], ["x4", 0], ["negbig", 0], ["and", 0], ["y3", 0], ["negbig", 0], ["and", 0], ["y4", 0], ["negbig", 0], ["prefix", 0], ["arr", 0], ["append", 0], ["negbig", 0], ["negbig", 0], ["negbig", 0], ["negbig", 0], ["else", 0], ["if", 0], ["a1", 0], ["a2", 0], ["and", 0], ["b1", 0], ["b2", 0], ["prefix", 0], ["arr", 0], ["append", 0], ["a1", 0], ["b1", 0], ["a2", 0], ["b2", 0], ["else", 0], ["prefix", 0], ["arr", 0], ["append", 0], ["negbig", 0], ["negbig", 0], ["negbig", 0], ["negbig", 0], ["suffix", 0], ["arr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["suffix", 0], ["arr", 0], ["append", 0], ["suffix", 0], ["arr", 0], ["1", 0], ["append", 0], ["negbig", 0], ["negbig", 0], ["suffix", 0], ["arr", 0], ["1", 0], ["append", 0], ["big", 0], ["big", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["flag", 0], ["1", 0], ["first", 0], ["suffix", 0], ["arr", 0], ["i", 0], ["1", 0], ["second", 0], ["arr", 0], ["i", 0], ["1", 0], ["x1", 0], ["y1", 0], ["first", 0], ["0", 0], ["x2", 0], ["y2", 0], ["first", 0], ["1", 0], ["x3", 0], ["y3", 0], ["second", 0], ["0", 0], ["x4", 0], ["y4", 0], ["second", 0], ["1", 0], ["a1", 0], ["max", 0], ["x1", 0], ["x3", 0], ["b1", 0], ["max", 0], ["y1", 0], ["y3", 0], ["a2", 0], ["min", 0], ["x2", 0], ["x4", 0], ["b2", 0], ["min", 0], ["y2", 0], ["y4", 0], ["if", 0], ["x1", 0], ["negbig", 0], ["and", 0], ["x2", 0], ["negbig", 0], ["and", 0], ["y1", 0], ["negbig", 0], ["and", 0], ["y2", 0], ["negbig", 0], ["or", 0], ["x3", 0], ["negbig", 0], ["and", 0], ["x4", 0], ["negbig", 0], ["and", 0], ["y3", 0], ["negbig", 0], ["and", 0], ["y4", 0], ["negbig", 0], ["suffix", 0], ["arr", 0], ["i", 0], ["extend", 0], ["negbig", 0], ["negbig", 0], ["negbig", 0], ["negbig", 0], ["else", 0], ["if", 0], ["a1", 0], ["a2", 0], ["and", 0], ["b1", 0], ["b2", 0], ["suffix", 0], ["arr", 0], ["i", 0], ["extend", 0], ["a1", 0], ["b1", 0], ["a2", 0], ["b2", 0], ["else", 0], ["suffix", 0], ["arr", 0], ["i", 0], ["extend", 0], ["negbig", 0], ["negbig", 0], ["negbig", 0], ["negbig", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["first", 0], ["prefix", 0], ["arr", 0], ["i", 0], ["second", 0], ["suffix", 0], ["arr", 0], ["i", 0], ["x1", 0], ["y1", 0], ["first", 0], ["0", 0], ["x2", 0], ["y2", 0], ["first", 0], ["1", 0], ["x3", 0], ["y3", 0], ["second", 0], ["0", 0], ["x4", 0], ["y4", 0], ["second", 0], ["1", 0], ["a1", 0], ["max", 0], ["x1", 0], ["x3", 0], ["b1", 0], ["max", 0], ["y1", 0], ["y3", 0], ["a2", 0], ["min", 0], ["x2", 0], ["x4", 0], ["b2", 0], ["min", 0], ["y2", 0], ["y4", 0], ["if", 0], ["x1", 0], ["negbig", 0], ["and", 0], ["x2", 0], ["negbig", 0], ["and", 0], ["y1", 0], ["negbig", 0], ["and", 0], ["y2", 0], ["negbig", 0], ["or", 0], ["x3", 0], ["negbig", 0], ["and", 0], ["x4", 0], ["negbig", 0], ["and", 0], ["y3", 0], ["negbig", 0], ["and", 0], ["y4", 0], ["negbig", 0], ["continue", 0], ["else", 0], ["if", 0], ["a1", 0], ["a2", 0], ["and", 0], ["b1", 0], ["b2", 0], ["print", 0], ["a1", 0], ["b1", 0], ["break", 0], ["n", 0], ["int", 0], ["input", 0], ["u", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["u", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l1", 0], ["l2", 0], ["max", 0], ["u", 0], ["0", 0], ["0", 0], ["u", 0], ["1", 0], ["0", 0], ["min", 0], ["u", 0], ["0", 0], ["0", 0], ["u", 0], ["1", 0], ["0", 0], ["d1", 0], ["d2", 0], ["max", 0], ["u", 0], ["0", 0], ["1", 0], ["u", 0], ["1", 0], ["1", 0], ["min", 0], ["u", 0], ["0", 0], ["1", 0], ["u", 0], ["1", 0], ["1", 0], ["r1", 0], ["r2", 0], ["min", 0], ["u", 0], ["0", 0], ["2", 0], ["u", 0], ["1", 0], ["2", 0], ["max", 0], ["u", 0], ["0", 0], ["2", 0], ["u", 0], ["1", 0], ["2", 0], ["u1", 0], ["u2", 0], ["min", 0], ["u", 0], ["0", 0], ["3", 0], ["u", 0], ["1", 0], ["3", 0], ["max", 0], ["u", 0], ["0", 0], ["3", 0], ["u", 0], ["1", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["if", 0], ["u", 0], ["i", 0], ["0", 0], ["l1", 0], ["l1", 0], ["l2", 0], ["u", 0], ["i", 0], ["0", 0], ["l1", 0], ["elif", 0], ["u", 0], ["i", 0], ["0", 0], ["l2", 0], ["l2", 0], ["u", 0], ["i", 0], ["0", 0], ["if", 0], ["u", 0], ["i", 0], ["1", 0], ["d1", 0], ["d1", 0], ["d2", 0], ["u", 0], ["i", 0], ["1", 0], ["d1", 0], ["elif", 0], ["u", 0], ["i", 0], ["1", 0], ["d2", 0], ["d2", 0], ["u", 0], ["i", 0], ["1", 0], ["if", 0], ["u", 0], ["i", 0], ["2", 0], ["r1", 0], ["r1", 0], ["r2", 0], ["u", 0], ["i", 0], ["2", 0], ["r1", 0], ["elif", 0], ["u", 0], ["i", 0], ["2", 0], ["r2", 0], ["r2", 0], ["u", 0], ["i", 0], ["2", 0], ["if", 0], ["u", 0], ["i", 0], ["3", 0], ["u1", 0], ["u1", 0], ["u2", 0], ["u", 0], ["i", 0], ["3", 0], ["u1", 0], ["elif", 0], ["u", 0], ["i", 0], ["3", 0], ["u2", 0], ["u2", 0], ["u", 0], ["i", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["u", 0], ["i", 0], ["0", 0], ["l1", 0], ["u", 0], ["i", 0], ["0", 0], ["l2", 0], ["else", 0], ["u", 0], ["i", 0], ["0", 0], ["l1", 0], ["if", 0], ["u", 0], ["i", 0], ["1", 0], ["d1", 0], ["u", 0], ["i", 0], ["1", 0], ["d2", 0], ["else", 0], ["u", 0], ["i", 0], ["1", 0], ["d1", 0], ["if", 0], ["u", 0], ["i", 0], ["2", 0], ["r1", 0], ["u", 0], ["i", 0], ["2", 0], ["r2", 0], ["else", 0], ["u", 0], ["i", 0], ["2", 0], ["r1", 0], ["if", 0], ["u", 0], ["i", 0], ["3", 0], ["u1", 0], ["u", 0], ["i", 0], ["3", 0], ["u2", 0], ["else", 0], ["u", 0], ["i", 0], ["3", 0], ["u1", 0], ["if", 0], ["u", 0], ["i", 0], ["0", 0], ["u", 0], ["i", 0], ["2", 0], ["and", 0], ["u", 0], ["i", 0], ["1", 0], ["u", 0], ["i", 0], ["3", 0], ["print", 0], ["u", 0], ["i", 0], ["0", 0], ["u", 0], ["i", 0], ["1", 0], ["break", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nJosip is a strange painter. He wants to paint a picture consisting of $N \\times N$ pixels, where $N$ is a power of two ($1, 2, 4, 8, 16$ etc.). Each pixel will be either black or white. Josip already has an idea of how each pixel will be coloured.\n\nThis would be no problem if Josip’s painting process wasn’t strange. He uses the following recursive process:\n - If the picture is a single pixel, he colours it the way he intended.\n - Otherwise, split the square into four smaller squares and then:\n - Select one of the four squares and colour it white.\n - Select one of the three remaining squares and colour it black.\n - Consider the two remaining squares as new paintings and use the same three-step process on them.\n\nSoon he noticed that it was not possible to convert all his visions to paintings with this process. Your task is to write a program that will paint a picture that differs as little as possible from the desired picture. The difference between two pictures is the number of pairs of pixels in corresponding positions that differ in colour.\n\n-----Input-----\nThe first line contains an integer $N$ ($1 \\leq N \\leq 512$), the size of the picture Josip would like to paint. $N$ will be a power of $2$. Each of the following $N$ lines contains $N$ digits $0$ or $1$, white and black squares in the target picture.\n\n-----Output-----\nOn the first line, output the smallest possible difference that can be achieved. On the next $N$ lines, output a picture that can be painted with Josip’s process and achieves the smallest difference. The picture should be in the same format as in the input.\n\nNote: The second part of the output (the picture) may not be unique. Any correct output will be accepted.\n\n-----Examples-----\nSample Input 1:\n4\n0001\n0001\n0011\n1110\nSample Output 1:\n1\n0001\n0001\n0011\n1111\n\nSample Input 2:\n4\n1111\n1111\n1111\n1111\nSample Output 2:\n6\n0011\n0011\n0111\n1101\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6835"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6835", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["josip", 1], ["is", 0], ["a", 0], ["strange", 0], ["painter", 0], ["he", 0], ["wants", 0], ["to", 0], ["paint", 0], ["a", 0], ["picture", 0], ["consisting", 0], ["of", 0], ["n", 0], ["times", 0], ["n", 0], ["pixels", 1], ["where", 1], ["n", 1], ["is", 1], ["a", 1], ["power", 1], ["of", 1], ["two", 1], ["1", 1], ["2", 1], ["4", 1], ["8", 1], ["16", 1], ["etc", 1], ["each", 1], ["pixel", 1], ["will", 1], ["be", 1], ["either", 1], ["black", 1], ["or", 1], ["white", 1], ["josip", 0], ["already", 0], ["has", 0], ["an", 0], ["idea", 0], ["of", 0], ["how", 0], ["each", 0], ["pixel", 0], ["will", 0], ["be", 0], ["coloured", 0], ["this", 0], ["would", 0], ["be", 0], ["no", 0], ["problem", 0], ["if", 0], ["josip’s", 0], ["painting", 0], ["process", 0], ["wasn’t", 0], ["strange", 0], ["he", 0], ["uses", 0], ["the", 0], ["following", 0], ["recursive", 0], ["process", 0], ["if", 1], ["the", 1], ["picture", 0], ["is", 0], ["a", 0], ["single", 0], ["pixel", 0], ["he", 0], ["colours", 0], ["it", 0], ["the", 0], ["way", 0], ["he", 0], ["intended", 0], ["otherwise", 0], ["split", 0], ["the", 0], ["square", 0], ["into", 0], ["four", 0], ["smaller", 0], ["squares", 0], ["and", 0], ["then", 0], ["select", 1], ["one", 1], ["of", 1], ["the", 1], ["four", 1], ["squares", 1], ["and", 1], ["colour", 1], ["it", 1], ["white", 1], ["select", 1], ["one", 1], ["of", 1], ["the", 1], ["three", 1], ["remaining", 1], ["squares", 1], ["and", 1], ["colour", 1], ["it", 1], ["black", 1], ["consider", 1], ["the", 1], ["two", 1], ["remaining", 1], ["squares", 1], ["as", 1], ["new", 1], ["paintings", 1], ["and", 1], ["use", 1], ["the", 1], ["same", 1], ["three", 1], ["step", 1], ["process", 1], ["on", 1], ["them", 1], ["soon", 1], ["he", 1], ["noticed", 1], ["that", 1], ["it", 1], ["was", 1], ["not", 1], ["possible", 1], ["to", 1], ["convert", 1], ["all", 1], ["his", 1], ["visions", 1], ["to", 1], ["paintings", 1], ["with", 1], ["this", 1], ["process", 1], ["your", 1], ["task", 1], ["is", 1], ["to", 1], ["write", 1], ["a", 1], ["program", 1], ["that", 1], ["will", 1], ["paint", 1], ["a", 1], ["picture", 1], ["that", 1], ["differs", 1], ["as", 1], ["little", 1], ["as", 1], ["possible", 1], ["from", 1], ["the", 1], ["desired", 1], ["picture", 1], ["the", 1], ["difference", 1], ["between", 1], ["two", 1], ["pictures", 1], ["is", 1], ["the", 1], ["number", 0], ["of", 0], ["pairs", 0], ["of", 0], ["pixels", 0], ["in", 0], ["corresponding", 0], ["positions", 0], ["that", 0], ["differ", 0], ["in", 0], ["colour", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["an", 0], ["integer", 0], ["n", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["512", 1], ["the", 1], ["size", 1], ["of", 1], ["the", 1], ["picture", 1], ["josip", 1], ["would", 1], ["like", 1], ["to", 1], ["paint", 1], ["n", 1], ["will", 1], ["be", 1], ["a", 1], ["power", 1], ["of", 1], ["2", 1], ["each", 1], ["of", 1], ["the", 1], ["following", 1], ["n", 1], ["lines", 1], ["contains", 1], ["n", 1], ["digits", 0], ["0", 0], ["or", 0], ["1", 0], ["white", 0], ["and", 0], ["black", 0], ["squares", 0], ["in", 0], ["the", 0], ["target", 0], ["picture", 0], ["output", 0], ["on", 1], ["the", 1], ["first", 1], ["line", 1], ["output", 1], ["the", 1], ["smallest", 1], ["possible", 1], ["difference", 1], ["that", 1], ["can", 1], ["be", 1], ["achieved", 1], ["on", 1], ["the", 0], ["next", 0], ["n", 0], ["lines", 0], ["output", 0], ["a", 0], ["picture", 0], ["that", 0], ["can", 0], ["be", 0], ["painted", 0], ["with", 0], ["josip’s", 0], ["process", 1], ["and", 1], ["achieves", 1], ["the", 1], ["smallest", 1], ["difference", 1], ["the", 1], ["picture", 1], ["should", 1], ["be", 1], ["in", 1], ["the", 1], ["same", 1], ["format", 1], ["as", 1], ["in", 1], ["the", 1], ["input", 1], ["note", 1], ["the", 1], ["second", 1], ["part", 1], ["of", 1], ["the", 1], ["output", 1], ["the", 0], ["picture", 0], ["may", 0], ["not", 0], ["be", 0], ["unique", 0], ["any", 0], ["correct", 0], ["output", 0], ["will", 0], ["be", 0], ["accepted", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["0001", 0], ["0001", 0], ["0011", 0], ["1110", 0], ["sample", 0], ["output", 0], ["1", 0], ["1", 0], ["0001", 0], ["0001", 0], ["0011", 0], ["1111", 0], ["sample", 0], ["input", 0], ["2", 0], ["4", 0], ["1111", 0], ["1111", 0], ["1111", 0], ["1111", 0], ["sample", 0], ["output", 0], ["2", 0], ["6", 0], ["0011", 0], ["0011", 0], ["0111", 0], ["1101", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5223880597014925, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5223880597014925, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7463976945244957, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7463976945244957, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5223880597014925, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5223880597014925, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7463976945244957, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7463976945244957, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nPetya and Vasya are tossing a coin. Their friend Valera is appointed as a judge. The game is very simple. First Vasya tosses a coin x times, then Petya tosses a coin y times. If the tossing player gets head, he scores one point. If he gets tail, nobody gets any points. The winner is the player with most points by the end of the game. If boys have the same number of points, the game finishes with a draw.\n\nAt some point, Valera lost his count, and so he can not say exactly what the score is at the end of the game. But there are things he remembers for sure. He remembers that the entire game Vasya got heads at least a times, and Petya got heads at least b times. Moreover, he knows that the winner of the game was Vasya. Valera wants to use this information to know every possible outcome of the game, which do not contradict his memories.\n\n\n-----Input-----\n\nThe single line contains four integers x, y, a, b (1 ≤ a ≤ x ≤ 100, 1 ≤ b ≤ y ≤ 100). The numbers on the line are separated by a space.\n\n\n-----Output-----\n\nIn the first line print integer n — the number of possible outcomes of the game. Then on n lines print the outcomes. On the i-th line print a space-separated pair of integers c_{i}, d_{i} — the number of heads Vasya and Petya got in the i-th outcome of the game, correspondingly. Print pairs of integers (c_{i}, d_{i}) in the strictly increasing order.\n\nLet us remind you that the pair of numbers (p_1, q_1) is less than the pair of numbers (p_2, q_2), if p_1 < p_2, or p_1 = p_2 and also q_1 < q_2.\n\n\n-----Examples-----\nInput\n3 2 1 1\n\nOutput\n3\n2 1\n3 1\n3 2\n\nInput\n2 4 2 2\n\nOutput\n0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\nf = sys.stdin\n#f = open(\"input.txt\", \"r\")\nx, y, a, b = map(int, f.readline().strip().split())\na1, a2 = [], []\nif a+(x-a) <= b:\n\tprint(0)\nelse:\n\tfor i in range(a, x+1):\n\t\tfor k in range(b, y+1):\n\t\t\tif i > k:\n\t\t\t\ta1.append(i)\n\t\t\t\ta2.append(k)\n\tprint(len(a1))\n\tfor i in range(len(a1)):\n\t\tprint(a1[i], a2[i])\n", "#149 Heads or Tails\n\ndata = input().split(\" \")\nx = int(data[0])\ny = int(data[1])\na = int(data[2])\nb = int(data[3])\ncounter = 0\nfor i in range(a, x+1):\n\tfor j in range(b, y+1):\n\t\tif j < i:\n\t\t\tcounter += 1\nif counter == 0:\n\tprint(0)\nelse:\n\tprint(counter)\n\tfor i in range(a, x+1):\n\t\tfor j in range(b, y+1):\n\t\t\tif j < i:\n\t\t\t\tprint(\"%s %s\" %(i, j))\n\t\t\t\tnoAnswer = False\n", "def g(n):\n\tk = (n - a + 1)\n\treturn ((n + a) * k) // 2 - b * k\n\t\nx, y, a, b = list(map(int, input().split()))\na = max(a, b + 1)\n\nif x <= b: print(0)\nelse:\n\tif y > x - 2: print(g(x))\n\telif y >= a - 1: print((x - y - 1) * (y - b + 1) + g(y + 1))\n\telse: print((x - a + 1) * (y - b + 1))\n\t\nfor i in range(a, x + 1):\n\tfor j in range(b, min(i, y + 1)):\n\t\tprint(i, j)\n", "x,y,a,b=list(map(int,input().split()))\nResults=[]\nfor i in range(a,x+1):\n\tfor j in range(b,y+1):\n\t\tif(j>=i):\n\t\t\tcontinue\n\t\tResults.append((i,j))\nprint(len(Results))\n\nResults.sort()\n\nfor item in Results:\n\tprint(item[0],item[1])\n\n", "def all_outcome(x, y, a, b):\n\ts = x + y\n\toutcomes = []\n\n\t# first player's outcomes\n\tfor c in range(a, x+1):\n\t\tfor d in range(b, y+1):\n\t\t\tif d >= b and d <= y and c > d:\n\t\t\t\toutcomes.append([c, d])\n\t\t\n\t# if\n\tprint(len(outcomes))\n\tfor o in outcomes:\n\t\tprint(o[0], o[1])\n\nl = input().split()\nx = int(l[0])\ny = int(l[1])\na = int(l[2])\nb = int(l[3])\n\nall_outcome(x,y, a, b)\n", "x, y, a, b = map(int, input().split())\nans = []\n\nfor i in range(a, x + 1):\n\tfor j in range(b, y + 1):\n\t\tif i > j:\n\t\t\tans.append((i, j))\n\nprint(len(ans))\n[print(x[0], x[1]) for x in ans]\n", "x, y, a, b = (int(x) for x in input().split())\nval = []\nfor i in range(max(a, b + 1), x + 1):\n\tfor j in range(b, min(i - 1, y) + 1):\n\t\tval.append((i, j))\nprint(len(val))\nfor o in val:\n\tprint(o[0], o[1])\n", "x, y, a, b = [int(x) for x in input().split()]\nl = []\nfor i in range(a, x + 1):\n\tfor j in range(b, y + 1):\n\t\tif j < i:\n\t\t\tl.append(str(i) + ' ' + str(j))\nprint(len(l))\nprint('\\n'.join(l))\n", "def main():\n\tx, y, a, b = map(int, input().split())\n\tres = [None]\n\tfor i in range(a, x + 1):\n\t\tsi = str(i)\n\t\tfor j in range(b, min(y + 1, i)):\n\t\t\tres.append(' '.join((si, str(j))))\n\tres[0] = str(len(res) - 1)\n\tprint('\\n'.join(res))\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "a, b, c, d = list(map(int, input().split(' ')))\n\nct = 0\nct2 = 0\nbadtoed= [] \n\nfor i in range(1, a+1):\n\tfor j in range(1, b+1):\n\t\tif i > j and i >= c and j >= d:\n\t\t\tbadtoed.append(str(i) + ' ' + str(j))\n\t\t\tct += 1\n\nprint(ct)\nfor i in badtoed:\n\tprint(i)\n", "f=input().split()\n\na=int(f[0])\nb=int(f[1])\n\nam=int(f[2])\nbm=int(f[3])\n\nl=[]\n\n\nfor i in range(bm+1,a+1):\n\tif i>bm and i>=am:\n\t\tfor j in range(bm,i):\n\t\t\tif j<=b:\n\t\t\t\tp=[]\n\t\t\t\tp.append(i)\n\t\t\t\tp.append(j)\n\t\t\t\tl.append(p)\nif(len(l)==0):\n\tprint(0)\nelse:\n\tprint(len(l))\n\tfor i in range(len(l)):\n\t\tprint(l[i][0],l[i][1])\n", "import sys\nimport math\n \nx, y, a, b = [int(x) for x in (sys.stdin.readline()).split()]\n\nres = []\nfor j in range(x, a - 1, -1):\n\tfor i in range(min(j - 1, y), b - 1, -1):\n\t\tres.append((j, i))\n\nprint(len(res))\nfor i in res[::-1]:\n\tprint(i[0], i[1])\n", "x, y, a, b = [int(x) for x in input().split(' ')]\n\nr = []\nfor i in range(a,x+1):\n\tfor j in range(b,y+1):\n\t\tif i > j:\n\t\t\tr.append([i,j])\n\nl = len(r)\nr.sort(key=lambda z:10*l*z[0]+z[1])\nprint(len(r))\nlist(map(lambda z:print('%s %s'%(z[0],z[1])),r))\n", "x, y, a, b = map(int, input().split())\nans = []\nfor i in range(a, x + 1):\n\tfor j in range(b, y + 1):\n\t\tif i > j:\n\t\t\tans.append((i, j))\n\nprint(len(ans))\n[print(x[0], x[1]) for x in ans]\n", "# coding=utf-8\n\nx, y, a, b = list(map(int, input().split(' ')))\nans = 0\nresult = ''\nfor i in range(a, x + 1):\n\tfor j in range(b, y + 1):\n\t\tif i > j:\n\t\t\tans += 1\n\t\t\tresult += '%s %s\\n' % (i, j)\nprint(ans)\nif ans:\n\tprint(result)\n", "x, y, a, b = list(map(int, input().split()))\n\nresult = []\nfor i in range(a, x + 1):\n\tfor j in range(b, min(i, y + 1)):\n\t\tresult.append((i, j))\nprint(len(result))\nfor x, y in result:\n\tprint(x, y)\n", "x,y,a,b=input().split(' ')\nx=int(x)\ny=int(y)\na=int(a)\nb=int(b)\nn=0\nfor i in range(a,x+1):\n\tfor j in range(b,min(i,y+1)):\n\t\tn+=1\nprint(n)\nfor i in range(a,x+1):\n\tfor j in range(b,min(i,y+1)):\n\t\tprint(i,' ',j)\n", "x,y,a,b = list(map(int,input().split(' ')))\n\nc = []\n\nfor p in range(a,x+1):\n\tfor q in range(b,y+1):\n\t\tif(q<p):\n\t\t\tc.append((p,q))\n\nprint(len(c))\nif c != []:\n\tfor p in c :\n\t\tprint(p[0],p[1])\n\n", "l = input().split()\nl = [int(x) for x in l]\nx = l[0]\ny = l[1]\na = l[2]\nb = l[3]\n\n\nr = []\nfor i in range(a, x+1):\n\tfor j in range(b, y+1):\n\t\tif i>j:\n\t\t\tr.append((i, j))\n\t\telse:\n\t\t\tbreak\n\nprint(len(r))\nfor x in r:\n\tprint(x[0], x[1])\n\n", "x, y, a, b = map(int, input().split())\nans = []\nfor vasya in range(max(b + 1, a), x + 1):\n\tfor petya in range(b, min(vasya, y + 1)):\n\t\tans.append((petya, vasya))\nprint(len(ans))\nprint(\"\\n\".join([\"%d %d\" % (b, a) for a, b in ans]))\n", "# your code goes here\narr = input().split()\np = int(arr[0])\nq = int(arr[1])\na = int(arr[2])\nb = int(arr[3])\nflag = 0\nif a <= b:\n\ta = b+1\nx = b\ny = a\nwhile(a <= p):\n\tb = x\n\twhile(b < a and b <= q):\n\t\tflag += 1\n\t\t#print(str(a) + ' ' + str(b))\n\t\tb += 1\n\ta += 1\nprint(str(flag))\na = y\nb = x\nwhile(a <= p):\n\tb = x\n\twhile(b < a and b <= q):\n\t\tflag += 1\n\t\tprint(str(a) + ' ' + str(b))\n\t\tb += 1\n\ta += 1\n\n\n", "entrada = list([int(x) for x in input().split()])\nqtdjogadasVencedor = entrada[0]#3\nqtdjogadasPerdedor = entrada[1]#2\nqtdminpontVencedor = entrada[2]#1\nqtdminpontPerdedor = entrada[3]#1\nlistaPrincipal, laux = [], []\nfor i in range(qtdminpontVencedor,qtdjogadasVencedor+1):\n\tfor j in range(qtdminpontPerdedor,qtdjogadasPerdedor+1):\n\t\tif j < i:\n\t\t\tlaux.append((i,j))\nprint(len(laux))\nfor i in laux:\n\tprint(i[0],i[1])\n\t\t\n\t\t\n", "def main():\n\t(x, y, a, b) = list(map(int, input().split(' ')))\n\tl = []\n\tfor c in range(a, x + 1):\n\t\tfor d in range(b, y + 1):\n\t\t\tif c > d:\n\t\t\t\tl.append((c, d))\n\tprint(len(l))\n\tfor ll in l:\n\t\tprint(\"{} {}\".format(*ll))\nmain()\n\n", "x, y, a, b = list(map(int, input().split()))\nresults = []\nfor i in range(a, x + 1):\n\tfor j in range(b, y + 1):\n\t\tif i <= j:\n\t\t\tcontinue\n\t\tresults.append((i, j))\nprint(len(results))\nresults.sort()\nfor a, b in results:\n\tprint(a, b)\n", "x,y,a,b=[ int(i) for i in input().split() ]\n\nans=[]\ns_a=a\ns_b=b\nif a<=b:\n\ts_a=b+1\n\ts_b=b  \n\nwhile s_a<=x:\n\tfor i in range(s_b,min(s_a,y+1)):\n\t\tans.append([s_a,i])\n\ts_a+=1\nprint(len(ans))\nfor i in ans:\n\tprint(i[0],i[1])\n\t\n\t\t\n"], "id": "id9522"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9522", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["petya", 2], ["and", 2], ["vasya", 2], ["are", 2], ["tossing", 2], ["a", 2], ["coin", 2], ["their", 2], ["friend", 2], ["valera", 2], ["is", 2], ["appointed", 2], ["as", 2], ["a", 2], ["judge", 2], ["the", 2], ["game", 2], ["is", 2], ["very", 2], ["simple", 2], ["first", 2], ["vasya", 2], ["tosses", 2], ["a", 2], ["coin", 2], ["x", 2], ["times", 2], ["then", 2], ["petya", 2], ["tosses", 2], ["a", 2], ["coin", 2], ["y", 2], ["times", 2], ["if", 2], ["the", 2], ["tossing", 2], ["player", 2], ["gets", 2], ["head", 2], ["he", 2], ["scores", 2], ["one", 2], ["point", 2], ["if", 2], ["he", 2], ["gets", 2], ["tail", 2], ["nobody", 2], ["gets", 2], ["any", 2], ["points", 2], ["the", 2], ["winner", 2], ["is", 2], ["the", 2], ["player", 2], ["with", 2], ["most", 2], ["points", 2], ["by", 2], ["the", 2], ["end", 2], ["of", 2], ["the", 2], ["game", 2], ["if", 2], ["boys", 2], ["have", 2], ["the", 2], ["same", 2], ["number", 2], ["of", 2], ["points", 2], ["the", 2], ["game", 2], ["finishes", 2], ["with", 2], ["a", 2], ["draw", 2], ["at", 2], ["some", 2], ["point", 2], ["valera", 2], ["lost", 2], ["his", 2], ["count", 2], ["and", 2], ["so", 2], ["he", 2], ["can", 2], ["not", 2], ["say", 2], ["exactly", 2], ["what", 2], ["the", 2], ["score", 2], ["is", 2], ["at", 2], ["the", 2], ["end", 2], ["of", 2], ["the", 2], ["game", 2], ["but", 2], ["there", 2], ["are", 2], ["things", 2], ["he", 2], ["remembers", 2], ["for", 2], ["sure", 2], ["he", 2], ["remembers", 2], ["that", 2], ["the", 2], ["entire", 2], ["game", 2], ["vasya", 2], ["got", 2], ["heads", 2], ["at", 2], ["least", 2], ["a", 2], ["times", 2], ["and", 2], ["petya", 2], ["got", 2], ["heads", 2], ["at", 2], ["least", 2], ["b", 2], ["times", 2], ["moreover", 2], ["he", 2], ["knows", 2], ["that", 2], ["the", 2], ["winner", 2], ["of", 2], ["the", 2], ["game", 2], ["was", 2], ["vasya", 2], ["valera", 2], ["wants", 2], ["to", 2], ["use", 2], ["this", 2], ["information", 2], ["to", 2], ["know", 2], ["every", 0], ["possible", 0], ["outcome", 0], ["of", 0], ["the", 0], ["game", 0], ["which", 0], ["do", 0], ["not", 0], ["contradict", 0], ["his", 0], ["memories", 0], ["input", 0], ["the", 2], ["single", 2], ["line", 2], ["contains", 2], ["four", 2], ["integers", 2], ["x", 2], ["y", 2], ["a", 2], ["b", 2], ["1", 2], ["≤", 2], ["a", 2], ["≤", 2], ["x", 2], ["≤", 2], ["100", 2], ["1", 2], ["≤", 2], ["b", 2], ["≤", 2], ["y", 2], ["≤", 0], ["100", 0], ["the", 0], ["numbers", 0], ["on", 0], ["the", 0], ["line", 0], ["are", 0], ["separated", 0], ["by", 0], ["a", 0], ["space", 0], ["output", 0], ["in", 2], ["the", 2], ["first", 2], ["line", 2], ["print", 2], ["integer", 2], ["n", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["possible", 2], ["outcomes", 2], ["of", 2], ["the", 2], ["game", 2], ["then", 2], ["on", 2], ["n", 2], ["lines", 2], ["print", 2], ["the", 2], ["outcomes", 2], ["on", 0], ["the", 0], ["i", 0], ["th", 0], ["line", 0], ["print", 0], ["a", 0], ["space", 0], ["separated", 0], ["pair", 0], ["of", 0], ["integers", 0], ["c", 0], ["i", 0], ["d", 0], ["i", 0], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["heads", 2], ["vasya", 2], ["and", 2], ["petya", 2], ["got", 2], ["in", 2], ["the", 0], ["i", 0], ["th", 0], ["outcome", 0], ["of", 0], ["the", 0], ["game", 0], ["correspondingly", 0], ["print", 0], ["pairs", 0], ["of", 0], ["integers", 0], ["c", 0], ["i", 0], ["d", 0], ["i", 0], ["in", 2], ["the", 2], ["strictly", 0], ["increasing", 0], ["order", 0], ["let", 0], ["us", 0], ["remind", 0], ["you", 0], ["that", 0], ["the", 0], ["pair", 0], ["of", 0], ["numbers", 0], ["p", 0], ["1", 0], ["q", 0], ["1", 0], ["is", 0], ["less", 0], ["than", 0], ["the", 0], ["pair", 0], ["of", 0], ["numbers", 0], ["p", 0], ["2", 0], ["q", 0], ["2", 0], ["if", 0], ["p", 0], ["1", 0], ["p", 0], ["2", 0], ["or", 0], ["p", 0], ["1", 0], ["p", 0], ["2", 0], ["and", 0], ["also", 0], ["q", 0], ["1", 0], ["q", 0], ["2", 0], ["examples", 0], ["input", 0], ["3", 0], ["2", 0], ["1", 0], ["1", 0], ["output", 0], ["3", 0], ["2", 0], ["1", 0], ["3", 0], ["1", 0], ["3", 0], ["2", 0], ["input", 0], ["2", 0], ["4", 0], ["2", 0], ["2", 0], ["output", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6333333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.31666666666666665, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7865497076023392, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3932748538011696, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6333333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.31666666666666665, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7865497076023392, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3932748538011696, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["f", 0], ["sys", 0], ["stdin", 0], ["f", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["f", 0], ["readline", 0], ["strip", 0], ["split", 0], ["a1", 0], ["a2", 0], ["if", 0], ["a", 0], ["x", 0], ["a", 0], ["b", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["i", 0], ["k", 0], ["a1", 0], ["append", 0], ["i", 0], ["a2", 0], ["append", 0], ["k", 0], ["print", 0], ["len", 0], ["a1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a1", 0], ["print", 0], ["a1", 0], ["i", 0], ["a2", 0], ["i", 0], ["149", 0], ["heads", 0], ["or", 0], ["tails", 0], ["data", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["data", 0], ["0", 0], ["y", 0], ["int", 0], ["data", 0], ["1", 0], ["a", 0], ["int", 0], ["data", 0], ["2", 0], ["b", 0], ["int", 0], ["data", 0], ["3", 0], ["counter", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["j", 0], ["i", 0], ["counter", 0], ["1", 0], ["if", 0], ["counter", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["counter", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["j", 0], ["i", 0], ["print", 0], ["s", 0], ["s", 0], ["i", 0], ["j", 0], ["noanswer", 0], ["false", 0], ["def", 0], ["g", 0], ["n", 0], ["k", 0], ["n", 0], ["a", 0], ["1", 0], ["return", 0], ["n", 0], ["a", 0], ["k", 0], ["2", 0], ["b", 0], ["k", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["max", 0], ["a", 0], ["b", 0], ["1", 0], ["if", 0], ["x", 0], ["b", 0], ["print", 0], ["0", 0], ["else", 0], ["if", 0], ["y", 0], ["x", 0], ["2", 0], ["print", 0], ["g", 0], ["x", 0], ["elif", 0], ["y", 0], ["a", 0], ["1", 0], ["print", 0], ["x", 0], ["y", 0], ["1", 0], ["y", 0], ["b", 0], ["1", 0], ["g", 0], ["y", 0], ["1", 0], ["else", 0], ["print", 0], ["x", 0], ["a", 0], ["1", 0], ["y", 0], ["b", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["min", 0], ["i", 0], ["y", 0], ["1", 0], ["print", 0], ["i", 0], ["j", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["results", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["j", 0], ["i", 0], ["continue", 0], ["results", 0], ["append", 0], ["i", 0], ["j", 0], ["print", 0], ["len", 0], ["results", 0], ["results", 0], ["sort", 0], ["for", 0], ["item", 0], ["in", 0], ["results", 0], ["print", 0], ["item", 0], ["0", 0], ["item", 0], ["1", 0], ["def", 0], ["all", 0], ["outcome", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["s", 0], ["x", 0], ["y", 0], ["outcomes", 0], ["first", 0], ["player", 0], ["s", 0], ["outcomes", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["d", 0], ["b", 0], ["and", 0], ["d", 0], ["y", 0], ["and", 0], ["c", 0], ["d", 0], ["outcomes", 0], ["append", 0], ["c", 0], ["d", 0], ["if", 0], ["print", 0], ["len", 0], ["outcomes", 0], ["for", 0], ["o", 0], ["in", 0], ["outcomes", 0], ["print", 0], ["o", 0], ["0", 0], ["o", 0], ["1", 0], ["l", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["l", 0], ["0", 0], ["y", 0], ["int", 0], ["l", 0], ["1", 0], ["a", 0], ["int", 0], ["l", 0], ["2", 0], ["b", 0], ["int", 0], ["l", 0], ["3", 0], ["all", 0], ["outcome", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["ans", 0], ["append", 0], ["i", 0], ["j", 0], ["print", 0], ["len", 0], ["ans", 0], ["print", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["ans", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["val", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["max", 0], ["a", 0], ["b", 0], ["1", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["min", 0], ["i", 0], ["1", 0], ["y", 0], ["1", 0], ["val", 0], ["append", 0], ["i", 0], ["j", 0], ["print", 0], ["len", 0], ["val", 0], ["for", 0], ["o", 0], ["in", 0], ["val", 0], ["print", 0], ["o", 0], ["0", 0], ["o", 0], ["1", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["j", 0], ["i", 0], ["l", 0], ["append", 0], ["str", 0], ["i", 0], ["str", 0], ["j", 0], ["print", 0], ["len", 0], ["l", 0], ["print", 0], ["n", 0], ["join", 0], ["l", 0], ["def", 0], ["main", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["res", 0], ["none", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["si", 0], ["str", 0], ["i", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["min", 0], ["y", 0], ["1", 0], ["i", 0], ["res", 0], ["append", 0], ["join", 0], ["si", 0], ["str", 0], ["j", 0], ["res", 0], ["0", 0], ["str", 0], ["len", 0], ["res", 0], ["1", 0], ["print", 0], ["n", 0], ["join", 0], ["res", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ct", 0], ["0", 0], ["ct2", 0], ["0", 0], ["badtoed", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["a", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["b", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["and", 0], ["i", 0], ["c", 0], ["and", 0], ["j", 0], ["d", 0], ["badtoed", 0], ["append", 0], ["str", 0], ["i", 0], ["str", 0], ["j", 0], ["ct", 0], ["1", 0], ["print", 0], ["ct", 0], ["for", 0], ["i", 0], ["in", 0], ["badtoed", 0], ["print", 0], ["i", 0], ["f", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["f", 0], ["0", 0], ["b", 0], ["int", 0], ["f", 0], ["1", 0], ["am", 0], ["int", 0], ["f", 0], ["2", 0], ["bm", 0], ["int", 0], ["f", 0], ["3", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["bm", 0], ["1", 0], ["a", 0], ["1", 0], ["if", 0], ["i", 0], ["bm", 0], ["and", 0], ["i", 0], ["am", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["bm", 0], ["i", 0], ["if", 0], ["j", 0], ["b", 0], ["p", 0], ["p", 0], ["append", 0], ["i", 0], ["p", 0], ["append", 0], ["j", 0], ["l", 0], ["append", 0], ["p", 0], ["if", 0], ["len", 0], ["l", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["len", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["print", 0], ["l", 0], ["i", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["res", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["x", 0], ["a", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["j", 0], ["1", 0], ["y", 0], ["b", 0], ["1", 0], ["1", 0], ["res", 0], ["append", 0], ["j", 0], ["i", 0], ["print", 0], ["len", 0], ["res", 0], ["for", 0], ["i", 0], ["in", 0], ["res", 0], ["1", 0], ["print", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["r", 0], ["append", 0], ["i", 0], ["j", 0], ["l", 0], ["len", 0], ["r", 0], ["r", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["z", 0], ["10", 0], ["l", 0], ["z", 0], ["0", 0], ["z", 0], ["1", 0], ["print", 0], ["len", 0], ["r", 0], ["list", 0], ["map", 0], ["lambda", 0], ["z", 0], ["print", 0], ["s", 0], ["s", 0], ["z", 0], ["0", 0], ["z", 0], ["1", 0], ["r", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["ans", 0], ["append", 0], ["i", 0], ["j", 0], ["print", 0], ["len", 0], ["ans", 0], ["print", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["ans", 0], ["coding", 0], ["utf", 0], ["8", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["result", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["ans", 0], ["1", 0], ["result", 0], ["s", 0], ["s", 0], ["n", 0], ["i", 0], ["j", 0], ["print", 0], ["ans", 0], ["if", 0], ["ans", 0], ["print", 0], ["result", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["result", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["min", 0], ["i", 0], ["y", 0], ["1", 0], ["result", 0], ["append", 0], ["i", 0], ["j", 0], ["print", 0], ["len", 0], ["result", 0], ["for", 0], ["x", 0], ["y", 0], ["in", 0], ["result", 0], ["print", 0], ["x", 0], ["y", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["input", 0], ["split", 0], ["x", 0], ["int", 0], ["x", 0], ["y", 0], ["int", 0], ["y", 0], ["a", 0], ["int", 0], ["a", 0], ["b", 0], ["int", 0], ["b", 0], ["n", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["min", 0], ["i", 0], ["y", 0], ["1", 0], ["n", 0], ["1", 0], ["print", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["min", 0], ["i", 0], ["y", 0], ["1", 0], ["print", 0], ["i", 0], ["j", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["for", 0], ["p", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["q", 0], ["p", 0], ["c", 0], ["append", 0], ["p", 0], ["q", 0], ["print", 0], ["len", 0], ["c", 0], ["if", 0], ["c", 0], ["for", 0], ["p", 0], ["in", 0], ["c", 0], ["print", 0], ["p", 0], ["0", 0], ["p", 0], ["1", 0], ["l", 0], ["input", 0], ["split", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["x", 0], ["l", 0], ["0", 0], ["y", 0], ["l", 0], ["1", 0], ["a", 0], ["l", 0], ["2", 0], ["b", 0], ["l", 0], ["3", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["r", 0], ["append", 0], ["i", 0], ["j", 0], ["else", 0], ["break", 0], ["print", 0], ["len", 0], ["r", 0], ["for", 0], ["x", 0], ["in", 0], ["r", 0], ["print", 0], ["x", 0], ["0", 0], ["x", 0], ["1", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["for", 0], ["vasya", 0], ["in", 0], ["range", 0], ["max", 0], ["b", 0], ["1", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["petya", 0], ["in", 0], ["range", 0], ["b", 0], ["min", 0], ["vasya", 0], ["y", 0], ["1", 0], ["ans", 0], ["append", 0], ["petya", 0], ["vasya", 0], ["print", 0], ["len", 0], ["ans", 0], ["print", 0], ["n", 0], ["join", 0], ["d", 0], ["d", 0], ["b", 0], ["a", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["ans", 0], ["your", 0], ["code", 0], ["goes", 0], ["here", 0], ["arr", 0], ["input", 0], ["split", 0], ["p", 0], ["int", 0], ["arr", 0], ["0", 0], ["q", 0], ["int", 0], ["arr", 0], ["1", 0], ["a", 0], ["int", 0], ["arr", 0], ["2", 0], ["b", 0], ["int", 0], ["arr", 0], ["3", 0], ["flag", 0], ["0", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["1", 0], ["x", 0], ["b", 0], ["y", 0], ["a", 0], ["while", 0], ["a", 0], ["p", 0], ["b", 0], ["x", 0], ["while", 0], ["b", 0], ["a", 0], ["and", 0], ["b", 0], ["q", 0], ["flag", 0], ["1", 0], ["print", 0], ["str", 0], ["a", 0], ["str", 0], ["b", 0], ["b", 0], ["1", 0], ["a", 0], ["1", 0], ["print", 0], ["str", 0], ["flag", 0], ["a", 0], ["y", 0], ["b", 0], ["x", 0], ["while", 0], ["a", 0], ["p", 0], ["b", 0], ["x", 0], ["while", 0], ["b", 0], ["a", 0], ["and", 0], ["b", 0], ["q", 0], ["flag", 0], ["1", 0], ["print", 0], ["str", 0], ["a", 0], ["str", 0], ["b", 0], ["b", 0], ["1", 0], ["a", 0], ["1", 0], ["entrada", 0], ["list", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["qtdjogadasvencedor", 0], ["entrada", 0], ["0", 0], ["3", 0], ["qtdjogadasperdedor", 0], ["entrada", 0], ["1", 0], ["2", 0], ["qtdminpontvencedor", 0], ["entrada", 0], ["2", 0], ["1", 0], ["qtdminpontperdedor", 0], ["entrada", 0], ["3", 0], ["1", 0], ["listaprincipal", 0], ["laux", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["qtdminpontvencedor", 0], ["qtdjogadasvencedor", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["qtdminpontperdedor", 0], ["qtdjogadasperdedor", 0], ["1", 0], ["if", 0], ["j", 0], ["i", 0], ["laux", 0], ["append", 0], ["i", 0], ["j", 0], ["print", 0], ["len", 0], ["laux", 0], ["for", 0], ["i", 0], ["in", 0], ["laux", 0], ["print", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["def", 0], ["main", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["c", 0], ["d", 0], ["l", 0], ["append", 0], ["c", 0], ["d", 0], ["print", 0], ["len", 0], ["l", 0], ["for", 0], ["ll", 0], ["in", 0], ["l", 0], ["print", 0], ["format", 0], ["ll", 0], ["main", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["results", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["x", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["y", 0], ["1", 0], ["if", 0], ["i", 0], ["j", 0], ["continue", 0], ["results", 0], ["append", 0], ["i", 0], ["j", 0], ["print", 0], ["len", 0], ["results", 0], ["results", 0], ["sort", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["results", 0], ["print", 0], ["a", 0], ["b", 0], ["x", 0], ["y", 0], ["a", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["s", 0], ["a", 0], ["a", 0], ["s", 0], ["b", 0], ["b", 0], ["if", 0], ["a", 0], ["b", 0], ["s", 0], ["a", 0], ["b", 0], ["1", 0], ["s", 0], ["b", 0], ["b", 0], ["while", 0], ["s", 0], ["a", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["s", 0], ["b", 0], ["min", 0], ["s", 0], ["a", 0], ["y", 0], ["1", 0], ["ans", 0], ["append", 0], ["s", 0], ["a", 0], ["i", 0], ["s", 0], ["a", 0], ["1", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["print", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nNimions speak a funny form of language.\n\nWhichever word they are trying to say, from which ever language, it doesn’t quite come out the same. There are several rules for converting words, from any language, to nimionese.\n\nFor any word:\n - All nimion words start with ‘hard’ consonants (b, c, d, g, k, n, p, t) so you must replace each first letter with the nearest one (choose the option nearest to ‘A’ if there is a tie).\n - “Each” becomes “Dach”.\n - Any hard consonant in subsequent syllables after the first one is remarkably better if it is replaced with the same consonant as the one at the start of the word.\n - “Hip-po” becomes “Gip-go”.\n - No word ends in a hard consonant. You must add an ‘ah’, ‘oh’ or ‘uh’ at the end, whichever is nearest, rounding toward ‘A’ in the case of a tie, to the last hard consonant in the word.\n - “Dog” becomes “Dogah”\n - “Hip” becomes “Gipoh”.\n\n-----Input-----\nThe only line of input contains a sentence of between $1$ and $50$ words and up to $10^4$ symbols, including single whitespace characters (‘ ’) between words and the dashes (‘-’) between each syllable.\n\nApart from dashes, the sentence will contain solely lower-and-upper-case Latin letters—and only the first letters of words can be upper-case.\n\n-----Output-----\nWrite to standard output the same sentence from the input, translated to nimionese. Remove any dashes before printing.\n\nIt is guaranteed that the output will fit within $5 \\cdot 10^4$ characters.\n\n-----Examples-----\nSample Input 1:\nI love ba-na-na\nSample Output 1:\nGah kove bababa\n\nSample Input 2:\nCat-a-pil-lar\nSample Output 2:\nCatacillar\n\nSample Input 3:\nCo-ding is the best\nSample Output 3:\nCociccah gs the bestuh\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9120"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9120", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["nimions", 1], ["speak", 1], ["a", 1], ["funny", 1], ["form", 1], ["of", 1], ["language", 1], ["whichever", 1], ["word", 1], ["they", 1], ["are", 1], ["trying", 1], ["to", 1], ["say", 1], ["from", 1], ["which", 1], ["ever", 1], ["language", 1], ["it", 1], ["doesn’t", 1], ["quite", 1], ["come", 1], ["out", 1], ["the", 1], ["same", 1], ["there", 0], ["are", 0], ["several", 0], ["rules", 0], ["for", 0], ["converting", 0], ["words", 0], ["from", 0], ["any", 0], ["language", 0], ["to", 0], ["nimionese", 0], ["for", 0], ["any", 0], ["word", 0], ["all", 1], ["nimion", 1], ["words", 1], ["start", 1], ["with", 1], ["‘hard’", 1], ["consonants", 1], ["b", 1], ["c", 1], ["d", 1], ["g", 1], ["k", 1], ["n", 1], ["p", 1], ["t", 1], ["so", 1], ["you", 1], ["must", 1], ["replace", 1], ["each", 1], ["first", 1], ["letter", 1], ["with", 1], ["the", 1], ["nearest", 1], ["one", 0], ["choose", 0], ["the", 0], ["option", 0], ["nearest", 0], ["to", 0], ["‘a’", 0], ["if", 0], ["there", 0], ["is", 0], ["a", 0], ["tie", 0], ["“each”", 0], ["becomes", 0], ["“dach”", 0], ["any", 1], ["hard", 1], ["consonant", 1], ["in", 1], ["subsequent", 1], ["syllables", 1], ["after", 1], ["the", 1], ["first", 1], ["one", 1], ["is", 1], ["remarkably", 1], ["better", 1], ["if", 1], ["it", 1], ["is", 1], ["replaced", 1], ["with", 1], ["the", 0], ["same", 0], ["consonant", 0], ["as", 0], ["the", 0], ["one", 0], ["at", 0], ["the", 0], ["start", 0], ["of", 0], ["the", 0], ["word", 0], ["“hip", 0], ["po”", 0], ["becomes", 0], ["“gip", 0], ["go”", 0], ["no", 1], ["word", 1], ["ends", 1], ["in", 1], ["a", 1], ["hard", 1], ["consonant", 1], ["you", 1], ["must", 1], ["add", 1], ["an", 1], ["‘ah’", 1], ["‘oh’", 1], ["or", 1], ["‘uh’", 1], ["at", 1], ["the", 1], ["end", 1], ["whichever", 1], ["is", 1], ["nearest", 1], ["rounding", 1], ["toward", 1], ["‘a’", 1], ["in", 1], ["the", 1], ["case", 0], ["of", 0], ["a", 0], ["tie", 0], ["to", 0], ["the", 0], ["last", 0], ["hard", 0], ["consonant", 0], ["in", 0], ["the", 0], ["word", 0], ["“dog”", 0], ["becomes", 0], ["“dogah”", 0], ["“hip”", 0], ["becomes", 0], ["“gipoh”", 0], ["input", 0], ["the", 1], ["only", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["a", 1], ["sentence", 1], ["of", 1], ["between", 1], ["1", 1], ["and", 1], ["50", 1], ["words", 1], ["and", 1], ["up", 1], ["to", 1], ["10", 1], ["4", 1], ["symbols", 1], ["including", 1], ["single", 1], ["whitespace", 1], ["characters", 1], ["‘", 1], ["’", 1], ["between", 1], ["words", 1], ["and", 1], ["the", 1], ["dashes", 1], ["‘", 1], ["’", 1], ["between", 1], ["each", 1], ["syllable", 1], ["apart", 1], ["from", 1], ["dashes", 1], ["the", 1], ["sentence", 1], ["will", 1], ["contain", 1], ["solely", 1], ["lower", 1], ["and", 1], ["upper", 1], ["case", 1], ["latin", 0], ["letters—and", 0], ["only", 0], ["the", 0], ["first", 0], ["letters", 0], ["of", 0], ["words", 0], ["can", 0], ["be", 0], ["upper", 0], ["case", 0], ["output", 0], ["write", 1], ["to", 1], ["standard", 1], ["output", 1], ["the", 1], ["same", 1], ["sentence", 1], ["from", 1], ["the", 1], ["input", 1], ["translated", 1], ["to", 1], ["nimionese", 1], ["remove", 1], ["any", 1], ["dashes", 1], ["before", 1], ["printing", 1], ["it", 1], ["is", 1], ["guaranteed", 0], ["that", 0], ["the", 0], ["output", 0], ["will", 0], ["fit", 0], ["within", 0], ["5", 0], ["cdot", 0], ["10", 0], ["4", 0], ["characters", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["i", 0], ["love", 0], ["ba", 0], ["na", 0], ["na", 0], ["sample", 0], ["output", 0], ["1", 0], ["gah", 0], ["kove", 0], ["bababa", 0], ["sample", 0], ["input", 0], ["2", 0], ["cat", 0], ["a", 0], ["pil", 0], ["lar", 0], ["sample", 0], ["output", 0], ["2", 0], ["catacillar", 0], ["sample", 0], ["input", 0], ["3", 0], ["co", 0], ["ding", 0], ["is", 0], ["the", 0], ["best", 0], ["sample", 0], ["output", 0], ["3", 0], ["cociccah", 0], ["gs", 0], ["the", 0], ["bestuh", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.552901023890785, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.552901023890785, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7672131147540984, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7672131147540984, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.552901023890785, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.552901023890785, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7672131147540984, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7672131147540984, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nAfter Curiosity discovered not just water on Mars, but also an aggressive, bloodthirsty bunch of aliens, the Louvain-la-Neuve municipal government decided to take precautionary measures; they built shelters in order to shelter everyone in the city in the event of an extraterrestial attack.\n\nSeveral alien-proof shelters have been erected throughout the city, where citizens can weather an alien invasion. However, due to municipal regulations and local building codes the shelters are limited in size. This makes it necessary for the government to assign every citizen a shelter to calmly direct themselves towards in the rare event of a fleet of UFOs blotting out the sun. Conditional on no shelter being assigned more people than it can fit, it is of the utmost importance that the time it takes until everyone has arrived at a shelter is minimized.\n\nWe model Louvain-la-Neuve as a network of $n$ locations at which people live, connected by $m$ bidirectional roads. Located at $s$ points throughout the city are the shelters, each with a given maximum capacity. What is the minimum amount of time it takes for everyone to arrive at a shelter, when we assign people to shelters optimally?\n\nThe Louvain-la-Neuve municipal government has made sure that there is enough shelter capacity for its citizens and all shelters can be reached from any location, i.e. it is always possible to shelter everyone in some way.\n\n-----Input-----\n - On the first line are three integers, the number of locations $1 \\leq n \\leq 10^5$, roads $0 \\leq m \\leq 2\\cdot 10^5$, and shelters $1 \\leq s \\leq 10$.\n - Then follows a line with $n$ integers $0 \\leq p_ i \\leq 10^9$, indicating the the number of people living at location $1 \\leq i \\leq n$.\n - Then follow $m$ lines containing three integers $1 \\leq u, v \\leq n$ and $1 \\leq w \\leq 10^9$ indicating that there is a bidirectional road connecting $u$ and $v$ that takes $w$ time to traverse. For any two locations there is at most one road connecting them directly, and no road connects a location to itself.\n - Finally follow $s$ lines with two integers $1 \\leq s_ i \\leq n$ and $1 \\leq c_ i \\leq 10^9$, indicating that there is a shelter with capacity $c_ i$ at location $s_ i$.\n\n-----Output-----\nPrint the minimum amount of time it takes to shelter everyone.\n\n-----Examples-----\nSample Input 1:\n2 1 1\n3 2\n1 2 4\n1 6\nSample Output 1:\n4\n\nSample Input 2:\n4 5 2\n2 0 0 2\n1 2 6\n1 3 2\n2 3 3\n3 4 4\n4 2 6\n3 2\n2 2\nSample Output 2:\n5\n\nSample Input 3:\n7 8 3\n0 1 1 1 1 0 2\n1 2 1\n2 3 1\n3 1 1\n4 6 5\n4 3 1\n6 7 10\n7 5 3\n5 6 3\n6 5\n1 1\n2 1\nSample Output 3:\n6\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9228"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9228", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["after", 1], ["curiosity", 1], ["discovered", 1], ["not", 1], ["just", 1], ["water", 1], ["on", 0], ["mars", 0], ["but", 0], ["also", 0], ["an", 0], ["aggressive", 0], ["bloodthirsty", 0], ["bunch", 0], ["of", 0], ["aliens", 0], ["the", 0], ["louvain", 0], ["la", 0], ["neuve", 0], ["municipal", 1], ["government", 1], ["decided", 1], ["to", 1], ["take", 1], ["precautionary", 1], ["measures", 1], ["they", 1], ["built", 1], ["shelters", 1], ["in", 1], ["order", 1], ["to", 1], ["shelter", 1], ["everyone", 1], ["in", 1], ["the", 1], ["city", 1], ["in", 1], ["the", 1], ["event", 1], ["of", 1], ["an", 1], ["extraterrestial", 1], ["attack", 1], ["several", 1], ["alien", 1], ["proof", 1], ["shelters", 1], ["have", 1], ["been", 1], ["erected", 1], ["throughout", 1], ["the", 1], ["city", 1], ["where", 1], ["citizens", 1], ["can", 1], ["weather", 1], ["an", 1], ["alien", 1], ["invasion", 1], ["however", 1], ["due", 1], ["to", 1], ["municipal", 1], ["regulations", 1], ["and", 1], ["local", 1], ["building", 1], ["codes", 1], ["the", 1], ["shelters", 1], ["are", 1], ["limited", 1], ["in", 1], ["size", 1], ["this", 1], ["makes", 1], ["it", 1], ["necessary", 1], ["for", 1], ["the", 1], ["government", 1], ["to", 1], ["assign", 1], ["every", 1], ["citizen", 1], ["a", 1], ["shelter", 1], ["to", 1], ["calmly", 1], ["direct", 1], ["themselves", 1], ["towards", 1], ["in", 1], ["the", 1], ["rare", 1], ["event", 1], ["of", 1], ["a", 1], ["fleet", 1], ["of", 1], ["ufos", 1], ["blotting", 1], ["out", 1], ["the", 1], ["sun", 1], ["conditional", 1], ["on", 1], ["no", 1], ["shelter", 1], ["being", 1], ["assigned", 1], ["more", 1], ["people", 1], ["than", 1], ["it", 1], ["can", 1], ["fit", 1], ["it", 1], ["is", 1], ["of", 1], ["the", 1], ["utmost", 1], ["importance", 1], ["that", 1], ["the", 1], ["time", 1], ["it", 1], ["takes", 1], ["until", 1], ["everyone", 1], ["has", 1], ["arrived", 1], ["at", 1], ["a", 1], ["shelter", 1], ["is", 1], ["minimized", 1], ["we", 1], ["model", 1], ["louvain", 1], ["la", 1], ["neuve", 1], ["as", 1], ["a", 1], ["network", 1], ["of", 1], ["n", 1], ["locations", 1], ["at", 1], ["which", 1], ["people", 1], ["live", 1], ["connected", 1], ["by", 1], ["m", 1], ["bidirectional", 1], ["roads", 1], ["located", 1], ["at", 1], ["s", 1], ["points", 1], ["throughout", 1], ["the", 1], ["city", 1], ["are", 1], ["the", 1], ["shelters", 1], ["each", 1], ["with", 1], ["a", 1], ["given", 1], ["maximum", 1], ["capacity", 1], ["what", 1], ["is", 1], ["the", 1], ["minimum", 1], ["amount", 1], ["of", 1], ["time", 1], ["it", 1], ["takes", 1], ["for", 1], ["everyone", 1], ["to", 0], ["arrive", 0], ["at", 0], ["a", 0], ["shelter", 0], ["when", 0], ["we", 0], ["assign", 0], ["people", 0], ["to", 0], ["shelters", 0], ["optimally", 0], ["the", 0], ["louvain", 0], ["la", 0], ["neuve", 0], ["municipal", 0], ["government", 0], ["has", 0], ["made", 0], ["sure", 0], ["that", 0], ["there", 0], ["is", 0], ["enough", 0], ["shelter", 0], ["capacity", 0], ["for", 0], ["its", 0], ["citizens", 0], ["and", 0], ["all", 0], ["shelters", 0], ["can", 0], ["be", 0], ["reached", 0], ["from", 0], ["any", 0], ["location", 0], ["i", 0], ["e", 0], ["it", 0], ["is", 0], ["always", 0], ["possible", 0], ["to", 0], ["shelter", 0], ["everyone", 0], ["in", 0], ["some", 0], ["way", 0], ["input", 0], ["on", 0], ["the", 0], ["first", 0], ["line", 0], ["are", 0], ["three", 0], ["integers", 0], ["the", 0], ["number", 0], ["of", 0], ["locations", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["10", 0], ["5", 0], ["roads", 0], ["0", 0], ["leq", 0], ["m", 0], ["leq", 0], ["2", 0], ["cdot", 0], ["10", 0], ["5", 0], ["and", 0], ["shelters", 0], ["1", 0], ["leq", 0], ["s", 0], ["leq", 0], ["10", 0], ["then", 0], ["follows", 0], ["a", 0], ["line", 0], ["with", 0], ["n", 0], ["integers", 0], ["0", 0], ["leq", 0], ["p", 0], ["i", 0], ["leq", 0], ["10", 0], ["9", 0], ["indicating", 0], ["the", 0], ["the", 0], ["number", 0], ["of", 0], ["people", 0], ["living", 0], ["at", 0], ["location", 0], ["1", 0], ["leq", 0], ["i", 0], ["leq", 0], ["n", 0], ["then", 0], ["follow", 0], ["m", 0], ["lines", 0], ["containing", 0], ["three", 0], ["integers", 0], ["1", 0], ["leq", 0], ["u", 0], ["v", 0], ["leq", 0], ["n", 0], ["and", 0], ["1", 0], ["leq", 0], ["w", 0], ["leq", 0], ["10", 0], ["9", 0], ["indicating", 1], ["that", 1], ["there", 1], ["is", 1], ["a", 1], ["bidirectional", 1], ["road", 1], ["connecting", 1], ["u", 1], ["and", 1], ["v", 1], ["that", 1], ["takes", 1], ["w", 1], ["time", 1], ["to", 1], ["traverse", 1], ["for", 1], ["any", 1], ["two", 1], ["locations", 1], ["there", 1], ["is", 1], ["at", 1], ["most", 1], ["one", 1], ["road", 1], ["connecting", 1], ["them", 1], ["directly", 1], ["and", 1], ["no", 1], ["road", 1], ["connects", 1], ["a", 0], ["location", 0], ["to", 0], ["itself", 0], ["finally", 0], ["follow", 0], ["s", 0], ["lines", 0], ["with", 0], ["two", 0], ["integers", 0], ["1", 0], ["leq", 0], ["s", 0], ["i", 0], ["leq", 0], ["n", 0], ["and", 0], ["1", 0], ["leq", 0], ["c", 0], ["i", 0], ["leq", 0], ["10", 0], ["9", 0], ["indicating", 0], ["that", 0], ["there", 0], ["is", 0], ["a", 0], ["shelter", 0], ["with", 0], ["capacity", 0], ["c", 0], ["i", 0], ["at", 0], ["location", 0], ["s", 0], ["i", 0], ["output", 0], ["print", 0], ["the", 0], ["minimum", 0], ["amount", 0], ["of", 0], ["time", 0], ["it", 0], ["takes", 0], ["to", 0], ["shelter", 0], ["everyone", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["2", 0], ["1", 0], ["1", 0], ["3", 0], ["2", 0], ["1", 0], ["2", 0], ["4", 0], ["1", 0], ["6", 0], ["sample", 0], ["output", 0], ["1", 0], ["4", 0], ["sample", 0], ["input", 0], ["2", 0], ["4", 0], ["5", 0], ["2", 0], ["2", 0], ["0", 0], ["0", 0], ["2", 0], ["1", 0], ["2", 0], ["6", 0], ["1", 0], ["3", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["3", 0], ["4", 0], ["4", 0], ["4", 0], ["2", 0], ["6", 0], ["3", 0], ["2", 0], ["2", 0], ["2", 0], ["sample", 0], ["output", 0], ["2", 0], ["5", 0], ["sample", 0], ["input", 0], ["3", 0], ["7", 0], ["8", 0], ["3", 0], ["0", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["3", 0], ["1", 0], ["1", 0], ["4", 0], ["6", 0], ["5", 0], ["4", 0], ["3", 0], ["1", 0], ["6", 0], ["7", 0], ["10", 0], ["7", 0], ["5", 0], ["3", 0], ["5", 0], ["6", 0], ["3", 0], ["6", 0], ["5", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["sample", 0], ["output", 0], ["3", 0], ["6", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4123505976095618, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4123505976095618, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4727626459143969, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4727626459143969, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4123505976095618, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4123505976095618, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4727626459143969, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4727626459143969, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThis problem is a reverse case of the problem “Help Me With The Game”. You are given the output from that problem, and your task is to find the corresponding input.\n\n-----Input-----\nThe input follows the output specification of the problem “Help Me With The Game”.\n\n-----Output-----\nThe output must be a valid input for the problem “Help Me With The Game”, corresponding to the given input data.\n\n-----Examples-----\nSample Input:\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\nSample Output:\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5567"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5567", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["this", 1], ["problem", 1], ["is", 1], ["a", 1], ["reverse", 1], ["case", 1], ["of", 1], ["the", 1], ["problem", 1], ["“help", 1], ["me", 1], ["with", 1], ["the", 1], ["game”", 1], ["you", 1], ["are", 1], ["given", 1], ["the", 1], ["output", 1], ["from", 0], ["that", 0], ["problem", 0], ["and", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["find", 0], ["the", 0], ["corresponding", 0], ["input", 0], ["input", 1], ["the", 1], ["input", 1], ["follows", 0], ["the", 0], ["output", 0], ["specification", 0], ["of", 0], ["the", 0], ["problem", 0], ["“help", 0], ["me", 0], ["with", 0], ["the", 0], ["game”", 0], ["output", 0], ["the", 1], ["output", 1], ["must", 1], ["be", 1], ["a", 1], ["valid", 1], ["input", 1], ["for", 1], ["the", 1], ["problem", 0], ["“help", 0], ["me", 0], ["with", 0], ["the", 0], ["game”", 0], ["corresponding", 0], ["to", 0], ["the", 0], ["given", 0], ["input", 0], ["data", 0], ["examples", 0], ["sample", 0], ["input", 0], ["white", 0], ["ke1", 0], ["qd1", 0], ["ra1", 0], ["rh1", 0], ["bc1", 0], ["bf1", 0], ["nb1", 0], ["a2", 0], ["c2", 0], ["d2", 0], ["f2", 0], ["g2", 0], ["h2", 0], ["a3", 0], ["e4", 0], ["black", 0], ["ke8", 0], ["qd8", 0], ["ra8", 0], ["rh8", 0], ["bc8", 0], ["ng8", 0], ["nc6", 0], ["a7", 0], ["b7", 0], ["c7", 0], ["d7", 0], ["e7", 0], ["f7", 0], ["h7", 0], ["h6", 0], ["sample", 0], ["output", 0], ["r", 0], ["b", 0], ["q", 0], ["k", 0], ["n", 0], ["r", 0], ["p", 15], ["p", 24], ["p", 16], ["p", 6], ["p", 6], ["p", 0], ["p", 0], ["n", 0], ["p", 47], ["p", 61], ["p", 72], ["p", 4], ["p", 0], ["p", 0], ["p", 0], ["p", 0], ["p", 0], ["r", 0], ["n", 0], ["b", 0], ["q", 0], ["k", 0], ["b", 0], ["r", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.29850746268656714, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.23735616114868055, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6232876712328768, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.49166666666666686, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2537313432835821, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.23569651741293535, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6027397260273972, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4902968036529683, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nSomewhere in an animal kingdom far from here there is a large forest. Inside the forest live a large number of frogs. Every year the frogs gather along the big central road in the forest to show the other animals their unique ability during the Big Animal Prowess Conference (BAPC). \n\nThese frogs are experts in forming towers by climbing on top of each other. They are, however, not experts in gathering orderly on the road, so the frogs have arrived on different positions along the central road. The frogs are also notorious show offs: their every jump is as far as they can and always a prime distance. Not every frog is as strong as the others, so jumping distances may vary. Naturally, the frogs only jump to increase their position, never the other way!\n\nThe frog king wants to invite all visitors of the BAPC to marvel at the most spectacular frog tower. Multiple frog towers can be created, but the king wants to show the largest tower at the smallest possible position. He doesn’t want anyone to miss the action because they were at the wrong spot! Can you help the frog king determine the position and size of the tower?\n\n-----Input-----\n - On the first line one integer $n$, the number of frogs gathering on the central road, with $1 \\leq n \\leq 40$.\n - Then follow $n$ lines with integers $x_ i$ and $d_ i$, the initial position and prime jumping distance of the $i^{th}$ frog. Here $0 \\leq x_ i \\leq 2^{60}$ and $2 \\leq d_ i \\leq 10^{8}$. It is given that the product of all unique jumping distances is less than $10^{9}$.\n\n-----Output-----\nOutput a single line with two integers indicating:\n - the smallest position of the highest frog tower,\n - the size of the highest frog tower.\n\nSeparate these integers by a space.\n\n-----Examples-----\nSample Input 1:\n3\n0 2\n1 2\n3 3\nSample Output 1:\n3 2\n\nSample Input 2:\n5\n0 2\n1 3\n3 3\n7 5\n9 5\nSample Output 2:\n12 3\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5253"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5253", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["somewhere", 1], ["in", 1], ["an", 1], ["animal", 1], ["kingdom", 1], ["far", 1], ["from", 1], ["here", 1], ["there", 1], ["is", 1], ["a", 1], ["large", 1], ["forest", 1], ["inside", 1], ["the", 1], ["forest", 1], ["live", 1], ["a", 1], ["large", 1], ["number", 1], ["of", 1], ["frogs", 1], ["every", 1], ["year", 1], ["the", 1], ["frogs", 1], ["gather", 1], ["along", 1], ["the", 1], ["big", 1], ["central", 1], ["road", 1], ["in", 1], ["the", 1], ["forest", 1], ["to", 1], ["show", 1], ["the", 1], ["other", 1], ["animals", 1], ["their", 1], ["unique", 1], ["ability", 1], ["during", 1], ["the", 1], ["big", 1], ["animal", 1], ["prowess", 1], ["conference", 1], ["bapc", 1], ["these", 1], ["frogs", 1], ["are", 1], ["experts", 1], ["in", 1], ["forming", 1], ["towers", 1], ["by", 1], ["climbing", 1], ["on", 1], ["top", 1], ["of", 1], ["each", 1], ["other", 1], ["they", 1], ["are", 1], ["however", 1], ["not", 1], ["experts", 1], ["in", 1], ["gathering", 1], ["orderly", 1], ["on", 1], ["the", 1], ["road", 1], ["so", 1], ["the", 1], ["frogs", 1], ["have", 1], ["arrived", 1], ["on", 1], ["different", 1], ["positions", 1], ["along", 1], ["the", 1], ["central", 1], ["road", 1], ["the", 1], ["frogs", 1], ["are", 1], ["also", 1], ["notorious", 1], ["show", 1], ["offs", 1], ["their", 1], ["every", 1], ["jump", 1], ["is", 1], ["as", 1], ["far", 1], ["as", 1], ["they", 1], ["can", 1], ["and", 1], ["always", 1], ["a", 1], ["prime", 1], ["distance", 1], ["not", 1], ["every", 1], ["frog", 1], ["is", 1], ["as", 1], ["strong", 1], ["as", 1], ["the", 1], ["others", 1], ["so", 1], ["jumping", 1], ["distances", 1], ["may", 1], ["vary", 1], ["naturally", 1], ["the", 1], ["frogs", 1], ["only", 1], ["jump", 1], ["to", 1], ["increase", 1], ["their", 1], ["position", 1], ["never", 1], ["the", 1], ["other", 1], ["way", 1], ["the", 1], ["frog", 1], ["king", 1], ["wants", 1], ["to", 1], ["invite", 1], ["all", 1], ["visitors", 1], ["of", 1], ["the", 1], ["bapc", 1], ["to", 1], ["marvel", 1], ["at", 1], ["the", 1], ["most", 1], ["spectacular", 1], ["frog", 1], ["tower", 1], ["multiple", 1], ["frog", 1], ["towers", 1], ["can", 1], ["be", 1], ["created", 1], ["but", 1], ["the", 1], ["king", 1], ["wants", 1], ["to", 1], ["show", 1], ["the", 1], ["largest", 1], ["tower", 1], ["at", 1], ["the", 1], ["smallest", 1], ["possible", 1], ["position", 1], ["he", 1], ["doesn’t", 1], ["want", 1], ["anyone", 1], ["to", 1], ["miss", 1], ["the", 1], ["action", 1], ["because", 1], ["they", 1], ["were", 1], ["at", 1], ["the", 1], ["wrong", 1], ["spot", 1], ["can", 1], ["you", 1], ["help", 0], ["the", 0], ["frog", 0], ["king", 0], ["determine", 0], ["the", 0], ["position", 0], ["and", 0], ["size", 0], ["of", 0], ["the", 0], ["tower", 0], ["input", 0], ["on", 1], ["the", 1], ["first", 1], ["line", 1], ["one", 1], ["integer", 1], ["n", 0], ["the", 0], ["number", 0], ["of", 0], ["frogs", 0], ["gathering", 0], ["on", 0], ["the", 0], ["central", 0], ["road", 0], ["with", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["40", 0], ["then", 0], ["follow", 0], ["n", 0], ["lines", 0], ["with", 0], ["integers", 0], ["x", 0], ["i", 0], ["and", 0], ["d", 0], ["i", 0], ["the", 1], ["initial", 1], ["position", 0], ["and", 0], ["prime", 0], ["jumping", 0], ["distance", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["frog", 0], ["here", 0], ["0", 0], ["leq", 0], ["x", 0], ["i", 0], ["leq", 0], ["2", 0], ["60", 0], ["and", 0], ["2", 0], ["leq", 0], ["d", 0], ["i", 0], ["leq", 0], ["10", 0], ["8", 0], ["it", 1], ["is", 1], ["given", 0], ["that", 0], ["the", 0], ["product", 0], ["of", 0], ["all", 0], ["unique", 0], ["jumping", 0], ["distances", 0], ["is", 0], ["less", 0], ["than", 0], ["10", 0], ["9", 0], ["output", 0], ["output", 0], ["a", 0], ["single", 0], ["line", 0], ["with", 0], ["two", 0], ["integers", 0], ["indicating", 0], ["the", 0], ["smallest", 0], ["position", 0], ["of", 0], ["the", 0], ["highest", 0], ["frog", 0], ["tower", 0], ["the", 1], ["size", 0], ["of", 0], ["the", 0], ["highest", 0], ["frog", 0], ["tower", 0], ["separate", 0], ["these", 0], ["integers", 0], ["by", 0], ["a", 0], ["space", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["3", 0], ["0", 0], ["2", 0], ["1", 0], ["2", 0], ["3", 0], ["3", 0], ["sample", 0], ["output", 0], ["1", 0], ["3", 0], ["2", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["0", 0], ["2", 0], ["1", 0], ["3", 0], ["3", 0], ["3", 0], ["7", 0], ["5", 0], ["9", 0], ["5", 0], ["sample", 0], ["output", 0], ["2", 0], ["12", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5855072463768116, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5855072463768116, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7338935574229691, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7338935574229691, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5855072463768116, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5855072463768116, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7338935574229691, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7338935574229691, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThe new \"Die Hard\" movie has just been released! There are n people at the cinema box office standing in a huge line. Each of them has a single 100, 50 or 25 ruble bill. A \"Die Hard\" ticket costs 25 rubles. Can the booking clerk sell a ticket to each person and give the change if he initially has no money and sells the tickets strictly in the order people follow in the line?\n\n\n-----Input-----\n\nThe first line contains integer n (1 ≤ n ≤ 10^5) — the number of people in the line. The next line contains n integers, each of them equals 25, 50 or 100 — the values of the bills the people have. The numbers are given in the order from the beginning of the line (at the box office) to the end of the line.\n\n\n-----Output-----\n\nPrint \"YES\" (without the quotes) if the booking clerk can sell a ticket to each person and give the change. Otherwise print \"NO\".\n\n\n-----Examples-----\nInput\n4\n25 25 50 50\n\nOutput\nYES\n\nInput\n2\n25 100\n\nOutput\nNO\n\nInput\n4\n50 50 25 25\n\nOutput\nNO\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\nn=int(sys.stdin.readline())\n\nA=list(map(int,sys.stdin.readline().split()))\n\ns=0\nm=0\n\ncase=True\nfor item in A:\n\tif(item==50 and s>=1):\n\t\tm+=1\n\t\ts-=1\n\t\tcontinue\n\tif(item==100 and m>=1 and s>=1):\n\t\tm-=1\n\t\ts-=1\n\t\tcontinue\n\tif(item==100 and s>=3):\n\t\ts-=3\n\t\tcontinue\n\tif(item==25):\n\t\ts+=1\n\t\tcontinue\n\tcase=False\n\tbreak\n\nif(case):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "def __starting_point():\n\tinp = input()\n\tinp = input()\n\tL = []\n\tfor iv in inp.split(' '):\n\t\tL.append(int(iv))\n\tvals = [0,0,0]\n\tans = \"YES\"\n\tfor iv in L:\n\t\tif iv == 25:\n\t\t\tvals[0]+=1\n\t\tif iv == 50:\n\t\t\tif vals[0]>0:\n\t\t\t\tvals[0]-=1\n\t\t\t\tvals[1]+=1\n\t\t\telse:\n\t\t\t\tans = \"NO\"\n\t\t\t\tbreak\n\t\tif iv == 100:\n\t\t\tif vals[0]>0 and vals[1]>0:\n\t\t\t\tvals[2]+=1\n\t\t\t\tvals[0]-=1\n\t\t\t\tvals[1]-=1\n\t\t\telif vals[0]>2:\n\t\t\t\tvals[0]-=3\n\t\t\t\tvals[2]+=1\n\t\t\telse:\n\t\t\t\tans = \"NO\"\n\t\t\t\tbreak\n\tprint(ans)\n\t\t\n\n__starting_point()\n", "n = int(input())\n\nms = [int(x) for x in input().split()]\n\nyes = True\na = b = 0\ns = 0\nfor m in ms:\n\tif m == 25:\n\t\ta += 1\n\telif m == 50:\n\t\ta -= 1\n\t\tb += 1\n\telif m == 100:\n\t\tif b > 0:\n\t\t\tb -= 1\n\t\t\ta -= 1\n\t\telse:\n\t\t\ta -= 3\n\tif a < 0 or b < 0:\n\t\tyes = False\n\t\tbreak\n\nif yes:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n = int(input())\na = list(map(int, input().split()))\ns = 0\nd = 0\nfor i in a:\n\tif i == 25:\n\t\ts += 1\n\tif i == 50:\n\t\tif s == 0:\n\t\t\tprint('NO')\n\t\t\treturn\n\t\telse:\n\t\t\ts -= 1\n\t\t\td += 1\n\tif i == 100:\n\t\tif d > 0 and s > 0:\n\t\t\ts -= 1\n\t\t\td -= 1\n\t\telif s > 2:\n\t\t\ts -= 3\n\t\telse:\n\t\t\tprint(\"NO\")\n\t\t\treturn\nprint('YES')\n", "n = int(input())\nA = list(map(int, input().split()))\ncur1 = 0\ncur2 = 0\ncur3 = 0\np = 1\nfor i in range(len(A)):\n\tif A[i] == 25:\n\t\tcur1 += 1\n\telif A[i] == 50:\n\t\tif cur1 == 0:\n\t\t\tprint('NO')\n\t\t\tp = 0\n\t\t\tbreak\n\t\telse:\n\t\t\tcur1 -= 1\n\t\t\tcur2 += 1\n\telse:\n\t\tif cur2 >= 1 and cur1 >= 1:\n\t\t\tcur2 -= 1\n\t\t\tcur1 -= 1\n\t\t\tcur3 += 1\n\t\telif cur1 >= 3:\n\t\t\tcur1 -= 3\n\t\t\tcur3 += 1\n\t\telse:\n\t\t\tprint('NO')\n\t\t\tp = 0\n\t\t\tbreak\nif p:\n\tprint('YES')\n", "def possible_change(l):\n\ttwenty_fives = 0\n\tfivties = 0\n\n\tfor currency in l:\n\t\t# 25\n\t\tif currency == 25:\n\t\t\ttwenty_fives += 1\n\t\t# 50\n\t\telif currency == 50:\n\t\t\tif twenty_fives >= 1:\n\t\t\t\ttwenty_fives -= 1\n\t\t\t\tfivties += 1\n\t\t\telse:\n\t\t\t\treturn \"NO\"\n\n\t\t# 100\n\t\telif currency == 100:\n\t\t\tif twenty_fives >= 1 and fivties >= 1:\n\t\t\t\tfivties -= 1\n\t\t\t\ttwenty_fives -= 1\n\t\t\t\t\n\t\t\telif twenty_fives >= 3:\n\t\t\t\ttwenty_fives -= 3\n\n\t\t\telse:\n\t\t\t\treturn \"NO\"\n\t\t\t\n\n\treturn \"YES\"\n\ndef main():\n\tfirst_line = input()\n\tfirst_line = first_line.split()\n\t\n\tn = int(first_line[0])\n\n\tl = input().split()\n\tfor i in range(len(l)):\n\t\tl[i] = int(l[i])\n\t\t\n\n\t\t\n\t\t\n\tprint(possible_change(l))\n\t\n\n\nmain()\n", "n = int(input())\nar = list(map(int,input().split()))\nk25 = 0\nk50 = 0\nfor i in range(n):\n\tif ar[i] == 25:\n\t\tk25 += 1\n\telif ar[i] == 50:\n\t\tk25 -= 1\n\t\tk50 += 1\n\telse:\n\t\tif k50 >= 1:\n\t\t\tk25 -= 1\n\t\t\tk50 -= 1\n\t\telse:\n\t\t\tk25 -= 3\n\tif k25 < 0:\n\t\tbreak\nif k25 < 0:\n\tprint('NO')\nelse:\n\tprint('YES')\n", "n = input()\nqueue = input().split()\np25 = 0\np50 = 0\np100 = 0\nresult = 'YES'\nfor note in queue:\n\tif note == '25':\n\t\tp25 += 1\n\telif note == '50':\n\t\tif p25 > 0:\n\t\t\tp50 += 1\n\t\t\tp25 -= 1\n\t\telse:\n\t\t\tresult = 'NO'\n\t\t\tbreak\n\telif note == '100':\n\t\tif p50 > 0 and p25 > 0:\n\t\t\tp50 -= 1\n\t\t\tp25 -= 1\n\t\t\tp100 += 1\n\t\telif p25 > 2:\n\t\t\tp25 -= 3\n\t\t\tp100 += 1\n\t\telse:\n\t\t\tresult = 'NO'\n\t\t\tbreak\nprint(result)\n", "n= int(input())\narr = list(map(int, input().split()))\n\nn25 = 0\nn50 = 0\nposs = True\nfor i in range(n):\n\tif(arr[i] == 25):\n\t\tn25 += 1\n\telif(arr[i] == 50):\n\t\tn50 += 1\n\t\tn25 -= 1\n\telse:\n\t\tif(n50 > 0):\n\t\t\tn25 -= 1\n\t\t\tn50 -= 1\n\t\telse:\n\t\t\tn25 -= 3\n\tif(n25 < 0 or n50 < 0):\n\t\tposs = False\nprint('NO' if not poss else 'YES')\n", "q = input()\ncnt = [0 for i in range(101)]\ncan = True\nfor i in map(int, input().split()):\n\tcnt[i] += 1\n\tif i == 50:\n\t\tcnt[25] -= 1\n\t\tif cnt[25] < 0:\n\t\t\tcan = False\n\telif i == 100:\n\t\tif cnt[50] >= 1 and cnt[25] >= 1:\n\t\t\tcnt[50] -= 1\n\t\t\tcnt[25] -= 1\n\t\telif cnt[25] >= 3:\n\t\t\tcnt[25] -= 3\n\t\telse:\n\t\t\tcan = False\nprint('YES' if can else 'NO')\n", "n = int(input())\nseq = list(map(int, input().split()))\n\nmoney = [0 for i in range(101)]\n\nfor i in seq:\n\tif i == 50:\n\t\tif money[25] >= 1:\n\t\t\tmoney[25] -= 1\n\t\telse:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\telif i == 100:  \n\t\tif money[50] >= 1 and money[25] >= 1:\n\t\t\tmoney[50] -= 1\n\t\t\tmoney[25] -= 1\n\t\telif money[25] >= 3:\n\t\t\tmoney[25] -= 3\n\t\telse:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\n\tmoney[i] += 1\n\nprint(\"YES\")\n", "3\n\ndef readln(): return tuple(map(int, input().split()))\n\nn, = readln()\ncnt = [0, 0]\nfor v in readln():\n\tif v == 25:\n\t\tcnt[0] += 1\n\telif v == 50:\n\t\tif cnt[0]:\n\t\t\tcnt[0] -= 1\n\t\t\tcnt[1] += 1\n\t\telse:\n\t\t\tcnt = None\n\t\t\tbreak\n\telse:\n\t\tif cnt[0] and cnt[1]:\n\t\t\tcnt[0] -= 1\n\t\t\tcnt[1] -= 1\n\t\telif cnt[0] > 2:\n\t\t\tcnt[0] -= 3\n\t\telse:\n\t\t\tcnt = None\n\t\t\tbreak\nprint('YES' if cnt else 'NO')\n", "n=int(input())\na=list(map(int,input().split()))\nt25,t50,t100,c=0,0,0,1\nfor ele in a:\n\tif ele==25:\n\t\tt25+=1;\n\telif ele==50:\n\t\tif t25:\n\t\t\tt50+=1;t25-=1;\n\t\telse:\n\t\t\tc=0\n\t\t\tbreak\n\telif ele==100:\n\t\tif t50 and t25:\n\t\t\tt100+=1;t25-=1;t50-=1\n\t\telif t25>=3:\n\t\t\tt100+=1;t25-=3\n\t\telse:\n\t\t\tc=0\n\t\t\tbreak\nif c:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n\t\t\n", "import sys\n\n\nn = int(input())\na = list(map(int, input().split()))\nd = dict()\nd[25] = 0\nd[50] = 0\nfor i in a:\n\tif i == 25:\n\t\td[25] += 1\n\telif i == 50:\n\t\td[50] += 1\n\t\tif d[25] == 0:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\td[25] -= 1\n\telse:\n\t\tif d[25] == 0:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\telif d[50] == 0 and d[25] < 3:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\telif d[50] == 0:\n\t\t\td[25] -= 3\n\t\telse:\n\t\t\td[25] -= 1\n\t\t\td[50] -= 1\nprint(\"YES\")\n", "3\n\ninput()\ntext = input().strip()\nif set(text) - {\" \"} == {'2', '5'}:\n\t# Fuck you test 13\n\tprint(\"YES\")\n\timport sys; return\nelif set(text) - {\" \"} in [{\"5\", \"0\"}, {\"1\", \"0\"}]:\n\tprint(\"NO\")\n\timport sys; return\nshit = list(map(int, text.split()))\n#shit = [25] * 40012 # wtf >:(\nbalance = {25: 0, 50: 0, 100: 0}\n\nfor b in shit:\n\tbalance[b] += 1\n\tif b == 100:\n\t\tif balance[50] > 0 and balance[25] > 0:\n\t\t\t# 50 + 25 = 75\n\t\t\tbalance[50] -= 1\n\t\t\tbalance[25] -= 1\n\t\telif balance[25] >= 3:\n\t\t\t# 25 + 25 + 25 = 75\n\t\t\tbalance[25] -= 3\n\t\telse:\n\t\t\tprint(\"NO\")\n\t\t\tbreak\n\telif b == 50:\n\t\tif balance[25] > 0:\n\t\t\t# 25 = 25\n\t\t\tbalance[25] -= 1\n\t\telse:\n\t\t\tprint(\"NO\")\n\t\t\tbreak\nelse:\n\tprint(\"YES\")\n\n", "def main():\n\tn = int(input())\n\tL = [int(x) for x in input().split()]\n\tq,h = 0,0\n\tfor p in L:\n\t\tif p == 25:\n\t\t\tq += 1\n\t\telif p == 50:\n\t\t\tif q > 0:\n\t\t\t\th += 1\n\t\t\t\tq -= 1\n\t\t\telse:\n\t\t\t\treturn 'NO'\n\t\telse:\n\t\t\tif q > 0 and h > 0:\n\t\t\t\tq -= 1\n\t\t\t\th -= 1\n\t\t\telif q > 2:\n\t\t\t\tq -= 3\n\t\t\telse:\n\t\t\t\treturn 'NO'\n\treturn 'YES'\n\t\t\nprint(main())\n", "input()\nx = y = 0\nfor t in map(int, input().split()):\n\tk = t - 25\n\tif y >= k // 50:\n\t\ty -= k // 50\n\t\tk -= 50 * (k // 50)\n\tif x >= k // 25:\n\t\tx -= k // 25\n\t\tk -= 25 * (k // 25)\n\tif k > 0:\n\t\tprint(\"NO\")\n\t\treturn\n\tif t == 25:\n\t\tx += 1\n\telif t == 50:\n\t\ty += 1    \nprint(\"YES\")\n", "people = int(input())\nline = input().split(\" \")\nline = [int(x) for x in line]\nbalance = 0\ntwofive = 0\nfifty = 0\nhundred = 0\nfor money in line:\n\tif money == 25:\n\t\ttwofive += 1\n\telif money == 50:\n\t\tif twofive > 0:\n\t\t\ttwofive -= 1\n\t\t\tfifty += 1\n\t\telse:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\telif money == 100:\n\t\tif fifty > 0 and twofive > 0:\n\t\t\tfifty -= 1\n\t\t\ttwofive -= 1\n\t\t\thundred += 1\n\t\telif twofive > 2:\n\t\t\ttwofive -= 3\n\t\t\thundred += 1\n\t\telse:\n\t\t\tprint(\"NO\")\n\t\t\treturn\nprint(\"YES\")\n", "n = input()\nb = True\n\nMeta = {'25':0, '50':0, '100':0}\ni25=0\ni50=0\n\nData = input().split(' ')\n\nfor item in Data:\n\tif item=='25':\n\t\ti25+=1\n\telif item=='50':\n\t\ti50+=1\n\t\tif i25==0:\n\t\t\tb = False\n\t\t\tbreak\n\t\telse:\n\t\t\ti25-=1\n\telif item=='100':\n\t\tif i25==0 and i50==0:\n\t\t\tb = False\n\t\t\tbreak\n\t\telse:\n\t\t\tif i50>=1 and i25>=1:\n\t\t\t\ti50-=1\n\t\t\t\ti25-=1\n\t\t\telif i25>=3:\n\t\t\t\ti25-=3\n\t\t\telse:\n\t\t\t\tb = False\n\t\t\t\tbreak\n\nif b:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "input()\na=b=c=0\nfor i in input().split():\n\tif i == '25':\n\t\ta += 2\n\telif i == '50':\n\t\tb += 1\n\telif b:\n\t\tb -= 1\n\telse :\n\t\ta -= 2\n\ta -= 1\n\tif a < 0 or b < 0:\n\t\tc = 1\nif c:\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")\n", "def f():\n\tn = int(input())\n\tt = list(map(int, input().split()))\n\ta, b = 0, 0\n\tfor i in t:\n\t\tif i == 25: a += 1\n\t\telif i == 50:\n\t\t\tb += 1\n\t\t\ta -= 1\n\t\telse:\n\t\t\tif b > 0:\n\t\t\t\tb -= 1\n\t\t\t\ta -= 1\n\t\t\telse: a -= 3\n\t\tif a < 0: return 1\n\treturn 0\n\nprint('YNEOS'[f() :: 2])\n", "def f():\n\tn = int(input())\n\tt = input().split()\n\ta, b = 0, 0\n\tfor i in t:\n\t\tif i == '25': a += 1\n\t\telif i > '3':\n\t\t\tb += 1\n\t\t\ta -= 1\n\t\telse:\n\t\t\tif b > 0:\n\t\t\t\tb -= 1\n\t\t\t\ta -= 1\n\t\t\telse: a -= 3\n\t\tif a < 0: return 1\n\treturn 0\n\nprint('YNEOS'[f() :: 2])\n", "n = int(input())\nsez = [0, 0, 0]\nkvenka = [int(i) for i in input().split()]\nprej = True\nfor i in range(n):\n\ttemp = kvenka[i]\n\tif temp == 25:\n\t\tsez[0] += 1\n\telif temp == 50:\n\t\tsez[1] += 1\n\t\tsez[0] -= 1\n\telse:\n\t\tsez[2] += 1\n\t\tif sez[1] > 0:\n\t\t\tsez[0] -= 1\n\t\t\tsez[1] -= 1\n\t\telse:\n\t\t\tsez[0] -= 3\n\n\tok = True\n\tfor i in range(3):\n\t\tif sez[i] < 0:\n\t\t\tok = False\n\n\tif not ok:\n\t\tprej = False\n\t\tbreak\n\nif prej:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n\n\t\t\n\n", "x=int(input())\nstri=input().split()\nbill=[int(p) for p in stri]\ntemp=0\n\n\nrem=[0,0,0]\n\nfor x in bill:\n\tif(bill[0]!=25):\n\t\ttemp=0\n\t\tbreak;\n\tif(x==25):\n\t       rem[0]=rem[0]+25\n\t       temp=1\n\telif(x==50):\n\t\tif(rem[0]!=0):\n\t\t\trem[0]-=25\n\t\t\ttemp=1\n\t\t\trem[1]+=50\n\t\telse:\n\t\t\ttemp=0\n\t\t\tbreak;\n\t\t\n\t\t\n\telse:\n\t\tif(rem[1]>=50 and rem[0]>=25):\n\t\t\trem[0]-=25\n\t\t\trem[1]-=50\n\t\t\ttemp=1\n\t\telif(rem[0]>=75):\n\t\t\trem[0]-=75\n\t\t\ttemp=1\n\t\telse:\n\t\t\ttemp=0\n\t\t\tbreak;\n\t\t\n\t\t\t\n\n\t\trem[2]=rem[2]+100\n\t\n\n\nif(temp==0):\n\tprint(\"NO\")\nelse:print(\"YES\")\n\n\t\n       \n\n"], "id": "id5214"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5214", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 0], ["new", 0], ["die", 0], ["hard", 0], ["movie", 0], ["has", 0], ["just", 0], ["been", 0], ["released", 0], ["there", 0], ["are", 0], ["n", 0], ["people", 3], ["at", 3], ["the", 3], ["cinema", 3], ["box", 3], ["office", 3], ["standing", 3], ["in", 3], ["a", 3], ["huge", 0], ["line", 0], ["each", 0], ["of", 0], ["them", 0], ["has", 0], ["a", 0], ["single", 0], ["100", 0], ["50", 0], ["or", 0], ["25", 0], ["ruble", 0], ["bill", 0], ["a", 0], ["die", 0], ["hard", 0], ["ticket", 0], ["costs", 0], ["25", 0], ["rubles", 0], ["can", 0], ["the", 0], ["booking", 0], ["clerk", 0], ["sell", 1], ["a", 1], ["ticket", 1], ["to", 1], ["each", 1], ["person", 1], ["and", 1], ["give", 1], ["the", 1], ["change", 3], ["if", 3], ["he", 3], ["initially", 3], ["has", 1], ["no", 1], ["money", 1], ["and", 1], ["sells", 0], ["the", 0], ["tickets", 0], ["strictly", 0], ["in", 0], ["the", 0], ["order", 0], ["people", 0], ["follow", 0], ["in", 0], ["the", 0], ["line", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["people", 0], ["in", 0], ["the", 0], ["line", 0], ["the", 0], ["next", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["each", 0], ["of", 0], ["them", 0], ["equals", 0], ["25", 0], ["50", 0], ["or", 0], ["100", 0], ["—", 0], ["the", 0], ["values", 0], ["of", 0], ["the", 0], ["bills", 0], ["the", 0], ["people", 0], ["have", 0], ["the", 0], ["numbers", 0], ["are", 0], ["given", 0], ["in", 0], ["the", 0], ["order", 0], ["from", 0], ["the", 0], ["beginning", 0], ["of", 0], ["the", 0], ["line", 0], ["at", 0], ["the", 0], ["box", 0], ["office", 0], ["to", 0], ["the", 0], ["end", 0], ["of", 0], ["the", 0], ["line", 0], ["output", 0], ["print", 0], ["yes", 0], ["without", 0], ["the", 0], ["quotes", 0], ["if", 0], ["the", 0], ["booking", 0], ["clerk", 0], ["can", 0], ["sell", 0], ["a", 0], ["ticket", 0], ["to", 0], ["each", 0], ["person", 0], ["and", 0], ["give", 0], ["the", 0], ["change", 0], ["otherwise", 0], ["print", 0], ["no", 0], ["examples", 0], ["input", 0], ["4", 0], ["25", 0], ["25", 0], ["50", 0], ["50", 0], ["output", 0], ["yes", 0], ["input", 0], ["2", 0], ["25", 0], ["100", 0], ["output", 0], ["no", 0], ["input", 0], ["4", 0], ["50", 0], ["50", 0], ["25", 0], ["25", 0], ["output", 0], ["no", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1595744680851064, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11347517730496455, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.33, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.26, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1595744680851064, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11347517730496455, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.33, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.26, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["s", 0], ["0", 0], ["m", 0], ["0", 0], ["case", 0], ["true", 0], ["for", 0], ["item", 0], ["in", 0], ["a", 0], ["if", 0], ["item", 0], ["50", 0], ["and", 0], ["s", 0], ["1", 0], ["m", 0], ["1", 0], ["s", 0], ["1", 0], ["continue", 0], ["if", 0], ["item", 0], ["100", 0], ["and", 0], ["m", 0], ["1", 0], ["and", 0], ["s", 0], ["1", 0], ["m", 0], ["1", 0], ["s", 0], ["1", 0], ["continue", 0], ["if", 0], ["item", 0], ["100", 0], ["and", 0], ["s", 0], ["3", 0], ["s", 0], ["3", 0], ["continue", 0], ["if", 0], ["item", 0], ["25", 0], ["s", 0], ["1", 0], ["continue", 0], ["case", 0], ["false", 0], ["break", 0], ["if", 0], ["case", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["inp", 0], ["input", 0], ["inp", 0], ["input", 0], ["l", 0], ["for", 0], ["iv", 0], ["in", 0], ["inp", 0], ["split", 0], ["l", 0], ["append", 0], ["int", 0], ["iv", 0], ["vals", 0], ["0", 0], ["0", 0], ["0", 0], ["ans", 0], ["yes", 0], ["for", 0], ["iv", 0], ["in", 0], ["l", 0], ["if", 0], ["iv", 0], ["25", 0], ["vals", 0], ["0", 0], ["1", 0], ["if", 0], ["iv", 0], ["50", 0], ["if", 0], ["vals", 0], ["0", 0], ["0", 0], ["vals", 0], ["0", 0], ["1", 0], ["vals", 0], ["1", 0], ["1", 0], ["else", 0], ["ans", 0], ["no", 0], ["break", 0], ["if", 0], ["iv", 0], ["100", 0], ["if", 0], ["vals", 0], ["0", 0], ["0", 0], ["and", 0], ["vals", 0], ["1", 0], ["0", 0], ["vals", 0], ["2", 0], ["1", 0], ["vals", 0], ["0", 0], ["1", 0], ["vals", 0], ["1", 0], ["1", 0], ["elif", 0], ["vals", 0], ["0", 0], ["2", 0], ["vals", 0], ["0", 0], ["3", 0], ["vals", 0], ["2", 0], ["1", 0], ["else", 0], ["ans", 0], ["no", 0], ["break", 0], ["print", 0], ["ans", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["ms", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["yes", 0], ["true", 0], ["a", 0], ["b", 0], ["0", 0], ["s", 0], ["0", 0], ["for", 0], ["m", 0], ["in", 0], ["ms", 0], ["if", 0], ["m", 0], ["25", 0], ["a", 0], ["1", 0], ["elif", 0], ["m", 0], ["50", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["elif", 0], ["m", 0], ["100", 0], ["if", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["a", 0], ["1", 0], ["else", 0], ["a", 0], ["3", 0], ["if", 0], ["a", 0], ["0", 0], ["or", 0], ["b", 0], ["0", 0], ["yes", 0], ["false", 0], ["break", 0], ["if", 0], ["yes", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["d", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["25", 0], ["s", 0], ["1", 0], ["if", 0], ["i", 0], ["50", 0], ["if", 0], ["s", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["else", 0], ["s", 0], ["1", 0], ["d", 0], ["1", 0], ["if", 0], ["i", 0], ["100", 0], ["if", 0], ["d", 0], ["0", 0], ["and", 0], ["s", 0], ["0", 0], ["s", 0], ["1", 0], ["d", 0], ["1", 0], ["elif", 0], ["s", 0], ["2", 0], ["s", 0], ["3", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cur1", 0], ["0", 0], ["cur2", 0], ["0", 0], ["cur3", 0], ["0", 0], ["p", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["25", 0], ["cur1", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["50", 0], ["if", 0], ["cur1", 0], ["0", 0], ["print", 0], ["no", 0], ["p", 0], ["0", 0], ["break", 0], ["else", 0], ["cur1", 0], ["1", 0], ["cur2", 0], ["1", 0], ["else", 0], ["if", 0], ["cur2", 0], ["1", 0], ["and", 0], ["cur1", 0], ["1", 0], ["cur2", 0], ["1", 0], ["cur1", 0], ["1", 0], ["cur3", 0], ["1", 0], ["elif", 0], ["cur1", 0], ["3", 0], ["cur1", 0], ["3", 0], ["cur3", 0], ["1", 0], ["else", 0], ["print", 0], ["no", 0], ["p", 0], ["0", 0], ["break", 0], ["if", 0], ["p", 0], ["print", 0], ["yes", 0], ["def", 0], ["possible", 0], ["change", 0], ["l", 0], ["twenty", 0], ["fives", 0], ["0", 0], ["fivties", 0], ["0", 0], ["for", 0], ["currency", 0], ["in", 0], ["l", 0], ["25", 0], ["if", 0], ["currency", 0], ["25", 0], ["twenty", 0], ["fives", 0], ["1", 0], ["50", 0], ["elif", 0], ["currency", 0], ["50", 0], ["if", 0], ["twenty", 0], ["fives", 0], ["1", 0], ["twenty", 0], ["fives", 0], ["1", 0], ["fivties", 0], ["1", 0], ["else", 0], ["return", 0], ["no", 0], ["100", 0], ["elif", 0], ["currency", 0], ["100", 0], ["if", 0], ["twenty", 0], ["fives", 0], ["1", 0], ["and", 0], ["fivties", 0], ["1", 0], ["fivties", 0], ["1", 0], ["twenty", 0], ["fives", 0], ["1", 0], ["elif", 0], ["twenty", 0], ["fives", 0], ["3", 0], ["twenty", 0], ["fives", 0], ["3", 0], ["else", 0], ["return", 0], ["no", 0], ["return", 0], ["yes", 0], ["def", 0], ["main", 0], ["first", 0], ["line", 0], ["input", 0], ["first", 0], ["line", 0], ["first", 0], ["line", 0], ["split", 0], ["n", 0], ["int", 0], ["first", 0], ["line", 0], ["0", 0], ["l", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["l", 0], ["i", 0], ["int", 0], ["l", 0], ["i", 0], ["print", 0], ["possible", 0], ["change", 0], ["l", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["ar", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k25", 0], ["0", 0], ["k50", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ar", 0], ["i", 0], ["25", 0], ["k25", 0], ["1", 0], ["elif", 0], ["ar", 0], ["i", 0], ["50", 0], ["k25", 0], ["1", 0], ["k50", 0], ["1", 0], ["else", 0], ["if", 0], ["k50", 0], ["1", 0], ["k25", 0], ["1", 0], ["k50", 0], ["1", 0], ["else", 0], ["k25", 0], ["3", 0], ["if", 0], ["k25", 0], ["0", 0], ["break", 0], ["if", 0], ["k25", 0], ["0", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["n", 0], ["input", 0], ["queue", 0], ["input", 0], ["split", 0], ["p25", 0], ["0", 0], ["p50", 0], ["0", 0], ["p100", 0], ["0", 0], ["result", 0], ["yes", 0], ["for", 0], ["note", 0], ["in", 0], ["queue", 0], ["if", 0], ["note", 0], ["25", 0], ["p25", 0], ["1", 0], ["elif", 0], ["note", 0], ["50", 0], ["if", 0], ["p25", 0], ["0", 0], ["p50", 0], ["1", 0], ["p25", 0], ["1", 0], ["else", 0], ["result", 0], ["no", 0], ["break", 0], ["elif", 0], ["note", 0], ["100", 0], ["if", 0], ["p50", 0], ["0", 0], ["and", 0], ["p25", 0], ["0", 0], ["p50", 0], ["1", 0], ["p25", 0], ["1", 0], ["p100", 0], ["1", 0], ["elif", 0], ["p25", 0], ["2", 0], ["p25", 0], ["3", 0], ["p100", 0], ["1", 0], ["else", 0], ["result", 0], ["no", 0], ["break", 0], ["print", 0], ["result", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n25", 0], ["0", 0], ["n50", 0], ["0", 0], ["poss", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["25", 0], ["n25", 0], ["1", 0], ["elif", 0], ["arr", 0], ["i", 0], ["50", 0], ["n50", 0], ["1", 0], ["n25", 0], ["1", 0], ["else", 0], ["if", 0], ["n50", 0], ["0", 0], ["n25", 0], ["1", 0], ["n50", 0], ["1", 0], ["else", 0], ["n25", 0], ["3", 0], ["if", 0], ["n25", 0], ["0", 0], ["or", 0], ["n50", 0], ["0", 0], ["poss", 0], ["false", 0], ["print", 0], ["no", 0], ["if", 0], ["not", 0], ["poss", 0], ["else", 0], ["yes", 0], ["q", 0], ["input", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["101", 0], ["can", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["i", 0], ["1", 0], ["if", 0], ["i", 0], ["50", 0], ["cnt", 0], ["25", 0], ["1", 0], ["if", 0], ["cnt", 0], ["25", 0], ["0", 0], ["can", 0], ["false", 0], ["elif", 0], ["i", 0], ["100", 0], ["if", 0], ["cnt", 0], ["50", 0], ["1", 0], ["and", 0], ["cnt", 0], ["25", 0], ["1", 0], ["cnt", 0], ["50", 0], ["1", 0], ["cnt", 0], ["25", 0], ["1", 0], ["elif", 0], ["cnt", 0], ["25", 0], ["3", 0], ["cnt", 0], ["25", 0], ["3", 0], ["else", 0], ["can", 0], ["false", 0], ["print", 0], ["yes", 0], ["if", 0], ["can", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["seq", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["money", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["101", 0], ["for", 0], ["i", 0], ["in", 0], ["seq", 0], ["if", 0], ["i", 0], ["50", 0], ["if", 0], ["money", 0], ["25", 0], ["1", 0], ["money", 0], ["25", 0], ["1", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["elif", 0], ["i", 0], ["100", 0], ["if", 0], ["money", 0], ["50", 0], ["1", 0], ["and", 0], ["money", 0], ["25", 0], ["1", 0], ["money", 0], ["50", 0], ["1", 0], ["money", 0], ["25", 0], ["1", 0], ["elif", 0], ["money", 0], ["25", 0], ["3", 0], ["money", 0], ["25", 0], ["3", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["money", 0], ["i", 0], ["1", 0], ["print", 0], ["yes", 0], ["3", 0], ["def", 0], ["readln", 0], ["return", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["readln", 0], ["cnt", 0], ["0", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["readln", 0], ["if", 0], ["v", 0], ["25", 0], ["cnt", 0], ["0", 0], ["1", 0], ["elif", 0], ["v", 0], ["50", 0], ["if", 0], ["cnt", 0], ["0", 0], ["cnt", 0], ["0", 0], ["1", 0], ["cnt", 0], ["1", 0], ["1", 0], ["else", 0], ["cnt", 0], ["none", 0], ["break", 0], ["else", 0], ["if", 0], ["cnt", 0], ["0", 0], ["and", 0], ["cnt", 0], ["1", 0], ["cnt", 0], ["0", 0], ["1", 0], ["cnt", 0], ["1", 0], ["1", 0], ["elif", 0], ["cnt", 0], ["0", 0], ["2", 0], ["cnt", 0], ["0", 0], ["3", 0], ["else", 0], ["cnt", 0], ["none", 0], ["break", 0], ["print", 0], ["yes", 0], ["if", 0], ["cnt", 0], ["else", 0], ["no", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t25", 0], ["t50", 0], ["t100", 0], ["c", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["for", 0], ["ele", 0], ["in", 0], ["a", 0], ["if", 0], ["ele", 0], ["25", 0], ["t25", 0], ["1", 0], ["elif", 0], ["ele", 0], ["50", 0], ["if", 0], ["t25", 0], ["t50", 0], ["1", 0], ["t25", 0], ["1", 0], ["else", 0], ["c", 0], ["0", 0], ["break", 0], ["elif", 0], ["ele", 0], ["100", 0], ["if", 0], ["t50", 0], ["and", 0], ["t25", 0], ["t100", 0], ["1", 0], ["t25", 0], ["1", 0], ["t50", 0], ["1", 0], ["elif", 0], ["t25", 0], ["3", 0], ["t100", 0], ["1", 0], ["t25", 0], ["3", 0], ["else", 0], ["c", 0], ["0", 0], ["break", 0], ["if", 0], ["c", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["dict", 0], ["d", 0], ["25", 0], ["0", 0], ["d", 0], ["50", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["25", 0], ["d", 0], ["25", 0], ["1", 0], ["elif", 0], ["i", 0], ["50", 0], ["d", 0], ["50", 0], ["1", 0], ["if", 0], ["d", 0], ["25", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["d", 0], ["25", 0], ["1", 0], ["else", 0], ["if", 0], ["d", 0], ["25", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["elif", 0], ["d", 0], ["50", 0], ["0", 0], ["and", 0], ["d", 0], ["25", 0], ["3", 0], ["print", 0], ["no", 0], ["return", 0], ["elif", 0], ["d", 0], ["50", 0], ["0", 0], ["d", 0], ["25", 0], ["3", 0], ["else", 0], ["d", 0], ["25", 0], ["1", 0], ["d", 0], ["50", 0], ["1", 0], ["print", 0], ["yes", 0], ["3", 0], ["input", 0], ["text", 0], ["input", 0], ["strip", 0], ["if", 0], ["set", 0], ["text", 0], ["2", 0], ["5", 0], ["fuck", 0], ["you", 0], ["test", 0], ["13", 0], ["print", 0], ["yes", 0], ["import", 0], ["sys", 0], ["return", 0], ["elif", 0], ["set", 0], ["text", 0], ["in", 0], ["5", 0], ["0", 0], ["1", 0], ["0", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["return", 0], ["shit", 0], ["list", 0], ["map", 0], ["int", 0], ["text", 0], ["split", 0], ["shit", 0], ["25", 0], ["40012", 0], ["wtf", 0], ["balance", 0], ["25", 0], ["0", 0], ["50", 0], ["0", 0], ["100", 0], ["0", 0], ["for", 0], ["b", 0], ["in", 0], ["shit", 0], ["balance", 0], ["b", 0], ["1", 0], ["if", 0], ["b", 0], ["100", 0], ["if", 0], ["balance", 0], ["50", 0], ["0", 0], ["and", 0], ["balance", 0], ["25", 0], ["0", 0], ["50", 0], ["25", 0], ["75", 0], ["balance", 0], ["50", 0], ["1", 0], ["balance", 0], ["25", 0], ["1", 0], ["elif", 0], ["balance", 0], ["25", 0], ["3", 0], ["25", 0], ["25", 0], ["25", 0], ["75", 0], ["balance", 0], ["25", 0], ["3", 0], ["else", 0], ["print", 0], ["no", 0], ["break", 0], ["elif", 0], ["b", 0], ["50", 0], ["if", 0], ["balance", 0], ["25", 0], ["0", 0], ["25", 0], ["25", 0], ["balance", 0], ["25", 0], ["1", 0], ["else", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["print", 0], ["yes", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["q", 0], ["h", 0], ["0", 0], ["0", 0], ["for", 0], ["p", 0], ["in", 0], ["l", 0], ["if", 0], ["p", 0], ["25", 0], ["q", 0], ["1", 0], ["elif", 0], ["p", 0], ["50", 0], ["if", 0], ["q", 0], ["0", 0], ["h", 0], ["1", 0], ["q", 0], ["1", 0], ["else", 0], ["return", 0], ["no", 0], ["else", 0], ["if", 0], ["q", 0], ["0", 0], ["and", 0], ["h", 0], ["0", 0], ["q", 0], ["1", 0], ["h", 0], ["1", 0], ["elif", 0], ["q", 0], ["2", 0], ["q", 0], ["3", 0], ["else", 0], ["return", 0], ["no", 0], ["return", 0], ["yes", 0], ["print", 0], ["main", 0], ["input", 0], ["x", 0], ["y", 0], ["0", 0], ["for", 0], ["t", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k", 0], ["t", 0], ["25", 0], ["if", 0], ["y", 0], ["k", 0], ["50", 0], ["y", 0], ["k", 0], ["50", 0], ["k", 0], ["50", 0], ["k", 0], ["50", 0], ["if", 0], ["x", 0], ["k", 0], ["25", 0], ["x", 0], ["k", 0], ["25", 0], ["k", 0], ["25", 0], ["k", 0], ["25", 0], ["if", 0], ["k", 0], ["0", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["t", 0], ["25", 0], ["x", 0], ["1", 0], ["elif", 0], ["t", 0], ["50", 0], ["y", 0], ["1", 0], ["print", 0], ["yes", 0], ["people", 0], ["int", 0], ["input", 0], ["line", 0], ["input", 0], ["split", 0], ["line", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["line", 0], ["balance", 0], ["0", 0], ["twofive", 0], ["0", 0], ["fifty", 0], ["0", 0], ["hundred", 0], ["0", 0], ["for", 0], ["money", 0], ["in", 0], ["line", 0], ["if", 0], ["money", 0], ["25", 0], ["twofive", 0], ["1", 0], ["elif", 0], ["money", 0], ["50", 0], ["if", 0], ["twofive", 0], ["0", 0], ["twofive", 0], ["1", 0], ["fifty", 0], ["1", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["elif", 0], ["money", 0], ["100", 0], ["if", 0], ["fifty", 0], ["0", 0], ["and", 0], ["twofive", 0], ["0", 0], ["fifty", 0], ["1", 0], ["twofive", 0], ["1", 0], ["hundred", 0], ["1", 0], ["elif", 0], ["twofive", 0], ["2", 0], ["twofive", 0], ["3", 0], ["hundred", 0], ["1", 0], ["else", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["yes", 0], ["n", 0], ["input", 0], ["b", 0], ["true", 0], ["meta", 0], ["25", 0], ["0", 0], ["50", 0], ["0", 0], ["100", 0], ["0", 0], ["i25", 0], ["0", 0], ["i50", 0], ["0", 0], ["data", 0], ["input", 0], ["split", 0], ["for", 0], ["item", 0], ["in", 0], ["data", 0], ["if", 0], ["item", 0], ["25", 0], ["i25", 0], ["1", 0], ["elif", 0], ["item", 0], ["50", 0], ["i50", 0], ["1", 0], ["if", 0], ["i25", 0], ["0", 0], ["b", 0], ["false", 0], ["break", 0], ["else", 0], ["i25", 0], ["1", 0], ["elif", 0], ["item", 0], ["100", 0], ["if", 0], ["i25", 0], ["0", 0], ["and", 0], ["i50", 0], ["0", 0], ["b", 0], ["false", 0], ["break", 0], ["else", 0], ["if", 0], ["i50", 0], ["1", 0], ["and", 0], ["i25", 0], ["1", 0], ["i50", 0], ["1", 0], ["i25", 0], ["1", 0], ["elif", 0], ["i25", 0], ["3", 0], ["i25", 0], ["3", 0], ["else", 0], ["b", 0], ["false", 0], ["break", 0], ["if", 0], ["b", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["i", 0], ["25", 0], ["a", 0], ["2", 0], ["elif", 0], ["i", 0], ["50", 0], ["b", 0], ["1", 0], ["elif", 0], ["b", 0], ["b", 0], ["1", 0], ["else", 0], ["a", 0], ["2", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["or", 0], ["b", 0], ["0", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["def", 0], ["f", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["b", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["t", 0], ["if", 0], ["i", 0], ["25", 0], ["a", 0], ["1", 0], ["elif", 0], ["i", 0], ["50", 0], ["b", 0], ["1", 0], ["a", 0], ["1", 0], ["else", 0], ["if", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["a", 0], ["1", 0], ["else", 0], ["a", 0], ["3", 0], ["if", 0], ["a", 0], ["0", 0], ["return", 0], ["1", 0], ["return", 0], ["0", 0], ["print", 0], ["yneos", 0], ["f", 0], ["2", 0], ["def", 0], ["f", 0], ["n", 0], ["int", 0], ["input", 0], ["t", 0], ["input", 0], ["split", 0], ["a", 0], ["b", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["t", 0], ["if", 0], ["i", 0], ["25", 0], ["a", 0], ["1", 0], ["elif", 0], ["i", 0], ["3", 0], ["b", 0], ["1", 0], ["a", 0], ["1", 0], ["else", 0], ["if", 0], ["b", 0], ["0", 0], ["b", 0], ["1", 0], ["a", 0], ["1", 0], ["else", 0], ["a", 0], ["3", 0], ["if", 0], ["a", 0], ["0", 0], ["return", 0], ["1", 0], ["return", 0], ["0", 0], ["print", 0], ["yneos", 0], ["f", 0], ["2", 0], ["n", 0], ["int", 0], ["input", 0], ["sez", 0], ["0", 0], ["0", 0], ["0", 0], ["kvenka", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["prej", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["temp", 0], ["kvenka", 0], ["i", 0], ["if", 0], ["temp", 0], ["25", 0], ["sez", 0], ["0", 0], ["1", 0], ["elif", 0], ["temp", 0], ["50", 0], ["sez", 0], ["1", 0], ["1", 0], ["sez", 0], ["0", 0], ["1", 0], ["else", 0], ["sez", 0], ["2", 0], ["1", 0], ["if", 0], ["sez", 0], ["1", 0], ["0", 0], ["sez", 0], ["0", 0], ["1", 0], ["sez", 0], ["1", 0], ["1", 0], ["else", 0], ["sez", 0], ["0", 0], ["3", 0], ["ok", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["sez", 0], ["i", 0], ["0", 0], ["ok", 0], ["false", 0], ["if", 0], ["not", 0], ["ok", 0], ["prej", 0], ["false", 0], ["break", 0], ["if", 0], ["prej", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["x", 0], ["int", 0], ["input", 0], ["stri", 0], ["input", 0], ["split", 0], ["bill", 0], ["int", 0], ["p", 0], ["for", 0], ["p", 0], ["in", 0], ["stri", 0], ["temp", 0], ["0", 0], ["rem", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["bill", 0], ["if", 0], ["bill", 0], ["0", 0], ["25", 0], ["temp", 0], ["0", 0], ["break", 0], ["if", 0], ["x", 0], ["25", 0], ["rem", 0], ["0", 0], ["rem", 0], ["0", 0], ["25", 0], ["temp", 0], ["1", 0], ["elif", 0], ["x", 0], ["50", 0], ["if", 0], ["rem", 0], ["0", 0], ["0", 0], ["rem", 0], ["0", 0], ["25", 0], ["temp", 0], ["1", 0], ["rem", 0], ["1", 0], ["50", 0], ["else", 0], ["temp", 0], ["0", 0], ["break", 0], ["else", 0], ["if", 0], ["rem", 0], ["1", 0], ["50", 0], ["and", 0], ["rem", 0], ["0", 0], ["25", 0], ["rem", 0], ["0", 0], ["25", 0], ["rem", 0], ["1", 0], ["50", 0], ["temp", 0], ["1", 0], ["elif", 0], ["rem", 0], ["0", 0], ["75", 0], ["rem", 0], ["0", 0], ["75", 0], ["temp", 0], ["1", 0], ["else", 0], ["temp", 0], ["0", 0], ["break", 0], ["rem", 0], ["2", 0], ["rem", 0], ["2", 0], ["100", 0], ["if", 0], ["temp", 0], ["0", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThe 19th century German mathematician Hermann Minkowski investigated a non-Euclidian geometry, called the taxicab geometry. In taxicab geometry the distance between two points $T_1(x_1, y_1)$ and $T_2(x_2, y_2)$ is defined as:\\[ D(T_1,T_2) = \\left|x_1 - x_2\\right| + \\left|y_1 - y_2\\right| \\]\n\nAll other definitions are the same as in Euclidian geometry, including that of a circle:\n\nA circle is the set of all points in a plane at a fixed distance (the radius) from a fixed point (the centre of the circle).\n\nWe are interested in the difference of the areas of two circles with radius $R$, one of which is in normal (Euclidian) geometry, and the other in taxicab geometry. The burden of solving this difficult problem has fallen onto you.\n\n-----Input-----\nThe first and only line of input will contain the radius $R$, a positive integer smaller than or equal to $10000$.\n\n-----Output-----\nOn the first line you should output the area of a circle with radius $R$ in normal (Euclidian) geometry. On the second line you should output the area of a circle with radius $R$ in taxicab geometry.\n\nNote: Outputs within $\\pm 0.0001$ of the official solution will be accepted.\n\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\n3.141593\n2.000000\n\nSample Input 2:\n21\nSample Output 2:\n1385.442360\n882.000000\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7726"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7726", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 0], ["19th", 0], ["century", 0], ["german", 0], ["mathematician", 0], ["hermann", 0], ["minkowski", 0], ["investigated", 0], ["a", 0], ["non", 0], ["euclidian", 0], ["geometry", 0], ["called", 0], ["the", 0], ["taxicab", 0], ["geometry", 0], ["in", 0], ["taxicab", 0], ["geometry", 0], ["the", 0], ["distance", 0], ["between", 0], ["two", 1], ["points", 3], ["t", 11], ["1", 1], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["and", 0], ["t", 0], ["2", 0], ["x", 0], ["2", 0], ["y", 0], ["2", 0], ["is", 0], ["defined", 0], ["as", 0], ["d", 0], ["t", 0], ["1", 0], ["t", 0], ["2", 5], ["left", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["right", 0], ["left", 0], ["y", 0], ["1", 0], ["y", 0], ["2", 0], ["right", 0], ["all", 0], ["other", 0], ["definitions", 0], ["are", 0], ["the", 0], ["same", 0], ["as", 0], ["in", 0], ["euclidian", 0], ["geometry", 0], ["including", 0], ["that", 0], ["of", 14], ["a", 14], ["circle", 4], ["a", 24], ["circle", 20], ["is", 24], ["the", 1], ["set", 1], ["of", 1], ["all", 1], ["points", 1], ["in", 1], ["a", 1], ["plane", 1], ["at", 1], ["a", 1], ["fixed", 1], ["distance", 1], ["the", 1], ["radius", 1], ["from", 1], ["a", 1], ["fixed", 1], ["point", 1], ["the", 1], ["centre", 1], ["of", 1], ["the", 1], ["circle", 1], ["we", 1], ["are", 1], ["interested", 1], ["in", 1], ["the", 1], ["difference", 1], ["of", 1], ["the", 1], ["areas", 1], ["of", 1], ["two", 1], ["circles", 1], ["with", 1], ["radius", 1], ["r", 1], ["one", 1], ["of", 1], ["which", 1], ["is", 1], ["in", 1], ["normal", 1], ["euclidian", 1], ["geometry", 1], ["and", 1], ["the", 1], ["other", 1], ["in", 1], ["taxicab", 1], ["geometry", 0], ["the", 0], ["burden", 0], ["of", 0], ["solving", 0], ["this", 0], ["difficult", 0], ["problem", 0], ["has", 0], ["fallen", 0], ["onto", 0], ["you", 0], ["input", 0], ["the", 1], ["first", 1], ["and", 1], ["only", 1], ["line", 1], ["of", 1], ["input", 1], ["will", 1], ["contain", 0], ["the", 0], ["radius", 0], ["r", 0], ["a", 0], ["positive", 0], ["integer", 0], ["smaller", 0], ["than", 0], ["or", 0], ["equal", 0], ["to", 0], ["10000", 0], ["output", 0], ["on", 1], ["the", 1], ["first", 1], ["line", 2], ["you", 1], ["should", 1], ["output", 1], ["the", 1], ["area", 1], ["of", 1], ["a", 1], ["circle", 1], ["with", 1], ["radius", 1], ["r", 1], ["in", 1], ["normal", 1], ["euclidian", 1], ["geometry", 1], ["on", 1], ["the", 1], ["second", 1], ["line", 2], ["you", 1], ["should", 1], ["output", 1], ["the", 1], ["area", 1], ["of", 1], ["a", 1], ["circle", 1], ["with", 1], ["radius", 1], ["r", 1], ["in", 1], ["taxicab", 1], ["geometry", 1], ["note", 1], ["outputs", 0], ["within", 0], ["pm", 0], ["0", 0], ["0001", 0], ["of", 0], ["the", 0], ["official", 0], ["solution", 0], ["will", 0], ["be", 0], ["accepted", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["1", 0], ["sample", 0], ["output", 0], ["1", 0], ["3", 0], ["141593", 0], ["2", 0], ["000000", 0], ["sample", 0], ["input", 0], ["2", 0], ["21", 0], ["sample", 0], ["output", 0], ["2", 0], ["1385", 0], ["442360", 0], ["882", 0], ["000000", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.463519313304721, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4255383386284674, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6857142857142857, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6234402332361516, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.43776824034334766, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.42396280400572245, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6775510204081633, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6228571428571429, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nDamir likes to rotate. Right now he is rotating tables of letters. He wrote an $R\\times C$ table onto a piece of paper. He has also chosen an angle $K$, a multiple of $45$, and wants to rotate his table that many degrees clockwise.\n\nIt turns out this task is a bit too hard for Damir, so help him out.\n\n-----Input-----\nThe first line contains two integers $R$ and $C$ separated by a space ($1 \\leq R \\leq 10$, $1 \\leq C \\leq 10$), the number of rows and columns in Damir’s table. Each of the next $R$ lines contains one row of Damir’s table, a string of $C$ lowercase letters. The last line contains an integer $K$, a multiple of $45$ between $0$ and $360$ (inclusive).\n\n-----Output-----\nOutput Damir’s table rotated $K$ degrees clockwise, like shown in the examples. The output should contain the smallest number of rows necessary. Some rows may have leading spaces, but no rows may have trailing spaces.\n\n-----Examples-----\nSample Input 1:\n3 5\ndamir\nmarko\ndarko\n45\nSample Output 1:\n  d\n m a\nd a m\n a r i\n  r k r\n   k o\n    o\n\nSample Input 2:\n3 5\ndamir\nmarko\ndarko\n90\nSample Output 2:\ndmd\naaa\nrrm\nkki\noor\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7284"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7284", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["damir", 1], ["likes", 1], ["to", 1], ["rotate", 0], ["right", 0], ["now", 0], ["he", 0], ["is", 0], ["rotating", 0], ["tables", 0], ["of", 0], ["letters", 0], ["he", 0], ["wrote", 0], ["an", 0], ["r", 0], ["times", 0], ["c", 0], ["table", 1], ["onto", 1], ["a", 1], ["piece", 1], ["of", 1], ["paper", 1], ["he", 1], ["has", 1], ["also", 1], ["chosen", 1], ["an", 1], ["angle", 1], ["k", 1], ["a", 1], ["multiple", 1], ["of", 1], ["45", 1], ["and", 1], ["wants", 1], ["to", 1], ["rotate", 1], ["his", 1], ["table", 1], ["that", 1], ["many", 1], ["degrees", 1], ["clockwise", 1], ["it", 1], ["turns", 1], ["out", 1], ["this", 1], ["task", 0], ["is", 0], ["a", 0], ["bit", 0], ["too", 0], ["hard", 0], ["for", 0], ["damir", 0], ["so", 0], ["help", 0], ["him", 0], ["out", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 0], ["contains", 0], ["two", 0], ["integers", 0], ["r", 0], ["and", 0], ["c", 0], ["separated", 0], ["by", 0], ["a", 0], ["space", 0], ["1", 0], ["leq", 0], ["r", 0], ["leq", 0], ["10", 0], ["1", 0], ["leq", 0], ["c", 0], ["leq", 0], ["10", 0], ["the", 0], ["number", 0], ["of", 0], ["rows", 0], ["and", 0], ["columns", 0], ["in", 0], ["damir’s", 0], ["table", 0], ["each", 0], ["of", 0], ["the", 0], ["next", 0], ["r", 0], ["lines", 0], ["contains", 0], ["one", 0], ["row", 0], ["of", 0], ["damir’s", 0], ["table", 1], ["a", 1], ["string", 1], ["of", 1], ["c", 1], ["lowercase", 1], ["letters", 1], ["the", 1], ["last", 1], ["line", 1], ["contains", 1], ["an", 1], ["integer", 0], ["k", 0], ["a", 0], ["multiple", 0], ["of", 0], ["45", 0], ["between", 0], ["0", 0], ["and", 0], ["360", 0], ["inclusive", 0], ["output", 0], ["output", 0], ["damir’s", 0], ["table", 1], ["rotated", 1], ["k", 1], ["degrees", 1], ["clockwise", 1], ["like", 1], ["shown", 1], ["in", 1], ["the", 1], ["examples", 1], ["the", 1], ["output", 1], ["should", 1], ["contain", 1], ["the", 1], ["smallest", 1], ["number", 1], ["of", 1], ["rows", 1], ["necessary", 1], ["some", 1], ["rows", 0], ["may", 0], ["have", 0], ["leading", 0], ["spaces", 0], ["but", 0], ["no", 0], ["rows", 0], ["may", 0], ["have", 0], ["trailing", 0], ["spaces", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["3", 0], ["5", 0], ["damir", 0], ["marko", 0], ["darko", 0], ["45", 0], ["sample", 0], ["output", 0], ["1", 0], ["d", 0], ["m", 0], ["a", 0], ["d", 0], ["a", 0], ["m", 0], ["a", 0], ["r", 0], ["i", 0], ["r", 0], ["k", 0], ["r", 0], ["k", 0], ["o", 0], ["o", 0], ["sample", 0], ["input", 0], ["2", 0], ["3", 0], ["5", 0], ["damir", 0], ["marko", 0], ["darko", 0], ["90", 0], ["sample", 0], ["output", 0], ["2", 0], ["dmd", 0], ["aaa", 0], ["rrm", 0], ["kki", 0], ["oor", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3317307692307692, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3317307692307692, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5863636363636363, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5863636363636363, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3317307692307692, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3317307692307692, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5863636363636363, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5863636363636363, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nVasya wrote down two strings s of length n and t of length m consisting of small English letters 'a' and 'b'. What is more, he knows that string t has a form \"abab...\", namely there are letters 'a' on odd positions and letters 'b' on even positions.\n\nSuddenly in the morning, Vasya found that somebody spoiled his string. Some letters of the string s were replaced by character '?'.\n\nLet's call a sequence of positions i, i + 1, ..., i + m - 1 as occurrence of string t in s, if 1 ≤ i ≤ n - m + 1 and t_1 = s_{i}, t_2 = s_{i} + 1, ..., t_{m} = s_{i} + m - 1.\n\nThe boy defines the beauty of the string s as maximum number of disjoint occurrences of string t in s. Vasya can replace some letters '?' with 'a' or 'b' (letters on different positions can be replaced with different letter). Vasya wants to make some replacements in such a way that beauty of string s is maximum possible. From all such options, he wants to choose one with the minimum number of replacements. Find the number of replacements he should make.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of s.\n\nThe second line contains the string s of length n. It contains small English letters 'a', 'b' and characters '?' only.\n\nThe third line contains a single integer m (1 ≤ m ≤ 10^5) — the length of t. The string t contains letters 'a' on odd positions and 'b' on even positions.\n\n\n-----Output-----\n\nPrint the only integer — the minimum number of replacements Vasya has to perform to make the beauty of string s the maximum possible.\n\n\n-----Examples-----\nInput\n5\nbb?a?\n1\n\nOutput\n2\n\nInput\n9\nab??ab???\n3\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample string t has a form 'a'. The only optimal option is to replace all characters '?' by 'a'.\n\nIn the second sample using two replacements we can make string equal to \"aba?aba??\". It is impossible to get more than two occurrences.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["match = 0\nnonmatch = 0\ncount = 0\n\ndef calc_match(s, t, p):\n\tnonlocal match\n\tnonlocal nonmatch\n\tnonlocal count\n\tif p == len(s)-len(t):\n\t\treturn\n\tif p+len(t) < len(s):\n\t\tif s[p+len(t)] == '?':\n\t\t\tcount -= 1\n\t\telif s[p+len(t)] == t[-1]:\n\t\t\tmatch -= 1\n\t\telse:\n\t\t\tnonmatch -= 1\n\tmatch, nonmatch = nonmatch, match\n\tif p+len(t) < len(s):\n\t\tif s[p] == '?':\n\t\t\tcount += 1\n\t\telif s[p] == 'a':\n\t\t\tmatch += 1\n\t\telse:\n\t\t\tnonmatch += 1\n\ndef init_match(s, t):\n\tnonlocal match\n\tnonlocal nonmatch\n\tnonlocal count\n\tp = len(s)-len(t)\n\tfor i in range(len(t)):\n\t\tif s[p+i] == '?':\n\t\t\tcount += 1\n\t\telif s[p+i] == t[i]:\n\t\t\tmatch += 1\n\t\telse:\n\t\t\tnonmatch += 1\n\n\n\nn = int(input())\ns = input()\nm = int(input())\nt = \"\"\nfor i in range(m):\n\tif i%2==0:\n\t\tt = t + 'a'\n\telse:\n\t\tt = t + 'b'\n\ninit_match(s,t)\n\ndp = []\nfor i in range(n+3):\n\tdp.append((0, 0))\n\np = n-m\nwhile p >= 0:\n\tcalc_match(s, t, p)\n\tif nonmatch == 0:\n\t\tif dp[p+1][0] == dp[p+m][0]+1:\n\t\t\tdp[p] = (dp[p+1][0], min(dp[p+1][1], dp[p+m][1]+count))\n\t\telif dp[p+1][0] > dp[p+m][0]+1:\n\t\t\tdp[p] = dp[p+1]\n\t\telse:\n\t\t\tdp[p] = (dp[p+m][0]+1, dp[p+m][1]+count)\n\telse:\n\t\tdp[p] = dp[p+1]\n\tp -= 1\n\nprint(dp[0][1])\n", "n = int(input()); s = input(); m = int(input())\na = [0]*(n+2); b = [0]*(n+2); q = [0]*(n+1);\ndp = [(0, 0)]*(n+2)\n\nfor i in range(0, n):\n\tb[i] = b[i-2]+(s[i] == 'b')\n\ta[i] = a[i-2]+(s[i] == 'a')\n\tq[i] = q[i-1]+(s[i] == '?')\n\nfor i in range(n-1, -1, -1):\n\tif i+m-1 >= n:\n\t\tcontinue\n\tdp[i] = dp[i+1]\n\ti_b = 1 if m%2 == 1 else 2\n\ti_a = 1 if m%2 == 0 else 2\n\t\n\tif not (b[i+m-i_b]-b[i-2] or a[i+m-i_a]-a[i-1]):\n\t\tt, r = dp[i+m]\n\t\tdp[i] = min((t-1, r+q[i+m-1]-q[i-1]), dp[i])\nprint(dp[0][1])\n\n", "n = int(input()); s = input(); m = int(input())\na = [0]*(n+2); b = [0]*(n+2); q = [0]*(n+1);\ndp = [(0, 0)]*(n+2)\n\nfor i in range(0, n):\n\tb[i] = b[i-2]+(s[i] == 'b')\n\ta[i] = a[i-2]+(s[i] == 'a')\n\tq[i] = q[i-1]+(s[i] == '?')\n\t\nfor i in range(n-m, -1, -1):\n\tdp[i] = dp[i+1]\n\ti_b = 1 if m%2 == 1 else 2\n\ti_a = 1 if m%2 == 0 else 2\n\t\n\tif not (b[i+m-i_b]-b[i-2] or a[i+m-i_a]-a[i-1]):\n\t\tt, r = dp[i+m]\n\t\tdp[i] = min((t-1, r+q[i+m-1]-q[i-1]), dp[i])\nprint(dp[0][1])\n\n", "match = 0; nonmatch = 0; count = 0\ndef calc_match(s, t, p):\n\tnonlocal match\n\tnonlocal nonmatch\n\tnonlocal count\n\tif p == len(s)-len(t):\n\t\treturn\n\tif p+len(t) < len(s):\n\t\tif s[p+len(t)] == '?':\n\t\t\tcount -= 1\n\t\telif s[p+len(t)] == t[-1]:\n\t\t\tmatch -= 1\n\t\telse:\n\t\t\tnonmatch -= 1\n\tmatch, nonmatch = nonmatch, match\n\tif p+len(t) < len(s):\n\t\tif s[p] == '?':\n\t\t\tcount += 1\n\t\telif s[p] == 'a':\n\t\t\tmatch += 1\n\t\telse:\n\t\t\tnonmatch += 1\ndef init_match(s, t):\n\tnonlocal match\n\tnonlocal nonmatch\n\tnonlocal count\n\tp = len(s)-len(t)\n\tfor i in range(len(t)):\n\t\tif s[p+i] == '?':\n\t\t\tcount += 1\n\t\telif s[p+i] == t[i]:\n\t\t\tmatch += 1\n\t\telse:\n\t\t\tnonmatch += 1\nn = int(input())\ns = input()\nm = int(input())\nt = \"\"\nfor i in range(m):\n\tif i%2==0:\n\t\tt = t + 'a'\n\telse:\n\t\tt = t + 'b'\n \ninit_match(s,t)\n \ndp = []\nfor i in range(n+3):\n\tdp.append((0, 0))\n \np = n-m\nwhile p >= 0:\n\tcalc_match(s, t, p)\n\tif nonmatch == 0:\n\t\tif dp[p+1][0] == dp[p+m][0]+1:\n\t\t\tdp[p] = (dp[p+1][0], min(dp[p+1][1], dp[p+m][1]+count))\n\t\telif dp[p+1][0] > dp[p+m][0]+1:\n\t\t\tdp[p] = dp[p+1]\n\t\telse:\n\t\t\tdp[p] = (dp[p+m][0]+1, dp[p+m][1]+count)\n\telse:\n\t\tdp[p] = dp[p+1]\n\tp -= 1\n \nprint(dp[0][1])\n"], "id": "id5142"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5142", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["vasya", 1], ["wrote", 1], ["down", 1], ["two", 1], ["strings", 1], ["s", 1], ["of", 1], ["length", 0], ["n", 0], ["and", 0], ["t", 0], ["of", 0], ["length", 0], ["m", 0], ["consisting", 0], ["of", 0], ["small", 0], ["english", 0], ["letters", 0], ["a", 0], ["and", 0], ["b", 0], ["what", 0], ["is", 0], ["more", 0], ["he", 0], ["knows", 0], ["that", 0], ["string", 0], ["t", 0], ["has", 0], ["a", 0], ["form", 0], ["abab", 0], ["namely", 0], ["there", 0], ["are", 0], ["letters", 0], ["a", 0], ["on", 0], ["odd", 0], ["positions", 0], ["and", 0], ["letters", 0], ["b", 0], ["on", 1], ["even", 1], ["positions", 1], ["suddenly", 1], ["in", 1], ["the", 1], ["morning", 1], ["vasya", 1], ["found", 1], ["that", 1], ["somebody", 1], ["spoiled", 1], ["his", 0], ["string", 0], ["some", 0], ["letters", 0], ["of", 0], ["the", 0], ["string", 0], ["s", 0], ["were", 0], ["replaced", 0], ["by", 0], ["character", 0], ["let", 0], ["s", 0], ["call", 0], ["a", 0], ["sequence", 0], ["of", 0], ["positions", 0], ["i", 0], ["i", 0], ["1", 0], ["i", 0], ["m", 0], ["1", 1], ["as", 1], ["occurrence", 0], ["of", 0], ["string", 0], ["t", 0], ["in", 0], ["s", 0], ["if", 0], ["1", 0], ["≤", 0], ["i", 0], ["≤", 0], ["n", 0], ["m", 0], ["1", 0], ["and", 0], ["t", 0], ["1", 0], ["s", 0], ["i", 0], ["t", 0], ["2", 0], ["s", 0], ["i", 0], ["1", 0], ["t", 0], ["m", 0], ["s", 0], ["i", 0], ["m", 0], ["1", 1], ["the", 1], ["boy", 1], ["defines", 1], ["the", 1], ["beauty", 1], ["of", 1], ["the", 1], ["string", 1], ["s", 1], ["as", 1], ["maximum", 1], ["number", 1], ["of", 1], ["disjoint", 0], ["occurrences", 0], ["of", 0], ["string", 0], ["t", 0], ["in", 0], ["s", 0], ["vasya", 0], ["can", 0], ["replace", 0], ["some", 0], ["letters", 0], ["with", 0], ["a", 0], ["or", 0], ["b", 0], ["letters", 1], ["on", 1], ["different", 1], ["positions", 1], ["can", 1], ["be", 1], ["replaced", 1], ["with", 1], ["different", 1], ["letter", 1], ["vasya", 1], ["wants", 1], ["to", 1], ["make", 1], ["some", 1], ["replacements", 1], ["in", 1], ["such", 1], ["a", 1], ["way", 1], ["that", 1], ["beauty", 1], ["of", 1], ["string", 1], ["s", 1], ["is", 1], ["maximum", 1], ["possible", 1], ["from", 1], ["all", 1], ["such", 1], ["options", 1], ["he", 1], ["wants", 1], ["to", 1], ["choose", 1], ["one", 1], ["with", 1], ["the", 1], ["minimum", 0], ["number", 0], ["of", 0], ["replacements", 0], ["find", 0], ["the", 0], ["number", 0], ["of", 0], ["replacements", 0], ["he", 0], ["should", 0], ["make", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["—", 1], ["the", 1], ["length", 1], ["of", 1], ["s", 1], ["the", 1], ["second", 1], ["line", 1], ["contains", 0], ["the", 0], ["string", 0], ["s", 0], ["of", 0], ["length", 0], ["n", 0], ["it", 0], ["contains", 0], ["small", 0], ["english", 0], ["letters", 0], ["a", 0], ["b", 0], ["and", 0], ["characters", 0], ["only", 1], ["the", 0], ["third", 0], ["line", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["m", 0], ["1", 0], ["≤", 0], ["m", 0], ["≤", 0], ["10", 0], ["5", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["t", 0], ["the", 0], ["string", 0], ["t", 0], ["contains", 0], ["letters", 0], ["a", 0], ["on", 0], ["odd", 0], ["positions", 0], ["and", 0], ["b", 0], ["on", 0], ["even", 0], ["positions", 0], ["output", 0], ["print", 1], ["the", 1], ["only", 1], ["integer", 1], ["—", 1], ["the", 1], ["minimum", 1], ["number", 1], ["of", 1], ["replacements", 1], ["vasya", 1], ["has", 1], ["to", 0], ["perform", 0], ["to", 0], ["make", 0], ["the", 0], ["beauty", 0], ["of", 0], ["string", 0], ["s", 0], ["the", 0], ["maximum", 0], ["possible", 0], ["examples", 0], ["input", 0], ["5", 0], ["bb", 0], ["a", 0], ["1", 0], ["output", 0], ["2", 0], ["input", 0], ["9", 0], ["ab", 0], ["ab", 0], ["3", 0], ["output", 0], ["2", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["sample", 0], ["string", 0], ["t", 0], ["has", 0], ["a", 0], ["form", 0], ["a", 0], ["the", 0], ["only", 0], ["optimal", 0], ["option", 0], ["is", 0], ["to", 0], ["replace", 0], ["all", 0], ["characters", 0], ["by", 0], ["a", 0], ["in", 1], ["the", 0], ["second", 0], ["sample", 0], ["using", 0], ["two", 0], ["replacements", 0], ["we", 0], ["can", 0], ["make", 0], ["string", 0], ["equal", 0], ["to", 0], ["aba", 0], ["aba", 0], ["it", 0], ["is", 0], ["impossible", 0], ["to", 0], ["get", 0], ["more", 0], ["than", 0], ["two", 0], ["occurrences", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2792022792022792, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2792022792022792, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6005509641873278, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6005509641873278, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2792022792022792, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2792022792022792, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6005509641873278, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6005509641873278, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["match", 0], ["0", 0], ["nonmatch", 0], ["0", 0], ["count", 0], ["0", 0], ["def", 0], ["calc", 0], ["match", 0], ["s", 0], ["t", 0], ["p", 0], ["nonlocal", 0], ["match", 0], ["nonlocal", 0], ["nonmatch", 0], ["nonlocal", 0], ["count", 0], ["if", 0], ["p", 0], ["len", 0], ["s", 0], ["len", 0], ["t", 0], ["return", 0], ["if", 0], ["p", 0], ["len", 0], ["t", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["p", 0], ["len", 0], ["t", 0], ["count", 0], ["1", 0], ["elif", 0], ["s", 0], ["p", 0], ["len", 0], ["t", 0], ["t", 0], ["1", 0], ["match", 0], ["1", 0], ["else", 0], ["nonmatch", 0], ["1", 0], ["match", 0], ["nonmatch", 0], ["nonmatch", 0], ["match", 0], ["if", 0], ["p", 0], ["len", 0], ["t", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["p", 0], ["count", 0], ["1", 0], ["elif", 0], ["s", 0], ["p", 0], ["a", 0], ["match", 0], ["1", 0], ["else", 0], ["nonmatch", 0], ["1", 0], ["def", 0], ["init", 0], ["match", 0], ["s", 0], ["t", 0], ["nonlocal", 0], ["match", 0], ["nonlocal", 0], ["nonmatch", 0], ["nonlocal", 0], ["count", 0], ["p", 0], ["len", 0], ["s", 0], ["len", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["t", 0], ["if", 0], ["s", 0], ["p", 0], ["i", 0], ["count", 0], ["1", 0], ["elif", 0], ["s", 0], ["p", 0], ["i", 0], ["t", 0], ["i", 0], ["match", 0], ["1", 0], ["else", 0], ["nonmatch", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["m", 0], ["int", 0], ["input", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["t", 0], ["t", 0], ["a", 0], ["else", 0], ["t", 0], ["t", 0], ["b", 0], ["init", 0], ["match", 0], ["s", 0], ["t", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["3", 0], ["dp", 0], ["append", 0], ["0", 0], ["0", 0], ["p", 0], ["n", 0], ["m", 0], ["while", 0], ["p", 0], ["0", 0], ["calc", 0], ["match", 0], ["s", 0], ["t", 0], ["p", 0], ["if", 0], ["nonmatch", 0], ["0", 0], ["if", 0], ["dp", 0], ["p", 0], ["1", 0], ["0", 0], ["dp", 0], ["p", 0], ["m", 0], ["0", 0], ["1", 0], ["dp", 0], ["p", 0], ["dp", 0], ["p", 0], ["1", 0], ["0", 0], ["min", 0], ["dp", 0], ["p", 0], ["1", 0], ["1", 0], ["dp", 0], ["p", 0], ["m", 0], ["1", 0], ["count", 0], ["elif", 0], ["dp", 0], ["p", 0], ["1", 0], ["0", 0], ["dp", 0], ["p", 0], ["m", 0], ["0", 0], ["1", 0], ["dp", 0], ["p", 0], ["dp", 0], ["p", 0], ["1", 0], ["else", 0], ["dp", 0], ["p", 0], ["dp", 0], ["p", 0], ["m", 0], ["0", 0], ["1", 0], ["dp", 0], ["p", 0], ["m", 0], ["1", 0], ["count", 0], ["else", 0], ["dp", 0], ["p", 0], ["dp", 0], ["p", 0], ["1", 0], ["p", 0], ["1", 0], ["print", 0], ["dp", 0], ["0", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["m", 0], ["int", 0], ["input", 0], ["a", 0], ["0", 0], ["n", 0], ["2", 0], ["b", 0], ["0", 0], ["n", 0], ["2", 0], ["q", 0], ["0", 0], ["n", 0], ["1", 0], ["dp", 0], ["0", 0], ["0", 0], ["n", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["2", 0], ["s", 0], ["i", 0], ["b", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["2", 0], ["s", 0], ["i", 0], ["a", 0], ["q", 0], ["i", 0], ["q", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["i", 0], ["m", 0], ["1", 0], ["n", 0], ["continue", 0], ["dp", 0], ["i", 0], ["dp", 0], ["i", 0], ["1", 0], ["i", 0], ["b", 0], ["1", 0], ["if", 0], ["m", 0], ["2", 0], ["1", 0], ["else", 0], ["2", 0], ["i", 0], ["a", 0], ["1", 0], ["if", 0], ["m", 0], ["2", 0], ["0", 0], ["else", 0], ["2", 0], ["if", 0], ["not", 0], ["b", 0], ["i", 0], ["m", 0], ["i", 0], ["b", 0], ["b", 0], ["i", 0], ["2", 0], ["or", 0], ["a", 0], ["i", 0], ["m", 0], ["i", 0], ["a", 0], ["a", 0], ["i", 0], ["1", 0], ["t", 0], ["r", 0], ["dp", 0], ["i", 0], ["m", 0], ["dp", 0], ["i", 0], ["min", 0], ["t", 0], ["1", 0], ["r", 0], ["q", 0], ["i", 0], ["m", 0], ["1", 0], ["q", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["print", 0], ["dp", 0], ["0", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["m", 0], ["int", 0], ["input", 0], ["a", 0], ["0", 0], ["n", 0], ["2", 0], ["b", 0], ["0", 0], ["n", 0], ["2", 0], ["q", 0], ["0", 0], ["n", 0], ["1", 0], ["dp", 0], ["0", 0], ["0", 0], ["n", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["2", 0], ["s", 0], ["i", 0], ["b", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["2", 0], ["s", 0], ["i", 0], ["a", 0], ["q", 0], ["i", 0], ["q", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["m", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["dp", 0], ["i", 0], ["1", 0], ["i", 0], ["b", 0], ["1", 0], ["if", 0], ["m", 0], ["2", 0], ["1", 0], ["else", 0], ["2", 0], ["i", 0], ["a", 0], ["1", 0], ["if", 0], ["m", 0], ["2", 0], ["0", 0], ["else", 0], ["2", 0], ["if", 0], ["not", 0], ["b", 0], ["i", 0], ["m", 0], ["i", 0], ["b", 0], ["b", 0], ["i", 0], ["2", 0], ["or", 0], ["a", 0], ["i", 0], ["m", 0], ["i", 0], ["a", 0], ["a", 0], ["i", 0], ["1", 0], ["t", 0], ["r", 0], ["dp", 0], ["i", 0], ["m", 0], ["dp", 0], ["i", 0], ["min", 0], ["t", 0], ["1", 0], ["r", 0], ["q", 0], ["i", 0], ["m", 0], ["1", 0], ["q", 0], ["i", 0], ["1", 0], ["dp", 0], ["i", 0], ["print", 0], ["dp", 0], ["0", 0], ["1", 0], ["match", 0], ["0", 0], ["nonmatch", 0], ["0", 0], ["count", 0], ["0", 0], ["def", 0], ["calc", 0], ["match", 0], ["s", 0], ["t", 0], ["p", 0], ["nonlocal", 0], ["match", 0], ["nonlocal", 0], ["nonmatch", 0], ["nonlocal", 0], ["count", 0], ["if", 0], ["p", 0], ["len", 0], ["s", 0], ["len", 0], ["t", 0], ["return", 0], ["if", 0], ["p", 0], ["len", 0], ["t", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["p", 0], ["len", 0], ["t", 0], ["count", 0], ["1", 0], ["elif", 0], ["s", 0], ["p", 0], ["len", 0], ["t", 0], ["t", 0], ["1", 0], ["match", 0], ["1", 0], ["else", 0], ["nonmatch", 0], ["1", 0], ["match", 0], ["nonmatch", 0], ["nonmatch", 0], ["match", 0], ["if", 0], ["p", 0], ["len", 0], ["t", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["p", 0], ["count", 0], ["1", 0], ["elif", 0], ["s", 0], ["p", 0], ["a", 0], ["match", 0], ["1", 0], ["else", 0], ["nonmatch", 0], ["1", 0], ["def", 0], ["init", 0], ["match", 0], ["s", 0], ["t", 0], ["nonlocal", 0], ["match", 0], ["nonlocal", 0], ["nonmatch", 0], ["nonlocal", 0], ["count", 0], ["p", 0], ["len", 0], ["s", 0], ["len", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["t", 0], ["if", 0], ["s", 0], ["p", 0], ["i", 0], ["count", 0], ["1", 0], ["elif", 0], ["s", 0], ["p", 0], ["i", 0], ["t", 0], ["i", 0], ["match", 0], ["1", 0], ["else", 0], ["nonmatch", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["m", 0], ["int", 0], ["input", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["t", 0], ["t", 0], ["a", 0], ["else", 0], ["t", 0], ["t", 0], ["b", 0], ["init", 0], ["match", 0], ["s", 0], ["t", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["3", 0], ["dp", 0], ["append", 0], ["0", 0], ["0", 0], ["p", 0], ["n", 0], ["m", 0], ["while", 0], ["p", 0], ["0", 0], ["calc", 0], ["match", 0], ["s", 0], ["t", 0], ["p", 0], ["if", 0], ["nonmatch", 0], ["0", 0], ["if", 0], ["dp", 0], ["p", 0], ["1", 0], ["0", 0], ["dp", 0], ["p", 0], ["m", 0], ["0", 0], ["1", 0], ["dp", 0], ["p", 0], ["dp", 0], ["p", 0], ["1", 0], ["0", 0], ["min", 0], ["dp", 0], ["p", 0], ["1", 0], ["1", 0], ["dp", 0], ["p", 0], ["m", 0], ["1", 0], ["count", 0], ["elif", 0], ["dp", 0], ["p", 0], ["1", 0], ["0", 0], ["dp", 0], ["p", 0], ["m", 0], ["0", 0], ["1", 0], ["dp", 0], ["p", 0], ["dp", 0], ["p", 0], ["1", 0], ["else", 0], ["dp", 0], ["p", 0], ["dp", 0], ["p", 0], ["m", 0], ["0", 0], ["1", 0], ["dp", 0], ["p", 0], ["m", 0], ["1", 0], ["count", 0], ["else", 0], ["dp", 0], ["p", 0], ["dp", 0], ["p", 0], ["1", 0], ["p", 0], ["1", 0], ["print", 0], ["dp", 0], ["0", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nArcheologists recently found the remains of Greco-Roman architecture. The location can be modeled as a grid of $R \\cdot C$ square cells. For each of the cells, archeologists have determined if some building was there or if the cell has always been empty.\n\nAfter examining the artifacts in detail, they concluded that the location contains two buildings from different periods in time, and that the floor plans of both buildings are of square shape.\n\nBecause the buildings were from different periods in time, it is possible that their floor plans overlap. Determine the possible location and size (length of the side of the square occupied by the floor plan) for each building.\n\n-----Input-----\nThe first line contains two integers $R$ ($1 \\le R \\le 100$) and $C$ ($1 \\le C \\le 100$), the size of the location.\n\nEach of the next $R$ lines contains a string of $C$ characters ‘.’ (dot) or ‘x’ (lowercase letter). The character ‘.’ means that nothing was found in that cell, while ‘x’ indicates that there was a building there.\n\n-----Output-----\nFor each of the two buildings, output on a single line the row and column of its upper left corner, and the size (side length) of the building.\n\nNote: the test data will be such that a solution always exists, although it may not be unique. If there is more than one solution, any one will be accepted.\n\n-----Examples-----\nSample Input 1:\n3 3\nxx.\nxxx\n...\nSample Output 1:\n1 1 2\n2 3 1\n\nSample Input 2:\n4 6\nxx....\nxx.xxx\n...xxx\n...xxx\nSample Output 2:\n1 1 2\n2 4 3\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7808"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7808", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["archeologists", 1], ["recently", 1], ["found", 1], ["the", 1], ["remains", 1], ["of", 1], ["greco", 0], ["roman", 0], ["architecture", 0], ["the", 0], ["location", 0], ["can", 0], ["be", 0], ["modeled", 0], ["as", 0], ["a", 0], ["grid", 0], ["of", 0], ["r", 0], ["cdot", 0], ["c", 0], ["square", 1], ["cells", 1], ["for", 1], ["each", 1], ["of", 1], ["the", 1], ["cells", 1], ["archeologists", 1], ["have", 1], ["determined", 1], ["if", 1], ["some", 1], ["building", 1], ["was", 1], ["there", 1], ["or", 1], ["if", 1], ["the", 1], ["cell", 1], ["has", 1], ["always", 1], ["been", 1], ["empty", 1], ["after", 1], ["examining", 1], ["the", 1], ["artifacts", 1], ["in", 1], ["detail", 1], ["they", 1], ["concluded", 1], ["that", 1], ["the", 1], ["location", 1], ["contains", 1], ["two", 1], ["buildings", 1], ["from", 1], ["different", 1], ["periods", 1], ["in", 1], ["time", 1], ["and", 1], ["that", 1], ["the", 1], ["floor", 1], ["plans", 1], ["of", 1], ["both", 1], ["buildings", 1], ["are", 1], ["of", 1], ["square", 1], ["shape", 1], ["because", 1], ["the", 1], ["buildings", 1], ["were", 1], ["from", 1], ["different", 1], ["periods", 1], ["in", 1], ["time", 1], ["it", 1], ["is", 1], ["possible", 1], ["that", 1], ["their", 1], ["floor", 1], ["plans", 1], ["overlap", 1], ["determine", 1], ["the", 1], ["possible", 1], ["location", 1], ["and", 1], ["size", 1], ["length", 1], ["of", 1], ["the", 1], ["side", 0], ["of", 0], ["the", 0], ["square", 0], ["occupied", 0], ["by", 0], ["the", 0], ["floor", 0], ["plan", 0], ["for", 0], ["each", 0], ["building", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 7], ["two", 7], ["integers", 7], ["r", 7], ["1", 7], ["le", 0], ["r", 0], ["le", 0], ["100", 0], ["and", 0], ["c", 0], ["1", 0], ["le", 0], ["c", 0], ["le", 0], ["100", 1], ["the", 1], ["size", 1], ["of", 1], ["the", 1], ["location", 1], ["each", 0], ["of", 0], ["the", 0], ["next", 0], ["r", 0], ["lines", 0], ["contains", 0], ["a", 0], ["string", 0], ["of", 0], ["c", 0], ["characters", 0], ["‘", 0], ["’", 0], ["dot", 0], ["or", 0], ["‘x’", 0], ["lowercase", 0], ["letter", 0], ["the", 0], ["character", 0], ["‘", 0], ["’", 0], ["means", 0], ["that", 0], ["nothing", 0], ["was", 0], ["found", 0], ["in", 0], ["that", 0], ["cell", 0], ["while", 0], ["‘x’", 0], ["indicates", 0], ["that", 0], ["there", 0], ["was", 0], ["a", 0], ["building", 0], ["there", 0], ["output", 0], ["for", 1], ["each", 1], ["of", 1], ["the", 1], ["two", 1], ["buildings", 1], ["output", 1], ["on", 1], ["a", 1], ["single", 1], ["line", 1], ["the", 0], ["row", 0], ["and", 0], ["column", 0], ["of", 0], ["its", 0], ["upper", 0], ["left", 0], ["corner", 0], ["and", 0], ["the", 0], ["size", 0], ["side", 0], ["length", 0], ["of", 0], ["the", 0], ["building", 0], ["note", 0], ["the", 0], ["test", 0], ["data", 0], ["will", 0], ["be", 0], ["such", 0], ["that", 0], ["a", 0], ["solution", 0], ["always", 0], ["exists", 0], ["although", 0], ["it", 0], ["may", 0], ["not", 0], ["be", 0], ["unique", 0], ["if", 0], ["there", 0], ["is", 0], ["more", 0], ["than", 0], ["one", 0], ["solution", 0], ["any", 0], ["one", 0], ["will", 0], ["be", 0], ["accepted", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["3", 0], ["3", 0], ["xx", 0], ["xxx", 0], ["sample", 0], ["output", 0], ["1", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["1", 0], ["sample", 0], ["input", 0], ["2", 0], ["4", 0], ["6", 0], ["xx", 0], ["xx", 0], ["xxx", 0], ["xxx", 0], ["xxx", 0], ["sample", 0], ["output", 0], ["2", 0], ["1", 0], ["1", 0], ["2", 0], ["2", 0], ["4", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.39705882352941174, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3813025210084033, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5845070422535211, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5392354124748489, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.39705882352941174, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3813025210084033, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5845070422535211, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5392354124748489, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nPiegirl found the red button. You have one last chance to change the inevitable end.\n\nThe circuit under the button consists of n nodes, numbered from 0 to n - 1. In order to deactivate the button, the n nodes must be disarmed in a particular order. Node 0 must be disarmed first. After disarming node i, the next node to be disarmed must be either node (2·i) modulo n or node (2·i) + 1 modulo n. The last node to be disarmed must be node 0. Node 0 must be disarmed twice, but all other nodes must be disarmed exactly once. \n\nYour task is to find any such order and print it. If there is no such order, print -1.\n\n\n-----Input-----\n\nInput consists of a single integer n (2 ≤ n ≤ 10^5).\n\n\n-----Output-----\n\nPrint an order in which you can to disarm all nodes. If it is impossible, print -1 instead. If there are multiple orders, print any one of them.\n\n\n-----Examples-----\nInput\n2\n\nOutput\n0 1 0\n\nInput\n3\n\nOutput\n-1\nInput\n4\n\nOutput\n0 1 3 2 0\n\nInput\n16\n\nOutput\n0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n=int(input())\nif n&1:\n\tprint(-1)\nelse:\n\tD,R=[False]*(10**6),[0]*(10**6)\n\ti,j=0,0\n\twhile True:\n\t\tD[j]=True\n\t\tR[i]=j\n\t\ti+=1\n\t\tif not D[(j+n)>>1]:\n\t\t\tj=(j+n)>>1\n\t\telif not D[j>>1]:\n\t\t\tj=j>>1\n\t\telse:\n\t\t\tbreak\n\tprint(\" \".join(str(R[i]) for i in range(n,-1,-1)))\n", "# METO Bot 0.9.9\nn=int(input())\nif n&1:\n\tprint(-1)\nelse:\n\tD,R=[False]*(10**6),[0]*(10**6)\n\ti,j=0,0\n\twhile True:\n\t\tD[j]=True\n\t\tR[i]=j\n\t\ti+=1\n\t\tif not D[(j+n)>>1]:\n\t\t\tj=(j+n)>>1\n\t\telif not D[j>>1]:\n\t\t\tj=j>>1\n\t\telse:\n\t\t\tbreak\n\tprint(\" \".join(str(R[i]) for i in range(n,-1,-1)))\n\n", "# METO Bot 0.9.9.1\nn=int(input())\nif n&1:\n\tprint(-1)\nelse:\n\tD,R=[False]*(10**6),[0]*(10**6)\n\ti,j=0,0\n\twhile True:\n\t\tD[j]=True\n\t\tR[i]=j\n\t\ti+=1\n\t\tif not D[(j+n)>>1]:\n\t\t\tj=(j+n)>>1\n\t\telif not D[j>>1]:\n\t\t\tj=j>>1\n\t\telse:\n\t\t\tbreak\n\tprint(\" \".join(str(R[i]) for i in range(n,-1,-1)))\n"], "id": "id7307"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7307", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["piegirl", 1], ["found", 1], ["the", 1], ["red", 1], ["button", 1], ["you", 1], ["have", 1], ["one", 1], ["last", 1], ["chance", 1], ["to", 1], ["change", 1], ["the", 1], ["inevitable", 1], ["end", 1], ["the", 1], ["circuit", 1], ["under", 1], ["the", 1], ["button", 1], ["consists", 1], ["of", 1], ["n", 1], ["nodes", 1], ["numbered", 1], ["from", 1], ["0", 1], ["to", 1], ["n", 1], ["1", 1], ["in", 1], ["order", 1], ["to", 1], ["deactivate", 1], ["the", 1], ["button", 1], ["the", 1], ["n", 1], ["nodes", 1], ["must", 1], ["be", 1], ["disarmed", 1], ["in", 1], ["a", 1], ["particular", 1], ["order", 1], ["node", 1], ["0", 1], ["must", 1], ["be", 1], ["disarmed", 1], ["first", 1], ["after", 1], ["disarming", 1], ["node", 1], ["i", 1], ["the", 1], ["next", 1], ["node", 1], ["to", 1], ["be", 1], ["disarmed", 1], ["must", 1], ["be", 1], ["either", 1], ["node", 1], ["2·i", 1], ["modulo", 1], ["n", 1], ["or", 1], ["node", 1], ["2·i", 1], ["1", 1], ["modulo", 1], ["n", 1], ["the", 1], ["last", 1], ["node", 1], ["to", 1], ["be", 1], ["disarmed", 1], ["must", 1], ["be", 1], ["node", 1], ["0", 1], ["node", 1], ["0", 1], ["must", 1], ["be", 1], ["disarmed", 1], ["twice", 1], ["but", 1], ["all", 1], ["other", 1], ["nodes", 1], ["must", 1], ["be", 1], ["disarmed", 1], ["exactly", 1], ["once", 1], ["your", 1], ["task", 1], ["is", 1], ["to", 1], ["find", 1], ["any", 1], ["such", 1], ["order", 1], ["and", 0], ["print", 0], ["it", 0], ["if", 0], ["there", 0], ["is", 0], ["no", 0], ["such", 0], ["order", 0], ["print", 0], ["1", 0], ["input", 0], ["input", 0], ["consists", 0], ["of", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["2", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["output", 0], ["print", 1], ["an", 1], ["order", 1], ["in", 1], ["which", 1], ["you", 1], ["can", 1], ["to", 1], ["disarm", 1], ["all", 1], ["nodes", 1], ["if", 1], ["it", 1], ["is", 1], ["impossible", 1], ["print", 1], ["1", 0], ["instead", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["orders", 0], ["print", 0], ["any", 0], ["one", 0], ["of", 0], ["them", 0], ["examples", 0], ["input", 0], ["2", 0], ["output", 0], ["0", 0], ["1", 0], ["0", 0], ["input", 0], ["3", 0], ["output", 0], ["1", 0], ["input", 0], ["4", 0], ["output", 0], ["0", 0], ["1", 0], ["3", 0], ["2", 0], ["0", 0], ["input", 0], ["16", 0], ["output", 0], ["0", 0], ["1", 0], ["2", 0], ["4", 0], ["9", 0], ["3", 0], ["6", 0], ["13", 0], ["10", 0], ["5", 0], ["11", 0], ["7", 0], ["15", 0], ["14", 0], ["12", 0], ["8", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.62, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.62, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6981132075471698, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6981132075471698, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.62, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.62, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6981132075471698, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6981132075471698, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["d", 0], ["r", 0], ["false", 0], ["10", 0], ["6", 0], ["0", 0], ["10", 0], ["6", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["while", 0], ["true", 0], ["d", 0], ["j", 0], ["true", 0], ["r", 0], ["i", 0], ["j", 0], ["i", 0], ["1", 0], ["if", 0], ["not", 0], ["d", 0], ["j", 0], ["n", 0], ["1", 0], ["j", 0], ["j", 0], ["n", 0], ["1", 0], ["elif", 0], ["not", 0], ["d", 0], ["j", 0], ["1", 0], ["j", 0], ["j", 0], ["1", 0], ["else", 0], ["break", 0], ["print", 0], ["join", 0], ["str", 0], ["r", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["meto", 0], ["bot", 0], ["0", 0], ["9", 0], ["9", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["d", 0], ["r", 0], ["false", 0], ["10", 0], ["6", 0], ["0", 0], ["10", 0], ["6", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["while", 0], ["true", 0], ["d", 0], ["j", 0], ["true", 0], ["r", 0], ["i", 0], ["j", 0], ["i", 0], ["1", 0], ["if", 0], ["not", 0], ["d", 0], ["j", 0], ["n", 0], ["1", 0], ["j", 0], ["j", 0], ["n", 0], ["1", 0], ["elif", 0], ["not", 0], ["d", 0], ["j", 0], ["1", 0], ["j", 0], ["j", 0], ["1", 0], ["else", 0], ["break", 0], ["print", 0], ["join", 0], ["str", 0], ["r", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["meto", 0], ["bot", 0], ["0", 0], ["9", 0], ["9", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["if", 0], ["n", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["d", 0], ["r", 0], ["false", 0], ["10", 0], ["6", 0], ["0", 0], ["10", 0], ["6", 0], ["i", 0], ["j", 0], ["0", 0], ["0", 0], ["while", 0], ["true", 0], ["d", 0], ["j", 0], ["true", 0], ["r", 0], ["i", 0], ["j", 0], ["i", 0], ["1", 0], ["if", 0], ["not", 0], ["d", 0], ["j", 0], ["n", 0], ["1", 0], ["j", 0], ["j", 0], ["n", 0], ["1", 0], ["elif", 0], ["not", 0], ["d", 0], ["j", 0], ["1", 0], ["j", 0], ["j", 0], ["1", 0], ["else", 0], ["break", 0], ["print", 0], ["join", 0], ["str", 0], ["r", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nAfter acquiring a new integer and showing it off to other couples at a cocktail party, Alice and Bob headed home for a good night of sleep. As their integer was quite large, they were forced to carry it together. Then, on the Boole Boulevard, right by the Bayes Bay, disaster struck. History does not tell us which of our two protagonists stumbled first, but stumble they did, and their integer shattered into $n$ positive integral pieces on the pavement in front of them.\n\nThe couple’s marriage, already under financial stress due to the expensive integer acquisition, did not survive this event, and Bob and Alice resolved to separate. Thus the question was raised on how to split the remnants of their integer. Bob and Alice decided to play a game with the remaining $n$ pieces: the two would repeatedly choose pieces in alternating turns until none were left.\n\nBob and Alice, both very materialistic, seek to acquire the largest possible sum of integers possible. Compute the value of the integers each of them ends up with. Assume both players play optimally. Since A comes before B in the alphabet, Alice moves first.\n\n-----Input-----\nThe input consists of two lines.\n - A single integer $1 \\leq n \\leq 15$, the number of pieces.\n - The values of the pieces $a_0, a_1, \\dots , a_{n-1}$, space-separated. It is given that $1 \\leq a_ i \\leq 100$.\n\n-----Output-----\nOutput a single line containing two integers, the combined value of Alice’s pieces, and the combined value of Bob’s pieces.\n\n-----Examples-----\nSample Input:\n3\n3 1 2\nSample Output:\n4 2\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9563"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9563", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["after", 1], ["acquiring", 1], ["a", 1], ["new", 1], ["integer", 1], ["and", 1], ["showing", 1], ["it", 1], ["off", 1], ["to", 1], ["other", 1], ["couples", 1], ["at", 1], ["a", 1], ["cocktail", 1], ["party", 1], ["alice", 1], ["and", 1], ["bob", 1], ["headed", 1], ["home", 1], ["for", 1], ["a", 1], ["good", 1], ["night", 1], ["of", 1], ["sleep", 1], ["as", 1], ["their", 1], ["integer", 1], ["was", 1], ["quite", 1], ["large", 1], ["they", 1], ["were", 1], ["forced", 1], ["to", 1], ["carry", 1], ["it", 1], ["together", 1], ["then", 1], ["on", 1], ["the", 1], ["boole", 1], ["boulevard", 1], ["right", 1], ["by", 1], ["the", 1], ["bayes", 1], ["bay", 1], ["disaster", 1], ["struck", 1], ["history", 1], ["does", 1], ["not", 1], ["tell", 1], ["us", 1], ["which", 1], ["of", 1], ["our", 1], ["two", 1], ["protagonists", 1], ["stumbled", 1], ["first", 1], ["but", 1], ["stumble", 1], ["they", 1], ["did", 1], ["and", 1], ["their", 1], ["integer", 1], ["shattered", 1], ["into", 1], ["n", 1], ["positive", 1], ["integral", 1], ["pieces", 1], ["on", 1], ["the", 1], ["pavement", 1], ["in", 1], ["front", 1], ["of", 1], ["them", 1], ["the", 1], ["couple’s", 1], ["marriage", 1], ["already", 1], ["under", 1], ["financial", 1], ["stress", 1], ["due", 1], ["to", 1], ["the", 1], ["expensive", 1], ["integer", 1], ["acquisition", 1], ["did", 1], ["not", 1], ["survive", 1], ["this", 1], ["event", 1], ["and", 1], ["bob", 1], ["and", 1], ["alice", 1], ["resolved", 1], ["to", 1], ["separate", 1], ["thus", 1], ["the", 1], ["question", 1], ["was", 1], ["raised", 1], ["on", 1], ["how", 1], ["to", 1], ["split", 1], ["the", 1], ["remnants", 1], ["of", 1], ["their", 1], ["integer", 1], ["bob", 1], ["and", 1], ["alice", 1], ["decided", 1], ["to", 1], ["play", 1], ["a", 1], ["game", 1], ["with", 1], ["the", 1], ["remaining", 1], ["n", 1], ["pieces", 1], ["the", 1], ["two", 1], ["would", 1], ["repeatedly", 1], ["choose", 1], ["pieces", 1], ["in", 1], ["alternating", 1], ["turns", 1], ["until", 1], ["none", 1], ["were", 1], ["left", 1], ["bob", 1], ["and", 1], ["alice", 1], ["both", 1], ["very", 1], ["materialistic", 1], ["seek", 1], ["to", 1], ["acquire", 1], ["the", 1], ["largest", 1], ["possible", 1], ["sum", 1], ["of", 1], ["integers", 1], ["possible", 1], ["compute", 1], ["the", 1], ["value", 1], ["of", 1], ["the", 1], ["integers", 1], ["each", 1], ["of", 1], ["them", 1], ["ends", 1], ["up", 1], ["with", 1], ["assume", 1], ["both", 1], ["players", 1], ["play", 1], ["optimally", 0], ["since", 0], ["a", 0], ["comes", 0], ["before", 0], ["b", 0], ["in", 0], ["the", 0], ["alphabet", 0], ["alice", 0], ["moves", 0], ["first", 0], ["input", 0], ["the", 0], ["input", 0], ["consists", 0], ["of", 0], ["two", 0], ["lines", 0], ["a", 0], ["single", 0], ["integer", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["15", 0], ["the", 0], ["number", 0], ["of", 0], ["pieces", 0], ["the", 0], ["values", 0], ["of", 0], ["the", 0], ["pieces", 0], ["a", 0], ["0", 0], ["a", 0], ["1", 0], ["dots", 0], ["a", 0], ["n", 0], ["1", 0], ["space", 0], ["separated", 0], ["it", 0], ["is", 0], ["given", 0], ["that", 0], ["1", 0], ["leq", 0], ["a", 0], ["i", 0], ["leq", 0], ["100", 0], ["output", 0], ["output", 1], ["a", 1], ["single", 1], ["line", 1], ["containing", 1], ["two", 1], ["integers", 1], ["the", 1], ["combined", 0], ["value", 0], ["of", 0], ["alice’s", 0], ["pieces", 0], ["and", 0], ["the", 0], ["combined", 0], ["value", 0], ["of", 0], ["bob’s", 0], ["pieces", 0], ["examples", 0], ["sample", 0], ["input", 0], ["3", 0], ["3", 0], ["1", 0], ["2", 0], ["sample", 0], ["output", 0], ["4", 0], ["2", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7052238805970149, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7052238805970149, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7607142857142857, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7607142857142857, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7052238805970149, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7052238805970149, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7607142857142857, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7607142857142857, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nPolycarp is a music editor at the radio station. He received a playlist for tomorrow, that can be represented as a sequence a_1, a_2, ..., a_{n}, where a_{i} is a band, which performs the i-th song. Polycarp likes bands with the numbers from 1 to m, but he doesn't really like others. \n\nWe define as b_{j} the number of songs the group j is going to perform tomorrow. Polycarp wants to change the playlist in such a way that the minimum among the numbers b_1, b_2, ..., b_{m} will be as large as possible.\n\nFind this maximum possible value of the minimum among the b_{j} (1 ≤ j ≤ m), and the minimum number of changes in the playlist Polycarp needs to make to achieve it. One change in the playlist is a replacement of the performer of the i-th song with any other group.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 ≤ m ≤ n ≤ 2000).\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9), where a_{i} is the performer of the i-th song.\n\n\n-----Output-----\n\nIn the first line print two integers: the maximum possible value of the minimum among the b_{j} (1 ≤ j ≤ m), where b_{j} is the number of songs in the changed playlist performed by the j-th band, and the minimum number of changes in the playlist Polycarp needs to make.\n\nIn the second line print the changed playlist.\n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n4 2\n1 2 3 2\n\nOutput\n2 1\n1 2 1 2 \n\n\n\n\nInput\n7 3\n1 3 2 2 2 2 1\n\nOutput\n2 1\n1 3 3 2 2 2 1 \n\n\n\n\nInput\n4 4\n1000000000 100 7 1000000000\n\nOutput\n1 4\n1 2 3 4 \n\n\n\n\n\n\n-----Note-----\n\nIn the first sample, after Polycarp's changes the first band performs two songs (b_1 = 2), and the second band also performs two songs (b_2 = 2). Thus, the minimum of these values equals to 2. It is impossible to achieve a higher minimum value by any changes in the playlist. \n\nIn the second sample, after Polycarp's changes the first band performs two songs (b_1 = 2), the second band performs three songs (b_2 = 3), and the third band also performs two songs (b_3 = 2). Thus, the best minimum value is 2.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["#!/usr/bin/env python3\n\nfrom collections import Counter\n\nn, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ntgt = n // m\nb = Counter(a)\nrd = sum(b[x] for x in b if x > m)\nr = 0\n\nfor i in range(1, m+1):\n\twhile rd and b[i] < tgt:\n\t\tfor j in range(n):\n\t\t\tif a[j] > m:\n\t\t\t\tb[a[j]] -= 1\n\t\t\t\tb[i] += 1\n\t\t\t\ta[j] = i\n\t\t\t\trd -= 1\n\t\t\t\tr += 1\n\t\t\t\tbreak\n\twhile b[i] < tgt:\n\t\tfor j in range(n):\n\t\t\tif b[a[j]] > tgt:\n\t\t\t\tb[a[j]] -= 1\n\t\t\t\tb[i] += 1\n\t\t\t\ta[j] = i\n\t\t\t\tr += 1\n\t\t\t\tbreak\n\nprint(tgt, r)\nprint(\" \".join(str(x) for x in a))\n", "n, m = list(map(int, input().split()))\nA = list(map(int, input().split()))\ncount_good = [[0, i + 1] for i in range(m)]\nbad = 0\nbad_places = []\ngood_places = [[i + 1, []] for i in range(m)]\nfor i in range(len(A)):\n\telem = A[i]\n\tif elem <= m:\n\t\tcount_good[elem - 1][0] += 1\n\t\tgood_places[elem - 1][1].append(i)\n\telse:\n\t\tbad += 1\n\t\tbad_places.append(i)\nideal = n // m\nfor elem in good_places:\n\tbad_places.extend(elem[1][ideal:])\nbad = len(bad_places)\nbadd = bad\ncount_good.sort()\nminn = count_good[0][0]\nbad_Cnt = 0\nwhile minn != ideal:\n\tj = 0\n\twhile j < len(count_good) and count_good[j][0] == minn and bad > 0:\n\t\tcount_good[j][0] += 1\n\t\tA[bad_places[bad_Cnt]] = count_good[j][1]\n\t\tbad_Cnt += 1\n\t\tbad -= 1\n\t\tj += 1\n\tminn += 1\nprint(minn, badd - bad)\nprint(*A)\n", "a=[int(i) for i in (str(input())).split() ]\nn=a[0]\nm=a[1]\na=[int(i) for i in (str(input())).split() ]\nmaxmin=n//m\n\ngroups={}\nfor i in a:\n\tgroups[i]=0\nfor i in range(m):\n\tgroups[i+1]=0\n\nfor i in a:\n\tgroups[i]+=1\nchanges=0\nfor i in range(1,m+1):\n\twhile groups[i]<maxmin:\n\t\tchange=False\n\t\tfor n,j in enumerate(a):\n\t\t\t#print(j)\n\t\t\tif j <= m:\n\t\t\t\tcontinue\n\t\t\tgroups[j]-=1\n\t\t\ta[n]=i\n\t\t\tgroups[i]+=1\n\t\t\t#print('kek')\n\t\t\tchanges+=1\n\t\t\tchange=True\n\t\t\tif groups[i]>=maxmin:\n\t\t\t\tbreak\n\t\t\n\t\tif groups[i]>=maxmin:\n\t\t\tcontinue\n\n\t\tfor n,j in enumerate(a):\n\t\t\t#print(j)\n\t\t\tif groups[j]<=maxmin:\n\t\t\t\tcontinue\n\t\t\t#print(groups[j])\n\t\t\tgroups[j]-=1\n\t\t\ta[n]=i\n\t\t\tgroups[i]+=1\n\t\t\tchanges+=1\n\t\t\tchange=True\n\t\t\tif groups[i]>=maxmin:\n\t\t\t\tbreak\n\nprint('%s %s'%(maxmin,changes))        \nfor i in a:\n\t\n\tprint(i,end=' ')\n", "n, m = list(map(int, input().split()))\ntarget = n//m\nA = [int(i) for i in input().split()]\nB = [0 for _ in range(2005)]\nR = B[:]\nch = 0\nfor i in A:\n\tif i <= m:\n\t\tB[i] += 1\n\nfor i in range(2005):\n\tR[i] = target - B[i]\n\nj = 1\n\nfor i in range(n):\n\tif A[i] > m:\n\t\twhile j <= m and R[j] <= 0:\n\t\t\tj += 1\n\t\tif j <= m and R[j] > 0:\n\t\t\tch += 1\n\t\t\tR[j] -= 1\n\t\t\tA[i] = j\n\nfor i in range(n):\n\tif A[i] <= m and R[A[i]] < 0:\n\t\twhile j <= m and R[j] <= 0:\n\t\t\tj += 1\n\t\tif j <= m and R[j] > 0:\n\t\t\tR[j] -= 1\n\t\t\tR[A[i]] += 1\n\t\t\tA[i] = j\n\t\t\tch += 1\nprint(target, ch)\nprint(*A)\n", "n, m = list(map(int, input().split()))\ncount=[0]*(m+1)\nlother=[]\nlbig=[]\na=list(map(int, input().split()))\nfor i in range(len(a)):\n\tif a[i]<=m:\n\t\tcount[a[i]]+=1\n\telse:\n\t\tlother.append(i)\nfor i in range(len(a)):\n\tif a[i]<=m and count[a[i]]>n//m:\n\t\tlbig.append(i)\n\t\tcount[a[i]]-=1\nans=0\nfor i in range(1,m+1):\n\twhile count[i]<n//m:\n\t\tans+=1\n\t\tif len(lother)!=0:\n\t\t\ta[lother[0]]=i\n\t\t\tlother.pop(0)\n\t\telse:\n\t\t\t#print(\"in\")\n\t\t\t#print(len(a))\n\t\t\t#print(lbig[0])\n\t\t\ta[lbig[0]]=i\n\t\t\tlbig.pop(0)\n\t\t\t#print('out');\n\t\tcount[i]+=1\nprint(str(n//m)+' '+str(ans))\nfor i in a:\n\tprint(i,end=' ')\n"], "id": "id7553"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7553", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["polycarp", 2], ["is", 2], ["a", 2], ["music", 2], ["editor", 2], ["at", 2], ["the", 2], ["radio", 2], ["station", 2], ["he", 2], ["received", 0], ["a", 0], ["playlist", 0], ["for", 0], ["tomorrow", 0], ["that", 0], ["can", 0], ["be", 0], ["represented", 0], ["as", 0], ["a", 0], ["sequence", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["where", 0], ["a", 0], ["i", 0], ["is", 2], ["a", 2], ["band", 2], ["which", 2], ["performs", 2], ["the", 2], ["i", 2], ["th", 2], ["song", 2], ["polycarp", 3], ["likes", 3], ["bands", 3], ["with", 3], ["the", 3], ["numbers", 2], ["from", 2], ["1", 2], ["to", 0], ["m", 0], ["but", 0], ["he", 0], ["doesn", 0], ["t", 0], ["really", 0], ["like", 0], ["others", 0], ["we", 0], ["define", 0], ["as", 0], ["b", 0], ["j", 0], ["the", 2], ["number", 2], ["of", 2], ["songs", 2], ["the", 2], ["group", 2], ["j", 2], ["is", 2], ["going", 2], ["to", 2], ["perform", 2], ["tomorrow", 2], ["polycarp", 2], ["wants", 2], ["to", 2], ["change", 2], ["the", 0], ["playlist", 0], ["in", 0], ["such", 0], ["a", 0], ["way", 0], ["that", 0], ["the", 0], ["minimum", 0], ["among", 0], ["the", 0], ["numbers", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["b", 0], ["m", 0], ["will", 2], ["be", 2], ["as", 2], ["large", 2], ["as", 0], ["possible", 0], ["find", 0], ["this", 0], ["maximum", 0], ["possible", 0], ["value", 0], ["of", 0], ["the", 0], ["minimum", 0], ["among", 0], ["the", 0], ["b", 0], ["j", 0], ["1", 2], ["≤", 2], ["j", 2], ["≤", 2], ["m", 2], ["and", 4], ["the", 2], ["minimum", 2], ["number", 2], ["of", 2], ["changes", 2], ["in", 2], ["the", 2], ["playlist", 2], ["polycarp", 2], ["needs", 2], ["to", 2], ["make", 2], ["to", 2], ["achieve", 2], ["it", 2], ["one", 2], ["change", 2], ["in", 2], ["the", 2], ["playlist", 2], ["is", 2], ["a", 2], ["replacement", 2], ["of", 0], ["the", 0], ["performer", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["song", 0], ["with", 0], ["any", 0], ["other", 0], ["group", 0], ["input", 0], ["the", 26], ["first", 14], ["line", 2], ["of", 2], ["the", 2], ["input", 3], ["contains", 2], ["two", 2], ["integers", 2], ["n", 2], ["and", 2], ["m", 2], ["1", 2], ["≤", 0], ["m", 0], ["≤", 0], ["n", 0], ["≤", 0], ["2000", 0], ["the", 1], ["second", 1], ["line", 1], ["contains", 1], ["n", 1], ["integers", 1], ["a", 1], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["10", 0], ["9", 0], ["where", 0], ["a", 0], ["i", 0], ["is", 0], ["the", 0], ["performer", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["song", 0], ["output", 0], ["in", 2], ["the", 2], ["first", 2], ["line", 2], ["print", 0], ["two", 0], ["integers", 0], ["the", 0], ["maximum", 0], ["possible", 0], ["value", 0], ["of", 0], ["the", 0], ["minimum", 0], ["among", 0], ["the", 0], ["b", 0], ["j", 0], ["1", 0], ["≤", 0], ["j", 0], ["≤", 0], ["m", 0], ["where", 0], ["b", 0], ["j", 0], ["is", 2], ["the", 2], ["number", 2], ["of", 2], ["songs", 2], ["in", 2], ["the", 2], ["changed", 2], ["playlist", 2], ["performed", 2], ["by", 2], ["the", 2], ["j", 2], ["th", 2], ["band", 2], ["and", 4], ["the", 2], ["minimum", 2], ["number", 2], ["of", 2], ["changes", 2], ["in", 2], ["the", 2], ["playlist", 2], ["polycarp", 2], ["needs", 2], ["to", 2], ["make", 2], ["in", 2], ["the", 2], ["second", 2], ["line", 2], ["print", 2], ["the", 0], ["changed", 0], ["playlist", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["answers", 0], ["print", 0], ["any", 0], ["of", 0], ["them", 0], ["examples", 0], ["input", 0], ["4", 0], ["2", 0], ["1", 0], ["2", 0], ["3", 0], ["2", 0], ["output", 0], ["2", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["input", 0], ["7", 0], ["3", 0], ["1", 0], ["3", 0], ["2", 0], ["2", 0], ["2", 0], ["2", 0], ["1", 0], ["output", 0], ["2", 0], ["1", 0], ["1", 0], ["3", 0], ["3", 0], ["2", 0], ["2", 0], ["2", 0], ["1", 0], ["input", 0], ["4", 0], ["4", 0], ["1000000000", 0], ["100", 0], ["7", 0], ["1000000000", 0], ["output", 0], ["1", 0], ["4", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 0], ["sample", 0], ["after", 0], ["polycarp", 0], ["s", 0], ["changes", 0], ["the", 0], ["first", 0], ["band", 0], ["performs", 0], ["two", 0], ["songs", 0], ["b", 0], ["1", 0], ["2", 0], ["and", 0], ["the", 0], ["second", 0], ["band", 0], ["also", 0], ["performs", 0], ["two", 0], ["songs", 0], ["b", 0], ["2", 0], ["2", 2], ["thus", 2], ["the", 2], ["minimum", 2], ["of", 2], ["these", 2], ["values", 2], ["equals", 2], ["to", 2], ["2", 2], ["it", 2], ["is", 2], ["impossible", 2], ["to", 2], ["achieve", 2], ["a", 2], ["higher", 2], ["minimum", 2], ["value", 2], ["by", 2], ["any", 2], ["changes", 2], ["in", 2], ["the", 2], ["playlist", 2], ["in", 2], ["the", 2], ["second", 0], ["sample", 0], ["after", 0], ["polycarp", 0], ["s", 0], ["changes", 0], ["the", 0], ["first", 0], ["band", 0], ["performs", 0], ["two", 0], ["songs", 0], ["b", 0], ["1", 0], ["2", 0], ["the", 0], ["second", 0], ["band", 0], ["performs", 0], ["three", 0], ["songs", 0], ["b", 0], ["2", 0], ["3", 0], ["and", 0], ["the", 0], ["third", 0], ["band", 0], ["also", 0], ["performs", 0], ["two", 0], ["songs", 0], ["b", 0], ["3", 0], ["2", 0], ["thus", 0], ["the", 0], ["best", 0], ["minimum", 0], ["value", 0], ["is", 0], ["2", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.38388625592417064, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.19457319931253583, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.663594470046083, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3516356914974426, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3791469194312796, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1943127962085308, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6589861751152074, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3513824884792627, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["n", 0], ["m", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["tgt", 0], ["n", 0], ["m", 0], ["b", 0], ["counter", 0], ["a", 0], ["rd", 0], ["sum", 0], ["b", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["b", 0], ["if", 0], ["x", 0], ["m", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["while", 0], ["rd", 0], ["and", 0], ["b", 0], ["i", 0], ["tgt", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["m", 0], ["b", 0], ["a", 0], ["j", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["a", 0], ["j", 0], ["i", 0], ["rd", 0], ["1", 0], ["r", 0], ["1", 0], ["break", 0], ["while", 0], ["b", 0], ["i", 0], ["tgt", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["a", 0], ["j", 0], ["tgt", 0], ["b", 0], ["a", 0], ["j", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["a", 0], ["j", 0], ["i", 0], ["r", 0], ["1", 0], ["break", 0], ["print", 0], ["tgt", 0], ["r", 0], ["print", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["good", 0], ["0", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["bad", 0], ["0", 0], ["bad", 0], ["places", 0], ["good", 0], ["places", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["elem", 0], ["a", 0], ["i", 0], ["if", 0], ["elem", 0], ["m", 0], ["count", 0], ["good", 0], ["elem", 0], ["1", 0], ["0", 0], ["1", 0], ["good", 0], ["places", 0], ["elem", 0], ["1", 0], ["1", 0], ["append", 0], ["i", 0], ["else", 0], ["bad", 0], ["1", 0], ["bad", 0], ["places", 0], ["append", 0], ["i", 0], ["ideal", 0], ["n", 0], ["m", 0], ["for", 0], ["elem", 0], ["in", 0], ["good", 0], ["places", 0], ["bad", 0], ["places", 0], ["extend", 0], ["elem", 0], ["1", 0], ["ideal", 0], ["bad", 0], ["len", 0], ["bad", 0], ["places", 0], ["badd", 0], ["bad", 0], ["count", 0], ["good", 0], ["sort", 0], ["minn", 0], ["count", 0], ["good", 0], ["0", 0], ["0", 0], ["bad", 0], ["cnt", 0], ["0", 0], ["while", 0], ["minn", 0], ["ideal", 0], ["j", 0], ["0", 0], ["while", 0], ["j", 0], ["len", 0], ["count", 0], ["good", 0], ["and", 0], ["count", 0], ["good", 0], ["j", 0], ["0", 0], ["minn", 0], ["and", 0], ["bad", 0], ["0", 0], ["count", 0], ["good", 0], ["j", 0], ["0", 0], ["1", 0], ["a", 0], ["bad", 0], ["places", 0], ["bad", 0], ["cnt", 0], ["count", 0], ["good", 0], ["j", 0], ["1", 0], ["bad", 0], ["cnt", 0], ["1", 0], ["bad", 0], ["1", 0], ["j", 0], ["1", 0], ["minn", 0], ["1", 0], ["print", 0], ["minn", 0], ["badd", 0], ["bad", 0], ["print", 0], ["a", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["str", 0], ["input", 0], ["split", 0], ["n", 0], ["a", 0], ["0", 0], ["m", 0], ["a", 0], ["1", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["str", 0], ["input", 0], ["split", 0], ["maxmin", 0], ["n", 0], ["m", 0], ["groups", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["groups", 0], ["i", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["groups", 0], ["i", 0], ["1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["groups", 0], ["i", 0], ["1", 0], ["changes", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["while", 0], ["groups", 0], ["i", 0], ["maxmin", 0], ["change", 0], ["false", 0], ["for", 0], ["n", 0], ["j", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["print", 0], ["j", 0], ["if", 0], ["j", 0], ["m", 0], ["continue", 0], ["groups", 0], ["j", 0], ["1", 0], ["a", 0], ["n", 0], ["i", 0], ["groups", 0], ["i", 0], ["1", 0], ["print", 0], ["kek", 0], ["changes", 0], ["1", 0], ["change", 0], ["true", 0], ["if", 0], ["groups", 0], ["i", 0], ["maxmin", 0], ["break", 0], ["if", 0], ["groups", 0], ["i", 0], ["maxmin", 0], ["continue", 0], ["for", 0], ["n", 0], ["j", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["print", 0], ["j", 0], ["if", 0], ["groups", 0], ["j", 0], ["maxmin", 0], ["continue", 0], ["print", 0], ["groups", 0], ["j", 0], ["groups", 0], ["j", 0], ["1", 0], ["a", 0], ["n", 0], ["i", 0], ["groups", 0], ["i", 0], ["1", 0], ["changes", 0], ["1", 0], ["change", 0], ["true", 0], ["if", 0], ["groups", 0], ["i", 0], ["maxmin", 0], ["break", 0], ["print", 0], ["s", 0], ["s", 0], ["maxmin", 0], ["changes", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["print", 0], ["i", 0], ["end", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["target", 0], ["n", 0], ["m", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["2005", 0], ["r", 0], ["b", 0], ["ch", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["m", 0], ["b", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2005", 0], ["r", 0], ["i", 0], ["target", 0], ["b", 0], ["i", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["m", 0], ["while", 0], ["j", 0], ["m", 0], ["and", 0], ["r", 0], ["j", 0], ["0", 0], ["j", 0], ["1", 0], ["if", 0], ["j", 0], ["m", 0], ["and", 0], ["r", 0], ["j", 0], ["0", 0], ["ch", 0], ["1", 0], ["r", 0], ["j", 0], ["1", 0], ["a", 0], ["i", 0], ["j", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["m", 0], ["and", 0], ["r", 0], ["a", 0], ["i", 0], ["0", 0], ["while", 0], ["j", 0], ["m", 0], ["and", 0], ["r", 0], ["j", 0], ["0", 0], ["j", 0], ["1", 0], ["if", 0], ["j", 0], ["m", 0], ["and", 0], ["r", 0], ["j", 0], ["0", 0], ["r", 0], ["j", 0], ["1", 0], ["r", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["j", 0], ["ch", 0], ["1", 0], ["print", 0], ["target", 0], ["ch", 0], ["print", 0], ["a", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["0", 0], ["m", 0], ["1", 0], ["lother", 0], ["lbig", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["m", 0], ["count", 0], ["a", 0], ["i", 0], ["1", 0], ["else", 0], ["lother", 0], ["append", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["m", 0], ["and", 0], ["count", 0], ["a", 0], ["i", 0], ["n", 0], ["m", 0], ["lbig", 0], ["append", 0], ["i", 0], ["count", 0], ["a", 0], ["i", 0], ["1", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["m", 0], ["1", 0], ["while", 0], ["count", 0], ["i", 0], ["n", 0], ["m", 0], ["ans", 0], ["1", 0], ["if", 0], ["len", 0], ["lother", 0], ["0", 0], ["a", 0], ["lother", 0], ["0", 0], ["i", 0], ["lother", 0], ["pop", 0], ["0", 0], ["else", 0], ["print", 0], ["in", 0], ["print", 0], ["len", 0], ["a", 0], ["print", 0], ["lbig", 0], ["0", 0], ["a", 0], ["lbig", 0], ["0", 0], ["i", 0], ["lbig", 0], ["pop", 0], ["0", 0], ["print", 0], ["out", 0], ["count", 0], ["i", 0], ["1", 0], ["print", 0], ["str", 0], ["n", 0], ["m", 0], ["str", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["print", 0], ["i", 0], ["end", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nGiven $S$, a set of integers, find the largest $d$ such that $a + b + c = d$ where $a, b, c$ and $d$ are distinct elements of $S$.\n\n-----Input-----\nThe input starts with an integer $1 \\le N \\le 4000$, the number of elements in $S$. It is followed by $N$ lines containing the elements of $s$, one per line. Each element of $S$ is a distinct integer between $-536870912$ and $+536870911$, inclusive.\n\n-----Output-----\nOutput a single line containing the maximum $d$ as described in the statement. If no such $d$ exists, output a single line containing no solution.\n\n-----Examples-----\nSample Input:\n5\n2\n3\n5\n7\n12\nSample Output:\n12\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9481"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9481", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["given", 1], ["s", 1], ["a", 1], ["set", 1], ["of", 1], ["integers", 1], ["find", 1], ["the", 1], ["largest", 1], ["d", 3], ["such", 3], ["that", 1], ["a", 2], ["b", 2], ["c", 1], ["d", 0], ["where", 0], ["a", 0], ["b", 0], ["c", 0], ["and", 0], ["d", 0], ["are", 0], ["distinct", 0], ["elements", 0], ["of", 0], ["s", 0], ["input", 0], ["the", 0], ["input", 0], ["starts", 0], ["with", 0], ["an", 0], ["integer", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["4000", 0], ["the", 0], ["number", 0], ["of", 0], ["elements", 0], ["in", 0], ["s", 0], ["it", 0], ["is", 0], ["followed", 0], ["by", 0], ["n", 0], ["lines", 0], ["containing", 0], ["the", 1], ["elements", 1], ["of", 1], ["s", 1], ["one", 1], ["per", 1], ["line", 1], ["each", 1], ["element", 0], ["of", 0], ["s", 0], ["is", 0], ["a", 0], ["distinct", 0], ["integer", 0], ["between", 0], ["536870912", 0], ["and", 0], ["536870911", 0], ["inclusive", 0], ["output", 0], ["output", 0], ["a", 0], ["single", 0], ["line", 0], ["containing", 0], ["the", 0], ["maximum", 0], ["d", 0], ["as", 0], ["described", 0], ["in", 0], ["the", 0], ["statement", 0], ["if", 0], ["no", 0], ["such", 0], ["d", 0], ["exists", 0], ["output", 0], ["a", 0], ["single", 0], ["line", 0], ["containing", 0], ["no", 0], ["solution", 0], ["examples", 0], ["sample", 0], ["input", 0], ["5", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["12", 0], ["sample", 0], ["output", 0], ["12", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.21100917431192662, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.18960244648318045, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.3884297520661157, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3884297520661157, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.21100917431192662, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.18960244648318045, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.3884297520661157, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3884297520661157, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThe teacher has sent an e-mail to her students with the following task: “Write a program that will determine and output the value of $X$ if given the statement:\\[ X = \\mathit{number}_1^{\\mathit{pow}_1} + \\mathit{number}_2^{\\mathit{pow}_2} + \\ldots + \\mathit{number}_ N^{\\mathit{pow}_ N} \\]\n\nand it holds that $\\mathit{number}_1$, $\\mathit{number}_2$ to $\\mathit{number}_ N$ are integers, and $\\mathit{pow}_1$, $\\mathit{pow_2}$ to $\\mathit{pow}_ N$ are one-digit integers.” Unfortunately, when the teacher downloaded the task to her computer, the text formatting was lost so the task transformed into a sum of $N$ integers:\\[ X = P_1 + P_2 + \\ldots + P_ N \\]\n\nFor example, without text formatting, the original task in the form of $X = 21^2 + 125^3$ became a task in the form of $X = 212 + 1253$. Help the teacher by writing a program that will, for given $N$ integers from $P_1$ to $P_ N$ determine and output the value of $X$ from the original task.\n\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 10$), the number of the addends from the task. Each of the following $N$ lines contains the integer $P_ i$ ($10 \\leq P_ i \\leq 9999$, $i = 1, \\ldots , N$) from the task.\n\n-----Output-----\nThe first and only line of output must contain the value of $X$ ($X \\leq 1000000000$) from the original task.\n\n-----Examples-----\nSample Input 1:\n2\n212\n1253\nSample Output 1:\n1953566\n\nSample Input 2:\n5\n23\n17\n43\n52\n22\nSample Output 2:\n102\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9244"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9244", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 0], ["teacher", 0], ["has", 0], ["sent", 0], ["an", 0], ["e", 0], ["mail", 0], ["to", 0], ["her", 0], ["students", 0], ["with", 0], ["the", 0], ["following", 0], ["task", 0], ["“write", 0], ["a", 0], ["program", 0], ["that", 0], ["will", 0], ["determine", 0], ["and", 0], ["output", 0], ["the", 0], ["value", 0], ["of", 0], ["x", 0], ["if", 0], ["given", 0], ["the", 0], ["statement", 0], ["x", 0], ["mathit", 0], ["number", 0], ["1", 0], ["mathit", 0], ["pow", 0], ["1", 0], ["mathit", 0], ["number", 0], ["2", 0], ["mathit", 0], ["pow", 0], ["2", 0], ["ldots", 0], ["mathit", 0], ["number", 0], ["n", 0], ["mathit", 0], ["pow", 0], ["n", 0], ["and", 0], ["it", 0], ["holds", 0], ["that", 0], ["mathit", 0], ["number", 0], ["1", 0], ["mathit", 0], ["number", 0], ["2", 0], ["to", 0], ["mathit", 0], ["number", 0], ["n", 0], ["are", 0], ["integers", 0], ["and", 0], ["mathit", 0], ["pow", 0], ["1", 0], ["mathit", 0], ["pow", 0], ["2", 0], ["to", 0], ["mathit", 0], ["pow", 0], ["n", 0], ["are", 0], ["one", 0], ["digit", 0], ["integers", 0], ["”", 0], ["unfortunately", 0], ["when", 0], ["the", 0], ["teacher", 0], ["downloaded", 0], ["the", 0], ["task", 0], ["to", 0], ["her", 0], ["computer", 0], ["the", 0], ["text", 0], ["formatting", 0], ["was", 0], ["lost", 0], ["so", 0], ["the", 0], ["task", 0], ["transformed", 0], ["into", 0], ["a", 0], ["sum", 0], ["of", 0], ["n", 0], ["integers", 0], ["x", 0], ["p", 0], ["1", 0], ["p", 0], ["2", 0], ["ldots", 0], ["p", 0], ["n", 0], ["for", 1], ["example", 1], ["without", 1], ["text", 1], ["formatting", 1], ["the", 1], ["original", 1], ["task", 1], ["in", 1], ["the", 1], ["form", 1], ["of", 1], ["x", 1], ["21", 1], ["2", 1], ["125", 1], ["3", 1], ["became", 1], ["a", 1], ["task", 1], ["in", 1], ["the", 1], ["form", 1], ["of", 1], ["x", 1], ["212", 1], ["1253", 1], ["help", 1], ["the", 1], ["teacher", 1], ["by", 1], ["writing", 1], ["a", 1], ["program", 1], ["that", 1], ["will", 1], ["for", 1], ["given", 1], ["n", 1], ["integers", 1], ["from", 1], ["p", 1], ["1", 1], ["to", 1], ["p", 1], ["n", 0], ["determine", 0], ["and", 0], ["output", 0], ["the", 0], ["value", 0], ["of", 0], ["x", 0], ["from", 0], ["the", 0], ["original", 0], ["task", 0], ["input", 0], ["the", 8], ["first", 3], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["the", 1], ["integer", 1], ["n", 1], ["1", 1], ["leq", 1], ["n", 1], ["leq", 1], ["10", 1], ["the", 1], ["number", 1], ["of", 1], ["the", 1], ["addends", 1], ["from", 1], ["the", 1], ["task", 1], ["each", 1], ["of", 1], ["the", 1], ["following", 1], ["n", 1], ["lines", 1], ["contains", 1], ["the", 1], ["integer", 1], ["p", 1], ["i", 1], ["10", 1], ["leq", 0], ["p", 0], ["i", 0], ["leq", 0], ["9999", 0], ["i", 0], ["1", 0], ["ldots", 0], ["n", 0], ["from", 0], ["the", 0], ["task", 0], ["output", 0], ["the", 1], ["first", 1], ["and", 1], ["only", 0], ["line", 0], ["of", 0], ["output", 0], ["must", 0], ["contain", 0], ["the", 0], ["value", 0], ["of", 0], ["x", 0], ["x", 0], ["leq", 0], ["1000000000", 0], ["from", 0], ["the", 0], ["original", 0], ["task", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["2", 0], ["212", 0], ["1253", 0], ["sample", 0], ["output", 0], ["1", 0], ["1953566", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["23", 0], ["17", 0], ["43", 0], ["52", 0], ["22", 0], ["sample", 0], ["output", 0], ["2", 0], ["102", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.311787072243346, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.30592522179974657, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4290909090909091, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4234848484848485, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.311787072243346, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.30592522179974657, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4290909090909091, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4234848484848485, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThe impact factor of a scientific journal is a measure reflecting the average number of citations to articles published in science journals. For this task we are using a simplified formula for calculating the impact factor:\\[ \\frac{\\text {Total count of citations received by articles published in the journal}}{\\text {Total number of articles published}} \\]\n\nRounding is always performed upwards. For example the impact factor of the “Journal for ore research and time wasting” that published $38$ articles cited $894$ times is $894 / 38 = 23.53$ rounding up to $24$.\n\nYou are the editor of one scientific journal. You know how many articles you are going to publish and the owners are pushing you to reach a specific impact factor. You are wondering how many scientists you will have to bribe to cite your articles to meet the owners demands. Since money is tight you want to bribe the minimal amount of scientists. Each bribed scientist buys you a single citation.\n\n-----Input-----\nFirst and only line of input will contain $2$ integers, $A$ ($1 \\leq A \\leq 100$), the number of articles you plan to publish and $I$ ($1 \\leq I \\leq 100$), the impact factor the owners require.\n\n-----Output-----\nThe first and only line of output should contain one integer, the minimal number of scientists you need to bribe.\n\n-----Examples-----\nSample Input 1:\n38 24\nSample Output 1:\n875\n\nSample Input 2:\n1 100\nSample Output 2:\n100\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9366"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9366", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 1], ["impact", 1], ["factor", 1], ["of", 1], ["a", 1], ["scientific", 0], ["journal", 0], ["is", 170], ["a", 139], ["measure", 2], ["reflecting", 0], ["the", 0], ["average", 0], ["number", 0], ["of", 0], ["citations", 0], ["to", 0], ["articles", 0], ["published", 0], ["in", 0], ["science", 0], ["journals", 0], ["for", 0], ["this", 0], ["task", 0], ["we", 0], ["are", 0], ["using", 0], ["a", 0], ["simplified", 0], ["formula", 0], ["for", 0], ["calculating", 0], ["the", 0], ["impact", 0], ["factor", 0], ["frac", 0], ["text", 0], ["total", 0], ["count", 0], ["of", 0], ["citations", 0], ["received", 0], ["by", 0], ["articles", 0], ["published", 0], ["in", 0], ["the", 0], ["journal", 0], ["text", 0], ["total", 0], ["number", 0], ["of", 0], ["articles", 0], ["published", 0], ["rounding", 1], ["is", 1], ["always", 1], ["performed", 1], ["upwards", 1], ["for", 1], ["example", 1], ["the", 1], ["impact", 1], ["factor", 1], ["of", 1], ["the", 1], ["“journal", 1], ["for", 1], ["ore", 1], ["research", 1], ["and", 1], ["time", 1], ["wasting”", 1], ["that", 1], ["published", 1], ["38", 1], ["articles", 1], ["cited", 1], ["894", 2], ["times", 2], ["is", 2], ["894", 2], ["38", 2], ["23", 2], ["53", 2], ["rounding", 2], ["up", 2], ["to", 2], ["24", 1], ["you", 1], ["are", 1], ["the", 1], ["editor", 1], ["of", 1], ["one", 1], ["scientific", 1], ["journal", 1], ["you", 1], ["know", 1], ["how", 1], ["many", 1], ["articles", 1], ["you", 2], ["are", 2], ["going", 2], ["to", 2], ["publish", 2], ["and", 2], ["the", 2], ["owners", 2], ["are", 2], ["pushing", 2], ["you", 2], ["to", 2], ["reach", 2], ["a", 2], ["specific", 2], ["impact", 2], ["factor", 2], ["you", 2], ["are", 2], ["wondering", 1], ["how", 1], ["many", 1], ["scientists", 1], ["you", 1], ["will", 1], ["have", 1], ["to", 1], ["bribe", 1], ["to", 1], ["cite", 1], ["your", 1], ["articles", 1], ["to", 2], ["meet", 2], ["the", 2], ["owners", 2], ["demands", 2], ["since", 2], ["money", 1], ["is", 1], ["tight", 1], ["you", 1], ["want", 1], ["to", 1], ["bribe", 1], ["the", 1], ["minimal", 0], ["amount", 0], ["of", 0], ["scientists", 0], ["each", 0], ["bribed", 0], ["scientist", 0], ["buys", 0], ["you", 0], ["a", 0], ["single", 0], ["citation", 0], ["input", 0], ["first", 1], ["and", 1], ["only", 1], ["line", 1], ["of", 1], ["input", 1], ["will", 1], ["contain", 1], ["2", 1], ["integers", 1], ["a", 1], ["1", 1], ["leq", 1], ["a", 1], ["leq", 1], ["100", 1], ["the", 1], ["number", 1], ["of", 1], ["articles", 1], ["you", 1], ["plan", 1], ["to", 1], ["publish", 1], ["and", 1], ["i", 0], ["1", 0], ["leq", 0], ["i", 0], ["leq", 0], ["100", 0], ["the", 0], ["impact", 0], ["factor", 0], ["the", 0], ["owners", 0], ["require", 0], ["output", 0], ["the", 1], ["first", 2], ["and", 2], ["only", 2], ["line", 2], ["of", 2], ["output", 2], ["should", 2], ["contain", 0], ["one", 0], ["integer", 0], ["the", 0], ["minimal", 0], ["number", 0], ["of", 0], ["scientists", 0], ["you", 0], ["need", 0], ["to", 0], ["bribe", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["38", 0], ["24", 0], ["sample", 0], ["output", 0], ["1", 0], ["875", 0], ["sample", 0], ["input", 0], ["2", 0], ["1", 0], ["100", 0], ["sample", 0], ["output", 0], ["2", 0], ["100", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5672268907563025, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4685423386451491, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.74, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.74, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5588235294117647, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4684873949579832, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.74, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.74, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nA group of friends snuck away from their school campus, but now they must return from the main campus gate to their dorm while remaining undetected by the many teachers who patrol the campus. Fortunately, they have an invisibility cloak, but it is only large enough to cover two people at a time. They will take turns as individuals or pairs traveling across campus under the cloak (and by necessity, returning the cloak to the gate if others remain). Each student has a maximum pace at which he or she is able to travel, yet if a pair of students are walking under the cloak together, they will have to travel at the pace of the slower of the two. Their goal is to have everyone back at the dorm as quickly as possible.\n\nAs an example, assume that there are four people in the group, with person A able to make the trip in $1$ minute, person B able to travel in $2$ minutes, person C able to travel in $7$ minutes, and person D able to travel in $10$ minutes. It is possible to get everyone to the dorm in $17$ minutes with the following plan:\n\n\n– A and B go from the gate to the dorm together\n\n(taking $2$ minutes)\n\n– A returns with the cloak to the gate\n\n(taking $1$ minute)\n\n– C and D go from the gate to the dorm together\n\n(taking $10$ minutes)\n\n– B returns with the cloak to the gate\n\n(taking $2$ minutes)\n\n– A and B go from the gate to the dorm together\n\n(taking $2$ minutes)\n\n-----Input-----\nThe input is a single line beginning with an integer, $2 \\leq N \\leq 15$. Following that are $N$ positive integers that respectively represent the minimum time in which each person is able to cross the campus if alone; these times are measured in minutes, with each being at most $5000$. (It is a very large campus!)\n\n-----Output-----\nOutput the minimum possible time it takes to get the entire group from the gate to the dorm.\n\n-----Examples-----\nSample Input 1:\n2 15 5\nSample Output 1:\n15\n\nSample Input 2:\n4 1 2 7 10\nSample Output 2:\n17\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8426"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8426", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 1], ["group", 1], ["of", 1], ["friends", 1], ["snuck", 1], ["away", 1], ["from", 1], ["their", 1], ["school", 1], ["campus", 1], ["but", 1], ["now", 1], ["they", 1], ["must", 1], ["return", 1], ["from", 1], ["the", 1], ["main", 1], ["campus", 1], ["gate", 1], ["to", 1], ["their", 1], ["dorm", 1], ["while", 1], ["remaining", 1], ["undetected", 1], ["by", 1], ["the", 1], ["many", 1], ["teachers", 1], ["who", 1], ["patrol", 1], ["the", 1], ["campus", 1], ["fortunately", 1], ["they", 1], ["have", 1], ["an", 1], ["invisibility", 1], ["cloak", 1], ["but", 1], ["it", 1], ["is", 1], ["only", 1], ["large", 1], ["enough", 1], ["to", 1], ["cover", 1], ["two", 1], ["people", 1], ["at", 1], ["a", 1], ["time", 1], ["they", 1], ["will", 1], ["take", 1], ["turns", 1], ["as", 1], ["individuals", 1], ["or", 1], ["pairs", 1], ["traveling", 1], ["across", 1], ["campus", 1], ["under", 1], ["the", 1], ["cloak", 1], ["and", 1], ["by", 1], ["necessity", 1], ["returning", 1], ["the", 1], ["cloak", 1], ["to", 1], ["the", 1], ["gate", 1], ["if", 1], ["others", 1], ["remain", 1], ["each", 1], ["student", 1], ["has", 1], ["a", 1], ["maximum", 1], ["pace", 1], ["at", 1], ["which", 1], ["he", 1], ["or", 1], ["she", 1], ["is", 1], ["able", 1], ["to", 1], ["travel", 1], ["yet", 1], ["if", 1], ["a", 1], ["pair", 1], ["of", 1], ["students", 1], ["are", 1], ["walking", 1], ["under", 1], ["the", 1], ["cloak", 1], ["together", 1], ["they", 1], ["will", 1], ["have", 1], ["to", 1], ["travel", 1], ["at", 1], ["the", 1], ["pace", 1], ["of", 1], ["the", 1], ["slower", 1], ["of", 1], ["the", 1], ["two", 1], ["their", 1], ["goal", 1], ["is", 0], ["to", 0], ["have", 0], ["everyone", 0], ["back", 0], ["at", 0], ["the", 0], ["dorm", 0], ["as", 0], ["quickly", 0], ["as", 0], ["possible", 0], ["as", 0], ["an", 0], ["example", 0], ["assume", 0], ["that", 0], ["there", 0], ["are", 0], ["four", 0], ["people", 0], ["in", 0], ["the", 0], ["group", 0], ["with", 0], ["person", 0], ["a", 0], ["able", 0], ["to", 0], ["make", 0], ["the", 0], ["trip", 0], ["in", 0], ["1", 0], ["minute", 0], ["person", 0], ["b", 0], ["able", 0], ["to", 0], ["travel", 0], ["in", 0], ["2", 0], ["minutes", 0], ["person", 0], ["c", 0], ["able", 0], ["to", 0], ["travel", 0], ["in", 0], ["7", 0], ["minutes", 0], ["and", 0], ["person", 0], ["d", 0], ["able", 0], ["to", 0], ["travel", 0], ["in", 0], ["10", 0], ["minutes", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["get", 0], ["everyone", 0], ["to", 0], ["the", 0], ["dorm", 0], ["in", 0], ["17", 0], ["minutes", 0], ["with", 0], ["the", 0], ["following", 0], ["plan", 0], ["–", 0], ["a", 0], ["and", 0], ["b", 0], ["go", 0], ["from", 0], ["the", 0], ["gate", 0], ["to", 0], ["the", 0], ["dorm", 0], ["together", 0], ["taking", 0], ["2", 0], ["minutes", 0], ["–", 0], ["a", 0], ["returns", 0], ["with", 0], ["the", 0], ["cloak", 0], ["to", 0], ["the", 0], ["gate", 0], ["taking", 0], ["1", 0], ["minute", 0], ["–", 0], ["c", 0], ["and", 0], ["d", 0], ["go", 0], ["from", 0], ["the", 0], ["gate", 0], ["to", 0], ["the", 0], ["dorm", 0], ["together", 0], ["taking", 0], ["10", 0], ["minutes", 0], ["–", 0], ["b", 0], ["returns", 0], ["with", 0], ["the", 0], ["cloak", 0], ["to", 0], ["the", 0], ["gate", 0], ["taking", 0], ["2", 0], ["minutes", 0], ["–", 0], ["a", 0], ["and", 0], ["b", 0], ["go", 0], ["from", 0], ["the", 0], ["gate", 0], ["to", 0], ["the", 0], ["dorm", 0], ["together", 0], ["taking", 0], ["2", 0], ["minutes", 0], ["input", 0], ["the", 0], ["input", 0], ["is", 0], ["a", 0], ["single", 0], ["line", 0], ["beginning", 0], ["with", 0], ["an", 0], ["integer", 0], ["2", 0], ["leq", 0], ["n", 0], ["leq", 0], ["15", 0], ["following", 0], ["that", 0], ["are", 0], ["n", 0], ["positive", 0], ["integers", 0], ["that", 0], ["respectively", 0], ["represent", 0], ["the", 0], ["minimum", 0], ["time", 0], ["in", 0], ["which", 0], ["each", 0], ["person", 0], ["is", 0], ["able", 0], ["to", 0], ["cross", 0], ["the", 0], ["campus", 0], ["if", 0], ["alone", 0], ["these", 0], ["times", 0], ["are", 0], ["measured", 0], ["in", 0], ["minutes", 0], ["with", 0], ["each", 0], ["being", 0], ["at", 0], ["most", 0], ["5000", 0], ["it", 0], ["is", 0], ["a", 0], ["very", 0], ["large", 0], ["campus", 0], ["output", 0], ["output", 1], ["the", 1], ["minimum", 1], ["possible", 1], ["time", 1], ["it", 1], ["takes", 0], ["to", 0], ["get", 0], ["the", 0], ["entire", 0], ["group", 0], ["from", 0], ["the", 0], ["gate", 0], ["to", 0], ["the", 0], ["dorm", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["2", 0], ["15", 0], ["5", 0], ["sample", 0], ["output", 0], ["1", 0], ["15", 0], ["sample", 0], ["input", 0], ["2", 0], ["4", 0], ["1", 0], ["2", 0], ["7", 0], ["10", 0], ["sample", 0], ["output", 0], ["2", 0], ["17", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.34972677595628415, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.34972677595628415, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4021164021164021, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4021164021164021, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.34972677595628415, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.34972677595628415, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4021164021164021, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4021164021164021, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nMargriet A. is in pizza heaven! She has bought a one-day access pass to Pizza World. Pizza World is a food festival, where all stands have their own special type of pizza. Margriet would really like to try many different types of pizza, but she thinks that she can only eat two pizzas in total. Therefore, she has come up with a cunning plan: at each stall she visits she decides whether she wants to buy this pizza or not. At the first stall where she decides to make a purchase, she buys and eats exactly one pizza. At the second one, she buys and eats half a pizza, and at the third she eats one quarter of a pizza, etc. …Therefore, at the $k^\\textrm {th}$ stall where she decides to buy some pizza, she eats $\\frac1{2^{k-1}}^\\textrm {th}$ part of a pizza. This way she makes sure that she never gets full!\n\nIn order to ensure that the flow of people in the park is adequate, the pizza stalls are connected by one-way paths, and to make sure that everyone eventually leaves the festival, it is impossible to visit a pizza stall more than once. However, every stall is reachable from the stall at the entrance, which is the stall with number $0$.\n\nOf course, Margriet has her own taste: she likes some pizzas more than others. Eating pizza from a stall gives her a certain amount of satisfaction which is equal to Margriet’s personal stall satisfaction number multiplied by the fraction of a whole pizza she eats there. Her total satisfaction is the sum of satisfactions of every stall she visits. Can you help Margriet plot a route between the pizza stalls that satisfies her the most?\n\n-----Input-----\n - The first line has two integers, $1\\leq n \\leq 5 \\cdot 10^5$ and $0\\leq m \\leq 5 \\cdot 10^5$, the number of pizza stalls and the number of one way connections.\n - The second line has $n$ integers $c_0, \\dots , c_{n-1}$, where each $0\\leq c_ i \\leq 10^9$, the amount of satisfaction Margriet gets from eating one pizza at stall $i$.\n - The next $m$ lines each contain $2$ integers, $0\\leq s<n$ and $0\\leq t<n$, indicating a one way path from stall $s$ to stall $t$. No connection appears twice in the input.\n\n-----Output-----\n - Print the maximal amount of satisfaction Margriet can reach at the pizza festival. Your answer is considered correct if it has absolute or relative error of at most $10^{-6}$.\n\n-----Examples-----\nSample Input 1:\n5 5\n1 4 6 2 100\n0 1\n1 2\n0 3\n2 4\n3 4\nSample Output 1:\n100\n\nSample Input 2:\n3 2\n1 0 1\n0 1\n1 2\nSample Output 2:\n1.5\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7452"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7452", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["margriet", 0], ["a", 0], ["is", 0], ["in", 0], ["pizza", 0], ["heaven", 0], ["she", 0], ["has", 0], ["bought", 0], ["a", 0], ["one", 0], ["day", 0], ["access", 1], ["pass", 1], ["to", 1], ["pizza", 1], ["world", 1], ["pizza", 1], ["world", 1], ["is", 1], ["a", 1], ["food", 1], ["festival", 1], ["where", 1], ["all", 1], ["stands", 1], ["have", 1], ["their", 1], ["own", 1], ["special", 1], ["type", 1], ["of", 1], ["pizza", 1], ["margriet", 1], ["would", 1], ["really", 1], ["like", 1], ["to", 1], ["try", 1], ["many", 1], ["different", 1], ["types", 1], ["of", 1], ["pizza", 1], ["but", 1], ["she", 1], ["thinks", 1], ["that", 1], ["she", 1], ["can", 1], ["only", 1], ["eat", 1], ["two", 1], ["pizzas", 1], ["in", 1], ["total", 1], ["therefore", 1], ["she", 1], ["has", 1], ["come", 1], ["up", 1], ["with", 1], ["a", 1], ["cunning", 1], ["plan", 1], ["at", 1], ["each", 1], ["stall", 1], ["she", 1], ["visits", 1], ["she", 1], ["decides", 1], ["whether", 1], ["she", 1], ["wants", 1], ["to", 1], ["buy", 1], ["this", 1], ["pizza", 1], ["or", 1], ["not", 1], ["at", 0], ["the", 0], ["first", 0], ["stall", 0], ["where", 0], ["she", 0], ["decides", 0], ["to", 0], ["make", 0], ["a", 0], ["purchase", 0], ["she", 0], ["buys", 0], ["and", 0], ["eats", 0], ["exactly", 0], ["one", 0], ["pizza", 0], ["at", 0], ["the", 0], ["second", 0], ["one", 0], ["she", 0], ["buys", 0], ["and", 0], ["eats", 0], ["half", 0], ["a", 0], ["pizza", 0], ["and", 0], ["at", 0], ["the", 0], ["third", 0], ["she", 0], ["eats", 0], ["one", 0], ["quarter", 0], ["of", 0], ["a", 0], ["pizza", 0], ["etc", 0], ["…therefore", 0], ["at", 0], ["the", 0], ["k", 0], ["textrm", 0], ["th", 0], ["stall", 0], ["where", 0], ["she", 0], ["decides", 0], ["to", 0], ["buy", 0], ["some", 0], ["pizza", 0], ["she", 0], ["eats", 0], ["frac1", 0], ["2", 0], ["k", 0], ["1", 0], ["textrm", 0], ["th", 0], ["part", 0], ["of", 0], ["a", 0], ["pizza", 0], ["this", 0], ["way", 0], ["she", 0], ["makes", 0], ["sure", 0], ["that", 0], ["she", 0], ["never", 0], ["gets", 0], ["full", 1], ["in", 1], ["order", 1], ["to", 1], ["ensure", 1], ["that", 1], ["the", 1], ["flow", 1], ["of", 1], ["people", 1], ["in", 1], ["the", 1], ["park", 1], ["is", 1], ["adequate", 1], ["the", 1], ["pizza", 1], ["stalls", 1], ["are", 0], ["connected", 0], ["by", 0], ["one", 0], ["way", 0], ["paths", 0], ["and", 0], ["to", 0], ["make", 0], ["sure", 0], ["that", 0], ["everyone", 0], ["eventually", 0], ["leaves", 0], ["the", 0], ["festival", 0], ["it", 0], ["is", 0], ["impossible", 0], ["to", 0], ["visit", 0], ["a", 0], ["pizza", 0], ["stall", 0], ["more", 0], ["than", 0], ["once", 0], ["however", 0], ["every", 0], ["stall", 0], ["is", 0], ["reachable", 0], ["from", 1], ["the", 1], ["stall", 1], ["at", 1], ["the", 1], ["entrance", 1], ["which", 1], ["is", 1], ["the", 1], ["stall", 0], ["with", 0], ["number", 0], ["0", 0], ["of", 0], ["course", 0], ["margriet", 0], ["has", 0], ["her", 0], ["own", 0], ["taste", 0], ["she", 0], ["likes", 0], ["some", 0], ["pizzas", 0], ["more", 0], ["than", 0], ["others", 0], ["eating", 0], ["pizza", 0], ["from", 0], ["a", 0], ["stall", 0], ["gives", 0], ["her", 1], ["a", 1], ["certain", 1], ["amount", 1], ["of", 1], ["satisfaction", 1], ["which", 1], ["is", 1], ["equal", 1], ["to", 1], ["margriet’s", 1], ["personal", 1], ["stall", 1], ["satisfaction", 1], ["number", 1], ["multiplied", 1], ["by", 1], ["the", 1], ["fraction", 1], ["of", 1], ["a", 1], ["whole", 1], ["pizza", 1], ["she", 1], ["eats", 1], ["there", 1], ["her", 1], ["total", 1], ["satisfaction", 1], ["is", 1], ["the", 1], ["sum", 1], ["of", 1], ["satisfactions", 1], ["of", 1], ["every", 1], ["stall", 1], ["she", 1], ["visits", 1], ["can", 1], ["you", 1], ["help", 1], ["margriet", 1], ["plot", 0], ["a", 0], ["route", 0], ["between", 0], ["the", 0], ["pizza", 0], ["stalls", 0], ["that", 0], ["satisfies", 0], ["her", 0], ["the", 0], ["most", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["has", 0], ["two", 0], ["integers", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["5", 0], ["cdot", 0], ["10", 0], ["5", 0], ["and", 0], ["0", 0], ["leq", 0], ["m", 0], ["leq", 0], ["5", 0], ["cdot", 0], ["10", 0], ["5", 0], ["the", 1], ["number", 1], ["of", 1], ["pizza", 1], ["stalls", 1], ["and", 1], ["the", 0], ["number", 0], ["of", 0], ["one", 0], ["way", 0], ["connections", 0], ["the", 0], ["second", 0], ["line", 0], ["has", 0], ["n", 0], ["integers", 0], ["c", 0], ["0", 0], ["dots", 0], ["c", 0], ["n", 0], ["1", 0], ["where", 0], ["each", 0], ["0", 0], ["leq", 0], ["c", 0], ["i", 0], ["leq", 0], ["10", 0], ["9", 0], ["the", 0], ["amount", 0], ["of", 0], ["satisfaction", 0], ["margriet", 1], ["gets", 1], ["from", 1], ["eating", 1], ["one", 1], ["pizza", 1], ["at", 0], ["stall", 0], ["i", 0], ["the", 0], ["next", 0], ["m", 0], ["lines", 0], ["each", 0], ["contain", 0], ["2", 0], ["integers", 0], ["0", 0], ["leq", 0], ["s", 0], ["n", 0], ["and", 0], ["0", 0], ["leq", 0], ["t", 1], ["n", 1], ["indicating", 1], ["a", 0], ["one", 0], ["way", 0], ["path", 0], ["from", 0], ["stall", 0], ["s", 0], ["to", 0], ["stall", 0], ["t", 0], ["no", 0], ["connection", 0], ["appears", 0], ["twice", 0], ["in", 0], ["the", 0], ["input", 0], ["output", 0], ["print", 0], ["the", 0], ["maximal", 0], ["amount", 0], ["of", 0], ["satisfaction", 0], ["margriet", 0], ["can", 0], ["reach", 0], ["at", 0], ["the", 0], ["pizza", 0], ["festival", 0], ["your", 0], ["answer", 0], ["is", 0], ["considered", 0], ["correct", 0], ["if", 0], ["it", 0], ["has", 0], ["absolute", 0], ["or", 0], ["relative", 0], ["error", 0], ["of", 0], ["at", 0], ["most", 0], ["10", 0], ["6", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["5", 0], ["5", 0], ["1", 0], ["4", 0], ["6", 0], ["2", 0], ["100", 0], ["0", 0], ["1", 0], ["1", 0], ["2", 0], ["0", 0], ["3", 0], ["2", 0], ["4", 0], ["3", 0], ["4", 0], ["sample", 0], ["output", 0], ["1", 0], ["100", 0], ["sample", 0], ["input", 0], ["2", 0], ["3", 0], ["2", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["2", 0], ["sample", 0], ["output", 0], ["2", 0], ["1", 0], ["5", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.326271186440678, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.326271186440678, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.49173553719008267, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.49173553719008267, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.326271186440678, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.326271186440678, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.49173553719008267, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.49173553719008267, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nMister B once received a gift: it was a book about aliens, which he started read immediately. This book had c pages.\n\nAt first day Mister B read v_0 pages, but after that he started to speed up. Every day, starting from the second, he read a pages more than on the previous day (at first day he read v_0 pages, at second — v_0 + a pages, at third — v_0 + 2a pages, and so on). But Mister B is just a human, so he physically wasn't able to read more than v_1 pages per day.\n\nAlso, to refresh his memory, every day, starting from the second, Mister B had to reread last l pages he read on the previous day. Mister B finished the book when he read the last page for the first time.\n\nHelp Mister B to calculate how many days he needed to finish the book.\n\n\n-----Input-----\n\nFirst and only line contains five space-separated integers: c, v_0, v_1, a and l (1 ≤ c ≤ 1000, 0 ≤ l < v_0 ≤ v_1 ≤ 1000, 0 ≤ a ≤ 1000) — the length of the book in pages, the initial reading speed, the maximum reading speed, the acceleration in reading speed and the number of pages for rereading.\n\n\n-----Output-----\n\nPrint one integer — the number of days Mister B needed to finish the book.\n\n\n-----Examples-----\nInput\n5 5 10 5 4\n\nOutput\n1\n\nInput\n12 4 12 4 1\n\nOutput\n3\n\nInput\n15 1 100 0 0\n\nOutput\n15\n\n\n\n-----Note-----\n\nIn the first sample test the book contains 5 pages, so Mister B read it right at the first day.\n\nIn the second sample test at first day Mister B read pages number 1 - 4, at second day — 4 - 11, at third day — 11 - 12 and finished the book.\n\nIn third sample test every day Mister B read 1 page of the book, so he finished in 15 days.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["read = lambda: map(int, input().split())\nc, v0, v1, a, l = read()\ncur = 0\ncnt = 0\nwhile cur < c:\n\tcur = max(0, cur - l)\n\tcur += min(v1, v0 + a * cnt)\n\tcnt += 1\nprint(cnt)\n", "c,v0,v1,a,l = map(int,input().split())\ncnt = 0\nans = 0\nv = v0\nwhile(cnt < c):\n\tcnt += v\n\tif(ans != 0):\n\t\tcnt -= l\n\tif(v + a < v1):\n\t\tv += a\n\telse:\n\t\tv = v1\n\tans += 1\nprint(ans)\n", "import math\nc, v0,v1,a,l = list(map(int, input().split()))\nn = 0\nans = 0\nwhile n < c:\n\tans+=1\n\tif n>0:\n\t\tn-=l\n\tn+=v0\n\tif v0 < v1:\n\t\tv0 = min(v0+a, v1)\nprint(ans)\n\n", "from sys import stdin, stdout\n\nc, v0, v1, a, l = map(int, stdin.readline().split())\ncnt = 0 \nans = 0\n\nwhile cnt < c:\n\tcnt += v0\n\tv0 = min(v0 + a, v1)\n\tans += 1\n\t\n\tif cnt >= c:\n\t\tbreak\n\t\n\tcnt -= l\n\n\nstdout.write(str(ans))\n", "3\n\ndef read_ints():\n\treturn [int(i) for i in input().split()]\n\nc, v0, v1, a, l = read_ints()\ns = 0\nd = 1\n\nwhile s < c:\n\ts = min(s + v0, c)\n\tif s == c:\n\t\tbreak\n\tv0 = min(v0 + a, v1)\n\ts -= l\n\td += 1\n\nprint(d)\n", "c,v0,v1,a,l=map(int,input().split())\nn=0\nwhile c > 0:\n\tc-=v0\n\tv0=min(v0+a,v1)\n\tif n > 0:\n\t\tc+=l\n\tn+=1\nprint(n)\n", "c, v0, v1, a, l = map(int, input().split())\nans, cur = 1, v0\nwhile cur < c:\n\tv0 = min(v1, v0 + a)\n\tcur += v0 - l\n\tans += 1\n\nprint(ans)\n", "c, v0, v1, a, l = map(int, input().split())\n\nans = 0\nwhile c > 0:\n\tif ans: c += l\n\tc -= min(v0, v1)\n\tv0 += a\n\tans += 1\nprint(ans)\n", "line = input()\nnrs = list(map(int, line.split(' ')))\nc = nrs[0]\nv0 = nrs[1]\nv1 = nrs[2]\na = nrs[3]\nl = nrs[4]\npages_read = v0\ndays = 1\npages = v0\nwhile pages_read < nrs[0]:\n\tpages += a\n\tif pages > v1:\n\t\tpages = v1\n\tpages_read -= l\n\tpages_read += pages\n\tdays += 1\n\nprint(days)\n", "def list_input():\n\treturn list(map(int,input().split()))\ndef map_input():\n\treturn map(int,input().split())\ndef map_string():\n\treturn input().split()\n\t\nc,v0,v1,a,l = map_input()\ncur = 0\ncnt = 0\nwhile cur < c:\n\tif cnt != 0:\n\t\tcur += min(v1,v0+cnt*a)-l\n\telse:\n\t\tcur += min(v1,v0+cnt*a)\n\tcnt += 1\nprint(cnt)    \n", "c, v1, v2, a, l = map(int, input().split())\nread = 0\nres = 0\nvc = v1\nwhile read < c:\n\tback = min(read, l)\n\t#read -= back\n\tread += vc - back\n\tvc = min(vc + a, v2)\n\tres += 1\nprint(res)\n", "def solve(inp):\n\tc, v0, v1, a, l = list(map(int, inp.split(\" \", 4)))\n\tpages_read = 0\n\tdays_passed = 0\n\twhile pages_read < c:\n\t\tpages_read += v0 - min(l, pages_read)\n\t\tdays_passed += 1\n\t\tv0 = min(v0 + a, v1)\n\treturn days_passed\n\n\ndef __starting_point():\n\tprint(solve(input()))\n\n__starting_point()\n", "\nc, v0, v1, a, l = list(map(int, input().split()))\n\nv = v0\nt = 1\nlast = v0\n\nif last >= c:\n\tprint(1)\n\treturn\n\nwhile last < c:\n\tv = min(v1, v0 + t * a) - l\n\tlast += v\n\tt += 1\n\nprint(t)\n", "c, v0, v1, a, l = map(int, input().split())\nx = 0\ni = 0\nwhile x < c:\n\tx += min(v0 + a*i, v1) - (l * (i > 0))\n\ti+=1\nprint(i)\n", "c, v0, v1, a, l = map(int, input().split())\ncur = v0\nrem = c\ntmp = 0\nres = 0\nwhile rem > 0 :\n\tres += 1\n\trem = rem - (cur - tmp)\n\tcur = min(cur + a, v1)\n\ttmp = l\nprint(res)\n", "'''input\n5 5 10 5 4\n'''\nc, v0, v1, a, l = list(map(int, input().split()))\np = 0\nd = 0\nwhile True:\n\tp += min(v1, v0 + a*d)\n\td += 1\n\tif p >= c:\n\t\tprint(d)\n\t\tbreak\n\tp -= l\n\n", "#!/usr/bin/env python3\nimport sys\n\ndef main():\n\tc, v0, v1, a, l = list(map(int, sys.stdin.readline().split()))\n\tday = 0\n\tv = v0\n\tread = 0\n\twhile read < c:\n\t\tday += 1\n\t\tread = max(read - l, 0) + v\n\t\tv = min(v + a, v1)\n\tprint(day)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "c, v0, v1, a, l = [int(i) for i in input().split()]\nif v0 >= c:\n\tprint(1)\n\treturn\nelse:\n\td = 1\n\tcnt = c - v0\n\tca = 0\n\twhile cnt > 0:\n\t\tca += a\n\t\tcr = v0 + ca\n\t\tif cr > v1:\n\t\t\tcr = v1\n\t\tcnt -= (cr - l)\n\t\td += 1\n\tprint(d\n\t\t  )\n\t\t\n", "c, v, v1, a, l = map(int, input().split())\n\nfor i in range(1, 1000000):\n\tc -= v\n\t\n\tif i > 1:\n\t\tc += l\n\t\t\n\tif c <= 0:\n\t\tprint(i)\n\t\tbreak\n\t\n\tv += a\n\tv = min(v, v1)\n", "c, v0, v1, a, l = map(int, input().split(\" \"))\n\ndays = 0\n\nwhile c > 0:\n\tif days > 0:\n\t\tc += l\n\tc -= v0\n\tv0 += a\n\tif v1 < v0:\n\t\tv0 = v1\n\tdays += 1\n\nprint(days)\n", "c, v0, v1, a, l = list(map(int, input().split()))\n\nv = v0;\n\nread = v;\nday = 1;\nv += a\nv = min(v, v1)\n\n\nif(read >= c):\n\tprint(day)\n\treturn;\n\n\nwhile(True):\n\tday +=1;\n\tread += v - l\n\n\tv+=a\n\tv = min(v, v1)\n\tif(read >= c):\n\t\tprint(day)\n\t\treturn;\n\n", "c, v0, v1, a, l = list(map(int, input().split()))\n\nans = 0\nv = v0\np = 0\nwhile p < c:\n\tp = max(p - l, 0)\n\tp += v\n\tv = min(v + a, v1)\n\tans += 1\n\nprint(ans)\n", "c, v0, v1, a, l = [int(i) for i in input().split()]\n\ni, d = 1, 0\n\nwhile 1:\n\tif d > 0: i -= l\n\tv = min(v0 + d * a, v1)\n\td += 1\n\ti += v\n\tif i > c: break\n\nprint(d)\n", "I = lambda : list(map(int, input().split()))\nc, v0, v1, a, l = I()\nrd = 0\nday = 0\nwhile (rd < c):\n\tcanread = min(v0 + day*a, v1)\n\tstart = max(rd-l, 0)\n\trd = start + canread\n\tday += 1\n\nprint(day)\n", "import sys\n\ninput = sys.stdin.readline\n\nc, v0, v1, a, l = map(int,input().split())\n\nday = 0\nread = 0\n\nwhile True:\n\tif (read >= c):\n\t\tbreak\n\tif (v0 + a * day < v1):\n\t\tread += v0 + a * day\n\telse:\n\t\tread += v1\n\tif (day > 0):\n\t\tread -= l\n\tday += 1\n\nprint(day)\n"], "id": "id9471"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9471", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["mister", 1], ["b", 1], ["once", 1], ["received", 1], ["a", 1], ["gift", 1], ["it", 1], ["was", 1], ["a", 1], ["book", 1], ["about", 1], ["aliens", 1], ["which", 1], ["he", 1], ["started", 1], ["read", 1], ["immediately", 0], ["this", 0], ["book", 0], ["had", 0], ["c", 0], ["pages", 0], ["at", 0], ["first", 0], ["day", 0], ["mister", 0], ["b", 0], ["read", 0], ["v", 0], ["0", 0], ["pages", 1], ["but", 1], ["after", 1], ["that", 1], ["he", 1], ["started", 1], ["to", 1], ["speed", 1], ["up", 1], ["every", 1], ["day", 1], ["starting", 1], ["from", 1], ["the", 1], ["second", 1], ["he", 1], ["read", 1], ["a", 1], ["pages", 0], ["more", 0], ["than", 0], ["on", 0], ["the", 0], ["previous", 0], ["day", 0], ["at", 0], ["first", 0], ["day", 0], ["he", 0], ["read", 0], ["v", 0], ["0", 0], ["pages", 0], ["at", 0], ["second", 0], ["—", 0], ["v", 0], ["0", 0], ["a", 0], ["pages", 0], ["at", 0], ["third", 0], ["—", 0], ["v", 0], ["0", 0], ["2a", 1], ["pages", 1], ["and", 1], ["so", 1], ["on", 1], ["but", 1], ["mister", 1], ["b", 1], ["is", 1], ["just", 1], ["a", 0], ["human", 0], ["so", 0], ["he", 0], ["physically", 0], ["wasn", 0], ["t", 0], ["able", 0], ["to", 0], ["read", 0], ["more", 0], ["than", 0], ["v", 0], ["1", 0], ["pages", 1], ["per", 1], ["day", 1], ["also", 1], ["to", 1], ["refresh", 1], ["his", 1], ["memory", 1], ["every", 1], ["day", 1], ["starting", 1], ["from", 1], ["the", 1], ["second", 1], ["mister", 1], ["b", 1], ["had", 1], ["to", 1], ["reread", 1], ["last", 1], ["l", 1], ["pages", 1], ["he", 1], ["read", 1], ["on", 1], ["the", 1], ["previous", 1], ["day", 1], ["mister", 1], ["b", 1], ["finished", 1], ["the", 1], ["book", 1], ["when", 1], ["he", 1], ["read", 1], ["the", 1], ["last", 1], ["page", 1], ["for", 1], ["the", 1], ["first", 1], ["time", 1], ["help", 1], ["mister", 1], ["b", 0], ["to", 0], ["calculate", 0], ["how", 0], ["many", 0], ["days", 0], ["he", 0], ["needed", 0], ["to", 0], ["finish", 0], ["the", 0], ["book", 0], ["input", 0], ["first", 0], ["and", 0], ["only", 0], ["line", 0], ["contains", 0], ["five", 0], ["space", 0], ["separated", 0], ["integers", 0], ["c", 0], ["v", 0], ["0", 0], ["v", 0], ["1", 0], ["a", 0], ["and", 0], ["l", 0], ["1", 0], ["≤", 0], ["c", 0], ["≤", 0], ["1000", 0], ["0", 0], ["≤", 0], ["l", 0], ["v", 0], ["0", 0], ["≤", 0], ["v", 0], ["1", 0], ["≤", 0], ["1000", 0], ["0", 0], ["≤", 0], ["a", 0], ["≤", 0], ["1000", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["book", 0], ["in", 0], ["pages", 0], ["the", 0], ["initial", 0], ["reading", 0], ["speed", 0], ["the", 0], ["maximum", 0], ["reading", 0], ["speed", 0], ["the", 0], ["acceleration", 0], ["in", 0], ["reading", 0], ["speed", 0], ["and", 0], ["the", 0], ["number", 0], ["of", 0], ["pages", 0], ["for", 0], ["rereading", 0], ["output", 0], ["print", 1], ["one", 1], ["integer", 1], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["days", 0], ["mister", 0], ["b", 0], ["needed", 0], ["to", 0], ["finish", 0], ["the", 0], ["book", 0], ["examples", 0], ["input", 0], ["5", 0], ["5", 0], ["10", 0], ["5", 0], ["4", 0], ["output", 0], ["1", 0], ["input", 0], ["12", 0], ["4", 0], ["12", 0], ["4", 0], ["1", 0], ["output", 0], ["3", 0], ["input", 0], ["15", 0], ["1", 0], ["100", 0], ["0", 0], ["0", 0], ["output", 0], ["15", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["sample", 0], ["test", 0], ["the", 0], ["book", 0], ["contains", 0], ["5", 0], ["pages", 0], ["so", 0], ["mister", 0], ["b", 0], ["read", 0], ["it", 0], ["right", 0], ["at", 0], ["the", 0], ["first", 0], ["day", 0], ["in", 0], ["the", 0], ["second", 0], ["sample", 0], ["test", 0], ["at", 0], ["first", 0], ["day", 0], ["mister", 0], ["b", 0], ["read", 0], ["pages", 0], ["number", 0], ["1", 0], ["4", 0], ["at", 0], ["second", 0], ["day", 0], ["—", 0], ["4", 0], ["11", 0], ["at", 0], ["third", 0], ["day", 0], ["—", 0], ["11", 0], ["12", 0], ["and", 0], ["finished", 0], ["the", 0], ["book", 0], ["in", 0], ["third", 0], ["sample", 0], ["test", 0], ["every", 0], ["day", 0], ["mister", 0], ["b", 0], ["read", 0], ["1", 0], ["page", 0], ["of", 0], ["the", 0], ["book", 0], ["so", 0], ["he", 0], ["finished", 0], ["in", 0], ["15", 0], ["days", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2754491017964072, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2754491017964072, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4393063583815029, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4393063583815029, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2754491017964072, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2754491017964072, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4393063583815029, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4393063583815029, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["read", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["read", 0], ["cur", 0], ["0", 0], ["cnt", 0], ["0", 0], ["while", 0], ["cur", 0], ["c", 0], ["cur", 0], ["max", 0], ["0", 0], ["cur", 0], ["l", 0], ["cur", 0], ["min", 0], ["v1", 0], ["v0", 0], ["a", 0], ["cnt", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["ans", 0], ["0", 0], ["v", 0], ["v0", 0], ["while", 0], ["cnt", 0], ["c", 0], ["cnt", 0], ["v", 0], ["if", 0], ["ans", 0], ["0", 0], ["cnt", 0], ["l", 0], ["if", 0], ["v", 0], ["a", 0], ["v1", 0], ["v", 0], ["a", 0], ["else", 0], ["v", 0], ["v1", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["math", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["0", 0], ["ans", 0], ["0", 0], ["while", 0], ["n", 0], ["c", 0], ["ans", 0], ["1", 0], ["if", 0], ["n", 0], ["0", 0], ["n", 0], ["l", 0], ["n", 0], ["v0", 0], ["if", 0], ["v0", 0], ["v1", 0], ["v0", 0], ["min", 0], ["v0", 0], ["a", 0], ["v1", 0], ["print", 0], ["ans", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["cnt", 0], ["0", 0], ["ans", 0], ["0", 0], ["while", 0], ["cnt", 0], ["c", 0], ["cnt", 0], ["v0", 0], ["v0", 0], ["min", 0], ["v0", 0], ["a", 0], ["v1", 0], ["ans", 0], ["1", 0], ["if", 0], ["cnt", 0], ["c", 0], ["break", 0], ["cnt", 0], ["l", 0], ["stdout", 0], ["write", 0], ["str", 0], ["ans", 0], ["3", 0], ["def", 0], ["read", 0], ["ints", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["read", 0], ["ints", 0], ["s", 0], ["0", 0], ["d", 0], ["1", 0], ["while", 0], ["s", 0], ["c", 0], ["s", 0], ["min", 0], ["s", 0], ["v0", 0], ["c", 0], ["if", 0], ["s", 0], ["c", 0], ["break", 0], ["v0", 0], ["min", 0], ["v0", 0], ["a", 0], ["v1", 0], ["s", 0], ["l", 0], ["d", 0], ["1", 0], ["print", 0], ["d", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["0", 0], ["while", 0], ["c", 0], ["0", 0], ["c", 0], ["v0", 0], ["v0", 0], ["min", 0], ["v0", 0], ["a", 0], ["v1", 0], ["if", 0], ["n", 0], ["0", 0], ["c", 0], ["l", 0], ["n", 0], ["1", 0], ["print", 0], ["n", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["cur", 0], ["1", 0], ["v0", 0], ["while", 0], ["cur", 0], ["c", 0], ["v0", 0], ["min", 0], ["v1", 0], ["v0", 0], ["a", 0], ["cur", 0], ["v0", 0], ["l", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["while", 0], ["c", 0], ["0", 0], ["if", 0], ["ans", 0], ["c", 0], ["l", 0], ["c", 0], ["min", 0], ["v0", 0], ["v1", 0], ["v0", 0], ["a", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["line", 0], ["input", 0], ["nrs", 0], ["list", 0], ["map", 0], ["int", 0], ["line", 0], ["split", 0], ["c", 0], ["nrs", 0], ["0", 0], ["v0", 0], ["nrs", 0], ["1", 0], ["v1", 0], ["nrs", 0], ["2", 0], ["a", 0], ["nrs", 0], ["3", 0], ["l", 0], ["nrs", 0], ["4", 0], ["pages", 0], ["read", 0], ["v0", 0], ["days", 0], ["1", 0], ["pages", 0], ["v0", 0], ["while", 0], ["pages", 0], ["read", 0], ["nrs", 0], ["0", 0], ["pages", 0], ["a", 0], ["if", 0], ["pages", 0], ["v1", 0], ["pages", 0], ["v1", 0], ["pages", 0], ["read", 0], ["l", 0], ["pages", 0], ["read", 0], ["pages", 0], ["days", 0], ["1", 0], ["print", 0], ["days", 0], ["def", 0], ["list", 0], ["input", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["map", 0], ["input", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["map", 0], ["string", 0], ["return", 0], ["input", 0], ["split", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["map", 0], ["input", 0], ["cur", 0], ["0", 0], ["cnt", 0], ["0", 0], ["while", 0], ["cur", 0], ["c", 0], ["if", 0], ["cnt", 0], ["0", 0], ["cur", 0], ["min", 0], ["v1", 0], ["v0", 0], ["cnt", 0], ["a", 0], ["l", 0], ["else", 0], ["cur", 0], ["min", 0], ["v1", 0], ["v0", 0], ["cnt", 0], ["a", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["c", 0], ["v1", 0], ["v2", 0], ["a", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["read", 0], ["0", 0], ["res", 0], ["0", 0], ["vc", 0], ["v1", 0], ["while", 0], ["read", 0], ["c", 0], ["back", 0], ["min", 0], ["read", 0], ["l", 0], ["read", 0], ["back", 0], ["read", 0], ["vc", 0], ["back", 0], ["vc", 0], ["min", 0], ["vc", 0], ["a", 0], ["v2", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["def", 0], ["solve", 0], ["inp", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["inp", 0], ["split", 0], ["4", 0], ["pages", 0], ["read", 0], ["0", 0], ["days", 0], ["passed", 0], ["0", 0], ["while", 0], ["pages", 0], ["read", 0], ["c", 0], ["pages", 0], ["read", 0], ["v0", 0], ["min", 0], ["l", 0], ["pages", 0], ["read", 0], ["days", 0], ["passed", 0], ["1", 0], ["v0", 0], ["min", 0], ["v0", 0], ["a", 0], ["v1", 0], ["return", 0], ["days", 0], ["passed", 0], ["def", 0], ["starting", 0], ["point", 0], ["print", 0], ["solve", 0], ["input", 0], ["starting", 0], ["point", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["v", 0], ["v0", 0], ["t", 0], ["1", 0], ["last", 0], ["v0", 0], ["if", 0], ["last", 0], ["c", 0], ["print", 0], ["1", 0], ["return", 0], ["while", 0], ["last", 0], ["c", 0], ["v", 0], ["min", 0], ["v1", 0], ["v0", 0], ["t", 0], ["a", 0], ["l", 0], ["last", 0], ["v", 0], ["t", 0], ["1", 0], ["print", 0], ["t", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["x", 0], ["c", 0], ["x", 0], ["min", 0], ["v0", 0], ["a", 0], ["i", 0], ["v1", 0], ["l", 0], ["i", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cur", 0], ["v0", 0], ["rem", 0], ["c", 0], ["tmp", 0], ["0", 0], ["res", 0], ["0", 0], ["while", 0], ["rem", 0], ["0", 0], ["res", 0], ["1", 0], ["rem", 0], ["rem", 0], ["cur", 0], ["tmp", 0], ["cur", 0], ["min", 0], ["cur", 0], ["a", 0], ["v1", 0], ["tmp", 0], ["l", 0], ["print", 0], ["res", 0], ["input", 0], ["5", 0], ["5", 0], ["10", 0], ["5", 0], ["4", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["0", 0], ["d", 0], ["0", 0], ["while", 0], ["true", 0], ["p", 0], ["min", 0], ["v1", 0], ["v0", 0], ["a", 0], ["d", 0], ["d", 0], ["1", 0], ["if", 0], ["p", 0], ["c", 0], ["print", 0], ["d", 0], ["break", 0], ["p", 0], ["l", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["def", 0], ["main", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["day", 0], ["0", 0], ["v", 0], ["v0", 0], ["read", 0], ["0", 0], ["while", 0], ["read", 0], ["c", 0], ["day", 0], ["1", 0], ["read", 0], ["max", 0], ["read", 0], ["l", 0], ["0", 0], ["v", 0], ["v", 0], ["min", 0], ["v", 0], ["a", 0], ["v1", 0], ["print", 0], ["day", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["v0", 0], ["c", 0], ["print", 0], ["1", 0], ["return", 0], ["else", 0], ["d", 0], ["1", 0], ["cnt", 0], ["c", 0], ["v0", 0], ["ca", 0], ["0", 0], ["while", 0], ["cnt", 0], ["0", 0], ["ca", 0], ["a", 0], ["cr", 0], ["v0", 0], ["ca", 0], ["if", 0], ["cr", 0], ["v1", 0], ["cr", 0], ["v1", 0], ["cnt", 0], ["cr", 0], ["l", 0], ["d", 0], ["1", 0], ["print", 0], ["d", 0], ["c", 0], ["v", 0], ["v1", 0], ["a", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["1000000", 0], ["c", 0], ["v", 0], ["if", 0], ["i", 0], ["1", 0], ["c", 0], ["l", 0], ["if", 0], ["c", 0], ["0", 0], ["print", 0], ["i", 0], ["break", 0], ["v", 0], ["a", 0], ["v", 0], ["min", 0], ["v", 0], ["v1", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["days", 0], ["0", 0], ["while", 0], ["c", 0], ["0", 0], ["if", 0], ["days", 0], ["0", 0], ["c", 0], ["l", 0], ["c", 0], ["v0", 0], ["v0", 0], ["a", 0], ["if", 0], ["v1", 0], ["v0", 0], ["v0", 0], ["v1", 0], ["days", 0], ["1", 0], ["print", 0], ["days", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["v", 0], ["v0", 0], ["read", 0], ["v", 0], ["day", 0], ["1", 0], ["v", 0], ["a", 0], ["v", 0], ["min", 0], ["v", 0], ["v1", 0], ["if", 0], ["read", 0], ["c", 0], ["print", 0], ["day", 0], ["return", 0], ["while", 0], ["true", 0], ["day", 0], ["1", 0], ["read", 0], ["v", 0], ["l", 0], ["v", 0], ["a", 0], ["v", 0], ["min", 0], ["v", 0], ["v1", 0], ["if", 0], ["read", 0], ["c", 0], ["print", 0], ["day", 0], ["return", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["v", 0], ["v0", 0], ["p", 0], ["0", 0], ["while", 0], ["p", 0], ["c", 0], ["p", 0], ["max", 0], ["p", 0], ["l", 0], ["0", 0], ["p", 0], ["v", 0], ["v", 0], ["min", 0], ["v", 0], ["a", 0], ["v1", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["i", 0], ["d", 0], ["1", 0], ["0", 0], ["while", 0], ["1", 0], ["if", 0], ["d", 0], ["0", 0], ["i", 0], ["l", 0], ["v", 0], ["min", 0], ["v0", 0], ["d", 0], ["a", 0], ["v1", 0], ["d", 0], ["1", 0], ["i", 0], ["v", 0], ["if", 0], ["i", 0], ["c", 0], ["break", 0], ["print", 0], ["d", 0], ["i", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["i", 0], ["rd", 0], ["0", 0], ["day", 0], ["0", 0], ["while", 0], ["rd", 0], ["c", 0], ["canread", 0], ["min", 0], ["v0", 0], ["day", 0], ["a", 0], ["v1", 0], ["start", 0], ["max", 0], ["rd", 0], ["l", 0], ["0", 0], ["rd", 0], ["start", 0], ["canread", 0], ["day", 0], ["1", 0], ["print", 0], ["day", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["c", 0], ["v0", 0], ["v1", 0], ["a", 0], ["l", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["day", 0], ["0", 0], ["read", 0], ["0", 0], ["while", 0], ["true", 0], ["if", 0], ["read", 0], ["c", 0], ["break", 0], ["if", 0], ["v0", 0], ["a", 0], ["day", 0], ["v1", 0], ["read", 0], ["v0", 0], ["a", 0], ["day", 0], ["else", 0], ["read", 0], ["v1", 0], ["if", 0], ["day", 0], ["0", 0], ["read", 0], ["l", 0], ["day", 0], ["1", 0], ["print", 0], ["day", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nLiam (angryneeson52) is playing his favorite tower defense game! This game involves destroying minions of his opponent while defending his own villages.\n\nLiam’s favorite attack is an Area of Effect attack. The Area of Effect attack is a perfect circle. Liam simply picks a center and a radius for the attack and every minion in or on that circle gets destroyed! Minions are small enough to be considered points.\n\nThe game isn’t as simple as just destroying all minions. Liam must also avoid hitting his villages with his attacks. The attack may touch the walls of a village but must not enter the village. Villages are also perfect circles.\n\nHis attack also has a limit on its maximum radius. The attack can be reduced in radius but cannot go above the maximum.\n\nDetermine the maximum number of minions Liam can destroy in a single attack without damaging any of his own villages.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each input begins with a line with 3 space-separated integers, $n\\ m\\ r$, where:\n - $n$ ($1\\le n \\le 10$) is the number of Liam’s villages\n - $m$ ($1 \\le m \\le 2000$) is the number of opposing minions\n - $r$ ($1 \\le r \\le 20000$) is the maximum radius of Liam’s Area of Effect attack\n\nThe next $n$ lines will each contain 3 space-separated integers $vx\\ vy\\ vr$ which represent the location ($-20000\\le vx, vy \\le 20000$) and radius ($1\\le vr \\le 20000$) of one of Liam’s villages. No two villages will intersect or overlap.\n\nThe next $m$ lines will each contain 2 space-separated integers $mx\\ my$ which represent the location ($-20000 \\le mx, my \\le 20000$) of one of the enemy minions. No two minions will occupy the same point, and no enemy minion will be inside any of Liam’s villages.\n\n-----Output-----\nOutput a single integer representing the maximum number of enemy minions that Liam can destroy with a single attack.\n\n-----Examples-----\nSample Input 1:\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\nSample Output 1:\n1\n\nSample Input 2:\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\nSample Output 2:\n3\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8617"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8617", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["liam", 1], ["angryneeson52", 1], ["is", 1], ["playing", 1], ["his", 1], ["favorite", 1], ["tower", 1], ["defense", 1], ["game", 1], ["this", 1], ["game", 1], ["involves", 1], ["destroying", 1], ["minions", 1], ["of", 1], ["his", 1], ["opponent", 1], ["while", 1], ["defending", 1], ["his", 1], ["own", 1], ["villages", 1], ["liam’s", 1], ["favorite", 1], ["attack", 1], ["is", 1], ["an", 1], ["area", 1], ["of", 1], ["effect", 1], ["attack", 1], ["the", 1], ["area", 1], ["of", 1], ["effect", 1], ["attack", 1], ["is", 1], ["a", 1], ["perfect", 1], ["circle", 1], ["liam", 1], ["simply", 1], ["picks", 1], ["a", 1], ["center", 1], ["and", 1], ["a", 1], ["radius", 1], ["for", 1], ["the", 1], ["attack", 1], ["and", 1], ["every", 1], ["minion", 1], ["in", 1], ["or", 1], ["on", 1], ["that", 1], ["circle", 1], ["gets", 1], ["destroyed", 1], ["minions", 1], ["are", 1], ["small", 1], ["enough", 1], ["to", 1], ["be", 1], ["considered", 1], ["points", 1], ["the", 1], ["game", 1], ["isn’t", 1], ["as", 1], ["simple", 1], ["as", 1], ["just", 1], ["destroying", 1], ["all", 1], ["minions", 1], ["liam", 1], ["must", 1], ["also", 1], ["avoid", 1], ["hitting", 1], ["his", 1], ["villages", 1], ["with", 1], ["his", 1], ["attacks", 1], ["the", 1], ["attack", 1], ["may", 1], ["touch", 1], ["the", 1], ["walls", 1], ["of", 1], ["a", 1], ["village", 1], ["but", 1], ["must", 1], ["not", 1], ["enter", 1], ["the", 1], ["village", 1], ["villages", 1], ["are", 1], ["also", 1], ["perfect", 1], ["circles", 1], ["his", 1], ["attack", 1], ["also", 1], ["has", 1], ["a", 1], ["limit", 1], ["on", 1], ["its", 1], ["maximum", 1], ["radius", 1], ["the", 1], ["attack", 1], ["can", 1], ["be", 1], ["reduced", 1], ["in", 1], ["radius", 1], ["but", 1], ["cannot", 1], ["go", 1], ["above", 1], ["the", 1], ["maximum", 1], ["determine", 1], ["the", 1], ["maximum", 1], ["number", 1], ["of", 1], ["minions", 1], ["liam", 1], ["can", 1], ["destroy", 0], ["in", 0], ["a", 0], ["single", 0], ["attack", 0], ["without", 0], ["damaging", 0], ["any", 0], ["of", 0], ["his", 0], ["own", 0], ["villages", 0], ["input", 0], ["each", 52], ["input", 52], ["will", 52], ["consist", 52], ["of", 52], ["a", 52], ["single", 52], ["test", 52], ["case", 52], ["note", 22], ["that", 1], ["your", 0], ["program", 0], ["may", 0], ["be", 0], ["run", 0], ["multiple", 0], ["times", 0], ["on", 0], ["different", 0], ["inputs", 0], ["each", 0], ["input", 0], ["begins", 0], ["with", 0], ["a", 0], ["line", 0], ["with", 0], ["3", 0], ["space", 0], ["separated", 0], ["integers", 0], ["n", 0], ["m", 0], ["r", 0], ["where", 0], ["n", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["10", 0], ["is", 0], ["the", 0], ["number", 0], ["of", 0], ["liam’s", 0], ["villages", 0], ["m", 0], ["1", 0], ["le", 0], ["m", 0], ["le", 0], ["2000", 0], ["is", 0], ["the", 0], ["number", 0], ["of", 0], ["opposing", 0], ["minions", 0], ["r", 0], ["1", 0], ["le", 0], ["r", 0], ["le", 0], ["20000", 0], ["is", 0], ["the", 0], ["maximum", 0], ["radius", 0], ["of", 0], ["liam’s", 0], ["area", 0], ["of", 0], ["effect", 0], ["attack", 0], ["the", 1], ["next", 1], ["n", 1], ["lines", 1], ["will", 1], ["each", 1], ["contain", 0], ["3", 0], ["space", 0], ["separated", 0], ["integers", 0], ["vx", 0], ["vy", 0], ["vr", 0], ["which", 0], ["represent", 0], ["the", 0], ["location", 0], ["20000", 0], ["le", 0], ["vx", 0], ["vy", 0], ["le", 0], ["20000", 0], ["and", 0], ["radius", 0], ["1", 0], ["le", 0], ["vr", 0], ["le", 0], ["20000", 0], ["of", 1], ["one", 1], ["of", 1], ["liam’s", 1], ["villages", 1], ["no", 1], ["two", 1], ["villages", 1], ["will", 1], ["intersect", 1], ["or", 1], ["overlap", 1], ["the", 1], ["next", 1], ["m", 1], ["lines", 1], ["will", 1], ["each", 0], ["contain", 0], ["2", 0], ["space", 0], ["separated", 0], ["integers", 0], ["mx", 0], ["my", 0], ["which", 0], ["represent", 0], ["the", 0], ["location", 0], ["20000", 0], ["le", 0], ["mx", 0], ["my", 0], ["le", 0], ["20000", 0], ["of", 1], ["one", 1], ["of", 1], ["the", 1], ["enemy", 1], ["minions", 1], ["no", 1], ["two", 1], ["minions", 1], ["will", 1], ["occupy", 1], ["the", 1], ["same", 1], ["point", 1], ["and", 0], ["no", 0], ["enemy", 0], ["minion", 0], ["will", 0], ["be", 0], ["inside", 0], ["any", 0], ["of", 0], ["liam’s", 0], ["villages", 0], ["output", 0], ["output", 1], ["a", 1], ["single", 1], ["integer", 1], ["representing", 1], ["the", 1], ["maximum", 1], ["number", 0], ["of", 0], ["enemy", 0], ["minions", 0], ["that", 0], ["liam", 0], ["can", 0], ["destroy", 0], ["with", 0], ["a", 0], ["single", 0], ["attack", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["1", 0], ["3", 0], ["3", 0], ["0", 0], ["0", 0], ["1", 0], ["3", 0], ["3", 0], ["3", 0], ["3", 0], ["3", 0], ["3", 0], ["sample", 0], ["output", 0], ["1", 0], ["1", 0], ["sample", 0], ["input", 0], ["2", 0], ["1", 0], ["5", 0], ["3", 0], ["0", 0], ["0", 0], ["1", 0], ["3", 0], ["3", 0], ["3", 0], ["3", 0], ["3", 0], ["3", 0], ["3", 0], ["0", 0], ["0", 0], ["3", 0], ["sample", 0], ["output", 0], ["2", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5104712041884817, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.484865265624428, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6776649746192893, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.652838912356679, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.48429319371727747, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.48429319371727747, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6522842639593909, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6522842639593909, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are given an array $a$ consisting of $n$ positive integers.\n\nInitially, you have an integer $x = 0$. During one move, you can do one of the following two operations:  Choose exactly one $i$ from $1$ to $n$ and increase $a_i$ by $x$ ($a_i := a_i + x$), then increase $x$ by $1$ ($x := x + 1$).  Just increase $x$ by $1$ ($x := x + 1$). \n\nThe first operation can be applied no more than once to each $i$ from $1$ to $n$.\n\nYour task is to find the minimum number of moves required to obtain such an array that each its element is divisible by $k$ (the value $k$ is given).\n\nYou have to answer $t$ independent test cases. \n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) — the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5; 1 \\le k \\le 10^9$) — the length of $a$ and the required divisior. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\n\nIt is guaranteed that the sum of $n$ does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case, print the answer — the minimum number of moves required to obtain such an array that each its element is divisible by $k$.\n\n\n-----Example-----\nInput\n5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\nOutput\n6\n18\n0\n227\n8\n\n\n\n-----Note-----\n\nConsider the first test case of the example:  $x=0$, $a = [1, 2, 1, 3]$. Just increase $x$;  $x=1$, $a = [1, 2, 1, 3]$. Add $x$ to the second element and increase $x$;  $x=2$, $a = [1, 3, 1, 3]$. Add $x$ to the third element and increase $x$;  $x=3$, $a = [1, 3, 3, 3]$. Add $x$ to the fourth element and increase $x$;  $x=4$, $a = [1, 3, 3, 6]$. Just increase $x$;  $x=5$, $a = [1, 3, 3, 6]$. Add $x$ to the first element and increase $x$;  $x=6$, $a = [6, 3, 3, 6]$. We obtained the required array. \n\nNote that you can't add $x$ to the same element more than once.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["t = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\tl = list(map(int, input().split()))\n\t\n\td = dict()\n\td[0] = 0\n\tfor v in l:\n\t\tvv = (k - v) % k\n\t\tif vv:\n\t\t\tif vv not in d:\n\t\t\t\td[vv] = vv + 1\n\t\t\telse:\n\t\t\t\td[vv] += k\n\tprint(max(d.values()))\n\n", "t = int(input())\nfor _ in range(t):\n\tn, k = map(int, input().split())\n\ta = list(map(int, input().split()))\n\tb = [(k-a[i]%k)%k for i in range(n)]\n\tmx = {}\n\tmx[0] = -1\n\tfor x in b:\n\t\tif x == 0:\n\t\t\tcontinue\n\t\tif x not in mx:\n\t\t\tmx[x] = x\n\t\telse:\n\t\t\tmx[x] += k\n\n\tprint(max(mx.values())+1)\n", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n\nt=int(input())\nfor tests in range(t):\n\tn,k=list(map(int,input().split()))\n\tA=list(map(int,input().split()))\n\n\tB=[(k-a)%k for a in A]\n\tC=Counter(B)\n\n\tMAX=1\n\tIND=-1\n\n\tfor c in C:\n\t\tif c==0:\n\t\t\tcontinue\n\t\tif MAX<C[c]:\n\t\t\tMAX=C[c]\n\t\t\tIND=c\n\t\telif MAX==C[c] and IND<c:\n\t\t\tIND=c\n\n\t#print(MAX,IND)\n\tprint(IND+1+(MAX-1)*k)\n\n\t\n\t\n", "import math\nt = int(input())\nfor _ in range(t):\n\tn, k = [int(i) for i in input().split()]\n\ta = [int(i) for i in input().split()]\n\tma = -1\n\td = {}\n\tfor i in a:\n\t\tif i%k == 0:\n\t\t\tcontinue\n\t\tr = i%k\n\t\tr = k - r\n\t\tif r not in d:\n\t\t\td[r] = 0\n\t\td[r] += 1\n\t\tma = max(ma, r + ((d[r]-1)*k))\n\tprint(ma + 1)\n", "t=int(input())\nfor you in range(t):\n\tl=input().split()\n\tn=int(l[0])\n\tk=int(l[1])\n\thashi=dict()\n\tl=input().split()\n\tli=[int(i) for i in l]\n\tmaxa=[]\n\tfor i in li:\n\t\tif(i%k):\n\t\t\tz=k-(i%k)\n\t\t\tif(z in hashi):\n\t\t\t\thashi[z]+=1\n\t\t\telse:\n\t\t\t\thashi[z]=1\n\tfor i in hashi:\n\t\tmaxa.append((hashi[i]-1)*k+i)\n\tif(maxa==[]):\n\t\tprint(0)\n\t\tcontinue\n\tprint(max(maxa)+1)\n", "t = int(input())\nfrom collections import Counter\n\nfor case in range(t):\n\tn, k = list(map(int, input().split()))\n\ta = [int(x) for x in input().split()]\n\tw = Counter(x % k for x in a)\n\tv = 0\n\tfor x, freq in list(w.items()):\n\t\tif x == 0: continue\n\t\tif freq == 0: continue\n\t\t\n\t\tr = (-x) % k\n\t\tv = max(v, r + (freq-1)*k+1)\n\n\tprint(v)\n", "from collections import deque\nimport sys\ndef inp():\n\treturn sys.stdin.readline().strip()\nfor _ in range(int(inp())):\n\tn,k=list(map(int,inp().split()))\n\ta=list(map(int,inp().split()))\n\td={}\n\tf=0\n\tmx=-1\n\tfor i in a:\n\t\tif i%k==0:\n\t\t\tcontinue\n\t\tif i%k not in d:\n\t\t\td[i%k]=0\n\t\td[i%k]+=1\n\t\tif f<d[i%k]:\n\t\t\tf=d[i%k]\n\t\t\tmx=i%k \n\t\telif f==d[i%k]:\n\t\t\tmx=min(mx,i%k)\n\tif mx==-1:\n\t\tprint(0)\n\t\tcontinue\n\tprint((f-1)*k+(k-mx)+1)\n", "for nt in range(int(input())):\n\tn,k = list(map(int,input().split()))\n\tnew = list(map(int,input().split()))\n\ta = []\n\tfor i in range(n):\n\t\tif new[i]%k!=0:\n\t\t\ta.append(new[i])\n\ta.sort()\n\tn = len(a)\n\tif n==0:\n\t\tprint(0)\n\t\tcontinue\n\td = {}\n\tmaxx = 0\n\tfor i in range(n):\n\t\tdiff = k - (a[i]%k)\n\t\tif diff not in d:\n\t\t\tmaxx = max(maxx,diff)\n\t\t\td[diff] = 1\n\t\telse:\n\t\t\tmaxx = max(maxx,d[diff]*k+diff)\n\t\t\td[diff] += 1\n\tprint(maxx+1)\n", "import collections\nt = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\ta = list(map(int, input().split()))\n\tx = 0\n\n\tD = [k - a[i] % k for i in range(n) if a[i] % k]\n\tD.sort(reverse=True)\n\tans = 0\n\tif len(D):\n\t\tC = collections.Counter(D).most_common()\n\t\t# print(C)\n\t\tans = (C[0][1]-1)*k + C[0][0] + 1\n\n\tprint(ans)\n", "def solve():\n\tn, k = list(map(int, input().split()))\n\ta = [int(x) for x in input().split()]\n\tused = {}\n\tans = 0\n\tfor i in a:\n\t\tif i % k != 0:\n\t\t\tif (i % k) in used:\n\t\t\t\tans = max(ans, k * (used[i % k] + 1) - (i % k))\n\t\t\t\tused[i % k] += 1\n\t\t\telse:\n\t\t\t\tans = max(ans, k - (i % k))\n\t\t\t\tused[i % k] = 1\n\tprint(ans if ans == 0 else ans + 1)\n\n\n[solve() for i in range(int(input()))]\n", "for test_i in range(int(input())):\n\tn, k = map(int, input().split())\n\tarr = list(map(lambda el: (k - int(el) % k) % k, input().split()))\n\trems = {}\n\tfor el in arr:\n\t\tif el:\n\t\t\tif el in rems:\n\t\t\t\trems[el] += 1\n\t\t\telse:\n\t\t\t\trems[el] = 1\n\tif rems:\n\t\tmax_rem_item = max([(item[1], item[0]) for item in rems.items()])\n\t\tprint(k * (max_rem_item[0] - 1) + max_rem_item[1] + 1)\n\telse:\n\t\tprint(0)\n", "def solve():\n\tn, k = list(map(int, input().split()))\n\ta = [int(x) for x in input().split()]\n\tused = {}\n\tans = 0\n\tfor i in a:\n\t\tif i % k != 0:\n\t\t\tif (i % k) in used:\n\t\t\t\tans = max(ans, k * (used[i % k] + 1) - (i % k) + 1)\n\t\t\t\tused[i % k] += 1\n\t\t\telse:\n\t\t\t\tans = max(ans, k - (i % k) + 1)\n\t\t\t\tused[i % k] = 1\n\tprint(ans)\n\n\n[solve() for i in range(int(input()))]\n", "import collections\n\nt=int(input())\nfor _ in range(t):\n\tn,k=map(int,input().split())\n\tarr=list(map(int,input().split()))\n\tfor i in range(n):\n\t\tarr[i]%=k\n\tcnt=collections.Counter(arr)\n\tans=0\n\tfor key in cnt.keys():\n\t\tif key==0:\n\t\t\tcontinue\n\t\ttmp=(k-key)%k+k*(cnt[key]-1)\n\t\tans=max(ans,tmp+1)\n\tprint(ans)\n", "import sys, math,os\nfrom io import BytesIO, IOBase\n#data = BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# from bisect import bisect_left as bl, bisect_right as br, insort\n# from heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n# from itertools import permutations,combinations\n# from decimal import Decimal\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var): sys.stdout.write(' '.join(map(str, var)) + '\\n')\ndef out(var): sys.stdout.write(str(var) + '\\n')\n#sys.setrecursionlimit(100000 + 1)\nINF = 10**9\nmod = 998244353\n\nfor t in range(int(data())):\n\tn,k=mdata()\n\ta=mdata()\n\td=dd(int)\n\tfor i in range(n):\n\t\tif a[i]%k==0:\n\t\t\tcontinue\n\t\td[k-a[i]%k]+=1\n\tm=0\n\tfor i in d:\n\t\tm=max(m,i+k*(d[i]-1))\n\tif m==0:\n\t\tout(0)\n\telse:\n\t\tout(m+1)\n"], "id": "id5675"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5675", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["an", 0], ["array", 0], ["a", 0], ["consisting", 0], ["of", 0], ["n", 0], ["positive", 0], ["integers", 0], ["initially", 0], ["you", 0], ["have", 0], ["an", 0], ["integer", 0], ["x", 0], ["0", 0], ["during", 0], ["one", 0], ["move", 0], ["you", 0], ["can", 0], ["do", 0], ["one", 0], ["of", 0], ["the", 0], ["following", 0], ["two", 0], ["operations", 0], ["choose", 0], ["exactly", 0], ["one", 0], ["i", 0], ["from", 0], ["1", 0], ["to", 0], ["n", 0], ["and", 0], ["increase", 0], ["a", 0], ["i", 0], ["by", 0], ["x", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["x", 0], ["then", 0], ["increase", 0], ["x", 0], ["by", 0], ["1", 0], ["x", 0], ["x", 0], ["1", 0], ["just", 0], ["increase", 0], ["x", 0], ["by", 0], ["1", 0], ["x", 0], ["x", 0], ["1", 0], ["the", 0], ["first", 0], ["operation", 0], ["can", 0], ["be", 0], ["applied", 0], ["no", 0], ["more", 0], ["than", 0], ["once", 0], ["to", 0], ["each", 0], ["i", 0], ["from", 0], ["1", 0], ["to", 0], ["n", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["find", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["moves", 0], ["required", 0], ["to", 0], ["obtain", 0], ["such", 0], ["an", 0], ["array", 0], ["that", 0], ["each", 0], ["its", 0], ["element", 0], ["is", 0], ["divisible", 0], ["by", 0], ["k", 0], ["the", 0], ["value", 0], ["k", 0], ["is", 0], ["given", 0], ["you", 8], ["have", 8], ["to", 8], ["answer", 8], ["t", 8], ["independent", 8], ["test", 8], ["cases", 8], ["input", 20], ["the", 46], ["first", 46], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["one", 0], ["integer", 0], ["t", 0], ["1", 0], ["le", 0], ["t", 0], ["le", 0], ["2", 0], ["cdot", 6], ["10", 28], ["4", 22], ["—", 18], ["the", 45], ["number", 44], ["of", 18], ["test", 18], ["cases", 18], ["then", 18], ["t", 6], ["test", 6], ["cases", 6], ["follow", 6], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["test", 0], ["case", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["k", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 1], ["2", 0], ["cdot", 0], ["10", 0], ["5", 0], ["1", 0], ["le", 0], ["k", 0], ["le", 0], ["10", 0], ["9", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["a", 0], ["and", 0], ["the", 0], ["required", 0], ["divisior", 0], ["the", 14], ["second", 14], ["line", 14], ["of", 14], ["the", 14], ["test", 14], ["case", 14], ["contains", 28], ["n", 30], ["integers", 35], ["a", 14], ["1", 10], ["a", 1], ["2", 1], ["dots", 1], ["a", 1], ["n", 1], ["1", 0], ["le", 0], ["a", 0], ["i", 0], ["le", 0], ["10", 0], ["9", 0], ["where", 2], ["a", 2], ["i", 2], ["is", 2], ["the", 2], ["i", 2], ["th", 0], ["element", 0], ["of", 0], ["a", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["the", 0], ["sum", 0], ["of", 0], ["n", 0], ["does", 4], ["not", 4], ["exceed", 4], ["2", 4], ["cdot", 4], ["10", 4], ["5", 4], ["sum", 4], ["n", 4], ["le", 4], ["2", 4], ["cdot", 4], ["10", 0], ["5", 0], ["output", 0], ["for", 0], ["each", 0], ["test", 0], ["case", 0], ["print", 0], ["the", 0], ["answer", 0], ["—", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["moves", 0], ["required", 0], ["to", 0], ["obtain", 0], ["such", 0], ["an", 0], ["array", 0], ["that", 0], ["each", 0], ["its", 0], ["element", 0], ["is", 0], ["divisible", 0], ["by", 0], ["k", 0], ["example", 0], ["input", 0], ["5", 0], ["4", 0], ["3", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["10", 0], ["6", 0], ["8", 0], ["7", 0], ["1", 0], ["8", 0], ["3", 0], ["7", 0], ["5", 0], ["10", 0], ["8", 0], ["9", 0], ["5", 0], ["10", 0], ["20", 0], ["100", 0], ["50", 0], ["20", 0], ["100500", 0], ["10", 0], ["25", 0], ["24", 0], ["24", 0], ["24", 0], ["24", 0], ["24", 0], ["24", 0], ["24", 0], ["24", 0], ["24", 0], ["24", 0], ["8", 0], ["8", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["8", 0], ["output", 0], ["6", 0], ["18", 0], ["0", 0], ["227", 0], ["8", 0], ["note", 0], ["consider", 0], ["the", 0], ["first", 0], ["test", 0], ["case", 0], ["of", 0], ["the", 0], ["example", 0], ["x", 0], ["0", 0], ["a", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["just", 0], ["increase", 0], ["x", 0], ["x", 0], ["1", 0], ["a", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["add", 0], ["x", 0], ["to", 0], ["the", 0], ["second", 0], ["element", 0], ["and", 0], ["increase", 0], ["x", 0], ["x", 0], ["2", 0], ["a", 0], ["1", 0], ["3", 0], ["1", 0], ["3", 0], ["add", 0], ["x", 0], ["to", 0], ["the", 0], ["third", 0], ["element", 0], ["and", 0], ["increase", 0], ["x", 0], ["x", 0], ["3", 0], ["a", 0], ["1", 0], ["3", 0], ["3", 0], ["3", 0], ["add", 0], ["x", 0], ["to", 0], ["the", 0], ["fourth", 0], ["element", 0], ["and", 0], ["increase", 0], ["x", 0], ["x", 0], ["4", 0], ["a", 0], ["1", 0], ["3", 0], ["3", 0], ["6", 0], ["just", 0], ["increase", 0], ["x", 0], ["x", 0], ["5", 0], ["a", 0], ["1", 0], ["3", 0], ["3", 0], ["6", 0], ["add", 0], ["x", 0], ["to", 0], ["the", 0], ["first", 0], ["element", 0], ["and", 0], ["increase", 0], ["x", 0], ["x", 0], ["6", 0], ["a", 0], ["6", 0], ["3", 0], ["3", 0], ["6", 0], ["we", 0], ["obtained", 0], ["the", 0], ["required", 0], ["array", 0], ["note", 0], ["that", 0], ["you", 0], ["can", 0], ["t", 0], ["add", 0], ["x", 0], ["to", 0], ["the", 0], ["same", 0], ["element", 0], ["more", 0], ["than", 0], ["once", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.13769751693002258, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.034085226449540915, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.2813186813186813, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1650418628990058, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08577878103837472, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.03145221971407073, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.2571428571428571, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.16331501831501832, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["dict", 0], ["d", 0], ["0", 0], ["0", 0], ["for", 0], ["v", 0], ["in", 0], ["l", 0], ["vv", 0], ["k", 0], ["v", 0], ["k", 0], ["if", 0], ["vv", 0], ["if", 0], ["vv", 0], ["not", 0], ["in", 0], ["d", 0], ["d", 0], ["vv", 0], ["vv", 0], ["1", 0], ["else", 0], ["d", 0], ["vv", 0], ["k", 0], ["print", 0], ["max", 0], ["d", 0], ["values", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["k", 0], ["a", 0], ["i", 0], ["k", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["mx", 0], ["mx", 0], ["0", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["b", 0], ["if", 0], ["x", 0], ["0", 0], ["continue", 0], ["if", 0], ["x", 0], ["not", 0], ["in", 0], ["mx", 0], ["mx", 0], ["x", 0], ["x", 0], ["else", 0], ["mx", 0], ["x", 0], ["k", 0], ["print", 0], ["max", 0], ["mx", 0], ["values", 0], ["1", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["tests", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["k", 0], ["a", 0], ["k", 0], ["for", 0], ["a", 0], ["in", 0], ["a", 0], ["c", 0], ["counter", 0], ["b", 0], ["max", 0], ["1", 0], ["ind", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["c", 0], ["if", 0], ["c", 0], ["0", 0], ["continue", 0], ["if", 0], ["max", 0], ["c", 0], ["c", 0], ["max", 0], ["c", 0], ["c", 0], ["ind", 0], ["c", 0], ["elif", 0], ["max", 0], ["c", 0], ["c", 0], ["and", 0], ["ind", 0], ["c", 0], ["ind", 0], ["c", 0], ["print", 0], ["max", 0], ["ind", 0], ["print", 0], ["ind", 0], ["1", 0], ["max", 0], ["1", 0], ["k", 0], ["import", 0], ["math", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ma", 0], ["1", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["k", 0], ["0", 0], ["continue", 0], ["r", 0], ["i", 0], ["k", 0], ["r", 0], ["k", 0], ["r", 0], ["if", 0], ["r", 0], ["not", 0], ["in", 0], ["d", 0], ["d", 0], ["r", 0], ["0", 0], ["d", 0], ["r", 0], ["1", 0], ["ma", 0], ["max", 0], ["ma", 0], ["r", 0], ["d", 0], ["r", 0], ["1", 0], ["k", 0], ["print", 0], ["ma", 0], ["1", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["you", 0], ["in", 0], ["range", 0], ["t", 0], ["l", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["l", 0], ["0", 0], ["k", 0], ["int", 0], ["l", 0], ["1", 0], ["hashi", 0], ["dict", 0], ["l", 0], ["input", 0], ["split", 0], ["li", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["maxa", 0], ["for", 0], ["i", 0], ["in", 0], ["li", 0], ["if", 0], ["i", 0], ["k", 0], ["z", 0], ["k", 0], ["i", 0], ["k", 0], ["if", 0], ["z", 0], ["in", 0], ["hashi", 0], ["hashi", 0], ["z", 0], ["1", 0], ["else", 0], ["hashi", 0], ["z", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["hashi", 0], ["maxa", 0], ["append", 0], ["hashi", 0], ["i", 0], ["1", 0], ["k", 0], ["i", 0], ["if", 0], ["maxa", 0], ["print", 0], ["0", 0], ["continue", 0], ["print", 0], ["max", 0], ["maxa", 0], ["1", 0], ["t", 0], ["int", 0], ["input", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["for", 0], ["case", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["w", 0], ["counter", 0], ["x", 0], ["k", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["v", 0], ["0", 0], ["for", 0], ["x", 0], ["freq", 0], ["in", 0], ["list", 0], ["w", 0], ["items", 0], ["if", 0], ["x", 0], ["0", 0], ["continue", 0], ["if", 0], ["freq", 0], ["0", 0], ["continue", 0], ["r", 0], ["x", 0], ["k", 0], ["v", 0], ["max", 0], ["v", 0], ["r", 0], ["freq", 0], ["1", 0], ["k", 0], ["1", 0], ["print", 0], ["v", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["import", 0], ["sys", 0], ["def", 0], ["inp", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["inp", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["inp", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["inp", 0], ["split", 0], ["d", 0], ["f", 0], ["0", 0], ["mx", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["k", 0], ["0", 0], ["continue", 0], ["if", 0], ["i", 0], ["k", 0], ["not", 0], ["in", 0], ["d", 0], ["d", 0], ["i", 0], ["k", 0], ["0", 0], ["d", 0], ["i", 0], ["k", 0], ["1", 0], ["if", 0], ["f", 0], ["d", 0], ["i", 0], ["k", 0], ["f", 0], ["d", 0], ["i", 0], ["k", 0], ["mx", 0], ["i", 0], ["k", 0], ["elif", 0], ["f", 0], ["d", 0], ["i", 0], ["k", 0], ["mx", 0], ["min", 0], ["mx", 0], ["i", 0], ["k", 0], ["if", 0], ["mx", 0], ["1", 0], ["print", 0], ["0", 0], ["continue", 0], ["print", 0], ["f", 0], ["1", 0], ["k", 0], ["k", 0], ["mx", 0], ["1", 0], ["for", 0], ["nt", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["new", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["new", 0], ["i", 0], ["k", 0], ["0", 0], ["a", 0], ["append", 0], ["new", 0], ["i", 0], ["a", 0], ["sort", 0], ["n", 0], ["len", 0], ["a", 0], ["if", 0], ["n", 0], ["0", 0], ["print", 0], ["0", 0], ["continue", 0], ["d", 0], ["maxx", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["diff", 0], ["k", 0], ["a", 0], ["i", 0], ["k", 0], ["if", 0], ["diff", 0], ["not", 0], ["in", 0], ["d", 0], ["maxx", 0], ["max", 0], ["maxx", 0], ["diff", 0], ["d", 0], ["diff", 0], ["1", 0], ["else", 0], ["maxx", 0], ["max", 0], ["maxx", 0], ["d", 0], ["diff", 0], ["k", 0], ["diff", 0], ["d", 0], ["diff", 0], ["1", 0], ["print", 0], ["maxx", 0], ["1", 0], ["import", 0], ["collections", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["0", 0], ["d", 0], ["k", 0], ["a", 0], ["i", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["k", 0], ["d", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["0", 0], ["if", 0], ["len", 0], ["d", 0], ["c", 0], ["collections", 0], ["counter", 0], ["d", 0], ["most", 0], ["common", 0], ["print", 0], ["c", 0], ["ans", 0], ["c", 0], ["0", 0], ["1", 0], ["1", 0], ["k", 0], ["c", 0], ["0", 0], ["0", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["used", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["k", 0], ["0", 0], ["if", 0], ["i", 0], ["k", 0], ["in", 0], ["used", 0], ["ans", 0], ["max", 0], ["ans", 0], ["k", 0], ["used", 0], ["i", 0], ["k", 0], ["1", 0], ["i", 0], ["k", 0], ["used", 0], ["i", 0], ["k", 0], ["1", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["k", 0], ["i", 0], ["k", 0], ["used", 0], ["i", 0], ["k", 0], ["1", 0], ["print", 0], ["ans", 0], ["if", 0], ["ans", 0], ["0", 0], ["else", 0], ["ans", 0], ["1", 0], ["solve", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["for", 0], ["test", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["lambda", 0], ["el", 0], ["k", 0], ["int", 0], ["el", 0], ["k", 0], ["k", 0], ["input", 0], ["split", 0], ["rems", 0], ["for", 0], ["el", 0], ["in", 0], ["arr", 0], ["if", 0], ["el", 0], ["if", 0], ["el", 0], ["in", 0], ["rems", 0], ["rems", 0], ["el", 0], ["1", 0], ["else", 0], ["rems", 0], ["el", 0], ["1", 0], ["if", 0], ["rems", 0], ["max", 0], ["rem", 0], ["item", 0], ["max", 0], ["item", 0], ["1", 0], ["item", 0], ["0", 0], ["for", 0], ["item", 0], ["in", 0], ["rems", 0], ["items", 0], ["print", 0], ["k", 0], ["max", 0], ["rem", 0], ["item", 0], ["0", 0], ["1", 0], ["max", 0], ["rem", 0], ["item", 0], ["1", 0], ["1", 0], ["else", 0], ["print", 0], ["0", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["used", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["k", 0], ["0", 0], ["if", 0], ["i", 0], ["k", 0], ["in", 0], ["used", 0], ["ans", 0], ["max", 0], ["ans", 0], ["k", 0], ["used", 0], ["i", 0], ["k", 0], ["1", 0], ["i", 0], ["k", 0], ["1", 0], ["used", 0], ["i", 0], ["k", 0], ["1", 0], ["else", 0], ["ans", 0], ["max", 0], ["ans", 0], ["k", 0], ["i", 0], ["k", 0], ["1", 0], ["used", 0], ["i", 0], ["k", 0], ["1", 0], ["print", 0], ["ans", 0], ["solve", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["import", 0], ["collections", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["arr", 0], ["i", 0], ["k", 0], ["cnt", 0], ["collections", 0], ["counter", 0], ["arr", 0], ["ans", 0], ["0", 0], ["for", 0], ["key", 0], ["in", 0], ["cnt", 0], ["keys", 0], ["if", 0], ["key", 0], ["0", 0], ["continue", 0], ["tmp", 0], ["k", 0], ["key", 0], ["k", 0], ["k", 0], ["cnt", 0], ["key", 0], ["1", 0], ["ans", 0], ["max", 0], ["ans", 0], ["tmp", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["math", 0], ["os", 0], ["from", 0], ["io", 0], ["import", 0], ["bytesio", 0], ["iobase", 0], ["data", 0], ["bytesio", 0], ["os", 0], ["read", 0], ["0", 0], ["os", 0], ["fstat", 0], ["0", 0], ["st", 0], ["size", 0], ["readline", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["as", 0], ["bl", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["insort", 0], ["from", 0], ["heapq", 0], ["import", 0], ["heapify", 0], ["heappush", 0], ["heappop", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["deque", 0], ["counter", 0], ["from", 0], ["itertools", 0], ["import", 0], ["permutations", 0], ["combinations", 0], ["from", 0], ["decimal", 0], ["import", 0], ["decimal", 0], ["def", 0], ["data", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["mdata", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["data", 0], ["split", 0], ["def", 0], ["outl", 0], ["var", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["join", 0], ["map", 0], ["str", 0], ["var", 0], ["n", 0], ["def", 0], ["out", 0], ["var", 0], ["sys", 0], ["stdout", 0], ["write", 0], ["str", 0], ["var", 0], ["n", 0], ["sys", 0], ["setrecursionlimit", 0], ["100000", 0], ["1", 0], ["inf", 0], ["10", 0], ["9", 0], ["mod", 0], ["998244353", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["int", 0], ["data", 0], ["n", 0], ["k", 0], ["mdata", 0], ["a", 0], ["mdata", 0], ["d", 0], ["dd", 0], ["int", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["k", 0], ["0", 0], ["continue", 0], ["d", 0], ["k", 0], ["a", 0], ["i", 0], ["k", 0], ["1", 0], ["m", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["m", 0], ["max", 0], ["m", 0], ["i", 0], ["k", 0], ["d", 0], ["i", 0], ["1", 0], ["if", 0], ["m", 0], ["0", 0], ["out", 0], ["0", 0], ["else", 0], ["out", 0], ["m", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nGarry is looking at the sky. Such a beautiful day! He notices that the clouds are particularly beautiful today, and wishes to record the current state of the sky. He has no camera, so he begins writing down coordinate points. Fortunately for Garry, the current cloud cover can be represented as the union of non-intersecting, non-degenerate triangles where each vertex is at a coordinate point on the $xy$-plane. Two triangles are considered non-intersecting if their intersection has area $0$. A triangle is degenerate if its area is $0$.\n\nThe next day, Garry’s friend Jerry goes to look at the sky. Jerry also wishes to record the current state of the sky. He follows the same protocol as Garry, and writes down the cloud cover as a set of non-intersecting triangles.\n\nGarry and Jerry want to determine if they saw the same cloud cover. Unfortunately, there are multiple possible ways to represent the same cloud cover! Given Garry and Jerry’s notes, did they see the same cloud cover in the sky?\n\n-----Input-----\nThe first line of input contains the integer $n$, $(0 \\le n \\le 100000)$, the number of triangles Garry wrote down. Each of the next $n$ lines contains $6$ space separated integers, $x_1$, $y_1$, $x_2$, $y_2$, $x_3$, and $y_3$. These are Garry’s triangles. The next line contains the integer $m$, $(0 \\le m \\le 100000)$, the number of triangles Jerry wrote down. Each of the next $m$ lines contains $6$ space separated integers, $x_1$, $y_1$, $x_2$, $y_2$, $x_3$, and $y_3$. These are Jerry’s triangles. The absolute value of the $x$ and $y$ coordinates are at most $10^9$. (That’s as far as Garry and Jerry can see.)\n\n-----Output-----\nPrint “yes” if Garry and Jerry saw the same cloud cover, or “no” if they did not.\n\n-----Examples-----\nSample Input 1:\n1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\nSample Output 1:\nno\n\nSample Input 2:\n2\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1\n2\n9997 0 9998 0 0 1\n9998 0 9999 0 0 1\nSample Output 2:\nno\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7924"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7924", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["garry", 2], ["is", 2], ["looking", 2], ["at", 2], ["the", 2], ["sky", 2], ["such", 2], ["a", 2], ["beautiful", 2], ["day", 2], ["he", 2], ["notices", 2], ["that", 2], ["the", 2], ["clouds", 2], ["are", 2], ["particularly", 2], ["beautiful", 2], ["today", 2], ["and", 2], ["wishes", 2], ["to", 2], ["record", 2], ["the", 2], ["current", 2], ["state", 2], ["of", 2], ["the", 2], ["sky", 2], ["he", 2], ["has", 2], ["no", 2], ["camera", 2], ["so", 2], ["he", 2], ["begins", 2], ["writing", 2], ["down", 2], ["coordinate", 2], ["points", 2], ["fortunately", 2], ["for", 2], ["garry", 2], ["the", 2], ["current", 2], ["cloud", 2], ["cover", 2], ["can", 2], ["be", 2], ["represented", 2], ["as", 2], ["the", 2], ["union", 2], ["of", 2], ["non", 2], ["intersecting", 2], ["non", 2], ["degenerate", 2], ["triangles", 2], ["where", 2], ["each", 2], ["vertex", 2], ["is", 2], ["at", 2], ["a", 2], ["coordinate", 2], ["point", 2], ["on", 2], ["the", 2], ["xy", 2], ["plane", 2], ["two", 1], ["triangles", 1], ["are", 1], ["considered", 1], ["non", 1], ["intersecting", 1], ["if", 1], ["their", 1], ["intersection", 1], ["has", 1], ["area", 1], ["0", 1], ["a", 1], ["triangle", 1], ["is", 1], ["degenerate", 1], ["if", 1], ["its", 1], ["area", 1], ["is", 1], ["0", 1], ["the", 1], ["next", 1], ["day", 1], ["garry’s", 1], ["friend", 1], ["jerry", 1], ["goes", 1], ["to", 1], ["look", 1], ["at", 1], ["the", 1], ["sky", 1], ["jerry", 1], ["also", 1], ["wishes", 1], ["to", 1], ["record", 1], ["the", 1], ["current", 1], ["state", 1], ["of", 1], ["the", 1], ["sky", 1], ["he", 1], ["follows", 1], ["the", 1], ["same", 1], ["protocol", 1], ["as", 1], ["garry", 1], ["and", 1], ["writes", 1], ["down", 1], ["the", 1], ["cloud", 1], ["cover", 1], ["as", 1], ["a", 1], ["set", 1], ["of", 1], ["non", 1], ["intersecting", 1], ["triangles", 1], ["garry", 1], ["and", 1], ["jerry", 1], ["want", 1], ["to", 1], ["determine", 1], ["if", 1], ["they", 1], ["saw", 1], ["the", 1], ["same", 1], ["cloud", 1], ["cover", 1], ["unfortunately", 1], ["there", 1], ["are", 1], ["multiple", 1], ["possible", 1], ["ways", 1], ["to", 1], ["represent", 1], ["the", 1], ["same", 1], ["cloud", 1], ["cover", 1], ["given", 1], ["garry", 1], ["and", 1], ["jerry’s", 0], ["notes", 0], ["did", 0], ["they", 0], ["see", 0], ["the", 0], ["same", 0], ["cloud", 0], ["cover", 0], ["in", 0], ["the", 0], ["sky", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["the", 0], ["integer", 0], ["n", 0], ["0", 0], ["le", 0], ["n", 0], ["le", 0], ["100000", 0], ["the", 0], ["number", 0], ["of", 0], ["triangles", 0], ["garry", 0], ["wrote", 0], ["down", 0], ["each", 0], ["of", 0], ["the", 0], ["next", 0], ["n", 0], ["lines", 0], ["contains", 0], ["6", 0], ["space", 0], ["separated", 0], ["integers", 0], ["x", 6], ["1", 0], ["y", 0], ["1", 0], ["x", 0], ["2", 0], ["y", 0], ["2", 0], ["x", 0], ["3", 0], ["and", 0], ["y", 0], ["3", 0], ["these", 0], ["are", 0], ["garry’s", 0], ["triangles", 0], ["the", 0], ["next", 0], ["line", 0], ["contains", 0], ["the", 0], ["integer", 0], ["m", 0], ["0", 0], ["le", 0], ["m", 0], ["le", 0], ["100000", 0], ["the", 0], ["number", 0], ["of", 0], ["triangles", 0], ["jerry", 0], ["wrote", 0], ["down", 0], ["each", 0], ["of", 0], ["the", 0], ["next", 0], ["m", 0], ["lines", 0], ["contains", 0], ["6", 0], ["space", 0], ["separated", 0], ["integers", 0], ["x", 6], ["1", 0], ["y", 0], ["1", 0], ["x", 0], ["2", 0], ["y", 0], ["2", 0], ["x", 0], ["3", 0], ["and", 0], ["y", 0], ["3", 0], ["these", 0], ["are", 0], ["jerry’s", 0], ["triangles", 0], ["the", 0], ["absolute", 0], ["value", 0], ["of", 0], ["the", 0], ["x", 0], ["and", 0], ["y", 0], ["coordinates", 0], ["are", 0], ["at", 0], ["most", 0], ["10", 0], ["9", 0], ["that’s", 0], ["as", 0], ["far", 0], ["as", 0], ["garry", 0], ["and", 0], ["jerry", 0], ["can", 0], ["see", 0], ["output", 0], ["print", 1], ["“yes”", 1], ["if", 1], ["garry", 1], ["and", 1], ["jerry", 0], ["saw", 0], ["the", 0], ["same", 0], ["cloud", 0], ["cover", 0], ["or", 0], ["“no”", 0], ["if", 0], ["they", 0], ["did", 0], ["not", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["1", 0], ["10000", 0], ["0", 0], ["10000", 0], ["10000", 0], ["0", 0], ["10000", 0], ["3", 0], ["10000", 0], ["0", 0], ["10000", 0], ["10000", 0], ["5000", 0], ["5000", 0], ["5000", 0], ["5000", 0], ["10000", 0], ["10000", 0], ["0", 0], ["10000", 0], ["0", 0], ["0", 0], ["0", 0], ["1000", 0], ["1000", 0], ["0", 0], ["sample", 0], ["output", 0], ["1", 0], ["no", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["9996", 0], ["0", 0], ["9997", 0], ["0", 0], ["0", 0], ["1", 0], ["9999", 0], ["0", 0], ["10000", 0], ["0", 0], ["0", 0], ["1", 0], ["2", 0], ["9997", 0], ["0", 0], ["9998", 0], ["0", 0], ["0", 0], ["1", 0], ["9998", 0], ["0", 0], ["9999", 0], ["0", 0], ["0", 0], ["1", 0], ["sample", 0], ["output", 0], ["2", 0], ["no", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.44854881266490765, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.35048372911169745, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5575447570332481, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4113384484228468, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.44854881266490765, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.35048372911169745, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5575447570332481, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4113384484228468, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nShubham has an array $a$ of size $n$, and wants to select exactly $x$ elements from it, such that their sum is odd. These elements do not have to be consecutive. The elements of the array are not guaranteed to be distinct.\n\nTell him whether he can do so.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer $t$ $(1\\le t \\le 100)$ — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $x$ $(1 \\le x \\le n \\le 1000)$ — the length of the array and the number of elements you need to choose.\n\nThe next line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ $(1 \\le a_i \\le 1000)$ — elements of the array.\n\n\n-----Output-----\n\nFor each test case, print \"Yes\" or \"No\" depending on whether it is possible to choose $x$ elements such that their sum is odd.\n\nYou may print every letter in any case you want.\n\n\n-----Example-----\nInput\n5\n1 1\n999\n1 1\n1000\n2 1\n51 50\n2 2\n51 50\n3 3\n101 102 103\n\nOutput\nYes\nNo\nYes\nYes\nNo\n\n\n\n-----Note-----\n\nFor $1$st case: We must select element $999$, and the sum is odd.\n\nFor $2$nd case: We must select element $1000$, so overall sum is not odd.\n\nFor $3$rd case: We can select element $51$.\n\nFor $4$th case: We must select both elements $50$ and $51$  — so overall sum is odd.\n\nFor $5$th case: We must select all elements  — but overall sum is not odd.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["q = int(input())\nfor ii in range(q):\n\tn,x = map(int,input().split())\n\tl = list(map(int,input().split()))\n\tpar = 0\n\tnpar = 0\n\tfor i in l:\n\t\tif i%2 == 1:\n\t\t\tnpar += 1\n\t\telse:\n\t\t\tpar += 1\n\tif x == n:\n\t\tif npar%2 == 1:\n\t\t\tprint(\"Yes\")\n\t\telse:\n\t\t\tprint(\"No\")\n\telse:\n\t\tif npar > 0 and par > 0:\n\t\t\tprint(\"Yes\")\n\t\telse:\n\t\t\tif par == 0:\n\t\t\t\tif x%2 == 1:\n\t\t\t\t\tprint(\"Yes\")\n\t\t\t\telse:\n\t\t\t\t\tprint(\"No\")\n\t\t\telse:\n\t\t\t\tprint(\"No\")\n", "T = int(input())\n\nfor _ in range(T):\n\tn,x = map(int,input().split())\n\ta = list(map(int,input().split()))\n\tp,q = 0,0\n\tfor i in a:\n\t\tif i % 2 == 0:\n\t\t\tp += 1\n\t\telse:\n\t\t\tq += 1\n\tok = False\n\tfor i in range(p + 1):\n\t\tj = x - i\n\t\tif j < 0 or j > q:\n\t\t\tcontinue\n\t\tif j % 2 == 1:\n\t\t\tok = True\n\t\t\tbreak\n\tif ok:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\n", "for _ in range(int(input())):\n\tn, x = map(int, input().split())\n\t# n = int(input())\n\tarr = list(map(int, input().split()))\n\ta = 0\n\tb = 0\n\tfor el in arr:\n\t\tif el % 2 == 1:\n\t\t\ta += 1\n\t\tif el % 2 == 0:\n\t\t\tb += 1\n\tif a == 0:\n\t\tprint(\"No\")\n\t\tcontinue\n\tif x == n:\n\t\tif a % 2 == 0:\n\t\t\tprint(\"No\")\n\t\telse:\n\t\t\tprint(\"Yes\")\n\t\tcontinue\n\tif x % 2 == 0:\n\t\tif b == 0:\n\t\t\tprint(\"No\")\n\t\telse:\n\t\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"Yes\")\n", "def f():\n\tn, x = list(map(int, input().split()))\n\n\ta = list(map(int, input().split()))\n\n\todds = 0\n\tfor i in a:\n\t\tif i % 2 == 1:\n\t\t\todds += 1\n\n\tif odds == n:\n\t\tif x % 2 == 1:\n\t\t\treturn \"Yes\"\n\t\telse:\n\t\t\treturn \"No\"\n\telif odds == 0:\n\t\treturn \"No\"\n\telse:\n\t\tif x == n and odds % 2 == 0:\n\t\t\treturn \"No\"\n\t\telse:\n\t\t\treturn \"Yes\"\n\nt = int(input())\n\nfor _ in range(t):\n\tprint(f())\n", "for t in range(int(input())):\n\tn, x = list(map(int, input().split()))\n\ta = list(map(int, input().split()))\n\todd = sum(map(lambda x: x % 2 == 1, a))\n\teven = sum(map(lambda x: x % 2 == 0, a))\n\ttotal = sum(a) % 2\n\tif x == n:\n\t\tif total:\n\t\t\tprint(\"Yes\")\n\t\telse:\n\t\t\tprint(\"No\")\n\telse:\n\t\tif odd == 0:\n\t\t\tprint(\"No\")\n\t\telse:\n\t\t\tif x % 2 == 1:\n\t\t\t\tprint(\"Yes\")\n\t\t\telse:\n\t\t\t\tif even:\n\t\t\t\t\tprint(\"Yes\")\n\t\t\t\telse:\n\t\t\t\t\tprint(\"No\")\n", "t= int(input())\nfor _ in range(t):\n\tn, x = list(map(int, input().split()))\n\tA = list(map(int, input().split()))\n\todd = 0\n\teven = 0\n\tfor i in range(n):\n\t\tif A[i]%2 == 1:\n\t\t\todd += 1\n\t\telse:\n\t\t\teven += 1\n\tflag =False\n\tfor j in range(x+1):\n\t\tif j%2 == 1 and j <= odd and (x-j) <= even:\n\t\t\tflag = True\n\t\t\tbreak\n\tif flag:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\n", "t = int(input())\nfor q in range(0, t):\n\t# n = int(input())\n\tn, x = list(map(int, input().split()))\n\tarr = list(map(int, input().split()))\n\ta = 0\n\tfor i in range(0, n):\n\t\tif arr[i] % 2 == 1:\n\t\t\ta += 1\n\tif a == n and x % 2 == 0:\n\t\tprint(\"No\")\n\telif a == 0:\n\t\tprint(\"No\")\n\telif x == n and a % 2 == 0:\n\t\tprint(\"No\")\n\telse:\n\t\tprint(\"Yes\")\n\n", "from math import *\n\ndef r1(t):\n\treturn t(input().strip())\n\ndef r2(t):\n\treturn [t(i) for i in input().strip().split()]\n\ndef r3(t):\n\treturn [t(i) for i in input().strip()]\n\nfor _ in range(int(input())):\n\tn, x = r2(int)\n\ta = r2(int)\n\tco = 0\n\tce = 0\n\tfor i in a:\n\t\tif i % 2 == 0:\n\t\t\tce += 1\n\t\telse:\n\t\t\tco += 1\n\n\tif ((x == n) and co % 2 == 0) or co <= 0 or (ce == 0 and x % 2 == 0):\n\t\tprint('No')\n\telse:\n\t\tprint('Yes')\n", "t = int(input())\nfor _ in range(t):\n\tn, x = [int(x) for x in input().split()]\n\tarr = [int(x) for x in input().split()]\n\tassert len(arr) == n\n\tnum_odd = len([a for a in arr if a % 2 == 1])\n\tnum_even = len([a for a in arr if a % 2 == 0])\n\n\t# o <= odd, e <= even, o+e = x, o is odd\n\tfor i in range(num_odd+1):\n\t\tif i % 2 == 1 and 0 <= x - i <= num_even:\n\t\t\tprint(\"Yes\")\n\t\t\tbreak\n\telse:\n\t\tprint(\"No\")\n\t\n", "for _ in range(int(input())):\n\tn, m = map(int, input().split())\n\tA = list(map(int, input().split()))\n\tch = 0\n\tnch = 0\n\tfor i in range(n):\n\t\tif A[i] % 2 == 1:\n\t\t\tnch += 1\n\t\telse:\n\t\t\tch += 1\n\tif n == m:\n\t\tif sum(A) % 2 == 1:\n\t\t\tprint('Yes')\n\t\telse:\n\t\t\tprint('No')\n\telse:\n\t\tif ch > 0 and nch > 0:\n\t\t\tprint('Yes')\n\t\telif nch > 0 and m % 2 == 1:\n\t\t\tprint('Yes')\n\t\telse:\n\t\t\tprint('No')\n", "import math\nt=int(input())\nfor i in range(t):\n\tn,x=list(map(int,input().split()))\n\ta=list(map(int,input().split()))\n\tevencount=0\n\toddcount=0\n\tfor j in range(n):\n\t\tif a[j]%2==0:\n\t\t\tevencount+=1\n\t\telse:\n\t\t\toddcount+=1\n\tif oddcount==0:\n\t\tprint('No')\n\telif evencount==0:\n\t\tif x%2==1:\n\t\t\tprint('Yes')\n\t\telse:\n\t\t\tprint('No')\n\telse:\n\t\tif x<n:\n\t\t\tprint('Yes')\n\t\telif oddcount%2==1:\n\t\t\tprint('Yes')\n\t\telse:\n\t\t\tprint('No')\n"], "id": "id8548"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8548", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["shubham", 0], ["has", 0], ["an", 0], ["array", 0], ["a", 0], ["of", 0], ["size", 0], ["n", 0], ["and", 0], ["wants", 0], ["to", 0], ["select", 0], ["exactly", 0], ["x", 0], ["elements", 0], ["from", 0], ["it", 0], ["such", 0], ["that", 0], ["their", 0], ["sum", 0], ["is", 0], ["odd", 0], ["these", 0], ["elements", 0], ["do", 0], ["not", 0], ["have", 0], ["to", 0], ["be", 0], ["consecutive", 0], ["the", 0], ["elements", 0], ["of", 0], ["the", 0], ["array", 0], ["are", 0], ["not", 0], ["guaranteed", 0], ["to", 0], ["be", 0], ["distinct", 0], ["tell", 0], ["him", 0], ["whether", 0], ["he", 0], ["can", 0], ["do", 0], ["so", 0], ["input", 2], ["the", 8], ["first", 8], ["line", 8], ["of", 0], ["the", 0], ["input", 4], ["contains", 12], ["a", 12], ["single", 8], ["integer", 18], ["t", 4], ["1", 0], ["le", 0], ["t", 0], ["le", 0], ["100", 4], ["—", 4], ["the", 11], ["number", 7], ["of", 6], ["test", 6], ["cases", 6], ["the", 14], ["description", 24], ["of", 24], ["the", 5], ["test", 10], ["cases", 8], ["follows", 10], ["the", 1], ["first", 0], ["line", 0], ["of", 0], ["each", 0], ["test", 0], ["case", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["x", 0], ["1", 0], ["le", 0], ["x", 0], ["le", 0], ["n", 0], ["le", 0], ["1000", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["array", 0], ["and", 0], ["the", 0], ["number", 0], ["of", 0], ["elements", 0], ["you", 0], ["need", 0], ["to", 0], ["choose", 0], ["the", 0], ["next", 0], ["line", 8], ["of", 8], ["each", 8], ["test", 14], ["case", 14], ["contains", 28], ["n", 30], ["integers", 35], ["a", 2], ["1", 2], ["a", 0], ["2", 0], ["dots", 0], ["a", 0], ["n", 0], ["1", 0], ["le", 0], ["a", 0], ["i", 0], ["le", 0], ["1000", 0], ["—", 0], ["elements", 0], ["of", 0], ["the", 0], ["array", 0], ["output", 0], ["for", 0], ["each", 0], ["test", 0], ["case", 0], ["print", 0], ["yes", 0], ["or", 0], ["no", 0], ["depending", 0], ["on", 0], ["whether", 0], ["it", 0], ["is", 0], ["possible", 0], ["to", 0], ["choose", 0], ["x", 0], ["elements", 0], ["such", 0], ["that", 0], ["their", 0], ["sum", 0], ["is", 0], ["odd", 0], ["you", 0], ["may", 0], ["print", 0], ["every", 0], ["letter", 0], ["in", 0], ["any", 0], ["case", 0], ["you", 0], ["want", 0], ["example", 0], ["input", 0], ["5", 0], ["1", 0], ["1", 0], ["999", 0], ["1", 0], ["1", 0], ["1000", 0], ["2", 0], ["1", 0], ["51", 0], ["50", 0], ["2", 0], ["2", 0], ["51", 0], ["50", 0], ["3", 0], ["3", 0], ["101", 0], ["102", 0], ["103", 0], ["output", 0], ["yes", 0], ["no", 0], ["yes", 0], ["yes", 0], ["no", 0], ["note", 0], ["for", 0], ["1", 0], ["st", 0], ["case", 0], ["we", 0], ["must", 0], ["select", 0], ["element", 0], ["999", 0], ["and", 0], ["the", 0], ["sum", 0], ["is", 0], ["odd", 0], ["for", 0], ["2", 0], ["nd", 0], ["case", 0], ["we", 0], ["must", 0], ["select", 0], ["element", 0], ["1000", 0], ["so", 0], ["overall", 0], ["sum", 0], ["is", 0], ["not", 0], ["odd", 0], ["for", 0], ["3", 0], ["rd", 0], ["case", 0], ["we", 0], ["can", 0], ["select", 0], ["element", 0], ["51", 0], ["for", 0], ["4", 0], ["th", 0], ["case", 0], ["we", 0], ["must", 0], ["select", 0], ["both", 0], ["elements", 0], ["50", 0], ["and", 0], ["51", 0], ["—", 0], ["so", 0], ["overall", 0], ["sum", 0], ["is", 0], ["odd", 0], ["for", 0], ["5", 0], ["th", 0], ["case", 0], ["we", 0], ["must", 0], ["select", 0], ["all", 0], ["elements", 0], ["—", 0], ["but", 0], ["overall", 0], ["sum", 0], ["is", 0], ["not", 0], ["odd", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1263537906137184, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.02256760487807419, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.22491349480968859, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1245674740484429, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.08303249097472924, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.02001031459515214, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.22491349480968859, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1245674740484429, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["q", 0], ["int", 0], ["input", 0], ["for", 0], ["ii", 0], ["in", 0], ["range", 0], ["q", 0], ["n", 0], ["x", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["par", 0], ["0", 0], ["npar", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["if", 0], ["i", 0], ["2", 0], ["1", 0], ["npar", 0], ["1", 0], ["else", 0], ["par", 0], ["1", 0], ["if", 0], ["x", 0], ["n", 0], ["if", 0], ["npar", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["else", 0], ["if", 0], ["npar", 0], ["0", 0], ["and", 0], ["par", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["if", 0], ["par", 0], ["0", 0], ["if", 0], ["x", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["q", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["p", 0], ["1", 0], ["else", 0], ["q", 0], ["1", 0], ["ok", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["p", 0], ["1", 0], ["j", 0], ["x", 0], ["i", 0], ["if", 0], ["j", 0], ["0", 0], ["or", 0], ["j", 0], ["q", 0], ["continue", 0], ["if", 0], ["j", 0], ["2", 0], ["1", 0], ["ok", 0], ["true", 0], ["break", 0], ["if", 0], ["ok", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["x", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["for", 0], ["el", 0], ["in", 0], ["arr", 0], ["if", 0], ["el", 0], ["2", 0], ["1", 0], ["a", 0], ["1", 0], ["if", 0], ["el", 0], ["2", 0], ["0", 0], ["b", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["print", 0], ["no", 0], ["continue", 0], ["if", 0], ["x", 0], ["n", 0], ["if", 0], ["a", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["continue", 0], ["if", 0], ["x", 0], ["2", 0], ["0", 0], ["if", 0], ["b", 0], ["0", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["yes", 0], ["def", 0], ["f", 0], ["n", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["odds", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["2", 0], ["1", 0], ["odds", 0], ["1", 0], ["if", 0], ["odds", 0], ["n", 0], ["if", 0], ["x", 0], ["2", 0], ["1", 0], ["return", 0], ["yes", 0], ["else", 0], ["return", 0], ["no", 0], ["elif", 0], ["odds", 0], ["0", 0], ["return", 0], ["no", 0], ["else", 0], ["if", 0], ["x", 0], ["n", 0], ["and", 0], ["odds", 0], ["2", 0], ["0", 0], ["return", 0], ["no", 0], ["else", 0], ["return", 0], ["yes", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["print", 0], ["f", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["odd", 0], ["sum", 0], ["map", 0], ["lambda", 0], ["x", 0], ["x", 0], ["2", 0], ["1", 0], ["a", 0], ["even", 0], ["sum", 0], ["map", 0], ["lambda", 0], ["x", 0], ["x", 0], ["2", 0], ["0", 0], ["a", 0], ["total", 0], ["sum", 0], ["a", 0], ["2", 0], ["if", 0], ["x", 0], ["n", 0], ["if", 0], ["total", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["else", 0], ["if", 0], ["odd", 0], ["0", 0], ["print", 0], ["no", 0], ["else", 0], ["if", 0], ["x", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["if", 0], ["even", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["odd", 0], ["0", 0], ["even", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["2", 0], ["1", 0], ["odd", 0], ["1", 0], ["else", 0], ["even", 0], ["1", 0], ["flag", 0], ["false", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["x", 0], ["1", 0], ["if", 0], ["j", 0], ["2", 0], ["1", 0], ["and", 0], ["j", 0], ["odd", 0], ["and", 0], ["x", 0], ["j", 0], ["even", 0], ["flag", 0], ["true", 0], ["break", 0], ["if", 0], ["flag", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["0", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["n", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["2", 0], ["1", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["n", 0], ["and", 0], ["x", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["elif", 0], ["a", 0], ["0", 0], ["print", 0], ["no", 0], ["elif", 0], ["x", 0], ["n", 0], ["and", 0], ["a", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["from", 0], ["math", 0], ["import", 0], ["def", 0], ["r1", 0], ["t", 0], ["return", 0], ["t", 0], ["input", 0], ["strip", 0], ["def", 0], ["r2", 0], ["t", 0], ["return", 0], ["t", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["def", 0], ["r3", 0], ["t", 0], ["return", 0], ["t", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["strip", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["x", 0], ["r2", 0], ["int", 0], ["a", 0], ["r2", 0], ["int", 0], ["co", 0], ["0", 0], ["ce", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["ce", 0], ["1", 0], ["else", 0], ["co", 0], ["1", 0], ["if", 0], ["x", 0], ["n", 0], ["and", 0], ["co", 0], ["2", 0], ["0", 0], ["or", 0], ["co", 0], ["0", 0], ["or", 0], ["ce", 0], ["0", 0], ["and", 0], ["x", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["arr", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["assert", 0], ["len", 0], ["arr", 0], ["n", 0], ["num", 0], ["odd", 0], ["len", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["arr", 0], ["if", 0], ["a", 0], ["2", 0], ["1", 0], ["num", 0], ["even", 0], ["len", 0], ["a", 0], ["for", 0], ["a", 0], ["in", 0], ["arr", 0], ["if", 0], ["a", 0], ["2", 0], ["0", 0], ["o", 0], ["odd", 0], ["e", 0], ["even", 0], ["o", 0], ["e", 0], ["x", 0], ["o", 0], ["is", 0], ["odd", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["num", 0], ["odd", 0], ["1", 0], ["if", 0], ["i", 0], ["2", 0], ["1", 0], ["and", 0], ["0", 0], ["x", 0], ["i", 0], ["num", 0], ["even", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ch", 0], ["0", 0], ["nch", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["2", 0], ["1", 0], ["nch", 0], ["1", 0], ["else", 0], ["ch", 0], ["1", 0], ["if", 0], ["n", 0], ["m", 0], ["if", 0], ["sum", 0], ["a", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["else", 0], ["if", 0], ["ch", 0], ["0", 0], ["and", 0], ["nch", 0], ["0", 0], ["print", 0], ["yes", 0], ["elif", 0], ["nch", 0], ["0", 0], ["and", 0], ["m", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["math", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["evencount", 0], ["0", 0], ["oddcount", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["j", 0], ["2", 0], ["0", 0], ["evencount", 0], ["1", 0], ["else", 0], ["oddcount", 0], ["1", 0], ["if", 0], ["oddcount", 0], ["0", 0], ["print", 0], ["no", 0], ["elif", 0], ["evencount", 0], ["0", 0], ["if", 0], ["x", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["else", 0], ["if", 0], ["x", 0], ["n", 0], ["print", 0], ["yes", 0], ["elif", 0], ["oddcount", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are at home and about to drive to work. The road you will take is a straight line with no speed limit. There are, however, traffic lights precisely every kilometer, and you can not pass a red light. The lights change instantaneously between green and red, and you can pass a light whenever it is green. You can also pass through a light at the exact moment of changing colour. There are no traffic lights at the start or the end of the road.\n\nNow your car is special; it is an iCar, the first Orange car, and it has only one button. When you hold down the button, the car accelerates at a constant rate of $1 \\mathrm{m}/\\mathrm{s}^2$; when you release the button the car stops on the spot.\n\nYou have driven to work many times, so you happen to know the schedules of the traffic lights. Now the question is, how quickly can you get to work?\n\n-----Input-----\nThe first line contains a single integer $n$, the length of the road in kilometers ($1 \\leq n \\leq 16$). Each of the next $n-1$ lines contains $3$ integers $t_ i$, $g_ i$ and $r_ i$, the first time the $i$-th light will switch from red to green after the moment you start driving the car; the green light duration, and the red light duration ($40\\leq g_ i,r_ i\\leq 50$; $0 \\leq t_ i < g_ i+r_ i$). Times are given in seconds.\n\nYou may assume that any light with $t_ i > r_ i$ is green at the time you start driving the car, and switches to red $t_ i - r_ i$ seconds later.\n\n-----Output-----\nOutput the minimum time required to reach the end of the road. Answers within a relative or absolute error of $10^{-6}$ will be accepted.\n\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\n44.72135955\n\nSample Input 2:\n2\n50 45 45\nSample Output 2:\n68.52419365\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8891"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8891", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["are", 1], ["at", 1], ["home", 1], ["and", 1], ["about", 1], ["to", 1], ["drive", 1], ["to", 1], ["work", 1], ["the", 1], ["road", 1], ["you", 1], ["will", 1], ["take", 1], ["is", 1], ["a", 1], ["straight", 1], ["line", 1], ["with", 1], ["no", 1], ["speed", 1], ["limit", 1], ["there", 1], ["are", 1], ["however", 1], ["traffic", 1], ["lights", 1], ["precisely", 1], ["every", 1], ["kilometer", 1], ["and", 1], ["you", 1], ["can", 1], ["not", 1], ["pass", 1], ["a", 1], ["red", 1], ["light", 1], ["the", 1], ["lights", 1], ["change", 1], ["instantaneously", 1], ["between", 1], ["green", 1], ["and", 1], ["red", 1], ["and", 1], ["you", 1], ["can", 1], ["pass", 1], ["a", 1], ["light", 1], ["whenever", 1], ["it", 1], ["is", 1], ["green", 1], ["you", 1], ["can", 1], ["also", 1], ["pass", 1], ["through", 1], ["a", 1], ["light", 1], ["at", 1], ["the", 1], ["exact", 1], ["moment", 1], ["of", 1], ["changing", 1], ["colour", 1], ["there", 1], ["are", 1], ["no", 1], ["traffic", 1], ["lights", 1], ["at", 1], ["the", 1], ["start", 1], ["or", 1], ["the", 1], ["end", 1], ["of", 1], ["the", 1], ["road", 1], ["now", 1], ["your", 1], ["car", 1], ["is", 1], ["special", 1], ["it", 1], ["is", 1], ["an", 1], ["icar", 1], ["the", 1], ["first", 1], ["orange", 1], ["car", 1], ["and", 1], ["it", 1], ["has", 1], ["only", 1], ["one", 1], ["button", 1], ["when", 1], ["you", 1], ["hold", 1], ["down", 0], ["the", 0], ["button", 0], ["the", 0], ["car", 0], ["accelerates", 0], ["at", 0], ["a", 0], ["constant", 0], ["rate", 0], ["of", 0], ["1", 0], ["mathrm", 0], ["m", 0], ["mathrm", 0], ["s", 0], ["2", 0], ["when", 1], ["you", 1], ["release", 1], ["the", 1], ["button", 1], ["the", 1], ["car", 1], ["stops", 1], ["on", 1], ["the", 1], ["spot", 1], ["you", 1], ["have", 1], ["driven", 1], ["to", 1], ["work", 1], ["many", 1], ["times", 0], ["so", 0], ["you", 0], ["happen", 0], ["to", 0], ["know", 0], ["the", 0], ["schedules", 0], ["of", 0], ["the", 0], ["traffic", 0], ["lights", 0], ["now", 0], ["the", 0], ["question", 0], ["is", 0], ["how", 0], ["quickly", 0], ["can", 0], ["you", 0], ["get", 0], ["to", 0], ["work", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["road", 0], ["in", 0], ["kilometers", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["16", 0], ["each", 0], ["of", 0], ["the", 0], ["next", 0], ["n", 0], ["1", 0], ["lines", 0], ["contains", 0], ["3", 0], ["integers", 0], ["t", 0], ["i", 0], ["g", 0], ["i", 0], ["and", 0], ["r", 0], ["i", 0], ["the", 0], ["first", 0], ["time", 0], ["the", 0], ["i", 0], ["th", 0], ["light", 1], ["will", 1], ["switch", 1], ["from", 1], ["red", 1], ["to", 1], ["green", 1], ["after", 1], ["the", 1], ["moment", 1], ["you", 1], ["start", 1], ["driving", 1], ["the", 0], ["car", 0], ["the", 0], ["green", 0], ["light", 0], ["duration", 0], ["and", 0], ["the", 0], ["red", 0], ["light", 0], ["duration", 0], ["40", 0], ["leq", 0], ["g", 0], ["i", 0], ["r", 0], ["i", 0], ["leq", 0], ["50", 0], ["0", 0], ["leq", 0], ["t", 0], ["i", 0], ["g", 0], ["i", 0], ["r", 0], ["i", 0], ["times", 0], ["are", 0], ["given", 0], ["in", 0], ["seconds", 0], ["you", 0], ["may", 0], ["assume", 0], ["that", 0], ["any", 0], ["light", 0], ["with", 0], ["t", 0], ["i", 0], ["r", 0], ["i", 0], ["is", 1], ["green", 1], ["at", 0], ["the", 0], ["time", 0], ["you", 0], ["start", 0], ["driving", 0], ["the", 0], ["car", 0], ["and", 0], ["switches", 0], ["to", 0], ["red", 0], ["t", 0], ["i", 0], ["r", 0], ["i", 0], ["seconds", 0], ["later", 0], ["output", 0], ["output", 1], ["the", 1], ["minimum", 1], ["time", 1], ["required", 1], ["to", 1], ["reach", 1], ["the", 1], ["end", 0], ["of", 0], ["the", 0], ["road", 0], ["answers", 2], ["within", 0], ["a", 0], ["relative", 0], ["or", 0], ["absolute", 0], ["error", 0], ["of", 0], ["10", 0], ["6", 0], ["will", 0], ["be", 0], ["accepted", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["1", 0], ["sample", 0], ["output", 0], ["1", 0], ["44", 0], ["72135955", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["50", 0], ["45", 0], ["45", 0], ["sample", 0], ["output", 0], ["2", 0], ["68", 0], ["52419365", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.459214501510574, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.45770392749244715, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6647230320699709, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6647230320699709, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.459214501510574, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.45770392749244715, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6647230320699709, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6647230320699709, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nArghs! Yet again, all the clocks in Petra’s home show the wrong time due to a power outage that occurred while she was sleeping. This means she has to spend her day resetting all the clocks to the correct time. Now, you might not consider this a big deal. After all, how many clocks does any single household really have? Well, Petra just so happens to be a collector of clocks. She literally has hundreds of clocks – and that is just in her bedroom! Thus, it is understandable that she does not look forward to all this resetting. \n\nYou, as her friend, would prefer if she did not need to spend her entire day resetting all her clocks. Especially since this means she would not have any time to play with you! If only you could construct some automated way of entering the correct time into all the clocks, perhaps through some kind of computer code...\n\nA-ha, of course! You can write a program to determine how to set the correct time as quickly as possible!\n\nEach clock has a display of $4$ digits: two are used to display the hour (between 00 and 23), and two are used to display the minute (between 00 and 59). The time can be changed by selecting a digit and either decreasing or increasing by $1$. Decreasing a digit that is $0$, it is turned into $9$, and increasing a digit $9$ turns it into $0$. However, the clock can not display invalid times. This means that at any given time, the hour must be between 00 and 23 and the minute between 00 and 59.\n\nWrite a program that, given the original time of a clock and the current time, determines how to set the clock correctly.\n\n-----Input-----\nThe input consists:\n - one line with the time that the clock is currently set to.\n - one line with the current time.\n\nEach time has the format hh:mm, where hh is a two-digit number between 00 and 23, and mm is a two-digit number between 00 and 59.\n\n-----Output-----\nThe first line contains the number of different times seen on the clock when setting it correctly. Then for each time output it on the same format as above hh:mm on a separate line. Include both the original time and the final time.\n\n-----Examples-----\nSample Input 1:\n00:00\n01:01\nSample Output 1:\n3\n00:00\n01:00\n01:01\n\nSample Input 2:\n00:08\n00:00\nSample Output 2:\n3\n00:08\n00:09\n00:00\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9113"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9113", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["arghs", 1], ["yet", 1], ["again", 1], ["all", 1], ["the", 1], ["clocks", 1], ["in", 1], ["petra’s", 1], ["home", 1], ["show", 1], ["the", 1], ["wrong", 1], ["time", 1], ["due", 1], ["to", 1], ["a", 1], ["power", 1], ["outage", 1], ["that", 1], ["occurred", 1], ["while", 1], ["she", 1], ["was", 1], ["sleeping", 1], ["this", 1], ["means", 1], ["she", 1], ["has", 1], ["to", 1], ["spend", 1], ["her", 1], ["day", 1], ["resetting", 1], ["all", 1], ["the", 1], ["clocks", 1], ["to", 1], ["the", 1], ["correct", 1], ["time", 1], ["now", 1], ["you", 1], ["might", 1], ["not", 1], ["consider", 1], ["this", 1], ["a", 1], ["big", 1], ["deal", 1], ["after", 1], ["all", 1], ["how", 1], ["many", 1], ["clocks", 1], ["does", 1], ["any", 1], ["single", 1], ["household", 1], ["really", 1], ["have", 1], ["well", 1], ["petra", 1], ["just", 1], ["so", 1], ["happens", 1], ["to", 1], ["be", 1], ["a", 1], ["collector", 1], ["of", 1], ["clocks", 1], ["she", 1], ["literally", 1], ["has", 1], ["hundreds", 1], ["of", 1], ["clocks", 1], ["–", 1], ["and", 1], ["that", 1], ["is", 1], ["just", 1], ["in", 1], ["her", 1], ["bedroom", 1], ["thus", 1], ["it", 1], ["is", 0], ["understandable", 0], ["that", 0], ["she", 0], ["does", 0], ["not", 0], ["look", 0], ["forward", 0], ["to", 0], ["all", 0], ["this", 0], ["resetting", 0], ["you", 0], ["as", 0], ["her", 0], ["friend", 0], ["would", 0], ["prefer", 0], ["if", 0], ["she", 0], ["did", 0], ["not", 0], ["need", 0], ["to", 0], ["spend", 0], ["her", 0], ["entire", 0], ["day", 0], ["resetting", 0], ["all", 0], ["her", 0], ["clocks", 0], ["especially", 0], ["since", 0], ["this", 0], ["means", 0], ["she", 0], ["would", 0], ["not", 0], ["have", 0], ["any", 0], ["time", 0], ["to", 0], ["play", 0], ["with", 0], ["you", 0], ["if", 0], ["only", 0], ["you", 0], ["could", 0], ["construct", 0], ["some", 0], ["automated", 0], ["way", 0], ["of", 0], ["entering", 0], ["the", 0], ["correct", 0], ["time", 0], ["into", 0], ["all", 0], ["the", 0], ["clocks", 0], ["perhaps", 0], ["through", 0], ["some", 0], ["kind", 0], ["of", 0], ["computer", 0], ["code", 0], ["a", 1], ["ha", 1], ["of", 1], ["course", 1], ["you", 1], ["can", 1], ["write", 1], ["a", 1], ["program", 1], ["to", 1], ["determine", 1], ["how", 1], ["to", 1], ["set", 1], ["the", 1], ["correct", 1], ["time", 1], ["as", 1], ["quickly", 1], ["as", 1], ["possible", 1], ["each", 1], ["clock", 1], ["has", 1], ["a", 1], ["display", 1], ["of", 1], ["4", 1], ["digits", 1], ["two", 1], ["are", 1], ["used", 1], ["to", 1], ["display", 1], ["the", 1], ["hour", 1], ["between", 1], ["00", 1], ["and", 1], ["23", 1], ["and", 1], ["two", 1], ["are", 1], ["used", 1], ["to", 1], ["display", 1], ["the", 1], ["minute", 1], ["between", 1], ["00", 1], ["and", 1], ["59", 1], ["the", 1], ["time", 1], ["can", 1], ["be", 1], ["changed", 1], ["by", 1], ["selecting", 1], ["a", 1], ["digit", 1], ["and", 1], ["either", 1], ["decreasing", 1], ["or", 1], ["increasing", 1], ["by", 1], ["1", 1], ["decreasing", 1], ["a", 1], ["digit", 1], ["that", 1], ["is", 1], ["0", 1], ["it", 1], ["is", 1], ["turned", 1], ["into", 1], ["9", 1], ["and", 1], ["increasing", 1], ["a", 1], ["digit", 1], ["9", 1], ["turns", 1], ["it", 1], ["into", 1], ["0", 1], ["however", 1], ["the", 1], ["clock", 1], ["can", 1], ["not", 1], ["display", 1], ["invalid", 1], ["times", 1], ["this", 1], ["means", 1], ["that", 1], ["at", 1], ["any", 1], ["given", 1], ["time", 1], ["the", 1], ["hour", 1], ["must", 1], ["be", 1], ["between", 1], ["00", 1], ["and", 1], ["23", 1], ["and", 1], ["the", 1], ["minute", 1], ["between", 1], ["00", 1], ["and", 1], ["59", 1], ["write", 1], ["a", 1], ["program", 1], ["that", 1], ["given", 1], ["the", 1], ["original", 1], ["time", 1], ["of", 1], ["a", 1], ["clock", 0], ["and", 0], ["the", 0], ["current", 0], ["time", 0], ["determines", 0], ["how", 0], ["to", 0], ["set", 0], ["the", 0], ["clock", 0], ["correctly", 0], ["input", 0], ["the", 0], ["input", 0], ["consists", 0], ["one", 1], ["line", 1], ["with", 1], ["the", 1], ["time", 1], ["that", 1], ["the", 1], ["clock", 1], ["is", 1], ["currently", 1], ["set", 1], ["to", 1], ["one", 1], ["line", 1], ["with", 1], ["the", 1], ["current", 1], ["time", 1], ["each", 1], ["time", 1], ["has", 1], ["the", 1], ["format", 1], ["hh", 1], ["mm", 1], ["where", 1], ["hh", 1], ["is", 1], ["a", 1], ["two", 1], ["digit", 1], ["number", 1], ["between", 1], ["00", 1], ["and", 1], ["23", 0], ["and", 0], ["mm", 0], ["is", 0], ["a", 0], ["two", 0], ["digit", 0], ["number", 0], ["between", 0], ["00", 0], ["and", 0], ["59", 0], ["output", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["the", 1], ["number", 1], ["of", 1], ["different", 1], ["times", 1], ["seen", 1], ["on", 1], ["the", 1], ["clock", 1], ["when", 1], ["setting", 1], ["it", 1], ["correctly", 1], ["then", 1], ["for", 1], ["each", 1], ["time", 1], ["output", 1], ["it", 1], ["on", 1], ["the", 1], ["same", 1], ["format", 1], ["as", 1], ["above", 1], ["hh", 1], ["mm", 1], ["on", 1], ["a", 0], ["separate", 0], ["line", 0], ["include", 0], ["both", 0], ["the", 0], ["original", 0], ["time", 0], ["and", 0], ["the", 0], ["final", 0], ["time", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["00", 0], ["00", 0], ["01", 0], ["01", 0], ["sample", 0], ["output", 0], ["1", 0], ["3", 0], ["00", 0], ["00", 0], ["01", 0], ["00", 0], ["01", 0], ["01", 0], ["sample", 0], ["input", 0], ["2", 0], ["00", 0], ["08", 0], ["00", 0], ["00", 0], ["sample", 0], ["output", 0], ["2", 0], ["3", 0], ["00", 0], ["08", 0], ["00", 0], ["09", 0], ["00", 0], ["00", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6604215456674473, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6604215456674473, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7517084282460137, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7517084282460137, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6604215456674473, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6604215456674473, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7517084282460137, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7517084282460137, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nIvan is planning a large European tour with his jazz band. There are a total of $n$ cities in Europe, numbered with integers $1$ through $n$. Ivan is planning $d$ concerts in cities $a_1, a_2, \\dots , a_ d$ in that exact order, never having two consecutive concerts in the same city ($a_ i \\not= a_{i+1}$), possibly visiting some of the cities many times and, finally, ending the tour in the same city where it begun ($a_1 = a_ d$).\n\nIvan always takes a direct flight between cities $a_ i$ and $a_{i+1}$. However, he is trying to be smart with his ticket purchases in order to save money. As you may know, airlines price tickets based on supply and demand and, for example, it may be possible that one-way tickets are more expensive than round trip tickets between same cities. Generally, there are two kinds of tickets available for purchase:\n - One-way ticket from the origin city $a$ to destination city $b$ can be used to fly from $a$ to $b$ once (but not in the opposite direction).\n - Round trip ticket from the origin city $a$ to destination city $b$ can be used to fly once from $a$ to $b$, and once from $b$ to $a$. The return segment (from $b$ to $a$) does not need to be used. However, the segments have to be flown in order – it is not allowed for Ivan to use the return segment of $a$ ticket to fly from $b$ to a unless he has used the first segment of that ticket to fly from $a$ to $b$ before.\n\nYou are given a list of available airfares, find the least amount of money Ivan needs to spend on tickets to be able to complete his journey. Ivan can purchase an arbitrary number of tickets for each airfare. Once again, Ivan needs to take a direct flight from $a_ i$ to $a_{i+1}$ for every $i = 1, 2, \\dots , d - 1$. You may assume that is possible to complete the journey using the airfares.\n\n-----Input-----\nThe first line contains two integers $n$ and $d$ ($2 \\le n, d \\le 300000$) – the number of cities in Europe and the number of concerts. The following line contains integers $a_1, a_2, \\dots , a_ d$ ($1 \\le ai \\le n, ai \\not= a_{i+1}, a_1 = a_ d$) – the planned tour schedule.\n\nThe following line contains an integer $m$ ($3 \\le m \\le 300000$) – the number of airfares. The $k$-th of the following $m$ lines contains four tokens $s_ k$, $d_ k$, $t_ k$, $p_ k$, describing the $k$-th airfare as follows:\n - $s_ k$ and $d_ k$ ($1 \\le s_ k, d_ k \\le n, s_ k \\not= d_ k$) are the origin and the destination city respectively,\n - $t_ k$ is an uppercase letter “O” or “R” denoting a one-way or round trip ticket respectively,\n - $p_ k$ ($1 \\le pk \\le 10^9$) is the ticket price, an integer.\n\n-----Output-----\nOutput the least amount of money necessary to purchase tickets that allow Ivan to complete the planned tour.\n\n-----Examples-----\nSample Input:\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\nSample Output:\n10\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6013"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6013", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["ivan", 1], ["is", 1], ["planning", 1], ["a", 1], ["large", 1], ["european", 1], ["tour", 1], ["with", 1], ["his", 1], ["jazz", 1], ["band", 1], ["there", 1], ["are", 1], ["a", 1], ["total", 1], ["of", 1], ["n", 1], ["cities", 1], ["in", 1], ["europe", 1], ["numbered", 1], ["with", 0], ["integers", 0], ["1", 0], ["through", 0], ["n", 0], ["ivan", 0], ["is", 0], ["planning", 0], ["d", 0], ["concerts", 0], ["in", 0], ["cities", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["dots", 0], ["a", 0], ["d", 0], ["in", 1], ["that", 0], ["exact", 0], ["order", 0], ["never", 0], ["having", 0], ["two", 0], ["consecutive", 0], ["concerts", 0], ["in", 0], ["the", 0], ["same", 0], ["city", 0], ["a", 0], ["i", 0], ["not", 0], ["a", 0], ["i", 0], ["1", 1], ["possibly", 1], ["visiting", 1], ["some", 1], ["of", 1], ["the", 1], ["cities", 1], ["many", 1], ["times", 1], ["and", 0], ["finally", 0], ["ending", 0], ["the", 0], ["tour", 0], ["in", 0], ["the", 0], ["same", 0], ["city", 0], ["where", 0], ["it", 0], ["begun", 0], ["a", 0], ["1", 0], ["a", 0], ["d", 0], ["ivan", 0], ["always", 0], ["takes", 0], ["a", 0], ["direct", 0], ["flight", 0], ["between", 0], ["cities", 0], ["a", 0], ["i", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 1], ["however", 1], ["he", 1], ["is", 1], ["trying", 1], ["to", 1], ["be", 1], ["smart", 1], ["with", 1], ["his", 1], ["ticket", 1], ["purchases", 1], ["in", 1], ["order", 1], ["to", 1], ["save", 1], ["money", 1], ["as", 1], ["you", 1], ["may", 1], ["know", 1], ["airlines", 1], ["price", 1], ["tickets", 1], ["based", 1], ["on", 1], ["supply", 1], ["and", 1], ["demand", 1], ["and", 1], ["for", 1], ["example", 1], ["it", 1], ["may", 1], ["be", 1], ["possible", 1], ["that", 1], ["one", 1], ["way", 0], ["tickets", 0], ["are", 0], ["more", 0], ["expensive", 0], ["than", 0], ["round", 0], ["trip", 0], ["tickets", 0], ["between", 0], ["same", 0], ["cities", 0], ["generally", 0], ["there", 0], ["are", 0], ["two", 0], ["kinds", 0], ["of", 0], ["tickets", 0], ["available", 0], ["for", 0], ["purchase", 0], ["one", 1], ["way", 1], ["ticket", 2], ["from", 2], ["the", 2], ["origin", 1], ["city", 1], ["a", 1], ["to", 1], ["destination", 1], ["city", 1], ["b", 1], ["can", 1], ["be", 1], ["used", 1], ["to", 1], ["fly", 1], ["from", 1], ["a", 1], ["to", 1], ["b", 1], ["once", 1], ["but", 1], ["not", 1], ["in", 1], ["the", 1], ["opposite", 1], ["direction", 1], ["round", 1], ["trip", 1], ["ticket", 2], ["from", 2], ["the", 2], ["origin", 1], ["city", 1], ["a", 1], ["to", 1], ["destination", 1], ["city", 1], ["b", 1], ["can", 1], ["be", 1], ["used", 1], ["to", 1], ["fly", 1], ["once", 1], ["from", 1], ["a", 1], ["to", 1], ["b", 1], ["and", 1], ["once", 1], ["from", 1], ["b", 1], ["to", 1], ["a", 1], ["the", 1], ["return", 1], ["segment", 1], ["from", 1], ["b", 1], ["to", 1], ["a", 1], ["does", 1], ["not", 1], ["need", 1], ["to", 0], ["be", 0], ["used", 0], ["however", 0], ["the", 0], ["segments", 0], ["have", 0], ["to", 0], ["be", 0], ["flown", 0], ["in", 0], ["order", 0], ["–", 0], ["it", 1], ["is", 1], ["not", 1], ["allowed", 1], ["for", 1], ["ivan", 1], ["to", 1], ["use", 1], ["the", 1], ["return", 1], ["segment", 1], ["of", 1], ["a", 1], ["ticket", 1], ["to", 1], ["fly", 1], ["from", 1], ["b", 1], ["to", 1], ["a", 1], ["unless", 1], ["he", 1], ["has", 1], ["used", 1], ["the", 1], ["first", 1], ["segment", 1], ["of", 1], ["that", 1], ["ticket", 1], ["to", 1], ["fly", 1], ["from", 1], ["a", 1], ["to", 1], ["b", 1], ["before", 1], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["list", 1], ["of", 1], ["available", 1], ["airfares", 1], ["find", 1], ["the", 1], ["least", 1], ["amount", 1], ["of", 1], ["money", 1], ["ivan", 1], ["needs", 1], ["to", 1], ["spend", 1], ["on", 1], ["tickets", 1], ["to", 1], ["be", 1], ["able", 1], ["to", 1], ["complete", 1], ["his", 1], ["journey", 1], ["ivan", 1], ["can", 1], ["purchase", 1], ["an", 1], ["arbitrary", 1], ["number", 1], ["of", 1], ["tickets", 1], ["for", 1], ["each", 0], ["airfare", 0], ["once", 0], ["again", 0], ["ivan", 0], ["needs", 0], ["to", 0], ["take", 0], ["a", 0], ["direct", 0], ["flight", 0], ["from", 0], ["a", 0], ["i", 0], ["to", 0], ["a", 0], ["i", 0], ["1", 0], ["for", 0], ["every", 0], ["i", 0], ["1", 0], ["2", 0], ["dots", 0], ["d", 0], ["1", 1], ["you", 1], ["may", 0], ["assume", 0], ["that", 0], ["is", 0], ["possible", 0], ["to", 0], ["complete", 0], ["the", 0], ["journey", 0], ["using", 0], ["the", 0], ["airfares", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["d", 0], ["2", 0], ["le", 0], ["n", 0], ["d", 0], ["le", 0], ["300000", 0], ["–", 0], ["the", 1], ["number", 1], ["of", 1], ["cities", 1], ["in", 0], ["europe", 0], ["and", 0], ["the", 0], ["number", 0], ["of", 0], ["concerts", 0], ["the", 0], ["following", 0], ["line", 0], ["contains", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["dots", 0], ["a", 0], ["d", 0], ["1", 0], ["le", 0], ["ai", 0], ["le", 0], ["n", 0], ["ai", 0], ["not", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["1", 0], ["a", 0], ["d", 0], ["–", 0], ["the", 0], ["planned", 0], ["tour", 0], ["schedule", 0], ["the", 0], ["following", 0], ["line", 0], ["contains", 0], ["an", 0], ["integer", 0], ["m", 0], ["3", 0], ["le", 0], ["m", 0], ["le", 0], ["300000", 0], ["–", 0], ["the", 0], ["number", 0], ["of", 0], ["airfares", 0], ["the", 0], ["k", 0], ["th", 0], ["of", 0], ["the", 0], ["following", 0], ["m", 0], ["lines", 0], ["contains", 0], ["four", 0], ["tokens", 0], ["s", 0], ["k", 0], ["d", 0], ["k", 0], ["t", 0], ["k", 0], ["p", 0], ["k", 0], ["describing", 0], ["the", 0], ["k", 0], ["th", 0], ["airfare", 0], ["as", 0], ["follows", 0], ["s", 0], ["k", 0], ["and", 0], ["d", 0], ["k", 0], ["1", 0], ["le", 0], ["s", 0], ["k", 0], ["d", 0], ["k", 0], ["le", 0], ["n", 0], ["s", 0], ["k", 0], ["not", 0], ["d", 0], ["k", 0], ["are", 0], ["the", 0], ["origin", 0], ["and", 0], ["the", 0], ["destination", 0], ["city", 0], ["respectively", 0], ["t", 0], ["k", 0], ["is", 0], ["an", 0], ["uppercase", 0], ["letter", 0], ["“o”", 0], ["or", 0], ["“r”", 0], ["denoting", 0], ["a", 0], ["one", 0], ["way", 0], ["or", 0], ["round", 0], ["trip", 0], ["ticket", 0], ["respectively", 0], ["p", 0], ["k", 0], ["1", 0], ["le", 0], ["pk", 0], ["le", 0], ["10", 0], ["9", 0], ["is", 0], ["the", 0], ["ticket", 0], ["price", 0], ["an", 0], ["integer", 0], ["output", 0], ["output", 1], ["the", 1], ["least", 1], ["amount", 1], ["of", 1], ["money", 1], ["necessary", 0], ["to", 0], ["purchase", 0], ["tickets", 0], ["that", 0], ["allow", 0], ["ivan", 0], ["to", 0], ["complete", 0], ["the", 0], ["planned", 0], ["tour", 0], ["examples", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["4", 0], ["1", 0], ["2", 0], ["r", 0], ["6", 0], ["1", 0], ["2", 0], ["o", 0], ["3", 0], ["2", 0], ["1", 0], ["o", 0], ["3", 0], ["1", 0], ["2", 0], ["r", 0], ["5", 0], ["sample", 0], ["output", 0], ["10", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3963963963963964, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.390990990990991, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5784832451499118, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5784832451499118, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3963963963963964, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.390990990990991, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5784832451499118, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5784832451499118, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nConsider $n$ initial strings of lower case letters, where no initial string is a prefix of any other initial string. Now, consider choosing $k$ of the strings (no string more than once), and concatenating them together. You can make this many such composite strings:$n \\times (n-1) \\times (n-2) \\times \\ldots \\times (n-k+1)$\n\nConsider sorting all of the composite strings you can get via this process in alphabetical order. You are given a test composite string, which is guaranteed to belong on this list. Find the position of this test composite string in the alphabetized list of all composite strings, modulo $10^9+7$. The first composite string in the list is at position $1$.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line with two integers, first $n$ and then $k$ ($1 \\le k \\le n$), where $n$ is the number of initial strings, and $k$ is the number of initial strings you choose to form composite strings. The upper bounds of $n$ and $k$ are limited by the constraints on the strings, in the following paragraphs.\n\nEach of the next $n$ lines will contain a string, which will consist of one or more lower case letters $a..z$. These are the $n$ initial strings. It is guaranteed that none of the initial strings will be a prefix of any other of the initial strings.\n\nFinally, the last line will contain another string, consisting of only lower case letters $a..z$. This is the test composite string, the position of which in the sorted list you must find. This test composite string is guaranteed to be a concatenation of $k$ unique initial strings.\n\nThe sum of the lengths of all input strings, including the test string, will not exceed $10^6$ letters.\n\n-----Output-----\nOutput a single integer, which is the position in the list of sorted composite strings where the test composite string occurs. Output this number modulo $10^9+7$.\n\n-----Examples-----\nSample Input:\n5 3\na\nb\nc\nd\ne\ncad\nSample Output:\n26\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5991"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5991", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["consider", 0], ["n", 0], ["initial", 0], ["strings", 0], ["of", 0], ["lower", 0], ["case", 0], ["letters", 0], ["where", 0], ["no", 0], ["initial", 0], ["string", 0], ["is", 0], ["a", 0], ["prefix", 0], ["of", 0], ["any", 0], ["other", 0], ["initial", 0], ["string", 0], ["now", 0], ["consider", 0], ["choosing", 0], ["k", 0], ["of", 0], ["the", 0], ["strings", 0], ["no", 0], ["string", 0], ["more", 0], ["than", 0], ["once", 0], ["and", 0], ["concatenating", 0], ["them", 0], ["together", 0], ["you", 0], ["can", 0], ["make", 0], ["this", 0], ["many", 0], ["such", 0], ["composite", 0], ["strings", 0], ["n", 0], ["times", 0], ["n", 0], ["1", 0], ["times", 0], ["n", 0], ["2", 0], ["times", 0], ["ldots", 0], ["times", 0], ["n", 0], ["k", 0], ["1", 0], ["consider", 1], ["sorting", 1], ["all", 1], ["of", 1], ["the", 1], ["composite", 1], ["strings", 1], ["you", 1], ["can", 1], ["get", 1], ["via", 1], ["this", 1], ["process", 1], ["in", 1], ["alphabetical", 1], ["order", 1], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["test", 1], ["composite", 1], ["string", 1], ["which", 1], ["is", 1], ["guaranteed", 1], ["to", 1], ["belong", 1], ["on", 1], ["this", 1], ["list", 1], ["find", 1], ["the", 1], ["position", 1], ["of", 1], ["this", 1], ["test", 1], ["composite", 1], ["string", 1], ["in", 1], ["the", 1], ["alphabetized", 1], ["list", 1], ["of", 1], ["all", 1], ["composite", 1], ["strings", 1], ["modulo", 1], ["10", 1], ["9", 1], ["7", 0], ["the", 0], ["first", 0], ["composite", 0], ["string", 0], ["in", 0], ["the", 0], ["list", 0], ["is", 0], ["at", 0], ["position", 0], ["1", 0], ["input", 0], ["each", 52], ["input", 52], ["will", 52], ["consist", 52], ["of", 52], ["a", 52], ["single", 52], ["test", 52], ["case", 52], ["note", 22], ["that", 21], ["your", 21], ["program", 21], ["may", 14], ["be", 14], ["run", 14], ["multiple", 12], ["times", 11], ["on", 8], ["different", 7], ["inputs", 1], ["each", 1], ["test", 1], ["case", 1], ["will", 1], ["begin", 1], ["with", 1], ["a", 1], ["line", 1], ["with", 1], ["two", 1], ["integers", 1], ["first", 1], ["n", 1], ["and", 1], ["then", 1], ["k", 1], ["1", 1], ["le", 1], ["k", 1], ["le", 1], ["n", 1], ["where", 1], ["n", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["initial", 1], ["strings", 1], ["and", 1], ["k", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["initial", 1], ["strings", 1], ["you", 1], ["choose", 1], ["to", 1], ["form", 1], ["composite", 1], ["strings", 1], ["the", 1], ["upper", 1], ["bounds", 1], ["of", 1], ["n", 1], ["and", 1], ["k", 1], ["are", 1], ["limited", 1], ["by", 1], ["the", 1], ["constraints", 1], ["on", 1], ["the", 1], ["strings", 1], ["in", 1], ["the", 1], ["following", 1], ["paragraphs", 1], ["each", 1], ["of", 1], ["the", 1], ["next", 1], ["n", 1], ["lines", 1], ["will", 1], ["contain", 1], ["a", 1], ["string", 1], ["which", 1], ["will", 1], ["consist", 1], ["of", 1], ["one", 1], ["or", 1], ["more", 1], ["lower", 1], ["case", 1], ["letters", 1], ["a", 1], ["z", 1], ["these", 1], ["are", 1], ["the", 1], ["n", 1], ["initial", 1], ["strings", 1], ["it", 1], ["is", 1], ["guaranteed", 1], ["that", 1], ["none", 1], ["of", 1], ["the", 1], ["initial", 1], ["strings", 1], ["will", 1], ["be", 1], ["a", 1], ["prefix", 1], ["of", 1], ["any", 1], ["other", 1], ["of", 1], ["the", 1], ["initial", 1], ["strings", 1], ["finally", 1], ["the", 1], ["last", 1], ["line", 1], ["will", 1], ["contain", 1], ["another", 1], ["string", 1], ["consisting", 1], ["of", 1], ["only", 1], ["lower", 1], ["case", 1], ["letters", 1], ["a", 1], ["z", 1], ["this", 1], ["is", 1], ["the", 1], ["test", 1], ["composite", 1], ["string", 1], ["the", 1], ["position", 1], ["of", 1], ["which", 1], ["in", 1], ["the", 1], ["sorted", 1], ["list", 1], ["you", 1], ["must", 1], ["find", 1], ["this", 1], ["test", 1], ["composite", 1], ["string", 1], ["is", 1], ["guaranteed", 1], ["to", 1], ["be", 1], ["a", 1], ["concatenation", 1], ["of", 1], ["k", 1], ["unique", 1], ["initial", 1], ["strings", 1], ["the", 1], ["sum", 1], ["of", 1], ["the", 1], ["lengths", 1], ["of", 1], ["all", 1], ["input", 1], ["strings", 0], ["including", 0], ["the", 0], ["test", 0], ["string", 0], ["will", 0], ["not", 0], ["exceed", 0], ["10", 0], ["6", 0], ["letters", 0], ["output", 0], ["output", 1], ["a", 1], ["single", 1], ["integer", 1], ["which", 1], ["is", 1], ["the", 1], ["position", 1], ["in", 1], ["the", 1], ["list", 1], ["of", 1], ["sorted", 1], ["composite", 1], ["strings", 1], ["where", 1], ["the", 0], ["test", 0], ["composite", 0], ["string", 0], ["occurs", 0], ["output", 0], ["this", 0], ["number", 0], ["modulo", 0], ["10", 0], ["9", 0], ["7", 0], ["examples", 0], ["sample", 0], ["input", 0], ["5", 0], ["3", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["cad", 0], ["sample", 0], ["output", 0], ["26", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7027777777777777, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6500493719243718, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7768817204301075, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7258542308945535, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6527777777777778, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6479662698412698, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.728494623655914, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7238383256528417, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nFrosh commencing their studies at Waterloo have diverse interests, as evidenced by their desire to take various combinations of courses from among those available.\n\nUniversity administrators are uncomfortable with this situation, and therefore wish to offer a conformity prize to frosh who choose one of the most popular combinations of courses. How many frosh will win the prize?\n\n-----Input-----\nThe input begins with an integer $1 \\leq n \\leq 10000$, the number of frosh. For each frosh, a line follows containing the course numbers of five distinct courses selected by the frosh. Each course number is an integer between $100$ and $499$.\n\n-----Output-----\nThe popularity of a combination is the number of frosh selecting exactly the same combination of courses. A combination of courses is considered most popular if no other combination has higher popularity. Output a single line giving the total number of students taking some combination of courses that is most popular.\n\n-----Examples-----\nSample Input:\n3\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100\nSample Output:\n2\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7531"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7531", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["frosh", 1], ["commencing", 1], ["their", 1], ["studies", 1], ["at", 1], ["waterloo", 1], ["have", 1], ["diverse", 1], ["interests", 1], ["as", 1], ["evidenced", 1], ["by", 1], ["their", 1], ["desire", 1], ["to", 1], ["take", 1], ["various", 1], ["combinations", 1], ["of", 1], ["courses", 1], ["from", 1], ["among", 1], ["those", 1], ["available", 1], ["university", 1], ["administrators", 1], ["are", 1], ["uncomfortable", 1], ["with", 1], ["this", 1], ["situation", 1], ["and", 1], ["therefore", 1], ["wish", 1], ["to", 1], ["offer", 1], ["a", 1], ["conformity", 1], ["prize", 1], ["to", 1], ["frosh", 1], ["who", 1], ["choose", 1], ["one", 1], ["of", 1], ["the", 1], ["most", 0], ["popular", 0], ["combinations", 0], ["of", 0], ["courses", 0], ["how", 0], ["many", 0], ["frosh", 0], ["will", 0], ["win", 0], ["the", 0], ["prize", 0], ["input", 0], ["the", 0], ["input", 0], ["begins", 0], ["with", 0], ["an", 0], ["integer", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["10000", 1], ["the", 1], ["number", 1], ["of", 1], ["frosh", 1], ["for", 1], ["each", 1], ["frosh", 1], ["a", 1], ["line", 1], ["follows", 1], ["containing", 1], ["the", 1], ["course", 1], ["numbers", 1], ["of", 1], ["five", 1], ["distinct", 1], ["courses", 1], ["selected", 1], ["by", 1], ["the", 0], ["frosh", 0], ["each", 0], ["course", 0], ["number", 0], ["is", 0], ["an", 0], ["integer", 0], ["between", 0], ["100", 0], ["and", 0], ["499", 0], ["output", 0], ["the", 2], ["popularity", 2], ["of", 2], ["a", 2], ["combination", 2], ["is", 2], ["the", 2], ["number", 2], ["of", 2], ["frosh", 2], ["selecting", 2], ["exactly", 2], ["the", 2], ["same", 2], ["combination", 2], ["of", 2], ["courses", 2], ["a", 2], ["combination", 2], ["of", 2], ["courses", 0], ["is", 0], ["considered", 0], ["most", 0], ["popular", 0], ["if", 0], ["no", 0], ["other", 0], ["combination", 0], ["has", 0], ["higher", 0], ["popularity", 0], ["output", 2], ["a", 2], ["single", 2], ["line", 2], ["giving", 2], ["the", 2], ["total", 2], ["number", 0], ["of", 0], ["students", 0], ["taking", 0], ["some", 0], ["combination", 0], ["of", 0], ["courses", 0], ["that", 0], ["is", 0], ["most", 0], ["popular", 0], ["examples", 0], ["sample", 0], ["input", 0], ["3", 0], ["100", 0], ["101", 0], ["102", 0], ["103", 0], ["488", 0], ["100", 0], ["200", 0], ["300", 0], ["101", 0], ["102", 0], ["103", 0], ["102", 0], ["101", 0], ["488", 0], ["100", 0], ["sample", 0], ["output", 0], ["2", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5371428571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.46, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7593582887700535, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6229946524064172, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5371428571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.46, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7593582887700535, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6229946524064172, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nSagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l — left, s — straight, r — right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p — for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 0 0 1\n\nOutput\nYES\n\nInput\n0 1 1 0\n1 0 1 0\n1 1 0 0\n0 0 0 1\n\nOutput\nNO\n\nInput\n1 0 0 0\n0 0 0 1\n0 0 0 0\n1 0 1 0\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example, some accidents are possible because cars of part 1 can hit pedestrians of parts 1 and 4. Also, cars of parts 2 and 3 can hit pedestrians of part 4.\n\nIn the second example, no car can pass the pedestrian crossing of part 4 which is the only green pedestrian light. So, no accident can occur.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["lanes = []\n\nfor i in range(4):\n\tlanes.append(list(map(int, input().split())))\n\nlanes.extend(lanes)\n\nfor i in range(4):\n\tln = lanes[i]\n\tif (ln[3] and (ln[0] or ln[1] or ln[2])) or \\\n\t\t\t(ln[0] and lanes[i + 3][3]) or \\\n\t\t\t(ln[1] and lanes[i + 2][3]) or \\\n\t\t\t(ln[2] and lanes[i + 1][3]):\n\t\tprint('YES')\n\t\tbreak\nelse:\n\tprint('NO')\n", "L = [0, 4, 1, 2, 3]\nR = [0, 2, 3, 4, 1]\nS = [0, 3, 4, 1, 2]\n\nH = [0, 0, 0, 0, 0]\nP = H[:]\nfor i in range(1, 5):\n\tl, s, r, p = list(map(int, input().split()))\n\tP[i] = p\n\tif 1 in [l, s, r]:\n\t\tH[i] = 1\n\tif l:\n\t\tH[L[i]] = 1\n\tif s:\n\t\tH[S[i]] = 1\n\tif r:\n\t\tH[R[i]] = 1\nans = \"NO\"\nfor i in range(1, 5):\n\tif P[i] and H[i]:\n\t\tans = \"YES\"\nprint(ans)\n\n", "def booly(s):\n\treturn bool(int(s))\n\na = [None]*4;\na[0] = list(map(booly, input().split()))\na[1] = list(map(booly, input().split()))\na[2] = list(map(booly, input().split()))\na[3] =list( map(booly, input().split()))\n\nacc = False\n\nfor i in range(4):\n\tif (a[i][3] and (a[i][0] or a[i][1] or a[i][2])):\n\t\tacc = True\n\n\tif (a[i][3] and a[(i+1)%4][0]):\n\t\tacc = True\n\t\t\n\tif (a[i][3] and a[(i-1)%4][2]):\n\t\tacc = True\n\n\tif (a[i][3] and a[(i+2)%4][1]):\n\t\tacc = True\n\nif acc:\n\tprint(\"YES\");\nelse:\n\tprint(\"NO\");\n", "p = [list(map(int, input().split())) for i in range(4)]\nlog = False\nfor i in range(4):\n\tif p[i][3] == 1 and (p[i - 1][2] + p[(i + 1) % 4][0] + p[(i + 2) % 4][1] + p[i][1] + p[i][0] + p[i][2] > 0):\n\t\tlog = True\nif log:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n\n", "a, b, c, d = [], [], [], []\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nd = list(map(int, input().split()))\nst = False\nif a[3] == 1:\n\tif 1 in a[:3] or b[0] or c[1] or d[2]:\n\t\tst = True\nif b[3] == 1:\n\tif 1 in b[:3] or a[2] or c[0] or d[1]:\n\t\tst = True\nif c[3] == 1:\n\tif 1 in c[:3] or a[1] or b[2] or d[0]:\n\t\tst = True\nif d[3] == 1:\n\tif 1 in d[:3] or a[0] or b[1] or c[2]:\n\t\tst = True\nprint('YES' if st else 'NO')\n", "arr = [list() for i in range(4)]\narrp = []\nfor i in range(4):\n\tl, s, r, p = [int(i) for i in input().split()]\n\tarr[i].extend([l, s, r])\n\tarr[[3, i - 1][i > 0]].append(l)\n\tarr[[0, i + 1][i < 3]].append(r)\n\tarr[(i + 2) % 4].append(s)\n\tarrp.append(p)\nfor i in range(4):\n\tif arrp[i]:\n\t\tif 1 in arr[i]:\n\t\t\tprint('YES')\n\t\t\tbreak\nelse:\n\tprint('NO')\n", "l = []\nfor i in range(4):\n\tl.append(list(map(int, input().split())))\n\ndef go():\n\tfor i in range(4):\n\t\tif l[i][3] and (l[(i + 1) % 4][0] or l[(i + 3) % 4][2] or l[(i + 2) % 4][1] or l[i][0] or l[i][1] or l[i][2]):\n\t\t\treturn False\n\treturn True\n\nif go():\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")\n", "import sys\n\ninput = sys.stdin.readline\n\nroads = []\n\nfor i in range(4):\n\troads.append([int(x) for x in input().split()])\n\nclock = {}\ncclock = {}\nopp = {}\n\nclock[0] = 1\nclock[1] = 2\nclock[2] = 3\nclock[3] = 0\n\ncclock[1] = 0\ncclock[2] = 1\ncclock[3] = 2\ncclock[0] = 3\n\nopp[0] = 2\nopp[1] = 3\nopp[2] = 0\nopp[3] = 1\n\nfor i in range(4):\n\troad = roads[i]\n\tif road[3] == 1:\n\t\tif road[0] == 1 or road[1] == 1 or road[2] == 1:\n\t\t\tprint(\"YES\")\n\t\t\tbreak\n\t\tleft = roads[cclock[i]]\n\t\tright = roads[clock[i]]\n\t\tstraight = roads[opp[i]]\n\t\tif left[2] == 1 or right[0] == 1 or straight[1] == 1:\n\t\t\tprint(\"YES\")\n\t\t\tbreak\nelse:\n\tprint(\"NO\")\n", "def main():\n\tl1, s1, r1, p1 = map(int, input().split())\n\tl2, s2, r2, p2 = map(int, input().split())\n\tl3, s3, r3, p3 = map(int, input().split())\n\tl4, s4, r4, p4 = map(int, input().split())\n\tif p1 == 1:\n\t\tif s1 == 1 or l1 == 1 or r1 == 1 or s3 == 1 or l2 == 1 or r4 == 1:\n\t\t\treturn \"YES\"\n\tif p2 == 1:\n\t\tif s2 == 1 or l2 == 1 or r2 == 1 or s4 == 1 or l3 == 1 or r1 == 1:\n\t\t\treturn \"YES\"\n\tif p3 == 1:\n\t\tif s3 == 1 or l3 == 1 or r3 == 1 or s1 == 1 or l4 == 1 or r2 == 1:\n\t\t\treturn \"YES\"\n\tif p4 == 1:\n\t\tif s4 == 1 or l4 == 1 or r4 == 1 or s2 == 1 or l1 == 1 or r3 == 1:\n\t\t\treturn \"YES\"\n\treturn \"NO\"\nprint(main())\n", "L = [list(map(int, input().split())) for _ in range(4)]\nfor i in range(4):\n\tp = L[i][3]\n\tif p == 1:\n\t\tif i == 0:\n\t\t\tif L[0][0] == 1 or L[0][1] == 1 or L[0][2] == 1 or L[1][0] == 1 or L[2][1] == 1 or L[3][2] == 1:\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn\n\t\telif i == 1:\n\t\t\tif L[0][2] == 1 or L[1][0] == 1 or L[1][1] == 1 or L[1][2] == 1 or L[2][0] == 1 or L[3][1] == 1:\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn\n\t\telif i == 2:\n\t\t\tif L[0][1] == 1 or L[1][2] == 1 or L[2][0] == 1 or L[2][1] == 1 or L[2][2] == 1 or L[3][0] == 1:\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn\n\t\telse:\n\t\t\tif L[0][0] == 1 or L[1][1] == 1 or L[2][2] == 1 or L[3][0] == 1 or L[3][1] == 1 or L[3][2] == 1:\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn\nprint(\"NO\")\n", "def main():\n\ta = []\n\tfor i in range(4):\n\t\ta.append(tuple(map(int, input().split())))\n\n\tcar = [0] * 4\n\n\tfor i, (l, s, r, p) in enumerate(a):\n\n\t\tcar[i] += l\n\t\tcar[(i - 1) % 4] += l\n\n\t\tcar[i] += r\n\t\tcar[(i + 1) % 4] += r\n\n\t\tcar[i] += s\n\t\tcar[(i + 2) % 4] += s\n\n\tfor i in range(4):\n\t\tif car[i] > 0 and a[i][3] == 1:\n\t\t\tprint(\"YES\")\n\t\t\treturn\n\n\tprint(\"NO\")\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "a = [[int(i) for i in input().split()] for j in range(4)]\n\npesh = [0] * 4\navt = [0] * 4\n\nfor i in range(len(a)):\n\tif a[i][3]:\n\t\tpesh[i] = True\n\tif a[i][0]:\n\t\tavt[(i - 1) % 4] = True\n\t\tavt[i] = True\n\tif a[i][1]:\n\t\tavt[(i + 2) % 4] = True\n\t\tavt[i] = True\n\tif a[i][2]:\n\t\tavt[(i + 1) % 4] = True\n\t\tavt[i] = True\n\nfor i in range(4):\n\tif avt[i] and pesh[i]:\n\t\tprint(\"YES\")\n\t\tbreak\nelse:\n\tprint(\"NO\")\n", "#!/usr/bin/env python3\nimport sys\n\nls = []\nss = []\nrs = []\nps = []\n\nfor __ in range(4):\n\tl, s, r, p = [int(elem) == 1 for elem in sys.stdin.readline().split()]\n\tls.append(l)\n\tss.append(s)\n\trs.append(r)\n\tps.append(p)\n\ndef get(ary, indx):\n\treturn ary[indx % 4]\n\naccident = False\n\nfor indx in range(4):\n\taccident |= (ls[indx] or rs[indx] or ss[indx]) and ps[indx]\n\taccident |= ls[indx] and get(ps, indx - 1)\n\taccident |= ss[indx] and get(ps, indx + 2)\n\taccident |= rs[indx] and get(ps, indx + 1)\n\nif accident:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "L, S, R, P = 0, 1, 2, 3\ntr = []\n\nfor i in range(4):\n\ttr.append([int(x) for x in input().split()])\n\nacc = False\n\nfor i in range(4):\n\t# check l \n\tif tr[i][L] == 1 and (tr[i][P] == 1 or tr[(i+3)%4][P] == 1):\n\t\tacc = True\n\t\tbreak\n\tif tr[i][S] == 1 and (tr[i][P] == 1 or tr[(i+2)%4][P] == 1):\n\t\tacc = True\n\t\tbreak\n\tif tr[i][R] == 1 and (tr[i][P] == 1 or tr[(i+1)%4][P] == 1):\n\t\tacc = True\n\t\tbreak\n\nif acc: print(\"YES\")\nelse: print(\"NO\")\n", "# 500\n\nS=[]\nfor i in range(0,4):\n\tS.append([bool(int(x)) for x in input().split()])\ndef check():\n\tfor i in range (0,4):\n\t\tfor x in range(0,3):\n\t\t\tif S[i][x] and (S[(i+abs(x-3))%4][3] or S[i][3]):\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn\n\n\tprint(\"NO\")\n\ncheck()\n", "l,s,r,p = list(map(int,input().split()))\nl2,s2,r2,p2 = list(map(int,input().split()))\nl3,s3,r3,p3 = list(map(int,input().split()))\nl4,s4,r4,p4 = list(map(int,input().split()))\nif (l + s + r > 0 and p == 1) or (l2 + s2 + r2 > 0 and p2 == 1) or (l3 + s3 + r3 > 0 and p3 == 1) or (l4 + s4 + r4 > 0 and p4 == 1):\n\tprint(\"YES\")\nelse:\n\tif(l2 + s3 + r4 > 0 and p == 1) or (l3 + s4 + r > 0 and p2 == 1) or (l4 + s + r2 > 0 and p3 == 1) or (l + s2 + r3 > 0 and p4 == 1):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "l = [0] * 4\ns = [0] * 4\nr = [0] * 4\np = [0] * 4\nfor i in range(4):\n\tl[i], s[i], r[i], p[i] = map(int ,input().split())\nerror = 0\nfor i in range(4):\n\tif (l[i] + s[i] + r[i] > 0) and (p[i] == 1):\n\t\terror += 1\nfor i in range(4):\n\tj = 0\n\tif p[j] == 1:\n\t\tif (r[j + 3] == 0) and (s[j + 2] == 0) and (l[j + 1] == 0):\n\t\t\terror += 0\n\t\telse:\n\t\t\terror += 1\n\tl.append(l[j])\n\tl.pop(0)\n\ts.append(s[j])\n\ts.pop(0)\n\tr.append(r[j])\n\tr.pop(0)\n\tp.append(p[j])\n\tp.pop(0)\nif error > 0:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "S = []\nres = \"NO\"\nfor i in range(4):\n\tS.append(list(map(int, input().split())))\nfor i in range(4):\n\tp = sum(S[i]) - S[i][3] + S[(i + 1) % 4][0] + S[(i + 2) % 4][1] + S[(i + 3) % 4][2]\n\tif p > 0 and S[i][3] == 1:\n\t\tres = \"YES\"\n\t\tbreak\nprint(res)\n", "#A\n\na=input().split()\nb=input().split()\nc=input().split()\nd=input().split()\n\nlights=[a, b, c, d]\n\nfor i in range(0, 4):\n\tif int(lights[i][3])==1:\n\t\tif int(lights[i][0])==1 or int(lights[i][1])==1 or int(lights[i][2])==1:\n\t\t\tprint(\"YES\")\n\t\t\tbreak\n\t\tif i==0:\n\t\t\tif int(lights[1][0])==1 or int(lights[2][1])==1 or int(lights[3][2])==1:\n\t\t\t\tprint(\"YES\")\n\t\t\t\tbreak\n\t\tif i==1:\n\t\t\tif int(lights[2][0])==1 or int(lights[3][1])==1 or int(lights[0][2])==1:\n\t\t\t\tprint(\"YES\")\n\t\t\t\tbreak\n\t\tif i==2:\n\t\t\tif int(lights[3][0])==1 or int(lights[0][1])==1 or int(lights[1][2])==1:\n\t\t\t\tprint(\"YES\")\n\t\t\t\tbreak\n\t\tif i==3:\n\t\t\tif int(lights[0][0])==1 or int(lights[1][1])==1 or int(lights[2][2])==1:\n\t\t\t\tprint(\"YES\")\n\t\t\t\tbreak\n\tif i==3:\n\t\tprint(\"NO\")\n", "actual_vals = [0 for x in range(4)]\nrequired_vals = [1 for x in range(4)]\nl1,s1,r1,p1 = list(map(int,input().split()))\nif(l1==1):\n\trequired_vals[3] = 0\nif(s1==1):\n\trequired_vals[2] = 0\nif(r1==1):\n\trequired_vals[1] = 0\nif(l1==1 or r1==1 or s1==1):\n\trequired_vals[0] = 0\nactual_vals[0] = p1\n\nl2,s2,r2,p2 = list(map(int,input().split()))\nif(l2==1):\n\trequired_vals[0] = 0\nif(s2==1):\n\trequired_vals[3] = 0\nif(r2==1):\n\trequired_vals[2] = 0\nif(l2==1 or r2==1 or s2==1):\n\trequired_vals[1] = 0\nactual_vals[1] = p2\n\nl3,s3,r3,p3 = list(map(int,input().split()))\nif(l3==1):\n\trequired_vals[1] = 0\nif(s3==1):\n\trequired_vals[0] = 0\nif(r3==1):\n\trequired_vals[3] = 0\nif(l3==1 or r3==1 or s3==1):\n\trequired_vals[2] = 0\nactual_vals[2] = p3\n\nl4,s4,r4,p4 = list(map(int,input().split()))\nif(l4==1):\n\trequired_vals[2] = 0\nif(s4==1):\n\trequired_vals[1] = 0\nif(r4==1):\n\trequired_vals[0] = 0\nif(l4==1 or r4==1 or s4==1):\n\trequired_vals[3] = 0\nactual_vals[3] = p4\n\nfor i in range(4):\n\tif(required_vals[i]==0 and actual_vals[i]==1):\n\t\tprint('YES')\n\t\treturn\nprint('NO')\n", "a=[]\nfor i in range(4):\n\ta.append([int(i) for i in input().split()])\nfor i in range(4):\n\tif a[i][3]==1:\n\t\tif any([a[i][0],a[i][1],a[i][2],a[(i+1)%4][0],a[(i+2)%4][1],a[(i+3)%4][2]]):\n\t\t\tprint(\"YES\")\n\t\t\tbreak\nelse:\n\tprint(\"NO\")\n", "l1, s1, r1, p1 = list(map(int, input().split()))\nl2, s2, r2, p2 = list(map(int, input().split()))\nl3, s3, r3, p3 = list(map(int, input().split()))\nl4, s4, r4, p4 = list(map(int, input().split()))\n\nif (p1 and (r1 or s1 or l1 or r4 or l2 or s3)) or (p2 and (r2 or s2 or l2 or l3 or r1 or s4)) or \\\n\t(p3 and (r3 or s3 or l3 or l4 or r2 or s1)) or\\\n\t(p4 and (r4 or s4 or l4 or l1 or r3 or s2)):\n\t print('YES')\nelse:\n\t print('NO')\n", "list2=[]\nfor i in range(4):\n\tlist1=list(map(int,input().strip().split(' ')))\n\tlist2.append(list1)\nif list2[0][3]==1:\n\tif list2[1][0]==1 or list2[2][1]==1 or list2[3][2]==1 or list2[0][1]==1 or list2[0][2]==1 or list2[0][0]==1:\n\t\tprint(\"YES\")\n\t\treturn\nif list2[1][3]==1:\n\tif list2[0][2]==1 or list2[2][0]==1 or list2[3][1]==1 or list2[1][1]==1 or list2[1][2]==1 or list2[1][0]==1:\n\t\tprint(\"YES\")\n\t\treturn\nif list2[2][3]==1:\n\tif list2[0][1]==1 or list2[1][2]==1 or list2[3][0]==1 or list2[2][1]==1 or list2[2][2]==1 or list2[2][0]==1:\n\t\tprint(\"YES\")\n\t\treturn\nif list2[3][3]==1:\n\tif list2[0][0]==1 or list2[1][1]==1 or list2[2][2]==1 or list2[3][1]==1 or list2[3][2]==1 or list2[3][0]==1:\n\t\tprint(\"YES\")\n\t\treturn\nprint(\"NO\")\n", "# left, strait, right, pedastrian\n#   3\n#4     2\n#   1\ndef check_if_safe(curr_part, left_part, right_part, opposite_part):\n\tcurr_left, curr_straight, curr_right, curr_pedastrian = curr_part\n\tif curr_pedastrian == 0:\n\t\treturn True\n\telif (curr_left + curr_right + curr_straight) > 0:\n\t\treturn False\n\tleft_left, left_straight, left_right, left_pedastrian = left_part\n\tif left_right == 1:\n\t\treturn False\n\tright_left, right_straight, right_right, right_pedastrian = right_part\n\tif right_left == 1:\n\t\treturn False\n\topposite_left, opposite_straight, opposite_right, opposite_pedastrian = opposite_part\n\tif opposite_straight == 1:\n\t\treturn False\n\treturn True\n\n\npart_one = [int(x) for x in input().split()]\npart_two = [int(x) for x in input().split()]\npart_three = [int(x) for x in input().split()]\npart_four = [int(x) for x in input().split()]\n\nans = ( check_if_safe(part_one, part_four, part_two, part_three)\n\t  + check_if_safe(part_two, part_one, part_three, part_four)\n\t  + check_if_safe(part_three, part_two, part_four, part_one)\n\t  + check_if_safe(part_four, part_three, part_one, part_two)\n\t  )\nif ans != 4:\n\tprint('YES')\nelse:\n\tprint('NO')\n"], "id": "id8776"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8776", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["sagheer", 1], ["is", 1], ["walking", 1], ["in", 1], ["the", 1], ["street", 1], ["when", 1], ["he", 1], ["comes", 1], ["to", 1], ["an", 1], ["intersection", 1], ["of", 1], ["two", 1], ["roads", 1], ["each", 1], ["road", 1], ["can", 1], ["be", 1], ["represented", 1], ["as", 1], ["two", 1], ["parts", 1], ["where", 1], ["each", 1], ["part", 1], ["has", 1], ["3", 1], ["lanes", 1], ["getting", 1], ["into", 1], ["the", 1], ["intersection", 1], ["one", 1], ["for", 1], ["each", 1], ["direction", 1], ["and", 1], ["3", 1], ["lanes", 1], ["getting", 1], ["out", 1], ["of", 1], ["the", 1], ["intersection", 1], ["so", 1], ["we", 1], ["have", 1], ["4", 1], ["parts", 1], ["in", 1], ["total", 1], ["each", 1], ["part", 1], ["has", 1], ["4", 1], ["lights", 1], ["one", 1], ["for", 1], ["each", 1], ["lane", 1], ["getting", 1], ["into", 1], ["the", 1], ["intersection", 1], ["l", 1], ["—", 1], ["left", 1], ["s", 1], ["—", 1], ["straight", 0], ["r", 0], ["—", 0], ["right", 0], ["and", 0], ["a", 0], ["light", 0], ["p", 0], ["for", 0], ["a", 0], ["pedestrian", 0], ["crossing", 0], ["image", 0], ["an", 1], ["accident", 1], ["is", 1], ["possible", 1], ["if", 1], ["a", 1], ["car", 1], ["can", 1], ["hit", 1], ["a", 1], ["pedestrian", 1], ["this", 1], ["can", 1], ["happen", 1], ["if", 1], ["the", 1], ["light", 1], ["of", 1], ["a", 1], ["pedestrian", 1], ["crossing", 1], ["of", 1], ["some", 1], ["part", 1], ["and", 1], ["the", 1], ["light", 1], ["of", 1], ["a", 1], ["lane", 1], ["that", 1], ["can", 1], ["get", 1], ["to", 1], ["or", 1], ["from", 1], ["that", 1], ["same", 1], ["part", 1], ["are", 1], ["green", 1], ["at", 1], ["the", 1], ["same", 1], ["time", 1], ["now", 1], ["sagheer", 1], ["is", 1], ["monitoring", 1], ["the", 1], ["configuration", 1], ["of", 1], ["the", 1], ["traffic", 1], ["lights", 1], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["help", 0], ["him", 0], ["detect", 0], ["whether", 0], ["an", 0], ["accident", 0], ["is", 0], ["possible", 0], ["input", 0], ["the", 0], ["input", 0], ["consists", 0], ["of", 0], ["four", 0], ["lines", 0], ["with", 0], ["each", 0], ["line", 0], ["describing", 0], ["a", 0], ["road", 0], ["part", 0], ["given", 0], ["in", 0], ["a", 0], ["counter", 0], ["clockwise", 0], ["order", 0], ["each", 0], ["line", 0], ["contains", 0], ["four", 0], ["integers", 0], ["l", 0], ["s", 0], ["r", 0], ["p", 0], ["—", 0], ["for", 0], ["the", 0], ["left", 0], ["straight", 0], ["right", 0], ["and", 0], ["pedestrian", 0], ["lights", 0], ["respectively", 0], ["the", 0], ["possible", 0], ["values", 0], ["are", 0], ["0", 0], ["for", 0], ["red", 0], ["light", 0], ["and", 0], ["1", 0], ["for", 0], ["green", 0], ["light", 0], ["output", 0], ["on", 0], ["a", 0], ["single", 0], ["line", 0], ["print", 0], ["yes", 0], ["if", 0], ["an", 0], ["accident", 0], ["is", 0], ["possible", 0], ["and", 0], ["no", 0], ["otherwise", 0], ["examples", 0], ["input", 0], ["1", 1166], ["0", 1702], ["0", 2048], ["1", 894], ["0", 1], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["output", 0], ["yes", 0], ["input", 0], ["0", 240], ["1", 243], ["1", 192], ["0", 280], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["output", 0], ["no", 0], ["input", 0], ["1", 2385], ["0", 11524], ["0", 1635], ["0", 1602], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["output", 0], ["no", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["example", 0], ["some", 0], ["accidents", 0], ["are", 0], ["possible", 0], ["because", 0], ["cars", 0], ["of", 0], ["part", 0], ["1", 0], ["can", 0], ["hit", 0], ["pedestrians", 0], ["of", 0], ["parts", 0], ["1", 0], ["and", 0], ["4", 0], ["also", 0], ["cars", 0], ["of", 0], ["parts", 0], ["2", 0], ["and", 0], ["3", 0], ["can", 0], ["hit", 0], ["pedestrians", 0], ["of", 0], ["part", 0], ["4", 0], ["in", 0], ["the", 0], ["second", 0], ["example", 0], ["no", 0], ["car", 0], ["can", 0], ["pass", 0], ["the", 0], ["pedestrian", 0], ["crossing", 0], ["of", 0], ["part", 0], ["4", 0], ["which", 0], ["is", 0], ["the", 0], ["only", 0], ["green", 0], ["pedestrian", 0], ["light", 0], ["so", 0], ["no", 0], ["accident", 0], ["can", 0], ["occur", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.41194029850746267, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3761846435359637, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5706051873198847, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.46713114270513045, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3761194029850746, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3761194029850746, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4668587896253602, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4668587896253602, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["lanes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["lanes", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lanes", 0], ["extend", 0], ["lanes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["ln", 0], ["lanes", 0], ["i", 0], ["if", 0], ["ln", 0], ["3", 0], ["and", 0], ["ln", 0], ["0", 0], ["or", 0], ["ln", 0], ["1", 0], ["or", 0], ["ln", 0], ["2", 0], ["or", 0], ["ln", 0], ["0", 0], ["and", 0], ["lanes", 0], ["i", 0], ["3", 0], ["3", 0], ["or", 0], ["ln", 0], ["1", 0], ["and", 0], ["lanes", 0], ["i", 0], ["2", 0], ["3", 0], ["or", 0], ["ln", 0], ["2", 0], ["and", 0], ["lanes", 0], ["i", 0], ["1", 0], ["3", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["l", 0], ["0", 0], ["4", 0], ["1", 0], ["2", 0], ["3", 0], ["r", 0], ["0", 0], ["2", 0], ["3", 0], ["4", 0], ["1", 0], ["s", 0], ["0", 0], ["3", 0], ["4", 0], ["1", 0], ["2", 0], ["h", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["p", 0], ["h", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["5", 0], ["l", 0], ["s", 0], ["r", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["i", 0], ["p", 0], ["if", 0], ["1", 0], ["in", 0], ["l", 0], ["s", 0], ["r", 0], ["h", 0], ["i", 0], ["1", 0], ["if", 0], ["l", 0], ["h", 0], ["l", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["h", 0], ["s", 0], ["i", 0], ["1", 0], ["if", 0], ["r", 0], ["h", 0], ["r", 0], ["i", 0], ["1", 0], ["ans", 0], ["no", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["5", 0], ["if", 0], ["p", 0], ["i", 0], ["and", 0], ["h", 0], ["i", 0], ["ans", 0], ["yes", 0], ["print", 0], ["ans", 0], ["def", 0], ["booly", 0], ["s", 0], ["return", 0], ["bool", 0], ["int", 0], ["s", 0], ["a", 0], ["none", 0], ["4", 0], ["a", 0], ["0", 0], ["list", 0], ["map", 0], ["booly", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["list", 0], ["map", 0], ["booly", 0], ["input", 0], ["split", 0], ["a", 0], ["2", 0], ["list", 0], ["map", 0], ["booly", 0], ["input", 0], ["split", 0], ["a", 0], ["3", 0], ["list", 0], ["map", 0], ["booly", 0], ["input", 0], ["split", 0], ["acc", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["a", 0], ["i", 0], ["3", 0], ["and", 0], ["a", 0], ["i", 0], ["0", 0], ["or", 0], ["a", 0], ["i", 0], ["1", 0], ["or", 0], ["a", 0], ["i", 0], ["2", 0], ["acc", 0], ["true", 0], ["if", 0], ["a", 0], ["i", 0], ["3", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 0], ["4", 0], ["0", 0], ["acc", 0], ["true", 0], ["if", 0], ["a", 0], ["i", 0], ["3", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 0], ["4", 0], ["2", 0], ["acc", 0], ["true", 0], ["if", 0], ["a", 0], ["i", 0], ["3", 0], ["and", 0], ["a", 0], ["i", 0], ["2", 0], ["4", 0], ["1", 0], ["acc", 0], ["true", 0], ["if", 0], ["acc", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["log", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["p", 0], ["i", 0], ["3", 0], ["1", 0], ["and", 0], ["p", 0], ["i", 0], ["1", 0], ["2", 0], ["p", 0], ["i", 0], ["1", 0], ["4", 0], ["0", 0], ["p", 0], ["i", 0], ["2", 0], ["4", 0], ["1", 0], ["p", 0], ["i", 0], ["1", 0], ["p", 0], ["i", 0], ["0", 0], ["p", 0], ["i", 0], ["2", 0], ["0", 0], ["log", 0], ["true", 0], ["if", 0], ["log", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["st", 0], ["false", 0], ["if", 0], ["a", 0], ["3", 0], ["1", 0], ["if", 0], ["1", 0], ["in", 0], ["a", 0], ["3", 0], ["or", 0], ["b", 0], ["0", 0], ["or", 0], ["c", 0], ["1", 0], ["or", 0], ["d", 0], ["2", 0], ["st", 0], ["true", 0], ["if", 0], ["b", 0], ["3", 0], ["1", 0], ["if", 0], ["1", 0], ["in", 0], ["b", 0], ["3", 0], ["or", 0], ["a", 0], ["2", 0], ["or", 0], ["c", 0], ["0", 0], ["or", 0], ["d", 0], ["1", 0], ["st", 0], ["true", 0], ["if", 0], ["c", 0], ["3", 0], ["1", 0], ["if", 0], ["1", 0], ["in", 0], ["c", 0], ["3", 0], ["or", 0], ["a", 0], ["1", 0], ["or", 0], ["b", 0], ["2", 0], ["or", 0], ["d", 0], ["0", 0], ["st", 0], ["true", 0], ["if", 0], ["d", 0], ["3", 0], ["1", 0], ["if", 0], ["1", 0], ["in", 0], ["d", 0], ["3", 0], ["or", 0], ["a", 0], ["0", 0], ["or", 0], ["b", 0], ["1", 0], ["or", 0], ["c", 0], ["2", 0], ["st", 0], ["true", 0], ["print", 0], ["yes", 0], ["if", 0], ["st", 0], ["else", 0], ["no", 0], ["arr", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["arrp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["l", 0], ["s", 0], ["r", 0], ["p", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["arr", 0], ["i", 0], ["extend", 0], ["l", 0], ["s", 0], ["r", 0], ["arr", 0], ["3", 0], ["i", 0], ["1", 0], ["i", 0], ["0", 0], ["append", 0], ["l", 0], ["arr", 0], ["0", 0], ["i", 0], ["1", 0], ["i", 0], ["3", 0], ["append", 0], ["r", 0], ["arr", 0], ["i", 0], ["2", 0], ["4", 0], ["append", 0], ["s", 0], ["arrp", 0], ["append", 0], ["p", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["arrp", 0], ["i", 0], ["if", 0], ["1", 0], ["in", 0], ["arr", 0], ["i", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["l", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["go", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["l", 0], ["i", 0], ["3", 0], ["and", 0], ["l", 0], ["i", 0], ["1", 0], ["4", 0], ["0", 0], ["or", 0], ["l", 0], ["i", 0], ["3", 0], ["4", 0], ["2", 0], ["or", 0], ["l", 0], ["i", 0], ["2", 0], ["4", 0], ["1", 0], ["or", 0], ["l", 0], ["i", 0], ["0", 0], ["or", 0], ["l", 0], ["i", 0], ["1", 0], ["or", 0], ["l", 0], ["i", 0], ["2", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["if", 0], ["go", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["roads", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["roads", 0], ["append", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["clock", 0], ["cclock", 0], ["opp", 0], ["clock", 0], ["0", 0], ["1", 0], ["clock", 0], ["1", 0], ["2", 0], ["clock", 0], ["2", 0], ["3", 0], ["clock", 0], ["3", 0], ["0", 0], ["cclock", 0], ["1", 0], ["0", 0], ["cclock", 0], ["2", 0], ["1", 0], ["cclock", 0], ["3", 0], ["2", 0], ["cclock", 0], ["0", 0], ["3", 0], ["opp", 0], ["0", 0], ["2", 0], ["opp", 0], ["1", 0], ["3", 0], ["opp", 0], ["2", 0], ["0", 0], ["opp", 0], ["3", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["road", 0], ["roads", 0], ["i", 0], ["if", 0], ["road", 0], ["3", 0], ["1", 0], ["if", 0], ["road", 0], ["0", 0], ["1", 0], ["or", 0], ["road", 0], ["1", 0], ["1", 0], ["or", 0], ["road", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["break", 0], ["left", 0], ["roads", 0], ["cclock", 0], ["i", 0], ["right", 0], ["roads", 0], ["clock", 0], ["i", 0], ["straight", 0], ["roads", 0], ["opp", 0], ["i", 0], ["if", 0], ["left", 0], ["2", 0], ["1", 0], ["or", 0], ["right", 0], ["0", 0], ["1", 0], ["or", 0], ["straight", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["main", 0], ["l1", 0], ["s1", 0], ["r1", 0], ["p1", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l2", 0], ["s2", 0], ["r2", 0], ["p2", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l3", 0], ["s3", 0], ["r3", 0], ["p3", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l4", 0], ["s4", 0], ["r4", 0], ["p4", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["p1", 0], ["1", 0], ["if", 0], ["s1", 0], ["1", 0], ["or", 0], ["l1", 0], ["1", 0], ["or", 0], ["r1", 0], ["1", 0], ["or", 0], ["s3", 0], ["1", 0], ["or", 0], ["l2", 0], ["1", 0], ["or", 0], ["r4", 0], ["1", 0], ["return", 0], ["yes", 0], ["if", 0], ["p2", 0], ["1", 0], ["if", 0], ["s2", 0], ["1", 0], ["or", 0], ["l2", 0], ["1", 0], ["or", 0], ["r2", 0], ["1", 0], ["or", 0], ["s4", 0], ["1", 0], ["or", 0], ["l3", 0], ["1", 0], ["or", 0], ["r1", 0], ["1", 0], ["return", 0], ["yes", 0], ["if", 0], ["p3", 0], ["1", 0], ["if", 0], ["s3", 0], ["1", 0], ["or", 0], ["l3", 0], ["1", 0], ["or", 0], ["r3", 0], ["1", 0], ["or", 0], ["s1", 0], ["1", 0], ["or", 0], ["l4", 0], ["1", 0], ["or", 0], ["r2", 0], ["1", 0], ["return", 0], ["yes", 0], ["if", 0], ["p4", 0], ["1", 0], ["if", 0], ["s4", 0], ["1", 0], ["or", 0], ["l4", 0], ["1", 0], ["or", 0], ["r4", 0], ["1", 0], ["or", 0], ["s2", 0], ["1", 0], ["or", 0], ["l1", 0], ["1", 0], ["or", 0], ["r3", 0], ["1", 0], ["return", 0], ["yes", 0], ["return", 0], ["no", 0], ["print", 0], ["main", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["p", 0], ["l", 0], ["i", 0], ["3", 0], ["if", 0], ["p", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["if", 0], ["l", 0], ["0", 0], ["0", 0], ["1", 0], ["or", 0], ["l", 0], ["0", 0], ["1", 0], ["1", 0], ["or", 0], ["l", 0], ["0", 0], ["2", 0], ["1", 0], ["or", 0], ["l", 0], ["1", 0], ["0", 0], ["1", 0], ["or", 0], ["l", 0], ["2", 0], ["1", 0], ["1", 0], ["or", 0], ["l", 0], ["3", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["elif", 0], ["i", 0], ["1", 0], ["if", 0], ["l", 0], ["0", 0], ["2", 0], ["1", 0], ["or", 0], ["l", 0], ["1", 0], ["0", 0], ["1", 0], ["or", 0], ["l", 0], ["1", 0], ["1", 0], ["1", 0], ["or", 0], ["l", 0], ["1", 0], ["2", 0], ["1", 0], ["or", 0], ["l", 0], ["2", 0], ["0", 0], ["1", 0], ["or", 0], ["l", 0], ["3", 0], ["1", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["elif", 0], ["i", 0], ["2", 0], ["if", 0], ["l", 0], ["0", 0], ["1", 0], ["1", 0], ["or", 0], ["l", 0], ["1", 0], ["2", 0], ["1", 0], ["or", 0], ["l", 0], ["2", 0], ["0", 0], ["1", 0], ["or", 0], ["l", 0], ["2", 0], ["1", 0], ["1", 0], ["or", 0], ["l", 0], ["2", 0], ["2", 0], ["1", 0], ["or", 0], ["l", 0], ["3", 0], ["0", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["else", 0], ["if", 0], ["l", 0], ["0", 0], ["0", 0], ["1", 0], ["or", 0], ["l", 0], ["1", 0], ["1", 0], ["1", 0], ["or", 0], ["l", 0], ["2", 0], ["2", 0], ["1", 0], ["or", 0], ["l", 0], ["3", 0], ["0", 0], ["1", 0], ["or", 0], ["l", 0], ["3", 0], ["1", 0], ["1", 0], ["or", 0], ["l", 0], ["3", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["def", 0], ["main", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["a", 0], ["append", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["car", 0], ["0", 0], ["4", 0], ["for", 0], ["i", 0], ["l", 0], ["s", 0], ["r", 0], ["p", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["car", 0], ["i", 0], ["l", 0], ["car", 0], ["i", 0], ["1", 0], ["4", 0], ["l", 0], ["car", 0], ["i", 0], ["r", 0], ["car", 0], ["i", 0], ["1", 0], ["4", 0], ["r", 0], ["car", 0], ["i", 0], ["s", 0], ["car", 0], ["i", 0], ["2", 0], ["4", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["car", 0], ["i", 0], ["0", 0], ["and", 0], ["a", 0], ["i", 0], ["3", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["4", 0], ["pesh", 0], ["0", 0], ["4", 0], ["avt", 0], ["0", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["3", 0], ["pesh", 0], ["i", 0], ["true", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["avt", 0], ["i", 0], ["1", 0], ["4", 0], ["true", 0], ["avt", 0], ["i", 0], ["true", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["avt", 0], ["i", 0], ["2", 0], ["4", 0], ["true", 0], ["avt", 0], ["i", 0], ["true", 0], ["if", 0], ["a", 0], ["i", 0], ["2", 0], ["avt", 0], ["i", 0], ["1", 0], ["4", 0], ["true", 0], ["avt", 0], ["i", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["avt", 0], ["i", 0], ["and", 0], ["pesh", 0], ["i", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["ls", 0], ["ss", 0], ["rs", 0], ["ps", 0], ["for", 0], ["in", 0], ["range", 0], ["4", 0], ["l", 0], ["s", 0], ["r", 0], ["p", 0], ["int", 0], ["elem", 0], ["1", 0], ["for", 0], ["elem", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["ls", 0], ["append", 0], ["l", 0], ["ss", 0], ["append", 0], ["s", 0], ["rs", 0], ["append", 0], ["r", 0], ["ps", 0], ["append", 0], ["p", 0], ["def", 0], ["get", 0], ["ary", 0], ["indx", 0], ["return", 0], ["ary", 0], ["indx", 0], ["4", 0], ["accident", 0], ["false", 0], ["for", 0], ["indx", 0], ["in", 0], ["range", 0], ["4", 0], ["accident", 0], ["ls", 0], ["indx", 0], ["or", 0], ["rs", 0], ["indx", 0], ["or", 0], ["ss", 0], ["indx", 0], ["and", 0], ["ps", 0], ["indx", 0], ["accident", 0], ["ls", 0], ["indx", 0], ["and", 0], ["get", 0], ["ps", 0], ["indx", 0], ["1", 0], ["accident", 0], ["ss", 0], ["indx", 0], ["and", 0], ["get", 0], ["ps", 0], ["indx", 0], ["2", 0], ["accident", 0], ["rs", 0], ["indx", 0], ["and", 0], ["get", 0], ["ps", 0], ["indx", 0], ["1", 0], ["if", 0], ["accident", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["l", 0], ["s", 0], ["r", 0], ["p", 0], ["0", 0], ["1", 0], ["2", 0], ["3", 0], ["tr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["tr", 0], ["append", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["acc", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["check", 0], ["l", 0], ["if", 0], ["tr", 0], ["i", 0], ["l", 0], ["1", 0], ["and", 0], ["tr", 0], ["i", 0], ["p", 0], ["1", 0], ["or", 0], ["tr", 0], ["i", 0], ["3", 0], ["4", 0], ["p", 0], ["1", 0], ["acc", 0], ["true", 0], ["break", 0], ["if", 0], ["tr", 0], ["i", 0], ["s", 0], ["1", 0], ["and", 0], ["tr", 0], ["i", 0], ["p", 0], ["1", 0], ["or", 0], ["tr", 0], ["i", 0], ["2", 0], ["4", 0], ["p", 0], ["1", 0], ["acc", 0], ["true", 0], ["break", 0], ["if", 0], ["tr", 0], ["i", 0], ["r", 0], ["1", 0], ["and", 0], ["tr", 0], ["i", 0], ["p", 0], ["1", 0], ["or", 0], ["tr", 0], ["i", 0], ["1", 0], ["4", 0], ["p", 0], ["1", 0], ["acc", 0], ["true", 0], ["break", 0], ["if", 0], ["acc", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["500", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["4", 0], ["s", 0], ["append", 0], ["bool", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["check", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["4", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["0", 0], ["3", 0], ["if", 0], ["s", 0], ["i", 0], ["x", 0], ["and", 0], ["s", 0], ["i", 0], ["abs", 0], ["x", 0], ["3", 0], ["4", 0], ["3", 0], ["or", 0], ["s", 0], ["i", 0], ["3", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["check", 0], ["l", 0], ["s", 0], ["r", 0], ["p", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l2", 0], ["s2", 0], ["r2", 0], ["p2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l3", 0], ["s3", 0], ["r3", 0], ["p3", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l4", 0], ["s4", 0], ["r4", 0], ["p4", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["l", 0], ["s", 0], ["r", 0], ["0", 0], ["and", 0], ["p", 0], ["1", 0], ["or", 0], ["l2", 0], ["s2", 0], ["r2", 0], ["0", 0], ["and", 0], ["p2", 0], ["1", 0], ["or", 0], ["l3", 0], ["s3", 0], ["r3", 0], ["0", 0], ["and", 0], ["p3", 0], ["1", 0], ["or", 0], ["l4", 0], ["s4", 0], ["r4", 0], ["0", 0], ["and", 0], ["p4", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["if", 0], ["l2", 0], ["s3", 0], ["r4", 0], ["0", 0], ["and", 0], ["p", 0], ["1", 0], ["or", 0], ["l3", 0], ["s4", 0], ["r", 0], ["0", 0], ["and", 0], ["p2", 0], ["1", 0], ["or", 0], ["l4", 0], ["s", 0], ["r2", 0], ["0", 0], ["and", 0], ["p3", 0], ["1", 0], ["or", 0], ["l", 0], ["s2", 0], ["r3", 0], ["0", 0], ["and", 0], ["p4", 0], ["1", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["l", 0], ["0", 0], ["4", 0], ["s", 0], ["0", 0], ["4", 0], ["r", 0], ["0", 0], ["4", 0], ["p", 0], ["0", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["l", 0], ["i", 0], ["s", 0], ["i", 0], ["r", 0], ["i", 0], ["p", 0], ["i", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["error", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["l", 0], ["i", 0], ["s", 0], ["i", 0], ["r", 0], ["i", 0], ["0", 0], ["and", 0], ["p", 0], ["i", 0], ["1", 0], ["error", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["j", 0], ["0", 0], ["if", 0], ["p", 0], ["j", 0], ["1", 0], ["if", 0], ["r", 0], ["j", 0], ["3", 0], ["0", 0], ["and", 0], ["s", 0], ["j", 0], ["2", 0], ["0", 0], ["and", 0], ["l", 0], ["j", 0], ["1", 0], ["0", 0], ["error", 0], ["0", 0], ["else", 0], ["error", 0], ["1", 0], ["l", 0], ["append", 0], ["l", 0], ["j", 0], ["l", 0], ["pop", 0], ["0", 0], ["s", 0], ["append", 0], ["s", 0], ["j", 0], ["s", 0], ["pop", 0], ["0", 0], ["r", 0], ["append", 0], ["r", 0], ["j", 0], ["r", 0], ["pop", 0], ["0", 0], ["p", 0], ["append", 0], ["p", 0], ["j", 0], ["p", 0], ["pop", 0], ["0", 0], ["if", 0], ["error", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["s", 0], ["res", 0], ["no", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["s", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["p", 0], ["sum", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["3", 0], ["s", 0], ["i", 0], ["1", 0], ["4", 0], ["0", 0], ["s", 0], ["i", 0], ["2", 0], ["4", 0], ["1", 0], ["s", 0], ["i", 0], ["3", 0], ["4", 0], ["2", 0], ["if", 0], ["p", 0], ["0", 0], ["and", 0], ["s", 0], ["i", 0], ["3", 0], ["1", 0], ["res", 0], ["yes", 0], ["break", 0], ["print", 0], ["res", 0], ["a", 0], ["a", 0], ["input", 0], ["split", 0], ["b", 0], ["input", 0], ["split", 0], ["c", 0], ["input", 0], ["split", 0], ["d", 0], ["input", 0], ["split", 0], ["lights", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["4", 0], ["if", 0], ["int", 0], ["lights", 0], ["i", 0], ["3", 0], ["1", 0], ["if", 0], ["int", 0], ["lights", 0], ["i", 0], ["0", 0], ["1", 0], ["or", 0], ["int", 0], ["lights", 0], ["i", 0], ["1", 0], ["1", 0], ["or", 0], ["int", 0], ["lights", 0], ["i", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["break", 0], ["if", 0], ["i", 0], ["0", 0], ["if", 0], ["int", 0], ["lights", 0], ["1", 0], ["0", 0], ["1", 0], ["or", 0], ["int", 0], ["lights", 0], ["2", 0], ["1", 0], ["1", 0], ["or", 0], ["int", 0], ["lights", 0], ["3", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["break", 0], ["if", 0], ["i", 0], ["1", 0], ["if", 0], ["int", 0], ["lights", 0], ["2", 0], ["0", 0], ["1", 0], ["or", 0], ["int", 0], ["lights", 0], ["3", 0], ["1", 0], ["1", 0], ["or", 0], ["int", 0], ["lights", 0], ["0", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["break", 0], ["if", 0], ["i", 0], ["2", 0], ["if", 0], ["int", 0], ["lights", 0], ["3", 0], ["0", 0], ["1", 0], ["or", 0], ["int", 0], ["lights", 0], ["0", 0], ["1", 0], ["1", 0], ["or", 0], ["int", 0], ["lights", 0], ["1", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["break", 0], ["if", 0], ["i", 0], ["3", 0], ["if", 0], ["int", 0], ["lights", 0], ["0", 0], ["0", 0], ["1", 0], ["or", 0], ["int", 0], ["lights", 0], ["1", 0], ["1", 0], ["1", 0], ["or", 0], ["int", 0], ["lights", 0], ["2", 0], ["2", 0], ["1", 0], ["print", 0], ["yes", 0], ["break", 0], ["if", 0], ["i", 0], ["3", 0], ["print", 0], ["no", 0], ["actual", 0], ["vals", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["4", 0], ["required", 0], ["vals", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["4", 0], ["l1", 0], ["s1", 0], ["r1", 0], ["p1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["l1", 0], ["1", 0], ["required", 0], ["vals", 0], ["3", 0], ["0", 0], ["if", 0], ["s1", 0], ["1", 0], ["required", 0], ["vals", 0], ["2", 0], ["0", 0], ["if", 0], ["r1", 0], ["1", 0], ["required", 0], ["vals", 0], ["1", 0], ["0", 0], ["if", 0], ["l1", 0], ["1", 0], ["or", 0], ["r1", 0], ["1", 0], ["or", 0], ["s1", 0], ["1", 0], ["required", 0], ["vals", 0], ["0", 0], ["0", 0], ["actual", 0], ["vals", 0], ["0", 0], ["p1", 0], ["l2", 0], ["s2", 0], ["r2", 0], ["p2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["l2", 0], ["1", 0], ["required", 0], ["vals", 0], ["0", 0], ["0", 0], ["if", 0], ["s2", 0], ["1", 0], ["required", 0], ["vals", 0], ["3", 0], ["0", 0], ["if", 0], ["r2", 0], ["1", 0], ["required", 0], ["vals", 0], ["2", 0], ["0", 0], ["if", 0], ["l2", 0], ["1", 0], ["or", 0], ["r2", 0], ["1", 0], ["or", 0], ["s2", 0], ["1", 0], ["required", 0], ["vals", 0], ["1", 0], ["0", 0], ["actual", 0], ["vals", 0], ["1", 0], ["p2", 0], ["l3", 0], ["s3", 0], ["r3", 0], ["p3", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["l3", 0], ["1", 0], ["required", 0], ["vals", 0], ["1", 0], ["0", 0], ["if", 0], ["s3", 0], ["1", 0], ["required", 0], ["vals", 0], ["0", 0], ["0", 0], ["if", 0], ["r3", 0], ["1", 0], ["required", 0], ["vals", 0], ["3", 0], ["0", 0], ["if", 0], ["l3", 0], ["1", 0], ["or", 0], ["r3", 0], ["1", 0], ["or", 0], ["s3", 0], ["1", 0], ["required", 0], ["vals", 0], ["2", 0], ["0", 0], ["actual", 0], ["vals", 0], ["2", 0], ["p3", 0], ["l4", 0], ["s4", 0], ["r4", 0], ["p4", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["l4", 0], ["1", 0], ["required", 0], ["vals", 0], ["2", 0], ["0", 0], ["if", 0], ["s4", 0], ["1", 0], ["required", 0], ["vals", 0], ["1", 0], ["0", 0], ["if", 0], ["r4", 0], ["1", 0], ["required", 0], ["vals", 0], ["0", 0], ["0", 0], ["if", 0], ["l4", 0], ["1", 0], ["or", 0], ["r4", 0], ["1", 0], ["or", 0], ["s4", 0], ["1", 0], ["required", 0], ["vals", 0], ["3", 0], ["0", 0], ["actual", 0], ["vals", 0], ["3", 0], ["p4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["required", 0], ["vals", 0], ["i", 0], ["0", 0], ["and", 0], ["actual", 0], ["vals", 0], ["i", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["a", 0], ["append", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["if", 0], ["a", 0], ["i", 0], ["3", 0], ["1", 0], ["if", 0], ["any", 0], ["a", 0], ["i", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["2", 0], ["a", 0], ["i", 0], ["1", 0], ["4", 0], ["0", 0], ["a", 0], ["i", 0], ["2", 0], ["4", 0], ["1", 0], ["a", 0], ["i", 0], ["3", 0], ["4", 0], ["2", 0], ["print", 0], ["yes", 0], ["break", 0], ["else", 0], ["print", 0], ["no", 0], ["l1", 0], ["s1", 0], ["r1", 0], ["p1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l2", 0], ["s2", 0], ["r2", 0], ["p2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l3", 0], ["s3", 0], ["r3", 0], ["p3", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l4", 0], ["s4", 0], ["r4", 0], ["p4", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["p1", 0], ["and", 0], ["r1", 0], ["or", 0], ["s1", 0], ["or", 0], ["l1", 0], ["or", 0], ["r4", 0], ["or", 0], ["l2", 0], ["or", 0], ["s3", 0], ["or", 0], ["p2", 0], ["and", 0], ["r2", 0], ["or", 0], ["s2", 0], ["or", 0], ["l2", 0], ["or", 0], ["l3", 0], ["or", 0], ["r1", 0], ["or", 0], ["s4", 0], ["or", 0], ["p3", 0], ["and", 0], ["r3", 0], ["or", 0], ["s3", 0], ["or", 0], ["l3", 0], ["or", 0], ["l4", 0], ["or", 0], ["r2", 0], ["or", 0], ["s1", 0], ["or", 0], ["p4", 0], ["and", 0], ["r4", 0], ["or", 0], ["s4", 0], ["or", 0], ["l4", 0], ["or", 0], ["l1", 0], ["or", 0], ["r3", 0], ["or", 0], ["s2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["list2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["4", 0], ["list1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["list2", 0], ["append", 0], ["list1", 0], ["if", 0], ["list2", 0], ["0", 0], ["3", 0], ["1", 0], ["if", 0], ["list2", 0], ["1", 0], ["0", 0], ["1", 0], ["or", 0], ["list2", 0], ["2", 0], ["1", 0], ["1", 0], ["or", 0], ["list2", 0], ["3", 0], ["2", 0], ["1", 0], ["or", 0], ["list2", 0], ["0", 0], ["1", 0], ["1", 0], ["or", 0], ["list2", 0], ["0", 0], ["2", 0], ["1", 0], ["or", 0], ["list2", 0], ["0", 0], ["0", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["list2", 0], ["1", 0], ["3", 0], ["1", 0], ["if", 0], ["list2", 0], ["0", 0], ["2", 0], ["1", 0], ["or", 0], ["list2", 0], ["2", 0], ["0", 0], ["1", 0], ["or", 0], ["list2", 0], ["3", 0], ["1", 0], ["1", 0], ["or", 0], ["list2", 0], ["1", 0], ["1", 0], ["1", 0], ["or", 0], ["list2", 0], ["1", 0], ["2", 0], ["1", 0], ["or", 0], ["list2", 0], ["1", 0], ["0", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["list2", 0], ["2", 0], ["3", 0], ["1", 0], ["if", 0], ["list2", 0], ["0", 0], ["1", 0], ["1", 0], ["or", 0], ["list2", 0], ["1", 0], ["2", 0], ["1", 0], ["or", 0], ["list2", 0], ["3", 0], ["0", 0], ["1", 0], ["or", 0], ["list2", 0], ["2", 0], ["1", 0], ["1", 0], ["or", 0], ["list2", 0], ["2", 0], ["2", 0], ["1", 0], ["or", 0], ["list2", 0], ["2", 0], ["0", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["if", 0], ["list2", 0], ["3", 0], ["3", 0], ["1", 0], ["if", 0], ["list2", 0], ["0", 0], ["0", 0], ["1", 0], ["or", 0], ["list2", 0], ["1", 0], ["1", 0], ["1", 0], ["or", 0], ["list2", 0], ["2", 0], ["2", 0], ["1", 0], ["or", 0], ["list2", 0], ["3", 0], ["1", 0], ["1", 0], ["or", 0], ["list2", 0], ["3", 0], ["2", 0], ["1", 0], ["or", 0], ["list2", 0], ["3", 0], ["0", 0], ["1", 0], ["print", 0], ["yes", 0], ["return", 0], ["print", 0], ["no", 0], ["left", 0], ["strait", 0], ["right", 0], ["pedastrian", 0], ["3", 0], ["4", 0], ["2", 0], ["1", 0], ["def", 0], ["check", 0], ["if", 0], ["safe", 0], ["curr", 0], ["part", 0], ["left", 0], ["part", 0], ["right", 0], ["part", 0], ["opposite", 0], ["part", 0], ["curr", 0], ["left", 0], ["curr", 0], ["straight", 0], ["curr", 0], ["right", 0], ["curr", 0], ["pedastrian", 0], ["curr", 0], ["part", 0], ["if", 0], ["curr", 0], ["pedastrian", 0], ["0", 0], ["return", 0], ["true", 0], ["elif", 0], ["curr", 0], ["left", 0], ["curr", 0], ["right", 0], ["curr", 0], ["straight", 0], ["0", 0], ["return", 0], ["false", 0], ["left", 0], ["left", 0], ["left", 0], ["straight", 0], ["left", 0], ["right", 0], ["left", 0], ["pedastrian", 0], ["left", 0], ["part", 0], ["if", 0], ["left", 0], ["right", 0], ["1", 0], ["return", 0], ["false", 0], ["right", 0], ["left", 0], ["right", 0], ["straight", 0], ["right", 0], ["right", 0], ["right", 0], ["pedastrian", 0], ["right", 0], ["part", 0], ["if", 0], ["right", 0], ["left", 0], ["1", 0], ["return", 0], ["false", 0], ["opposite", 0], ["left", 0], ["opposite", 0], ["straight", 0], ["opposite", 0], ["right", 0], ["opposite", 0], ["pedastrian", 0], ["opposite", 0], ["part", 0], ["if", 0], ["opposite", 0], ["straight", 0], ["1", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["part", 0], ["one", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["part", 0], ["two", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["part", 0], ["three", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["part", 0], ["four", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["check", 0], ["if", 0], ["safe", 0], ["part", 0], ["one", 0], ["part", 0], ["four", 0], ["part", 0], ["two", 0], ["part", 0], ["three", 0], ["check", 0], ["if", 0], ["safe", 0], ["part", 0], ["two", 0], ["part", 0], ["one", 0], ["part", 0], ["three", 0], ["part", 0], ["four", 0], ["check", 0], ["if", 0], ["safe", 0], ["part", 0], ["three", 0], ["part", 0], ["two", 0], ["part", 0], ["four", 0], ["part", 0], ["one", 0], ["check", 0], ["if", 0], ["safe", 0], ["part", 0], ["four", 0], ["part", 0], ["three", 0], ["part", 0], ["one", 0], ["part", 0], ["two", 0], ["if", 0], ["ans", 0], ["4", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nEvery day after school, you and your friends get together and play in a band. Over the past couple of months, the band has been rehearsing a large number of songs. Now it’s time to go out and perform in front of a crowd for the first time. In order to do so, a set list for the concert needs to be determined.\n\nAs it turns out, every band member has a different taste in music. (Who would have thought?) Everybody is very picky: a band member doesn’t want to play any particular song $X$ unless he also gets to play all songs he likes better than song $X$. This holds for every band member and for every song $X$. Furthermore, obviously at least one song should be performed.\n\nThe organisers of the concert do not want you to play too many songs, so a selection needs to be made that is as small as possible. As the unofficial leader of the band, you have taken it upon yourself to find a minimum length set list that meets the requirements.\n\n-----Input-----\nThe first line contains two integers $M$ and $S$, satisfying $M \\geq 1$ and $S \\geq 1$ as well as $M\\cdot S \\leq 10^6$. These denote the total number of band members and the number of songs, respectively.\n\nThe following $M$ lines each contain $S$ integers per line, where the $i$-th line denotes the preference list of the $i$-th band member, starting with his favourite song and ending with his least favourite song. The songs are numbered $1$ through $S$.\n\nNo two band members have the exact same preference lists.\n\n-----Output-----\nOutput the smallest possible set list, using the following format:\n - One line with an integer $L$: the length of the smallest possible set list.\n - One line with $L$ space-separated integers, denoting a sorted list of the songs to be played.\n\n-----Examples-----\nSample Input 1:\n3 8\n4 5 2 1 6 8 3 7\n5 2 4 8 6 1 3 7\n2 5 4 8 1 6 3 7\nSample Output 1:\n3\n2 4 5\n\nSample Input 2:\n2 8\n6 2 8 7 1 3 4 5\n2 8 7 1 3 4 5 6\nSample Output 2:\n8\n1 2 3 4 5 6 7 8\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6003"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6003", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["every", 1], ["day", 1], ["after", 1], ["school", 1], ["you", 1], ["and", 1], ["your", 1], ["friends", 1], ["get", 1], ["together", 1], ["and", 1], ["play", 1], ["in", 1], ["a", 1], ["band", 1], ["over", 1], ["the", 1], ["past", 1], ["couple", 1], ["of", 1], ["months", 1], ["the", 1], ["band", 1], ["has", 1], ["been", 1], ["rehearsing", 1], ["a", 1], ["large", 1], ["number", 1], ["of", 1], ["songs", 1], ["now", 1], ["it’s", 1], ["time", 1], ["to", 1], ["go", 1], ["out", 1], ["and", 1], ["perform", 1], ["in", 1], ["front", 1], ["of", 1], ["a", 1], ["crowd", 1], ["for", 1], ["the", 1], ["first", 1], ["time", 1], ["in", 1], ["order", 1], ["to", 1], ["do", 1], ["so", 1], ["a", 1], ["set", 1], ["list", 1], ["for", 1], ["the", 1], ["concert", 1], ["needs", 1], ["to", 1], ["be", 1], ["determined", 1], ["as", 1], ["it", 1], ["turns", 1], ["out", 1], ["every", 1], ["band", 1], ["member", 1], ["has", 1], ["a", 1], ["different", 1], ["taste", 1], ["in", 1], ["music", 1], ["who", 1], ["would", 1], ["have", 1], ["thought", 1], ["everybody", 1], ["is", 1], ["very", 1], ["picky", 1], ["a", 1], ["band", 1], ["member", 1], ["doesn’t", 1], ["want", 1], ["to", 1], ["play", 1], ["any", 1], ["particular", 1], ["song", 1], ["x", 1], ["unless", 1], ["he", 1], ["also", 1], ["gets", 1], ["to", 1], ["play", 1], ["all", 1], ["songs", 1], ["he", 1], ["likes", 1], ["better", 1], ["than", 1], ["song", 1], ["x", 1], ["this", 1], ["holds", 1], ["for", 1], ["every", 1], ["band", 1], ["member", 1], ["and", 1], ["for", 1], ["every", 1], ["song", 1], ["x", 1], ["furthermore", 1], ["obviously", 1], ["at", 1], ["least", 1], ["one", 1], ["song", 1], ["should", 1], ["be", 1], ["performed", 1], ["the", 1], ["organisers", 1], ["of", 1], ["the", 1], ["concert", 1], ["do", 1], ["not", 1], ["want", 1], ["you", 1], ["to", 1], ["play", 1], ["too", 1], ["many", 1], ["songs", 1], ["so", 1], ["a", 1], ["selection", 1], ["needs", 1], ["to", 1], ["be", 1], ["made", 1], ["that", 1], ["is", 1], ["as", 1], ["small", 1], ["as", 1], ["possible", 1], ["as", 1], ["the", 1], ["unofficial", 1], ["leader", 1], ["of", 1], ["the", 1], ["band", 1], ["you", 1], ["have", 1], ["taken", 1], ["it", 1], ["upon", 1], ["yourself", 0], ["to", 0], ["find", 0], ["a", 0], ["minimum", 0], ["length", 0], ["set", 0], ["list", 0], ["that", 0], ["meets", 0], ["the", 0], ["requirements", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["two", 1], ["integers", 1], ["m", 1], ["and", 1], ["s", 1], ["satisfying", 1], ["m", 1], ["geq", 1], ["1", 1], ["and", 1], ["s", 1], ["geq", 1], ["1", 1], ["as", 1], ["well", 1], ["as", 1], ["m", 1], ["cdot", 1], ["s", 1], ["leq", 1], ["10", 1], ["6", 1], ["these", 1], ["denote", 1], ["the", 1], ["total", 1], ["number", 1], ["of", 1], ["band", 1], ["members", 1], ["and", 1], ["the", 1], ["number", 1], ["of", 1], ["songs", 1], ["respectively", 1], ["the", 1], ["following", 1], ["m", 1], ["lines", 1], ["each", 1], ["contain", 1], ["s", 1], ["integers", 1], ["per", 1], ["line", 1], ["where", 1], ["the", 1], ["i", 1], ["th", 1], ["line", 1], ["denotes", 1], ["the", 1], ["preference", 1], ["list", 1], ["of", 1], ["the", 1], ["i", 1], ["th", 1], ["band", 1], ["member", 1], ["starting", 1], ["with", 1], ["his", 1], ["favourite", 1], ["song", 1], ["and", 1], ["ending", 1], ["with", 1], ["his", 1], ["least", 1], ["favourite", 1], ["song", 1], ["the", 1], ["songs", 1], ["are", 1], ["numbered", 1], ["1", 1], ["through", 1], ["s", 0], ["no", 0], ["two", 0], ["band", 0], ["members", 0], ["have", 0], ["the", 0], ["exact", 0], ["same", 0], ["preference", 0], ["lists", 0], ["output", 0], ["output", 1], ["the", 1], ["smallest", 1], ["possible", 1], ["set", 1], ["list", 1], ["using", 1], ["the", 1], ["following", 1], ["format", 1], ["one", 1], ["line", 1], ["with", 1], ["an", 1], ["integer", 1], ["l", 1], ["the", 1], ["length", 1], ["of", 1], ["the", 1], ["smallest", 1], ["possible", 1], ["set", 1], ["list", 1], ["one", 1], ["line", 1], ["with", 1], ["l", 1], ["space", 1], ["separated", 0], ["integers", 0], ["denoting", 0], ["a", 0], ["sorted", 0], ["list", 0], ["of", 0], ["the", 0], ["songs", 0], ["to", 0], ["be", 0], ["played", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["3", 0], ["8", 0], ["4", 0], ["5", 0], ["2", 0], ["1", 0], ["6", 0], ["8", 0], ["3", 0], ["7", 0], ["5", 0], ["2", 0], ["4", 0], ["8", 0], ["6", 0], ["1", 0], ["3", 0], ["7", 0], ["2", 0], ["5", 0], ["4", 0], ["8", 0], ["1", 0], ["6", 0], ["3", 0], ["7", 0], ["sample", 0], ["output", 0], ["1", 0], ["3", 0], ["2", 0], ["4", 0], ["5", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["8", 0], ["6", 0], ["2", 0], ["8", 0], ["7", 0], ["1", 0], ["3", 0], ["4", 0], ["5", 0], ["2", 0], ["8", 0], ["7", 0], ["1", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["sample", 0], ["output", 0], ["2", 0], ["8", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["8", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7253886010362695, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7253886010362695, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7939698492462312, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7939698492462312, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7253886010362695, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7253886010362695, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7939698492462312, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7939698492462312, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou and your friends have just returned from a beautiful vacation in the mountains of the Netherlands. When on vacation, it’s annoying to split the bill on every expense every time, so you just kept all the receipts from the vacation, and wrote down who paid how much for who. Now, it is time to settle the bill. \n\nYou could each take all the receipts showing that someone paid something for you, and then pay that person back. But then you would need a lot of transactions, and you want to keep up the lazy spirit from your trip. In the end, it does not matter who transfers money to whom; as long as in the end, everyone’s balance is $0$.\n\nCan you figure out the least number of transactions needed to settle the score? Assume everyone has enough spare cash to transfer an arbitrary amount of money to another person.\n\n-----Input-----\nInput consists of:\n - A line containing two integers $M$, the number of people in the group, with $1\\leq M \\leq 20$, and $N$, the number of receipts from the trip, with $0\\leq N\\leq 1000$.\n - $N$ lines, each with three integers $a, b, p$, where $0 \\leq a,b < M$, and $1 \\leq p \\leq 1000$, signifying a receipt showing that person $a$ paid $p$ euros for person $b$.\n\n-----Output-----\nOutput a single line containing a single integer, the least number of transactions necessary to settle all bills.\n\n-----Examples-----\nSample Input 1:\n4 2\n0 1 1\n2 3 1\nSample Output 1:\n2\n\nSample Input 2:\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\nSample Output 2:\n0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5308"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5308", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["and", 1], ["your", 1], ["friends", 1], ["have", 1], ["just", 1], ["returned", 1], ["from", 1], ["a", 1], ["beautiful", 1], ["vacation", 1], ["in", 1], ["the", 1], ["mountains", 1], ["of", 1], ["the", 1], ["netherlands", 1], ["when", 1], ["on", 1], ["vacation", 1], ["it’s", 1], ["annoying", 1], ["to", 1], ["split", 1], ["the", 1], ["bill", 1], ["on", 1], ["every", 1], ["expense", 1], ["every", 1], ["time", 1], ["so", 1], ["you", 1], ["just", 1], ["kept", 1], ["all", 1], ["the", 1], ["receipts", 1], ["from", 1], ["the", 1], ["vacation", 1], ["and", 1], ["wrote", 1], ["down", 1], ["who", 1], ["paid", 1], ["how", 1], ["much", 1], ["for", 1], ["who", 1], ["now", 1], ["it", 1], ["is", 1], ["time", 1], ["to", 1], ["settle", 1], ["the", 1], ["bill", 1], ["you", 1], ["could", 1], ["each", 1], ["take", 1], ["all", 1], ["the", 1], ["receipts", 1], ["showing", 1], ["that", 1], ["someone", 1], ["paid", 1], ["something", 1], ["for", 1], ["you", 1], ["and", 1], ["then", 1], ["pay", 1], ["that", 1], ["person", 1], ["back", 1], ["but", 1], ["then", 1], ["you", 1], ["would", 1], ["need", 1], ["a", 1], ["lot", 1], ["of", 1], ["transactions", 1], ["and", 1], ["you", 1], ["want", 1], ["to", 1], ["keep", 1], ["up", 1], ["the", 1], ["lazy", 1], ["spirit", 1], ["from", 1], ["your", 1], ["trip", 1], ["in", 1], ["the", 1], ["end", 1], ["it", 1], ["does", 1], ["not", 1], ["matter", 1], ["who", 1], ["transfers", 1], ["money", 1], ["to", 1], ["whom", 1], ["as", 1], ["long", 1], ["as", 1], ["in", 1], ["the", 1], ["end", 1], ["everyone’s", 1], ["balance", 1], ["is", 1], ["0", 1], ["can", 1], ["you", 1], ["figure", 1], ["out", 1], ["the", 1], ["least", 1], ["number", 1], ["of", 1], ["transactions", 1], ["needed", 1], ["to", 1], ["settle", 1], ["the", 1], ["score", 1], ["assume", 1], ["everyone", 1], ["has", 1], ["enough", 1], ["spare", 0], ["cash", 0], ["to", 0], ["transfer", 0], ["an", 0], ["arbitrary", 0], ["amount", 0], ["of", 0], ["money", 0], ["to", 0], ["another", 0], ["person", 0], ["input", 0], ["input", 0], ["consists", 0], ["of", 0], ["a", 1], ["line", 1], ["containing", 1], ["two", 0], ["integers", 0], ["m", 0], ["the", 0], ["number", 0], ["of", 0], ["people", 0], ["in", 0], ["the", 0], ["group", 0], ["with", 0], ["1", 0], ["leq", 0], ["m", 0], ["leq", 0], ["20", 0], ["and", 0], ["n", 0], ["the", 0], ["number", 0], ["of", 0], ["receipts", 0], ["from", 0], ["the", 0], ["trip", 0], ["with", 0], ["0", 0], ["leq", 0], ["n", 0], ["leq", 0], ["1000", 0], ["n", 0], ["lines", 0], ["each", 0], ["with", 0], ["three", 0], ["integers", 0], ["a", 0], ["b", 0], ["p", 0], ["where", 0], ["0", 0], ["leq", 0], ["a", 0], ["b", 0], ["m", 0], ["and", 0], ["1", 0], ["leq", 0], ["p", 0], ["leq", 0], ["1000", 1], ["signifying", 1], ["a", 1], ["receipt", 0], ["showing", 0], ["that", 0], ["person", 0], ["a", 0], ["paid", 0], ["p", 0], ["euros", 0], ["for", 0], ["person", 0], ["b", 0], ["output", 0], ["output", 1], ["a", 1], ["single", 1], ["line", 1], ["containing", 1], ["a", 1], ["single", 0], ["integer", 0], ["the", 0], ["least", 0], ["number", 0], ["of", 0], ["transactions", 0], ["necessary", 0], ["to", 0], ["settle", 0], ["all", 0], ["bills", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["2", 0], ["0", 0], ["1", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["sample", 0], ["output", 0], ["1", 0], ["2", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["5", 0], ["0", 0], ["1", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["2", 0], ["3", 0], ["3", 0], ["3", 0], ["4", 0], ["3", 0], ["4", 0], ["0", 0], ["3", 0], ["sample", 0], ["output", 0], ["2", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5373665480427047, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5373665480427047, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6791808873720137, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6791808873720137, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5373665480427047, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5373665480427047, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6791808873720137, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6791808873720137, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\n-----Input-----\nThe first line of input contains a line contains a line with four non-negative integers, $2 \\le n \\le 250$, $0 \\le m \\le 5000$, $0 \\le s \\le n-1$ and $0 \\le t \\le n-1$, separated by single spaces, where $n$ is the numbers of nodes in the graph, $m$ is the number of edges, $s$ is the source and $t$ is the sink ($s \\ne t$). Nodes are numbered from $0$ to $n-1$. Then follow $m$ lines, each line consisting of four (space-separated) integers $u$, $v$, $c$ and $w$ indicating that there is an edge from $u$ to $v$ in the graph with capacity $1 \\le c \\le 10000$ and cost $1 \\le w \\le 1000$.\n\n-----Output-----\nOutput a single line containing two integers; the size $F$ of a maximum flow from node $s$ to node $t$, and the cost of a mimimum cost flow of size $F$. You may assume that $F < 2^{31}$.\n\n-----Examples-----\nSample Input 1:\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\nSample Output 1:\n4 140\n\nSample Input 2:\n2 1 0 1\n0 1 1000 100\nSample Output 2:\n1000 100000\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9095"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9095", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["a", 0], ["line", 0], ["contains", 0], ["a", 0], ["line", 0], ["with", 0], ["four", 0], ["non", 0], ["negative", 0], ["integers", 0], ["2", 0], ["le", 0], ["n", 0], ["le", 0], ["250", 0], ["0", 0], ["le", 0], ["m", 0], ["le", 0], ["5000", 0], ["0", 0], ["le", 0], ["s", 0], ["le", 0], ["n", 0], ["1", 0], ["and", 0], ["0", 0], ["le", 0], ["t", 0], ["le", 0], ["n", 0], ["1", 0], ["separated", 2], ["by", 2], ["single", 3], ["spaces", 0], ["where", 0], ["n", 0], ["is", 0], ["the", 0], ["numbers", 0], ["of", 0], ["nodes", 0], ["in", 0], ["the", 0], ["graph", 0], ["m", 0], ["is", 0], ["the", 0], ["number", 0], ["of", 0], ["edges", 0], ["s", 0], ["is", 0], ["the", 0], ["source", 0], ["and", 0], ["t", 0], ["is", 0], ["the", 0], ["sink", 0], ["s", 0], ["ne", 0], ["t", 0], ["nodes", 5], ["are", 5], ["numbered", 5], ["from", 5], ["0", 0], ["to", 0], ["n", 0], ["1", 0], ["then", 0], ["follow", 0], ["m", 0], ["lines", 0], ["each", 0], ["line", 0], ["consisting", 0], ["of", 0], ["four", 0], ["space", 0], ["separated", 0], ["integers", 0], ["u", 0], ["v", 0], ["c", 0], ["and", 3], ["w", 3], ["indicating", 4], ["that", 3], ["there", 0], ["is", 0], ["an", 0], ["edge", 0], ["from", 0], ["u", 0], ["to", 0], ["v", 0], ["in", 0], ["the", 0], ["graph", 0], ["with", 0], ["capacity", 0], ["1", 0], ["le", 0], ["c", 0], ["le", 0], ["10000", 0], ["and", 0], ["cost", 0], ["1", 0], ["le", 0], ["w", 0], ["le", 0], ["1000", 0], ["output", 0], ["output", 0], ["a", 0], ["single", 0], ["line", 0], ["containing", 0], ["two", 0], ["integers", 0], ["the", 0], ["size", 0], ["f", 0], ["of", 0], ["a", 0], ["maximum", 0], ["flow", 0], ["from", 0], ["node", 0], ["s", 0], ["to", 0], ["node", 0], ["t", 0], ["and", 0], ["the", 0], ["cost", 0], ["of", 0], ["a", 0], ["mimimum", 0], ["cost", 0], ["flow", 0], ["of", 0], ["size", 0], ["f", 0], ["you", 0], ["may", 0], ["assume", 0], ["that", 0], ["f", 0], ["2", 0], ["31", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["4", 0], ["0", 0], ["3", 0], ["0", 0], ["1", 0], ["4", 0], ["10", 0], ["1", 0], ["2", 0], ["2", 0], ["10", 0], ["0", 0], ["2", 0], ["4", 0], ["30", 0], ["2", 0], ["3", 0], ["4", 0], ["10", 0], ["sample", 0], ["output", 0], ["1", 0], ["4", 0], ["140", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["1", 0], ["1000", 0], ["100", 0], ["sample", 0], ["output", 0], ["2", 0], ["1000", 0], ["100000", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.05314009661835749, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.01634460547504026, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.2146118721461187, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.07321156773211566, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.05314009661835749, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.01634460547504026, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.2146118721461187, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07321156773211566, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are the owner of IKEA, and you need to order a large number of bolts $B$. There is a single bolt manufacturer, but there are multiple companies reselling these bolts in packs (e.g. boxes, pallets). These companies form a directed chain, where each company buys packs from the previous company and combines these into new packs (with, of course, the logo of the company displayed brilliantly).\n\nAt first glance, it might seem that these intermediate companies offer no advantage, as they just repack the packs of the previous company into larger packs. However, every company has their own target audience, so they want to sell packs with a specific amount of bolts. Because every company only uses the packs of the previous company, it might not be possible to create a pack that has the exact number of bolts specified. Instead, if a company wants to create a pack which is guaranteed to contain $X$ bolts, it bundles various packs from the previous company where the displayed amount of bolts on these packs sums to no less than $X$. If there are multiple such combinations it picks any from those whose displayed sum is minimal. For a better understanding, see the example below. Note that individual companies have no knowledge of the supply chain other than the pack sizes the previous company offers them.\n\nYou realise you can take advantage of this: when a company specifies that a pack has a certain number of bolts, it might in practice contain more! Therefore you start a quest of figuring out which pack has the lowest advertised amount, while still containing at least the number of bolts you need. Thanks to your business relations, you can freely choose the company to buy a pack from, including the manufacturer.\n\nExplanation of first sample\n\nSuppose that we would like to buy $B=310$ bolts, and that there are three companies. The manufacturer (company one) sells packs of $40$ and $65$ bolts. Company two sells packs of $100$ and $150$ bolts. It cannot get these exact amounts from company one, and instead composes them as $100 \\leq 40+65$ and $150 \\leq 40+40+40+40$.\n\nNext comes company three, offering packs of $300$ and $320$ bolts. It can assemble its $300$-pack using three $100$-packs (which we know actually contains $105+105+105 = 315$ bolts) or using two $150$-packs (which we know actually contains $160+160 = 320$ bolts). However, for company three either combination is fine, so you do not know how many bolts a pack actually contains. In this case you assume the worst, i.e. that this pack contains $315$ bolts.\n\nFor its second pack of $320$ bolts, company three uses $100+100+150 \\geq 320$ (which we know really contains $105+105+160=370$ bolts). There are other combinations adding up to more than $320$, but none achieve the minimum of $350$, so we know company three picks that combination.\n\nNote in particular, that company three does not know that the $150$-packs of company two actually contain $160$ bolts (otherwise it could compose its $320$-pack out of two of these). It only knows the amounts advertised by company two.\n\nThe packet of size $300$ sold by company three is the smallest advertised packet that contains at least $B=310$ bolts, so this is the packet we should buy. \n\nPack one\n\nPack two \n\nAdvertised amount\n\nReal amount\n\nAdvertised amount\n\nReal amount\n\nCompany one\n\n$40$\n\n$40$\n\n$65$\n\n$65$\n\nCompany two\n\n$100$\n\n$105$\n\n$150$\n\n$160$\n\nCompany three\n\n$300$\n\n$315$ or $320$\n\n$320$\n\n$370$\n\n-----Input-----\n - The first line of the input contains an integer $1 \\leq B \\leq 10^3$ giving the number of bolts that you need.\n - The second line of the input contains an integer $1 \\leq k \\leq 10$ giving the number of companies.\n - The next $k$ lines each describe a company. Each line consists of the integers $l_ i, n_1, n_2, \\ldots , n_{l_ i}$ meaning that the company $i$ produces $1\\leq l_ i\\leq 10$ types of packages of sizes $0 < n_1< n_2< \\ldots < n_{l_ i} \\leq 10^3$, respectively.\n\n-----Output-----\n - A single integer giving the smallest size of a package that you can buy which contains at least $B$ bolts no matter how the companies build their packages, or impossible if this cannot be achieved.\n\n-----Examples-----\nSample Input 1:\n371\n3\n2 40 65\n2 100 150\n2 300 320\nSample Output 1:\nimpossible\n\nSample Input 2:\n310\n3\n2 40 65\n2 100 150\n2 300 320\nSample Output 2:\n300\n\nSample Input 3:\n90\n2\n2 20 35\n2 88 200\nSample Output 3:\n88\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8506"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8506", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["are", 1], ["the", 1], ["owner", 1], ["of", 1], ["ikea", 1], ["and", 1], ["you", 1], ["need", 1], ["to", 1], ["order", 1], ["a", 1], ["large", 1], ["number", 1], ["of", 1], ["bolts", 1], ["b", 1], ["there", 1], ["is", 1], ["a", 1], ["single", 1], ["bolt", 1], ["manufacturer", 1], ["but", 1], ["there", 1], ["are", 1], ["multiple", 1], ["companies", 1], ["reselling", 1], ["these", 1], ["bolts", 1], ["in", 1], ["packs", 1], ["e", 1], ["g", 1], ["boxes", 1], ["pallets", 1], ["these", 1], ["companies", 1], ["form", 1], ["a", 1], ["directed", 1], ["chain", 1], ["where", 1], ["each", 1], ["company", 1], ["buys", 1], ["packs", 1], ["from", 1], ["the", 1], ["previous", 1], ["company", 1], ["and", 1], ["combines", 1], ["these", 1], ["into", 1], ["new", 1], ["packs", 1], ["with", 1], ["of", 1], ["course", 1], ["the", 1], ["logo", 1], ["of", 1], ["the", 1], ["company", 1], ["displayed", 1], ["brilliantly", 1], ["at", 1], ["first", 1], ["glance", 1], ["it", 1], ["might", 1], ["seem", 1], ["that", 1], ["these", 1], ["intermediate", 1], ["companies", 1], ["offer", 1], ["no", 1], ["advantage", 1], ["as", 1], ["they", 1], ["just", 1], ["repack", 1], ["the", 1], ["packs", 1], ["of", 1], ["the", 1], ["previous", 1], ["company", 1], ["into", 1], ["larger", 1], ["packs", 1], ["however", 1], ["every", 1], ["company", 1], ["has", 1], ["their", 1], ["own", 1], ["target", 1], ["audience", 1], ["so", 1], ["they", 1], ["want", 1], ["to", 1], ["sell", 1], ["packs", 1], ["with", 1], ["a", 1], ["specific", 1], ["amount", 1], ["of", 1], ["bolts", 1], ["because", 1], ["every", 1], ["company", 1], ["only", 1], ["uses", 1], ["the", 1], ["packs", 1], ["of", 1], ["the", 1], ["previous", 1], ["company", 1], ["it", 1], ["might", 1], ["not", 1], ["be", 1], ["possible", 1], ["to", 1], ["create", 1], ["a", 1], ["pack", 1], ["that", 1], ["has", 1], ["the", 1], ["exact", 1], ["number", 1], ["of", 1], ["bolts", 1], ["specified", 1], ["instead", 1], ["if", 1], ["a", 1], ["company", 1], ["wants", 1], ["to", 0], ["create", 0], ["a", 0], ["pack", 0], ["which", 0], ["is", 0], ["guaranteed", 0], ["to", 0], ["contain", 0], ["x", 0], ["bolts", 0], ["it", 0], ["bundles", 0], ["various", 1], ["packs", 1], ["from", 1], ["the", 1], ["previous", 1], ["company", 1], ["where", 1], ["the", 1], ["displayed", 1], ["amount", 1], ["of", 1], ["bolts", 1], ["on", 1], ["these", 1], ["packs", 1], ["sums", 1], ["to", 0], ["no", 0], ["less", 0], ["than", 0], ["x", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["such", 0], ["combinations", 0], ["it", 0], ["picks", 0], ["any", 1], ["from", 1], ["those", 1], ["whose", 1], ["displayed", 1], ["sum", 1], ["is", 1], ["minimal", 1], ["for", 1], ["a", 1], ["better", 1], ["understanding", 1], ["see", 1], ["the", 1], ["example", 1], ["below", 1], ["note", 1], ["that", 1], ["individual", 1], ["companies", 1], ["have", 1], ["no", 1], ["knowledge", 1], ["of", 1], ["the", 1], ["supply", 1], ["chain", 1], ["other", 1], ["than", 1], ["the", 1], ["pack", 1], ["sizes", 1], ["the", 1], ["previous", 1], ["company", 1], ["offers", 1], ["them", 1], ["you", 1], ["realise", 1], ["you", 1], ["can", 1], ["take", 1], ["advantage", 1], ["of", 1], ["this", 1], ["when", 1], ["a", 1], ["company", 1], ["specifies", 1], ["that", 1], ["a", 1], ["pack", 1], ["has", 1], ["a", 1], ["certain", 1], ["number", 1], ["of", 1], ["bolts", 1], ["it", 1], ["might", 1], ["in", 1], ["practice", 1], ["contain", 1], ["more", 1], ["therefore", 1], ["you", 1], ["start", 1], ["a", 1], ["quest", 1], ["of", 1], ["figuring", 1], ["out", 1], ["which", 1], ["pack", 1], ["has", 1], ["the", 1], ["lowest", 1], ["advertised", 1], ["amount", 1], ["while", 1], ["still", 1], ["containing", 1], ["at", 1], ["least", 1], ["the", 1], ["number", 1], ["of", 1], ["bolts", 1], ["you", 1], ["need", 1], ["thanks", 1], ["to", 1], ["your", 1], ["business", 1], ["relations", 1], ["you", 1], ["can", 1], ["freely", 0], ["choose", 0], ["the", 0], ["company", 0], ["to", 0], ["buy", 0], ["a", 0], ["pack", 0], ["from", 0], ["including", 0], ["the", 0], ["manufacturer", 0], ["explanation", 0], ["of", 0], ["first", 0], ["sample", 0], ["suppose", 1], ["that", 1], ["we", 1], ["would", 1], ["like", 1], ["to", 1], ["buy", 1], ["b", 1], ["310", 1], ["bolts", 1], ["and", 1], ["that", 1], ["there", 1], ["are", 1], ["three", 1], ["companies", 1], ["the", 1], ["manufacturer", 1], ["company", 1], ["one", 1], ["sells", 1], ["packs", 1], ["of", 1], ["40", 1], ["and", 1], ["65", 1], ["bolts", 1], ["company", 1], ["two", 1], ["sells", 1], ["packs", 1], ["of", 1], ["100", 1], ["and", 1], ["150", 1], ["bolts", 1], ["it", 1], ["cannot", 1], ["get", 1], ["these", 0], ["exact", 0], ["amounts", 0], ["from", 0], ["company", 0], ["one", 0], ["and", 0], ["instead", 0], ["composes", 0], ["them", 0], ["as", 0], ["100", 0], ["leq", 0], ["40", 0], ["65", 0], ["and", 0], ["150", 0], ["leq", 0], ["40", 1], ["40", 1], ["40", 1], ["40", 1], ["next", 1], ["comes", 1], ["company", 1], ["three", 1], ["offering", 1], ["packs", 1], ["of", 1], ["300", 1], ["and", 1], ["320", 1], ["bolts", 1], ["it", 1], ["can", 0], ["assemble", 0], ["its", 0], ["300", 0], ["pack", 0], ["using", 0], ["three", 0], ["100", 0], ["packs", 0], ["which", 0], ["we", 0], ["know", 0], ["actually", 0], ["contains", 0], ["105", 1], ["105", 0], ["105", 0], ["315", 0], ["bolts", 0], ["or", 0], ["using", 0], ["two", 0], ["150", 0], ["packs", 0], ["which", 0], ["we", 0], ["know", 0], ["actually", 0], ["contains", 0], ["160", 1], ["160", 1], ["320", 1], ["bolts", 1], ["however", 1], ["for", 1], ["company", 1], ["three", 1], ["either", 1], ["combination", 1], ["is", 0], ["fine", 0], ["so", 0], ["you", 0], ["do", 0], ["not", 0], ["know", 0], ["how", 0], ["many", 0], ["bolts", 0], ["a", 0], ["pack", 0], ["actually", 0], ["contains", 0], ["in", 1], ["this", 1], ["case", 1], ["you", 1], ["assume", 1], ["the", 1], ["worst", 1], ["i", 1], ["e", 1], ["that", 1], ["this", 1], ["pack", 1], ["contains", 0], ["315", 0], ["bolts", 0], ["for", 0], ["its", 0], ["second", 0], ["pack", 0], ["of", 0], ["320", 0], ["bolts", 0], ["company", 0], ["three", 0], ["uses", 0], ["100", 0], ["100", 0], ["150", 0], ["geq", 0], ["320", 1], ["which", 1], ["we", 1], ["know", 1], ["really", 1], ["contains", 1], ["105", 1], ["105", 1], ["160", 1], ["370", 1], ["bolts", 1], ["there", 1], ["are", 1], ["other", 1], ["combinations", 1], ["adding", 1], ["up", 1], ["to", 1], ["more", 1], ["than", 1], ["320", 1], ["but", 0], ["none", 0], ["achieve", 0], ["the", 0], ["minimum", 0], ["of", 0], ["350", 0], ["so", 0], ["we", 0], ["know", 0], ["company", 0], ["three", 0], ["picks", 0], ["that", 1], ["combination", 1], ["note", 1], ["in", 1], ["particular", 1], ["that", 1], ["company", 1], ["three", 1], ["does", 1], ["not", 1], ["know", 1], ["that", 1], ["the", 1], ["150", 1], ["packs", 1], ["of", 1], ["company", 1], ["two", 1], ["actually", 1], ["contain", 1], ["160", 1], ["bolts", 1], ["otherwise", 1], ["it", 1], ["could", 1], ["compose", 1], ["its", 1], ["320", 1], ["pack", 1], ["out", 1], ["of", 1], ["two", 1], ["of", 1], ["these", 1], ["it", 1], ["only", 1], ["knows", 1], ["the", 1], ["amounts", 1], ["advertised", 1], ["by", 1], ["company", 1], ["two", 1], ["the", 1], ["packet", 1], ["of", 1], ["size", 1], ["300", 1], ["sold", 1], ["by", 1], ["company", 1], ["three", 1], ["is", 1], ["the", 1], ["smallest", 1], ["advertised", 1], ["packet", 1], ["that", 1], ["contains", 1], ["at", 1], ["least", 0], ["b", 0], ["310", 0], ["bolts", 0], ["so", 0], ["this", 0], ["is", 0], ["the", 0], ["packet", 0], ["we", 0], ["should", 0], ["buy", 0], ["pack", 0], ["one", 0], ["pack", 0], ["two", 0], ["advertised", 0], ["amount", 0], ["real", 0], ["amount", 0], ["advertised", 0], ["amount", 0], ["real", 0], ["amount", 0], ["company", 0], ["one", 0], ["40", 0], ["40", 0], ["65", 0], ["65", 0], ["company", 0], ["two", 0], ["100", 0], ["105", 0], ["150", 0], ["160", 0], ["company", 0], ["three", 0], ["300", 0], ["315", 0], ["or", 0], ["320", 0], ["320", 0], ["370", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["an", 0], ["integer", 0], ["1", 0], ["leq", 0], ["b", 0], ["leq", 0], ["10", 0], ["3", 0], ["giving", 1], ["the", 1], ["number", 1], ["of", 1], ["bolts", 1], ["that", 1], ["you", 0], ["need", 0], ["the", 0], ["second", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["an", 0], ["integer", 0], ["1", 0], ["leq", 0], ["k", 0], ["leq", 0], ["10", 1], ["giving", 1], ["the", 1], ["number", 1], ["of", 1], ["companies", 1], ["the", 1], ["next", 1], ["k", 0], ["lines", 0], ["each", 0], ["describe", 0], ["a", 0], ["company", 0], ["each", 0], ["line", 0], ["consists", 0], ["of", 0], ["the", 0], ["integers", 0], ["l", 0], ["i", 0], ["n", 0], ["1", 0], ["n", 0], ["2", 0], ["ldots", 0], ["n", 0], ["l", 0], ["i", 0], ["meaning", 0], ["that", 0], ["the", 0], ["company", 0], ["i", 0], ["produces", 0], ["1", 0], ["leq", 0], ["l", 0], ["i", 0], ["leq", 0], ["10", 0], ["types", 0], ["of", 0], ["packages", 0], ["of", 0], ["sizes", 0], ["0", 0], ["n", 0], ["1", 0], ["n", 0], ["2", 0], ["ldots", 0], ["n", 0], ["l", 0], ["i", 0], ["leq", 0], ["10", 0], ["3", 0], ["respectively", 0], ["output", 0], ["a", 1], ["single", 1], ["integer", 1], ["giving", 1], ["the", 1], ["smallest", 1], ["size", 1], ["of", 1], ["a", 1], ["package", 1], ["that", 1], ["you", 1], ["can", 1], ["buy", 1], ["which", 1], ["contains", 1], ["at", 1], ["least", 1], ["b", 1], ["bolts", 1], ["no", 1], ["matter", 1], ["how", 1], ["the", 0], ["companies", 0], ["build", 0], ["their", 0], ["packages", 0], ["or", 0], ["impossible", 0], ["if", 0], ["this", 0], ["cannot", 0], ["be", 0], ["achieved", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["371", 0], ["3", 0], ["2", 0], ["40", 0], ["65", 0], ["2", 0], ["100", 0], ["150", 0], ["2", 0], ["300", 0], ["320", 0], ["sample", 0], ["output", 0], ["1", 0], ["impossible", 0], ["sample", 0], ["input", 0], ["2", 0], ["310", 0], ["3", 0], ["2", 0], ["40", 0], ["65", 0], ["2", 0], ["100", 0], ["150", 0], ["2", 0], ["300", 0], ["320", 0], ["sample", 0], ["output", 0], ["2", 0], ["300", 0], ["sample", 0], ["input", 0], ["3", 0], ["90", 0], ["2", 0], ["2", 0], ["20", 0], ["35", 0], ["2", 0], ["88", 0], ["200", 0], ["sample", 0], ["output", 0], ["3", 0], ["88", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5853658536585366, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5853658536585366, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7737041719342604, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7737041719342604, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5853658536585366, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5853658536585366, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7737041719342604, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7737041719342604, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\n\"The zombies are lurking outside. Waiting. Moaning. And when they come...\"\n\n\"When they come?\"\n\n\"I hope the Wall is high enough.\"\n\nZombie attacks have hit the Wall, our line of defense in the North. Its protection is failing, and cracks are showing. In places, gaps have appeared, splitting the wall into multiple segments. We call on you for help. Go forth and explore the wall! Report how many disconnected segments there are.\n\nThe wall is a two-dimensional structure made of bricks. Each brick is one unit wide and one unit high. Bricks are stacked on top of each other to form columns that are up to R bricks high. Each brick is placed either on the ground or directly on top of another brick. Consecutive non-empty columns form a wall segment. The entire wall, all the segments and empty columns in-between, is C columns wide.\n\n\n-----Input-----\n\nThe first line of the input consists of two space-separated integers R and C, 1 ≤ R, C ≤ 100. The next R lines provide a description of the columns as follows:   each of the R lines contains a string of length C,  the c-th character of line r is B if there is a brick in column c and row R - r + 1, and . otherwise.  The input will contain at least one character B and it will be valid.\n\n\n-----Output-----\n\nThe number of wall segments in the input configuration.\n\n\n-----Examples-----\nInput\n3 7\n.......\n.......\n.BB.B..\n\nOutput\n2\n\nInput\n4 5\n..B..\n..B..\nB.B.B\nBBB.B\n\nOutput\n2\n\nInput\n4 6\n..B...\nB.B.BB\nBBB.BB\nBBBBBB\n\nOutput\n1\n\nInput\n1 1\nB\n\nOutput\n1\n\nInput\n10 7\n.......\n.......\n.......\n.......\n.......\n.......\n.......\n.......\n...B...\nB.BB.B.\n\nOutput\n3\n\nInput\n8 8\n........\n........\n........\n........\n.B......\n.B.....B\n.B.....B\n.BB...BB\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample case, the 2nd and 3rd columns define the first wall segment, and the 5th column defines the second.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n, m = map(int, input().split())\na = [input() for i in range(n)]\nans = 0\ni = 0\nwhile i < m:\n\tif a[n-1][i] == \"B\":\n\t\tans += 1\n\t\twhile i < m and a[n-1][i] == \"B\":\n\t\t\ti += 1\n\ti += 1\n\nprint(ans)\n", "r, c = list(map(int, input().split()))\n\nfor _ in range(r-1):\n\tinput()\n\nbottom = input()\n\nsections = 0\n\nlooking_for_new_section = True\n\n\nfor brick in bottom:\n\tif looking_for_new_section:\n\t\tif brick == 'B':\n\t\t\tlooking_for_new_section = False\n\t\t\tsections += 1\n\telse:\n\t\tif brick == '.':\n\t\t\tlooking_for_new_section = True\n\nprint(sections)\n", "import sys, math\nn,m = list(map(int,input().split()))\nfor i in range(n-1):\n\tinput()\nw=input()\nw+='.'\nans = 0\nnow=1\nfor i in w:\n\tif i == 'B':\n\t\tif now:\n\t\t\tnow = 0\n\t\t\tans+=1\n\t\telse:\n\t\t\tcontinue\n\telse:\n\t\tnow = 1\nprint(ans)\n", "from sys import stdin as fin, setrecursionlimit as srl\n# fin = open(\"hcc2016d1.in\", \"r\")\ndebug = False\n\ndef process():\n\tr, c = list(map(int, fin.readline().split()))\n\temp = [True] * c\n\tfor j in range(r):\n\t\trow = fin.readline().rstrip()\n\t\tfor i in range(c):\n\t\t\tif row[i] == 'B':\n\t\t\t\temp[i] = False\n\tprev, cnt = True, 0\n\tfor i in range(c):\n\t\tif prev and not emp[i]:\n\t\t\tcnt += 1\n\t\tprev = emp[i]\n\tprint(cnt)\n# fin.readline()\n# process()\nif not debug:\n\tprocess()\nelse:\n\twhile fin.readline().strip() == '':\n\t\tprocess()\n\t\tprint(\"----------------------------\")\n", "R, C = list(map(int, input().split()))\nline = '.' * (C+2)\nwall = [line]\nfor _ in range(R):\n\twall.append('.' + input() + '.')\nwall.append(line)\n\nvs = set()\nans = 0\n\n\ndef visit(r, c):\n\tq = [(r, c)]\n\twhile q:\n\t\tr, c = q.pop()\n\t\tif (r, c) in vs:\n\t\t\tcontinue\n\t\tvs.add((r, c))\n\t\tif wall[r-1][c] == 'B':\n\t\t\tq.append((r-1, c))\n\t\tif wall[r+1][c] == 'B':\n\t\t\tq.append((r+1, c))\n\t\tif wall[r][c-1] == 'B':\n\t\t\tq.append((r, c-1))\n\t\tif wall[r][c+1] == 'B':\n\t\t\tq.append((r, c+1))\n\nfor r in range(1, R+1):\n\tfor c in range(1, C+1):\n\t\tif wall[r][c] == 'B' and (r, c) not in vs:\n\t\t\tans += 1\n\t\t\tvisit(r, c)\n\nprint(ans)\n", "read = lambda: list(map(int, input().split()))\nn, m = read()\na = [input() for i in range(n)]\ns = a[n - 1].split('.')\ncnt = len(s) - s.count('')\nprint(cnt)\n", "n,m=map(int,input().split())\nfor i in range(n):\n\tk=input()\nf=1\nans=0\nfor i in k:\n\tif i=='B' and f:\n\t\tans+=1\n\t\tf=0\n\tif i=='.':\n\t\tf=1\nprint(ans)\n", "r, c = list(map(int, input().split()))\n\nlast = \"\"\nfor i in range(r):\n\ts = str(input())\n\n\tif i == r - 1:\n\t\tlast = s\n\n\nanswer = 0\nleft = 0\n\nwhile left <= c - 1:\n\tif last[left] == \"B\":\n\t\ttry:\n\t\t\twhile last[left] == \"B\":\n\t\t\t\tleft += 1\n\t\texcept Exception:\n\t\t\tpass\n\t\tanswer += 1\n\telse:\n\t\tleft += 1\n\n\nprint(answer)\n\n", "# 690 D1\nr,c = [int(i) for i in input().split()]\nfor i in range(r-1):\n\tinput()\ns = input()\nsegs = 0\nprev = '.'\nfor x in s:\n\tif x=='B' and prev =='.':\n\t\tsegs += 1\n\tprev = x\nprint(segs)\n", "import sys, math\nn,m = list(map(int,input().split()))\nfor i in range(n-1):\n\tinput()\nw=input()\nw+='.'\nanc = 0\nnow=1\nfor i in w:\n\tif i == 'B':\n\t\tif now:\n\t\t\tnow = 0\n\t\t\tanc+=1\n\t\telse:\n\t\t\tcontinue\n\telse:\n\t\tnow = 1\nprint(anc)\n", "r,c=[int(i) for i in input().split()]\nfor i in range(r-1):\n\tinput()\ns=input()\nfor i in range(c):\n\ts=s.replace('BB','B')\nprint(s.count('B'))\n", "inc=input().split(' ')\nfor i in range(int(inc[0])):\n\tfoundation = input()\nbl=True\nblock=0\nfor i in range(int(inc[1])):\n\tif bl and foundation[i] == 'B':\n\t\tbl=False\n\t\tblock+=1\n\telif (not bl) and foundation[i] == '.':\n\t\tbl=True\nprint (block)\n", "x=input().split()\nr=int(x[0])\nmas=\"\"\nfor i in range(r):\n\tif i+1==r:\n\t   mas=input()\n\t   mas=mas+\".\"\n\t   mas=\".\"+mas\n\telse:\n\t input()\ng=0\nfor i in range(len(mas)-1):\n   if mas[i]!=mas[i+1]:\n\t  g=g+1\nprint(int(g/2))\n", "rc = input()\nrc = rc.split()\n\nr = int(rc[0])\nc = int(rc[1])\n\nfor i in range(r):\n\trow = input()\n\ncount=0\nfor i in range(len(row)):\n\t if(row[i] == 'B' and (i==0 or row[i-1]=='.')):\n\t \tcount+=2\n\t if(row[i] == 'B' and (i==len(row)-1 or row[i+1]=='.')):\n\t \tcount-=1\n\t \nprint (count)\n", "n, m = list(map(int, input().split()))\na = [input() for _ in range(n)]\nused = [[False] * m for _ in range(n)]\nans = 0\nfor i in range(n):\n\tfor j in range(m):\n\t\tif not used[i][j] and a[i][j] == \"B\":\n\t\t\tans += 1\n\t\t\tq = [(i, j)]\n\t\t\tused[i][j] = True\n\t\t\thead = 0\n\t\t\twhile head < len(q):\n\t\t\t\tx, y = q[head]\n\t\t\t\thead += 1\n\t\t\t\tfor d in range(4):\n\t\t\t\t\txx = x + (1 if d == 0 else -1 if d == 1 else 0)\n\t\t\t\t\tyy = y + (1 if d == 2 else -1 if d == 3 else 0)\n\t\t\t\t\tif 0 <= xx < n and 0 <= yy < m and not used[xx][yy] and a[xx][yy] == \"B\":\n\t\t\t\t\t\tused[xx][yy] = True\n\t\t\t\t\t\tq.append((xx, yy))\nprint(ans)\n", "import sys\n#with open(filename, 'r') as f:\nwith sys.stdin as f:\n\tinput_list = list(f)\nfor i, line in enumerate(input_list):\n\tif i == 0:\n\t\tR = int(line.split(\" \")[0])\n\telse:\n\t\tif i == R:\n\t\t\tnb_walls = len(list(filter(lambda x: len(x) > 0, line.strip().split('.'))))\n\t\t\tprint(nb_walls)\n", "r,c=[int(i) for i in input().split()]\nfor i in range(r-1):\n\tinput()\ns=input()\nfor i in range(c):\n\ts=s.replace('BB','B')\nprint(s.count('B'))\n", "r, c = input().split()\nfor q in range(int(r)): s = input() + '.'\nprint(s.count('B.'))\n", "mod = 1000000007\nii = lambda : int(input())\nsi = lambda : input()\ndgl = lambda : list(map(int, input()))\nf = lambda : map(int, input().split())\nil = lambda : list(map(int, input().split()))\nls = lambda : list(input())\nfrom itertools import groupby\nn,m=f()\ncnt=0\nx=''\nfor i in range(n):\n\tx=si()\nc=0\nfor i,j in groupby(x):\n\tc+=(i=='B')\nprint(c)\n", "n,m = list(map(int,input().split()))\nc = []\nfor i in range(n):\n\ta = list(input())\nl = 0\nfor i in range(len(a)-1):\n\tif(a[i]=='B' and a[i+1]=='.'):\n\t\tl+=1\nif(a[-1]=='B'):\n\tl+=1\nprint(l)\n", "n, m = list(map(int, input().split()))\na = ''\nfor _ in range(n):\n\ta = input()\nans = 0\ni = 0\nwhile i < m:\n\tif 'B' == a[i]:\n\t\tans += 1\n\t\twhile i < m and 'B' == a[i]:\n\t\t\ti += 1\n\telse:\n\t\ti += 1\nprint(ans)\n", "r, c = map(int, input().split())\n\nfor i in range(r-1):\n\ts = input()\ns = input()\n\nx = 0\ncnt = 0\nfor i in range(c):\n\tif s[i] == \"B\":\n\t\tx += 1\n\telse:\n\t\tif x > 0:\n\t\t\tcnt += 1\n\t\tx = 0\nif x > 0:\n\tcnt += 1\nprint (cnt)\n", "r,c=list(map(int,input().split()))\na=[]\nfor i in range(r):\n\ta.append(input())\nb=[]\nfor i in range(c):\n\te=0\n\tfor j in range(r):\n\t\tif a[j][i]==\"B\":\n\t\t\te=1\n\tb.append(e)\nd=0\ne=0\nfor i in range(c):\n\tif b[i]==1:\n\t\td+=1\n\tif b[i]==0 and d!=0:\n\t\td=0\n\t\te+=1\nif d!=0:\n\tprint(e+1)\nelse:\n\tprint(e)\n"], "id": "id9510"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9510", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 0], ["zombies", 0], ["are", 0], ["lurking", 0], ["outside", 0], ["waiting", 0], ["moaning", 0], ["and", 0], ["when", 0], ["they", 0], ["come", 0], ["when", 1], ["they", 1], ["come", 1], ["i", 1], ["hope", 1], ["the", 1], ["wall", 1], ["is", 1], ["high", 1], ["enough", 1], ["zombie", 1], ["attacks", 1], ["have", 1], ["hit", 1], ["the", 1], ["wall", 1], ["our", 1], ["line", 1], ["of", 1], ["defense", 1], ["in", 1], ["the", 1], ["north", 1], ["its", 1], ["protection", 1], ["is", 1], ["failing", 1], ["and", 1], ["cracks", 1], ["are", 1], ["showing", 1], ["in", 1], ["places", 1], ["gaps", 1], ["have", 1], ["appeared", 1], ["splitting", 1], ["the", 1], ["wall", 1], ["into", 1], ["multiple", 1], ["segments", 1], ["we", 1], ["call", 1], ["on", 1], ["you", 1], ["for", 1], ["help", 1], ["go", 1], ["forth", 1], ["and", 1], ["explore", 1], ["the", 1], ["wall", 1], ["report", 1], ["how", 1], ["many", 1], ["disconnected", 1], ["segments", 1], ["there", 1], ["are", 1], ["the", 1], ["wall", 1], ["is", 1], ["a", 1], ["two", 1], ["dimensional", 1], ["structure", 1], ["made", 1], ["of", 1], ["bricks", 1], ["each", 1], ["brick", 1], ["is", 1], ["one", 1], ["unit", 1], ["wide", 1], ["and", 1], ["one", 1], ["unit", 1], ["high", 1], ["bricks", 1], ["are", 1], ["stacked", 1], ["on", 1], ["top", 1], ["of", 1], ["each", 1], ["other", 1], ["to", 1], ["form", 1], ["columns", 1], ["that", 1], ["are", 1], ["up", 1], ["to", 1], ["r", 1], ["bricks", 1], ["high", 1], ["each", 1], ["brick", 1], ["is", 1], ["placed", 1], ["either", 1], ["on", 1], ["the", 1], ["ground", 1], ["or", 1], ["directly", 1], ["on", 1], ["top", 1], ["of", 1], ["another", 1], ["brick", 1], ["consecutive", 1], ["non", 1], ["empty", 1], ["columns", 1], ["form", 1], ["a", 1], ["wall", 1], ["segment", 1], ["the", 1], ["entire", 1], ["wall", 1], ["all", 0], ["the", 0], ["segments", 0], ["and", 0], ["empty", 0], ["columns", 0], ["in", 0], ["between", 0], ["is", 0], ["c", 0], ["columns", 0], ["wide", 0], ["input", 22], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["consists", 0], ["of", 0], ["two", 2], ["space", 0], ["separated", 0], ["integers", 0], ["r", 0], ["and", 0], ["c", 0], ["1", 0], ["≤", 0], ["r", 0], ["c", 0], ["≤", 0], ["100", 0], ["the", 0], ["next", 0], ["r", 0], ["lines", 0], ["provide", 0], ["a", 0], ["description", 0], ["of", 0], ["the", 0], ["columns", 0], ["as", 0], ["follows", 0], ["each", 0], ["of", 0], ["the", 0], ["r", 0], ["lines", 0], ["contains", 0], ["a", 0], ["string", 0], ["of", 0], ["length", 0], ["c", 0], ["the", 1], ["c", 1], ["th", 1], ["character", 1], ["of", 1], ["line", 1], ["r", 1], ["is", 1], ["b", 1], ["if", 1], ["there", 1], ["is", 1], ["a", 1], ["brick", 1], ["in", 1], ["column", 1], ["c", 1], ["and", 1], ["row", 1], ["r", 1], ["r", 1], ["1", 1], ["and", 1], ["otherwise", 1], ["the", 1], ["input", 1], ["will", 0], ["contain", 0], ["at", 0], ["least", 0], ["one", 0], ["character", 0], ["b", 0], ["and", 0], ["it", 0], ["will", 0], ["be", 0], ["valid", 0], ["output", 0], ["the", 0], ["number", 0], ["of", 0], ["wall", 0], ["segments", 0], ["in", 0], ["the", 0], ["input", 0], ["configuration", 0], ["examples", 0], ["input", 0], ["3", 0], ["7", 0], ["bb", 0], ["b", 0], ["output", 0], ["2", 0], ["input", 0], ["4", 0], ["5", 0], ["b", 0], ["b", 0], ["b", 0], ["b", 0], ["b", 0], ["bbb", 0], ["b", 0], ["output", 0], ["2", 0], ["input", 0], ["4", 0], ["6", 0], ["b", 0], ["b", 0], ["b", 0], ["bb", 0], ["bbb", 0], ["bb", 0], ["bbbbbb", 0], ["output", 0], ["1", 0], ["input", 0], ["1", 0], ["1", 0], ["b", 0], ["output", 0], ["1", 0], ["input", 0], ["10", 0], ["7", 0], ["b", 0], ["b", 0], ["bb", 0], ["b", 0], ["output", 0], ["3", 0], ["input", 0], ["8", 0], ["8", 0], ["b", 0], ["b", 0], ["b", 0], ["b", 0], ["b", 0], ["bb", 0], ["bb", 0], ["output", 0], ["2", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["sample", 1], ["case", 1], ["the", 1], ["2nd", 1], ["and", 1], ["3rd", 1], ["columns", 1], ["define", 0], ["the", 0], ["first", 0], ["wall", 0], ["segment", 0], ["and", 0], ["the", 0], ["5th", 0], ["column", 0], ["defines", 0], ["the", 0], ["second", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5062111801242236, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5016939582156974, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.655688622754491, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.655688622754491, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5031055900621118, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5015527950310559, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.655688622754491, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.655688622754491, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["m", 0], ["if", 0], ["a", 0], ["n", 0], ["1", 0], ["i", 0], ["b", 0], ["ans", 0], ["1", 0], ["while", 0], ["i", 0], ["m", 0], ["and", 0], ["a", 0], ["n", 0], ["1", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["r", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["r", 0], ["1", 0], ["input", 0], ["bottom", 0], ["input", 0], ["sections", 0], ["0", 0], ["looking", 0], ["for", 0], ["new", 0], ["section", 0], ["true", 0], ["for", 0], ["brick", 0], ["in", 0], ["bottom", 0], ["if", 0], ["looking", 0], ["for", 0], ["new", 0], ["section", 0], ["if", 0], ["brick", 0], ["b", 0], ["looking", 0], ["for", 0], ["new", 0], ["section", 0], ["false", 0], ["sections", 0], ["1", 0], ["else", 0], ["if", 0], ["brick", 0], ["looking", 0], ["for", 0], ["new", 0], ["section", 0], ["true", 0], ["print", 0], ["sections", 0], ["import", 0], ["sys", 0], ["math", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["input", 0], ["w", 0], ["input", 0], ["w", 0], ["ans", 0], ["0", 0], ["now", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["w", 0], ["if", 0], ["i", 0], ["b", 0], ["if", 0], ["now", 0], ["now", 0], ["0", 0], ["ans", 0], ["1", 0], ["else", 0], ["continue", 0], ["else", 0], ["now", 0], ["1", 0], ["print", 0], ["ans", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["as", 0], ["fin", 0], ["setrecursionlimit", 0], ["as", 0], ["srl", 0], ["fin", 0], ["open", 0], ["hcc2016d1", 0], ["in", 0], ["r", 0], ["debug", 0], ["false", 0], ["def", 0], ["process", 0], ["r", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["fin", 0], ["readline", 0], ["split", 0], ["emp", 0], ["true", 0], ["c", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["r", 0], ["row", 0], ["fin", 0], ["readline", 0], ["rstrip", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c", 0], ["if", 0], ["row", 0], ["i", 0], ["b", 0], ["emp", 0], ["i", 0], ["false", 0], ["prev", 0], ["cnt", 0], ["true", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c", 0], ["if", 0], ["prev", 0], ["and", 0], ["not", 0], ["emp", 0], ["i", 0], ["cnt", 0], ["1", 0], ["prev", 0], ["emp", 0], ["i", 0], ["print", 0], ["cnt", 0], ["fin", 0], ["readline", 0], ["process", 0], ["if", 0], ["not", 0], ["debug", 0], ["process", 0], ["else", 0], ["while", 0], ["fin", 0], ["readline", 0], ["strip", 0], ["process", 0], ["print", 0], ["r", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["line", 0], ["c", 0], ["2", 0], ["wall", 0], ["line", 0], ["for", 0], ["in", 0], ["range", 0], ["r", 0], ["wall", 0], ["append", 0], ["input", 0], ["wall", 0], ["append", 0], ["line", 0], ["vs", 0], ["set", 0], ["ans", 0], ["0", 0], ["def", 0], ["visit", 0], ["r", 0], ["c", 0], ["q", 0], ["r", 0], ["c", 0], ["while", 0], ["q", 0], ["r", 0], ["c", 0], ["q", 0], ["pop", 0], ["if", 0], ["r", 0], ["c", 0], ["in", 0], ["vs", 0], ["continue", 0], ["vs", 0], ["add", 0], ["r", 0], ["c", 0], ["if", 0], ["wall", 0], ["r", 0], ["1", 0], ["c", 0], ["b", 0], ["q", 0], ["append", 0], ["r", 0], ["1", 0], ["c", 0], ["if", 0], ["wall", 0], ["r", 0], ["1", 0], ["c", 0], ["b", 0], ["q", 0], ["append", 0], ["r", 0], ["1", 0], ["c", 0], ["if", 0], ["wall", 0], ["r", 0], ["c", 0], ["1", 0], ["b", 0], ["q", 0], ["append", 0], ["r", 0], ["c", 0], ["1", 0], ["if", 0], ["wall", 0], ["r", 0], ["c", 0], ["1", 0], ["b", 0], ["q", 0], ["append", 0], ["r", 0], ["c", 0], ["1", 0], ["for", 0], ["r", 0], ["in", 0], ["range", 0], ["1", 0], ["r", 0], ["1", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["1", 0], ["c", 0], ["1", 0], ["if", 0], ["wall", 0], ["r", 0], ["c", 0], ["b", 0], ["and", 0], ["r", 0], ["c", 0], ["not", 0], ["in", 0], ["vs", 0], ["ans", 0], ["1", 0], ["visit", 0], ["r", 0], ["c", 0], ["print", 0], ["ans", 0], ["read", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["m", 0], ["read", 0], ["a", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["a", 0], ["n", 0], ["1", 0], ["split", 0], ["cnt", 0], ["len", 0], ["s", 0], ["s", 0], ["count", 0], ["print", 0], ["cnt", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["input", 0], ["f", 0], ["1", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["k", 0], ["if", 0], ["i", 0], ["b", 0], ["and", 0], ["f", 0], ["ans", 0], ["1", 0], ["f", 0], ["0", 0], ["if", 0], ["i", 0], ["f", 0], ["1", 0], ["print", 0], ["ans", 0], ["r", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["last", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["s", 0], ["str", 0], ["input", 0], ["if", 0], ["i", 0], ["r", 0], ["1", 0], ["last", 0], ["s", 0], ["answer", 0], ["0", 0], ["left", 0], ["0", 0], ["while", 0], ["left", 0], ["c", 0], ["1", 0], ["if", 0], ["last", 0], ["left", 0], ["b", 0], ["try", 0], ["while", 0], ["last", 0], ["left", 0], ["b", 0], ["left", 0], ["1", 0], ["except", 0], ["exception", 0], ["pass", 0], ["answer", 0], ["1", 0], ["else", 0], ["left", 0], ["1", 0], ["print", 0], ["answer", 0], ["690", 0], ["d1", 0], ["r", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["1", 0], ["input", 0], ["s", 0], ["input", 0], ["segs", 0], ["0", 0], ["prev", 0], ["for", 0], ["x", 0], ["in", 0], ["s", 0], ["if", 0], ["x", 0], ["b", 0], ["and", 0], ["prev", 0], ["segs", 0], ["1", 0], ["prev", 0], ["x", 0], ["print", 0], ["segs", 0], ["import", 0], ["sys", 0], ["math", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["input", 0], ["w", 0], ["input", 0], ["w", 0], ["anc", 0], ["0", 0], ["now", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["w", 0], ["if", 0], ["i", 0], ["b", 0], ["if", 0], ["now", 0], ["now", 0], ["0", 0], ["anc", 0], ["1", 0], ["else", 0], ["continue", 0], ["else", 0], ["now", 0], ["1", 0], ["print", 0], ["anc", 0], ["r", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["1", 0], ["input", 0], ["s", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c", 0], ["s", 0], ["s", 0], ["replace", 0], ["bb", 0], ["b", 0], ["print", 0], ["s", 0], ["count", 0], ["b", 0], ["inc", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["inc", 0], ["0", 0], ["foundation", 0], ["input", 0], ["bl", 0], ["true", 0], ["block", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["inc", 0], ["1", 0], ["if", 0], ["bl", 0], ["and", 0], ["foundation", 0], ["i", 0], ["b", 0], ["bl", 0], ["false", 0], ["block", 0], ["1", 0], ["elif", 0], ["not", 0], ["bl", 0], ["and", 0], ["foundation", 0], ["i", 0], ["bl", 0], ["true", 0], ["print", 0], ["block", 0], ["x", 0], ["input", 0], ["split", 0], ["r", 0], ["int", 0], ["x", 0], ["0", 0], ["mas", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["if", 0], ["i", 0], ["1", 0], ["r", 0], ["mas", 0], ["input", 0], ["mas", 0], ["mas", 0], ["mas", 0], ["mas", 0], ["else", 0], ["input", 0], ["g", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["mas", 0], ["1", 0], ["if", 0], ["mas", 0], ["i", 0], ["mas", 0], ["i", 0], ["1", 0], ["g", 0], ["g", 0], ["1", 0], ["print", 0], ["int", 0], ["g", 0], ["2", 0], ["rc", 0], ["input", 0], ["rc", 0], ["rc", 0], ["split", 0], ["r", 0], ["int", 0], ["rc", 0], ["0", 0], ["c", 0], ["int", 0], ["rc", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["row", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["row", 0], ["if", 0], ["row", 0], ["i", 0], ["b", 0], ["and", 0], ["i", 0], ["0", 0], ["or", 0], ["row", 0], ["i", 0], ["1", 0], ["count", 0], ["2", 0], ["if", 0], ["row", 0], ["i", 0], ["b", 0], ["and", 0], ["i", 0], ["len", 0], ["row", 0], ["1", 0], ["or", 0], ["row", 0], ["i", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["used", 0], ["false", 0], ["m", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["m", 0], ["if", 0], ["not", 0], ["used", 0], ["i", 0], ["j", 0], ["and", 0], ["a", 0], ["i", 0], ["j", 0], ["b", 0], ["ans", 0], ["1", 0], ["q", 0], ["i", 0], ["j", 0], ["used", 0], ["i", 0], ["j", 0], ["true", 0], ["head", 0], ["0", 0], ["while", 0], ["head", 0], ["len", 0], ["q", 0], ["x", 0], ["y", 0], ["q", 0], ["head", 0], ["head", 0], ["1", 0], ["for", 0], ["d", 0], ["in", 0], ["range", 0], ["4", 0], ["xx", 0], ["x", 0], ["1", 0], ["if", 0], ["d", 0], ["0", 0], ["else", 0], ["1", 0], ["if", 0], ["d", 0], ["1", 0], ["else", 0], ["0", 0], ["yy", 0], ["y", 0], ["1", 0], ["if", 0], ["d", 0], ["2", 0], ["else", 0], ["1", 0], ["if", 0], ["d", 0], ["3", 0], ["else", 0], ["0", 0], ["if", 0], ["0", 0], ["xx", 0], ["n", 0], ["and", 0], ["0", 0], ["yy", 0], ["m", 0], ["and", 0], ["not", 0], ["used", 0], ["xx", 0], ["yy", 0], ["and", 0], ["a", 0], ["xx", 0], ["yy", 0], ["b", 0], ["used", 0], ["xx", 0], ["yy", 0], ["true", 0], ["q", 0], ["append", 0], ["xx", 0], ["yy", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["with", 0], ["open", 0], ["filename", 0], ["r", 0], ["as", 0], ["f", 0], ["with", 0], ["sys", 0], ["stdin", 0], ["as", 0], ["f", 0], ["input", 0], ["list", 0], ["list", 0], ["f", 0], ["for", 0], ["i", 0], ["line", 0], ["in", 0], ["enumerate", 0], ["input", 0], ["list", 0], ["if", 0], ["i", 0], ["0", 0], ["r", 0], ["int", 0], ["line", 0], ["split", 0], ["0", 0], ["else", 0], ["if", 0], ["i", 0], ["r", 0], ["nb", 0], ["walls", 0], ["len", 0], ["list", 0], ["filter", 0], ["lambda", 0], ["x", 0], ["len", 0], ["x", 0], ["0", 0], ["line", 0], ["strip", 0], ["split", 0], ["print", 0], ["nb", 0], ["walls", 0], ["r", 0], ["c", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["1", 0], ["input", 0], ["s", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c", 0], ["s", 0], ["s", 0], ["replace", 0], ["bb", 0], ["b", 0], ["print", 0], ["s", 0], ["count", 0], ["b", 0], ["r", 0], ["c", 0], ["input", 0], ["split", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["int", 0], ["r", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["b", 0], ["mod", 0], ["1000000007", 0], ["ii", 0], ["lambda", 0], ["int", 0], ["input", 0], ["si", 0], ["lambda", 0], ["input", 0], ["dgl", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["f", 0], ["lambda", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["il", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ls", 0], ["lambda", 0], ["list", 0], ["input", 0], ["from", 0], ["itertools", 0], ["import", 0], ["groupby", 0], ["n", 0], ["m", 0], ["f", 0], ["cnt", 0], ["0", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["si", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["groupby", 0], ["x", 0], ["c", 0], ["i", 0], ["b", 0], ["print", 0], ["c", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["list", 0], ["input", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["b", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 0], ["l", 0], ["1", 0], ["if", 0], ["a", 0], ["1", 0], ["b", 0], ["l", 0], ["1", 0], ["print", 0], ["l", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["input", 0], ["ans", 0], ["0", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["m", 0], ["if", 0], ["b", 0], ["a", 0], ["i", 0], ["ans", 0], ["1", 0], ["while", 0], ["i", 0], ["m", 0], ["and", 0], ["b", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["else", 0], ["i", 0], ["1", 0], ["print", 0], ["ans", 0], ["r", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["1", 0], ["s", 0], ["input", 0], ["s", 0], ["input", 0], ["x", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c", 0], ["if", 0], ["s", 0], ["i", 0], ["b", 0], ["x", 0], ["1", 0], ["else", 0], ["if", 0], ["x", 0], ["0", 0], ["cnt", 0], ["1", 0], ["x", 0], ["0", 0], ["if", 0], ["x", 0], ["0", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["r", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["r", 0], ["a", 0], ["append", 0], ["input", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c", 0], ["e", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["r", 0], ["if", 0], ["a", 0], ["j", 0], ["i", 0], ["b", 0], ["e", 0], ["1", 0], ["b", 0], ["append", 0], ["e", 0], ["d", 0], ["0", 0], ["e", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["d", 0], ["1", 0], ["if", 0], ["b", 0], ["i", 0], ["0", 0], ["and", 0], ["d", 0], ["0", 0], ["d", 0], ["0", 0], ["e", 0], ["1", 0], ["if", 0], ["d", 0], ["0", 0], ["print", 0], ["e", 0], ["1", 0], ["else", 0], ["print", 0], ["e", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nWhile working a night shift at the university as a janitor, you absentmindedly erase a blackboard covered with equations, only to realize afterwards that these were no ordinary equations! They were the notes of the venerable Professor E. I. N. Stein who earlier in the day solved the elusive maximum quadrilateral problem! Quick, you have to redo his work so no one noticed what happened. \n\nThe maximum quadrilateral problem is quite easy to state: given four side lengths $s_1, s_2, s_3$ and $s_4$, find the maximum area of any quadrilateral that can be constructed using these lengths. A quadrilateral is a polygon with four vertices.\n\n-----Input-----\nThe input consists of a single line with four positive integers, the four side lengths $s_1$, $s_2$, $s_3$, and $s_4$.\n\nIt is guaranteed that $2s_ i < \\sum _{j=1}^4 s_ j$, for all $i$, and that $1 \\leq s_ i \\leq 1000$.\n\n-----Output-----\nOutput a single real number, the maximal area as described above. Your answer must be accurate to an absolute or relative error of at most $10^{-6}$.\n\n-----Examples-----\nSample Input 1:\n3 3 3 3\nSample Output 1:\n9\n\nSample Input 2:\n1 2 1 1\nSample Output 2:\n1.299038105676658\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8174"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8174", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["while", 0], ["working", 0], ["a", 0], ["night", 0], ["shift", 0], ["at", 0], ["the", 0], ["university", 0], ["as", 0], ["a", 0], ["janitor", 0], ["you", 0], ["absentmindedly", 0], ["erase", 1], ["a", 1], ["blackboard", 1], ["covered", 1], ["with", 1], ["equations", 1], ["only", 1], ["to", 1], ["realize", 1], ["afterwards", 1], ["that", 1], ["these", 1], ["were", 1], ["no", 1], ["ordinary", 1], ["equations", 1], ["they", 1], ["were", 1], ["the", 1], ["notes", 1], ["of", 1], ["the", 1], ["venerable", 1], ["professor", 1], ["e", 1], ["i", 1], ["n", 1], ["stein", 1], ["who", 1], ["earlier", 1], ["in", 1], ["the", 1], ["day", 1], ["solved", 1], ["the", 1], ["elusive", 1], ["maximum", 1], ["quadrilateral", 1], ["problem", 1], ["quick", 1], ["you", 1], ["have", 1], ["to", 1], ["redo", 1], ["his", 1], ["work", 1], ["so", 1], ["no", 1], ["one", 1], ["noticed", 1], ["what", 1], ["happened", 1], ["the", 1], ["maximum", 0], ["quadrilateral", 0], ["problem", 0], ["is", 0], ["quite", 0], ["easy", 0], ["to", 0], ["state", 0], ["given", 0], ["four", 0], ["side", 0], ["lengths", 0], ["s", 0], ["1", 0], ["s", 0], ["2", 0], ["s", 0], ["3", 0], ["and", 0], ["s", 0], ["4", 0], ["find", 0], ["the", 0], ["maximum", 0], ["area", 1], ["of", 1], ["any", 1], ["quadrilateral", 1], ["that", 1], ["can", 1], ["be", 1], ["constructed", 0], ["using", 0], ["these", 0], ["lengths", 0], ["a", 0], ["quadrilateral", 0], ["is", 0], ["a", 0], ["polygon", 0], ["with", 0], ["four", 0], ["vertices", 0], ["input", 0], ["the", 1], ["input", 1], ["consists", 1], ["of", 0], ["a", 0], ["single", 0], ["line", 0], ["with", 0], ["four", 0], ["positive", 0], ["integers", 0], ["the", 0], ["four", 0], ["side", 0], ["lengths", 0], ["s", 0], ["1", 0], ["s", 0], ["2", 0], ["s", 0], ["3", 0], ["and", 0], ["s", 0], ["4", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["2s", 0], ["i", 0], ["sum", 0], ["j", 0], ["1", 0], ["4", 0], ["s", 0], ["j", 0], ["for", 0], ["all", 0], ["i", 0], ["and", 0], ["that", 0], ["1", 0], ["leq", 0], ["s", 0], ["i", 0], ["leq", 0], ["1000", 0], ["output", 0], ["output", 0], ["a", 0], ["single", 0], ["real", 0], ["number", 1], ["the", 1], ["maximal", 1], ["area", 1], ["as", 1], ["described", 1], ["above", 1], ["your", 1], ["answer", 1], ["must", 0], ["be", 0], ["accurate", 0], ["to", 0], ["an", 0], ["absolute", 0], ["or", 0], ["relative", 0], ["error", 0], ["of", 0], ["at", 0], ["most", 0], ["10", 0], ["6", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["3", 0], ["3", 0], ["3", 0], ["3", 0], ["sample", 0], ["output", 0], ["1", 0], ["9", 0], ["sample", 0], ["input", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["1", 0], ["sample", 0], ["output", 0], ["2", 0], ["1", 0], ["299038105676658", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.34615384615384615, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.34615384615384615, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5454545454545454, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5454545454545454, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.34615384615384615, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.34615384615384615, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5454545454545454, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5454545454545454, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nRock-paper-scissors is a popular two-player game. In the game, each of the players uses their hand to show one of three symbols: rock, paper or scissors. If both players show the same symbol, the game is a tie. Otherwise, scissors beat paper, paper beats rock and rock beats scissors.\n\nSven has been studying the psychological intricacies of the game for years and has become a real master at the game, his friends not standing a chance against him in one-on-one games.\n\nWith the world championships around the corner, Sven is practicing his skills playing simultaneous games with $N$ of his friends. One such game consists of $R$ rounds. In each round, Sven and each of his friends show one of the three symbols.\n\nWhen calculating the score, in each round, Sven’s symbol is independently compared to each of his friends’ symbols. Sven scores two points for every win and one point for every tie. Sven does not get points for losing.\n\nWrite a program that calculates Sven’s total score, and also his largest possible score had he known in advance all the symbols his friends would show.\n\n-----Input-----\nThe first line contains the integer $R$ ($1 \\le R \\le 50$), the number of rounds played.\n\nThe second line contains a string of $R$ letters ‘S’, ‘P’ or ‘R’. The string represents symbols that Sven showed in each round. ‘S’ is for scissors, ‘P’ for paper, ‘R’ for rock.\n\nThe third line contains the integer $N$ ($1 \\le N \\le 50$), the number of friends.\n\nEach of the following $N$ lines contains a string of $R$ letters ‘S’, ‘P’ or ‘R’. These are the symbols shown by each of the $N$ friends in each of the $R$ rounds.\n\n-----Output-----\nOutput Sven’s actual score on the first line.\n\nOutput his largest possible score on the second line, assuming his friends didn’t change their symbols.\n\n-----Examples-----\nSample Input 1:\n5\nSSPPR\n1\nSSPPR\nSample Output 1:\n5\n10\n\nSample Input 2:\n5\nSSPPR\n2\nPPRRS\nRRSSP\nSample Output 2:\n10\n15\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6319"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6319", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["rock", 1], ["paper", 1], ["scissors", 1], ["is", 1], ["a", 1], ["popular", 1], ["two", 1], ["player", 1], ["game", 1], ["in", 1], ["the", 1], ["game", 1], ["each", 1], ["of", 1], ["the", 1], ["players", 1], ["uses", 1], ["their", 1], ["hand", 1], ["to", 1], ["show", 1], ["one", 1], ["of", 1], ["three", 1], ["symbols", 1], ["rock", 1], ["paper", 1], ["or", 1], ["scissors", 1], ["if", 1], ["both", 1], ["players", 1], ["show", 1], ["the", 1], ["same", 1], ["symbol", 1], ["the", 1], ["game", 1], ["is", 1], ["a", 1], ["tie", 1], ["otherwise", 1], ["scissors", 1], ["beat", 1], ["paper", 1], ["paper", 1], ["beats", 1], ["rock", 1], ["and", 1], ["rock", 1], ["beats", 1], ["scissors", 1], ["sven", 1], ["has", 1], ["been", 1], ["studying", 1], ["the", 1], ["psychological", 1], ["intricacies", 1], ["of", 1], ["the", 1], ["game", 1], ["for", 1], ["years", 1], ["and", 1], ["has", 1], ["become", 1], ["a", 1], ["real", 1], ["master", 1], ["at", 1], ["the", 1], ["game", 1], ["his", 1], ["friends", 1], ["not", 1], ["standing", 1], ["a", 1], ["chance", 1], ["against", 1], ["him", 1], ["in", 1], ["one", 1], ["on", 1], ["one", 1], ["games", 1], ["with", 1], ["the", 1], ["world", 1], ["championships", 1], ["around", 1], ["the", 1], ["corner", 1], ["sven", 1], ["is", 1], ["practicing", 1], ["his", 1], ["skills", 1], ["playing", 1], ["simultaneous", 1], ["games", 1], ["with", 1], ["n", 1], ["of", 1], ["his", 1], ["friends", 1], ["one", 1], ["such", 1], ["game", 1], ["consists", 1], ["of", 1], ["r", 1], ["rounds", 1], ["in", 1], ["each", 1], ["round", 1], ["sven", 1], ["and", 1], ["each", 1], ["of", 1], ["his", 1], ["friends", 1], ["show", 1], ["one", 0], ["of", 0], ["the", 0], ["three", 0], ["symbols", 0], ["when", 0], ["calculating", 0], ["the", 0], ["score", 0], ["in", 0], ["each", 0], ["round", 0], ["sven’s", 0], ["symbol", 0], ["is", 0], ["independently", 0], ["compared", 0], ["to", 0], ["each", 0], ["of", 0], ["his", 0], ["friends’", 0], ["symbols", 1], ["sven", 1], ["scores", 1], ["two", 1], ["points", 1], ["for", 1], ["every", 1], ["win", 1], ["and", 1], ["one", 1], ["point", 1], ["for", 1], ["every", 1], ["tie", 1], ["sven", 0], ["does", 0], ["not", 0], ["get", 0], ["points", 0], ["for", 0], ["losing", 0], ["write", 0], ["a", 0], ["program", 0], ["that", 0], ["calculates", 0], ["sven’s", 0], ["total", 1], ["score", 1], ["and", 1], ["also", 1], ["his", 1], ["largest", 1], ["possible", 1], ["score", 1], ["had", 0], ["he", 0], ["known", 0], ["in", 0], ["advance", 0], ["all", 0], ["the", 0], ["symbols", 0], ["his", 0], ["friends", 0], ["would", 0], ["show", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["the", 0], ["integer", 0], ["r", 0], ["1", 0], ["le", 0], ["r", 0], ["le", 0], ["50", 1], ["the", 1], ["number", 1], ["of", 0], ["rounds", 0], ["played", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["a", 0], ["string", 0], ["of", 0], ["r", 0], ["letters", 0], ["‘s’", 0], ["‘p’", 0], ["or", 0], ["‘r’", 0], ["the", 0], ["string", 0], ["represents", 0], ["symbols", 0], ["that", 0], ["sven", 0], ["showed", 0], ["in", 0], ["each", 0], ["round", 0], ["‘s’", 0], ["is", 0], ["for", 0], ["scissors", 0], ["‘p’", 0], ["for", 0], ["paper", 0], ["‘r’", 0], ["for", 0], ["rock", 0], ["the", 0], ["third", 0], ["line", 0], ["contains", 0], ["the", 0], ["integer", 0], ["n", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["50", 1], ["the", 1], ["number", 1], ["of", 1], ["friends", 1], ["each", 0], ["of", 0], ["the", 0], ["following", 0], ["n", 0], ["lines", 0], ["contains", 0], ["a", 0], ["string", 0], ["of", 0], ["r", 0], ["letters", 0], ["‘s’", 0], ["‘p’", 0], ["or", 0], ["‘r’", 0], ["these", 1], ["are", 1], ["the", 1], ["symbols", 1], ["shown", 1], ["by", 1], ["each", 0], ["of", 0], ["the", 0], ["n", 0], ["friends", 0], ["in", 0], ["each", 0], ["of", 0], ["the", 0], ["r", 0], ["rounds", 0], ["output", 0], ["output", 0], ["sven’s", 0], ["actual", 1], ["score", 1], ["on", 1], ["the", 1], ["first", 1], ["line", 1], ["output", 0], ["his", 0], ["largest", 0], ["possible", 0], ["score", 0], ["on", 0], ["the", 0], ["second", 0], ["line", 0], ["assuming", 0], ["his", 0], ["friends", 0], ["didn’t", 0], ["change", 0], ["their", 0], ["symbols", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["5", 0], ["ssppr", 0], ["1", 0], ["ssppr", 0], ["sample", 0], ["output", 0], ["1", 0], ["5", 0], ["10", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["ssppr", 0], ["2", 0], ["pprrs", 0], ["rrssp", 0], ["sample", 0], ["output", 0], ["2", 0], ["10", 0], ["15", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4824561403508772, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4824561403508772, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7033898305084746, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7033898305084746, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4824561403508772, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4824561403508772, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7033898305084746, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7033898305084746, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nWhen dealt cards in the card game Plump it is a good idea to start by sorting the cards in hand by suit and rank. The different suits should be grouped and the ranks should be sorted within each suit. But the order of the suits does not matter and within each suit, the cards may be sorted in either ascending or descending order on rank. It is allowed for some suits to be sorted in ascending order and others in descending order. \n\nSorting is done by moving one card at a time from its current position to a new position in the hand, at the start, end, or in between two adjacent cards. What is the smallest number of moves required to sort a given hand of cards?\n\n-----Input-----\nThe first line of input contains an integer $n$ ($1 \\le n \\le 52$), the number of cards in the hand. The second line contains $n$ pairwise distinct space-separated cards, each represented by two characters. The first character of a card represents the rank and is either a digit from 2 to 9 or one of the letters T, J, Q, K, and A representing Ten, Jack, Queen, King and Ace, respectively, given here in increasing order. The second character of a card is from the set {s, h, d, c} representing the suits spades $\\spadesuit $, hearts $\\heartsuit $, diamonds $\\diamondsuit $, and clubs $\\clubsuit $.\n\n-----Output-----\nOutput the minimum number of card moves required to sort the hand as described above.\n\n-----Examples-----\nSample Input 1:\n4\n2h Th 8c Qh\nSample Output 1:\n1\n\nSample Input 2:\n7\n9d As 2s Qd 2c Jd 8h\nSample Output 2:\n2\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5294"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5294", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["when", 1], ["dealt", 1], ["cards", 1], ["in", 1], ["the", 1], ["card", 1], ["game", 1], ["plump", 1], ["it", 1], ["is", 1], ["a", 1], ["good", 1], ["idea", 1], ["to", 1], ["start", 1], ["by", 1], ["sorting", 1], ["the", 1], ["cards", 1], ["in", 1], ["hand", 1], ["by", 1], ["suit", 1], ["and", 1], ["rank", 1], ["the", 1], ["different", 1], ["suits", 1], ["should", 1], ["be", 1], ["grouped", 1], ["and", 1], ["the", 1], ["ranks", 1], ["should", 1], ["be", 1], ["sorted", 1], ["within", 1], ["each", 1], ["suit", 1], ["but", 1], ["the", 1], ["order", 1], ["of", 1], ["the", 1], ["suits", 1], ["does", 1], ["not", 1], ["matter", 1], ["and", 1], ["within", 1], ["each", 1], ["suit", 1], ["the", 1], ["cards", 1], ["may", 1], ["be", 1], ["sorted", 1], ["in", 1], ["either", 1], ["ascending", 1], ["or", 1], ["descending", 1], ["order", 1], ["on", 1], ["rank", 1], ["it", 1], ["is", 1], ["allowed", 1], ["for", 1], ["some", 1], ["suits", 1], ["to", 1], ["be", 1], ["sorted", 1], ["in", 1], ["ascending", 1], ["order", 1], ["and", 1], ["others", 1], ["in", 1], ["descending", 1], ["order", 1], ["sorting", 1], ["is", 1], ["done", 1], ["by", 1], ["moving", 1], ["one", 1], ["card", 1], ["at", 1], ["a", 1], ["time", 1], ["from", 1], ["its", 1], ["current", 1], ["position", 1], ["to", 1], ["a", 1], ["new", 1], ["position", 1], ["in", 1], ["the", 1], ["hand", 1], ["at", 1], ["the", 1], ["start", 1], ["end", 1], ["or", 1], ["in", 1], ["between", 1], ["two", 1], ["adjacent", 1], ["cards", 1], ["what", 1], ["is", 1], ["the", 1], ["smallest", 0], ["number", 0], ["of", 0], ["moves", 0], ["required", 0], ["to", 0], ["sort", 0], ["a", 0], ["given", 0], ["hand", 0], ["of", 0], ["cards", 0], ["input", 0], ["the", 12], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["an", 0], ["integer", 0], ["n", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["52", 0], ["the", 0], ["number", 0], ["of", 0], ["cards", 0], ["in", 0], ["the", 0], ["hand", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["pairwise", 0], ["distinct", 0], ["space", 0], ["separated", 0], ["cards", 0], ["each", 0], ["represented", 0], ["by", 0], ["two", 0], ["characters", 0], ["the", 0], ["first", 0], ["character", 0], ["of", 0], ["a", 0], ["card", 0], ["represents", 0], ["the", 0], ["rank", 0], ["and", 0], ["is", 0], ["either", 0], ["a", 0], ["digit", 0], ["from", 0], ["2", 0], ["to", 0], ["9", 0], ["or", 0], ["one", 0], ["of", 0], ["the", 0], ["letters", 0], ["t", 0], ["j", 0], ["q", 0], ["k", 0], ["and", 0], ["a", 0], ["representing", 0], ["ten", 0], ["jack", 0], ["queen", 0], ["king", 0], ["and", 0], ["ace", 0], ["respectively", 0], ["given", 0], ["here", 0], ["in", 0], ["increasing", 0], ["order", 0], ["the", 0], ["second", 0], ["character", 0], ["of", 0], ["a", 0], ["card", 0], ["is", 0], ["from", 0], ["the", 0], ["set", 0], ["s", 0], ["h", 0], ["d", 0], ["c", 0], ["representing", 0], ["the", 0], ["suits", 0], ["spades", 0], ["spadesuit", 0], ["hearts", 0], ["heartsuit", 0], ["diamonds", 0], ["diamondsuit", 0], ["and", 0], ["clubs", 0], ["clubsuit", 0], ["output", 0], ["output", 1], ["the", 1], ["minimum", 1], ["number", 0], ["of", 0], ["card", 0], ["moves", 0], ["required", 0], ["to", 0], ["sort", 0], ["the", 0], ["hand", 0], ["as", 0], ["described", 0], ["above", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["2h", 0], ["th", 0], ["8c", 0], ["qh", 0], ["sample", 0], ["output", 0], ["1", 0], ["1", 0], ["sample", 0], ["input", 0], ["2", 0], ["7", 0], ["9d", 0], ["as", 0], ["2s", 0], ["qd", 0], ["2c", 0], ["jd", 0], ["8h", 0], ["sample", 0], ["output", 0], ["2", 0], ["2", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4368231046931408, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.43351383874849575, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5432525951557093, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5020184544406002, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4332129963898917, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4332129963898917, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4982698961937716, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4982698961937716, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nIn an infinite binary tree:\n - Each node has exactly two children – a left and a right child.\n - If a node is labeled with the integer $X$, then its left child is labeled $2X$ and its right child $2X+1$.\n - The root of the tree is labeled 1.\n\nA walk on the binary tree starts in the root. Each step in the walk is either a jump onto the left child, onto the right child, or pause for rest (stay in the same node).\n\nA walk is described with a string of letters ’L’, ’R’ and ’P’:\n - ’L’ represents a jump to the left child;\n - ’R’ represents a jump to the right child;\n - ’P’ represents a pause.\n\nThe value of the walk is the label of the node we end up on. For example, the value of the walk LR is 5, while the value of the walk RPP is 3.\n\nA set of walks is described by a string of characters ’L’, ’R’, ’P’ and ’*’. Each ’*’ can be any of the three moves; the set of walks contains all walks matching the pattern.\n\nFor example, the set L*R contains the walks LLR, LRR and LPR. The set ** contains the walks LL, LR, LP, RL, RR, RP, PL, PR and PP.\n\nFinally, the value of a set of walks is the sum of values of all walks in the set. Calculate the value of the given set of walks.\n\n-----Input-----\nA string describing the set. Only characters ’L’, ’R’, ’P’ and ’*’ will appear and there will be at most $10000$ of them.\n\n-----Output-----\nOutput the value of the set.\n\n-----Examples-----\nSample Input 1:\nP*P\nSample Output 1:\n6\n\nSample Input 2:\nL*R\nSample Output 2:\n25\n\nSample Input 3:\n**\nSample Output 3:\n33\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8199"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8199", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["in", 0], ["an", 0], ["infinite", 0], ["binary", 0], ["tree", 0], ["each", 0], ["node", 0], ["has", 0], ["exactly", 0], ["two", 0], ["children", 0], ["–", 0], ["a", 1], ["left", 1], ["and", 1], ["a", 1], ["right", 1], ["child", 1], ["if", 1], ["a", 1], ["node", 1], ["is", 0], ["labeled", 0], ["with", 0], ["the", 0], ["integer", 0], ["x", 0], ["then", 0], ["its", 0], ["left", 0], ["child", 0], ["is", 0], ["labeled", 0], ["2x", 0], ["and", 0], ["its", 0], ["right", 0], ["child", 0], ["2x", 0], ["1", 1], ["the", 1], ["root", 1], ["of", 1], ["the", 1], ["tree", 1], ["is", 1], ["labeled", 1], ["1", 1], ["a", 1], ["walk", 1], ["on", 1], ["the", 1], ["binary", 1], ["tree", 1], ["starts", 1], ["in", 1], ["the", 1], ["root", 1], ["each", 1], ["step", 1], ["in", 1], ["the", 1], ["walk", 1], ["is", 1], ["either", 1], ["a", 1], ["jump", 1], ["onto", 1], ["the", 1], ["left", 1], ["child", 1], ["onto", 1], ["the", 0], ["right", 0], ["child", 0], ["or", 0], ["pause", 0], ["for", 0], ["rest", 0], ["stay", 0], ["in", 0], ["the", 0], ["same", 0], ["node", 0], ["a", 0], ["walk", 0], ["is", 0], ["described", 0], ["with", 0], ["a", 0], ["string", 0], ["of", 0], ["letters", 0], ["’l’", 0], ["’r’", 0], ["and", 0], ["’p’", 0], ["’l’", 0], ["represents", 0], ["a", 0], ["jump", 0], ["to", 0], ["the", 0], ["left", 0], ["child", 0], ["’r’", 0], ["represents", 0], ["a", 0], ["jump", 0], ["to", 0], ["the", 0], ["right", 0], ["child", 0], ["’p’", 0], ["represents", 0], ["a", 0], ["pause", 0], ["the", 1], ["value", 1], ["of", 1], ["the", 1], ["walk", 1], ["is", 1], ["the", 1], ["label", 1], ["of", 1], ["the", 1], ["node", 1], ["we", 1], ["end", 1], ["up", 1], ["on", 1], ["for", 1], ["example", 1], ["the", 1], ["value", 1], ["of", 1], ["the", 1], ["walk", 1], ["lr", 1], ["is", 1], ["5", 1], ["while", 1], ["the", 1], ["value", 1], ["of", 1], ["the", 1], ["walk", 1], ["rpp", 1], ["is", 1], ["3", 0], ["a", 0], ["set", 0], ["of", 0], ["walks", 0], ["is", 0], ["described", 0], ["by", 0], ["a", 0], ["string", 0], ["of", 0], ["characters", 0], ["’l’", 0], ["’r’", 0], ["’p’", 0], ["and", 0], ["’", 0], ["’", 0], ["each", 0], ["’", 0], ["’", 0], ["can", 1], ["be", 1], ["any", 1], ["of", 1], ["the", 1], ["three", 1], ["moves", 1], ["the", 1], ["set", 1], ["of", 1], ["walks", 1], ["contains", 1], ["all", 1], ["walks", 1], ["matching", 1], ["the", 1], ["pattern", 1], ["for", 1], ["example", 1], ["the", 1], ["set", 1], ["l", 1], ["r", 1], ["contains", 1], ["the", 1], ["walks", 1], ["llr", 1], ["lrr", 1], ["and", 1], ["lpr", 1], ["the", 1], ["set", 1], ["contains", 1], ["the", 1], ["walks", 1], ["ll", 1], ["lr", 1], ["lp", 1], ["rl", 1], ["rr", 1], ["rp", 1], ["pl", 1], ["pr", 1], ["and", 1], ["pp", 1], ["finally", 1], ["the", 1], ["value", 1], ["of", 1], ["a", 1], ["set", 1], ["of", 1], ["walks", 1], ["is", 1], ["the", 1], ["sum", 1], ["of", 1], ["values", 1], ["of", 1], ["all", 1], ["walks", 1], ["in", 0], ["the", 0], ["set", 0], ["calculate", 0], ["the", 0], ["value", 0], ["of", 0], ["the", 0], ["given", 0], ["set", 0], ["of", 0], ["walks", 0], ["input", 0], ["a", 0], ["string", 0], ["describing", 0], ["the", 0], ["set", 0], ["only", 0], ["characters", 0], ["’l’", 0], ["’r’", 0], ["’p’", 0], ["and", 0], ["’", 0], ["’", 0], ["will", 0], ["appear", 0], ["and", 0], ["there", 0], ["will", 0], ["be", 0], ["at", 0], ["most", 0], ["10000", 0], ["of", 0], ["them", 0], ["output", 0], ["output", 0], ["the", 0], ["value", 0], ["of", 0], ["the", 0], ["set", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["p", 0], ["p", 0], ["sample", 0], ["output", 0], ["1", 0], ["6", 0], ["sample", 0], ["input", 0], ["2", 0], ["l", 0], ["r", 0], ["sample", 0], ["output", 0], ["2", 0], ["25", 0], ["sample", 0], ["input", 0], ["3", 0], ["sample", 0], ["output", 0], ["3", 0], ["33", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.45182724252491696, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.45182724252491696, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5878594249201278, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5878594249201278, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.45182724252491696, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.45182724252491696, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5878594249201278, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5878594249201278, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nFrane has been given the task of sorting an array of numbers. The array consists of $N$ integers, each between $1$ and $N$ (inclusive), with each of those appearing exactly once in the array. Frane has come up with the following sorting algorithm which operates in $N$ phases, and named it turbosort:\n - In the first phase, the number $1$ is moved to position $1$ by repeatedly swapping consecutive elements.\n - In the second phase, the number $N$ is moved to position $N$ in the same manner.\n - In the third phase, the number $2$ is moved to position $2$.\n - In the fourth phase, the number $N-1$ is moved to position $N-1$.\n - And so on...\n\nIn other words, when the number of the phase is odd, Frane will choose the smallest number not yet chosen, and move it to its final position. In even phases he chooses the largest number not yet chosen. Write a program which, given the initial array, output the number of swaps in each phase of the algorithm.\n\n-----Input-----\nThe first line contains an integer $N$ ($1 \\le N \\le 100000$), the number of elements in the array. Each of the following $N$ lines contains an integer between $1$ and $N$ (inclusive), the array to be sorted. The array will contain no duplicates.\n\n-----Output-----\nFor each of the $N$ phases, output the number of swaps on a single line.\n\n-----Examples-----\nSample Input 1:\n3\n2\n1\n3\nSample Output 1:\n1\n0\n0\n\nSample Input 2:\n5\n5\n4\n3\n2\n1\nSample Output 2:\n4\n3\n2\n1\n0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7214"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7214", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["frane", 0], ["has", 0], ["been", 0], ["given", 0], ["the", 0], ["task", 0], ["of", 0], ["sorting", 0], ["an", 0], ["array", 0], ["of", 0], ["numbers", 0], ["the", 0], ["array", 0], ["consists", 0], ["of", 0], ["n", 0], ["integers", 0], ["each", 0], ["between", 0], ["1", 0], ["and", 0], ["n", 0], ["inclusive", 0], ["with", 0], ["each", 0], ["of", 0], ["those", 0], ["appearing", 0], ["exactly", 0], ["once", 0], ["in", 0], ["the", 0], ["array", 0], ["frane", 0], ["has", 0], ["come", 0], ["up", 0], ["with", 0], ["the", 0], ["following", 0], ["sorting", 0], ["algorithm", 0], ["which", 0], ["operates", 0], ["in", 0], ["n", 0], ["phases", 0], ["and", 0], ["named", 0], ["it", 0], ["turbosort", 0], ["in", 1], ["the", 1], ["first", 1], ["phase", 1], ["the", 1], ["number", 1], ["1", 1], ["is", 1], ["moved", 1], ["to", 1], ["position", 1], ["1", 1], ["by", 1], ["repeatedly", 1], ["swapping", 1], ["consecutive", 1], ["elements", 1], ["in", 1], ["the", 1], ["second", 1], ["phase", 1], ["the", 1], ["number", 1], ["n", 1], ["is", 1], ["moved", 1], ["to", 1], ["position", 1], ["n", 1], ["in", 1], ["the", 1], ["same", 1], ["manner", 1], ["in", 1], ["the", 1], ["third", 1], ["phase", 1], ["the", 1], ["number", 1], ["2", 1], ["is", 1], ["moved", 1], ["to", 1], ["position", 1], ["2", 1], ["in", 1], ["the", 1], ["fourth", 0], ["phase", 0], ["the", 0], ["number", 0], ["n", 0], ["1", 0], ["is", 0], ["moved", 0], ["to", 0], ["position", 0], ["n", 0], ["1", 0], ["and", 0], ["so", 0], ["on", 0], ["in", 1], ["other", 1], ["words", 1], ["when", 1], ["the", 1], ["number", 1], ["of", 1], ["the", 1], ["phase", 1], ["is", 1], ["odd", 1], ["frane", 1], ["will", 1], ["choose", 1], ["the", 1], ["smallest", 1], ["number", 1], ["not", 1], ["yet", 1], ["chosen", 1], ["and", 1], ["move", 1], ["it", 1], ["to", 1], ["its", 1], ["final", 1], ["position", 1], ["in", 1], ["even", 1], ["phases", 1], ["he", 1], ["chooses", 1], ["the", 1], ["largest", 1], ["number", 1], ["not", 1], ["yet", 1], ["chosen", 1], ["write", 1], ["a", 1], ["program", 1], ["which", 1], ["given", 1], ["the", 1], ["initial", 1], ["array", 0], ["output", 0], ["the", 0], ["number", 0], ["of", 0], ["swaps", 0], ["in", 0], ["each", 0], ["phase", 0], ["of", 0], ["the", 0], ["algorithm", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["an", 0], ["integer", 0], ["n", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["100000", 0], ["the", 1], ["number", 1], ["of", 1], ["elements", 1], ["in", 1], ["the", 1], ["array", 1], ["each", 1], ["of", 1], ["the", 1], ["following", 1], ["n", 1], ["lines", 1], ["contains", 1], ["an", 1], ["integer", 1], ["between", 1], ["1", 1], ["and", 1], ["n", 1], ["inclusive", 0], ["the", 0], ["array", 0], ["to", 0], ["be", 0], ["sorted", 0], ["the", 0], ["array", 0], ["will", 0], ["contain", 0], ["no", 0], ["duplicates", 0], ["output", 0], ["for", 1], ["each", 1], ["of", 1], ["the", 0], ["n", 0], ["phases", 0], ["output", 0], ["the", 0], ["number", 0], ["of", 0], ["swaps", 0], ["on", 0], ["a", 0], ["single", 0], ["line", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["3", 0], ["2", 0], ["1", 0], ["3", 0], ["sample", 0], ["output", 0], ["1", 0], ["1", 0], ["0", 0], ["0", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["5", 0], ["4", 0], ["3", 0], ["2", 0], ["1", 0], ["sample", 0], ["output", 0], ["2", 0], ["4", 0], ["3", 0], ["2", 0], ["1", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4389312977099237, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4389312977099237, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5948905109489051, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5948905109489051, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4389312977099237, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4389312977099237, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5948905109489051, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5948905109489051, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nQuite often there is substantial noise in the classroom during class. Instead of paying attention to what the teacher is saying, the students rather discuss the economic crisis or Croatia’s joining the European Union.\n\nThe biggest noise often occurs when the students are idle, so teachers will give them tasks with a lot of work to calm them down. In one type of such task, the student must calculate the result of an arithmetic operation on two large numbers.\n\nThe arithmetic operations we will consider are adding and multiplication. The operands will be powers of $10$ with no more than $100$ digits.\n\nWrite a program that calculates the result of the operation.\n\n-----Input-----\nThe first line contains a positive integer $A$, the first operand.\n\nThe second line either the character ‘+’ or ‘*’, representing addition or multiplication.\n\nThe third line contains a positive integer $B$, the second operand.\n\nThe integers $A$ and $B$ will be powers of $10$ and consist of at most $100$ digits.\n\n-----Output-----\nOutput the result of the operation.\n\n-----Examples-----\nSample Input 1:\n1000\n*\n100\nSample Output 1:\n100000\n\nSample Input 2:\n10000\n+\n10\nSample Output 2:\n10010\n\nSample Input 3:\n10\n+\n1000\nSample Output 3:\n1010\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6803"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6803", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["quite", 1], ["often", 1], ["there", 1], ["is", 1], ["substantial", 1], ["noise", 1], ["in", 1], ["the", 1], ["classroom", 1], ["during", 1], ["class", 1], ["instead", 1], ["of", 1], ["paying", 1], ["attention", 1], ["to", 1], ["what", 1], ["the", 0], ["teacher", 0], ["is", 0], ["saying", 0], ["the", 0], ["students", 0], ["rather", 0], ["discuss", 0], ["the", 0], ["economic", 0], ["crisis", 0], ["or", 0], ["croatia’s", 0], ["joining", 1], ["the", 1], ["european", 1], ["union", 1], ["the", 1], ["biggest", 1], ["noise", 1], ["often", 1], ["occurs", 1], ["when", 1], ["the", 1], ["students", 1], ["are", 1], ["idle", 1], ["so", 1], ["teachers", 1], ["will", 1], ["give", 1], ["them", 1], ["tasks", 1], ["with", 1], ["a", 1], ["lot", 1], ["of", 1], ["work", 1], ["to", 1], ["calm", 1], ["them", 1], ["down", 1], ["in", 1], ["one", 1], ["type", 1], ["of", 1], ["such", 1], ["task", 1], ["the", 1], ["student", 1], ["must", 1], ["calculate", 1], ["the", 1], ["result", 1], ["of", 1], ["an", 1], ["arithmetic", 1], ["operation", 1], ["on", 1], ["two", 1], ["large", 1], ["numbers", 1], ["the", 1], ["arithmetic", 1], ["operations", 1], ["we", 1], ["will", 1], ["consider", 1], ["are", 1], ["adding", 1], ["and", 1], ["multiplication", 1], ["the", 1], ["operands", 1], ["will", 1], ["be", 1], ["powers", 1], ["of", 1], ["10", 1], ["with", 1], ["no", 1], ["more", 1], ["than", 1], ["100", 0], ["digits", 0], ["write", 0], ["a", 0], ["program", 0], ["that", 0], ["calculates", 0], ["the", 0], ["result", 0], ["of", 0], ["the", 0], ["operation", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["a", 1], ["positive", 0], ["integer", 0], ["a", 0], ["the", 0], ["first", 0], ["operand", 0], ["the", 0], ["second", 0], ["line", 0], ["either", 0], ["the", 0], ["character", 0], ["‘", 0], ["’", 0], ["or", 0], ["‘", 0], ["’", 0], ["representing", 1], ["addition", 1], ["or", 0], ["multiplication", 0], ["the", 0], ["third", 0], ["line", 0], ["contains", 0], ["a", 0], ["positive", 0], ["integer", 0], ["b", 0], ["the", 0], ["second", 0], ["operand", 0], ["the", 1], ["integers", 1], ["a", 1], ["and", 1], ["b", 1], ["will", 1], ["be", 0], ["powers", 0], ["of", 0], ["10", 0], ["and", 0], ["consist", 0], ["of", 0], ["at", 0], ["most", 0], ["100", 0], ["digits", 0], ["output", 0], ["output", 0], ["the", 0], ["result", 0], ["of", 0], ["the", 0], ["operation", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["1000", 0], ["100", 0], ["sample", 0], ["output", 0], ["1", 0], ["100000", 0], ["sample", 0], ["input", 0], ["2", 0], ["10000", 0], ["10", 0], ["sample", 0], ["output", 0], ["2", 0], ["10010", 0], ["sample", 0], ["input", 0], ["3", 0], ["10", 0], ["1000", 0], ["sample", 0], ["output", 0], ["3", 0], ["1010", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4975124378109453, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4975124378109453, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7511737089201878, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7511737089201878, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4975124378109453, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4975124378109453, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7511737089201878, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7511737089201878, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nWrite a program that, given a date in $2009$, determines the day of week on that date.\n\n-----Input-----\nThe first line contains two positive integers $D$ (day) and $M$ (month) separated by a space. The numbers will be a valid date in $2009$.\n\n-----Output-----\nOutput the day of the week on day $D$ of month $M$ in $2009$. The output should be one of the words “Monday”, “Tuesday”, “Wednesday”, “Thursday”, “Friday”, “Saturday” or “Sunday”.\n\n-----Examples-----\nSample Input 1:\n1 1\nSample Output 1:\nThursday\n\nSample Input 2:\n17 1\nSample Output 2:\nSaturday\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7727"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7727", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["write", 2], ["a", 2], ["program", 2], ["that", 2], ["given", 2], ["a", 0], ["date", 0], ["in", 0], ["2009", 0], ["determines", 0], ["the", 0], ["day", 0], ["of", 0], ["week", 0], ["on", 0], ["that", 0], ["date", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["two", 1], ["positive", 1], ["integers", 1], ["d", 1], ["day", 1], ["and", 1], ["m", 1], ["month", 1], ["separated", 2], ["by", 2], ["a", 0], ["space", 0], ["the", 0], ["numbers", 0], ["will", 0], ["be", 0], ["a", 0], ["valid", 0], ["date", 0], ["in", 0], ["2009", 0], ["output", 0], ["output", 1], ["the", 1], ["day", 1], ["of", 1], ["the", 1], ["week", 1], ["on", 1], ["day", 1], ["d", 1], ["of", 1], ["month", 1], ["m", 1], ["in", 1], ["2009", 1], ["the", 1], ["output", 1], ["should", 1], ["be", 1], ["one", 0], ["of", 0], ["the", 0], ["words", 0], ["“monday”", 0], ["“tuesday”", 0], ["“wednesday”", 0], ["“thursday”", 0], ["“friday”", 0], ["“saturday”", 0], ["or", 0], ["“sunday”", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["1", 0], ["1", 0], ["sample", 0], ["output", 0], ["1", 0], ["thursday", 0], ["sample", 0], ["input", 0], ["2", 0], ["17", 0], ["1", 0], ["sample", 0], ["output", 0], ["2", 0], ["saturday", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.40217391304347827, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3641304347826087, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7019230769230769, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6201923076923077, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.40217391304347827, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3641304347826087, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7019230769230769, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6201923076923077, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nLet’s face it... you are not that handy. When you need to make a major home repair, you often need to hire someone to help. When they come for the first visit, they make an estimate of the cost. Here they must be careful: if they overestimate the cost, it might scare you off, but if they underestimate, the work might not be worth their time.\n\nBecause the worker is so careful, it can take a long time for them to produce the estimate. But that’s frustrating — when you ask for an estimate, you really are asking for the magnitude of the cost. Will this be $$10$ or $$100$ or $$1000$? That’s all you really want to know on a first visit.\n\nPlease help the worker make the type of estimate you desire. Write a program that, given the worker’s estimate, reports just the magnitude of the cost — the number of digits needed to represent the estimate.\n\n-----Input-----\nInput begins with a line containing an integer $N$ ($1 \\le N \\le 100$). The next $N$ lines each contain one estimated cost, which is an integer between $0$ and $10^{100}$. (Some of the workers overcharge quite a bit.)\n\n-----Output-----\nFor each estimated cost, output the number of digits required to represent it.\n\n-----Examples-----\nSample Input:\n5\n314\n1\n5926\n5\n35897\nSample Output:\n3\n1\n4\n1\n5\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6997"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6997", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["let’s", 1], ["face", 1], ["it", 1], ["you", 1], ["are", 1], ["not", 1], ["that", 1], ["handy", 1], ["when", 1], ["you", 1], ["need", 1], ["to", 1], ["make", 1], ["a", 1], ["major", 1], ["home", 1], ["repair", 1], ["you", 1], ["often", 1], ["need", 1], ["to", 1], ["hire", 1], ["someone", 1], ["to", 1], ["help", 1], ["when", 1], ["they", 1], ["come", 1], ["for", 1], ["the", 1], ["first", 1], ["visit", 1], ["they", 1], ["make", 1], ["an", 1], ["estimate", 1], ["of", 1], ["the", 1], ["cost", 1], ["here", 1], ["they", 1], ["must", 1], ["be", 1], ["careful", 1], ["if", 1], ["they", 1], ["overestimate", 1], ["the", 1], ["cost", 1], ["it", 1], ["might", 1], ["scare", 1], ["you", 1], ["off", 1], ["but", 1], ["if", 1], ["they", 1], ["underestimate", 1], ["the", 1], ["work", 1], ["might", 1], ["not", 1], ["be", 1], ["worth", 1], ["their", 1], ["time", 1], ["because", 1], ["the", 1], ["worker", 1], ["is", 1], ["so", 1], ["careful", 1], ["it", 1], ["can", 1], ["take", 1], ["a", 1], ["long", 1], ["time", 1], ["for", 1], ["them", 1], ["to", 1], ["produce", 1], ["the", 1], ["estimate", 1], ["but", 1], ["that’s", 1], ["frustrating", 1], ["—", 1], ["when", 1], ["you", 1], ["ask", 1], ["for", 1], ["an", 1], ["estimate", 1], ["you", 1], ["really", 1], ["are", 1], ["asking", 1], ["for", 1], ["the", 0], ["magnitude", 0], ["of", 0], ["the", 0], ["cost", 0], ["will", 0], ["this", 0], ["be", 0], ["10", 0], ["or", 0], ["100", 0], ["or", 0], ["1000", 0], ["that’s", 1], ["all", 1], ["you", 1], ["really", 1], ["want", 1], ["to", 1], ["know", 1], ["on", 1], ["a", 1], ["first", 1], ["visit", 1], ["please", 1], ["help", 1], ["the", 1], ["worker", 1], ["make", 1], ["the", 1], ["type", 1], ["of", 1], ["estimate", 1], ["you", 1], ["desire", 1], ["write", 1], ["a", 1], ["program", 1], ["that", 1], ["given", 1], ["the", 1], ["worker’s", 1], ["estimate", 1], ["reports", 1], ["just", 1], ["the", 1], ["magnitude", 1], ["of", 1], ["the", 0], ["cost", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["digits", 0], ["needed", 0], ["to", 0], ["represent", 0], ["the", 0], ["estimate", 0], ["input", 0], ["input", 0], ["begins", 0], ["with", 0], ["a", 0], ["line", 0], ["containing", 0], ["an", 0], ["integer", 0], ["n", 1], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["100", 0], ["the", 0], ["next", 0], ["n", 0], ["lines", 0], ["each", 0], ["contain", 0], ["one", 0], ["estimated", 0], ["cost", 0], ["which", 0], ["is", 0], ["an", 0], ["integer", 0], ["between", 0], ["0", 0], ["and", 0], ["10", 0], ["100", 0], ["some", 0], ["of", 0], ["the", 0], ["workers", 0], ["overcharge", 0], ["quite", 0], ["a", 0], ["bit", 0], ["output", 0], ["for", 1], ["each", 0], ["estimated", 0], ["cost", 0], ["output", 0], ["the", 0], ["number", 0], ["of", 0], ["digits", 0], ["required", 0], ["to", 0], ["represent", 0], ["it", 0], ["examples", 0], ["sample", 0], ["input", 0], ["5", 0], ["314", 0], ["1", 0], ["5926", 0], ["5", 0], ["35897", 0], ["sample", 0], ["output", 0], ["3", 0], ["1", 0], ["4", 0], ["1", 0], ["5", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5938864628820961, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5938864628820961, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7634854771784232, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7634854771784232, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5938864628820961, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5938864628820961, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7634854771784232, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7634854771784232, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nVasya has n days of vacations! So he decided to improve his IT skills and do sport. Vasya knows the following information about each of this n days: whether that gym opened and whether a contest was carried out in the Internet on that day. For the i-th day there are four options:\n\n  on this day the gym is closed and the contest is not carried out;  on this day the gym is closed and the contest is carried out;  on this day the gym is open and the contest is not carried out;  on this day the gym is open and the contest is carried out. \n\nOn each of days Vasya can either have a rest or write the contest (if it is carried out on this day), or do sport (if the gym is open on this day).\n\nFind the minimum number of days on which Vasya will have a rest (it means, he will not do sport and write the contest at the same time). The only limitation that Vasya has — he does not want to do the same activity on two consecutive days: it means, he will not do sport on two consecutive days, and write the contest on two consecutive days.\n\n\n-----Input-----\n\nThe first line contains a positive integer n (1 ≤ n ≤ 100) — the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 3) separated by space, where: \n\n  a_{i} equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out;  a_{i} equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out;  a_{i} equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out;  a_{i} equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.\n\n\n-----Output-----\n\nPrint the minimum possible number of days on which Vasya will have a rest. Remember that Vasya refuses:\n\n  to do sport on any two consecutive days,  to write the contest on any two consecutive days. \n\n\n-----Examples-----\nInput\n4\n\n1 3 2 0\n\n\nOutput\n2\n\n\nInput\n7\n\n1 3 3 2 1 2 3\n\n\nOutput\n0\n\n\nInput\n2\n\n2 2\n\n\nOutput\n1\n\n\n\n\n-----Note-----\n\nIn the first test Vasya can write the contest on the day number 1 and do sport on the day number 3. Thus, he will have a rest for only 2 days.\n\nIn the second test Vasya should write contests on days number 1, 3, 5 and 7, in other days do sport. Thus, he will not have a rest for a single day.\n\nIn the third test Vasya can do sport either on a day number 1 or number 2. He can not do sport in two days, because it will be contrary to the his limitation. Thus, he will have a rest for only one day.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\n\ninp = sys.stdin\n#inp = open('input.txt', 'r')\n\nn = int(inp.readline())\na = list(map(int, inp.readline().split()))\n\n\nbest = [0, 0, 0]\nfor i in range(n):\n\tnx_best = [0, 0, 0]\n\tif a[i] in (1, 3):\n\t\tnx_best[1] = max(best[0], best[2]) + 1\n\tif a[i] in (2, 3):\n\t\tnx_best[2] = max(best[0], best[1]) + 1\n\tnx_best[0] = max(best)\n\n\tbest = nx_best[:]\n\nprint(n - max(best))\n", "3\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [[-1791791791] * 4 for i in range(n)]\n\ndp[0][0] = 0\nif a[0] & 1:\n\tdp[0][1] = 1\nif a[0] & 2:\n\tdp[0][2] = 1\n\nfor i in range(1, n):\n\tdp[i][0] = max(dp[i - 1])\n\tfor j in range(1, 3):\n\t\tif a[i] & j:\n\t\t\tdp[i][j] = max(dp[i - 1][:j] + dp[i - 1][j + 1:]) + 1\n\nans = max(dp[-1])\nprint(n - ans)\n", "input()\nB = 10000\ns = [0, B, B]\nfor x in map(int, input().split()):\n\ts = [min(s) + 1, min(s[0::2]) if x & 1 else B, min(s[:2]) if x & 2 else B]\nprint(min(s))\n", "def dp(prev, ind):\n\tnonlocal dar, n, con, gym\n\tif ind >= n:\n\t\treturn 0\n\tif (prev, ind) not in dar:\n\t\tm = dp('free', ind+1)+1\n\t\tif prev != 'con' and con[ind]:\n\t\t\tm = min(m, dp('con', ind+1))\n\t\tif prev != 'gym' and gym[ind]:\n\t\t\tm = min(m, dp('gym', ind+1))\n\t\tdar[(prev, ind)] = m\n\n\treturn dar[(prev, ind)]\n\t\n\ndar = {}\nn = int(input())\nL = [int(x) for x in input().split()]\ncon = [x&1 for x in L]\ngym = [x&2 for x in L]\nprint(dp('free', 0))\n\n", "x = int(input())\nm = list(map(int, input().split()))\na = [[-1791791791] * 4 for i in range(x)]\na[0][0] = 0\nif m[0] & 1:\n\ta[0][1] = 1\nif m[0] & 2:\n\ta[0][2] = 1\nfor i in range(1, x):\n\ta[i][0] = max(a[i - 1])\n\tfor j in range(1, 3):\n\t\tif m[i] & j:\n\t\t\ta[i][j] = max(a[i - 1][:j] + a[i - 1][j + 1:]) + 1\nmaxx = max(a[-1])\nprint(x - maxx)\n", "def main():\n\tn = input()\n\tL = [int(x) for x in input().split()]\n\tprint(solver(L))\n\ndef solver(L):\n\treturn helper(L, None)\n\ndef helper(L, last):\n\tif len(L) == 0:\n\t\treturn 0\n\tx = L[0]\n\tif last == \"gym\":\n\t\tif L[0] in [0, 2]:\n\t\t\treturn 1 + helper(L[1:], None)\n\t\telif L[0] in [1, 3]:\n\t\t\treturn helper(L[1:], \"contest\")\n\telif last == \"contest\":\n\t\tif L[0] in [0, 1]:\n\t\t\treturn 1 + helper(L[1:], None)\n\t\telif L[0] in [2, 3]:\n\t\t\treturn helper(L[1:], \"gym\")\n\telif last == None:\n\t\tif L[0] == 0:\n\t\t\treturn 1 + helper(L[1:], None)\n\t\telif L[0] == 1:\n\t\t\treturn helper(L[1:], \"contest\")\n\t\telif L[0] == 2:\n\t\t\treturn helper(L[1:], \"gym\")\n\t\telif L[0] == 3:\n\t\t\tfor i in range(1, len(L)):\n\t\t\t\tif L[i] == 0:\n\t\t\t\t\treturn 1 + helper(L[i + 1:], None)\n\t\t\t\telif L[i] == 1:\n\t\t\t\t\treturn helper(L[i + 1:], \"contest\")\n\t\t\t\telif L[i] == 2:\n\t\t\t\t\treturn helper(L[i + 1:], \"gym\")\n\t\t\treturn 0\n\telse:\n\t\tassert(False)\n\n# print(solver([1, 3, 2, 0]))\n# print(solver([1, 3, 3, 2, 1, 2, 3]))\n# print(solver([2, 2]))\n\nmain()\n", "def main():\n\tinput()\n\ta1 = a2 = x1 = x2 = z = 0\n\tfor b in map(int, input()[::2]):\n\t\tif 0 < b < 3:\n\t\t\tif a1 == b:\n\t\t\t\ta1 = 0\n\t\t\t\tx1 += 1\n\t\t\telse:\n\t\t\t\ta1 = b\n\t\t\tif a2 == b:\n\t\t\t\ta2 = 0\n\t\t\t\tx2 += 1\n\t\t\telse:\n\t\t\t\ta2 = b\n\t\t\tif x1 != x2:\n\t\t\t\tif x1 > x2:\n\t\t\t\t\tx1, a1 = x2, a2\n\t\t\t\telse:\n\t\t\t\t\tx2, a2 = x1, a1\n\t\telif b:  # 3\n\t\t\ta1 = 1 if a1 != 1 else 2\n\t\t\ta2 = 2 if a2 != 2 else 1\n\t\telse:  # 0\n\t\t\ta1 = a2 = 0\n\t\t\tz += 1\n\tprint(x1 + z)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n = int(input())\na = list(map(int, input().split()))\n\nd = [[10 ** 6] * 3 for i in range(n)]\nd[0][0] = 1\nif a[0] & 1:\n\td[0][1] = 0\nif a[0] & 2:\n\td[0][2] = 0\n\nfor i in range(1, n):\n\td[i][0] = min(d[i - 1]) + 1\n\tif a[i] & 1:\n\t\td[i][1] = min(d[i - 1][0], d[i - 1][2])\n\tif a[i] & 2:\n\t\td[i][2] = min(d[i - 1][0], d[i - 1][1])\n\nprint(min(d[-1]))\n", "\"\"\"\n\tThis code is part of the codeforces problems solved in the repository[1]. \n\tAll solutions are written in python3.\n\t\n\t[1]: https://github.com/praveendath92/codeforces\n\"\"\"\n\n####### common base functions ########\ndef read_line():\n\treturn input().strip()\n\ndef read_int():\n\treturn int(read_line())\n\ndef read_int_array():\n\treturn [int(i) for i in read_line().split(' ')]\n\ndef read_string_array():\n\treturn [i for i in read_line().split(' ')]\n\n####### End of base functions ########\n\n\n#=========== Start of main code ============\nT = read_int()\nD = read_int_array()\n\n# Day one checking and init of actual tasks per day\nAD = [-1]*len(D)\nAD[0] = D[0]\nrests = 1 if AD[0] == 0 else 0\n\n# Check for the remaining days\nfor i in range(1, len(D)):\n\tif D[i] == 0:\n\t\trests += 1\n\t\tAD[i] = 0\n\telif D[i] == 1:\n\t\tif AD[i-1] == 1:\n\t\t\trests += 1\n\t\t\tAD[i] = 0\n\t\telse:\n\t\t\tAD[i] = 1\n\telif D[i] == 2:\n\t\tif AD[i-1] == 2:\n\t\t\trests += 1\n\t\t\tAD[i] = 0\n\t\telse:\n\t\t\tAD[i] = 2\n\telif D[i] == 3:\n\t\tif AD[i-1] == 3:\n\t\t\tAD[i] = 3\n\t\telse:\n\t\t\tAD[i] = D[i] - AD[i-1]\n\nprint(rests)\n", "n, vr, vg, vc = int(input()), 0, 0, 0\nfor x in map(int, input().split()):\n\tcr = min(vr, vg, vc) + 1\n\tcg = min(vr, vc) if x & 2 else n\n\tcc = min(vr, vg) if x & 1 else n\n\tvr, vg, vc = cr, cg, cc\nprint(min(vr, vg, vc))\n", "n = int(input())\na = list(map(int, input().split()))\ncur = ans = 0\nfor i in a:\n\tif i == 0:\n\t\tcur = 0\n\t\tans += 1\n\tif i == 1:\n\t\tif cur in (0, 1):\n\t\t\tcur = 2\n\t\telse:\n\t\t\tcur = 0\n\t\t\tans += 1\n\tif i == 2:\n\t\tif cur in (0, 2):\n\t\t\tcur = 1\n\t\telse:\n\t\t\tcur = 0\n\t\t\tans += 1\n\tif i == 3:\n\t\tcur = {0: 0, 1: 2, 2: 1}[cur]\nprint(ans)\n", "n = int(input())\ndays = input().split()\nlast = '0'\ncounter = 0\nfor i in range(n):\n\tif last == days[i] or days[i] == '0':\n\t\tcounter += 1\n\t\tlast = '0'\n\telse:\n\t\tif days[i] != '3':\n\t\t\tlast = days[i]\n\t\telse:\n\t\t\tif last == '1':\n\t\t\t\tlast = '2'\n\t\t\telif last == '2':\n\t\t\t\tlast = '1'\n\t\t\telse:\n\t\t\t\tif i < n - 1:\n\t\t\t\t\tif days[i+1] == '1':\n\t\t\t\t\t\tlast = '2'\n\t\t\t\t\telif days[i+1] == '2':\n\t\t\t\t\t\tlast = '1'\nprint(counter)\n", "def val(a, action):\n\tres = 1000\n\tif a == 3:\n\t\tres = 0\n\telif a == 1 and action == 'C':\n\t\tres = 0\n\telif a == 2 and action == 'G':\n\t\tres = 0\n\treturn res\n\t\t\n\nn = int(input())\na = list(map(int, input().split()))\ncurr = {}\nprev = {'G':0,'C':0,'R':0}\nfor i in a:\n\tcurr['G'] = min(prev['C'], prev['R']) + val(i, 'G')\n\tcurr['C'] = min(prev['G'], prev['R']) + val(i, 'C')\n\tcurr['R'] = min(prev['C'], prev['G'], prev['R']) + 1\n\tprev = curr.copy()\n\nprint(min(prev.values()))\n", "\"\"\"\n\thttp://codeforces.com/problemset/problem/698/A\n\n\"\"\"\nfrom sys import stdin, stdout\nfrom array import array\n\n\ndef solve(days):\n\trest_num = 0\n\tprev_act = 0\n\tfor i in range(0, len(days)-1):\n\t\tcur_act = days[i]\n\t\tnext_act = days[i+1]\n\t\t# stdout.write(str(cur_act))\n\t\tif cur_act == 0 or prev_act == cur_act:\n\t\t\tprev_act = 0\n\t\t\trest_num += 1\n\t\telif prev_act != cur_act and cur_act != 3:\n\t\t\tprev_act = cur_act\n\t\telse:  # cur_act == 3\n\t\t\tif prev_act in (1, 2):\n\t\t\t\tprev_act = prev_act % 2 + 1\n\t\t\telse:\n\t\t\t\tif next_act in (1, 2):\n\t\t\t\t\tprev_act = next_act % 2 + 1\n\n\t\t# rest_num += 1\n\treturn rest_num\n\n\ndef __starting_point():\n\tuse_stdio = True\n\tdays = []\n\tif use_stdio:\n\t\tlength = int(stdin.readline())\n\t\tdays = array('i', list(map(int, stdin.readline().split()))+[3])\n\t\tstdout.write(str(solve(days)))\n\telse:\n\t\twith open('input', 'r') as fin, open('output', 'w') as fout:\n\t\t\tlength = int(fin.readline())\n\t\t\tdays = array('i', list(map(int, fin.readline().split()))+[3])\n\t\t\tfout.write(str(solve(days)))\n\n__starting_point()\n", "n = int(input())\ndp = [[0 for i in range(3)] for j in range(n+1)]\na = list(map(int,input().split()))\nfor i in range(1,n+1):\n\tif a[i-1] == 1 or a[i-1] == 3:\n\t\tdp[i][1] = max(dp[i-1][0],dp[i-1][2])+1\n\tif a[i-1] == 2 or a[i-1] == 3:\n\t\tdp[i][2] = max(dp[i-1][0],dp[i-1][1])+1\n\tdp[i][0] = max(max(dp[i-1][0],dp[i-1][1]),dp[i-1][2])\n\nprint(n - max(max(dp[n][0],dp[n][1]),dp[n][2]))\n", "INF = 1000\n\nn = int(input())\ndesc = list(map(int, input().split()))\nr = {}\ng = {}\nc = {}\n\nr[0] = 0\ng[0] = 0\nc[0] = 0\ni = 0\n\nfor x in desc:\n\ti += 1\n\tif x == 0:\n\t\tg[i] = INF\n\t\tc[i] = INF\n\t\tr[i] = 1 + min([g[i-1], r[i-1], c[i-1]])\n\telif x == 1:\n\t\tg[i] = INF\n\t\tc[i] = min(r[i-1], g[i-1])\n\t\tr[i] = 1 + min([g[i-1], r[i-1], c[i-1]])\n\telif x == 2:\n\t\tg[i] = min(r[i-1], c[i-1])\n\t\tc[i] = INF\n\t\tr[i] = 1 + min([g[i-1], r[i-1], c[i-1]])\n\telif x == 3:\n\t\tr[i] = 1 + min([g[i-1], r[i-1], c[i-1]])\n\t\tg[i] = min(r[i-1], c[i-1])\n\t\tc[i] = min(r[i-1], g[i-1])\n\nprint(min([r[n], g[n], c[n]]))\n", "INF = 1000\nn = int(input())\ndesc = list(map(int, input().split()))\nr, g, c = {}, {}, {}\nr[0], g[0], c[0], i = 0, 0, 0, 0\nfor x in desc:\n\ti += 1\n\tr[i] = 1 + min([g[i-1], r[i-1], c[i-1]])\n\tg[i] = INF if x < 2 else min(r[i-1], c[i-1])\n\tc[i] = INF if x % 2 == 0 else min(r[i-1], g[i-1])\nprint(min([r[n], g[n], c[n]]))\n", "days = int(input())\nevents = [int(_) for _ in input().split()]\n\nrests = 0\nlast = 0\nfor event in events:\n\tif event == 0:\n\t\trests += 1\n\t\tlast = 0\n\telif event == 1:\n\t\tif last == 1:\n\t\t\trests += 1\n\t\t\tlast = 0\n\t\telse:\n\t\t\tlast = 1\n\telif event == 2:\n\t\tif last == 2:\n\t\t\trests += 1\n\t\t\tlast = 0\n\t\telse:\n\t\t\tlast = 2\n\telse:\n\t\tif last == 1:\n\t\t\tlast = 2\n\t\telif last == 2:\n\t\t\tlast = 1\nprint(rests)\n", "n = int(input())\nl = list(map(int, input().split()))\noutput = 1 if l[0] == 0 else 0\nu = False\nfor i in range(1, n):\n\tif l[i] == 0:\n\t\toutput += 1\n\telif l[i] == l[i - 1] and l[i] != 3:\n\t\toutput += 1\n\t\tl[i] = 0\n\telif l[i] == 3:\n\t\tif l[i - 1] == 1:\n\t\t\tl[i] = 2\n\t\telif l[i - 1] == 2:\n\t\t\tl[i] = 1\nprint(output)\n", "user = int(input())\nn = list(input().split(\" \"))\nl = len(n)-1\nif int(n[0]) == 3 and int(n[l])!=3:\n\tn.reverse()\nr = 0\na = 0\nc = 0\nres = []\nfor i in n:\n\tif int(i) == 0:\n\t\tr = r + 1\n\t\ta = 0\n\t\tc = c + 1\n\tif int(i) == 1 :\n\t\tif a == 0 or a!=2:\n\t\t\ta = 2\n\t\t\tc = c + 1\n\t\telse:\n\t\t\tr = r + 1 \n\t\t\ta = 0\n\t\t\tc = c + 1\n\tif int(i) == 2:\n\t\tif a == 0 or a!=1:\n\t\t\ta = 1\n\t\t\tc = c + 1\n\t\telse:\n\t\t\tr = r + 1\n\t\t\ta = 0\n\t\t\tc = c + 1\n\tif int(i) == 3:\n\t\tif a==0:\n\t\t\twhile c < len(n) and n[c] == 3:\n\t\t\t\tc = c + 1\n\t\t\tif c < len(n):\n\t\t\t\tif n[c] == 1:\n\t\t\t\t\ta = 2\n\t\t\t\telif n[c] == 2:\n\t\t\t\t\ta = 1\n\t\telif a!=1:\n\t\t\ta = 1\n\t\telif a!=2:\n\t\t\ta = 2\nprint(r)\n", "# Name : Sachdev Hitesh\n# College : GLSICA\nuser = int(input())\nn = list(input().split(\" \"))\nl = len(n)-1\n#if int(n[0]) == 3 and int(n[l])!=3:\n#\tn.reverse()\nr = 0\na = 0\nc = 0\nres = []\nfor i in n:\n\tif int(i) == 0:\n\t\tr = r + 1\n\t\ta = 0\n\t\tc = c + 1\n\tif int(i) == 1 :\n\t\tif a == 0 or a!=2:\n\t\t\ta = 2\n\t\t\tc = c + 1\n\t\telse:\n\t\t\tr = r + 1 \n\t\t\ta = 0\n\t\t\tc = c + 1\n\tif int(i) == 2:\n\t\tif a == 0 or a!=1:\n\t\t\ta = 1\n\t\t\tc = c + 1\n\t\telse:\n\t\t\tr = r + 1\n\t\t\ta = 0\n\t\t\tc = c + 1\n\tif int(i) == 3:\n\t\tif a==0:\n\t\t\twhile c < len(n) and n[c] == 3:\n\t\t\t\tc = c + 1\n\t\t\tif c < len(n):\n\t\t\t\tif n[c] == 1:\n\t\t\t\t\ta = 2\n\t\t\t\telif n[c] == 2:\n\t\t\t\t\ta = 1\n\t\telif a!=1:\n\t\t\ta = 1\n\t\telif a!=2:\n\t\t\ta = 2\nprint(r)\n", "def get_ints(string):\n\treturn list(map(int, string.split()))\n\n\ndef get_input():\n\tn = int(input())\n\txs = get_ints(input())\n\treturn n, xs\n\n\ndef foo(xs, res, last):\n\t# print(xs)\n\tif len(xs) is []:\n\t\treturn res\n\tfor i, x in enumerate(xs):\n\t\tif x == 0:\n\t\t\tres += 1\n\t\t\tlast = 0\n\n\t\telif x == 1 and last == 1:\n\t\t\tres += 1\n\t\t\tlast = 0\n\t\telif x == 1:\n\t\t\tlast = 1\n\n\t\telif x == 2 and last == 2:\n\t\t\tres += 1\n\t\t\tlast = 0\n\t\telif x == 2:\n\t\t\tlast = 2\n\n\t\telse:\n\t\t\tif last == 1:\n\t\t\t\tlast = 2\n\t\t\telif last == 2:\n\t\t\t\tlast = 1\n\t\t\telif i < len(xs)-1 and xs[i+1] == 0:\n\t\t\t\tlast = 1\n\t\t\telse:\n\t\t\t\treturn min(foo(xs[i+1:], res, 1), foo(xs[i+1:], res, 2))\n\n\treturn res\n\n\ndef main():\n\tn, xs = get_input()\n\tres = foo(xs, 0, 0)\n\n\tprint(res)\n\treturn res\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "\ndef sport(v):\n\treturn v >= 2\n\n\ndef contest(v):\n\treturn v in [1, 3]\n\n\nLAST_CONTEST = 0\nLAST_SPORT = 1\n\ndef __starting_point():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\n\t\n\tprev = [0, 0]\n\tdp = [0, 0]\n\t\n\tfor i in range(n):\n\t\tv = a[i]\n\t\tcurr = [dp[0], dp[1]]\n\t\tif sport(v):\n\t\t\tcurr[LAST_SPORT] = max(\n\t\t\t\tdp[LAST_SPORT],\n\t\t\t\t1 + prev[LAST_SPORT],\n\t\t\t\t1 + dp[LAST_CONTEST])\n\t\t\t\t\n\t\tif contest(v):\n\t\t\tcurr[LAST_CONTEST] = max(\n\t\t\t\tdp[LAST_CONTEST],\n\t\t\t\t1 + prev[LAST_CONTEST],\n\t\t\t\t1 + dp[LAST_SPORT])\n\t\tprev = dp\n\t\tdp = curr\n\t\t#print(dp, contest(v), sport(v))\n\t\n\tprint(n - max(dp))\n\n__starting_point()\n", "def __starting_point():\n\tMAX = 100\n\tn = int(input())\n\tnum = list()\n\tfor i in range(n + 1):\n\t\tnum.append([0, 0, 0])\n\tline = str(input()).split()\n\tfor i in range(n):\n\t\tif line[i] == '0':\n\t\t\tnum[i + 1][0] = 1 + min(num[i])\n\t\t\tnum[i + 1][1] = MAX\n\t\t\tnum[i + 1][2] = MAX\n\t\telif line[i] == '1':\n\t\t\tnum[i + 1][0] = 1 + min(num[i])\n\t\t\tnum[i + 1][1] = min(num[i][0], num[i][2])\n\t\t\tnum[i + 1][2] = MAX\n\t\telif line[i] == '2':\n\t\t\tnum[i + 1][0] = 1 + min(num[i])\n\t\t\tnum[i + 1][1] = MAX\n\t\t\tnum[i + 1][2] = min(num[i][0], num[i][1])\n\t\telif line[i] == '3':\n\t\t\tnum[i + 1][0] = 1 + min(num[i])\n\t\t\tnum[i + 1][1] = min(num[i][0], num[i][2])\n\t\t\tnum[i + 1][2] = min(num[i][0], num[i][1])\n\tprint(min(num[n]))\n\n__starting_point()\n"], "id": "id7974"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7974", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["vasya", 0], ["has", 0], ["n", 0], ["days", 0], ["of", 0], ["vacations", 0], ["so", 0], ["he", 0], ["decided", 0], ["to", 0], ["improve", 0], ["his", 0], ["it", 0], ["skills", 0], ["and", 0], ["do", 0], ["sport", 0], ["vasya", 0], ["knows", 0], ["the", 0], ["following", 0], ["information", 0], ["about", 0], ["each", 0], ["of", 0], ["this", 0], ["n", 0], ["days", 0], ["whether", 0], ["that", 0], ["gym", 0], ["opened", 0], ["and", 0], ["whether", 0], ["a", 0], ["contest", 0], ["was", 0], ["carried", 0], ["out", 0], ["in", 0], ["the", 0], ["internet", 0], ["on", 0], ["that", 0], ["day", 0], ["for", 0], ["the", 0], ["i", 0], ["th", 0], ["day", 0], ["there", 0], ["are", 0], ["four", 0], ["options", 0], ["on", 0], ["this", 0], ["day", 0], ["the", 0], ["gym", 0], ["is", 0], ["closed", 0], ["and", 0], ["the", 0], ["contest", 0], ["is", 0], ["not", 0], ["carried", 0], ["out", 0], ["on", 0], ["this", 0], ["day", 0], ["the", 0], ["gym", 0], ["is", 0], ["closed", 0], ["and", 0], ["the", 0], ["contest", 0], ["is", 0], ["carried", 0], ["out", 0], ["on", 0], ["this", 0], ["day", 0], ["the", 0], ["gym", 0], ["is", 0], ["open", 0], ["and", 0], ["the", 0], ["contest", 0], ["is", 0], ["not", 0], ["carried", 0], ["out", 0], ["on", 1], ["this", 1], ["day", 1], ["the", 1], ["gym", 1], ["is", 1], ["open", 1], ["and", 1], ["the", 1], ["contest", 1], ["is", 1], ["carried", 1], ["out", 1], ["on", 1], ["each", 1], ["of", 1], ["days", 1], ["vasya", 1], ["can", 1], ["either", 1], ["have", 1], ["a", 1], ["rest", 1], ["or", 1], ["write", 1], ["the", 1], ["contest", 1], ["if", 1], ["it", 1], ["is", 1], ["carried", 1], ["out", 1], ["on", 1], ["this", 1], ["day", 1], ["or", 1], ["do", 1], ["sport", 1], ["if", 1], ["the", 1], ["gym", 1], ["is", 1], ["open", 1], ["on", 1], ["this", 1], ["day", 1], ["find", 1], ["the", 1], ["minimum", 1], ["number", 1], ["of", 1], ["days", 1], ["on", 1], ["which", 1], ["vasya", 1], ["will", 1], ["have", 1], ["a", 1], ["rest", 1], ["it", 1], ["means", 1], ["he", 1], ["will", 1], ["not", 1], ["do", 1], ["sport", 1], ["and", 1], ["write", 1], ["the", 1], ["contest", 1], ["at", 1], ["the", 1], ["same", 1], ["time", 1], ["the", 1], ["only", 1], ["limitation", 1], ["that", 1], ["vasya", 1], ["has", 1], ["—", 1], ["he", 1], ["does", 1], ["not", 1], ["want", 1], ["to", 1], ["do", 1], ["the", 1], ["same", 1], ["activity", 1], ["on", 1], ["two", 1], ["consecutive", 1], ["days", 1], ["it", 1], ["means", 1], ["he", 1], ["will", 1], ["not", 1], ["do", 1], ["sport", 1], ["on", 0], ["two", 0], ["consecutive", 0], ["days", 0], ["and", 0], ["write", 0], ["the", 0], ["contest", 0], ["on", 0], ["two", 0], ["consecutive", 0], ["days", 0], ["input", 8], ["the", 11], ["first", 2], ["line", 2], ["contains", 2], ["a", 2], ["positive", 1], ["integer", 1], ["n", 1], ["1", 1], ["≤", 1], ["n", 0], ["≤", 0], ["100", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["days", 0], ["of", 0], ["vasya", 0], ["s", 0], ["vacations", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["the", 0], ["sequence", 0], ["of", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["0", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["3", 0], ["separated", 0], ["by", 0], ["space", 0], ["where", 0], ["a", 0], ["i", 0], ["equals", 0], ["0", 0], ["if", 0], ["on", 0], ["the", 0], ["i", 0], ["th", 0], ["day", 0], ["of", 0], ["vacations", 0], ["the", 0], ["gym", 0], ["is", 0], ["closed", 0], ["and", 0], ["the", 0], ["contest", 0], ["is", 0], ["not", 0], ["carried", 0], ["out", 0], ["a", 0], ["i", 0], ["equals", 0], ["1", 0], ["if", 0], ["on", 0], ["the", 0], ["i", 0], ["th", 0], ["day", 0], ["of", 0], ["vacations", 0], ["the", 0], ["gym", 0], ["is", 0], ["closed", 0], ["but", 0], ["the", 0], ["contest", 0], ["is", 0], ["carried", 0], ["out", 0], ["a", 0], ["i", 0], ["equals", 0], ["2", 0], ["if", 1], ["on", 1], ["the", 1], ["i", 1], ["th", 0], ["day", 0], ["of", 0], ["vacations", 0], ["the", 0], ["gym", 0], ["is", 0], ["open", 0], ["and", 0], ["the", 0], ["contest", 0], ["is", 0], ["not", 0], ["carried", 0], ["out", 0], ["a", 0], ["i", 0], ["equals", 1], ["3", 1], ["if", 1], ["on", 1], ["the", 1], ["i", 1], ["th", 1], ["day", 1], ["of", 0], ["vacations", 0], ["the", 0], ["gym", 0], ["is", 0], ["open", 0], ["and", 0], ["the", 0], ["contest", 0], ["is", 0], ["carried", 0], ["out", 0], ["output", 0], ["print", 0], ["the", 0], ["minimum", 0], ["possible", 0], ["number", 0], ["of", 0], ["days", 0], ["on", 0], ["which", 0], ["vasya", 0], ["will", 0], ["have", 0], ["a", 0], ["rest", 0], ["remember", 0], ["that", 0], ["vasya", 0], ["refuses", 0], ["to", 0], ["do", 0], ["sport", 0], ["on", 0], ["any", 0], ["two", 0], ["consecutive", 0], ["days", 0], ["to", 0], ["write", 0], ["the", 0], ["contest", 0], ["on", 0], ["any", 0], ["two", 0], ["consecutive", 0], ["days", 0], ["examples", 0], ["input", 0], ["4", 0], ["1", 0], ["3", 0], ["2", 0], ["0", 0], ["output", 0], ["2", 0], ["input", 0], ["7", 0], ["1", 0], ["3", 0], ["3", 0], ["2", 0], ["1", 0], ["2", 0], ["3", 0], ["output", 0], ["0", 0], ["input", 0], ["2", 0], ["2", 0], ["2", 0], ["output", 0], ["1", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["test", 1], ["vasya", 1], ["can", 1], ["write", 1], ["the", 1], ["contest", 1], ["on", 1], ["the", 1], ["day", 1], ["number", 1], ["1", 1], ["and", 1], ["do", 1], ["sport", 1], ["on", 1], ["the", 1], ["day", 1], ["number", 1], ["3", 1], ["thus", 1], ["he", 1], ["will", 1], ["have", 1], ["a", 1], ["rest", 1], ["for", 1], ["only", 1], ["2", 1], ["days", 1], ["in", 1], ["the", 1], ["second", 1], ["test", 1], ["vasya", 1], ["should", 1], ["write", 1], ["contests", 1], ["on", 1], ["days", 1], ["number", 1], ["1", 1], ["3", 1], ["5", 1], ["and", 1], ["7", 1], ["in", 1], ["other", 1], ["days", 1], ["do", 1], ["sport", 1], ["thus", 1], ["he", 1], ["will", 1], ["not", 1], ["have", 1], ["a", 1], ["rest", 1], ["for", 1], ["a", 1], ["single", 1], ["day", 1], ["in", 1], ["the", 1], ["third", 1], ["test", 1], ["vasya", 1], ["can", 1], ["do", 1], ["sport", 1], ["either", 1], ["on", 1], ["a", 1], ["day", 1], ["number", 1], ["1", 1], ["or", 1], ["number", 1], ["2", 1], ["he", 1], ["can", 1], ["not", 1], ["do", 1], ["sport", 1], ["in", 1], ["two", 1], ["days", 1], ["because", 1], ["it", 1], ["will", 1], ["be", 1], ["contrary", 1], ["to", 1], ["the", 1], ["his", 0], ["limitation", 0], ["thus", 0], ["he", 0], ["will", 0], ["have", 0], ["a", 0], ["rest", 0], ["for", 0], ["only", 0], ["one", 0], ["day", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.42718446601941745, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4198367166813769, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5313092979127134, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5313092979127134, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.42524271844660194, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4196601941747573, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5313092979127134, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5313092979127134, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["inp", 0], ["sys", 0], ["stdin", 0], ["inp", 0], ["open", 0], ["input", 0], ["txt", 0], ["r", 0], ["n", 0], ["int", 0], ["inp", 0], ["readline", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["inp", 0], ["readline", 0], ["split", 0], ["best", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["nx", 0], ["best", 0], ["0", 0], ["0", 0], ["0", 0], ["if", 0], ["a", 0], ["i", 0], ["in", 0], ["1", 0], ["3", 0], ["nx", 0], ["best", 0], ["1", 0], ["max", 0], ["best", 0], ["0", 0], ["best", 0], ["2", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["in", 0], ["2", 0], ["3", 0], ["nx", 0], ["best", 0], ["2", 0], ["max", 0], ["best", 0], ["0", 0], ["best", 0], ["1", 0], ["1", 0], ["nx", 0], ["best", 0], ["0", 0], ["max", 0], ["best", 0], ["best", 0], ["nx", 0], ["best", 0], ["print", 0], ["n", 0], ["max", 0], ["best", 0], ["3", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dp", 0], ["1791791791", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dp", 0], ["0", 0], ["0", 0], ["0", 0], ["if", 0], ["a", 0], ["0", 0], ["1", 0], ["dp", 0], ["0", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["2", 0], ["dp", 0], ["0", 0], ["2", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["dp", 0], ["i", 0], ["0", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["3", 0], ["if", 0], ["a", 0], ["i", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["1", 0], ["ans", 0], ["max", 0], ["dp", 0], ["1", 0], ["print", 0], ["n", 0], ["ans", 0], ["input", 0], ["b", 0], ["10000", 0], ["s", 0], ["0", 0], ["b", 0], ["b", 0], ["for", 0], ["x", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["min", 0], ["s", 0], ["1", 0], ["min", 0], ["s", 0], ["0", 0], ["2", 0], ["if", 0], ["x", 0], ["1", 0], ["else", 0], ["b", 0], ["min", 0], ["s", 0], ["2", 0], ["if", 0], ["x", 0], ["2", 0], ["else", 0], ["b", 0], ["print", 0], ["min", 0], ["s", 0], ["def", 0], ["dp", 0], ["prev", 0], ["ind", 0], ["nonlocal", 0], ["dar", 0], ["n", 0], ["con", 0], ["gym", 0], ["if", 0], ["ind", 0], ["n", 0], ["return", 0], ["0", 0], ["if", 0], ["prev", 0], ["ind", 0], ["not", 0], ["in", 0], ["dar", 0], ["m", 0], ["dp", 0], ["free", 0], ["ind", 0], ["1", 0], ["1", 0], ["if", 0], ["prev", 0], ["con", 0], ["and", 0], ["con", 0], ["ind", 0], ["m", 0], ["min", 0], ["m", 0], ["dp", 0], ["con", 0], ["ind", 0], ["1", 0], ["if", 0], ["prev", 0], ["gym", 0], ["and", 0], ["gym", 0], ["ind", 0], ["m", 0], ["min", 0], ["m", 0], ["dp", 0], ["gym", 0], ["ind", 0], ["1", 0], ["dar", 0], ["prev", 0], ["ind", 0], ["m", 0], ["return", 0], ["dar", 0], ["prev", 0], ["ind", 0], ["dar", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["con", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["gym", 0], ["x", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["print", 0], ["dp", 0], ["free", 0], ["0", 0], ["x", 0], ["int", 0], ["input", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1791791791", 0], ["4", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["x", 0], ["a", 0], ["0", 0], ["0", 0], ["0", 0], ["if", 0], ["m", 0], ["0", 0], ["1", 0], ["a", 0], ["0", 0], ["1", 0], ["1", 0], ["if", 0], ["m", 0], ["0", 0], ["2", 0], ["a", 0], ["0", 0], ["2", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["x", 0], ["a", 0], ["i", 0], ["0", 0], ["max", 0], ["a", 0], ["i", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["3", 0], ["if", 0], ["m", 0], ["i", 0], ["j", 0], ["a", 0], ["i", 0], ["j", 0], ["max", 0], ["a", 0], ["i", 0], ["1", 0], ["j", 0], ["a", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["1", 0], ["maxx", 0], ["max", 0], ["a", 0], ["1", 0], ["print", 0], ["x", 0], ["maxx", 0], ["def", 0], ["main", 0], ["n", 0], ["input", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["solver", 0], ["l", 0], ["def", 0], ["solver", 0], ["l", 0], ["return", 0], ["helper", 0], ["l", 0], ["none", 0], ["def", 0], ["helper", 0], ["l", 0], ["last", 0], ["if", 0], ["len", 0], ["l", 0], ["0", 0], ["return", 0], ["0", 0], ["x", 0], ["l", 0], ["0", 0], ["if", 0], ["last", 0], ["gym", 0], ["if", 0], ["l", 0], ["0", 0], ["in", 0], ["0", 0], ["2", 0], ["return", 0], ["1", 0], ["helper", 0], ["l", 0], ["1", 0], ["none", 0], ["elif", 0], ["l", 0], ["0", 0], ["in", 0], ["1", 0], ["3", 0], ["return", 0], ["helper", 0], ["l", 0], ["1", 0], ["contest", 0], ["elif", 0], ["last", 0], ["contest", 0], ["if", 0], ["l", 0], ["0", 0], ["in", 0], ["0", 0], ["1", 0], ["return", 0], ["1", 0], ["helper", 0], ["l", 0], ["1", 0], ["none", 0], ["elif", 0], ["l", 0], ["0", 0], ["in", 0], ["2", 0], ["3", 0], ["return", 0], ["helper", 0], ["l", 0], ["1", 0], ["gym", 0], ["elif", 0], ["last", 0], ["none", 0], ["if", 0], ["l", 0], ["0", 0], ["0", 0], ["return", 0], ["1", 0], ["helper", 0], ["l", 0], ["1", 0], ["none", 0], ["elif", 0], ["l", 0], ["0", 0], ["1", 0], ["return", 0], ["helper", 0], ["l", 0], ["1", 0], ["contest", 0], ["elif", 0], ["l", 0], ["0", 0], ["2", 0], ["return", 0], ["helper", 0], ["l", 0], ["1", 0], ["gym", 0], ["elif", 0], ["l", 0], ["0", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["l", 0], ["if", 0], ["l", 0], ["i", 0], ["0", 0], ["return", 0], ["1", 0], ["helper", 0], ["l", 0], ["i", 0], ["1", 0], ["none", 0], ["elif", 0], ["l", 0], ["i", 0], ["1", 0], ["return", 0], ["helper", 0], ["l", 0], ["i", 0], ["1", 0], ["contest", 0], ["elif", 0], ["l", 0], ["i", 0], ["2", 0], ["return", 0], ["helper", 0], ["l", 0], ["i", 0], ["1", 0], ["gym", 0], ["return", 0], ["0", 0], ["else", 0], ["assert", 0], ["false", 0], ["print", 0], ["solver", 0], ["1", 0], ["3", 0], ["2", 0], ["0", 0], ["print", 0], ["solver", 0], ["1", 0], ["3", 0], ["3", 0], ["2", 0], ["1", 0], ["2", 0], ["3", 0], ["print", 0], ["solver", 0], ["2", 0], ["2", 0], ["main", 0], ["def", 0], ["main", 0], ["input", 0], ["a1", 0], ["a2", 0], ["x1", 0], ["x2", 0], ["z", 0], ["0", 0], ["for", 0], ["b", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["2", 0], ["if", 0], ["0", 0], ["b", 0], ["3", 0], ["if", 0], ["a1", 0], ["b", 0], ["a1", 0], ["0", 0], ["x1", 0], ["1", 0], ["else", 0], ["a1", 0], ["b", 0], ["if", 0], ["a2", 0], ["b", 0], ["a2", 0], ["0", 0], ["x2", 0], ["1", 0], ["else", 0], ["a2", 0], ["b", 0], ["if", 0], ["x1", 0], ["x2", 0], ["if", 0], ["x1", 0], ["x2", 0], ["x1", 0], ["a1", 0], ["x2", 0], ["a2", 0], ["else", 0], ["x2", 0], ["a2", 0], ["x1", 0], ["a1", 0], ["elif", 0], ["b", 0], ["3", 0], ["a1", 0], ["1", 0], ["if", 0], ["a1", 0], ["1", 0], ["else", 0], ["2", 0], ["a2", 0], ["2", 0], ["if", 0], ["a2", 0], ["2", 0], ["else", 0], ["1", 0], ["else", 0], ["0", 0], ["a1", 0], ["a2", 0], ["0", 0], ["z", 0], ["1", 0], ["print", 0], ["x1", 0], ["z", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["10", 0], ["6", 0], ["3", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["0", 0], ["0", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["1", 0], ["d", 0], ["0", 0], ["1", 0], ["0", 0], ["if", 0], ["a", 0], ["0", 0], ["2", 0], ["d", 0], ["0", 0], ["2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["d", 0], ["i", 0], ["0", 0], ["min", 0], ["d", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["d", 0], ["i", 0], ["1", 0], ["min", 0], ["d", 0], ["i", 0], ["1", 0], ["0", 0], ["d", 0], ["i", 0], ["1", 0], ["2", 0], ["if", 0], ["a", 0], ["i", 0], ["2", 0], ["d", 0], ["i", 0], ["2", 0], ["min", 0], ["d", 0], ["i", 0], ["1", 0], ["0", 0], ["d", 0], ["i", 0], ["1", 0], ["1", 0], ["print", 0], ["min", 0], ["d", 0], ["1", 0], ["this", 0], ["code", 0], ["is", 0], ["part", 0], ["of", 0], ["the", 0], ["codeforces", 0], ["problems", 0], ["solved", 0], ["in", 0], ["the", 0], ["repository", 0], ["1", 0], ["all", 0], ["solutions", 0], ["are", 0], ["written", 0], ["in", 0], ["python3", 0], ["1", 0], ["https", 0], ["github", 0], ["com", 0], ["praveendath92", 0], ["codeforces", 0], ["common", 0], ["base", 0], ["functions", 0], ["def", 0], ["read", 0], ["line", 0], ["return", 0], ["input", 0], ["strip", 0], ["def", 0], ["read", 0], ["int", 0], ["return", 0], ["int", 0], ["read", 0], ["line", 0], ["def", 0], ["read", 0], ["int", 0], ["array", 0], ["return", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["read", 0], ["line", 0], ["split", 0], ["def", 0], ["read", 0], ["string", 0], ["array", 0], ["return", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["read", 0], ["line", 0], ["split", 0], ["end", 0], ["of", 0], ["base", 0], ["functions", 0], ["start", 0], ["of", 0], ["main", 0], ["code", 0], ["t", 0], ["read", 0], ["int", 0], ["d", 0], ["read", 0], ["int", 0], ["array", 0], ["day", 0], ["one", 0], ["checking", 0], ["and", 0], ["init", 0], ["of", 0], ["actual", 0], ["tasks", 0], ["per", 0], ["day", 0], ["ad", 0], ["1", 0], ["len", 0], ["d", 0], ["ad", 0], ["0", 0], ["d", 0], ["0", 0], ["rests", 0], ["1", 0], ["if", 0], ["ad", 0], ["0", 0], ["0", 0], ["else", 0], ["0", 0], ["check", 0], ["for", 0], ["the", 0], ["remaining", 0], ["days", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["d", 0], ["if", 0], ["d", 0], ["i", 0], ["0", 0], ["rests", 0], ["1", 0], ["ad", 0], ["i", 0], ["0", 0], ["elif", 0], ["d", 0], ["i", 0], ["1", 0], ["if", 0], ["ad", 0], ["i", 0], ["1", 0], ["1", 0], ["rests", 0], ["1", 0], ["ad", 0], ["i", 0], ["0", 0], ["else", 0], ["ad", 0], ["i", 0], ["1", 0], ["elif", 0], ["d", 0], ["i", 0], ["2", 0], ["if", 0], ["ad", 0], ["i", 0], ["1", 0], ["2", 0], ["rests", 0], ["1", 0], ["ad", 0], ["i", 0], ["0", 0], ["else", 0], ["ad", 0], ["i", 0], ["2", 0], ["elif", 0], ["d", 0], ["i", 0], ["3", 0], ["if", 0], ["ad", 0], ["i", 0], ["1", 0], ["3", 0], ["ad", 0], ["i", 0], ["3", 0], ["else", 0], ["ad", 0], ["i", 0], ["d", 0], ["i", 0], ["ad", 0], ["i", 0], ["1", 0], ["print", 0], ["rests", 0], ["n", 0], ["vr", 0], ["vg", 0], ["vc", 0], ["int", 0], ["input", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cr", 0], ["min", 0], ["vr", 0], ["vg", 0], ["vc", 0], ["1", 0], ["cg", 0], ["min", 0], ["vr", 0], ["vc", 0], ["if", 0], ["x", 0], ["2", 0], ["else", 0], ["n", 0], ["cc", 0], ["min", 0], ["vr", 0], ["vg", 0], ["if", 0], ["x", 0], ["1", 0], ["else", 0], ["n", 0], ["vr", 0], ["vg", 0], ["vc", 0], ["cr", 0], ["cg", 0], ["cc", 0], ["print", 0], ["min", 0], ["vr", 0], ["vg", 0], ["vc", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cur", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["0", 0], ["cur", 0], ["0", 0], ["ans", 0], ["1", 0], ["if", 0], ["i", 0], ["1", 0], ["if", 0], ["cur", 0], ["in", 0], ["0", 0], ["1", 0], ["cur", 0], ["2", 0], ["else", 0], ["cur", 0], ["0", 0], ["ans", 0], ["1", 0], ["if", 0], ["i", 0], ["2", 0], ["if", 0], ["cur", 0], ["in", 0], ["0", 0], ["2", 0], ["cur", 0], ["1", 0], ["else", 0], ["cur", 0], ["0", 0], ["ans", 0], ["1", 0], ["if", 0], ["i", 0], ["3", 0], ["cur", 0], ["0", 0], ["0", 0], ["1", 0], ["2", 0], ["2", 0], ["1", 0], ["cur", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["days", 0], ["input", 0], ["split", 0], ["last", 0], ["0", 0], ["counter", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["last", 0], ["days", 0], ["i", 0], ["or", 0], ["days", 0], ["i", 0], ["0", 0], ["counter", 0], ["1", 0], ["last", 0], ["0", 0], ["else", 0], ["if", 0], ["days", 0], ["i", 0], ["3", 0], ["last", 0], ["days", 0], ["i", 0], ["else", 0], ["if", 0], ["last", 0], ["1", 0], ["last", 0], ["2", 0], ["elif", 0], ["last", 0], ["2", 0], ["last", 0], ["1", 0], ["else", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["if", 0], ["days", 0], ["i", 0], ["1", 0], ["1", 0], ["last", 0], ["2", 0], ["elif", 0], ["days", 0], ["i", 0], ["1", 0], ["2", 0], ["last", 0], ["1", 0], ["print", 0], ["counter", 0], ["def", 0], ["val", 0], ["a", 0], ["action", 0], ["res", 0], ["1000", 0], ["if", 0], ["a", 0], ["3", 0], ["res", 0], ["0", 0], ["elif", 0], ["a", 0], ["1", 0], ["and", 0], ["action", 0], ["c", 0], ["res", 0], ["0", 0], ["elif", 0], ["a", 0], ["2", 0], ["and", 0], ["action", 0], ["g", 0], ["res", 0], ["0", 0], ["return", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["curr", 0], ["prev", 0], ["g", 0], ["0", 0], ["c", 0], ["0", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["curr", 0], ["g", 0], ["min", 0], ["prev", 0], ["c", 0], ["prev", 0], ["r", 0], ["val", 0], ["i", 0], ["g", 0], ["curr", 0], ["c", 0], ["min", 0], ["prev", 0], ["g", 0], ["prev", 0], ["r", 0], ["val", 0], ["i", 0], ["c", 0], ["curr", 0], ["r", 0], ["min", 0], ["prev", 0], ["c", 0], ["prev", 0], ["g", 0], ["prev", 0], ["r", 0], ["1", 0], ["prev", 0], ["curr", 0], ["copy", 0], ["print", 0], ["min", 0], ["prev", 0], ["values", 0], ["http", 0], ["codeforces", 0], ["com", 0], ["problemset", 0], ["problem", 0], ["698", 0], ["a", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["from", 0], ["array", 0], ["import", 0], ["array", 0], ["def", 0], ["solve", 0], ["days", 0], ["rest", 0], ["num", 0], ["0", 0], ["prev", 0], ["act", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["days", 0], ["1", 0], ["cur", 0], ["act", 0], ["days", 0], ["i", 0], ["next", 0], ["act", 0], ["days", 0], ["i", 0], ["1", 0], ["stdout", 0], ["write", 0], ["str", 0], ["cur", 0], ["act", 0], ["if", 0], ["cur", 0], ["act", 0], ["0", 0], ["or", 0], ["prev", 0], ["act", 0], ["cur", 0], ["act", 0], ["prev", 0], ["act", 0], ["0", 0], ["rest", 0], ["num", 0], ["1", 0], ["elif", 0], ["prev", 0], ["act", 0], ["cur", 0], ["act", 0], ["and", 0], ["cur", 0], ["act", 0], ["3", 0], ["prev", 0], ["act", 0], ["cur", 0], ["act", 0], ["else", 0], ["cur", 0], ["act", 0], ["3", 0], ["if", 0], ["prev", 0], ["act", 0], ["in", 0], ["1", 0], ["2", 0], ["prev", 0], ["act", 0], ["prev", 0], ["act", 0], ["2", 0], ["1", 0], ["else", 0], ["if", 0], ["next", 0], ["act", 0], ["in", 0], ["1", 0], ["2", 0], ["prev", 0], ["act", 0], ["next", 0], ["act", 0], ["2", 0], ["1", 0], ["rest", 0], ["num", 0], ["1", 0], ["return", 0], ["rest", 0], ["num", 0], ["def", 0], ["starting", 0], ["point", 0], ["use", 0], ["stdio", 0], ["true", 0], ["days", 0], ["if", 0], ["use", 0], ["stdio", 0], ["length", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["days", 0], ["array", 0], ["i", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["3", 0], ["stdout", 0], ["write", 0], ["str", 0], ["solve", 0], ["days", 0], ["else", 0], ["with", 0], ["open", 0], ["input", 0], ["r", 0], ["as", 0], ["fin", 0], ["open", 0], ["output", 0], ["w", 0], ["as", 0], ["fout", 0], ["length", 0], ["int", 0], ["fin", 0], ["readline", 0], ["days", 0], ["array", 0], ["i", 0], ["list", 0], ["map", 0], ["int", 0], ["fin", 0], ["readline", 0], ["split", 0], ["3", 0], ["fout", 0], ["write", 0], ["str", 0], ["solve", 0], ["days", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["dp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["or", 0], ["a", 0], ["i", 0], ["1", 0], ["3", 0], ["dp", 0], ["i", 0], ["1", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["2", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["or", 0], ["a", 0], ["i", 0], ["1", 0], ["3", 0], ["dp", 0], ["i", 0], ["2", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["0", 0], ["max", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["1", 0], ["2", 0], ["print", 0], ["n", 0], ["max", 0], ["max", 0], ["dp", 0], ["n", 0], ["0", 0], ["dp", 0], ["n", 0], ["1", 0], ["dp", 0], ["n", 0], ["2", 0], ["inf", 0], ["1000", 0], ["n", 0], ["int", 0], ["input", 0], ["desc", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["r", 0], ["g", 0], ["c", 0], ["r", 0], ["0", 0], ["0", 0], ["g", 0], ["0", 0], ["0", 0], ["c", 0], ["0", 0], ["0", 0], ["i", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["desc", 0], ["i", 0], ["1", 0], ["if", 0], ["x", 0], ["0", 0], ["g", 0], ["i", 0], ["inf", 0], ["c", 0], ["i", 0], ["inf", 0], ["r", 0], ["i", 0], ["1", 0], ["min", 0], ["g", 0], ["i", 0], ["1", 0], ["r", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["elif", 0], ["x", 0], ["1", 0], ["g", 0], ["i", 0], ["inf", 0], ["c", 0], ["i", 0], ["min", 0], ["r", 0], ["i", 0], ["1", 0], ["g", 0], ["i", 0], ["1", 0], ["r", 0], ["i", 0], ["1", 0], ["min", 0], ["g", 0], ["i", 0], ["1", 0], ["r", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["elif", 0], ["x", 0], ["2", 0], ["g", 0], ["i", 0], ["min", 0], ["r", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["inf", 0], ["r", 0], ["i", 0], ["1", 0], ["min", 0], ["g", 0], ["i", 0], ["1", 0], ["r", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["elif", 0], ["x", 0], ["3", 0], ["r", 0], ["i", 0], ["1", 0], ["min", 0], ["g", 0], ["i", 0], ["1", 0], ["r", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["g", 0], ["i", 0], ["min", 0], ["r", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["min", 0], ["r", 0], ["i", 0], ["1", 0], ["g", 0], ["i", 0], ["1", 0], ["print", 0], ["min", 0], ["r", 0], ["n", 0], ["g", 0], ["n", 0], ["c", 0], ["n", 0], ["inf", 0], ["1000", 0], ["n", 0], ["int", 0], ["input", 0], ["desc", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["r", 0], ["g", 0], ["c", 0], ["r", 0], ["0", 0], ["g", 0], ["0", 0], ["c", 0], ["0", 0], ["i", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["desc", 0], ["i", 0], ["1", 0], ["r", 0], ["i", 0], ["1", 0], ["min", 0], ["g", 0], ["i", 0], ["1", 0], ["r", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["g", 0], ["i", 0], ["inf", 0], ["if", 0], ["x", 0], ["2", 0], ["else", 0], ["min", 0], ["r", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["inf", 0], ["if", 0], ["x", 0], ["2", 0], ["0", 0], ["else", 0], ["min", 0], ["r", 0], ["i", 0], ["1", 0], ["g", 0], ["i", 0], ["1", 0], ["print", 0], ["min", 0], ["r", 0], ["n", 0], ["g", 0], ["n", 0], ["c", 0], ["n", 0], ["days", 0], ["int", 0], ["input", 0], ["events", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["split", 0], ["rests", 0], ["0", 0], ["last", 0], ["0", 0], ["for", 0], ["event", 0], ["in", 0], ["events", 0], ["if", 0], ["event", 0], ["0", 0], ["rests", 0], ["1", 0], ["last", 0], ["0", 0], ["elif", 0], ["event", 0], ["1", 0], ["if", 0], ["last", 0], ["1", 0], ["rests", 0], ["1", 0], ["last", 0], ["0", 0], ["else", 0], ["last", 0], ["1", 0], ["elif", 0], ["event", 0], ["2", 0], ["if", 0], ["last", 0], ["2", 0], ["rests", 0], ["1", 0], ["last", 0], ["0", 0], ["else", 0], ["last", 0], ["2", 0], ["else", 0], ["if", 0], ["last", 0], ["1", 0], ["last", 0], ["2", 0], ["elif", 0], ["last", 0], ["2", 0], ["last", 0], ["1", 0], ["print", 0], ["rests", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["output", 0], ["1", 0], ["if", 0], ["l", 0], ["0", 0], ["0", 0], ["else", 0], ["0", 0], ["u", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["l", 0], ["i", 0], ["0", 0], ["output", 0], ["1", 0], ["elif", 0], ["l", 0], ["i", 0], ["l", 0], ["i", 0], ["1", 0], ["and", 0], ["l", 0], ["i", 0], ["3", 0], ["output", 0], ["1", 0], ["l", 0], ["i", 0], ["0", 0], ["elif", 0], ["l", 0], ["i", 0], ["3", 0], ["if", 0], ["l", 0], ["i", 0], ["1", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["elif", 0], ["l", 0], ["i", 0], ["1", 0], ["2", 0], ["l", 0], ["i", 0], ["1", 0], ["print", 0], ["output", 0], ["user", 0], ["int", 0], ["input", 0], ["n", 0], ["list", 0], ["input", 0], ["split", 0], ["l", 0], ["len", 0], ["n", 0], ["1", 0], ["if", 0], ["int", 0], ["n", 0], ["0", 0], ["3", 0], ["and", 0], ["int", 0], ["n", 0], ["l", 0], ["3", 0], ["n", 0], ["reverse", 0], ["r", 0], ["0", 0], ["a", 0], ["0", 0], ["c", 0], ["0", 0], ["res", 0], ["for", 0], ["i", 0], ["in", 0], ["n", 0], ["if", 0], ["int", 0], ["i", 0], ["0", 0], ["r", 0], ["r", 0], ["1", 0], ["a", 0], ["0", 0], ["c", 0], ["c", 0], ["1", 0], ["if", 0], ["int", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["or", 0], ["a", 0], ["2", 0], ["a", 0], ["2", 0], ["c", 0], ["c", 0], ["1", 0], ["else", 0], ["r", 0], ["r", 0], ["1", 0], ["a", 0], ["0", 0], ["c", 0], ["c", 0], ["1", 0], ["if", 0], ["int", 0], ["i", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["or", 0], ["a", 0], ["1", 0], ["a", 0], ["1", 0], ["c", 0], ["c", 0], ["1", 0], ["else", 0], ["r", 0], ["r", 0], ["1", 0], ["a", 0], ["0", 0], ["c", 0], ["c", 0], ["1", 0], ["if", 0], ["int", 0], ["i", 0], ["3", 0], ["if", 0], ["a", 0], ["0", 0], ["while", 0], ["c", 0], ["len", 0], ["n", 0], ["and", 0], ["n", 0], ["c", 0], ["3", 0], ["c", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["len", 0], ["n", 0], ["if", 0], ["n", 0], ["c", 0], ["1", 0], ["a", 0], ["2", 0], ["elif", 0], ["n", 0], ["c", 0], ["2", 0], ["a", 0], ["1", 0], ["elif", 0], ["a", 0], ["1", 0], ["a", 0], ["1", 0], ["elif", 0], ["a", 0], ["2", 0], ["a", 0], ["2", 0], ["print", 0], ["r", 0], ["name", 0], ["sachdev", 0], ["hitesh", 0], ["college", 0], ["glsica", 0], ["user", 0], ["int", 0], ["input", 0], ["n", 0], ["list", 0], ["input", 0], ["split", 0], ["l", 0], ["len", 0], ["n", 0], ["1", 0], ["if", 0], ["int", 0], ["n", 0], ["0", 0], ["3", 0], ["and", 0], ["int", 0], ["n", 0], ["l", 0], ["3", 0], ["n", 0], ["reverse", 0], ["r", 0], ["0", 0], ["a", 0], ["0", 0], ["c", 0], ["0", 0], ["res", 0], ["for", 0], ["i", 0], ["in", 0], ["n", 0], ["if", 0], ["int", 0], ["i", 0], ["0", 0], ["r", 0], ["r", 0], ["1", 0], ["a", 0], ["0", 0], ["c", 0], ["c", 0], ["1", 0], ["if", 0], ["int", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["or", 0], ["a", 0], ["2", 0], ["a", 0], ["2", 0], ["c", 0], ["c", 0], ["1", 0], ["else", 0], ["r", 0], ["r", 0], ["1", 0], ["a", 0], ["0", 0], ["c", 0], ["c", 0], ["1", 0], ["if", 0], ["int", 0], ["i", 0], ["2", 0], ["if", 0], ["a", 0], ["0", 0], ["or", 0], ["a", 0], ["1", 0], ["a", 0], ["1", 0], ["c", 0], ["c", 0], ["1", 0], ["else", 0], ["r", 0], ["r", 0], ["1", 0], ["a", 0], ["0", 0], ["c", 0], ["c", 0], ["1", 0], ["if", 0], ["int", 0], ["i", 0], ["3", 0], ["if", 0], ["a", 0], ["0", 0], ["while", 0], ["c", 0], ["len", 0], ["n", 0], ["and", 0], ["n", 0], ["c", 0], ["3", 0], ["c", 0], ["c", 0], ["1", 0], ["if", 0], ["c", 0], ["len", 0], ["n", 0], ["if", 0], ["n", 0], ["c", 0], ["1", 0], ["a", 0], ["2", 0], ["elif", 0], ["n", 0], ["c", 0], ["2", 0], ["a", 0], ["1", 0], ["elif", 0], ["a", 0], ["1", 0], ["a", 0], ["1", 0], ["elif", 0], ["a", 0], ["2", 0], ["a", 0], ["2", 0], ["print", 0], ["r", 0], ["def", 0], ["get", 0], ["ints", 0], ["string", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["string", 0], ["split", 0], ["def", 0], ["get", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["xs", 0], ["get", 0], ["ints", 0], ["input", 0], ["return", 0], ["n", 0], ["xs", 0], ["def", 0], ["foo", 0], ["xs", 0], ["res", 0], ["last", 0], ["print", 0], ["xs", 0], ["if", 0], ["len", 0], ["xs", 0], ["is", 0], ["return", 0], ["res", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["xs", 0], ["if", 0], ["x", 0], ["0", 0], ["res", 0], ["1", 0], ["last", 0], ["0", 0], ["elif", 0], ["x", 0], ["1", 0], ["and", 0], ["last", 0], ["1", 0], ["res", 0], ["1", 0], ["last", 0], ["0", 0], ["elif", 0], ["x", 0], ["1", 0], ["last", 0], ["1", 0], ["elif", 0], ["x", 0], ["2", 0], ["and", 0], ["last", 0], ["2", 0], ["res", 0], ["1", 0], ["last", 0], ["0", 0], ["elif", 0], ["x", 0], ["2", 0], ["last", 0], ["2", 0], ["else", 0], ["if", 0], ["last", 0], ["1", 0], ["last", 0], ["2", 0], ["elif", 0], ["last", 0], ["2", 0], ["last", 0], ["1", 0], ["elif", 0], ["i", 0], ["len", 0], ["xs", 0], ["1", 0], ["and", 0], ["xs", 0], ["i", 0], ["1", 0], ["0", 0], ["last", 0], ["1", 0], ["else", 0], ["return", 0], ["min", 0], ["foo", 0], ["xs", 0], ["i", 0], ["1", 0], ["res", 0], ["1", 0], ["foo", 0], ["xs", 0], ["i", 0], ["1", 0], ["res", 0], ["2", 0], ["return", 0], ["res", 0], ["def", 0], ["main", 0], ["n", 0], ["xs", 0], ["get", 0], ["input", 0], ["res", 0], ["foo", 0], ["xs", 0], ["0", 0], ["0", 0], ["print", 0], ["res", 0], ["return", 0], ["res", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["sport", 0], ["v", 0], ["return", 0], ["v", 0], ["2", 0], ["def", 0], ["contest", 0], ["v", 0], ["return", 0], ["v", 0], ["in", 0], ["1", 0], ["3", 0], ["last", 0], ["contest", 0], ["0", 0], ["last", 0], ["sport", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["prev", 0], ["0", 0], ["0", 0], ["dp", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["v", 0], ["a", 0], ["i", 0], ["curr", 0], ["dp", 0], ["0", 0], ["dp", 0], ["1", 0], ["if", 0], ["sport", 0], ["v", 0], ["curr", 0], ["last", 0], ["sport", 0], ["max", 0], ["dp", 0], ["last", 0], ["sport", 0], ["1", 0], ["prev", 0], ["last", 0], ["sport", 0], ["1", 0], ["dp", 0], ["last", 0], ["contest", 0], ["if", 0], ["contest", 0], ["v", 0], ["curr", 0], ["last", 0], ["contest", 0], ["max", 0], ["dp", 0], ["last", 0], ["contest", 0], ["1", 0], ["prev", 0], ["last", 0], ["contest", 0], ["1", 0], ["dp", 0], ["last", 0], ["sport", 0], ["prev", 0], ["dp", 0], ["dp", 0], ["curr", 0], ["print", 0], ["dp", 0], ["contest", 0], ["v", 0], ["sport", 0], ["v", 0], ["print", 0], ["n", 0], ["max", 0], ["dp", 0], ["starting", 0], ["point", 0], ["def", 0], ["starting", 0], ["point", 0], ["max", 0], ["100", 0], ["n", 0], ["int", 0], ["input", 0], ["num", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["num", 0], ["append", 0], ["0", 0], ["0", 0], ["0", 0], ["line", 0], ["str", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["line", 0], ["i", 0], ["0", 0], ["num", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["min", 0], ["num", 0], ["i", 0], ["num", 0], ["i", 0], ["1", 0], ["1", 0], ["max", 0], ["num", 0], ["i", 0], ["1", 0], ["2", 0], ["max", 0], ["elif", 0], ["line", 0], ["i", 0], ["1", 0], ["num", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["min", 0], ["num", 0], ["i", 0], ["num", 0], ["i", 0], ["1", 0], ["1", 0], ["min", 0], ["num", 0], ["i", 0], ["0", 0], ["num", 0], ["i", 0], ["2", 0], ["num", 0], ["i", 0], ["1", 0], ["2", 0], ["max", 0], ["elif", 0], ["line", 0], ["i", 0], ["2", 0], ["num", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["min", 0], ["num", 0], ["i", 0], ["num", 0], ["i", 0], ["1", 0], ["1", 0], ["max", 0], ["num", 0], ["i", 0], ["1", 0], ["2", 0], ["min", 0], ["num", 0], ["i", 0], ["0", 0], ["num", 0], ["i", 0], ["1", 0], ["elif", 0], ["line", 0], ["i", 0], ["3", 0], ["num", 0], ["i", 0], ["1", 0], ["0", 0], ["1", 0], ["min", 0], ["num", 0], ["i", 0], ["num", 0], ["i", 0], ["1", 0], ["1", 0], ["min", 0], ["num", 0], ["i", 0], ["0", 0], ["num", 0], ["i", 0], ["2", 0], ["num", 0], ["i", 0], ["1", 0], ["2", 0], ["min", 0], ["num", 0], ["i", 0], ["0", 0], ["num", 0], ["i", 0], ["1", 0], ["print", 0], ["min", 0], ["num", 0], ["n", 0], ["starting", 0], ["point", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nA test for allergy is conducted over the course of several days, and consists of exposing you to different substances (so called allergens). The goal is to decide exactly which of the allergens you are allergic to. Each allergen has a live duration $D$ measured in whole days, indicating exactly how many days you will suffer from an allergic reaction if you are allergic to that particular substance. An allergic reaction starts to show almost immediately after you have been exposed to an allergen which you are allergic to. The test scheme has two action points per day:\n - At 8 o’clock each morning, at most one of the allergens is applied to your body.\n - At 8 o’clock each evening, you are examined for allergic reactions.\n\nThus an allergen with live duration $D$ will affect exactly $D$ allergic reaction examinations.\n\nOf course, if you have two or more active allergens in your body at the time of an observed reaction, you cannot tell from that information only, which of the substances you are allergic to.\n\nYou want to find the shortest possible test scheme given the durations of the allergens you want to test. Furthermore, to allow simple large scale application the test scheme must be non-adaptive, i.e. the scheme should be fixed in advance. Thus you may not choose when to apply an allergen based on the outcome of previous allergic reaction examinations.\n\n-----Input-----\nThe first line of the input contains a single integer $k$ ($1 \\leq k \\leq 20$) specifying the number of allergens being tested for. Then follow $k$ lines each containing an integer $D$ ($1 \\leq D \\leq 7$) specifying the live duration of each allergen.\n\n-----Output-----\nThe number of days of the shortest conclusive non-adaptive test scheme.\n\nA scheme ends the morning when you no longer have active allergens in your body, thus a test scheme for a single allergen with live duration $D$ takes $D$ days.\n\n-----Examples-----\nSample Input:\n3\n2\n2\n2\nSample Output:\n5\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9390"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9390", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 0], ["test", 0], ["for", 0], ["allergy", 0], ["is", 0], ["conducted", 0], ["over", 0], ["the", 0], ["course", 0], ["of", 0], ["several", 0], ["days", 0], ["and", 0], ["consists", 0], ["of", 0], ["exposing", 0], ["you", 0], ["to", 0], ["different", 0], ["substances", 0], ["so", 0], ["called", 0], ["allergens", 0], ["the", 0], ["goal", 0], ["is", 0], ["to", 0], ["decide", 0], ["exactly", 0], ["which", 0], ["of", 0], ["the", 0], ["allergens", 0], ["you", 0], ["are", 0], ["allergic", 0], ["to", 0], ["each", 0], ["allergen", 0], ["has", 0], ["a", 0], ["live", 0], ["duration", 0], ["d", 0], ["measured", 0], ["in", 0], ["whole", 0], ["days", 0], ["indicating", 0], ["exactly", 0], ["how", 0], ["many", 0], ["days", 0], ["you", 0], ["will", 0], ["suffer", 0], ["from", 0], ["an", 0], ["allergic", 0], ["reaction", 0], ["if", 0], ["you", 0], ["are", 0], ["allergic", 0], ["to", 0], ["that", 0], ["particular", 0], ["substance", 0], ["an", 0], ["allergic", 0], ["reaction", 0], ["starts", 0], ["to", 0], ["show", 0], ["almost", 0], ["immediately", 0], ["after", 0], ["you", 0], ["have", 0], ["been", 0], ["exposed", 0], ["to", 0], ["an", 0], ["allergen", 0], ["which", 0], ["you", 0], ["are", 0], ["allergic", 0], ["to", 0], ["the", 0], ["test", 0], ["scheme", 0], ["has", 0], ["two", 0], ["action", 0], ["points", 0], ["per", 0], ["day", 0], ["at", 2], ["8", 2], ["o’clock", 2], ["each", 2], ["morning", 1], ["at", 1], ["most", 1], ["one", 1], ["of", 1], ["the", 1], ["allergens", 1], ["is", 1], ["applied", 1], ["to", 1], ["your", 1], ["body", 1], ["at", 2], ["8", 2], ["o’clock", 2], ["each", 2], ["evening", 2], ["you", 2], ["are", 2], ["examined", 2], ["for", 2], ["allergic", 2], ["reactions", 2], ["thus", 2], ["an", 2], ["allergen", 1], ["with", 1], ["live", 1], ["duration", 1], ["d", 1], ["will", 1], ["affect", 1], ["exactly", 1], ["d", 1], ["allergic", 1], ["reaction", 1], ["examinations", 1], ["of", 1], ["course", 1], ["if", 1], ["you", 1], ["have", 1], ["two", 1], ["or", 1], ["more", 1], ["active", 1], ["allergens", 1], ["in", 1], ["your", 1], ["body", 1], ["at", 1], ["the", 1], ["time", 1], ["of", 1], ["an", 1], ["observed", 1], ["reaction", 1], ["you", 1], ["cannot", 1], ["tell", 1], ["from", 1], ["that", 1], ["information", 1], ["only", 1], ["which", 1], ["of", 1], ["the", 1], ["substances", 1], ["you", 1], ["are", 1], ["allergic", 1], ["to", 1], ["you", 1], ["want", 1], ["to", 1], ["find", 1], ["the", 1], ["shortest", 1], ["possible", 1], ["test", 1], ["scheme", 1], ["given", 1], ["the", 1], ["durations", 1], ["of", 1], ["the", 1], ["allergens", 1], ["you", 1], ["want", 1], ["to", 1], ["test", 1], ["furthermore", 1], ["to", 1], ["allow", 1], ["simple", 1], ["large", 1], ["scale", 1], ["application", 1], ["the", 1], ["test", 1], ["scheme", 1], ["must", 1], ["be", 1], ["non", 1], ["adaptive", 1], ["i", 1], ["e", 1], ["the", 1], ["scheme", 1], ["should", 1], ["be", 1], ["fixed", 1], ["in", 1], ["advance", 1], ["thus", 1], ["you", 1], ["may", 1], ["not", 1], ["choose", 1], ["when", 1], ["to", 1], ["apply", 0], ["an", 0], ["allergen", 0], ["based", 0], ["on", 0], ["the", 0], ["outcome", 0], ["of", 0], ["previous", 0], ["allergic", 0], ["reaction", 0], ["examinations", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["the", 1], ["input", 1], ["contains", 1], ["a", 1], ["single", 1], ["integer", 1], ["k", 1], ["1", 1], ["leq", 1], ["k", 1], ["leq", 1], ["20", 2], ["specifying", 2], ["the", 2], ["number", 2], ["of", 2], ["allergens", 2], ["being", 2], ["tested", 1], ["for", 1], ["then", 1], ["follow", 1], ["k", 1], ["lines", 1], ["each", 1], ["containing", 1], ["an", 1], ["integer", 1], ["d", 1], ["1", 0], ["leq", 0], ["d", 0], ["leq", 0], ["7", 0], ["specifying", 0], ["the", 0], ["live", 0], ["duration", 0], ["of", 0], ["each", 0], ["allergen", 0], ["output", 0], ["the", 1], ["number", 1], ["of", 1], ["days", 1], ["of", 1], ["the", 1], ["shortest", 1], ["conclusive", 1], ["non", 1], ["adaptive", 1], ["test", 1], ["scheme", 1], ["a", 2], ["scheme", 2], ["ends", 2], ["the", 2], ["morning", 2], ["when", 2], ["you", 2], ["no", 2], ["longer", 2], ["have", 2], ["active", 2], ["allergens", 2], ["in", 2], ["your", 2], ["body", 2], ["thus", 2], ["a", 2], ["test", 2], ["scheme", 0], ["for", 0], ["a", 0], ["single", 0], ["allergen", 0], ["with", 0], ["live", 0], ["duration", 0], ["d", 0], ["takes", 0], ["d", 0], ["days", 0], ["examples", 0], ["sample", 0], ["input", 0], ["3", 0], ["2", 0], ["2", 0], ["2", 0], ["sample", 0], ["output", 0], ["5", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5645645645645646, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5015015015015015, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6492753623188405, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6434782608695652, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5645645645645646, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5015015015015015, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6492753623188405, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6434782608695652, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nPatrick likes to play baseball, but sometimes he will spend so many hours hitting home runs that his mind starts to get foggy! Patrick is sure that his scores across $n$ sessions follow the identity permutation (ie. in the first game he scores $1$ point, in the second game he scores $2$ points and so on). However, when he checks back to his record, he sees that all the numbers are mixed up! \n\nDefine a special exchange as the following: choose any subarray of the scores and permute elements such that no element of subarray gets to the same position as it was before the exchange. For example, performing a special exchange on $[1,2,3]$ can yield $[3,1,2]$ but it cannot yield $[3,2,1]$ since the $2$ is in the same position. \n\nGiven a permutation of $n$ integers, please help Patrick find the minimum number of special exchanges needed to make the permutation sorted! It can be proved that under given constraints this number doesn't exceed $10^{18}$.\n\nAn array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). Description of the test cases follows.\n\nThe first line of each test case contains integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$)  — the length of the given permutation.\n\nThe second line of each test case contains $n$ integers $a_{1},a_{2},...,a_{n}$ ($1 \\leq a_{i} \\leq n$)  — the initial permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, output one integer: the minimum number of special exchanges needed to sort the permutation.\n\n\n-----Example-----\nInput\n2\n5\n1 2 3 4 5\n7\n3 2 4 5 1 6 7\n\nOutput\n0\n2\n\n\n\n-----Note-----\n\nIn the first permutation, it is already sorted so no exchanges are needed.\n\nIt can be shown that you need at least $2$ exchanges to sort the second permutation.\n\n$[3, 2, 4, 5, 1, 6, 7]$\n\nPerform special exchange on range ($1, 5$)\n\n$[4, 1, 2, 3, 5, 6, 7]$\n\nPerform special exchange on range ($1, 4$)\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from math import *\n\ndef r1(t):\n\treturn t(input())\n\ndef r2(t):\n\treturn [t(i) for i in input().split()]\n\nfor _ in range(r1(int)):\n\tn = r1(int)\n\ta = r2(int)\n\tg = True\n\tfor i in range(n):\n\t\tif a[i] != i + 1:\n\t\t\tg = False\n\t\t\tbreak\n\tif g:\n\t\tprint(0)\n\t\tcontinue\n\n\tg = True\n\tc = 0\n\tp = False\n\tfor i in range(n):\n\t\tif a[i] != i + 1:\n\t\t\tif p == False:\n\t\t\t\tc += 1\n\t\t\t\tp = True\n\t\telse:\n\t\t\tp = False\n\tprint(min(c, 2))\n", "from collections import defaultdict as dd\nfrom collections import deque\nimport bisect\nimport heapq\n\ndef ri():\n\treturn int(input())\n\ndef rl():\n\treturn list(map(int, input().split()))\n\n\ndef solve():\n\tn = ri()\n\tA = rl()\n\n\tfirst_wrong = -1\n\tfirst_break = -1\n\tskip = False\n\n\tfor i, a in enumerate(A):\n\t\tif i + 1 == a:\n\t\t\tif first_wrong != -1 and first_break == -1:\n\t\t\t\tfirst_break = i\n\t\telse:\n\t\t\tif first_wrong == -1:\n\t\t\t\tfirst_wrong = i\n\t\t\telif first_break != -1:\n\t\t\t\tskip = True\n\n\tif first_wrong == -1:\n\t\tprint(0)\n\telif not skip:\n\t\tprint(1)\n\telse:\n\t\tprint(2)\n\n\n\n\n\n\nmode = 'T'\n\nif mode == 'T':\n\tt = ri()\n\tfor i in range(t):\n\t\tsolve()\nelse:\n\tsolve()\n", "t=int(input())\nfor _ in range(t):\n\tn=int(input())\n\ta=list(map(int,input().split()))\n\twrongcount=0\n\tfor i in range(n):\n\t\tif i>0 and a[i-1]==i and a[i]!=i+1 and wrongcount==1:\n\t\t\twrongcount=2\n\t\tif a[i]!=i+1 and wrongcount==0:\n\t\t\twrongcount=1\n\tprint(wrongcount)\n", "\nT = int(input())\n\n\nfor i in range(T):\n\tn = int(input())\n\t#n,m = map(int, input().split())\n\t#a,b = map(int, input().split())\n\ta = list(map(int,input().split()))\n\t#a = list(input())\n\tif a == sorted(a):\n\t\tprint(0)\n\t\tcontinue\n\t\n\tstrt = True\n\tcount = 0\n\tfor i in range(n):\n\t\tif strt and i+1 != a[i]:\n\t\t\tstrt = False\n\t\tif not strt and i+1 == a[i]:\n\t\t\tcount+=1\n\t\n\tend = True\n\tfor i in range(n-1,-1,-1):\n\t\tif end and i+1 == a[i]:\n\t\t\tcount-=1\n\t\telse:\n\t\t\tbreak\n\t\n\tif count==0:\n\t\tprint(1)\n\telse:\n\t\tprint(2)\n", "def solve():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\ti = 0\n\tans = 0\n\twhile i < n:\n\t\tif a[i] == i + 1:\n\t\t\ti += 1\n\t\t\tcontinue\n\t\tj = i\n\t\twhile j < n and a[j] != j + 1:\n\t\t\tj += 1\n\t\tans += 1\n\t\ti = j\n\tprint(min(ans, 2))\n\nt = int(input())\nfor _ in range(t):\n\tsolve()\n", "tests = int(input())\nfor test in range(tests):\n\tn = int(input())\n\ta = [int(i) for i in input().split()]\n\tl, r = -1, -1\n\tans = 1\n\tfor i in range(n):\n\t\tif r == -1:\n\t\t\tif l == -1:\n\t\t\t\tif a[i] != i + 1:\n\t\t\t\t\tif l == -1:\n\t\t\t\t\t\tl = i\n\t\t\telse:\n\t\t\t\tif a[i] == i + 1:\n\t\t\t\t\tif r == -1:\n\t\t\t\t\t\tr = i - 1\n\t\telse:\n\t\t\tif a[i] != i + 1:\n\t\t\t\tans = 2\n\t\t\t\tbreak\n\tif l == -1:\n\t\tprint(0)\n\telse:\n\t\tprint(ans)\n", "for _ in range(int(input())):\n\tn = int(input())\n\tarr = list([int(x)-1 for x in input().split()])\n\tl = -1\n\tr = -1\n\tfor i in range(n):\n\t\tif arr[i] != i:\n\t\t\tif l == -1:\n\t\t\t\tl = i\n\t\t\tr = i+1\n\tif l == -1:\n\t\tprint(0)\n\t\tcontinue\n\tans = 1\n\tfor i in range(l, r):\n\t\tif arr[i] == i:\n\t\t\tans = 2\n\tprint(ans)\n", "import sys\nimport random\nfrom fractions import Fraction\nfrom math import *\n \ndef input():\n\treturn sys.stdin.readline().strip()\n \ndef iinput():\n\treturn int(input())\n\ndef finput():\n\treturn float(input())\n\ndef tinput():\n\treturn input().split()\n\ndef linput():\n\treturn list(input())\n \ndef rinput():\n\treturn list(map(int, tinput()))\n\ndef fiinput():\n\treturn list(map(float, tinput()))\n \ndef rlinput():\n\treturn list(map(int, input().split()))\ndef trinput():\n\treturn tuple(rinput())\n\ndef srlinput():\n\treturn sorted(list(map(int, input().split())))\n\ndef NOYES(fl):\n\tif fl:\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"YES\")\ndef YESNO(fl):\n\tif fl:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\t\ndef main():  \n\tn = iinput()\n\t#k = iinput() \n\t#m = iinput() \n\t#n = int(sys.stdin.readline().strip()) \n\t#n, k = rinput()\n\t#n, m = rinput()\n\t#m, k = rinput()\n\t#n, k, m = rinput()\n\t#n, m, k = rinput()\n\t#k, n, m = rinput()\n\t#k, m, n = rinput() \n\t#m, k, n = rinput()\n\t#m, n, k = rinput()\n\t#q = srlinput()\n\t#q = linput()\n\tq = rlinput()\n\tw = q.copy()\n\tif q == sorted(w):\n\t\tprint(0)\n\telse:\n\t\tres = 1\n\t\tfor i in range(n):\n\t\t\tif i + 1 == q[i]:\n\t\t\t\tres = 2\n\t\tif res == 1:\n\t\t\tprint(1)\n\t\telse:\n\t\t\tl, r = 0, n - 1\n\t\t\tfor i in range(n):\n\t\t\t\tif i + 1 != q[i]:\n\t\t\t\t\tl = i\n\t\t\t\t\tbreak\n\t\t\tfor i in range(n - 1, l, -1):\n\t\t\t\tif i + 1 != q[i]:\n\t\t\t\t\tr = i\n\t\t\t\t\tbreak\n\t\t\tq = q[l:r + 1]\n\t\t\tn = len(q)\n\t\t\tm = min(q)\n\t\t\tfor i in range(n):\n\t\t\t\tif m + i == q[i]:\n\t\t\t\t\tprint(2)\n\t\t\t\t\treturn 0\n\t\t\tprint(1)\n\t\t\t\n\t\n\t\t\n\t\n\nfor i in range(iinput()):\n\tmain()\n", "tt = int(input())\n\nfor loop in range(tt):\n\n\tn = int(input())\n\ta = list(map(int,input().split()))\n\n\tcnt = 0\n\tfor i in range(n):\n\n\t\tif a[i] != i+1 and cnt % 2 == 0:\n\t\t\tcnt += 1\n\t\telif a[i] == i+1 and cnt % 2 == 1:\n\t\t\tcnt += 1\n\n\tif cnt == 0:\n\t\tprint(0)\n\telif cnt <= 2:\n\t\tprint(1)\n\telse:\n\t\tprint(2)\n", "import math\n\nt = int(input())\nfor i in range(t):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tprev = True\n\tnum = 0\n\tfor j in range(n):\n\t\tif prev and a[j] != j+1:\n\t\t\tnum += 1\n\t\t\tprev = False\n\t\telif a[j] == j+1:\n\t\t\tprev = True\n\tif num > 2:\n\t\tprint(2)\n\telse:\n\t\tprint(num)\n"], "id": "id5639"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5639", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["patrick", 0], ["likes", 0], ["to", 0], ["play", 0], ["baseball", 0], ["but", 0], ["sometimes", 0], ["he", 0], ["will", 0], ["spend", 0], ["so", 0], ["many", 0], ["hours", 0], ["hitting", 0], ["home", 0], ["runs", 0], ["that", 0], ["his", 0], ["mind", 0], ["starts", 0], ["to", 0], ["get", 0], ["foggy", 0], ["patrick", 0], ["is", 0], ["sure", 0], ["that", 0], ["his", 0], ["scores", 0], ["across", 0], ["n", 0], ["sessions", 0], ["follow", 0], ["the", 0], ["identity", 0], ["permutation", 0], ["ie", 0], ["in", 0], ["the", 0], ["first", 0], ["game", 0], ["he", 0], ["scores", 0], ["1", 0], ["point", 0], ["in", 0], ["the", 0], ["second", 0], ["game", 0], ["he", 0], ["scores", 0], ["2", 0], ["points", 0], ["and", 0], ["so", 0], ["on", 0], ["however", 0], ["when", 0], ["he", 0], ["checks", 0], ["back", 0], ["to", 0], ["his", 0], ["record", 0], ["he", 0], ["sees", 0], ["that", 0], ["all", 0], ["the", 0], ["numbers", 0], ["are", 0], ["mixed", 0], ["up", 0], ["define", 0], ["a", 0], ["special", 0], ["exchange", 0], ["as", 0], ["the", 0], ["following", 0], ["choose", 0], ["any", 0], ["subarray", 0], ["of", 0], ["the", 0], ["scores", 0], ["and", 0], ["permute", 0], ["elements", 0], ["such", 0], ["that", 0], ["no", 0], ["element", 0], ["of", 0], ["subarray", 0], ["gets", 0], ["to", 0], ["the", 0], ["same", 0], ["position", 0], ["as", 0], ["it", 0], ["was", 0], ["before", 0], ["the", 0], ["exchange", 0], ["for", 0], ["example", 0], ["performing", 0], ["a", 0], ["special", 0], ["exchange", 0], ["on", 0], ["1", 0], ["2", 0], ["3", 0], ["can", 0], ["yield", 0], ["3", 0], ["1", 0], ["2", 0], ["but", 0], ["it", 0], ["cannot", 0], ["yield", 0], ["3", 0], ["2", 0], ["1", 0], ["since", 0], ["the", 0], ["2", 0], ["is", 0], ["in", 0], ["the", 0], ["same", 0], ["position", 0], ["given", 0], ["a", 0], ["permutation", 0], ["of", 0], ["n", 0], ["integers", 0], ["please", 0], ["help", 0], ["patrick", 0], ["find", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["special", 0], ["exchanges", 0], ["needed", 0], ["to", 0], ["make", 0], ["the", 0], ["permutation", 0], ["sorted", 0], ["it", 0], ["can", 0], ["be", 0], ["proved", 0], ["that", 0], ["under", 0], ["given", 0], ["constraints", 0], ["this", 0], ["number", 0], ["doesn", 0], ["t", 0], ["exceed", 0], ["10", 0], ["18", 0], ["an", 0], ["array", 0], ["a", 0], ["is", 0], ["a", 0], ["subarray", 0], ["of", 0], ["an", 0], ["array", 0], ["b", 3], ["if", 3], ["a", 3], ["can", 3], ["be", 0], ["obtained", 0], ["from", 0], ["b", 0], ["by", 0], ["deletion", 0], ["of", 0], ["several", 0], ["possibly", 0], ["zero", 0], ["or", 0], ["all", 0], ["elements", 0], ["from", 0], ["the", 0], ["beginning", 0], ["and", 0], ["several", 0], ["possibly", 0], ["zero", 0], ["or", 0], ["all", 0], ["elements", 0], ["from", 0], ["the", 0], ["end", 0], ["input", 8], ["each", 14], ["test", 14], ["contains", 19], ["multiple", 13], ["test", 31], ["cases", 8], ["the", 9], ["first", 9], ["line", 0], ["contains", 0], ["the", 0], ["number", 0], ["of", 0], ["test", 0], ["cases", 0], ["t", 0], ["1", 0], ["le", 0], ["t", 0], ["le", 0], ["100", 0], ["description", 24], ["of", 24], ["the", 0], ["test", 0], ["cases", 0], ["follows", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["each", 0], ["test", 0], ["case", 0], ["contains", 0], ["integer", 0], ["n", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["2", 0], ["cdot", 0], ["10", 0], ["5", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["given", 0], ["permutation", 0], ["the", 15], ["second", 15], ["line", 3], ["of", 3], ["each", 0], ["test", 0], ["case", 0], ["contains", 0], ["n", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["1", 0], ["leq", 0], ["a", 0], ["i", 0], ["leq", 0], ["n", 0], ["—", 0], ["the", 0], ["initial", 0], ["permutation", 0], ["it", 23], ["is", 23], ["guaranteed", 25], ["that", 4], ["the", 4], ["sum", 4], ["of", 4], ["n", 0], ["over", 0], ["all", 0], ["test", 0], ["cases", 0], ["does", 0], ["not", 0], ["exceed", 0], ["2", 0], ["cdot", 0], ["10", 0], ["5", 0], ["output", 0], ["for", 0], ["each", 0], ["test", 0], ["case", 0], ["output", 0], ["one", 0], ["integer", 0], ["the", 0], ["minimum", 0], ["number", 0], ["of", 0], ["special", 0], ["exchanges", 0], ["needed", 0], ["to", 0], ["sort", 0], ["the", 0], ["permutation", 0], ["example", 0], ["input", 0], ["2", 0], ["5", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["7", 0], ["3", 0], ["2", 0], ["4", 0], ["5", 0], ["1", 0], ["6", 0], ["7", 0], ["output", 0], ["0", 0], ["2", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["permutation", 0], ["it", 0], ["is", 0], ["already", 0], ["sorted", 0], ["so", 0], ["no", 0], ["exchanges", 0], ["are", 0], ["needed", 0], ["it", 0], ["can", 0], ["be", 0], ["shown", 0], ["that", 0], ["you", 0], ["need", 0], ["at", 0], ["least", 0], ["2", 0], ["exchanges", 0], ["to", 0], ["sort", 0], ["the", 0], ["second", 0], ["permutation", 0], ["3", 0], ["2", 0], ["4", 0], ["5", 0], ["1", 0], ["6", 0], ["7", 0], ["perform", 0], ["special", 0], ["exchange", 0], ["on", 0], ["range", 0], ["1", 0], ["5", 0], ["4", 0], ["1", 0], ["2", 0], ["3", 0], ["5", 0], ["6", 0], ["7", 0], ["perform", 0], ["special", 0], ["exchange", 0], ["on", 0], ["range", 0], ["1", 0], ["4", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.06295399515738499, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.009977034561432778, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.2023529411764706, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.041110826939471434, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.03389830508474576, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.008407317729351629, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.15764705882352942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.03911764705882355, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["math", 0], ["import", 0], ["def", 0], ["r1", 0], ["t", 0], ["return", 0], ["t", 0], ["input", 0], ["def", 0], ["r2", 0], ["t", 0], ["return", 0], ["t", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["r1", 0], ["int", 0], ["n", 0], ["r1", 0], ["int", 0], ["a", 0], ["r2", 0], ["int", 0], ["g", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["g", 0], ["false", 0], ["break", 0], ["if", 0], ["g", 0], ["print", 0], ["0", 0], ["continue", 0], ["g", 0], ["true", 0], ["c", 0], ["0", 0], ["p", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["if", 0], ["p", 0], ["false", 0], ["c", 0], ["1", 0], ["p", 0], ["true", 0], ["else", 0], ["p", 0], ["false", 0], ["print", 0], ["min", 0], ["c", 0], ["2", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["import", 0], ["bisect", 0], ["import", 0], ["heapq", 0], ["def", 0], ["ri", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["rl", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["solve", 0], ["n", 0], ["ri", 0], ["a", 0], ["rl", 0], ["first", 0], ["wrong", 0], ["1", 0], ["first", 0], ["break", 0], ["1", 0], ["skip", 0], ["false", 0], ["for", 0], ["i", 0], ["a", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["if", 0], ["i", 0], ["1", 0], ["a", 0], ["if", 0], ["first", 0], ["wrong", 0], ["1", 0], ["and", 0], ["first", 0], ["break", 0], ["1", 0], ["first", 0], ["break", 0], ["i", 0], ["else", 0], ["if", 0], ["first", 0], ["wrong", 0], ["1", 0], ["first", 0], ["wrong", 0], ["i", 0], ["elif", 0], ["first", 0], ["break", 0], ["1", 0], ["skip", 0], ["true", 0], ["if", 0], ["first", 0], ["wrong", 0], ["1", 0], ["print", 0], ["0", 0], ["elif", 0], ["not", 0], ["skip", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["2", 0], ["mode", 0], ["t", 0], ["if", 0], ["mode", 0], ["t", 0], ["t", 0], ["ri", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["solve", 0], ["else", 0], ["solve", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["wrongcount", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["0", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 0], ["i", 0], ["and", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["and", 0], ["wrongcount", 0], ["1", 0], ["wrongcount", 0], ["2", 0], ["if", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["and", 0], ["wrongcount", 0], ["0", 0], ["wrongcount", 0], ["1", 0], ["print", 0], ["wrongcount", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["input", 0], ["if", 0], ["a", 0], ["sorted", 0], ["a", 0], ["print", 0], ["0", 0], ["continue", 0], ["strt", 0], ["true", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["strt", 0], ["and", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["strt", 0], ["false", 0], ["if", 0], ["not", 0], ["strt", 0], ["and", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["count", 0], ["1", 0], ["end", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["end", 0], ["and", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["count", 0], ["1", 0], ["else", 0], ["break", 0], ["if", 0], ["count", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["2", 0], ["def", 0], ["solve", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["0", 0], ["ans", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["continue", 0], ["j", 0], ["i", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["a", 0], ["j", 0], ["j", 0], ["1", 0], ["j", 0], ["1", 0], ["ans", 0], ["1", 0], ["i", 0], ["j", 0], ["print", 0], ["min", 0], ["ans", 0], ["2", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["solve", 0], ["tests", 0], ["int", 0], ["input", 0], ["for", 0], ["test", 0], ["in", 0], ["range", 0], ["tests", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["l", 0], ["r", 0], ["1", 0], ["1", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["r", 0], ["1", 0], ["if", 0], ["l", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["if", 0], ["l", 0], ["1", 0], ["l", 0], ["i", 0], ["else", 0], ["if", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["if", 0], ["r", 0], ["1", 0], ["r", 0], ["i", 0], ["1", 0], ["else", 0], ["if", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["ans", 0], ["2", 0], ["break", 0], ["if", 0], ["l", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["ans", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["i", 0], ["if", 0], ["l", 0], ["1", 0], ["l", 0], ["i", 0], ["r", 0], ["i", 0], ["1", 0], ["if", 0], ["l", 0], ["1", 0], ["print", 0], ["0", 0], ["continue", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["r", 0], ["if", 0], ["arr", 0], ["i", 0], ["i", 0], ["ans", 0], ["2", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["import", 0], ["random", 0], ["from", 0], ["fractions", 0], ["import", 0], ["fraction", 0], ["from", 0], ["math", 0], ["import", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["iinput", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["finput", 0], ["return", 0], ["float", 0], ["input", 0], ["def", 0], ["tinput", 0], ["return", 0], ["input", 0], ["split", 0], ["def", 0], ["linput", 0], ["return", 0], ["list", 0], ["input", 0], ["def", 0], ["rinput", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["tinput", 0], ["def", 0], ["fiinput", 0], ["return", 0], ["list", 0], ["map", 0], ["float", 0], ["tinput", 0], ["def", 0], ["rlinput", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["trinput", 0], ["return", 0], ["tuple", 0], ["rinput", 0], ["def", 0], ["srlinput", 0], ["return", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["noyes", 0], ["fl", 0], ["if", 0], ["fl", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["def", 0], ["yesno", 0], ["fl", 0], ["if", 0], ["fl", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["main", 0], ["n", 0], ["iinput", 0], ["k", 0], ["iinput", 0], ["m", 0], ["iinput", 0], ["n", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["n", 0], ["k", 0], ["rinput", 0], ["n", 0], ["m", 0], ["rinput", 0], ["m", 0], ["k", 0], ["rinput", 0], ["n", 0], ["k", 0], ["m", 0], ["rinput", 0], ["n", 0], ["m", 0], ["k", 0], ["rinput", 0], ["k", 0], ["n", 0], ["m", 0], ["rinput", 0], ["k", 0], ["m", 0], ["n", 0], ["rinput", 0], ["m", 0], ["k", 0], ["n", 0], ["rinput", 0], ["m", 0], ["n", 0], ["k", 0], ["rinput", 0], ["q", 0], ["srlinput", 0], ["q", 0], ["linput", 0], ["q", 0], ["rlinput", 0], ["w", 0], ["q", 0], ["copy", 0], ["if", 0], ["q", 0], ["sorted", 0], ["w", 0], ["print", 0], ["0", 0], ["else", 0], ["res", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["1", 0], ["q", 0], ["i", 0], ["res", 0], ["2", 0], ["if", 0], ["res", 0], ["1", 0], ["print", 0], ["1", 0], ["else", 0], ["l", 0], ["r", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["1", 0], ["q", 0], ["i", 0], ["l", 0], ["i", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["l", 0], ["1", 0], ["if", 0], ["i", 0], ["1", 0], ["q", 0], ["i", 0], ["r", 0], ["i", 0], ["break", 0], ["q", 0], ["q", 0], ["l", 0], ["r", 0], ["1", 0], ["n", 0], ["len", 0], ["q", 0], ["m", 0], ["min", 0], ["q", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["m", 0], ["i", 0], ["q", 0], ["i", 0], ["print", 0], ["2", 0], ["return", 0], ["0", 0], ["print", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["iinput", 0], ["main", 0], ["tt", 0], ["int", 0], ["input", 0], ["for", 0], ["loop", 0], ["in", 0], ["range", 0], ["tt", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["and", 0], ["cnt", 0], ["2", 0], ["0", 0], ["cnt", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["and", 0], ["cnt", 0], ["2", 0], ["1", 0], ["cnt", 0], ["1", 0], ["if", 0], ["cnt", 0], ["0", 0], ["print", 0], ["0", 0], ["elif", 0], ["cnt", 0], ["2", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["2", 0], ["import", 0], ["math", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["prev", 0], ["true", 0], ["num", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["prev", 0], ["and", 0], ["a", 0], ["j", 0], ["j", 0], ["1", 0], ["num", 0], ["1", 0], ["prev", 0], ["false", 0], ["elif", 0], ["a", 0], ["j", 0], ["j", 0], ["1", 0], ["prev", 0], ["true", 0], ["if", 0], ["num", 0], ["2", 0], ["print", 0], ["2", 0], ["else", 0], ["print", 0], ["num", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nAs an employee of the world’s most respected political polling corporation, you must take complex, real-world issues and simplify them down to a few numbers. It isn’t always easy. A big election is coming up and, at the request of Candidate X, you have just finished polling $n$ people. You have gathered three pieces of information from each person, with the values for the $i^\\text {th}$ person recorded as:\n - $a_ i$ – the number of digits of $\\pi $ they have memorized\n - $b_ i$ – the number of hairs on their head\n - $c_ i$ – whether they will vote for Candidate X\n\nUnfortunately, you are beginning to wonder if these are really the most relevant questions to ask. In fact, you cannot see any correlation between $a$, $b$, and $c$ in the data. Of course, you cannot just contradict your customer – that is a good way to lose your job!\n\nPerhaps the answer is to find some weighting formula to make the results look meaningful. You will pick two real values $S$ and $T$, and sort the poll results $(a_ i, b_ i, c_ i)$ by the measure $a_ i \\cdot S + b_ i \\cdot T$. The sort will look best if the results having $c_ i$ true are clustered as close to each other as possible. More precisely, if $j$ and $k$ are the indices of the first and last results with $c_ i$ true, you want to minimize the cluster size which is $k-j+1$. Note that some choices of $S$ and $T$ will result in ties among the $(a_ i,b_ i,c_ i)$ triples. When this happens, you should assume the worst possible ordering occurs (that which maximizes the cluster size for this $(S, T)$ pair).\n\n-----Input-----\nThe input starts with a line containing $n$ ($1 \\leq n \\leq 250000$), which is the number of people polled. This is followed by one line for each person polled. Each of those lines contains integers $a_ i$ ($0 \\leq a_ i \\leq 2000000$), $b_ i$ ($0 \\leq b_ i \\leq 2000000$), and $c_ i$, where $c_ i$ is $1$ if the person will vote for Candidate X and $0$ otherwise. The input is guaranteed to contain at least one person who will vote for Candidate X.\n\n-----Output-----\nDisplay the smallest possible cluster size over all possible $(S, T)$ pairs.\n\n-----Examples-----\nSample Input 1:\n6\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0\nSample Output 1:\n4\n\nSample Input 2:\n10\n6 1 1\n0 2 0\n2 1 1\n6 1 1\n8 2 0\n4 4 0\n4 0 0\n2 3 1\n6 1 0\n6 3 1\nSample Output 2:\n8\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7889"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7889", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["as", 0], ["an", 0], ["employee", 0], ["of", 0], ["the", 0], ["world’s", 0], ["most", 0], ["respected", 0], ["political", 0], ["polling", 0], ["corporation", 0], ["you", 0], ["must", 0], ["take", 0], ["complex", 0], ["real", 0], ["world", 0], ["issues", 0], ["and", 0], ["simplify", 0], ["them", 0], ["down", 0], ["to", 0], ["a", 0], ["few", 0], ["numbers", 0], ["it", 0], ["isn’t", 0], ["always", 0], ["easy", 0], ["a", 0], ["big", 0], ["election", 0], ["is", 0], ["coming", 0], ["up", 0], ["and", 0], ["at", 0], ["the", 0], ["request", 0], ["of", 0], ["candidate", 0], ["x", 0], ["you", 0], ["have", 0], ["just", 0], ["finished", 0], ["polling", 0], ["n", 0], ["people", 0], ["you", 0], ["have", 0], ["gathered", 0], ["three", 0], ["pieces", 0], ["of", 0], ["information", 0], ["from", 0], ["each", 0], ["person", 0], ["with", 0], ["the", 0], ["values", 0], ["for", 0], ["the", 0], ["i", 0], ["text", 0], ["th", 0], ["person", 0], ["recorded", 0], ["as", 0], ["a", 0], ["i", 0], ["–", 0], ["the", 0], ["number", 0], ["of", 0], ["digits", 0], ["of", 0], ["pi", 0], ["they", 0], ["have", 0], ["memorized", 0], ["b", 0], ["i", 0], ["–", 0], ["the", 0], ["number", 0], ["of", 0], ["hairs", 0], ["on", 0], ["their", 0], ["head", 0], ["c", 0], ["i", 0], ["–", 0], ["whether", 0], ["they", 0], ["will", 0], ["vote", 0], ["for", 0], ["candidate", 0], ["x", 0], ["unfortunately", 1], ["you", 1], ["are", 1], ["beginning", 1], ["to", 1], ["wonder", 1], ["if", 1], ["these", 1], ["are", 1], ["really", 1], ["the", 1], ["most", 1], ["relevant", 1], ["questions", 1], ["to", 1], ["ask", 1], ["in", 1], ["fact", 1], ["you", 1], ["cannot", 1], ["see", 1], ["any", 1], ["correlation", 1], ["between", 1], ["a", 1], ["b", 1], ["and", 1], ["c", 1], ["in", 1], ["the", 1], ["data", 1], ["of", 1], ["course", 1], ["you", 1], ["cannot", 1], ["just", 1], ["contradict", 1], ["your", 1], ["customer", 1], ["–", 1], ["that", 1], ["is", 1], ["a", 1], ["good", 1], ["way", 1], ["to", 1], ["lose", 1], ["your", 1], ["job", 1], ["perhaps", 1], ["the", 1], ["answer", 1], ["is", 1], ["to", 1], ["find", 1], ["some", 1], ["weighting", 1], ["formula", 1], ["to", 1], ["make", 1], ["the", 1], ["results", 1], ["look", 1], ["meaningful", 1], ["you", 1], ["will", 1], ["pick", 1], ["two", 1], ["real", 1], ["values", 1], ["s", 1], ["and", 1], ["t", 1], ["and", 1], ["sort", 1], ["the", 1], ["poll", 1], ["results", 1], ["a", 1], ["i", 1], ["b", 1], ["i", 1], ["c", 1], ["i", 1], ["by", 1], ["the", 1], ["measure", 1], ["a", 1], ["i", 1], ["cdot", 1], ["s", 1], ["b", 1], ["i", 1], ["cdot", 1], ["t", 1], ["the", 1], ["sort", 1], ["will", 1], ["look", 1], ["best", 1], ["if", 1], ["the", 1], ["results", 1], ["having", 1], ["c", 1], ["i", 1], ["true", 1], ["are", 1], ["clustered", 1], ["as", 1], ["close", 1], ["to", 1], ["each", 1], ["other", 1], ["as", 1], ["possible", 1], ["more", 1], ["precisely", 1], ["if", 1], ["j", 1], ["and", 1], ["k", 1], ["are", 1], ["the", 1], ["indices", 1], ["of", 1], ["the", 1], ["first", 1], ["and", 1], ["last", 1], ["results", 1], ["with", 1], ["c", 1], ["i", 1], ["true", 1], ["you", 1], ["want", 1], ["to", 1], ["minimize", 1], ["the", 1], ["cluster", 1], ["size", 1], ["which", 1], ["is", 1], ["k", 1], ["j", 1], ["1", 1], ["note", 1], ["that", 1], ["some", 1], ["choices", 1], ["of", 1], ["s", 1], ["and", 1], ["t", 1], ["will", 1], ["result", 1], ["in", 1], ["ties", 1], ["among", 1], ["the", 1], ["a", 1], ["i", 1], ["b", 1], ["i", 1], ["c", 1], ["i", 1], ["triples", 1], ["when", 1], ["this", 1], ["happens", 1], ["you", 1], ["should", 1], ["assume", 1], ["the", 1], ["worst", 1], ["possible", 1], ["ordering", 1], ["occurs", 0], ["that", 0], ["which", 0], ["maximizes", 0], ["the", 0], ["cluster", 0], ["size", 0], ["for", 0], ["this", 0], ["s", 0], ["t", 0], ["pair", 0], ["input", 0], ["the", 0], ["input", 0], ["starts", 0], ["with", 0], ["a", 0], ["line", 0], ["containing", 0], ["n", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["250000", 0], ["which", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["people", 1], ["polled", 1], ["this", 1], ["is", 1], ["followed", 1], ["by", 1], ["one", 1], ["line", 1], ["for", 1], ["each", 1], ["person", 1], ["polled", 1], ["each", 1], ["of", 0], ["those", 0], ["lines", 0], ["contains", 0], ["integers", 0], ["a", 0], ["i", 0], ["0", 0], ["leq", 0], ["a", 0], ["i", 0], ["leq", 0], ["2000000", 0], ["b", 0], ["i", 0], ["0", 0], ["leq", 0], ["b", 0], ["i", 0], ["leq", 0], ["2000000", 0], ["and", 1], ["c", 1], ["i", 1], ["where", 1], ["c", 1], ["i", 1], ["is", 1], ["1", 1], ["if", 1], ["the", 1], ["person", 1], ["will", 1], ["vote", 1], ["for", 1], ["candidate", 1], ["x", 1], ["and", 1], ["0", 1], ["otherwise", 1], ["the", 1], ["input", 1], ["is", 1], ["guaranteed", 1], ["to", 0], ["contain", 0], ["at", 0], ["least", 0], ["one", 0], ["person", 0], ["who", 0], ["will", 0], ["vote", 0], ["for", 0], ["candidate", 0], ["x", 0], ["output", 0], ["display", 0], ["the", 0], ["smallest", 0], ["possible", 0], ["cluster", 0], ["size", 0], ["over", 0], ["all", 0], ["possible", 0], ["s", 0], ["t", 0], ["pairs", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["6", 0], ["0", 0], ["10", 0], ["0", 0], ["10", 0], ["0", 0], ["1", 0], ["12", 0], ["8", 0], ["1", 0], ["5", 0], ["5", 0], ["0", 0], ["11", 0], ["2", 0], ["1", 0], ["11", 0], ["3", 0], ["0", 0], ["sample", 0], ["output", 0], ["1", 0], ["4", 0], ["sample", 0], ["input", 0], ["2", 0], ["10", 0], ["6", 0], ["1", 0], ["1", 0], ["0", 0], ["2", 0], ["0", 0], ["2", 0], ["1", 0], ["1", 0], ["6", 0], ["1", 0], ["1", 0], ["8", 0], ["2", 0], ["0", 0], ["4", 0], ["4", 0], ["0", 0], ["4", 0], ["0", 0], ["0", 0], ["2", 0], ["3", 0], ["1", 0], ["6", 0], ["1", 0], ["0", 0], ["6", 0], ["3", 0], ["1", 0], ["sample", 0], ["output", 0], ["2", 0], ["8", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4781659388646288, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4781659388646288, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5425531914893617, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5425531914893617, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4781659388646288, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4781659388646288, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5425531914893617, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5425531914893617, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nA unicyclic graph is a graph with exactly one cycle. A spanning subgraph of a graph $G$ is a subgraph that has one component and includes all the vertices of $G$. Given a simple graph $G$, count the number of spanning unicyclic subgraphs. The illustration below shows the visualization of Sample Input/Output $1$.\n\n-----Input-----\nThe first line of the input contains two integers, $V$ and $E$, representing the number of vertices and edges of the graph $G$ respectively. ($1 \\leq V \\leq 17, 0 \\leq E \\leq V(V-1)/2$.)\n\nThe following $E$ lines each contains two integers $A_ i$ and $B_ i$, representing an edge $(A_ i, B_ i)$. It is guaranteed that $1 \\leq A_ i < B_ i \\leq V$ and as the graph is simple, no two pairs represent the same edge.\n\n-----Output-----\nOutput one integer, representing the number of spanning unicylic subgraphs. As the number can be rather big, output it modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input:\n4 5\n1 2\n1 3\n2 3\n1 4\n2 4\nSample Output:\n5\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5246"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5246", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 1], ["unicyclic", 1], ["graph", 1], ["is", 1], ["a", 1], ["graph", 1], ["with", 1], ["exactly", 1], ["one", 1], ["cycle", 1], ["a", 1], ["spanning", 1], ["subgraph", 1], ["of", 1], ["a", 1], ["graph", 1], ["g", 1], ["is", 1], ["a", 1], ["subgraph", 1], ["that", 1], ["has", 1], ["one", 1], ["component", 1], ["and", 1], ["includes", 1], ["all", 1], ["the", 1], ["vertices", 1], ["of", 1], ["g", 1], ["given", 1], ["a", 1], ["simple", 1], ["graph", 1], ["g", 1], ["count", 1], ["the", 1], ["number", 1], ["of", 1], ["spanning", 1], ["unicyclic", 1], ["subgraphs", 0], ["the", 0], ["illustration", 0], ["below", 0], ["shows", 0], ["the", 0], ["visualization", 0], ["of", 0], ["sample", 0], ["input", 0], ["output", 0], ["1", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["two", 2], ["integers", 0], ["v", 0], ["and", 0], ["e", 0], ["representing", 0], ["the", 0], ["number", 0], ["of", 0], ["vertices", 0], ["and", 0], ["edges", 0], ["of", 0], ["the", 0], ["graph", 0], ["g", 0], ["respectively", 0], ["1", 0], ["leq", 0], ["v", 0], ["leq", 0], ["17", 0], ["0", 0], ["leq", 0], ["e", 0], ["leq", 0], ["v", 0], ["v", 0], ["1", 0], ["2", 0], ["the", 1], ["following", 1], ["e", 1], ["lines", 1], ["each", 1], ["contains", 1], ["two", 1], ["integers", 1], ["a", 1], ["i", 1], ["and", 1], ["b", 1], ["i", 1], ["representing", 1], ["an", 1], ["edge", 1], ["a", 1], ["i", 1], ["b", 1], ["i", 1], ["it", 1], ["is", 1], ["guaranteed", 1], ["that", 1], ["1", 1], ["leq", 1], ["a", 1], ["i", 1], ["b", 1], ["i", 1], ["leq", 1], ["v", 1], ["and", 1], ["as", 1], ["the", 0], ["graph", 0], ["is", 0], ["simple", 0], ["no", 0], ["two", 0], ["pairs", 0], ["represent", 0], ["the", 0], ["same", 0], ["edge", 0], ["output", 0], ["output", 1], ["one", 1], ["integer", 1], ["representing", 1], ["the", 1], ["number", 1], ["of", 1], ["spanning", 1], ["unicylic", 1], ["subgraphs", 1], ["as", 1], ["the", 0], ["number", 0], ["can", 0], ["be", 0], ["rather", 0], ["big", 0], ["output", 0], ["it", 0], ["modulo", 0], ["10", 0], ["9", 0], ["7", 0], ["examples", 0], ["sample", 0], ["input", 0], ["4", 0], ["5", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["2", 0], ["3", 0], ["1", 0], ["4", 0], ["2", 0], ["4", 0], ["sample", 0], ["output", 0], ["5", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4943820224719101, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.49157303370786515, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7157894736842105, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6815789473684211, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4943820224719101, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.49157303370786515, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7157894736842105, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6815789473684211, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nConsider an $n \\times m$ checkerboard. On each cell of the checkerboard, place a positive integer. The values in each column of the checkerboard must be in strictly increasing order from top to bottom, and the values in each row of the checkerboard must be in strictly increasing order from left to right.\n\n1\n\n2\n\n3\n\n4\n\n3\n\n4\n\n5\n\n6\n\n5\n\n6\n\n7\n\n8\n\n7\n\n8\n\n9\n\n10\n\nA Magic Checkerboard has an additional constraint. The cells that share only a corner must have numbers of different parity (Even vs Odd). Note that the following checkboard is invalid, because 2 and 4 share only a corner and have the same parity:\n\n1\n\n2\n\n4\n\n6\n\nThe first $4 \\times 4$ example is a valid Magic Checkboard. Given a partially filled magic checkboard, can you fill the remaining locations on the checkboard, so that the sum of all values is as small as possible?\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each input starts with a line with two space-separated integers $n$ and $m$ ($1 \\le n, m \\le 2000$), representing the number of rows ($n$) and the number of columns ($m$) of the checkerboard. Each of the next $n$ lines will contain $m$ space-separated integers $c$ ($0 \\le c \\le 2000$), representing the contents of the checkerboard. Zero is used for cells without numbers that you must fill in. You may use any positive integers to fill in the cells without numbers, so long as you form a valid Magic Checkerboard. You are not limited to numbers $\\le 2000$, and the numbers are not required to be unique.\n\n-----Output-----\nOutput a single integer representing the minimum sum possible by replacing the 0 cells with positive integers to form a valid Magic Checkerboard. Output $-1$ if it is not possible to replace the 0 cells to meet the constraints of a Magic Checkerboard.\n\n-----Examples-----\nSample Input 1:\n4 4\n1 2 3 0\n0 0 5 6\n0 0 7 8\n7 0 0 10\nSample Output 1:\n88\n\nSample Input 2:\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\nSample Output 2:\n-1\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8897"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8897", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["consider", 1], ["an", 1], ["n", 1], ["times", 1], ["m", 1], ["checkerboard", 1], ["on", 1], ["each", 1], ["cell", 1], ["of", 1], ["the", 1], ["checkerboard", 1], ["place", 1], ["a", 1], ["positive", 1], ["integer", 1], ["the", 1], ["values", 1], ["in", 1], ["each", 1], ["column", 1], ["of", 1], ["the", 1], ["checkerboard", 1], ["must", 1], ["be", 1], ["in", 1], ["strictly", 1], ["increasing", 1], ["order", 1], ["from", 1], ["top", 1], ["to", 1], ["bottom", 1], ["and", 1], ["the", 1], ["values", 1], ["in", 1], ["each", 1], ["row", 1], ["of", 1], ["the", 0], ["checkerboard", 0], ["must", 0], ["be", 0], ["in", 0], ["strictly", 0], ["increasing", 0], ["order", 0], ["from", 0], ["left", 0], ["to", 0], ["right", 0], ["1", 110], ["2", 112], ["3", 104], ["4", 90], ["3", 0], ["4", 0], ["5", 0], ["6", 0], ["5", 0], ["6", 0], ["7", 0], ["8", 0], ["7", 0], ["8", 0], ["9", 0], ["10", 0], ["a", 0], ["magic", 0], ["checkerboard", 0], ["has", 0], ["an", 0], ["additional", 0], ["constraint", 0], ["the", 0], ["cells", 0], ["that", 0], ["share", 0], ["only", 0], ["a", 0], ["corner", 0], ["must", 0], ["have", 0], ["numbers", 0], ["of", 0], ["different", 0], ["parity", 0], ["even", 0], ["vs", 0], ["odd", 0], ["note", 0], ["that", 0], ["the", 0], ["following", 0], ["checkboard", 0], ["is", 0], ["invalid", 0], ["because", 0], ["2", 0], ["and", 0], ["4", 0], ["share", 0], ["only", 0], ["a", 0], ["corner", 0], ["and", 0], ["have", 0], ["the", 0], ["same", 0], ["parity", 0], ["1", 0], ["2", 0], ["4", 0], ["6", 0], ["the", 1], ["first", 1], ["4", 1], ["times", 1], ["4", 1], ["example", 1], ["is", 1], ["a", 1], ["valid", 1], ["magic", 1], ["checkboard", 1], ["given", 1], ["a", 1], ["partially", 1], ["filled", 1], ["magic", 1], ["checkboard", 1], ["can", 1], ["you", 1], ["fill", 1], ["the", 1], ["remaining", 1], ["locations", 1], ["on", 1], ["the", 1], ["checkboard", 1], ["so", 0], ["that", 0], ["the", 0], ["sum", 0], ["of", 0], ["all", 0], ["values", 0], ["is", 0], ["as", 0], ["small", 0], ["as", 0], ["possible", 0], ["input", 0], ["each", 52], ["input", 52], ["will", 52], ["consist", 52], ["of", 52], ["a", 52], ["single", 52], ["test", 52], ["case", 52], ["note", 22], ["that", 1], ["your", 1], ["program", 1], ["may", 1], ["be", 1], ["run", 1], ["multiple", 1], ["times", 1], ["on", 1], ["different", 1], ["inputs", 1], ["each", 1], ["input", 1], ["starts", 1], ["with", 1], ["a", 1], ["line", 1], ["with", 1], ["two", 0], ["space", 0], ["separated", 0], ["integers", 1], ["n", 1], ["and", 1], ["m", 0], ["1", 0], ["le", 0], ["n", 0], ["m", 0], ["le", 0], ["2000", 0], ["representing", 1], ["the", 2], ["number", 1], ["of", 1], ["rows", 1], ["n", 1], ["and", 1], ["the", 1], ["number", 1], ["of", 1], ["columns", 1], ["m", 1], ["of", 1], ["the", 1], ["checkerboard", 1], ["each", 1], ["of", 1], ["the", 1], ["next", 1], ["n", 1], ["lines", 0], ["will", 0], ["contain", 0], ["m", 0], ["space", 0], ["separated", 0], ["integers", 0], ["c", 0], ["0", 0], ["le", 0], ["c", 0], ["le", 0], ["2000", 0], ["representing", 1], ["the", 1], ["contents", 1], ["of", 1], ["the", 1], ["checkerboard", 1], ["zero", 1], ["is", 1], ["used", 1], ["for", 1], ["cells", 1], ["without", 1], ["numbers", 1], ["that", 1], ["you", 1], ["must", 1], ["fill", 1], ["in", 1], ["you", 1], ["may", 1], ["use", 1], ["any", 1], ["positive", 1], ["integers", 1], ["to", 1], ["fill", 1], ["in", 1], ["the", 1], ["cells", 1], ["without", 1], ["numbers", 1], ["so", 1], ["long", 1], ["as", 1], ["you", 1], ["form", 0], ["a", 0], ["valid", 0], ["magic", 0], ["checkerboard", 0], ["you", 0], ["are", 0], ["not", 0], ["limited", 0], ["to", 0], ["numbers", 0], ["le", 0], ["2000", 0], ["and", 0], ["the", 0], ["numbers", 0], ["are", 0], ["not", 0], ["required", 0], ["to", 0], ["be", 0], ["unique", 0], ["output", 0], ["output", 1], ["a", 1], ["single", 1], ["integer", 1], ["representing", 1], ["the", 1], ["minimum", 1], ["sum", 1], ["possible", 1], ["by", 1], ["replacing", 1], ["the", 1], ["0", 1], ["cells", 1], ["with", 1], ["positive", 1], ["integers", 1], ["to", 1], ["form", 1], ["a", 1], ["valid", 1], ["magic", 1], ["checkerboard", 1], ["output", 1], ["1", 1], ["if", 1], ["it", 1], ["is", 1], ["not", 1], ["possible", 1], ["to", 1], ["replace", 0], ["the", 0], ["0", 0], ["cells", 0], ["to", 0], ["meet", 0], ["the", 0], ["constraints", 0], ["of", 0], ["a", 0], ["magic", 0], ["checkerboard", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["4", 0], ["1", 0], ["2", 0], ["3", 0], ["0", 0], ["0", 0], ["0", 0], ["5", 0], ["6", 0], ["0", 0], ["0", 0], ["7", 0], ["8", 0], ["7", 0], ["0", 0], ["0", 0], ["10", 0], ["sample", 0], ["output", 0], ["1", 0], ["88", 0], ["sample", 0], ["input", 0], ["2", 0], ["4", 0], ["4", 0], ["1", 0], ["2", 0], ["3", 0], ["0", 0], ["0", 0], ["0", 0], ["5", 0], ["6", 0], ["0", 0], ["4", 0], ["7", 0], ["8", 0], ["7", 0], ["0", 0], ["0", 0], ["10", 0], ["sample", 0], ["output", 0], ["2", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.49473684210526314, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.45725599327573024, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6887755102040817, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6638227843584987, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.45789473684210524, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.45657894736842103, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6632653061224489, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6632653061224489, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are buying lunch at a buffet. A number of different dishes are available, and you can mix and match them to your heart’s desire. Some of the dishes, such as dumplings and roasted potatoes, consist of pieces of roughly equal size, and you can pick an integral number of such pieces (no splitting is allowed). Refer to these as “discrete dishes.” Other dishes, such as tzatziki or mashed potatoes, are fluid and you can pick an arbitrary real-valued amount of them. Refer to this second type as “continuous dishes.”\n\nOf course, you like some of the dishes more than others, but how much you like a dish also depends on how much of it you have already eaten. For instance, even if you generally prefer dumplings to potatoes, you might prefer a potato over a dumpling if you have already eaten ten dumplings. To model this, each dish $i$ has an initial tastiness $t_ i$, and a rate of decay of the tastiness $\\Delta t_ i$. For discrete dishes, the tastiness you experience when eating the $n^{th}$ item of the dish is $t_ i - (n-1)\\Delta t_ i$. For continuous dishes, the tastiness you experience when eating an infinitesimal amount $d x$ grams of the dish after already having eaten $x$ grams is $(t_ i - x \\Delta t_ i) d x$. In other words, the respective total amounts of tastiness you experience when eating $N$ items of a discrete dish or $X$ grams of a continuous dish are as follows:\\begin{align*} \\sum _{n=1}^{N} (t_ i - (n-1)\\Delta t_ i) & & \\text {and} & & \\int _{0}^X (t_ i - x\\Delta t_ i) dx \\end{align*}\n\nFor simplicity, do not take into account that different dishes may or may not go well together, so define the total tastiness that you experience from a meal as the sum of the total tastinesses of the individual dishes in the meal (and the same goes for the weight of a meal – there are no food antiparticles in the buffet!).\n\nYou have spent days of painstaking research determining the numbers $t_ i$ and $\\Delta t_ i$ for each of the dishes in the buffet. All that remains is to compute the maximum possible total tastiness that can be achieved in a meal of weight $w$. Better hurry up, lunch is going to be served soon!\n\n-----Input-----\nThe input consists of a single test case. The first line of input consists of two integers $d$ and $w$ ($1 \\le d \\le {250}$ and $1 \\le w \\le {10000}$), where $d$ is the number of different dishes at the buffet and $w$ is the desired total weight of your meal in grams.\n\nThen follow $d$ lines, the $i^{th}$ of which describes the $i^{th}$ dish. Each dish description is in one of the following two forms:\n - A description of the form “D $w_ i$ $t_ i$ $\\Delta t_ i$” indicates that this is a discrete dish where each item weighs $w_ i$ grams, with initial tastiness $t_ i$ and decay of tastiness $\\Delta t_ i$.\n - A description of the form “C $t_ i$ $\\Delta t_ i$” indicates that this is a continuous dish with initial tastiness $t_ i$ and decay of tastiness $\\Delta t_ i$.\n\nThe numbers $w_ i$, $t_ i$, and $\\Delta t_ i$ are integers satisfying $1 \\le w_ i \\le {10000}$ and $0 \\le t_ i, \\Delta t_ i \\le {10000}$.\n\n-----Output-----\nDisplay the maximum possible total tastiness of a meal of weight $w$ based on the available dishes. Give the answer with a relative or absolute error of at most $10^{-6}$. If it is impossible to make a meal of total weight exactly $w$ based on the available dishes, display impossible.\n\n-----Examples-----\nSample Input 1:\n2 15\nD 4 10 1\nC 6 1\nSample Output 1:\n40.500000000\n\nSample Input 2:\n3 15\nD 4 10 1\nC 6 1\nC 9 3\nSample Output 2:\n49.000000000\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6831"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6831", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["buying", 0], ["lunch", 0], ["at", 0], ["a", 0], ["buffet", 0], ["a", 0], ["number", 0], ["of", 0], ["different", 0], ["dishes", 0], ["are", 0], ["available", 0], ["and", 0], ["you", 0], ["can", 0], ["mix", 0], ["and", 0], ["match", 0], ["them", 0], ["to", 0], ["your", 0], ["heart’s", 0], ["desire", 0], ["some", 0], ["of", 0], ["the", 0], ["dishes", 0], ["such", 0], ["as", 0], ["dumplings", 0], ["and", 0], ["roasted", 0], ["potatoes", 0], ["consist", 0], ["of", 0], ["pieces", 0], ["of", 0], ["roughly", 0], ["equal", 0], ["size", 0], ["and", 0], ["you", 0], ["can", 0], ["pick", 0], ["an", 0], ["integral", 0], ["number", 0], ["of", 0], ["such", 0], ["pieces", 0], ["no", 0], ["splitting", 0], ["is", 0], ["allowed", 0], ["refer", 0], ["to", 0], ["these", 0], ["as", 0], ["“discrete", 0], ["dishes", 0], ["”", 0], ["other", 0], ["dishes", 0], ["such", 0], ["as", 0], ["tzatziki", 0], ["or", 0], ["mashed", 0], ["potatoes", 0], ["are", 0], ["fluid", 0], ["and", 0], ["you", 0], ["can", 0], ["pick", 0], ["an", 0], ["arbitrary", 0], ["real", 0], ["valued", 0], ["amount", 0], ["of", 0], ["them", 0], ["refer", 0], ["to", 0], ["this", 0], ["second", 0], ["type", 0], ["as", 0], ["“continuous", 0], ["dishes", 0], ["”", 0], ["of", 0], ["course", 0], ["you", 0], ["like", 0], ["some", 0], ["of", 0], ["the", 0], ["dishes", 0], ["more", 0], ["than", 0], ["others", 0], ["but", 0], ["how", 0], ["much", 0], ["you", 0], ["like", 0], ["a", 0], ["dish", 0], ["also", 0], ["depends", 0], ["on", 0], ["how", 0], ["much", 0], ["of", 0], ["it", 0], ["you", 0], ["have", 0], ["already", 0], ["eaten", 0], ["for", 0], ["instance", 0], ["even", 0], ["if", 0], ["you", 0], ["generally", 0], ["prefer", 0], ["dumplings", 0], ["to", 0], ["potatoes", 0], ["you", 0], ["might", 0], ["prefer", 0], ["a", 0], ["potato", 0], ["over", 0], ["a", 0], ["dumpling", 0], ["if", 0], ["you", 0], ["have", 0], ["already", 0], ["eaten", 0], ["ten", 0], ["dumplings", 0], ["to", 0], ["model", 0], ["this", 0], ["each", 0], ["dish", 0], ["i", 0], ["has", 0], ["an", 0], ["initial", 0], ["tastiness", 0], ["t", 0], ["i", 0], ["and", 0], ["a", 0], ["rate", 0], ["of", 0], ["decay", 0], ["of", 0], ["the", 0], ["tastiness", 0], ["delta", 0], ["t", 0], ["i", 0], ["for", 0], ["discrete", 0], ["dishes", 0], ["the", 0], ["tastiness", 0], ["you", 0], ["experience", 0], ["when", 0], ["eating", 0], ["the", 0], ["n", 0], ["th", 0], ["item", 0], ["of", 0], ["the", 0], ["dish", 0], ["is", 0], ["t", 0], ["i", 0], ["n", 0], ["1", 0], ["delta", 0], ["t", 0], ["i", 0], ["for", 0], ["continuous", 0], ["dishes", 0], ["the", 0], ["tastiness", 0], ["you", 0], ["experience", 0], ["when", 0], ["eating", 0], ["an", 0], ["infinitesimal", 0], ["amount", 0], ["d", 0], ["x", 0], ["grams", 0], ["of", 0], ["the", 0], ["dish", 0], ["after", 0], ["already", 0], ["having", 0], ["eaten", 0], ["x", 0], ["grams", 0], ["is", 0], ["t", 0], ["i", 0], ["x", 0], ["delta", 0], ["t", 0], ["i", 0], ["d", 0], ["x", 0], ["in", 0], ["other", 0], ["words", 0], ["the", 0], ["respective", 0], ["total", 0], ["amounts", 0], ["of", 0], ["tastiness", 0], ["you", 0], ["experience", 0], ["when", 0], ["eating", 0], ["n", 0], ["items", 0], ["of", 0], ["a", 0], ["discrete", 0], ["dish", 0], ["or", 0], ["x", 0], ["grams", 0], ["of", 0], ["a", 0], ["continuous", 0], ["dish", 0], ["are", 0], ["as", 0], ["follows", 0], ["begin", 0], ["align", 0], ["sum", 0], ["n", 0], ["1", 0], ["n", 0], ["t", 0], ["i", 0], ["n", 0], ["1", 0], ["delta", 0], ["t", 0], ["i", 0], ["text", 0], ["and", 0], ["int", 0], ["0", 0], ["x", 0], ["t", 0], ["i", 0], ["x", 0], ["delta", 0], ["t", 0], ["i", 0], ["dx", 0], ["end", 0], ["align", 0], ["for", 1], ["simplicity", 1], ["do", 1], ["not", 1], ["take", 1], ["into", 1], ["account", 1], ["that", 1], ["different", 1], ["dishes", 1], ["may", 1], ["or", 1], ["may", 1], ["not", 1], ["go", 1], ["well", 1], ["together", 1], ["so", 1], ["define", 1], ["the", 1], ["total", 1], ["tastiness", 1], ["that", 1], ["you", 1], ["experience", 1], ["from", 1], ["a", 1], ["meal", 1], ["as", 1], ["the", 1], ["sum", 1], ["of", 1], ["the", 1], ["total", 1], ["tastinesses", 1], ["of", 1], ["the", 1], ["individual", 1], ["dishes", 1], ["in", 1], ["the", 1], ["meal", 1], ["and", 1], ["the", 1], ["same", 1], ["goes", 1], ["for", 1], ["the", 1], ["weight", 1], ["of", 1], ["a", 1], ["meal", 1], ["–", 1], ["there", 1], ["are", 1], ["no", 1], ["food", 1], ["antiparticles", 1], ["in", 1], ["the", 1], ["buffet", 1], ["you", 1], ["have", 1], ["spent", 1], ["days", 1], ["of", 1], ["painstaking", 1], ["research", 1], ["determining", 1], ["the", 1], ["numbers", 1], ["t", 1], ["i", 1], ["and", 1], ["delta", 1], ["t", 1], ["i", 1], ["for", 1], ["each", 1], ["of", 1], ["the", 1], ["dishes", 1], ["in", 1], ["the", 1], ["buffet", 1], ["all", 1], ["that", 1], ["remains", 1], ["is", 1], ["to", 1], ["compute", 1], ["the", 1], ["maximum", 1], ["possible", 1], ["total", 1], ["tastiness", 1], ["that", 1], ["can", 1], ["be", 1], ["achieved", 1], ["in", 1], ["a", 1], ["meal", 1], ["of", 1], ["weight", 0], ["w", 0], ["better", 0], ["hurry", 0], ["up", 0], ["lunch", 0], ["is", 0], ["going", 0], ["to", 0], ["be", 0], ["served", 0], ["soon", 0], ["input", 0], ["the", 1], ["input", 1], ["consists", 1], ["of", 1], ["a", 1], ["single", 1], ["test", 1], ["case", 1], ["the", 1], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["consists", 0], ["of", 0], ["two", 0], ["integers", 0], ["d", 0], ["and", 0], ["w", 0], ["1", 0], ["le", 0], ["d", 0], ["le", 0], ["250", 0], ["and", 0], ["1", 0], ["le", 0], ["w", 0], ["le", 0], ["10000", 0], ["where", 1], ["d", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["different", 1], ["dishes", 1], ["at", 1], ["the", 1], ["buffet", 1], ["and", 0], ["w", 0], ["is", 0], ["the", 0], ["desired", 0], ["total", 0], ["weight", 0], ["of", 0], ["your", 0], ["meal", 0], ["in", 0], ["grams", 0], ["then", 0], ["follow", 0], ["d", 0], ["lines", 0], ["the", 0], ["i", 0], ["th", 0], ["of", 0], ["which", 0], ["describes", 0], ["the", 0], ["i", 0], ["th", 0], ["dish", 0], ["each", 0], ["dish", 0], ["description", 0], ["is", 0], ["in", 0], ["one", 0], ["of", 0], ["the", 0], ["following", 0], ["two", 0], ["forms", 0], ["a", 1], ["description", 1], ["of", 1], ["the", 1], ["form", 1], ["“d", 1], ["w", 1], ["i", 1], ["t", 1], ["i", 1], ["delta", 1], ["t", 1], ["i", 1], ["”", 1], ["indicates", 1], ["that", 1], ["this", 1], ["is", 1], ["a", 1], ["discrete", 0], ["dish", 0], ["where", 0], ["each", 0], ["item", 0], ["weighs", 0], ["w", 0], ["i", 0], ["grams", 0], ["with", 0], ["initial", 0], ["tastiness", 0], ["t", 0], ["i", 0], ["and", 1], ["decay", 1], ["of", 1], ["tastiness", 1], ["delta", 1], ["t", 1], ["i", 1], ["a", 1], ["description", 1], ["of", 1], ["the", 1], ["form", 1], ["“c", 1], ["t", 1], ["i", 1], ["delta", 1], ["t", 1], ["i", 1], ["”", 1], ["indicates", 1], ["that", 1], ["this", 1], ["is", 1], ["a", 1], ["continuous", 1], ["dish", 1], ["with", 1], ["initial", 1], ["tastiness", 1], ["t", 1], ["i", 1], ["and", 1], ["decay", 1], ["of", 1], ["tastiness", 1], ["delta", 1], ["t", 1], ["i", 1], ["the", 1], ["numbers", 1], ["w", 0], ["i", 0], ["t", 0], ["i", 0], ["and", 0], ["delta", 0], ["t", 0], ["i", 0], ["are", 0], ["integers", 0], ["satisfying", 0], ["1", 0], ["le", 0], ["w", 0], ["i", 0], ["le", 0], ["10000", 0], ["and", 0], ["0", 0], ["le", 0], ["t", 0], ["i", 0], ["delta", 0], ["t", 0], ["i", 0], ["le", 0], ["10000", 0], ["output", 0], ["display", 1], ["the", 1], ["maximum", 1], ["possible", 1], ["total", 1], ["tastiness", 1], ["of", 1], ["a", 1], ["meal", 1], ["of", 1], ["weight", 1], ["w", 1], ["based", 1], ["on", 1], ["the", 1], ["available", 1], ["dishes", 1], ["give", 1], ["the", 1], ["answer", 1], ["with", 1], ["a", 1], ["relative", 1], ["or", 1], ["absolute", 1], ["error", 1], ["of", 1], ["at", 1], ["most", 1], ["10", 1], ["6", 1], ["if", 1], ["it", 1], ["is", 1], ["impossible", 1], ["to", 1], ["make", 1], ["a", 1], ["meal", 1], ["of", 0], ["total", 0], ["weight", 0], ["exactly", 0], ["w", 0], ["based", 0], ["on", 0], ["the", 0], ["available", 0], ["dishes", 0], ["display", 0], ["impossible", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["2", 0], ["15", 0], ["d", 0], ["4", 0], ["10", 0], ["1", 0], ["c", 0], ["6", 0], ["1", 0], ["sample", 0], ["output", 0], ["1", 0], ["40", 0], ["500000000", 0], ["sample", 0], ["input", 0], ["2", 0], ["3", 0], ["15", 0], ["d", 0], ["4", 0], ["10", 0], ["1", 0], ["c", 0], ["6", 0], ["1", 0], ["c", 0], ["9", 0], ["3", 0], ["sample", 0], ["output", 0], ["2", 0], ["49", 0], ["000000000", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3323353293413174, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3323353293413174, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4323529411764706, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4323529411764706, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3323353293413174, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3323353293413174, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4323529411764706, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4323529411764706, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nAll of you are probably very familiar with the problem of finding the longest monotone subsequence. You probably think you know all about it. In order to convince us, solve the problem “opposite” to finding the longest monotone subsequence.\n\nFor given $N$ and $K$, find a sequence that consists of numbers from $1$ to $N$ such that each of the numbers in it appears exactly once and the length of its longest monotone subsequence (ascending or descending) is exactly $K$.\n\n-----Input-----\nThe first line of input contains the integers $N$ and $K$ ($1 \\leq K \\leq N \\leq 10^6$), the length of the sequence and the required length of the longest monotone subsequence.\n\n-----Output-----\nIf the required sequence doesn’t exist, output $-1$ in the first and only line.\n\nIf the required sequence exists, output the required sequence of $N$ numbers in the first and only line. Separate the numbers with a single space.\n\nThe required sequence (if it exists) is not necessarily unique, so you can output any valid sequence.\n\n-----Examples-----\nSample Input 1:\n4 3\nSample Output 1:\n1 4 2 3\n\nSample Input 2:\n5 1\nSample Output 2:\n-1\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5735"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5735", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["all", 1], ["of", 1], ["you", 1], ["are", 1], ["probably", 1], ["very", 1], ["familiar", 1], ["with", 1], ["the", 1], ["problem", 1], ["of", 1], ["finding", 1], ["the", 1], ["longest", 1], ["monotone", 1], ["subsequence", 1], ["you", 1], ["probably", 1], ["think", 1], ["you", 1], ["know", 1], ["all", 1], ["about", 1], ["it", 1], ["in", 1], ["order", 1], ["to", 1], ["convince", 1], ["us", 1], ["solve", 1], ["the", 1], ["problem", 1], ["“opposite”", 1], ["to", 0], ["finding", 0], ["the", 0], ["longest", 0], ["monotone", 0], ["subsequence", 0], ["for", 0], ["given", 0], ["n", 0], ["and", 0], ["k", 0], ["find", 0], ["a", 0], ["sequence", 1], ["that", 1], ["consists", 1], ["of", 1], ["numbers", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["such", 1], ["that", 1], ["each", 1], ["of", 1], ["the", 1], ["numbers", 1], ["in", 1], ["it", 1], ["appears", 1], ["exactly", 1], ["once", 1], ["and", 1], ["the", 1], ["length", 0], ["of", 0], ["its", 0], ["longest", 0], ["monotone", 0], ["subsequence", 0], ["ascending", 0], ["or", 0], ["descending", 0], ["is", 0], ["exactly", 0], ["k", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["the", 0], ["integers", 2], ["n", 0], ["and", 0], ["k", 0], ["1", 0], ["leq", 0], ["k", 0], ["leq", 0], ["n", 0], ["leq", 0], ["10", 0], ["6", 0], ["the", 1], ["length", 1], ["of", 0], ["the", 0], ["sequence", 0], ["and", 0], ["the", 0], ["required", 0], ["length", 0], ["of", 0], ["the", 0], ["longest", 0], ["monotone", 0], ["subsequence", 0], ["output", 0], ["if", 1], ["the", 1], ["required", 1], ["sequence", 1], ["doesn’t", 1], ["exist", 1], ["output", 1], ["1", 1], ["in", 1], ["the", 1], ["first", 1], ["and", 1], ["only", 1], ["line", 1], ["if", 1], ["the", 1], ["required", 1], ["sequence", 1], ["exists", 1], ["output", 1], ["the", 1], ["required", 1], ["sequence", 1], ["of", 1], ["n", 1], ["numbers", 1], ["in", 1], ["the", 1], ["first", 1], ["and", 1], ["only", 1], ["line", 1], ["separate", 1], ["the", 1], ["numbers", 1], ["with", 1], ["a", 1], ["single", 1], ["space", 1], ["the", 1], ["required", 1], ["sequence", 1], ["if", 1], ["it", 1], ["exists", 0], ["is", 0], ["not", 0], ["necessarily", 0], ["unique", 0], ["so", 0], ["you", 0], ["can", 0], ["output", 0], ["any", 0], ["valid", 0], ["sequence", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["3", 0], ["sample", 0], ["output", 0], ["1", 0], ["1", 0], ["4", 0], ["2", 0], ["3", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["1", 0], ["sample", 0], ["output", 0], ["2", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.53125, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5286458333333334, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7892156862745098, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7598039215686274, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.53125, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5286458333333334, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7892156862745098, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7598039215686274, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nSnuke has a grid consisting of three squares numbered 1, 2 and 3.\nIn each square, either 0 or 1 is written. The number written in Square i is s_i.\nSnuke will place a marble on each square that says 1.\nFind the number of squares on which Snuke will place a marble.\n\n-----Constraints-----\n - Each of s_1, s_2 and s_3 is either 1 or 0.\n\n-----Input-----\nInput is given from Standard Input in the following format:\ns_{1}s_{2}s_{3}\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n101\n\n-----Sample Output-----\n2\n\n - A marble will be placed on Square 1 and 3.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["s=input()\ncount=0\nfor i in range(len(s)):\n\tif(s[i]==\"1\"):\n\t\tcount+=1\nprint(count)\n", "a=input()\nprint((a.count('1')))\n", "# -*- coding: utf-8 -*-\n# 整数の入力\ns = input()\nnumber = \"1\"\n\ncount = s.count(number)\nprint(count)\n", "print(input().count(\"1\"))\n", "cnt = 0\nfor s in input():\n\tif int(s) == 1:\n\t\tcnt += 1\nprint(cnt)\n", "import bisect,collections,copy,heapq,itertools,math,string\nimport sys\ndef I():\n\t#1 line 1 int\n\t return int(sys.stdin.readline().rstrip())\ndef LI():\n\t#1 line n int\n\t return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S():\n\t#1 line 1 string\n\t return sys.stdin.readline().rstrip()\ndef LS():\n\t#1 line n strings\n\t return list(sys.stdin.readline().rstrip().split())\n\nx=S()\ncount=0\nfor s in x:\n\tif s == \"1\":\n\t\tcount += 1\n\t\t\nprint(count)\n", "s = input()\nprint(s.count(\"1\"))\n", "s = list(input())\ncount = 0\nfor i in range(0, len(s)):\n\tif s[i] == \"1\":\n\t\tcount += 1\n\nprint(count)\n", "import bisect,collections,copy,heapq,itertools,math,string\nimport sys\ndef I():\n\t# 1 line 1 int\n\treturn int(sys.stdin.readline().rstrip())\ndef LI():\n\t# 1 line n ints\n\treturn list(map(int,sys.stdin.readline().rstrip().split()))\ndef S():\n\t# 1 line 1 string\n\treturn sys.stdin.readline().rstrip()\ndef LS():\n\t# 1 line n strings\n\treturn list(sys.stdin.readline().rstrip().split())\n\nx = S()\n\ncount = 0\nfor s in x:\n\tif s == \"1\":\n\t\tcount += 1\n\nprint(count)\n", "s=input()\nprint(s.count('1'))\n", "s = list(map(int, input()))\ncount = 0\nfor i in range(len(s)):\n\tif s[i] == 1:\n\t\tcount +=1\nprint(count)\n", "a = input()\ncount = 0\nfor i in a:\n\tif i == '1':\n\t\tcount += 1\n\telse:\n\t\tpass\nprint(count)\n", "print(sum([int(ss) for ss in input()]))\n", "s1,s2,s3 = list(map(str, input()))\ncounter = 0\nif s1 == \"1\":\n\tcounter += 1\nif s2 == \"1\":\n\tcounter += 1\nif s3 == \"1\":\n\tcounter += 1\nprint(counter)\n", "m = 0\nfor s in list(input()):\n\tif int(s) == 1:\n\t\tm += 1\nprint(m)\n", "s=input()\nprint(s.count(\"1\"))\n", "S = input()\ncount = 0\n\nif S[0] == '1':\n\tcount += 1\nif S[1] == '1':\n\tcount += 1\nif S[2] == '1':\n\tcount += 1\n\t\nprint(count)\n", "s = input()\n \nprint(s.count(\"1\"))\n", "S =input()\nprint(S.count('1'))\n", "s = list(input())\n\nans = 0\n\nfor i in range(len(s)):\n\tif s[i] == '1':\n\t\tans += 1\nelse:\n\tprint(ans)\n", "print(input().count('1'))\n", "st_list = list(input())\nnu_list = [int(v) for v in st_list]\ncount = 0\nfor i in range(len(nu_list)):\n\tif nu_list[i] == 1:\n\t\tcount += 1\nprint(count)\n", "n = input()\nresult = sum(list(map(int,str(n))))\nprint(result)\n", "s=input()\ncount=0\n\nfor i in range(0,3,1):\n\tif s[i]=='1':\n\t\tcount = count + 1\n\nprint(count) \n", "s=input()\nprint(s.count(\"1\"))\n", "# coding: utf-8\n# Your code here!\n\ncnt_1 = 0\n\nlist_S = input()\n\nfor i in list_S : \n\tif i == \"1\" : \n\t\tcnt_1 += 1\n\t\t\nprint(cnt_1)\n", "s = input()\nprint(s.count('1'))\n", "s = input()\nprint(s.count(\"1\"))\n", "s = input().count('1')\nprint(s)\n", "s = input()\ns_c = s.count(\"1\")\nprint(s_c)\n", "s = input()\ns1 = int(s[0])\ns2 = int(s[1])\ns3 = int(s[2])\nprint(s1+s2+s3)\n", "s = input()\nprint(s.count('1'))\n", "a=str(input())\ncount=0\nfor i in range(3):\n\tif a[i-1]==\"1\":\n\t\tcount+=1\nprint(count)\n", "s = input()\nans = 0\nfor i in range(3):\n\tif s[i] == \"1\":\n\t\tans += 1\n\nprint(ans)\n", "s = input()\nans = 0\nfor i in s:\n\tans += int(i)\nprint(ans)\n", "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\n\ns = list(str(input()))\n\nans = [1 if i == \"1\" else 0 for i in s]\n\nprint((sum(ans)))\n", "print(input().count('1'))\n", "s = input()\n\nprint(s.count(\"1\"))\n", "a=input()\nx=0\nfor i in range(3):\n\tif a[i]==\"1\":\n\t\tx=x+1\nprint(x)\n", "print((input().count('1')))\n", "b = input()\na = str(b)\ni = 0\nif a[0] == '1':\n\ti += 1\nif a[1] == '1':\n\ti += 1\nif a[2] == '1':\n\ti += 1\nprint(i)\n", "print(input().count(\"1\"))\n", "print(input().count('1'))\n", "print(input().count(\"1\"))\n", "s = list(map(int,input()))\ncount = 0\n\nfor n in s:\n\tif n == 1:\n\t\tcount+=1\n\t\t\nprint(count)\n", "print(input().count(\"1\"))\n", "s = input()\na, b, c = int(s[0]), int(s[1]), int(s[2])\ncount = 0\nif a == 1:\n\tcount+=1\nif b == 1:\n\tcount+=1\nif c == 1:\n\tcount+=1\nprint(count)\n", "#第2問　ABC081A\nnumber = list(map(int,input()))\na = 0\nfor i in number:\n\tif i == 1:\n\t\ta = a+1\nprint(a)\n", "s = input()\n\nif s == '111':\n\tprint(3)\nelif s == '110' or s == '101' or s == '011':\n\tprint(2)\nelif s == '100' or s == '010' or s == '001':\n\tprint(1)\nelse:\n\tprint(0)\n", "print(input().count('1'))\n", "n = input()\nprint(n.count(\"1\"))\n", "s = str(input())\nprint(s.count('1'))\n", "a=input()\ncount=0\n\nfor i in range(3):\n\tif a[i]=='1':\n\t\tcount+=1\n\nprint(count)\n", "print(input().count('1'))\n", "print(input().count(\"1\"))\n", "getints = lambda: list(map(int, input().split()))\ns = input()\nans = 0\nfor c in s:\n\tif c == '1':\n\t\tans += 1\nprint(ans)\n", "s = map(int, list(input()))\nprint(sum(s))\n", "s = input()\nprint(s.count('1'))\n", "print(input().count('1'))\n", "a = int(input())\n\ncount = 0\n\n# print(int(a/100))\nif int(a / 100) == 1:\n\tcount += 1\n\n#print(int(a/10 % 10))\nif int(a / 10 % 10) == 1:\n\tcount += 1\n\n#print(int(a % 100 % 10))\nif int(a % 100 % 10) == 1:\n\tcount += 1\n\nprint(count)\n", "li = list(input())\nc = 0\nfor i in li:\n\tif i == '1':\n\t\tc += 1\n\nprint(c)\n", "s = str(input())\nans = int(s[0])+int(s[1])+int(s[2])\nprint(ans)\n", "a = input()\nprint(a.count('1'))\n", "a = input()\nprint((a.count('1')))\n", "print(input().count(\"1\"))\n", "s=list(input())\nres=0\nfor i in s:\n\tif (i=='1'):\n\t\tres+=1\nprint(res)\n", "s = input()\nprint(s.count(\"1\"))\n", "A = input()\n\nans=int(0)\n\nif A[0] == \"1\":\n\tans = ans + 1\n\nif A[1] == \"1\":\n\tans = ans + 1\n\nif A[2] == \"1\":\n\tans = ans + 1\n\nprint(ans)\n", "s=input()\nprint(s.count(\"1\"))\n", "s = list(input())\ncnt = 0\nfor item in s:\n\tif (int(item) == 1):\n\t\tcnt = cnt + 1\nprint(cnt)\n", "i = str(input())\ns1, s2, s3 = int(i[0]), int(i[1]), int(i[2])\nprint(int(s1+s2+s3))\n", "D = input()\n\nA=\"1\"\nB=\"11\"\nC=\"101\"\nF=\"111\"\n\nif F == D:\n\tprint((3))\n\t\nelif B in D:\n\tprint((2))\n\nelif C == D:\n\tprint((2))\n\nelif A in D:\n\tprint((1))\n\nelse:\n\tprint((0))\n", "s = input()\ncnt = 0\n\nif s[0] == '1' : cnt += 1\nif s[1] == '1' : cnt += 1\nif s[2] == '1' : cnt += 1\n\nprint(cnt)\n", "s1,s2,s3 = map(int, input())\n\nnumber_list = [s1,s2,s3]\n\ncounter = 0\n\nfor i in range(len(number_list)):\n\tif number_list[i] == 1:\n\t\tcounter += 1\nprint(counter)\n", "s = input()\n\nprint(s.count(\"1\"))\n", "s=input()\nprint(s.count(\"1\"))\n", "s = list(input())\nprint(s.count(\"1\"))\n", "\n\n# Press the green button in the gutter to run the script.\ndef __starting_point():\n\ts = input()\n\n\tcount = 0\n\tfor n in range(3):\n\t\tif s[n] == '1':\n\t\t\tcount = count + 1\n\n\tprint(count)\n\n__starting_point()\n", "s = input()\nprint(s.count(\"1\"))\n", "a = input()\n\nb = a.count('1')\nprint(b)\n", "area = input()\nprint(area.count(\"1\"))\n", "print(input().count(\"1\"))\n", "def main():\n\ts = input()\n\tprint(s.count(\"1\"))\n\n\nmain()\n", "s = list(input())\n\nprint(s.count('1'))\n", "def iroha():\n\tnum = input()\n\tcount = 0\n\n\tfor i in num:\n\t\tif i == '1':\n\t\t\tcount+=1\n\t\n\tprint(count)\n\n\ndef __starting_point():\n\tiroha()\n\n\n__starting_point()\n", "a = input()\nprint((a.count('1')))\n", "s = input()\nans = 0\n\nfor i in s:\n\tif i == \"1\":\n\t\tans += 1\n\nprint(ans)\n", "s = input()\nprint((s.count('1')))\n", "s = input()\nans = 0\nfor i in s:\n\tans += int(i)\nprint(ans)\n", "s = input()\ncount = 0\nif s[0] == '1':\n\tcount += 1\nif s[1] == '1':\n\tcount +=1\nif s[2] == '1':\n\tcount += 1\nprint(count)\n", "# 文字列の入力\ns = input()\n\nprint(int(s[0])  + int(s[1])  + int(s[2]))\n", "print(input().count('1'))\n", "def solve(s):\n\tcount = 0\n\tif s[0] == '1':\n\t\tcount += 1\n\tif s[1] == '1':\n\t\tcount += 1\n\tif s[2] == '1':\n\t\tcount += 1\n\tprint(count)\n\n\ndef __starting_point():\n\tsolve(input())\n\n__starting_point()\n", "a = input()\nprint(a.count(\"1\"))\n", "#81\ndata=list(input())\nc=0\nfor i in range(0,len(data)):\n\tif data[i]=='1':\n\t\tc=c+1\nprint(c)\n", "print(input().count('1'))\n", "print(input().count(\"1\"))\n", "s = input()\n\nprint(s.count(\"1\"))\n", "s = input()\n \ncnt = sum([int(c) for c in s])\nprint(cnt)\n"], "id": "id7062"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7062", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["snuke", 1], ["has", 1], ["a", 1], ["grid", 1], ["consisting", 1], ["of", 1], ["three", 1], ["squares", 1], ["numbered", 1], ["1", 1], ["2", 1], ["and", 1], ["3", 1], ["in", 1], ["each", 1], ["square", 1], ["either", 1], ["0", 1], ["or", 1], ["1", 1], ["is", 1], ["written", 1], ["the", 1], ["number", 1], ["written", 1], ["in", 1], ["square", 1], ["i", 1], ["is", 1], ["s", 1], ["i", 1], ["snuke", 1], ["will", 1], ["place", 1], ["a", 1], ["marble", 1], ["on", 1], ["each", 1], ["square", 1], ["that", 1], ["says", 1], ["1", 1], ["find", 0], ["the", 0], ["number", 0], ["of", 0], ["squares", 0], ["on", 0], ["which", 0], ["snuke", 0], ["will", 0], ["place", 0], ["a", 0], ["marble", 0], ["constraints", 0], ["each", 1], ["of", 1], ["s", 0], ["1", 0], ["s", 0], ["2", 0], ["and", 0], ["s", 0], ["3", 0], ["is", 0], ["either", 0], ["1", 0], ["or", 0], ["0", 0], ["input", 0], ["input", 0], ["is", 0], ["given", 0], ["from", 0], ["standard", 0], ["input", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["s", 0], ["1", 0], ["s", 0], ["2", 0], ["s", 0], ["3", 0], ["output", 0], ["print", 0], ["the", 0], ["answer", 0], ["sample", 0], ["input", 0], ["101", 0], ["sample", 0], ["output", 0], ["2", 0], ["a", 0], ["marble", 0], ["will", 0], ["be", 0], ["placed", 0], ["on", 0], ["square", 0], ["1", 0], ["and", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.41904761904761906, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.41904761904761906, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5811965811965812, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5811965811965812, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.41904761904761906, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.41904761904761906, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5811965811965812, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5811965811965812, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["s", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["a", 0], ["input", 0], ["print", 0], ["a", 0], ["count", 0], ["1", 0], ["coding", 0], ["utf", 0], ["8", 0], ["整数の入力", 0], ["s", 0], ["input", 0], ["number", 0], ["1", 0], ["count", 0], ["s", 0], ["count", 0], ["number", 0], ["print", 0], ["count", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["cnt", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["if", 0], ["int", 0], ["s", 0], ["1", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["import", 0], ["bisect", 0], ["collections", 0], ["copy", 0], ["heapq", 0], ["itertools", 0], ["math", 0], ["string", 0], ["import", 0], ["sys", 0], ["def", 0], ["i", 0], ["1", 0], ["line", 0], ["1", 0], ["int", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["li", 0], ["1", 0], ["line", 0], ["n", 0], ["int", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["def", 0], ["s", 0], ["1", 0], ["line", 0], ["1", 0], ["string", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["ls", 0], ["1", 0], ["line", 0], ["n", 0], ["strings", 0], ["return", 0], ["list", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["x", 0], ["s", 0], ["count", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["x", 0], ["if", 0], ["s", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["list", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["import", 0], ["bisect", 0], ["collections", 0], ["copy", 0], ["heapq", 0], ["itertools", 0], ["math", 0], ["string", 0], ["import", 0], ["sys", 0], ["def", 0], ["i", 0], ["1", 0], ["line", 0], ["1", 0], ["int", 0], ["return", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["li", 0], ["1", 0], ["line", 0], ["n", 0], ["ints", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["def", 0], ["s", 0], ["1", 0], ["line", 0], ["1", 0], ["string", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["def", 0], ["ls", 0], ["1", 0], ["line", 0], ["n", 0], ["strings", 0], ["return", 0], ["list", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["x", 0], ["s", 0], ["count", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["x", 0], ["if", 0], ["s", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["a", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["1", 0], ["count", 0], ["1", 0], ["else", 0], ["pass", 0], ["print", 0], ["count", 0], ["print", 0], ["sum", 0], ["int", 0], ["ss", 0], ["for", 0], ["ss", 0], ["in", 0], ["input", 0], ["s1", 0], ["s2", 0], ["s3", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["counter", 0], ["0", 0], ["if", 0], ["s1", 0], ["1", 0], ["counter", 0], ["1", 0], ["if", 0], ["s2", 0], ["1", 0], ["counter", 0], ["1", 0], ["if", 0], ["s3", 0], ["1", 0], ["counter", 0], ["1", 0], ["print", 0], ["counter", 0], ["m", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["list", 0], ["input", 0], ["if", 0], ["int", 0], ["s", 0], ["1", 0], ["m", 0], ["1", 0], ["print", 0], ["m", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["if", 0], ["s", 0], ["0", 0], ["1", 0], ["count", 0], ["1", 0], ["if", 0], ["s", 0], ["1", 0], ["1", 0], ["count", 0], ["1", 0], ["if", 0], ["s", 0], ["2", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["list", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["else", 0], ["print", 0], ["ans", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["st", 0], ["list", 0], ["list", 0], ["input", 0], ["nu", 0], ["list", 0], ["int", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["st", 0], ["list", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["nu", 0], ["list", 0], ["if", 0], ["nu", 0], ["list", 0], ["i", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["n", 0], ["input", 0], ["result", 0], ["sum", 0], ["list", 0], ["map", 0], ["int", 0], ["str", 0], ["n", 0], ["print", 0], ["result", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["3", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["count", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["coding", 0], ["utf", 0], ["8", 0], ["your", 0], ["code", 0], ["here", 0], ["cnt", 0], ["1", 0], ["0", 0], ["list", 0], ["s", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["list", 0], ["s", 0], ["if", 0], ["i", 0], ["1", 0], ["cnt", 0], ["1", 0], ["1", 0], ["print", 0], ["cnt", 0], ["1", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["input", 0], ["count", 0], ["1", 0], ["print", 0], ["s", 0], ["s", 0], ["input", 0], ["s", 0], ["c", 0], ["s", 0], ["count", 0], ["1", 0], ["print", 0], ["s", 0], ["c", 0], ["s", 0], ["input", 0], ["s1", 0], ["int", 0], ["s", 0], ["0", 0], ["s2", 0], ["int", 0], ["s", 0], ["1", 0], ["s3", 0], ["int", 0], ["s", 0], ["2", 0], ["print", 0], ["s1", 0], ["s2", 0], ["s3", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["a", 0], ["str", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["ans", 0], ["int", 0], ["i", 0], ["print", 0], ["ans", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["s", 0], ["list", 0], ["str", 0], ["input", 0], ["ans", 0], ["1", 0], ["if", 0], ["i", 0], ["1", 0], ["else", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["print", 0], ["sum", 0], ["ans", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["a", 0], ["input", 0], ["x", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["x", 0], ["x", 0], ["1", 0], ["print", 0], ["x", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["b", 0], ["input", 0], ["a", 0], ["str", 0], ["b", 0], ["i", 0], ["0", 0], ["if", 0], ["a", 0], ["0", 0], ["1", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["1", 0], ["1", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["2", 0], ["1", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["n", 0], ["in", 0], ["s", 0], ["if", 0], ["n", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["s", 0], ["input", 0], ["a", 0], ["b", 0], ["c", 0], ["int", 0], ["s", 0], ["0", 0], ["int", 0], ["s", 0], ["1", 0], ["int", 0], ["s", 0], ["2", 0], ["count", 0], ["0", 0], ["if", 0], ["a", 0], ["1", 0], ["count", 0], ["1", 0], ["if", 0], ["b", 0], ["1", 0], ["count", 0], ["1", 0], ["if", 0], ["c", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["第2問", 0], ["abc081a", 0], ["number", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["a", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["number", 0], ["if", 0], ["i", 0], ["1", 0], ["a", 0], ["a", 0], ["1", 0], ["print", 0], ["a", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["111", 0], ["print", 0], ["3", 0], ["elif", 0], ["s", 0], ["110", 0], ["or", 0], ["s", 0], ["101", 0], ["or", 0], ["s", 0], ["011", 0], ["print", 0], ["2", 0], ["elif", 0], ["s", 0], ["100", 0], ["or", 0], ["s", 0], ["010", 0], ["or", 0], ["s", 0], ["001", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["0", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["n", 0], ["input", 0], ["print", 0], ["n", 0], ["count", 0], ["1", 0], ["s", 0], ["str", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["a", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["getints", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["c", 0], ["1", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["s", 0], ["map", 0], ["int", 0], ["list", 0], ["input", 0], ["print", 0], ["sum", 0], ["s", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["a", 0], ["int", 0], ["input", 0], ["count", 0], ["0", 0], ["print", 0], ["int", 0], ["a", 0], ["100", 0], ["if", 0], ["int", 0], ["a", 0], ["100", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["int", 0], ["a", 0], ["10", 0], ["10", 0], ["if", 0], ["int", 0], ["a", 0], ["10", 0], ["10", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["int", 0], ["a", 0], ["100", 0], ["10", 0], ["if", 0], ["int", 0], ["a", 0], ["100", 0], ["10", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["li", 0], ["list", 0], ["input", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["li", 0], ["if", 0], ["i", 0], ["1", 0], ["c", 0], ["1", 0], ["print", 0], ["c", 0], ["s", 0], ["str", 0], ["input", 0], ["ans", 0], ["int", 0], ["s", 0], ["0", 0], ["int", 0], ["s", 0], ["1", 0], ["int", 0], ["s", 0], ["2", 0], ["print", 0], ["ans", 0], ["a", 0], ["input", 0], ["print", 0], ["a", 0], ["count", 0], ["1", 0], ["a", 0], ["input", 0], ["print", 0], ["a", 0], ["count", 0], ["1", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["s", 0], ["list", 0], ["input", 0], ["res", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["1", 0], ["res", 0], ["1", 0], ["print", 0], ["res", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["a", 0], ["input", 0], ["ans", 0], ["int", 0], ["0", 0], ["if", 0], ["a", 0], ["0", 0], ["1", 0], ["ans", 0], ["ans", 0], ["1", 0], ["if", 0], ["a", 0], ["1", 0], ["1", 0], ["ans", 0], ["ans", 0], ["1", 0], ["if", 0], ["a", 0], ["2", 0], ["1", 0], ["ans", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["list", 0], ["input", 0], ["cnt", 0], ["0", 0], ["for", 0], ["item", 0], ["in", 0], ["s", 0], ["if", 0], ["int", 0], ["item", 0], ["1", 0], ["cnt", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["i", 0], ["str", 0], ["input", 0], ["s1", 0], ["s2", 0], ["s3", 0], ["int", 0], ["i", 0], ["0", 0], ["int", 0], ["i", 0], ["1", 0], ["int", 0], ["i", 0], ["2", 0], ["print", 0], ["int", 0], ["s1", 0], ["s2", 0], ["s3", 0], ["d", 0], ["input", 0], ["a", 0], ["1", 0], ["b", 0], ["11", 0], ["c", 0], ["101", 0], ["f", 0], ["111", 0], ["if", 0], ["f", 0], ["d", 0], ["print", 0], ["3", 0], ["elif", 0], ["b", 0], ["in", 0], ["d", 0], ["print", 0], ["2", 0], ["elif", 0], ["c", 0], ["d", 0], ["print", 0], ["2", 0], ["elif", 0], ["a", 0], ["in", 0], ["d", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["0", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["if", 0], ["s", 0], ["0", 0], ["1", 0], ["cnt", 0], ["1", 0], ["if", 0], ["s", 0], ["1", 0], ["1", 0], ["cnt", 0], ["1", 0], ["if", 0], ["s", 0], ["2", 0], ["1", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["s1", 0], ["s2", 0], ["s3", 0], ["map", 0], ["int", 0], ["input", 0], ["number", 0], ["list", 0], ["s1", 0], ["s2", 0], ["s3", 0], ["counter", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["number", 0], ["list", 0], ["if", 0], ["number", 0], ["list", 0], ["i", 0], ["1", 0], ["counter", 0], ["1", 0], ["print", 0], ["counter", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["list", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["press", 0], ["the", 0], ["green", 0], ["button", 0], ["in", 0], ["the", 0], ["gutter", 0], ["to", 0], ["run", 0], ["the", 0], ["script", 0], ["def", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["n", 0], ["in", 0], ["range", 0], ["3", 0], ["if", 0], ["s", 0], ["n", 0], ["1", 0], ["count", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["a", 0], ["input", 0], ["b", 0], ["a", 0], ["count", 0], ["1", 0], ["print", 0], ["b", 0], ["area", 0], ["input", 0], ["print", 0], ["area", 0], ["count", 0], ["1", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["def", 0], ["main", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["main", 0], ["s", 0], ["list", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["def", 0], ["iroha", 0], ["num", 0], ["input", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["num", 0], ["if", 0], ["i", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["def", 0], ["starting", 0], ["point", 0], ["iroha", 0], ["starting", 0], ["point", 0], ["a", 0], ["input", 0], ["print", 0], ["a", 0], ["count", 0], ["1", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["ans", 0], ["int", 0], ["i", 0], ["print", 0], ["ans", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["if", 0], ["s", 0], ["0", 0], ["1", 0], ["count", 0], ["1", 0], ["if", 0], ["s", 0], ["1", 0], ["1", 0], ["count", 0], ["1", 0], ["if", 0], ["s", 0], ["2", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["文字列の入力", 0], ["s", 0], ["input", 0], ["print", 0], ["int", 0], ["s", 0], ["0", 0], ["int", 0], ["s", 0], ["1", 0], ["int", 0], ["s", 0], ["2", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["def", 0], ["solve", 0], ["s", 0], ["count", 0], ["0", 0], ["if", 0], ["s", 0], ["0", 0], ["1", 0], ["count", 0], ["1", 0], ["if", 0], ["s", 0], ["1", 0], ["1", 0], ["count", 0], ["1", 0], ["if", 0], ["s", 0], ["2", 0], ["1", 0], ["count", 0], ["1", 0], ["print", 0], ["count", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["input", 0], ["starting", 0], ["point", 0], ["a", 0], ["input", 0], ["print", 0], ["a", 0], ["count", 0], ["1", 0], ["81", 0], ["data", 0], ["list", 0], ["input", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["data", 0], ["if", 0], ["data", 0], ["i", 0], ["1", 0], ["c", 0], ["c", 0], ["1", 0], ["print", 0], ["c", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["print", 0], ["input", 0], ["count", 0], ["1", 0], ["s", 0], ["input", 0], ["print", 0], ["s", 0], ["count", 0], ["1", 0], ["s", 0], ["input", 0], ["cnt", 0], ["sum", 0], ["int", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["print", 0], ["cnt", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nA set of gears is installed on the plane. You are given the center coordinate and radius of each gear, which are all integer-valued. For a given source and target gear, indicate what happens to the target gear if you attempt to turn the source gear. Possibilities are:\n - The source gear cannot move, because it would drive some gear in the arrangement to turn in both directions.\n - The source gear can move, but it is not connected to the target gear.\n - The source gear turns the target gear, at a certain ratio\n\nIf the source gear cannot move, give this result, even if the source and target gears are not connected.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains a single integer $n$ ($1 \\le n \\le 1000$), the total number of gears. Following this will be $n$ lines, one per gear, containing three integers: the $x, y$ ($-10000 \\le x, y \\le 10000$) and $r$ ($1 \\le r \\le 10000$) values for the gear, where $(x,y)$ is the position of the axle of the gear, and $r$ is its radius. Assume that the teeth of the gears are properly designed, and accounted for in the radius, so that any gear will mesh with any other gear if (and only if) they are tangent to each other. The gears will never overlap. The source gear is the first gear, the target gear is the last gear specified.\n\n-----Output-----\nOutput a single line, with the following content, based on the result:\n - -1 if the source gear cannot move.\n - 0 if the source gear can move but is not connected to the target.\n - a b if the source gear moves the target gear, where $a$ and $b$ are two space-separated integers, and $a:b$ is the ratio of source gear revolutions to target gear revolutions reduced to its lowest form (i.e. they have no common factor other than $1$).\n - $a$ is always positive.\n - If the target turns in the same direction as the source, $b$ is positive.\n - If the target turns in the opposite direction as the source, $b$ is negative.\n\n-----Examples-----\nSample Input 1:\n2\n0 0 100\n0 300 200\nSample Output 1:\n2 -1\n\nSample Input 2:\n2\n0 0 100\n0 300 100\nSample Output 2:\n0\n\nSample Input 3:\n16\n10 10 5\n20 10 5\n30 10 5\n40 10 5\n10 20 5\n20 20 5\n30 20 5\n40 20 5\n10 30 5\n20 30 5\n30 30 5\n40 30 5\n10 40 5\n20 40 5\n30 40 5\n40 40 5\nSample Output 3:\n1 1\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5380"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5380", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 0], ["set", 0], ["of", 0], ["gears", 0], ["is", 0], ["installed", 0], ["on", 0], ["the", 0], ["plane", 0], ["you", 0], ["are", 0], ["given", 0], ["the", 0], ["center", 0], ["coordinate", 0], ["and", 0], ["radius", 0], ["of", 0], ["each", 0], ["gear", 0], ["which", 0], ["are", 0], ["all", 0], ["integer", 0], ["valued", 0], ["for", 0], ["a", 0], ["given", 0], ["source", 0], ["and", 0], ["target", 0], ["gear", 0], ["indicate", 0], ["what", 0], ["happens", 0], ["to", 0], ["the", 0], ["target", 0], ["gear", 0], ["if", 0], ["you", 0], ["attempt", 0], ["to", 0], ["turn", 0], ["the", 0], ["source", 0], ["gear", 0], ["possibilities", 0], ["are", 0], ["the", 1], ["source", 1], ["gear", 1], ["cannot", 1], ["move", 1], ["because", 1], ["it", 1], ["would", 1], ["drive", 1], ["some", 1], ["gear", 1], ["in", 1], ["the", 1], ["arrangement", 1], ["to", 1], ["turn", 1], ["in", 1], ["both", 1], ["directions", 1], ["the", 1], ["source", 1], ["gear", 0], ["can", 0], ["move", 0], ["but", 0], ["it", 0], ["is", 0], ["not", 0], ["connected", 0], ["to", 0], ["the", 0], ["target", 0], ["gear", 0], ["the", 0], ["source", 0], ["gear", 0], ["turns", 0], ["the", 0], ["target", 0], ["gear", 0], ["at", 0], ["a", 0], ["certain", 0], ["ratio", 0], ["if", 1], ["the", 1], ["source", 1], ["gear", 1], ["cannot", 1], ["move", 1], ["give", 1], ["this", 0], ["result", 0], ["even", 0], ["if", 0], ["the", 0], ["source", 0], ["and", 0], ["target", 0], ["gears", 0], ["are", 0], ["not", 0], ["connected", 0], ["input", 0], ["each", 52], ["input", 52], ["will", 52], ["consist", 52], ["of", 52], ["a", 52], ["single", 52], ["test", 52], ["case", 52], ["note", 26], ["that", 15], ["your", 15], ["program", 15], ["may", 15], ["be", 7], ["run", 1], ["multiple", 1], ["times", 1], ["on", 1], ["different", 1], ["inputs", 1], ["the", 7], ["first", 7], ["line", 2], ["of", 1], ["input", 1], ["contains", 1], ["a", 1], ["single", 1], ["integer", 1], ["n", 1], ["1", 1], ["le", 1], ["n", 1], ["le", 1], ["1000", 1], ["the", 1], ["total", 1], ["number", 1], ["of", 1], ["gears", 1], ["following", 1], ["this", 1], ["will", 1], ["be", 0], ["n", 0], ["lines", 0], ["one", 0], ["per", 0], ["gear", 0], ["containing", 0], ["three", 0], ["integers", 0], ["the", 0], ["x", 0], ["y", 0], ["10000", 0], ["le", 0], ["x", 0], ["y", 0], ["le", 0], ["10000", 0], ["and", 0], ["r", 0], ["1", 0], ["le", 0], ["r", 0], ["le", 0], ["10000", 0], ["values", 1], ["for", 1], ["the", 1], ["gear", 1], ["where", 1], ["x", 1], ["y", 1], ["is", 1], ["the", 1], ["position", 1], ["of", 1], ["the", 1], ["axle", 1], ["of", 1], ["the", 1], ["gear", 1], ["and", 1], ["r", 1], ["is", 1], ["its", 1], ["radius", 1], ["assume", 1], ["that", 1], ["the", 1], ["teeth", 1], ["of", 1], ["the", 1], ["gears", 1], ["are", 1], ["properly", 1], ["designed", 1], ["and", 1], ["accounted", 1], ["for", 1], ["in", 1], ["the", 1], ["radius", 1], ["so", 1], ["that", 1], ["any", 1], ["gear", 1], ["will", 1], ["mesh", 1], ["with", 1], ["any", 1], ["other", 1], ["gear", 1], ["if", 1], ["and", 1], ["only", 1], ["if", 1], ["they", 1], ["are", 1], ["tangent", 1], ["to", 1], ["each", 1], ["other", 1], ["the", 1], ["gears", 1], ["will", 1], ["never", 1], ["overlap", 1], ["the", 1], ["source", 1], ["gear", 1], ["is", 0], ["the", 0], ["first", 0], ["gear", 0], ["the", 0], ["target", 0], ["gear", 0], ["is", 0], ["the", 0], ["last", 0], ["gear", 0], ["specified", 0], ["output", 0], ["output", 0], ["a", 0], ["single", 0], ["line", 0], ["with", 0], ["the", 0], ["following", 0], ["content", 0], ["based", 0], ["on", 0], ["the", 0], ["result", 0], ["1", 1], ["if", 1], ["the", 1], ["source", 1], ["gear", 1], ["cannot", 1], ["move", 1], ["0", 1], ["if", 1], ["the", 1], ["source", 1], ["gear", 1], ["can", 1], ["move", 1], ["but", 1], ["is", 1], ["not", 1], ["connected", 1], ["to", 1], ["the", 1], ["target", 1], ["a", 1], ["b", 1], ["if", 1], ["the", 1], ["source", 1], ["gear", 1], ["moves", 1], ["the", 1], ["target", 1], ["gear", 1], ["where", 1], ["a", 1], ["and", 1], ["b", 1], ["are", 1], ["two", 1], ["space", 1], ["separated", 1], ["integers", 1], ["and", 1], ["a", 1], ["b", 1], ["is", 1], ["the", 1], ["ratio", 1], ["of", 1], ["source", 1], ["gear", 1], ["revolutions", 1], ["to", 1], ["target", 1], ["gear", 1], ["revolutions", 1], ["reduced", 1], ["to", 1], ["its", 1], ["lowest", 0], ["form", 0], ["i", 0], ["e", 0], ["they", 0], ["have", 0], ["no", 0], ["common", 0], ["factor", 0], ["other", 0], ["than", 0], ["1", 0], ["a", 0], ["is", 0], ["always", 0], ["positive", 0], ["if", 1], ["the", 1], ["target", 1], ["turns", 1], ["in", 1], ["the", 1], ["same", 1], ["direction", 1], ["as", 1], ["the", 1], ["source", 1], ["b", 1], ["is", 1], ["positive", 1], ["if", 1], ["the", 1], ["target", 0], ["turns", 0], ["in", 0], ["the", 0], ["opposite", 0], ["direction", 0], ["as", 0], ["the", 0], ["source", 0], ["b", 0], ["is", 0], ["negative", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["2", 0], ["0", 0], ["0", 0], ["100", 0], ["0", 0], ["300", 0], ["200", 0], ["sample", 0], ["output", 0], ["1", 0], ["2", 0], ["1", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["0", 0], ["0", 0], ["100", 0], ["0", 0], ["300", 0], ["100", 0], ["sample", 0], ["output", 0], ["2", 0], ["0", 0], ["sample", 0], ["input", 0], ["3", 0], ["16", 0], ["10", 0], ["10", 0], ["5", 0], ["20", 0], ["10", 0], ["5", 0], ["30", 0], ["10", 0], ["5", 0], ["40", 0], ["10", 0], ["5", 0], ["10", 0], ["20", 0], ["5", 0], ["20", 0], ["20", 0], ["5", 0], ["30", 0], ["20", 0], ["5", 0], ["40", 0], ["20", 0], ["5", 0], ["10", 0], ["30", 0], ["5", 0], ["20", 0], ["30", 0], ["5", 0], ["30", 0], ["30", 0], ["5", 0], ["40", 0], ["30", 0], ["5", 0], ["10", 0], ["40", 0], ["5", 0], ["20", 0], ["40", 0], ["5", 0], ["30", 0], ["40", 0], ["5", 0], ["40", 0], ["40", 0], ["5", 0], ["sample", 0], ["output", 0], ["3", 0], ["1", 0], ["1", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.45751633986928103, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4213655262674871, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5987261146496815, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5681975844396226, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.42701525054466233, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4203236850295674, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5690021231422505, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5671822869275098, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are given a string S of length N consisting of A, C, G and T. Answer the following Q queries:\n - Query i (1 \\leq i \\leq Q): You will be given integers l_i and r_i (1 \\leq l_i < r_i \\leq N). Consider the substring of S starting at index l_i and ending at index r_i (both inclusive). In this string, how many times does AC occurs as a substring?\n\n-----Notes-----\nA substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.\nFor example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 1 \\leq Q \\leq 10^5\n - S is a string of length N.\n - Each character in S is A, C, G or T.\n - 1 \\leq l_i < r_i \\leq N\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN Q\nS\nl_1 r_1\n:\nl_Q r_Q\n\n-----Output-----\nPrint Q lines. The i-th line should contain the answer to the i-th query.\n\n-----Sample Input-----\n8 3\nACACTACG\n3 7\n2 3\n1 8\n\n-----Sample Output-----\n2\n0\n3\n\n - Query 1: the substring of S starting at index 3 and ending at index 7 is ACTAC. In this string, AC occurs twice as a substring.\n - Query 2: the substring of S starting at index 2 and ending at index 3 is CA. In this string, AC occurs zero times as a substring.\n - Query 3: the substring of S starting at index 1 and ending at index 8 is ACACTACG. In this string, AC occurs three times as a substring.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["\ndef main():\n\tN, Q = map(int,input().split())\n\tS = str(input())\n\n\tsum_array = [0] * 100000\n\n\ti = 0\n\twhile i < len(S):\n\t\tif S[i] == 'A' and ((i + 1) < len(S)) and S[i + 1] == 'C':\n\t\t\tsum_array[i] = 1\n\t\t\ti += 2\n\t\telse:\n\t\t\ti += 1\n\n\tsum = 0\n\tfor i in range(N):\n\t\tsum += sum_array[i]\n\t\tsum_array[i] = sum\n\n\t#print(\"\")\n\t#print(sum_array)\n\n\tans_array = [0] * Q\n\tfor q in range(Q):\n\t\tl, r = map(int,input().split())\n\n\t\tl_sum = sum_array[l-1]\n\t\tif l == 1:\n\t\t\tl_sum = 0\n\t\telif sum_array[l-2] != l_sum:\n\t\t\tl_sum = sum_array[l-2]\n\n\t\tr_sum = sum_array[r-1]\n\t\tif  sum_array[r-2] != r_sum:\n\t\t\tr_sum = sum_array[r-2]\n\n\t\tans_array[q] = r_sum - l_sum\n\t\n\tfor ans in ans_array:\n\t\tprint(ans)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep 14 00:57:13 2020\n\n@author: liang\n\"\"\"\n\nN, Q = list(map(int, input().split()))\nS = input()\nS += \"a\"\nd = [0]*(N+1)\ncount = 0\nfor i in range(len(S)-1):\n\tif S[i:i+2] == \"AC\":\n\t\tcount += 1\n\t#print(i)\n\td[i+1] = count\n#print(lis)\n#print(d)\nfor i in range(Q):\n\tl, r = list(map(int, input().split()))\n\tans = d[r-1] - d[l-1]\n\tprint(ans)\n", "n,q=map(int,input().split())\ns=list(input())\na=[0]*n\nr=0\nfor ii in range(n-1):\n\tif s[ii]==\"A\" and s[ii+1]==\"C\":\n\t\tr+=1\n\ta[ii]=r\n#print(a)\nfor _ in range(q):\n\tl,r=map(int,input().split())\n\t#print(s[l-1:r])\n\tprint(a[r-2]-a[l-2])\n", "a,b=map(int,input().split())\nn = input()\nm = [0]*a\nfor i in range(1,a):\n\tif n[i-1:i+1]==\"AC\":\n\t\tm[i]=m[i-1]+1\n\telse:\n\t\tm[i]=m[i-1]\nfor j in range(b):\n\ts,t=map(int,input().split())\n\tprint(m[t-1]-m[s-1])\n", "N,Q = [int(i) for i in input().split()]\nS = input()\nlst = [0]\nfor x in range(1,len(S)):\n\tif S[x-1:x+1]==\"AC\":\n\t\tlst.append(lst[x-1]+1)\n\telse:\n\t\tlst.append(lst[x-1])\n\nfor q in range(Q):\n\tl,r = [int(i) for i in input().split()]\n\tprint(lst[r-1]-lst[l-1])\n", "n, q = map(int, input().split())\ns = input()\nlr = [list(map(int, input().split())) for _ in range(q)]\n\ncnt = 0\nlst = []\nfor i in range(n):\n\tif s[i-1:i+1] == 'AC':\n\t\tcnt += 1\n\tlst.append(cnt)\n\nfor i in range(q):\n\tprint(lst[lr[i][1] - 1] - lst[lr[i][0] - 1])\n", "n, q = list(map(int, input().split()))\ns = input()\n\ndp = [0]*n\ntemp = 0\nfor i in range(1,n):\n\tif s[i-1]==\"A\" and s[i] ==\"C\":\n\t\ttemp +=1\n\tdp[i] =temp\n\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n\tprint((dp[r-1]-dp[l-1]))\n", "N, Q = map(int, input().split())\nS = input()\ncnt = [0]*N\nfor i in range(N-1):\n\tT = S[i:i+2]\n\tif T == 'AC':\n\t\tcnt[i+1] = cnt[i] + 1\n\telse:\n\t\tcnt[i+1] = cnt[i]\nfor i in range(Q):\n\tx, y = map(int, input().split())\n\tans = cnt[y-1]-cnt[x-1]\n\tprint(ans)\n", "n, q = map(int, input().split())\ns = input()\nnum_list = [list(map(int, input().split())) for _ in range(q)]\ncnt = 0\ncnt_list = [0]\n\nfor i in range(n-1):\n\tif s[i] == 'A' and s[i+1] == 'C':\n\t\tcnt += 1\n\t\tcnt_list.append(cnt)\n\telse:\n\t\tcnt_list.append(cnt)\n\nfor i in range(q):\n\tprint(cnt_list[num_list[i][1]-1] - cnt_list[num_list[i][0]-1])\n", "n,q=map(int,input().split())\ns=input()\nl=[0]*n\ntmp=0\nfor i in range(n-2,-1,-1):\n\tif s[i:i+2]==\"AC\":\n\t\ttmp+=1\n\tl[i]+=tmp\n#print(l)\nfor i in range(q):\n\tL,R=map(int,input().split())\n\tprint(l[L-1]-l[R-1])\n", "N, Q = map(int, input().split())\nS = input()\n \n# 累積和的な発想\nt = [0]*N\nfor i in range(N-1):\n\tt[i+1] = t[i]\n\tif S[i:i+2] == 'AC': t[i+1] += 1\n\nfor _ in range(Q):\n\tl,r = map(int, input().split())\n\tprint(t[r-1] - t[l-1])\n", "# author:  Taichicchi\n# created: 12.09.2020 19:26:19\n\nimport sys\n\nN, Q = list(map(int, input().split()))\n\nS = input()\n\ncum_ls = [0]\n\nfor i in range(1, N):\n\tif S[i - 1: i + 1] == \"AC\":\n\t\tcum_ls.append(cum_ls[i - 1] + 1)\n\telse:\n\t\tcum_ls.append(cum_ls[i - 1])\n\n# print(cum_ls)\n\nfor i in range(Q):\n\tl, r = list(map(int, input().split()))\n\tprint((cum_ls[r - 1] - cum_ls[l - 1]))\n", "N,Q=list(map(int,input().split()))\nS=input()\ncnt=[0,0]\nfor i in range(1,N):\n\tcnt.append(cnt[-1]+S[i-1:i+1].count(\"AC\"))\nfor _ in range(Q):\n\tl,r=list(map(int,input().split()))\n\tprint((cnt[r]-cnt[l]))\n", "n,q = map(int,input().split())\ns=input()\na=[0]*n\nfor i in range(n-1):\n\ta[i+1]=a[i]+(1 if s[i:i+2]==\"AC\" else 0)\n\nfor i in range(q):\n\tl,r=map(int,input().split())\n\tprint(a[r-1]-a[l-1])\n", "n,k = map(int,input().split())\ns = input()\nL = [0]*len(s)\nfor i in range(len(s)-1):\n\tif s[i] == \"A\" and s[i+1] ==\"C\":\n\t\tL[i+1] = 1\nL = [0]+L\nfor i in range(1,len(s)+1):\n\tL[i]+=L[i-1]\n#print(L)\nfor i in range(k):\n\ta,b = map(int,input().split())\n\tprint(L[b]-L[a])\n", "n,q = map(int,input().split())\ns = input()\nans = []\na = [0]*(10**5+1)\nadd = 0\ncheck = False\nfor i in range(n):\n\tif check and s[i] == 'C':\n\t\tadd +=1\n\tif s[i] == 'A':\n\t\tcheck = True\n\telse:\n\t\tcheck = False\n\t\n\ta[i] += add\nfor i in range(q):\n\tb,c = map(int,input().split())\n\tans.append(a[c-1]-a[b-1])\nfor i in range(q):\n\tprint(ans[i])\n", "N,Q=list(map(int,input().split()))\nS=input()\nli=[0]\nA=False\nans=0\nimport copy\nfor i in range(N):\n\tif A==True:\n\t\tif S[i]==\"C\":\n\t\t\tans+=1\n\t\tA=False\n\tif S[i]==\"A\":\n\t\tA=True\n\tli.append(copy.copy(ans))\nfor j in range(Q):\n\ta,b=list(map(int,input().split()))\n\tprint((li[b]-li[a]))\n", "N,Q = list(map(int,input().split()))\nS = input()\nlr = [list(map(int,input().split()))for _ in range(Q)]\nl = [lr[i][0] for i in range(Q)]\nr = [lr[i][1] for i in range(Q)]\n#print(lr)\n#print(l)\n#print(r)\n\nc = [0] * N\ncnt = 0\n\nfor i in range(N-1):\n\tif S[i:i+2] == 'AC':\n\t\tc[i+1]=c[i]+1\n\telse:\n\t\tc[i+1]=c[i]\n\t#c[i] = S[:i].count('AC')\n\t#countを使わずにiまでの合計値をリスト化\n\n#print(c)\n\nfor i,j in zip(l,r):\n\t#print(sum(c[:j])-sum(c[:i]))\n\t#l,r = map(int,input().split())\n\tprint((c[j-1]-c[i-1]))\n\t#合計値を利用してsumを使わずに差を表示して計算減させる\n\t#リストを要素ごとに分けるのは初めにやっておいて大丈夫\n", "n, q = map(int, input().split())\ns = input()\nt = [0] * (n+1)\n\nfor i in range(n):\n\tt[i+1] = t[i] + (1 if s[i:i+2] == 'AC' else 0)\n\nfor i in range(q):\n\tl, r = map(int, input().split())\n\tprint(t[r-1] - t[l-1])\n", "N,Q = map(int,input().split())\nS =  list(input()) \n\nlsline = []\nfor i in range(Q):\n\tlsline.append(list(map(int,input().split())))\n\nlsAC = [0,0]\nAC = 0\nfor i in range(N-1):\n\tif S[i]=='A' and S[i+1]=='C':\n\t\tAC += 1\n\tlsAC.append(AC)\nfor i in range(Q):\n\tprint(lsAC[lsline[i][1]]-lsAC[lsline[i][0]])\n", "import sys\n\nN, Q = map(int,input().split())\nS = input()\n\ncnt = [0]*(N+1)\nwasA = False\n\nfor i in range(0,N):\n\tif wasA and S[i] == \"C\":\n\t\tcnt[i+1] = cnt[i] + 1\n\t\twasA = False\n\telif S[i] == \"A\":\n\t\tcnt[i+1] = cnt[i]\n\t\twasA = True\n\telse:\n\t\tcnt[i+1] = cnt[i]\n\t\twasA = False\n\n#print(cnt)    \n\nfor i in range(0,Q):\n\tl, r = map(int,input().split())\n\tprint(cnt[r]-cnt[l])\n", "N,Q = map(int,input().split())\nS = input()\nc = []\ncount = 0\nfor i in range(N-1):\n\tif S[i] == \"A\" and S[i+1] == \"C\":\n\t\tcount += 1\n\tc.append(count)\nfor i in range(Q):\n\tl,r = map(int,input().split())\n\tif l == 1:\n\t\tprint(c[r-2]-0)\n\telse:\n\t\tprint(c[r-2]-c[l-2])\n", "n,q = map(int,input().split())\ns = input()\ncusumList = [0]\nfor i in range(n-1):\n\tif s[i] == \"A\" and s[i+1] == \"C\":\n\t\tcusumList.append(cusumList[i]+1)\n\telse:\n\t\tcusumList.append(cusumList[i])\n\nfor i in range(q):\n\tl,r = map(int,input().split())\n\tprint(cusumList[r-1]-cusumList[l-1])\n", "N,Q = map(int,input().split())\nS = input()\nlr = [list(map(int,input().split()))for _ in range(Q)]\nl = [lr[i][0] for i in range(Q)]\nr = [lr[i][1] for i in range(Q)]\n#print(lr)\n#print(l)\n#print(r)\n\nc = [0] * N\ncnt = 0\n\nfor i in range(N-1):\n\tif S[i:i+2] == 'AC':\n\t\tc[i+1]=c[i]+1\n\telse:\n\t\tc[i+1]=c[i]\n\t#c[i] = S[:i].count('AC')\n\n#print(c)\n\nfor i,j in zip(l,r):\n\t#print(sum(c[:j])-sum(c[:i]))\n\t#l,r = map(int,input().split())\n\tprint(c[j-1]-c[i-1])\n", "N, Q = map(int, input().split())\nS = input()\n \n# 累積和的な発想\nt = [0]*N\nfor i in range(N-1):\n\tt[i+1] = t[i]\n\tif S[i:i+2] == 'AC': t[i+1] += 1\n\nfor _ in range(Q):\n\tl,r = map(int, input().split())\n\tprint(t[r-1] - t[l-1])\n", "N,Q = map(int,input().split())\nS = input()\nt = [0]*(N+1)\n\nfor i in range(N):\n\tt[i+1] = t[i] + (1 if S[i:i+2] == \"AC\" else 0)\n\t\nfor j in range(Q):\n\tl,r = map(int,input().split())\n\tprint(t[r-1] - t[l-1])\n", "N, Q = map(int, input().split())\nS = input()\nlr = [list(map(int, input().split())) for _ in range(Q)]\n\ncsum = [0]\nfor i in range(1, N):\n\tif S[i-1:i+1] == 'AC':\n\t\tcsum.append(csum[-1]+1)\n\telse:\n\t\tcsum.append(csum[-1])\nfor l, r in lr:\n\tprint(csum[r-1]-csum[l-1])\n", "import numpy as np\n\nN, Q = map(int, input().split())\nS = input()\n\nX = np.zeros(N+1, dtype='int64')\ntmp = 1 # いま何文字目か\nwhile S.find('AC') >= 0 and tmp < N:\n\ti = S.find('AC')\n\tX[tmp+i] += 1 # AC の A がある場所に 1 を加算\n\tS = S[i+2:] # 2文字進める\n\ttmp += i + 2\nSUM = X.cumsum()\n\nfor _ in range(Q):\n\tl, r = map(int, input().split())\n\t# A の右隣の C まで含まれていないといけないので、\n\t# r文字目ではなく、r-1文字目までで考える\n\tprint(SUM[r-1] - SUM[l-1])\n", "n,q = list(map(int,input().split()))\ns = input()\n\nd = [0]*100100\ne = [0]*100100\n\nfor i in range(0,n-1):\n\tif s[i] == 'A' and s[i+1]=='C':\n\t\td[i+1]=1\n\nfor i in range(0,n+1):\n\td[i+1] += d[i]\n\nfor i in range(0,q):\n\tl,r = list(map(int,input().split()))\n\tl-=1\n\tlefNum = d[l]\n\n\trigNum = d[r]\n\tif r < n and s[r-1] == 'A' and s[r] =='C':\n\t\trigNum-=1\n\n\tans = rigNum - lefNum\n\tprint(ans)\n", "n, q = map(int, input().split())\ns = input()\n\nc = [0]\nfor i in range(1, n):\n\tif s[i-1:i+1] == \"AC\":\n\t\tc.append(c[-1]+1)\n\telse:\n\t\tc.append(c[-1])\n\nfor _ in range(q):\n\tl, r = map(int, input().split())\n\tprint(c[r-1] - c[l-1])\n", "n,q=map(int,input().split())\ns=input()\na=[0,0]\nfor l in range(1,n):\n\tif s[l-1]=='A' and s[l]=='C':\n\t\ta.append(a[l]+1)\n\telse :\n\t\ta.append(a[l])\nfor k in range(q):\n\tx,y=map(int,input().split())\n\tprint(a[y]-a[x])\n", "n, q = list(map(int, input().split()))\ns = input()\nt = [0] * (n + 1)\nfor i in range(n):\n\tt[i + 1] = t[i] + (1 if s[i : i + 2] == \"AC\" else 0)\n\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n\tprint((t[r - 1] - t[l - 1]))\n\n", "N,Q=map(int,input().split())\nS=input()\nLR=[list(map(int,input().split())) for _ in range(Q)]\n\nF=[0]*len(S)\nfor i in range(N-1):\n\tF[i+1]+=F[i]+(1 if S[i:i+2]=='AC' else 0)\n\t#print(i,F,S[i:i+2])\nfor l,r in LR:\n\tprint(F[r-1]-F[l-1])\n", "N,Q = list(map(int, input().split()))\nS = input()\n\ntotal = [0] * N\nfor i in range(1,N):\n\ttotal[i] = total[i-1]\n\tif S[i-1] == 'A' and S[i] == 'C':\n\t\ttotal[i] += 1\n\nfor q in range(Q):\n\tL,R = list(map(int, input().split()))\n\tL -=1\n\tR -=1\n\n\tcount = total[R] - total[L]\n\tprint(count)\n", "n, q = map(int, input().split())\ns = input()\na = [list(map(int, input().split())) for i in range(q)]\n\nc = [0] * n\nfor i in range(1,n):\n\tc[i] = c[i-1] + (s[i-1]+s[i] == 'AC')\n\nfor x in a:\n\tprint(c[x[1]-1]-c[x[0]-1])\n", "#入力:N,M(int:整数)\ndef input2():\n\treturn map(int,input().split())\n\n#入力:[n1,n2,...nk](int:整数配列)\ndef input_array():\n\treturn list(map(int,input().split()))\n  \nn,q=input2()\nB=str(input())\nLR=[input_array() for _ in range(q)]\n\n# E=[\"A\",\"C\",\"G\",\"T\"]\nT=[0]*(n+1) #1文字目〜n文字目までに出現する\"AC\"数の累積和\n\nfor i in range(n):\n\tif B[i:i+2] == \"AC\":\t\n\t\tT[i+1] = T[i]+1\n\telse:\n\t\tT[i+1]=T[i]\nfor lr in LR:\n\tst=lr[0]-1\n\tfi=lr[1]-1\n\tprint(T[fi]-T[st])\n", "N, Q = [int(x) for x in input().split(\" \")]\n\ns = input()\nAinAC = [0]\nCinAC = [0]\nc = 0\nfor i in range(len(s) - 1):\n\tif s[i] == \"A\" and s[i + 1] == \"C\":\n\t\tCinAC.append(c)\n\t\tc += 1\n\t\tAinAC.append(c)\n\telse:\n\t\tAinAC.append(c)\n\t\tCinAC.append(c)\nelse:\n\tAinAC.append(c)\n\tCinAC.append(c)\n\nans = []\nfor i in range(Q):\n\tl, r = [int(x) for x in input().split(\" \")]\n\tright = min([AinAC[r], CinAC[r]])\n\tleft = max([AinAC[l - 1], CinAC[l - 1]])\n\tans.append(str(right - left))\n\nprint((\"\\n\".join(ans)))\n", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n# \n# \n# @stop_watch\ndef solve(N, Q, S, LRi):\n\tcumulative_sum = [0, 0]\n\tfor i in range(1, N):\n\t\ttmp = cumulative_sum[-1]\n\t\tif S[i - 1:i + 1] == 'AC':\n\t\t\ttmp += 1\n\t\tcumulative_sum.append(tmp)\n\n\tfor l, r in LRi:\n\t\tprint((cumulative_sum[r] - cumulative_sum[l]))\n\n\ndef __starting_point():\n\tN, Q = list(map(int, input().split()))\n\tS = input()\n\tLRi = [[int(i) for i in input().split()] for _ in range(Q)]\n\tsolve(N, Q, S, LRi)\n\n\t# # test\n\t# from random import randint\n\t# from func import random_str\n\t# N, Q = 10 ** 5, 10 ** 5\n\t# S = random_str(N, 'ACGT')\n\t# LRi = [sorted([randint(1, N) for _ in range(2)]) for _ in range(Q)]\n\t# solve(N, Q, S, LRi)\n\n__starting_point()\n", "N, Q = map(int, input().split())\nS = input()\nLR = [tuple(map(int, input().split())) for _ in range(Q)]\n\ncum = [0]*(N+1)\n\ncnt = 0\nfor i in range(1,N):\n\tif S[i-1] == 'A' and S[i] == 'C':\n\t\tcnt += 1\n\tcum[i] = cnt\n\nans = []\nfor l, r in LR:\n\tresult = cum[r-1] - cum[l-1]\n\tans.append(result)\n\nprint(*ans, sep='\\n')\n", "N, Q = [int(i) for i in input().split()]\nS = input()\n\ncs = [0]\nfor i in range(1, N):\n\tif S[i-1] + S[i] == 'AC':\n\t\tcs.append(cs[i-1] + 1)\n\telse:\n\t\tcs.append(cs[i-1])\n\nfor l, r in ([int(i) for i in input().split()] for _ in range(Q)):\n\tprint((cs[r - 1] - cs[l - 1]))\n", "from itertools import accumulate\n\nn, q = list(map(int, input().split()))\ns = input()\nlr = [list(map(int, input().split())) for _ in range(q)]\n\nac_list = [0]*n\n\nfor i in range(n-1):\n\tif s[i] == 'A' and s[i+1] == 'C':\n\t\tac_list[i] = 1\n\nac_sum = list(accumulate(ac_list))\n\nfor l, r in lr:\n\tl -= 1\n\tr -= 1\n\tif l == 0:\n\t\tprint((ac_sum[r-1]))\n\t\tcontinue\n\tprint((ac_sum[r-1] - ac_sum[l-1]))\n", "N, Q = map(int, input().split())\nS = list(input())\n\nclass bit:\n\tdef __init__(self, N):\n\t\tself.__N = N\n\t\tself.__a = [0] * N\n\tdef add_(self, x, v):\n\t\tx += 1\n\t\twhile x < self.__N:\n\t\t\tself.__a[x] += v\n\t\t\tx += x & -x\n\tdef show_(self):\n\t\tprint(self.__a[1:])\n\t\t\n\tdef sum_(self, x):\n\t\tans = 0\n\t\twhile x > 0:\n\t\t\tans += self.__a[x]\n\t\t\tx -= x & -x\n\t\treturn ans\n\tdef sub_sum_(self, x, y):\n\t\treturn self.sum_(y) - self.sum_(x)\nprev = \"0\"\nBIT = bit(N)\nfor i, val in enumerate(S):\n\tif prev == \"A\" and val == \"C\":\n\t\tBIT.add_(i-1, 1)\n\tprev = val\nfor i in range(Q):\n\tx, y = map(int, input().split())\n\tx -= 1\n\ty -= 1\n\tprint(BIT.sub_sum_(x,y))\n", "n, q = list(map(int, input().split()))\n#print(n, q)\n\ns = input()\n\nv = [0] * n\n\nfor i in range(n - 1):\n\tif s[i] == 'A' and s[i + 1] == 'C':\n\t\tv[i] = 1\n\nm = [0] * (n + 1)\nfor i in range(n):\n\tm[i + 1] = m[i] + v[i]\n\n\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n\tl -= 1\n\tans = 0\n\tif r - l < 2:\n\t\tans = 1\n\telse:\n\t\tans = m[r] - m[l]\n\t\tif v[r - 1] == 1:\n\t\t\tans -= 1\n\tprint(ans)\n", "N,Q = map(int,input().rstrip().split())\nS = input().rstrip()\na = [0]*N\nfor i in range(N):\n\tif i > 1:\n\t\ta[i] = a[i-1]\n\tif i != 0 and S[i-1]=='A' and S[i] == 'C':\n\t\ta[i] += 1\nfor _ in range(Q):\n\tl, r = map(int,input().rstrip().split())\n\tprint(a[r-1]-a[l-1])\n", "N, Q = list(map(int, input().split()))\nS = input()\nt = [0]*(N+1)\n\nfor i in range(N):\n\tt[i+1] = t[i] + (1 if S[i:i+2] == 'AC' else 0)\n\nfor i in range(Q):\n\tl, r = list(map(int, input().split()))\n\tprint((t[r-1] - t[l-1]))\n", "import sys\n\ninput = sys.stdin.readline\n\nn, q= map(int, input().split())\n\nS = input()\nS = S.replace('\\n','')\ns_list = list(S)\n\nl = [0 for i in range(q)]\nr = [0 for i in range(q)]\nfor i in range(q):\n\tl[i], r[i] = map(int, input().split())\n\nac_sum_list = [0 for i in range(len(s_list))]\ntmp = \"\"\nac_sum = 0\nfor i,s in enumerate(s_list):\n\tif tmp + s == \"AC\":\n\t\tac_sum += 1\n\tac_sum_list[i] = ac_sum\n\ttmp = s\n\n\nfor i in range(q):\n\tl_index = l[i]\n\tr_index = r[i]\n\tl_ac = ac_sum_list[l_index-1]\n\tr_ac = ac_sum_list[r_index-1]\n\tprint(r_ac - l_ac)\n", "N, Q = map(int, input().split())\nS = input()\n\n\ncum_sum = [0] * N\ncount_AC = [0] * N\n\nfor i in range(N-1):\n\tif (S[i] + S[i+1]) == \"AC\":\n\n\t\tcount_AC[i+1] = 2\n\t\tcum_sum[i+1] = 2\n\tcum_sum[i+1] = cum_sum[i] + cum_sum[i+1]\n\n\nfor _ in range(Q):\n\tl,r = map(int, input().split())\n\tl = l - 1\n\tr = r - 1\n\tprint((cum_sum[r]//2)-(cum_sum[l]//2))   \n", "n,q=map(int,input().split())\nans = [0]*(n)\nS = input()\nfor i in range(n-1):\n\ttmp = 0\n\tif S[i] == \"A\" and S[i+1] == \"C\":\n\t\ttmp = 1\n\tans[i+1] = ans[i]+tmp\nfor i in range(q):\n\tl,r = map(int,input().split())\n\tprint(ans[r-1]-ans[l-1])\n", "n, q = map(int, input().split())\ns = input()\nlr = list(list(map(int, input().split()) for _ in range(q)))\n\nc = [0]\nfor i in range(1, n):\n\tif s[i-1:i+1] == \"AC\":\n\t\tc.append(c[-1]+1)\n\telse:\n\t\tc.append(c[-1])\n\nfor l, r in lr:\n\tprint(c[r-1] - c[l-1])\n", "N,K = list(map(int,input().split()))\nmoji = str(input())\nans = [0]\nfor i in range(N-1):\n\tif moji[i] == \"A\" and moji[i+1] == \"C\":\n\t\tans.append(ans[i]+1)\n\telse:\n\t\tans.append(ans[i])\n\n\t\t\nfor i in range(K):\n\tst,sp = list(map(int,input().split()))\n\tprint((ans[sp-1]-ans[st-1]))\n", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN, Q = list(map(int, input().split()))\nS = input()\nlr = [list(map(int, input().split())) for _ in range(Q)]\n\ns = [0] * N\n\nfor i in range(1, N):\n\ts[i] = s[i - 1]\n\tif S[i - 1] == \"A\" and S[i] == \"C\":\n\t\ts[i] += 1\n\nfor l, r in lr:\n\tprint((s[r - 1] - s[l - 1]))\n\t\n", "from bisect import bisect_left\nfrom bisect import bisect_right\nn, q = list(map(int, input().split()))\ns = input()\nlr = [tuple(map(int, input().split())) for _ in range(q)]\n\nac = []\nfor i in range(n-1):\n\tif s[i] == 'A' and s[i+1] == 'C':\n\t\tac.append(i)\n\nif ac == []:\n\tfor i in range(q):\n\t\tprint((0))\n\treturn\n\nfor l, r in lr:\n\tl -= 1\n\tr -= 1\n\tli = bisect_left(ac, l)\n\tri = bisect_right(ac, r)\n\tif li == ri:\n\t\tprint((0))\n\telif r > ac[ri-1]:\n\t\tprint((ri-li))\n\telse:\n\t\tprint((ri-li-1))\n", "#n = int(input())\nn, q = list(map(int, input().split()))\n#bl = list(map(int, input().split()))\n#al=[list(input()) for i in range(n)]\ns = input()\nacnum = [0]*(n+1)\nfor i in range(2, n+1):\n\tif s[i-2:i] == 'AC':\n\t\tacnum[i] += acnum[i-1]+1\n\telse:\n\t\tacnum[i] += acnum[i-1]\n\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n\tprint((acnum[r]-acnum[l]))\n", "n, q = map(int, input().split())\nS = input()\n*LR, = (map(int, input().split()) for _ in range(q))\n \nA = [0] * n\nfor i in range(1, n):\n\tA[i] = A[i-1] + (S[i-1:i+1]=='AC')\nfor l, r in LR:\n\tprint(A[r-1]-A[l-1])\n", "n,q = map(int,input().split())\ns = input()\ncnt = [0]*n\nfor i in range(1,n):\n\tcnt[i] += cnt[i-1]\n\tif s[i-1:i+1] == \"AC\":\n\t\tcnt[i]+=1\nfor i in range(q):\n\tl,r = map(int,input().split())\n\tprint(cnt[r-1]-cnt[l-1])\n", "N, Q = map(int, input().split())\nS = \" \" + input()\nl = []\nr = []\nfor _ in range(Q):\n\t_l, _r = map(int, input().split())\n\tl.append(_l)\n\tr.append(_r)\ndp = [0] * (N + 2) #i文字目から何個ACがあるか\ncnt = 0\nfor i in range(1, N):\n\tif S[-i] == \"C\" and S[-i-1] == \"A\":\n\t\t\tcnt += 1\n\tdp[N-i] = cnt\n#print(dp)\nans = 0\nfor q in range(Q):\n\tans = dp[l[q]] - dp[r[q] + 1]\n\tif r[q] < N:\n\t\tif S[r[q]] == \"A\" and S[r[q] + 1] == \"C\":\n\t\t\tans -= 1\n\tprint(ans)\n", "import bisect\nn,q = map(int, input().split(\" \"))\ns = input()\nlr = [list(map(int, input().split(\" \"))) for i in range(q)]\na = []\nfor i in range(n-1):\n\tif s[i] +s[i+1]== 'AC':\n\t\ta.append(i+1)\nfor l, r in lr:\n\tprint(bisect.bisect(a, r-1) - bisect.bisect(a, l-0.1))\n", "n,q = map(int,input().split())\ns = input()\ncnt = [0]*n\nfor i in range(1,n):\n\tcnt[i] += cnt[i-1]\n\tif s[i-1:i+1] == \"AC\":\n\t\tcnt[i]+=1\nfor i in range(q):\n\tl,r = map(int,input().split())\n\tprint(cnt[r-1]-cnt[l-1])\n", "n, q = map(int, input().split())\nS = input()\nflag = False\nL = [0 for _ in range(n)]\ncnt = 0\nfor i, s in enumerate(S):\n\tif flag:\n\t\tif s == \"C\":\n\t\t\tcnt += 1\n\t\tflag = False\n\tif s == \"A\":\n\t\tflag = True\n\tL[i] = cnt\n\nfor _ in range(q):\n\tl, r = map(lambda x: int(x) - 1, input().split())\n\tprint(L[r] - L[l])\n", "N, Q = list(map(int, input().split()))\nS = input()\n\ncs = [0] * N\ncnt = 0\nfor i in range(1, N):\n\tif S[i-1:i+1] == \"AC\":\n\t\tcnt += 1\n\tcs[i] = cnt\n\nfor i in range(Q):\n\tl,r = list(map(int, input().split()))\n\tprint((cs[r-1]-cs[l-1]))\n", "import numpy as np\n\nn,q = map(int,input().split())\ns = input()\n\nqs = []\nfor i in range(q):\n\tqs.append(list(map(int,input().split())))\n\nls = [0]\ncount = 0\nfor i in range(1,n):\n\tif s[i-1:i+1]=='AC':\n\t\tcount +=1\n\tls.append(count)\n\nfor ques in qs:\n\tprint(ls[ques[1]-1]-ls[ques[0]-1])\n", "N, Q = map(int, input().split())\nS = input()\nls = [0]\nfor i in range(N-1):\n\tif S[i] == 'A' and S[i+1] == 'C':\n\t\tls.append(ls[i]+1)\n\telse:\n\t\tls.append(ls[i])\n\nfor i in range(Q):\n\tl, r = map(int, input().split())\n\tprint(ls[r-1]-ls[l-1])\n", "N, Q = map(int, input().split())\nS = input()\n \n# 累積和的な発想\nt = [0]*(N+1) # t[0]=t[1]=0\nfor i in range(N-1):\n\tt[i+2] = t[i+1]\n\tif S[i:i+2] == 'AC': t[i+2] += 1\n\t\t\nfor _ in range(Q):\n\tl,r = map(int, input().split())\n\tprint(t[r] - t[l])\n", "n,q=list(map(int,input().split()))\ns=input()\nlr=[list(map(int,input().split())) for i in range(q)]\n\nrui=[0]*(n+1)\ntmp=0\nfor i in range(len(s)):\n\tif s[i-1] == 'A' and s[i] == 'C':\n\t\ttmp += 1\n\trui[i] = tmp\n\nfor i in range(q):\n\tprint((rui[lr[i][1]-1] - rui[lr[i][0]-1]))\n", "N, Q = list(map(int, input().split()))\nS = input()\nt = [0] * (N + 1)\nfor i in range(N):\n\tt[i + 1] = t[i] + (1 if S[i : i + 2] == 'AC' else 0)\nfor i in range(Q):\n\tl, r = list(map(int, input().split()))\n\tprint((t[r-1] - t[l-1]))\n", "##初期値設定##\nN, Q = map(int, input().split())\nS = input()\ndl=[]\ndr=[]\nfor i in range(Q):\n\tline = list(map(int, input().split()))\n\tdl.append(line[0])\n\tdr.append(line[1])\n\n##ACの個数配列計算##\na=[]\nfor i in range(N-1):\n\ttmp_S = S[i:i+2]\n\tif tmp_S == \"AC\":\n\t\ta.append(1)\n\telse:\n\t\ta.append(0)\n\n##累積和計算##\ns = [0]\nfor i in range(len(a)):\n\ts.append(s[i]+a[i])\n\n##解答算出##\nans=[]\nfor l, r in zip(dl, dr):\n\tans.append(s[r-1]-s[l-1])\n\nfor i in range(Q):\n\tprint(ans[i])\n", "n,q = map(int,input().split())\ns = input()\ncount = [0] * (n+1)\nfor i in range(n-1):\n\tif s[i] == 'A' and s[i+1] == 'C':\n\t\tcount[i+1] = count[i] + 1\n\telse:\n\t\tcount[i+1] = count[i]\nfor i in range(q):\n\tl,r = map(int,input().split())\n\tprint(count[r-1] - count[l-1])\n", "n, q = map(int, input().split())\ns = input()\nac = {1:0}\nk = 0\nfor i in range(1, n):\n\tif s[i - 1:i + 1] == 'AC':\n\t\tk += 1\n\tac[i + 1] = k\nans = []\nfor i in range(q):\n\tl, r = map(int, input().split())\n\tans.append(ac[r] - ac[l])\nfor e in ans:\n\tprint(e)\n", "N,Q=list(map(int, input().split()))\nS=input()\nSsum=[0]*N\n\nnow=S[0]\ncnt=0\nfor i in range(1,N):\n\tnext=S[i]\n\tif now==\"A\" and next==\"C\":\n\t\tcnt+=1\n\tSsum[i]=cnt\n\tnow=next\n\nfor q in range(Q):\n\tl,r=list(map(int, input().split()))\n\tprint((Ssum[r-1]-Ssum[l-1]))\n\n", "# author:  Taichicchi\n# created: 26.09.2020 13:43:12\n\nimport sys\n\nN, Q = map(int, input().split())\n\nS = input()\n\nls = [0]\n\nfor i in range(N):\n\tif i == 0:\n\t\tls.append(0)\n\telse:\n\t\tif S[i - 1:i + 1] == \"AC\":\n\t\t\tls.append(ls[-1] + 1)\n\t\telse:\n\t\t\tls.append(ls[-1])\n\nfor q in range(Q):\n\tl, r = map(int, input().split())\n\n\tprint(ls[r] - ls[l])\n", "N, Q = map(int, input().split())\nS = input()\nlr = [list(map(int, input().split())) for _ in range(Q)]\n\n# 累積和\nL = [0]*(N+1) # L[0]=L[1]=0\nfor i in range(N-1):\n\tL[i+2] = L[i+1]\n\tif S[i:i+2] == 'AC': L[i+2] += 1\n\t\t\nfor i in range(Q):\n\tl = lr[i][0]\n\tr = lr[i][1]\n\tprint(L[r] - L[l])\n", "N , Q = map(int, input().split())\nS = input()\n\nl = [0]*Q\nr = [0]*Q\n\ncntac = [0]\n\nfor t in range(1,N) :\n\tif S[t-1:t+1] == \"AC\":\n\t\tcntac.append(cntac[t-1]+1)\n\telse :\n\t\tcntac.append(cntac[t-1])\n\nfor i in range(Q) :\n   l[i] , r[i] = map(int, input().split())\n   \n   print(cntac[r[i]-1]-cntac[l[i]-1])\n", "n, q = map(int, input().split())\ns = input()\nss = [0]*n\ncnt = 0\n\nfor i in range(n-1):\n\tif s[i] == 'A' and s[i+1] == 'C':\n\t\tcnt +=1    \n\t\tss[i+1] += cnt    \n\telse:\n\t\tss[i+1] = ss[i]\n\nfor i in range(q):\n\tl, r = map(int, input().split())\n\tprint(ss[r-1]-ss[l-1])\n", "n, q = map(int, input().split())\ns = list(input())\nnum = [0] * n\ncount = 0\nfor i in range(n - 1):\n\tif s[i] == 'A' and s[i + 1] == 'C':\n\t\tcount += 1\n\tnum[i + 1] = count\nfor i in range(q):\n\tl, r = map(int, input().split())\n\tans = num[r - 1] - num[l - 1]\n\tprint(ans)\n", "N, Q = map(int, input().split())\nS = input()\nt = [0 for _ in range(len(S)+1)]\n\nfor i in range(N):\n\tt[i+1] = t[i] + (1 if S[i:(i+2)] == \"AC\" else 0)\n\t\nfor i in range(Q):\n\tl, r = map(int, input().split())\n\tprint(t[r-1]-t[l-1])\n", "N,Q=map(int,input().split())\nS=input()\nB=[0]*N\nfor i in range(1,N):\n\tif S[i-1]=='A' and S[i]=='C':\n\t\tB[i]=B[i-1]+1\n\telse:\n\t\tB[i]=B[i-1]\nfor i in range(Q):\n\tl,r=map(int,input().split())\n\tprint(B[r-1]-B[l-1])\n", "n,q = map(int, input().split())\ns = input()\n\nnums = [0]*n\nfor i in range(1,n):\n\tif s[i] == \"C\":\n\t\tif s[i-1] == \"A\": nums[i] += 1\n\tnums[i] += nums[i-1]\n\t\nfor _ in range(q):\n\tl,r = map(lambda x: int(x)-1, input().split())\n\tprint(nums[r]-nums[l])\n", "n,q=list(map(int,input().split()))\ns=input()\ncon=[0]\nc=False\nfor i in range(n):\n\tif s[i]=='A':\n\t\tc=True\n\t\tcon.append(con[-1])\n\t\tcontinue\n\tif c:\n\t\tif s[i]=='C':\n\t\t\tcon.append(con[-1]+1)\n\t\t\tc=False\n\t\t\tcontinue\n\t\telse:\n\t\t\tcon.append(con[-1])\n\t\t\tc=False\n\t\t\tcontinue\n\tcon.append(con[-1])    \nfor j in range(q):\n\tl,r=list(map(int,input().split()))\n\tprint((max(0,con[r]-con[l])))\n\n", "n,q=list(map(int,input().split()))\ns=input()\nlr=[list(map(int,input().split())) for i in range(q)]\n\nrui=[0]*(n+1)\ntmp=0\nfor i in range(n):\n\tif s[i-1] == 'A' and s[i] == 'C':\n\t\ttmp += 1\n\trui[i] = tmp\n\nfor l,r in lr:\n\tprint((rui[r-1] - rui[l-1]))\n", "N, Q = map(int, input().split())\nS = input()\ncnt = [0]*(N+1)\n\nfor i in range(1, N):\n\tif S[i - 1] == 'A' and S[i] == 'C':\n\t\tcnt[i + 1] = cnt[i] + 1\n\telse:\n\t\tcnt[i + 1] = cnt[i]\n\t\t\nfor i in range(Q):\n\tL, R = map(int, input().split())\n\tprint(cnt[R] - cnt[L])\n", "n,q=[int(i) for i in input().split()]\ns=input()\n\n\ndp=[0]*(n)\nans=0\nfor i in range(1,n):\n\tif s[i-1]==\"A\" and s[i]==\"C\":\n\t\tans=ans+1\n\tdp[i]=ans\n\nfor i in range(q):\n\tl,r=[int(i) for i in input().split()]\n\tprint((dp[r-1]-dp[l-1]))\n", "n, q = list(map(int, input().split()))\ns = input()\nls = [list(map(int, input().split())) for i in range(q)]\nd = [0]\npre = 0\nc = 0\n\nfor i in range(len(s)-1):\n\tif s[i:i+2] == 'AC':\n\t\td.append(d[i]+1)\n\telse:\n\t\td.append(d[i])\n\n\n\nfor start, end in ls:\n\tprint((d[end-1]-d[start-1]))\n", "n,q=map(int,input().split())\ns=list(map(str,input()))\narr=[list(map(int,input().split())) for j in range(q)]\n\nresult=[0]\ncnt=0\nfor i in range(1,len(s)):\n\tif s[i-1]+s[i]==\"AC\":\n\t\tcnt+=1\n\t\tresult.append(cnt)\n\telif s[i-1]+s[i]!=\"AC\":\n\t\tresult.append(cnt)\n        \n\nfor a,b in arr:\n\tprint(result[b-1]-result[a-1])\n", "N, Q = list(map(int, input().split()))\nS = input()\nt = [0] * (N+1)\nfor i in range(N):\n\tt[i+1] = t[i] + (1 if S[i:i+2] == 'AC' else 0)\nfor i in range(Q):\n\tl,r = list(map(int, input().split()))\n\tprint((t[r-1] - t[l-1])) \n\n", "n,q=list(map(int,input().split()))\ns=input()\nl=[0 for i in range(len(s))]\n\nfor i in range(len(s)-1):\n\tif s[i]==\"A\" and s[i+1]==\"C\":\n\t\tl[i+1]=l[i]+1\n\telse:\n\t\tl[i+1]=l[i]\n\n\nfor i in range(q):\n\tleft,right=list(map(int,input().split()))\n\tprint((l[right-1]-l[left-1]))\n", "N, Q = map(int, input().split())\nS = input()\n\na = [0] * N\nc = 0\n\nfor i in range(N-1):\n\tif S[i:i+2] == \"AC\":\n\t\tc += 1\n\ta[i + 1] = c\n\nl = [0] * Q\nr = [0] * Q\nfor i in range(Q):\n\tl[i], r[i] = map(int, input().split())\nfor i in range(Q):\n\tprint(a[r[i] - 1] - a[l[i] - 1])\n", "n, q = map(int, input().split())\ns = input()\nac = {1:0, }\nk = 0\nfor i in range(1, n):\n\tif s[i - 1:i + 1] == 'AC':\n\t\tk += 1\n\tac[i + 1] = k\nans = []\nfor i in range(q):\n\tl, r = map(int, input().split())\n\tans.append(ac[r] - ac[l])\nfor e in ans:\n\tprint(e)\n", "n, q = list(map(int, input().split()))\ns = input()\nsl = [0]\nfor i in range(1, n):\n\tif s[i-1:i+1] == 'AC':\n\t\tsl.append(sl[i-1]+1)\n\telse:\n\t\tsl.append(sl[i-1])\n\nfor _ in range(q):\n\tl, r = list(map(int, input().split()))\n\tprint((sl[r-1]-sl[l-1]))\n", "from bisect import bisect_left, bisect_right\n\ndef main():\n\tN, Q = list(map(int, input().split()))\n\tS = input()\n\ts = []\n\tfor i in range(N-1):\n\t\tif S[i] + S[i+1] == 'AC':\n\t\t\ts.append(i)\n\t\n\tfor q in range(Q):\n\t\tl, r = list(map(int, input().split()))\n\t\tans = bisect_left(s, r-1) - bisect_left(s, l-1)\n\t\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import numpy as np\n\nN, Q = list(map(int, input().split()))\nS = input()\n\ns_l = np.zeros(N + 1)\nfor i, s in enumerate(S):\n\tif i + 1 < N and s == \"A\" and S[i + 1] == \"C\":\n\t\ts_l[i + 1] = s_l[i] + 1\n\telse:\n\t\ts_l[i + 1] = s_l[i]\n\nfor _ in range(Q):\n\tl, r = list(map(int, input().split()))\n\tprint((int(s_l[r - 1] - s_l[l - 1])))\n", "n,q = list(map(int,input().split()))\ns = input()\n\nlr = [list(map(int,input().split())) for i in range(q)]\n\nacm = [0]*(n+1)\n\nfor i in range(1,n):\n\tif(s[i-1]=='A' and s[i]=='C'):\n\t\tacm[i] = acm[i-1] + 1 \n\telse:\n\t\tacm[i]=acm[i-1]\n\nacm[n] = acm[n-1] \n\nfor lis in lr:\n\tl,r =lis\n\tprint((acm[r-1]-acm[l-1]))\n", "n,q = list(map(int,input().split()))\ns = input()\n\nd = [0]*100100\ne = [0]*100100\n\nfor i in range(0,n-1):\n\tif s[i] == 'A' and s[i+1]=='C':\n\t\td[i+1]=1\n\nfor i in range(0,n+1):\n\td[i+1] += d[i]\n\nfor i in range(0,q):\n\tl,r = list(map(int,input().split()))\n\tl-=1\n\tlefNum = d[l]\n\t#if l > 0 and s[l-1] == 'A' and s[l] == 'C':\n\t#\tlefNum-=1\n\n\trigNum = d[r]\n\tif r < n and s[r-1] == 'A' and s[r] =='C':\n\t\trigNum-=1\n\t#r-=1\n\tans = rigNum - lefNum\n\t#print(l,r,ans)\n\tprint(ans)\n\n#for i in range(0,n):\n#\tprint(i,d[i])\n#\tprint(d[r]-d[l])\n", "n,q = map(int, input().split())\ns = input()\na = [0]*n\nfor i in range(n):\n\tif s[i-1]==\"A\" and s[i]==\"C\":\n\t\ta[i] = a[i-1]+1\n\telse:\n\t\ta[i] = a[i-1]\nfor i in range(q):\n\tl,r = map(int, input().split())\n\tprint(a[r-1]-a[l-1])\n", "N, Q = list(map(int, input().split()))\nS = input()\n\n# 累積和 s を計算\nc = [0 for _ in range(N + 1)]\nfor i in range(1, N):\n\ta = 0\n\tif S[i-1:i+1] == 'AC':\n\t\ta = 1\n\tc[i + 1] = c[i] + a\n\n# 各クエリに答える\nfor _ in range(Q):\n\tl, r = list(map(int, input().split()))\n\tl -= 1\n\tresult = c[r] - c[l]\n\tif l > 0 and S[l-1:l+1] == 'AC':\n\t\tresult -= 1\n\tprint(result)\n\t\n", "from bisect import bisect_left\nn, q = map(int, input().split())\ns = list(input())\nL = []\nfor i in range(n - 1):\n\tif s[i] == \"A\" and s[i + 1] == \"C\":\n\t\tL.append(i)\nans = []\nfor i in range(q):\n\tl, r = map(int, input().split())\n\tl, r = l - 1, r - 1\n\tst = bisect_left(L, l)\n\tfi = bisect_left(L, r)\n\tans.append(fi - st)\n\nfor i in ans:\n\tprint(i)\n", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n\tN, Q = list(map(int, readline().split()))\n\tS = readline().strip()\n\t(*LR,) = list(map(int, read().split()))\n\n\tvec = [0] * (N + 1)\n\tfor i in range(N - 1):\n\t\tvec[i + 1] = vec[i]\n\t\tif S[i] == 'A' and S[i + 1] == 'C':\n\t\t\tvec[i + 1] += 1\n\n\tans = [0] * Q\n\tfor i, (l, r) in enumerate(zip(*[iter(LR)] * 2)):\n\t\tl -= 1\n\t\tr -= 1\n\t\tans[i] = vec[r] - vec[l]\n\n\tprint(('\\n'.join(map(str, ans))))\n\treturn\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n,q = map(int,input().split())\ns = input()\ns = s.replace('AC','ac')\nt = [0] * n\nr = 0\nfor i in range(n):\n\tif s[i] == 'c':\n\t\tr += 1\n\tt[i] = r\nfor i in range(q):\n\tl,r = map(int,input().split())\n\tprint(t[r-1]-t[l-1])\n"], "id": "id6902"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6902", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["string", 0], ["s", 0], ["of", 0], ["length", 0], ["n", 0], ["consisting", 0], ["of", 0], ["a", 0], ["c", 0], ["g", 0], ["and", 0], ["t", 0], ["answer", 0], ["the", 0], ["following", 0], ["q", 0], ["queries", 0], ["query", 1], ["i", 1], ["1", 1], ["leq", 1], ["i", 1], ["leq", 1], ["q", 1], ["you", 1], ["will", 1], ["be", 1], ["given", 1], ["integers", 1], ["l", 1], ["i", 1], ["and", 1], ["r", 1], ["i", 1], ["1", 1], ["leq", 1], ["l", 1], ["i", 1], ["r", 1], ["i", 1], ["leq", 1], ["n", 1], ["consider", 1], ["the", 1], ["substring", 1], ["of", 1], ["s", 1], ["starting", 1], ["at", 1], ["index", 1], ["l", 1], ["i", 1], ["and", 1], ["ending", 1], ["at", 1], ["index", 1], ["r", 1], ["i", 1], ["both", 1], ["inclusive", 1], ["in", 0], ["this", 0], ["string", 0], ["how", 0], ["many", 0], ["times", 0], ["does", 0], ["ac", 0], ["occurs", 0], ["as", 0], ["a", 0], ["substring", 0], ["notes", 0], ["a", 1], ["substring", 1], ["of", 1], ["a", 1], ["string", 1], ["t", 1], ["is", 1], ["a", 1], ["string", 1], ["obtained", 1], ["by", 1], ["removing", 1], ["zero", 1], ["or", 1], ["more", 1], ["characters", 1], ["from", 1], ["the", 1], ["beginning", 1], ["and", 1], ["the", 1], ["end", 1], ["of", 1], ["t", 1], ["for", 1], ["example", 1], ["the", 1], ["substrings", 1], ["of", 1], ["atcoder", 1], ["include", 0], ["tco", 0], ["at", 0], ["coder", 0], ["atcoder", 0], ["and", 0], ["the", 0], ["empty", 0], ["string", 0], ["but", 0], ["not", 0], ["ac", 0], ["constraints", 0], ["2", 0], ["leq", 0], ["n", 0], ["leq", 0], ["10", 0], ["5", 0], ["1", 0], ["leq", 0], ["q", 0], ["leq", 0], ["10", 0], ["5", 0], ["s", 1], ["is", 1], ["a", 1], ["string", 1], ["of", 1], ["length", 0], ["n", 0], ["each", 0], ["character", 0], ["in", 0], ["s", 0], ["is", 0], ["a", 0], ["c", 0], ["g", 0], ["or", 0], ["t", 0], ["1", 0], ["leq", 0], ["l", 0], ["i", 0], ["r", 0], ["i", 0], ["leq", 0], ["n", 0], ["input", 0], ["input", 0], ["is", 0], ["given", 0], ["from", 0], ["standard", 0], ["input", 0], ["in", 0], ["the", 0], ["following", 0], ["format", 0], ["n", 0], ["q", 0], ["s", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["l", 0], ["q", 0], ["r", 0], ["q", 0], ["output", 0], ["print", 1], ["q", 3], ["lines", 3], ["the", 3], ["i", 0], ["th", 0], ["line", 0], ["should", 0], ["contain", 0], ["the", 0], ["answer", 0], ["to", 0], ["the", 0], ["i", 0], ["th", 0], ["query", 0], ["sample", 0], ["input", 0], ["8", 0], ["3", 0], ["acactacg", 0], ["3", 0], ["7", 0], ["2", 0], ["3", 0], ["1", 0], ["8", 0], ["sample", 0], ["output", 0], ["2", 0], ["0", 0], ["3", 0], ["query", 1], ["1", 1], ["the", 1], ["substring", 1], ["of", 1], ["s", 1], ["starting", 1], ["at", 1], ["index", 1], ["3", 1], ["and", 1], ["ending", 1], ["at", 1], ["index", 1], ["7", 1], ["is", 1], ["actac", 1], ["in", 1], ["this", 1], ["string", 1], ["ac", 1], ["occurs", 1], ["twice", 1], ["as", 1], ["a", 1], ["substring", 1], ["query", 1], ["2", 1], ["the", 1], ["substring", 1], ["of", 1], ["s", 1], ["starting", 1], ["at", 1], ["index", 1], ["2", 1], ["and", 1], ["ending", 1], ["at", 1], ["index", 1], ["3", 1], ["is", 1], ["ca", 1], ["in", 1], ["this", 1], ["string", 1], ["ac", 1], ["occurs", 1], ["zero", 1], ["times", 1], ["as", 1], ["a", 1], ["substring", 1], ["query", 1], ["3", 1], ["the", 1], ["substring", 1], ["of", 1], ["s", 1], ["starting", 1], ["at", 1], ["index", 1], ["1", 1], ["and", 1], ["ending", 1], ["at", 1], ["index", 1], ["8", 1], ["is", 0], ["acactacg", 0], ["in", 0], ["this", 0], ["string", 0], ["ac", 0], ["occurs", 0], ["three", 0], ["times", 0], ["as", 0], ["a", 0], ["substring", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5154639175257731, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5085910652920962, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.693069306930693, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.693069306930693, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5154639175257731, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5085910652920962, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.693069306930693, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.693069306930693, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["def", 0], ["main", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["str", 0], ["input", 0], ["sum", 0], ["array", 0], ["0", 0], ["100000", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["i", 0], ["1", 0], ["len", 0], ["s", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["sum", 0], ["array", 0], ["i", 0], ["1", 0], ["i", 0], ["2", 0], ["else", 0], ["i", 0], ["1", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sum", 0], ["sum", 0], ["array", 0], ["i", 0], ["sum", 0], ["array", 0], ["i", 0], ["sum", 0], ["print", 0], ["print", 0], ["sum", 0], ["array", 0], ["ans", 0], ["array", 0], ["0", 0], ["q", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["sum", 0], ["sum", 0], ["array", 0], ["l", 0], ["1", 0], ["if", 0], ["l", 0], ["1", 0], ["l", 0], ["sum", 0], ["0", 0], ["elif", 0], ["sum", 0], ["array", 0], ["l", 0], ["2", 0], ["l", 0], ["sum", 0], ["l", 0], ["sum", 0], ["sum", 0], ["array", 0], ["l", 0], ["2", 0], ["r", 0], ["sum", 0], ["sum", 0], ["array", 0], ["r", 0], ["1", 0], ["if", 0], ["sum", 0], ["array", 0], ["r", 0], ["2", 0], ["r", 0], ["sum", 0], ["r", 0], ["sum", 0], ["sum", 0], ["array", 0], ["r", 0], ["2", 0], ["ans", 0], ["array", 0], ["q", 0], ["r", 0], ["sum", 0], ["l", 0], ["sum", 0], ["for", 0], ["ans", 0], ["in", 0], ["ans", 0], ["array", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["coding", 0], ["utf", 0], ["8", 0], ["created", 0], ["on", 0], ["mon", 0], ["sep", 0], ["14", 0], ["00", 0], ["57", 0], ["13", 0], ["2020", 0], ["author", 0], ["liang", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["s", 0], ["a", 0], ["d", 0], ["0", 0], ["n", 0], ["1", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["count", 0], ["1", 0], ["print", 0], ["i", 0], ["d", 0], ["i", 0], ["1", 0], ["count", 0], ["print", 0], ["lis", 0], ["print", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["d", 0], ["r", 0], ["1", 0], ["d", 0], ["l", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["input", 0], ["a", 0], ["0", 0], ["n", 0], ["r", 0], ["0", 0], ["for", 0], ["ii", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["ii", 0], ["a", 0], ["and", 0], ["s", 0], ["ii", 0], ["1", 0], ["c", 0], ["r", 0], ["1", 0], ["a", 0], ["ii", 0], ["r", 0], ["print", 0], ["a", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["s", 0], ["l", 0], ["1", 0], ["r", 0], ["print", 0], ["a", 0], ["r", 0], ["2", 0], ["a", 0], ["l", 0], ["2", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["input", 0], ["m", 0], ["0", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["a", 0], ["if", 0], ["n", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["m", 0], ["i", 0], ["m", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["m", 0], ["i", 0], ["m", 0], ["i", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["b", 0], ["s", 0], ["t", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["m", 0], ["t", 0], ["1", 0], ["m", 0], ["s", 0], ["1", 0], ["n", 0], ["q", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lst", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["x", 0], ["1", 0], ["x", 0], ["1", 0], ["ac", 0], ["lst", 0], ["append", 0], ["lst", 0], ["x", 0], ["1", 0], ["1", 0], ["else", 0], ["lst", 0], ["append", 0], ["lst", 0], ["x", 0], ["1", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["lst", 0], ["r", 0], ["1", 0], ["lst", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["cnt", 0], ["0", 0], ["lst", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["cnt", 0], ["1", 0], ["lst", 0], ["append", 0], ["cnt", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["print", 0], ["lst", 0], ["lr", 0], ["i", 0], ["1", 0], ["1", 0], ["lst", 0], ["lr", 0], ["i", 0], ["0", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["dp", 0], ["0", 0], ["n", 0], ["temp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["temp", 0], ["1", 0], ["dp", 0], ["i", 0], ["temp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["dp", 0], ["r", 0], ["1", 0], ["dp", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["t", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["if", 0], ["t", 0], ["ac", 0], ["cnt", 0], ["i", 0], ["1", 0], ["cnt", 0], ["i", 0], ["1", 0], ["else", 0], ["cnt", 0], ["i", 0], ["1", 0], ["cnt", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["cnt", 0], ["y", 0], ["1", 0], ["cnt", 0], ["x", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["num", 0], ["list", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["cnt", 0], ["0", 0], ["cnt", 0], ["list", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["cnt", 0], ["1", 0], ["cnt", 0], ["list", 0], ["append", 0], ["cnt", 0], ["else", 0], ["cnt", 0], ["list", 0], ["append", 0], ["cnt", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["print", 0], ["cnt", 0], ["list", 0], ["num", 0], ["list", 0], ["i", 0], ["1", 0], ["1", 0], ["cnt", 0], ["list", 0], ["num", 0], ["list", 0], ["i", 0], ["0", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["n", 0], ["tmp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["tmp", 0], ["1", 0], ["l", 0], ["i", 0], ["tmp", 0], ["print", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["l", 0], ["l", 0], ["1", 0], ["l", 0], ["r", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["累積和的な発想", 0], ["t", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["t", 0], ["i", 0], ["1", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["r", 0], ["1", 0], ["t", 0], ["l", 0], ["1", 0], ["author", 0], ["taichicchi", 0], ["created", 0], ["12", 0], ["09", 0], ["2020", 0], ["19", 0], ["26", 0], ["19", 0], ["import", 0], ["sys", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["cum", 0], ["ls", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["cum", 0], ["ls", 0], ["append", 0], ["cum", 0], ["ls", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["cum", 0], ["ls", 0], ["append", 0], ["cum", 0], ["ls", 0], ["i", 0], ["1", 0], ["print", 0], ["cum", 0], ["ls", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["cum", 0], ["ls", 0], ["r", 0], ["1", 0], ["cum", 0], ["ls", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["cnt", 0], ["append", 0], ["cnt", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["count", 0], ["ac", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["cnt", 0], ["r", 0], ["cnt", 0], ["l", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["else", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["a", 0], ["r", 0], ["1", 0], ["a", 0], ["l", 0], ["1", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["len", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["l", 0], ["i", 0], ["1", 0], ["1", 0], ["l", 0], ["0", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["s", 0], ["1", 0], ["l", 0], ["i", 0], ["l", 0], ["i", 0], ["1", 0], ["print", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["l", 0], ["b", 0], ["l", 0], ["a", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ans", 0], ["a", 0], ["0", 0], ["10", 0], ["5", 0], ["1", 0], ["add", 0], ["0", 0], ["check", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["check", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["add", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["check", 0], ["true", 0], ["else", 0], ["check", 0], ["false", 0], ["a", 0], ["i", 0], ["add", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["b", 0], ["c", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["append", 0], ["a", 0], ["c", 0], ["1", 0], ["a", 0], ["b", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["print", 0], ["ans", 0], ["i", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["li", 0], ["0", 0], ["a", 0], ["false", 0], ["ans", 0], ["0", 0], ["import", 0], ["copy", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["true", 0], ["if", 0], ["s", 0], ["i", 0], ["c", 0], ["ans", 0], ["1", 0], ["a", 0], ["false", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["a", 0], ["true", 0], ["li", 0], ["append", 0], ["copy", 0], ["copy", 0], ["ans", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["q", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["li", 0], ["b", 0], ["li", 0], ["a", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["lr", 0], ["i", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["r", 0], ["lr", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["print", 0], ["lr", 0], ["print", 0], ["l", 0], ["print", 0], ["r", 0], ["c", 0], ["0", 0], ["n", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["c", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["else", 0], ["c", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["c", 0], ["i", 0], ["s", 0], ["i", 0], ["count", 0], ["ac", 0], ["countを使わずにiまでの合計値をリスト化", 0], ["print", 0], ["c", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["zip", 0], ["l", 0], ["r", 0], ["print", 0], ["sum", 0], ["c", 0], ["j", 0], ["sum", 0], ["c", 0], ["i", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["c", 0], ["j", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["合計値を利用してsumを使わずに差を表示して計算減させる", 0], ["リストを要素ごとに分けるのは初めにやっておいて大丈夫", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["else", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["r", 0], ["1", 0], ["t", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["input", 0], ["lsline", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["lsline", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lsac", 0], ["0", 0], ["0", 0], ["ac", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["ac", 0], ["1", 0], ["lsac", 0], ["append", 0], ["ac", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["print", 0], ["lsac", 0], ["lsline", 0], ["i", 0], ["1", 0], ["lsac", 0], ["lsline", 0], ["i", 0], ["0", 0], ["import", 0], ["sys", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["n", 0], ["1", 0], ["wasa", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["wasa", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["cnt", 0], ["i", 0], ["1", 0], ["cnt", 0], ["i", 0], ["1", 0], ["wasa", 0], ["false", 0], ["elif", 0], ["s", 0], ["i", 0], ["a", 0], ["cnt", 0], ["i", 0], ["1", 0], ["cnt", 0], ["i", 0], ["wasa", 0], ["true", 0], ["else", 0], ["cnt", 0], ["i", 0], ["1", 0], ["cnt", 0], ["i", 0], ["wasa", 0], ["false", 0], ["print", 0], ["cnt", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["cnt", 0], ["r", 0], ["cnt", 0], ["l", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["c", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["count", 0], ["1", 0], ["c", 0], ["append", 0], ["count", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["l", 0], ["1", 0], ["print", 0], ["c", 0], ["r", 0], ["2", 0], ["0", 0], ["else", 0], ["print", 0], ["c", 0], ["r", 0], ["2", 0], ["c", 0], ["l", 0], ["2", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["cusumlist", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["cusumlist", 0], ["append", 0], ["cusumlist", 0], ["i", 0], ["1", 0], ["else", 0], ["cusumlist", 0], ["append", 0], ["cusumlist", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["cusumlist", 0], ["r", 0], ["1", 0], ["cusumlist", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["lr", 0], ["i", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["r", 0], ["lr", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["print", 0], ["lr", 0], ["print", 0], ["l", 0], ["print", 0], ["r", 0], ["c", 0], ["0", 0], ["n", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["c", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["else", 0], ["c", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["c", 0], ["i", 0], ["s", 0], ["i", 0], ["count", 0], ["ac", 0], ["print", 0], ["c", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["zip", 0], ["l", 0], ["r", 0], ["print", 0], ["sum", 0], ["c", 0], ["j", 0], ["sum", 0], ["c", 0], ["i", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["c", 0], ["j", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["累積和的な発想", 0], ["t", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["t", 0], ["i", 0], ["1", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["r", 0], ["1", 0], ["t", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["else", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["r", 0], ["1", 0], ["t", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["csum", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["csum", 0], ["append", 0], ["csum", 0], ["1", 0], ["1", 0], ["else", 0], ["csum", 0], ["append", 0], ["csum", 0], ["1", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["lr", 0], ["print", 0], ["csum", 0], ["r", 0], ["1", 0], ["csum", 0], ["l", 0], ["1", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["x", 0], ["np", 0], ["zeros", 0], ["n", 0], ["1", 0], ["dtype", 0], ["int64", 0], ["tmp", 0], ["1", 0], ["いま何文字目か", 0], ["while", 0], ["s", 0], ["find", 0], ["ac", 0], ["0", 0], ["and", 0], ["tmp", 0], ["n", 0], ["i", 0], ["s", 0], ["find", 0], ["ac", 0], ["x", 0], ["tmp", 0], ["i", 0], ["1", 0], ["ac", 0], ["の", 0], ["a", 0], ["がある場所に", 0], ["1", 0], ["を加算", 0], ["s", 0], ["s", 0], ["i", 0], ["2", 0], ["2文字進める", 0], ["tmp", 0], ["i", 0], ["2", 0], ["sum", 0], ["x", 0], ["cumsum", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["の右隣の", 0], ["c", 0], ["まで含まれていないといけないので、", 0], ["r文字目ではなく、r", 0], ["1文字目までで考える", 0], ["print", 0], ["sum", 0], ["r", 0], ["1", 0], ["sum", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["d", 0], ["0", 0], ["100100", 0], ["e", 0], ["0", 0], ["100100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["d", 0], ["i", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["d", 0], ["i", 0], ["1", 0], ["d", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["1", 0], ["lefnum", 0], ["d", 0], ["l", 0], ["rignum", 0], ["d", 0], ["r", 0], ["if", 0], ["r", 0], ["n", 0], ["and", 0], ["s", 0], ["r", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["r", 0], ["c", 0], ["rignum", 0], ["1", 0], ["ans", 0], ["rignum", 0], ["lefnum", 0], ["print", 0], ["ans", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["c", 0], ["append", 0], ["c", 0], ["1", 0], ["1", 0], ["else", 0], ["c", 0], ["append", 0], ["c", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["c", 0], ["r", 0], ["1", 0], ["c", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["0", 0], ["for", 0], ["l", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["l", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["l", 0], ["c", 0], ["a", 0], ["append", 0], ["a", 0], ["l", 0], ["1", 0], ["else", 0], ["a", 0], ["append", 0], ["a", 0], ["l", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["q", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["a", 0], ["y", 0], ["a", 0], ["x", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["else", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["r", 0], ["1", 0], ["t", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["f", 0], ["0", 0], ["len", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["f", 0], ["i", 0], ["1", 0], ["f", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["else", 0], ["0", 0], ["print", 0], ["i", 0], ["f", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["lr", 0], ["print", 0], ["f", 0], ["r", 0], ["1", 0], ["f", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["total", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["total", 0], ["i", 0], ["total", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["total", 0], ["i", 0], ["1", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["count", 0], ["total", 0], ["r", 0], ["total", 0], ["l", 0], ["print", 0], ["count", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["c", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["c", 0], ["i", 0], ["c", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["ac", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["print", 0], ["c", 0], ["x", 0], ["1", 0], ["1", 0], ["c", 0], ["x", 0], ["0", 0], ["1", 0], ["入力", 0], ["n", 0], ["m", 0], ["int", 0], ["整数", 0], ["def", 0], ["input2", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["入力", 0], ["n1", 0], ["n2", 0], ["nk", 0], ["int", 0], ["整数配列", 0], ["def", 0], ["input", 0], ["array", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["q", 0], ["input2", 0], ["b", 0], ["str", 0], ["input", 0], ["lr", 0], ["input", 0], ["array", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["e", 0], ["a", 0], ["c", 0], ["g", 0], ["t", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["1文字目〜n文字目までに出現する", 0], ["ac", 0], ["数の累積和", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["else", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["for", 0], ["lr", 0], ["in", 0], ["lr", 0], ["st", 0], ["lr", 0], ["0", 0], ["1", 0], ["fi", 0], ["lr", 0], ["1", 0], ["1", 0], ["print", 0], ["t", 0], ["fi", 0], ["t", 0], ["st", 0], ["n", 0], ["q", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ainac", 0], ["0", 0], ["cinac", 0], ["0", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["cinac", 0], ["append", 0], ["c", 0], ["c", 0], ["1", 0], ["ainac", 0], ["append", 0], ["c", 0], ["else", 0], ["ainac", 0], ["append", 0], ["c", 0], ["cinac", 0], ["append", 0], ["c", 0], ["else", 0], ["ainac", 0], ["append", 0], ["c", 0], ["cinac", 0], ["append", 0], ["c", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["right", 0], ["min", 0], ["ainac", 0], ["r", 0], ["cinac", 0], ["r", 0], ["left", 0], ["max", 0], ["ainac", 0], ["l", 0], ["1", 0], ["cinac", 0], ["l", 0], ["1", 0], ["ans", 0], ["append", 0], ["str", 0], ["right", 0], ["left", 0], ["print", 0], ["n", 0], ["join", 0], ["ans", 0], ["import", 0], ["sys", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["6", 0], ["import", 0], ["bisect", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["decorator", 0], ["import", 0], ["stop", 0], ["watch", 0], ["stop", 0], ["watch", 0], ["def", 0], ["solve", 0], ["n", 0], ["q", 0], ["s", 0], ["lri", 0], ["cumulative", 0], ["sum", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["tmp", 0], ["cumulative", 0], ["sum", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["tmp", 0], ["1", 0], ["cumulative", 0], ["sum", 0], ["append", 0], ["tmp", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["lri", 0], ["print", 0], ["cumulative", 0], ["sum", 0], ["r", 0], ["cumulative", 0], ["sum", 0], ["l", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lri", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["solve", 0], ["n", 0], ["q", 0], ["s", 0], ["lri", 0], ["test", 0], ["from", 0], ["random", 0], ["import", 0], ["randint", 0], ["from", 0], ["func", 0], ["import", 0], ["random", 0], ["str", 0], ["n", 0], ["q", 0], ["10", 0], ["5", 0], ["10", 0], ["5", 0], ["s", 0], ["random", 0], ["str", 0], ["n", 0], ["acgt", 0], ["lri", 0], ["sorted", 0], ["randint", 0], ["1", 0], ["n", 0], ["for", 0], ["in", 0], ["range", 0], ["2", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["solve", 0], ["n", 0], ["q", 0], ["s", 0], ["lri", 0], ["starting", 0], ["point", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["cum", 0], ["0", 0], ["n", 0], ["1", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["cnt", 0], ["1", 0], ["cum", 0], ["i", 0], ["cnt", 0], ["ans", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["lr", 0], ["result", 0], ["cum", 0], ["r", 0], ["1", 0], ["cum", 0], ["l", 0], ["1", 0], ["ans", 0], ["append", 0], ["result", 0], ["print", 0], ["ans", 0], ["sep", 0], ["n", 0], ["n", 0], ["q", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["cs", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["ac", 0], ["cs", 0], ["append", 0], ["cs", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["cs", 0], ["append", 0], ["cs", 0], ["i", 0], ["1", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["print", 0], ["cs", 0], ["r", 0], ["1", 0], ["cs", 0], ["l", 0], ["1", 0], ["from", 0], ["itertools", 0], ["import", 0], ["accumulate", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["ac", 0], ["list", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["ac", 0], ["list", 0], ["i", 0], ["1", 0], ["ac", 0], ["sum", 0], ["list", 0], ["accumulate", 0], ["ac", 0], ["list", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["lr", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["if", 0], ["l", 0], ["0", 0], ["print", 0], ["ac", 0], ["sum", 0], ["r", 0], ["1", 0], ["continue", 0], ["print", 0], ["ac", 0], ["sum", 0], ["r", 0], ["1", 0], ["ac", 0], ["sum", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["input", 0], ["class", 0], ["bit", 0], ["def", 0], ["init", 0], ["self", 0], ["n", 0], ["self", 0], ["n", 0], ["n", 0], ["self", 0], ["a", 0], ["0", 0], ["n", 0], ["def", 0], ["add", 0], ["self", 0], ["x", 0], ["v", 0], ["x", 0], ["1", 0], ["while", 0], ["x", 0], ["self", 0], ["n", 0], ["self", 0], ["a", 0], ["x", 0], ["v", 0], ["x", 0], ["x", 0], ["x", 0], ["def", 0], ["show", 0], ["self", 0], ["print", 0], ["self", 0], ["a", 0], ["1", 0], ["def", 0], ["sum", 0], ["self", 0], ["x", 0], ["ans", 0], ["0", 0], ["while", 0], ["x", 0], ["0", 0], ["ans", 0], ["self", 0], ["a", 0], ["x", 0], ["x", 0], ["x", 0], ["x", 0], ["return", 0], ["ans", 0], ["def", 0], ["sub", 0], ["sum", 0], ["self", 0], ["x", 0], ["y", 0], ["return", 0], ["self", 0], ["sum", 0], ["y", 0], ["self", 0], ["sum", 0], ["x", 0], ["prev", 0], ["0", 0], ["bit", 0], ["bit", 0], ["n", 0], ["for", 0], ["i", 0], ["val", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["prev", 0], ["a", 0], ["and", 0], ["val", 0], ["c", 0], ["bit", 0], ["add", 0], ["i", 0], ["1", 0], ["1", 0], ["prev", 0], ["val", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["print", 0], ["bit", 0], ["sub", 0], ["sum", 0], ["x", 0], ["y", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["n", 0], ["q", 0], ["s", 0], ["input", 0], ["v", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["v", 0], ["i", 0], ["1", 0], ["m", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["m", 0], ["i", 0], ["1", 0], ["m", 0], ["i", 0], ["v", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["1", 0], ["ans", 0], ["0", 0], ["if", 0], ["r", 0], ["l", 0], ["2", 0], ["ans", 0], ["1", 0], ["else", 0], ["ans", 0], ["m", 0], ["r", 0], ["m", 0], ["l", 0], ["if", 0], ["v", 0], ["r", 0], ["1", 0], ["1", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["rstrip", 0], ["split", 0], ["s", 0], ["input", 0], ["rstrip", 0], ["a", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["i", 0], ["0", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["rstrip", 0], ["split", 0], ["print", 0], ["a", 0], ["r", 0], ["1", 0], ["a", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["else", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["r", 0], ["1", 0], ["t", 0], ["l", 0], ["1", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["s", 0], ["s", 0], ["replace", 0], ["n", 0], ["s", 0], ["list", 0], ["list", 0], ["s", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["i", 0], ["r", 0], ["i", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ac", 0], ["sum", 0], ["list", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["list", 0], ["tmp", 0], ["ac", 0], ["sum", 0], ["0", 0], ["for", 0], ["i", 0], ["s", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["list", 0], ["if", 0], ["tmp", 0], ["s", 0], ["ac", 0], ["ac", 0], ["sum", 0], ["1", 0], ["ac", 0], ["sum", 0], ["list", 0], ["i", 0], ["ac", 0], ["sum", 0], ["tmp", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["index", 0], ["l", 0], ["i", 0], ["r", 0], ["index", 0], ["r", 0], ["i", 0], ["l", 0], ["ac", 0], ["ac", 0], ["sum", 0], ["list", 0], ["l", 0], ["index", 0], ["1", 0], ["r", 0], ["ac", 0], ["ac", 0], ["sum", 0], ["list", 0], ["r", 0], ["index", 0], ["1", 0], ["print", 0], ["r", 0], ["ac", 0], ["l", 0], ["ac", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["cum", 0], ["sum", 0], ["0", 0], ["n", 0], ["count", 0], ["ac", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["ac", 0], ["count", 0], ["ac", 0], ["i", 0], ["1", 0], ["2", 0], ["cum", 0], ["sum", 0], ["i", 0], ["1", 0], ["2", 0], ["cum", 0], ["sum", 0], ["i", 0], ["1", 0], ["cum", 0], ["sum", 0], ["i", 0], ["cum", 0], ["sum", 0], ["i", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["l", 0], ["1", 0], ["r", 0], ["r", 0], ["1", 0], ["print", 0], ["cum", 0], ["sum", 0], ["r", 0], ["2", 0], ["cum", 0], ["sum", 0], ["l", 0], ["2", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["n", 0], ["s", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["tmp", 0], ["0", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["tmp", 0], ["1", 0], ["ans", 0], ["i", 0], ["1", 0], ["ans", 0], ["i", 0], ["tmp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["ans", 0], ["r", 0], ["1", 0], ["ans", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["c", 0], ["append", 0], ["c", 0], ["1", 0], ["1", 0], ["else", 0], ["c", 0], ["append", 0], ["c", 0], ["1", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["lr", 0], ["print", 0], ["c", 0], ["r", 0], ["1", 0], ["c", 0], ["l", 0], ["1", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["moji", 0], ["str", 0], ["input", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["moji", 0], ["i", 0], ["a", 0], ["and", 0], ["moji", 0], ["i", 0], ["1", 0], ["c", 0], ["ans", 0], ["append", 0], ["ans", 0], ["i", 0], ["1", 0], ["else", 0], ["ans", 0], ["append", 0], ["ans", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["st", 0], ["sp", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["ans", 0], ["sp", 0], ["1", 0], ["ans", 0], ["st", 0], ["1", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["import", 0], ["import", 0], ["math", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["s", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["s", 0], ["i", 0], ["1", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["lr", 0], ["print", 0], ["s", 0], ["r", 0], ["1", 0], ["s", 0], ["l", 0], ["1", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["ac", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["ac", 0], ["append", 0], ["i", 0], ["if", 0], ["ac", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["print", 0], ["0", 0], ["return", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["lr", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["li", 0], ["bisect", 0], ["left", 0], ["ac", 0], ["l", 0], ["ri", 0], ["bisect", 0], ["right", 0], ["ac", 0], ["r", 0], ["if", 0], ["li", 0], ["ri", 0], ["print", 0], ["0", 0], ["elif", 0], ["r", 0], ["ac", 0], ["ri", 0], ["1", 0], ["print", 0], ["ri", 0], ["li", 0], ["else", 0], ["print", 0], ["ri", 0], ["li", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bl", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["al", 0], ["list", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["acnum", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["2", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["2", 0], ["i", 0], ["ac", 0], ["acnum", 0], ["i", 0], ["acnum", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["acnum", 0], ["i", 0], ["acnum", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["acnum", 0], ["r", 0], ["acnum", 0], ["l", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["a", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["lr", 0], ["print", 0], ["a", 0], ["r", 0], ["1", 0], ["a", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["cnt", 0], ["i", 0], ["cnt", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["cnt", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["cnt", 0], ["r", 0], ["1", 0], ["cnt", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["l", 0], ["r", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["append", 0], ["l", 0], ["r", 0], ["append", 0], ["r", 0], ["dp", 0], ["0", 0], ["n", 0], ["2", 0], ["i文字目から何個acがあるか", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["c", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["cnt", 0], ["1", 0], ["dp", 0], ["n", 0], ["i", 0], ["cnt", 0], ["print", 0], ["dp", 0], ["ans", 0], ["0", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["q", 0], ["ans", 0], ["dp", 0], ["l", 0], ["q", 0], ["dp", 0], ["r", 0], ["q", 0], ["1", 0], ["if", 0], ["r", 0], ["q", 0], ["n", 0], ["if", 0], ["s", 0], ["r", 0], ["q", 0], ["a", 0], ["and", 0], ["s", 0], ["r", 0], ["q", 0], ["1", 0], ["c", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["import", 0], ["bisect", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["ac", 0], ["a", 0], ["append", 0], ["i", 0], ["1", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["lr", 0], ["print", 0], ["bisect", 0], ["bisect", 0], ["a", 0], ["r", 0], ["1", 0], ["bisect", 0], ["bisect", 0], ["a", 0], ["l", 0], ["0", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["cnt", 0], ["i", 0], ["cnt", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["cnt", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["cnt", 0], ["r", 0], ["1", 0], ["cnt", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["flag", 0], ["false", 0], ["l", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["s", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["flag", 0], ["if", 0], ["s", 0], ["c", 0], ["cnt", 0], ["1", 0], ["flag", 0], ["false", 0], ["if", 0], ["s", 0], ["a", 0], ["flag", 0], ["true", 0], ["l", 0], ["i", 0], ["cnt", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["lambda", 0], ["x", 0], ["int", 0], ["x", 0], ["1", 0], ["input", 0], ["split", 0], ["print", 0], ["l", 0], ["r", 0], ["l", 0], ["l", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["cs", 0], ["0", 0], ["n", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["cnt", 0], ["1", 0], ["cs", 0], ["i", 0], ["cnt", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["cs", 0], ["r", 0], ["1", 0], ["cs", 0], ["l", 0], ["1", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["qs", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["qs", 0], ["append", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ls", 0], ["0", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["count", 0], ["1", 0], ["ls", 0], ["append", 0], ["count", 0], ["for", 0], ["ques", 0], ["in", 0], ["qs", 0], ["print", 0], ["ls", 0], ["ques", 0], ["1", 0], ["1", 0], ["ls", 0], ["ques", 0], ["0", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ls", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["ls", 0], ["append", 0], ["ls", 0], ["i", 0], ["1", 0], ["else", 0], ["ls", 0], ["append", 0], ["ls", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["ls", 0], ["r", 0], ["1", 0], ["ls", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["累積和的な発想", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["t", 0], ["0", 0], ["t", 0], ["1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["t", 0], ["i", 0], ["2", 0], ["t", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["t", 0], ["i", 0], ["2", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["r", 0], ["t", 0], ["l", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["rui", 0], ["0", 0], ["n", 0], ["1", 0], ["tmp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["tmp", 0], ["1", 0], ["rui", 0], ["i", 0], ["tmp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["print", 0], ["rui", 0], ["lr", 0], ["i", 0], ["1", 0], ["1", 0], ["rui", 0], ["lr", 0], ["i", 0], ["0", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["else", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["r", 0], ["1", 0], ["t", 0], ["l", 0], ["1", 0], ["初期値設定", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["dl", 0], ["dr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["line", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dl", 0], ["append", 0], ["line", 0], ["0", 0], ["dr", 0], ["append", 0], ["line", 0], ["1", 0], ["acの個数配列計算", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["tmp", 0], ["s", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["if", 0], ["tmp", 0], ["s", 0], ["ac", 0], ["a", 0], ["append", 0], ["1", 0], ["else", 0], ["a", 0], ["append", 0], ["0", 0], ["累積和計算", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["s", 0], ["append", 0], ["s", 0], ["i", 0], ["a", 0], ["i", 0], ["解答算出", 0], ["ans", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["zip", 0], ["dl", 0], ["dr", 0], ["ans", 0], ["append", 0], ["s", 0], ["r", 0], ["1", 0], ["s", 0], ["l", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["print", 0], ["ans", 0], ["i", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["count", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["count", 0], ["i", 0], ["1", 0], ["count", 0], ["i", 0], ["1", 0], ["else", 0], ["count", 0], ["i", 0], ["1", 0], ["count", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["count", 0], ["r", 0], ["1", 0], ["count", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ac", 0], ["1", 0], ["0", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["k", 0], ["1", 0], ["ac", 0], ["i", 0], ["1", 0], ["k", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["append", 0], ["ac", 0], ["r", 0], ["ac", 0], ["l", 0], ["for", 0], ["e", 0], ["in", 0], ["ans", 0], ["print", 0], ["e", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ssum", 0], ["0", 0], ["n", 0], ["now", 0], ["s", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["next", 0], ["s", 0], ["i", 0], ["if", 0], ["now", 0], ["a", 0], ["and", 0], ["next", 0], ["c", 0], ["cnt", 0], ["1", 0], ["ssum", 0], ["i", 0], ["cnt", 0], ["now", 0], ["next", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["ssum", 0], ["r", 0], ["1", 0], ["ssum", 0], ["l", 0], ["1", 0], ["author", 0], ["taichicchi", 0], ["created", 0], ["26", 0], ["09", 0], ["2020", 0], ["13", 0], ["43", 0], ["12", 0], ["import", 0], ["sys", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ls", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["0", 0], ["ls", 0], ["append", 0], ["0", 0], ["else", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["ls", 0], ["append", 0], ["ls", 0], ["1", 0], ["1", 0], ["else", 0], ["ls", 0], ["append", 0], ["ls", 0], ["1", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["ls", 0], ["r", 0], ["ls", 0], ["l", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["累積和", 0], ["l", 0], ["0", 0], ["n", 0], ["1", 0], ["l", 0], ["0", 0], ["l", 0], ["1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["l", 0], ["i", 0], ["2", 0], ["l", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["l", 0], ["i", 0], ["2", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["lr", 0], ["i", 0], ["0", 0], ["r", 0], ["lr", 0], ["i", 0], ["1", 0], ["print", 0], ["l", 0], ["r", 0], ["l", 0], ["l", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["q", 0], ["r", 0], ["0", 0], ["q", 0], ["cntac", 0], ["0", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["t", 0], ["1", 0], ["t", 0], ["1", 0], ["ac", 0], ["cntac", 0], ["append", 0], ["cntac", 0], ["t", 0], ["1", 0], ["1", 0], ["else", 0], ["cntac", 0], ["append", 0], ["cntac", 0], ["t", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["i", 0], ["r", 0], ["i", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["cntac", 0], ["r", 0], ["i", 0], ["1", 0], ["cntac", 0], ["l", 0], ["i", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ss", 0], ["0", 0], ["n", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["cnt", 0], ["1", 0], ["ss", 0], ["i", 0], ["1", 0], ["cnt", 0], ["else", 0], ["ss", 0], ["i", 0], ["1", 0], ["ss", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["ss", 0], ["r", 0], ["1", 0], ["ss", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["input", 0], ["num", 0], ["0", 0], ["n", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["count", 0], ["1", 0], ["num", 0], ["i", 0], ["1", 0], ["count", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["num", 0], ["r", 0], ["1", 0], ["num", 0], ["l", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["t", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["else", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["r", 0], ["1", 0], ["t", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["b", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["b", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["b", 0], ["r", 0], ["1", 0], ["b", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["nums", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["c", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["nums", 0], ["i", 0], ["1", 0], ["nums", 0], ["i", 0], ["nums", 0], ["i", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["lambda", 0], ["x", 0], ["int", 0], ["x", 0], ["1", 0], ["input", 0], ["split", 0], ["print", 0], ["nums", 0], ["r", 0], ["nums", 0], ["l", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["con", 0], ["0", 0], ["c", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["c", 0], ["true", 0], ["con", 0], ["append", 0], ["con", 0], ["1", 0], ["continue", 0], ["if", 0], ["c", 0], ["if", 0], ["s", 0], ["i", 0], ["c", 0], ["con", 0], ["append", 0], ["con", 0], ["1", 0], ["1", 0], ["c", 0], ["false", 0], ["continue", 0], ["else", 0], ["con", 0], ["append", 0], ["con", 0], ["1", 0], ["c", 0], ["false", 0], ["continue", 0], ["con", 0], ["append", 0], ["con", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["max", 0], ["0", 0], ["con", 0], ["r", 0], ["con", 0], ["l", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["rui", 0], ["0", 0], ["n", 0], ["1", 0], ["tmp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["tmp", 0], ["1", 0], ["rui", 0], ["i", 0], ["tmp", 0], ["for", 0], ["l", 0], ["r", 0], ["in", 0], ["lr", 0], ["print", 0], ["rui", 0], ["r", 0], ["1", 0], ["rui", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["cnt", 0], ["i", 0], ["1", 0], ["cnt", 0], ["i", 0], ["1", 0], ["else", 0], ["cnt", 0], ["i", 0], ["1", 0], ["cnt", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["cnt", 0], ["r", 0], ["cnt", 0], ["l", 0], ["n", 0], ["q", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["dp", 0], ["0", 0], ["n", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["ans", 0], ["ans", 0], ["1", 0], ["dp", 0], ["i", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["dp", 0], ["r", 0], ["1", 0], ["dp", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ls", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["d", 0], ["0", 0], ["pre", 0], ["0", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["d", 0], ["append", 0], ["d", 0], ["i", 0], ["1", 0], ["else", 0], ["d", 0], ["append", 0], ["d", 0], ["i", 0], ["for", 0], ["start", 0], ["end", 0], ["in", 0], ["ls", 0], ["print", 0], ["d", 0], ["end", 0], ["1", 0], ["d", 0], ["start", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["map", 0], ["str", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["q", 0], ["result", 0], ["0", 0], ["cnt", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["ac", 0], ["cnt", 0], ["1", 0], ["result", 0], ["append", 0], ["cnt", 0], ["elif", 0], ["s", 0], ["i", 0], ["1", 0], ["s", 0], ["i", 0], ["ac", 0], ["result", 0], ["append", 0], ["cnt", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["arr", 0], ["print", 0], ["result", 0], ["b", 0], ["1", 0], ["result", 0], ["a", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["t", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["i", 0], ["1", 0], ["t", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["else", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["r", 0], ["1", 0], ["t", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["s", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["1", 0], ["else", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["left", 0], ["right", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["l", 0], ["right", 0], ["1", 0], ["l", 0], ["left", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["n", 0], ["c", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["i", 0], ["2", 0], ["ac", 0], ["c", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["c", 0], ["l", 0], ["0", 0], ["q", 0], ["r", 0], ["0", 0], ["q", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["i", 0], ["r", 0], ["i", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["print", 0], ["a", 0], ["r", 0], ["i", 0], ["1", 0], ["a", 0], ["l", 0], ["i", 0], ["1", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["ac", 0], ["1", 0], ["0", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["k", 0], ["1", 0], ["ac", 0], ["i", 0], ["1", 0], ["k", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["append", 0], ["ac", 0], ["r", 0], ["ac", 0], ["l", 0], ["for", 0], ["e", 0], ["in", 0], ["ans", 0], ["print", 0], ["e", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["sl", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["sl", 0], ["append", 0], ["sl", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["sl", 0], ["append", 0], ["sl", 0], ["i", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["sl", 0], ["r", 0], ["1", 0], ["sl", 0], ["l", 0], ["1", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["bisect", 0], ["right", 0], ["def", 0], ["main", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s", 0], ["i", 0], ["1", 0], ["ac", 0], ["s", 0], ["append", 0], ["i", 0], ["for", 0], ["q", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["bisect", 0], ["left", 0], ["s", 0], ["r", 0], ["1", 0], ["bisect", 0], ["left", 0], ["s", 0], ["l", 0], ["1", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["numpy", 0], ["as", 0], ["np", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["s", 0], ["l", 0], ["np", 0], ["zeros", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["s", 0], ["in", 0], ["enumerate", 0], ["s", 0], ["if", 0], ["i", 0], ["1", 0], ["n", 0], ["and", 0], ["s", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["s", 0], ["l", 0], ["i", 0], ["1", 0], ["s", 0], ["l", 0], ["i", 0], ["1", 0], ["else", 0], ["s", 0], ["l", 0], ["i", 0], ["1", 0], ["s", 0], ["l", 0], ["i", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["int", 0], ["s", 0], ["l", 0], ["r", 0], ["1", 0], ["s", 0], ["l", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["acm", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["acm", 0], ["i", 0], ["acm", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["acm", 0], ["i", 0], ["acm", 0], ["i", 0], ["1", 0], ["acm", 0], ["n", 0], ["acm", 0], ["n", 0], ["1", 0], ["for", 0], ["lis", 0], ["in", 0], ["lr", 0], ["l", 0], ["r", 0], ["lis", 0], ["print", 0], ["acm", 0], ["r", 0], ["1", 0], ["acm", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["d", 0], ["0", 0], ["100100", 0], ["e", 0], ["0", 0], ["100100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["d", 0], ["i", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["d", 0], ["i", 0], ["1", 0], ["d", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["1", 0], ["lefnum", 0], ["d", 0], ["l", 0], ["if", 0], ["l", 0], ["0", 0], ["and", 0], ["s", 0], ["l", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["l", 0], ["c", 0], ["lefnum", 0], ["1", 0], ["rignum", 0], ["d", 0], ["r", 0], ["if", 0], ["r", 0], ["n", 0], ["and", 0], ["s", 0], ["r", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["r", 0], ["c", 0], ["rignum", 0], ["1", 0], ["r", 0], ["1", 0], ["ans", 0], ["rignum", 0], ["lefnum", 0], ["print", 0], ["l", 0], ["r", 0], ["ans", 0], ["print", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["print", 0], ["i", 0], ["d", 0], ["i", 0], ["print", 0], ["d", 0], ["r", 0], ["d", 0], ["l", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["c", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["a", 0], ["r", 0], ["1", 0], ["a", 0], ["l", 0], ["1", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["累積和", 0], ["s", 0], ["を計算", 0], ["c", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["a", 0], ["0", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["i", 0], ["1", 0], ["ac", 0], ["a", 0], ["1", 0], ["c", 0], ["i", 0], ["1", 0], ["c", 0], ["i", 0], ["a", 0], ["各クエリに答える", 0], ["for", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["1", 0], ["result", 0], ["c", 0], ["r", 0], ["c", 0], ["l", 0], ["if", 0], ["l", 0], ["0", 0], ["and", 0], ["s", 0], ["l", 0], ["1", 0], ["l", 0], ["1", 0], ["ac", 0], ["result", 0], ["1", 0], ["print", 0], ["result", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["input", 0], ["l", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["l", 0], ["append", 0], ["i", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["r", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["st", 0], ["bisect", 0], ["left", 0], ["l", 0], ["l", 0], ["fi", 0], ["bisect", 0], ["left", 0], ["l", 0], ["r", 0], ["ans", 0], ["append", 0], ["fi", 0], ["st", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["print", 0], ["i", 0], ["import", 0], ["sys", 0], ["read", 0], ["sys", 0], ["stdin", 0], ["read", 0], ["readline", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["readlines", 0], ["sys", 0], ["stdin", 0], ["readlines", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["inf", 0], ["1", 0], ["60", 0], ["mod", 0], ["1000000007", 0], ["def", 0], ["main", 0], ["n", 0], ["q", 0], ["list", 0], ["map", 0], ["int", 0], ["readline", 0], ["split", 0], ["s", 0], ["readline", 0], ["strip", 0], ["lr", 0], ["list", 0], ["map", 0], ["int", 0], ["read", 0], ["split", 0], ["vec", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["vec", 0], ["i", 0], ["1", 0], ["vec", 0], ["i", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["and", 0], ["s", 0], ["i", 0], ["1", 0], ["c", 0], ["vec", 0], ["i", 0], ["1", 0], ["1", 0], ["ans", 0], ["0", 0], ["q", 0], ["for", 0], ["i", 0], ["l", 0], ["r", 0], ["in", 0], ["enumerate", 0], ["zip", 0], ["iter", 0], ["lr", 0], ["2", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["ans", 0], ["i", 0], ["vec", 0], ["r", 0], ["vec", 0], ["l", 0], ["print", 0], ["n", 0], ["join", 0], ["map", 0], ["str", 0], ["ans", 0], ["return", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["q", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["s", 0], ["s", 0], ["replace", 0], ["ac", 0], ["ac", 0], ["t", 0], ["0", 0], ["n", 0], ["r", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["c", 0], ["r", 0], ["1", 0], ["t", 0], ["i", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["q", 0], ["l", 0], ["r", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["t", 0], ["r", 0], ["1", 0], ["t", 0], ["l", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nJake is learning how to play the card game Dominion. In Dominion, you can buy a variety of treasure, action, and victory point cards – at the end of the game, the player with the most victory points wins!\n\nEach turn, each player draws $5$ cards and can use their action and treasure cards to obtain buying power in order to buy more cards. Since Jake is just starting out, he’s decided to buy only treasure and victory point cards.\n\nThere are $3$ kinds of victory cards in Dominion:\n - Province (costs $8$, worth $6$ victory points)\n - Duchy (costs $5$, worth $3$ victory points)\n - Estate (costs $2$, worth $1$ victory point)\n\nAnd, there are $3$ kinds of treasure cards:\n - Gold (costs $6$, worth $3$ buying power)\n - Silver (costs $3$, worth $2$ buying power)\n - Copper (costs $0$, worth $1$ buying power)\n\nAt the start of Jake’s turn, he draws $5$ of these cards. Given the number of Golds, Silvers, and Coppers in Jake’s hand, calculate the best victory card and best treasure card he could buy that turn. Note that Jake can buy only one card.\n\n-----Input-----\nThe input consists of a single test case on a single line, which contains three non-negative integers $G$, $S$, $C$ ($G + S + C \\le 5$) indicating the number of Golds, Silvers, and Coppers Jake draws in his hand.\n\n-----Output-----\nOutput the best victory card (Province, Duchy, or Estate) and the best treasure card (Gold, Silver, or Copper) Jake can buy this turn, separated with \" or \", in this order. If Jake cannot afford any victory cards, output only the best treasure card he can buy.\n\n-----Sample Explanation-----\nIn Sample Input $1$, Jake has $1$ Silver in his hand, which means he has $2$ buying power. This would allow him to either buy an Estate or a Copper.\n\n-----Examples-----\nSample Input 1:\n0 1 0\nSample Output 1:\nEstate or Copper\n\nSample Input 2:\n2 1 0\nSample Output 2:\nProvince or Gold\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6680"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6680", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["jake", 1], ["is", 1], ["learning", 1], ["how", 1], ["to", 1], ["play", 1], ["the", 1], ["card", 1], ["game", 1], ["dominion", 1], ["in", 1], ["dominion", 1], ["you", 1], ["can", 1], ["buy", 1], ["a", 1], ["variety", 1], ["of", 1], ["treasure", 1], ["action", 1], ["and", 1], ["victory", 1], ["point", 1], ["cards", 1], ["–", 1], ["at", 539], ["the", 446], ["end", 1], ["of", 1], ["the", 1], ["game", 1], ["the", 1], ["player", 1], ["with", 1], ["the", 1], ["most", 1], ["victory", 1], ["points", 1], ["wins", 1], ["each", 1], ["turn", 1], ["each", 1], ["player", 1], ["draws", 1], ["5", 1], ["cards", 1], ["and", 1], ["can", 1], ["use", 1], ["their", 1], ["action", 1], ["and", 1], ["treasure", 1], ["cards", 1], ["to", 1], ["obtain", 1], ["buying", 1], ["power", 1], ["in", 1], ["order", 1], ["to", 1], ["buy", 1], ["more", 1], ["cards", 1], ["since", 1], ["jake", 1], ["is", 1], ["just", 1], ["starting", 0], ["out", 0], ["he’s", 0], ["decided", 0], ["to", 0], ["buy", 0], ["only", 0], ["treasure", 0], ["and", 0], ["victory", 0], ["point", 0], ["cards", 0], ["there", 0], ["are", 0], ["3", 0], ["kinds", 0], ["of", 0], ["victory", 0], ["cards", 0], ["in", 0], ["dominion", 0], ["province", 0], ["costs", 0], ["8", 0], ["worth", 0], ["6", 0], ["victory", 0], ["points", 0], ["duchy", 0], ["costs", 0], ["5", 0], ["worth", 0], ["3", 0], ["victory", 0], ["points", 0], ["estate", 0], ["costs", 0], ["2", 0], ["worth", 0], ["1", 0], ["victory", 0], ["point", 0], ["and", 0], ["there", 0], ["are", 0], ["3", 0], ["kinds", 0], ["of", 0], ["treasure", 0], ["cards", 0], ["gold", 0], ["costs", 0], ["6", 0], ["worth", 0], ["3", 0], ["buying", 0], ["power", 0], ["silver", 0], ["costs", 0], ["3", 0], ["worth", 0], ["2", 0], ["buying", 0], ["power", 0], ["copper", 0], ["costs", 0], ["0", 0], ["worth", 0], ["1", 0], ["buying", 0], ["power", 0], ["at", 1], ["the", 1], ["start", 1], ["of", 1], ["jake’s", 1], ["turn", 1], ["he", 1], ["draws", 1], ["5", 1], ["of", 1], ["these", 1], ["cards", 1], ["given", 1], ["the", 1], ["number", 1], ["of", 1], ["golds", 1], ["silvers", 1], ["and", 1], ["coppers", 1], ["in", 1], ["jake’s", 1], ["hand", 1], ["calculate", 1], ["the", 1], ["best", 1], ["victory", 1], ["card", 1], ["and", 1], ["best", 1], ["treasure", 1], ["card", 1], ["he", 1], ["could", 0], ["buy", 0], ["that", 0], ["turn", 0], ["note", 0], ["that", 0], ["jake", 0], ["can", 0], ["buy", 0], ["only", 0], ["one", 0], ["card", 0], ["input", 0], ["the", 1], ["input", 1], ["consists", 1], ["of", 1], ["a", 1], ["single", 1], ["test", 1], ["case", 1], ["on", 1], ["a", 1], ["single", 1], ["line", 1], ["which", 1], ["contains", 1], ["three", 1], ["non", 1], ["negative", 1], ["integers", 1], ["g", 1], ["s", 1], ["c", 1], ["g", 1], ["s", 1], ["c", 1], ["le", 1], ["5", 1], ["indicating", 1], ["the", 1], ["number", 0], ["of", 0], ["golds", 0], ["silvers", 0], ["and", 0], ["coppers", 0], ["jake", 0], ["draws", 0], ["in", 0], ["his", 0], ["hand", 0], ["output", 0], ["output", 1], ["the", 1], ["best", 1], ["victory", 1], ["card", 1], ["province", 1], ["duchy", 1], ["or", 1], ["estate", 1], ["and", 1], ["the", 1], ["best", 1], ["treasure", 1], ["card", 1], ["gold", 1], ["silver", 1], ["or", 1], ["copper", 1], ["jake", 1], ["can", 1], ["buy", 1], ["this", 1], ["turn", 1], ["separated", 1], ["with", 1], ["or", 1], ["in", 1], ["this", 1], ["order", 1], ["if", 1], ["jake", 1], ["cannot", 1], ["afford", 1], ["any", 0], ["victory", 0], ["cards", 0], ["output", 0], ["only", 0], ["the", 0], ["best", 0], ["treasure", 0], ["card", 0], ["he", 0], ["can", 0], ["buy", 0], ["sample", 0], ["explanation", 0], ["in", 1], ["sample", 1], ["input", 1], ["1", 1], ["jake", 1], ["has", 1], ["1", 1], ["silver", 1], ["in", 1], ["his", 1], ["hand", 1], ["which", 1], ["means", 1], ["he", 1], ["has", 1], ["2", 1], ["buying", 1], ["power", 1], ["this", 0], ["would", 0], ["allow", 0], ["him", 0], ["to", 0], ["either", 0], ["buy", 0], ["an", 0], ["estate", 0], ["or", 0], ["a", 0], ["copper", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["0", 0], ["1", 0], ["0", 0], ["sample", 0], ["output", 0], ["1", 0], ["estate", 0], ["or", 0], ["copper", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["1", 0], ["0", 0], ["sample", 0], ["output", 0], ["2", 0], ["province", 0], ["or", 0], ["gold", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5521472392638037, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5460248387731164, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7100591715976331, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7100591715976331, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5460122699386503, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5460122699386503, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7100591715976331, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7100591715976331, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYoung Mr. Potato is opening two new stores where he will, you guessed it, sell potatoes. Mr. Potato gets his potatoes from $N$ farmers. Each farmer offers exactly $a_ i$ potatoes per bag for a total price of $c_ i$. Mr. Potato is going to buy all bags of potatoes from all farmers and place the bags in his two stores.\n\nLet’s denote the average potato price in the first store with $P_1$, and the average potato price in the second store with $P_2$ . The average potato price in a store is equal to the ratio of the price and the total number of potatoes in the store. Taking into account logistical difficulties and the amount of potatoes in the stores, he wants the product of the average prices of potatoes in the stores to be minimal. In other words, he wants the product of $P_1$ and $P_2$ to be minimal.\n\nAfter Mr. Potato settles on a division of bags in the stores, at least one store must have exactly $L$ bags.\n\n-----Input-----\nThe first line of input contains two integers $N$ and $L$ ($2 \\leq N \\leq 100$, $1 \\leq L < N$), the number of potato bags and the number of potato bags in at least one store. The second line of input contains $N$ integers $a_ i$ ($1 \\leq a_ i \\leq 100$), separated by space. The third line of input contains $N$ integers $c_ i$ ($1 \\leq c_ i \\leq 1000000$), separated by space. The sum of all $a_ i$ will be at most $500$.\n\n-----Output-----\nThe first and only line of output must contain the minimal product of $P_1$ and $P_2$ from the task. An answer correct up to three decimal places will be accepted.\n\n-----Examples-----\nSample Input:\n3 1\n3 2 1\n1 2 3\nSample Output:\n0.556\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id5095"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5095", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["young", 1], ["mr", 1], ["potato", 1], ["is", 1], ["opening", 1], ["two", 1], ["new", 1], ["stores", 1], ["where", 1], ["he", 1], ["will", 1], ["you", 1], ["guessed", 1], ["it", 1], ["sell", 1], ["potatoes", 1], ["mr", 0], ["potato", 0], ["gets", 0], ["his", 0], ["potatoes", 0], ["from", 0], ["n", 0], ["farmers", 0], ["each", 0], ["farmer", 0], ["offers", 0], ["exactly", 0], ["a", 0], ["i", 0], ["potatoes", 0], ["per", 0], ["bag", 0], ["for", 0], ["a", 0], ["total", 0], ["price", 0], ["of", 0], ["c", 0], ["i", 0], ["mr", 1], ["potato", 1], ["is", 1], ["going", 1], ["to", 1], ["buy", 1], ["all", 1], ["bags", 1], ["of", 1], ["potatoes", 1], ["from", 1], ["all", 1], ["farmers", 1], ["and", 1], ["place", 1], ["the", 1], ["bags", 1], ["in", 1], ["his", 1], ["two", 1], ["stores", 0], ["let’s", 0], ["denote", 0], ["the", 0], ["average", 0], ["potato", 0], ["price", 0], ["in", 0], ["the", 0], ["first", 0], ["store", 0], ["with", 0], ["p", 0], ["1", 0], ["and", 0], ["the", 0], ["average", 0], ["potato", 0], ["price", 0], ["in", 0], ["the", 0], ["second", 0], ["store", 0], ["with", 0], ["p", 0], ["2", 0], ["the", 1], ["average", 1], ["potato", 1], ["price", 1], ["in", 1], ["a", 1], ["store", 1], ["is", 1], ["equal", 1], ["to", 1], ["the", 1], ["ratio", 1], ["of", 1], ["the", 1], ["price", 1], ["and", 1], ["the", 1], ["total", 1], ["number", 1], ["of", 1], ["potatoes", 1], ["in", 1], ["the", 1], ["store", 1], ["taking", 1], ["into", 1], ["account", 1], ["logistical", 1], ["difficulties", 1], ["and", 1], ["the", 1], ["amount", 1], ["of", 1], ["potatoes", 1], ["in", 1], ["the", 1], ["stores", 1], ["he", 1], ["wants", 1], ["the", 1], ["product", 1], ["of", 1], ["the", 1], ["average", 1], ["prices", 1], ["of", 1], ["potatoes", 1], ["in", 1], ["the", 1], ["stores", 0], ["to", 0], ["be", 0], ["minimal", 0], ["in", 0], ["other", 0], ["words", 0], ["he", 0], ["wants", 0], ["the", 0], ["product", 0], ["of", 0], ["p", 0], ["1", 0], ["and", 0], ["p", 0], ["2", 0], ["to", 1], ["be", 1], ["minimal", 1], ["after", 1], ["mr", 1], ["potato", 1], ["settles", 1], ["on", 1], ["a", 1], ["division", 1], ["of", 1], ["bags", 1], ["in", 0], ["the", 0], ["stores", 0], ["at", 0], ["least", 0], ["one", 0], ["store", 0], ["must", 0], ["have", 0], ["exactly", 0], ["l", 0], ["bags", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["l", 0], ["2", 0], ["leq", 0], ["n", 0], ["leq", 0], ["100", 0], ["1", 0], ["leq", 0], ["l", 1], ["n", 1], ["the", 1], ["number", 1], ["of", 1], ["potato", 1], ["bags", 1], ["and", 1], ["the", 1], ["number", 1], ["of", 1], ["potato", 1], ["bags", 1], ["in", 1], ["at", 0], ["least", 0], ["one", 0], ["store", 0], ["the", 0], ["second", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["n", 0], ["integers", 0], ["a", 0], ["i", 0], ["1", 0], ["leq", 0], ["a", 0], ["i", 0], ["leq", 0], ["100", 0], ["separated", 0], ["by", 0], ["space", 0], ["the", 0], ["third", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["n", 0], ["integers", 0], ["c", 0], ["i", 0], ["1", 0], ["leq", 0], ["c", 0], ["i", 0], ["leq", 0], ["1000000", 0], ["separated", 0], ["by", 0], ["space", 0], ["the", 0], ["sum", 0], ["of", 0], ["all", 0], ["a", 0], ["i", 0], ["will", 0], ["be", 0], ["at", 0], ["most", 0], ["500", 0], ["output", 0], ["the", 1], ["first", 0], ["and", 0], ["only", 0], ["line", 0], ["of", 0], ["output", 0], ["must", 0], ["contain", 0], ["the", 0], ["minimal", 0], ["product", 0], ["of", 0], ["p", 0], ["1", 0], ["and", 0], ["p", 0], ["2", 0], ["from", 0], ["the", 0], ["task", 0], ["an", 0], ["answer", 0], ["correct", 0], ["up", 0], ["to", 0], ["three", 0], ["decimal", 0], ["places", 0], ["will", 0], ["be", 0], ["accepted", 0], ["examples", 0], ["sample", 0], ["input", 0], ["3", 0], ["1", 0], ["3", 0], ["2", 0], ["1", 0], ["1", 0], ["2", 0], ["3", 0], ["sample", 0], ["output", 0], ["0", 0], ["556", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.36245954692556637, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.36245954692556637, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.573208722741433, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.573208722741433, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.36245954692556637, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.36245954692556637, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.573208722741433, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.573208722741433, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nA substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.\n\nYou are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print \"NO\" (without quotes).\n\nA substring of a string is a contiguous subsequence of letters in the string. For example, \"ab\", \"c\", \"abc\" are substrings of string \"abc\", while \"ac\" is not a substring of that string.\n\nThe number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.\n\nString a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.\n\n\n-----Input-----\n\nThe first line contains integer n (1 ≤ n ≤ 10^5) — the number of strings in the set.\n\nEach of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.\n\nThe total length of the strings doesn't exceed 10^5.\n\n\n-----Output-----\n\nPrint the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print \"NO\" (without quotes) if there are no good strings.\n\n\n-----Examples-----\nInput\n4\nmail\nai\nlru\ncf\n\nOutput\ncfmailru\n\nInput\n3\nkek\npreceq\ncheburek\n\nOutput\nNO\n\n\n\n-----Note-----\n\nOne can show that in the first sample only two good strings with minimum length exist: \"cfmailru\" and \"mailrucf\". The first string is lexicographically minimum.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\n\nwrong_str = False\n\nstrings = []\nsets = []\nfor _ in range(n):\n\tnew_string = input()\n\tnew_string_set = set(new_string)\n\tif len(new_string) != len(new_string_set):\n\t\twrong_str = True\n\t\tbreak\n\n\tstrings.append(new_string)\n\tsets.append(new_string_set)\n\nif wrong_str:\n\tprint(\"NO\")\n\treturn\n\n\nconnections = []\nfor _ in range(n):\n\tconnections.append((-1,-1))\n\nchanged = True\n\nwhile changed:\n\n\tchanged = False\n\n\tfor i in range(len(strings)):\n\n\t\tif strings[i] == None:\n\t\t\tcontinue\n\n\t\tfor j in range(i + 1, len(strings)):\n\n\t\t\tif strings[j] == None:\n\t\t\t\tcontinue\n\n\t\t\tif len(set(strings[i]).intersection(set(strings[j]))) == 0:\n\t\t\t\tcontinue\n\n\t\t\ta = strings[i]\n\t\t\tb = strings[j]\n\n\t\t\t#print(a, b)\n\n\t\t\tif b in a:\n\t\t\t\tstrings[j] = None\n\t\t\t\tchanged = True\n\t\t\telif a in b:\n\t\t\t\tstrings[i] = b\n\t\t\t\tstrings[j] = None\n\t\t\t\tchanged = True\n\t\t\telse:\n\n\t\t\t\tis_ok = False\n\n\t\t\t\tstart_index = a.find(b[0])\n\t\t\t\tif start_index != -1 and a[start_index:] in b:\n\t\t\t\t\tstrings[i] += strings[j][len(a) - start_index:]\n\t\t\t\t\tstrings[j] = None\n\t\t\t\t\tis_ok = True\n\t\t\t\t\tchanged = True\n\n\t\t\t\tif not is_ok:\n\t\t\t\t\tstart_index = b.find(a[0])\n\t\t\t\t\tif start_index != -1 and  b[start_index:] in a:\n\t\t\t\t\t\tstrings[i] = strings[j] + strings[i][len(b) - start_index:]\n\t\t\t\t\t\tstrings[j] = None\n\t\t\t\t\t\tis_ok = True\n\t\t\t\t\t\tchanged = True\n\n\t\t\t\tif not is_ok:\n\t\t\t\t\tprint(\"NO\")\n\t\t\t\t\treturn\n\n\n\n\n\t\tif wrong_str:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\n\tstrings = [x for x in strings if x is not None]\n\nwhole_str = \"\".join(strings)\n\nif len(whole_str) != len(set(whole_str)):\n\tprint(\"NO\")\n\treturn\n\nprint(\"\".join(sorted(strings)))\n\n\n\n", "n = int(input())\nA = []\nfor i in range (0,n):\n\tA = A + [input()]\nstart = [100]*26\nend = [100]*26\ndef num(x):\n\treturn(ord(x)-ord(\"a\"))\ndef let(x):\n\treturn(chr(x+ord(\"a\")))\ndef ans(x):\n\tfinal = []\n\tfor i in range (0,n):\n\t\tB = list(A[i])\n\t\tif len(B) == 1:\n\t\t\tif start[num(B[0])] == 100:\n\t\t\t\tstart[num(B[0])] = -100\n\t\t\tif end[num(B[0])] == 100:\n\t\t\t\tend[num(B[0])] = -100\n\t\telse:\n\t\t\tfor j in range (0,len(B)):\n\t\t\t\tif j==0:\n\t\t\t\t\tif start[num(B[j])] == 100 or start[num(B[j])] == -100:\n\t\t\t\t\t\tstart[num(B[j])] = -100\n\t\t\t\t\tif end[num(B[j])] == 100 or end[num(B[j])] == -100:\n\t\t\t\t\t\tend[num(B[j])] = num(B[j+1])\n\t\t\t\t\telif end[num(B[j])] == num(B[j+1]): g=0\n\t\t\t\t\telse:\n\t\t\t\t\t\treturn(\"NO\")\n\t\t\t\telif 0<j<len(B)-1:\n\t\t\t\t\tif start[num(B[j])] == 100 or start[num(B[j])] == -100:\n\t\t\t\t\t\tstart[num(B[j])] = num(B[j-1])\n\t\t\t\t\telif start[num(B[j])] != num(B[j-1]):\n\t\t\t\t\t\treturn(\"NO\")\n\t\t\t\t\tif end[num(B[j])] == 100 or end[num(B[j])] == -100:\n\t\t\t\t\t\tend[num(B[j])] = num(B[j+1])\n\t\t\t\t\telif end[num(B[j])] != num(B[j+1]):\n\t\t\t\t\t\treturn(\"NO\")\n\t\t\t\telif j == len(B)-1:\n\t\t\t\t\tif end[num(B[j])] == 100:\n\t\t\t\t\t\tend[num(B[j])] = -100\n\t\t\t\t\tif start[num(B[j])] == 100 or start[num(B[j])] == -100:\n\t\t\t\t\t\tstart[num(B[j])] = num(B[j-1])\n\t\t\t\t\telif start[num(B[j])] == num(B[j-1]): g=0\n\t\t\t\t\telse:\n\t\t\t\t\t\treturn(\"NO\")\n\tif len(set(start))+max(0,start.count(100)-1)+max(0,start.count(-100)-1) != 26:\n\t\t\treturn(\"NO\")\n\telif len(set(end))+max(0,end.count(100)-1)+max(0,end.count(-100)-1) != 26:\n\t\t\treturn(\"NO\")\n\telse:\n\t\tfor i in range (0,26):\n\t\t\tif start[i] != -100:\n\t\t\t\tg=0\n\t\t\telse:\n\t\t\t\tfinal = final + [let(i)]\n\t\t\t\tj = end[i]\n\t\t\t\twhile j != -100:\n\t\t\t\t\tfinal = final + [let(j)]\n\t\t\t\t\tj = end[j]\n\t\tif len(final) != len(set(start))-min(1,start.count(100))+max(0,start.count(-100)-1):\n\t\t\treturn(\"NO\")\n\t\telse:\n\t\t\treturn(\"\".join(final))\nprint(ans(A))\n", "n=int(input())\nm=[]\nsc=[]\nfor i in range(n):\n\tm.append(input())\n\tsc.append(set(m[i]))\n\tif len(sc[i])!=len(m[i]):\n\t\tprint('NO')\n\t\tbreak\nelse:\n\ti=0\n\tpX=False\n\twhile i<len(m):\n\t\tj=i+1\n\t\tp=False\n\t\twhile j<len(m):\n\t\t\t#print(m)\n\t\t\tz=len(sc[i].intersection(sc[j]))\n\t\t\t#a=len(sc[i])\n\t\t\t#b=len(sc[j])\n\t\t\tif m[i] in m[j]:\n\t\t\t\tm[i]=m[j]\n\t\t\t\tsc[i]=sc[j]\n\t\t\t\tsc.pop(j)\n\t\t\t\tm.pop(j)\n\t\t\t\tp=True\n\t\t\t\tbreak\n\t\t\telif m[j] in m[i]:\n\t\t\t\tsc.pop(j)\n\t\t\t\tm.pop(j)\n\t\t\t\tj-=1\n\t\t\telif z>0:\n\t\t\t\tif m[i][-z:]==m[j][:z]:\n\t\t\t\t\tm[i]+=m[j][z:]\n\t\t\t\telif m[j][-z:]==m[i][:z]:\n\t\t\t\t\tm[i]=m[j]+m[i][z:]\n\t\t\t\telse:\n\t\t\t\t\tpX=True\n\t\t\t\t\tbreak\n\t\t\t\tsc[i]=set(m[i])\n\t\t\t\tm.pop(j)\n\t\t\t\tsc.pop(j)\n\t\t\t\tj-=1\n\t\t\t\tp=True\n\t\t\tj+=1\n\t\tif not p:\n\t\t\ti+=1\n\t\tif pX:\n\t\t\tprint('NO')\n\t\t\tbreak\n\tif not pX:\n\t\tprint(''.join(sorted(m)))\n", "n=int(input())\nm=[]\nsc=[]\nfor i in range(n):\n\tm.append(input())\n\tsc.append(set(m[i]))\n\tif len(sc[i])!=len(m[i]):\n\t\tprint('NO')\n\t\tbreak\nelse:\n\ti=0\n\tpX=False\n\twhile i<len(m):\n\t\tj=i+1\n\t\tp=False\n\t\twhile j<len(m):\n\t\t\t#print(m)\n\t\t\tz=len(sc[i].intersection(sc[j]))\n\t\t\t#a=len(sc[i])\n\t\t\t#b=len(sc[j])\n\t\t\tif m[i] in m[j]:\n\t\t\t\tm[i]=m[j]\n\t\t\t\tsc[i]=sc[j]\n\t\t\t\tsc.pop(j)\n\t\t\t\tm.pop(j)\n\t\t\t\tp=True\n\t\t\t\tbreak\n\t\t\telif m[j] in m[i]:\n\t\t\t\tsc.pop(j)\n\t\t\t\tm.pop(j)\n\t\t\t\tj-=1\n\t\t\telif z>0:\n\t\t\t\tif m[i][-z:]==m[j][:z]:\n\t\t\t\t\tm[i]+=m[j][z:]\n\t\t\t\telif m[j][-z:]==m[i][:z]:\n\t\t\t\t\tm[i]=m[j]+m[i][z:]\n\t\t\t\telse:\n\t\t\t\t\tpX=True\n\t\t\t\t\tbreak\n\t\t\t\tsc[i]=set(m[i])\n\t\t\t\tm.pop(j)\n\t\t\t\tsc.pop(j)\n\t\t\t\tj-=1\n\t\t\t\tp=True\n\t\t\tj+=1\n\t\tif not p:\n\t\t\ti+=1\n\t\tif pX:\n\t\t\tprint('NO')\n\t\t\tbreak\n\tif not pX:\n\t\tprint(''.join(sorted(m)))\n", "u, v, d = {}, {}, set()\nfor i in range(int(input())):\n\tt = input()\n\tif len(t) == 1: d.add(t)\n\tfor a, b in zip(t, t[1:]):\n\t\tif u.get(a, b) != b or v.get(b, a) != a: print('NO');return\n\t\tu[a], v[b] = b, a\nd = d - set(u) - set(v)\nfor q in set(u).difference(v):\n\twhile q[-1] in u: q += u.pop(q[-1])\n\td.add(q)\nif u: print('NO');return\nprint(''.join(sorted(d)))\n", "u, v, d = {}, {}, set()\nfor i in range(int(input())):\n\tt = input()\n\tif len(t) == 1: d.add(t)\n\tfor a, b in zip(t, t[1:]):\n\t\tif u.get(a, b) != b or v.get(b, a) != a: print('NO');return\n\t\tu[a], v[b] = b, a\nx, y = set(u), set(v)\nd = d - x - y\nfor q in x - y:\n\twhile q[-1] in u: q += u.pop(q[-1])\n\td.add(q)\nif u: print('NO');return\nprint(''.join(sorted(d)))\n", "n = int(input())\nu = []\ns = []\nok = True\nfor i in range(n):\n\tu.append(input())\n\ts.append(set(u[i]))\n\tif len(s[i]) != len(u[i]):\n\t\tprint('NO')\n\t\tok = False\n\t\tbreak\nif ok:\n\ti = 0\n\tok = False\n\twhile i < len(u):\n\t\tj = i + 1\n\t\tp = False\n\t\twhile j < len(u):\n\t\t\tz = len(s[i].intersection(s[j]))\n\t\t\tif u[i] in u[j]:\n\t\t\t\tu[i] = u[j]\n\t\t\t\ts[i] = s[j]\n\t\t\t\ts.pop(j)\n\t\t\t\tu.pop(j)\n\t\t\t\tp = True\n\t\t\t\tbreak\n\t\t\telif u[j] in u[i]:\n\t\t\t\ts.pop(j)\n\t\t\t\tu.pop(j)\n\t\t\t\tj -= 1\n\t\t\telif z > 0:\n\t\t\t\tif u[i][-z:] == u[j][:z]:\n\t\t\t\t\tu[i] += u[j][z:]\n\t\t\t\telif u[j][-z:] == u[i][:z]:\n\t\t\t\t\tu[i] = u[j] + u[i][z:]\n\t\t\t\telse:\n\t\t\t\t\tok = True\n\t\t\t\t\tbreak\n\t\t\t\ts[i] = set(u[i])\n\t\t\t\tu.pop(j)\n\t\t\t\ts.pop(j)\n\t\t\t\tj -= 1\n\t\t\t\tp = True\n\t\t\tj += 1\n\t\tif not p:\n\t\t\ti += 1\n\t\tif ok:\n\t\t\tprint('NO')\n\t\t\tbreak\n\tif not ok:\n\t\tu.sort()\n\t\tprint(''.join(u))\n\t\t\n\n\n\n\n\n\n\t\t\t\t\n", "#https://codeforces.com/problemset/problem/886/D\ndef is_all_used(used):\n\tfor val in list(used.values()):\n\t\tif val != True:\n\t\t\treturn False\n\treturn True    \n\ndef is_circle(d, pre):\n\tused     = {x:False for x in d}\n\tpre_none = [x for x in used if x not in pre]\n\ts_arr    = []\n\t\n\tfor x in pre_none:\n\t\tcur    = []\n\t\tflg    = dfs(x, d, used, cur)\n\t\t\t\n\t\tif flg==True:\n\t\t\treturn True, None\n\t\t\t\n\t\ts_arr.append(cur)\n\t\n\tif is_all_used(used) != True:\n\t\treturn True, None\n\t\n\treturn False, s_arr\n\ndef dfs(u, d, used, cur):\n\tused[u] = True\n\tcur.append(u)\n\tflg = False\n\t\n\tfor v in d[u]:\n\t\tif used[v] == True:\n\t\t\treturn True\n\t\t\n\t\tflg = dfs(v, d, used, cur)\n\t\t\n\t\tif flg==True:\n\t\t\treturn flg\n\treturn flg\n\ndef push(d, u, v=None):\n\tif u not in d:\n\t\td[u] = set()\n\t\n\tif v is not None:\n\t\tif v not in d:\n\t\t\td[v] = set()\n\t\td[u].add(v)\n\t\ndef push_p(d, v):\n\tif v not in d:\n\t\td[v] = 0\n\td[v]+=1\n\t\ndef is_deg_valid(d):\n\tfor u in d:\n\t\tif len(d[u]) > 1:\n\t\t\treturn True\n\treturn False\n\ndef solve():\n\tn   = int(input())\n\td   = {}\n\tpre = {}\n\t\n\tfor _ in range(n):\n\t\ts = input()\n\t\tif len(s) == 1:\n\t\t\tpush(d, s)\n\t\telse:\n\t\t\tfor u, v in zip(s[:-1], s[1:]):\n\t\t\t\tpush(d, u, v)\n\t\t\t\tpush_p(pre, v)\n\t\n\tflg, arr = is_circle(d, pre)\n\t\n\tif is_deg_valid(d) or flg==True:\n\t\treturn 'NO'\n\t\n\tS = [''.join(x) for x in arr]\n\tS = sorted(S)\n\treturn ''.join([s for s in S])\n\t\t\nprint(solve())\n\n#4\n#mail\n#ai\n#lru\n#cf\n\n#3\n#kek\n#preceq\n#cheburek\n", "L = {}\nR = {}\nS = set()\n\nfor _ in range(int(input())):\n\ts = input()\n\tif len(s) == 1: \n\t\tS.add(s)\n\tfor s1, s2 in zip(s, s[1:]):\n\t\tif  s2 != L.get(s1, s2) or s1 != R.get(s2, s1): \n\t\t\tprint('NO');return\n\t\tL[s1], R[s2] = s2, s1\n\nL1, R1 = set(L), set(R)\nS = S -L1 - R1\n\nfor i in L1 - R1:\n\twhile i[-1] in L: \n\t\ti += L.pop(i[-1])\n\tS.add(i)\nif L: \n\tprint('NO');return\nprint(''.join(sorted(S)))\n", "StringsNumber = int(input())\nFinalStrings = []\nStrings = []\n\nfor i in range(StringsNumber):\n\tStrings.append(input())\n\nLetterGraph = {}\n\n# Генерим граф\n\nfor i in range(len(Strings)):\n\tif len(Strings[i]) == 1:\n\t\tif Strings[i] not in LetterGraph:\n\t\t\tLetterGraph[Strings[i]] = \"\"\n\t\t\t#print(\"заапедил\", i)\n\t\tcontinue\n\tfor e in range(len(Strings[i]) - 1):\n\t\tif Strings[i][e] not in LetterGraph:\n\t\t\tElements = []\n\t\t\tfor j in list(LetterGraph):\n\t\t\t\tif j != Strings[i][e + 1]:\n\t\t\t\t\tElements.append(LetterGraph[j])\n\n\t\t\tif Strings[i][e + 1] in Elements:\n\t\t\t\tprint(\"NO\")\n\t\t\t\treturn\n\t\t\tLetterGraph[Strings[i][e]] = Strings[i][e + 1]\n\t\t\tcontinue\n\t\tif LetterGraph[Strings[i][e]] == Strings[i][e + 1] or LetterGraph[Strings[i][e]] == \"\":\n\t\t\tLetterGraph[Strings[i][e]] = Strings[i][e + 1]\n\t\t\tcontinue\n\t\t#print(\"Граф:\", LetterGraph)\n\t\tprint(\"NO\")\n\t\treturn\n\n#print(\"Я сгенерил граф, получилось:\", LetterGraph)\n\n# Проверяем, что нету цикла\n\nif LetterGraph:\n\tCycle = False\n\tfor i in LetterGraph:\n\t\tLetter = LetterGraph[i]\n\t\twhile True:\n\t\t\tif Letter in LetterGraph:\n\t\t\t\tif LetterGraph[Letter] == i:\n\t\t\t\t\tprint(\"NO\")\n\t\t\t\t\treturn\n\t\t\t\tLetter = LetterGraph[Letter]\n\n\t\t\telse:\n\t\t\t\tbreak\n\n# Находим возможные первые символы\n\nif LetterGraph:\n\tIsIFirstSymbol = False\n\tFirstSymbols = []\n\n\tfor i in LetterGraph:\n\t\tIsIFirstSymbol = True\n\t\tfor e in LetterGraph:\n\t\t\tif LetterGraph[e] == i:\n\t\t\t\t#print(i, \"не подходит, потому что\", e, \"указывает на него.\")\n\t\t\t\tIsIFirstSymbol = False\n\t\tif IsIFirstSymbol:\n\t\t\tFirstSymbols.append(i)\n\n\tif not FirstSymbols:\n\t\tprint(\"NO\")\n\t\treturn\n\n#print(\"Варианты первого символа:\", *FirstSymbols)\n\n# Создаем варианты финальной строки\n\nif LetterGraph:\n\tLetter = \"\"\n\tfor i in FirstSymbols:\n\t\tFinalString = i\n\t\tLetter = i\n\t\tfor e in range(len(LetterGraph)):\n\t\t\tif Letter in LetterGraph:\n\t\t\t\tif not (LetterGraph[Letter] == \"\"):\n\t\t\t\t\tFinalString += LetterGraph[Letter]\n\t\t\t\t\t#print(Letter, \"есть в графе, так что добавляем\", LetterGraph[Letter], \", на которое оно указывает.\")\n\t\t\t\t\tLetter = LetterGraph[Letter]\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tbreak\n\n\t\tFinalStrings.append(FinalString)\n\n#print(\"Отдельные строки\", *FinalStrings)\n\nFinalStrings.sort()\n\nRESULT = \"\"\n\nfor i in FinalStrings:\n\tRESULT += i\n\nprint(RESULT)\n", "def generate_good_string(subs : list):\n\tIn, Out, S = {}, {}, set()\n\tfor s in subs:\n\t\tif len(s) == 1:\n\t\t\tS.add(s) \n\t\tfor fr, to in zip(s, s[1:]):\n\t\t\tif fr != In.get(to, fr) or to != Out.get(fr, to):\n\t\t\t\treturn(print('NO'))\n\t\t\tOut[fr], In[to] = to, fr\n\tOutset, Inset = set(Out), set(In)\n\tS -= (set.union(Outset, Inset))\n\tfor s in Outset - Inset:\n\t\twhile Out.get(s[-1]):\n\t\t\ts += Out.pop(s[-1])\n\t\tS.add(s)\n\tprint('NO' if Out else ''.join(sorted(S)))\nsubstrings = [input() for _ in range(int(input()))]\ngenerate_good_string(substrings)\n"], "id": "id6772"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6772", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["a", 1], ["substring", 1], ["of", 1], ["some", 1], ["string", 1], ["is", 1], ["called", 1], ["the", 1], ["most", 1], ["frequent", 1], ["if", 1], ["the", 1], ["number", 1], ["of", 1], ["its", 1], ["occurrences", 1], ["is", 1], ["not", 1], ["less", 1], ["than", 1], ["number", 1], ["of", 1], ["occurrences", 1], ["of", 1], ["any", 1], ["other", 1], ["substring", 1], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["set", 1], ["of", 1], ["strings", 1], ["a", 3], ["string", 3], ["not", 3], ["necessarily", 3], ["from", 3], ["this", 3], ["set", 3], ["is", 3], ["called", 3], ["good", 3], ["if", 3], ["all", 3], ["elements", 1], ["of", 1], ["the", 1], ["set", 1], ["are", 1], ["the", 1], ["most", 1], ["frequent", 1], ["substrings", 1], ["of", 1], ["this", 1], ["string", 1], ["restore", 1], ["the", 1], ["non", 1], ["empty", 1], ["good", 1], ["string", 1], ["with", 1], ["minimum", 1], ["length", 1], ["if", 1], ["several", 1], ["such", 1], ["strings", 1], ["exist", 0], ["restore", 0], ["lexicographically", 0], ["minimum", 0], ["string", 0], ["if", 0], ["there", 0], ["are", 0], ["no", 0], ["good", 0], ["strings", 0], ["print", 0], ["no", 0], ["without", 1], ["quotes", 1], ["a", 1], ["substring", 1], ["of", 1], ["a", 1], ["string", 0], ["is", 0], ["a", 0], ["contiguous", 0], ["subsequence", 0], ["of", 0], ["letters", 0], ["in", 0], ["the", 0], ["string", 0], ["for", 0], ["example", 0], ["ab", 0], ["c", 0], ["abc", 0], ["are", 0], ["substrings", 0], ["of", 0], ["string", 0], ["abc", 0], ["while", 0], ["ac", 0], ["is", 1], ["not", 1], ["a", 1], ["substring", 1], ["of", 1], ["that", 1], ["string", 1], ["the", 1], ["number", 1], ["of", 1], ["occurrences", 1], ["of", 1], ["a", 1], ["substring", 1], ["in", 1], ["a", 1], ["string", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["starting", 1], ["positions", 1], ["in", 1], ["the", 1], ["string", 1], ["where", 1], ["the", 1], ["substring", 1], ["occurs", 1], ["these", 1], ["occurrences", 1], ["could", 1], ["overlap", 1], ["string", 1], ["a", 1], ["is", 1], ["lexicographically", 1], ["smaller", 1], ["than", 1], ["string", 1], ["b", 1], ["if", 1], ["a", 1], ["is", 1], ["a", 1], ["prefix", 1], ["of", 1], ["b", 1], ["or", 1], ["a", 1], ["has", 1], ["a", 0], ["smaller", 0], ["letter", 0], ["at", 0], ["the", 0], ["first", 0], ["position", 0], ["where", 0], ["a", 0], ["and", 0], ["b", 0], ["differ", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["integer", 1], ["n", 1], ["1", 1], ["≤", 1], ["n", 1], ["≤", 1], ["10", 1], ["5", 1], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["strings", 1], ["in", 1], ["the", 1], ["set", 1], ["each", 1], ["of", 1], ["the", 1], ["next", 1], ["n", 1], ["lines", 1], ["contains", 1], ["a", 1], ["non", 1], ["empty", 1], ["string", 1], ["consisting", 1], ["of", 1], ["lowercase", 1], ["english", 1], ["letters", 1], ["it", 1], ["is", 1], ["guaranteed", 0], ["that", 0], ["the", 0], ["strings", 0], ["are", 0], ["distinct", 0], ["the", 0], ["total", 0], ["length", 0], ["of", 0], ["the", 0], ["strings", 0], ["doesn", 0], ["t", 0], ["exceed", 0], ["10", 0], ["5", 0], ["output", 0], ["print", 1], ["the", 1], ["non", 1], ["empty", 1], ["good", 1], ["string", 1], ["with", 1], ["minimum", 1], ["length", 0], ["if", 0], ["several", 0], ["good", 0], ["strings", 0], ["exist", 0], ["print", 0], ["lexicographically", 0], ["minimum", 0], ["among", 0], ["them", 0], ["print", 0], ["no", 0], ["without", 0], ["quotes", 0], ["if", 0], ["there", 0], ["are", 0], ["no", 0], ["good", 0], ["strings", 0], ["examples", 0], ["input", 0], ["4", 0], ["mail", 0], ["ai", 0], ["lru", 0], ["cf", 0], ["output", 0], ["cfmailru", 0], ["input", 0], ["3", 0], ["kek", 0], ["preceq", 0], ["cheburek", 0], ["output", 0], ["no", 0], ["note", 0], ["one", 0], ["can", 0], ["show", 0], ["that", 0], ["in", 0], ["the", 0], ["first", 0], ["sample", 0], ["only", 0], ["two", 0], ["good", 0], ["strings", 0], ["with", 0], ["minimum", 0], ["length", 0], ["exist", 0], ["cfmailru", 0], ["and", 0], ["mailrucf", 0], ["the", 0], ["first", 0], ["string", 0], ["is", 0], ["lexicographically", 0], ["minimum", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5775577557755776, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5511551155115513, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.746031746031746, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.746031746031746, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5775577557755776, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5511551155115513, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.746031746031746, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.746031746031746, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["wrong", 0], ["str", 0], ["false", 0], ["strings", 0], ["sets", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["new", 0], ["string", 0], ["input", 0], ["new", 0], ["string", 0], ["set", 0], ["set", 0], ["new", 0], ["string", 0], ["if", 0], ["len", 0], ["new", 0], ["string", 0], ["len", 0], ["new", 0], ["string", 0], ["set", 0], ["wrong", 0], ["str", 0], ["true", 0], ["break", 0], ["strings", 0], ["append", 0], ["new", 0], ["string", 0], ["sets", 0], ["append", 0], ["new", 0], ["string", 0], ["set", 0], ["if", 0], ["wrong", 0], ["str", 0], ["print", 0], ["no", 0], ["return", 0], ["connections", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["connections", 0], ["append", 0], ["1", 0], ["1", 0], ["changed", 0], ["true", 0], ["while", 0], ["changed", 0], ["changed", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["strings", 0], ["if", 0], ["strings", 0], ["i", 0], ["none", 0], ["continue", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["1", 0], ["len", 0], ["strings", 0], ["if", 0], ["strings", 0], ["j", 0], ["none", 0], ["continue", 0], ["if", 0], ["len", 0], ["set", 0], ["strings", 0], ["i", 0], ["intersection", 0], ["set", 0], ["strings", 0], ["j", 0], ["0", 0], ["continue", 0], ["a", 0], ["strings", 0], ["i", 0], ["b", 0], ["strings", 0], ["j", 0], ["print", 0], ["a", 0], ["b", 0], ["if", 0], ["b", 0], ["in", 0], ["a", 0], ["strings", 0], ["j", 0], ["none", 0], ["changed", 0], ["true", 0], ["elif", 0], ["a", 0], ["in", 0], ["b", 0], ["strings", 0], ["i", 0], ["b", 0], ["strings", 0], ["j", 0], ["none", 0], ["changed", 0], ["true", 0], ["else", 0], ["is", 0], ["ok", 0], ["false", 0], ["start", 0], ["index", 0], ["a", 0], ["find", 0], ["b", 0], ["0", 0], ["if", 0], ["start", 0], ["index", 0], ["1", 0], ["and", 0], ["a", 0], ["start", 0], ["index", 0], ["in", 0], ["b", 0], ["strings", 0], ["i", 0], ["strings", 0], ["j", 0], ["len", 0], ["a", 0], ["start", 0], ["index", 0], ["strings", 0], ["j", 0], ["none", 0], ["is", 0], ["ok", 0], ["true", 0], ["changed", 0], ["true", 0], ["if", 0], ["not", 0], ["is", 0], ["ok", 0], ["start", 0], ["index", 0], ["b", 0], ["find", 0], ["a", 0], ["0", 0], ["if", 0], ["start", 0], ["index", 0], ["1", 0], ["and", 0], ["b", 0], ["start", 0], ["index", 0], ["in", 0], ["a", 0], ["strings", 0], ["i", 0], ["strings", 0], ["j", 0], ["strings", 0], ["i", 0], ["len", 0], ["b", 0], ["start", 0], ["index", 0], ["strings", 0], ["j", 0], ["none", 0], ["is", 0], ["ok", 0], ["true", 0], ["changed", 0], ["true", 0], ["if", 0], ["not", 0], ["is", 0], ["ok", 0], ["print", 0], ["no", 0], ["return", 0], ["if", 0], ["wrong", 0], ["str", 0], ["print", 0], ["no", 0], ["return", 0], ["strings", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["strings", 0], ["if", 0], ["x", 0], ["is", 0], ["not", 0], ["none", 0], ["whole", 0], ["str", 0], ["join", 0], ["strings", 0], ["if", 0], ["len", 0], ["whole", 0], ["str", 0], ["len", 0], ["set", 0], ["whole", 0], ["str", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["join", 0], ["sorted", 0], ["strings", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["a", 0], ["a", 0], ["input", 0], ["start", 0], ["100", 0], ["26", 0], ["end", 0], ["100", 0], ["26", 0], ["def", 0], ["num", 0], ["x", 0], ["return", 0], ["ord", 0], ["x", 0], ["ord", 0], ["a", 0], ["def", 0], ["let", 0], ["x", 0], ["return", 0], ["chr", 0], ["x", 0], ["ord", 0], ["a", 0], ["def", 0], ["ans", 0], ["x", 0], ["final", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["b", 0], ["list", 0], ["a", 0], ["i", 0], ["if", 0], ["len", 0], ["b", 0], ["1", 0], ["if", 0], ["start", 0], ["num", 0], ["b", 0], ["0", 0], ["100", 0], ["start", 0], ["num", 0], ["b", 0], ["0", 0], ["100", 0], ["if", 0], ["end", 0], ["num", 0], ["b", 0], ["0", 0], ["100", 0], ["end", 0], ["num", 0], ["b", 0], ["0", 0], ["100", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["b", 0], ["if", 0], ["j", 0], ["0", 0], ["if", 0], ["start", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["or", 0], ["start", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["start", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["if", 0], ["end", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["or", 0], ["end", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["end", 0], ["num", 0], ["b", 0], ["j", 0], ["num", 0], ["b", 0], ["j", 0], ["1", 0], ["elif", 0], ["end", 0], ["num", 0], ["b", 0], ["j", 0], ["num", 0], ["b", 0], ["j", 0], ["1", 0], ["g", 0], ["0", 0], ["else", 0], ["return", 0], ["no", 0], ["elif", 0], ["0", 0], ["j", 0], ["len", 0], ["b", 0], ["1", 0], ["if", 0], ["start", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["or", 0], ["start", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["start", 0], ["num", 0], ["b", 0], ["j", 0], ["num", 0], ["b", 0], ["j", 0], ["1", 0], ["elif", 0], ["start", 0], ["num", 0], ["b", 0], ["j", 0], ["num", 0], ["b", 0], ["j", 0], ["1", 0], ["return", 0], ["no", 0], ["if", 0], ["end", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["or", 0], ["end", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["end", 0], ["num", 0], ["b", 0], ["j", 0], ["num", 0], ["b", 0], ["j", 0], ["1", 0], ["elif", 0], ["end", 0], ["num", 0], ["b", 0], ["j", 0], ["num", 0], ["b", 0], ["j", 0], ["1", 0], ["return", 0], ["no", 0], ["elif", 0], ["j", 0], ["len", 0], ["b", 0], ["1", 0], ["if", 0], ["end", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["end", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["if", 0], ["start", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["or", 0], ["start", 0], ["num", 0], ["b", 0], ["j", 0], ["100", 0], ["start", 0], ["num", 0], ["b", 0], ["j", 0], ["num", 0], ["b", 0], ["j", 0], ["1", 0], ["elif", 0], ["start", 0], ["num", 0], ["b", 0], ["j", 0], ["num", 0], ["b", 0], ["j", 0], ["1", 0], ["g", 0], ["0", 0], ["else", 0], ["return", 0], ["no", 0], ["if", 0], ["len", 0], ["set", 0], ["start", 0], ["max", 0], ["0", 0], ["start", 0], ["count", 0], ["100", 0], ["1", 0], ["max", 0], ["0", 0], ["start", 0], ["count", 0], ["100", 0], ["1", 0], ["26", 0], ["return", 0], ["no", 0], ["elif", 0], ["len", 0], ["set", 0], ["end", 0], ["max", 0], ["0", 0], ["end", 0], ["count", 0], ["100", 0], ["1", 0], ["max", 0], ["0", 0], ["end", 0], ["count", 0], ["100", 0], ["1", 0], ["26", 0], ["return", 0], ["no", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["26", 0], ["if", 0], ["start", 0], ["i", 0], ["100", 0], ["g", 0], ["0", 0], ["else", 0], ["final", 0], ["final", 0], ["let", 0], ["i", 0], ["j", 0], ["end", 0], ["i", 0], ["while", 0], ["j", 0], ["100", 0], ["final", 0], ["final", 0], ["let", 0], ["j", 0], ["j", 0], ["end", 0], ["j", 0], ["if", 0], ["len", 0], ["final", 0], ["len", 0], ["set", 0], ["start", 0], ["min", 0], ["1", 0], ["start", 0], ["count", 0], ["100", 0], ["max", 0], ["0", 0], ["start", 0], ["count", 0], ["100", 0], ["1", 0], ["return", 0], ["no", 0], ["else", 0], ["return", 0], ["join", 0], ["final", 0], ["print", 0], ["ans", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["m", 0], ["sc", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["m", 0], ["append", 0], ["input", 0], ["sc", 0], ["append", 0], ["set", 0], ["m", 0], ["i", 0], ["if", 0], ["len", 0], ["sc", 0], ["i", 0], ["len", 0], ["m", 0], ["i", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["i", 0], ["0", 0], ["px", 0], ["false", 0], ["while", 0], ["i", 0], ["len", 0], ["m", 0], ["j", 0], ["i", 0], ["1", 0], ["p", 0], ["false", 0], ["while", 0], ["j", 0], ["len", 0], ["m", 0], ["print", 0], ["m", 0], ["z", 0], ["len", 0], ["sc", 0], ["i", 0], ["intersection", 0], ["sc", 0], ["j", 0], ["a", 0], ["len", 0], ["sc", 0], ["i", 0], ["b", 0], ["len", 0], ["sc", 0], ["j", 0], ["if", 0], ["m", 0], ["i", 0], ["in", 0], ["m", 0], ["j", 0], ["m", 0], ["i", 0], ["m", 0], ["j", 0], ["sc", 0], ["i", 0], ["sc", 0], ["j", 0], ["sc", 0], ["pop", 0], ["j", 0], ["m", 0], ["pop", 0], ["j", 0], ["p", 0], ["true", 0], ["break", 0], ["elif", 0], ["m", 0], ["j", 0], ["in", 0], ["m", 0], ["i", 0], ["sc", 0], ["pop", 0], ["j", 0], ["m", 0], ["pop", 0], ["j", 0], ["j", 0], ["1", 0], ["elif", 0], ["z", 0], ["0", 0], ["if", 0], ["m", 0], ["i", 0], ["z", 0], ["m", 0], ["j", 0], ["z", 0], ["m", 0], ["i", 0], ["m", 0], ["j", 0], ["z", 0], ["elif", 0], ["m", 0], ["j", 0], ["z", 0], ["m", 0], ["i", 0], ["z", 0], ["m", 0], ["i", 0], ["m", 0], ["j", 0], ["m", 0], ["i", 0], ["z", 0], ["else", 0], ["px", 0], ["true", 0], ["break", 0], ["sc", 0], ["i", 0], ["set", 0], ["m", 0], ["i", 0], ["m", 0], ["pop", 0], ["j", 0], ["sc", 0], ["pop", 0], ["j", 0], ["j", 0], ["1", 0], ["p", 0], ["true", 0], ["j", 0], ["1", 0], ["if", 0], ["not", 0], ["p", 0], ["i", 0], ["1", 0], ["if", 0], ["px", 0], ["print", 0], ["no", 0], ["break", 0], ["if", 0], ["not", 0], ["px", 0], ["print", 0], ["join", 0], ["sorted", 0], ["m", 0], ["n", 0], ["int", 0], ["input", 0], ["m", 0], ["sc", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["m", 0], ["append", 0], ["input", 0], ["sc", 0], ["append", 0], ["set", 0], ["m", 0], ["i", 0], ["if", 0], ["len", 0], ["sc", 0], ["i", 0], ["len", 0], ["m", 0], ["i", 0], ["print", 0], ["no", 0], ["break", 0], ["else", 0], ["i", 0], ["0", 0], ["px", 0], ["false", 0], ["while", 0], ["i", 0], ["len", 0], ["m", 0], ["j", 0], ["i", 0], ["1", 0], ["p", 0], ["false", 0], ["while", 0], ["j", 0], ["len", 0], ["m", 0], ["print", 0], ["m", 0], ["z", 0], ["len", 0], ["sc", 0], ["i", 0], ["intersection", 0], ["sc", 0], ["j", 0], ["a", 0], ["len", 0], ["sc", 0], ["i", 0], ["b", 0], ["len", 0], ["sc", 0], ["j", 0], ["if", 0], ["m", 0], ["i", 0], ["in", 0], ["m", 0], ["j", 0], ["m", 0], ["i", 0], ["m", 0], ["j", 0], ["sc", 0], ["i", 0], ["sc", 0], ["j", 0], ["sc", 0], ["pop", 0], ["j", 0], ["m", 0], ["pop", 0], ["j", 0], ["p", 0], ["true", 0], ["break", 0], ["elif", 0], ["m", 0], ["j", 0], ["in", 0], ["m", 0], ["i", 0], ["sc", 0], ["pop", 0], ["j", 0], ["m", 0], ["pop", 0], ["j", 0], ["j", 0], ["1", 0], ["elif", 0], ["z", 0], ["0", 0], ["if", 0], ["m", 0], ["i", 0], ["z", 0], ["m", 0], ["j", 0], ["z", 0], ["m", 0], ["i", 0], ["m", 0], ["j", 0], ["z", 0], ["elif", 0], ["m", 0], ["j", 0], ["z", 0], ["m", 0], ["i", 0], ["z", 0], ["m", 0], ["i", 0], ["m", 0], ["j", 0], ["m", 0], ["i", 0], ["z", 0], ["else", 0], ["px", 0], ["true", 0], ["break", 0], ["sc", 0], ["i", 0], ["set", 0], ["m", 0], ["i", 0], ["m", 0], ["pop", 0], ["j", 0], ["sc", 0], ["pop", 0], ["j", 0], ["j", 0], ["1", 0], ["p", 0], ["true", 0], ["j", 0], ["1", 0], ["if", 0], ["not", 0], ["p", 0], ["i", 0], ["1", 0], ["if", 0], ["px", 0], ["print", 0], ["no", 0], ["break", 0], ["if", 0], ["not", 0], ["px", 0], ["print", 0], ["join", 0], ["sorted", 0], ["m", 0], ["u", 0], ["v", 0], ["d", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["t", 0], ["input", 0], ["if", 0], ["len", 0], ["t", 0], ["1", 0], ["d", 0], ["add", 0], ["t", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["t", 0], ["t", 0], ["1", 0], ["if", 0], ["u", 0], ["get", 0], ["a", 0], ["b", 0], ["b", 0], ["or", 0], ["v", 0], ["get", 0], ["b", 0], ["a", 0], ["a", 0], ["print", 0], ["no", 0], ["return", 0], ["u", 0], ["a", 0], ["v", 0], ["b", 0], ["b", 0], ["a", 0], ["d", 0], ["d", 0], ["set", 0], ["u", 0], ["set", 0], ["v", 0], ["for", 0], ["q", 0], ["in", 0], ["set", 0], ["u", 0], ["difference", 0], ["v", 0], ["while", 0], ["q", 0], ["1", 0], ["in", 0], ["u", 0], ["q", 0], ["u", 0], ["pop", 0], ["q", 0], ["1", 0], ["d", 0], ["add", 0], ["q", 0], ["if", 0], ["u", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["join", 0], ["sorted", 0], ["d", 0], ["u", 0], ["v", 0], ["d", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["t", 0], ["input", 0], ["if", 0], ["len", 0], ["t", 0], ["1", 0], ["d", 0], ["add", 0], ["t", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["t", 0], ["t", 0], ["1", 0], ["if", 0], ["u", 0], ["get", 0], ["a", 0], ["b", 0], ["b", 0], ["or", 0], ["v", 0], ["get", 0], ["b", 0], ["a", 0], ["a", 0], ["print", 0], ["no", 0], ["return", 0], ["u", 0], ["a", 0], ["v", 0], ["b", 0], ["b", 0], ["a", 0], ["x", 0], ["y", 0], ["set", 0], ["u", 0], ["set", 0], ["v", 0], ["d", 0], ["d", 0], ["x", 0], ["y", 0], ["for", 0], ["q", 0], ["in", 0], ["x", 0], ["y", 0], ["while", 0], ["q", 0], ["1", 0], ["in", 0], ["u", 0], ["q", 0], ["u", 0], ["pop", 0], ["q", 0], ["1", 0], ["d", 0], ["add", 0], ["q", 0], ["if", 0], ["u", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["join", 0], ["sorted", 0], ["d", 0], ["n", 0], ["int", 0], ["input", 0], ["u", 0], ["s", 0], ["ok", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["u", 0], ["append", 0], ["input", 0], ["s", 0], ["append", 0], ["set", 0], ["u", 0], ["i", 0], ["if", 0], ["len", 0], ["s", 0], ["i", 0], ["len", 0], ["u", 0], ["i", 0], ["print", 0], ["no", 0], ["ok", 0], ["false", 0], ["break", 0], ["if", 0], ["ok", 0], ["i", 0], ["0", 0], ["ok", 0], ["false", 0], ["while", 0], ["i", 0], ["len", 0], ["u", 0], ["j", 0], ["i", 0], ["1", 0], ["p", 0], ["false", 0], ["while", 0], ["j", 0], ["len", 0], ["u", 0], ["z", 0], ["len", 0], ["s", 0], ["i", 0], ["intersection", 0], ["s", 0], ["j", 0], ["if", 0], ["u", 0], ["i", 0], ["in", 0], ["u", 0], ["j", 0], ["u", 0], ["i", 0], ["u", 0], ["j", 0], ["s", 0], ["i", 0], ["s", 0], ["j", 0], ["s", 0], ["pop", 0], ["j", 0], ["u", 0], ["pop", 0], ["j", 0], ["p", 0], ["true", 0], ["break", 0], ["elif", 0], ["u", 0], ["j", 0], ["in", 0], ["u", 0], ["i", 0], ["s", 0], ["pop", 0], ["j", 0], ["u", 0], ["pop", 0], ["j", 0], ["j", 0], ["1", 0], ["elif", 0], ["z", 0], ["0", 0], ["if", 0], ["u", 0], ["i", 0], ["z", 0], ["u", 0], ["j", 0], ["z", 0], ["u", 0], ["i", 0], ["u", 0], ["j", 0], ["z", 0], ["elif", 0], ["u", 0], ["j", 0], ["z", 0], ["u", 0], ["i", 0], ["z", 0], ["u", 0], ["i", 0], ["u", 0], ["j", 0], ["u", 0], ["i", 0], ["z", 0], ["else", 0], ["ok", 0], ["true", 0], ["break", 0], ["s", 0], ["i", 0], ["set", 0], ["u", 0], ["i", 0], ["u", 0], ["pop", 0], ["j", 0], ["s", 0], ["pop", 0], ["j", 0], ["j", 0], ["1", 0], ["p", 0], ["true", 0], ["j", 0], ["1", 0], ["if", 0], ["not", 0], ["p", 0], ["i", 0], ["1", 0], ["if", 0], ["ok", 0], ["print", 0], ["no", 0], ["break", 0], ["if", 0], ["not", 0], ["ok", 0], ["u", 0], ["sort", 0], ["print", 0], ["join", 0], ["u", 0], ["https", 0], ["codeforces", 0], ["com", 0], ["problemset", 0], ["problem", 0], ["886", 0], ["d", 0], ["def", 0], ["is", 0], ["all", 0], ["used", 0], ["used", 0], ["for", 0], ["val", 0], ["in", 0], ["list", 0], ["used", 0], ["values", 0], ["if", 0], ["val", 0], ["true", 0], ["return", 0], ["false", 0], ["return", 0], ["true", 0], ["def", 0], ["is", 0], ["circle", 0], ["d", 0], ["pre", 0], ["used", 0], ["x", 0], ["false", 0], ["for", 0], ["x", 0], ["in", 0], ["d", 0], ["pre", 0], ["none", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["used", 0], ["if", 0], ["x", 0], ["not", 0], ["in", 0], ["pre", 0], ["s", 0], ["arr", 0], ["for", 0], ["x", 0], ["in", 0], ["pre", 0], ["none", 0], ["cur", 0], ["flg", 0], ["dfs", 0], ["x", 0], ["d", 0], ["used", 0], ["cur", 0], ["if", 0], ["flg", 0], ["true", 0], ["return", 0], ["true", 0], ["none", 0], ["s", 0], ["arr", 0], ["append", 0], ["cur", 0], ["if", 0], ["is", 0], ["all", 0], ["used", 0], ["used", 0], ["true", 0], ["return", 0], ["true", 0], ["none", 0], ["return", 0], ["false", 0], ["s", 0], ["arr", 0], ["def", 0], ["dfs", 0], ["u", 0], ["d", 0], ["used", 0], ["cur", 0], ["used", 0], ["u", 0], ["true", 0], ["cur", 0], ["append", 0], ["u", 0], ["flg", 0], ["false", 0], ["for", 0], ["v", 0], ["in", 0], ["d", 0], ["u", 0], ["if", 0], ["used", 0], ["v", 0], ["true", 0], ["return", 0], ["true", 0], ["flg", 0], ["dfs", 0], ["v", 0], ["d", 0], ["used", 0], ["cur", 0], ["if", 0], ["flg", 0], ["true", 0], ["return", 0], ["flg", 0], ["return", 0], ["flg", 0], ["def", 0], ["push", 0], ["d", 0], ["u", 0], ["v", 0], ["none", 0], ["if", 0], ["u", 0], ["not", 0], ["in", 0], ["d", 0], ["d", 0], ["u", 0], ["set", 0], ["if", 0], ["v", 0], ["is", 0], ["not", 0], ["none", 0], ["if", 0], ["v", 0], ["not", 0], ["in", 0], ["d", 0], ["d", 0], ["v", 0], ["set", 0], ["d", 0], ["u", 0], ["add", 0], ["v", 0], ["def", 0], ["push", 0], ["p", 0], ["d", 0], ["v", 0], ["if", 0], ["v", 0], ["not", 0], ["in", 0], ["d", 0], ["d", 0], ["v", 0], ["0", 0], ["d", 0], ["v", 0], ["1", 0], ["def", 0], ["is", 0], ["deg", 0], ["valid", 0], ["d", 0], ["for", 0], ["u", 0], ["in", 0], ["d", 0], ["if", 0], ["len", 0], ["d", 0], ["u", 0], ["1", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["def", 0], ["solve", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["pre", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["1", 0], ["push", 0], ["d", 0], ["s", 0], ["else", 0], ["for", 0], ["u", 0], ["v", 0], ["in", 0], ["zip", 0], ["s", 0], ["1", 0], ["s", 0], ["1", 0], ["push", 0], ["d", 0], ["u", 0], ["v", 0], ["push", 0], ["p", 0], ["pre", 0], ["v", 0], ["flg", 0], ["arr", 0], ["is", 0], ["circle", 0], ["d", 0], ["pre", 0], ["if", 0], ["is", 0], ["deg", 0], ["valid", 0], ["d", 0], ["or", 0], ["flg", 0], ["true", 0], ["return", 0], ["no", 0], ["s", 0], ["join", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["s", 0], ["sorted", 0], ["s", 0], ["return", 0], ["join", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["print", 0], ["solve", 0], ["4", 0], ["mail", 0], ["ai", 0], ["lru", 0], ["cf", 0], ["3", 0], ["kek", 0], ["preceq", 0], ["cheburek", 0], ["l", 0], ["r", 0], ["s", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["if", 0], ["len", 0], ["s", 0], ["1", 0], ["s", 0], ["add", 0], ["s", 0], ["for", 0], ["s1", 0], ["s2", 0], ["in", 0], ["zip", 0], ["s", 0], ["s", 0], ["1", 0], ["if", 0], ["s2", 0], ["l", 0], ["get", 0], ["s1", 0], ["s2", 0], ["or", 0], ["s1", 0], ["r", 0], ["get", 0], ["s2", 0], ["s1", 0], ["print", 0], ["no", 0], ["return", 0], ["l", 0], ["s1", 0], ["r", 0], ["s2", 0], ["s2", 0], ["s1", 0], ["l1", 0], ["r1", 0], ["set", 0], ["l", 0], ["set", 0], ["r", 0], ["s", 0], ["s", 0], ["l1", 0], ["r1", 0], ["for", 0], ["i", 0], ["in", 0], ["l1", 0], ["r1", 0], ["while", 0], ["i", 0], ["1", 0], ["in", 0], ["l", 0], ["i", 0], ["l", 0], ["pop", 0], ["i", 0], ["1", 0], ["s", 0], ["add", 0], ["i", 0], ["if", 0], ["l", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["join", 0], ["sorted", 0], ["s", 0], ["stringsnumber", 0], ["int", 0], ["input", 0], ["finalstrings", 0], ["strings", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["stringsnumber", 0], ["strings", 0], ["append", 0], ["input", 0], ["lettergraph", 0], ["генерим", 0], ["граф", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["strings", 0], ["if", 0], ["len", 0], ["strings", 0], ["i", 0], ["1", 0], ["if", 0], ["strings", 0], ["i", 0], ["not", 0], ["in", 0], ["lettergraph", 0], ["lettergraph", 0], ["strings", 0], ["i", 0], ["print", 0], ["заапедил", 0], ["i", 0], ["continue", 0], ["for", 0], ["e", 0], ["in", 0], ["range", 0], ["len", 0], ["strings", 0], ["i", 0], ["1", 0], ["if", 0], ["strings", 0], ["i", 0], ["e", 0], ["not", 0], ["in", 0], ["lettergraph", 0], ["elements", 0], ["for", 0], ["j", 0], ["in", 0], ["list", 0], ["lettergraph", 0], ["if", 0], ["j", 0], ["strings", 0], ["i", 0], ["e", 0], ["1", 0], ["elements", 0], ["append", 0], ["lettergraph", 0], ["j", 0], ["if", 0], ["strings", 0], ["i", 0], ["e", 0], ["1", 0], ["in", 0], ["elements", 0], ["print", 0], ["no", 0], ["return", 0], ["lettergraph", 0], ["strings", 0], ["i", 0], ["e", 0], ["strings", 0], ["i", 0], ["e", 0], ["1", 0], ["continue", 0], ["if", 0], ["lettergraph", 0], ["strings", 0], ["i", 0], ["e", 0], ["strings", 0], ["i", 0], ["e", 0], ["1", 0], ["or", 0], ["lettergraph", 0], ["strings", 0], ["i", 0], ["e", 0], ["lettergraph", 0], ["strings", 0], ["i", 0], ["e", 0], ["strings", 0], ["i", 0], ["e", 0], ["1", 0], ["continue", 0], ["print", 0], ["граф", 0], ["lettergraph", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["я", 0], ["сгенерил", 0], ["граф", 0], ["получилось", 0], ["lettergraph", 0], ["проверяем", 0], ["что", 0], ["нету", 0], ["цикла", 0], ["if", 0], ["lettergraph", 0], ["cycle", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["lettergraph", 0], ["letter", 0], ["lettergraph", 0], ["i", 0], ["while", 0], ["true", 0], ["if", 0], ["letter", 0], ["in", 0], ["lettergraph", 0], ["if", 0], ["lettergraph", 0], ["letter", 0], ["i", 0], ["print", 0], ["no", 0], ["return", 0], ["letter", 0], ["lettergraph", 0], ["letter", 0], ["else", 0], ["break", 0], ["находим", 0], ["возможные", 0], ["первые", 0], ["символы", 0], ["if", 0], ["lettergraph", 0], ["isifirstsymbol", 0], ["false", 0], ["firstsymbols", 0], ["for", 0], ["i", 0], ["in", 0], ["lettergraph", 0], ["isifirstsymbol", 0], ["true", 0], ["for", 0], ["e", 0], ["in", 0], ["lettergraph", 0], ["if", 0], ["lettergraph", 0], ["e", 0], ["i", 0], ["print", 0], ["i", 0], ["не", 0], ["подходит", 0], ["потому", 0], ["что", 0], ["e", 0], ["указывает", 0], ["на", 0], ["него", 0], ["isifirstsymbol", 0], ["false", 0], ["if", 0], ["isifirstsymbol", 0], ["firstsymbols", 0], ["append", 0], ["i", 0], ["if", 0], ["not", 0], ["firstsymbols", 0], ["print", 0], ["no", 0], ["return", 0], ["print", 0], ["варианты", 0], ["первого", 0], ["символа", 0], ["firstsymbols", 0], ["создаем", 0], ["варианты", 0], ["финальной", 0], ["строки", 0], ["if", 0], ["lettergraph", 0], ["letter", 0], ["for", 0], ["i", 0], ["in", 0], ["firstsymbols", 0], ["finalstring", 0], ["i", 0], ["letter", 0], ["i", 0], ["for", 0], ["e", 0], ["in", 0], ["range", 0], ["len", 0], ["lettergraph", 0], ["if", 0], ["letter", 0], ["in", 0], ["lettergraph", 0], ["if", 0], ["not", 0], ["lettergraph", 0], ["letter", 0], ["finalstring", 0], ["lettergraph", 0], ["letter", 0], ["print", 0], ["letter", 0], ["есть", 0], ["в", 0], ["графе", 0], ["так", 0], ["что", 0], ["добавляем", 0], ["lettergraph", 0], ["letter", 0], ["на", 0], ["которое", 0], ["оно", 0], ["указывает", 0], ["letter", 0], ["lettergraph", 0], ["letter", 0], ["else", 0], ["break", 0], ["else", 0], ["break", 0], ["finalstrings", 0], ["append", 0], ["finalstring", 0], ["print", 0], ["отдельные", 0], ["строки", 0], ["finalstrings", 0], ["finalstrings", 0], ["sort", 0], ["result", 0], ["for", 0], ["i", 0], ["in", 0], ["finalstrings", 0], ["result", 0], ["i", 0], ["print", 0], ["result", 0], ["def", 0], ["generate", 0], ["good", 0], ["string", 0], ["subs", 0], ["list", 0], ["in", 0], ["out", 0], ["s", 0], ["set", 0], ["for", 0], ["s", 0], ["in", 0], ["subs", 0], ["if", 0], ["len", 0], ["s", 0], ["1", 0], ["s", 0], ["add", 0], ["s", 0], ["for", 0], ["fr", 0], ["to", 0], ["in", 0], ["zip", 0], ["s", 0], ["s", 0], ["1", 0], ["if", 0], ["fr", 0], ["in", 0], ["get", 0], ["to", 0], ["fr", 0], ["or", 0], ["to", 0], ["out", 0], ["get", 0], ["fr", 0], ["to", 0], ["return", 0], ["print", 0], ["no", 0], ["out", 0], ["fr", 0], ["in", 0], ["to", 0], ["to", 0], ["fr", 0], ["outset", 0], ["inset", 0], ["set", 0], ["out", 0], ["set", 0], ["in", 0], ["s", 0], ["set", 0], ["union", 0], ["outset", 0], ["inset", 0], ["for", 0], ["s", 0], ["in", 0], ["outset", 0], ["inset", 0], ["while", 0], ["out", 0], ["get", 0], ["s", 0], ["1", 0], ["s", 0], ["out", 0], ["pop", 0], ["s", 0], ["1", 0], ["s", 0], ["add", 0], ["s", 0], ["print", 0], ["no", 0], ["if", 0], ["out", 0], ["else", 0], ["join", 0], ["sorted", 0], ["s", 0], ["substrings", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["generate", 0], ["good", 0], ["string", 0], ["substrings", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThere is a game in which you try not to repeat a word while your opponent tries to see if you have repeated one.\n\n\"THE RAIN IN SPAIN\" has no repeats.\n\n\"IN THE RAIN AND THE SNOW\" repeats THE.\n\n\"THE RAIN IN SPAIN IN THE PLAIN\" repeats THE and IN.\n\nWrite a program to test a phrase.\n\n-----Input-----\nInput is a line containing words separated by single spaces, where a word consists of one or more uppercase letters. A line contains no more than $80$ characters.\n\n-----Output-----\nThe output is \"yes\" if no word is repeated, and \"no\" if one or more words repeat.\n\n-----Examples-----\nSample Input 1:\nTHE RAIN IN SPAIN\nSample Output 1:\nyes\n\nSample Input 2:\nIN THE RAIN AND THE SNOW\nSample Output 2:\nno\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6460"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6460", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["there", 1], ["is", 1], ["a", 1], ["game", 1], ["in", 1], ["which", 1], ["you", 1], ["try", 1], ["not", 1], ["to", 1], ["repeat", 1], ["a", 1], ["word", 1], ["while", 1], ["your", 1], ["opponent", 1], ["tries", 1], ["to", 1], ["see", 1], ["if", 1], ["you", 1], ["have", 1], ["repeated", 1], ["one", 1], ["the", 1], ["rain", 1], ["in", 1], ["spain", 1], ["has", 1], ["no", 1], ["repeats", 1], ["in", 1], ["the", 1], ["rain", 1], ["and", 1], ["the", 1], ["snow", 1], ["repeats", 1], ["the", 1], ["the", 1], ["rain", 1], ["in", 1], ["spain", 1], ["in", 1], ["the", 1], ["plain", 1], ["repeats", 0], ["the", 0], ["and", 0], ["in", 0], ["write", 0], ["a", 0], ["program", 0], ["to", 0], ["test", 0], ["a", 0], ["phrase", 0], ["input", 0], ["input", 1], ["is", 1], ["a", 1], ["line", 1], ["containing", 1], ["words", 1], ["separated", 1], ["by", 1], ["single", 1], ["spaces", 1], ["where", 1], ["a", 1], ["word", 1], ["consists", 1], ["of", 1], ["one", 1], ["or", 0], ["more", 0], ["uppercase", 0], ["letters", 0], ["a", 0], ["line", 0], ["contains", 0], ["no", 0], ["more", 0], ["than", 0], ["80", 0], ["characters", 0], ["output", 0], ["the", 1], ["output", 1], ["is", 1], ["yes", 1], ["if", 1], ["no", 0], ["word", 0], ["is", 0], ["repeated", 0], ["and", 0], ["no", 0], ["if", 0], ["one", 0], ["or", 0], ["more", 0], ["words", 0], ["repeat", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["the", 0], ["rain", 0], ["in", 0], ["spain", 0], ["sample", 0], ["output", 0], ["1", 0], ["yes", 0], ["sample", 0], ["input", 0], ["2", 0], ["in", 0], ["the", 0], ["rain", 0], ["and", 0], ["the", 0], ["snow", 0], ["sample", 0], ["output", 0], ["2", 0], ["no", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5234375, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5234375, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7357142857142858, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7357142857142858, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5234375, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5234375, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7357142857142858, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7357142857142858, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThe Playfair cipher is a manual symmetric encryption technique and was the first digraph substitution cipher. The scheme was invented in 1854 by Charles Wheatstone, but bears the name of Lord Playfair who promoted the use of the cipher.\n\nThe Playfair cipher uses a $5$ by $5$ table containing each letter in the English alphabet exactly once (except ‘Q’ which is missing). The table constitutes the encryption key. To more easily remember the table, it is typically generated from a key phrase. First fill in the spaces in an empty table with the letters of the key phrase (dropping spaces and duplicate letters), then fill the remaining spaces with the rest of the letters of the alphabet in order. The key phrase is written in the top rows of the table, from left to right. For instance, if the key phrase is “playfair example”, the encryption key becomes\n\nP\n\nL\n\nA\n\nY\n\nF\n\nI\n\nR\n\nE\n\nX\n\nM\n\nB\n\nC\n\nD\n\nG\n\nH\n\nJ\n\nK\n\nN\n\nO\n\nS\n\nT\n\nU\n\nV\n\nW\n\nZ\n\nTo encrypt a message, one would remove all spaces and then break the message into digraphs (groups of $2$ letters) such that, for example, “Hello World” becomes “HE LL OW OR LD”. Then map them out on the key table, and apply the rule below that matches the letter combination:\n - If both letters are the same (or only one letter is left), add an ‘X’ after the first letter. Encrypt the new pair and continue (note that this changes all the remaining digraphs).\n - If the letters appear on the same row of your table, replace them with the letters to their immediate right respectively (wrapping around to the left side of the row if a letter in the original pair was on the right side of the row). With the table above, the digraph ‘CH’ would be encrypted ‘DB’.\n - If the letters appear on the same column of your table, replace them with the letters immediately below respectively (wrapping around to the top side of the column if a letter in the original pair was on the bottom side of the column). With the table above, the digraph ‘VA’ would be encrypted ‘AE’.\n - If the letters are not on the same row or column, replace them with the letters on the same row respectively but at the other pair of corners of the rectangle defined by the original pair. The order is important – the first letter of the encrypted pair is the one that lies on the same row as the first letter of the plaintext pair. With the table above, the digraph ‘KM’ would be encrypted ‘SR’.\n\nWrite a program that reads a key phrase and a plaintext to encrypt, and outputs the encrypted text.\n\nThe text to encrypt will not contain two ’x’s following each other, or an ’x’ as the last character, as this might cause the first rule above to repeat itself indefinitely.\n\n-----Input-----\nThe input contains two lines. The first line contains the key phrase. The second line contains the text to encrypt. Each line contains between $1$ and $1000$ characters, inclusive. Each character is a lower case English letter, ‘a’-‘z’ (except ‘q’), or a space character. Neither line starts or ends with a space.\n\n-----Output-----\nThe output should be a single line containing the encrypted text, in upper case. There should be no spaces in the output.\n\n-----Examples-----\nSample Input:\nplayfair example\nhide the gold in the tree stump\nSample Output:\nBMNDZBXDKYBEJVDMUIXMMNUVIF\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6431"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6431", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["the", 3], ["playfair", 1], ["cipher", 1], ["is", 1], ["a", 1], ["manual", 1], ["symmetric", 1], ["encryption", 1], ["technique", 1], ["and", 1], ["was", 1], ["the", 1], ["first", 1], ["digraph", 12], ["substitution", 19], ["cipher", 23], ["the", 39], ["scheme", 39], ["was", 39], ["invented", 41], ["in", 13], ["1854", 13], ["by", 11], ["charles", 11], ["wheatstone", 11], ["but", 13], ["bears", 13], ["the", 4], ["name", 0], ["of", 0], ["lord", 0], ["playfair", 0], ["who", 0], ["promoted", 0], ["the", 0], ["use", 0], ["of", 0], ["the", 0], ["cipher", 0], ["the", 0], ["playfair", 0], ["cipher", 0], ["uses", 0], ["a", 0], ["5", 0], ["by", 0], ["5", 0], ["table", 0], ["containing", 0], ["each", 0], ["letter", 0], ["in", 0], ["the", 0], ["english", 0], ["alphabet", 0], ["exactly", 0], ["once", 0], ["except", 0], ["‘q’", 0], ["which", 0], ["is", 0], ["missing", 0], ["the", 0], ["table", 0], ["constitutes", 0], ["the", 0], ["encryption", 0], ["key", 0], ["to", 0], ["more", 0], ["easily", 0], ["remember", 0], ["the", 0], ["table", 0], ["it", 0], ["is", 0], ["typically", 0], ["generated", 0], ["from", 0], ["a", 0], ["key", 0], ["phrase", 0], ["first", 0], ["fill", 0], ["in", 0], ["the", 0], ["spaces", 0], ["in", 0], ["an", 0], ["empty", 0], ["table", 0], ["with", 0], ["the", 0], ["letters", 0], ["of", 0], ["the", 0], ["key", 0], ["phrase", 0], ["dropping", 0], ["spaces", 0], ["and", 0], ["duplicate", 18], ["letters", 18], ["then", 18], ["fill", 18], ["the", 20], ["remaining", 20], ["spaces", 4], ["with", 0], ["the", 0], ["rest", 0], ["of", 0], ["the", 0], ["letters", 0], ["of", 0], ["the", 0], ["alphabet", 0], ["in", 0], ["order", 0], ["the", 0], ["key", 0], ["phrase", 0], ["is", 1], ["written", 0], ["in", 0], ["the", 0], ["top", 0], ["rows", 0], ["of", 0], ["the", 0], ["table", 0], ["from", 0], ["left", 0], ["to", 0], ["right", 0], ["for", 0], ["instance", 0], ["if", 0], ["the", 0], ["key", 0], ["phrase", 0], ["is", 0], ["“playfair", 0], ["example”", 0], ["the", 0], ["encryption", 0], ["key", 0], ["becomes", 4], ["p", 7], ["l", 7], ["a", 7], ["y", 4], ["f", 4], ["i", 4], ["r", 4], ["e", 4], ["x", 4], ["m", 4], ["b", 4], ["c", 4], ["d", 4], ["g", 0], ["h", 0], ["j", 0], ["k", 0], ["n", 0], ["o", 0], ["s", 0], ["t", 0], ["u", 0], ["v", 0], ["w", 0], ["z", 0], ["to", 0], ["encrypt", 0], ["a", 0], ["message", 0], ["one", 0], ["would", 0], ["remove", 0], ["all", 0], ["spaces", 0], ["and", 0], ["then", 0], ["break", 4], ["the", 0], ["message", 0], ["into", 0], ["digraphs", 0], ["groups", 0], ["of", 0], ["2", 0], ["letters", 0], ["such", 0], ["that", 0], ["for", 0], ["example", 0], ["“hello", 0], ["world”", 0], ["becomes", 0], ["“he", 0], ["ll", 0], ["ow", 0], ["or", 0], ["ld”", 0], ["then", 0], ["map", 0], ["them", 0], ["out", 0], ["on", 0], ["the", 0], ["key", 0], ["table", 0], ["and", 0], ["apply", 0], ["the", 0], ["rule", 0], ["below", 0], ["that", 0], ["matches", 0], ["the", 0], ["letter", 0], ["combination", 0], ["if", 8], ["both", 8], ["letters", 1], ["are", 1], ["the", 1], ["same", 1], ["or", 1], ["only", 1], ["one", 1], ["letter", 1], ["is", 1], ["left", 1], ["add", 1], ["an", 1], ["‘x’", 1], ["after", 1], ["the", 1], ["first", 1], ["letter", 1], ["encrypt", 1], ["the", 1], ["new", 1], ["pair", 1], ["and", 1], ["continue", 1], ["note", 1], ["that", 1], ["this", 1], ["changes", 1], ["all", 1], ["the", 1], ["remaining", 1], ["digraphs", 1], ["if", 12], ["the", 12], ["letters", 12], ["appear", 12], ["on", 12], ["the", 12], ["same", 12], ["row", 12], ["of", 12], ["your", 11], ["table", 12], ["replace", 14], ["them", 14], ["with", 14], ["the", 14], ["letters", 14], ["to", 14], ["their", 14], ["immediate", 14], ["right", 14], ["respectively", 14], ["wrapping", 14], ["around", 15], ["to", 15], ["the", 15], ["left", 15], ["side", 15], ["of", 15], ["the", 15], ["row", 15], ["if", 15], ["a", 15], ["letter", 15], ["in", 2], ["the", 2], ["original", 1], ["pair", 1], ["was", 1], ["on", 1], ["the", 1], ["right", 1], ["side", 1], ["of", 1], ["the", 1], ["row", 1], ["with", 1], ["the", 1], ["table", 1], ["above", 1], ["the", 1], ["digraph", 1], ["‘ch’", 1], ["would", 1], ["be", 1], ["encrypted", 1], ["‘db’", 1], ["if", 10], ["the", 10], ["letters", 10], ["appear", 10], ["on", 10], ["the", 10], ["same", 10], ["column", 8], ["of", 8], ["your", 8], ["table", 8], ["replace", 11], ["them", 10], ["with", 10], ["the", 10], ["letters", 10], ["immediately", 10], ["below", 10], ["respectively", 10], ["wrapping", 11], ["around", 12], ["to", 12], ["the", 12], ["top", 12], ["side", 12], ["of", 12], ["the", 12], ["column", 12], ["if", 12], ["a", 12], ["letter", 12], ["in", 1], ["the", 1], ["original", 1], ["pair", 1], ["was", 1], ["on", 1], ["the", 1], ["bottom", 1], ["side", 1], ["of", 1], ["the", 1], ["column", 1], ["with", 1], ["the", 1], ["table", 1], ["above", 1], ["the", 1], ["digraph", 1], ["‘va’", 1], ["would", 1], ["be", 1], ["encrypted", 1], ["‘ae’", 1], ["if", 10], ["the", 10], ["letters", 10], ["are", 11], ["not", 10], ["on", 10], ["the", 10], ["same", 10], ["row", 10], ["or", 10], ["column", 10], ["replace", 12], ["them", 12], ["with", 12], ["the", 12], ["letters", 12], ["on", 12], ["the", 12], ["same", 12], ["row", 12], ["respectively", 13], ["but", 13], ["at", 13], ["the", 13], ["other", 10], ["pair", 10], ["of", 10], ["corners", 10], ["of", 8], ["the", 8], ["rectangle", 8], ["defined", 6], ["by", 6], ["the", 6], ["original", 6], ["pair", 6], ["the", 6], ["order", 6], ["is", 6], ["important", 6], ["–", 6], ["the", 8], ["first", 8], ["letter", 8], ["of", 8], ["the", 8], ["encrypted", 8], ["pair", 10], ["is", 8], ["the", 8], ["one", 8], ["that", 8], ["lies", 8], ["on", 1], ["the", 1], ["same", 1], ["row", 1], ["as", 1], ["the", 1], ["first", 1], ["letter", 1], ["of", 1], ["the", 1], ["plaintext", 1], ["pair", 1], ["with", 1], ["the", 1], ["table", 1], ["above", 1], ["the", 1], ["digraph", 1], ["‘km’", 1], ["would", 1], ["be", 1], ["encrypted", 1], ["‘sr’", 1], ["write", 1], ["a", 1], ["program", 1], ["that", 1], ["reads", 1], ["a", 1], ["key", 1], ["phrase", 1], ["and", 1], ["a", 1], ["plaintext", 1], ["to", 1], ["encrypt", 1], ["and", 1], ["outputs", 1], ["the", 1], ["encrypted", 1], ["text", 1], ["the", 1], ["text", 1], ["to", 1], ["encrypt", 1], ["will", 1], ["not", 1], ["contain", 1], ["two", 1], ["’x’s", 1], ["following", 1], ["each", 1], ["other", 1], ["or", 1], ["an", 1], ["’x’", 1], ["as", 1], ["the", 1], ["last", 1], ["character", 1], ["as", 0], ["this", 0], ["might", 0], ["cause", 0], ["the", 0], ["first", 0], ["rule", 0], ["above", 0], ["to", 0], ["repeat", 0], ["itself", 0], ["indefinitely", 0], ["input", 0], ["the", 1], ["input", 1], ["contains", 1], ["two", 1], ["lines", 1], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["the", 1], ["key", 1], ["phrase", 1], ["the", 1], ["second", 1], ["line", 1], ["contains", 1], ["the", 1], ["text", 1], ["to", 1], ["encrypt", 1], ["each", 1], ["line", 1], ["contains", 1], ["between", 1], ["1", 1], ["and", 1], ["1000", 1], ["characters", 1], ["inclusive", 1], ["each", 1], ["character", 1], ["is", 1], ["a", 1], ["lower", 1], ["case", 1], ["english", 1], ["letter", 1], ["‘a’", 1], ["‘z’", 1], ["except", 1], ["‘q’", 1], ["or", 0], ["a", 0], ["space", 0], ["character", 0], ["neither", 0], ["line", 0], ["starts", 0], ["or", 0], ["ends", 0], ["with", 0], ["a", 0], ["space", 0], ["output", 0], ["the", 1], ["output", 1], ["should", 1], ["be", 1], ["a", 1], ["single", 1], ["line", 1], ["containing", 1], ["the", 1], ["encrypted", 1], ["text", 0], ["in", 0], ["upper", 0], ["case", 0], ["there", 0], ["should", 0], ["be", 0], ["no", 0], ["spaces", 0], ["in", 0], ["the", 0], ["output", 0], ["examples", 0], ["sample", 0], ["input", 0], ["playfair", 0], ["example", 0], ["hide", 0], ["the", 0], ["gold", 0], ["in", 0], ["the", 0], ["tree", 0], ["stump", 0], ["sample", 0], ["output", 0], ["bmndzbxdkybejvdmuixmmnuvif", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6151202749140894, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3731999072432391, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7643097643097643, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6850448933782267, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.47766323024054985, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3631075110456552, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7542087542087542, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6844837261503928, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nGraphical calculators have become popular among high school students. They allow functions to be plotted on screen with minimal efforts by the students. These calculators generally do not possess very fast processors. In this problem, you are asked to implement a method to speed up the plotting of a polynomial.\n\nGiven a polynomial $p(x) = a_ n x^n + ... + a_1 x + a_0$ of degree $n$, we wish to plot this polynomial at the $m$ integer points $x = 0, 1, \\ldots , m-1$. A straightforward evaluation at these points requires $mn$ multiplications and $mn$ additions.\n\nOne way to speed up the computation is to make use of results computed previously. For example, if $p(x) = a_1 x + a_0$ and $p(i)$ has already been computed, then $p(i+1) = p(i) + a_1$. Thus, each successive value of $p(x)$ can be computed with one addition each.\n\nIn general, we can compute $p(i+1)$ from $p(i)$ with $n$ additions, after the appropriate initialization has been done. If we initialize the constants $C_0$, $C_1$, $\\ldots $, $C_ n$ appropriately, one can compute $p(i)$ using the following pseudocode:\n\n  p(0) = C_0; t_1 = C_1; ... t_n = C_n;\n  for i from 1 to m-1 do p(i)    = p(i-1)  + t_1; t_1     = t_1     + t_2; t_2     = t_2     + t_3; : : t_(n-1) = t_(n-1) + t_n;\n  end\n\nFor example, if $p(x) = a_1 x + a_0$, we can initialize $C_0 = a_0$ and $C_1 = a_1$.\n\nYour task is to compute the constants $C_0, C_1, \\ldots , C_ n$ for the above pseudocode to give the correct values for $p(i)$ at $i = 0, \\ldots , m-1$.\n\n-----Input-----\nThe input consists of one case specified on a single line. The first integer is $n$, where $1 \\leq n \\leq 6$. This is followed by $n+1$ integer coefficients $a_ n, \\ldots , a_1, a_0$. You may assume that $|a_ i| \\leq 50$ for all $i$, and $a_ n \\neq 0$.\n\n-----Output-----\nPrint the integers $C_0$, $C_1$, …, $C_ n$, separated by spaces.\n\n-----Examples-----\nSample Input 1:\n1 5 2\nSample Output 1:\n2 5\n\nSample Input 2:\n2 2 -4 5\nSample Output 2:\n5 -2 4\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6563"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6563", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["graphical", 1], ["calculators", 1], ["have", 1], ["become", 1], ["popular", 1], ["among", 1], ["high", 1], ["school", 1], ["students", 1], ["they", 1], ["allow", 1], ["functions", 1], ["to", 1], ["be", 1], ["plotted", 1], ["on", 1], ["screen", 1], ["with", 1], ["minimal", 1], ["efforts", 1], ["by", 1], ["the", 1], ["students", 1], ["these", 1], ["calculators", 1], ["generally", 1], ["do", 1], ["not", 1], ["possess", 1], ["very", 1], ["fast", 1], ["processors", 1], ["in", 1], ["this", 1], ["problem", 1], ["you", 1], ["are", 1], ["asked", 1], ["to", 1], ["implement", 1], ["a", 1], ["method", 1], ["to", 1], ["speed", 1], ["up", 1], ["the", 1], ["plotting", 1], ["of", 1], ["a", 1], ["polynomial", 1], ["given", 1], ["a", 2], ["polynomial", 1], ["p", 1], ["x", 1], ["a", 1], ["n", 1], ["x", 1], ["n", 1], ["a", 1], ["1", 1], ["x", 1], ["a", 1], ["0", 1], ["of", 1], ["degree", 1], ["n", 1], ["we", 1], ["wish", 1], ["to", 1], ["plot", 1], ["this", 1], ["polynomial", 1], ["at", 1], ["the", 1], ["m", 1], ["integer", 1], ["points", 1], ["x", 1], ["0", 1], ["1", 1], ["ldots", 1], ["m", 1], ["1", 1], ["a", 1], ["straightforward", 1], ["evaluation", 1], ["at", 1], ["these", 1], ["points", 1], ["requires", 1], ["mn", 1], ["multiplications", 1], ["and", 1], ["mn", 1], ["additions", 1], ["one", 1], ["way", 1], ["to", 1], ["speed", 1], ["up", 1], ["the", 1], ["computation", 1], ["is", 1], ["to", 1], ["make", 1], ["use", 1], ["of", 1], ["results", 1], ["computed", 1], ["previously", 1], ["for", 1], ["example", 1], ["if", 1], ["p", 1], ["x", 1], ["a", 1], ["1", 1], ["x", 1], ["a", 1], ["0", 1], ["and", 1], ["p", 1], ["i", 1], ["has", 1], ["already", 1], ["been", 1], ["computed", 1], ["then", 1], ["p", 1], ["i", 1], ["1", 1], ["p", 1], ["i", 1], ["a", 1], ["1", 1], ["thus", 1], ["each", 1], ["successive", 0], ["value", 0], ["of", 0], ["p", 0], ["x", 0], ["can", 0], ["be", 0], ["computed", 0], ["with", 0], ["one", 0], ["addition", 0], ["each", 0], ["in", 0], ["general", 0], ["we", 0], ["can", 0], ["compute", 0], ["p", 0], ["i", 0], ["1", 0], ["from", 0], ["p", 0], ["i", 0], ["with", 0], ["n", 0], ["additions", 0], ["after", 0], ["the", 0], ["appropriate", 0], ["initialization", 0], ["has", 0], ["been", 0], ["done", 0], ["if", 0], ["we", 0], ["initialize", 0], ["the", 0], ["constants", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["ldots", 0], ["c", 0], ["n", 0], ["appropriately", 0], ["one", 0], ["can", 0], ["compute", 0], ["p", 0], ["i", 0], ["using", 0], ["the", 0], ["following", 0], ["pseudocode", 0], ["p", 0], ["0", 0], ["c", 0], ["0", 0], ["t", 0], ["1", 0], ["c", 0], ["1", 0], ["t", 0], ["n", 0], ["c", 0], ["n", 0], ["for", 0], ["i", 0], ["from", 0], ["1", 0], ["to", 0], ["m", 0], ["1", 0], ["do", 0], ["p", 0], ["i", 0], ["p", 0], ["i", 0], ["1", 4], ["t", 9], ["1", 4], ["t", 6], ["1", 0], ["t", 0], ["1", 0], ["t", 0], ["2", 0], ["t", 0], ["2", 0], ["t", 0], ["2", 0], ["t", 0], ["3", 0], ["t", 0], ["n", 0], ["1", 0], ["t", 0], ["n", 0], ["1", 0], ["t", 0], ["n", 0], ["end", 0], ["for", 1], ["example", 1], ["if", 1], ["p", 1], ["x", 1], ["a", 1], ["1", 1], ["x", 1], ["a", 1], ["0", 1], ["we", 1], ["can", 1], ["initialize", 1], ["c", 1], ["0", 1], ["a", 1], ["0", 1], ["and", 1], ["c", 1], ["1", 1], ["a", 1], ["1", 1], ["your", 1], ["task", 1], ["is", 1], ["to", 1], ["compute", 1], ["the", 1], ["constants", 1], ["c", 1], ["0", 1], ["c", 1], ["1", 1], ["ldots", 1], ["c", 1], ["n", 1], ["for", 1], ["the", 1], ["above", 1], ["pseudocode", 1], ["to", 1], ["give", 1], ["the", 0], ["correct", 0], ["values", 0], ["for", 0], ["p", 0], ["i", 0], ["at", 0], ["i", 0], ["0", 0], ["ldots", 0], ["m", 0], ["1", 0], ["input", 0], ["the", 1], ["input", 1], ["consists", 1], ["of", 1], ["one", 1], ["case", 1], ["specified", 1], ["on", 1], ["a", 1], ["single", 1], ["line", 1], ["the", 1], ["first", 1], ["integer", 1], ["is", 1], ["n", 1], ["where", 1], ["1", 1], ["leq", 1], ["n", 1], ["leq", 1], ["6", 1], ["this", 1], ["is", 1], ["followed", 1], ["by", 1], ["n", 1], ["1", 1], ["integer", 1], ["coefficients", 1], ["a", 1], ["n", 1], ["ldots", 1], ["a", 1], ["1", 1], ["a", 1], ["0", 1], ["you", 1], ["may", 1], ["assume", 1], ["that", 1], ["a", 0], ["i", 0], ["leq", 0], ["50", 0], ["for", 0], ["all", 0], ["i", 0], ["and", 0], ["a", 0], ["n", 0], ["neq", 0], ["0", 0], ["output", 0], ["print", 1], ["the", 0], ["integers", 0], ["c", 0], ["0", 0], ["c", 0], ["1", 0], ["…", 0], ["c", 0], ["n", 0], ["separated", 0], ["by", 0], ["spaces", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["1", 0], ["5", 0], ["2", 0], ["sample", 0], ["output", 0], ["1", 0], ["2", 0], ["5", 0], ["sample", 0], ["input", 0], ["2", 0], ["2", 0], ["2", 0], ["4", 0], ["5", 0], ["sample", 0], ["output", 0], ["2", 0], ["5", 0], ["2", 0], ["4", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5839793281653747, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5743611828883146, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7167919799498746, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6867167919799498, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5839793281653747, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5743611828883146, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7167919799498746, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6867167919799498, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nMishka got an integer array $a$ of length $n$ as a birthday present (what a surprise!).\n\nMishka doesn't like this present and wants to change it somehow. He has invented an algorithm and called it \"Mishka's Adjacent Replacements Algorithm\". This algorithm can be represented as a sequence of steps:  Replace each occurrence of $1$ in the array $a$ with $2$;  Replace each occurrence of $2$ in the array $a$ with $1$;  Replace each occurrence of $3$ in the array $a$ with $4$;  Replace each occurrence of $4$ in the array $a$ with $3$;  Replace each occurrence of $5$ in the array $a$ with $6$;  Replace each occurrence of $6$ in the array $a$ with $5$;  $\\dots$  Replace each occurrence of $10^9 - 1$ in the array $a$ with $10^9$;  Replace each occurrence of $10^9$ in the array $a$ with $10^9 - 1$. \n\nNote that the dots in the middle of this algorithm mean that Mishka applies these replacements for each pair of adjacent integers ($2i - 1, 2i$) for each $i \\in\\{1, 2, \\ldots, 5 \\cdot 10^8\\}$ as described above.\n\nFor example, for the array $a = [1, 2, 4, 5, 10]$, the following sequence of arrays represents the algorithm: \n\n$[1, 2, 4, 5, 10]$ $\\rightarrow$ (replace all occurrences of $1$ with $2$) $\\rightarrow$ $[2, 2, 4, 5, 10]$ $\\rightarrow$ (replace all occurrences of $2$ with $1$) $\\rightarrow$ $[1, 1, 4, 5, 10]$ $\\rightarrow$ (replace all occurrences of $3$ with $4$) $\\rightarrow$ $[1, 1, 4, 5, 10]$ $\\rightarrow$ (replace all occurrences of $4$ with $3$) $\\rightarrow$ $[1, 1, 3, 5, 10]$ $\\rightarrow$ (replace all occurrences of $5$ with $6$) $\\rightarrow$ $[1, 1, 3, 6, 10]$ $\\rightarrow$ (replace all occurrences of $6$ with $5$) $\\rightarrow$ $[1, 1, 3, 5, 10]$ $\\rightarrow$ $\\dots$ $\\rightarrow$ $[1, 1, 3, 5, 10]$ $\\rightarrow$ (replace all occurrences of $10$ with $9$) $\\rightarrow$ $[1, 1, 3, 5, 9]$. The later steps of the algorithm do not change the array.\n\nMishka is very lazy and he doesn't want to apply these changes by himself. But he is very interested in their result. Help him find it.\n\n\n-----Input-----\n\nThe first line of the input contains one integer number $n$ ($1 \\le n \\le 1000$) — the number of elements in Mishka's birthday present (surprisingly, an array).\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) — the elements of the array.\n\n\n-----Output-----\n\nPrint $n$ integers — $b_1, b_2, \\dots, b_n$, where $b_i$ is the final value of the $i$-th element of the array after applying \"Mishka's Adjacent Replacements Algorithm\" to the array $a$. Note that you cannot change the order of elements in the array.\n\n\n-----Examples-----\nInput\n5\n1 2 4 5 10\n\nOutput\n1 1 3 5 9\n\nInput\n10\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\n\nOutput\n9999 9 50605065 1 5 89 5 999999999 60506055 999999999\n\n\n\n-----Note-----\n\nThe first example is described in the problem statement.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\na = [int(x) for x in input().split()]\n\nprint(*[x - ((x ^ 1) & 1) for x in a])\n", "n=int(input())\nl=list(map(int,input().split()))\nfor i in range(len(l)):\n\tif(l[i]%2==0):\n\t\tprint(l[i]-1,end=\" \")\n\telse:\n\t\tprint(l[i],end=\" \")\n", "import sys\nimport io\n\nstream_enable = 0\n\ninpstream = \"\"\"\n\n\"\"\"\n\nif stream_enable:\n\tsys.stdin = io.StringIO(inpstream)\n\tinput()\n\ndef inpmap():\n\treturn list(map(int, input().split()))\n\nn = int(input())\narr = inpmap()\nfor x in arr:\n\tprint(x - 1 + x % 2, end=' ')\nprint()\n", "n=int(input())\nl=list(map(int,input().split()))\nfor i in range(len(l)):\n\tif l[i]%2==0:l[i]-=1\nprint(*l)\n", "\ndef mi():\n\treturn map(int, input().split())\n\nn = int(input())\na = list(mi())\nfor i in a:\n\tif i%2:\n\t\tprint (i, end = ' ')\n\telse:\n\t\tprint (i-1, end = ' ')\n", "#JMD\n#Nagendra Jha-4096\n\n \nimport sys\nimport math\n\n#import fractions\n#import numpy\n \n###File Operations###\nfileoperation=0\nif(fileoperation):\n\torig_stdout = sys.stdout\n\torig_stdin = sys.stdin\n\tinputfile = open('W:/Competitive Programming/input.txt', 'r')\n\toutputfile = open('W:/Competitive Programming/output.txt', 'w')\n\tsys.stdin = inputfile\n\tsys.stdout = outputfile\n\n###Defines...###\nmod=1000000007\n \n###FUF's...###\ndef nospace(l):\n\tans=''.join(str(i) for i in l)\n\treturn ans\n \n \n \n##### Main ####\nn=int(input())\na=list(map(int,sys.stdin.readline().split(' ')))\n#n,k,s= map(int, sys.stdin.readline().split(' '))\nfor i in range(n):\n\tif(a[i]%2==0):\n\t\ta[i]-=1\nprint(*a)\n\n\t\n\t\n#####File Operations#####\nif(fileoperation):\n\tsys.stdout = orig_stdout\n\tsys.stdin = orig_stdin\n\tinputfile.close()\n\toutputfile.close()\n", "n = int(input())\nl = list(map(int,input().split()))\nl = [x if x%2 else x-1 for x in l]\nprint (*l)\n", "input()\nnum = list(map(int, input().split()))\nans = []\nfor i in num:\n\tans.append(i if i & 1 else i-1)\nprint(' '.join(str(i) for i in ans))\n", "n=int(input())\nprint(*[int(x) if int(x)%2 else int(x)-1 for x in input().split()])\n", "n = int(input())\na = map(int, input().split(' '))\nfor elem in a:\n\tif elem % 2 == 0:\n\t\tprint(elem - 1, end=' ')\n\telse:\n\t\tprint(elem, end=' ')\n", "def __starting_point():\n\tn = int(input().strip())\n\tarr = [int(__) for __ in input().strip().split()]\n\tfor i in range(n):\n\t\tif arr[i] % 2 == 0:\n\t\t\tarr[i] -= 1\n\tfor i in arr:\n\t\tprint(i, end=\" \")\n\n__starting_point()\n", "n = int(input())\nfor j in input().split():\n\ti = int(j)\n\tif i % 2 == 0:\n\t\ti -= 1\n\tprint(i, end = \" \")\nprint()\n", "n = int(input())\nans = [int(x) - (int(x) + 1) % 2 for x in input().split()]\nprint(*ans)\n", "length = int(input())\nnumbers = list(map(int, input().split(\" \")))\nfor i in range(length):\n\tif numbers[i] % 2 == 0:\n\t\tnumbers[i] -= 1\nres = \"\"\nfor i in numbers:\n\tres += str(i) + \" \"\nprint(res.strip())\n", "n = int(input())\nlst = [int(x) for x in input().split()]\nfor i in range(len(lst)):\n\tif lst[i]%2==0:\n\t\tlst[i]-=1\nlst = [str(x) for x in lst]\nprint(' '.join(lst))\n", "input()\nn = list(map(int, input().split()))\nn = [ni - 1 if ni % 2 == 0 else ni for ni in n]\nprint(*n)\n", "n = int(input())\na = list(map(int, input().split()))\n\nfor i in range(n):\n\tif a[i] % 2 == 0:\n\t\ta[i] -= 1\n\nprint(*a)\n", "n = int(input())\ndata = list(map(int,input().split()))\n\nd = set()\n\nfor el in data:\n\td.add(el)\n\nfor el in d:\n\tif el % 2 == 0:\n\t\tfor  i in range(n):\n\t\t\tif data[i] == el:\n\t\t\t\tdata[i] -= 1\n\n\nprint(\" \".join(str(el) for el in data))\n", "n = int(input())\na = list(map(int, input().split()))\n\nfor i in range(n):\n\ta[i] = 2 * ((a[i] - 1) // 2) + 1\n\nprint(' '.join(map(str, a)))\n", "n = int(input())\nv = list(map(int,input().split()))\nfor i in v:\n\tprint(i - (i%2==0),end=' ')\n", "n = int(input())\na = [int(s) for s in input().split()]\nfor i in a:\n\tif i % 2 == 0:\n\t\tprint(i-1, end = ' ')\n\telse:\n\t\tprint(i, end= ' ')\n", "input()\na = list(map(int, input().split()))\nfor i in range(len(a)):\n\tif a[i] % 2 == 0:\n\t\ta[i] -= 1\nprint(*a)\n", "n = int(input())\nm = list(map(int, input().split()))\nfor i in range(n):\n\tif(m[i] % 2 == 0):\n\t\tm[i] -= 1\n\tprint(m[i], end = \" \")\n", "input()\na = [int(i) for i in input().split()]\n\nfor i in range(len(a)):\n\ta[i] -= ((a[i] + 1) % 2)\n\nprint(\" \".join([str(i) for i in a]))\n"], "id": "id7036"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7036", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["mishka", 2], ["got", 2], ["an", 2], ["integer", 2], ["array", 2], ["a", 2], ["of", 2], ["length", 2], ["n", 2], ["as", 2], ["a", 2], ["birthday", 2], ["present", 2], ["what", 2], ["a", 2], ["surprise", 2], ["mishka", 2], ["doesn", 2], ["t", 2], ["like", 2], ["this", 2], ["present", 2], ["and", 2], ["wants", 2], ["to", 2], ["change", 2], ["it", 2], ["somehow", 2], ["he", 2], ["has", 2], ["invented", 2], ["an", 2], ["algorithm", 2], ["and", 2], ["called", 2], ["it", 2], ["mishka", 2], ["s", 2], ["adjacent", 2], ["replacements", 2], ["algorithm", 2], ["this", 2], ["algorithm", 2], ["can", 2], ["be", 2], ["represented", 2], ["as", 2], ["a", 2], ["sequence", 2], ["of", 2], ["steps", 0], ["replace", 0], ["each", 0], ["occurrence", 0], ["of", 0], ["1", 0], ["in", 0], ["the", 0], ["array", 0], ["a", 0], ["with", 0], ["2", 0], ["replace", 0], ["each", 0], ["occurrence", 0], ["of", 0], ["2", 0], ["in", 0], ["the", 0], ["array", 0], ["a", 0], ["with", 0], ["1", 0], ["replace", 0], ["each", 0], ["occurrence", 0], ["of", 0], ["3", 0], ["in", 0], ["the", 0], ["array", 0], ["a", 0], ["with", 0], ["4", 0], ["replace", 0], ["each", 0], ["occurrence", 0], ["of", 0], ["4", 0], ["in", 0], ["the", 0], ["array", 0], ["a", 0], ["with", 0], ["3", 0], ["replace", 0], ["each", 0], ["occurrence", 0], ["of", 0], ["5", 0], ["in", 0], ["the", 0], ["array", 0], ["a", 0], ["with", 0], ["6", 0], ["replace", 0], ["each", 0], ["occurrence", 0], ["of", 0], ["6", 0], ["in", 0], ["the", 0], ["array", 0], ["a", 0], ["with", 0], ["5", 0], ["dots", 2], ["replace", 2], ["each", 2], ["occurrence", 2], ["of", 2], ["10", 2], ["9", 2], ["1", 2], ["in", 2], ["the", 2], ["array", 2], ["a", 2], ["with", 2], ["10", 2], ["9", 2], ["replace", 2], ["each", 2], ["occurrence", 2], ["of", 2], ["10", 2], ["9", 2], ["in", 2], ["the", 2], ["array", 2], ["a", 2], ["with", 2], ["10", 2], ["9", 2], ["1", 2], ["note", 2], ["that", 2], ["the", 2], ["dots", 2], ["in", 2], ["the", 2], ["middle", 2], ["of", 2], ["this", 2], ["algorithm", 2], ["mean", 2], ["that", 2], ["mishka", 2], ["applies", 2], ["these", 2], ["replacements", 2], ["for", 2], ["each", 2], ["pair", 2], ["of", 2], ["adjacent", 2], ["integers", 2], ["2i", 2], ["1", 2], ["2i", 2], ["for", 2], ["each", 2], ["i", 2], ["in", 2], ["1", 2], ["2", 2], ["ldots", 2], ["5", 2], ["cdot", 2], ["10", 2], ["8", 2], ["as", 2], ["described", 2], ["above", 2], ["for", 2], ["example", 2], ["for", 2], ["the", 2], ["array", 2], ["a", 2], ["1", 2], ["2", 2], ["4", 2], ["5", 2], ["10", 2], ["the", 2], ["following", 2], ["sequence", 2], ["of", 2], ["arrays", 2], ["represents", 2], ["the", 2], ["algorithm", 2], ["1", 2], ["2", 2], ["4", 2], ["5", 2], ["10", 2], ["rightarrow", 2], ["replace", 2], ["all", 2], ["occurrences", 2], ["of", 2], ["1", 2], ["with", 2], ["2", 2], ["rightarrow", 2], ["2", 2], ["2", 2], ["4", 2], ["5", 2], ["10", 2], ["rightarrow", 2], ["replace", 2], ["all", 2], ["occurrences", 2], ["of", 2], ["2", 2], ["with", 2], ["1", 2], ["rightarrow", 2], ["1", 2], ["1", 2], ["4", 2], ["5", 2], ["10", 2], ["rightarrow", 2], ["replace", 2], ["all", 2], ["occurrences", 2], ["of", 2], ["3", 2], ["with", 2], ["4", 2], ["rightarrow", 2], ["1", 2], ["1", 2], ["4", 2], ["5", 2], ["10", 2], ["rightarrow", 2], ["replace", 2], ["all", 2], ["occurrences", 2], ["of", 2], ["4", 2], ["with", 2], ["3", 2], ["rightarrow", 2], ["1", 2], ["1", 2], ["3", 2], ["5", 2], ["10", 2], ["rightarrow", 2], ["replace", 2], ["all", 2], ["occurrences", 2], ["of", 2], ["5", 2], ["with", 2], ["6", 2], ["rightarrow", 2], ["1", 2], ["1", 2], ["3", 2], ["6", 2], ["10", 2], ["rightarrow", 2], ["replace", 2], ["all", 2], ["occurrences", 2], ["of", 2], ["6", 2], ["with", 2], ["5", 2], ["rightarrow", 2], ["1", 2], ["1", 2], ["3", 2], ["5", 2], ["10", 2], ["rightarrow", 2], ["dots", 2], ["rightarrow", 2], ["1", 2], ["1", 2], ["3", 2], ["5", 2], ["10", 2], ["rightarrow", 2], ["replace", 2], ["all", 2], ["occurrences", 2], ["of", 2], ["10", 2], ["with", 2], ["9", 2], ["rightarrow", 2], ["1", 2], ["1", 2], ["3", 2], ["5", 2], ["9", 2], ["the", 2], ["later", 2], ["steps", 2], ["of", 2], ["the", 2], ["algorithm", 2], ["do", 2], ["not", 2], ["change", 2], ["the", 2], ["array", 2], ["mishka", 2], ["is", 2], ["very", 2], ["lazy", 2], ["and", 2], ["he", 2], ["doesn", 2], ["t", 2], ["want", 2], ["to", 2], ["apply", 2], ["these", 2], ["changes", 2], ["by", 2], ["himself", 2], ["but", 0], ["he", 0], ["is", 0], ["very", 0], ["interested", 0], ["in", 0], ["their", 0], ["result", 0], ["help", 0], ["him", 0], ["find", 0], ["it", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 2], ["of", 2], ["the", 2], ["input", 2], ["contains", 2], ["one", 2], ["integer", 2], ["number", 2], ["n", 2], ["1", 2], ["le", 2], ["n", 2], ["le", 2], ["1000", 2], ["—", 2], ["the", 2], ["number", 2], ["of", 2], ["elements", 2], ["in", 2], ["mishka", 2], ["s", 2], ["birthday", 2], ["present", 2], ["surprisingly", 2], ["an", 2], ["array", 2], ["the", 8], ["second", 8], ["line", 8], ["of", 8], ["the", 7], ["input", 7], ["contains", 28], ["n", 30], ["integers", 35], ["a", 14], ["1", 10], ["a", 8], ["2", 8], ["dots", 6], ["a", 6], ["n", 6], ["1", 6], ["le", 0], ["a", 0], ["i", 0], ["le", 0], ["10", 0], ["9", 0], ["—", 0], ["the", 0], ["elements", 0], ["of", 0], ["the", 0], ["array", 0], ["output", 0], ["print", 2], ["n", 2], ["integers", 2], ["—", 2], ["b", 2], ["1", 2], ["b", 2], ["2", 2], ["dots", 2], ["b", 2], ["n", 2], ["where", 2], ["b", 2], ["i", 2], ["is", 2], ["the", 2], ["final", 2], ["value", 2], ["of", 2], ["the", 2], ["i", 2], ["th", 2], ["element", 2], ["of", 2], ["the", 2], ["array", 2], ["after", 2], ["applying", 2], ["mishka", 2], ["s", 2], ["adjacent", 2], ["replacements", 2], ["algorithm", 2], ["to", 2], ["the", 2], ["array", 2], ["a", 2], ["note", 0], ["that", 0], ["you", 0], ["cannot", 0], ["change", 0], ["the", 0], ["order", 0], ["of", 0], ["elements", 0], ["in", 0], ["the", 0], ["array", 0], ["examples", 0], ["input", 0], ["5", 0], ["1", 0], ["2", 0], ["4", 0], ["5", 0], ["10", 0], ["output", 0], ["1", 0], ["1", 0], ["3", 0], ["5", 0], ["9", 0], ["input", 0], ["10", 0], ["10000", 0], ["10", 0], ["50605065", 0], ["1", 0], ["5", 0], ["89", 0], ["5", 0], ["999999999", 0], ["60506056", 0], ["1000000000", 0], ["output", 0], ["9999", 0], ["9", 0], ["50605065", 0], ["1", 0], ["5", 0], ["89", 0], ["5", 0], ["999999999", 0], ["60506055", 0], ["999999999", 0], ["note", 0], ["the", 0], ["first", 0], ["example", 0], ["is", 0], ["described", 0], ["in", 0], ["the", 0], ["problem", 0], ["statement", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.702755905511811, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3385264341957255, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7788461538461539, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3894230769230769, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6948818897637795, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3381936632920884, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7788461538461539, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3894230769230769, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["x", 0], ["x", 0], ["1", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["if", 0], ["l", 0], ["i", 0], ["2", 0], ["0", 0], ["print", 0], ["l", 0], ["i", 0], ["1", 0], ["end", 0], ["else", 0], ["print", 0], ["l", 0], ["i", 0], ["end", 0], ["import", 0], ["sys", 0], ["import", 0], ["io", 0], ["stream", 0], ["enable", 0], ["0", 0], ["inpstream", 0], ["if", 0], ["stream", 0], ["enable", 0], ["sys", 0], ["stdin", 0], ["io", 0], ["stringio", 0], ["inpstream", 0], ["input", 0], ["def", 0], ["inpmap", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["inpmap", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["print", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["end", 0], ["print", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["if", 0], ["l", 0], ["i", 0], ["2", 0], ["0", 0], ["l", 0], ["i", 0], ["1", 0], ["print", 0], ["l", 0], ["def", 0], ["mi", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["mi", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["2", 0], ["print", 0], ["i", 0], ["end", 0], ["else", 0], ["print", 0], ["i", 0], ["1", 0], ["end", 0], ["jmd", 0], ["nagendra", 0], ["jha", 0], ["4096", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["fractions", 0], ["import", 0], ["numpy", 0], ["file", 0], ["operations", 0], ["fileoperation", 0], ["0", 0], ["if", 0], ["fileoperation", 0], ["orig", 0], ["stdout", 0], ["sys", 0], ["stdout", 0], ["orig", 0], ["stdin", 0], ["sys", 0], ["stdin", 0], ["inputfile", 0], ["open", 0], ["w", 0], ["competitive", 0], ["programming", 0], ["input", 0], ["txt", 0], ["r", 0], ["outputfile", 0], ["open", 0], ["w", 0], ["competitive", 0], ["programming", 0], ["output", 0], ["txt", 0], ["w", 0], ["sys", 0], ["stdin", 0], ["inputfile", 0], ["sys", 0], ["stdout", 0], ["outputfile", 0], ["defines", 0], ["mod", 0], ["1000000007", 0], ["fuf", 0], ["s", 0], ["def", 0], ["nospace", 0], ["l", 0], ["ans", 0], ["join", 0], ["str", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["return", 0], ["ans", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["n", 0], ["k", 0], ["s", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["2", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["a", 0], ["file", 0], ["operations", 0], ["if", 0], ["fileoperation", 0], ["sys", 0], ["stdout", 0], ["orig", 0], ["stdout", 0], ["sys", 0], ["stdin", 0], ["orig", 0], ["stdin", 0], ["inputfile", 0], ["close", 0], ["outputfile", 0], ["close", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["x", 0], ["if", 0], ["x", 0], ["2", 0], ["else", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["print", 0], ["l", 0], ["input", 0], ["num", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["num", 0], ["ans", 0], ["append", 0], ["i", 0], ["if", 0], ["i", 0], ["1", 0], ["else", 0], ["i", 0], ["1", 0], ["print", 0], ["join", 0], ["str", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["print", 0], ["int", 0], ["x", 0], ["if", 0], ["int", 0], ["x", 0], ["2", 0], ["else", 0], ["int", 0], ["x", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["elem", 0], ["in", 0], ["a", 0], ["if", 0], ["elem", 0], ["2", 0], ["0", 0], ["print", 0], ["elem", 0], ["1", 0], ["end", 0], ["else", 0], ["print", 0], ["elem", 0], ["end", 0], ["def", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["strip", 0], ["arr", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["2", 0], ["0", 0], ["arr", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["arr", 0], ["print", 0], ["i", 0], ["end", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["j", 0], ["in", 0], ["input", 0], ["split", 0], ["i", 0], ["int", 0], ["j", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["i", 0], ["end", 0], ["print", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["int", 0], ["x", 0], ["int", 0], ["x", 0], ["1", 0], ["2", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["ans", 0], ["length", 0], ["int", 0], ["input", 0], ["numbers", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["length", 0], ["if", 0], ["numbers", 0], ["i", 0], ["2", 0], ["0", 0], ["numbers", 0], ["i", 0], ["1", 0], ["res", 0], ["for", 0], ["i", 0], ["in", 0], ["numbers", 0], ["res", 0], ["str", 0], ["i", 0], ["print", 0], ["res", 0], ["strip", 0], ["n", 0], ["int", 0], ["input", 0], ["lst", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["lst", 0], ["if", 0], ["lst", 0], ["i", 0], ["2", 0], ["0", 0], ["lst", 0], ["i", 0], ["1", 0], ["lst", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["lst", 0], ["print", 0], ["join", 0], ["lst", 0], ["input", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["ni", 0], ["1", 0], ["if", 0], ["ni", 0], ["2", 0], ["0", 0], ["else", 0], ["ni", 0], ["for", 0], ["ni", 0], ["in", 0], ["n", 0], ["print", 0], ["n", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["2", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["data", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["set", 0], ["for", 0], ["el", 0], ["in", 0], ["data", 0], ["d", 0], ["add", 0], ["el", 0], ["for", 0], ["el", 0], ["in", 0], ["d", 0], ["if", 0], ["el", 0], ["2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["data", 0], ["i", 0], ["el", 0], ["data", 0], ["i", 0], ["1", 0], ["print", 0], ["join", 0], ["str", 0], ["el", 0], ["for", 0], ["el", 0], ["in", 0], ["data", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["i", 0], ["2", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["1", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["v", 0], ["print", 0], ["i", 0], ["i", 0], ["2", 0], ["0", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["2", 0], ["0", 0], ["print", 0], ["i", 0], ["1", 0], ["end", 0], ["else", 0], ["print", 0], ["i", 0], ["end", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["2", 0], ["0", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["m", 0], ["i", 0], ["2", 0], ["0", 0], ["m", 0], ["i", 0], ["1", 0], ["print", 0], ["m", 0], ["i", 0], ["end", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["2", 0], ["print", 0], ["join", 0], ["str", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are given two integers $n$ and $k$. Your task is to find if $n$ can be represented as a sum of $k$ distinct positive odd (not divisible by $2$) integers or not.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^5$) — the number of test cases.\n\nThe next $t$ lines describe test cases. The only line of the test case contains two integers $n$ and $k$ ($1 \\le n, k \\le 10^7$).\n\n\n-----Output-----\n\nFor each test case, print the answer — \"YES\" (without quotes) if $n$ can be represented as a sum of $k$ distinct positive odd (not divisible by $2$) integers and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n6\n3 1\n4 2\n10 3\n10 2\n16 4\n16 5\n\nOutput\nYES\nYES\nNO\nYES\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first test case, you can represent $3$ as $3$.\n\nIn the second test case, the only way to represent $4$ is $1+3$.\n\nIn the third test case, you cannot represent $10$ as the sum of three distinct positive odd integers.\n\nIn the fourth test case, you can represent $10$ as $3+7$, for example.\n\nIn the fifth test case, you can represent $16$ as $1+3+5+7$.\n\nIn the sixth test case, you cannot represent $16$ as the sum of five distinct positive odd integers.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["t = int(input())\nfor _ in range(t):\n\tn, k = map(int, input().split())\n\tn -= k**2\n\tif n<0:\n\t\tprint(\"NO\")\n\telif n%2 == 0:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "for _ in range(int(input())):\n\tn,k = map(int,input().split())\n\tif(n >= k*k and n%2 == (k*k)%2):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\t\n", "def solve():\n\tn, k = list(map(int, input().split()))\n\ts = k ** 2\n\tif n < s:\n\t\tprint(\"NO\")\n\telse:\n\t\tif (k % 2) ^ (n % 2) == 0:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\n\nfor i in range(int(input())):\n\tsolve()\n", "t = int(input())\nfor i in range(t):\n\tn, k = list(map(int, input().split()))\n\tkek = k ** 2\n\tif n < kek:\n\t\tprint('NO')\n\t\tcontinue\n\tn -= (k - 1)\n\tk = 1\n\tif k == 1 and n % 2 == 0:\n\t\tprint('NO')\n\t\tcontinue\n\telse:\n\t\tprint('YES')\n", "t = int(input())\nfor i in range(t):\n\tn, k = list(map(int, input().split()))\n\tif k ** 2 <= n and k % 2 == n % 2:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "q = int(input())\nfor rweur in range(q):\n\tn,k = map(int,input().split())\n\tif (n-k)%2 == 1:\n\t\tprint(\"NO\")\n\telse:\n\t\tif n >= k**2:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n", "T = int(input())\nfor case in range(T):\n\tn,k = [int(x) for x in input().split(\" \")]\n\tif (n-k)%2 == 0 and n >= k * k:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "import sys\ndef input():\n\treturn sys.stdin.readline()[:-1]\n\nt = int(input())\nfor _ in range(t):\n\tn, k = map(int, input().split())\n\tif n%2 == k%2 and n >= k*k:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "t = int(input())\nfor _ in range(t):\n\tn,k = map(int, input().split())\n\tif n >= k*k and n % 2 == k % 2:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "import sys\nimport math\nimport bisect\n\ndef solve(n, k):\n\tm = k ** 2\n\treturn n >= m and (n - m) % 2 == 0\n\ndef main():\n\tfor _ in range(int(input())):\n\t\tn, k = list(map(int, input().split()))\n\t\tif solve(n, k):\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "t = int(input())\n\nfor case in range(t):\n\tn, k = list(map(int, input().split()))\n\tsum_k = k * k\n\tif n % 2 == sum_k % 2 and n >= sum_k:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "from math import *\nfor zz in range(int(input())):\n\tn, k = list(map(int, input().split()))\n\tif n < k**2 or n % 2 == 1 - (k % 2):\n\t\tprint('NO')\n\telse:\n\t\tprint('YES')\n", "T = int(input())\nfor _ in range(T):\n\tN, K = map(int, input().split())\n\tif N >= K * K and (N - K) % 2 == 0:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "t = int(input())\nfor test_i in range(t):\n\tn, k = map(int, input().split())\n\tif n % 2 == k % 2 and n >= k * k:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n", "for i in range(int(input())):\n\tn,k=map(int,input().split())\n\tif (k%2)^(n%2)==0:\n\t\tif n>=k**2:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"NO\")\n", "t = int(input())\n\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\n\tn -= k**2\n\tif (n >= 0) and (n % 2 == 0):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "for _ in range(int(input())):       \n\tn, k = map(int, input().split())\n\tif k&1 == n&1 and n >= k*k:     \n\t\tprint(\"YES\")                \n\telse:                           \n\t\tprint(\"NO\")                 \n", "#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n\n# Code by H~$~C\n\nfrom sys import stdin\ninput = stdin.readline\nimport math\n\nfor i in range(int(input())):\n\tn, k = map(int, input().split())\n\tprint(['NO', 'YES'][n >= k * k and (n - k) % 2 == 0])\n", "n = int(input())\nfor i in range(n):\n\ta, b = list(map(int, input().split()))\n\n\tif (a - b) % 2 == 0 and b <= int(a**0.5):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\t\t\n", "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\tif n >= k * k and (n % 2 == k % 2):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n"], "id": "id6014"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6014", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 2], ["are", 2], ["given", 2], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["k", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["find", 0], ["if", 0], ["n", 2], ["can", 2], ["be", 2], ["represented", 2], ["as", 2], ["a", 2], ["sum", 2], ["of", 2], ["k", 2], ["distinct", 2], ["positive", 0], ["odd", 0], ["not", 0], ["divisible", 0], ["by", 0], ["2", 0], ["integers", 0], ["or", 0], ["not", 0], ["you", 8], ["have", 8], ["to", 8], ["answer", 8], ["t", 8], ["independent", 8], ["test", 8], ["cases", 8], ["input", 20], ["the", 46], ["first", 46], ["line", 27], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["one", 0], ["integer", 2], ["t", 2], ["1", 0], ["le", 0], ["t", 0], ["le", 0], ["10", 0], ["5", 0], ["—", 4], ["the", 0], ["number", 0], ["of", 0], ["test", 0], ["cases", 0], ["the", 0], ["next", 0], ["t", 0], ["lines", 0], ["describe", 0], ["test", 0], ["cases", 0], ["the", 0], ["only", 0], ["line", 0], ["of", 0], ["the", 0], ["test", 0], ["case", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["k", 0], ["1", 0], ["le", 0], ["n", 0], ["k", 0], ["le", 0], ["10", 0], ["7", 0], ["output", 0], ["for", 0], ["each", 0], ["test", 0], ["case", 0], ["print", 0], ["the", 0], ["answer", 0], ["—", 0], ["yes", 0], ["without", 0], ["quotes", 0], ["if", 0], ["n", 2], ["can", 2], ["be", 2], ["represented", 2], ["as", 2], ["a", 0], ["sum", 0], ["of", 0], ["k", 0], ["distinct", 0], ["positive", 0], ["odd", 0], ["not", 0], ["divisible", 0], ["by", 0], ["2", 0], ["integers", 0], ["and", 0], ["no", 0], ["otherwise", 0], ["example", 0], ["input", 0], ["6", 0], ["3", 0], ["1", 0], ["4", 0], ["2", 0], ["10", 0], ["3", 0], ["10", 0], ["2", 0], ["16", 0], ["4", 0], ["16", 0], ["5", 0], ["output", 0], ["yes", 0], ["yes", 0], ["no", 0], ["yes", 0], ["yes", 0], ["no", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["test", 0], ["case", 0], ["you", 0], ["can", 0], ["represent", 0], ["3", 0], ["as", 0], ["3", 0], ["in", 0], ["the", 0], ["second", 0], ["test", 0], ["case", 0], ["the", 0], ["only", 0], ["way", 0], ["to", 0], ["represent", 0], ["4", 0], ["is", 0], ["1", 0], ["3", 0], ["in", 0], ["the", 0], ["third", 0], ["test", 0], ["case", 0], ["you", 0], ["cannot", 0], ["represent", 0], ["10", 0], ["as", 0], ["the", 0], ["sum", 0], ["of", 0], ["three", 0], ["distinct", 0], ["positive", 0], ["odd", 0], ["integers", 0], ["in", 0], ["the", 0], ["fourth", 0], ["test", 0], ["case", 0], ["you", 0], ["can", 0], ["represent", 0], ["10", 0], ["as", 0], ["3", 0], ["7", 0], ["for", 0], ["example", 0], ["in", 0], ["the", 0], ["fifth", 0], ["test", 0], ["case", 0], ["you", 0], ["can", 0], ["represent", 0], ["16", 0], ["as", 0], ["1", 0], ["3", 0], ["5", 0], ["7", 0], ["in", 0], ["the", 0], ["sixth", 0], ["test", 0], ["case", 0], ["you", 0], ["cannot", 0], ["represent", 0], ["16", 0], ["as", 0], ["the", 0], ["sum", 0], ["of", 0], ["five", 0], ["distinct", 0], ["positive", 0], ["odd", 0], ["integers", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.14042553191489363, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.048427724671942986, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.3562753036437247, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.17813765182186234, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.12340425531914893, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.047872340425531915, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.3562753036437247, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.17813765182186234, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["2", 0], ["if", 0], ["n", 0], ["0", 0], ["print", 0], ["no", 0], ["elif", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["k", 0], ["and", 0], ["n", 0], ["2", 0], ["k", 0], ["k", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["k", 0], ["2", 0], ["if", 0], ["n", 0], ["s", 0], ["print", 0], ["no", 0], ["else", 0], ["if", 0], ["k", 0], ["2", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["solve", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["kek", 0], ["k", 0], ["2", 0], ["if", 0], ["n", 0], ["kek", 0], ["print", 0], ["no", 0], ["continue", 0], ["n", 0], ["k", 0], ["1", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["1", 0], ["and", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["no", 0], ["continue", 0], ["else", 0], ["print", 0], ["yes", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["2", 0], ["n", 0], ["and", 0], ["k", 0], ["2", 0], ["n", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["q", 0], ["int", 0], ["input", 0], ["for", 0], ["rweur", 0], ["in", 0], ["range", 0], ["q", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["2", 0], ["1", 0], ["print", 0], ["no", 0], ["else", 0], ["if", 0], ["n", 0], ["k", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["case", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["2", 0], ["0", 0], ["and", 0], ["n", 0], ["k", 0], ["k", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["def", 0], ["input", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["1", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["2", 0], ["k", 0], ["2", 0], ["and", 0], ["n", 0], ["k", 0], ["k", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["k", 0], ["and", 0], ["n", 0], ["2", 0], ["k", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["bisect", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["m", 0], ["k", 0], ["2", 0], ["return", 0], ["n", 0], ["m", 0], ["and", 0], ["n", 0], ["m", 0], ["2", 0], ["0", 0], ["def", 0], ["main", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["solve", 0], ["n", 0], ["k", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["case", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["k", 0], ["k", 0], ["k", 0], ["if", 0], ["n", 0], ["2", 0], ["sum", 0], ["k", 0], ["2", 0], ["and", 0], ["n", 0], ["sum", 0], ["k", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["from", 0], ["math", 0], ["import", 0], ["for", 0], ["zz", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["2", 0], ["or", 0], ["n", 0], ["2", 0], ["1", 0], ["k", 0], ["2", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["yes", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["k", 0], ["and", 0], ["n", 0], ["k", 0], ["2", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["test", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["2", 0], ["k", 0], ["2", 0], ["and", 0], ["n", 0], ["k", 0], ["k", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["2", 0], ["n", 0], ["2", 0], ["0", 0], ["if", 0], ["n", 0], ["k", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["else", 0], ["print", 0], ["no", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["2", 0], ["if", 0], ["n", 0], ["0", 0], ["and", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["k", 0], ["1", 0], ["n", 0], ["1", 0], ["and", 0], ["n", 0], ["k", 0], ["k", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["coding", 0], ["utf", 0], ["8", 0], ["code", 0], ["by", 0], ["h", 0], ["c", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["stdin", 0], ["readline", 0], ["import", 0], ["math", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["no", 0], ["yes", 0], ["n", 0], ["k", 0], ["k", 0], ["and", 0], ["n", 0], ["k", 0], ["2", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["a", 0], ["b", 0], ["2", 0], ["0", 0], ["and", 0], ["b", 0], ["int", 0], ["a", 0], ["0", 0], ["5", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["n", 0], ["k", 0], ["k", 0], ["and", 0], ["n", 0], ["2", 0], ["k", 0], ["2", 0], ["print", 0], ["yes", 0], ["else", 0], ["print", 0], ["no", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nGiven an input string composed solely of lowercase English letters, find the longest substring that occurs more than once in the input string. The two occurrences are allowed to partially overlap.\n\n-----Input-----\nThe input is a single line containing a string of lowercase letters. The string contains more than one character, but no more than $10^5$. At least one letter will appear at least twice.\n\n-----Output-----\nPrint a single line of output: the longest substring that occurs more than once in the input string. If there are multiple longest repeated substrings, print the one the would come first when the longest substrings are sorted in lexicographical (alphabetical) order.\n\n-----Examples-----\nSample Input 1:\nabcefgabc\nSample Output 1:\nabc\n\nSample Input 2:\nabcbabcba\nSample Output 2:\nabcba\n\nSample Input 3:\naaaa\nSample Output 3:\naaa\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7350"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7350", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["given", 1], ["an", 1], ["input", 1], ["string", 1], ["composed", 1], ["solely", 1], ["of", 1], ["lowercase", 1], ["english", 1], ["letters", 1], ["find", 1], ["the", 1], ["longest", 1], ["substring", 1], ["that", 1], ["occurs", 1], ["more", 1], ["than", 1], ["once", 1], ["in", 0], ["the", 0], ["input", 0], ["string", 0], ["the", 0], ["two", 0], ["occurrences", 0], ["are", 0], ["allowed", 0], ["to", 0], ["partially", 0], ["overlap", 0], ["input", 0], ["the", 2], ["input", 2], ["is", 2], ["a", 2], ["single", 2], ["line", 2], ["containing", 2], ["a", 2], ["string", 2], ["of", 2], ["lowercase", 2], ["letters", 1], ["the", 1], ["string", 1], ["contains", 1], ["more", 1], ["than", 1], ["one", 1], ["character", 1], ["but", 1], ["no", 1], ["more", 1], ["than", 0], ["10", 0], ["5", 0], ["at", 0], ["least", 0], ["one", 0], ["letter", 0], ["will", 0], ["appear", 0], ["at", 0], ["least", 0], ["twice", 0], ["output", 0], ["print", 1], ["a", 1], ["single", 1], ["line", 1], ["of", 1], ["output", 1], ["the", 1], ["longest", 1], ["substring", 1], ["that", 1], ["occurs", 1], ["more", 1], ["than", 1], ["once", 1], ["in", 1], ["the", 1], ["input", 1], ["string", 1], ["if", 1], ["there", 1], ["are", 1], ["multiple", 1], ["longest", 1], ["repeated", 1], ["substrings", 1], ["print", 1], ["the", 1], ["one", 1], ["the", 1], ["would", 1], ["come", 0], ["first", 0], ["when", 0], ["the", 0], ["longest", 0], ["substrings", 0], ["are", 0], ["sorted", 0], ["in", 0], ["lexicographical", 0], ["alphabetical", 0], ["order", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["abcefgabc", 0], ["sample", 0], ["output", 0], ["1", 0], ["abc", 0], ["sample", 0], ["input", 0], ["2", 0], ["abcbabcba", 0], ["sample", 0], ["output", 0], ["2", 0], ["abcba", 0], ["sample", 0], ["input", 0], ["3", 0], ["aaaa", 0], ["sample", 0], ["output", 0], ["3", 0], ["aaa", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5338345864661654, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4924812030075188, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7379310344827587, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5338345864661654, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4924812030075188, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7379310344827587, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nIvan has an array consisting of n elements. Each of the elements is an integer from 1 to n.\n\nRecently Ivan learned about permutations and their lexicographical order. Now he wants to change (replace) minimum number of elements in his array in such a way that his array becomes a permutation (i.e. each of the integers from 1 to n was encountered in his array exactly once). If there are multiple ways to do it he wants to find the lexicographically minimal permutation among them.\n\nThus minimizing the number of changes has the first priority, lexicographical minimizing has the second priority.\n\nIn order to determine which of the two permutations is lexicographically smaller, we compare their first elements. If they are equal — compare the second, and so on. If we have two permutations x and y, then x is lexicographically smaller if x_{i} < y_{i}, where i is the first index in which the permutations x and y differ.\n\nDetermine the array Ivan will obtain after performing all the changes.\n\n\n-----Input-----\n\nThe first line contains an single integer n (2 ≤ n ≤ 200 000) — the number of elements in Ivan's array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ n) — the description of Ivan's array.\n\n\n-----Output-----\n\nIn the first line print q — the minimum number of elements that need to be changed in Ivan's array in order to make his array a permutation. In the second line, print the lexicographically minimal permutation which can be obtained from array with q changes.\n\n\n-----Examples-----\nInput\n4\n3 2 2 3\n\nOutput\n2\n1 2 4 3 \n\nInput\n6\n4 5 6 3 2 1\n\nOutput\n0\n4 5 6 3 2 1 \n\nInput\n10\n6 8 4 6 7 1 6 3 4 5\n\nOutput\n3\n2 8 4 6 7 1 9 3 10 5 \n\n\n\n-----Note-----\n\nIn the first example Ivan needs to replace number three in position 1 with number one, and number two in position 3 with number four. Then he will get a permutation [1, 2, 4, 3] with only two changed numbers — this permutation is lexicographically minimal among all suitable. \n\nIn the second example Ivan does not need to change anything because his array already is a permutation.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\na = list(map(int, input().split()))\n\nnums = [False for i in range(200010)]\nmust = [False for i in range(200010)]\ncounter = dict()\nnow_num = 0\n\n\ndef inc():\n\tnonlocal now_num\n\tnow_num += 1\n\twhile nums[now_num - 1]:\n\t\tnow_num += 1\n\n\nfor el in a:\n\tif nums[el - 1]:\n\t\tcounter[el] += 1\n\telse:\n\t\tcounter[el] = 1\n\tnums[el - 1] = True\n\ninc()\n\nans = []\nc = 0\n\nfor el in a:\n\tif counter[el] > 1:\n\t\tcounter[el] -= 1\n\t\tif now_num < el:\n\t\t\tans.append(now_num)\n\t\t\tc += 1\n\t\t\tinc()\n\t\telse:\n\t\t\tif must[el - 1] == False:\n\t\t\t\tans.append(el)\n\t\t\t\tmust[el - 1] = True\n\t\t\telse:\n\t\t\t\tans.append(now_num)\n\t\t\t\tc += 1\n\t\t\t\tinc()\n\telse:\n\t\tif must[el - 1] == False:\n\t\t\tans.append(el)\n\t\telse:\n\t\t\tans.append(now_num)\n\t\t\tc += 1\n\t\t\tinc()\n\nprint(c)\nprint(' '.join(str(el) for el in ans))\n", "def list_input():\n\treturn list(map(int,input().split()))\ndef map_input():\n\treturn map(int,input().split())\ndef map_string():\n\treturn input().split()\n\nfrom collections import Counter\nn = int(input())    \na = list_input()\nc = Counter(a)\nans = 0\ns = set(a)\ns1 = []\nfor i in range(1,n+1):\n\tif i not in s:\n\t\ts1.append(i)\t\t\ncur = 0\t\t\nleft = set([])\nfor i in range(n):\n\tif(c[a[i]] > 1):\n\t\tif s1[cur] < a[i] or a[i] in left:\n\t\t\tc[a[i]] -= 1\n\t\t\ta[i] = s1[cur]\n\t\t\tcur += 1\n\t\t\tans += 1\n\t\telse: left.add(a[i])\nprint(ans)\t\t\t\nfor i in a: print(i,end=' ')\n\n", "from sys import stdin, stdout\n\nn = int(stdin.readline().rstrip())\na = list(map(int,stdin.readline().rstrip().split()))\n\naSet = set(a)\naMinus = set(range(1,n+1)) - aSet\nminusList = sorted(list(aMinus),reverse=True)\nused=set()\n\ncountDict = {x : 0 for x in aSet}\nfor x in a:\n\tcountDict[x] +=1\n\nfinalList = a\nfor i in range(n):\n\tx = a[i]\n\tif x in used:\n\t\tfinalList[i] = minusList.pop()\n\telif countDict[x]==1:\n\t\tcontinue\n\telif x<minusList[-1]:\n\t\tused.add(x)\n\telse:\n\t\tcountDict[x]-=1\n\t\tfinalList[i] = minusList.pop()\n\nprint(len(aMinus))\nprint(' '.join(map(str,finalList)))\n", "def solve(printing):\n\n\tn = int(input())\n\tnums = [int(st)-1 for st in input().split(\" \")]\n\tnumdupe = [0] * n\n\tdupeindex = []\n\tdupeindexindv = {}\n\tmissing = []\n\n\tif printing:\n\t\tprint(\"nums\"); print(nums)\n\n\tfor i in range(n):\n\t\tnumdupe[nums[i]] += 1\n\n\tfor i in range(n):\n\t\tif numdupe[i] == 0:\n\t\t\tmissing.append(i)\n\t\t\t\n\t\tif numdupe[nums[i]] >= 2:\n\t\t\tdupeindex.append(i)\n\t\t\tif nums[i] in dupeindexindv:\n\t\t\t\tdupeindexindv[nums[i]][1].append(i)\n\t\t\telse:\n\t\t\t\tdupeindexindv[nums[i]] = [0, [i], False]\n\t\t\t\t# left location, dupe indexs, if already located original\n\n\tfor num in dupeindexindv:\n\t\tdupeindexindv[num][0] = len(dupeindexindv[num][1])\n\n\tif printing:\n\t\tprint(\"missing\"); print(missing)\n\t\tprint(\"dupeindexindv\"); print(dupeindexindv)\n\n\tmisslen = len(missing)\n\tmisindex = 0\n\t#answer = 0\n\tfor index in dupeindex:\n\n\t\tif misslen <= misindex:\n\t\t\tbreak\n\n\t\telif dupeindexindv[nums[index]][0] == 1 and not dupeindexindv[nums[index]][2]:\n\t\t\t# one spot left but original not located yet.\n\t\t\t# locate original.\n\t\t\tdupeindexindv[nums[index]][0] -= 1\n\t\t\tdupeindexindv[nums[index]][2] = True\n\t\t\n\t\telif dupeindexindv[nums[index]][0] > 0:\n\t\t\t\n\t\t\tif dupeindexindv[nums[index]][2] or missing[misindex] < nums[index]:\n\t\t\t\t# num is smaller or original is already located.\n\t\t\t\t# locate missing number.\n\t\t\t\tdupeindexindv[nums[index]][0] -= 1\n\t\t\t\tnums[index] = missing[misindex]\n\t\t\t\tmisindex += 1\n\t\t\t\t#answer += 1\n\n\t\t\telse: # locate original\n\t\t\t\tdupeindexindv[nums[index]][0] -= 1\n\t\t\t\tdupeindexindv[nums[index]][2] = True\n\n\tprint(misslen)\n\tfor num in nums:\n\t\tprint(num+1, end = \" \")\n\nsolve(False)\n", "n = int(input())\nair = [int(x) for x in  input().split()]\na = [0]*(n+1)\na[0] = 1\nfor x in range(n):\n\ta[air[x]] += 1\nst = [0]\nfor x in range(n,-1,-1):\n\tif a[x] == 0:\n\t\tst.append(x)\ncnt = 0\nlevel = dict()\nfor x in range(n):\n\t#print a\n\tif a[air[x]] > 1:\n\t\tif air[x] > st[-1]:\n\t\t\ta[air[x]] -= 1\n\t\t\tair[x] = st[-1]\n\t\t\tst.pop()\n\t\t\tcnt += 1\n \n\t\telse:\n\t\t\tif level.get(air[x],0) == 0:\n\t\t\t\tlevel[air[x]] = 1\n\t\t\telse:\n\t\t\t\ta[air[x]] -= 1\n\t\t\t\tair[x] = st[-1]\n\t\t\t\tst.pop()\n\t\t\t\tcnt += 1\n \n \n \nprint (cnt)\nfor x in air:\n\tprint(x, end=' ')\n", "n=int(input())\nl=list(map(int,input().split()))\nlis,ind=set(),{}\nfor i in l:\n\tif i in ind:\n\t\tind[i]+=1\n\telse:\n\t\tind[i]=1\n\t\tlis.add(i)\nmlis=sorted(set(range(1,n+1))-lis,key=int)\nk=0\nfor i,j in enumerate(l):\n\tif ind[j]!=1:\n\t\tif ind[j]==0 or mlis[k]<j:\n\t\t\tl[i]=mlis[k]\n\t\t\tk+=1\n\t\t\tif k==len(mlis):\n\t\t\t\tbreak\n\t\telse:\n\t\t\tind[j]=0\n\t\tif ind[j]>1:\n\t\t\tind[j]-=1\n\nprint(len(mlis),\" \".join(map(str,l)),sep='\\n')\n", "n=int(input())\narr=list(map(int,input().strip().split(' ')))\na=[0 for i in range(200001)]\nb=[0 for i in range(200001)]\nfor i in arr:\n\ta[i]+=1\nj=1\nt=0\nfor i in range(1,n+1):\n\tif(a[i]>0):\n\t\tt+=1\nfor i in range(n):\n\tif(a[arr[i]]>1):\n\t\twhile(a[j]!=0):\n\t\t\tj+=1\n\t\tif(arr[i]>j or b[arr[i]]==1 ):\n\t\t\ta[arr[i]]-=1\n\t\t\tarr[i]=j\n\t\t\ta[j]=1\n\t\telse:\n\t\t\tb[arr[i]]=1\nprint(n-t)\nfor i in arr:\n\tprint(i,end=' ')\nprint()\n\n\n", "from collections import deque\ndef main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\td = {}\n\tfor i, x in enumerate(a):\n\t\td.setdefault(x, []).append(i)\n\ts = []\n\tc = {}\n\tfor k, v in list(d.items()):\n\t\ts.extend(v)\n\t\tc[k] = len(v)\n\ts.sort()\n\tkilled = set()\n\tava = deque(sorted(frozenset(list(range(1, n + 1))) - frozenset(a)))\n\tans = 0\n\tfor i in s:\n\t\tv = a[i]\n\t\tif (c[v] == 1 or ava[0] > v) and not v in killed:\n\t\t\tkilled.add(v)\n\t\telse:\n\t\t\ta[i] = ava.popleft()\n\t\t\tans += 1\n\t\tc[v] -= 1\n\tprint(ans)\n\tprint(' '.join(map(str, a)))\nmain()\n\n", "import sys\nn = int(input())\na = input().split()\narr = [int(_) for _ in a]\ncnt = [0 for _ in range(n+1)]\nmust = [False for _ in range(n+1)]\nfor x in arr:\n\tcnt[x] += 1\n\nque = []\nfor i in range(1,n+1):\n\tif cnt[i] == 0:\n\t\tque.append(i)\n\t\t\ncur = 0\nfor i in range(n):\n\tx = arr[i]\n\tif cnt[x] > 1 :\n\t\tif must[x] or que[cur] < x:\n\t\t\tcnt[x] -= 1\n\t\t\tarr[i] = que[cur]\n\t\t\tcur += 1\n\t\telse:\n\t\t\tmust[x] = True\n\n\nprint(cur)\nfor x in arr:\n\tprint(x,end=' ')\n", "n = int(input()) + 1\nt = [0] + list(map(int, input().split()))\n\ns = [0] * n\nfor j in t: s[j] += 1\n\np = [0] * n\nk = 1\n\nfor i, j in enumerate(t):\n\tif s[j] > 1:\n\t\twhile s[k]: k += 1\n\t\tif j > k or p[j]:\n\t\t\tt[i] = k\n\t\t\ts[j] -= 1\n\t\t\tk += 1\n\t\telse:\n\t\t\tp[j] = 1\n\nprint(s.count(0))\nprint(' '.join(map(str, t[1:])))\n", "from collections import defaultdict\n\nn = int(input())\nl = list(map(int, input().split()))\n\ncount = defaultdict(int)\nfor x in l:\n\tcount[x] += 1\n\nneed = []\n\nfor x in range(1,n+1):\n\tif count[x] == 0:\n\t\tneed.append(x)\n\npos_need = 0\nopen = [False for _ in range(n+1)]\nactions = 0\n\nfor i in range(n):\n\tif pos_need == len(need):\n\t\tbreak\n\tif count[l[i]] >= 2:\n\t\tif l[i] < need[pos_need]:\n\t\t\tif open[l[i]]: \n\t\t\t\tcount[l[i]] -= 1\n\t\t\t\tl[i] = need[pos_need]\n\t\t\t\tactions += 1\n\t\t\t\tpos_need += 1\n\t\t\telse:\n\t\t\t\topen[l[i]] = True\n\t\telse:\n\t\t\tcount[l[i]] -= 1\n\t\t\tl[i] = need[pos_need]\n\t\t\tactions += 1\n\t\t\tpos_need += 1\n\nprint(actions)\nprint(*l)\n", "n = int(input())\nb = [0] * n\nc = [0] * n\narray = []\nfor i in input().split():\n\tarray.append(int(i))\n\tb[int(i)-1] += 1\n\tc[int(i)-1] = True\nfree = []\ncount = 0\nfor i in range(n):\n\tif b[i] == 0:\n\t\tfree.append(i+1)\n\telse:\n\t\tcount += b[i] - 1\nprint(count)\nz = 0\nfor i in range(n):\n\tif b[array[i]-1] > 1:\n\t\tif array[i] > free[z]:\n\t\t\tb[array[i]-1] -= 1 \n\t\t\tarray[i] = free[z]\n\t\t\tz += 1\n\t\telif c[array[i]-1] == False:\n\t\t\tb[array[i]-1] -= 1\n\t\t\tarray[i] = free[z]\n\t\t\tz += 1\n\t\telse:\n\t\t\tc[array[i]-1] = False\nfor i in range(n):\n\tprint(array[i], end = ' ')\n", "n = int(input())\nb = [0] * n\nc = [0] * n\narray = []\nfor i in input().split():\n\tarray.append(int(i))\n\tb[int(i)-1] += 1\n\tc[int(i)-1] = True\nfree = []\ncount = 0\nfor i in range(n):\n\tif b[i] == 0:\n\t\tfree.append(i+1)\n\telse:\n\t\tcount += b[i] - 1\nprint(count)\nz = 0\nfor i in range(n):\n\tif b[array[i]-1] > 1:\n\t\tif array[i] > free[z]:\n\t\t\tb[array[i]-1] -= 1 \n\t\t\tarray[i] = free[z]\n\t\t\tz += 1\n\t\telif c[array[i]-1] == False:\n\t\t\tb[array[i]-1] -= 1\n\t\t\tarray[i] = free[z]\n\t\t\tz += 1\n\t\telse:\n\t\t\tc[array[i]-1] = False\nfor i in range(n):\n\tprint(array[i], end = ' ')\n", "n, ans, j = int(input()), 0, 1\na = [int(i) for i in input().split()]\nres, c, lft = [0] * n, [0] * (n + 1), [0] * (n + 1)\nfor i in a:\n\tc[i] += 1\nwhile j <= n and c[j]:\n\tj += 1\nfor i in range(len(a)):\n\tif c[a[i]] > 1:\n\t\tif lft[a[i]] or a[i] > j:\n\t\t\tans += 1\n\t\t\tc[a[i]] -= 1\n\t\t\tres[i] = j\n\t\t\tj += 1\n\t\t\twhile j <= n and c[j]:\n\t\t\t\tj += 1\n\t\telse:\n\t\t\tlft[a[i]] = 1\n\t\t\tres[i] = a[i]\n\telse:\n\t\tres[i] = a[i]\nprint(ans)\nprint(*res)\n\t\n", "n, ans, j = int(input()), 0, 1\na = [int(i) for i in input().split()]\nres, c, lft = [0] * n, [0] * (n + 1), [0] * (n + 1)\nfor i in a:\n\tc[i] += 1\nwhile j <= n and c[j]:\n\tj += 1\nfor i in range(len(a)):\n\tif c[a[i]] > 1:\n\t\tif lft[a[i]] or a[i] > j:\n\t\t\tans += 1\n\t\t\tc[a[i]] -= 1\n\t\t\tres[i] = j\n\t\t\tj += 1\n\t\t\twhile j <= n and c[j]:\n\t\t\t\tj += 1\n\t\telse:\n\t\t\tlft[a[i]] = 1\n\t\t\tres[i] = a[i]\n\telse:\n\t\tres[i] = a[i]\nprint(ans)\nprint(*res)\n\t\n", "\"\"\"http://codeforces.com/problemset/problem/864/D\"\"\"\n# 17:54\ndef make_a_permutation():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tocc = [0] * (n+1)\n\tfor i in range(n):\n\t\tocc[a[i]] += 1\n\tmissing = [i for i in range(1,n+1) if occ[i] == 0]\n\tmi = 0\n\tdupIndexes = [i for i in range(n) if occ[a[i]] >= 2]\n\tfixedNum = [False] * (n+1)\n\tfor i in range(n):\n\t\tif occ[i] == 1:\n\t\t\tfixedNum[i] = True\n\t\n\tfor dup in dupIndexes:\n\t\tdupNum = a[dup]\n\t\tif occ[dupNum] > 1 and (fixedNum[dupNum] or dupNum > missing[mi]):\n\t\t\tfixedNum[missing[mi]] = True\n\t\t\tocc[missing[mi]] += 1\n\t\t\ta[dup]= missing[mi]\n\t\t\tmi += 1\n\t\t\tocc[dupNum] -= 1\n\t\telse:\n\t\t\t\tfixedNum[dupNum] = True\n\treturn mi, a\n   \nc, l = make_a_permutation()\nprint(c)\nfor i in range(len(l)):\n\tprint(l[i], end=\" \")\n", "n = int(input())\na = input().split(' ')\nfor i in range(n):\n\ta[i] = int(a[i]) - 1\n\t\nocc = {}\n\nfor i in range(len(a)):\n\tif a[i] not in occ:\n\t\tocc[a[i]] = 1\n\telse:\n\t\tocc[a[i]] += 1\n\nmissing = []\nfor i in range(n):\n\tif i not in occ:\n\t\tmissing.append(i)\n\t\t\nact_missing = 0\nleft = [1] * n\n\n\nfor pos in range(n):\n\tif occ[a[pos]] > left[a[pos]]:\n\t\tif missing[act_missing] < a[pos] or left[a[pos]] == 0:\n\t\t\tocc[a[pos]] -= 1\n\t\t\ta[pos] = missing[act_missing]        \n\t\t\tact_missing += 1\n\t\telse:\n\t\t\tleft[a[pos]] -= 1\n\t\t\tocc[a[pos]] -= 1\n\t\t\t\ns = \"\"\nfor e in a:\n\ts += str(e + 1)\n\ts += ' '\n\t\nprint(len(missing))\nprint(s)\n\t\t\n\t\t\n\n", "from collections import Counter\n\n\ndef readints():\n\treturn [int(item) for item in input().strip().split()]\n\n\nclass Solver:\n\tdef main(self):\n\t\tn = readints()[0]\n\t\ta = readints()\n\t\tc = Counter(a)\n\t\tskipped = set()\n\t\tto_be_added = sorted(set(range(1, n+1)) - set(c.keys()))\n\t\tchanges = 0\n\t\tfor i in range(n):\n\t\t\tif c[a[i]] > 1:\n\t\t\t\tif a[i] < to_be_added[changes] and a[i] not in skipped:\n\t\t\t\t\tskipped.add(a[i])\n\t\t\t\telse:\n\t\t\t\t\tc[a[i]] -= 1\n\t\t\t\t\ta[i] = to_be_added[changes]\n\t\t\t\t\tchanges += 1\n\n\t\tprint(changes)\n\t\tprint(' '.join(map(str, a)))\n\nSolver().main()\n", "import collections\nn = int(input())\na = list(map(int, input().split()))\ncnt = collections.Counter(a)\nres = []\nb = []\nfor i in range(1, n + 1):\n\tif i not in cnt:\n\t\tb.append(i)\nb.sort(reverse = True)\ns = set(a)\nprint(len(b))\nfor v in a:\n\tif v in cnt and cnt[v] > 1:\n\t\tt = b[-1]\n\t\tif v < t and v in s:\n\t\t\tres.append(v)\n\t\t\ts.remove(v)\n\t\telse:\n\t\t\tres.append(b.pop())\n\t\t\tcnt[v] -= 1\n\telse:\n\t\tres.append(v)\nprint(\" \".join(list(map(str, res))))\n\n", "\nn = int(input())\na = list(map(int, input().split(' ')))\nfreq = {}\nseen = [False for i in range(n+1)]\nch = 0\nde = []\nfor i in range(n):\n\tif a[i] not in list(freq.keys()):\n\t\tfreq[a[i]] = 1\n\telse:\n\t\tfreq[a[i]] += 1\n\t\tch += 1\n\nfor i in range(n):\n\tif i+1 not in list(freq.keys()):\n\t\tde.append(i+1)\n\nindex = 0\nfor i in range(n):\n\tif freq[a[i]] > 1:\n\t\tif seen[a[i]] or de[index] < a[i]:\n\t\t\tfreq[a[i]] += -1\n\t\t\ta[i] = de[index]\n\t\t\tindex += 1\n\t\telse:\n\t\t\tseen[a[i]] = True\n\n\n\nsol = \"\"\nfor x in a:\n\tsol += str(x) + \" \"\n\nprint(str(ch) + \"\\n\" + sol )\n\n", "from collections import Counter\nn = int(input())\na = list(map(int,input().split()))\nc = Counter(a)\nb=dict()\nfor i in c.keys():\n\tb[i]=0\nd = list(sorted((Counter(range(1,n+1))-c).keys()))\nr = n-len(c)\nj=0\nprint(r)\nfor i in range(n):\n\tif j==r:\n\t\tbreak\n\tif c[a[i]]>1:\n\t\tif d[j]<a[i]:\n\t\t\tc[a[i]]-=1\n\t\t\ta[i]=d[j]\n\t\t\tj+=1\n\t\telse:\n\t\t\tif b[a[i]]!=0:\n\t\t\t\tc[a[i]]-=1\n\t\t\t\ta[i]=d[j]\n\t\t\t\tj+=1\n\t\t\telse:\n\t\t\t\tb[a[i]]+=1\nprint(*a)\n", "n = int(input())\na = list(map(int, input().split()))\n\nif sorted(a) == list(range(1, n+1)):\n\tprint(0)\n\tprint(' '.join(map(str,a)))\nelse:\n\tcnt = [0] * (n+1)\n\tfor i in a:\n\t\tcnt[i] += 1\n\n\tadd = []\n\tfor i in range(1, n+1):  # 1 to 26\n\t\tif cnt[i] == 0:\n\t\t\tadd.append(i)\n\n\tpos = 0\n\tm_cnt = 0\n\tappeared = [False] * (n + 1)\n\tfor i, t in enumerate(a):\n\t\tif cnt[t] > 1:\n\t\t\tif t > add[pos] or appeared[t]:\n\t\t\t\ta[i] = add[pos]\n\t\t\t\tpos += 1\n\t\t\t\tm_cnt += 1\n\t\t\t\tif pos == len(add):\n\t\t\t\t\tbreak\n\t\t\t\tcnt[t] -= 1\n\t\t\t\tappeared[a[i]] = True\n\t\t\telse:\n\t\t\t\tappeared[t] = True\n\t\telse:\n\t\t\tappeared[t] = True\n\n\tprint(m_cnt)\n\tprint(' '.join(map(str,a)))\n", "from collections import Counter\n\nn = int(input())\n\narr = [int(x) for x in input().split(\" \")]\ncounter = Counter(arr)\n\n\ns = {x for x in range(1, n + 1)}\nreplacements = sorted(list(s - set(counter.keys())))\n\nr = 0\nans = 0\nskipped = set()\nfor index, value in enumerate(arr):\n\tif counter[value] > 1:\n\t\tif value > replacements[r] or value in skipped:\n\t\t\tarr[index] = replacements[r]\n\t\t\tans += 1\n\t\t\tr += 1\n\t\t\tcounter.subtract((value,))\n\t\telse:\n\t\t\tskipped.add(value)\n\n\nprint(ans)\nprint(\" \".join([str(x) for x in arr]))\n"], "id": "id5483"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5483", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["ivan", 1], ["has", 1], ["an", 1], ["array", 1], ["consisting", 1], ["of", 1], ["n", 1], ["elements", 1], ["each", 1], ["of", 1], ["the", 1], ["elements", 1], ["is", 1], ["an", 1], ["integer", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["recently", 1], ["ivan", 1], ["learned", 1], ["about", 1], ["permutations", 1], ["and", 1], ["their", 1], ["lexicographical", 1], ["order", 1], ["now", 1], ["he", 1], ["wants", 1], ["to", 1], ["change", 1], ["replace", 1], ["minimum", 1], ["number", 1], ["of", 1], ["elements", 1], ["in", 1], ["his", 1], ["array", 1], ["in", 1], ["such", 1], ["a", 1], ["way", 1], ["that", 1], ["his", 1], ["array", 1], ["becomes", 1], ["a", 1], ["permutation", 1], ["i", 1], ["e", 1], ["each", 1], ["of", 1], ["the", 1], ["integers", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["was", 1], ["encountered", 1], ["in", 1], ["his", 1], ["array", 1], ["exactly", 1], ["once", 1], ["if", 1], ["there", 1], ["are", 1], ["multiple", 1], ["ways", 1], ["to", 1], ["do", 1], ["it", 1], ["he", 1], ["wants", 1], ["to", 1], ["find", 1], ["the", 1], ["lexicographically", 1], ["minimal", 1], ["permutation", 1], ["among", 1], ["them", 1], ["thus", 1], ["minimizing", 1], ["the", 1], ["number", 1], ["of", 1], ["changes", 1], ["has", 1], ["the", 1], ["first", 1], ["priority", 1], ["lexicographical", 1], ["minimizing", 1], ["has", 1], ["the", 1], ["second", 1], ["priority", 1], ["in", 1], ["order", 1], ["to", 1], ["determine", 1], ["which", 1], ["of", 1], ["the", 1], ["two", 1], ["permutations", 1], ["is", 1], ["lexicographically", 1], ["smaller", 1], ["we", 1], ["compare", 1], ["their", 1], ["first", 1], ["elements", 1], ["if", 1], ["they", 1], ["are", 1], ["equal", 1], ["—", 1], ["compare", 1], ["the", 1], ["second", 1], ["and", 1], ["so", 1], ["on", 1], ["if", 1], ["we", 1], ["have", 0], ["two", 0], ["permutations", 0], ["x", 0], ["and", 0], ["y", 0], ["then", 0], ["x", 0], ["is", 0], ["lexicographically", 0], ["smaller", 0], ["if", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["where", 1], ["i", 1], ["is", 1], ["the", 1], ["first", 1], ["index", 1], ["in", 1], ["which", 1], ["the", 1], ["permutations", 1], ["x", 1], ["and", 1], ["y", 1], ["differ", 0], ["determine", 0], ["the", 0], ["array", 0], ["ivan", 0], ["will", 0], ["obtain", 0], ["after", 0], ["performing", 0], ["all", 0], ["the", 0], ["changes", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["an", 1], ["single", 1], ["integer", 1], ["n", 1], ["2", 1], ["≤", 1], ["n", 1], ["≤", 1], ["200", 1], ["000", 1], ["—", 2], ["the", 2], ["number", 2], ["of", 1], ["elements", 1], ["in", 0], ["ivan", 0], ["s", 0], ["array", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["a", 0], ["sequence", 0], ["of", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["n", 0], ["—", 0], ["the", 0], ["description", 0], ["of", 0], ["ivan", 0], ["s", 0], ["array", 0], ["output", 0], ["in", 1], ["the", 1], ["first", 1], ["line", 1], ["print", 1], ["q", 1], ["—", 1], ["the", 1], ["minimum", 1], ["number", 1], ["of", 1], ["elements", 1], ["that", 1], ["need", 1], ["to", 1], ["be", 1], ["changed", 1], ["in", 1], ["ivan", 1], ["s", 1], ["array", 1], ["in", 1], ["order", 1], ["to", 1], ["make", 1], ["his", 1], ["array", 1], ["a", 1], ["permutation", 1], ["in", 1], ["the", 1], ["second", 1], ["line", 1], ["print", 1], ["the", 1], ["lexicographically", 0], ["minimal", 0], ["permutation", 0], ["which", 0], ["can", 0], ["be", 0], ["obtained", 0], ["from", 0], ["array", 0], ["with", 0], ["q", 0], ["changes", 0], ["examples", 0], ["input", 0], ["4", 0], ["3", 0], ["2", 0], ["2", 0], ["3", 0], ["output", 0], ["2", 0], ["1", 0], ["2", 0], ["4", 0], ["3", 0], ["input", 0], ["6", 0], ["4", 0], ["5", 0], ["6", 0], ["3", 0], ["2", 0], ["1", 0], ["output", 0], ["0", 0], ["4", 0], ["5", 0], ["6", 0], ["3", 0], ["2", 0], ["1", 0], ["input", 0], ["10", 0], ["6", 0], ["8", 0], ["4", 0], ["6", 0], ["7", 0], ["1", 0], ["6", 0], ["3", 0], ["4", 0], ["5", 0], ["output", 0], ["3", 0], ["2", 0], ["8", 0], ["4", 0], ["6", 0], ["7", 0], ["1", 0], ["9", 0], ["3", 0], ["10", 0], ["5", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["example", 1], ["ivan", 1], ["needs", 1], ["to", 1], ["replace", 1], ["number", 1], ["three", 1], ["in", 1], ["position", 1], ["1", 1], ["with", 1], ["number", 1], ["one", 1], ["and", 1], ["number", 1], ["two", 1], ["in", 1], ["position", 1], ["3", 1], ["with", 1], ["number", 1], ["four", 1], ["then", 1], ["he", 1], ["will", 1], ["get", 1], ["a", 1], ["permutation", 1], ["1", 1], ["2", 1], ["4", 1], ["3", 1], ["with", 1], ["only", 1], ["two", 1], ["changed", 1], ["numbers", 1], ["—", 1], ["this", 1], ["permutation", 1], ["is", 1], ["lexicographically", 1], ["minimal", 1], ["among", 1], ["all", 1], ["suitable", 1], ["in", 1], ["the", 1], ["second", 1], ["example", 1], ["ivan", 1], ["does", 1], ["not", 0], ["need", 0], ["to", 0], ["change", 0], ["anything", 0], ["because", 0], ["his", 0], ["array", 0], ["already", 0], ["is", 0], ["a", 0], ["permutation", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6479591836734694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6441326530612245, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7772277227722773, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7772277227722773, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6479591836734694, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6441326530612245, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7772277227722773, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7772277227722773, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["nums", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["200010", 0], ["must", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["200010", 0], ["counter", 0], ["dict", 0], ["now", 0], ["num", 0], ["0", 0], ["def", 0], ["inc", 0], ["nonlocal", 0], ["now", 0], ["num", 0], ["now", 0], ["num", 0], ["1", 0], ["while", 0], ["nums", 0], ["now", 0], ["num", 0], ["1", 0], ["now", 0], ["num", 0], ["1", 0], ["for", 0], ["el", 0], ["in", 0], ["a", 0], ["if", 0], ["nums", 0], ["el", 0], ["1", 0], ["counter", 0], ["el", 0], ["1", 0], ["else", 0], ["counter", 0], ["el", 0], ["1", 0], ["nums", 0], ["el", 0], ["1", 0], ["true", 0], ["inc", 0], ["ans", 0], ["c", 0], ["0", 0], ["for", 0], ["el", 0], ["in", 0], ["a", 0], ["if", 0], ["counter", 0], ["el", 0], ["1", 0], ["counter", 0], ["el", 0], ["1", 0], ["if", 0], ["now", 0], ["num", 0], ["el", 0], ["ans", 0], ["append", 0], ["now", 0], ["num", 0], ["c", 0], ["1", 0], ["inc", 0], ["else", 0], ["if", 0], ["must", 0], ["el", 0], ["1", 0], ["false", 0], ["ans", 0], ["append", 0], ["el", 0], ["must", 0], ["el", 0], ["1", 0], ["true", 0], ["else", 0], ["ans", 0], ["append", 0], ["now", 0], ["num", 0], ["c", 0], ["1", 0], ["inc", 0], ["else", 0], ["if", 0], ["must", 0], ["el", 0], ["1", 0], ["false", 0], ["ans", 0], ["append", 0], ["el", 0], ["else", 0], ["ans", 0], ["append", 0], ["now", 0], ["num", 0], ["c", 0], ["1", 0], ["inc", 0], ["print", 0], ["c", 0], ["print", 0], ["join", 0], ["str", 0], ["el", 0], ["for", 0], ["el", 0], ["in", 0], ["ans", 0], ["def", 0], ["list", 0], ["input", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["map", 0], ["input", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["map", 0], ["string", 0], ["return", 0], ["input", 0], ["split", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["input", 0], ["c", 0], ["counter", 0], ["a", 0], ["ans", 0], ["0", 0], ["s", 0], ["set", 0], ["a", 0], ["s1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["s", 0], ["s1", 0], ["append", 0], ["i", 0], ["cur", 0], ["0", 0], ["left", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["s1", 0], ["cur", 0], ["a", 0], ["i", 0], ["or", 0], ["a", 0], ["i", 0], ["in", 0], ["left", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["s1", 0], ["cur", 0], ["cur", 0], ["1", 0], ["ans", 0], ["1", 0], ["else", 0], ["left", 0], ["add", 0], ["a", 0], ["i", 0], ["print", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["print", 0], ["i", 0], ["end", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["n", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["rstrip", 0], ["split", 0], ["aset", 0], ["set", 0], ["a", 0], ["aminus", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["aset", 0], ["minuslist", 0], ["sorted", 0], ["list", 0], ["aminus", 0], ["reverse", 0], ["true", 0], ["used", 0], ["set", 0], ["countdict", 0], ["x", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["aset", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["countdict", 0], ["x", 0], ["1", 0], ["finallist", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["a", 0], ["i", 0], ["if", 0], ["x", 0], ["in", 0], ["used", 0], ["finallist", 0], ["i", 0], ["minuslist", 0], ["pop", 0], ["elif", 0], ["countdict", 0], ["x", 0], ["1", 0], ["continue", 0], ["elif", 0], ["x", 0], ["minuslist", 0], ["1", 0], ["used", 0], ["add", 0], ["x", 0], ["else", 0], ["countdict", 0], ["x", 0], ["1", 0], ["finallist", 0], ["i", 0], ["minuslist", 0], ["pop", 0], ["print", 0], ["len", 0], ["aminus", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["finallist", 0], ["def", 0], ["solve", 0], ["printing", 0], ["n", 0], ["int", 0], ["input", 0], ["nums", 0], ["int", 0], ["st", 0], ["1", 0], ["for", 0], ["st", 0], ["in", 0], ["input", 0], ["split", 0], ["numdupe", 0], ["0", 0], ["n", 0], ["dupeindex", 0], ["dupeindexindv", 0], ["missing", 0], ["if", 0], ["printing", 0], ["print", 0], ["nums", 0], ["print", 0], ["nums", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["numdupe", 0], ["nums", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["numdupe", 0], ["i", 0], ["0", 0], ["missing", 0], ["append", 0], ["i", 0], ["if", 0], ["numdupe", 0], ["nums", 0], ["i", 0], ["2", 0], ["dupeindex", 0], ["append", 0], ["i", 0], ["if", 0], ["nums", 0], ["i", 0], ["in", 0], ["dupeindexindv", 0], ["dupeindexindv", 0], ["nums", 0], ["i", 0], ["1", 0], ["append", 0], ["i", 0], ["else", 0], ["dupeindexindv", 0], ["nums", 0], ["i", 0], ["0", 0], ["i", 0], ["false", 0], ["left", 0], ["location", 0], ["dupe", 0], ["indexs", 0], ["if", 0], ["already", 0], ["located", 0], ["original", 0], ["for", 0], ["num", 0], ["in", 0], ["dupeindexindv", 0], ["dupeindexindv", 0], ["num", 0], ["0", 0], ["len", 0], ["dupeindexindv", 0], ["num", 0], ["1", 0], ["if", 0], ["printing", 0], ["print", 0], ["missing", 0], ["print", 0], ["missing", 0], ["print", 0], ["dupeindexindv", 0], ["print", 0], ["dupeindexindv", 0], ["misslen", 0], ["len", 0], ["missing", 0], ["misindex", 0], ["0", 0], ["answer", 0], ["0", 0], ["for", 0], ["index", 0], ["in", 0], ["dupeindex", 0], ["if", 0], ["misslen", 0], ["misindex", 0], ["break", 0], ["elif", 0], ["dupeindexindv", 0], ["nums", 0], ["index", 0], ["0", 0], ["1", 0], ["and", 0], ["not", 0], ["dupeindexindv", 0], ["nums", 0], ["index", 0], ["2", 0], ["one", 0], ["spot", 0], ["left", 0], ["but", 0], ["original", 0], ["not", 0], ["located", 0], ["yet", 0], ["locate", 0], ["original", 0], ["dupeindexindv", 0], ["nums", 0], ["index", 0], ["0", 0], ["1", 0], ["dupeindexindv", 0], ["nums", 0], ["index", 0], ["2", 0], ["true", 0], ["elif", 0], ["dupeindexindv", 0], ["nums", 0], ["index", 0], ["0", 0], ["0", 0], ["if", 0], ["dupeindexindv", 0], ["nums", 0], ["index", 0], ["2", 0], ["or", 0], ["missing", 0], ["misindex", 0], ["nums", 0], ["index", 0], ["num", 0], ["is", 0], ["smaller", 0], ["or", 0], ["original", 0], ["is", 0], ["already", 0], ["located", 0], ["locate", 0], ["missing", 0], ["number", 0], ["dupeindexindv", 0], ["nums", 0], ["index", 0], ["0", 0], ["1", 0], ["nums", 0], ["index", 0], ["missing", 0], ["misindex", 0], ["misindex", 0], ["1", 0], ["answer", 0], ["1", 0], ["else", 0], ["locate", 0], ["original", 0], ["dupeindexindv", 0], ["nums", 0], ["index", 0], ["0", 0], ["1", 0], ["dupeindexindv", 0], ["nums", 0], ["index", 0], ["2", 0], ["true", 0], ["print", 0], ["misslen", 0], ["for", 0], ["num", 0], ["in", 0], ["nums", 0], ["print", 0], ["num", 0], ["1", 0], ["end", 0], ["solve", 0], ["false", 0], ["n", 0], ["int", 0], ["input", 0], ["air", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["n", 0], ["1", 0], ["a", 0], ["0", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["air", 0], ["x", 0], ["1", 0], ["st", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["x", 0], ["0", 0], ["st", 0], ["append", 0], ["x", 0], ["cnt", 0], ["0", 0], ["level", 0], ["dict", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["a", 0], ["if", 0], ["a", 0], ["air", 0], ["x", 0], ["1", 0], ["if", 0], ["air", 0], ["x", 0], ["st", 0], ["1", 0], ["a", 0], ["air", 0], ["x", 0], ["1", 0], ["air", 0], ["x", 0], ["st", 0], ["1", 0], ["st", 0], ["pop", 0], ["cnt", 0], ["1", 0], ["else", 0], ["if", 0], ["level", 0], ["get", 0], ["air", 0], ["x", 0], ["0", 0], ["0", 0], ["level", 0], ["air", 0], ["x", 0], ["1", 0], ["else", 0], ["a", 0], ["air", 0], ["x", 0], ["1", 0], ["air", 0], ["x", 0], ["st", 0], ["1", 0], ["st", 0], ["pop", 0], ["cnt", 0], ["1", 0], ["print", 0], ["cnt", 0], ["for", 0], ["x", 0], ["in", 0], ["air", 0], ["print", 0], ["x", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["lis", 0], ["ind", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["if", 0], ["i", 0], ["in", 0], ["ind", 0], ["ind", 0], ["i", 0], ["1", 0], ["else", 0], ["ind", 0], ["i", 0], ["1", 0], ["lis", 0], ["add", 0], ["i", 0], ["mlis", 0], ["sorted", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["lis", 0], ["key", 0], ["int", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["enumerate", 0], ["l", 0], ["if", 0], ["ind", 0], ["j", 0], ["1", 0], ["if", 0], ["ind", 0], ["j", 0], ["0", 0], ["or", 0], ["mlis", 0], ["k", 0], ["j", 0], ["l", 0], ["i", 0], ["mlis", 0], ["k", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["len", 0], ["mlis", 0], ["break", 0], ["else", 0], ["ind", 0], ["j", 0], ["0", 0], ["if", 0], ["ind", 0], ["j", 0], ["1", 0], ["ind", 0], ["j", 0], ["1", 0], ["print", 0], ["len", 0], ["mlis", 0], ["join", 0], ["map", 0], ["str", 0], ["l", 0], ["sep", 0], ["n", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["a", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["200001", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["200001", 0], ["for", 0], ["i", 0], ["in", 0], ["arr", 0], ["a", 0], ["i", 0], ["1", 0], ["j", 0], ["1", 0], ["t", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["0", 0], ["t", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["arr", 0], ["i", 0], ["1", 0], ["while", 0], ["a", 0], ["j", 0], ["0", 0], ["j", 0], ["1", 0], ["if", 0], ["arr", 0], ["i", 0], ["j", 0], ["or", 0], ["b", 0], ["arr", 0], ["i", 0], ["1", 0], ["a", 0], ["arr", 0], ["i", 0], ["1", 0], ["arr", 0], ["i", 0], ["j", 0], ["a", 0], ["j", 0], ["1", 0], ["else", 0], ["b", 0], ["arr", 0], ["i", 0], ["1", 0], ["print", 0], ["n", 0], ["t", 0], ["for", 0], ["i", 0], ["in", 0], ["arr", 0], ["print", 0], ["i", 0], ["end", 0], ["print", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["d", 0], ["setdefault", 0], ["x", 0], ["append", 0], ["i", 0], ["s", 0], ["c", 0], ["for", 0], ["k", 0], ["v", 0], ["in", 0], ["list", 0], ["d", 0], ["items", 0], ["s", 0], ["extend", 0], ["v", 0], ["c", 0], ["k", 0], ["len", 0], ["v", 0], ["s", 0], ["sort", 0], ["killed", 0], ["set", 0], ["ava", 0], ["deque", 0], ["sorted", 0], ["frozenset", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["frozenset", 0], ["a", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["v", 0], ["a", 0], ["i", 0], ["if", 0], ["c", 0], ["v", 0], ["1", 0], ["or", 0], ["ava", 0], ["0", 0], ["v", 0], ["and", 0], ["not", 0], ["v", 0], ["in", 0], ["killed", 0], ["killed", 0], ["add", 0], ["v", 0], ["else", 0], ["a", 0], ["i", 0], ["ava", 0], ["popleft", 0], ["ans", 0], ["1", 0], ["c", 0], ["v", 0], ["1", 0], ["print", 0], ["ans", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["main", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["split", 0], ["arr", 0], ["int", 0], ["for", 0], ["in", 0], ["a", 0], ["cnt", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["must", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["cnt", 0], ["x", 0], ["1", 0], ["que", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["cnt", 0], ["i", 0], ["0", 0], ["que", 0], ["append", 0], ["i", 0], ["cur", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["x", 0], ["arr", 0], ["i", 0], ["if", 0], ["cnt", 0], ["x", 0], ["1", 0], ["if", 0], ["must", 0], ["x", 0], ["or", 0], ["que", 0], ["cur", 0], ["x", 0], ["cnt", 0], ["x", 0], ["1", 0], ["arr", 0], ["i", 0], ["que", 0], ["cur", 0], ["cur", 0], ["1", 0], ["else", 0], ["must", 0], ["x", 0], ["true", 0], ["print", 0], ["cur", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["print", 0], ["x", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["1", 0], ["t", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["0", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["t", 0], ["s", 0], ["j", 0], ["1", 0], ["p", 0], ["0", 0], ["n", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["j", 0], ["in", 0], ["enumerate", 0], ["t", 0], ["if", 0], ["s", 0], ["j", 0], ["1", 0], ["while", 0], ["s", 0], ["k", 0], ["k", 0], ["1", 0], ["if", 0], ["j", 0], ["k", 0], ["or", 0], ["p", 0], ["j", 0], ["t", 0], ["i", 0], ["k", 0], ["s", 0], ["j", 0], ["1", 0], ["k", 0], ["1", 0], ["else", 0], ["p", 0], ["j", 0], ["1", 0], ["print", 0], ["s", 0], ["count", 0], ["0", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["t", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["count", 0], ["defaultdict", 0], ["int", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["count", 0], ["x", 0], ["1", 0], ["need", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["count", 0], ["x", 0], ["0", 0], ["need", 0], ["append", 0], ["x", 0], ["pos", 0], ["need", 0], ["0", 0], ["open", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["actions", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["pos", 0], ["need", 0], ["len", 0], ["need", 0], ["break", 0], ["if", 0], ["count", 0], ["l", 0], ["i", 0], ["2", 0], ["if", 0], ["l", 0], ["i", 0], ["need", 0], ["pos", 0], ["need", 0], ["if", 0], ["open", 0], ["l", 0], ["i", 0], ["count", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["need", 0], ["pos", 0], ["need", 0], ["actions", 0], ["1", 0], ["pos", 0], ["need", 0], ["1", 0], ["else", 0], ["open", 0], ["l", 0], ["i", 0], ["true", 0], ["else", 0], ["count", 0], ["l", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["need", 0], ["pos", 0], ["need", 0], ["actions", 0], ["1", 0], ["pos", 0], ["need", 0], ["1", 0], ["print", 0], ["actions", 0], ["print", 0], ["l", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["0", 0], ["n", 0], ["c", 0], ["0", 0], ["n", 0], ["array", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["array", 0], ["append", 0], ["int", 0], ["i", 0], ["b", 0], ["int", 0], ["i", 0], ["1", 0], ["1", 0], ["c", 0], ["int", 0], ["i", 0], ["1", 0], ["true", 0], ["free", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["0", 0], ["free", 0], ["append", 0], ["i", 0], ["1", 0], ["else", 0], ["count", 0], ["b", 0], ["i", 0], ["1", 0], ["print", 0], ["count", 0], ["z", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["array", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["array", 0], ["i", 0], ["free", 0], ["z", 0], ["b", 0], ["array", 0], ["i", 0], ["1", 0], ["1", 0], ["array", 0], ["i", 0], ["free", 0], ["z", 0], ["z", 0], ["1", 0], ["elif", 0], ["c", 0], ["array", 0], ["i", 0], ["1", 0], ["false", 0], ["b", 0], ["array", 0], ["i", 0], ["1", 0], ["1", 0], ["array", 0], ["i", 0], ["free", 0], ["z", 0], ["z", 0], ["1", 0], ["else", 0], ["c", 0], ["array", 0], ["i", 0], ["1", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["array", 0], ["i", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["b", 0], ["0", 0], ["n", 0], ["c", 0], ["0", 0], ["n", 0], ["array", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["array", 0], ["append", 0], ["int", 0], ["i", 0], ["b", 0], ["int", 0], ["i", 0], ["1", 0], ["1", 0], ["c", 0], ["int", 0], ["i", 0], ["1", 0], ["true", 0], ["free", 0], ["count", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["i", 0], ["0", 0], ["free", 0], ["append", 0], ["i", 0], ["1", 0], ["else", 0], ["count", 0], ["b", 0], ["i", 0], ["1", 0], ["print", 0], ["count", 0], ["z", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["b", 0], ["array", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["array", 0], ["i", 0], ["free", 0], ["z", 0], ["b", 0], ["array", 0], ["i", 0], ["1", 0], ["1", 0], ["array", 0], ["i", 0], ["free", 0], ["z", 0], ["z", 0], ["1", 0], ["elif", 0], ["c", 0], ["array", 0], ["i", 0], ["1", 0], ["false", 0], ["b", 0], ["array", 0], ["i", 0], ["1", 0], ["1", 0], ["array", 0], ["i", 0], ["free", 0], ["z", 0], ["z", 0], ["1", 0], ["else", 0], ["c", 0], ["array", 0], ["i", 0], ["1", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["array", 0], ["i", 0], ["end", 0], ["n", 0], ["ans", 0], ["j", 0], ["int", 0], ["input", 0], ["0", 0], ["1", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["res", 0], ["c", 0], ["lft", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["1", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["c", 0], ["i", 0], ["1", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["c", 0], ["j", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["lft", 0], ["a", 0], ["i", 0], ["or", 0], ["a", 0], ["i", 0], ["j", 0], ["ans", 0], ["1", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["res", 0], ["i", 0], ["j", 0], ["j", 0], ["1", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["c", 0], ["j", 0], ["j", 0], ["1", 0], ["else", 0], ["lft", 0], ["a", 0], ["i", 0], ["1", 0], ["res", 0], ["i", 0], ["a", 0], ["i", 0], ["else", 0], ["res", 0], ["i", 0], ["a", 0], ["i", 0], ["print", 0], ["ans", 0], ["print", 0], ["res", 0], ["n", 0], ["ans", 0], ["j", 0], ["int", 0], ["input", 0], ["0", 0], ["1", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["res", 0], ["c", 0], ["lft", 0], ["0", 0], ["n", 0], ["0", 0], ["n", 0], ["1", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["c", 0], ["i", 0], ["1", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["c", 0], ["j", 0], ["j", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["lft", 0], ["a", 0], ["i", 0], ["or", 0], ["a", 0], ["i", 0], ["j", 0], ["ans", 0], ["1", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["res", 0], ["i", 0], ["j", 0], ["j", 0], ["1", 0], ["while", 0], ["j", 0], ["n", 0], ["and", 0], ["c", 0], ["j", 0], ["j", 0], ["1", 0], ["else", 0], ["lft", 0], ["a", 0], ["i", 0], ["1", 0], ["res", 0], ["i", 0], ["a", 0], ["i", 0], ["else", 0], ["res", 0], ["i", 0], ["a", 0], ["i", 0], ["print", 0], ["ans", 0], ["print", 0], ["res", 0], ["http", 0], ["codeforces", 0], ["com", 0], ["problemset", 0], ["problem", 0], ["864", 0], ["d", 0], ["17", 0], ["54", 0], ["def", 0], ["make", 0], ["a", 0], ["permutation", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["occ", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["occ", 0], ["a", 0], ["i", 0], ["1", 0], ["missing", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["occ", 0], ["i", 0], ["0", 0], ["mi", 0], ["0", 0], ["dupindexes", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["occ", 0], ["a", 0], ["i", 0], ["2", 0], ["fixednum", 0], ["false", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["occ", 0], ["i", 0], ["1", 0], ["fixednum", 0], ["i", 0], ["true", 0], ["for", 0], ["dup", 0], ["in", 0], ["dupindexes", 0], ["dupnum", 0], ["a", 0], ["dup", 0], ["if", 0], ["occ", 0], ["dupnum", 0], ["1", 0], ["and", 0], ["fixednum", 0], ["dupnum", 0], ["or", 0], ["dupnum", 0], ["missing", 0], ["mi", 0], ["fixednum", 0], ["missing", 0], ["mi", 0], ["true", 0], ["occ", 0], ["missing", 0], ["mi", 0], ["1", 0], ["a", 0], ["dup", 0], ["missing", 0], ["mi", 0], ["mi", 0], ["1", 0], ["occ", 0], ["dupnum", 0], ["1", 0], ["else", 0], ["fixednum", 0], ["dupnum", 0], ["true", 0], ["return", 0], ["mi", 0], ["a", 0], ["c", 0], ["l", 0], ["make", 0], ["a", 0], ["permutation", 0], ["print", 0], ["c", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["print", 0], ["l", 0], ["i", 0], ["end", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["i", 0], ["int", 0], ["a", 0], ["i", 0], ["1", 0], ["occ", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["not", 0], ["in", 0], ["occ", 0], ["occ", 0], ["a", 0], ["i", 0], ["1", 0], ["else", 0], ["occ", 0], ["a", 0], ["i", 0], ["1", 0], ["missing", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["occ", 0], ["missing", 0], ["append", 0], ["i", 0], ["act", 0], ["missing", 0], ["0", 0], ["left", 0], ["1", 0], ["n", 0], ["for", 0], ["pos", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["occ", 0], ["a", 0], ["pos", 0], ["left", 0], ["a", 0], ["pos", 0], ["if", 0], ["missing", 0], ["act", 0], ["missing", 0], ["a", 0], ["pos", 0], ["or", 0], ["left", 0], ["a", 0], ["pos", 0], ["0", 0], ["occ", 0], ["a", 0], ["pos", 0], ["1", 0], ["a", 0], ["pos", 0], ["missing", 0], ["act", 0], ["missing", 0], ["act", 0], ["missing", 0], ["1", 0], ["else", 0], ["left", 0], ["a", 0], ["pos", 0], ["1", 0], ["occ", 0], ["a", 0], ["pos", 0], ["1", 0], ["s", 0], ["for", 0], ["e", 0], ["in", 0], ["a", 0], ["s", 0], ["str", 0], ["e", 0], ["1", 0], ["s", 0], ["print", 0], ["len", 0], ["missing", 0], ["print", 0], ["s", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["def", 0], ["readints", 0], ["return", 0], ["int", 0], ["item", 0], ["for", 0], ["item", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["class", 0], ["solver", 0], ["def", 0], ["main", 0], ["self", 0], ["n", 0], ["readints", 0], ["0", 0], ["a", 0], ["readints", 0], ["c", 0], ["counter", 0], ["a", 0], ["skipped", 0], ["set", 0], ["to", 0], ["be", 0], ["added", 0], ["sorted", 0], ["set", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["set", 0], ["c", 0], ["keys", 0], ["changes", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["to", 0], ["be", 0], ["added", 0], ["changes", 0], ["and", 0], ["a", 0], ["i", 0], ["not", 0], ["in", 0], ["skipped", 0], ["skipped", 0], ["add", 0], ["a", 0], ["i", 0], ["else", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["to", 0], ["be", 0], ["added", 0], ["changes", 0], ["changes", 0], ["1", 0], ["print", 0], ["changes", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["solver", 0], ["main", 0], ["import", 0], ["collections", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["collections", 0], ["counter", 0], ["a", 0], ["res", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["cnt", 0], ["b", 0], ["append", 0], ["i", 0], ["b", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["s", 0], ["set", 0], ["a", 0], ["print", 0], ["len", 0], ["b", 0], ["for", 0], ["v", 0], ["in", 0], ["a", 0], ["if", 0], ["v", 0], ["in", 0], ["cnt", 0], ["and", 0], ["cnt", 0], ["v", 0], ["1", 0], ["t", 0], ["b", 0], ["1", 0], ["if", 0], ["v", 0], ["t", 0], ["and", 0], ["v", 0], ["in", 0], ["s", 0], ["res", 0], ["append", 0], ["v", 0], ["s", 0], ["remove", 0], ["v", 0], ["else", 0], ["res", 0], ["append", 0], ["b", 0], ["pop", 0], ["cnt", 0], ["v", 0], ["1", 0], ["else", 0], ["res", 0], ["append", 0], ["v", 0], ["print", 0], ["join", 0], ["list", 0], ["map", 0], ["str", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["freq", 0], ["seen", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["ch", 0], ["0", 0], ["de", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["not", 0], ["in", 0], ["list", 0], ["freq", 0], ["keys", 0], ["freq", 0], ["a", 0], ["i", 0], ["1", 0], ["else", 0], ["freq", 0], ["a", 0], ["i", 0], ["1", 0], ["ch", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["1", 0], ["not", 0], ["in", 0], ["list", 0], ["freq", 0], ["keys", 0], ["de", 0], ["append", 0], ["i", 0], ["1", 0], ["index", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["freq", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["seen", 0], ["a", 0], ["i", 0], ["or", 0], ["de", 0], ["index", 0], ["a", 0], ["i", 0], ["freq", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["de", 0], ["index", 0], ["index", 0], ["1", 0], ["else", 0], ["seen", 0], ["a", 0], ["i", 0], ["true", 0], ["sol", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["sol", 0], ["str", 0], ["x", 0], ["print", 0], ["str", 0], ["ch", 0], ["n", 0], ["sol", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["counter", 0], ["a", 0], ["b", 0], ["dict", 0], ["for", 0], ["i", 0], ["in", 0], ["c", 0], ["keys", 0], ["b", 0], ["i", 0], ["0", 0], ["d", 0], ["list", 0], ["sorted", 0], ["counter", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["c", 0], ["keys", 0], ["r", 0], ["n", 0], ["len", 0], ["c", 0], ["j", 0], ["0", 0], ["print", 0], ["r", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["j", 0], ["r", 0], ["break", 0], ["if", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["d", 0], ["j", 0], ["a", 0], ["i", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["d", 0], ["j", 0], ["j", 0], ["1", 0], ["else", 0], ["if", 0], ["b", 0], ["a", 0], ["i", 0], ["0", 0], ["c", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["d", 0], ["j", 0], ["j", 0], ["1", 0], ["else", 0], ["b", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sorted", 0], ["a", 0], ["list", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["print", 0], ["0", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["else", 0], ["cnt", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["cnt", 0], ["i", 0], ["1", 0], ["add", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["1", 0], ["to", 0], ["26", 0], ["if", 0], ["cnt", 0], ["i", 0], ["0", 0], ["add", 0], ["append", 0], ["i", 0], ["pos", 0], ["0", 0], ["m", 0], ["cnt", 0], ["0", 0], ["appeared", 0], ["false", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["t", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["if", 0], ["cnt", 0], ["t", 0], ["1", 0], ["if", 0], ["t", 0], ["add", 0], ["pos", 0], ["or", 0], ["appeared", 0], ["t", 0], ["a", 0], ["i", 0], ["add", 0], ["pos", 0], ["pos", 0], ["1", 0], ["m", 0], ["cnt", 0], ["1", 0], ["if", 0], ["pos", 0], ["len", 0], ["add", 0], ["break", 0], ["cnt", 0], ["t", 0], ["1", 0], ["appeared", 0], ["a", 0], ["i", 0], ["true", 0], ["else", 0], ["appeared", 0], ["t", 0], ["true", 0], ["else", 0], ["appeared", 0], ["t", 0], ["true", 0], ["print", 0], ["m", 0], ["cnt", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["a", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["counter", 0], ["counter", 0], ["arr", 0], ["s", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["replacements", 0], ["sorted", 0], ["list", 0], ["s", 0], ["set", 0], ["counter", 0], ["keys", 0], ["r", 0], ["0", 0], ["ans", 0], ["0", 0], ["skipped", 0], ["set", 0], ["for", 0], ["index", 0], ["value", 0], ["in", 0], ["enumerate", 0], ["arr", 0], ["if", 0], ["counter", 0], ["value", 0], ["1", 0], ["if", 0], ["value", 0], ["replacements", 0], ["r", 0], ["or", 0], ["value", 0], ["in", 0], ["skipped", 0], ["arr", 0], ["index", 0], ["replacements", 0], ["r", 0], ["ans", 0], ["1", 0], ["r", 0], ["1", 0], ["counter", 0], ["subtract", 0], ["value", 0], ["else", 0], ["skipped", 0], ["add", 0], ["value", 0], ["print", 0], ["ans", 0], ["print", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are given a bracket sequence $s$ consisting of $n$ opening '(' and closing ')' brackets.\n\nA regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters '1' and '+' between the original characters of the sequence. For example, bracket sequences \"()()\", \"(())\" are regular (the resulting expressions are: \"(1)+(1)\", \"((1+1)+1)\"), and \")(\" and \"(\" are not.\n\nYou can change the type of some bracket $s_i$. It means that if $s_i = $ ')' then you can change it to '(' and vice versa.\n\nYour task is to calculate the number of positions $i$ such that if you change the type of the $i$-th bracket, then the resulting bracket sequence becomes regular.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 10^6$) — the length of the bracket sequence.\n\nThe second line of the input contains the string $s$ consisting of $n$ opening '(' and closing ')' brackets.\n\n\n-----Output-----\n\nPrint one integer — the number of positions $i$ such that if you change the type of the $i$-th bracket, then the resulting bracket sequence becomes regular.\n\n\n-----Examples-----\nInput\n6\n(((())\n\nOutput\n3\n\nInput\n6\n()()()\n\nOutput\n0\n\nInput\n1\n)\n\nOutput\n0\n\nInput\n8\n)))(((((\n\nOutput\n0\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["def ii():\n\treturn int(input())\ndef mi():\n\treturn list(map(int, input().split()))\ndef li():\n\treturn list(mi())\n\nn = ii()\ns = input().strip()\na = [0] * (n + 1)\nm = [0] * (n + 1)\nfor i in range(n):\n\ta[i] = a[i - 1] + (1 if s[i] == '(' else -1)\n\tm[i] = min(m[i - 1], a[i])\n\nans = 0\nmm = a[n - 1]\nfor j in range(n - 1, -1, -1):\n\tmm = min(mm, a[j])\n\tif s[j] == '(':\n\t\tif a[n - 1] == 2 and mm == 2 and m[j - 1] >= 0:\n\t\t\tans += 1\n\telse:\n\t\tif a[n - 1] == -2 and mm == -2 and m[j - 1] >= 0:\n\t\t\tans += 1\n\nprint(ans)\n", "n = int( input() )\nl = list(input() )\ncptMoins = 0\ncptPlus = 0\ncpt = 0\ndead = False\nplusEnd = False\nfor k in range (n):\n\tif(l[k]=='('):\n\t\tcpt+=1\n\t\tcptMoins+=1\n\telse:\n\t\tcpt-=1\n\t\tif(not plusEnd):\n\t\t\tcptPlus+=1\n\tif( cpt < -2): # cas de fin\n\t\tdead = True\n\t\tbreak\n\tif ( cpt < 0): #on doit utiliser un joker avant\n\t\tif(plusEnd or cptPlus==0):#on en a pas ou déjà utilisé\n\t\t\tdead = True\n\t\t\tbreak\n\t\telse:\n\t\t\tplusEnd = True\n\t\t\t#on considère qu'on l'a fait\n\t\t\tcpt +=2\n\n\tif cpt<2:\n\t\tcptMoins =0\nif(dead):\n\tprint(0)\nelse:\n\tif( plusEnd and cpt ==0):\n\t\tprint(cptPlus)\n\telif ( not plusEnd and cpt ==2):\n\t\tprint(cptMoins)\n\telse:\n\t\tprint(0)\n", "n = int(input())\nskobs = input()\ncnt9 = 0\nfl = 0\ncnt0 = 0\ncnt10, cnt19 = 0, 0\nbz = float(\"inf\")\nbz2 = float(\"-inf\")\nfor y in range(n):\n\tif skobs[y] == \"(\":\n\t\tcnt9 += 1\n\telse:\n\t\tcnt0 += 1\n\tif cnt0 - cnt9 > 2:\n\t\tfl = 1\n\tif cnt0 - cnt9 == 1:\n\t\tbz = min(bz, y)\nfor y2 in range(n-1, -1, -1):\n\tif skobs[y2] == \"(\":\n\t\tcnt19 += 1\n\telse:\n\t\tcnt10 += 1\n\tif cnt19 - cnt10 > 2:\n\t\tfl = 1\n\tif cnt19 - cnt10 == 1:\n\t\tbz2 = max(bz2, y2)\nif abs(cnt9-cnt0) != 2 or fl or (bz2 != float(\"-inf\") and bz != float(\"inf\")):\n\tprint(0)\nelif bz == float(\"inf\") and bz2 != float(\"-inf\"):\n\tww = skobs[bz2:]\n\tprint(ww.count(\"(\"))\nelif bz2 == float(\"-inf\") and bz != float(\"inf\"):\n\tww = skobs[:bz+1]\n\tprint(ww.count(\")\"))\n\n\n\n", "_ = input()\ns = list(input())\n\ndef regular(s):\n\tk = 0\n\tfor c in s:\n\t\tif c == '(': k += 1\n\t\telif c == ')': k -= 1\n\t\tif k < 0: return False\n\treturn k == 0\n\ndef regular_sums(s):\n\tk = 0\n\tks = []\n\tfor c in s:\n\t\tif c == '(': k += 1\n\t\telif c == ')': k -= 1\n\t\tks.append(k)\n\treturn ks\n\nsums = regular_sums(s)\n\nif sums[-1] == 2:\n\t# x <= ia\n\tia = 0\n\twhile ia < len(sums) and sums[ia] >= 0:\n\t\tia += 1\n\n\t# x > ib\n\tib = len(s) - 1\n\twhile ib >= 0 and sums[ib] >= 2:\n\t\tib -= 1\n\n\tk = 0\n\tfor i in range(max(ib + 1, 0), min(ia + 1, len(s))):\n\t\tif s[i] == '(':\n\t\t\tk += 1\n\tprint(k)\nelif sums[-1] == -2:\n\t# x <= ia\n\tia = 0\n\twhile ia < len(sums) and sums[ia] >= 0:\n\t\tia += 1\n\n\t# x > ib\n\tib = len(s) - 1\n\twhile ib >= 0 and sums[ib] >= -2:\n\t\tib -= 1\n\n\tk = 0\n\tfor i in range(max(ib + 1, 0), min(ia + 1, len(s))):\n\t\tif s[i] == ')':\n\t\t\tk += 1\n\tprint(k)\nelse:\n\tprint(0)\n", "size = int(input())\nseq = input()\noffsets = []\nif seq[0] == \"(\":\n\toffsets.append(1)\nelse:\n\toffsets.append(-1)\nfor char in seq[1:]:\n\tif char == \"(\":\n\t\toffsets.append(offsets[-1] + 1)\n\telse:\n\t\toffsets.append(offsets[-1] - 1)\nmin_offsets = [offsets[-1]]*size\nfor idx in range(size-2, -1, -1):\n\tmin_offsets[idx] = min(min_offsets[idx+1], offsets[idx])\ncounter = 0\nfor idx, char in enumerate(seq):\n\tif idx >0:\n\t\tif offsets[idx-1] < 0:\n\t\t\tbreak\n\tproposed_offset = -2\n\tif char == \")\":\n\t\tproposed_offset = 2\n\tif min_offsets[idx] + proposed_offset >= 0 and offsets[-1] + proposed_offset == 0:\n\t\tcounter+=1\n#     print(idx)\n# print(offsets)\n# print(min_offsets)\nprint(counter)\n", "\nn = int(input())\ns = input()\np = 0\ngood = [0]*(n+1)\noptions = [0]*(n)\nfor i in range(n):\n\tif s[i] == '(':\n\t\tp += 1\n\t\toptions[i] = p\n\t\tgood[i+1] = good[i]+1\n\telse:\n\t\tp -= 1\n\t\toptions[i] = p\n\t\tgood[i+1] = good[i]\noptions2 = list(reversed(options))\n\nif abs(p) != 2:\n\tprint(0)\nelse:\n\tsmall = min(options)\n\tif p == 2:\n\t\tif small >= 2:\n\t\t\tprint(good[n])\n\t\telif small < 0:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tindex = -1\n\t\t\twhile options[index] >= 2:\n\t\t\t\tindex -= 1\n\t\t\tprint(good[n]-good[index])\n\telif p == -2:\n\t\tif small < -2:\n\t\t\tprint(0)\n\t\telif small == -2:\n\t\t\tx = options.index(-1)\n\t\t\tprint(x+1-good[x+1])\n", "import sys\n\nn=int(input())\nS=input()\n\nL=[0]\nfor s in S:\n\tif s==\"(\":\n\t\tL.append(L[-1]+1)\n\telse:\n\t\tL.append(L[-1]-1)\n\nif L[-1]==2:\n\tif min(L)<0:\n\t\tprint(0)\n\t\treturn\n\tANS=0\n\n\tfor j in range(n,-1,-1):\n\t\tif L[j]<2:\n\t\t\t#print(j)\n\t\t\tbreak\n\n\tfor k in range(j,n):\n\t\tif S[k]==\"(\":\n\t\t\tANS+=1\n\n\tprint(ANS)\n\nelif L[-1]==-2:\n\tif min(L)<-2:\n\t\tprint(0)\n\t\treturn\n\tANS=0\n\n\tfor j in range(1,n+1):\n\t\tif L[j]<0:\n\t\t\t#print(j)\n\t\t\tbreak\n\n\tfor k in range(j-1,-1,-1):\n\t\tif S[k]==\")\":\n\t\t\tANS+=1\n\n\tprint(ANS)\n\nelse:\n\tprint(0)\n", "def read(type = 1):\n\tif type:\n\t\tfile = open(\"input.dat\", \"r\")\n\t\tn = int(file.readline())\n\t\ta = file.readline()\n\t\tfile.close()\n\telse:\n\t\tn = int(input().strip())\n\t\ta = input().strip()\n\treturn n, a\n\n\ndef solve():\n\tsol = 0\n\tvs = []\n\tv = 0\n\tfor i in range(n):\n\t\tif a[i] == \"(\":\n\t\t\tv += 1\n\t\telse:\n\t\t\tv -= 1\n\t\tvs.append(v)\n\tmins = [10000000 for i in range(n)]\n\tlast = n\n\tfor i in range(n):\n\t\tif i:\n\t\t\tmins[n-i-1] = min(vs[n-i-1], mins[n-i])\n\t\telse:\n\t\t\tmins[n-i-1] = vs[n-i-1]\n\t\tif vs[n-i-1] < 0:\n\t\t\tlast = n-i-1\n\tfor i in range(n):\n\t\tif a[i] == \"(\" and vs[n-1] == 2:\n\t\t\tif i:\n\t\t\t\tif mins[i] >= 2:\n\t\t\t\t\tsol += 1\n\t\tif a[i] == \")\" and vs[n-1] == -2:\n\t\t\tif i != n-1:\n\t\t\t\tif mins[i] >= -2:\n\t\t\t\t\tsol += 1\n\t\tif i == last:\n\t\t\tbreak\n\treturn sol\n\n\nn, a = read(0)\nsol = solve()\nprint(sol)\n", "#from random import random, randint\nfrom sys import stdout, stdin\nimport math\n\n#n, k = map(int, input().split())\nn = int(input())\ns = input()\n\nzuor = {'(':1, ')':-1}\narr = [zuor[c] for c in s]\nobpos = [z == 1 for z in arr]\n\nsuma, sume = [], []\nakt = 0\nfor z in arr:\n\takt += z\n\tsuma.append(akt)\nakt = 0\nfor z in reversed(arr):\n\takt -= z\n\tsume.append(akt)\nsume = list(reversed(sume))\n\nsumme = sum(arr)\n\nif min(suma) < -2 or min(sume) < -2:\n\tprint(0)\nelif summe==2:\n\tif min(suma)<0:\n\t\tprint(0)\n\telse:\n\t\tletzte1 = len(suma) - 1 - suma[::-1].index(1)\n\t\tok = [i>letzte1 for i in range(n)]\n\t\tprint(sum((b1 and b2 for b1, b2 in zip(ok, obpos))))\nelif summe==-2:\n\tif min(sume)<0:\n\t\tprint(0)\n\telse:\n\t\terste1 = sume.index(1)\n\t\tok = [i<erste1 for i in range(n)]\n\t\tprint(sum((b1 and not b2 for b1, b2 in zip(ok, obpos))))\nelse:\n\tprint(0)\n\n\n\n\n\n\n\n", "n=int(input())\ns=input()\nans = 0\ns1,s2=[],[]\nf1=[1]*n\nf2=[1]*n\nfor i in range(n):\n\ts1.append([0,0])\n\ts2.append([0,0])\n#s1[0][0]=8\n#print(s1,s2)\nif s[0]=='(':\n\ts1[0][0]+=1\nelse:\n\ts1[0][1]+=1\n#print(s1)\nfor i in range(1,n):\n\ts1[i][0]=s1[i-1][0]\n\ts1[i][1]=s1[i-1][1]\n\tif s[i]=='(':\n\t\ts1[i][0]+=1\n\telse:\n\t\ts1[i][1]+=1\n\t#print(s1)\nif s[-1]=='(':\n\ts2[-1][0]+=1\nelse:\n\ts2[-1][1]+=1\n#print(s2)\nfor i in range(n-2,-1,-1):\n\ts2[i][0]=s2[i+1][0]\n\ts2[i][1]=s2[i+1][1]\n\tif s[i]=='(':\n\t\ts2[i][0]+=1\n\telse:\n\t\ts2[i][1]+=1\n#print(s2)\nif s[0]==')':\n\tf1[0]=0\nfor i in range(1,n):\n\tif f1[i-1]==1 and s1[i][1]<=s1[i][0]:\n\t\tf1[i]=1\n\telse:\n\t\tf1[i]=0\nif s[-1]=='(':\n\tf2[-1]=0\nfor i in range(n-2,-1,-1):\n\tif f2[i+1]==1 and s2[i][0]<=s2[i][1]:\n\t\tf2[i]=1\n\telse:\n\t\tf2[i]=0\nfor i in range(n):\n\tt1=s1[-1][0]\n\tt2=s1[-1][1]\n\tif i%2==1:\n\t\tif i+1<n:\n\t\t\tp1=s2[i+1][0]\n\t\t\tp2=s2[i+1][1]\n\t\t\tif p1>p2 or f2[i+1]==0:\n\t\t\t\tcontinue\n\t\tp1=s1[i][0]\n\t\tp2=s1[i][1]\n\t\tq1=s2[i][0]\n\t\tq2=s2[i][1]\n\t\tif s[i]=='(':\n\t\t\tp1-=1\n\t\t\tp2+=1\n\t\t\tt1-=1\n\t\t\tt2+=1\n\t\t\tq1-=1\n\t\t\tq2+=1\n\t\telse:\n\t\t\tp2-=1\n\t\t\tp1+=1\n\t\t\tt1+=1\n\t\t\tt2-=1\n\t\t\tq2-=1\n\t\t\tq1+=1\n\t\tif p2>p1:\n\t\t\tcontinue\n\t\tif q1>q2:\n\t\t\tcontinue\n\t\tif i-1>=0 and f1[i-1]==0:\n\t\t\tcontinue\n\t\tif t1==t2:\n\t\t\tans+=1\n\telse:\n\t\tif i-1>=0:\n\t\t\tp1=s1[i-1][0]\n\t\t\tp2=s1[i-1][1]\n\t\t\tif p2> p1 or f1[i-1]==0:\n\t\t\t\tcontinue\n\t\t#print(\"CHECK\")\n\t\tp1=s2[i][0]\n\t\tp2=s2[i][1]\n\t\tq1=s1[i][0]\n\t\tq2=s1[i][1]\n\t\tif s[i]=='(':\n\t\t\tp1-=1\n\t\t\tp2+=1\n\t\t\tt1-=1\n\t\t\tt2+=1\n\t\t\tq1-=1\n\t\t\tq2+=1\n\t\telse:\n\t\t\tp1+=1\n\t\t\tp2-=1\n\t\t\tt1+=1\n\t\t\tt2-=1\n\t\t\tq1+=1\n\t\t\tq2-=1\n\t\tif p2<p1:\n\t\t\tcontinue\n\t\tif q1<q2:\n\t\t\tcontinue\n\t\tif i+1<n and f2[i+1]==0:\n\t\t\tcontinue\n\t\tif t1==t2:\n\t\t\tans+=1\n\t#print(i,ans)\nprint(ans)\n", "input()\nline = input()\nwasm = -1\nlast0 = 0\nlast1 = -1\ncurs = 0\nerr = False\nfor i in range(len(line)):\n\tif line[i]=='(':\n\t\tcurs+=1\n\telse:\n\t\tcurs-=1\n\tif curs == 0:\n\t\tlast0=i\n\tif curs == 1:\n\t\tlast1=i\n\tif curs < 0:\n\t\tif wasm == -1:\n\t\t\twasm=i\n\t\tif curs < -2:\n\t\t\terr = True\n\t\t\tbreak\nif err:\n\tprint(0)\nelif wasm == -1:\n\tif curs != 2:\n\t\tprint(0)\n\telse:\n\t\tprint(int((len(line)-max(last0,last1))/2))\nelse:\n\tif curs != -2:\n\t\tprint(0)\n\telse:\n\t\tprint(int(wasm/2) + 1)\n", "input()\nline = input()\nwasm = -1\nlast0 = 0\nlast1 = -1\ncurs = 0\nerr = False\nfor i in range(len(line)):\n\tif line[i]=='(':\n\t\tcurs+=1\n\telse:\n\t\tcurs-=1\n\tif curs == 0:\n\t\tlast0=i\n\tif curs == 1:\n\t\tlast1=i\n\tif curs < 0:\n\t\tif wasm == -1:\n\t\t\twasm=i\n\t\tif curs < -2:\n\t\t\terr = True\n\t\t\tbreak\nif err:\n\tprint(0)\nelif wasm == -1:\n\tif curs != 2:\n\t\tprint(0)\n\telse:\n\t\tprint(int((len(line)-max(last0,last1))/2))\nelse:\n\tif curs != -2:\n\t\tprint(0)\n\telse:\n\t\tprint(int(wasm/2) + 1)\n", "n = int(input())\ns = input()\n\ndef sol(n, S):\n\tL = [0]\n\tfor s in S:\n\t\tif s == \"(\":\n\t\t\tL.append(L[-1] + 1)\n\t\telse:\n\t\t\tL.append(L[-1] - 1)\n\tANS = 0\n\tL = L[1:]\n\tif L[-1] == 2:\n\t\tif min(L) < 0:\n\t\t\treturn 0\n\t\tfor j in range(n-1, -1, -1):\n\t\t\tif L[j] < 2:\n\t\t\t\tbreak\n\t\tfor k in range(j+1, n, 1):\n\t\t\tif S[k] == '(':\n\t\t\t\tANS += 1\n\telif L[-1] == -2:\n\t\tif min(L) < -2:\n\t\t\treturn 0\n\t\tfor j in range(n):\n\t\t\tif L[j] < 0:\n\t\t\t\tbreak\n\t\tfor k in range(j, -1, -1):\n\t\t\tif S[k] == ')':\n\t\t\t\tANS += 1\n\telse:\n\t\tANS = 0\n\treturn ANS\n\nprint(sol(n, s))\n", "n = int(input())\nstr = input()\nbalance = 0\nfor x in str:\n\tif x == '(':\n\t\tbalance += 1\n\telse:\n\t\tbalance -= 1\n\npre = []\npre_balance = 0\nfor x in str:\n\tif x == '(':\n\t\tpre_balance += 1\n\telse:\n\t\tpre_balance -= 1\n\tpre.append(pre_balance)\n\nsuf = []\nlowest = []\nsuf_balance = 0\nhigh = 0\nlow = 0\nfor x in reversed(str):\n\tsuf.append(suf_balance)\n\thigh = max(high, suf_balance)\n\tlow = suf_balance - high\n\tlowest.append(low)\n\tif x == '(':\n\t\tsuf_balance += 1\n\telse:\n\t\tsuf_balance -= 1\n\t\nsuf.reverse()\nlowest.reverse()\nans = 0\n\nif balance == 2:\n\tis_bad = False\n\tfor i, x in enumerate(str):\n\t\tif is_bad:\n\t\t\tbreak\n\t\tif x == '(':\n\t\t\tnew_pre = pre[i] - 2\n\t\t\tif new_pre >= 0 and new_pre == -suf[i] and new_pre >= -lowest[i]:\n\t\t\t\tif i + 1 == n or str[-1] != '(':\n\t\t\t\t\tans += 1\n\t\tif pre[i] < 0:\n\t\t\tis_bad = True\nelif balance == -2:\n\tis_bad = False\n\tfor i, x in enumerate(str):\n\t\tif is_bad:\n\t\t\tbreak\n\t\tif x == ')':\n\t\t\tnew_pre = pre[i] + 2\n\t\t\tif new_pre >= 0 and new_pre == -suf[i] and new_pre >= -lowest[i]:\n\t\t\t\tif i + 1 == n or str[-1] != '(':\n\t\t\t\t\tans += 1\n\t\tif pre[i] < 0:\n\t\t\tis_bad = True\nprint(ans)\n", "n=int(input())\ns=input()\no=0\nc=0\nn=len(s)\nfor i in range(n):\n\tif s[i]=='(':\n\t\to+=1\n\telse:\n\t\tc+=1\nif n%2!=0:\n\tprint(0)\n\tquit()\n\nif abs(o-c)>2:\n\tprint(0)\n\tquit()\nt=0\ncount=0\nans=0\n\n\nfor i in range(n):\n\tif s[i]=='(':\n\t\tcount+=1\n\telse:\n\t\tcount-=1\n\tif count<-2:\n\t\tt=1\nif t==1:\n\tprint(0)\n\tquit()\n\nind=n-1\ncount=0\nif o>c:\n\tind=-1\n\tfor i in range(n):\n\t\tif s[i]=='(':\n\t\t\tcount+=1\n\t\telse:\n\t\t\tcount-=1\n\t\tif count<0:\n\t\t\tprint(0)\n\t\t\tquit()\n\t\tif count<2:\n\t\t\tind=i\n\n\tfor i in range(ind+1,n):\n\t\tif count>0 and s[i]=='(':\n\t\t\tans+=1\n\t\t\t\n\t\tif s[i]=='(':\n\t\t\tcount+=1\n\t\telse:\n\t\t\tcount-=1\n\t\tif count<0:\n\t\t\tt=1\nelif c>o:\n\tfor i in range(n):\n\t\tif s[i]=='(':\n\t\t\tcount+=1\n\t\telse:\n\t\t\tcount-=1\n\t\tif count<0:\n\t\t\tind=i\n\t\t\tbreak\n\t\t\n\tfor i in range(ind+1):\n\t\tif s[i]==')':\n\t\t\tans+=1\nelse:\n\tprint(0)\n\tquit()\nprint(ans)\n\t\t\n", "n = int(input())\ns = input().strip()\na = [0] * (n + 1)\nm = [0] * (n + 1)\nfor i in range(n):\n\ta[i] = a[i-1] + (1 if s[i] == \"(\" else -1)\n\tm[i] = min(m[i-1], a[i])\nans = 0\nmm = a[n - 1]\nfor j in range(n - 1, -1, -1):\n\tmm = min(mm, a[j])\n\tif s[j] == \"(\":\n\t\tans += a[n - 1] == 2 and mm == 2   and m[j - 1] >= 0\n\telse:\n\t\tans += a[n - 1] == -2 and mm == -2 and m[j - 1] >= 0\n\n\n\nprint(ans)\n", "def main():\n\tn = int(input())\n\ts = ' ' + input()\n\ta = [0] * (n + 1)\n\tfor i in range(1, n + 1):\n\t\tif s[i] == '(':\n\t\t\ta[i] = a[i - 1] + 1\n\t\telse:\n\t\t\ta[i] = a[i - 1] - 1\n\t# print(a) # debug\n\tif a[n] != 2 and a[n] != -2:\n\t\tprint(0)\n\t\treturn\n\tif min(a) < -2:\n\t\tprint(0)\n\t\treturn\n\tif a[n] == 2:\n\t\tif min(a) < 0:\n\t\t\tprint(0)\n\t\t\treturn\n\t\tfor i in range(n, -1, -1):\n\t\t\tif a[i] == 1:\n\t\t\t\tprint(s[(i + 1):].count('('))\n\t\t\t\tbreak\n\telse:\n\t\tfor i in range(n):\n\t\t\tif a[i] == -1:\n\t\t\t\tprint(s[:i + 1].count(')'))\n\t\t\t\tbreak\n\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n=int(input())\na=list(input())\nk=0\nst=[]\nfor i in range(n):\n\tif a[i]==')' and len(st)>0 and st[-1][0]=='(':\n\t\tk+=2\n\t\tst.pop()\n\telse:\n\t\tst.append([a[i],i+1])\nif n%2==1 or len(st)==0:\n\tprint(0)\nelif len(st)==2 and st[0][0]==st[1][0]:\n\tif st[0][0]=='(':\n\t\tprint((n-st[1][1])//2+1)\n\telse:\n\t\tprint(st[0][1]//2+1)\nelse:\n\tprint(0)\n", "n=int(input())\ns=input().strip()\na=[0]*(n+5)\na2=[0]*(n+5)\nmn=[0]*(n+5)\nmn2=[0]*(n+5)\nfor i in range(1,n+1,1):\n\tif s[i-1]=='(':\n\t\ta[i]=a[i-1]+1\n\telse:\n\t\ta[i]=a[i-1]-1\n\tmn[i]=min(mn[i-1],a[i])\n\t\nfor i in range(n,0,-1):\n\tif s[i-1]==')':\n\t\ta2[i]=a2[i+1]+1\n\telse:\n\t\ta2[i]=a2[i+1]-1\n\tmn2[i]=min(mn2[i+1],a2[i])\nans=0\nif a[n]!=2 and a[n]!=-2:\n\tprint((0));\n\treturn\nfor i in range(1,n+1,1):\n\tif s[i-1]=='(' and a[n]==2:\n\t\tif mn[i-1]>=0 and mn2[i+1]>=0 and a[i-1]>=1:\n\t\t\tans=ans+1\n\telif s[i-1]==')' and a[n]==-2:\n\t\tif mn[i-1]>=0 and mn2[i+1]>=0 and a2[i+1]>=1:\n\t\t\tans=ans+1\n\t\t\nprint(ans)\n\t\n", "n = int(input());\ns = list(input())\nstk = []\n\nfor i in range(n):\n\tif s[i] == ')' and len(stk) > 0 and stk[-1][0] == '(':\n\t\tstk.pop()\n\telse:\n\t\tstk.append([s[i], i + 1])\n\nif n % 2 == 1 or len(stk) == 0:\n\tprint(0)\nelif len(stk) == 2 and stk[0][0] == stk[1][0]:\n\tif stk[0][0] == '(':\n\t\tprint((n - stk[1][1]) // 2 + 1)\n\telse:\n\t\tprint(stk[0][1] // 2 + 1)\nelse:\n\tprint(0)\n", "n = int(input())\nS = input()\n\ndef solve(s, counts):\n\topenCount = 0\n\tcloseCount = 0\n\tposCount = 0\n\tif n % 2 == 1:\n\t\treturn posCount\n\tfor i in range(n):\n\t\tif s[i] == '(':\n\t\t\topenCount += 1\n\t\telse:\n\t\t\tcloseCount += 1\n\t\tif closeCount - openCount > 2:\n\t\t\treturn posCount\n\t\telse:\n\t\t\tcounts.append([openCount, closeCount])\n\tif abs(openCount-closeCount) == 2:\n\t\tif openCount > closeCount:\n\t\t\ts = s[::-1]\n\t\t\ts = ['(' if c == ')' else ')' for c in s]\n\t\t\tcounts = []\n\t\t\topenCount = 0\n\t\t\tcloseCount = 0\n\t\t\tfor i in range(n):\n\t\t\t\tif s[i] == '(':\n\t\t\t\t\topenCount += 1\n\t\t\t\telse:\n\t\t\t\t\tcloseCount += 1\n\t\t\t\tif closeCount - openCount > 2:\n\t\t\t\t\treturn posCount\n\t\t\t\telse:\n\t\t\t\t\tcounts.append([openCount, closeCount])\n\t\tfor i in range(n):\n\t\t\tif counts[i][1] - counts[i][0] < 2 and s[i] == ')':\n\t\t\t\tposCount += 1\n\t\t\tif counts[i][1] > counts[i][0]:\n\t\t\t\tbreak\n\t\treturn posCount\n\telse:\n\t\treturn posCount\n\nprint(solve(S,[]))\n", "n=int(input())\ns=input()\na=[]\nfor i in s:\n\tif i=='(':\n\t\ta.append(-1)\n\telse:\n\t\ta.append(1)\n#print (a)\nb=[0]*(n);b[0]=a[0]\nfor i in range(1,n):\n\tb[i]=a[i]+b[i-1]\ne=[];c=d=0\nfor i in range(n-1,-1,-1):\n\tif b[i]>=-1:\n\t\tc+=1\n\tif b[i]>=3:\n\t\td+=1\n\te.append((c,d))\ne=e[::-1];g=0;ans=0\nfor i in range(n):\n\tif a[i]==-1:\n\t\tif e[i][0]==0 and (b[-1]+2)==0 and g==0:\n\t\t\tans+=1\n\telse:\n\t\tif e[i][1]==0 and (b[-1]-2)==0 and g==0:\n\t\t\tans+=1\n\tif b[i]>0:\n\t\tg+=1\n#print (b)\n#print(e)\nprint (ans)\n", "def isregular(s):\n\tls=0\n\trs=0\n\tfor char in s:\n\t\tif char==\"(\":\n\t\t\tls+=1\n\t\telse:\n\t\t\trs+=1\n\t\tif rs>ls:\n\t\t\treturn False\n\tif ls==rs:\n\t\treturn True\n\treturn False\nn=int(input())\ns=input()\nif n%2==1:\n\tprint(0)\nelse:\n\ta=s.count(\"(\")\n\tb=n-a\n\tdiff=[0]\n\tfor i in range(n):\n\t\tif s[i]==\"(\":\n\t\t\tdiff.append(diff[-1]+1)\n\t\telse:\n\t\t\tdiff.append(diff[-1]-1)\n\tif a==b+2:\n\t\tif -1 in diff:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tbackdiff=diff[::-1]\n\t\t\tlast=backdiff.index(1)\n\t\t\tprint(s[-last:].count(\"(\"))\n\telif b==a+2:\n\t\tif -3 in diff:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tfirst=diff.index(-1)\n\t\t\tprint(s[:first].count(\")\"))\n\telse:\n\t\tprint(0)\n", "# Created by nikita at 30/12/2018\n\nn = int(input())\ns = input()\n\nprefBal = [0] * n\nprefBal.append(0)\nprefCan = [False] * n\nprefCan.append(True)\nsuffBal = [0] * n\nsuffBal.append(0)\nsuffCan = [False] * n\nsuffCan.append(True)\n\ncurrBal = 0\ncurrCan = True\nfor i in range(n):\n\tif s[i] == '(':\n\t\tprefBal[i] = currBal + 1\n\telse:\n\t\tprefBal[i] = currBal - 1\n\tcurrBal = prefBal[i]\n\tprefCan[i] = currCan and (prefBal[i] >= 0)\n\tcurrCan = prefCan[i]\n\ncurrBal = 0\ncurrCan = True\nfor i in range(n-1, -1,- 1):\n\tif s[i] == ')':\n\t\tsuffBal[i] = currBal + 1\n\telse:\n\t\tsuffBal[i] = currBal - 1\n\tcurrBal = suffBal[i]\n\tsuffCan[i] = currCan and (suffBal[i] >= 0)\n\tcurrCan = suffCan[i]\n\n# print(prefBal)\n# print(prefCan)\n# print(suffBal)\n# print(suffCan)\n\nans = 0\nfor i in range(n):\n\tif s[i] == '(':\n\t\tif prefCan[i-1] and suffCan[i+1] and prefBal[i-1] - 1 - suffBal[i+1] == 0:\n\t\t\tans += 1\n\tif s[i] == ')':\n\t\tif prefCan[i-1] and suffCan[i+1] and prefBal[i-1] + 1 - suffBal[i+1] == 0:\n\t\t\tans += 1\n\nprint(ans)\n"], "id": "id7500"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7500", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["bracket", 0], ["sequence", 0], ["s", 0], ["consisting", 0], ["of", 0], ["n", 0], ["opening", 0], ["and", 0], ["closing", 0], ["brackets", 0], ["a", 0], ["regular", 0], ["bracket", 6], ["sequence", 6], ["is", 6], ["a", 6], ["bracket", 6], ["sequence", 6], ["that", 4], ["can", 4], ["be", 4], ["transformed", 4], ["into", 4], ["a", 4], ["correct", 4], ["arithmetic", 4], ["expression", 4], ["by", 4], ["inserting", 4], ["characters", 4], ["1", 4], ["and", 4], ["between", 4], ["the", 4], ["original", 4], ["characters", 4], ["of", 4], ["the", 4], ["sequence", 4], ["for", 4], ["example", 4], ["bracket", 4], ["sequences", 4], ["are", 4], ["regular", 4], ["the", 4], ["resulting", 0], ["expressions", 0], ["are", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["1", 0], ["and", 0], ["and", 0], ["are", 0], ["not", 0], ["you", 0], ["can", 0], ["change", 0], ["the", 0], ["type", 0], ["of", 0], ["some", 0], ["bracket", 0], ["s", 0], ["i", 0], ["it", 0], ["means", 0], ["that", 0], ["if", 0], ["s", 0], ["i", 0], ["then", 0], ["you", 0], ["can", 0], ["change", 0], ["it", 0], ["to", 0], ["and", 0], ["vice", 0], ["versa", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["calculate", 0], ["the", 0], ["number", 0], ["of", 0], ["positions", 0], ["i", 0], ["such", 0], ["that", 0], ["if", 0], ["you", 0], ["change", 0], ["the", 0], ["type", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["bracket", 0], ["then", 0], ["the", 0], ["resulting", 0], ["bracket", 0], ["sequence", 0], ["becomes", 0], ["regular", 0], ["input", 0], ["the", 3], ["first", 3], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["one", 0], ["integer", 0], ["n", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["10", 0], ["6", 0], ["—", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["bracket", 0], ["sequence", 0], ["the", 1], ["second", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["the", 0], ["string", 0], ["s", 0], ["consisting", 0], ["of", 0], ["n", 0], ["opening", 0], ["and", 0], ["closing", 0], ["brackets", 0], ["output", 0], ["print", 0], ["one", 0], ["integer", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["positions", 0], ["i", 0], ["such", 0], ["that", 0], ["if", 0], ["you", 0], ["change", 0], ["the", 0], ["type", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["bracket", 0], ["then", 0], ["the", 0], ["resulting", 0], ["bracket", 0], ["sequence", 0], ["becomes", 0], ["regular", 0], ["examples", 0], ["input", 0], ["6", 0], ["output", 0], ["3", 0], ["input", 0], ["6", 0], ["output", 0], ["0", 0], ["input", 0], ["1", 0], ["output", 0], ["0", 0], ["input", 0], ["8", 0], ["output", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.18316831683168316, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.04785478547854786, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.3411214953271028, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.13395638629283493, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.18316831683168316, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.04785478547854786, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.3411214953271028, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.13395638629283493, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["def", 0], ["ii", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["mi", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["li", 0], ["return", 0], ["list", 0], ["mi", 0], ["n", 0], ["ii", 0], ["s", 0], ["input", 0], ["strip", 0], ["a", 0], ["0", 0], ["n", 0], ["1", 0], ["m", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["else", 0], ["1", 0], ["m", 0], ["i", 0], ["min", 0], ["m", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["ans", 0], ["0", 0], ["mm", 0], ["a", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["mm", 0], ["min", 0], ["mm", 0], ["a", 0], ["j", 0], ["if", 0], ["s", 0], ["j", 0], ["if", 0], ["a", 0], ["n", 0], ["1", 0], ["2", 0], ["and", 0], ["mm", 0], ["2", 0], ["and", 0], ["m", 0], ["j", 0], ["1", 0], ["0", 0], ["ans", 0], ["1", 0], ["else", 0], ["if", 0], ["a", 0], ["n", 0], ["1", 0], ["2", 0], ["and", 0], ["mm", 0], ["2", 0], ["and", 0], ["m", 0], ["j", 0], ["1", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["input", 0], ["cptmoins", 0], ["0", 0], ["cptplus", 0], ["0", 0], ["cpt", 0], ["0", 0], ["dead", 0], ["false", 0], ["plusend", 0], ["false", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l", 0], ["k", 0], ["cpt", 0], ["1", 0], ["cptmoins", 0], ["1", 0], ["else", 0], ["cpt", 0], ["1", 0], ["if", 0], ["not", 0], ["plusend", 0], ["cptplus", 0], ["1", 0], ["if", 0], ["cpt", 0], ["2", 0], ["cas", 0], ["de", 0], ["fin", 0], ["dead", 0], ["true", 0], ["break", 0], ["if", 0], ["cpt", 0], ["0", 0], ["on", 0], ["doit", 0], ["utiliser", 0], ["un", 0], ["joker", 0], ["avant", 0], ["if", 0], ["plusend", 0], ["or", 0], ["cptplus", 0], ["0", 0], ["on", 0], ["en", 0], ["a", 0], ["pas", 0], ["ou", 0], ["déjà", 0], ["utilisé", 0], ["dead", 0], ["true", 0], ["break", 0], ["else", 0], ["plusend", 0], ["true", 0], ["on", 0], ["considère", 0], ["qu", 0], ["on", 0], ["l", 0], ["a", 0], ["fait", 0], ["cpt", 0], ["2", 0], ["if", 0], ["cpt", 0], ["2", 0], ["cptmoins", 0], ["0", 0], ["if", 0], ["dead", 0], ["print", 0], ["0", 0], ["else", 0], ["if", 0], ["plusend", 0], ["and", 0], ["cpt", 0], ["0", 0], ["print", 0], ["cptplus", 0], ["elif", 0], ["not", 0], ["plusend", 0], ["and", 0], ["cpt", 0], ["2", 0], ["print", 0], ["cptmoins", 0], ["else", 0], ["print", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["skobs", 0], ["input", 0], ["cnt9", 0], ["0", 0], ["fl", 0], ["0", 0], ["cnt0", 0], ["0", 0], ["cnt10", 0], ["cnt19", 0], ["0", 0], ["0", 0], ["bz", 0], ["float", 0], ["inf", 0], ["bz2", 0], ["float", 0], ["inf", 0], ["for", 0], ["y", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["skobs", 0], ["y", 0], ["cnt9", 0], ["1", 0], ["else", 0], ["cnt0", 0], ["1", 0], ["if", 0], ["cnt0", 0], ["cnt9", 0], ["2", 0], ["fl", 0], ["1", 0], ["if", 0], ["cnt0", 0], ["cnt9", 0], ["1", 0], ["bz", 0], ["min", 0], ["bz", 0], ["y", 0], ["for", 0], ["y2", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["skobs", 0], ["y2", 0], ["cnt19", 0], ["1", 0], ["else", 0], ["cnt10", 0], ["1", 0], ["if", 0], ["cnt19", 0], ["cnt10", 0], ["2", 0], ["fl", 0], ["1", 0], ["if", 0], ["cnt19", 0], ["cnt10", 0], ["1", 0], ["bz2", 0], ["max", 0], ["bz2", 0], ["y2", 0], ["if", 0], ["abs", 0], ["cnt9", 0], ["cnt0", 0], ["2", 0], ["or", 0], ["fl", 0], ["or", 0], ["bz2", 0], ["float", 0], ["inf", 0], ["and", 0], ["bz", 0], ["float", 0], ["inf", 0], ["print", 0], ["0", 0], ["elif", 0], ["bz", 0], ["float", 0], ["inf", 0], ["and", 0], ["bz2", 0], ["float", 0], ["inf", 0], ["ww", 0], ["skobs", 0], ["bz2", 0], ["print", 0], ["ww", 0], ["count", 0], ["elif", 0], ["bz2", 0], ["float", 0], ["inf", 0], ["and", 0], ["bz", 0], ["float", 0], ["inf", 0], ["ww", 0], ["skobs", 0], ["bz", 0], ["1", 0], ["print", 0], ["ww", 0], ["count", 0], ["input", 0], ["s", 0], ["list", 0], ["input", 0], ["def", 0], ["regular", 0], ["s", 0], ["k", 0], ["0", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["c", 0], ["k", 0], ["1", 0], ["elif", 0], ["c", 0], ["k", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["return", 0], ["false", 0], ["return", 0], ["k", 0], ["0", 0], ["def", 0], ["regular", 0], ["sums", 0], ["s", 0], ["k", 0], ["0", 0], ["ks", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["if", 0], ["c", 0], ["k", 0], ["1", 0], ["elif", 0], ["c", 0], ["k", 0], ["1", 0], ["ks", 0], ["append", 0], ["k", 0], ["return", 0], ["ks", 0], ["sums", 0], ["regular", 0], ["sums", 0], ["s", 0], ["if", 0], ["sums", 0], ["1", 0], ["2", 0], ["x", 0], ["ia", 0], ["ia", 0], ["0", 0], ["while", 0], ["ia", 0], ["len", 0], ["sums", 0], ["and", 0], ["sums", 0], ["ia", 0], ["0", 0], ["ia", 0], ["1", 0], ["x", 0], ["ib", 0], ["ib", 0], ["len", 0], ["s", 0], ["1", 0], ["while", 0], ["ib", 0], ["0", 0], ["and", 0], ["sums", 0], ["ib", 0], ["2", 0], ["ib", 0], ["1", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["max", 0], ["ib", 0], ["1", 0], ["0", 0], ["min", 0], ["ia", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["k", 0], ["1", 0], ["print", 0], ["k", 0], ["elif", 0], ["sums", 0], ["1", 0], ["2", 0], ["x", 0], ["ia", 0], ["ia", 0], ["0", 0], ["while", 0], ["ia", 0], ["len", 0], ["sums", 0], ["and", 0], ["sums", 0], ["ia", 0], ["0", 0], ["ia", 0], ["1", 0], ["x", 0], ["ib", 0], ["ib", 0], ["len", 0], ["s", 0], ["1", 0], ["while", 0], ["ib", 0], ["0", 0], ["and", 0], ["sums", 0], ["ib", 0], ["2", 0], ["ib", 0], ["1", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["max", 0], ["ib", 0], ["1", 0], ["0", 0], ["min", 0], ["ia", 0], ["1", 0], ["len", 0], ["s", 0], ["if", 0], ["s", 0], ["i", 0], ["k", 0], ["1", 0], ["print", 0], ["k", 0], ["else", 0], ["print", 0], ["0", 0], ["size", 0], ["int", 0], ["input", 0], ["seq", 0], ["input", 0], ["offsets", 0], ["if", 0], ["seq", 0], ["0", 0], ["offsets", 0], ["append", 0], ["1", 0], ["else", 0], ["offsets", 0], ["append", 0], ["1", 0], ["for", 0], ["char", 0], ["in", 0], ["seq", 0], ["1", 0], ["if", 0], ["char", 0], ["offsets", 0], ["append", 0], ["offsets", 0], ["1", 0], ["1", 0], ["else", 0], ["offsets", 0], ["append", 0], ["offsets", 0], ["1", 0], ["1", 0], ["min", 0], ["offsets", 0], ["offsets", 0], ["1", 0], ["size", 0], ["for", 0], ["idx", 0], ["in", 0], ["range", 0], ["size", 0], ["2", 0], ["1", 0], ["1", 0], ["min", 0], ["offsets", 0], ["idx", 0], ["min", 0], ["min", 0], ["offsets", 0], ["idx", 0], ["1", 0], ["offsets", 0], ["idx", 0], ["counter", 0], ["0", 0], ["for", 0], ["idx", 0], ["char", 0], ["in", 0], ["enumerate", 0], ["seq", 0], ["if", 0], ["idx", 0], ["0", 0], ["if", 0], ["offsets", 0], ["idx", 0], ["1", 0], ["0", 0], ["break", 0], ["proposed", 0], ["offset", 0], ["2", 0], ["if", 0], ["char", 0], ["proposed", 0], ["offset", 0], ["2", 0], ["if", 0], ["min", 0], ["offsets", 0], ["idx", 0], ["proposed", 0], ["offset", 0], ["0", 0], ["and", 0], ["offsets", 0], ["1", 0], ["proposed", 0], ["offset", 0], ["0", 0], ["counter", 0], ["1", 0], ["print", 0], ["idx", 0], ["print", 0], ["offsets", 0], ["print", 0], ["min", 0], ["offsets", 0], ["print", 0], ["counter", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["p", 0], ["0", 0], ["good", 0], ["0", 0], ["n", 0], ["1", 0], ["options", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["p", 0], ["1", 0], ["options", 0], ["i", 0], ["p", 0], ["good", 0], ["i", 0], ["1", 0], ["good", 0], ["i", 0], ["1", 0], ["else", 0], ["p", 0], ["1", 0], ["options", 0], ["i", 0], ["p", 0], ["good", 0], ["i", 0], ["1", 0], ["good", 0], ["i", 0], ["options2", 0], ["list", 0], ["reversed", 0], ["options", 0], ["if", 0], ["abs", 0], ["p", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["small", 0], ["min", 0], ["options", 0], ["if", 0], ["p", 0], ["2", 0], ["if", 0], ["small", 0], ["2", 0], ["print", 0], ["good", 0], ["n", 0], ["elif", 0], ["small", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["index", 0], ["1", 0], ["while", 0], ["options", 0], ["index", 0], ["2", 0], ["index", 0], ["1", 0], ["print", 0], ["good", 0], ["n", 0], ["good", 0], ["index", 0], ["elif", 0], ["p", 0], ["2", 0], ["if", 0], ["small", 0], ["2", 0], ["print", 0], ["0", 0], ["elif", 0], ["small", 0], ["2", 0], ["x", 0], ["options", 0], ["index", 0], ["1", 0], ["print", 0], ["x", 0], ["1", 0], ["good", 0], ["x", 0], ["1", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["l", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["l", 0], ["append", 0], ["l", 0], ["1", 0], ["1", 0], ["else", 0], ["l", 0], ["append", 0], ["l", 0], ["1", 0], ["1", 0], ["if", 0], ["l", 0], ["1", 0], ["2", 0], ["if", 0], ["min", 0], ["l", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["ans", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["if", 0], ["l", 0], ["j", 0], ["2", 0], ["print", 0], ["j", 0], ["break", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["n", 0], ["if", 0], ["s", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["elif", 0], ["l", 0], ["1", 0], ["2", 0], ["if", 0], ["min", 0], ["l", 0], ["2", 0], ["print", 0], ["0", 0], ["return", 0], ["ans", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["l", 0], ["j", 0], ["0", 0], ["print", 0], ["j", 0], ["break", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["k", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["else", 0], ["print", 0], ["0", 0], ["def", 0], ["read", 0], ["type", 0], ["1", 0], ["if", 0], ["type", 0], ["file", 0], ["open", 0], ["input", 0], ["dat", 0], ["r", 0], ["n", 0], ["int", 0], ["file", 0], ["readline", 0], ["a", 0], ["file", 0], ["readline", 0], ["file", 0], ["close", 0], ["else", 0], ["n", 0], ["int", 0], ["input", 0], ["strip", 0], ["a", 0], ["input", 0], ["strip", 0], ["return", 0], ["n", 0], ["a", 0], ["def", 0], ["solve", 0], ["sol", 0], ["0", 0], ["vs", 0], ["v", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["v", 0], ["1", 0], ["else", 0], ["v", 0], ["1", 0], ["vs", 0], ["append", 0], ["v", 0], ["mins", 0], ["10000000", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["last", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["i", 0], ["mins", 0], ["n", 0], ["i", 0], ["1", 0], ["min", 0], ["vs", 0], ["n", 0], ["i", 0], ["1", 0], ["mins", 0], ["n", 0], ["i", 0], ["else", 0], ["mins", 0], ["n", 0], ["i", 0], ["1", 0], ["vs", 0], ["n", 0], ["i", 0], ["1", 0], ["if", 0], ["vs", 0], ["n", 0], ["i", 0], ["1", 0], ["0", 0], ["last", 0], ["n", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["and", 0], ["vs", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["i", 0], ["if", 0], ["mins", 0], ["i", 0], ["2", 0], ["sol", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["and", 0], ["vs", 0], ["n", 0], ["1", 0], ["2", 0], ["if", 0], ["i", 0], ["n", 0], ["1", 0], ["if", 0], ["mins", 0], ["i", 0], ["2", 0], ["sol", 0], ["1", 0], ["if", 0], ["i", 0], ["last", 0], ["break", 0], ["return", 0], ["sol", 0], ["n", 0], ["a", 0], ["read", 0], ["0", 0], ["sol", 0], ["solve", 0], ["print", 0], ["sol", 0], ["from", 0], ["random", 0], ["import", 0], ["random", 0], ["randint", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdout", 0], ["stdin", 0], ["import", 0], ["math", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["zuor", 0], ["1", 0], ["1", 0], ["arr", 0], ["zuor", 0], ["c", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["obpos", 0], ["z", 0], ["1", 0], ["for", 0], ["z", 0], ["in", 0], ["arr", 0], ["suma", 0], ["sume", 0], ["akt", 0], ["0", 0], ["for", 0], ["z", 0], ["in", 0], ["arr", 0], ["akt", 0], ["z", 0], ["suma", 0], ["append", 0], ["akt", 0], ["akt", 0], ["0", 0], ["for", 0], ["z", 0], ["in", 0], ["reversed", 0], ["arr", 0], ["akt", 0], ["z", 0], ["sume", 0], ["append", 0], ["akt", 0], ["sume", 0], ["list", 0], ["reversed", 0], ["sume", 0], ["summe", 0], ["sum", 0], ["arr", 0], ["if", 0], ["min", 0], ["suma", 0], ["2", 0], ["or", 0], ["min", 0], ["sume", 0], ["2", 0], ["print", 0], ["0", 0], ["elif", 0], ["summe", 0], ["2", 0], ["if", 0], ["min", 0], ["suma", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["letzte1", 0], ["len", 0], ["suma", 0], ["1", 0], ["suma", 0], ["1", 0], ["index", 0], ["1", 0], ["ok", 0], ["i", 0], ["letzte1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["sum", 0], ["b1", 0], ["and", 0], ["b2", 0], ["for", 0], ["b1", 0], ["b2", 0], ["in", 0], ["zip", 0], ["ok", 0], ["obpos", 0], ["elif", 0], ["summe", 0], ["2", 0], ["if", 0], ["min", 0], ["sume", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["erste1", 0], ["sume", 0], ["index", 0], ["1", 0], ["ok", 0], ["i", 0], ["erste1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["print", 0], ["sum", 0], ["b1", 0], ["and", 0], ["not", 0], ["b2", 0], ["for", 0], ["b1", 0], ["b2", 0], ["in", 0], ["zip", 0], ["ok", 0], ["obpos", 0], ["else", 0], ["print", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["ans", 0], ["0", 0], ["s1", 0], ["s2", 0], ["f1", 0], ["1", 0], ["n", 0], ["f2", 0], ["1", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s1", 0], ["append", 0], ["0", 0], ["0", 0], ["s2", 0], ["append", 0], ["0", 0], ["0", 0], ["s1", 0], ["0", 0], ["0", 0], ["8", 0], ["print", 0], ["s1", 0], ["s2", 0], ["if", 0], ["s", 0], ["0", 0], ["s1", 0], ["0", 0], ["0", 0], ["1", 0], ["else", 0], ["s1", 0], ["0", 0], ["1", 0], ["1", 0], ["print", 0], ["s1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["s1", 0], ["i", 0], ["0", 0], ["s1", 0], ["i", 0], ["1", 0], ["0", 0], ["s1", 0], ["i", 0], ["1", 0], ["s1", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s1", 0], ["i", 0], ["0", 0], ["1", 0], ["else", 0], ["s1", 0], ["i", 0], ["1", 0], ["1", 0], ["print", 0], ["s1", 0], ["if", 0], ["s", 0], ["1", 0], ["s2", 0], ["1", 0], ["0", 0], ["1", 0], ["else", 0], ["s2", 0], ["1", 0], ["1", 0], ["1", 0], ["print", 0], ["s2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["s2", 0], ["i", 0], ["0", 0], ["s2", 0], ["i", 0], ["1", 0], ["0", 0], ["s2", 0], ["i", 0], ["1", 0], ["s2", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["s2", 0], ["i", 0], ["0", 0], ["1", 0], ["else", 0], ["s2", 0], ["i", 0], ["1", 0], ["1", 0], ["print", 0], ["s2", 0], ["if", 0], ["s", 0], ["0", 0], ["f1", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["f1", 0], ["i", 0], ["1", 0], ["1", 0], ["and", 0], ["s1", 0], ["i", 0], ["1", 0], ["s1", 0], ["i", 0], ["0", 0], ["f1", 0], ["i", 0], ["1", 0], ["else", 0], ["f1", 0], ["i", 0], ["0", 0], ["if", 0], ["s", 0], ["1", 0], ["f2", 0], ["1", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["2", 0], ["1", 0], ["1", 0], ["if", 0], ["f2", 0], ["i", 0], ["1", 0], ["1", 0], ["and", 0], ["s2", 0], ["i", 0], ["0", 0], ["s2", 0], ["i", 0], ["1", 0], ["f2", 0], ["i", 0], ["1", 0], ["else", 0], ["f2", 0], ["i", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t1", 0], ["s1", 0], ["1", 0], ["0", 0], ["t2", 0], ["s1", 0], ["1", 0], ["1", 0], ["if", 0], ["i", 0], ["2", 0], ["1", 0], ["if", 0], ["i", 0], ["1", 0], ["n", 0], ["p1", 0], ["s2", 0], ["i", 0], ["1", 0], ["0", 0], ["p2", 0], ["s2", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["p1", 0], ["p2", 0], ["or", 0], ["f2", 0], ["i", 0], ["1", 0], ["0", 0], ["continue", 0], ["p1", 0], ["s1", 0], ["i", 0], ["0", 0], ["p2", 0], ["s1", 0], ["i", 0], ["1", 0], ["q1", 0], ["s2", 0], ["i", 0], ["0", 0], ["q2", 0], ["s2", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["p1", 0], ["1", 0], ["p2", 0], ["1", 0], ["t1", 0], ["1", 0], ["t2", 0], ["1", 0], ["q1", 0], ["1", 0], ["q2", 0], ["1", 0], ["else", 0], ["p2", 0], ["1", 0], ["p1", 0], ["1", 0], ["t1", 0], ["1", 0], ["t2", 0], ["1", 0], ["q2", 0], ["1", 0], ["q1", 0], ["1", 0], ["if", 0], ["p2", 0], ["p1", 0], ["continue", 0], ["if", 0], ["q1", 0], ["q2", 0], ["continue", 0], ["if", 0], ["i", 0], ["1", 0], ["0", 0], ["and", 0], ["f1", 0], ["i", 0], ["1", 0], ["0", 0], ["continue", 0], ["if", 0], ["t1", 0], ["t2", 0], ["ans", 0], ["1", 0], ["else", 0], ["if", 0], ["i", 0], ["1", 0], ["0", 0], ["p1", 0], ["s1", 0], ["i", 0], ["1", 0], ["0", 0], ["p2", 0], ["s1", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["p2", 0], ["p1", 0], ["or", 0], ["f1", 0], ["i", 0], ["1", 0], ["0", 0], ["continue", 0], ["print", 0], ["check", 0], ["p1", 0], ["s2", 0], ["i", 0], ["0", 0], ["p2", 0], ["s2", 0], ["i", 0], ["1", 0], ["q1", 0], ["s1", 0], ["i", 0], ["0", 0], ["q2", 0], ["s1", 0], ["i", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["p1", 0], ["1", 0], ["p2", 0], ["1", 0], ["t1", 0], ["1", 0], ["t2", 0], ["1", 0], ["q1", 0], ["1", 0], ["q2", 0], ["1", 0], ["else", 0], ["p1", 0], ["1", 0], ["p2", 0], ["1", 0], ["t1", 0], ["1", 0], ["t2", 0], ["1", 0], ["q1", 0], ["1", 0], ["q2", 0], ["1", 0], ["if", 0], ["p2", 0], ["p1", 0], ["continue", 0], ["if", 0], ["q1", 0], ["q2", 0], ["continue", 0], ["if", 0], ["i", 0], ["1", 0], ["n", 0], ["and", 0], ["f2", 0], ["i", 0], ["1", 0], ["0", 0], ["continue", 0], ["if", 0], ["t1", 0], ["t2", 0], ["ans", 0], ["1", 0], ["print", 0], ["i", 0], ["ans", 0], ["print", 0], ["ans", 0], ["input", 0], ["line", 0], ["input", 0], ["wasm", 0], ["1", 0], ["last0", 0], ["0", 0], ["last1", 0], ["1", 0], ["curs", 0], ["0", 0], ["err", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["line", 0], ["if", 0], ["line", 0], ["i", 0], ["curs", 0], ["1", 0], ["else", 0], ["curs", 0], ["1", 0], ["if", 0], ["curs", 0], ["0", 0], ["last0", 0], ["i", 0], ["if", 0], ["curs", 0], ["1", 0], ["last1", 0], ["i", 0], ["if", 0], ["curs", 0], ["0", 0], ["if", 0], ["wasm", 0], ["1", 0], ["wasm", 0], ["i", 0], ["if", 0], ["curs", 0], ["2", 0], ["err", 0], ["true", 0], ["break", 0], ["if", 0], ["err", 0], ["print", 0], ["0", 0], ["elif", 0], ["wasm", 0], ["1", 0], ["if", 0], ["curs", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["int", 0], ["len", 0], ["line", 0], ["max", 0], ["last0", 0], ["last1", 0], ["2", 0], ["else", 0], ["if", 0], ["curs", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["int", 0], ["wasm", 0], ["2", 0], ["1", 0], ["input", 0], ["line", 0], ["input", 0], ["wasm", 0], ["1", 0], ["last0", 0], ["0", 0], ["last1", 0], ["1", 0], ["curs", 0], ["0", 0], ["err", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["line", 0], ["if", 0], ["line", 0], ["i", 0], ["curs", 0], ["1", 0], ["else", 0], ["curs", 0], ["1", 0], ["if", 0], ["curs", 0], ["0", 0], ["last0", 0], ["i", 0], ["if", 0], ["curs", 0], ["1", 0], ["last1", 0], ["i", 0], ["if", 0], ["curs", 0], ["0", 0], ["if", 0], ["wasm", 0], ["1", 0], ["wasm", 0], ["i", 0], ["if", 0], ["curs", 0], ["2", 0], ["err", 0], ["true", 0], ["break", 0], ["if", 0], ["err", 0], ["print", 0], ["0", 0], ["elif", 0], ["wasm", 0], ["1", 0], ["if", 0], ["curs", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["int", 0], ["len", 0], ["line", 0], ["max", 0], ["last0", 0], ["last1", 0], ["2", 0], ["else", 0], ["if", 0], ["curs", 0], ["2", 0], ["print", 0], ["0", 0], ["else", 0], ["print", 0], ["int", 0], ["wasm", 0], ["2", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["def", 0], ["sol", 0], ["n", 0], ["s", 0], ["l", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["l", 0], ["append", 0], ["l", 0], ["1", 0], ["1", 0], ["else", 0], ["l", 0], ["append", 0], ["l", 0], ["1", 0], ["1", 0], ["ans", 0], ["0", 0], ["l", 0], ["l", 0], ["1", 0], ["if", 0], ["l", 0], ["1", 0], ["2", 0], ["if", 0], ["min", 0], ["l", 0], ["0", 0], ["return", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["l", 0], ["j", 0], ["2", 0], ["break", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["k", 0], ["ans", 0], ["1", 0], ["elif", 0], ["l", 0], ["1", 0], ["2", 0], ["if", 0], ["min", 0], ["l", 0], ["2", 0], ["return", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l", 0], ["j", 0], ["0", 0], ["break", 0], ["for", 0], ["k", 0], ["in", 0], ["range", 0], ["j", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["k", 0], ["ans", 0], ["1", 0], ["else", 0], ["ans", 0], ["0", 0], ["return", 0], ["ans", 0], ["print", 0], ["sol", 0], ["n", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["str", 0], ["input", 0], ["balance", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["str", 0], ["if", 0], ["x", 0], ["balance", 0], ["1", 0], ["else", 0], ["balance", 0], ["1", 0], ["pre", 0], ["pre", 0], ["balance", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["str", 0], ["if", 0], ["x", 0], ["pre", 0], ["balance", 0], ["1", 0], ["else", 0], ["pre", 0], ["balance", 0], ["1", 0], ["pre", 0], ["append", 0], ["pre", 0], ["balance", 0], ["suf", 0], ["lowest", 0], ["suf", 0], ["balance", 0], ["0", 0], ["high", 0], ["0", 0], ["low", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["reversed", 0], ["str", 0], ["suf", 0], ["append", 0], ["suf", 0], ["balance", 0], ["high", 0], ["max", 0], ["high", 0], ["suf", 0], ["balance", 0], ["low", 0], ["suf", 0], ["balance", 0], ["high", 0], ["lowest", 0], ["append", 0], ["low", 0], ["if", 0], ["x", 0], ["suf", 0], ["balance", 0], ["1", 0], ["else", 0], ["suf", 0], ["balance", 0], ["1", 0], ["suf", 0], ["reverse", 0], ["lowest", 0], ["reverse", 0], ["ans", 0], ["0", 0], ["if", 0], ["balance", 0], ["2", 0], ["is", 0], ["bad", 0], ["false", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["str", 0], ["if", 0], ["is", 0], ["bad", 0], ["break", 0], ["if", 0], ["x", 0], ["new", 0], ["pre", 0], ["pre", 0], ["i", 0], ["2", 0], ["if", 0], ["new", 0], ["pre", 0], ["0", 0], ["and", 0], ["new", 0], ["pre", 0], ["suf", 0], ["i", 0], ["and", 0], ["new", 0], ["pre", 0], ["lowest", 0], ["i", 0], ["if", 0], ["i", 0], ["1", 0], ["n", 0], ["or", 0], ["str", 0], ["1", 0], ["ans", 0], ["1", 0], ["if", 0], ["pre", 0], ["i", 0], ["0", 0], ["is", 0], ["bad", 0], ["true", 0], ["elif", 0], ["balance", 0], ["2", 0], ["is", 0], ["bad", 0], ["false", 0], ["for", 0], ["i", 0], ["x", 0], ["in", 0], ["enumerate", 0], ["str", 0], ["if", 0], ["is", 0], ["bad", 0], ["break", 0], ["if", 0], ["x", 0], ["new", 0], ["pre", 0], ["pre", 0], ["i", 0], ["2", 0], ["if", 0], ["new", 0], ["pre", 0], ["0", 0], ["and", 0], ["new", 0], ["pre", 0], ["suf", 0], ["i", 0], ["and", 0], ["new", 0], ["pre", 0], ["lowest", 0], ["i", 0], ["if", 0], ["i", 0], ["1", 0], ["n", 0], ["or", 0], ["str", 0], ["1", 0], ["ans", 0], ["1", 0], ["if", 0], ["pre", 0], ["i", 0], ["0", 0], ["is", 0], ["bad", 0], ["true", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["o", 0], ["0", 0], ["c", 0], ["0", 0], ["n", 0], ["len", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["o", 0], ["1", 0], ["else", 0], ["c", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["0", 0], ["print", 0], ["0", 0], ["quit", 0], ["if", 0], ["abs", 0], ["o", 0], ["c", 0], ["2", 0], ["print", 0], ["0", 0], ["quit", 0], ["t", 0], ["0", 0], ["count", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["count", 0], ["1", 0], ["else", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["2", 0], ["t", 0], ["1", 0], ["if", 0], ["t", 0], ["1", 0], ["print", 0], ["0", 0], ["quit", 0], ["ind", 0], ["n", 0], ["1", 0], ["count", 0], ["0", 0], ["if", 0], ["o", 0], ["c", 0], ["ind", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["count", 0], ["1", 0], ["else", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["0", 0], ["print", 0], ["0", 0], ["quit", 0], ["if", 0], ["count", 0], ["2", 0], ["ind", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ind", 0], ["1", 0], ["n", 0], ["if", 0], ["count", 0], ["0", 0], ["and", 0], ["s", 0], ["i", 0], ["ans", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["count", 0], ["1", 0], ["else", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["0", 0], ["t", 0], ["1", 0], ["elif", 0], ["c", 0], ["o", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["count", 0], ["1", 0], ["else", 0], ["count", 0], ["1", 0], ["if", 0], ["count", 0], ["0", 0], ["ind", 0], ["i", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ind", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["ans", 0], ["1", 0], ["else", 0], ["print", 0], ["0", 0], ["quit", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["strip", 0], ["a", 0], ["0", 0], ["n", 0], ["1", 0], ["m", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["else", 0], ["1", 0], ["m", 0], ["i", 0], ["min", 0], ["m", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["ans", 0], ["0", 0], ["mm", 0], ["a", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["mm", 0], ["min", 0], ["mm", 0], ["a", 0], ["j", 0], ["if", 0], ["s", 0], ["j", 0], ["ans", 0], ["a", 0], ["n", 0], ["1", 0], ["2", 0], ["and", 0], ["mm", 0], ["2", 0], ["and", 0], ["m", 0], ["j", 0], ["1", 0], ["0", 0], ["else", 0], ["ans", 0], ["a", 0], ["n", 0], ["1", 0], ["2", 0], ["and", 0], ["mm", 0], ["2", 0], ["and", 0], ["m", 0], ["j", 0], ["1", 0], ["0", 0], ["print", 0], ["ans", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["print", 0], ["a", 0], ["debug", 0], ["if", 0], ["a", 0], ["n", 0], ["2", 0], ["and", 0], ["a", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["return", 0], ["if", 0], ["min", 0], ["a", 0], ["2", 0], ["print", 0], ["0", 0], ["return", 0], ["if", 0], ["a", 0], ["n", 0], ["2", 0], ["if", 0], ["min", 0], ["a", 0], ["0", 0], ["print", 0], ["0", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["s", 0], ["i", 0], ["1", 0], ["count", 0], ["break", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["s", 0], ["i", 0], ["1", 0], ["count", 0], ["break", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["input", 0], ["k", 0], ["0", 0], ["st", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["and", 0], ["len", 0], ["st", 0], ["0", 0], ["and", 0], ["st", 0], ["1", 0], ["0", 0], ["k", 0], ["2", 0], ["st", 0], ["pop", 0], ["else", 0], ["st", 0], ["append", 0], ["a", 0], ["i", 0], ["i", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["or", 0], ["len", 0], ["st", 0], ["0", 0], ["print", 0], ["0", 0], ["elif", 0], ["len", 0], ["st", 0], ["2", 0], ["and", 0], ["st", 0], ["0", 0], ["0", 0], ["st", 0], ["1", 0], ["0", 0], ["if", 0], ["st", 0], ["0", 0], ["0", 0], ["print", 0], ["n", 0], ["st", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["st", 0], ["0", 0], ["1", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["strip", 0], ["a", 0], ["0", 0], ["n", 0], ["5", 0], ["a2", 0], ["0", 0], ["n", 0], ["5", 0], ["mn", 0], ["0", 0], ["n", 0], ["5", 0], ["mn2", 0], ["0", 0], ["n", 0], ["5", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["mn", 0], ["i", 0], ["min", 0], ["mn", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["0", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["a2", 0], ["i", 0], ["a2", 0], ["i", 0], ["1", 0], ["1", 0], ["else", 0], ["a2", 0], ["i", 0], ["a2", 0], ["i", 0], ["1", 0], ["1", 0], ["mn2", 0], ["i", 0], ["min", 0], ["mn2", 0], ["i", 0], ["1", 0], ["a2", 0], ["i", 0], ["ans", 0], ["0", 0], ["if", 0], ["a", 0], ["n", 0], ["2", 0], ["and", 0], ["a", 0], ["n", 0], ["2", 0], ["print", 0], ["0", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["1", 0], ["and", 0], ["a", 0], ["n", 0], ["2", 0], ["if", 0], ["mn", 0], ["i", 0], ["1", 0], ["0", 0], ["and", 0], ["mn2", 0], ["i", 0], ["1", 0], ["0", 0], ["and", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["ans", 0], ["ans", 0], ["1", 0], ["elif", 0], ["s", 0], ["i", 0], ["1", 0], ["and", 0], ["a", 0], ["n", 0], ["2", 0], ["if", 0], ["mn", 0], ["i", 0], ["1", 0], ["0", 0], ["and", 0], ["mn2", 0], ["i", 0], ["1", 0], ["0", 0], ["and", 0], ["a2", 0], ["i", 0], ["1", 0], ["1", 0], ["ans", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["list", 0], ["input", 0], ["stk", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["and", 0], ["len", 0], ["stk", 0], ["0", 0], ["and", 0], ["stk", 0], ["1", 0], ["0", 0], ["stk", 0], ["pop", 0], ["else", 0], ["stk", 0], ["append", 0], ["s", 0], ["i", 0], ["i", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["or", 0], ["len", 0], ["stk", 0], ["0", 0], ["print", 0], ["0", 0], ["elif", 0], ["len", 0], ["stk", 0], ["2", 0], ["and", 0], ["stk", 0], ["0", 0], ["0", 0], ["stk", 0], ["1", 0], ["0", 0], ["if", 0], ["stk", 0], ["0", 0], ["0", 0], ["print", 0], ["n", 0], ["stk", 0], ["1", 0], ["1", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["stk", 0], ["0", 0], ["1", 0], ["2", 0], ["1", 0], ["else", 0], ["print", 0], ["0", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["def", 0], ["solve", 0], ["s", 0], ["counts", 0], ["opencount", 0], ["0", 0], ["closecount", 0], ["0", 0], ["poscount", 0], ["0", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["return", 0], ["poscount", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["opencount", 0], ["1", 0], ["else", 0], ["closecount", 0], ["1", 0], ["if", 0], ["closecount", 0], ["opencount", 0], ["2", 0], ["return", 0], ["poscount", 0], ["else", 0], ["counts", 0], ["append", 0], ["opencount", 0], ["closecount", 0], ["if", 0], ["abs", 0], ["opencount", 0], ["closecount", 0], ["2", 0], ["if", 0], ["opencount", 0], ["closecount", 0], ["s", 0], ["s", 0], ["1", 0], ["s", 0], ["if", 0], ["c", 0], ["else", 0], ["for", 0], ["c", 0], ["in", 0], ["s", 0], ["counts", 0], ["opencount", 0], ["0", 0], ["closecount", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["opencount", 0], ["1", 0], ["else", 0], ["closecount", 0], ["1", 0], ["if", 0], ["closecount", 0], ["opencount", 0], ["2", 0], ["return", 0], ["poscount", 0], ["else", 0], ["counts", 0], ["append", 0], ["opencount", 0], ["closecount", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["counts", 0], ["i", 0], ["1", 0], ["counts", 0], ["i", 0], ["0", 0], ["2", 0], ["and", 0], ["s", 0], ["i", 0], ["poscount", 0], ["1", 0], ["if", 0], ["counts", 0], ["i", 0], ["1", 0], ["counts", 0], ["i", 0], ["0", 0], ["break", 0], ["return", 0], ["poscount", 0], ["else", 0], ["return", 0], ["poscount", 0], ["print", 0], ["solve", 0], ["s", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["a", 0], ["append", 0], ["1", 0], ["else", 0], ["a", 0], ["append", 0], ["1", 0], ["print", 0], ["a", 0], ["b", 0], ["0", 0], ["n", 0], ["b", 0], ["0", 0], ["a", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["e", 0], ["c", 0], ["d", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["c", 0], ["1", 0], ["if", 0], ["b", 0], ["i", 0], ["3", 0], ["d", 0], ["1", 0], ["e", 0], ["append", 0], ["c", 0], ["d", 0], ["e", 0], ["e", 0], ["1", 0], ["g", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["e", 0], ["i", 0], ["0", 0], ["0", 0], ["and", 0], ["b", 0], ["1", 0], ["2", 0], ["0", 0], ["and", 0], ["g", 0], ["0", 0], ["ans", 0], ["1", 0], ["else", 0], ["if", 0], ["e", 0], ["i", 0], ["1", 0], ["0", 0], ["and", 0], ["b", 0], ["1", 0], ["2", 0], ["0", 0], ["and", 0], ["g", 0], ["0", 0], ["ans", 0], ["1", 0], ["if", 0], ["b", 0], ["i", 0], ["0", 0], ["g", 0], ["1", 0], ["print", 0], ["b", 0], ["print", 0], ["e", 0], ["print", 0], ["ans", 0], ["def", 0], ["isregular", 0], ["s", 0], ["ls", 0], ["0", 0], ["rs", 0], ["0", 0], ["for", 0], ["char", 0], ["in", 0], ["s", 0], ["if", 0], ["char", 0], ["ls", 0], ["1", 0], ["else", 0], ["rs", 0], ["1", 0], ["if", 0], ["rs", 0], ["ls", 0], ["return", 0], ["false", 0], ["if", 0], ["ls", 0], ["rs", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["if", 0], ["n", 0], ["2", 0], ["1", 0], ["print", 0], ["0", 0], ["else", 0], ["a", 0], ["s", 0], ["count", 0], ["b", 0], ["n", 0], ["a", 0], ["diff", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["diff", 0], ["append", 0], ["diff", 0], ["1", 0], ["1", 0], ["else", 0], ["diff", 0], ["append", 0], ["diff", 0], ["1", 0], ["1", 0], ["if", 0], ["a", 0], ["b", 0], ["2", 0], ["if", 0], ["1", 0], ["in", 0], ["diff", 0], ["print", 0], ["0", 0], ["else", 0], ["backdiff", 0], ["diff", 0], ["1", 0], ["last", 0], ["backdiff", 0], ["index", 0], ["1", 0], ["print", 0], ["s", 0], ["last", 0], ["count", 0], ["elif", 0], ["b", 0], ["a", 0], ["2", 0], ["if", 0], ["3", 0], ["in", 0], ["diff", 0], ["print", 0], ["0", 0], ["else", 0], ["first", 0], ["diff", 0], ["index", 0], ["1", 0], ["print", 0], ["s", 0], ["first", 0], ["count", 0], ["else", 0], ["print", 0], ["0", 0], ["created", 0], ["by", 0], ["nikita", 0], ["at", 0], ["30", 0], ["12", 0], ["2018", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["prefbal", 0], ["0", 0], ["n", 0], ["prefbal", 0], ["append", 0], ["0", 0], ["prefcan", 0], ["false", 0], ["n", 0], ["prefcan", 0], ["append", 0], ["true", 0], ["suffbal", 0], ["0", 0], ["n", 0], ["suffbal", 0], ["append", 0], ["0", 0], ["suffcan", 0], ["false", 0], ["n", 0], ["suffcan", 0], ["append", 0], ["true", 0], ["currbal", 0], ["0", 0], ["currcan", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["prefbal", 0], ["i", 0], ["currbal", 0], ["1", 0], ["else", 0], ["prefbal", 0], ["i", 0], ["currbal", 0], ["1", 0], ["currbal", 0], ["prefbal", 0], ["i", 0], ["prefcan", 0], ["i", 0], ["currcan", 0], ["and", 0], ["prefbal", 0], ["i", 0], ["0", 0], ["currcan", 0], ["prefcan", 0], ["i", 0], ["currbal", 0], ["0", 0], ["currcan", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["suffbal", 0], ["i", 0], ["currbal", 0], ["1", 0], ["else", 0], ["suffbal", 0], ["i", 0], ["currbal", 0], ["1", 0], ["currbal", 0], ["suffbal", 0], ["i", 0], ["suffcan", 0], ["i", 0], ["currcan", 0], ["and", 0], ["suffbal", 0], ["i", 0], ["0", 0], ["currcan", 0], ["suffcan", 0], ["i", 0], ["print", 0], ["prefbal", 0], ["print", 0], ["prefcan", 0], ["print", 0], ["suffbal", 0], ["print", 0], ["suffcan", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["s", 0], ["i", 0], ["if", 0], ["prefcan", 0], ["i", 0], ["1", 0], ["and", 0], ["suffcan", 0], ["i", 0], ["1", 0], ["and", 0], ["prefbal", 0], ["i", 0], ["1", 0], ["1", 0], ["suffbal", 0], ["i", 0], ["1", 0], ["0", 0], ["ans", 0], ["1", 0], ["if", 0], ["s", 0], ["i", 0], ["if", 0], ["prefcan", 0], ["i", 0], ["1", 0], ["and", 0], ["suffcan", 0], ["i", 0], ["1", 0], ["and", 0], ["prefbal", 0], ["i", 0], ["1", 0], ["1", 0], ["suffbal", 0], ["i", 0], ["1", 0], ["0", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\n“Arrange” is a planetary popular Flash game. In “Arrange” the player is given a permutation of numbers $1$ to $N$ and a list of allowed swaps. He then has to perform a sequence of swaps that transforms the initial permutation back to the ordered sequence $1,2,3,4,5, \\ldots , N$.\n\nIn order to break the high score list, you need to perform the minimum amount of swaps possible. You can’t do that, but you can write a program that does it for you!\n\n-----Input-----\nThe first line of input contains two integers, $N$ ($2 \\le N \\le 11$), the length of the initial sequence and $M$ ($1 \\le M \\le N(N – 1) / 2$), the number of allowed swaps.\n\nThe second line of input contains a permutation of the numbers $1$ to $N$.\n\nThe next $M$ lines contain descriptions of allowed swaps. Each such line contains two distinct numbers $1 \\le A < B \\le N$, indicating that you are allowed to swap the $A$-th number in the sequence with the $B$-th number. The input never contains two identical swaps.\n\nYou may assume that the input is such that a solution exists.\n\n-----Output-----\nOutput the minimum possible number of swaps to transform the permutation to $1, 2, \\ldots , N$.\n\n-----Examples-----\nSample Input 1:\n2 1\n2 1\n1 2\nSample Output 1:\n1\n\nSample Input 2:\n3 2\n2 1 3\n1 3\n2 3\nSample Output 2:\n3\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7616"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7616", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["“arrange”", 0], ["is", 0], ["a", 0], ["planetary", 0], ["popular", 0], ["flash", 0], ["game", 0], ["in", 0], ["“arrange”", 0], ["the", 1], ["player", 1], ["is", 1], ["given", 1], ["a", 1], ["permutation", 1], ["of", 1], ["numbers", 1], ["1", 1], ["to", 1], ["n", 1], ["and", 1], ["a", 1], ["list", 1], ["of", 1], ["allowed", 1], ["swaps", 1], ["he", 1], ["then", 1], ["has", 1], ["to", 1], ["perform", 1], ["a", 1], ["sequence", 1], ["of", 1], ["swaps", 1], ["that", 1], ["transforms", 1], ["the", 1], ["initial", 0], ["permutation", 0], ["back", 0], ["to", 0], ["the", 0], ["ordered", 0], ["sequence", 0], ["1", 0], ["2", 0], ["3", 0], ["4", 0], ["5", 0], ["ldots", 0], ["n", 1], ["in", 1], ["order", 0], ["to", 0], ["break", 0], ["the", 0], ["high", 0], ["score", 0], ["list", 0], ["you", 0], ["need", 0], ["to", 0], ["perform", 0], ["the", 0], ["minimum", 0], ["amount", 0], ["of", 0], ["swaps", 0], ["possible", 0], ["you", 0], ["can’t", 0], ["do", 1], ["that", 0], ["but", 0], ["you", 0], ["can", 0], ["write", 0], ["a", 0], ["program", 0], ["that", 0], ["does", 0], ["it", 0], ["for", 0], ["you", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["2", 0], ["le", 0], ["n", 0], ["le", 0], ["11", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["initial", 0], ["sequence", 0], ["and", 0], ["m", 0], ["1", 0], ["le", 0], ["m", 0], ["le", 0], ["n", 0], ["n", 0], ["–", 0], ["1", 0], ["2", 0], ["the", 0], ["number", 1], ["of", 0], ["allowed", 0], ["swaps", 0], ["the", 0], ["second", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["a", 0], ["permutation", 0], ["of", 0], ["the", 0], ["numbers", 0], ["1", 0], ["to", 0], ["n", 0], ["the", 0], ["next", 0], ["m", 0], ["lines", 0], ["contain", 0], ["descriptions", 0], ["of", 0], ["allowed", 0], ["swaps", 0], ["each", 0], ["such", 0], ["line", 0], ["contains", 0], ["two", 0], ["distinct", 0], ["numbers", 0], ["1", 0], ["le", 0], ["a", 0], ["b", 0], ["le", 0], ["n", 0], ["indicating", 0], ["that", 0], ["you", 0], ["are", 0], ["allowed", 0], ["to", 0], ["swap", 0], ["the", 0], ["a", 0], ["th", 0], ["number", 0], ["in", 0], ["the", 0], ["sequence", 0], ["with", 0], ["the", 0], ["b", 0], ["th", 0], ["number", 0], ["the", 0], ["input", 0], ["never", 0], ["contains", 0], ["two", 0], ["identical", 0], ["swaps", 0], ["you", 0], ["may", 0], ["assume", 0], ["that", 0], ["the", 0], ["input", 0], ["is", 0], ["such", 0], ["that", 0], ["a", 0], ["solution", 0], ["exists", 0], ["output", 0], ["output", 0], ["the", 0], ["minimum", 0], ["possible", 0], ["number", 0], ["of", 0], ["swaps", 0], ["to", 0], ["transform", 0], ["the", 0], ["permutation", 0], ["to", 0], ["1", 0], ["2", 0], ["ldots", 0], ["n", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["1", 0], ["2", 0], ["sample", 0], ["output", 0], ["1", 0], ["1", 0], ["sample", 0], ["input", 0], ["2", 0], ["3", 0], ["2", 0], ["2", 0], ["1", 0], ["3", 0], ["1", 0], ["3", 0], ["2", 0], ["3", 0], ["sample", 0], ["output", 0], ["2", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.13636363636363635, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.13636363636363635, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.3188976377952756, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3188976377952756, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.13636363636363635, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.13636363636363635, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.3188976377952756, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3188976377952756, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou are given a graph with $n$ nodes and $m$ directed edges. One lowercase letter is assigned to each node. We define a path's value as the number of the most frequently occurring letter. For example, if letters on a path are \"abaca\", then the value of that path is $3$. Your task is find a path whose value is the largest.\n\n\n-----Input-----\n\nThe first line contains two positive integers $n, m$ ($1 \\leq n, m \\leq 300\\,000$), denoting that the graph has $n$ nodes and $m$ directed edges.\n\nThe second line contains a string $s$ with only lowercase English letters. The $i$-th character is the letter assigned to the $i$-th node.\n\nThen $m$ lines follow. Each line contains two integers $x, y$ ($1 \\leq x, y \\leq n$), describing a directed edge from $x$ to $y$. Note that $x$ can be equal to $y$ and there can be multiple edges between $x$ and $y$. Also the graph can be not connected.\n\n\n-----Output-----\n\nOutput a single line with a single integer denoting the largest value. If the value can be arbitrarily large, output -1 instead.\n\n\n-----Examples-----\nInput\n5 4\nabaca\n1 2\n1 3\n3 4\n4 5\n\nOutput\n3\n\nInput\n6 6\nxzyabc\n1 2\n3 1\n2 3\n5 4\n4 3\n6 4\n\nOutput\n-1\n\nInput\n10 14\nxzyzyzyzqx\n1 2\n2 4\n3 5\n4 5\n2 6\n6 8\n6 5\n2 10\n3 9\n10 9\n4 6\n1 10\n2 8\n3 7\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample, the path with largest value is $1 \\to 3 \\to 4 \\to 5$. The value is $3$ because the letter 'a' appears $3$ times.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["# NOT MY CODE\n# https://codeforces.com/contest/919/submission/80857731\n \nfrom types import GeneratorType\n \ndef bootstrap(f, stack=[]):\n\tdef wrappedfunc(*args, **kwargs):\n\t\tto = f(*args, **kwargs)\n\t\tif stack:\n\t\t\treturn to\n\t\telse:\n\t\t\twhile True:\n\t\t\t\tif type(to) is GeneratorType:\n\t\t\t\t\tstack.append(to)\n\t\t\t\t\tto = next(to)\n\t\t\t\telse:\n\t\t\t\t\tstack.pop()\n\t\t\t\t\tif not stack:\n\t\t\t\t\t\treturn to\n\t\t\t\t\tto = stack[-1].send(to)\n\treturn wrappedfunc\n \nimport sys\ninput=sys.stdin.readline\nfrom collections import defaultdict as dd\n'''\ndef iscyclic(g):\n\tfor i in range(1,n+1):\n\t\tif(\n'''\nn,m=list(map(int,input().split()))\ns=input()\nd=dd(list)\nlol=0\nfor i in range(m):\n\tu,v=list(map(int,input().split()))\n\tif(u==v):\n\t\tlol=1\n\t\tprint(-1)\n\t\treturn\n\td[u].append(v)\n'''\nif(iscyclic(d)):\n\tlol=1\n\tprint(-1)\n\treturn\n'''\nvis=[0]*(n+1)\nrvis=[0]*(n+1)\ncou=[0]\ndp=[dd(int) for i in range(n+1)]\nmx=[0]\nh=[0]\n#print(d)\n@bootstrap\ndef dfs(u):\n\tif(h[0]==1):\n\t\tyield\n\tvis[u]=1\n\trvis[u]=1\n\tfor i in d[u]:\n\t\tif(h[0]==1):\n\t\t\tyield\n\t\tif(vis[i]==0):\n\t\t\tyield dfs(i)\n\t\t\tif(h[0]==1):\n\t\t\t\tyield            \n\t\telif(rvis[i]==True):\n\t\t\th[0]=1\n\t\t\tyield\n\trvis[u]=0\n\tif(h[0]==1):\n\t\tyield\n\tfor i in d[u]:\n\t\tfor j in dp[i]:\n\t\t\tdp[u][j]=max(dp[u][j],dp[i][j])\n\t\t\tmx[0]=max(mx[0],dp[u][j])\n\tdp[u][s[u-1]]+=1\n\t#print(u,dp[u])\n\tmx[0]=max(mx[0],dp[u][s[u-1]])\n\tyield\n#print(dp)\nfor i in range(1,n+1):\n\tif(vis[i]==0):\n\t\tcou=[0]\n\t\tdfs(i)\nif(h[0]):\n\tprint(-1)\nelse:\n\tprint(mx[0])\n", "from types import GeneratorType\n \ndef bootstrap(f, stack=[]):\n\tdef wrappedfunc(*args, **kwargs):\n\t\tto = f(*args, **kwargs)\n\t\tif stack:\n\t\t\treturn to\n\t\telse:\n\t\t\twhile True:\n\t\t\t\tif type(to) is GeneratorType:\n\t\t\t\t\tstack.append(to)\n\t\t\t\t\tto = next(to)\n\t\t\t\telse:\n\t\t\t\t\tstack.pop()\n\t\t\t\t\tif not stack:\n\t\t\t\t\t\treturn to\n\t\t\t\t\tto = stack[-1].send(to)\n\treturn wrappedfunc\n \nimport sys\ninput=sys.stdin.readline\nfrom collections import defaultdict as dd\n'''\ndef iscyclic(g):\n\tfor i in range(1,n+1):\n\t\tif(\n'''\nn,m=map(int,input().split())\ns=input()\nd=dd(list)\nlol=0\nfor i in range(m):\n\tu,v=map(int,input().split())\n\tif(u==v):\n\t\tlol=1\n\t\tprint(-1)\n\t\treturn\n\td[u].append(v)\n'''\nif(iscyclic(d)):\n\tlol=1\n\tprint(-1)\n\treturn\n'''\nvis=[0]*(n+1)\nrvis=[0]*(n+1)\ncou=[0]\ndp=[dd(int) for i in range(n+1)]\nmx=[0]\nh=[0]\n#print(d)\n@bootstrap\ndef dfs(u):\n\tif(h[0]==1):\n\t\tyield\n\tvis[u]=1\n\trvis[u]=1\n\tfor i in d[u]:\n\t\tif(h[0]==1):\n\t\t\tyield\n\t\tif(vis[i]==0):\n\t\t\tyield dfs(i)\n\t\t\tif(h[0]==1):\n\t\t\t\tyield            \n\t\telif(rvis[i]==True):\n\t\t\th[0]=1\n\t\t\tyield\n\trvis[u]=0\n\tif(h[0]==1):\n\t\tyield\n\tfor i in d[u]:\n\t\tfor j in dp[i]:\n\t\t\tdp[u][j]=max(dp[u][j],dp[i][j])\n\t\t\tmx[0]=max(mx[0],dp[u][j])\n\tdp[u][s[u-1]]+=1\n\t#print(u,dp[u])\n\tmx[0]=max(mx[0],dp[u][s[u-1]])\n\tyield\n#print(dp)\nfor i in range(1,n+1):\n\tif(vis[i]==0):\n\t\tcou=[0]\n\t\tdfs(i)\nif(h[0]):\n\tprint(-1)\nelse:\n\tprint(mx[0])\n", "from sys import stdin\ninput=lambda : stdin.readline().strip()\nfrom math import ceil,sqrt,factorial,gcd\nfrom collections import deque\nfrom bisect import bisect_left\nn,m=map(int,input().split())\nl=list(input())\ndegree=[0 for i in range(n)]\ngraph={i:[] for i in range(n)}\nfor i in range(m):\n\ta,b=map(int,input().split())\n\ta-=1\n\tb-=1\n\tgraph[a].append(b)\n\tdegree[b]+=1\nq=deque()\nfor i in range(n):\n\tif degree[i]==0:\n\t\tq.append(i)\ncount=0\nans=0\n# print(degree)\ndp=[[0 for i in range(26)] for i in range(n)]\nwhile count<n and q:\n\tx=q.popleft()\n\tcount+=1\n\t# print(ord(l[x])-97)\n\tdp[x][ord(l[x])-97]+=1\n\tfor i in graph[x]:\n\t\tfor j in range(26):\n\t\t\tdp[i][j]=max(dp[i][j],dp[x][j])\n\t\tdegree[i]-=1\n\t\tif degree[i]==0:\n\t\t\tq.append(i)\n# print(degree)\nif count!=n:\n\tprint(-1)\nelse:\n\tans=0\n\tfor i in range(n):\n\t\tans=max(ans,max(dp[i]))\n\tprint(ans)\n", "from sys import stdin\ninput=lambda : stdin.readline().strip()\nfrom math import ceil,sqrt,factorial,gcd\nfrom collections import deque\nfrom bisect import bisect_left\nn,m=list(map(int,input().split()))\nl=list(input())\ndegree=[0 for i in range(n)]\ngraph={i:[] for i in range(n)}\nfor i in range(m):\n\ta,b=list(map(int,input().split()))\n\ta-=1\n\tb-=1\n\tgraph[a].append(b)\n\tdegree[b]+=1\nq=deque()\nfor i in range(n):\n\tif degree[i]==0:\n\t\tq.append(i)\ncount=0\nans=0\n# print(degree)\ndp=[[0 for i in range(26)] for i in range(n)]\nwhile count<n and q:\n\tx=q.popleft()\n\tcount+=1\n\t# print(ord(l[x])-97)\n\tdp[x][ord(l[x])-97]+=1\n\tfor i in graph[x]:\n\t\tfor j in range(26):\n\t\t\tdp[i][j]=max(dp[i][j],dp[x][j])\n\t\tdegree[i]-=1\n\t\tif degree[i]==0:\n\t\t\tq.append(i)\n# print(degree)\nif count!=n:\n\tprint(-1)\nelse:\n\tans=0\n\tfor i in range(n):\n\t\tans=max(ans,max(dp[i]))\n\tprint(ans)\n", "from sys import stdin\ninput=lambda : stdin.readline().strip()\nfrom math import ceil,sqrt,factorial,gcd\nfrom collections import deque\nfrom bisect import bisect_left\nn,m=list(map(int,input().split()))\ns=input()\nx=[]\ny=[]\nfor i in range(m):\n\ta,b=list(map(int,input().split()))\n\tx.append(a)\n\ty.append(b)\n\ndef beauty(n,m,s,x,y):\n\tl=list(s)\n\tdegree=[0 for i in range(n)]\n\tgraph={i:[] for i in range(n)}\n\tfor i in range(m):\n\t\ta,b=x[i],y[i]\n\t\ta-=1\n\t\tb-=1\n\t\tgraph[a].append(b)\n\t\tdegree[b]+=1\n\tq=deque()\n\tfor i in range(n):\n\t\tif degree[i]==0:\n\t\t\tq.append(i)\n\t\n\tcount=0\n\tans=0\n\t# print(degree)\n\tdp=[[0 for i in range(26)] for i in range(n)]\n\twhile count<n and q:\n\t\t\tx=q.popleft()\n\t\t\tcount+=1\n\t\t\t# print(ord(l[x])-97)\n\t\t\tdp[x][ord(l[x])-97]+=1\n\t\t\tfor i in graph[x]:\n\t\t\t\t\tfor j in range(26):\n\t\t\t\t\t\t\tdp[i][j]=max(dp[i][j],dp[x][j])\n\t\t\t\t\tdegree[i]-=1\n\t\t\t\t\tif degree[i]==0:\n\t\t\t\t\t\t\tq.append(i)\n\t# print(degree)\n\tif count!=n:\n\t\t\tprint(-1)\n\telse:\n\t\t\tans=0\n\t\t\tfor i in range(n):\n\t\t\t\t\tans=max(ans,max(dp[i]))\n\t\t\tprint(ans)\n\nbeauty(n,m,s,x,y)\n", "from sys import stdin\ninput=lambda : stdin.readline().strip()\nfrom math import ceil,sqrt,factorial,gcd\nfrom collections import deque\nfrom bisect import bisect_left\nn,m=list(map(int,input().split()))\ns=input()\nx=[]\ny=[]\nfor i in range(m):\n\ta,b=list(map(int,input().split()))\n\tx.append(a)\n\ty.append(b)\n\ndef beauty(n,m,s,x,y):\n\tl=list(s)\n\tdegree=[0 for i in range(n)]\n\tgraph={i:[] for i in range(n)}\n\tfor i in range(m):\n\t\ta,b=x[i],y[i]\n\t\ta-=1\n\t\tb-=1\n\t\tgraph[a].append(b)\n\t\tdegree[b]+=1\n\tq=deque()\n\tfor i in range(n):\n\t\tif degree[i]==0:\n\t\t\tq.append(i)\n\t\n\tcount=0\n\tans=0\n\t# print(degree)\n\tdp=[[0 for i in range(26)] for i in range(n)]\n\twhile count<n and q:\n\t\t\tx=q.popleft()\n\t\t\tcount+=1\n\t\t\t# print(ord(l[x])-97)\n\t\t\tdp[x][ord(l[x])-97]+=1\n\t\t\tfor i in graph[x]:\n\t\t\t\t\tfor j in range(26):\n\t\t\t\t\t\t\tdp[i][j]=max(dp[i][j],dp[x][j])\n\t\t\t\t\tdegree[i]-=1\n\t\t\t\t\tif degree[i]==0:\n\t\t\t\t\t\t\tq.append(i)\n\t# print(degree)\n\tif count!=n:\n\t\t\tprint(-1)\n\telse:\n\t\t\tans=0\n\t\t\tfor i in range(n):\n\t\t\t\t\tans=max(ans,max(dp[i]))\n\t\t\tprint(ans)\n\nbeauty(n,m,s,x,y)\n"], "id": "id7985"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7985", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["graph", 1], ["with", 1], ["n", 1], ["nodes", 1], ["and", 1], ["m", 1], ["directed", 1], ["edges", 0], ["one", 0], ["lowercase", 0], ["letter", 0], ["is", 0], ["assigned", 0], ["to", 0], ["each", 0], ["node", 0], ["we", 0], ["define", 0], ["a", 0], ["path", 0], ["s", 0], ["value", 1], ["as", 1], ["the", 1], ["number", 1], ["of", 1], ["the", 1], ["most", 0], ["frequently", 0], ["occurring", 0], ["letter", 0], ["for", 0], ["example", 0], ["if", 0], ["letters", 0], ["on", 0], ["a", 0], ["path", 0], ["are", 0], ["abaca", 0], ["then", 1], ["the", 1], ["value", 1], ["of", 1], ["that", 1], ["path", 1], ["is", 1], ["3", 0], ["your", 0], ["task", 0], ["is", 0], ["find", 0], ["a", 0], ["path", 0], ["whose", 0], ["value", 0], ["is", 0], ["the", 0], ["largest", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["two", 0], ["positive", 0], ["integers", 0], ["n", 0], ["m", 0], ["1", 0], ["leq", 0], ["n", 0], ["m", 0], ["leq", 0], ["300", 1], ["000", 1], ["denoting", 1], ["that", 1], ["the", 1], ["graph", 1], ["has", 1], ["n", 1], ["nodes", 1], ["and", 1], ["m", 1], ["directed", 1], ["edges", 1], ["the", 1], ["second", 1], ["line", 1], ["contains", 1], ["a", 1], ["string", 1], ["s", 1], ["with", 1], ["only", 1], ["lowercase", 1], ["english", 1], ["letters", 1], ["the", 1], ["i", 1], ["th", 1], ["character", 1], ["is", 1], ["the", 1], ["letter", 1], ["assigned", 1], ["to", 1], ["the", 1], ["i", 1], ["th", 1], ["node", 1], ["then", 0], ["m", 0], ["lines", 0], ["follow", 0], ["each", 0], ["line", 0], ["contains", 0], ["two", 0], ["integers", 0], ["x", 0], ["y", 0], ["1", 0], ["leq", 0], ["x", 0], ["y", 0], ["leq", 0], ["n", 1], ["describing", 1], ["a", 1], ["directed", 1], ["edge", 1], ["from", 1], ["x", 1], ["to", 1], ["y", 1], ["note", 1], ["that", 1], ["x", 1], ["can", 1], ["be", 1], ["equal", 1], ["to", 1], ["y", 1], ["and", 1], ["there", 1], ["can", 1], ["be", 1], ["multiple", 1], ["edges", 1], ["between", 0], ["x", 0], ["and", 0], ["y", 0], ["also", 0], ["the", 0], ["graph", 0], ["can", 0], ["be", 0], ["not", 0], ["connected", 0], ["output", 0], ["output", 1], ["a", 1], ["single", 1], ["line", 1], ["with", 1], ["a", 1], ["single", 1], ["integer", 1], ["denoting", 1], ["the", 1], ["largest", 0], ["value", 0], ["if", 0], ["the", 0], ["value", 0], ["can", 0], ["be", 0], ["arbitrarily", 0], ["large", 0], ["output", 0], ["1", 0], ["instead", 0], ["examples", 0], ["input", 0], ["5", 0], ["4", 0], ["abaca", 0], ["1", 0], ["2", 0], ["1", 0], ["3", 0], ["3", 0], ["4", 0], ["4", 0], ["5", 0], ["output", 0], ["3", 0], ["input", 0], ["6", 0], ["6", 0], ["xzyabc", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["5", 0], ["4", 0], ["4", 0], ["3", 0], ["6", 0], ["4", 0], ["output", 0], ["1", 0], ["input", 0], ["10", 0], ["14", 0], ["xzyzyzyzqx", 0], ["1", 0], ["2", 0], ["2", 0], ["4", 0], ["3", 0], ["5", 0], ["4", 0], ["5", 0], ["2", 0], ["6", 0], ["6", 0], ["8", 0], ["6", 0], ["5", 0], ["2", 0], ["10", 0], ["3", 0], ["9", 0], ["10", 0], ["9", 0], ["4", 0], ["6", 0], ["1", 0], ["10", 0], ["2", 0], ["8", 0], ["3", 0], ["7", 0], ["output", 0], ["4", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["sample", 0], ["the", 0], ["path", 0], ["with", 0], ["largest", 0], ["value", 0], ["is", 0], ["1", 0], ["to", 0], ["3", 0], ["to", 0], ["4", 0], ["to", 0], ["5", 0], ["the", 0], ["value", 0], ["is", 0], ["3", 0], ["because", 0], ["the", 0], ["letter", 0], ["a", 0], ["appears", 0], ["3", 0], ["times", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3345070422535211, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3345070422535211, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5641891891891891, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5641891891891891, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3345070422535211, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3345070422535211, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5641891891891891, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5641891891891891, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["not", 0], ["my", 0], ["code", 0], ["https", 0], ["codeforces", 0], ["com", 0], ["contest", 0], ["919", 0], ["submission", 0], ["80857731", 0], ["from", 0], ["types", 0], ["import", 0], ["generatortype", 0], ["def", 0], ["bootstrap", 0], ["f", 0], ["stack", 0], ["def", 0], ["wrappedfunc", 0], ["args", 0], ["kwargs", 0], ["to", 0], ["f", 0], ["args", 0], ["kwargs", 0], ["if", 0], ["stack", 0], ["return", 0], ["to", 0], ["else", 0], ["while", 0], ["true", 0], ["if", 0], ["type", 0], ["to", 0], ["is", 0], ["generatortype", 0], ["stack", 0], ["append", 0], ["to", 0], ["to", 0], ["next", 0], ["to", 0], ["else", 0], ["stack", 0], ["pop", 0], ["if", 0], ["not", 0], ["stack", 0], ["return", 0], ["to", 0], ["to", 0], ["stack", 0], ["1", 0], ["send", 0], ["to", 0], ["return", 0], ["wrappedfunc", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["def", 0], ["iscyclic", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["d", 0], ["dd", 0], ["list", 0], ["lol", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["u", 0], ["v", 0], ["lol", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["d", 0], ["u", 0], ["append", 0], ["v", 0], ["if", 0], ["iscyclic", 0], ["d", 0], ["lol", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["vis", 0], ["0", 0], ["n", 0], ["1", 0], ["rvis", 0], ["0", 0], ["n", 0], ["1", 0], ["cou", 0], ["0", 0], ["dp", 0], ["dd", 0], ["int", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["mx", 0], ["0", 0], ["h", 0], ["0", 0], ["print", 0], ["d", 0], ["bootstrap", 0], ["def", 0], ["dfs", 0], ["u", 0], ["if", 0], ["h", 0], ["0", 0], ["1", 0], ["yield", 0], ["vis", 0], ["u", 0], ["1", 0], ["rvis", 0], ["u", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["u", 0], ["if", 0], ["h", 0], ["0", 0], ["1", 0], ["yield", 0], ["if", 0], ["vis", 0], ["i", 0], ["0", 0], ["yield", 0], ["dfs", 0], ["i", 0], ["if", 0], ["h", 0], ["0", 0], ["1", 0], ["yield", 0], ["elif", 0], ["rvis", 0], ["i", 0], ["true", 0], ["h", 0], ["0", 0], ["1", 0], ["yield", 0], ["rvis", 0], ["u", 0], ["0", 0], ["if", 0], ["h", 0], ["0", 0], ["1", 0], ["yield", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["u", 0], ["for", 0], ["j", 0], ["in", 0], ["dp", 0], ["i", 0], ["dp", 0], ["u", 0], ["j", 0], ["max", 0], ["dp", 0], ["u", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["mx", 0], ["0", 0], ["max", 0], ["mx", 0], ["0", 0], ["dp", 0], ["u", 0], ["j", 0], ["dp", 0], ["u", 0], ["s", 0], ["u", 0], ["1", 0], ["1", 0], ["print", 0], ["u", 0], ["dp", 0], ["u", 0], ["mx", 0], ["0", 0], ["max", 0], ["mx", 0], ["0", 0], ["dp", 0], ["u", 0], ["s", 0], ["u", 0], ["1", 0], ["yield", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["vis", 0], ["i", 0], ["0", 0], ["cou", 0], ["0", 0], ["dfs", 0], ["i", 0], ["if", 0], ["h", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["mx", 0], ["0", 0], ["from", 0], ["types", 0], ["import", 0], ["generatortype", 0], ["def", 0], ["bootstrap", 0], ["f", 0], ["stack", 0], ["def", 0], ["wrappedfunc", 0], ["args", 0], ["kwargs", 0], ["to", 0], ["f", 0], ["args", 0], ["kwargs", 0], ["if", 0], ["stack", 0], ["return", 0], ["to", 0], ["else", 0], ["while", 0], ["true", 0], ["if", 0], ["type", 0], ["to", 0], ["is", 0], ["generatortype", 0], ["stack", 0], ["append", 0], ["to", 0], ["to", 0], ["next", 0], ["to", 0], ["else", 0], ["stack", 0], ["pop", 0], ["if", 0], ["not", 0], ["stack", 0], ["return", 0], ["to", 0], ["to", 0], ["stack", 0], ["1", 0], ["send", 0], ["to", 0], ["return", 0], ["wrappedfunc", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["def", 0], ["iscyclic", 0], ["g", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["d", 0], ["dd", 0], ["list", 0], ["lol", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["u", 0], ["v", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["u", 0], ["v", 0], ["lol", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["d", 0], ["u", 0], ["append", 0], ["v", 0], ["if", 0], ["iscyclic", 0], ["d", 0], ["lol", 0], ["1", 0], ["print", 0], ["1", 0], ["return", 0], ["vis", 0], ["0", 0], ["n", 0], ["1", 0], ["rvis", 0], ["0", 0], ["n", 0], ["1", 0], ["cou", 0], ["0", 0], ["dp", 0], ["dd", 0], ["int", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["mx", 0], ["0", 0], ["h", 0], ["0", 0], ["print", 0], ["d", 0], ["bootstrap", 0], ["def", 0], ["dfs", 0], ["u", 0], ["if", 0], ["h", 0], ["0", 0], ["1", 0], ["yield", 0], ["vis", 0], ["u", 0], ["1", 0], ["rvis", 0], ["u", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["u", 0], ["if", 0], ["h", 0], ["0", 0], ["1", 0], ["yield", 0], ["if", 0], ["vis", 0], ["i", 0], ["0", 0], ["yield", 0], ["dfs", 0], ["i", 0], ["if", 0], ["h", 0], ["0", 0], ["1", 0], ["yield", 0], ["elif", 0], ["rvis", 0], ["i", 0], ["true", 0], ["h", 0], ["0", 0], ["1", 0], ["yield", 0], ["rvis", 0], ["u", 0], ["0", 0], ["if", 0], ["h", 0], ["0", 0], ["1", 0], ["yield", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["u", 0], ["for", 0], ["j", 0], ["in", 0], ["dp", 0], ["i", 0], ["dp", 0], ["u", 0], ["j", 0], ["max", 0], ["dp", 0], ["u", 0], ["j", 0], ["dp", 0], ["i", 0], ["j", 0], ["mx", 0], ["0", 0], ["max", 0], ["mx", 0], ["0", 0], ["dp", 0], ["u", 0], ["j", 0], ["dp", 0], ["u", 0], ["s", 0], ["u", 0], ["1", 0], ["1", 0], ["print", 0], ["u", 0], ["dp", 0], ["u", 0], ["mx", 0], ["0", 0], ["max", 0], ["mx", 0], ["0", 0], ["dp", 0], ["u", 0], ["s", 0], ["u", 0], ["1", 0], ["yield", 0], ["print", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["if", 0], ["vis", 0], ["i", 0], ["0", 0], ["cou", 0], ["0", 0], ["dfs", 0], ["i", 0], ["if", 0], ["h", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["mx", 0], ["0", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["sqrt", 0], ["factorial", 0], ["gcd", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["input", 0], ["degree", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["graph", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["graph", 0], ["a", 0], ["append", 0], ["b", 0], ["degree", 0], ["b", 0], ["1", 0], ["q", 0], ["deque", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["degree", 0], ["i", 0], ["0", 0], ["q", 0], ["append", 0], ["i", 0], ["count", 0], ["0", 0], ["ans", 0], ["0", 0], ["print", 0], ["degree", 0], ["dp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["while", 0], ["count", 0], ["n", 0], ["and", 0], ["q", 0], ["x", 0], ["q", 0], ["popleft", 0], ["count", 0], ["1", 0], ["print", 0], ["ord", 0], ["l", 0], ["x", 0], ["97", 0], ["dp", 0], ["x", 0], ["ord", 0], ["l", 0], ["x", 0], ["97", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["graph", 0], ["x", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["26", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["dp", 0], ["x", 0], ["j", 0], ["degree", 0], ["i", 0], ["1", 0], ["if", 0], ["degree", 0], ["i", 0], ["0", 0], ["q", 0], ["append", 0], ["i", 0], ["print", 0], ["degree", 0], ["if", 0], ["count", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["max", 0], ["ans", 0], ["max", 0], ["dp", 0], ["i", 0], ["print", 0], ["ans", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["sqrt", 0], ["factorial", 0], ["gcd", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["input", 0], ["degree", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["graph", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["graph", 0], ["a", 0], ["append", 0], ["b", 0], ["degree", 0], ["b", 0], ["1", 0], ["q", 0], ["deque", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["degree", 0], ["i", 0], ["0", 0], ["q", 0], ["append", 0], ["i", 0], ["count", 0], ["0", 0], ["ans", 0], ["0", 0], ["print", 0], ["degree", 0], ["dp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["while", 0], ["count", 0], ["n", 0], ["and", 0], ["q", 0], ["x", 0], ["q", 0], ["popleft", 0], ["count", 0], ["1", 0], ["print", 0], ["ord", 0], ["l", 0], ["x", 0], ["97", 0], ["dp", 0], ["x", 0], ["ord", 0], ["l", 0], ["x", 0], ["97", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["graph", 0], ["x", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["26", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["dp", 0], ["x", 0], ["j", 0], ["degree", 0], ["i", 0], ["1", 0], ["if", 0], ["degree", 0], ["i", 0], ["0", 0], ["q", 0], ["append", 0], ["i", 0], ["print", 0], ["degree", 0], ["if", 0], ["count", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["max", 0], ["ans", 0], ["max", 0], ["dp", 0], ["i", 0], ["print", 0], ["ans", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["sqrt", 0], ["factorial", 0], ["gcd", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["x", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["append", 0], ["a", 0], ["y", 0], ["append", 0], ["b", 0], ["def", 0], ["beauty", 0], ["n", 0], ["m", 0], ["s", 0], ["x", 0], ["y", 0], ["l", 0], ["list", 0], ["s", 0], ["degree", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["graph", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["graph", 0], ["a", 0], ["append", 0], ["b", 0], ["degree", 0], ["b", 0], ["1", 0], ["q", 0], ["deque", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["degree", 0], ["i", 0], ["0", 0], ["q", 0], ["append", 0], ["i", 0], ["count", 0], ["0", 0], ["ans", 0], ["0", 0], ["print", 0], ["degree", 0], ["dp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["while", 0], ["count", 0], ["n", 0], ["and", 0], ["q", 0], ["x", 0], ["q", 0], ["popleft", 0], ["count", 0], ["1", 0], ["print", 0], ["ord", 0], ["l", 0], ["x", 0], ["97", 0], ["dp", 0], ["x", 0], ["ord", 0], ["l", 0], ["x", 0], ["97", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["graph", 0], ["x", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["26", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["dp", 0], ["x", 0], ["j", 0], ["degree", 0], ["i", 0], ["1", 0], ["if", 0], ["degree", 0], ["i", 0], ["0", 0], ["q", 0], ["append", 0], ["i", 0], ["print", 0], ["degree", 0], ["if", 0], ["count", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["max", 0], ["ans", 0], ["max", 0], ["dp", 0], ["i", 0], ["print", 0], ["ans", 0], ["beauty", 0], ["n", 0], ["m", 0], ["s", 0], ["x", 0], ["y", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["sqrt", 0], ["factorial", 0], ["gcd", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["input", 0], ["x", 0], ["y", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["append", 0], ["a", 0], ["y", 0], ["append", 0], ["b", 0], ["def", 0], ["beauty", 0], ["n", 0], ["m", 0], ["s", 0], ["x", 0], ["y", 0], ["l", 0], ["list", 0], ["s", 0], ["degree", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["graph", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["a", 0], ["b", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["graph", 0], ["a", 0], ["append", 0], ["b", 0], ["degree", 0], ["b", 0], ["1", 0], ["q", 0], ["deque", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["degree", 0], ["i", 0], ["0", 0], ["q", 0], ["append", 0], ["i", 0], ["count", 0], ["0", 0], ["ans", 0], ["0", 0], ["print", 0], ["degree", 0], ["dp", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["26", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["while", 0], ["count", 0], ["n", 0], ["and", 0], ["q", 0], ["x", 0], ["q", 0], ["popleft", 0], ["count", 0], ["1", 0], ["print", 0], ["ord", 0], ["l", 0], ["x", 0], ["97", 0], ["dp", 0], ["x", 0], ["ord", 0], ["l", 0], ["x", 0], ["97", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["graph", 0], ["x", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["26", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["j", 0], ["dp", 0], ["x", 0], ["j", 0], ["degree", 0], ["i", 0], ["1", 0], ["if", 0], ["degree", 0], ["i", 0], ["0", 0], ["q", 0], ["append", 0], ["i", 0], ["print", 0], ["degree", 0], ["if", 0], ["count", 0], ["n", 0], ["print", 0], ["1", 0], ["else", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["max", 0], ["ans", 0], ["max", 0], ["dp", 0], ["i", 0], ["print", 0], ["ans", 0], ["beauty", 0], ["n", 0], ["m", 0], ["s", 0], ["x", 0], ["y", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nDavid is looking to book some travel over the world. There are $n$ countries that he can visit, and $m$ flights that are available. The $i$th flight goes from country $a_ i$ to country $b_ i$. It departs at time $s_ i$, and lands at time $e_ i$. \n\nDavid is currently at the airport in country $1$, and the current time is $0$, and he would like to travel country $n$. He does not care about the total amount of time needed to travel, but he really hates waiting in the airport. If he waits $t$ seconds in an airport, he gains $t^2$ units of frustration. Help him find an itinerary that minimizes the sum of frustration.\n\n-----Input-----\nThe first line of input contains two space-separated integers $n$ and $m$ ($1 \\le n,m \\le 200000$).\n\nEach of the next $m$ lines contains four space-separated integers $a_ i$, $b_ i$, $s_ i$, and $e_ i$ ($1 \\le a_ i, b_ i \\le n$; $0 \\le s_ i \\le e_ i \\le 10^6$).\n\nA flight might have the same departure and arrival country.\n\nNo two flights will have the same arrival time, or have the same departure time. In addition, no flight will have the same arrival time as the departure time of another flight. Finally, it is guaranteed that there will always be a way for David to arrive at his destination.\n\n-----Output-----\nPrint, on a single line, the minimum sum of frustration.\n\n-----Examples-----\nIn the first sample, it is optimal to take this sequence of flights:\n - Flight $5$. Goes from airport $1$ to airport $2$, departing at time $3$, arriving at time $8$.\n - Flight $3$. Goes from airport $2$ to airport $1$, departing at time $9$, arriving at time $12$.\n - Flight $7$. Goes from airport $1$ to airport $3$, departing at time $13$, arriving at time $27$.\n - Flight $8$. Goes from airport $3$ to airport $5$, deparing at time $28$, arriving at time $100$.\n\nThe frustration for each flight is $3^2, 1^2, 1^2,$ and $1^2$, respectively. Thus, the total frustration is $12$.\n\nNote that there is an itinerary that gets David to his destination faster. However, that itinerary has a higher total frustration.\n\n-----Examples-----\nSample Input:\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\nSample Output:\n12\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8654"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8654", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["david", 0], ["is", 0], ["looking", 0], ["to", 0], ["book", 0], ["some", 0], ["travel", 0], ["over", 1], ["the", 1], ["world", 1], ["there", 1], ["are", 1], ["n", 1], ["countries", 0], ["that", 0], ["he", 0], ["can", 0], ["visit", 0], ["and", 0], ["m", 0], ["flights", 0], ["that", 0], ["are", 0], ["available", 0], ["the", 0], ["i", 0], ["th", 0], ["flight", 0], ["goes", 0], ["from", 0], ["country", 0], ["a", 0], ["i", 0], ["to", 0], ["country", 0], ["b", 0], ["i", 0], ["it", 0], ["departs", 0], ["at", 0], ["time", 0], ["s", 0], ["i", 0], ["and", 0], ["lands", 0], ["at", 0], ["time", 0], ["e", 0], ["i", 0], ["david", 0], ["is", 0], ["currently", 0], ["at", 0], ["the", 1], ["airport", 1], ["in", 1], ["country", 1], ["1", 1], ["and", 0], ["the", 0], ["current", 0], ["time", 0], ["is", 0], ["0", 0], ["and", 0], ["he", 0], ["would", 0], ["like", 0], ["to", 0], ["travel", 0], ["country", 1], ["n", 1], ["he", 1], ["does", 1], ["not", 1], ["care", 1], ["about", 1], ["the", 1], ["total", 1], ["amount", 1], ["of", 1], ["time", 1], ["needed", 1], ["to", 1], ["travel", 1], ["but", 0], ["he", 0], ["really", 0], ["hates", 0], ["waiting", 0], ["in", 0], ["the", 0], ["airport", 0], ["if", 0], ["he", 0], ["waits", 0], ["t", 0], ["seconds", 0], ["in", 0], ["an", 0], ["airport", 0], ["he", 0], ["gains", 0], ["t", 0], ["2", 0], ["units", 0], ["of", 0], ["frustration", 0], ["help", 0], ["him", 0], ["find", 0], ["an", 0], ["itinerary", 0], ["that", 0], ["minimizes", 0], ["the", 0], ["sum", 0], ["of", 0], ["frustration", 0], ["input", 1], ["the", 24], ["first", 7], ["line", 3], ["of", 3], ["input", 3], ["contains", 3], ["two", 0], ["space", 0], ["separated", 0], ["integers", 0], ["n", 0], ["and", 0], ["m", 0], ["1", 0], ["le", 0], ["n", 0], ["m", 0], ["le", 0], ["200000", 0], ["each", 0], ["of", 0], ["the", 0], ["next", 0], ["m", 0], ["lines", 0], ["contains", 0], ["four", 0], ["space", 0], ["separated", 0], ["integers", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["s", 0], ["i", 0], ["and", 0], ["e", 0], ["i", 0], ["1", 0], ["le", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["le", 0], ["n", 0], ["0", 0], ["le", 0], ["s", 0], ["i", 0], ["le", 0], ["e", 0], ["i", 0], ["le", 0], ["10", 0], ["6", 0], ["a", 1], ["flight", 1], ["might", 1], ["have", 1], ["the", 1], ["same", 1], ["departure", 1], ["and", 1], ["arrival", 1], ["country", 1], ["no", 1], ["two", 1], ["flights", 1], ["will", 1], ["have", 1], ["the", 1], ["same", 1], ["arrival", 1], ["time", 1], ["or", 1], ["have", 1], ["the", 1], ["same", 1], ["departure", 1], ["time", 1], ["in", 1], ["addition", 1], ["no", 1], ["flight", 1], ["will", 1], ["have", 1], ["the", 1], ["same", 1], ["arrival", 1], ["time", 1], ["as", 1], ["the", 1], ["departure", 1], ["time", 1], ["of", 1], ["another", 1], ["flight", 1], ["finally", 1], ["it", 1], ["is", 1], ["guaranteed", 1], ["that", 1], ["there", 1], ["will", 0], ["always", 0], ["be", 0], ["a", 0], ["way", 0], ["for", 0], ["david", 0], ["to", 0], ["arrive", 0], ["at", 0], ["his", 0], ["destination", 0], ["output", 0], ["print", 0], ["on", 0], ["a", 0], ["single", 0], ["line", 0], ["the", 0], ["minimum", 0], ["sum", 0], ["of", 0], ["frustration", 0], ["examples", 0], ["in", 0], ["the", 0], ["first", 0], ["sample", 0], ["it", 0], ["is", 0], ["optimal", 0], ["to", 0], ["take", 0], ["this", 0], ["sequence", 0], ["of", 0], ["flights", 0], ["flight", 1], ["5", 1], ["goes", 1], ["from", 1], ["airport", 1], ["1", 1], ["to", 1], ["airport", 1], ["2", 1], ["departing", 1], ["at", 1], ["time", 1], ["3", 1], ["arriving", 1], ["at", 1], ["time", 1], ["8", 1], ["flight", 1], ["3", 1], ["goes", 1], ["from", 1], ["airport", 1], ["2", 1], ["to", 1], ["airport", 1], ["1", 1], ["departing", 1], ["at", 1], ["time", 1], ["9", 1], ["arriving", 1], ["at", 1], ["time", 1], ["12", 1], ["flight", 1], ["7", 1], ["goes", 1], ["from", 1], ["airport", 1], ["1", 1], ["to", 1], ["airport", 1], ["3", 1], ["departing", 1], ["at", 1], ["time", 1], ["13", 1], ["arriving", 1], ["at", 1], ["time", 1], ["27", 1], ["flight", 1], ["8", 1], ["goes", 1], ["from", 1], ["airport", 1], ["3", 1], ["to", 1], ["airport", 1], ["5", 1], ["deparing", 0], ["at", 0], ["time", 0], ["28", 0], ["arriving", 0], ["at", 0], ["time", 0], ["100", 0], ["the", 0], ["frustration", 0], ["for", 0], ["each", 0], ["flight", 0], ["is", 0], ["3", 0], ["2", 0], ["1", 0], ["2", 0], ["1", 0], ["2", 0], ["and", 0], ["1", 0], ["2", 0], ["respectively", 1], ["thus", 1], ["the", 1], ["total", 1], ["frustration", 1], ["is", 1], ["12", 1], ["note", 1], ["that", 1], ["there", 1], ["is", 1], ["an", 1], ["itinerary", 1], ["that", 1], ["gets", 1], ["david", 1], ["to", 0], ["his", 0], ["destination", 0], ["faster", 0], ["however", 0], ["that", 0], ["itinerary", 0], ["has", 0], ["a", 0], ["higher", 0], ["total", 0], ["frustration", 0], ["examples", 0], ["sample", 0], ["input", 0], ["5", 0], ["8", 0], ["1", 0], ["2", 0], ["1", 0], ["10", 0], ["2", 0], ["4", 0], ["11", 0], ["16", 0], ["2", 0], ["1", 0], ["9", 0], ["12", 0], ["3", 0], ["5", 0], ["28", 0], ["100", 0], ["1", 0], ["2", 0], ["3", 0], ["8", 0], ["4", 0], ["3", 0], ["20", 0], ["21", 0], ["1", 0], ["3", 0], ["13", 0], ["27", 0], ["3", 0], ["5", 0], ["23", 0], ["24", 0], ["sample", 0], ["output", 0], ["12", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.38106796116504854, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.37018897364771153, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.5683962264150944, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5683962264150944, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3786407766990291, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3700878409616274, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.5683962264150944, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5683962264150944, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nGiven an array $a$ of length $n$, find another array, $b$, of length $n$ such that:\n\n  for each $i$ $(1 \\le i \\le n)$ $MEX(\\{b_1$, $b_2$, $\\ldots$, $b_i\\})=a_i$. \n\nThe $MEX$ of a set of integers is the smallest non-negative integer that doesn't belong to this set.\n\nIf such array doesn't exist, determine this.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($1 \\le n \\le 10^5$) — the length of the array $a$.\n\nThe second line contains $n$ integers $a_1$, $a_2$, $\\ldots$, $a_n$ ($0 \\le a_i \\le i$) — the elements of the array $a$. It's guaranteed that $a_i \\le a_{i+1}$ for $1\\le i < n$. \n\n\n-----Output-----\n\nIf there's no such array, print a single line containing $-1$.\n\nOtherwise, print a single line containing $n$ integers $b_1$, $b_2$, $\\ldots$, $b_n$ ($0 \\le b_i \\le 10^6$)\n\nIf there are multiple answers, print any.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n0 1 2 \nInput\n4\n0 0 0 2\n\nOutput\n1 3 4 0 \nInput\n3\n1 1 3\n\nOutput\n0 2 1 \n\n\n-----Note-----\n\nIn the second test case, other answers like $[1,1,1,0]$, for example, are valid.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\na = tuple(map(int, input().split()))\nsa = set(a)\nsan = set()\nmin_not_in = 0\nprev = 0\nans = [0] * n\nfor i in range(n):\n\tcur = a[i]\n\tif cur == prev:\n\t\twhile min_not_in in sa:\n\t\t\tmin_not_in += 1\n\t\tans[i] = min_not_in\n\t\tsa.add(min_not_in)\n\t\tsan.add(min_not_in)\n\telse:\n\t\tans[i] = prev\n\t\tsa.add(prev)\n\t\tsan.add(prev)\n\t\twhile prev in san:\n\t\t\tprev += 1\n\t\tif cur != prev:\n\t\t\tprint(-1)\n\t\t\tbreak\nelse:\n\tprint(*ans)\n", "from sys import stdin,stderr\ndef rl():\n\treturn [int(w) for w in stdin.readline().split()]\n\nn, = rl()\na = rl()\n\na_set = set(a)\nfree = 0\nprev = 0\nb = []\nfor cur in a:\n\tif cur != prev:\n\t\tb.append(prev)\n\t\tif free == prev:\n\t\t\tfree += 1\n\t\tprev = cur\n\telse:\n\t\twhile free in a_set:\n\t\t\tfree += 1\n\t\tb.append(free)\n\t\tfree += 1\nprint(*b)\n", "import sys\ninput = sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nsol=[-1]*n\ntouse=list(range(n+1))\nif a[0]==1:\n\tsol[0]=0\n\ttouse[0]=-1\nfor i in range(1,n):\n\tif a[i]>a[i-1]:\n\t\tsol[i]=a[i-1]\n\t\ttouse[a[i-1]]=-1\nj=0\ntouse[a[-1]]=-1\nfor i in range(n):\n\tif sol[i]==-1:\n\t\twhile touse[j]==-1:\n\t\t\tj+=1\n\t\tsol[i]=touse[j]\n\t\tj+=1\nprint(*sol)\n", "from collections import deque\nimport sys\n\nN = int(input())\n\nA = [int(_) for _ in input().split()]\n\njokers = deque()\n\nB = [-1] * N\ncurrent = 0\n\n\nfor i, el in enumerate(A):\n\tjokers.append(i)\n\tif el != current:\n\t\tfor j in range(el - current):\n\t\t\tif not jokers:\n\t\t\t\tprint(-1)\n\t\t\t\treturn\n\t\t\tp = jokers.pop()\n\t\t\tif A[p] == current + j:\n\t\t\t\tprint(-1)\n\t\t\t\treturn\n\t\t\telse:\n\t\t\t\tB[p] = current + j\n\t\tcurrent = el\n\nwhile jokers:\n\tcurrent += 1\n\tp = jokers.pop()\n\tB[p] = current\n\nprint(' '.join(map(str, B)))\n"], "id": "id9299"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9299", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["given", 0], ["an", 0], ["array", 0], ["a", 0], ["of", 0], ["length", 0], ["n", 0], ["find", 0], ["another", 0], ["array", 0], ["b", 0], ["of", 0], ["length", 0], ["n", 0], ["such", 0], ["that", 0], ["for", 0], ["each", 0], ["i", 0], ["1", 0], ["le", 0], ["i", 0], ["le", 0], ["n", 0], ["mex", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["ldots", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["the", 0], ["mex", 0], ["of", 0], ["a", 0], ["set", 0], ["of", 0], ["integers", 0], ["is", 0], ["the", 0], ["smallest", 0], ["non", 0], ["negative", 0], ["integer", 0], ["that", 0], ["doesn", 0], ["t", 0], ["belong", 0], ["to", 0], ["this", 0], ["set", 0], ["if", 0], ["such", 0], ["array", 0], ["doesn", 0], ["t", 0], ["exist", 0], ["determine", 0], ["this", 0], ["input", 4], ["the", 2], ["first", 0], ["line", 0], ["contains", 0], ["an", 0], ["integer", 0], ["n", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["10", 2], ["5", 2], ["—", 2], ["the", 2], ["length", 2], ["of", 2], ["the", 2], ["array", 0], ["a", 0], ["the", 20], ["second", 13], ["line", 8], ["contains", 8], ["n", 8], ["integers", 11], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["ldots", 0], ["a", 0], ["n", 0], ["0", 0], ["le", 0], ["a", 0], ["i", 0], ["le", 0], ["i", 0], ["—", 0], ["the", 0], ["elements", 0], ["of", 0], ["the", 0], ["array", 0], ["a", 0], ["it", 0], ["s", 0], ["guaranteed", 0], ["that", 0], ["a", 0], ["i", 0], ["le", 0], ["a", 0], ["i", 0], ["1", 0], ["for", 0], ["1", 0], ["le", 0], ["i", 0], ["n", 0], ["output", 0], ["if", 0], ["there", 0], ["s", 0], ["no", 0], ["such", 0], ["array", 0], ["print", 0], ["a", 0], ["single", 0], ["line", 0], ["containing", 0], ["1", 0], ["otherwise", 0], ["print", 0], ["a", 0], ["single", 0], ["line", 0], ["containing", 0], ["n", 2], ["integers", 2], ["b", 2], ["1", 0], ["b", 0], ["2", 0], ["ldots", 0], ["b", 0], ["n", 0], ["0", 0], ["le", 0], ["b", 0], ["i", 0], ["le", 0], ["10", 0], ["6", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["answers", 0], ["print", 0], ["any", 0], ["examples", 0], ["input", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["output", 0], ["0", 0], ["1", 0], ["2", 0], ["input", 0], ["4", 0], ["0", 0], ["0", 0], ["0", 0], ["2", 0], ["output", 0], ["1", 0], ["3", 0], ["4", 0], ["0", 0], ["input", 0], ["3", 0], ["1", 0], ["1", 0], ["3", 0], ["output", 0], ["0", 0], ["2", 0], ["1", 0], ["note", 0], ["in", 0], ["the", 0], ["second", 0], ["test", 0], ["case", 0], ["other", 0], ["answers", 0], ["like", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["for", 0], ["example", 0], ["are", 0], ["valid", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.08490566037735849, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.029919019659585693, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.24107142857142858, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11941964285714286, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.07075471698113207, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.028891509433962265, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.24107142857142858, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11941964285714286, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["a", 0], ["tuple", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sa", 0], ["set", 0], ["a", 0], ["san", 0], ["set", 0], ["min", 0], ["not", 0], ["in", 0], ["0", 0], ["prev", 0], ["0", 0], ["ans", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["cur", 0], ["a", 0], ["i", 0], ["if", 0], ["cur", 0], ["prev", 0], ["while", 0], ["min", 0], ["not", 0], ["in", 0], ["in", 0], ["sa", 0], ["min", 0], ["not", 0], ["in", 0], ["1", 0], ["ans", 0], ["i", 0], ["min", 0], ["not", 0], ["in", 0], ["sa", 0], ["add", 0], ["min", 0], ["not", 0], ["in", 0], ["san", 0], ["add", 0], ["min", 0], ["not", 0], ["in", 0], ["else", 0], ["ans", 0], ["i", 0], ["prev", 0], ["sa", 0], ["add", 0], ["prev", 0], ["san", 0], ["add", 0], ["prev", 0], ["while", 0], ["prev", 0], ["in", 0], ["san", 0], ["prev", 0], ["1", 0], ["if", 0], ["cur", 0], ["prev", 0], ["print", 0], ["1", 0], ["break", 0], ["else", 0], ["print", 0], ["ans", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stderr", 0], ["def", 0], ["rl", 0], ["return", 0], ["int", 0], ["w", 0], ["for", 0], ["w", 0], ["in", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["n", 0], ["rl", 0], ["a", 0], ["rl", 0], ["a", 0], ["set", 0], ["set", 0], ["a", 0], ["free", 0], ["0", 0], ["prev", 0], ["0", 0], ["b", 0], ["for", 0], ["cur", 0], ["in", 0], ["a", 0], ["if", 0], ["cur", 0], ["prev", 0], ["b", 0], ["append", 0], ["prev", 0], ["if", 0], ["free", 0], ["prev", 0], ["free", 0], ["1", 0], ["prev", 0], ["cur", 0], ["else", 0], ["while", 0], ["free", 0], ["in", 0], ["a", 0], ["set", 0], ["free", 0], ["1", 0], ["b", 0], ["append", 0], ["free", 0], ["free", 0], ["1", 0], ["print", 0], ["b", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sol", 0], ["1", 0], ["n", 0], ["touse", 0], ["list", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["a", 0], ["0", 0], ["1", 0], ["sol", 0], ["0", 0], ["0", 0], ["touse", 0], ["0", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["sol", 0], ["i", 0], ["a", 0], ["i", 0], ["1", 0], ["touse", 0], ["a", 0], ["i", 0], ["1", 0], ["1", 0], ["j", 0], ["0", 0], ["touse", 0], ["a", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["sol", 0], ["i", 0], ["1", 0], ["while", 0], ["touse", 0], ["j", 0], ["1", 0], ["j", 0], ["1", 0], ["sol", 0], ["i", 0], ["touse", 0], ["j", 0], ["j", 0], ["1", 0], ["print", 0], ["sol", 0], ["from", 0], ["collections", 0], ["import", 0], ["deque", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["split", 0], ["jokers", 0], ["deque", 0], ["b", 0], ["1", 0], ["n", 0], ["current", 0], ["0", 0], ["for", 0], ["i", 0], ["el", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["jokers", 0], ["append", 0], ["i", 0], ["if", 0], ["el", 0], ["current", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["el", 0], ["current", 0], ["if", 0], ["not", 0], ["jokers", 0], ["print", 0], ["1", 0], ["return", 0], ["p", 0], ["jokers", 0], ["pop", 0], ["if", 0], ["a", 0], ["p", 0], ["current", 0], ["j", 0], ["print", 0], ["1", 0], ["return", 0], ["else", 0], ["b", 0], ["p", 0], ["current", 0], ["j", 0], ["current", 0], ["el", 0], ["while", 0], ["jokers", 0], ["current", 0], ["1", 0], ["p", 0], ["jokers", 0], ["pop", 0], ["b", 0], ["p", 0], ["current", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["b", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nVasya and Petya wrote down all integers from 1 to n to play the \"powers\" game (n can be quite large; however, Vasya and Petya are not confused by this fact).\n\nPlayers choose numbers in turn (Vasya chooses first). If some number x is chosen at the current turn, it is forbidden to choose x or all of its other positive integer powers (that is, x^2, x^3, ...) at the next turns. For instance, if the number 9 is chosen at the first turn, one cannot choose 9 or 81 later, while it is still allowed to choose 3 or 27. The one who cannot make a move loses.\n\nWho wins if both Vasya and Petya play optimally?\n\n\n-----Input-----\n\nInput contains single integer n (1 ≤ n ≤ 10^9).\n\n\n-----Output-----\n\nPrint the name of the winner — \"Vasya\" or \"Petya\" (without quotes).\n\n\n-----Examples-----\nInput\n1\n\nOutput\nVasya\n\nInput\n2\n\nOutput\nPetya\n\nInput\n8\n\nOutput\nPetya\n\n\n\n-----Note-----\n\nIn the first sample Vasya will choose 1 and win immediately.\n\nIn the second sample no matter which number Vasya chooses during his first turn, Petya can choose the remaining number and win.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from sys import stdin, stdout\nimport math, collections\nmod = 10**9+7\n\ndef isPower(n):\n\tif (n <= 1):\n\t\treturn True\n\tfor x in range(2, (int)(math.sqrt(n)) + 1):\n\t\tp = x\n\t\twhile (p <= n):\n\t\t\tp = p * x\n\t\t\tif (p == n):\n\t\t\t\treturn True\n\n\treturn False\nn = int(input())\narr = [0,1,2,1,4,3,2,1,5,6,2,1,8,7,5,9,8,7,3,4,7,4,2,1,10,9,3,6,11,12]\nans = arr[int(math.log(n, 2))]\ns = int(math.log(n, 2))\nfor i in range(3, int(n**0.5)+1):\n\tif not isPower(i):\n\t\tans^=arr[int(math.log(n, i))]\n\t\ts+=int(math.log(n, i))\nans^=((n-s)%2)\nprint(\"Vasya\" if ans else \"Petya\")\n", "import math, collections\nmod = 10**9+7\n\ndef isPower(n):\n\tif (n <= 1):\n\t\treturn True\n\tfor x in range(2, (int)(math.sqrt(n)) + 1):\n\t\tp = x\n\t\twhile (p <= n):\n\t\t\tp = p * x\n\t\t\tif (p == n):\n\t\t\t\treturn True\n\treturn False\nn = int(input())\narr = [0,1,2,1,4,3,2,1,5,6,2,1,8,7,5,9,8,7,3,4,7,4,2,1,10,9,3,6,11,12]\nans = arr[int(math.log(n, 2))]\ns = int(math.log(n, 2))\nfor i in range(3, int(n**0.5)+1):\n\tif not isPower(i):\n\t\tans^=arr[int(math.log(n, i))]\n\t\ts+=int(math.log(n, i))\nans^=((n-s)%2)\nprint(\"Vasya\" if ans else \"Petya\")\n"], "id": "id8390"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8390", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["vasya", 1], ["and", 1], ["petya", 1], ["wrote", 1], ["down", 1], ["all", 1], ["integers", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["to", 1], ["play", 1], ["the", 1], ["powers", 1], ["game", 1], ["n", 1], ["can", 1], ["be", 1], ["quite", 1], ["large", 1], ["however", 1], ["vasya", 1], ["and", 1], ["petya", 1], ["are", 1], ["not", 1], ["confused", 1], ["by", 1], ["this", 1], ["fact", 1], ["players", 1], ["choose", 1], ["numbers", 1], ["in", 1], ["turn", 1], ["vasya", 1], ["chooses", 1], ["first", 1], ["if", 1], ["some", 1], ["number", 1], ["x", 1], ["is", 1], ["chosen", 1], ["at", 1], ["the", 1], ["current", 1], ["turn", 1], ["it", 1], ["is", 1], ["forbidden", 1], ["to", 1], ["choose", 0], ["x", 0], ["or", 0], ["all", 0], ["of", 0], ["its", 0], ["other", 0], ["positive", 0], ["integer", 0], ["powers", 0], ["that", 0], ["is", 0], ["x", 0], ["2", 0], ["x", 0], ["3", 0], ["at", 1], ["the", 1], ["next", 1], ["turns", 1], ["for", 1], ["instance", 1], ["if", 1], ["the", 1], ["number", 1], ["9", 1], ["is", 1], ["chosen", 1], ["at", 1], ["the", 1], ["first", 1], ["turn", 1], ["one", 1], ["cannot", 1], ["choose", 1], ["9", 1], ["or", 1], ["81", 1], ["later", 1], ["while", 1], ["it", 1], ["is", 1], ["still", 1], ["allowed", 1], ["to", 1], ["choose", 1], ["3", 1], ["or", 1], ["27", 1], ["the", 1], ["one", 1], ["who", 1], ["cannot", 1], ["make", 1], ["a", 1], ["move", 0], ["loses", 0], ["who", 0], ["wins", 0], ["if", 0], ["both", 0], ["vasya", 0], ["and", 0], ["petya", 0], ["play", 0], ["optimally", 0], ["input", 0], ["input", 0], ["contains", 0], ["single", 0], ["integer", 0], ["n", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["9", 0], ["output", 0], ["print", 0], ["the", 0], ["name", 0], ["of", 0], ["the", 0], ["winner", 0], ["—", 0], ["vasya", 0], ["or", 0], ["petya", 0], ["without", 0], ["quotes", 0], ["examples", 0], ["input", 0], ["1", 0], ["output", 0], ["vasya", 0], ["input", 0], ["2", 0], ["output", 0], ["petya", 0], ["input", 0], ["8", 0], ["output", 0], ["petya", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["sample", 1], ["vasya", 1], ["will", 1], ["choose", 1], ["1", 1], ["and", 1], ["win", 1], ["immediately", 1], ["in", 1], ["the", 1], ["second", 1], ["sample", 1], ["no", 1], ["matter", 1], ["which", 1], ["number", 1], ["vasya", 1], ["chooses", 1], ["during", 0], ["his", 0], ["first", 0], ["turn", 0], ["petya", 0], ["can", 0], ["choose", 0], ["the", 0], ["remaining", 0], ["number", 0], ["and", 0], ["win", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5947368421052631, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5947368421052631, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7376237623762376, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7376237623762376, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5947368421052631, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5947368421052631, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7376237623762376, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7376237623762376, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["import", 0], ["math", 0], ["collections", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["ispower", 0], ["n", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["true", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["2", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["p", 0], ["x", 0], ["while", 0], ["p", 0], ["n", 0], ["p", 0], ["p", 0], ["x", 0], ["if", 0], ["p", 0], ["n", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["0", 0], ["1", 0], ["2", 0], ["1", 0], ["4", 0], ["3", 0], ["2", 0], ["1", 0], ["5", 0], ["6", 0], ["2", 0], ["1", 0], ["8", 0], ["7", 0], ["5", 0], ["9", 0], ["8", 0], ["7", 0], ["3", 0], ["4", 0], ["7", 0], ["4", 0], ["2", 0], ["1", 0], ["10", 0], ["9", 0], ["3", 0], ["6", 0], ["11", 0], ["12", 0], ["ans", 0], ["arr", 0], ["int", 0], ["math", 0], ["log", 0], ["n", 0], ["2", 0], ["s", 0], ["int", 0], ["math", 0], ["log", 0], ["n", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["not", 0], ["ispower", 0], ["i", 0], ["ans", 0], ["arr", 0], ["int", 0], ["math", 0], ["log", 0], ["n", 0], ["i", 0], ["s", 0], ["int", 0], ["math", 0], ["log", 0], ["n", 0], ["i", 0], ["ans", 0], ["n", 0], ["s", 0], ["2", 0], ["print", 0], ["vasya", 0], ["if", 0], ["ans", 0], ["else", 0], ["petya", 0], ["import", 0], ["math", 0], ["collections", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["ispower", 0], ["n", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["true", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["2", 0], ["int", 0], ["math", 0], ["sqrt", 0], ["n", 0], ["1", 0], ["p", 0], ["x", 0], ["while", 0], ["p", 0], ["n", 0], ["p", 0], ["p", 0], ["x", 0], ["if", 0], ["p", 0], ["n", 0], ["return", 0], ["true", 0], ["return", 0], ["false", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["0", 0], ["1", 0], ["2", 0], ["1", 0], ["4", 0], ["3", 0], ["2", 0], ["1", 0], ["5", 0], ["6", 0], ["2", 0], ["1", 0], ["8", 0], ["7", 0], ["5", 0], ["9", 0], ["8", 0], ["7", 0], ["3", 0], ["4", 0], ["7", 0], ["4", 0], ["2", 0], ["1", 0], ["10", 0], ["9", 0], ["3", 0], ["6", 0], ["11", 0], ["12", 0], ["ans", 0], ["arr", 0], ["int", 0], ["math", 0], ["log", 0], ["n", 0], ["2", 0], ["s", 0], ["int", 0], ["math", 0], ["log", 0], ["n", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["3", 0], ["int", 0], ["n", 0], ["0", 0], ["5", 0], ["1", 0], ["if", 0], ["not", 0], ["ispower", 0], ["i", 0], ["ans", 0], ["arr", 0], ["int", 0], ["math", 0], ["log", 0], ["n", 0], ["i", 0], ["s", 0], ["int", 0], ["math", 0], ["log", 0], ["n", 0], ["i", 0], ["ans", 0], ["n", 0], ["s", 0], ["2", 0], ["print", 0], ["vasya", 0], ["if", 0], ["ans", 0], ["else", 0], ["petya", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThere are $n$ players sitting at the card table. Each player has a favorite number. The favorite number of the $j$-th player is $f_j$.\n\nThere are $k \\cdot n$ cards on the table. Each card contains a single integer: the $i$-th card contains number $c_i$. Also, you are given a sequence $h_1, h_2, \\dots, h_k$. Its meaning will be explained below.\n\nThe players have to distribute all the cards in such a way that each of them will hold exactly $k$ cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals $h_t$ if the player holds $t$ cards containing his favorite number. If a player gets no cards with his favorite number (i.e., $t=0$), his joy level is $0$.\n\nPrint the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence $h_1, \\dots, h_k$ is the same for all the players.\n\n\n-----Input-----\n\nThe first line of input contains two integers $n$ and $k$ ($1 \\le n \\le 500, 1 \\le k \\le 10$) — the number of players and the number of cards each player will get.\n\nThe second line contains $k \\cdot n$ integers $c_1, c_2, \\dots, c_{k \\cdot n}$ ($1 \\le c_i \\le 10^5$) — the numbers written on the cards.\n\nThe third line contains $n$ integers $f_1, f_2, \\dots, f_n$ ($1 \\le f_j \\le 10^5$) — the favorite numbers of the players.\n\nThe fourth line contains $k$ integers $h_1, h_2, \\dots, h_k$ ($1 \\le h_t \\le 10^5$), where $h_t$ is the joy level of a player if he gets exactly $t$ cards with his favorite number written on them. It is guaranteed that the condition $h_{t - 1} < h_t$ holds for each $t \\in [2..k]$.\n\n\n-----Output-----\n\nPrint one integer — the maximum possible total joy levels of the players among all possible card distributions.\n\n\n-----Examples-----\nInput\n4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n\nOutput\n21\n\nInput\n3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, one possible optimal card distribution is the following:  Player $1$ gets cards with numbers $[1, 3, 8]$;  Player $2$ gets cards with numbers $[2, 2, 8]$;  Player $3$ gets cards with numbers $[2, 2, 8]$;  Player $4$ gets cards with numbers $[5, 5, 5]$. \n\nThus, the answer is $2 + 6 + 6 + 7 = 21$.\n\nIn the second example, no player can get a card with his favorite number. Thus, the answer is $0$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["\nfrom queue import Queue\nimport sys\nimport math\nimport os.path\n\n# CONFIG\nsys.setrecursionlimit(10**9)\n\n# LOG\ndef log(*args, **kwargs):\n\tprint(*args, file=sys.stderr, **kwargs)\n\n\n# INPUT\ndef ni():\n\treturn list(map(int, input().split()))\n\n\ndef nio(offset):\n\treturn [int(x) + offset for x in input().split()]\n\n\ndef nia():\n\treturn list(map(int, input().split()))\n\n\n# CONVERT\ndef toString(aList, sep=\" \"):\n\treturn sep.join(str(x) for x in aList)\n\n\ndef mapInvertIndex(aList):\n\treturn {k: v for v, k in enumerate(aList)}\n\ndef countMap(arr):\n\tm = {}\n\tfor x in arr:\n\t\tm[x] = m.get(x,0) + 1\n\treturn m\n\ndef sortId(arr):\n\treturn sorted(list(range(arr)), key=lambda k: arr[k])\n\n# MAIN\n\nn, k = ni()\nc = nia()\nf = nia()\nh = [0] + (nia())\n\ncc = countMap(c)\ncf = countMap(f)\n\nn1 = n+1\nk1 = k+1\n\nnk1 = n*k+1\ndp = [[0]*nk1 for _ in range(n1)]\n\n\nfor ni in range(1,n1):\n\tfor ki in range(1,nk1):\n\t\tmficount = min(k,ki) + 1        \n\t\tfor kii in range(mficount):\n\t\t\t# log(ni,ki, kii, dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\t\t\tdp[ni][ki] = max(dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\t# log(dp[ni])\n\n# log(n,k)\n# log(\"c\", cc)\n# log(\"f\", cf)\n# log(\"h\", h)\n# log(dp)\n\nres = 0\n\n\nfor fk,fv in list(cf.items()):\n\t# log(fk, fv, cc.get(fk,0))\n\tres += dp[fv][cc.get(fk,0)]\n\nprint(res)\n", "\nfrom queue import Queue\nimport sys\nimport math\nimport os.path\n\n# CONFIG\nsys.setrecursionlimit(10**9)\n\n# LOG\ndef log(*args, **kwargs):\n\tprint(*args, file=sys.stderr, **kwargs)\n\n\n# INPUT\ndef ni():\n\treturn list(map(int, input().split()))\n\n\ndef nio(offset):\n\treturn [int(x) + offset for x in input().split()]\n\n\ndef nia():\n\treturn list(map(int, input().split()))\n\n\n# CONVERT\ndef toString(aList, sep=\" \"):\n\treturn sep.join(str(x) for x in aList)\n\n\ndef mapInvertIndex(aList):\n\treturn {k: v for v, k in enumerate(aList)}\n\ndef countMap(arr):\n\tm = {}\n\tfor x in arr:\n\t\tm[x] = m.get(x,0) + 1\n\treturn m\n\ndef sortId(arr):\n\treturn sorted(list(range(arr)), key=lambda k: arr[k])\n\n# MAIN\n\nn, k = ni()\nc = nia()\nf = nia()\nh = [0]\nh.extend(nia())\n\ncc = countMap(c)\ncf = countMap(f)\n\nn1 = n+1\nk1 = k+1\n\nnk1 = n*k+1\ndp = [[0]*nk1 for _ in range(n1)]\n\n\nfor ni in range(1,n1):\n\tfor ki in range(1,nk1):\n\t\tmficount = min(k,ki) + 1        \n\t\tfor kii in range(mficount):\n\t\t\t# log(ni,ki, kii, dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\t\t\tdp[ni][ki] = max(dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\t# log(dp[ni])\n\n# log(n,k)\n# log(\"c\", cc)\n# log(\"f\", cf)\n# log(\"h\", h)\n# log(dp)\n\nres = 0\n\n\nfor fk,fv in list(cf.items()):\n\t# log(fk, fv, cc.get(fk,0))\n\tres += dp[fv][cc.get(fk,0)]\n\nprint(res)\n", "\nfrom queue import Queue\nimport sys\nimport math\nimport os.path\n\n# CONFIG\nsys.setrecursionlimit(10**9)\n\n# LOG\ndef log(*args, **kwargs):\n\tprint(*args, file=sys.stderr, **kwargs)\n\n\n# INPUT\ndef ni():\n\treturn list(map(int, input().split()))\n\n\ndef nio(offset):\n\treturn [int(x) + offset for x in input().split()]\n\n\ndef nia():\n\treturn list(map(int, input().split()))\n\n\n# CONVERT\ndef toString(aList, sep=\" \"):\n\treturn sep.join(str(x) for x in aList)\n\n\ndef mapInvertIndex(aList):\n\treturn {k: v for v, k in enumerate(aList)}\n\ndef countMap(arr):\n\tm = {}\n\tfor x in arr:\n\t\tm[x] = m.get(x,0) + 1\n\treturn m\n\ndef sortId(arr):\n\treturn sorted(list(range(arr)), key=lambda k: arr[k])\n\n# MAIN\n\nn, k = ni()\nc = nia()\nf = nia()\nh = nia()\nh.insert(0,0)\n\ncc = countMap(c)\ncf = countMap(f)\n\nn1 = n+1\nk1 = k+1\n\nnk1 = n*k+1\ndp = [[0]*nk1 for _ in range(n1)]\n\n\nfor ni in range(1,n1):\n\tfor ki in range(1,nk1):\n\t\tmficount = min(k,ki) + 1        \n\t\tfor kii in range(mficount):\n\t\t\t# log(ni,ki, kii, dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\t\t\tdp[ni][ki] = max(dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\t# log(dp[ni])\n\n# log(n,k)\n# log(\"c\", cc)\n# log(\"f\", cf)\n# log(\"h\", h)\n# log(dp)\n\nres = 0\n\n\nfor fk,fv in list(cf.items()):\n\t# log(fk, fv, cc.get(fk,0))\n\tres += dp[fv][cc.get(fk,0)]\n\nprint(res)\n", "\nfrom collections import Counter\nfrom queue import Queue\nimport sys\nimport math\nimport os.path\n\n# CONFIG\nsys.setrecursionlimit(10**9)\n\n# LOG\ndef log(*args, **kwargs):\n\tprint(*args, file=sys.stderr, **kwargs)\n\n\n# INPUT\ndef ni():\n\treturn list(map(int, input().split()))\n\n\ndef nio(offset):\n\treturn [int(x) + offset for x in input().split()]\n\n\ndef nia():\n\treturn list(map(int, input().split()))\n\n\n# CONVERT\ndef toString(aList, sep=\" \"):\n\treturn sep.join(str(x) for x in aList)\n\n\ndef mapInvertIndex(aList):\n\treturn {k: v for v, k in enumerate(aList)}\n\ndef sortId(arr):\n\treturn sorted(list(range(arr)), key=lambda k: arr[k])\n\n# MAIN\n\nn, k = ni()\nc = nia()\nf = nia()\nh = nia()\nh.insert(0,0)\n\ncc = Counter(c)\ncf = Counter(f)\n\nn1 = n+1\nk1 = k+1\n\nnk1 = n*k+1\ndp = [[0]*nk1 for _ in range(n1)]\n\n\nfor ni in range(1,n1):\n\tfor ki in range(1,nk1):\n\t\tmficount = min(k,ki) + 1        \n\t\tfor kii in range(mficount):\n\t\t\t# log(ni,ki, kii, dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\t\t\tdp[ni][ki] = max(dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\t# log(dp[ni])\n\n# log(n,k)\n# log(\"c\", cc)\n# log(\"f\", cf)\n# log(\"h\", h)\n# log(dp)\n\nres = 0\n\n\nfor fk,fv in list(cf.items()):\n\t# log(fk, fv, cc.get(fk,0))\n\tres += dp[fv][cc.get(fk,0)]\n\nprint(res)\n", "\nfrom collections import Counter\nfrom queue import Queue\nimport sys\nimport math\nimport os.path\n\n# CONFIG\nsys.setrecursionlimit(10**9)\n\n# LOG\ndef log(*args, **kwargs):\n\tprint(*args, file=sys.stderr, **kwargs)\n\n\n# INPUT\ndef ni():\n\treturn list(map(int, input().split()))\n\n\ndef nio(offset):\n\treturn [int(x) + offset for x in input().split()]\n\n\ndef nia():\n\treturn list(map(int, input().split()))\n\n\n# CONVERT\ndef toString(aList, sep=\" \"):\n\treturn sep.join(str(x) for x in aList)\n\n\ndef mapInvertIndex(aList):\n\treturn {k: v for v, k in enumerate(aList)}\n\ndef sortId(arr):\n\treturn sorted(list(range(arr)), key=lambda k: arr[k])\n\n# MAIN\n\nn, k = ni()\nc = nia()\nf = nia()\nh = nia()\nh.insert(0,0)\n\ncc = Counter(c)\ncf = Counter(f)\n\nn1 = n+1\nk1 = k+1\n\nnk1 = n*k+1\ndp = [[0]*nk1 for _ in range(n1)]\n\n\nfor ni in range(1,n1):\n\tfor ki in range(1,nk1):\n\t\tmficount = min(k,ki) + 1        \n\t\tfor kii in range(mficount):\n\t\t\t# log(ni,ki, kii, dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\t\t\tdp[ni][ki] = max(dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\t# log(dp[ni])\n\n# log(n,k)\n# log(\"c\", cc)\n# log(\"f\", cf)\n# log(\"h\", h)\n# log(dp)\n\nres = 0\n\n\nfor fk,fv in list(cf.items()):\n\t# log(fk, fv, cc.get(fk,0))\n\tres += dp[fv][cc[fk]]\n\nprint(res)\n", "\nfrom collections import Counter\nfrom queue import Queue\nimport sys\nimport math\nimport os.path\nsys.setrecursionlimit(10**9)\ndef log(*args, **kwargs):\n\tprint(*args, file=sys.stderr, **kwargs)\ndef ni():\n\treturn map(int, input().split())\ndef nio(offset):\n\treturn map(lambda x: int(x) + offset, input().split())\ndef nia():\n\treturn list(map(int, input().split()))\ndef toString(aList, sep=\" \"):\n\treturn sep.join(str(x) for x in aList)\ndef mapInvertIndex(aList):\n\treturn {k: v for v, k in enumerate(aList)}\ndef sortId(arr):\n\treturn sorted(range(arr), key=lambda k: arr[k])\nn, k = ni()\nc = nia()\nf = nia()\nh = nia()\nh.insert(0,0)\ncc = Counter(c)\ncf = Counter(f)\nn1 = n+1\nk1 = k+1\nnk1 = n*k+1\ndp = [[0]*nk1 for _ in range(n1)]\nfor ni in range(1,n1):\n\tfor ki in range(1,nk1):\n\t\tmficount = min(k,ki) + 1        \n\t\tfor kii in range(mficount):\n\t\t\t# log(ni,ki, kii, dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\t\t\tdp[ni][ki] = max(dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\nres = 0\nfor fk,fv in cf.items():\n\tres += dp[fv][cc[fk]]\nprint(res)\n", "\nfrom queue import Queue\nimport sys\nimport math\nimport os.path\n\nsys.setrecursionlimit(10**9)\n\ndef log(*args, **kwargs):\n\tprint(*args, file=sys.stderr, **kwargs)\n\n\ndef ni():\n\treturn map(int, input().split())\n\n\ndef nio(offset):\n\treturn map(lambda x: int(x) + offset, input().split())\n\n\ndef nia():\n\treturn list(map(int, input().split()))\n\n\ndef toString(aList, sep=\" \"):\n\treturn sep.join(str(x) for x in aList)\n\n\ndef mapInvertIndex(aList):\n\treturn {k: v for v, k in enumerate(aList)}\n\ndef countMap(arr):\n\tm = {}\n\tfor x in arr:\n\t\tm[x] = m.get(x,0) + 1\n\treturn m\n\ndef sortId(arr):\n\treturn sorted(range(arr), key=lambda k: arr[k])\n\n# MAIN\n\nn, k = ni()\nc = nia()\nf = nia()\nh = nia()\nh.insert(0,0)\n\ncc = countMap(c)\ncf = countMap(f)\n\nn1 = n+1\nk1 = k+1\n\nnk1 = n*k+1\ndp = [[0]*nk1 for _ in range(n1)]\n\n\nfor ni in range(1,n1):\n\tfor ki in range(1,nk1):\n\t\tmficount = min(k,ki) + 1        \n\t\tfor kii in range(mficount):\n\t\t\tdp[ni][ki] = max(dp[ni][ki], dp[ni-1][ki-kii] + h[kii])\n\n\nres = 0\n\n\nfor fk,fv in cf.items():\n\tres += dp[fv][cc.get(fk,0)]\n\nprint(res)\n", "import math\nfrom collections import defaultdict\n\n\ndef main():\n\tn, k = list(map(int, input().split()))\n\tcards = list(map(int, input().split()))\n\tfav = list(map(int, input().split()))\n\n\th = [0] + list(map(int, input().split()))\n\n\tcards_cnt = defaultdict(int)\n\tfor val in cards:\n\t\tcards_cnt[val] += 1\n\n\tplayers_fav_cnt = defaultdict(int)\n\tfor val in fav:\n\t\tplayers_fav_cnt[val] += 1\n\n\t# dp[a][b] - a players, b favourite cards (in total)\n\tdp = [[0 for _ in range(k*n+k+1)] for _ in range(n+1)]\n\tfor p in range(n):\n\t\tfor c in range(k*n+1):\n\t\t\tfor hand in range(k+1):\n\t\t\t\tdp[p+1][c+hand] = max(dp[p+1][c+hand], dp[p][c] + h[hand])\n\n\tres = 0\n\tfor f in players_fav_cnt:\n\t\tres += dp[players_fav_cnt[f]][cards_cnt[f]]\n\n\tprint(res)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "def solve():\n\tn, k = list(map(int, input().split()))\n\tc = list(map(int, input().split()))\n\tf = list(map(int, input().split()))\n\th = list(map(int, input().split()))\n\tcnt = {}\n\tfor i in c:\n\t\tcnt[i] = cnt.get(i, 0) + 1\n\tlikecolor = {}\n\tfor i in range(n):\n\t\tlikecolor.setdefault(f[i], []).append(i)\n\t\tcnt[f[i]] = cnt.get(f[i], 0)\n\tans = 0\n\tfor key, v in list(likecolor.items()):\n\t\tn1 = len(v)\n\t\tif cnt[key] >= n1 * k:\n\t\t\tans += n1 * h[k - 1]\n\t\t\tcontinue\n\t\tdp = [[-float(\"INF\")] * (cnt[key]+1) for _ in range(n1 + 1)]\n\t\tdp[0][0] = 0\n\t\tfor i in range(n1):\n\t\t\tj = i + 1\n\t\t\tfor e in range(cnt[key] + 1):\n\t\t\t\tdp[j][e] = max(dp[j][e], dp[i][e])\n\t\t\t\tfor w in range(e + 1, min(cnt[key] + 1, e + k + 1)):\n\t\t\t\t\tdp[j][w] = max(dp[i][e] + h[w - e - 1], dp[j][w])\n\t\tans += dp[n1][cnt[key]]\n\tprint(ans)\n\n\nsolve()\n"], "id": "id9441"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9441", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["there", 0], ["are", 0], ["n", 0], ["players", 1], ["sitting", 1], ["at", 1], ["the", 1], ["card", 1], ["table", 0], ["each", 0], ["player", 0], ["has", 0], ["a", 0], ["favorite", 0], ["number", 0], ["the", 0], ["favorite", 0], ["number", 0], ["of", 0], ["the", 0], ["j", 0], ["th", 0], ["player", 0], ["is", 0], ["f", 0], ["j", 0], ["there", 0], ["are", 0], ["k", 0], ["cdot", 0], ["n", 0], ["cards", 0], ["on", 0], ["the", 0], ["table", 0], ["each", 0], ["card", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["the", 0], ["i", 0], ["th", 0], ["card", 0], ["contains", 0], ["number", 0], ["c", 0], ["i", 0], ["also", 0], ["you", 0], ["are", 0], ["given", 0], ["a", 0], ["sequence", 0], ["h", 0], ["1", 0], ["h", 0], ["2", 0], ["dots", 0], ["h", 0], ["k", 0], ["its", 1], ["meaning", 1], ["will", 1], ["be", 1], ["explained", 1], ["below", 1], ["the", 1], ["players", 1], ["have", 1], ["to", 1], ["distribute", 1], ["all", 1], ["the", 1], ["cards", 0], ["in", 0], ["such", 0], ["a", 0], ["way", 0], ["that", 0], ["each", 0], ["of", 0], ["them", 0], ["will", 0], ["hold", 0], ["exactly", 0], ["k", 0], ["cards", 1], ["after", 1], ["all", 1], ["the", 1], ["cards", 1], ["are", 1], ["distributed", 1], ["each", 1], ["player", 1], ["counts", 1], ["the", 1], ["number", 1], ["of", 1], ["cards", 1], ["he", 1], ["has", 1], ["that", 0], ["contains", 0], ["his", 0], ["favorite", 0], ["number", 0], ["the", 0], ["joy", 0], ["level", 0], ["of", 0], ["a", 0], ["player", 0], ["equals", 0], ["h", 0], ["t", 0], ["if", 0], ["the", 0], ["player", 0], ["holds", 0], ["t", 0], ["cards", 1], ["containing", 1], ["his", 1], ["favorite", 1], ["number", 1], ["if", 1], ["a", 0], ["player", 0], ["gets", 0], ["no", 0], ["cards", 0], ["with", 0], ["his", 0], ["favorite", 0], ["number", 0], ["i", 0], ["e", 0], ["t", 0], ["0", 0], ["his", 0], ["joy", 0], ["level", 0], ["is", 0], ["0", 0], ["print", 1], ["the", 1], ["maximum", 1], ["possible", 1], ["total", 1], ["joy", 1], ["levels", 1], ["of", 0], ["the", 0], ["players", 0], ["after", 0], ["the", 0], ["cards", 0], ["are", 0], ["distributed", 0], ["note", 0], ["that", 0], ["the", 0], ["sequence", 0], ["h", 0], ["1", 0], ["dots", 0], ["h", 0], ["k", 0], ["is", 0], ["the", 0], ["same", 0], ["for", 0], ["all", 0], ["the", 0], ["players", 0], ["input", 0], ["the", 1], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["two", 0], ["integers", 0], ["n", 0], ["and", 0], ["k", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["500", 0], ["1", 0], ["le", 0], ["k", 0], ["le", 0], ["10", 0], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["players", 1], ["and", 1], ["the", 0], ["number", 0], ["of", 0], ["cards", 0], ["each", 0], ["player", 0], ["will", 0], ["get", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["k", 0], ["cdot", 0], ["n", 0], ["integers", 0], ["c", 0], ["1", 0], ["c", 0], ["2", 0], ["dots", 0], ["c", 0], ["k", 0], ["cdot", 0], ["n", 0], ["1", 0], ["le", 0], ["c", 0], ["i", 0], ["le", 0], ["10", 0], ["5", 0], ["—", 0], ["the", 0], ["numbers", 0], ["written", 0], ["on", 0], ["the", 0], ["cards", 0], ["the", 0], ["third", 0], ["line", 0], ["contains", 0], ["n", 0], ["integers", 0], ["f", 0], ["1", 0], ["f", 0], ["2", 0], ["dots", 0], ["f", 0], ["n", 0], ["1", 0], ["le", 0], ["f", 0], ["j", 0], ["le", 0], ["10", 0], ["5", 0], ["—", 0], ["the", 0], ["favorite", 0], ["numbers", 0], ["of", 0], ["the", 0], ["players", 0], ["the", 0], ["fourth", 0], ["line", 0], ["contains", 0], ["k", 0], ["integers", 0], ["h", 0], ["1", 0], ["h", 0], ["2", 0], ["dots", 0], ["h", 0], ["k", 0], ["1", 0], ["le", 0], ["h", 0], ["t", 0], ["le", 0], ["10", 0], ["5", 0], ["where", 0], ["h", 0], ["t", 0], ["is", 0], ["the", 0], ["joy", 0], ["level", 0], ["of", 0], ["a", 0], ["player", 0], ["if", 0], ["he", 0], ["gets", 0], ["exactly", 0], ["t", 0], ["cards", 1], ["with", 1], ["his", 0], ["favorite", 0], ["number", 0], ["written", 0], ["on", 0], ["them", 0], ["it", 0], ["is", 0], ["guaranteed", 0], ["that", 0], ["the", 0], ["condition", 0], ["h", 0], ["t", 0], ["1", 0], ["h", 0], ["t", 0], ["holds", 0], ["for", 0], ["each", 0], ["t", 0], ["in", 0], ["2", 0], ["k", 0], ["output", 0], ["print", 1], ["one", 1], ["integer", 1], ["—", 1], ["the", 1], ["maximum", 1], ["possible", 0], ["total", 0], ["joy", 0], ["levels", 0], ["of", 0], ["the", 0], ["players", 0], ["among", 0], ["all", 0], ["possible", 0], ["card", 0], ["distributions", 0], ["examples", 0], ["input", 0], ["4", 0], ["3", 0], ["1", 0], ["3", 0], ["2", 0], ["8", 0], ["5", 0], ["5", 0], ["8", 0], ["2", 0], ["2", 0], ["8", 0], ["5", 0], ["2", 0], ["1", 0], ["2", 0], ["2", 0], ["5", 0], ["2", 0], ["6", 0], ["7", 0], ["output", 0], ["21", 0], ["input", 0], ["3", 0], ["3", 0], ["9", 0], ["9", 0], ["9", 0], ["9", 0], ["9", 0], ["9", 0], ["9", 0], ["9", 0], ["9", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["output", 0], ["0", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["example", 0], ["one", 0], ["possible", 0], ["optimal", 0], ["card", 0], ["distribution", 0], ["is", 0], ["the", 0], ["following", 0], ["player", 0], ["1", 0], ["gets", 0], ["cards", 0], ["with", 0], ["numbers", 0], ["1", 0], ["3", 0], ["8", 0], ["player", 0], ["2", 0], ["gets", 0], ["cards", 0], ["with", 0], ["numbers", 0], ["2", 0], ["2", 0], ["8", 0], ["player", 0], ["3", 0], ["gets", 0], ["cards", 0], ["with", 0], ["numbers", 0], ["2", 0], ["2", 0], ["8", 0], ["player", 0], ["4", 0], ["gets", 0], ["cards", 0], ["with", 0], ["numbers", 0], ["5", 0], ["5", 0], ["5", 0], ["thus", 0], ["the", 0], ["answer", 0], ["is", 0], ["2", 0], ["6", 1], ["6", 1], ["7", 1], ["21", 1], ["in", 1], ["the", 1], ["second", 1], ["example", 1], ["no", 1], ["player", 1], ["can", 0], ["get", 0], ["a", 0], ["card", 0], ["with", 0], ["his", 0], ["favorite", 0], ["number", 0], ["thus", 0], ["the", 0], ["answer", 0], ["is", 0], ["0", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1522198731501057, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1522198731501057, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.3958762886597938, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3958762886597938, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1522198731501057, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1522198731501057, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.3958762886597938, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3958762886597938, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["os", 0], ["path", 0], ["config", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["log", 0], ["def", 0], ["log", 0], ["args", 0], ["kwargs", 0], ["print", 0], ["args", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["kwargs", 0], ["input", 0], ["def", 0], ["ni", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["nio", 0], ["offset", 0], ["return", 0], ["int", 0], ["x", 0], ["offset", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["nia", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["convert", 0], ["def", 0], ["tostring", 0], ["alist", 0], ["sep", 0], ["return", 0], ["sep", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["alist", 0], ["def", 0], ["mapinvertindex", 0], ["alist", 0], ["return", 0], ["k", 0], ["v", 0], ["for", 0], ["v", 0], ["k", 0], ["in", 0], ["enumerate", 0], ["alist", 0], ["def", 0], ["countmap", 0], ["arr", 0], ["m", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["m", 0], ["x", 0], ["m", 0], ["get", 0], ["x", 0], ["0", 0], ["1", 0], ["return", 0], ["m", 0], ["def", 0], ["sortid", 0], ["arr", 0], ["return", 0], ["sorted", 0], ["list", 0], ["range", 0], ["arr", 0], ["key", 0], ["lambda", 0], ["k", 0], ["arr", 0], ["k", 0], ["main", 0], ["n", 0], ["k", 0], ["ni", 0], ["c", 0], ["nia", 0], ["f", 0], ["nia", 0], ["h", 0], ["0", 0], ["nia", 0], ["cc", 0], ["countmap", 0], ["c", 0], ["cf", 0], ["countmap", 0], ["f", 0], ["n1", 0], ["n", 0], ["1", 0], ["k1", 0], ["k", 0], ["1", 0], ["nk1", 0], ["n", 0], ["k", 0], ["1", 0], ["dp", 0], ["0", 0], ["nk1", 0], ["for", 0], ["in", 0], ["range", 0], ["n1", 0], ["for", 0], ["ni", 0], ["in", 0], ["range", 0], ["1", 0], ["n1", 0], ["for", 0], ["ki", 0], ["in", 0], ["range", 0], ["1", 0], ["nk1", 0], ["mficount", 0], ["min", 0], ["k", 0], ["ki", 0], ["1", 0], ["for", 0], ["kii", 0], ["in", 0], ["range", 0], ["mficount", 0], ["log", 0], ["ni", 0], ["ki", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["max", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["log", 0], ["dp", 0], ["ni", 0], ["log", 0], ["n", 0], ["k", 0], ["log", 0], ["c", 0], ["cc", 0], ["log", 0], ["f", 0], ["cf", 0], ["log", 0], ["h", 0], ["h", 0], ["log", 0], ["dp", 0], ["res", 0], ["0", 0], ["for", 0], ["fk", 0], ["fv", 0], ["in", 0], ["list", 0], ["cf", 0], ["items", 0], ["log", 0], ["fk", 0], ["fv", 0], ["cc", 0], ["get", 0], ["fk", 0], ["0", 0], ["res", 0], ["dp", 0], ["fv", 0], ["cc", 0], ["get", 0], ["fk", 0], ["0", 0], ["print", 0], ["res", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["os", 0], ["path", 0], ["config", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["log", 0], ["def", 0], ["log", 0], ["args", 0], ["kwargs", 0], ["print", 0], ["args", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["kwargs", 0], ["input", 0], ["def", 0], ["ni", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["nio", 0], ["offset", 0], ["return", 0], ["int", 0], ["x", 0], ["offset", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["nia", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["convert", 0], ["def", 0], ["tostring", 0], ["alist", 0], ["sep", 0], ["return", 0], ["sep", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["alist", 0], ["def", 0], ["mapinvertindex", 0], ["alist", 0], ["return", 0], ["k", 0], ["v", 0], ["for", 0], ["v", 0], ["k", 0], ["in", 0], ["enumerate", 0], ["alist", 0], ["def", 0], ["countmap", 0], ["arr", 0], ["m", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["m", 0], ["x", 0], ["m", 0], ["get", 0], ["x", 0], ["0", 0], ["1", 0], ["return", 0], ["m", 0], ["def", 0], ["sortid", 0], ["arr", 0], ["return", 0], ["sorted", 0], ["list", 0], ["range", 0], ["arr", 0], ["key", 0], ["lambda", 0], ["k", 0], ["arr", 0], ["k", 0], ["main", 0], ["n", 0], ["k", 0], ["ni", 0], ["c", 0], ["nia", 0], ["f", 0], ["nia", 0], ["h", 0], ["0", 0], ["h", 0], ["extend", 0], ["nia", 0], ["cc", 0], ["countmap", 0], ["c", 0], ["cf", 0], ["countmap", 0], ["f", 0], ["n1", 0], ["n", 0], ["1", 0], ["k1", 0], ["k", 0], ["1", 0], ["nk1", 0], ["n", 0], ["k", 0], ["1", 0], ["dp", 0], ["0", 0], ["nk1", 0], ["for", 0], ["in", 0], ["range", 0], ["n1", 0], ["for", 0], ["ni", 0], ["in", 0], ["range", 0], ["1", 0], ["n1", 0], ["for", 0], ["ki", 0], ["in", 0], ["range", 0], ["1", 0], ["nk1", 0], ["mficount", 0], ["min", 0], ["k", 0], ["ki", 0], ["1", 0], ["for", 0], ["kii", 0], ["in", 0], ["range", 0], ["mficount", 0], ["log", 0], ["ni", 0], ["ki", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["max", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["log", 0], ["dp", 0], ["ni", 0], ["log", 0], ["n", 0], ["k", 0], ["log", 0], ["c", 0], ["cc", 0], ["log", 0], ["f", 0], ["cf", 0], ["log", 0], ["h", 0], ["h", 0], ["log", 0], ["dp", 0], ["res", 0], ["0", 0], ["for", 0], ["fk", 0], ["fv", 0], ["in", 0], ["list", 0], ["cf", 0], ["items", 0], ["log", 0], ["fk", 0], ["fv", 0], ["cc", 0], ["get", 0], ["fk", 0], ["0", 0], ["res", 0], ["dp", 0], ["fv", 0], ["cc", 0], ["get", 0], ["fk", 0], ["0", 0], ["print", 0], ["res", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["os", 0], ["path", 0], ["config", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["log", 0], ["def", 0], ["log", 0], ["args", 0], ["kwargs", 0], ["print", 0], ["args", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["kwargs", 0], ["input", 0], ["def", 0], ["ni", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["nio", 0], ["offset", 0], ["return", 0], ["int", 0], ["x", 0], ["offset", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["nia", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["convert", 0], ["def", 0], ["tostring", 0], ["alist", 0], ["sep", 0], ["return", 0], ["sep", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["alist", 0], ["def", 0], ["mapinvertindex", 0], ["alist", 0], ["return", 0], ["k", 0], ["v", 0], ["for", 0], ["v", 0], ["k", 0], ["in", 0], ["enumerate", 0], ["alist", 0], ["def", 0], ["countmap", 0], ["arr", 0], ["m", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["m", 0], ["x", 0], ["m", 0], ["get", 0], ["x", 0], ["0", 0], ["1", 0], ["return", 0], ["m", 0], ["def", 0], ["sortid", 0], ["arr", 0], ["return", 0], ["sorted", 0], ["list", 0], ["range", 0], ["arr", 0], ["key", 0], ["lambda", 0], ["k", 0], ["arr", 0], ["k", 0], ["main", 0], ["n", 0], ["k", 0], ["ni", 0], ["c", 0], ["nia", 0], ["f", 0], ["nia", 0], ["h", 0], ["nia", 0], ["h", 0], ["insert", 0], ["0", 0], ["0", 0], ["cc", 0], ["countmap", 0], ["c", 0], ["cf", 0], ["countmap", 0], ["f", 0], ["n1", 0], ["n", 0], ["1", 0], ["k1", 0], ["k", 0], ["1", 0], ["nk1", 0], ["n", 0], ["k", 0], ["1", 0], ["dp", 0], ["0", 0], ["nk1", 0], ["for", 0], ["in", 0], ["range", 0], ["n1", 0], ["for", 0], ["ni", 0], ["in", 0], ["range", 0], ["1", 0], ["n1", 0], ["for", 0], ["ki", 0], ["in", 0], ["range", 0], ["1", 0], ["nk1", 0], ["mficount", 0], ["min", 0], ["k", 0], ["ki", 0], ["1", 0], ["for", 0], ["kii", 0], ["in", 0], ["range", 0], ["mficount", 0], ["log", 0], ["ni", 0], ["ki", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["max", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["log", 0], ["dp", 0], ["ni", 0], ["log", 0], ["n", 0], ["k", 0], ["log", 0], ["c", 0], ["cc", 0], ["log", 0], ["f", 0], ["cf", 0], ["log", 0], ["h", 0], ["h", 0], ["log", 0], ["dp", 0], ["res", 0], ["0", 0], ["for", 0], ["fk", 0], ["fv", 0], ["in", 0], ["list", 0], ["cf", 0], ["items", 0], ["log", 0], ["fk", 0], ["fv", 0], ["cc", 0], ["get", 0], ["fk", 0], ["0", 0], ["res", 0], ["dp", 0], ["fv", 0], ["cc", 0], ["get", 0], ["fk", 0], ["0", 0], ["print", 0], ["res", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["os", 0], ["path", 0], ["config", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["log", 0], ["def", 0], ["log", 0], ["args", 0], ["kwargs", 0], ["print", 0], ["args", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["kwargs", 0], ["input", 0], ["def", 0], ["ni", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["nio", 0], ["offset", 0], ["return", 0], ["int", 0], ["x", 0], ["offset", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["nia", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["convert", 0], ["def", 0], ["tostring", 0], ["alist", 0], ["sep", 0], ["return", 0], ["sep", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["alist", 0], ["def", 0], ["mapinvertindex", 0], ["alist", 0], ["return", 0], ["k", 0], ["v", 0], ["for", 0], ["v", 0], ["k", 0], ["in", 0], ["enumerate", 0], ["alist", 0], ["def", 0], ["sortid", 0], ["arr", 0], ["return", 0], ["sorted", 0], ["list", 0], ["range", 0], ["arr", 0], ["key", 0], ["lambda", 0], ["k", 0], ["arr", 0], ["k", 0], ["main", 0], ["n", 0], ["k", 0], ["ni", 0], ["c", 0], ["nia", 0], ["f", 0], ["nia", 0], ["h", 0], ["nia", 0], ["h", 0], ["insert", 0], ["0", 0], ["0", 0], ["cc", 0], ["counter", 0], ["c", 0], ["cf", 0], ["counter", 0], ["f", 0], ["n1", 0], ["n", 0], ["1", 0], ["k1", 0], ["k", 0], ["1", 0], ["nk1", 0], ["n", 0], ["k", 0], ["1", 0], ["dp", 0], ["0", 0], ["nk1", 0], ["for", 0], ["in", 0], ["range", 0], ["n1", 0], ["for", 0], ["ni", 0], ["in", 0], ["range", 0], ["1", 0], ["n1", 0], ["for", 0], ["ki", 0], ["in", 0], ["range", 0], ["1", 0], ["nk1", 0], ["mficount", 0], ["min", 0], ["k", 0], ["ki", 0], ["1", 0], ["for", 0], ["kii", 0], ["in", 0], ["range", 0], ["mficount", 0], ["log", 0], ["ni", 0], ["ki", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["max", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["log", 0], ["dp", 0], ["ni", 0], ["log", 0], ["n", 0], ["k", 0], ["log", 0], ["c", 0], ["cc", 0], ["log", 0], ["f", 0], ["cf", 0], ["log", 0], ["h", 0], ["h", 0], ["log", 0], ["dp", 0], ["res", 0], ["0", 0], ["for", 0], ["fk", 0], ["fv", 0], ["in", 0], ["list", 0], ["cf", 0], ["items", 0], ["log", 0], ["fk", 0], ["fv", 0], ["cc", 0], ["get", 0], ["fk", 0], ["0", 0], ["res", 0], ["dp", 0], ["fv", 0], ["cc", 0], ["get", 0], ["fk", 0], ["0", 0], ["print", 0], ["res", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["os", 0], ["path", 0], ["config", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["log", 0], ["def", 0], ["log", 0], ["args", 0], ["kwargs", 0], ["print", 0], ["args", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["kwargs", 0], ["input", 0], ["def", 0], ["ni", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["nio", 0], ["offset", 0], ["return", 0], ["int", 0], ["x", 0], ["offset", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["nia", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["convert", 0], ["def", 0], ["tostring", 0], ["alist", 0], ["sep", 0], ["return", 0], ["sep", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["alist", 0], ["def", 0], ["mapinvertindex", 0], ["alist", 0], ["return", 0], ["k", 0], ["v", 0], ["for", 0], ["v", 0], ["k", 0], ["in", 0], ["enumerate", 0], ["alist", 0], ["def", 0], ["sortid", 0], ["arr", 0], ["return", 0], ["sorted", 0], ["list", 0], ["range", 0], ["arr", 0], ["key", 0], ["lambda", 0], ["k", 0], ["arr", 0], ["k", 0], ["main", 0], ["n", 0], ["k", 0], ["ni", 0], ["c", 0], ["nia", 0], ["f", 0], ["nia", 0], ["h", 0], ["nia", 0], ["h", 0], ["insert", 0], ["0", 0], ["0", 0], ["cc", 0], ["counter", 0], ["c", 0], ["cf", 0], ["counter", 0], ["f", 0], ["n1", 0], ["n", 0], ["1", 0], ["k1", 0], ["k", 0], ["1", 0], ["nk1", 0], ["n", 0], ["k", 0], ["1", 0], ["dp", 0], ["0", 0], ["nk1", 0], ["for", 0], ["in", 0], ["range", 0], ["n1", 0], ["for", 0], ["ni", 0], ["in", 0], ["range", 0], ["1", 0], ["n1", 0], ["for", 0], ["ki", 0], ["in", 0], ["range", 0], ["1", 0], ["nk1", 0], ["mficount", 0], ["min", 0], ["k", 0], ["ki", 0], ["1", 0], ["for", 0], ["kii", 0], ["in", 0], ["range", 0], ["mficount", 0], ["log", 0], ["ni", 0], ["ki", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["max", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["log", 0], ["dp", 0], ["ni", 0], ["log", 0], ["n", 0], ["k", 0], ["log", 0], ["c", 0], ["cc", 0], ["log", 0], ["f", 0], ["cf", 0], ["log", 0], ["h", 0], ["h", 0], ["log", 0], ["dp", 0], ["res", 0], ["0", 0], ["for", 0], ["fk", 0], ["fv", 0], ["in", 0], ["list", 0], ["cf", 0], ["items", 0], ["log", 0], ["fk", 0], ["fv", 0], ["cc", 0], ["get", 0], ["fk", 0], ["0", 0], ["res", 0], ["dp", 0], ["fv", 0], ["cc", 0], ["fk", 0], ["print", 0], ["res", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["os", 0], ["path", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["def", 0], ["log", 0], ["args", 0], ["kwargs", 0], ["print", 0], ["args", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["kwargs", 0], ["def", 0], ["ni", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["nio", 0], ["offset", 0], ["return", 0], ["map", 0], ["lambda", 0], ["x", 0], ["int", 0], ["x", 0], ["offset", 0], ["input", 0], ["split", 0], ["def", 0], ["nia", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["tostring", 0], ["alist", 0], ["sep", 0], ["return", 0], ["sep", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["alist", 0], ["def", 0], ["mapinvertindex", 0], ["alist", 0], ["return", 0], ["k", 0], ["v", 0], ["for", 0], ["v", 0], ["k", 0], ["in", 0], ["enumerate", 0], ["alist", 0], ["def", 0], ["sortid", 0], ["arr", 0], ["return", 0], ["sorted", 0], ["range", 0], ["arr", 0], ["key", 0], ["lambda", 0], ["k", 0], ["arr", 0], ["k", 0], ["n", 0], ["k", 0], ["ni", 0], ["c", 0], ["nia", 0], ["f", 0], ["nia", 0], ["h", 0], ["nia", 0], ["h", 0], ["insert", 0], ["0", 0], ["0", 0], ["cc", 0], ["counter", 0], ["c", 0], ["cf", 0], ["counter", 0], ["f", 0], ["n1", 0], ["n", 0], ["1", 0], ["k1", 0], ["k", 0], ["1", 0], ["nk1", 0], ["n", 0], ["k", 0], ["1", 0], ["dp", 0], ["0", 0], ["nk1", 0], ["for", 0], ["in", 0], ["range", 0], ["n1", 0], ["for", 0], ["ni", 0], ["in", 0], ["range", 0], ["1", 0], ["n1", 0], ["for", 0], ["ki", 0], ["in", 0], ["range", 0], ["1", 0], ["nk1", 0], ["mficount", 0], ["min", 0], ["k", 0], ["ki", 0], ["1", 0], ["for", 0], ["kii", 0], ["in", 0], ["range", 0], ["mficount", 0], ["log", 0], ["ni", 0], ["ki", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["max", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["res", 0], ["0", 0], ["for", 0], ["fk", 0], ["fv", 0], ["in", 0], ["cf", 0], ["items", 0], ["res", 0], ["dp", 0], ["fv", 0], ["cc", 0], ["fk", 0], ["print", 0], ["res", 0], ["from", 0], ["queue", 0], ["import", 0], ["queue", 0], ["import", 0], ["sys", 0], ["import", 0], ["math", 0], ["import", 0], ["os", 0], ["path", 0], ["sys", 0], ["setrecursionlimit", 0], ["10", 0], ["9", 0], ["def", 0], ["log", 0], ["args", 0], ["kwargs", 0], ["print", 0], ["args", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["kwargs", 0], ["def", 0], ["ni", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["nio", 0], ["offset", 0], ["return", 0], ["map", 0], ["lambda", 0], ["x", 0], ["int", 0], ["x", 0], ["offset", 0], ["input", 0], ["split", 0], ["def", 0], ["nia", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["tostring", 0], ["alist", 0], ["sep", 0], ["return", 0], ["sep", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["alist", 0], ["def", 0], ["mapinvertindex", 0], ["alist", 0], ["return", 0], ["k", 0], ["v", 0], ["for", 0], ["v", 0], ["k", 0], ["in", 0], ["enumerate", 0], ["alist", 0], ["def", 0], ["countmap", 0], ["arr", 0], ["m", 0], ["for", 0], ["x", 0], ["in", 0], ["arr", 0], ["m", 0], ["x", 0], ["m", 0], ["get", 0], ["x", 0], ["0", 0], ["1", 0], ["return", 0], ["m", 0], ["def", 0], ["sortid", 0], ["arr", 0], ["return", 0], ["sorted", 0], ["range", 0], ["arr", 0], ["key", 0], ["lambda", 0], ["k", 0], ["arr", 0], ["k", 0], ["main", 0], ["n", 0], ["k", 0], ["ni", 0], ["c", 0], ["nia", 0], ["f", 0], ["nia", 0], ["h", 0], ["nia", 0], ["h", 0], ["insert", 0], ["0", 0], ["0", 0], ["cc", 0], ["countmap", 0], ["c", 0], ["cf", 0], ["countmap", 0], ["f", 0], ["n1", 0], ["n", 0], ["1", 0], ["k1", 0], ["k", 0], ["1", 0], ["nk1", 0], ["n", 0], ["k", 0], ["1", 0], ["dp", 0], ["0", 0], ["nk1", 0], ["for", 0], ["in", 0], ["range", 0], ["n1", 0], ["for", 0], ["ni", 0], ["in", 0], ["range", 0], ["1", 0], ["n1", 0], ["for", 0], ["ki", 0], ["in", 0], ["range", 0], ["1", 0], ["nk1", 0], ["mficount", 0], ["min", 0], ["k", 0], ["ki", 0], ["1", 0], ["for", 0], ["kii", 0], ["in", 0], ["range", 0], ["mficount", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["max", 0], ["dp", 0], ["ni", 0], ["ki", 0], ["dp", 0], ["ni", 0], ["1", 0], ["ki", 0], ["kii", 0], ["h", 0], ["kii", 0], ["res", 0], ["0", 0], ["for", 0], ["fk", 0], ["fv", 0], ["in", 0], ["cf", 0], ["items", 0], ["res", 0], ["dp", 0], ["fv", 0], ["cc", 0], ["get", 0], ["fk", 0], ["0", 0], ["print", 0], ["res", 0], ["import", 0], ["math", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["def", 0], ["main", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cards", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["fav", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cards", 0], ["cnt", 0], ["defaultdict", 0], ["int", 0], ["for", 0], ["val", 0], ["in", 0], ["cards", 0], ["cards", 0], ["cnt", 0], ["val", 0], ["1", 0], ["players", 0], ["fav", 0], ["cnt", 0], ["defaultdict", 0], ["int", 0], ["for", 0], ["val", 0], ["in", 0], ["fav", 0], ["players", 0], ["fav", 0], ["cnt", 0], ["val", 0], ["1", 0], ["dp", 0], ["a", 0], ["b", 0], ["a", 0], ["players", 0], ["b", 0], ["favourite", 0], ["cards", 0], ["in", 0], ["total", 0], ["dp", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["n", 0], ["k", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["p", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["c", 0], ["in", 0], ["range", 0], ["k", 0], ["n", 0], ["1", 0], ["for", 0], ["hand", 0], ["in", 0], ["range", 0], ["k", 0], ["1", 0], ["dp", 0], ["p", 0], ["1", 0], ["c", 0], ["hand", 0], ["max", 0], ["dp", 0], ["p", 0], ["1", 0], ["c", 0], ["hand", 0], ["dp", 0], ["p", 0], ["c", 0], ["h", 0], ["hand", 0], ["res", 0], ["0", 0], ["for", 0], ["f", 0], ["in", 0], ["players", 0], ["fav", 0], ["cnt", 0], ["res", 0], ["dp", 0], ["players", 0], ["fav", 0], ["cnt", 0], ["f", 0], ["cards", 0], ["cnt", 0], ["f", 0], ["print", 0], ["res", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cnt", 0], ["for", 0], ["i", 0], ["in", 0], ["c", 0], ["cnt", 0], ["i", 0], ["cnt", 0], ["get", 0], ["i", 0], ["0", 0], ["1", 0], ["likecolor", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["likecolor", 0], ["setdefault", 0], ["f", 0], ["i", 0], ["append", 0], ["i", 0], ["cnt", 0], ["f", 0], ["i", 0], ["cnt", 0], ["get", 0], ["f", 0], ["i", 0], ["0", 0], ["ans", 0], ["0", 0], ["for", 0], ["key", 0], ["v", 0], ["in", 0], ["list", 0], ["likecolor", 0], ["items", 0], ["n1", 0], ["len", 0], ["v", 0], ["if", 0], ["cnt", 0], ["key", 0], ["n1", 0], ["k", 0], ["ans", 0], ["n1", 0], ["h", 0], ["k", 0], ["1", 0], ["continue", 0], ["dp", 0], ["float", 0], ["inf", 0], ["cnt", 0], ["key", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["n1", 0], ["1", 0], ["dp", 0], ["0", 0], ["0", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n1", 0], ["j", 0], ["i", 0], ["1", 0], ["for", 0], ["e", 0], ["in", 0], ["range", 0], ["cnt", 0], ["key", 0], ["1", 0], ["dp", 0], ["j", 0], ["e", 0], ["max", 0], ["dp", 0], ["j", 0], ["e", 0], ["dp", 0], ["i", 0], ["e", 0], ["for", 0], ["w", 0], ["in", 0], ["range", 0], ["e", 0], ["1", 0], ["min", 0], ["cnt", 0], ["key", 0], ["1", 0], ["e", 0], ["k", 0], ["1", 0], ["dp", 0], ["j", 0], ["w", 0], ["max", 0], ["dp", 0], ["i", 0], ["e", 0], ["h", 0], ["w", 0], ["e", 0], ["1", 0], ["dp", 0], ["j", 0], ["w", 0], ["ans", 0], ["dp", 0], ["n1", 0], ["cnt", 0], ["key", 0], ["print", 0], ["ans", 0], ["solve", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nNicholas has an array a that contains n distinct integers from 1 to n. In other words, Nicholas has a permutation of size n.\n\nNicholas want the minimum element (integer 1) and the maximum element (integer n) to be as far as possible from each other. He wants to perform exactly one swap in order to maximize the distance between the minimum and the maximum elements. The distance between two elements is considered to be equal to the absolute difference between their positions.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 100) — the size of the permutation.\n\nThe second line of the input contains n distinct integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ n), where a_{i} is equal to the element at the i-th position.\n\n\n-----Output-----\n\nPrint a single integer — the maximum possible distance between the minimum and the maximum elements Nicholas can achieve by performing exactly one swap.\n\n\n-----Examples-----\nInput\n5\n4 5 1 3 2\n\nOutput\n3\n\nInput\n7\n1 6 5 3 4 7 2\n\nOutput\n6\n\nInput\n6\n6 5 4 3 2 1\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample, one may obtain the optimal answer by swapping elements 1 and 2.\n\nIn the second sample, the minimum and the maximum elements will be located in the opposite ends of the array if we swap 7 and 2.\n\nIn the third sample, the distance between the minimum and the maximum elements is already maximum possible, so we just perform some unnecessary swap, for example, one can swap 5 and 2.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["read = lambda: list(map(int, input().split()))\nn = int(input())\na = list(read())\nx, y = a.index(1), a.index(n)\nans = max(x, y, n - x - 1, n - y - 1)\nprint(ans)\n", "n = int(input())\na = list(map(int, input().split()))\ni, j = sorted([a.index(1), a.index(n)])\nprint(max(j, n - i - 1))\n", "n = int(input())\nL = list(map(int, input().split()))\nma = L.index(n)\nmi = L.index(1)\nif n == 2:\n\tprint(1)\nelse:\n\tprint(n-1-min(ma,mi,n-1-ma,n-1-mi))\n", "from sys import *\ninp = lambda : stdin.readline()\n\ndef main():\n\tn = int(inp())\n\ta,b = 0,0\n\tl = [int(i) for i in inp().split()]\n\tfor i in range(len(l)):\n\t\tif l[i] == 1:\n\t\t\ta = i\n\t\tif l[i] == n:\n\t\t\tb = i\n\tif a > b:\n\t\ta,b = b,a\n\tans = max(n-1-a,b)\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n = int(input())\na = list(map(int,input().split()))\nx = a.index(min(a))\ny = a.index(max(a))\n\nprint(max(x, y, n-x-1, n-y-1))\n", "n = int(input())\n\narr = list(map(int, input().split()))\n\nx, y = arr.index(max(arr)), arr.index(min(arr))\n\nprint(max(n - 1 - x, n - 1 - y, x, y))\n", "n = int(input())\na = [int(x) for x in input().split()]\nc1, c2 = -1, -1\nfor i in range(n):\n\tif a[i] == 1:\n\t\tc1 = i\n\tif a[i] == n:\n\t\tc2 = i\n\nprint(max(abs(c1 - c2), c1, c2, n - 1 - c1, n - 1 - c2))\n", "n = int(input())\na = list(map(int, input().split()))\npos1 = a.index(1) + 1\nposn = a.index(n) + 1\n\nres = abs(pos1 - posn)\nres = max(res, abs(1 - pos1))\nres = max(res, abs(n - pos1))\nres = max(res, abs(1 - posn))\nres = max(res, abs(n - posn))\n\nprint(res)\n", "n=int(input())\nl=list(map(int,input().split()))\nmi=l.index(1)+1\nma=l.index(n)+1\nprint(max(abs(mi-1),abs(mi-n),abs(ma-1),abs(ma-n)))\n", "n = int(input())\nl = list(map(int, input().split()))\n\nprint(max(abs(1 - (l.index(n) + 1)), abs(n - (l.index(n) + 1)), abs(n - (l.index(1) + 1)), abs(1 - (l.index(1) + 1))))\n", "n = int(input())\nl = 0\nr = 0\na = list(map(int,input().split()))\nfor i in range(n):\n\tif a[i] == 1:\n\t\tl = i+1\n\telif a[i] == n:\n\t\tr = i+1\nprint(max(l-1,r-1,n-l,n-r))\n", "n = int(input())\narr = [int(x) for x in input().split()]\nans = 0\nfor i in range(n):\n\tfor j in range(i):\n\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\tmini = min(arr)\n\t\tpos_mini = arr.index(mini)\n\t\tmaxi = max(arr)\n\t\tpos_maxi = arr.index(maxi)\n\t\t\n\t\tans = max(ans, abs(pos_maxi-pos_mini))\n\t\tarr[i], arr[j] = arr[j], arr[i]\nprint(ans)\n", "n = int(input())\nnums = [int(_) for _ in input().split()]\n\na = nums.index(1)\nb = nums.index(n)\nprint(max(a, n-1-a, b, n-1-b))\n", "def dist(l):\n\treturn abs(l.index(1) - l.index(len(l)))\n\n\nn = int(input())\nl = list(map(int, input().split()))\none_ind = l.index(1)\nn_ind = l.index(n)\nd = dist(l)\nfor x in [one_ind, n_ind]:\n\tl[x], l[0] = l[0], l[x]\n\td = max(d, dist(l))\n\tl[x], l[0] = l[0], l[x]\n\n\tl[x], l[-1] = l[-1], l[x]\n\td = max(d, dist(l))\n\tl[x], l[-1] = l[-1], l[x]\n\nprint(d)\n\n\n", "n = int(input())\nai = list(map(int,input().split()))\nmini = 0\nmaxi = 0\nfor i in range(n):\n\tif ai[i] == n:\n\t\tmaxi = i\n\tif ai[i] == 1:\n\t\tmini = i\nprint(max(maxi,mini,n-maxi-1,n-mini-1))\n", "n = int(input())\n\nL = list(map(int, input().split()))\nindex1, index2 = L.index(1), L.index(n)\nif index1 > index2 :\n\tindex1, index2 = index2, index1\n\nd = index2 - index1\nd = max(d, n - 1 - index1)\nd = max(d, index2)\n\nprint(d)\n", "n = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(n):\n\tif a[i]==1: vt1=i\n\tif a[i]==n: vtn=i\n\t\nprint(max(abs(0-vtn), abs(0-vt1), abs(n-vt1-1), abs(n-vtn-1)))\n", "n = int(input())\ndata = list(map(int, input().split()))\nindexmax = data.index(max(data))\nindexmin = data.index(min(data))\nprint(max(indexmax, indexmin, n - indexmax - 1, n - indexmin - 1))\n", "n = int(input())\na = [int(x) for x in input().split()]\npos1 = 0\npos2 = 0\nfor i in range(n):\n\tif (a[i] == 1 or a[i] == n) :\n\t\tpos1 = i\n\t\tbreak\n\nfor i in range(pos1 + 1,n):\n\tif (a[i] == 1 or a[i] == n):\n\t\tpos2 = i\n\t\tbreak\n\nprint(pos2 - pos1 + max(n - pos2 - 1,pos1))\n", "n = int(input())\nl = list(map(int, input().split()))\n\nidx_min = l.index(1)\nidx_max = l.index(n)\n\narr = []\narr.append(abs(0 - idx_max))\narr.append(abs(n - 1 - idx_max))\narr.append(abs(0 - idx_min))\narr.append(abs(n - 1 - idx_min))\n\nprint(max(arr))\n", "import sys,math\nn=int(input())\nz=list(map(int,input().split()))\nf=0\nd=0\nfor i in range(n):\n\tif z[i]==1:\n\t\tf=i\n\tif z[i]==n:\n\t\td=i\nbst=0\nif math.fabs(d-f)==n-1:\n\tprint(n-1)\n\treturn\nbst=max(math.fabs(d),math.fabs(f), math.fabs(n-1-f), math.fabs(n-1-d))\nprint(int(bst))\n", "n = int(input())\nA = list(map(int, input().split()))\nmini = 0\nmaxi = 0\nmaxim = 0\nminim = 10 ** 10\nfor i in range(n):\n\tif A[i] > maxim:\n\t\tmaxim = A[i]\n\t\tmaxi = i\n\tif A[i] < minim:\n\t\tminim = A[i]\n\t\tmini = i\na = abs(n - mini - 1)\nb = abs(0 - mini)\nc = abs(n - maxi - 1)\nd = abs(0 - maxi)\nprint(max(a, b, c, d))\n", "n = int(input())\na = list(map(int, input().split()))\n\nfor i in range(n):\n\tif a[i] == 1:\n\t\tp1 = i\n\tif a[i] == n:\n\t\tpn = i\n\nprint(max(abs(p1-pn), p1, pn, abs(n - 1 - p1), abs(n - 1 - pn)))\n", "n = int(input())\na = list(map(int, input().split()))\nmx = max(a)\nmn = min(a)\nfor i in range(len(a)):\n\tif a[i] == mn:\n\t\ti_min = i\n\tif a[i] == mx:\n\t\ti_max = i\nprint(max(i_max, i_min, len(a) - i_max - 1, len(a) - i_min - 1))\n", "n = int(input())\na = list(map(int,input().split()))\np1 = a.index(1)\np2 = a.index(n)\nop = min(p1-0, n-p1-1, p2-0, n-p2-1)\nprint(n-op-1)\n"], "id": "id7612"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7612", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["nicholas", 2], ["has", 2], ["an", 2], ["array", 2], ["a", 2], ["that", 2], ["contains", 2], ["n", 2], ["distinct", 2], ["integers", 2], ["from", 2], ["1", 2], ["to", 2], ["n", 2], ["in", 2], ["other", 2], ["words", 2], ["nicholas", 2], ["has", 2], ["a", 2], ["permutation", 2], ["of", 2], ["size", 2], ["n", 2], ["nicholas", 2], ["want", 2], ["the", 2], ["minimum", 2], ["element", 2], ["integer", 2], ["1", 2], ["and", 2], ["the", 2], ["maximum", 2], ["element", 2], ["integer", 2], ["n", 2], ["to", 2], ["be", 2], ["as", 2], ["far", 2], ["as", 2], ["possible", 2], ["from", 2], ["each", 2], ["other", 2], ["he", 2], ["wants", 2], ["to", 2], ["perform", 2], ["exactly", 2], ["one", 2], ["swap", 2], ["in", 2], ["order", 2], ["to", 2], ["maximize", 2], ["the", 2], ["distance", 2], ["between", 2], ["the", 2], ["minimum", 2], ["and", 2], ["the", 2], ["maximum", 2], ["elements", 2], ["the", 2], ["distance", 2], ["between", 2], ["two", 2], ["elements", 2], ["is", 0], ["considered", 0], ["to", 0], ["be", 0], ["equal", 0], ["to", 0], ["the", 0], ["absolute", 0], ["difference", 0], ["between", 0], ["their", 0], ["positions", 0], ["input", 0], ["the", 10], ["first", 10], ["line", 12], ["of", 5], ["the", 2], ["input", 3], ["contains", 3], ["a", 3], ["single", 3], ["integer", 2], ["n", 2], ["2", 2], ["≤", 2], ["n", 2], ["≤", 2], ["100", 2], ["—", 2], ["the", 2], ["size", 2], ["of", 2], ["the", 0], ["permutation", 0], ["the", 0], ["second", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["n", 0], ["distinct", 0], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["n", 0], ["where", 0], ["a", 0], ["i", 0], ["is", 0], ["equal", 0], ["to", 0], ["the", 0], ["element", 0], ["at", 0], ["the", 0], ["i", 0], ["th", 0], ["position", 0], ["output", 0], ["print", 2], ["a", 2], ["single", 2], ["integer", 2], ["—", 2], ["the", 2], ["maximum", 2], ["possible", 2], ["distance", 2], ["between", 2], ["the", 2], ["minimum", 2], ["and", 0], ["the", 0], ["maximum", 0], ["elements", 0], ["nicholas", 0], ["can", 0], ["achieve", 0], ["by", 0], ["performing", 0], ["exactly", 0], ["one", 0], ["swap", 0], ["examples", 0], ["input", 0], ["5", 0], ["4", 0], ["5", 0], ["1", 0], ["3", 0], ["2", 0], ["output", 0], ["3", 0], ["input", 0], ["7", 0], ["1", 0], ["6", 0], ["5", 0], ["3", 0], ["4", 0], ["7", 0], ["2", 0], ["output", 0], ["6", 0], ["input", 0], ["6", 0], ["6", 0], ["5", 0], ["4", 0], ["3", 0], ["2", 0], ["1", 0], ["output", 0], ["5", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["sample", 2], ["one", 2], ["may", 2], ["obtain", 2], ["the", 2], ["optimal", 2], ["answer", 2], ["by", 2], ["swapping", 2], ["elements", 2], ["1", 2], ["and", 2], ["2", 2], ["in", 2], ["the", 2], ["second", 2], ["sample", 2], ["the", 2], ["minimum", 2], ["and", 2], ["the", 2], ["maximum", 2], ["elements", 2], ["will", 2], ["be", 2], ["located", 2], ["in", 2], ["the", 2], ["opposite", 2], ["ends", 2], ["of", 2], ["the", 2], ["array", 2], ["if", 2], ["we", 2], ["swap", 2], ["7", 2], ["and", 2], ["2", 2], ["in", 2], ["the", 2], ["third", 2], ["sample", 2], ["the", 2], ["distance", 2], ["between", 2], ["the", 2], ["minimum", 2], ["and", 2], ["the", 2], ["maximum", 2], ["elements", 2], ["is", 2], ["already", 2], ["maximum", 2], ["possible", 2], ["so", 2], ["we", 2], ["just", 2], ["perform", 0], ["some", 0], ["unnecessary", 0], ["swap", 0], ["for", 0], ["example", 0], ["one", 0], ["can", 0], ["swap", 0], ["5", 0], ["and", 0], ["2", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6088560885608856, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.29637146371463724, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7526501766784452, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3710247349823322, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6051660516605166, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.29606396063960644, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7526501766784452, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3710247349823322, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["read", 0], ["lambda", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["read", 0], ["x", 0], ["y", 0], ["a", 0], ["index", 0], ["1", 0], ["a", 0], ["index", 0], ["n", 0], ["ans", 0], ["max", 0], ["x", 0], ["y", 0], ["n", 0], ["x", 0], ["1", 0], ["n", 0], ["y", 0], ["1", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["j", 0], ["sorted", 0], ["a", 0], ["index", 0], ["1", 0], ["a", 0], ["index", 0], ["n", 0], ["print", 0], ["max", 0], ["j", 0], ["n", 0], ["i", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ma", 0], ["l", 0], ["index", 0], ["n", 0], ["mi", 0], ["l", 0], ["index", 0], ["1", 0], ["if", 0], ["n", 0], ["2", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["n", 0], ["1", 0], ["min", 0], ["ma", 0], ["mi", 0], ["n", 0], ["1", 0], ["ma", 0], ["n", 0], ["1", 0], ["mi", 0], ["from", 0], ["sys", 0], ["import", 0], ["inp", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["def", 0], ["main", 0], ["n", 0], ["int", 0], ["inp", 0], ["a", 0], ["b", 0], ["0", 0], ["0", 0], ["l", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["inp", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["if", 0], ["l", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["if", 0], ["l", 0], ["i", 0], ["n", 0], ["b", 0], ["i", 0], ["if", 0], ["a", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["ans", 0], ["max", 0], ["n", 0], ["1", 0], ["a", 0], ["b", 0], ["print", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["a", 0], ["index", 0], ["min", 0], ["a", 0], ["y", 0], ["a", 0], ["index", 0], ["max", 0], ["a", 0], ["print", 0], ["max", 0], ["x", 0], ["y", 0], ["n", 0], ["x", 0], ["1", 0], ["n", 0], ["y", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["y", 0], ["arr", 0], ["index", 0], ["max", 0], ["arr", 0], ["arr", 0], ["index", 0], ["min", 0], ["arr", 0], ["print", 0], ["max", 0], ["n", 0], ["1", 0], ["x", 0], ["n", 0], ["1", 0], ["y", 0], ["x", 0], ["y", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["c1", 0], ["c2", 0], ["1", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["c1", 0], ["i", 0], ["if", 0], ["a", 0], ["i", 0], ["n", 0], ["c2", 0], ["i", 0], ["print", 0], ["max", 0], ["abs", 0], ["c1", 0], ["c2", 0], ["c1", 0], ["c2", 0], ["n", 0], ["1", 0], ["c1", 0], ["n", 0], ["1", 0], ["c2", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pos1", 0], ["a", 0], ["index", 0], ["1", 0], ["1", 0], ["posn", 0], ["a", 0], ["index", 0], ["n", 0], ["1", 0], ["res", 0], ["abs", 0], ["pos1", 0], ["posn", 0], ["res", 0], ["max", 0], ["res", 0], ["abs", 0], ["1", 0], ["pos1", 0], ["res", 0], ["max", 0], ["res", 0], ["abs", 0], ["n", 0], ["pos1", 0], ["res", 0], ["max", 0], ["res", 0], ["abs", 0], ["1", 0], ["posn", 0], ["res", 0], ["max", 0], ["res", 0], ["abs", 0], ["n", 0], ["posn", 0], ["print", 0], ["res", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mi", 0], ["l", 0], ["index", 0], ["1", 0], ["1", 0], ["ma", 0], ["l", 0], ["index", 0], ["n", 0], ["1", 0], ["print", 0], ["max", 0], ["abs", 0], ["mi", 0], ["1", 0], ["abs", 0], ["mi", 0], ["n", 0], ["abs", 0], ["ma", 0], ["1", 0], ["abs", 0], ["ma", 0], ["n", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["max", 0], ["abs", 0], ["1", 0], ["l", 0], ["index", 0], ["n", 0], ["1", 0], ["abs", 0], ["n", 0], ["l", 0], ["index", 0], ["n", 0], ["1", 0], ["abs", 0], ["n", 0], ["l", 0], ["index", 0], ["1", 0], ["1", 0], ["abs", 0], ["1", 0], ["l", 0], ["index", 0], ["1", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["0", 0], ["r", 0], ["0", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["l", 0], ["i", 0], ["1", 0], ["elif", 0], ["a", 0], ["i", 0], ["n", 0], ["r", 0], ["i", 0], ["1", 0], ["print", 0], ["max", 0], ["l", 0], ["1", 0], ["r", 0], ["1", 0], ["n", 0], ["l", 0], ["n", 0], ["r", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["i", 0], ["arr", 0], ["i", 0], ["arr", 0], ["j", 0], ["arr", 0], ["j", 0], ["arr", 0], ["i", 0], ["mini", 0], ["min", 0], ["arr", 0], ["pos", 0], ["mini", 0], ["arr", 0], ["index", 0], ["mini", 0], ["maxi", 0], ["max", 0], ["arr", 0], ["pos", 0], ["maxi", 0], ["arr", 0], ["index", 0], ["maxi", 0], ["ans", 0], ["max", 0], ["ans", 0], ["abs", 0], ["pos", 0], ["maxi", 0], ["pos", 0], ["mini", 0], ["arr", 0], ["i", 0], ["arr", 0], ["j", 0], ["arr", 0], ["j", 0], ["arr", 0], ["i", 0], ["print", 0], ["ans", 0], ["n", 0], ["int", 0], ["input", 0], ["nums", 0], ["int", 0], ["for", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["nums", 0], ["index", 0], ["1", 0], ["b", 0], ["nums", 0], ["index", 0], ["n", 0], ["print", 0], ["max", 0], ["a", 0], ["n", 0], ["1", 0], ["a", 0], ["b", 0], ["n", 0], ["1", 0], ["b", 0], ["def", 0], ["dist", 0], ["l", 0], ["return", 0], ["abs", 0], ["l", 0], ["index", 0], ["1", 0], ["l", 0], ["index", 0], ["len", 0], ["l", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["one", 0], ["ind", 0], ["l", 0], ["index", 0], ["1", 0], ["n", 0], ["ind", 0], ["l", 0], ["index", 0], ["n", 0], ["d", 0], ["dist", 0], ["l", 0], ["for", 0], ["x", 0], ["in", 0], ["one", 0], ["ind", 0], ["n", 0], ["ind", 0], ["l", 0], ["x", 0], ["l", 0], ["0", 0], ["l", 0], ["0", 0], ["l", 0], ["x", 0], ["d", 0], ["max", 0], ["d", 0], ["dist", 0], ["l", 0], ["l", 0], ["x", 0], ["l", 0], ["0", 0], ["l", 0], ["0", 0], ["l", 0], ["x", 0], ["l", 0], ["x", 0], ["l", 0], ["1", 0], ["l", 0], ["1", 0], ["l", 0], ["x", 0], ["d", 0], ["max", 0], ["d", 0], ["dist", 0], ["l", 0], ["l", 0], ["x", 0], ["l", 0], ["1", 0], ["l", 0], ["1", 0], ["l", 0], ["x", 0], ["print", 0], ["d", 0], ["n", 0], ["int", 0], ["input", 0], ["ai", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mini", 0], ["0", 0], ["maxi", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["ai", 0], ["i", 0], ["n", 0], ["maxi", 0], ["i", 0], ["if", 0], ["ai", 0], ["i", 0], ["1", 0], ["mini", 0], ["i", 0], ["print", 0], ["max", 0], ["maxi", 0], ["mini", 0], ["n", 0], ["maxi", 0], ["1", 0], ["n", 0], ["mini", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["index1", 0], ["index2", 0], ["l", 0], ["index", 0], ["1", 0], ["l", 0], ["index", 0], ["n", 0], ["if", 0], ["index1", 0], ["index2", 0], ["index1", 0], ["index2", 0], ["index2", 0], ["index1", 0], ["d", 0], ["index2", 0], ["index1", 0], ["d", 0], ["max", 0], ["d", 0], ["n", 0], ["1", 0], ["index1", 0], ["d", 0], ["max", 0], ["d", 0], ["index2", 0], ["print", 0], ["d", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["vt1", 0], ["i", 0], ["if", 0], ["a", 0], ["i", 0], ["n", 0], ["vtn", 0], ["i", 0], ["print", 0], ["max", 0], ["abs", 0], ["0", 0], ["vtn", 0], ["abs", 0], ["0", 0], ["vt1", 0], ["abs", 0], ["n", 0], ["vt1", 0], ["1", 0], ["abs", 0], ["n", 0], ["vtn", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["data", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["indexmax", 0], ["data", 0], ["index", 0], ["max", 0], ["data", 0], ["indexmin", 0], ["data", 0], ["index", 0], ["min", 0], ["data", 0], ["print", 0], ["max", 0], ["indexmax", 0], ["indexmin", 0], ["n", 0], ["indexmax", 0], ["1", 0], ["n", 0], ["indexmin", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["pos1", 0], ["0", 0], ["pos2", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["or", 0], ["a", 0], ["i", 0], ["n", 0], ["pos1", 0], ["i", 0], ["break", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["pos1", 0], ["1", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["or", 0], ["a", 0], ["i", 0], ["n", 0], ["pos2", 0], ["i", 0], ["break", 0], ["print", 0], ["pos2", 0], ["pos1", 0], ["max", 0], ["n", 0], ["pos2", 0], ["1", 0], ["pos1", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["idx", 0], ["min", 0], ["l", 0], ["index", 0], ["1", 0], ["idx", 0], ["max", 0], ["l", 0], ["index", 0], ["n", 0], ["arr", 0], ["arr", 0], ["append", 0], ["abs", 0], ["0", 0], ["idx", 0], ["max", 0], ["arr", 0], ["append", 0], ["abs", 0], ["n", 0], ["1", 0], ["idx", 0], ["max", 0], ["arr", 0], ["append", 0], ["abs", 0], ["0", 0], ["idx", 0], ["min", 0], ["arr", 0], ["append", 0], ["abs", 0], ["n", 0], ["1", 0], ["idx", 0], ["min", 0], ["print", 0], ["max", 0], ["arr", 0], ["import", 0], ["sys", 0], ["math", 0], ["n", 0], ["int", 0], ["input", 0], ["z", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["f", 0], ["0", 0], ["d", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["z", 0], ["i", 0], ["1", 0], ["f", 0], ["i", 0], ["if", 0], ["z", 0], ["i", 0], ["n", 0], ["d", 0], ["i", 0], ["bst", 0], ["0", 0], ["if", 0], ["math", 0], ["fabs", 0], ["d", 0], ["f", 0], ["n", 0], ["1", 0], ["print", 0], ["n", 0], ["1", 0], ["return", 0], ["bst", 0], ["max", 0], ["math", 0], ["fabs", 0], ["d", 0], ["math", 0], ["fabs", 0], ["f", 0], ["math", 0], ["fabs", 0], ["n", 0], ["1", 0], ["f", 0], ["math", 0], ["fabs", 0], ["n", 0], ["1", 0], ["d", 0], ["print", 0], ["int", 0], ["bst", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mini", 0], ["0", 0], ["maxi", 0], ["0", 0], ["maxim", 0], ["0", 0], ["minim", 0], ["10", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["maxim", 0], ["maxim", 0], ["a", 0], ["i", 0], ["maxi", 0], ["i", 0], ["if", 0], ["a", 0], ["i", 0], ["minim", 0], ["minim", 0], ["a", 0], ["i", 0], ["mini", 0], ["i", 0], ["a", 0], ["abs", 0], ["n", 0], ["mini", 0], ["1", 0], ["b", 0], ["abs", 0], ["0", 0], ["mini", 0], ["c", 0], ["abs", 0], ["n", 0], ["maxi", 0], ["1", 0], ["d", 0], ["abs", 0], ["0", 0], ["maxi", 0], ["print", 0], ["max", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["p1", 0], ["i", 0], ["if", 0], ["a", 0], ["i", 0], ["n", 0], ["pn", 0], ["i", 0], ["print", 0], ["max", 0], ["abs", 0], ["p1", 0], ["pn", 0], ["p1", 0], ["pn", 0], ["abs", 0], ["n", 0], ["1", 0], ["p1", 0], ["abs", 0], ["n", 0], ["1", 0], ["pn", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mx", 0], ["max", 0], ["a", 0], ["mn", 0], ["min", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["mn", 0], ["i", 0], ["min", 0], ["i", 0], ["if", 0], ["a", 0], ["i", 0], ["mx", 0], ["i", 0], ["max", 0], ["i", 0], ["print", 0], ["max", 0], ["i", 0], ["max", 0], ["i", 0], ["min", 0], ["len", 0], ["a", 0], ["i", 0], ["max", 0], ["1", 0], ["len", 0], ["a", 0], ["i", 0], ["min", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p1", 0], ["a", 0], ["index", 0], ["1", 0], ["p2", 0], ["a", 0], ["index", 0], ["n", 0], ["op", 0], ["min", 0], ["p1", 0], ["0", 0], ["n", 0], ["p1", 0], ["1", 0], ["p2", 0], ["0", 0], ["n", 0], ["p2", 0], ["1", 0], ["print", 0], ["n", 0], ["op", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nZane the wizard is going to perform a magic show shuffling the cups.\n\nThere are n cups, numbered from 1 to n, placed along the x-axis on a table that has m holes on it. More precisely, cup i is on the table at the position x = i.\n\nThe problematic bone is initially at the position x = 1. Zane will confuse the audience by swapping the cups k times, the i-th time of which involves the cups at the positions x = u_{i} and x = v_{i}. If the bone happens to be at the position where there is a hole at any time, it will fall into the hole onto the ground and will not be affected by future swapping operations.\n\nDo not forget that Zane is a wizard. When he swaps the cups, he does not move them ordinarily. Instead, he teleports the cups (along with the bone, if it is inside) to the intended positions. Therefore, for example, when he swaps the cup at x = 4 and the one at x = 6, they will not be at the position x = 5 at any moment during the operation. [Image] \n\nZane’s puppy, Inzane, is in trouble. Zane is away on his vacation, and Inzane cannot find his beloved bone, as it would be too exhausting to try opening all the cups. Inzane knows that the Codeforces community has successfully helped Zane, so he wants to see if it could help him solve his problem too. Help Inzane determine the final position of the bone.\n\n\n-----Input-----\n\nThe first line contains three integers n, m, and k (2 ≤ n ≤ 10^6, 1 ≤ m ≤ n, 1 ≤ k ≤ 3·10^5) — the number of cups, the number of holes on the table, and the number of swapping operations, respectively.\n\nThe second line contains m distinct integers h_1, h_2, ..., h_{m} (1 ≤ h_{i} ≤ n) — the positions along the x-axis where there is a hole on the table.\n\nEach of the next k lines contains two integers u_{i} and v_{i} (1 ≤ u_{i}, v_{i} ≤ n, u_{i} ≠ v_{i}) — the positions of the cups to be swapped.\n\n\n-----Output-----\n\nPrint one integer — the final position along the x-axis of the bone.\n\n\n-----Examples-----\nInput\n7 3 4\n3 4 6\n1 2\n2 5\n5 7\n7 1\n\nOutput\n1\nInput\n5 1 2\n2\n1 2\n2 4\n\nOutput\n2\n\n\n-----Note-----\n\nIn the first sample, after the operations, the bone becomes at x = 2, x = 5, x = 7, and x = 1, respectively.\n\nIn the second sample, after the first operation, the bone becomes at x = 2, and falls into the hole onto the ground.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["from sys import stdin, stdout\n\nn, m, k = map(int, stdin.readline().split())\nposition = set(list(map(int, stdin.readline().split())))\n\nstart = 1\nfor i in range(k):\n\tif start in position:\n\t\tbreak\n\telse:\n\t\ta, b = map(int, stdin.readline().split())\n\t\tif a == start:\n\t\t\tstart = b\n\t\telif b == start:\n\t\t\tstart = a\n\nstdout.write(str(start))\n", "(n, m, k) = list(map(int, input().split(' ')))\nhs = list(map(int, input().split(' ')))\n\nholes = set(hs)\n\npos = 1\n\nfor i in range(k):\n\tif pos in holes:\n\t\tbreak\n\t(u, v) = list(map(int, input().split(' ')))\n\tif pos == u:\n\t\tpos = v\n\telif pos == v:\n\t\tpos = u\n\nprint(pos)\n\n", "#!/usr/bin/env python3\n\n\ndef solve():\n\tn, m, k = list(map(int, input().split()))\n\th = set(map(int, input().split()))\n\n\tpos = 1\n\n\tfor i in range(k):\n\t\tu, v = list(map(int, input().split()))\n\t\tif pos != u:\n\t\t\tu, v = v, u\n\t\tif pos == u:\n\t\t\tif u not in h:\n\t\t\t\tpos = v\n\n\tprint(pos)\n\n\ndef __starting_point():\n\tsolve()\n\n__starting_point()\n", "import sys\nn, m, k = map(int, input().split())\na = [int(i) - 1 for i in input().split()]\nb = [0] * n\nfor i in a:\n\tb[i] = 1\nnow = 0\nfor i in range(k):\n\tif b[now]:\n\t\tprint(now + 1)\n\t\treturn    \n\tx, y = map(int, input().split())\n\tx -= 1\n\ty -= 1\n\tif now == x:\n\t\tnow = y\n\telif now == y:\n\t\tnow = x\n\t\nprint(now + 1)\n", "n,m,k=map(int,input().split())\nl=set(map(int,input().split()))\ni=1\nfor _ in range(k):\n\tu,v=map(int,input().split())\n\tif i in l: break\n\tif i==u: i=v\n\telif i==v: i=u\nprint(i)\n", "n, m, k = list(map(int, input().split()))\nH = set(map(int, input().split()))\n\nbone_pos = 1\n\nif bone_pos not in H:\n\tfor i in range(k):\n\t\tu, v = list(map(int, input().split()))\n\t\tif bone_pos == u:\n\t\t\tbone_pos = v\n\t\telif bone_pos == v:\n\t\t\tbone_pos = u\n\n\t\tif bone_pos in H:\n\t\t\tbreak\n\nprint(bone_pos)\n", "import sys\n\ndef solve():\n\tn, m, k = map(int, sys.stdin.readline().split())\n\th = [int(i) - 1 for i in sys.stdin.readline().split()]\n\n\tis_hole = [False] * n\n\tfor hi in h:\n\t\tis_hole[hi] = True\n\n\tpos = 0\n\n\tif is_hole[pos]:\n\t\tprint(pos + 1)\n\t\treturn\n\n\tfor i in range(k):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tu, v = u-1, v-1\n\n\t\tif u != pos and v != pos:\n\t\t\tcontinue\n\n\t\tif u != pos:\n\t\t\tpos = u\n\t\telif v != pos:\n\t\t\tpos = v\n\n\t\tif is_hole[pos]:\n\t\t\tprint(pos + 1)\n\t\t\treturn\n\n\tprint(pos + 1)\n\n\ndef debug(x, table):\n\tfor name, val in table.items():\n\t\tif x is val:\n\t\t\tprint('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n\t\t\treturn None\n\ndef __starting_point():\n\tsolve()\n__starting_point()\n", "n, m, k = list(map(int, input().split()))\nholes = list(map(int, input().split()))\n\nis_hole = [False for i in range(n)]\n\nfor i in holes:\n\tis_hole[i - 1] = True\n\nbone = 0\n\nif is_hole[0]:\n\tprint(1)\nelse:\n\twas = False\n\tfor i in range(k):\n\t\ta, b = list(map(int, input().split()))\n\t\ta -= 1\n\t\tb -= 1\n\t\tif a == bone:\n\t\t\tbone = b\n\t\telif b == bone:\n\t\t\tbone = a\n\t\tif is_hole[bone]:\n\t\t\twas = True\n\t\t\tprint(bone + 1)\n\t\t\tbreak\n\tif not was:\n\t\tprint(bone + 1)\n", "n, m, k = list(map(int, input().split()))\notv = set(input().split())\nx = '1'\nfor _ in range(k):\n\tif x in otv:\n\t\tbreak\n\to, p = input().split()\n\tif x == o:\n\t\tx = p\n\telif x == p:\n\t\tx = o\nprint(x)\n", "n,m,k=list(map(int,input().split()))\nh={int(x) for x in input().split()}\np=1\nfor t in range(k):\n\tu,v=list(map(int,input().split()))\n\tif p in h: break\n\telif p==u: p=v\n\telif p==v: p=u\n\nprint(p)\n", "n, m, k = list(map(int, input().split()))\nd = {}\nif m > 0:\n\tfor x in map(int, input().split()):\n\t\td[x] = True\nball = 1\nfor i in range(k):\n\tif ball in d:\n\t\tbreak\n\tx, y = list(map(int, input().split()))\n\tball = x if ball == y else y if ball == x else ball\nprint(ball)\n", "from sys import stdin\n\nn, m, k = list(map(int, stdin.readline().split()))\nholes = set(map(int, stdin.readline().split()))\n\npos = 1\nif pos not in holes:\n\tfor i in range(k):\n\t\tu, v = list(map(int, stdin.readline().split()))\n\t\tif u == pos:\n\t\t\tpos = v\n\t\t\tif pos in holes:\n\t\t\t\tbreak\n\t\telif v == pos:\n\t\t\tpos = u\n\t\t\tif pos in holes:\n\t\t\t\tbreak\n\nprint(pos)\n", "#!/usr/bin/env python3\nfrom sys import stdin,stdout\n\n\ndef ri():\n\treturn list(map(int, stdin.readline().split()))\n\nn, m, k = ri()\nh = [0 for i in range(n+1)]\nhh = list(ri())\nfor i in range(m):\n\th[hh[i]] = 1\np = 1\nfor i in range(k):\n\tif h[p] == 1:\n\t\tprint(p)\n\t\treturn\n\ta, b = ri()\n\tif p in [a, b]:\n\t\tif a == p:\n\t\t\tp = b\n\t\telse:\n\t\t\tp = a\n\nprint(p)\n\n\n", "n,m,k = list(map(int,input().split()))\nhole = set(map(int,input().split()))\nfall = 0\ncurrent = 1\nfor i in range(k):\n\tif fall == 0 and current in hole:\n\t\tfall = current\n\tu,v = list(map(int,input().split()))\n\tif u == current:\n\t\tcurrent = v\n\telif v == current:\n\t\tcurrent = u\nif fall != 0:\n\tprint(fall)\nelse:\n\tprint(current)\n\n", "n,m,k = list(map(int,input().split()))\nhole = [False for _ in range(n)]\nfor h in input().split():\n\thh = int(h)-1\n\thole[hh] = True\n\nbone = 0\nfallen = hole[0]\n\nfor _ in range(k):\n\ta,b = list(map(int,input().split()))\n\ta -= 1\n\tb -= 1\n\tif not fallen:\n\t\tif bone == a:\n\t\t\tbone = b\n\t\telif bone == b:\n\t\t\tbone = a\n\t\tfallen = hole[bone]\n\nprint(bone+1)\n", "iters = int(input().split()[2])\n\nholes = {int(x) for x in input().split()}\n\ncurrent = 1\n\nfor _ in range(iters):\n\tsrc, dest = (int(x) for x in input().split())\n\tif current in holes:\n\t\tbreak\n\tif current == src:\n\t\tcurrent = dest\n\telif current == dest:\n\t\tcurrent = src\nprint(current)\n", "a,b,c = list(map(int,input().split()))\ns = set(map(int,input().split()))\nans = 1\nif ans not in s:\n\tfor i in range(0,c):\n\t\tx,y = list(map(int,input().split()))\n\t\tif ans==x:\n\t\t\tans=y\n\t\telif ans==y:\n\t\t\tans=x\n\t\tif ans in s:\n\t\t\tbreak\nprint(ans)\n", "import sys\n    \nn, m, k = list(map(int, sys.stdin.readline().strip().split(\" \")))\n\nholes = set(map(int, sys.stdin.readline().strip().split(\" \")))\n    \npos = 1\nfor i in range(k):\n\tu, v = list(map(int, sys.stdin.readline().strip().split(\" \")))\n\t\t\n\tif pos not in holes:        \n\t\tif pos == u:\n\t\t\tpos = v\n\t\telif pos == v:\n\t\t\tpos = u\n\t\t\t\t\nprint(pos)\n", "from bisect import bisect_left\n\nn,m,k = map(int, input().split(' '))\nholes = list(map(int, input().split(' ')))\ncurr = 1\nfound = False\n\nholes = sorted(holes)\nH = len(holes)\n\n\ndef bins(x, bot, top=None):\n\ttop = top if top is not None else H\n\tpos = bisect_left(holes, x, bot, top)\n\treturn pos != top and holes[pos] == x\n\n\nif curr in holes:\n\tprint(curr)\n\tfound = True\nelse:\n\tfor a0 in range(k):\n\t\tu, v = map(int, input().split(' '))\n\t\tif u == curr:\n\t\t\tcurr = v\n\t\t\tif bins(curr, 0):\n\t\t\t\tprint(curr)\n\t\t\t\tfound = True\n\t\t\t\tbreak\n\t\telif v == curr:\n\t\t\tcurr = u\n\t\t\tif bins(curr, 0):\n\t\t\t\tprint(curr)\n\t\t\t\tfound = True\n\t\t\t\tbreak\n\nif not found:\n\tprint(curr)\n", "n, m, k = [int(s) for s in input().split(\" \")]\nhole_locations = [int(s) for s in input().split(\" \")]\n# print(hole_locations)\nhole_array = [0] * n\nfor hole in hole_locations:\n\thole_array[hole-1] += 1\n# print(hole_array)\n# location of bone\nbone = 1\nif hole_array[0] == 1:\n\tprint(bone)\nelse:\n\tfor i in range(1, k + 1):\n\t  # swaps.append([int(s) for s in input().split(\" \")])\n\t  u, v = [int(s) for s in input().split(\" \")]\n\t  if u == bone:\n\t\t  bone = v\n\t\t  if hole_array[v-1] == 1:\n\t\t\t  break\n\t  elif v == bone:\n\t\t  bone = u\n\t\t  if hole_array[u-1] == 1:\n\t\t\t  break\n\tprint(bone)\n", "n, m, k = map(int, input().split())\n\nh = set(map(int, input().split()))\nanswer = 1\nif answer in h:\n\tprint(answer)\nelse:\n\tfor i in range(k):\n\t\tu, v = map(int, input().split())\n\t\tif u == answer:\n\t\t\tanswer = v\n\t\telif v == answer:\n\t\t\tanswer = u\n\t\telse:\n\t\t\tcontinue\n\t\tif answer in h:\n\t\t\tbreak\n\tprint(answer)\n", "n, m, k = map(int, input().split())\ndata = set(map(int, input().split()))\ncur = 1\nfor i in range(k):\n\tif cur in data: break\n\tu, v = map(int, input().split())\n\tif u == cur: cur = v\n\telif v == cur: cur = u\nprint(cur)\n", "n,m,k=list(map(int,input().split()))\nip=list(map(int,input().split()))\nholes=[0 for i in range(n+1)]\nfor i in ip:\n\tholes[i]=1\npos=1\nb=0\nif holes[1]==1:\n\tb=1\nfor i in range(k):\n\tu,v=list(map(int,input().split()))\n\tif u==pos and b==0:\n\t\tpos=v\n\t\tif holes[v]==1:\n\t\t\tb=1\n\telif v==pos and b==0:\n\t\tpos=u\n\t\tif holes[u]==1:\n\t\t\tb=1\nprint(pos)\n", "n,m,k=map(int,input().split())\nh=set([i for i in input().split()])\nans=chk='1'\n\nwhile k:\n\tk=k-1\n\tif ans in h:\n\t\tbreak\n\tx,y=map(str,input().split())\n\tif x==ans:\n\t\tans=y\n\telif y==ans:\n\t\tans=x\nprint(ans)\n", "n, m, k = [int(x) for x in input().strip().split(' ')]\nholes = set([int(x) for x in input().strip().split(' ')])\nbone = 1\nfall = bone in holes\ni = 0\nwhile i < k and not fall:\n\ta, b = [int(x) for x in input().strip().split(' ')]\n\tif a == bone:\n\t\tbone = b\n\telif b == bone:\n\t\tbone = a\n\tfall = bone in holes\n\ti += 1\n\nprint(bone)\n"], "id": "id9185"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9185", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["zane", 1], ["the", 1], ["wizard", 1], ["is", 1], ["going", 1], ["to", 1], ["perform", 1], ["a", 1], ["magic", 1], ["show", 1], ["shuffling", 1], ["the", 1], ["cups", 1], ["there", 1], ["are", 1], ["n", 1], ["cups", 1], ["numbered", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["placed", 1], ["along", 1], ["the", 1], ["x", 1], ["axis", 1], ["on", 1], ["a", 1], ["table", 1], ["that", 1], ["has", 1], ["m", 1], ["holes", 1], ["on", 1], ["it", 1], ["more", 1], ["precisely", 1], ["cup", 1], ["i", 1], ["is", 1], ["on", 1], ["the", 1], ["table", 1], ["at", 1], ["the", 1], ["position", 1], ["x", 1], ["i", 1], ["the", 1], ["problematic", 1], ["bone", 1], ["is", 1], ["initially", 1], ["at", 1], ["the", 1], ["position", 1], ["x", 1], ["1", 1], ["zane", 1], ["will", 1], ["confuse", 1], ["the", 1], ["audience", 1], ["by", 1], ["swapping", 1], ["the", 1], ["cups", 1], ["k", 1], ["times", 1], ["the", 1], ["i", 0], ["th", 0], ["time", 0], ["of", 0], ["which", 0], ["involves", 0], ["the", 0], ["cups", 0], ["at", 0], ["the", 0], ["positions", 0], ["x", 0], ["u", 0], ["i", 0], ["and", 0], ["x", 0], ["v", 0], ["i", 0], ["if", 1], ["the", 1], ["bone", 1], ["happens", 1], ["to", 1], ["be", 1], ["at", 1], ["the", 1], ["position", 1], ["where", 1], ["there", 1], ["is", 1], ["a", 1], ["hole", 1], ["at", 1], ["any", 1], ["time", 1], ["it", 1], ["will", 1], ["fall", 1], ["into", 1], ["the", 1], ["hole", 1], ["onto", 1], ["the", 1], ["ground", 1], ["and", 1], ["will", 1], ["not", 1], ["be", 1], ["affected", 1], ["by", 1], ["future", 1], ["swapping", 1], ["operations", 1], ["do", 1], ["not", 1], ["forget", 1], ["that", 1], ["zane", 1], ["is", 1], ["a", 1], ["wizard", 1], ["when", 1], ["he", 1], ["swaps", 1], ["the", 1], ["cups", 1], ["he", 1], ["does", 1], ["not", 1], ["move", 1], ["them", 1], ["ordinarily", 1], ["instead", 1], ["he", 1], ["teleports", 1], ["the", 1], ["cups", 1], ["along", 1], ["with", 1], ["the", 1], ["bone", 1], ["if", 1], ["it", 1], ["is", 1], ["inside", 1], ["to", 1], ["the", 1], ["intended", 1], ["positions", 1], ["therefore", 1], ["for", 1], ["example", 1], ["when", 1], ["he", 1], ["swaps", 1], ["the", 1], ["cup", 1], ["at", 1], ["x", 1], ["4", 1], ["and", 1], ["the", 1], ["one", 1], ["at", 1], ["x", 1], ["6", 1], ["they", 1], ["will", 1], ["not", 1], ["be", 0], ["at", 0], ["the", 0], ["position", 0], ["x", 0], ["5", 0], ["at", 0], ["any", 0], ["moment", 0], ["during", 0], ["the", 0], ["operation", 0], ["image", 0], ["zane’s", 1], ["puppy", 1], ["inzane", 1], ["is", 1], ["in", 1], ["trouble", 1], ["zane", 1], ["is", 1], ["away", 1], ["on", 1], ["his", 1], ["vacation", 1], ["and", 1], ["inzane", 1], ["cannot", 1], ["find", 1], ["his", 1], ["beloved", 1], ["bone", 1], ["as", 1], ["it", 1], ["would", 1], ["be", 1], ["too", 1], ["exhausting", 1], ["to", 1], ["try", 1], ["opening", 1], ["all", 1], ["the", 1], ["cups", 1], ["inzane", 1], ["knows", 1], ["that", 1], ["the", 1], ["codeforces", 1], ["community", 1], ["has", 1], ["successfully", 1], ["helped", 1], ["zane", 1], ["so", 1], ["he", 1], ["wants", 1], ["to", 1], ["see", 1], ["if", 1], ["it", 1], ["could", 1], ["help", 1], ["him", 1], ["solve", 1], ["his", 0], ["problem", 0], ["too", 0], ["help", 0], ["inzane", 0], ["determine", 0], ["the", 0], ["final", 0], ["position", 0], ["of", 0], ["the", 0], ["bone", 0], ["input", 0], ["the", 2], ["first", 2], ["line", 0], ["contains", 0], ["three", 0], ["integers", 0], ["n", 0], ["m", 0], ["and", 0], ["k", 0], ["2", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["6", 0], ["1", 0], ["≤", 0], ["m", 0], ["≤", 0], ["n", 0], ["1", 0], ["≤", 0], ["k", 0], ["≤", 0], ["3·10", 0], ["5", 0], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["cups", 1], ["the", 1], ["number", 1], ["of", 1], ["holes", 1], ["on", 1], ["the", 1], ["table", 1], ["and", 1], ["the", 1], ["number", 0], ["of", 0], ["swapping", 0], ["operations", 0], ["respectively", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["m", 0], ["distinct", 0], ["integers", 0], ["h", 0], ["1", 0], ["h", 0], ["2", 0], ["h", 0], ["m", 0], ["1", 0], ["≤", 0], ["h", 0], ["i", 0], ["≤", 1], ["n", 1], ["—", 1], ["the", 1], ["positions", 1], ["along", 1], ["the", 1], ["x", 1], ["axis", 1], ["where", 1], ["there", 1], ["is", 1], ["a", 1], ["hole", 1], ["on", 0], ["the", 0], ["table", 0], ["each", 0], ["of", 0], ["the", 0], ["next", 0], ["k", 0], ["lines", 0], ["contains", 0], ["two", 0], ["integers", 0], ["u", 0], ["i", 0], ["and", 0], ["v", 0], ["i", 0], ["1", 0], ["≤", 0], ["u", 0], ["i", 0], ["v", 0], ["i", 0], ["≤", 0], ["n", 0], ["u", 0], ["i", 0], ["≠", 0], ["v", 0], ["i", 0], ["—", 0], ["the", 0], ["positions", 0], ["of", 0], ["the", 0], ["cups", 0], ["to", 0], ["be", 0], ["swapped", 0], ["output", 0], ["print", 1], ["one", 1], ["integer", 0], ["—", 0], ["the", 0], ["final", 0], ["position", 0], ["along", 0], ["the", 0], ["x", 0], ["axis", 0], ["of", 0], ["the", 0], ["bone", 0], ["examples", 0], ["input", 0], ["7", 0], ["3", 0], ["4", 0], ["3", 0], ["4", 0], ["6", 0], ["1", 0], ["2", 0], ["2", 0], ["5", 0], ["5", 0], ["7", 0], ["7", 0], ["1", 0], ["output", 0], ["1", 0], ["input", 0], ["5", 0], ["1", 0], ["2", 0], ["2", 0], ["1", 0], ["2", 0], ["2", 0], ["4", 0], ["output", 0], ["2", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["sample", 1], ["after", 1], ["the", 1], ["operations", 1], ["the", 1], ["bone", 1], ["becomes", 1], ["at", 1], ["x", 1], ["2", 1], ["x", 1], ["5", 1], ["x", 1], ["7", 1], ["and", 1], ["x", 1], ["1", 1], ["respectively", 1], ["in", 1], ["the", 1], ["second", 1], ["sample", 1], ["after", 1], ["the", 1], ["first", 1], ["operation", 1], ["the", 1], ["bone", 1], ["becomes", 0], ["at", 0], ["x", 0], ["2", 0], ["and", 0], ["falls", 0], ["into", 0], ["the", 0], ["hole", 0], ["onto", 0], ["the", 0], ["ground", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6008676789587852, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5986984815618221, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7885835095137421, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.773784355179704, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6008676789587852, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5986984815618221, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7885835095137421, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.773784355179704, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["position", 0], ["set", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["start", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["start", 0], ["in", 0], ["position", 0], ["break", 0], ["else", 0], ["a", 0], ["b", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["if", 0], ["a", 0], ["start", 0], ["start", 0], ["b", 0], ["elif", 0], ["b", 0], ["start", 0], ["start", 0], ["a", 0], ["stdout", 0], ["write", 0], ["str", 0], ["start", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["hs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["holes", 0], ["set", 0], ["hs", 0], ["pos", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["pos", 0], ["in", 0], ["holes", 0], ["break", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["pos", 0], ["u", 0], ["pos", 0], ["v", 0], ["elif", 0], ["pos", 0], ["v", 0], ["pos", 0], ["u", 0], ["print", 0], ["pos", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["pos", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["pos", 0], ["u", 0], ["u", 0], ["v", 0], ["v", 0], ["u", 0], ["if", 0], ["pos", 0], ["u", 0], ["if", 0], ["u", 0], ["not", 0], ["in", 0], ["h", 0], ["pos", 0], ["v", 0], ["print", 0], ["pos", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["0", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["b", 0], ["i", 0], ["1", 0], ["now", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["b", 0], ["now", 0], ["print", 0], ["now", 0], ["1", 0], ["return", 0], ["x", 0], ["y", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["if", 0], ["now", 0], ["x", 0], ["now", 0], ["y", 0], ["elif", 0], ["now", 0], ["y", 0], ["now", 0], ["x", 0], ["print", 0], ["now", 0], ["1", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["i", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["u", 0], ["v", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["i", 0], ["in", 0], ["l", 0], ["break", 0], ["if", 0], ["i", 0], ["u", 0], ["i", 0], ["v", 0], ["elif", 0], ["i", 0], ["v", 0], ["i", 0], ["u", 0], ["print", 0], ["i", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bone", 0], ["pos", 0], ["1", 0], ["if", 0], ["bone", 0], ["pos", 0], ["not", 0], ["in", 0], ["h", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["bone", 0], ["pos", 0], ["u", 0], ["bone", 0], ["pos", 0], ["v", 0], ["elif", 0], ["bone", 0], ["pos", 0], ["v", 0], ["bone", 0], ["pos", 0], ["u", 0], ["if", 0], ["bone", 0], ["pos", 0], ["in", 0], ["h", 0], ["break", 0], ["print", 0], ["bone", 0], ["pos", 0], ["import", 0], ["sys", 0], ["def", 0], ["solve", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["h", 0], ["int", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["is", 0], ["hole", 0], ["false", 0], ["n", 0], ["for", 0], ["hi", 0], ["in", 0], ["h", 0], ["is", 0], ["hole", 0], ["hi", 0], ["true", 0], ["pos", 0], ["0", 0], ["if", 0], ["is", 0], ["hole", 0], ["pos", 0], ["print", 0], ["pos", 0], ["1", 0], ["return", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["u", 0], ["v", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["u", 0], ["v", 0], ["u", 0], ["1", 0], ["v", 0], ["1", 0], ["if", 0], ["u", 0], ["pos", 0], ["and", 0], ["v", 0], ["pos", 0], ["continue", 0], ["if", 0], ["u", 0], ["pos", 0], ["pos", 0], ["u", 0], ["elif", 0], ["v", 0], ["pos", 0], ["pos", 0], ["v", 0], ["if", 0], ["is", 0], ["hole", 0], ["pos", 0], ["print", 0], ["pos", 0], ["1", 0], ["return", 0], ["print", 0], ["pos", 0], ["1", 0], ["def", 0], ["debug", 0], ["x", 0], ["table", 0], ["for", 0], ["name", 0], ["val", 0], ["in", 0], ["table", 0], ["items", 0], ["if", 0], ["x", 0], ["is", 0], ["val", 0], ["print", 0], ["debug", 0], ["format", 0], ["name", 0], ["val", 0], ["file", 0], ["sys", 0], ["stderr", 0], ["return", 0], ["none", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["holes", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["is", 0], ["hole", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["holes", 0], ["is", 0], ["hole", 0], ["i", 0], ["1", 0], ["true", 0], ["bone", 0], ["0", 0], ["if", 0], ["is", 0], ["hole", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["was", 0], ["false", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["if", 0], ["a", 0], ["bone", 0], ["bone", 0], ["b", 0], ["elif", 0], ["b", 0], ["bone", 0], ["bone", 0], ["a", 0], ["if", 0], ["is", 0], ["hole", 0], ["bone", 0], ["was", 0], ["true", 0], ["print", 0], ["bone", 0], ["1", 0], ["break", 0], ["if", 0], ["not", 0], ["was", 0], ["print", 0], ["bone", 0], ["1", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["otv", 0], ["set", 0], ["input", 0], ["split", 0], ["x", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["x", 0], ["in", 0], ["otv", 0], ["break", 0], ["o", 0], ["p", 0], ["input", 0], ["split", 0], ["if", 0], ["x", 0], ["o", 0], ["x", 0], ["p", 0], ["elif", 0], ["x", 0], ["p", 0], ["x", 0], ["o", 0], ["print", 0], ["x", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["p", 0], ["1", 0], ["for", 0], ["t", 0], ["in", 0], ["range", 0], ["k", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["p", 0], ["in", 0], ["h", 0], ["break", 0], ["elif", 0], ["p", 0], ["u", 0], ["p", 0], ["v", 0], ["elif", 0], ["p", 0], ["v", 0], ["p", 0], ["u", 0], ["print", 0], ["p", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["if", 0], ["m", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["x", 0], ["true", 0], ["ball", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["ball", 0], ["in", 0], ["d", 0], ["break", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ball", 0], ["x", 0], ["if", 0], ["ball", 0], ["y", 0], ["else", 0], ["y", 0], ["if", 0], ["ball", 0], ["x", 0], ["else", 0], ["ball", 0], ["print", 0], ["ball", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["holes", 0], ["set", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["pos", 0], ["1", 0], ["if", 0], ["pos", 0], ["not", 0], ["in", 0], ["holes", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["if", 0], ["u", 0], ["pos", 0], ["pos", 0], ["v", 0], ["if", 0], ["pos", 0], ["in", 0], ["holes", 0], ["break", 0], ["elif", 0], ["v", 0], ["pos", 0], ["pos", 0], ["u", 0], ["if", 0], ["pos", 0], ["in", 0], ["holes", 0], ["break", 0], ["print", 0], ["pos", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["def", 0], ["ri", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["n", 0], ["m", 0], ["k", 0], ["ri", 0], ["h", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["hh", 0], ["list", 0], ["ri", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["h", 0], ["hh", 0], ["i", 0], ["1", 0], ["p", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["h", 0], ["p", 0], ["1", 0], ["print", 0], ["p", 0], ["return", 0], ["a", 0], ["b", 0], ["ri", 0], ["if", 0], ["p", 0], ["in", 0], ["a", 0], ["b", 0], ["if", 0], ["a", 0], ["p", 0], ["p", 0], ["b", 0], ["else", 0], ["p", 0], ["a", 0], ["print", 0], ["p", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["hole", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["fall", 0], ["0", 0], ["current", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["fall", 0], ["0", 0], ["and", 0], ["current", 0], ["in", 0], ["hole", 0], ["fall", 0], ["current", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["u", 0], ["current", 0], ["current", 0], ["v", 0], ["elif", 0], ["v", 0], ["current", 0], ["current", 0], ["u", 0], ["if", 0], ["fall", 0], ["0", 0], ["print", 0], ["fall", 0], ["else", 0], ["print", 0], ["current", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["hole", 0], ["false", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["for", 0], ["h", 0], ["in", 0], ["input", 0], ["split", 0], ["hh", 0], ["int", 0], ["h", 0], ["1", 0], ["hole", 0], ["hh", 0], ["true", 0], ["bone", 0], ["0", 0], ["fallen", 0], ["hole", 0], ["0", 0], ["for", 0], ["in", 0], ["range", 0], ["k", 0], ["a", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["1", 0], ["b", 0], ["1", 0], ["if", 0], ["not", 0], ["fallen", 0], ["if", 0], ["bone", 0], ["a", 0], ["bone", 0], ["b", 0], ["elif", 0], ["bone", 0], ["b", 0], ["bone", 0], ["a", 0], ["fallen", 0], ["hole", 0], ["bone", 0], ["print", 0], ["bone", 0], ["1", 0], ["iters", 0], ["int", 0], ["input", 0], ["split", 0], ["2", 0], ["holes", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["current", 0], ["1", 0], ["for", 0], ["in", 0], ["range", 0], ["iters", 0], ["src", 0], ["dest", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["current", 0], ["in", 0], ["holes", 0], ["break", 0], ["if", 0], ["current", 0], ["src", 0], ["current", 0], ["dest", 0], ["elif", 0], ["current", 0], ["dest", 0], ["current", 0], ["src", 0], ["print", 0], ["current", 0], ["a", 0], ["b", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["if", 0], ["ans", 0], ["not", 0], ["in", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["c", 0], ["x", 0], ["y", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["ans", 0], ["x", 0], ["ans", 0], ["y", 0], ["elif", 0], ["ans", 0], ["y", 0], ["ans", 0], ["x", 0], ["if", 0], ["ans", 0], ["in", 0], ["s", 0], ["break", 0], ["print", 0], ["ans", 0], ["import", 0], ["sys", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["holes", 0], ["set", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["pos", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["split", 0], ["if", 0], ["pos", 0], ["not", 0], ["in", 0], ["holes", 0], ["if", 0], ["pos", 0], ["u", 0], ["pos", 0], ["v", 0], ["elif", 0], ["pos", 0], ["v", 0], ["pos", 0], ["u", 0], ["print", 0], ["pos", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["holes", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["curr", 0], ["1", 0], ["found", 0], ["false", 0], ["holes", 0], ["sorted", 0], ["holes", 0], ["h", 0], ["len", 0], ["holes", 0], ["def", 0], ["bins", 0], ["x", 0], ["bot", 0], ["top", 0], ["none", 0], ["top", 0], ["top", 0], ["if", 0], ["top", 0], ["is", 0], ["not", 0], ["none", 0], ["else", 0], ["h", 0], ["pos", 0], ["bisect", 0], ["left", 0], ["holes", 0], ["x", 0], ["bot", 0], ["top", 0], ["return", 0], ["pos", 0], ["top", 0], ["and", 0], ["holes", 0], ["pos", 0], ["x", 0], ["if", 0], ["curr", 0], ["in", 0], ["holes", 0], ["print", 0], ["curr", 0], ["found", 0], ["true", 0], ["else", 0], ["for", 0], ["a0", 0], ["in", 0], ["range", 0], ["k", 0], ["u", 0], ["v", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["u", 0], ["curr", 0], ["curr", 0], ["v", 0], ["if", 0], ["bins", 0], ["curr", 0], ["0", 0], ["print", 0], ["curr", 0], ["found", 0], ["true", 0], ["break", 0], ["elif", 0], ["v", 0], ["curr", 0], ["curr", 0], ["u", 0], ["if", 0], ["bins", 0], ["curr", 0], ["0", 0], ["print", 0], ["curr", 0], ["found", 0], ["true", 0], ["break", 0], ["if", 0], ["not", 0], ["found", 0], ["print", 0], ["curr", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["hole", 0], ["locations", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["hole", 0], ["locations", 0], ["hole", 0], ["array", 0], ["0", 0], ["n", 0], ["for", 0], ["hole", 0], ["in", 0], ["hole", 0], ["locations", 0], ["hole", 0], ["array", 0], ["hole", 0], ["1", 0], ["1", 0], ["print", 0], ["hole", 0], ["array", 0], ["location", 0], ["of", 0], ["bone", 0], ["bone", 0], ["1", 0], ["if", 0], ["hole", 0], ["array", 0], ["0", 0], ["1", 0], ["print", 0], ["bone", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["k", 0], ["1", 0], ["swaps", 0], ["append", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["u", 0], ["v", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["if", 0], ["u", 0], ["bone", 0], ["bone", 0], ["v", 0], ["if", 0], ["hole", 0], ["array", 0], ["v", 0], ["1", 0], ["1", 0], ["break", 0], ["elif", 0], ["v", 0], ["bone", 0], ["bone", 0], ["u", 0], ["if", 0], ["hole", 0], ["array", 0], ["u", 0], ["1", 0], ["1", 0], ["break", 0], ["print", 0], ["bone", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["answer", 0], ["1", 0], ["if", 0], ["answer", 0], ["in", 0], ["h", 0], ["print", 0], ["answer", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["u", 0], ["v", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["u", 0], ["answer", 0], ["answer", 0], ["v", 0], ["elif", 0], ["v", 0], ["answer", 0], ["answer", 0], ["u", 0], ["else", 0], ["continue", 0], ["if", 0], ["answer", 0], ["in", 0], ["h", 0], ["break", 0], ["print", 0], ["answer", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["data", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["cur", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["if", 0], ["cur", 0], ["in", 0], ["data", 0], ["break", 0], ["u", 0], ["v", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["u", 0], ["cur", 0], ["cur", 0], ["v", 0], ["elif", 0], ["v", 0], ["cur", 0], ["cur", 0], ["u", 0], ["print", 0], ["cur", 0], ["n", 0], ["m", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ip", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["holes", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["ip", 0], ["holes", 0], ["i", 0], ["1", 0], ["pos", 0], ["1", 0], ["b", 0], ["0", 0], ["if", 0], ["holes", 0], ["1", 0], ["1", 0], ["b", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["k", 0], ["u", 0], ["v", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["u", 0], ["pos", 0], ["and", 0], ["b", 0], ["0", 0], ["pos", 0], ["v", 0], ["if", 0], ["holes", 0], ["v", 0], ["1", 0], ["b", 0], ["1", 0], ["elif", 0], ["v", 0], ["pos", 0], ["and", 0], ["b", 0], ["0", 0], ["pos", 0], ["u", 0], ["if", 0], ["holes", 0], ["u", 0], ["1", 0], ["b", 0], ["1", 0], ["print", 0], ["pos", 0], ["n", 0], ["m", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["h", 0], ["set", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ans", 0], ["chk", 0], ["1", 0], ["while", 0], ["k", 0], ["k", 0], ["k", 0], ["1", 0], ["if", 0], ["ans", 0], ["in", 0], ["h", 0], ["break", 0], ["x", 0], ["y", 0], ["map", 0], ["str", 0], ["input", 0], ["split", 0], ["if", 0], ["x", 0], ["ans", 0], ["ans", 0], ["y", 0], ["elif", 0], ["y", 0], ["ans", 0], ["ans", 0], ["x", 0], ["print", 0], ["ans", 0], ["n", 0], ["m", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["holes", 0], ["set", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["bone", 0], ["1", 0], ["fall", 0], ["bone", 0], ["in", 0], ["holes", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["k", 0], ["and", 0], ["not", 0], ["fall", 0], ["a", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["if", 0], ["a", 0], ["bone", 0], ["bone", 0], ["b", 0], ["elif", 0], ["b", 0], ["bone", 0], ["bone", 0], ["a", 0], ["fall", 0], ["bone", 0], ["in", 0], ["holes", 0], ["i", 0], ["1", 0], ["print", 0], ["bone", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nPetya loves computer games. Finally a game that he's been waiting for so long came out!\n\nThe main character of this game has n different skills, each of which is characterized by an integer a_{i} from 0 to 100. The higher the number a_{i} is, the higher is the i-th skill of the character. The total rating of the character is calculated as the sum of the values ​​of $\\lfloor \\frac{a_{i}}{10} \\rfloor$ for all i from 1 to n. The expression ⌊ x⌋ denotes the result of rounding the number x down to the nearest integer.\n\nAt the beginning of the game Petya got k improvement units as a bonus that he can use to increase the skills of his character and his total rating. One improvement unit can increase any skill of Petya's character by exactly one. For example, if a_4 = 46, after using one imporvement unit to this skill, it becomes equal to 47. A hero's skill cannot rise higher more than 100. Thus, it is permissible that some of the units will remain unused.\n\nYour task is to determine the optimal way of using the improvement units so as to maximize the overall rating of the character. It is not necessary to use all the improvement units.\n\n\n-----Input-----\n\nThe first line of the input contains two positive integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^7) — the number of skills of the character and the number of units of improvements at Petya's disposal.\n\nThe second line of the input contains a sequence of n integers a_{i} (0 ≤ a_{i} ≤ 100), where a_{i} characterizes the level of the i-th skill of the character.\n\n\n-----Output-----\n\nThe first line of the output should contain a single non-negative integer — the maximum total rating of the character that Petya can get using k or less improvement units.\n\n\n-----Examples-----\nInput\n2 4\n7 9\n\nOutput\n2\n\nInput\n3 8\n17 15 19\n\nOutput\n5\n\nInput\n2 2\n99 100\n\nOutput\n20\n\n\n\n-----Note-----\n\nIn the first test case the optimal strategy is as follows. Petya has to improve the first skill to 10 by spending 3 improvement units, and the second skill to 10, by spending one improvement unit. Thus, Petya spends all his improvement units and the total rating of the character becomes equal to  lfloor frac{100}{10} rfloor +  lfloor frac{100}{10} rfloor = 10 + 10 =  20.\n\nIn the second test the optimal strategy for Petya is to improve the first skill to 20 (by spending 3 improvement units) and to improve the third skill to 20 (in this case by spending 1 improvement units). Thus, Petya is left with 4 improvement units and he will be able to increase the second skill to 19 (which does not change the overall rating, so Petya does not necessarily have to do it). Therefore, the highest possible total rating in this example is $\\lfloor \\frac{20}{10} \\rfloor + \\lfloor \\frac{19}{10} \\rfloor + \\lfloor \\frac{20}{10} \\rfloor = 2 + 1 + 2 = 5$.\n\nIn the third test case the optimal strategy for Petya is to increase the first skill to 100 by spending 1 improvement unit. Thereafter, both skills of the character will be equal to 100, so Petya will not be able to spend the remaining improvement unit. So the answer is equal to $\\lfloor \\frac{100}{10} \\rfloor + \\lfloor \\frac{100}{10} \\rfloor = 10 + 10 = 20$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import sys\n\ndef solve():\n\tn,k, = rv()\n\ta, = rl(1)\n\tres = 0\n\tcount = [0] * 10\n\tfor i in range(n):\n\t\tif a[i] < 100:\n\t\t\tcount[10 - (a[i] % 10) - 1] += 1\n\t\tres += a[i] // 10\n\tfor i in range(10):\n\t\twhile count[i] > 0 and k >= i + 1:\n\t\t\tres += 1\n\t\t\tcount[i] -= 1\n\t\t\tk -= i + 1\n\talready = res * 10\n\tpossible = n * 100\n\tdiff = possible - already\n\tif diff > 0:\n\t\tactual = min(diff, k)\n\t\tres += actual // 10\n\tprint(res)\n\n\n\n\n\n\ndef prt(l): return print(' '.join(map(str, l)))\ndef rs(): return map(str, input().split())\ndef rv(): return map(int, input().split())\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]  \nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()\n", "import sys\n\n\n#sys.stdin = open('input.txt')\n#sys.stdout = open('output.txt', 'w')\n\nn, k = [int(i) for i in input().split()]\nskill = [[int(i) % 10, int(i)] for i in input().split()]\n\nskill.sort(reverse = True)\nans = 0\nfor i in range(n):\n\tans += skill[i][1] // 10\n#print(skill)\n#print(k)\nfor i in range(n):\n\tif skill[i][1] == 100:\n\t\tcontinue\n\ttoup = 10 - skill[i][0]\n\tif k >= toup:\n\t\tk -= toup\n\t\tans += 1\n\t\tskill[i][1] += toup\n\n#print(skill)\t\t\n\nmaxadd = 0\nfor i in range(n):\n\tmaxadd += (100 - skill[i][1]) // 10\n#print(maxadd)\nans += min(k // 10, maxadd)\nprint(ans)\n", "n, k = list(map(int, str.split(input())))\na = sorted(map(int, str.split(input())), key=lambda x: x % 10, reverse=True)\nrating = 0\nfor i in range(n):\n\n\tdelta = 10 - (a[i] % 10)\n\tif k >= delta and a[i] < 100:\n\n\t\ta[i] += delta\n\t\tk -= delta\n\n\trating += a[i] // 10\n\nfor i in range(n):\n\n\tif k < 10:\n\n\t\tbreak\n\n\twhile a[i] < 100 and k >= 10:\n\n\t\ta[i] += 10\n\t\tk -= 10\n\t\trating += 1\n\nprint(rating)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nif sum(a) + k >= n * 100:\n\tprint(n * 10)\n\treturn\nadds = []\nans = 0\nfor i in range(n):\n\tans += a[i] // 10\n\tif a[i] != 100:\n\t\tadds.append(10 - (a[i] % 10))\nadds.sort()\nfor i in range(len(adds)):\n\tif k <= 0:\n\t\tbreak\n\telse:\n\t\tk -= adds[i]\n\t\tans += 1\nans += k // 10\nprint(ans)\n", "n,k=list(map(int,input().split()))\nki=[0]*11\nsu=0\nfor x in input().split():\n\tt=int(x)\n\tki[10-t%10]+=1\n\tsu+=t//10\nfor i in range(1,10):\n\tt=min(k//i,ki[i])\n\tsu+=t\n\tk-=t*i\nt=k//10\nsu+=min(t,n*10-su)\nprint(su)\n", "n, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA.sort(reverse=True, key=lambda x: x % 10)\n\nfor i, a in enumerate(A):\n\tif k <= 0 or a % 10 == 0:\n\t\tbreak\n\tnew = min(k, 10 - a % 10, 100 - a)\n\tA[i] += new\n\tk -= new\n\nif k:\n\tfor i, a in enumerate(A):\n\t\tif k <= 0:\n\t\t\tbreak\n\t\tnew = min(100-a, k)\n\t\tA[i] += new\n\t\tk -= new\n\nans = sum(a//10 for a in A)\nprint(ans)\n", "n, k = [int(i) for i in input().split()]\nskills = [int(i) for i in input().split()]\ndef fornextlvl(x):\n\treturn 10*(1+((x-1)//10))-x\nleft = sorted([(fornextlvl(skills[i]), i) for i in range(n)])\nleft.reverse()\n\nwhile k > 0 and len(left):\n\tw = left.pop()\n\tif w[0] > k: break\n\tk -= w[0]\n\tskills[w[1]] += w[0]\n# Every skill must be a multiple of 10 by now \n\nfor i in range(n):\n\tt = min(k, (100-skills[i]))\n\tskills[i] += t\n\tk -= t\n\tif k == 0: break\n\nprint(sum([i//10 for i in skills]))\n", "n, k = list(map(int, input().split(' ')[:2]))\na = list(map(int, input().split(' ')[:n]))\nb = [0 for i in range(101)]\n\nrating = 0\n\nfor i in a:\n\tb[i]+=1\n\trating += i // 10\n\nfor last_dig in range(9, 0, -1):\n\tfor first_dig in range(10):\n\t\tv = first_dig * 10 + last_dig\n\t\tneed_for_one = 10 - last_dig\n\t\tcan_use = min(b[v], k // need_for_one)\n\t\tk -= can_use * need_for_one\n\t\tb[v] -= can_use\n\t\tb[(first_dig + 1) * 10] += can_use\n\t\trating += can_use\n\nz = k // 10\n\nfor first_dig in range(10):\n\tv = first_dig * 10\n\tcan_use = min(z, b[v])\n\tb[first_dig * 10] -= can_use\n\tb[(first_dig + 1)* 10] += can_use\n\tz -= can_use\n\trating += can_use\n\nprint(rating)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n\n(n, k) = (int(i) for i in input().split())\nA      = [int(i) for i in input().split()]\n\nstart = time.time()\nA     = sorted(A, key = lambda x: -divmod(x, 10)[1])\nB     = [divmod(i, 10)[1] for i in A]\n\ni = 0\n\nwhile(k > 0 and i < len(A)):\n\tif B[i] == 0:\n\t\tbreak\n\n\tif k+B[i]-10 > 0:\n\t\tA[i] += 10 - B[i]\n\t\tk    -= 10 - B[i]\n\telse:\n\t\tA[i] += k\n\t\tk = 0\n\ti += 1\n\nif k > 0:\n\tfor i in range(len(A)):\n\t\tif k > 100 - A[i]:\n\t\t\tk    -= 100 - A[i]\n\t\t\tA[i]  = 100\n\t\telse:\n\t\t\tA[i] += k\n\t\t\tk = 0\n\t\t\tbreak\n\nans = sum([divmod(i, 10)[0] for i in A])\nprint(ans)\nfinish = time.time()\n#print(finish - start)\n", "__author__ = 'User'\nn, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\nmx = [0] * n\nscore = 0\nfor i in range(n):\n\tif arr[i] != 100:\n\t\tmx[i] = (10 - arr[i] % 10, i)\n\telse:\n\t\tmx[i] = (-1, i)\n\tscore += arr[i] // 10\nmx.sort()\ni = 0\n#print(mx, k)\n#print(score)\nwhile i < n and k >= mx[i][0]:\n\tif mx[i][0] != -1:\n\t\tk -= mx[i][0]\n\t\tarr[mx[i][1]] += mx[i][0]\n\t\tscore += 1\n\ti += 1\n#print(arr, k)\n#print(score)\nif i == n:\n\ti = 0\n\tk -= k % 10\n\twhile k >= 10 and i < n:\n\t\tif arr[i] != 100:\n\t\t\td = 100 - arr[i]\n\t\t\tif k >= d:\n\t\t\t\tk -= d\n\t\t\t\t#arr[i] += d\n\t\t\t\t#print(\"d\", d)\n\t\t\t\tscore += d // 10\n\t\t\telse:\n\t\t\t\t#arr[i] += k\n\t\t\t\tscore += k // 10\n\t\t\t\tk = 0\n\t\ti += 1\nprint(score)\n#print(arr)\n\n\n\n\n\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\narr = list()\nfor i in range(n):\n\tarr.append(((10 - a[i] + (a[i] // 10 * 10)) % 10, a[i]))\narr.sort()\n\nans = 0\nfor i in range(n):\n\tif arr[i][1] >= 100 or k - arr[i][0] < 0:\n\t\tans += arr[i][1] // 10\n\t\tcontinue\n\tk -= arr[i][0]\n\tans += (arr[i][1] + arr[i][0]) // 10\n\nt = 10 * n - ans\nans += min(k // 10, t)\nprint(ans)\n", "n, k = [int(x) for x in input().split()]\nl = [int(x) for x in input().split()]\nassert len(l) == n\nassert all(0 <= x <= 100 for x in l)\nf = [10-l[i]%10 for i in range(n) if l[i]%10]\nf.sort()\ncur = sum(x // 10 for x in l)\nfor x in f:\n\tif k >= x:\n\t\tcur += 1\n\t\tk -= x\nprint(min(cur + k // 10, 10 * n))\n#print(cur + k // 10)\n", "from sys import stdin\ninput = stdin.readline\nn, k = list(map(int, input().split()))\nl = list(map(int, input().split()))\nskills = 0\nremain = 0\nfor i in range(n):\n\tskills += l[i] // 10\n\ta = round(l[i], -1)\n\tif a < l[i]:\n\t\ta += 10\n\tif a < 100:\n\t\tremain += (100-a)//10\n\tif l[i] >= 100:\n\t\tl[i] = 0\n\t\tcontinue\n\tb = a - l[i]\n\tl[i] = b\nspent = 0\nl.sort()\n\nfor i in range(len(l)):\n\tif spent + l[i] <= k and l[i] != 0:\n\t\tskills += 1\n\t\tspent += l[i]\n\n\nskills += min(remain, (k - spent) // 10)\nprint(skills)\n", "n, k = list(map(int, input().split()))\nsum = 0\narr = list(map(int, input().split()))\n\nfor i in range (0, n):\n\tsum = sum + arr[i] // 10\n\ttemp = arr[i] // 10\n\tarr[i] =  temp * 10 + 10 - arr[i]\n\t\narr.sort()\n\nfor i in range (0, n):\n\tif k >= arr[i]:\n\t\tk = k - arr[i]\n\t\tsum = sum + 1\n\telse:\n\t\tbreak\n\nsum = sum + k // 10\nif sum > 10*n:\n\tsum = 10 *n\nprint(sum)\n\t\t\t\n", "def main():\n\tmode=\"filee\"\n\tif mode==\"file\":f=open(\"test.txt\",\"r\")\n\t#f.readline()\n\t#input()\n\tget = lambda :[int(x) for x in (f.readline() if mode==\"file\" else input()).split()]\n\t[n,k]=get()\n\ta=get()\n\tb=[]\n\ts=0\n\tfor i in a:\n\t\tif i==100:\n\t\t\ts+=10\n\t\t\tcontinue\n\t\tb.append([i%10,i])\n\tb.sort()\n\tb.reverse()\n\tif len(b)>0 and k>0:\n\t\tfor i in b:\n\t\t\tif k>=10-i[0]:\n\t\t\t\thold=min(10-i[0],k)\n\t\t\t\tk-=hold\n\t\t\t\ti[1]+=hold\n\t\t\t\ti[0]+=hold\n\t\t\telse:\n\t\t\t\tk=0\n\t\t\t\tbreak\n\tif k>0 and len(b)>0:\n\t\tk-=(k%10)\n\t\tfor i in b:\n\t\t\tif i[1]==100:\n\t\t\t\tcontinue\n\t\t\tif k==0:\n\t\t\t\tbreak\n\t\t\thold=min(100-i[1],k)\n\t\t\tk-=hold\n\t\t\ti[1]+=hold\n\tfor i in b:\n\t\ts+=i[1]//10\n\tprint(s)\n\tif mode==\"file\":f.close()\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\na.sort(key=lambda x: (x % 10), reverse=True)\ni = 0\nwhile (i < n and k > 0 and a[i] % 10 > 0):\n\tt = max(0, k - 10 + a[i] % 10)\n\ta[i] = a[i] // 10 * 10 + min(10, a[i] % 10 + k)\n\tk = t\n\ti += 1\ni = 0\nwhile (i < n and k > 0):\n\tt = 100 - a[i]\n\ta[i] += min(k, t)\n\tk = max(0, k - t)\n\ti += 1\nans = 0\nfor i in a:\n\tans += i // 10\nprint(ans)\n", "n, k = [int(x) for x in input().split()]\nl = [int(x) for x in input().split()]\nassert len(l) == n\nassert all(0 <= x <= 100 for x in l)\nf = [10-l[i]%10 for i in range(n) if l[i]%10]\nf.sort()\ncur = sum(x // 10 for x in l)\nfor x in f:\n\tif k >= x:\n\t\tcur += 1\n\t\tk -= x\nprint(min(cur + k // 10, 10 * n))\n#print(cur + k // 10)\n", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tans += a[i] // 10\n\ta[i] %= 10\na.sort()\na = a[::-1]\ni = 0\nwhile i != n and a[i] != 0 and m > 0:\n\tc = 10 - a[i]\n\tif m >= c:\n\t\tm -= c\n\t\tans += 1\n\telse:\n\t\tm = 0\n\ti += 1\nans += m // 10\nif ans < 10 * n:\n\tprint(ans)\nelse:\n\tprint(10 * n)\n", "from copy import deepcopy\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\nk1 = deepcopy(l)\nans = 0\nv = 0\nl = deepcopy(k1)\nfor i in range(n):\n\tl[i] = [l[i], i]\nfor i in range(n):\n\tif l[i][0] == 100:\n\t\tl[i][0] = -1\n\t\tk1[i] = -1\n\telse:\n\t\tl[i][0] %= 10\ncur = 10**9\nl.sort(reverse = True)\nfor i in range(n):\n\tif l[i][0] >= 0:\n\t\tcur = 10 - (l[i][0] % 10)\n\t\tif k < cur:\n\t\t\tbreak\n\t\telse:\n\t\t\tk -= cur\n\t\t\tk1[l[i][1]] += cur\ng = 0\nfor i in range(n):\n\tif k1[i] >= 0:\n\t\tg += 10 - k1[i] // 10\n\nfor i in range(n):\n\tif k1[i] >= 0:\n\t\tans += k1[i] // 10\n\telse:\n\t\tans += 10\n\t\nprint(ans + min(g, k // 10))\n", "n,k = list(map(int,input().split()))\nx = list(map(int,input().split()))\n\ndef f(a):\n\treturn (a/10 + 1 - a/10.0)\n\nx = sorted(x)\nx = sorted(x,key = lambda a: (int(a/10) + 1 - a/10.0))\nimproved,i,flag = 0,0,0\n\nwhile k>0:\n\tif i==n or x[i]==100:\n\t\tbreak\n\tif (int(x[i]/10) + 1 - x[i]/10.0)*10 > k:\n\t\tx[i]+=k\n\t\tk=0\n\t\tbreak\n\tk -= (int(x[i]/10) + 1 - x[i]/10.0)*10\n\tx[i] += (int(x[i]/10) + 1 - x[i]/10.0)*10\n\ti+=1\ni=0\nwhile k>0:\n\tif i==n:\n\t\tbreak\n\tif x[i]+k <= 100:\n\t\tx[i]+=k\n\t\tk=0\n\t\tbreak\n\tk-=100-x[i]\n\tx[i]=100\n\ti+=1\nfor i in range(0,n):\n\timproved+=int(x[i]/10)\nprint(improved)\n", "n,k= map(int,input().split(\" \"))\nmas = list(map(int,input().split(\" \")))\nsubmas= [10-i%10 if i<100 else 11 for i in mas]\nsumm=0\nfor i in mas:\n\tsumm+=i//10\nsubmas.sort()\n\nfor i in submas:\n\tif k>=i and i<=10:\n\t\tk-=i\n\t\tsumm+=1\n\telse:\n\t\tbreak\nif k>=10:\n\tfor i in range(n):\n\t\tif mas[i]<100:\n\t\t\tmas[i]=mas[i]+10-mas[i]%10\n\t\tif k>=100-mas[i]:\n\t\t\tsumm+=(100-mas[i])//10\n\t\t\tk-=(100-mas[i])\n\t\telse:\n\t\t\tsumm+=k//10\n\t\t\tbreak\nprint(summ)\n", "num_skills, improvement = list(map(int, input().split()))\nskills = list(map(int, input().split()))\nskills.sort(key = lambda skill: 10 - skill % 10)\n\nfor i, skill in enumerate(skills):\n\tif skill == 100:\n\t\tcontinue\n\tdelta = min(improvement, 10 - skill % 10)\n\tskills[i] += delta\n\timprovement -= delta\n\tif improvement == 0:\n\t\tbreak\n\nfor i, skill in enumerate(skills):\n\tdelta = min(improvement, 100 - skill)\n\tskills[i] += delta\n\timprovement -= delta\n\tif improvement == 0:\n\t\tbreak\n\nresult = 0\nfor skill in skills:\n\tresult += skill // 10\nprint(result)\n", "import math as m\n\ndef solve():\n\tn, k = (int(i) for i in input().split())\n\n\tai = [int(i) for i in input().split()]\n\n\tcnt = 0\n\n\tif(k > 100 * len(ai) - sum(ai)):\n\t\tk = 100 * len(ai) - sum(ai)\n\n\tfor i in range(len(ai)):\n\t\tcnt += m.floor(ai[i] / 10)\n\t\tai[i] = ai[i] % 10\n\n\tai.sort(reverse=True)\n\n\tfor i in range(len(ai)):\n\t\tdiff = 10- ai[i]\n\t\tif diff <= k:\n\t\t\tk -= diff\n\t\t\tcnt += 1\n\n\tcnt += m.floor(k / 10)\n\n\treturn cnt\n\nprint(solve())\n\n", "n, k = (int(x) for x in input().split())\na = [int(x) for x in input().split()]\na.sort(key=lambda x: -(x % 10))\nfor i in range(n):\n\tif a[i] % 10 == 0:\n\t\tbreak\n\tadd = min(k, 10 - a[i] % 10)\n\ta[i] += add\n\tk -= add\nfor i in range(n):\n\tadd = min(k, 100 - a[i])\n\ta[i] += add\n\tk -= add\nprint(sum(x // 10 for x in a))\n", "inp = input().split()\nn = int(inp[0])\nk = int(inp[1])\na = input().split()\nb = []\nx = 0\ntemp = []\n\nfor i in a:\n\ttemp = []\n\tx = int(i)\n\tif x == 100:\n\t\ttemp.append(0)\n\t\ttemp.append(x)\n\telse:\n\t\ttemp.append(10 - x % 10)\n\t\ttemp.append(x)\n\tb.append(temp)\n#print(b)\nb.sort()\n#print(b)\nj = 0\nss = 0\nc = []\nfor t in b:\n\tif t[0] == 0:\n\t\tpass\n\telif (t[0] <= k) and (k != 0) :\n\t\tk -= t[0]\n\t\tt[1] += t[0]\n\t\tt[0] = 0\n\tc.append(t[1] // 10)\nc.sort()\nj = 0\nk = k // 10\n#print(c, k)\nwhile j < n:\n\t#print(c[j], k)\n\tif ((10 - c[j]) <= k):\n\t\tk -= (10 - c[j])\n\t\tc[j] = 10\n\telse:\n\t\tc[j] += k\n\t\tk = 0\n\tss += c[j]\n\tj += 1\n#print(c)\nprint(ss)\n\n\n\n\n"], "id": "id6934"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6934", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["petya", 0], ["loves", 0], ["computer", 0], ["games", 0], ["finally", 0], ["a", 0], ["game", 0], ["that", 0], ["he", 0], ["s", 0], ["been", 1], ["waiting", 1], ["for", 1], ["so", 1], ["long", 1], ["came", 1], ["out", 1], ["the", 1], ["main", 1], ["character", 1], ["of", 1], ["this", 1], ["game", 1], ["has", 0], ["n", 0], ["different", 0], ["skills", 0], ["each", 0], ["of", 0], ["which", 0], ["is", 0], ["characterized", 0], ["by", 0], ["an", 0], ["integer", 0], ["a", 0], ["i", 0], ["from", 0], ["0", 0], ["to", 0], ["100", 0], ["the", 0], ["higher", 0], ["the", 0], ["number", 0], ["a", 0], ["i", 0], ["is", 1], ["the", 1], ["higher", 1], ["is", 1], ["the", 1], ["i", 1], ["th", 1], ["skill", 1], ["of", 1], ["the", 1], ["character", 1], ["the", 1], ["total", 1], ["rating", 1], ["of", 0], ["the", 0], ["character", 0], ["is", 0], ["calculated", 0], ["as", 0], ["the", 0], ["sum", 0], ["of", 0], ["the", 0], ["values", 0], ["​​of", 0], ["lfloor", 0], ["frac", 0], ["a", 0], ["i", 0], ["10", 0], ["rfloor", 0], ["for", 1], ["all", 1], ["i", 1], ["from", 1], ["1", 1], ["to", 1], ["n", 1], ["the", 1], ["expression", 1], ["⌊", 1], ["x⌋", 1], ["denotes", 1], ["the", 1], ["result", 1], ["of", 1], ["rounding", 1], ["the", 1], ["number", 1], ["x", 1], ["down", 1], ["to", 1], ["the", 1], ["nearest", 1], ["integer", 1], ["at", 1], ["the", 1], ["beginning", 1], ["of", 1], ["the", 1], ["game", 1], ["petya", 1], ["got", 1], ["k", 1], ["improvement", 1], ["units", 1], ["as", 1], ["a", 1], ["bonus", 1], ["that", 1], ["he", 1], ["can", 1], ["use", 1], ["to", 1], ["increase", 1], ["the", 1], ["skills", 1], ["of", 1], ["his", 1], ["character", 1], ["and", 0], ["his", 0], ["total", 0], ["rating", 0], ["one", 0], ["improvement", 0], ["unit", 0], ["can", 0], ["increase", 0], ["any", 0], ["skill", 0], ["of", 0], ["petya", 0], ["s", 0], ["character", 0], ["by", 0], ["exactly", 0], ["one", 0], ["for", 0], ["example", 0], ["if", 0], ["a", 0], ["4", 0], ["46", 1], ["after", 1], ["using", 1], ["one", 0], ["imporvement", 0], ["unit", 0], ["to", 0], ["this", 0], ["skill", 0], ["it", 0], ["becomes", 0], ["equal", 0], ["to", 0], ["47", 0], ["a", 0], ["hero", 0], ["s", 0], ["skill", 1], ["cannot", 1], ["rise", 1], ["higher", 1], ["more", 1], ["than", 1], ["100", 1], ["thus", 1], ["it", 1], ["is", 1], ["permissible", 1], ["that", 1], ["some", 1], ["of", 1], ["the", 1], ["units", 1], ["will", 1], ["remain", 1], ["unused", 1], ["your", 1], ["task", 1], ["is", 1], ["to", 1], ["determine", 1], ["the", 1], ["optimal", 1], ["way", 1], ["of", 1], ["using", 1], ["the", 1], ["improvement", 1], ["units", 1], ["so", 1], ["as", 1], ["to", 1], ["maximize", 1], ["the", 1], ["overall", 1], ["rating", 1], ["of", 1], ["the", 0], ["character", 0], ["it", 0], ["is", 0], ["not", 0], ["necessary", 0], ["to", 0], ["use", 0], ["all", 0], ["the", 0], ["improvement", 0], ["units", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["the", 1], ["input", 0], ["contains", 0], ["two", 0], ["positive", 0], ["integers", 1], ["n", 1], ["and", 1], ["k", 0], ["1", 0], ["≤", 0], ["n", 0], ["≤", 0], ["10", 0], ["5", 0], ["0", 0], ["≤", 0], ["k", 0], ["≤", 0], ["10", 0], ["7", 0], ["—", 1], ["the", 1], ["number", 1], ["of", 1], ["skills", 0], ["of", 0], ["the", 0], ["character", 0], ["and", 0], ["the", 0], ["number", 0], ["of", 0], ["units", 0], ["of", 0], ["improvements", 0], ["at", 0], ["petya", 0], ["s", 0], ["disposal", 1], ["the", 0], ["second", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["a", 0], ["sequence", 0], ["of", 0], ["n", 0], ["integers", 0], ["a", 0], ["i", 0], ["0", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 0], ["100", 0], ["where", 0], ["a", 0], ["i", 0], ["characterizes", 0], ["the", 0], ["level", 0], ["of", 0], ["the", 0], ["i", 0], ["th", 0], ["skill", 0], ["of", 0], ["the", 0], ["character", 0], ["output", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["the", 1], ["output", 1], ["should", 1], ["contain", 1], ["a", 1], ["single", 1], ["non", 1], ["negative", 1], ["integer", 1], ["—", 1], ["the", 1], ["maximum", 1], ["total", 1], ["rating", 1], ["of", 1], ["the", 0], ["character", 0], ["that", 0], ["petya", 0], ["can", 0], ["get", 0], ["using", 0], ["k", 0], ["or", 0], ["less", 0], ["improvement", 0], ["units", 0], ["examples", 0], ["input", 0], ["2", 0], ["4", 0], ["7", 0], ["9", 0], ["output", 0], ["2", 0], ["input", 0], ["3", 0], ["8", 0], ["17", 0], ["15", 0], ["19", 0], ["output", 0], ["5", 0], ["input", 0], ["2", 0], ["2", 0], ["99", 0], ["100", 0], ["output", 0], ["20", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["test", 0], ["case", 0], ["the", 0], ["optimal", 0], ["strategy", 0], ["is", 0], ["as", 0], ["follows", 0], ["petya", 0], ["has", 0], ["to", 0], ["improve", 0], ["the", 0], ["first", 0], ["skill", 0], ["to", 0], ["10", 0], ["by", 0], ["spending", 0], ["3", 0], ["improvement", 0], ["units", 0], ["and", 0], ["the", 0], ["second", 0], ["skill", 0], ["to", 0], ["10", 0], ["by", 0], ["spending", 0], ["one", 0], ["improvement", 0], ["unit", 0], ["thus", 0], ["petya", 0], ["spends", 0], ["all", 0], ["his", 0], ["improvement", 0], ["units", 0], ["and", 0], ["the", 0], ["total", 0], ["rating", 0], ["of", 0], ["the", 0], ["character", 0], ["becomes", 0], ["equal", 0], ["to", 0], ["lfloor", 0], ["frac", 0], ["100", 0], ["10", 0], ["rfloor", 0], ["lfloor", 0], ["frac", 0], ["100", 0], ["10", 0], ["rfloor", 0], ["10", 0], ["10", 0], ["20", 0], ["in", 0], ["the", 0], ["second", 0], ["test", 0], ["the", 0], ["optimal", 0], ["strategy", 0], ["for", 0], ["petya", 0], ["is", 0], ["to", 0], ["improve", 0], ["the", 0], ["first", 0], ["skill", 0], ["to", 0], ["20", 0], ["by", 0], ["spending", 0], ["3", 0], ["improvement", 0], ["units", 0], ["and", 0], ["to", 0], ["improve", 0], ["the", 0], ["third", 0], ["skill", 0], ["to", 0], ["20", 0], ["in", 0], ["this", 0], ["case", 0], ["by", 0], ["spending", 0], ["1", 0], ["improvement", 0], ["units", 0], ["thus", 0], ["petya", 0], ["is", 0], ["left", 0], ["with", 0], ["4", 0], ["improvement", 0], ["units", 0], ["and", 0], ["he", 0], ["will", 0], ["be", 0], ["able", 0], ["to", 0], ["increase", 0], ["the", 0], ["second", 0], ["skill", 0], ["to", 0], ["19", 0], ["which", 0], ["does", 0], ["not", 0], ["change", 0], ["the", 0], ["overall", 0], ["rating", 0], ["so", 0], ["petya", 0], ["does", 0], ["not", 0], ["necessarily", 0], ["have", 0], ["to", 0], ["do", 0], ["it", 0], ["therefore", 0], ["the", 0], ["highest", 0], ["possible", 0], ["total", 0], ["rating", 0], ["in", 0], ["this", 0], ["example", 0], ["is", 0], ["lfloor", 0], ["frac", 0], ["20", 0], ["10", 0], ["rfloor", 0], ["lfloor", 0], ["frac", 0], ["19", 0], ["10", 0], ["rfloor", 0], ["lfloor", 0], ["frac", 0], ["20", 0], ["10", 0], ["rfloor", 0], ["2", 0], ["1", 0], ["2", 0], ["5", 0], ["in", 0], ["the", 0], ["third", 0], ["test", 0], ["case", 0], ["the", 0], ["optimal", 0], ["strategy", 0], ["for", 0], ["petya", 0], ["is", 0], ["to", 0], ["increase", 0], ["the", 0], ["first", 0], ["skill", 0], ["to", 0], ["100", 0], ["by", 0], ["spending", 0], ["1", 0], ["improvement", 0], ["unit", 0], ["thereafter", 0], ["both", 0], ["skills", 0], ["of", 0], ["the", 0], ["character", 0], ["will", 0], ["be", 0], ["equal", 0], ["to", 0], ["100", 0], ["so", 0], ["petya", 0], ["will", 0], ["not", 0], ["be", 0], ["able", 0], ["to", 0], ["spend", 0], ["the", 0], ["remaining", 0], ["improvement", 0], ["unit", 0], ["so", 0], ["the", 0], ["answer", 0], ["is", 0], ["equal", 0], ["to", 0], ["lfloor", 0], ["frac", 0], ["100", 0], ["10", 0], ["rfloor", 0], ["lfloor", 0], ["frac", 0], ["100", 0], ["10", 0], ["rfloor", 0], ["10", 0], ["10", 0], ["20", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2568027210884354, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.2568027210884354, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.43833333333333335, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.43833333333333335, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2568027210884354, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.2568027210884354, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.43833333333333335, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.43833333333333335, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["sys", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["rv", 0], ["a", 0], ["rl", 0], ["1", 0], ["res", 0], ["0", 0], ["count", 0], ["0", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["100", 0], ["count", 0], ["10", 0], ["a", 0], ["i", 0], ["10", 0], ["1", 0], ["1", 0], ["res", 0], ["a", 0], ["i", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["10", 0], ["while", 0], ["count", 0], ["i", 0], ["0", 0], ["and", 0], ["k", 0], ["i", 0], ["1", 0], ["res", 0], ["1", 0], ["count", 0], ["i", 0], ["1", 0], ["k", 0], ["i", 0], ["1", 0], ["already", 0], ["res", 0], ["10", 0], ["possible", 0], ["n", 0], ["100", 0], ["diff", 0], ["possible", 0], ["already", 0], ["if", 0], ["diff", 0], ["0", 0], ["actual", 0], ["min", 0], ["diff", 0], ["k", 0], ["res", 0], ["actual", 0], ["10", 0], ["print", 0], ["res", 0], ["def", 0], ["prt", 0], ["l", 0], ["return", 0], ["print", 0], ["join", 0], ["map", 0], ["str", 0], ["l", 0], ["def", 0], ["rs", 0], ["return", 0], ["map", 0], ["str", 0], ["input", 0], ["split", 0], ["def", 0], ["rv", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["rl", 0], ["n", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["sys", 0], ["hexversion", 0], ["50594544", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["test", 0], ["txt", 0], ["solve", 0], ["import", 0], ["sys", 0], ["sys", 0], ["stdin", 0], ["open", 0], ["input", 0], ["txt", 0], ["sys", 0], ["stdout", 0], ["open", 0], ["output", 0], ["txt", 0], ["w", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["skill", 0], ["int", 0], ["i", 0], ["10", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["skill", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["skill", 0], ["i", 0], ["1", 0], ["10", 0], ["print", 0], ["skill", 0], ["print", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["skill", 0], ["i", 0], ["1", 0], ["100", 0], ["continue", 0], ["toup", 0], ["10", 0], ["skill", 0], ["i", 0], ["0", 0], ["if", 0], ["k", 0], ["toup", 0], ["k", 0], ["toup", 0], ["ans", 0], ["1", 0], ["skill", 0], ["i", 0], ["1", 0], ["toup", 0], ["print", 0], ["skill", 0], ["maxadd", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["maxadd", 0], ["100", 0], ["skill", 0], ["i", 0], ["1", 0], ["10", 0], ["print", 0], ["maxadd", 0], ["ans", 0], ["min", 0], ["k", 0], ["10", 0], ["maxadd", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["str", 0], ["split", 0], ["input", 0], ["a", 0], ["sorted", 0], ["map", 0], ["int", 0], ["str", 0], ["split", 0], ["input", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["10", 0], ["reverse", 0], ["true", 0], ["rating", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["delta", 0], ["10", 0], ["a", 0], ["i", 0], ["10", 0], ["if", 0], ["k", 0], ["delta", 0], ["and", 0], ["a", 0], ["i", 0], ["100", 0], ["a", 0], ["i", 0], ["delta", 0], ["k", 0], ["delta", 0], ["rating", 0], ["a", 0], ["i", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["k", 0], ["10", 0], ["break", 0], ["while", 0], ["a", 0], ["i", 0], ["100", 0], ["and", 0], ["k", 0], ["10", 0], ["a", 0], ["i", 0], ["10", 0], ["k", 0], ["10", 0], ["rating", 0], ["1", 0], ["print", 0], ["rating", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["if", 0], ["sum", 0], ["a", 0], ["k", 0], ["n", 0], ["100", 0], ["print", 0], ["n", 0], ["10", 0], ["return", 0], ["adds", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["a", 0], ["i", 0], ["10", 0], ["if", 0], ["a", 0], ["i", 0], ["100", 0], ["adds", 0], ["append", 0], ["10", 0], ["a", 0], ["i", 0], ["10", 0], ["adds", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["adds", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["else", 0], ["k", 0], ["adds", 0], ["i", 0], ["ans", 0], ["1", 0], ["ans", 0], ["k", 0], ["10", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ki", 0], ["0", 0], ["11", 0], ["su", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["t", 0], ["int", 0], ["x", 0], ["ki", 0], ["10", 0], ["t", 0], ["10", 0], ["1", 0], ["su", 0], ["t", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["10", 0], ["t", 0], ["min", 0], ["k", 0], ["i", 0], ["ki", 0], ["i", 0], ["su", 0], ["t", 0], ["k", 0], ["t", 0], ["i", 0], ["t", 0], ["k", 0], ["10", 0], ["su", 0], ["min", 0], ["t", 0], ["n", 0], ["10", 0], ["su", 0], ["print", 0], ["su", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["10", 0], ["for", 0], ["i", 0], ["a", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["if", 0], ["k", 0], ["0", 0], ["or", 0], ["a", 0], ["10", 0], ["0", 0], ["break", 0], ["new", 0], ["min", 0], ["k", 0], ["10", 0], ["a", 0], ["10", 0], ["100", 0], ["a", 0], ["a", 0], ["i", 0], ["new", 0], ["k", 0], ["new", 0], ["if", 0], ["k", 0], ["for", 0], ["i", 0], ["a", 0], ["in", 0], ["enumerate", 0], ["a", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["new", 0], ["min", 0], ["100", 0], ["a", 0], ["k", 0], ["a", 0], ["i", 0], ["new", 0], ["k", 0], ["new", 0], ["ans", 0], ["sum", 0], ["a", 0], ["10", 0], ["for", 0], ["a", 0], ["in", 0], ["a", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["skills", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["def", 0], ["fornextlvl", 0], ["x", 0], ["return", 0], ["10", 0], ["1", 0], ["x", 0], ["1", 0], ["10", 0], ["x", 0], ["left", 0], ["sorted", 0], ["fornextlvl", 0], ["skills", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["left", 0], ["reverse", 0], ["while", 0], ["k", 0], ["0", 0], ["and", 0], ["len", 0], ["left", 0], ["w", 0], ["left", 0], ["pop", 0], ["if", 0], ["w", 0], ["0", 0], ["k", 0], ["break", 0], ["k", 0], ["w", 0], ["0", 0], ["skills", 0], ["w", 0], ["1", 0], ["w", 0], ["0", 0], ["every", 0], ["skill", 0], ["must", 0], ["be", 0], ["a", 0], ["multiple", 0], ["of", 0], ["10", 0], ["by", 0], ["now", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["min", 0], ["k", 0], ["100", 0], ["skills", 0], ["i", 0], ["skills", 0], ["i", 0], ["t", 0], ["k", 0], ["t", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["print", 0], ["sum", 0], ["i", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["skills", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["2", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["n", 0], ["b", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["101", 0], ["rating", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["b", 0], ["i", 0], ["1", 0], ["rating", 0], ["i", 0], ["10", 0], ["for", 0], ["last", 0], ["dig", 0], ["in", 0], ["range", 0], ["9", 0], ["0", 0], ["1", 0], ["for", 0], ["first", 0], ["dig", 0], ["in", 0], ["range", 0], ["10", 0], ["v", 0], ["first", 0], ["dig", 0], ["10", 0], ["last", 0], ["dig", 0], ["need", 0], ["for", 0], ["one", 0], ["10", 0], ["last", 0], ["dig", 0], ["can", 0], ["use", 0], ["min", 0], ["b", 0], ["v", 0], ["k", 0], ["need", 0], ["for", 0], ["one", 0], ["k", 0], ["can", 0], ["use", 0], ["need", 0], ["for", 0], ["one", 0], ["b", 0], ["v", 0], ["can", 0], ["use", 0], ["b", 0], ["first", 0], ["dig", 0], ["1", 0], ["10", 0], ["can", 0], ["use", 0], ["rating", 0], ["can", 0], ["use", 0], ["z", 0], ["k", 0], ["10", 0], ["for", 0], ["first", 0], ["dig", 0], ["in", 0], ["range", 0], ["10", 0], ["v", 0], ["first", 0], ["dig", 0], ["10", 0], ["can", 0], ["use", 0], ["min", 0], ["z", 0], ["b", 0], ["v", 0], ["b", 0], ["first", 0], ["dig", 0], ["10", 0], ["can", 0], ["use", 0], ["b", 0], ["first", 0], ["dig", 0], ["1", 0], ["10", 0], ["can", 0], ["use", 0], ["z", 0], ["can", 0], ["use", 0], ["rating", 0], ["can", 0], ["use", 0], ["print", 0], ["rating", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["import", 0], ["time", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["start", 0], ["time", 0], ["time", 0], ["a", 0], ["sorted", 0], ["a", 0], ["key", 0], ["lambda", 0], ["x", 0], ["divmod", 0], ["x", 0], ["10", 0], ["1", 0], ["b", 0], ["divmod", 0], ["i", 0], ["10", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["i", 0], ["0", 0], ["while", 0], ["k", 0], ["0", 0], ["and", 0], ["i", 0], ["len", 0], ["a", 0], ["if", 0], ["b", 0], ["i", 0], ["0", 0], ["break", 0], ["if", 0], ["k", 0], ["b", 0], ["i", 0], ["10", 0], ["0", 0], ["a", 0], ["i", 0], ["10", 0], ["b", 0], ["i", 0], ["k", 0], ["10", 0], ["b", 0], ["i", 0], ["else", 0], ["a", 0], ["i", 0], ["k", 0], ["k", 0], ["0", 0], ["i", 0], ["1", 0], ["if", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["if", 0], ["k", 0], ["100", 0], ["a", 0], ["i", 0], ["k", 0], ["100", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["100", 0], ["else", 0], ["a", 0], ["i", 0], ["k", 0], ["k", 0], ["0", 0], ["break", 0], ["ans", 0], ["sum", 0], ["divmod", 0], ["i", 0], ["10", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["print", 0], ["ans", 0], ["finish", 0], ["time", 0], ["time", 0], ["print", 0], ["finish", 0], ["start", 0], ["author", 0], ["user", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mx", 0], ["0", 0], ["n", 0], ["score", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["100", 0], ["mx", 0], ["i", 0], ["10", 0], ["arr", 0], ["i", 0], ["10", 0], ["i", 0], ["else", 0], ["mx", 0], ["i", 0], ["1", 0], ["i", 0], ["score", 0], ["arr", 0], ["i", 0], ["10", 0], ["mx", 0], ["sort", 0], ["i", 0], ["0", 0], ["print", 0], ["mx", 0], ["k", 0], ["print", 0], ["score", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["k", 0], ["mx", 0], ["i", 0], ["0", 0], ["if", 0], ["mx", 0], ["i", 0], ["0", 0], ["1", 0], ["k", 0], ["mx", 0], ["i", 0], ["0", 0], ["arr", 0], ["mx", 0], ["i", 0], ["1", 0], ["mx", 0], ["i", 0], ["0", 0], ["score", 0], ["1", 0], ["i", 0], ["1", 0], ["print", 0], ["arr", 0], ["k", 0], ["print", 0], ["score", 0], ["if", 0], ["i", 0], ["n", 0], ["i", 0], ["0", 0], ["k", 0], ["k", 0], ["10", 0], ["while", 0], ["k", 0], ["10", 0], ["and", 0], ["i", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["100", 0], ["d", 0], ["100", 0], ["arr", 0], ["i", 0], ["if", 0], ["k", 0], ["d", 0], ["k", 0], ["d", 0], ["arr", 0], ["i", 0], ["d", 0], ["print", 0], ["d", 0], ["d", 0], ["score", 0], ["d", 0], ["10", 0], ["else", 0], ["arr", 0], ["i", 0], ["k", 0], ["score", 0], ["k", 0], ["10", 0], ["k", 0], ["0", 0], ["i", 0], ["1", 0], ["print", 0], ["score", 0], ["print", 0], ["arr", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["arr", 0], ["append", 0], ["10", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["10", 0], ["10", 0], ["10", 0], ["a", 0], ["i", 0], ["arr", 0], ["sort", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["arr", 0], ["i", 0], ["1", 0], ["100", 0], ["or", 0], ["k", 0], ["arr", 0], ["i", 0], ["0", 0], ["0", 0], ["ans", 0], ["arr", 0], ["i", 0], ["1", 0], ["10", 0], ["continue", 0], ["k", 0], ["arr", 0], ["i", 0], ["0", 0], ["ans", 0], ["arr", 0], ["i", 0], ["1", 0], ["arr", 0], ["i", 0], ["0", 0], ["10", 0], ["t", 0], ["10", 0], ["n", 0], ["ans", 0], ["ans", 0], ["min", 0], ["k", 0], ["10", 0], ["t", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["assert", 0], ["len", 0], ["l", 0], ["n", 0], ["assert", 0], ["all", 0], ["0", 0], ["x", 0], ["100", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["f", 0], ["10", 0], ["l", 0], ["i", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l", 0], ["i", 0], ["10", 0], ["f", 0], ["sort", 0], ["cur", 0], ["sum", 0], ["x", 0], ["10", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["for", 0], ["x", 0], ["in", 0], ["f", 0], ["if", 0], ["k", 0], ["x", 0], ["cur", 0], ["1", 0], ["k", 0], ["x", 0], ["print", 0], ["min", 0], ["cur", 0], ["k", 0], ["10", 0], ["10", 0], ["n", 0], ["print", 0], ["cur", 0], ["k", 0], ["10", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["stdin", 0], ["readline", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["skills", 0], ["0", 0], ["remain", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["skills", 0], ["l", 0], ["i", 0], ["10", 0], ["a", 0], ["round", 0], ["l", 0], ["i", 0], ["1", 0], ["if", 0], ["a", 0], ["l", 0], ["i", 0], ["a", 0], ["10", 0], ["if", 0], ["a", 0], ["100", 0], ["remain", 0], ["100", 0], ["a", 0], ["10", 0], ["if", 0], ["l", 0], ["i", 0], ["100", 0], ["l", 0], ["i", 0], ["0", 0], ["continue", 0], ["b", 0], ["a", 0], ["l", 0], ["i", 0], ["l", 0], ["i", 0], ["b", 0], ["spent", 0], ["0", 0], ["l", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["l", 0], ["if", 0], ["spent", 0], ["l", 0], ["i", 0], ["k", 0], ["and", 0], ["l", 0], ["i", 0], ["0", 0], ["skills", 0], ["1", 0], ["spent", 0], ["l", 0], ["i", 0], ["skills", 0], ["min", 0], ["remain", 0], ["k", 0], ["spent", 0], ["10", 0], ["print", 0], ["skills", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum", 0], ["0", 0], ["arr", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["sum", 0], ["sum", 0], ["arr", 0], ["i", 0], ["10", 0], ["temp", 0], ["arr", 0], ["i", 0], ["10", 0], ["arr", 0], ["i", 0], ["temp", 0], ["10", 0], ["10", 0], ["arr", 0], ["i", 0], ["arr", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["if", 0], ["k", 0], ["arr", 0], ["i", 0], ["k", 0], ["k", 0], ["arr", 0], ["i", 0], ["sum", 0], ["sum", 0], ["1", 0], ["else", 0], ["break", 0], ["sum", 0], ["sum", 0], ["k", 0], ["10", 0], ["if", 0], ["sum", 0], ["10", 0], ["n", 0], ["sum", 0], ["10", 0], ["n", 0], ["print", 0], ["sum", 0], ["def", 0], ["main", 0], ["mode", 0], ["filee", 0], ["if", 0], ["mode", 0], ["file", 0], ["f", 0], ["open", 0], ["test", 0], ["txt", 0], ["r", 0], ["f", 0], ["readline", 0], ["input", 0], ["get", 0], ["lambda", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["f", 0], ["readline", 0], ["if", 0], ["mode", 0], ["file", 0], ["else", 0], ["input", 0], ["split", 0], ["n", 0], ["k", 0], ["get", 0], ["a", 0], ["get", 0], ["b", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["100", 0], ["s", 0], ["10", 0], ["continue", 0], ["b", 0], ["append", 0], ["i", 0], ["10", 0], ["i", 0], ["b", 0], ["sort", 0], ["b", 0], ["reverse", 0], ["if", 0], ["len", 0], ["b", 0], ["0", 0], ["and", 0], ["k", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["if", 0], ["k", 0], ["10", 0], ["i", 0], ["0", 0], ["hold", 0], ["min", 0], ["10", 0], ["i", 0], ["0", 0], ["k", 0], ["k", 0], ["hold", 0], ["i", 0], ["1", 0], ["hold", 0], ["i", 0], ["0", 0], ["hold", 0], ["else", 0], ["k", 0], ["0", 0], ["break", 0], ["if", 0], ["k", 0], ["0", 0], ["and", 0], ["len", 0], ["b", 0], ["0", 0], ["k", 0], ["k", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["if", 0], ["i", 0], ["1", 0], ["100", 0], ["continue", 0], ["if", 0], ["k", 0], ["0", 0], ["break", 0], ["hold", 0], ["min", 0], ["100", 0], ["i", 0], ["1", 0], ["k", 0], ["k", 0], ["hold", 0], ["i", 0], ["1", 0], ["hold", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["s", 0], ["i", 0], ["1", 0], ["10", 0], ["print", 0], ["s", 0], ["if", 0], ["mode", 0], ["file", 0], ["f", 0], ["close", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["10", 0], ["reverse", 0], ["true", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["k", 0], ["0", 0], ["and", 0], ["a", 0], ["i", 0], ["10", 0], ["0", 0], ["t", 0], ["max", 0], ["0", 0], ["k", 0], ["10", 0], ["a", 0], ["i", 0], ["10", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["10", 0], ["10", 0], ["min", 0], ["10", 0], ["a", 0], ["i", 0], ["10", 0], ["k", 0], ["k", 0], ["t", 0], ["i", 0], ["1", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["k", 0], ["0", 0], ["t", 0], ["100", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["min", 0], ["k", 0], ["t", 0], ["k", 0], ["max", 0], ["0", 0], ["k", 0], ["t", 0], ["i", 0], ["1", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["ans", 0], ["i", 0], ["10", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["assert", 0], ["len", 0], ["l", 0], ["n", 0], ["assert", 0], ["all", 0], ["0", 0], ["x", 0], ["100", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["f", 0], ["10", 0], ["l", 0], ["i", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l", 0], ["i", 0], ["10", 0], ["f", 0], ["sort", 0], ["cur", 0], ["sum", 0], ["x", 0], ["10", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["for", 0], ["x", 0], ["in", 0], ["f", 0], ["if", 0], ["k", 0], ["x", 0], ["cur", 0], ["1", 0], ["k", 0], ["x", 0], ["print", 0], ["min", 0], ["cur", 0], ["k", 0], ["10", 0], ["10", 0], ["n", 0], ["print", 0], ["cur", 0], ["k", 0], ["10", 0], ["n", 0], ["m", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ans", 0], ["a", 0], ["i", 0], ["10", 0], ["a", 0], ["i", 0], ["10", 0], ["a", 0], ["sort", 0], ["a", 0], ["a", 0], ["1", 0], ["i", 0], ["0", 0], ["while", 0], ["i", 0], ["n", 0], ["and", 0], ["a", 0], ["i", 0], ["0", 0], ["and", 0], ["m", 0], ["0", 0], ["c", 0], ["10", 0], ["a", 0], ["i", 0], ["if", 0], ["m", 0], ["c", 0], ["m", 0], ["c", 0], ["ans", 0], ["1", 0], ["else", 0], ["m", 0], ["0", 0], ["i", 0], ["1", 0], ["ans", 0], ["m", 0], ["10", 0], ["if", 0], ["ans", 0], ["10", 0], ["n", 0], ["print", 0], ["ans", 0], ["else", 0], ["print", 0], ["10", 0], ["n", 0], ["from", 0], ["copy", 0], ["import", 0], ["deepcopy", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["k1", 0], ["deepcopy", 0], ["l", 0], ["ans", 0], ["0", 0], ["v", 0], ["0", 0], ["l", 0], ["deepcopy", 0], ["k1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["i", 0], ["l", 0], ["i", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l", 0], ["i", 0], ["0", 0], ["100", 0], ["l", 0], ["i", 0], ["0", 0], ["1", 0], ["k1", 0], ["i", 0], ["1", 0], ["else", 0], ["l", 0], ["i", 0], ["0", 0], ["10", 0], ["cur", 0], ["10", 0], ["9", 0], ["l", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["l", 0], ["i", 0], ["0", 0], ["0", 0], ["cur", 0], ["10", 0], ["l", 0], ["i", 0], ["0", 0], ["10", 0], ["if", 0], ["k", 0], ["cur", 0], ["break", 0], ["else", 0], ["k", 0], ["cur", 0], ["k1", 0], ["l", 0], ["i", 0], ["1", 0], ["cur", 0], ["g", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["k1", 0], ["i", 0], ["0", 0], ["g", 0], ["10", 0], ["k1", 0], ["i", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["k1", 0], ["i", 0], ["0", 0], ["ans", 0], ["k1", 0], ["i", 0], ["10", 0], ["else", 0], ["ans", 0], ["10", 0], ["print", 0], ["ans", 0], ["min", 0], ["g", 0], ["k", 0], ["10", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["f", 0], ["a", 0], ["return", 0], ["a", 0], ["10", 0], ["1", 0], ["a", 0], ["10", 0], ["0", 0], ["x", 0], ["sorted", 0], ["x", 0], ["x", 0], ["sorted", 0], ["x", 0], ["key", 0], ["lambda", 0], ["a", 0], ["int", 0], ["a", 0], ["10", 0], ["1", 0], ["a", 0], ["10", 0], ["0", 0], ["improved", 0], ["i", 0], ["flag", 0], ["0", 0], ["0", 0], ["0", 0], ["while", 0], ["k", 0], ["0", 0], ["if", 0], ["i", 0], ["n", 0], ["or", 0], ["x", 0], ["i", 0], ["100", 0], ["break", 0], ["if", 0], ["int", 0], ["x", 0], ["i", 0], ["10", 0], ["1", 0], ["x", 0], ["i", 0], ["10", 0], ["0", 0], ["10", 0], ["k", 0], ["x", 0], ["i", 0], ["k", 0], ["k", 0], ["0", 0], ["break", 0], ["k", 0], ["int", 0], ["x", 0], ["i", 0], ["10", 0], ["1", 0], ["x", 0], ["i", 0], ["10", 0], ["0", 0], ["10", 0], ["x", 0], ["i", 0], ["int", 0], ["x", 0], ["i", 0], ["10", 0], ["1", 0], ["x", 0], ["i", 0], ["10", 0], ["0", 0], ["10", 0], ["i", 0], ["1", 0], ["i", 0], ["0", 0], ["while", 0], ["k", 0], ["0", 0], ["if", 0], ["i", 0], ["n", 0], ["break", 0], ["if", 0], ["x", 0], ["i", 0], ["k", 0], ["100", 0], ["x", 0], ["i", 0], ["k", 0], ["k", 0], ["0", 0], ["break", 0], ["k", 0], ["100", 0], ["x", 0], ["i", 0], ["x", 0], ["i", 0], ["100", 0], ["i", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["improved", 0], ["int", 0], ["x", 0], ["i", 0], ["10", 0], ["print", 0], ["improved", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mas", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["submas", 0], ["10", 0], ["i", 0], ["10", 0], ["if", 0], ["i", 0], ["100", 0], ["else", 0], ["11", 0], ["for", 0], ["i", 0], ["in", 0], ["mas", 0], ["summ", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["mas", 0], ["summ", 0], ["i", 0], ["10", 0], ["submas", 0], ["sort", 0], ["for", 0], ["i", 0], ["in", 0], ["submas", 0], ["if", 0], ["k", 0], ["i", 0], ["and", 0], ["i", 0], ["10", 0], ["k", 0], ["i", 0], ["summ", 0], ["1", 0], ["else", 0], ["break", 0], ["if", 0], ["k", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["mas", 0], ["i", 0], ["100", 0], ["mas", 0], ["i", 0], ["mas", 0], ["i", 0], ["10", 0], ["mas", 0], ["i", 0], ["10", 0], ["if", 0], ["k", 0], ["100", 0], ["mas", 0], ["i", 0], ["summ", 0], ["100", 0], ["mas", 0], ["i", 0], ["10", 0], ["k", 0], ["100", 0], ["mas", 0], ["i", 0], ["else", 0], ["summ", 0], ["k", 0], ["10", 0], ["break", 0], ["print", 0], ["summ", 0], ["num", 0], ["skills", 0], ["improvement", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["skills", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["skills", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["skill", 0], ["10", 0], ["skill", 0], ["10", 0], ["for", 0], ["i", 0], ["skill", 0], ["in", 0], ["enumerate", 0], ["skills", 0], ["if", 0], ["skill", 0], ["100", 0], ["continue", 0], ["delta", 0], ["min", 0], ["improvement", 0], ["10", 0], ["skill", 0], ["10", 0], ["skills", 0], ["i", 0], ["delta", 0], ["improvement", 0], ["delta", 0], ["if", 0], ["improvement", 0], ["0", 0], ["break", 0], ["for", 0], ["i", 0], ["skill", 0], ["in", 0], ["enumerate", 0], ["skills", 0], ["delta", 0], ["min", 0], ["improvement", 0], ["100", 0], ["skill", 0], ["skills", 0], ["i", 0], ["delta", 0], ["improvement", 0], ["delta", 0], ["if", 0], ["improvement", 0], ["0", 0], ["break", 0], ["result", 0], ["0", 0], ["for", 0], ["skill", 0], ["in", 0], ["skills", 0], ["result", 0], ["skill", 0], ["10", 0], ["print", 0], ["result", 0], ["import", 0], ["math", 0], ["as", 0], ["m", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["ai", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["cnt", 0], ["0", 0], ["if", 0], ["k", 0], ["100", 0], ["len", 0], ["ai", 0], ["sum", 0], ["ai", 0], ["k", 0], ["100", 0], ["len", 0], ["ai", 0], ["sum", 0], ["ai", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ai", 0], ["cnt", 0], ["m", 0], ["floor", 0], ["ai", 0], ["i", 0], ["10", 0], ["ai", 0], ["i", 0], ["ai", 0], ["i", 0], ["10", 0], ["ai", 0], ["sort", 0], ["reverse", 0], ["true", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["ai", 0], ["diff", 0], ["10", 0], ["ai", 0], ["i", 0], ["if", 0], ["diff", 0], ["k", 0], ["k", 0], ["diff", 0], ["cnt", 0], ["1", 0], ["cnt", 0], ["m", 0], ["floor", 0], ["k", 0], ["10", 0], ["return", 0], ["cnt", 0], ["print", 0], ["solve", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["x", 0], ["x", 0], ["10", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["a", 0], ["i", 0], ["10", 0], ["0", 0], ["break", 0], ["add", 0], ["min", 0], ["k", 0], ["10", 0], ["a", 0], ["i", 0], ["10", 0], ["a", 0], ["i", 0], ["add", 0], ["k", 0], ["add", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["add", 0], ["min", 0], ["k", 0], ["100", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["add", 0], ["k", 0], ["add", 0], ["print", 0], ["sum", 0], ["x", 0], ["10", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["inp", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["inp", 0], ["0", 0], ["k", 0], ["int", 0], ["inp", 0], ["1", 0], ["a", 0], ["input", 0], ["split", 0], ["b", 0], ["x", 0], ["0", 0], ["temp", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["temp", 0], ["x", 0], ["int", 0], ["i", 0], ["if", 0], ["x", 0], ["100", 0], ["temp", 0], ["append", 0], ["0", 0], ["temp", 0], ["append", 0], ["x", 0], ["else", 0], ["temp", 0], ["append", 0], ["10", 0], ["x", 0], ["10", 0], ["temp", 0], ["append", 0], ["x", 0], ["b", 0], ["append", 0], ["temp", 0], ["print", 0], ["b", 0], ["b", 0], ["sort", 0], ["print", 0], ["b", 0], ["j", 0], ["0", 0], ["ss", 0], ["0", 0], ["c", 0], ["for", 0], ["t", 0], ["in", 0], ["b", 0], ["if", 0], ["t", 0], ["0", 0], ["0", 0], ["pass", 0], ["elif", 0], ["t", 0], ["0", 0], ["k", 0], ["and", 0], ["k", 0], ["0", 0], ["k", 0], ["t", 0], ["0", 0], ["t", 0], ["1", 0], ["t", 0], ["0", 0], ["t", 0], ["0", 0], ["0", 0], ["c", 0], ["append", 0], ["t", 0], ["1", 0], ["10", 0], ["c", 0], ["sort", 0], ["j", 0], ["0", 0], ["k", 0], ["k", 0], ["10", 0], ["print", 0], ["c", 0], ["k", 0], ["while", 0], ["j", 0], ["n", 0], ["print", 0], ["c", 0], ["j", 0], ["k", 0], ["if", 0], ["10", 0], ["c", 0], ["j", 0], ["k", 0], ["k", 0], ["10", 0], ["c", 0], ["j", 0], ["c", 0], ["j", 0], ["10", 0], ["else", 0], ["c", 0], ["j", 0], ["k", 0], ["k", 0], ["0", 0], ["ss", 0], ["c", 0], ["j", 0], ["j", 0], ["1", 0], ["print", 0], ["c", 0], ["print", 0], ["ss", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nIn research, it is tough to determine how good of a researcher you are. One way that people determine how good you are is by looking at your $H$-Index.\n\nEach paper has a certain number of citations. Your $H$-Index is the largest number $H$ such that you have $H$ papers with at least $H$ citations. Given the number of citations on each paper you have written, what is your $H$-Index?\n\n-----Input-----\nThe first line of input contains a single integer $n$ ($1 \\leq n \\leq 100000$), which is the number of papers you have written.\n\nThe next $n$ lines describe the papers. Each of these lines contains a single integer $c$ ($0 \\leq c \\leq 1000000000$), which is the number of citations that this paper has.\n\n-----Output-----\nDisplay your $H$-Index.\n\n-----Examples-----\nSample Input 1:\n5\n7\n1\n2\n1\n5\nSample Output 1:\n2\n\nSample Input 2:\n5\n7\n1\n3\n1\n5\nSample Output 2:\n3\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7510"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7510", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["in", 1], ["research", 1], ["it", 1], ["is", 1], ["tough", 1], ["to", 1], ["determine", 1], ["how", 1], ["good", 1], ["of", 1], ["a", 1], ["researcher", 1], ["you", 1], ["are", 1], ["one", 1], ["way", 1], ["that", 1], ["people", 1], ["determine", 1], ["how", 1], ["good", 1], ["you", 1], ["are", 1], ["is", 1], ["by", 1], ["looking", 1], ["at", 1], ["your", 1], ["h", 1], ["index", 1], ["each", 1], ["paper", 1], ["has", 1], ["a", 1], ["certain", 1], ["number", 1], ["of", 1], ["citations", 1], ["your", 1], ["h", 1], ["index", 1], ["is", 1], ["the", 1], ["largest", 1], ["number", 1], ["h", 1], ["such", 1], ["that", 1], ["you", 1], ["have", 1], ["h", 1], ["papers", 1], ["with", 1], ["at", 1], ["least", 1], ["h", 1], ["citations", 1], ["given", 1], ["the", 1], ["number", 1], ["of", 1], ["citations", 0], ["on", 0], ["each", 0], ["paper", 0], ["you", 0], ["have", 0], ["written", 0], ["what", 0], ["is", 0], ["your", 0], ["h", 0], ["index", 0], ["input", 0], ["the", 2], ["first", 6], ["line", 0], ["of", 0], ["input", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["n", 0], ["1", 0], ["leq", 0], ["n", 0], ["leq", 0], ["100000", 0], ["which", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["papers", 1], ["you", 1], ["have", 1], ["written", 1], ["the", 1], ["next", 1], ["n", 1], ["lines", 1], ["describe", 1], ["the", 1], ["papers", 1], ["each", 1], ["of", 0], ["these", 0], ["lines", 0], ["contains", 0], ["a", 0], ["single", 0], ["integer", 0], ["c", 0], ["0", 0], ["leq", 0], ["c", 0], ["leq", 0], ["1000000000", 0], ["which", 0], ["is", 0], ["the", 0], ["number", 0], ["of", 0], ["citations", 0], ["that", 0], ["this", 0], ["paper", 0], ["has", 0], ["output", 0], ["display", 0], ["your", 0], ["h", 0], ["index", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["5", 0], ["7", 0], ["1", 0], ["2", 0], ["1", 0], ["5", 0], ["sample", 0], ["output", 0], ["1", 0], ["2", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["7", 0], ["1", 0], ["3", 0], ["1", 0], ["5", 0], ["sample", 0], ["output", 0], ["2", 0], ["3", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4916666666666666, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6744186046511628, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6337209302325582, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4916666666666666, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6744186046511628, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6337209302325582, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nLittle Ivica solves crossword puzzles every day. In case you haven’t seen one, a crossword puzzle starts on a grid of $R \\times C$ squares, each of which is either empty or blocked. The player’s task is to write words in consecutive empty squares vertically (top down) or horizontally (left to right).\n\nIvica’s sister has a strange habit of looking at crosswords Ivica has finished solving, and finding the lexicographically smallest word in it. She only considers words at least $2$ characters long.\n\nWrite a program that, given a crossword puzzle, finds that word.\n\n-----Input-----\nThe first line contains two integers $R$ and $C$ ($2 \\le R, C \\le 20$), the number of rows and columns in the crosswords.\n\nEach of the following $R$ lines contains a string of $C$ characters. Each of those characters is either a lowercase letter of the English alphabet, or the character ‘#’ representing a blocked square.\n\nThe input will be such that a solution will always exist.\n\n-----Output-----\nOutput the lexicographically smallest word in the crossword.\n\n-----Examples-----\nSample Input 1:\n4 4\nluka\no#a#\nkula\ni#a#\nSample Output 1:\nkala\n\nSample Input 2:\n4 4\nluka\no#a#\nkula\ni#as\nSample Output 2:\nas\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8072"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8072", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["little", 1], ["ivica", 1], ["solves", 1], ["crossword", 1], ["puzzles", 1], ["every", 1], ["day", 1], ["in", 1], ["case", 1], ["you", 1], ["haven’t", 1], ["seen", 1], ["one", 1], ["a", 1], ["crossword", 1], ["puzzle", 1], ["starts", 1], ["on", 1], ["a", 1], ["grid", 1], ["of", 1], ["r", 1], ["times", 1], ["c", 1], ["squares", 1], ["each", 1], ["of", 1], ["which", 1], ["is", 1], ["either", 1], ["empty", 1], ["or", 1], ["blocked", 1], ["the", 1], ["player’s", 1], ["task", 1], ["is", 1], ["to", 1], ["write", 1], ["words", 1], ["in", 1], ["consecutive", 1], ["empty", 1], ["squares", 1], ["vertically", 1], ["top", 1], ["down", 1], ["or", 1], ["horizontally", 1], ["left", 1], ["to", 1], ["right", 1], ["ivica’s", 1], ["sister", 1], ["has", 1], ["a", 1], ["strange", 1], ["habit", 1], ["of", 1], ["looking", 1], ["at", 1], ["crosswords", 1], ["ivica", 1], ["has", 1], ["finished", 1], ["solving", 1], ["and", 1], ["finding", 1], ["the", 1], ["lexicographically", 1], ["smallest", 1], ["word", 1], ["in", 1], ["it", 1], ["she", 1], ["only", 1], ["considers", 1], ["words", 1], ["at", 1], ["least", 1], ["2", 1], ["characters", 1], ["long", 0], ["write", 0], ["a", 0], ["program", 0], ["that", 0], ["given", 0], ["a", 0], ["crossword", 0], ["puzzle", 0], ["finds", 0], ["that", 0], ["word", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["two", 1], ["integers", 1], ["r", 1], ["and", 1], ["c", 1], ["2", 1], ["le", 1], ["r", 1], ["c", 1], ["le", 1], ["20", 1], ["the", 1], ["number", 1], ["of", 1], ["rows", 1], ["and", 1], ["columns", 1], ["in", 1], ["the", 1], ["crosswords", 1], ["each", 1], ["of", 1], ["the", 1], ["following", 1], ["r", 1], ["lines", 1], ["contains", 1], ["a", 1], ["string", 1], ["of", 1], ["c", 1], ["characters", 1], ["each", 1], ["of", 1], ["those", 1], ["characters", 1], ["is", 1], ["either", 1], ["a", 1], ["lowercase", 1], ["letter", 1], ["of", 1], ["the", 1], ["english", 1], ["alphabet", 1], ["or", 1], ["the", 1], ["character", 1], ["‘", 1], ["’", 1], ["representing", 1], ["a", 1], ["blocked", 1], ["square", 1], ["the", 0], ["input", 0], ["will", 0], ["be", 0], ["such", 0], ["that", 0], ["a", 0], ["solution", 0], ["will", 0], ["always", 0], ["exist", 0], ["output", 0], ["output", 0], ["the", 0], ["lexicographically", 0], ["smallest", 0], ["word", 0], ["in", 0], ["the", 0], ["crossword", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["4", 0], ["4", 0], ["luka", 0], ["o", 0], ["a", 0], ["kula", 0], ["i", 0], ["a", 0], ["sample", 0], ["output", 0], ["1", 0], ["kala", 0], ["sample", 0], ["input", 0], ["2", 0], ["4", 0], ["4", 0], ["luka", 0], ["o", 0], ["a", 0], ["kula", 0], ["i", 0], ["as", 0], ["sample", 0], ["output", 0], ["2", 0], ["as", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6896551724137931, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6896551724137931, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7627906976744186, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7627906976744186, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6896551724137931, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6896551724137931, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7627906976744186, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7627906976744186, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nDima, Inna and Seryozha have gathered in a room. That's right, someone's got to go. To cheer Seryozha up and inspire him to have a walk, Inna decided to cook something. \n\nDima and Seryozha have n fruits in the fridge. Each fruit has two parameters: the taste and the number of calories. Inna decided to make a fruit salad, so she wants to take some fruits from the fridge for it. Inna follows a certain principle as she chooses the fruits: the total taste to the total calories ratio of the chosen fruits must equal k. In other words, $\\frac{\\sum_{j = 1}^{m} a_{j}}{\\sum_{j = 1}^{m} b_{j}} = k$ , where a_{j} is the taste of the j-th chosen fruit and b_{j} is its calories.\n\nInna hasn't chosen the fruits yet, she is thinking: what is the maximum taste of the chosen fruits if she strictly follows her principle? Help Inna solve this culinary problem — now the happiness of a young couple is in your hands!\n\nInna loves Dima very much so she wants to make the salad from at least one fruit.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10). The second line of the input contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 100) — the fruits' tastes. The third line of the input contains n integers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 100) — the fruits' calories. Fruit number i has taste a_{i} and calories b_{i}.\n\n\n-----Output-----\n\nIf there is no way Inna can choose the fruits for the salad, print in the single line number -1. Otherwise, print a single integer — the maximum possible sum of the taste values of the chosen fruits.\n\n\n-----Examples-----\nInput\n3 2\n10 8 1\n2 7 1\n\nOutput\n18\n\nInput\n5 3\n4 4 4 4 4\n2 2 2 2 2\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first test sample we can get the total taste of the fruits equal to 18 if we choose fruit number 1 and fruit number 2, then the total calories will equal 9. The condition $\\frac{18}{9} = 2 = k$ fulfills, that's exactly what Inna wants.\n\nIn the second test sample we cannot choose the fruits so as to follow Inna's principle.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["k = int(input().split()[1])\na = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nambk = [(a[i], a[i] - b[i]*k) for i in range(len(a))]\nambk.sort(key=lambda a:-a[1])\n\nts = [0]*(100*100)\nkeys = [0]\natras = list(range(100*100 -1, -1, -1))\nadelante = list(range(100*100))\nfor i in range(len(a)):\n\tfor j in ( atras if ambk[i][1] >= 0 else adelante ):\n\t\tif ts[j] > 0 or j == 0:\n\t\t\tif j + ambk[i][1] >= 0:\n\t\t\t\tts[j+ambk[i][1]] = max(ts[j+ambk[i][1]], ts[j] + ambk[i][0])\n\nprint(\"-1\" if ts[0] == 0 else str(ts[0]))\n", "n, k = map(int, input().split())\nx, y = [0] * 100001, [0] * 100001\nx[0] = y[0] = 1\ng = h = 0\nfor u, v in zip(*(map(int, input().split()), map(int, input().split()))):\n\td = u - k * v\n\tif d > 0:\n\t\tfor j in range(g, -1, -1):\n\t\t\tif x[j]: x[j + d] = max(x[j + d], x[j] + v)\n\t\tg += d\n\telse:\n\t\tfor j in range(h, -1, -1):\n\t\t\tif y[j]: y[j - d] = max(y[j - d], y[j] + v)\n\t\th -= d\ns = max(x[i] + y[i] for i in range(min(g, h) + 1) if x[i] and y[i]) - 2\nprint(k * s - (not s))\n", "from bisect import bisect_right\nn, k = map(int, input().split())\nt = sorted((u - k * v, v) for u, v in zip(*(map(int, input().split()), map(int, input().split()))))\nm = n - bisect_right(t, (0, 0))\nl, p, t = 0, [0] * 100001, t[:: -1]\nfor d, v in t[: m]:\n\tfor j in range(l, 0, -1):\n\t\tif p[j]: p[j + d] = max(p[j + d], p[j] + v)\n\tp[d] = max(p[d], p[0] + v)\n\tl += d\nfor d, v in t[m: ]:\n\tfor j in range(- d, l + 1):\n\t\tif p[j]: p[j + d] = max(p[j + d], p[j] + v)\nprint(p[0] * k if p[0] else -1)\n", "[n,k] = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nb.insert(0,0)\na.insert(0,0)\ns = sum(b) * k\nf = [[0 for i in range(0,4*s+1)] for j in range(0,n+1)]\nfor i in range(0,n+1):\n\ta[i] = a[i] - (k * b[i])\nfor i in range(1,n+1):\n\tfor j in range(s,3*s+1):\n\t\tf[i][j] = f[i-1][j]\n\t\tif j-a[i] == 2*s or f[i-1][j-a[i]] > 0:\n\t\t\tf[i][j] = max(f[i][j],f[i-1][j-a[i]]+b[i])\nif f[n][2*s]:\n\tprint(f[n][2*s] * k)\nelse:\n\tprint(-1)\n", "n,k=list(map(int,input().split()))\ns=list(map(int,input().split()))\ns1=list(map(int,input().split()))\ndp=[[[0 for j in range(10**5)] for l in range(2)] for i in range(n+1)]\ny=s[0]-s1[0]*k\nif y>=0:\n\tdp[0][0][y]=s[0]\nelse:\n\tdp[0][1][-y]=s[0]\nfor i in range(1,n):\n\ty=s[i]-s1[i]*k\n\tfor j in range(100**2+2):\n\t\tfor l in range(2):\n\t\t\tdp[i][l][j]=max(dp[i][l][j],dp[i-1][l][j])\n\t\t\tif dp[i-1][l][j]!=0 or (j==0):\n\t\t\t\tif l==1:\n\t\t\t\t\tx=-j+y\n\t\t\t\telse:\n\t\t\t\t\tx=j+y\n\t\t\t\tif x<0:\n\t\t\t\t\tx=abs(x)\n\t\t\t\t\tdp[i][1][x]=max(dp[i-1][1][x],dp[i][1][x],dp[i-1][l][j]+s[i])\n\t\t\t\telse:\n\t\t\t\t\tdp[i][0][x]=max(dp[i-1][0][x],dp[i][0][x],dp[i-1][l][j]+s[i])\nif dp[n-1][0][0]==0:\n\tprint(-1)\nelse:\n\tprint(dp[n-1][0][0])\n", "n, k = [int(x) for x in input().split(' ')]\n\ntaste = [int(x) for x in input().split(' ')]\ncal = [int(x) for x in input().split(' ')]\n\n\nd = [[0 for j in range(10000*2)] for i in range(n)]\n\na = taste\nb = cal\n\n\nw = [a[i] - k*b[i] for i in range(n)]\n\ndp = [-9999999 for i in range(300005)]\ndp[10000] = 0\n\nfor i in range(n):\n\tif w[i] > 0:\n\t\tfor j in range(20000, w[i], -1):\n\t\t\tif dp[j - w[i]] != -9999999:\n\t\t\t\tdp[j] = max(dp[j], dp[j-w[i]]+a[i])\n\telse:\n\t\tfor j in range(20000):\n\t\t\tif dp[j - w[i]] != -9999999:\n\t\t\t\tdp[j] = max(dp[j], dp[j-w[i]]+a[i])\n\nif dp[10000] == 0:\n\tprint(-1)\nelse:\n\tprint(dp[10000])\n\n\n", "n, k = [int(x) for x in input().split(' ')]\n\ntaste = [int(x) for x in input().split(' ')]\ncal = [int(x) for x in input().split(' ')]\n\nw = [taste[i] - k*cal[i] for i in range(n)]\n\ntaste_per_diff = [-1 for i in range(50000)]\nshift = 20000\n\ntaste_per_diff[shift] = 0\n\nfor i in range(n):\n\tnew_tpd = [x for x in taste_per_diff]\n\tfor j in range(0, 40000):\n\t\tif taste_per_diff[j] != -1:\n\t\t\tnew_tpd[j+w[i]] = max(new_tpd[j+w[i]], taste_per_diff[j] + taste[i])\n\n\ttaste_per_diff = new_tpd\n\nif taste_per_diff[shift] == 0:\n\tprint(-1)\nelse:\n\tprint(taste_per_diff[shift])\n\n\n", "from sys import stdin,stdout\nPi = lambda x: stdout.write(str(x) + '\\n')\nPs = lambda x: stdout.write(str(x))\nS = lambda x: x*(x+1) // 2\nI = lambda x: 1+(2*x)\nR = lambda:stdin.readline()\nRi = lambda x:list(map(int,x.split()))\nRs = lambda x:list(map(str,x.split()))\nRf = lambda x:list(map(float,x.split()))\nMaxN = int(1e5) + 10\n# dp,A = []\ndef f(i,x,n,k,dp,A,B):\n\tif i==n:\n\t\tif x==0:return 0\n\t\treturn -1000000\n\tif dp[i][x+MaxN]!=-1:return dp[i][x+MaxN]\n\top1 = f(i+1, x+A[i]-B[i]*k,n,k,dp,A,B)+A[i]\n\top2 = f(i+1, x,n,k,dp,A,B)\n\tdp[i][x+MaxN] = max(op2,op1)\n\treturn dp[i][x+MaxN]\n\t\ndef main():\t\n\t# t = int(R())\n\tfor x in stdin:\n\t\tn,x = Ri(x)\n\t\tA = list(Ri(R()))\n\t\tB = list(Ri(R()))\n\t\tdp = []\n\t\tfor i in range(110):\n\t\t\tdp.append([-1]*(MaxN*2))\n\t\tans = f(0,0,n,x,dp,A,B)\n\t\tif ans < 1:ans = -1\n\t\tPi(ans)\n\n\n\n\n\ndef __starting_point():\n\tmain()\n\n# 60 == 360\n\n__starting_point()\n", "from sys import stdin,stdout\nPi = lambda x: stdout.write(str(x) + '\\n')\nPs = lambda x: stdout.write(str(x))\nS = lambda x: x*(x+1) // 2\nI = lambda x: 1+(2*x)\nR = lambda:stdin.readline()\nRi = lambda x:list(map(int,x.split()))\nRs = lambda x:list(map(str,x.split()))\nRf = lambda x:list(map(float,x.split()))\nMaxN = int(1e5) + 10\n# dp,A = []\ndef f(i,x,n,k,dp,A,B):\n\tif i==n:\n\t\tif x==0:return 0\n\t\treturn -1000000\n\tif dp[i][x+MaxN]!=-1:return dp[i][x+MaxN]\n\top1 = f(i+1, x+A[i]-B[i]*k,n,k,dp,A,B)+A[i]\n\top2 = f(i+1, x,n,k,dp,A,B)\n\tdp[i][x+MaxN] = max(op2,op1)\n\treturn dp[i][x+MaxN]\n\t\ndef main():\t\n\t# t = int(R())\n\tfor x in stdin:\n\t\tn,x = Ri(x)\n\t\tA = list(Ri(R()))\n\t\tB = list(Ri(R()))\n\t\tdp = []\n\t\tfor i in range(110):\n\t\t\tdp.append([-1]*(MaxN*2))\n\t\tans = f(0,0,n,x,dp,A,B)\n\t\tif ans < 1:ans = -1\n\t\tPi(ans)\n\n\ndef __starting_point():\n\tmain()\n\n# 60 == 360\n\n\n__starting_point()\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list([int(x) * k for x in input().split()])\n\npos = [0] * 10 ** 5\nneg = [0] * 10 ** 5\n\npos[0] = 1\nneg[0] = 1\n\nbase = 0\n\nfor i in range(n):\n\td = a[i] - b[i]\n\tif d > 0:\n\t\tfor j in range(10 ** 5-1,-1,-1):\n\t\t\tif pos[j]:\n\t\t\t\tif j + d < 10 ** 5:\n\t\t\t\t\tpos[j+d] = max(pos[j+d],pos[j]+a[i])\n\telif d < 0:\n\t\tfor j in range(10 ** 5-1,-1,-1):\n\t\t\tif neg[j]:\n\t\t\t\tif j - d < 10 ** 5:\n\t\t\t\t\tneg[j-d] = max(neg[j-d],neg[j]+a[i])\n\telse:\n\t\tbase += a[i]\n\nbest = 0\nfor i in range(10 ** 5):\n\tif pos[i] and neg[i]:\n\t\tbest = max(best,pos[i] + neg[i])\nbest -= 2\nbest += base\nif best:\n\tprint(best)\nelse:\n\tprint(-1)\n", "n,k = [int(x) for x in input().split()]\n\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\ndiff = []\n\nfor x in range(n):\n\tdiff.append(a[x]-b[x]*k)\n\ntotals = {0:0}\n\nfor x in range(n):\n\tt = a[x]\n\td = diff[x]\n\tnewGuys = []\n\tfor y in totals:\n\t\tnewGuys.append((y+d,totals[y] + t))\n\tfor y,z in newGuys:\n\t\tif y in totals:\n\t\t\ttotals[y] = max(totals[y], z)\n\t\telse:\n\t\t\ttotals[y] = z\n\nif totals[0] == 0:\n\tprint(-1)\nelse:\n\tprint(totals[0])\n\tif totals[0] == 1435:\n\t\tprint(' '.join([str(x) for x in diff]))\n", "class Dict(dict):\n\tdef __missing__(self, key):\n\t\treturn float('-inf')\n\nn, k = list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nb = [0] + list(map(int, input().split()))\n\ndp = [Dict() for _ in range(n+1)]\ndp[0][n*100] = 0\n\nfor i in range(1, n+1):\n\ts = a[i] - b[i]*k\n\tfor j in range(n*200, -1, -1):\n\t\tdp[i][j] = max(dp[i-1][j], dp[i-1][j-s] + a[i])\n\nprint(dp[n][n*100] or -1)\n", "class Dict(dict):\n\tdef __missing__(self, key):\n\t\treturn float('-inf')\n\nn, k = list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nb = [0] + list(map(int, input().split()))\n\ndp = [Dict() for _ in range(n+1)]\ndp[0][n*100] = 0\n\nfor i in range(1, n+1):\n\ts = a[i] - b[i]*k\n\tfor j in range(n*200, s-1, -1):\n\t\tdp[i][j] = max(dp[i-1][j], dp[i-1][j-s] + a[i])\n\nprint(dp[n][n*100] or -1)\n"], "id": "id9134"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9134", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["dima", 1], ["inna", 1], ["and", 1], ["seryozha", 1], ["have", 1], ["gathered", 1], ["in", 1], ["a", 1], ["room", 1], ["that", 1], ["s", 1], ["right", 1], ["someone", 1], ["s", 1], ["got", 1], ["to", 1], ["go", 1], ["to", 1], ["cheer", 1], ["seryozha", 1], ["up", 1], ["and", 1], ["inspire", 1], ["him", 1], ["to", 1], ["have", 1], ["a", 1], ["walk", 1], ["inna", 1], ["decided", 1], ["to", 1], ["cook", 1], ["something", 1], ["dima", 1], ["and", 1], ["seryozha", 1], ["have", 1], ["n", 1], ["fruits", 1], ["in", 1], ["the", 1], ["fridge", 1], ["each", 1], ["fruit", 1], ["has", 1], ["two", 1], ["parameters", 1], ["the", 1], ["taste", 1], ["and", 1], ["the", 1], ["number", 1], ["of", 1], ["calories", 1], ["inna", 1], ["decided", 1], ["to", 1], ["make", 1], ["a", 1], ["fruit", 1], ["salad", 1], ["so", 1], ["she", 1], ["wants", 1], ["to", 1], ["take", 1], ["some", 1], ["fruits", 1], ["from", 1], ["the", 1], ["fridge", 1], ["for", 1], ["it", 1], ["inna", 1], ["follows", 1], ["a", 1], ["certain", 1], ["principle", 1], ["as", 1], ["she", 1], ["chooses", 1], ["the", 1], ["fruits", 1], ["the", 1], ["total", 1], ["taste", 1], ["to", 1], ["the", 1], ["total", 1], ["calories", 0], ["ratio", 0], ["of", 0], ["the", 0], ["chosen", 0], ["fruits", 0], ["must", 0], ["equal", 0], ["k", 0], ["in", 0], ["other", 0], ["words", 0], ["frac", 0], ["sum", 0], ["j", 0], ["1", 0], ["m", 0], ["a", 0], ["j", 0], ["sum", 0], ["j", 0], ["1", 0], ["m", 0], ["b", 0], ["j", 0], ["k", 0], ["where", 0], ["a", 0], ["j", 0], ["is", 0], ["the", 0], ["taste", 0], ["of", 0], ["the", 0], ["j", 0], ["th", 0], ["chosen", 0], ["fruit", 0], ["and", 0], ["b", 0], ["j", 0], ["is", 1], ["its", 1], ["calories", 1], ["inna", 1], ["hasn", 1], ["t", 1], ["chosen", 1], ["the", 1], ["fruits", 1], ["yet", 1], ["she", 1], ["is", 1], ["thinking", 1], ["what", 1], ["is", 1], ["the", 1], ["maximum", 1], ["taste", 1], ["of", 1], ["the", 1], ["chosen", 1], ["fruits", 1], ["if", 1], ["she", 1], ["strictly", 1], ["follows", 1], ["her", 1], ["principle", 1], ["help", 1], ["inna", 1], ["solve", 1], ["this", 1], ["culinary", 1], ["problem", 1], ["—", 1], ["now", 1], ["the", 1], ["happiness", 1], ["of", 1], ["a", 1], ["young", 1], ["couple", 1], ["is", 1], ["in", 1], ["your", 1], ["hands", 1], ["inna", 1], ["loves", 1], ["dima", 1], ["very", 1], ["much", 1], ["so", 0], ["she", 0], ["wants", 0], ["to", 0], ["make", 0], ["the", 0], ["salad", 0], ["from", 0], ["at", 0], ["least", 0], ["one", 0], ["fruit", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["the", 1], ["input", 1], ["contains", 1], ["two", 1], ["integers", 1], ["n", 1], ["k", 1], ["1", 1], ["≤", 1], ["n", 1], ["≤", 1], ["100", 1], ["1", 1], ["≤", 1], ["k", 0], ["≤", 0], ["10", 0], ["the", 8], ["second", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 1], ["n", 1], ["integers", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["≤", 1], ["100", 1], ["—", 1], ["the", 0], ["fruits", 0], ["tastes", 0], ["the", 0], ["third", 0], ["line", 0], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["n", 0], ["integers", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["b", 0], ["n", 0], ["1", 0], ["≤", 0], ["b", 0], ["i", 0], ["≤", 0], ["100", 0], ["—", 0], ["the", 0], ["fruits", 0], ["calories", 0], ["fruit", 0], ["number", 0], ["i", 0], ["has", 0], ["taste", 0], ["a", 0], ["i", 0], ["and", 0], ["calories", 0], ["b", 0], ["i", 0], ["output", 0], ["if", 1], ["there", 1], ["is", 1], ["no", 1], ["way", 1], ["inna", 1], ["can", 1], ["choose", 1], ["the", 1], ["fruits", 1], ["for", 1], ["the", 1], ["salad", 1], ["print", 1], ["in", 1], ["the", 1], ["single", 1], ["line", 1], ["number", 1], ["1", 1], ["otherwise", 1], ["print", 1], ["a", 1], ["single", 1], ["integer", 1], ["—", 1], ["the", 0], ["maximum", 0], ["possible", 0], ["sum", 0], ["of", 0], ["the", 0], ["taste", 0], ["values", 0], ["of", 0], ["the", 0], ["chosen", 0], ["fruits", 0], ["examples", 0], ["input", 0], ["3", 0], ["2", 0], ["10", 0], ["8", 0], ["1", 0], ["2", 0], ["7", 0], ["1", 0], ["output", 0], ["18", 0], ["input", 0], ["5", 0], ["3", 0], ["4", 0], ["4", 0], ["4", 0], ["4", 0], ["4", 0], ["2", 0], ["2", 0], ["2", 0], ["2", 0], ["2", 0], ["output", 0], ["1", 0], ["note", 0], ["in", 1], ["the", 1], ["first", 1], ["test", 1], ["sample", 1], ["we", 1], ["can", 1], ["get", 1], ["the", 1], ["total", 1], ["taste", 1], ["of", 1], ["the", 1], ["fruits", 1], ["equal", 1], ["to", 1], ["18", 1], ["if", 1], ["we", 1], ["choose", 1], ["fruit", 1], ["number", 1], ["1", 1], ["and", 1], ["fruit", 0], ["number", 0], ["2", 0], ["then", 0], ["the", 0], ["total", 0], ["calories", 0], ["will", 0], ["equal", 0], ["9", 0], ["the", 0], ["condition", 0], ["frac", 0], ["18", 0], ["9", 0], ["2", 0], ["k", 0], ["fulfills", 1], ["that", 1], ["s", 1], ["exactly", 1], ["what", 1], ["inna", 1], ["wants", 1], ["in", 1], ["the", 1], ["second", 1], ["test", 1], ["sample", 1], ["we", 0], ["cannot", 0], ["choose", 0], ["the", 0], ["fruits", 0], ["so", 0], ["as", 0], ["to", 0], ["follow", 0], ["inna", 0], ["s", 0], ["principle", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5552825552825553, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5531326781326781, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7565632458233891, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7565632458233891, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5552825552825553, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5531326781326781, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7565632458233891, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7565632458233891, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["k", 0], ["int", 0], ["input", 0], ["split", 0], ["1", 0], ["a", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["s", 0], ["for", 0], ["s", 0], ["in", 0], ["input", 0], ["split", 0], ["ambk", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["k", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["ambk", 0], ["sort", 0], ["key", 0], ["lambda", 0], ["a", 0], ["a", 0], ["1", 0], ["ts", 0], ["0", 0], ["100", 0], ["100", 0], ["keys", 0], ["0", 0], ["atras", 0], ["list", 0], ["range", 0], ["100", 0], ["100", 0], ["1", 0], ["1", 0], ["1", 0], ["adelante", 0], ["list", 0], ["range", 0], ["100", 0], ["100", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["for", 0], ["j", 0], ["in", 0], ["atras", 0], ["if", 0], ["ambk", 0], ["i", 0], ["1", 0], ["0", 0], ["else", 0], ["adelante", 0], ["if", 0], ["ts", 0], ["j", 0], ["0", 0], ["or", 0], ["j", 0], ["0", 0], ["if", 0], ["j", 0], ["ambk", 0], ["i", 0], ["1", 0], ["0", 0], ["ts", 0], ["j", 0], ["ambk", 0], ["i", 0], ["1", 0], ["max", 0], ["ts", 0], ["j", 0], ["ambk", 0], ["i", 0], ["1", 0], ["ts", 0], ["j", 0], ["ambk", 0], ["i", 0], ["0", 0], ["print", 0], ["1", 0], ["if", 0], ["ts", 0], ["0", 0], ["0", 0], ["else", 0], ["str", 0], ["ts", 0], ["0", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["x", 0], ["y", 0], ["0", 0], ["100001", 0], ["0", 0], ["100001", 0], ["x", 0], ["0", 0], ["y", 0], ["0", 0], ["1", 0], ["g", 0], ["h", 0], ["0", 0], ["for", 0], ["u", 0], ["v", 0], ["in", 0], ["zip", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["d", 0], ["u", 0], ["k", 0], ["v", 0], ["if", 0], ["d", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["g", 0], ["1", 0], ["1", 0], ["if", 0], ["x", 0], ["j", 0], ["x", 0], ["j", 0], ["d", 0], ["max", 0], ["x", 0], ["j", 0], ["d", 0], ["x", 0], ["j", 0], ["v", 0], ["g", 0], ["d", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["h", 0], ["1", 0], ["1", 0], ["if", 0], ["y", 0], ["j", 0], ["y", 0], ["j", 0], ["d", 0], ["max", 0], ["y", 0], ["j", 0], ["d", 0], ["y", 0], ["j", 0], ["v", 0], ["h", 0], ["d", 0], ["s", 0], ["max", 0], ["x", 0], ["i", 0], ["y", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["min", 0], ["g", 0], ["h", 0], ["1", 0], ["if", 0], ["x", 0], ["i", 0], ["and", 0], ["y", 0], ["i", 0], ["2", 0], ["print", 0], ["k", 0], ["s", 0], ["not", 0], ["s", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["right", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["sorted", 0], ["u", 0], ["k", 0], ["v", 0], ["v", 0], ["for", 0], ["u", 0], ["v", 0], ["in", 0], ["zip", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["m", 0], ["n", 0], ["bisect", 0], ["right", 0], ["t", 0], ["0", 0], ["0", 0], ["l", 0], ["p", 0], ["t", 0], ["0", 0], ["0", 0], ["100001", 0], ["t", 0], ["1", 0], ["for", 0], ["d", 0], ["v", 0], ["in", 0], ["t", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["l", 0], ["0", 0], ["1", 0], ["if", 0], ["p", 0], ["j", 0], ["p", 0], ["j", 0], ["d", 0], ["max", 0], ["p", 0], ["j", 0], ["d", 0], ["p", 0], ["j", 0], ["v", 0], ["p", 0], ["d", 0], ["max", 0], ["p", 0], ["d", 0], ["p", 0], ["0", 0], ["v", 0], ["l", 0], ["d", 0], ["for", 0], ["d", 0], ["v", 0], ["in", 0], ["t", 0], ["m", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["d", 0], ["l", 0], ["1", 0], ["if", 0], ["p", 0], ["j", 0], ["p", 0], ["j", 0], ["d", 0], ["max", 0], ["p", 0], ["j", 0], ["d", 0], ["p", 0], ["j", 0], ["v", 0], ["print", 0], ["p", 0], ["0", 0], ["k", 0], ["if", 0], ["p", 0], ["0", 0], ["else", 0], ["1", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["insert", 0], ["0", 0], ["0", 0], ["a", 0], ["insert", 0], ["0", 0], ["0", 0], ["s", 0], ["sum", 0], ["b", 0], ["k", 0], ["f", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["4", 0], ["s", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["1", 0], ["a", 0], ["i", 0], ["a", 0], ["i", 0], ["k", 0], ["b", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["s", 0], ["3", 0], ["s", 0], ["1", 0], ["f", 0], ["i", 0], ["j", 0], ["f", 0], ["i", 0], ["1", 0], ["j", 0], ["if", 0], ["j", 0], ["a", 0], ["i", 0], ["2", 0], ["s", 0], ["or", 0], ["f", 0], ["i", 0], ["1", 0], ["j", 0], ["a", 0], ["i", 0], ["0", 0], ["f", 0], ["i", 0], ["j", 0], ["max", 0], ["f", 0], ["i", 0], ["j", 0], ["f", 0], ["i", 0], ["1", 0], ["j", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["if", 0], ["f", 0], ["n", 0], ["2", 0], ["s", 0], ["print", 0], ["f", 0], ["n", 0], ["2", 0], ["s", 0], ["k", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["s1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dp", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["10", 0], ["5", 0], ["for", 0], ["l", 0], ["in", 0], ["range", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["y", 0], ["s", 0], ["0", 0], ["s1", 0], ["0", 0], ["k", 0], ["if", 0], ["y", 0], ["0", 0], ["dp", 0], ["0", 0], ["0", 0], ["y", 0], ["s", 0], ["0", 0], ["else", 0], ["dp", 0], ["0", 0], ["1", 0], ["y", 0], ["s", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["y", 0], ["s", 0], ["i", 0], ["s1", 0], ["i", 0], ["k", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["100", 0], ["2", 0], ["2", 0], ["for", 0], ["l", 0], ["in", 0], ["range", 0], ["2", 0], ["dp", 0], ["i", 0], ["l", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["l", 0], ["j", 0], ["dp", 0], ["i", 0], ["1", 0], ["l", 0], ["j", 0], ["if", 0], ["dp", 0], ["i", 0], ["1", 0], ["l", 0], ["j", 0], ["0", 0], ["or", 0], ["j", 0], ["0", 0], ["if", 0], ["l", 0], ["1", 0], ["x", 0], ["j", 0], ["y", 0], ["else", 0], ["x", 0], ["j", 0], ["y", 0], ["if", 0], ["x", 0], ["0", 0], ["x", 0], ["abs", 0], ["x", 0], ["dp", 0], ["i", 0], ["1", 0], ["x", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["1", 0], ["x", 0], ["dp", 0], ["i", 0], ["1", 0], ["x", 0], ["dp", 0], ["i", 0], ["1", 0], ["l", 0], ["j", 0], ["s", 0], ["i", 0], ["else", 0], ["dp", 0], ["i", 0], ["0", 0], ["x", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["0", 0], ["x", 0], ["dp", 0], ["i", 0], ["0", 0], ["x", 0], ["dp", 0], ["i", 0], ["1", 0], ["l", 0], ["j", 0], ["s", 0], ["i", 0], ["if", 0], ["dp", 0], ["n", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["dp", 0], ["n", 0], ["1", 0], ["0", 0], ["0", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["taste", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["cal", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["d", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["10000", 0], ["2", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["taste", 0], ["b", 0], ["cal", 0], ["w", 0], ["a", 0], ["i", 0], ["k", 0], ["b", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["dp", 0], ["9999999", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["300005", 0], ["dp", 0], ["10000", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["if", 0], ["w", 0], ["i", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["20000", 0], ["w", 0], ["i", 0], ["1", 0], ["if", 0], ["dp", 0], ["j", 0], ["w", 0], ["i", 0], ["9999999", 0], ["dp", 0], ["j", 0], ["max", 0], ["dp", 0], ["j", 0], ["dp", 0], ["j", 0], ["w", 0], ["i", 0], ["a", 0], ["i", 0], ["else", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["20000", 0], ["if", 0], ["dp", 0], ["j", 0], ["w", 0], ["i", 0], ["9999999", 0], ["dp", 0], ["j", 0], ["max", 0], ["dp", 0], ["j", 0], ["dp", 0], ["j", 0], ["w", 0], ["i", 0], ["a", 0], ["i", 0], ["if", 0], ["dp", 0], ["10000", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["dp", 0], ["10000", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["taste", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["cal", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["w", 0], ["taste", 0], ["i", 0], ["k", 0], ["cal", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["taste", 0], ["per", 0], ["diff", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["50000", 0], ["shift", 0], ["20000", 0], ["taste", 0], ["per", 0], ["diff", 0], ["shift", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["new", 0], ["tpd", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["taste", 0], ["per", 0], ["diff", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["0", 0], ["40000", 0], ["if", 0], ["taste", 0], ["per", 0], ["diff", 0], ["j", 0], ["1", 0], ["new", 0], ["tpd", 0], ["j", 0], ["w", 0], ["i", 0], ["max", 0], ["new", 0], ["tpd", 0], ["j", 0], ["w", 0], ["i", 0], ["taste", 0], ["per", 0], ["diff", 0], ["j", 0], ["taste", 0], ["i", 0], ["taste", 0], ["per", 0], ["diff", 0], ["new", 0], ["tpd", 0], ["if", 0], ["taste", 0], ["per", 0], ["diff", 0], ["shift", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["taste", 0], ["per", 0], ["diff", 0], ["shift", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["pi", 0], ["lambda", 0], ["x", 0], ["stdout", 0], ["write", 0], ["str", 0], ["x", 0], ["n", 0], ["ps", 0], ["lambda", 0], ["x", 0], ["stdout", 0], ["write", 0], ["str", 0], ["x", 0], ["s", 0], ["lambda", 0], ["x", 0], ["x", 0], ["x", 0], ["1", 0], ["2", 0], ["i", 0], ["lambda", 0], ["x", 0], ["1", 0], ["2", 0], ["x", 0], ["r", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["ri", 0], ["lambda", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["x", 0], ["split", 0], ["rs", 0], ["lambda", 0], ["x", 0], ["list", 0], ["map", 0], ["str", 0], ["x", 0], ["split", 0], ["rf", 0], ["lambda", 0], ["x", 0], ["list", 0], ["map", 0], ["float", 0], ["x", 0], ["split", 0], ["maxn", 0], ["int", 0], ["1e5", 0], ["10", 0], ["dp", 0], ["a", 0], ["def", 0], ["f", 0], ["i", 0], ["x", 0], ["n", 0], ["k", 0], ["dp", 0], ["a", 0], ["b", 0], ["if", 0], ["i", 0], ["n", 0], ["if", 0], ["x", 0], ["0", 0], ["return", 0], ["0", 0], ["return", 0], ["1000000", 0], ["if", 0], ["dp", 0], ["i", 0], ["x", 0], ["maxn", 0], ["1", 0], ["return", 0], ["dp", 0], ["i", 0], ["x", 0], ["maxn", 0], ["op1", 0], ["f", 0], ["i", 0], ["1", 0], ["x", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["k", 0], ["n", 0], ["k", 0], ["dp", 0], ["a", 0], ["b", 0], ["a", 0], ["i", 0], ["op2", 0], ["f", 0], ["i", 0], ["1", 0], ["x", 0], ["n", 0], ["k", 0], ["dp", 0], ["a", 0], ["b", 0], ["dp", 0], ["i", 0], ["x", 0], ["maxn", 0], ["max", 0], ["op2", 0], ["op1", 0], ["return", 0], ["dp", 0], ["i", 0], ["x", 0], ["maxn", 0], ["def", 0], ["main", 0], ["t", 0], ["int", 0], ["r", 0], ["for", 0], ["x", 0], ["in", 0], ["stdin", 0], ["n", 0], ["x", 0], ["ri", 0], ["x", 0], ["a", 0], ["list", 0], ["ri", 0], ["r", 0], ["b", 0], ["list", 0], ["ri", 0], ["r", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["110", 0], ["dp", 0], ["append", 0], ["1", 0], ["maxn", 0], ["2", 0], ["ans", 0], ["f", 0], ["0", 0], ["0", 0], ["n", 0], ["x", 0], ["dp", 0], ["a", 0], ["b", 0], ["if", 0], ["ans", 0], ["1", 0], ["ans", 0], ["1", 0], ["pi", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["60", 0], ["360", 0], ["starting", 0], ["point", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["pi", 0], ["lambda", 0], ["x", 0], ["stdout", 0], ["write", 0], ["str", 0], ["x", 0], ["n", 0], ["ps", 0], ["lambda", 0], ["x", 0], ["stdout", 0], ["write", 0], ["str", 0], ["x", 0], ["s", 0], ["lambda", 0], ["x", 0], ["x", 0], ["x", 0], ["1", 0], ["2", 0], ["i", 0], ["lambda", 0], ["x", 0], ["1", 0], ["2", 0], ["x", 0], ["r", 0], ["lambda", 0], ["stdin", 0], ["readline", 0], ["ri", 0], ["lambda", 0], ["x", 0], ["list", 0], ["map", 0], ["int", 0], ["x", 0], ["split", 0], ["rs", 0], ["lambda", 0], ["x", 0], ["list", 0], ["map", 0], ["str", 0], ["x", 0], ["split", 0], ["rf", 0], ["lambda", 0], ["x", 0], ["list", 0], ["map", 0], ["float", 0], ["x", 0], ["split", 0], ["maxn", 0], ["int", 0], ["1e5", 0], ["10", 0], ["dp", 0], ["a", 0], ["def", 0], ["f", 0], ["i", 0], ["x", 0], ["n", 0], ["k", 0], ["dp", 0], ["a", 0], ["b", 0], ["if", 0], ["i", 0], ["n", 0], ["if", 0], ["x", 0], ["0", 0], ["return", 0], ["0", 0], ["return", 0], ["1000000", 0], ["if", 0], ["dp", 0], ["i", 0], ["x", 0], ["maxn", 0], ["1", 0], ["return", 0], ["dp", 0], ["i", 0], ["x", 0], ["maxn", 0], ["op1", 0], ["f", 0], ["i", 0], ["1", 0], ["x", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["k", 0], ["n", 0], ["k", 0], ["dp", 0], ["a", 0], ["b", 0], ["a", 0], ["i", 0], ["op2", 0], ["f", 0], ["i", 0], ["1", 0], ["x", 0], ["n", 0], ["k", 0], ["dp", 0], ["a", 0], ["b", 0], ["dp", 0], ["i", 0], ["x", 0], ["maxn", 0], ["max", 0], ["op2", 0], ["op1", 0], ["return", 0], ["dp", 0], ["i", 0], ["x", 0], ["maxn", 0], ["def", 0], ["main", 0], ["t", 0], ["int", 0], ["r", 0], ["for", 0], ["x", 0], ["in", 0], ["stdin", 0], ["n", 0], ["x", 0], ["ri", 0], ["x", 0], ["a", 0], ["list", 0], ["ri", 0], ["r", 0], ["b", 0], ["list", 0], ["ri", 0], ["r", 0], ["dp", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["110", 0], ["dp", 0], ["append", 0], ["1", 0], ["maxn", 0], ["2", 0], ["ans", 0], ["f", 0], ["0", 0], ["0", 0], ["n", 0], ["x", 0], ["dp", 0], ["a", 0], ["b", 0], ["if", 0], ["ans", 0], ["1", 0], ["ans", 0], ["1", 0], ["pi", 0], ["ans", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["60", 0], ["360", 0], ["starting", 0], ["point", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["int", 0], ["x", 0], ["k", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["pos", 0], ["0", 0], ["10", 0], ["5", 0], ["neg", 0], ["0", 0], ["10", 0], ["5", 0], ["pos", 0], ["0", 0], ["1", 0], ["neg", 0], ["0", 0], ["1", 0], ["base", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["d", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["if", 0], ["d", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["10", 0], ["5", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["pos", 0], ["j", 0], ["if", 0], ["j", 0], ["d", 0], ["10", 0], ["5", 0], ["pos", 0], ["j", 0], ["d", 0], ["max", 0], ["pos", 0], ["j", 0], ["d", 0], ["pos", 0], ["j", 0], ["a", 0], ["i", 0], ["elif", 0], ["d", 0], ["0", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["10", 0], ["5", 0], ["1", 0], ["1", 0], ["1", 0], ["if", 0], ["neg", 0], ["j", 0], ["if", 0], ["j", 0], ["d", 0], ["10", 0], ["5", 0], ["neg", 0], ["j", 0], ["d", 0], ["max", 0], ["neg", 0], ["j", 0], ["d", 0], ["neg", 0], ["j", 0], ["a", 0], ["i", 0], ["else", 0], ["base", 0], ["a", 0], ["i", 0], ["best", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["10", 0], ["5", 0], ["if", 0], ["pos", 0], ["i", 0], ["and", 0], ["neg", 0], ["i", 0], ["best", 0], ["max", 0], ["best", 0], ["pos", 0], ["i", 0], ["neg", 0], ["i", 0], ["best", 0], ["2", 0], ["best", 0], ["base", 0], ["if", 0], ["best", 0], ["print", 0], ["best", 0], ["else", 0], ["print", 0], ["1", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["diff", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["diff", 0], ["append", 0], ["a", 0], ["x", 0], ["b", 0], ["x", 0], ["k", 0], ["totals", 0], ["0", 0], ["0", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["n", 0], ["t", 0], ["a", 0], ["x", 0], ["d", 0], ["diff", 0], ["x", 0], ["newguys", 0], ["for", 0], ["y", 0], ["in", 0], ["totals", 0], ["newguys", 0], ["append", 0], ["y", 0], ["d", 0], ["totals", 0], ["y", 0], ["t", 0], ["for", 0], ["y", 0], ["z", 0], ["in", 0], ["newguys", 0], ["if", 0], ["y", 0], ["in", 0], ["totals", 0], ["totals", 0], ["y", 0], ["max", 0], ["totals", 0], ["y", 0], ["z", 0], ["else", 0], ["totals", 0], ["y", 0], ["z", 0], ["if", 0], ["totals", 0], ["0", 0], ["0", 0], ["print", 0], ["1", 0], ["else", 0], ["print", 0], ["totals", 0], ["0", 0], ["if", 0], ["totals", 0], ["0", 0], ["1435", 0], ["print", 0], ["join", 0], ["str", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["diff", 0], ["class", 0], ["dict", 0], ["dict", 0], ["def", 0], ["missing", 0], ["self", 0], ["key", 0], ["return", 0], ["float", 0], ["inf", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dp", 0], ["dict", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dp", 0], ["0", 0], ["n", 0], ["100", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["s", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["k", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["200", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["s", 0], ["a", 0], ["i", 0], ["print", 0], ["dp", 0], ["n", 0], ["n", 0], ["100", 0], ["or", 0], ["1", 0], ["class", 0], ["dict", 0], ["dict", 0], ["def", 0], ["missing", 0], ["self", 0], ["key", 0], ["return", 0], ["float", 0], ["inf", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["0", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["dp", 0], ["dict", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["dp", 0], ["0", 0], ["n", 0], ["100", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["n", 0], ["1", 0], ["s", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["k", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["200", 0], ["s", 0], ["1", 0], ["1", 0], ["dp", 0], ["i", 0], ["j", 0], ["max", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["dp", 0], ["i", 0], ["1", 0], ["j", 0], ["s", 0], ["a", 0], ["i", 0], ["print", 0], ["dp", 0], ["n", 0], ["n", 0], ["100", 0], ["or", 0], ["1", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nEhab has an array $a$ of length $n$. He has just enough free time to make a new array consisting of $n$ copies of the old array, written back-to-back. What will be the length of the new array's longest increasing subsequence?\n\nA sequence $a$ is a subsequence of an array $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) elements. The longest increasing subsequence of an array is the longest subsequence such that its elements are ordered in strictly increasing order.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ — the number of test cases you need to solve. The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 10^5$) — the number of elements in the array $a$.\n\nThe second line contains $n$ space-separated integers $a_1$, $a_2$, $\\ldots$, $a_{n}$ ($1 \\le a_i \\le 10^9$) — the elements of the array $a$.\n\nThe sum of $n$ across the test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each testcase, output the length of the longest increasing subsequence of $a$ if you concatenate it to itself $n$ times.\n\n\n-----Example-----\nInput\n2\n3\n3 2 1\n6\n3 1 4 1 5 9\n\nOutput\n3\n5\n\n\n\n-----Note-----\n\nIn the first sample, the new array is $[3,2,\\textbf{1},3,\\textbf{2},1,\\textbf{3},2,1]$. The longest increasing subsequence is marked in bold.\n\nIn the second sample, the longest increasing subsequence will be $[1,3,4,5,9]$.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["#list(map(int,input().split()))\nt=int(input())\nfor _ in range(t):\n\tn=int(input())\n\tit=list(map(int,input().split()))\n\tprint(len(set(it)))\n", "for _ in range(int(input())):\n\tn = int(input())\n\ta = [int(i) for i in input().split()]\n\tprint(len(set(a)))\n", "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n\tinput()\n\tprint(len(set(map(int, input().split()))))\n", "a = int(input())\nfor i in range(a):\n\to = int(input())\n\tu = list(map(int, input().split()))\n\tprint(len(set(u)))\n", "t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tset_ = set(a)\n\tprint(len(set_))\n", "\n\nfor _ in range(int(input())):\n\tn=int(input())\n\ta=list(map(int,input().split()))\n\tprint(len(set(a)))\n", "for nt in range(int(input())):\n\tn=int(input())\n\tl=list(map(int,input().split()))\n\tl=set(l)\n\tl=list(l)\n\tprint (len(l))\n", "#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n\n# Code by H~$~C\n\nfrom sys import stdin\ninput = stdin.readline\nimport math\n\nfor i in range(int(input())):\n\tn = int(input())\n\tarr = sorted(list(map(int, input().split())))\n\tans = n\n\tfor j in range(n - 1):\n\t\tif (arr[j + 1] == arr[j]):\n\t\t\tans -= 1\n\tprint(ans)\n", "t = int(input())\n\nfor _ in range(t):\n\tn = int(input())\n\ta = list(map(int, input().strip().split()))\n\n\tprint(len(set(a)))\n", "t = int(input())\nwhile(t):\n\tt -= 1\n\tn = int(input())\n\ta = set(map(int, input().split()))\n\tprint(len(a))\n", "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\ndef solve():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tans = len(set(a))\n\tprint(ans)\n\nt = int(input())\nfor i in range(t):\n\tsolve()\n", "t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\ta = set(map(int, input().split()))\n\tprint(len(a))\n", "from bisect import bisect_left as bl, bisect_right as br, insort\nimport sys\nimport heapq\nfrom math import *\nfrom collections import defaultdict as dd, deque\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return map(int, data().split())\n#sys.setrecursionlimit(100000)\n\nfor i in range(int(data())):\n\tn=int(data())\n\tA=set(mdata())\n\tprint(len(A))\n", "from sys import stdin,stdout                           #\nimport math                                            #\nimport heapq                                           #\n\t#\nt = 1                                                  #\ndef aint():                                            #\n\treturn int(input().strip())                        #\ndef lint():                                            #\n\treturn list(map(int,input().split()))              #\ndef fint():                                            #\n\treturn list(map(int,stdin.readline().split()))     #\n\t#\t\n########################################################\n\ndef main():\n\tn=aint()\n\tl=lint()\n\tprint(len(set(l)))\n\t#solve\n\nt=int(input())\n\n########################################################\nfor i in range(t):                                     #\n\tmain()                                             #\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n\tn=int(input())\n\tA=list(map(int,input().split()))\n\tprint(len(set(A)))\n\t\n"], "id": "id7519"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7519", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["ehab", 0], ["has", 0], ["an", 0], ["array", 0], ["a", 0], ["of", 0], ["length", 0], ["n", 0], ["he", 0], ["has", 0], ["just", 0], ["enough", 0], ["free", 0], ["time", 0], ["to", 0], ["make", 0], ["a", 0], ["new", 0], ["array", 0], ["consisting", 0], ["of", 0], ["n", 0], ["copies", 0], ["of", 0], ["the", 0], ["old", 0], ["array", 0], ["written", 0], ["back", 0], ["to", 0], ["back", 0], ["what", 0], ["will", 0], ["be", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["new", 0], ["array", 0], ["s", 0], ["longest", 0], ["increasing", 0], ["subsequence", 0], ["a", 0], ["sequence", 0], ["a", 0], ["is", 0], ["a", 0], ["subsequence", 0], ["of", 0], ["an", 0], ["array", 0], ["b", 3], ["if", 3], ["a", 3], ["can", 3], ["be", 0], ["obtained", 0], ["from", 0], ["b", 0], ["by", 0], ["deletion", 0], ["of", 0], ["several", 0], ["possibly", 0], ["zero", 0], ["or", 0], ["all", 0], ["elements", 0], ["the", 0], ["longest", 0], ["increasing", 0], ["subsequence", 0], ["of", 0], ["an", 0], ["array", 0], ["is", 0], ["the", 0], ["longest", 0], ["subsequence", 0], ["such", 0], ["that", 0], ["its", 0], ["elements", 0], ["are", 0], ["ordered", 0], ["in", 0], ["strictly", 0], ["increasing", 0], ["order", 0], ["input", 0], ["the", 6], ["first", 0], ["line", 0], ["contains", 0], ["an", 0], ["integer", 0], ["t", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["test", 0], ["cases", 0], ["you", 0], ["need", 0], ["to", 0], ["solve", 0], ["the", 14], ["description", 24], ["of", 24], ["the", 5], ["test", 5], ["cases", 5], ["follows", 4], ["the", 4], ["first", 4], ["line", 4], ["of", 0], ["each", 0], ["test", 0], ["case", 0], ["contains", 0], ["an", 0], ["integer", 6], ["n", 6], ["1", 6], ["le", 0], ["n", 0], ["le", 0], ["10", 0], ["5", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["elements", 0], ["in", 0], ["the", 0], ["array", 0], ["a", 0], ["the", 4], ["second", 4], ["line", 7], ["contains", 0], ["n", 0], ["space", 0], ["separated", 0], ["integers", 4], ["a", 2], ["1", 1], ["a", 0], ["2", 0], ["ldots", 0], ["a", 6], ["n", 6], ["1", 6], ["le", 0], ["a", 0], ["i", 0], ["le", 0], ["10", 0], ["9", 0], ["—", 0], ["the", 0], ["elements", 0], ["of", 0], ["the", 0], ["array", 0], ["a", 0], ["the", 0], ["sum", 0], ["of", 0], ["n", 0], ["across", 0], ["the", 0], ["test", 0], ["cases", 0], ["doesn", 0], ["t", 0], ["exceed", 0], ["10", 0], ["5", 0], ["output", 0], ["for", 0], ["each", 0], ["testcase", 0], ["output", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["longest", 0], ["increasing", 0], ["subsequence", 0], ["of", 0], ["a", 0], ["if", 0], ["you", 0], ["concatenate", 0], ["it", 0], ["to", 0], ["itself", 0], ["n", 0], ["times", 0], ["example", 0], ["input", 0], ["2", 0], ["3", 0], ["3", 0], ["2", 0], ["1", 0], ["6", 0], ["3", 0], ["1", 0], ["4", 0], ["1", 0], ["5", 0], ["9", 0], ["output", 0], ["3", 0], ["5", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["sample", 0], ["the", 0], ["new", 0], ["array", 0], ["is", 0], ["3", 0], ["2", 0], ["textbf", 0], ["1", 0], ["3", 0], ["textbf", 0], ["2", 0], ["1", 0], ["textbf", 0], ["3", 0], ["2", 0], ["1", 0], ["the", 0], ["longest", 0], ["increasing", 0], ["subsequence", 0], ["is", 0], ["marked", 0], ["in", 0], ["bold", 0], ["in", 0], ["the", 0], ["second", 0], ["sample", 0], ["the", 0], ["longest", 0], ["increasing", 0], ["subsequence", 0], ["will", 0], ["be", 0], ["1", 0], ["3", 0], ["4", 0], ["5", 0], ["9", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.10150375939849623, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.02499104905119943, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.31654676258992803, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.12972764645426516, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.09022556390977443, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.024409237379162195, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.3057553956834532, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1289568345323741, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["it", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["len", 0], ["set", 0], ["it", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["print", 0], ["len", 0], ["set", 0], ["a", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["input", 0], ["print", 0], ["len", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["o", 0], ["int", 0], ["input", 0], ["u", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["len", 0], ["set", 0], ["u", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["set", 0], ["set", 0], ["a", 0], ["print", 0], ["len", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["len", 0], ["set", 0], ["a", 0], ["for", 0], ["nt", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["l", 0], ["set", 0], ["l", 0], ["l", 0], ["list", 0], ["l", 0], ["print", 0], ["len", 0], ["l", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["coding", 0], ["utf", 0], ["8", 0], ["code", 0], ["by", 0], ["h", 0], ["c", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["input", 0], ["stdin", 0], ["readline", 0], ["import", 0], ["math", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["sorted", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["n", 0], ["for", 0], ["j", 0], ["in", 0], ["range", 0], ["n", 0], ["1", 0], ["if", 0], ["arr", 0], ["j", 0], ["1", 0], ["arr", 0], ["j", 0], ["ans", 0], ["1", 0], ["print", 0], ["ans", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["print", 0], ["len", 0], ["set", 0], ["a", 0], ["t", 0], ["int", 0], ["input", 0], ["while", 0], ["t", 0], ["t", 0], ["1", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["len", 0], ["a", 0], ["import", 0], ["sys", 0], ["reader", 0], ["s", 0], ["rstrip", 0], ["for", 0], ["s", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["input", 0], ["reader", 0], ["next", 0], ["def", 0], ["solve", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["len", 0], ["set", 0], ["a", 0], ["print", 0], ["ans", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["solve", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["set", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["len", 0], ["a", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["as", 0], ["bl", 0], ["bisect", 0], ["right", 0], ["as", 0], ["br", 0], ["insort", 0], ["import", 0], ["sys", 0], ["import", 0], ["heapq", 0], ["from", 0], ["math", 0], ["import", 0], ["from", 0], ["collections", 0], ["import", 0], ["defaultdict", 0], ["as", 0], ["dd", 0], ["deque", 0], ["def", 0], ["data", 0], ["return", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["strip", 0], ["def", 0], ["mdata", 0], ["return", 0], ["map", 0], ["int", 0], ["data", 0], ["split", 0], ["sys", 0], ["setrecursionlimit", 0], ["100000", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["int", 0], ["data", 0], ["n", 0], ["int", 0], ["data", 0], ["a", 0], ["set", 0], ["mdata", 0], ["print", 0], ["len", 0], ["a", 0], ["from", 0], ["sys", 0], ["import", 0], ["stdin", 0], ["stdout", 0], ["import", 0], ["math", 0], ["import", 0], ["heapq", 0], ["t", 0], ["1", 0], ["def", 0], ["aint", 0], ["return", 0], ["int", 0], ["input", 0], ["strip", 0], ["def", 0], ["lint", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["fint", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["def", 0], ["main", 0], ["n", 0], ["aint", 0], ["l", 0], ["lint", 0], ["print", 0], ["len", 0], ["set", 0], ["l", 0], ["solve", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["main", 0], ["import", 0], ["sys", 0], ["input", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["t", 0], ["int", 0], ["input", 0], ["for", 0], ["tests", 0], ["in", 0], ["range", 0], ["t", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["print", 0], ["len", 0], ["set", 0], ["a", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nYou took a peek on Thanos wearing Infinity Gauntlet. In the Gauntlet there is a place for six Infinity Gems:  the Power Gem of purple color,  the Time Gem of green color,  the Space Gem of blue color,  the Soul Gem of orange color,  the Reality Gem of red color,  the Mind Gem of yellow color. \n\nUsing colors of Gems you saw in the Gauntlet determine the names of absent Gems.\n\n\n-----Input-----\n\nIn the first line of input there is one integer $n$ ($0 \\le n \\le 6$) — the number of Gems in Infinity Gauntlet.\n\nIn next $n$ lines there are colors of Gems you saw. Words used for colors are: purple, green, blue, orange, red, yellow. It is guaranteed that all the colors are distinct. All colors are given in lowercase English letters.\n\n\n-----Output-----\n\nIn the first line output one integer $m$ ($0 \\le m \\le 6$) — the number of absent Gems.\n\nThen in $m$ lines print the names of absent Gems, each on its own line. Words used for names are: Power, Time, Space, Soul, Reality, Mind. Names can be printed in any order. Keep the first letter uppercase, others lowercase.\n\n\n-----Examples-----\nInput\n4\nred\npurple\nyellow\norange\n\nOutput\n2\nSpace\nTime\n\nInput\n0\n\nOutput\n6\nTime\nMind\nSoul\nPower\nReality\nSpace\n\n\n\n-----Note-----\n\nIn the first sample Thanos already has Reality, Power, Mind and Soul Gems, so he needs two more: Time and Space.\n\nIn the second sample Thanos doesn't have any Gems, so he needs all six.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["n = int(input())\na = [input() for i in range(n)]\nsol = []\nfor i in range(6):\n\tc = ['purple', 'green', 'blue', 'orange', 'red', 'yellow'][i]\n\tif c not in a:\n\t\tsol.append(['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind'][i])\nprint(len(sol))\nfor i in sol:\n\tprint(i)\n", "n = int(input())\n\nnames = []\nfor _ in range(n):\n\tnames.append(input().strip())\n\nnames = set(names)\n\nstones = {\n\t'purple': 'Power',\n\t'green': 'Time',\n\t'blue': 'Space',\n\t'orange': 'Soul',\n\t'red': 'Reality',\n\t'yellow': 'Mind',\n}\n\nmissing = set(stones.keys()) - names\nprint(len(missing))\nprint('\\n'.join(stones[v] for v in missing))\n", "\nn = int(input())\na = {'purple':'Power', 'green' : 'Time', 'blue' : 'Space', 'orange' : 'Soul', 'red' : 'Reality', 'yellow' : 'Mind'}\nfor _ in range(n):\n\ts = input()\n\ta[s] = 1\nprint (6-n)\nfor i in a:\n\tif a[i]!=1:\n\t\tprint (a[i])\n", "'''input\n4\nred\npurple\nyellow\norange\n\n'''\n\ndef list_input():\n\treturn list(map(int,input().split()))\ndef map_input():\n\treturn map(int,input().split())\ndef map_string():\n\treturn input().split()\n\t\nn = int(input())    \nd = {}\nd[\"purple\"] = \"Power\"\nd[\"green\"] = \"Time\"\nd[\"blue\"] = \"Space\"\nd[\"orange\"] = \"Soul\"\nd[\"red\"] = \"Reality\"\nd[\"yellow\"] = \"Mind\"\n\na = []\nfor i in range(n): a.append(input())\nb = []\nfor i in d:\n\tif i not in a:\n\t\tb.append(d[i])\nprint(len(b))\nfor i in b: print(i)\t\t\n", "n = int(input())\nd = {\"purple\":\"Power\",\"green\":\"Time\",\"blue\":\"Space\",\"orange\":\"Soul\",\"red\":\"Reality\",\"yellow\":\"Mind\"}\nfor i in range(n):\n\ts = input()\n\tdel(d[s])\nprint(len(d))\nfor k in d:\n\tprint(d[k])\n", "n = int(input())\na = {'Power','Time','Space','Soul','Reality','Mind'}\nfor i in range(n):\n\ts = input()\n\tif s == 'red':\n\t\ta.remove('Reality')\n\telif s == 'purple':\n\t\ta.remove('Power')\n\telif s == 'green':\n\t\ta.remove('Time')\n\telif s == 'blue':\n\t\ta.remove('Space')\n\telif s == 'orange':\n\t\ta.remove('Soul')\n\telif s == 'yellow':\n\t\ta.remove('Mind')\nprint(len(a))\nfor i in a:\n\tprint(i)\n", "# cook your dish here\n# from math import * \nd = {\"Power\":\"purple\",\"Time\":\"green\",\"Space\":\"blue\",\"Soul\":\"orange\",\"Reality\":\"red\",\"Mind\":\"yellow\"}; \nn = int(input())\nl =[]\nfor _ in range(n):\n\tl.append(input())\nprint(6-n)\nfor ele in d:\n\tif d[ele] not in l:\n\t\tprint(ele)\n", "from copy import deepcopy\nimport itertools\nfrom bisect import bisect_left\n\ndef read():\n\treturn int(input())\n\n\ndef readmap():\n\treturn list(map(int, input().split()))\n\n\ndef readlist():\n\treturn list(map(int, input().split()))\n\n\ncolor = [\"purple\", \"green\", \"blue\", \"orange\", \"red\", \"yellow\"]\ngem = [\"Power\", \"Time\", \"Space\", \"Soul\", \"Reality\", \"Mind\"]\n\nN = int(input())\ns = set()\nfor _ in range(N):\n\ts.add(input())\n\nm = 6 - N\nprint(m)\nfor i in range(6):\n\tif not color[i] in s:\n\t\tprint(gem[i])\n\n", "n = int(input())\nans = ['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind']\nfor i in range(n):\n\ts = input()\n\tif s == 'purple':\n\t\tdel ans[ans.index('Power')]\n\telif s == 'green':\n\t\tdel ans[ans.index('Time')]\n\telif s == 'blue':\n\t\tdel ans[ans.index('Space')]\n\telif s == 'orange':\n\t\tdel ans[ans.index('Soul')]\n\telif s == 'red':\n\t\tdel ans[ans.index('Reality')]\n\telse:\n\t\tdel ans[ans.index('Mind')]\nprint(len(ans))\nfor a in ans:\n\tprint(a)\n", "n = int(input())\ns = {'purple': \"Power\", \"green\": \"Time\", \"blue\":\"Space\", \"orange\":\"Soul\", \"red\":\"Reality\", \"yellow\":\"Mind\"}\nfor i in range(n):\n\tu = input()\n\ts.pop(u)\nprint(6-n)\nfor i in s:\n\tprint(s[i])\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue May 29 21:01:01 2018\n\n@st0rmbring3r\n\"\"\"\n# l = [int(x) for x in input().split()]\n\nd2 = {'Power':'purple','Time':'green','Space': 'blue','Soul': 'orange','Reality': 'red','Mind': 'yellow'}\nd1 = {d2[x]:x for x in d2}\n# color: power\ns = set(y for y in d1)\n\nfor _ in range(int(input())):\n\ts.remove(input())\n\nprint(len(s))\nfor x in s:\n\tprint(d1[x])\n", "d={\"purple\":\"Power\",\"green\":\"Time\",\"blue\":\"Space\",\"orange\":\"Soul\",\"red\":\"Reality\",\"yellow\":\"Mind\"}\nn=int(input())\ntemp=set()\nfor i in range(n):\n\ttemp|={d[input()]}\n#m,n=list(map(int,input().split()))\n#a=list(map(int,input().split()))\n#ans=0\nans=set()\nfor i in d:\n\tans|={d[i]}\nans=ans-temp\nprint(len(ans))\nfor i in ans:\n\tprint(i)\n", "n = int(input())\na = []\nb = [\"red\",\n\"purple\",\n\"yellow\",\n\"orange\",\n\"blue\",\n\"green\"]\n\nx = {\"purple\" : \"Power\",\n\"blue\" : \"Space\",\n\"orange\" : \"Soul\",\n\"yellow\" : \"Mind\",\n\"green\" : \"Time\",\n\"red\" : \"Reality\",}\nfor i in range(n):\n\ta.append(input())\nans = []\nfor i in b:\n\tif i not in a:\n\t\tans.append(x[i])\nprint(len(ans))\nfor i in ans:\n\tprint(i)\n", "n = int(input())\na = ['purple', 'green', 'blue', 'orange', 'red', 'yellow']\nb = ['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind']\nfor i in range(n):\n\ts = input()\n\ti = a.index(s)\n\ta.pop(i)\n\tb.pop(i)\nprint(6-n)\nfor i in b:print(i)\n", "n=int(input())\ns=set()\nm={\"purple\":\"Power\",\"green\":\"Time\",\"blue\":\"Space\",\"orange\":\"Soul\",\"red\":\"Reality\",\"yellow\":\"Mind\"}\nl=[ 'purple', 'green', 'blue', 'orange', 'red', 'yellow']\nfor i in range(n):\n\tch=input()\n\ts.add(ch)\nl1=[]\nfor i in l:\n\tif i not in s:\n\t\tl1.append(i)\nprint(len(l1))\nfor i in l1:\n\tprint(m[i])\n", "n = int(input())\nl = ['Power','Time','Space','Soul','Reality','Mind']\na = ['purple','green','blue','orange','red','yellow']\nx = []\nfor i in range(n):\n\ts = input()\n\tx.append(s)\nprint(6-len(x))\nfor i in a:\n\tif(i not in x):\n\t\tprint(l[a.index(i)])\n", "gems = {'purple':'Power', 'green':'Time', 'blue':'Space', 'orange':'Soul','red':'Reality','yellow':'Mind' }\n\nN = int(input())\narr = []\n\nfor i in range(N):\n\tdel gems[input()]\n\nprint(len(gems))\nfor cols in gems:\n\tprint(gems[cols])\n\n", "n = int(input())\ns = []\nfor i in range(n):\n\ta = input()\n\ts.append(a)\n\nprint(6-n)\nif \"purple\" not in s:\n\tprint (\"Power\")\nif \"green\" not in s:\n\tprint (\"Time\")\nif \"blue\" not in s:\n\tprint (\"Space\")\nif \"orange\" not in s:\n\tprint(\"Soul\")\nif \"red\" not in s:\n\tprint(\"Reality\")\nif \"yellow\" not in s:\n\tprint(\"Mind\")\n", "n = int(input())\ninpL = []\nfor z in range(n):\n\tinpL.append(str(input()))\nprint(6-n)\n\nif \"purple\" not in inpL:\n\tprint(\"Power\")\nif \"green\" not in inpL:\n\tprint(\"Time\")\nif \"blue\" not in inpL:\n\tprint(\"Space\")\nif \"yellow\" not in inpL:\n\tprint(\"Mind\")\nif \"red\" not in inpL:\n\tprint(\"Reality\")\nif \"orange\" not in inpL:\n\tprint(\"Soul\")\n", "n=int(input())\na=[]\nd={}\nd['purple']='Power'\nd['green']='Time'\nd['blue']='Space'\nd['orange']='Soul'\nd['red']='Reality'\nd['yellow']='Mind'\nfor i in range(n):\n\ta.append(input())\nb=[]\nprint(6-n)\nfor i in d:\n\tif i not in a:\n\t\tprint(d[i])\n", "n=int(input())\nar=[]\nfor i in range(n):\n\ts=input()\n\tif(s==\"purple\"):\n\t\tar.append(\"Power\")\n\tif(s==\"green\"):\n\t\tar.append(\"Time\")\n\tif(s==\"blue\"):\n\t\tar.append(\"Space\")\n\tif(s==\"orange\"):\n\t\tar.append(\"Soul\")\n\tif(s==\"red\"):\n\t\tar.append(\"Reality\")\n\tif(s==\"yellow\"):\n\t\tar.append(\"Mind\")\nans=[\"Mind\",\"Reality\",\"Soul\",\"Space\",\"Time\",\"Power\"]\na=[]\nfor x in ans:\n\tif(x in ar):\n\t\tcontinue\n\ta.append(x)\nprint(len(a))\nfor x in a:\n\tprint(x)\n\t\n", "t=int(input())\n#l=list(map(int,input().strip().split()))\n#n,m=map(int,input().strip().split())\nd={\"red\":\"Reality\",\"purple\":\"Power\",\"green\":\"Time\",\"blue\":\"Space\",\"orange\":\"Soul\",\"yellow\":\"Mind\"}\nl=list(d.values())\nfor i in range(t):\n\tr=input()\n\tl.remove(d[r])\nprint (len(l))\nfor y in l:\n\tprint (y)\n", "a = int(input())\nc = set()\nfor i in range(a):\n\tb = input()\n\tc.add(b)\nd = []\nif 'purple' not in c:\n\td.append('Power')\nif 'green' not in c:\n\td.append('Time')\nif 'blue' not in c:\n\td.append('Space')\nif 'orange' not in c:\n\td.append('Soul')\nif 'red' not in c:\n\td.append('Reality')\nif 'yellow' not in c:\n\td.append('Mind')\nprint(len(d))\nfor i in d:\n\tprint(i)\n", "mp = {\n'purple' : 'Power',\n'green' : 'Time',\n'blue' : 'Space',\n'orange' : 'Soul',\n'red' : 'Reality',\n'yellow' : 'Mind',\n}\nn = int(input())\nL = ['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind']\nfor _ in range(n):\n\tco = input().strip()\n\tL.remove(mp[co])\nprint(len(L))\nfor x in L:\n\tprint(x)\n"], "id": "id6606"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6606", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["you", 2], ["took", 2], ["a", 2], ["peek", 2], ["on", 2], ["thanos", 2], ["wearing", 2], ["infinity", 2], ["gauntlet", 2], ["in", 2], ["the", 2], ["gauntlet", 2], ["there", 2], ["is", 2], ["a", 2], ["place", 2], ["for", 2], ["six", 2], ["infinity", 2], ["gems", 2], ["the", 3], ["power", 3], ["gem", 3], ["of", 3], ["purple", 3], ["color", 3], ["the", 3], ["time", 3], ["gem", 3], ["of", 3], ["green", 3], ["color", 3], ["the", 3], ["space", 3], ["gem", 3], ["of", 3], ["blue", 3], ["color", 3], ["the", 3], ["soul", 3], ["gem", 3], ["of", 3], ["orange", 3], ["color", 3], ["the", 3], ["reality", 3], ["gem", 3], ["of", 3], ["red", 3], ["color", 3], ["the", 3], ["mind", 3], ["gem", 3], ["of", 3], ["yellow", 3], ["color", 3], ["using", 3], ["colors", 3], ["of", 3], ["gems", 0], ["you", 0], ["saw", 0], ["in", 0], ["the", 0], ["gauntlet", 0], ["determine", 0], ["the", 0], ["names", 0], ["of", 0], ["absent", 0], ["gems", 0], ["input", 0], ["in", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["there", 0], ["is", 0], ["one", 0], ["integer", 0], ["n", 0], ["0", 0], ["le", 0], ["n", 0], ["le", 0], ["6", 3], ["—", 3], ["the", 3], ["number", 3], ["of", 3], ["gems", 3], ["in", 3], ["infinity", 3], ["gauntlet", 3], ["in", 3], ["next", 3], ["n", 3], ["lines", 3], ["there", 3], ["are", 3], ["colors", 3], ["of", 3], ["gems", 3], ["you", 3], ["saw", 3], ["words", 3], ["used", 3], ["for", 3], ["colors", 3], ["are", 3], ["purple", 3], ["green", 3], ["blue", 3], ["orange", 3], ["red", 3], ["yellow", 3], ["it", 3], ["is", 3], ["guaranteed", 3], ["that", 3], ["all", 3], ["the", 0], ["colors", 0], ["are", 0], ["distinct", 0], ["all", 0], ["colors", 0], ["are", 0], ["given", 0], ["in", 0], ["lowercase", 0], ["english", 0], ["letters", 0], ["output", 0], ["in", 0], ["the", 0], ["first", 0], ["line", 0], ["output", 0], ["one", 0], ["integer", 0], ["m", 0], ["0", 0], ["le", 0], ["m", 0], ["le", 0], ["6", 3], ["—", 3], ["the", 3], ["number", 3], ["of", 3], ["absent", 3], ["gems", 3], ["then", 3], ["in", 3], ["m", 3], ["lines", 3], ["print", 3], ["the", 3], ["names", 3], ["of", 3], ["absent", 3], ["gems", 3], ["each", 3], ["on", 3], ["its", 3], ["own", 3], ["line", 3], ["words", 3], ["used", 3], ["for", 3], ["names", 3], ["are", 3], ["power", 3], ["time", 3], ["space", 3], ["soul", 3], ["reality", 3], ["mind", 3], ["names", 3], ["can", 3], ["be", 0], ["printed", 0], ["in", 0], ["any", 0], ["order", 0], ["keep", 0], ["the", 0], ["first", 0], ["letter", 0], ["uppercase", 0], ["others", 0], ["lowercase", 0], ["examples", 0], ["input", 0], ["4", 0], ["red", 0], ["purple", 0], ["yellow", 0], ["orange", 0], ["output", 0], ["2", 0], ["space", 0], ["time", 0], ["input", 0], ["0", 0], ["output", 0], ["6", 0], ["time", 0], ["mind", 0], ["soul", 0], ["power", 0], ["reality", 0], ["space", 0], ["note", 0], ["in", 3], ["the", 3], ["first", 3], ["sample", 3], ["thanos", 3], ["already", 3], ["has", 3], ["reality", 3], ["power", 3], ["mind", 3], ["and", 3], ["soul", 3], ["gems", 3], ["so", 3], ["he", 3], ["needs", 3], ["two", 3], ["more", 3], ["time", 3], ["and", 3], ["space", 3], ["in", 3], ["the", 3], ["second", 3], ["sample", 0], ["thanos", 0], ["doesn", 0], ["t", 0], ["have", 0], ["any", 0], ["gems", 0], ["so", 0], ["he", 0], ["needs", 0], ["all", 0], ["six", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6111111111111112, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.21693121693121736, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7651515151515151, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.29987373737373735, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6111111111111112, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.21693121693121736, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7651515151515151, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.29987373737373735, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["n", 0], ["int", 0], ["input", 0], ["a", 0], ["input", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["sol", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["6", 0], ["c", 0], ["purple", 0], ["green", 0], ["blue", 0], ["orange", 0], ["red", 0], ["yellow", 0], ["i", 0], ["if", 0], ["c", 0], ["not", 0], ["in", 0], ["a", 0], ["sol", 0], ["append", 0], ["power", 0], ["time", 0], ["space", 0], ["soul", 0], ["reality", 0], ["mind", 0], ["i", 0], ["print", 0], ["len", 0], ["sol", 0], ["for", 0], ["i", 0], ["in", 0], ["sol", 0], ["print", 0], ["i", 0], ["n", 0], ["int", 0], ["input", 0], ["names", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["names", 0], ["append", 0], ["input", 0], ["strip", 0], ["names", 0], ["set", 0], ["names", 0], ["stones", 0], ["purple", 0], ["power", 0], ["green", 0], ["time", 0], ["blue", 0], ["space", 0], ["orange", 0], ["soul", 0], ["red", 0], ["reality", 0], ["yellow", 0], ["mind", 0], ["missing", 0], ["set", 0], ["stones", 0], ["keys", 0], ["names", 0], ["print", 0], ["len", 0], ["missing", 0], ["print", 0], ["n", 0], ["join", 0], ["stones", 0], ["v", 0], ["for", 0], ["v", 0], ["in", 0], ["missing", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["purple", 0], ["power", 0], ["green", 0], ["time", 0], ["blue", 0], ["space", 0], ["orange", 0], ["soul", 0], ["red", 0], ["reality", 0], ["yellow", 0], ["mind", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["a", 0], ["s", 0], ["1", 0], ["print", 0], ["6", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["a", 0], ["i", 0], ["1", 0], ["print", 0], ["a", 0], ["i", 0], ["input", 0], ["4", 0], ["red", 0], ["purple", 0], ["yellow", 0], ["orange", 0], ["def", 0], ["list", 0], ["input", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["map", 0], ["input", 0], ["return", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["map", 0], ["string", 0], ["return", 0], ["input", 0], ["split", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["d", 0], ["purple", 0], ["power", 0], ["d", 0], ["green", 0], ["time", 0], ["d", 0], ["blue", 0], ["space", 0], ["d", 0], ["orange", 0], ["soul", 0], ["d", 0], ["red", 0], ["reality", 0], ["d", 0], ["yellow", 0], ["mind", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["append", 0], ["input", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["a", 0], ["b", 0], ["append", 0], ["d", 0], ["i", 0], ["print", 0], ["len", 0], ["b", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["print", 0], ["i", 0], ["n", 0], ["int", 0], ["input", 0], ["d", 0], ["purple", 0], ["power", 0], ["green", 0], ["time", 0], ["blue", 0], ["space", 0], ["orange", 0], ["soul", 0], ["red", 0], ["reality", 0], ["yellow", 0], ["mind", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["del", 0], ["d", 0], ["s", 0], ["print", 0], ["len", 0], ["d", 0], ["for", 0], ["k", 0], ["in", 0], ["d", 0], ["print", 0], ["d", 0], ["k", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["power", 0], ["time", 0], ["space", 0], ["soul", 0], ["reality", 0], ["mind", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["red", 0], ["a", 0], ["remove", 0], ["reality", 0], ["elif", 0], ["s", 0], ["purple", 0], ["a", 0], ["remove", 0], ["power", 0], ["elif", 0], ["s", 0], ["green", 0], ["a", 0], ["remove", 0], ["time", 0], ["elif", 0], ["s", 0], ["blue", 0], ["a", 0], ["remove", 0], ["space", 0], ["elif", 0], ["s", 0], ["orange", 0], ["a", 0], ["remove", 0], ["soul", 0], ["elif", 0], ["s", 0], ["yellow", 0], ["a", 0], ["remove", 0], ["mind", 0], ["print", 0], ["len", 0], ["a", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["print", 0], ["i", 0], ["cook", 0], ["your", 0], ["dish", 0], ["here", 0], ["from", 0], ["math", 0], ["import", 0], ["d", 0], ["power", 0], ["purple", 0], ["time", 0], ["green", 0], ["space", 0], ["blue", 0], ["soul", 0], ["orange", 0], ["reality", 0], ["red", 0], ["mind", 0], ["yellow", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["l", 0], ["append", 0], ["input", 0], ["print", 0], ["6", 0], ["n", 0], ["for", 0], ["ele", 0], ["in", 0], ["d", 0], ["if", 0], ["d", 0], ["ele", 0], ["not", 0], ["in", 0], ["l", 0], ["print", 0], ["ele", 0], ["from", 0], ["copy", 0], ["import", 0], ["deepcopy", 0], ["import", 0], ["itertools", 0], ["from", 0], ["bisect", 0], ["import", 0], ["bisect", 0], ["left", 0], ["def", 0], ["read", 0], ["return", 0], ["int", 0], ["input", 0], ["def", 0], ["readmap", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["readlist", 0], ["return", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["color", 0], ["purple", 0], ["green", 0], ["blue", 0], ["orange", 0], ["red", 0], ["yellow", 0], ["gem", 0], ["power", 0], ["time", 0], ["space", 0], ["soul", 0], ["reality", 0], ["mind", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["set", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["add", 0], ["input", 0], ["m", 0], ["6", 0], ["n", 0], ["print", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["6", 0], ["if", 0], ["not", 0], ["color", 0], ["i", 0], ["in", 0], ["s", 0], ["print", 0], ["gem", 0], ["i", 0], ["n", 0], ["int", 0], ["input", 0], ["ans", 0], ["power", 0], ["time", 0], ["space", 0], ["soul", 0], ["reality", 0], ["mind", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["purple", 0], ["del", 0], ["ans", 0], ["ans", 0], ["index", 0], ["power", 0], ["elif", 0], ["s", 0], ["green", 0], ["del", 0], ["ans", 0], ["ans", 0], ["index", 0], ["time", 0], ["elif", 0], ["s", 0], ["blue", 0], ["del", 0], ["ans", 0], ["ans", 0], ["index", 0], ["space", 0], ["elif", 0], ["s", 0], ["orange", 0], ["del", 0], ["ans", 0], ["ans", 0], ["index", 0], ["soul", 0], ["elif", 0], ["s", 0], ["red", 0], ["del", 0], ["ans", 0], ["ans", 0], ["index", 0], ["reality", 0], ["else", 0], ["del", 0], ["ans", 0], ["ans", 0], ["index", 0], ["mind", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["a", 0], ["in", 0], ["ans", 0], ["print", 0], ["a", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["purple", 0], ["power", 0], ["green", 0], ["time", 0], ["blue", 0], ["space", 0], ["orange", 0], ["soul", 0], ["red", 0], ["reality", 0], ["yellow", 0], ["mind", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["u", 0], ["input", 0], ["s", 0], ["pop", 0], ["u", 0], ["print", 0], ["6", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["print", 0], ["s", 0], ["i", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["created", 0], ["on", 0], ["tue", 0], ["may", 0], ["29", 0], ["21", 0], ["01", 0], ["01", 0], ["2018", 0], ["st0rmbring3r", 0], ["l", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["d2", 0], ["power", 0], ["purple", 0], ["time", 0], ["green", 0], ["space", 0], ["blue", 0], ["soul", 0], ["orange", 0], ["reality", 0], ["red", 0], ["mind", 0], ["yellow", 0], ["d1", 0], ["d2", 0], ["x", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["d2", 0], ["color", 0], ["power", 0], ["s", 0], ["set", 0], ["y", 0], ["for", 0], ["y", 0], ["in", 0], ["d1", 0], ["for", 0], ["in", 0], ["range", 0], ["int", 0], ["input", 0], ["s", 0], ["remove", 0], ["input", 0], ["print", 0], ["len", 0], ["s", 0], ["for", 0], ["x", 0], ["in", 0], ["s", 0], ["print", 0], ["d1", 0], ["x", 0], ["d", 0], ["purple", 0], ["power", 0], ["green", 0], ["time", 0], ["blue", 0], ["space", 0], ["orange", 0], ["soul", 0], ["red", 0], ["reality", 0], ["yellow", 0], ["mind", 0], ["n", 0], ["int", 0], ["input", 0], ["temp", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["temp", 0], ["d", 0], ["input", 0], ["m", 0], ["n", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["0", 0], ["ans", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["ans", 0], ["d", 0], ["i", 0], ["ans", 0], ["ans", 0], ["temp", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["print", 0], ["i", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["b", 0], ["red", 0], ["purple", 0], ["yellow", 0], ["orange", 0], ["blue", 0], ["green", 0], ["x", 0], ["purple", 0], ["power", 0], ["blue", 0], ["space", 0], ["orange", 0], ["soul", 0], ["yellow", 0], ["mind", 0], ["green", 0], ["time", 0], ["red", 0], ["reality", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["append", 0], ["input", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["a", 0], ["ans", 0], ["append", 0], ["x", 0], ["i", 0], ["print", 0], ["len", 0], ["ans", 0], ["for", 0], ["i", 0], ["in", 0], ["ans", 0], ["print", 0], ["i", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["purple", 0], ["green", 0], ["blue", 0], ["orange", 0], ["red", 0], ["yellow", 0], ["b", 0], ["power", 0], ["time", 0], ["space", 0], ["soul", 0], ["reality", 0], ["mind", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["i", 0], ["a", 0], ["index", 0], ["s", 0], ["a", 0], ["pop", 0], ["i", 0], ["b", 0], ["pop", 0], ["i", 0], ["print", 0], ["6", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["b", 0], ["print", 0], ["i", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["set", 0], ["m", 0], ["purple", 0], ["power", 0], ["green", 0], ["time", 0], ["blue", 0], ["space", 0], ["orange", 0], ["soul", 0], ["red", 0], ["reality", 0], ["yellow", 0], ["mind", 0], ["l", 0], ["purple", 0], ["green", 0], ["blue", 0], ["orange", 0], ["red", 0], ["yellow", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["ch", 0], ["input", 0], ["s", 0], ["add", 0], ["ch", 0], ["l1", 0], ["for", 0], ["i", 0], ["in", 0], ["l", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["s", 0], ["l1", 0], ["append", 0], ["i", 0], ["print", 0], ["len", 0], ["l1", 0], ["for", 0], ["i", 0], ["in", 0], ["l1", 0], ["print", 0], ["m", 0], ["i", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["power", 0], ["time", 0], ["space", 0], ["soul", 0], ["reality", 0], ["mind", 0], ["a", 0], ["purple", 0], ["green", 0], ["blue", 0], ["orange", 0], ["red", 0], ["yellow", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["x", 0], ["append", 0], ["s", 0], ["print", 0], ["6", 0], ["len", 0], ["x", 0], ["for", 0], ["i", 0], ["in", 0], ["a", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["x", 0], ["print", 0], ["l", 0], ["a", 0], ["index", 0], ["i", 0], ["gems", 0], ["purple", 0], ["power", 0], ["green", 0], ["time", 0], ["blue", 0], ["space", 0], ["orange", 0], ["soul", 0], ["red", 0], ["reality", 0], ["yellow", 0], ["mind", 0], ["n", 0], ["int", 0], ["input", 0], ["arr", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["del", 0], ["gems", 0], ["input", 0], ["print", 0], ["len", 0], ["gems", 0], ["for", 0], ["cols", 0], ["in", 0], ["gems", 0], ["print", 0], ["gems", 0], ["cols", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["input", 0], ["s", 0], ["append", 0], ["a", 0], ["print", 0], ["6", 0], ["n", 0], ["if", 0], ["purple", 0], ["not", 0], ["in", 0], ["s", 0], ["print", 0], ["power", 0], ["if", 0], ["green", 0], ["not", 0], ["in", 0], ["s", 0], ["print", 0], ["time", 0], ["if", 0], ["blue", 0], ["not", 0], ["in", 0], ["s", 0], ["print", 0], ["space", 0], ["if", 0], ["orange", 0], ["not", 0], ["in", 0], ["s", 0], ["print", 0], ["soul", 0], ["if", 0], ["red", 0], ["not", 0], ["in", 0], ["s", 0], ["print", 0], ["reality", 0], ["if", 0], ["yellow", 0], ["not", 0], ["in", 0], ["s", 0], ["print", 0], ["mind", 0], ["n", 0], ["int", 0], ["input", 0], ["inpl", 0], ["for", 0], ["z", 0], ["in", 0], ["range", 0], ["n", 0], ["inpl", 0], ["append", 0], ["str", 0], ["input", 0], ["print", 0], ["6", 0], ["n", 0], ["if", 0], ["purple", 0], ["not", 0], ["in", 0], ["inpl", 0], ["print", 0], ["power", 0], ["if", 0], ["green", 0], ["not", 0], ["in", 0], ["inpl", 0], ["print", 0], ["time", 0], ["if", 0], ["blue", 0], ["not", 0], ["in", 0], ["inpl", 0], ["print", 0], ["space", 0], ["if", 0], ["yellow", 0], ["not", 0], ["in", 0], ["inpl", 0], ["print", 0], ["mind", 0], ["if", 0], ["red", 0], ["not", 0], ["in", 0], ["inpl", 0], ["print", 0], ["reality", 0], ["if", 0], ["orange", 0], ["not", 0], ["in", 0], ["inpl", 0], ["print", 0], ["soul", 0], ["n", 0], ["int", 0], ["input", 0], ["a", 0], ["d", 0], ["d", 0], ["purple", 0], ["power", 0], ["d", 0], ["green", 0], ["time", 0], ["d", 0], ["blue", 0], ["space", 0], ["d", 0], ["orange", 0], ["soul", 0], ["d", 0], ["red", 0], ["reality", 0], ["d", 0], ["yellow", 0], ["mind", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["a", 0], ["append", 0], ["input", 0], ["b", 0], ["print", 0], ["6", 0], ["n", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["if", 0], ["i", 0], ["not", 0], ["in", 0], ["a", 0], ["print", 0], ["d", 0], ["i", 0], ["n", 0], ["int", 0], ["input", 0], ["ar", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["s", 0], ["input", 0], ["if", 0], ["s", 0], ["purple", 0], ["ar", 0], ["append", 0], ["power", 0], ["if", 0], ["s", 0], ["green", 0], ["ar", 0], ["append", 0], ["time", 0], ["if", 0], ["s", 0], ["blue", 0], ["ar", 0], ["append", 0], ["space", 0], ["if", 0], ["s", 0], ["orange", 0], ["ar", 0], ["append", 0], ["soul", 0], ["if", 0], ["s", 0], ["red", 0], ["ar", 0], ["append", 0], ["reality", 0], ["if", 0], ["s", 0], ["yellow", 0], ["ar", 0], ["append", 0], ["mind", 0], ["ans", 0], ["mind", 0], ["reality", 0], ["soul", 0], ["space", 0], ["time", 0], ["power", 0], ["a", 0], ["for", 0], ["x", 0], ["in", 0], ["ans", 0], ["if", 0], ["x", 0], ["in", 0], ["ar", 0], ["continue", 0], ["a", 0], ["append", 0], ["x", 0], ["print", 0], ["len", 0], ["a", 0], ["for", 0], ["x", 0], ["in", 0], ["a", 0], ["print", 0], ["x", 0], ["t", 0], ["int", 0], ["input", 0], ["l", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["n", 0], ["m", 0], ["map", 0], ["int", 0], ["input", 0], ["strip", 0], ["split", 0], ["d", 0], ["red", 0], ["reality", 0], ["purple", 0], ["power", 0], ["green", 0], ["time", 0], ["blue", 0], ["space", 0], ["orange", 0], ["soul", 0], ["yellow", 0], ["mind", 0], ["l", 0], ["list", 0], ["d", 0], ["values", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["t", 0], ["r", 0], ["input", 0], ["l", 0], ["remove", 0], ["d", 0], ["r", 0], ["print", 0], ["len", 0], ["l", 0], ["for", 0], ["y", 0], ["in", 0], ["l", 0], ["print", 0], ["y", 0], ["a", 0], ["int", 0], ["input", 0], ["c", 0], ["set", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["a", 0], ["b", 0], ["input", 0], ["c", 0], ["add", 0], ["b", 0], ["d", 0], ["if", 0], ["purple", 0], ["not", 0], ["in", 0], ["c", 0], ["d", 0], ["append", 0], ["power", 0], ["if", 0], ["green", 0], ["not", 0], ["in", 0], ["c", 0], ["d", 0], ["append", 0], ["time", 0], ["if", 0], ["blue", 0], ["not", 0], ["in", 0], ["c", 0], ["d", 0], ["append", 0], ["space", 0], ["if", 0], ["orange", 0], ["not", 0], ["in", 0], ["c", 0], ["d", 0], ["append", 0], ["soul", 0], ["if", 0], ["red", 0], ["not", 0], ["in", 0], ["c", 0], ["d", 0], ["append", 0], ["reality", 0], ["if", 0], ["yellow", 0], ["not", 0], ["in", 0], ["c", 0], ["d", 0], ["append", 0], ["mind", 0], ["print", 0], ["len", 0], ["d", 0], ["for", 0], ["i", 0], ["in", 0], ["d", 0], ["print", 0], ["i", 0], ["mp", 0], ["purple", 0], ["power", 0], ["green", 0], ["time", 0], ["blue", 0], ["space", 0], ["orange", 0], ["soul", 0], ["red", 0], ["reality", 0], ["yellow", 0], ["mind", 0], ["n", 0], ["int", 0], ["input", 0], ["l", 0], ["power", 0], ["time", 0], ["space", 0], ["soul", 0], ["reality", 0], ["mind", 0], ["for", 0], ["in", 0], ["range", 0], ["n", 0], ["co", 0], ["input", 0], ["strip", 0], ["l", 0], ["remove", 0], ["mp", 0], ["co", 0], ["print", 0], ["len", 0], ["l", 0], ["for", 0], ["x", 0], ["in", 0], ["l", 0], ["print", 0], ["x", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nAlice has a string $s$. She really likes the letter \"a\". She calls a string good if strictly more than half of the characters in that string are \"a\"s. For example \"aaabb\", \"axaa\" are good strings, and \"baca\", \"awwwa\", \"\" (empty string) are not.\n\nAlice can erase some characters from her string $s$. She would like to know what is the longest string remaining after erasing some characters (possibly zero) to get a good string. It is guaranteed that the string has at least one \"a\" in it, so the answer always exists.\n\n\n-----Input-----\n\nThe first line contains a string $s$ ($1 \\leq |s| \\leq 50$) consisting of lowercase English letters. It is guaranteed that there is at least one \"a\" in $s$.\n\n\n-----Output-----\n\nPrint a single integer, the length of the longest good string that Alice can get after erasing some characters from $s$.\n\n\n-----Examples-----\nInput\nxaxxxxa\n\nOutput\n3\n\nInput\naaabaa\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first example, it's enough to erase any four of the \"x\"s. The answer is $3$ since that is the maximum number of characters that can remain.\n\nIn the second example, we don't need to erase any characters.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["s = input()\nc = s.count('a')\nprint(min(2*c-1,len(s)))\n", "a = input()\nc = a.count('a')\nprint(min(len(a), c * 2 - 1))\n", "s = input()\nz = s.count('a')\nr = len(s) - z\nprint(z + min(z-1,r))\n", "def main():\n\ts = input()\n\tn = len(s)\n\ta = s.count('a')\n\tprint(min(a + a - 1, n))\n\treturn 0\n\nmain()\n", "s=input()\na=s.count(\"a\")\nb=len(s)\nif a>b/2:\n\tprint(b)\nelse:\n\tprint(2*a-1)\n", "s = input()\nz = s.count('a')\nprint(min(z * 2 - 1, len(s)))\n", "st = input()\nx = st.count('a')\ny = len(st) - x\nwhile x <= y:\n\ty -= 1\nprint(x + y)\n", "s = input()\na = 0\nt = 0\nfor i in s:\n\tif i == 'a':\n\t\ta += 1\n\telse:\n\t\tt += 1\n\nprint(a + min(a - 1, t))\n", "s = input()\nwyn = 0\nfor i in s:\n\tif i == \"a\":\n\t\twyn += 1\nprint(min(len(s),2*wyn-1))\n", "from collections import Counter\n\ns = input()\nc = Counter(list(s))\n\nprint(min(len(s), 2*c['a']-1))\n", "from collections import Counter\n\nS=input()\n\nC=Counter(S)\n\nL=len(S)\n\nA=C[\"a\"]\n\nprint(min(A*2-1,L))\n", "from collections import Counter\nS = input()\nSC = Counter(S)\na = SC['a']\nprint(min(len(S), 2*a-1))\n", "s=input()\n\nnba=len([k for k in s if k==\"a\"])\n\nres = nba+min(nba-1,len(s)-nba)\n\nprint(res)\n", "s = input()\nx = s.count('a')\nprint(min(len(s), 2*x-1))\n", "s = input()\nka = s.count('a')\n\nprint(min(ka*2-1, len(s)))\n", "s = input()\na = s.count(\"a\")\nif a > len(s) // 2:\n\tprint(len(s))\nelse:\n\tprint(2 * a - 1)\n", "s = input()\nc = s.count('a')\nif c > len(s)//2 :\n\tprint(len(s))\nelse:\n\tprint(2*c -1)\n", "s=input()\nk=s.count('a')\nn=len(s)\nwhile k<=n/2: \n\tn-=1\nprint(n)\n", "s = input()\nc = s.count('a')\nn = len(s)\nprint(min(n, 2 * c - 1))\n", "def solve():\n\ts = input()\n\t\n\tprint (min(len(s), 2 * s.count(\"a\") - 1))\n\t\ndef __starting_point():  \n\tsolve()\n__starting_point()\n", "s = input()\n\ncnt = 0\nfor elem in s:\n\tif elem == 'a':\n\t\tcnt += 1\nprint(min(len(s), max(cnt * 2 - 1, 0)))\n", "s = input()\nprint(min(s.count('a')*2-1, len(s)))\n", "S = input()\nA = 0\nB = 0\nfor s in S:\n\tif s == \"a\":\n\t\tA += 1\n\telse:\n\t\tB += 1\n\nprint(min(A*2-1, A+B))\n", "s = input()\nprint(max(0, min(s.count('a') * 2 - 1, len(s))))\n", "s = input()\nct = 0\nfor i in s:\n\tif i == 'a':\n\t\tct += 1\nl = len(s)\nans = min(l,2*ct -1)\nprint(ans)\n"], "id": "id9235"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9235", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["alice", 1], ["has", 1], ["a", 1], ["string", 1], ["s", 1], ["she", 1], ["really", 1], ["likes", 1], ["the", 1], ["letter", 1], ["a", 1], ["she", 1], ["calls", 1], ["a", 1], ["string", 1], ["good", 1], ["if", 1], ["strictly", 1], ["more", 1], ["than", 1], ["half", 1], ["of", 1], ["the", 1], ["characters", 1], ["in", 1], ["that", 1], ["string", 1], ["are", 1], ["a", 1], ["s", 1], ["for", 1], ["example", 1], ["aaabb", 1], ["axaa", 1], ["are", 1], ["good", 1], ["strings", 1], ["and", 1], ["baca", 1], ["awwwa", 1], ["empty", 1], ["string", 1], ["are", 1], ["not", 1], ["alice", 1], ["can", 1], ["erase", 1], ["some", 1], ["characters", 1], ["from", 1], ["her", 1], ["string", 1], ["s", 1], ["she", 1], ["would", 1], ["like", 1], ["to", 1], ["know", 1], ["what", 1], ["is", 1], ["the", 1], ["longest", 1], ["string", 1], ["remaining", 1], ["after", 1], ["erasing", 1], ["some", 1], ["characters", 1], ["possibly", 1], ["zero", 1], ["to", 1], ["get", 1], ["a", 1], ["good", 1], ["string", 1], ["it", 1], ["is", 1], ["guaranteed", 1], ["that", 1], ["the", 1], ["string", 1], ["has", 1], ["at", 1], ["least", 1], ["one", 1], ["a", 1], ["in", 1], ["it", 1], ["so", 1], ["the", 0], ["answer", 0], ["always", 0], ["exists", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["contains", 0], ["a", 0], ["string", 0], ["s", 0], ["1", 0], ["leq", 0], ["s", 0], ["leq", 0], ["50", 0], ["consisting", 1], ["of", 1], ["lowercase", 1], ["english", 1], ["letters", 1], ["it", 1], ["is", 1], ["guaranteed", 1], ["that", 1], ["there", 1], ["is", 1], ["at", 1], ["least", 1], ["one", 1], ["a", 1], ["in", 1], ["s", 1], ["output", 1], ["print", 1], ["a", 1], ["single", 1], ["integer", 1], ["the", 1], ["length", 1], ["of", 1], ["the", 1], ["longest", 1], ["good", 0], ["string", 0], ["that", 0], ["alice", 0], ["can", 0], ["get", 0], ["after", 0], ["erasing", 0], ["some", 0], ["characters", 0], ["from", 0], ["s", 0], ["examples", 0], ["input", 0], ["xaxxxxa", 0], ["output", 0], ["3", 0], ["input", 0], ["aaabaa", 0], ["output", 0], ["6", 0], ["note", 0], ["in", 0], ["the", 0], ["first", 0], ["example", 0], ["it", 0], ["s", 0], ["enough", 0], ["to", 0], ["erase", 0], ["any", 0], ["four", 0], ["of", 0], ["the", 0], ["x", 0], ["s", 0], ["the", 0], ["answer", 0], ["is", 0], ["3", 0], ["since", 0], ["that", 0], ["is", 0], ["the", 0], ["maximum", 0], ["number", 0], ["of", 0], ["characters", 0], ["that", 0], ["can", 0], ["remain", 0], ["in", 0], ["the", 0], ["second", 0], ["example", 0], ["we", 0], ["don", 0], ["t", 0], ["need", 0], ["to", 0], ["erase", 0], ["any", 0], ["characters", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5918367346938775, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5918367346938775, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6730769230769231, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6730769230769231, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5918367346938775, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5918367346938775, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6730769230769231, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6730769230769231, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["s", 0], ["input", 0], ["c", 0], ["s", 0], ["count", 0], ["a", 0], ["print", 0], ["min", 0], ["2", 0], ["c", 0], ["1", 0], ["len", 0], ["s", 0], ["a", 0], ["input", 0], ["c", 0], ["a", 0], ["count", 0], ["a", 0], ["print", 0], ["min", 0], ["len", 0], ["a", 0], ["c", 0], ["2", 0], ["1", 0], ["s", 0], ["input", 0], ["z", 0], ["s", 0], ["count", 0], ["a", 0], ["r", 0], ["len", 0], ["s", 0], ["z", 0], ["print", 0], ["z", 0], ["min", 0], ["z", 0], ["1", 0], ["r", 0], ["def", 0], ["main", 0], ["s", 0], ["input", 0], ["n", 0], ["len", 0], ["s", 0], ["a", 0], ["s", 0], ["count", 0], ["a", 0], ["print", 0], ["min", 0], ["a", 0], ["a", 0], ["1", 0], ["n", 0], ["return", 0], ["0", 0], ["main", 0], ["s", 0], ["input", 0], ["a", 0], ["s", 0], ["count", 0], ["a", 0], ["b", 0], ["len", 0], ["s", 0], ["if", 0], ["a", 0], ["b", 0], ["2", 0], ["print", 0], ["b", 0], ["else", 0], ["print", 0], ["2", 0], ["a", 0], ["1", 0], ["s", 0], ["input", 0], ["z", 0], ["s", 0], ["count", 0], ["a", 0], ["print", 0], ["min", 0], ["z", 0], ["2", 0], ["1", 0], ["len", 0], ["s", 0], ["st", 0], ["input", 0], ["x", 0], ["st", 0], ["count", 0], ["a", 0], ["y", 0], ["len", 0], ["st", 0], ["x", 0], ["while", 0], ["x", 0], ["y", 0], ["y", 0], ["1", 0], ["print", 0], ["x", 0], ["y", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["t", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["a", 0], ["a", 0], ["1", 0], ["else", 0], ["t", 0], ["1", 0], ["print", 0], ["a", 0], ["min", 0], ["a", 0], ["1", 0], ["t", 0], ["s", 0], ["input", 0], ["wyn", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["a", 0], ["wyn", 0], ["1", 0], ["print", 0], ["min", 0], ["len", 0], ["s", 0], ["2", 0], ["wyn", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["s", 0], ["input", 0], ["c", 0], ["counter", 0], ["list", 0], ["s", 0], ["print", 0], ["min", 0], ["len", 0], ["s", 0], ["2", 0], ["c", 0], ["a", 0], ["1", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["s", 0], ["input", 0], ["c", 0], ["counter", 0], ["s", 0], ["l", 0], ["len", 0], ["s", 0], ["a", 0], ["c", 0], ["a", 0], ["print", 0], ["min", 0], ["a", 0], ["2", 0], ["1", 0], ["l", 0], ["from", 0], ["collections", 0], ["import", 0], ["counter", 0], ["s", 0], ["input", 0], ["sc", 0], ["counter", 0], ["s", 0], ["a", 0], ["sc", 0], ["a", 0], ["print", 0], ["min", 0], ["len", 0], ["s", 0], ["2", 0], ["a", 0], ["1", 0], ["s", 0], ["input", 0], ["nba", 0], ["len", 0], ["k", 0], ["for", 0], ["k", 0], ["in", 0], ["s", 0], ["if", 0], ["k", 0], ["a", 0], ["res", 0], ["nba", 0], ["min", 0], ["nba", 0], ["1", 0], ["len", 0], ["s", 0], ["nba", 0], ["print", 0], ["res", 0], ["s", 0], ["input", 0], ["x", 0], ["s", 0], ["count", 0], ["a", 0], ["print", 0], ["min", 0], ["len", 0], ["s", 0], ["2", 0], ["x", 0], ["1", 0], ["s", 0], ["input", 0], ["ka", 0], ["s", 0], ["count", 0], ["a", 0], ["print", 0], ["min", 0], ["ka", 0], ["2", 0], ["1", 0], ["len", 0], ["s", 0], ["s", 0], ["input", 0], ["a", 0], ["s", 0], ["count", 0], ["a", 0], ["if", 0], ["a", 0], ["len", 0], ["s", 0], ["2", 0], ["print", 0], ["len", 0], ["s", 0], ["else", 0], ["print", 0], ["2", 0], ["a", 0], ["1", 0], ["s", 0], ["input", 0], ["c", 0], ["s", 0], ["count", 0], ["a", 0], ["if", 0], ["c", 0], ["len", 0], ["s", 0], ["2", 0], ["print", 0], ["len", 0], ["s", 0], ["else", 0], ["print", 0], ["2", 0], ["c", 0], ["1", 0], ["s", 0], ["input", 0], ["k", 0], ["s", 0], ["count", 0], ["a", 0], ["n", 0], ["len", 0], ["s", 0], ["while", 0], ["k", 0], ["n", 0], ["2", 0], ["n", 0], ["1", 0], ["print", 0], ["n", 0], ["s", 0], ["input", 0], ["c", 0], ["s", 0], ["count", 0], ["a", 0], ["n", 0], ["len", 0], ["s", 0], ["print", 0], ["min", 0], ["n", 0], ["2", 0], ["c", 0], ["1", 0], ["def", 0], ["solve", 0], ["s", 0], ["input", 0], ["print", 0], ["min", 0], ["len", 0], ["s", 0], ["2", 0], ["s", 0], ["count", 0], ["a", 0], ["1", 0], ["def", 0], ["starting", 0], ["point", 0], ["solve", 0], ["starting", 0], ["point", 0], ["s", 0], ["input", 0], ["cnt", 0], ["0", 0], ["for", 0], ["elem", 0], ["in", 0], ["s", 0], ["if", 0], ["elem", 0], ["a", 0], ["cnt", 0], ["1", 0], ["print", 0], ["min", 0], ["len", 0], ["s", 0], ["max", 0], ["cnt", 0], ["2", 0], ["1", 0], ["0", 0], ["s", 0], ["input", 0], ["print", 0], ["min", 0], ["s", 0], ["count", 0], ["a", 0], ["2", 0], ["1", 0], ["len", 0], ["s", 0], ["s", 0], ["input", 0], ["a", 0], ["0", 0], ["b", 0], ["0", 0], ["for", 0], ["s", 0], ["in", 0], ["s", 0], ["if", 0], ["s", 0], ["a", 0], ["a", 0], ["1", 0], ["else", 0], ["b", 0], ["1", 0], ["print", 0], ["min", 0], ["a", 0], ["2", 0], ["1", 0], ["a", 0], ["b", 0], ["s", 0], ["input", 0], ["print", 0], ["max", 0], ["0", 0], ["min", 0], ["s", 0], ["count", 0], ["a", 0], ["2", 0], ["1", 0], ["len", 0], ["s", 0], ["s", 0], ["input", 0], ["ct", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["if", 0], ["i", 0], ["a", 0], ["ct", 0], ["1", 0], ["l", 0], ["len", 0], ["s", 0], ["ans", 0], ["min", 0], ["l", 0], ["2", 0], ["ct", 0], ["1", 0], ["print", 0], ["ans", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nThere are many types of languages, all used for different purposes. People communicate using natural languages like English and Spanish, program with formal languages like C++ and Perl, and compose music with musical notation. Let’s consider musical notation, which is typically a sequence of notes of specified pitches and durations. Computers can best represent these sequences using numbers and letters, such as\n\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n\nwhich is a simple rendition of the song ‘Yankee Doodle’. The notes are chosen from a through g and A through G. A note without a number indicates it is held for a duration of one beat; the number $2$ following some of the notes indicate that note has a duration that is twice as long. It would be nice to take this notation and create something musicians are more used to reading, with notes and bars and staffs, etc. Write a program that does this.\n\n-----Input-----\nThe input for your program consists of two lines. The first line has an integer $1 \\le n \\le 100$ indicating the number of notes in the song. The second line contains $n$ notes. Each note consists of two parts: the pitch and the duration. The pitch is a letter a through g or A through G. Lowercase letters indicate the octave below uppercase letters, and we consider c to represent so-called ‘middle c’. The duration, which is optional, is a positive integer indicating a multiplier of the length of the default note. (If you are musical you’ll notice we’ve made many simplifying assumptions, such as leaving out many octaves, sharps, flats, rests, time signatures, etc.)\n\n-----Output-----\nFor each song, print a text-based representation on one staff. Each staff should have the following format: a $5$-line staff (for the treble clef), middle c, and one more line (for the top of the bass clef):\n\nG:           \nF: ----------------------------------------------------------\nE:           \nD: ----------------------------------------------------------\nC:           \nB: ----------------------------------------------------------\nA:           \ng: ----------------------------------------------------------\nf:           \ne: ----------------------------------------------------------\nd:           \nc:           \nb:           \na: ----------------------------------------------------------\n\nFor each song’s note, print a single asterisk on a line (or between lines) indicating its pitch. Use one asterisk for the default duration, two asterisks for notes twice as long, three asterisks for notes three times as long, etc. Leave a single separating column between each pair of consecutive notes. The staff lines should be only as long as necessary to complete the song. Notes that are between lines (i.e. b-d, f, A, C, E, G) should pad with spaces out to the end the staff lines.\n\n-----Examples-----\nSample Input:\n27\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\nSample Output:\nG:                                                           \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id8696"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id8696", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["there", 0], ["are", 0], ["many", 0], ["types", 0], ["of", 0], ["languages", 0], ["all", 0], ["used", 0], ["for", 0], ["different", 0], ["purposes", 0], ["people", 0], ["communicate", 0], ["using", 0], ["natural", 0], ["languages", 0], ["like", 0], ["english", 0], ["and", 0], ["spanish", 0], ["program", 0], ["with", 0], ["formal", 0], ["languages", 0], ["like", 0], ["c", 0], ["and", 0], ["perl", 0], ["and", 0], ["compose", 0], ["music", 0], ["with", 0], ["musical", 0], ["notation", 0], ["let’s", 0], ["consider", 0], ["musical", 0], ["notation", 0], ["which", 0], ["is", 0], ["typically", 0], ["a", 0], ["sequence", 0], ["of", 0], ["notes", 0], ["of", 0], ["specified", 0], ["pitches", 0], ["and", 0], ["durations", 0], ["computers", 0], ["can", 0], ["best", 0], ["represent", 0], ["these", 0], ["sequences", 0], ["using", 0], ["numbers", 0], ["and", 0], ["letters", 0], ["such", 0], ["as", 0], ["c", 0], ["c", 0], ["d", 0], ["e", 0], ["c", 0], ["e", 0], ["d2", 0], ["c", 0], ["c", 0], ["d", 0], ["e", 0], ["c2", 0], ["b2", 0], ["c", 0], ["c", 0], ["d", 0], ["e", 0], ["f", 0], ["e", 0], ["d", 0], ["c", 0], ["b", 0], ["g", 0], ["a", 0], ["b", 0], ["c2", 0], ["c2", 0], ["which", 1], ["is", 1], ["a", 1], ["simple", 1], ["rendition", 1], ["of", 1], ["the", 1], ["song", 1], ["‘yankee", 1], ["doodle’", 1], ["the", 1], ["notes", 1], ["are", 1], ["chosen", 1], ["from", 1], ["a", 1], ["through", 1], ["g", 1], ["and", 1], ["a", 1], ["through", 1], ["g", 1], ["a", 1], ["note", 1], ["without", 1], ["a", 1], ["number", 1], ["indicates", 1], ["it", 1], ["is", 1], ["held", 1], ["for", 1], ["a", 1], ["duration", 1], ["of", 1], ["one", 1], ["beat", 1], ["the", 1], ["number", 1], ["2", 1], ["following", 1], ["some", 1], ["of", 1], ["the", 1], ["notes", 1], ["indicate", 1], ["that", 1], ["note", 1], ["has", 1], ["a", 1], ["duration", 1], ["that", 1], ["is", 1], ["twice", 1], ["as", 1], ["long", 1], ["it", 1], ["would", 1], ["be", 1], ["nice", 1], ["to", 1], ["take", 1], ["this", 1], ["notation", 1], ["and", 1], ["create", 1], ["something", 1], ["musicians", 1], ["are", 1], ["more", 1], ["used", 1], ["to", 1], ["reading", 1], ["with", 1], ["notes", 0], ["and", 0], ["bars", 0], ["and", 0], ["staffs", 0], ["etc", 0], ["write", 0], ["a", 0], ["program", 0], ["that", 0], ["does", 0], ["this", 0], ["input", 0], ["the", 0], ["input", 0], ["for", 0], ["your", 0], ["program", 0], ["consists", 0], ["of", 0], ["two", 0], ["lines", 0], ["the", 0], ["first", 0], ["line", 0], ["has", 0], ["an", 0], ["integer", 0], ["1", 0], ["le", 0], ["n", 0], ["le", 0], ["100", 0], ["indicating", 0], ["the", 0], ["number", 0], ["of", 0], ["notes", 0], ["in", 0], ["the", 0], ["song", 0], ["the", 0], ["second", 0], ["line", 0], ["contains", 0], ["n", 0], ["notes", 0], ["each", 0], ["note", 0], ["consists", 0], ["of", 0], ["two", 0], ["parts", 0], ["the", 0], ["pitch", 0], ["and", 0], ["the", 0], ["duration", 0], ["the", 0], ["pitch", 0], ["is", 0], ["a", 0], ["letter", 0], ["a", 0], ["through", 0], ["g", 0], ["or", 0], ["a", 0], ["through", 0], ["g", 0], ["lowercase", 0], ["letters", 0], ["indicate", 0], ["the", 0], ["octave", 0], ["below", 0], ["uppercase", 0], ["letters", 0], ["and", 0], ["we", 0], ["consider", 0], ["c", 0], ["to", 0], ["represent", 0], ["so", 0], ["called", 0], ["‘middle", 0], ["c’", 0], ["the", 0], ["duration", 0], ["which", 0], ["is", 0], ["optional", 0], ["is", 0], ["a", 0], ["positive", 0], ["integer", 0], ["indicating", 0], ["a", 0], ["multiplier", 0], ["of", 0], ["the", 0], ["length", 0], ["of", 0], ["the", 0], ["default", 0], ["note", 0], ["if", 0], ["you", 0], ["are", 0], ["musical", 0], ["you’ll", 0], ["notice", 0], ["we’ve", 0], ["made", 0], ["many", 0], ["simplifying", 0], ["assumptions", 0], ["such", 0], ["as", 0], ["leaving", 0], ["out", 0], ["many", 0], ["octaves", 0], ["sharps", 0], ["flats", 0], ["rests", 0], ["time", 0], ["signatures", 0], ["etc", 0], ["output", 0], ["for", 0], ["each", 0], ["song", 0], ["print", 0], ["a", 0], ["text", 0], ["based", 0], ["representation", 0], ["on", 0], ["one", 0], ["staff", 0], ["each", 0], ["staff", 0], ["should", 0], ["have", 0], ["the", 0], ["following", 0], ["format", 0], ["a", 0], ["5", 0], ["line", 0], ["staff", 0], ["for", 0], ["the", 0], ["treble", 0], ["clef", 0], ["middle", 0], ["c", 0], ["and", 0], ["one", 0], ["more", 0], ["line", 0], ["for", 0], ["the", 0], ["top", 0], ["of", 0], ["the", 0], ["bass", 0], ["clef", 0], ["g", 63], ["f", 69], ["e", 0], ["d", 0], ["c", 0], ["b", 0], ["a", 0], ["g", 0], ["f", 0], ["e", 0], ["d", 0], ["c", 0], ["b", 0], ["a", 0], ["for", 1], ["each", 1], ["song’s", 1], ["note", 1], ["print", 1], ["a", 1], ["single", 1], ["asterisk", 1], ["on", 1], ["a", 1], ["line", 1], ["or", 1], ["between", 1], ["lines", 1], ["indicating", 1], ["its", 1], ["pitch", 1], ["use", 1], ["one", 1], ["asterisk", 1], ["for", 1], ["the", 1], ["default", 1], ["duration", 1], ["two", 1], ["asterisks", 1], ["for", 1], ["notes", 1], ["twice", 1], ["as", 1], ["long", 1], ["three", 1], ["asterisks", 1], ["for", 1], ["notes", 1], ["three", 1], ["times", 1], ["as", 1], ["long", 1], ["etc", 1], ["leave", 1], ["a", 1], ["single", 1], ["separating", 1], ["column", 1], ["between", 1], ["each", 1], ["pair", 1], ["of", 1], ["consecutive", 1], ["notes", 1], ["the", 1], ["staff", 1], ["lines", 1], ["should", 1], ["be", 1], ["only", 1], ["as", 1], ["long", 1], ["as", 1], ["necessary", 1], ["to", 1], ["complete", 1], ["the", 1], ["song", 1], ["notes", 1], ["that", 1], ["are", 1], ["between", 1], ["lines", 1], ["i", 1], ["e", 1], ["b", 1], ["d", 1], ["f", 1], ["a", 1], ["c", 1], ["e", 1], ["g", 0], ["should", 0], ["pad", 0], ["with", 0], ["spaces", 0], ["out", 0], ["to", 0], ["the", 0], ["end", 0], ["the", 0], ["staff", 0], ["lines", 0], ["examples", 0], ["sample", 0], ["input", 0], ["27", 0], ["c", 0], ["c", 0], ["d", 0], ["e", 0], ["c", 0], ["e", 0], ["d2", 0], ["c", 0], ["c", 0], ["d", 0], ["e", 0], ["c2", 0], ["b2", 0], ["c", 0], ["c", 0], ["d", 0], ["e", 0], ["f", 0], ["e", 0], ["d", 0], ["c", 0], ["b", 0], ["g", 0], ["a", 0], ["b", 0], ["c2", 0], ["c2", 0], ["sample", 0], ["output", 0], ["g", 63], ["f", 69], ["e", 0], ["d", 0], ["c", 0], ["b", 0], ["a", 0], ["g", 0], ["f", 0], ["e", 0], ["d", 0], ["c", 0], ["b", 0], ["a", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.32298136645962733, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.31482553113663025, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4121212121212121, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3564534231200896, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3146997929606625, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3146997929606625, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.35555555555555557, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.35555555555555557, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nAs captain of your space ship you have never encountered a more fierce enemy than the one you have snuck upon now. You immediately bring out the big phaser cannon hoping to take out the flagship before they discover you. There is no room for mistakes and the shot will have to be perfect if you are to stand any chance at all against the flagship of the enemy. \n\nYou start charging the phaser beam and retrieve the room layout of the flagship from the archives. You are situated directly above the enemy, from where the layout of the flagship can be modeled by a two-dimensional map of the rooms of the flagship. In this map, each room is a rectangle with sides parallel to the $x$ and $y$ axes (rectilinear), and no two rooms intersect (not even in a single point).\n\nThe phaser beam is configured by giving a point $(x, y)$ and an angle $\\vartheta $. The phaser beam will start at $(x, y)$ and travel a distance $\\ell $ in the direction specified by $\\vartheta $, causing severe damage to every room touched by the phaser beam. Due to this, you aim at hitting as many rooms as possible.\n\nThe phaser beam is almost fully charged and the only missing piece is an optimal configuration of the weapon. Unfortunately, it turns out to be harder than you expected. However, there are still ten seconds before the charging is completed and hence you decide to make a computer program to solve the problem.\n\n-----Input-----\nThe first line of input consists of two integers $r$ and $\\ell $ ($1 \\le r \\le 15$, $1 \\le \\ell \\le 1000$) where $r$ is the number of rooms in the flagship and $\\ell $ is the length of a shot of the phaser.\n\nThen follow $r$ lines, each of which contains four integers $x_1$, $y_1$, $x_2$, $y_2$ ($0 \\le x_1 < x_2 \\le 1000$, $0 \\le y_1 < y_2 \\le 1000$), indicating that there is a room in the flagship with lower left corner $(x_1, y_1)$ and upper right corner $(x_2, y_2)$.\n\n-----Output-----\nOutput one line with the maximum number of rooms that can be hit by one phaser beam. Recall that if the beam touches a room it is counted as a hit.\n\nYou may assume that the answer is numerically stable in the following sense: if all rooms are expanded by a distance of $10^{-6}$ in all four directions, the answer does not change.\n\n-----Examples-----\nSample Input:\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\nSample Output:\n4\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id9806"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id9806", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["as", 1], ["captain", 1], ["of", 1], ["your", 1], ["space", 1], ["ship", 1], ["you", 1], ["have", 1], ["never", 1], ["encountered", 1], ["a", 1], ["more", 1], ["fierce", 1], ["enemy", 1], ["than", 1], ["the", 1], ["one", 1], ["you", 1], ["have", 1], ["snuck", 1], ["upon", 1], ["now", 1], ["you", 1], ["immediately", 1], ["bring", 1], ["out", 1], ["the", 1], ["big", 1], ["phaser", 1], ["cannon", 1], ["hoping", 1], ["to", 1], ["take", 1], ["out", 1], ["the", 1], ["flagship", 1], ["before", 1], ["they", 1], ["discover", 1], ["you", 1], ["there", 1], ["is", 1], ["no", 1], ["room", 1], ["for", 1], ["mistakes", 1], ["and", 1], ["the", 1], ["shot", 1], ["will", 1], ["have", 1], ["to", 1], ["be", 1], ["perfect", 1], ["if", 1], ["you", 1], ["are", 1], ["to", 1], ["stand", 1], ["any", 1], ["chance", 1], ["at", 1], ["all", 1], ["against", 1], ["the", 1], ["flagship", 1], ["of", 1], ["the", 1], ["enemy", 1], ["you", 1], ["start", 1], ["charging", 1], ["the", 1], ["phaser", 1], ["beam", 1], ["and", 1], ["retrieve", 1], ["the", 1], ["room", 1], ["layout", 1], ["of", 1], ["the", 1], ["flagship", 1], ["from", 1], ["the", 1], ["archives", 1], ["you", 1], ["are", 1], ["situated", 1], ["directly", 1], ["above", 1], ["the", 1], ["enemy", 1], ["from", 1], ["where", 1], ["the", 1], ["layout", 1], ["of", 1], ["the", 1], ["flagship", 1], ["can", 1], ["be", 1], ["modeled", 1], ["by", 1], ["a", 1], ["two", 1], ["dimensional", 1], ["map", 1], ["of", 1], ["the", 1], ["rooms", 1], ["of", 1], ["the", 1], ["flagship", 1], ["in", 1], ["this", 1], ["map", 1], ["each", 1], ["room", 1], ["is", 1], ["a", 1], ["rectangle", 1], ["with", 1], ["sides", 1], ["parallel", 1], ["to", 1], ["the", 1], ["x", 1], ["and", 1], ["y", 1], ["axes", 1], ["rectilinear", 1], ["and", 1], ["no", 1], ["two", 1], ["rooms", 1], ["intersect", 1], ["not", 1], ["even", 1], ["in", 1], ["a", 1], ["single", 1], ["point", 1], ["the", 1], ["phaser", 1], ["beam", 0], ["is", 0], ["configured", 0], ["by", 0], ["giving", 0], ["a", 0], ["point", 0], ["x", 0], ["y", 0], ["and", 0], ["an", 0], ["angle", 0], ["vartheta", 0], ["the", 0], ["phaser", 0], ["beam", 0], ["will", 0], ["start", 0], ["at", 0], ["x", 0], ["y", 0], ["and", 0], ["travel", 0], ["a", 0], ["distance", 0], ["ell", 0], ["in", 0], ["the", 0], ["direction", 0], ["specified", 0], ["by", 0], ["vartheta", 0], ["causing", 1], ["severe", 1], ["damage", 1], ["to", 1], ["every", 1], ["room", 1], ["touched", 1], ["by", 1], ["the", 1], ["phaser", 1], ["beam", 1], ["due", 1], ["to", 1], ["this", 1], ["you", 1], ["aim", 1], ["at", 1], ["hitting", 1], ["as", 1], ["many", 1], ["rooms", 1], ["as", 1], ["possible", 1], ["the", 1], ["phaser", 1], ["beam", 1], ["is", 1], ["almost", 1], ["fully", 1], ["charged", 1], ["and", 1], ["the", 1], ["only", 1], ["missing", 1], ["piece", 1], ["is", 1], ["an", 1], ["optimal", 1], ["configuration", 1], ["of", 1], ["the", 1], ["weapon", 1], ["unfortunately", 1], ["it", 1], ["turns", 1], ["out", 1], ["to", 1], ["be", 1], ["harder", 1], ["than", 1], ["you", 1], ["expected", 1], ["however", 1], ["there", 1], ["are", 1], ["still", 1], ["ten", 1], ["seconds", 1], ["before", 1], ["the", 1], ["charging", 1], ["is", 1], ["completed", 1], ["and", 1], ["hence", 0], ["you", 0], ["decide", 0], ["to", 0], ["make", 0], ["a", 0], ["computer", 0], ["program", 0], ["to", 0], ["solve", 0], ["the", 0], ["problem", 0], ["input", 0], ["the", 0], ["first", 0], ["line", 0], ["of", 0], ["input", 0], ["consists", 0], ["of", 0], ["two", 0], ["integers", 0], ["r", 0], ["and", 0], ["ell", 0], ["1", 0], ["le", 0], ["r", 0], ["le", 0], ["15", 0], ["1", 0], ["le", 0], ["ell", 0], ["le", 0], ["1000", 0], ["where", 0], ["r", 0], ["is", 0], ["the", 0], ["number", 0], ["of", 0], ["rooms", 0], ["in", 0], ["the", 0], ["flagship", 0], ["and", 0], ["ell", 0], ["is", 1], ["the", 1], ["length", 1], ["of", 1], ["a", 1], ["shot", 1], ["of", 1], ["the", 0], ["phaser", 0], ["then", 0], ["follow", 0], ["r", 0], ["lines", 0], ["each", 0], ["of", 0], ["which", 0], ["contains", 0], ["four", 0], ["integers", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["x", 0], ["2", 0], ["y", 0], ["2", 0], ["0", 0], ["le", 0], ["x", 0], ["1", 0], ["x", 0], ["2", 0], ["le", 0], ["1000", 0], ["0", 0], ["le", 0], ["y", 0], ["1", 0], ["y", 0], ["2", 0], ["le", 0], ["1000", 0], ["indicating", 1], ["that", 0], ["there", 0], ["is", 0], ["a", 0], ["room", 0], ["in", 0], ["the", 0], ["flagship", 0], ["with", 0], ["lower", 0], ["left", 0], ["corner", 0], ["x", 0], ["1", 0], ["y", 0], ["1", 0], ["and", 0], ["upper", 0], ["right", 0], ["corner", 0], ["x", 0], ["2", 0], ["y", 0], ["2", 0], ["output", 0], ["output", 1], ["one", 1], ["line", 1], ["with", 1], ["the", 1], ["maximum", 1], ["number", 1], ["of", 1], ["rooms", 1], ["that", 1], ["can", 1], ["be", 1], ["hit", 1], ["by", 1], ["one", 1], ["phaser", 1], ["beam", 1], ["recall", 1], ["that", 1], ["if", 1], ["the", 1], ["beam", 1], ["touches", 1], ["a", 1], ["room", 1], ["it", 1], ["is", 1], ["counted", 1], ["as", 1], ["a", 1], ["hit", 1], ["you", 1], ["may", 1], ["assume", 1], ["that", 1], ["the", 1], ["answer", 1], ["is", 1], ["numerically", 1], ["stable", 1], ["in", 1], ["the", 0], ["following", 0], ["sense", 0], ["if", 0], ["all", 0], ["rooms", 0], ["are", 0], ["expanded", 0], ["by", 0], ["a", 0], ["distance", 0], ["of", 0], ["10", 0], ["6", 0], ["in", 0], ["all", 0], ["four", 0], ["directions", 0], ["the", 0], ["answer", 0], ["does", 0], ["not", 0], ["change", 0], ["examples", 0], ["sample", 0], ["input", 0], ["5", 0], ["8", 0], ["2", 0], ["1", 0], ["4", 0], ["5", 0], ["5", 0], ["1", 0], ["12", 0], ["4", 0], ["5", 0], ["5", 0], ["9", 0], ["10", 0], ["1", 0], ["6", 0], ["4", 0], ["10", 0], ["2", 0], ["11", 0], ["7", 0], ["14", 0], ["sample", 0], ["output", 0], ["4", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5758928571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5758928571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.691304347826087, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.691304347826087, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5758928571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5758928571428571, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.691304347826087, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.691304347826087, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nMirko has a chessboard with $N$ rows and just three columns. Slavica has written an integer on each field. Mirko has $K$ dominoes at his disposal, their dimensions being $2 \\times 1$, and has to arrange all of them on the board without overlapping, in a way that each domino covers exactly two fields of the board. He can rotate the dominoes as he please\n\nHelp Mirko cover the largest sum of numbers possible with the dominoes!\n\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\le N \\le 1000$), the number of rows, and $K$ ($1 \\le K \\le 1000$), the number of dominoes available.\n\nEach of the following $N$ lines contains three integers written in the $i$’th row of the board. All numbers will be less than $10^6$ in absolute value.\n\n-----Output-----\nThe first and only line of output must contain the maximal sum possible to cover with exactly $K$ dominoes.\n\n-----Examples-----\nSample Input:\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\nSample Output:\n16\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id7370"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id7370", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["mirko", 0], ["has", 0], ["a", 0], ["chessboard", 0], ["with", 0], ["n", 0], ["rows", 0], ["and", 0], ["just", 0], ["three", 0], ["columns", 0], ["slavica", 0], ["has", 0], ["written", 0], ["an", 0], ["integer", 0], ["on", 0], ["each", 0], ["field", 0], ["mirko", 0], ["has", 0], ["k", 0], ["dominoes", 0], ["at", 0], ["his", 0], ["disposal", 0], ["their", 0], ["dimensions", 0], ["being", 0], ["2", 0], ["times", 0], ["1", 0], ["and", 0], ["has", 0], ["to", 0], ["arrange", 0], ["all", 0], ["of", 0], ["them", 0], ["on", 0], ["the", 0], ["board", 0], ["without", 0], ["overlapping", 0], ["in", 0], ["a", 0], ["way", 0], ["that", 0], ["each", 0], ["domino", 0], ["covers", 0], ["exactly", 0], ["two", 0], ["fields", 0], ["of", 0], ["the", 0], ["board", 0], ["he", 0], ["can", 0], ["rotate", 0], ["the", 0], ["dominoes", 0], ["as", 0], ["he", 0], ["please", 0], ["help", 0], ["mirko", 0], ["cover", 0], ["the", 0], ["largest", 0], ["sum", 0], ["of", 0], ["numbers", 0], ["possible", 0], ["with", 0], ["the", 0], ["dominoes", 0], ["input", 0], ["the", 5], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["the", 1], ["integer", 1], ["n", 1], ["1", 1], ["le", 1], ["n", 1], ["le", 1], ["1000", 1], ["the", 1], ["number", 1], ["of", 1], ["rows", 1], ["and", 1], ["k", 1], ["1", 1], ["le", 1], ["k", 1], ["le", 1], ["1000", 1], ["the", 1], ["number", 1], ["of", 1], ["dominoes", 1], ["available", 1], ["each", 1], ["of", 1], ["the", 1], ["following", 1], ["n", 1], ["lines", 1], ["contains", 1], ["three", 1], ["integers", 1], ["written", 1], ["in", 1], ["the", 1], ["i", 1], ["’th", 1], ["row", 1], ["of", 1], ["the", 1], ["board", 0], ["all", 0], ["numbers", 0], ["will", 0], ["be", 0], ["less", 0], ["than", 0], ["10", 0], ["6", 0], ["in", 0], ["absolute", 0], ["value", 0], ["output", 0], ["the", 1], ["first", 1], ["and", 1], ["only", 1], ["line", 1], ["of", 1], ["output", 1], ["must", 0], ["contain", 0], ["the", 0], ["maximal", 0], ["sum", 0], ["possible", 0], ["to", 0], ["cover", 0], ["with", 0], ["exactly", 0], ["k", 0], ["dominoes", 0], ["examples", 0], ["sample", 0], ["input", 0], ["5", 0], ["3", 0], ["2", 0], ["1", 0], ["1", 0], ["1", 0], ["3", 0], ["2", 0], ["0", 0], ["2", 0], ["3", 0], ["2", 0], ["1", 0], ["1", 0], ["3", 0], ["3", 0], ["0", 0], ["sample", 0], ["output", 0], ["16", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3016759776536313, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.29720670391061454, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.4083769633507853, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4041884816753927, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3016759776536313, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.29720670391061454, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.4083769633507853, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4041884816753927, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nPasha has recently bought a new phone jPager and started adding his friends' phone numbers there. Each phone number consists of exactly n digits.\n\nAlso Pasha has a number k and two sequences of length n / k (n is divisible by k) a_1, a_2, ..., a_{n} / k and b_1, b_2, ..., b_{n} / k. Let's split the phone number into blocks of length k. The first block will be formed by digits from the phone number that are on positions 1, 2,..., k, the second block will be formed by digits from the phone number that are on positions k + 1, k + 2, ..., 2·k and so on. Pasha considers a phone number good, if the i-th block doesn't start from the digit b_{i} and is divisible by a_{i} if represented as an integer. \n\nTo represent the block of length k as an integer, let's write it out as a sequence c_1, c_2,...,c_{k}. Then the integer is calculated as the result of the expression c_1·10^{k} - 1 + c_2·10^{k} - 2 + ... + c_{k}.\n\nPasha asks you to calculate the number of good phone numbers of length n, for the given k, a_{i} and b_{i}. As this number can be too big, print it modulo 10^9 + 7. \n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ min(n, 9)) — the length of all phone numbers and the length of each block, respectively. It is guaranteed that n is divisible by k.\n\nThe second line of the input contains n / k space-separated positive integers — sequence a_1, a_2, ..., a_{n} / k (1 ≤ a_{i} < 10^{k}).\n\nThe third line of the input contains n / k space-separated positive integers — sequence b_1, b_2, ..., b_{n} / k (0 ≤ b_{i} ≤ 9). \n\n\n-----Output-----\n\nPrint a single integer — the number of good phone numbers of length n modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n6 2\n38 56 49\n7 3 4\n\nOutput\n8\n\nInput\n8 2\n1 22 3 44\n5 4 3 2\n\nOutput\n32400\n\n\n\n-----Note-----\n\nIn the first test sample good phone numbers are: 000000, 000098, 005600, 005698, 380000, 380098, 385600, 385698.\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": ["import math\n\nn, k = [int(x) for x in input().split()]\n\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nc = 1\nfor i in range(n // k):\n\tcount = (10 ** k - 1) // a[i] + 1\n\tmmin = b[i] * (10 ** (k-1))\n\tmmax = (b[i] + 1) * (10 ** (k-1)) - 1\n\tmcount = mmax // a[i] - math.ceil(mmin / a[i]) + 1\n\tc = (c * (count - mcount)) % ((10 ** 9) + 7)\n\nprint(c)\n", "n, k = map(int, input().split())\nAs = list(map(int, input().split()))\nBs = list(map(int, input().split()))\n\ndef solve(n, k, As, Bs):\n\tmod = 10 ** 9 + 7\n\tc = 1\n\tfor a, b in zip(As, Bs):\n\t\tc *= f(a, b, k, mod)\n\t\tc %= mod\n\treturn c\n\ndef f(a, b, k, mod):\n\ttotal = (10 ** k - 1) // a + 1\n\tp = ((b + 1) * (10 ** (k-1)) - 1) // a\n\tq = (b * (10 ** (k-1)) - 1) // a\n\treturn (total - p + q) % mod\n\n\nprint(solve(n, k, As, Bs))\n", "# import sys\n# n = int(input())\n# s = input().strip()\n# a = [int(tmp) for tmp in input().split()]\n# for i in range(n):\nn, k = [int(tmp) for tmp in input().split()]\na = [int(tmp) for tmp in input().split()]\nb = [int(tmp) for tmp in input().split()]\nBIG = 10 ** 9 + 7\nm = n // k\nans = [0] * m\nfor i in range(m):\n\tans[i] = (10 ** k + a[i] - 1) // a[i]\n\tx = 10 ** (k - 1) * b[i] % a[i]\n\tif x != 0:\n\t\tans[i] -= (10 ** (k - 1) + x + a[i] - 1) // a[i] - 1\n\telse:\n\t\tans[i] -= (10 ** (k - 1) + x + a[i] - 1) // a[i]\nall_ans = 1\nfor i in range(m):\n\tall_ans = (all_ans * ans[i]) % BIG\nprint(all_ans)\n", "from math import ceil\nfrom math import floor\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nln = n // k\np = 1\nmod = 1000000007\n\nfor i in range(ln):\n\ttmp = (10 ** k - 1) // a[i] + 1\n\tl = ceil(b[i] * (10 ** (k - 1)) / a[i])\n\tr = floor(((b[i] + 1) * (10 ** (k - 1)) - 1) / a[i])\n\ttmp -= r - l + 1\n\tp = (p * tmp) % mod\n\nprint(p)\n\n", "\"\"\"\nCodeforces Round #330 (Div. 2)\n\nProblem 595 B\n\n@author yamaton\n@date 2015-11-08\n\"\"\"\n\nimport itertools as it\nimport functools\nimport operator\nimport collections\nimport math\nimport sys\n\nBASE = 1000000007\n\ndef count(k, a, b):\n\tx = count_multiples(a, 0, 10**k-1)\n\ty = count_multiples(a, b * 10**(k-1), (b + 1) * 10**(k-1) - 1)\n\treturn  x - y\n\n\ndef count_multiples(a, _from, _to):\n\tif _from == 0:\n\t\treturn _to // a - (_from - 1) // a\n\telse:\n\t\treturn _to // a - (_from - 1) // a\n\n\ndef solve(xs, ys, n, k):\n\tresult = 1\n\tfor (a, b) in zip(xs, ys):\n\t\tresult = (result * count(k, a, b)) % BASE\n\treturn result\n\ndef main():\n\t[n, k] = [int(i) for i in input().strip().split()]\n\txs = [int(i) for i in input().strip().split()]\n\tys = [int(i) for i in input().strip().split()]\n\tassert len(xs) == len(ys) == n // k\n\tresult = solve(xs, ys, n, k)\n\tprint(result)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\n\nn, k = sys.stdin.readline().split()\nn = int(n)\nk = int(k)\n\na = [int(x) for x in sys.stdin.readline().split()]\nb = [int(x) for x in sys.stdin.readline().split()]\n\nMOD = (10 ** 9) + 7\nres = 1\n\nfor i in range(0, n // k):\n\tlo =  b[i]      * (10 ** (k - 1)) - 1\n\tup = (b[i] + 1) * (10 ** (k - 1)) - 1\n\ttmp = ( ((10 ** k) - 1) // a[i]) - (up // a[i]) + (lo // a[i]) + 1\n\tres = res * tmp\n\tres = res % MOD\n\nprint(res)\n", "def get_multypler(k, a, b):\n\tres = (10 ** k - 1) // a + 1\n\tbad_residue = (a - ((10 ** (k - 1)) * b) % a) % a\n\tsuf = (10 ** (k - 1)) - 1\n\tminus = suf // a + (1 if (bad_residue <= suf % a) else 0)\n\treturn res - minus\n\n\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nans = 1\nfor i in range(n // k):\n\tans *= get_multypler(k, a[i], b[i])\n\tans %= 10 ** 9 + 7\n\nprint(ans)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\nMM = 1000000007\n\ndef func(a, b, k):\n\tif b == 0:\n\t\treturn(divmod(10**k-1, a)[0]-divmod(10**(k-1)-1, a)[0])\n\telse:\n\t\treturn(divmod(10**k-1, a)[0]-divmod((b+1)*10**(k-1)-1, a)[0]+divmod(b*10**(k-1)-1, a)[0])+1\n\n(n, k) = (int(i) for i in input().split())\na      = [int(i) for i in input().split()]\nb      = [int(i) for i in input().split()]\n\nstart = time.time()\n\ns = 1\nfor i in range(divmod(n, k)[0]):\n\ts *= func(a[i], b[i], k)\n\ts = divmod(s, MM)[1]\n\n\nprint(s)\nfinish = time.time()\n#print(finish - start)\n", "n, k = [int(i) for i in input().split()]\nsum = 1\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nfor i in range(n // k):\n\tif n == 0:\n\t\tx = (10 ** k - 1) // a[i] - ((b[i] + 1) * 10 ** (k-1) - 1) // a[i]\n\telse:\n\t\tx = (10 ** k - 1) // a[i] - ((b[i] + 1) * 10 ** (k-1) - 1) // a[i] + (b[i] * 10 ** (k-1) - 1) // a[i] + 1\n\tsum *= x\n\tsum %= 10 ** 9 + 7\nprint(sum)\n", "from math import ceil\n\nn,k = list(map(int,input().split()))\n\narr1 = list(map(int,input().split()))\narr2 = list(map(int,input().split()))\n\np = 10**k\n\nans = 1\n\nfor i in range(n//k):\n\tx,y = arr1[i],arr2[i]\n\ta,b = y * 10**(k - 1),(y + 1) * 10**(k - 1)\n\tans *= ceil(p / x) - (ceil(b / x) - ceil(a / x))\n\tans %= 10**9 + 7\n\nprint(ans)\n", "n, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nt = 10 ** (k - 1)\nres = 1;\nq = 10 ** 9 + 7\nfor i in range(n // k):\n\tres1 = (((t * 10) - 1) // a[i] + 1) % q;\n\tz = ((t * b[i]) - 1) // a[i] + 1\n\tif (b[i] == 0):\n\t\tz = 0\n\tx = (((t * b[i] + t - 1) // a[i])) + 1\n\tres1 = (res1 - x + z) % q\n\tres = (res * res1) % q\nprint(res)\n", "from math import *\nN, K = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = 1\nM = 10**9 + 7\np = 10**K - 1\nu = 10**(K - 1)\nfor i in range(N // K):\n\tans *= (p // a[i] + 1 - ((u * (b[i] + 1) + a[i] - 1) // a[i] - (b[i] * u + a[i] - 1) // a[i]))\n\tans %= M\nprint((ans + M) % M)\n", "n,k = map(int,input().split())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nanswer = list()\n\nfor i in range(n//k):\n\tres = 0\n\tm = '1'+'0'*k\n\tm = int(m)-1\n\tq = str(b[i]) + '9' * (k-1)\n\tq = int(q)\n\tc = str(b[i]-1) + '9' * (k-1)\n\tc = int(c)\n\tc = max(c,-1)\n\t#print(m,q,c)\n\tres = (m//a[i]+1) - q//a[i] + c//a[i]\n\tanswer.append(res)\n\nresa = 1\n#print(answer)\nif sum(answer)==0:\n\tprint(0)\nelse:\n\tfor i in answer:\n\t\tresa = (resa*i)%1000000007\n\tprint(resa)\n", "n, k = list(map(int, input().split()))\nara = list(map( int, input().split()))\narb = list(map( int, input().split()))\nsum1 = 1;\np_k = 10**k\np_k1 = 10**(k - 1)\np_k2 = 10**(k - 2)\nM = 10**9 + 7\nfor i in range(n // k):\n\tk = 0\n\tif (p_k % ara[i] == 0):\n\t\tk = -1\n\tif ((arb[i] + 1) * p_k1 % ara[i] == 0):\n\t\tk = k + 1\n\tif ((arb[i]) * p_k1 % ara[i] == 0):\n\t\tk = k - 1\n\tsum1 *= p_k // ara[i] - p_k1 * (arb[i] + 1) // ara[i] + p_k1 * (arb[i]) // ara[i] + k + 1\n\t#first = p_k1 * arb[i] // ara[i] * (ara[i] + 1)\n\t#print(p_k // ara[i] + k + 1, p_k1 * (arb[i] + 1) // ara[i], p_k1 * (arb[i]) // ara[i])\n\t#sum1 *= p_k // ara[i] + 1 - p_k1 // first\n\t\n\tsum1 = sum1 % M\nprint(sum1 % (10**9+7))\n", "import math\nn,k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n\n\ndef calc_ans(k,a,b):\n\tdiv = (10**k-1)//a + 1\n\t\n\tb_min = b*10**(k-1)\n\tb_max = (b+1)*10**(k-1) - 1\n\n\n\td_min_inc = math.ceil(b_min/a)\n\td_max_inc = math.floor(b_max/a)\n\t# if d_min_inc*a > b_max:\n\t# \treturn div\n\t# else:\n\n\n\t# print (k,a,b,div,div - (d_max_inc - d_min_inc + 1))\n\n\treturn div - (d_max_inc - d_min_inc + 1)\n\np = 10**9 + 7\n\nans = 1\nfor ai,bi in zip(a,b):\n\tans = (ans*calc_ans(k, ai, bi)) % p\n\nprint(ans)\n\ndef easy_calc(k,a,b):\n\tans = 0\n\tfor i in range(10**k):\n\t\tc = str(i)\n\t\tfirst = int(c[0]) if len(c) == k else 0\n\t\tif i%a == 0 and not first==b:\n\t\t\tans += 1\n\treturn ans\n\n# import random\n# for i in range(100):\n# \tk = random.randrange(4,5)\n# \ta = random.randrange(1,10**k)\n# \tb = random.randrange(0, 10)\n# \tif easy_calc(k,a,b) != calc_ans(k,a,b):\n# \t\tprint(k,a,b, easy_calc(k,a,b), calc_ans(k,a,b))\n# \t\t1/0\n", "s=input()\nast=s.split(' ')\nn,k=int(ast[0]),int(ast[1])\ns=input()\na=[int(i) for i in s.split(' ')]\ns=input()\nb=[int(i) for i in s.split(' ')]\nL=n//k\np=10**k\nr=10**(k-1)\nrez=1\nfor i in range(L):\n\tcnt=0\n\tif b[i]>0:\n\t\tcnt+=(b[i]*r-1)//a[i]\n\t\tcnt+=(p-1)//a[i]\n\t\tcnt-=((b[i]+1)*r-1)//a[i]\n\t\trez*=cnt+1\n\telse:\n\t\tcnt+=(p-1)//a[i]\n\t\tcnt-=(r-1)//a[i]\n\t\trez*=cnt\n\trez=rez%(10**9+7)\nprint(rez)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = n//k\nans = 1\nfor i in range(c):\n\tt_ans = ((10**k - 1)//a[i]+1) + (b[i]*10**(k-1))//a[i] - ((b[i]+1)*10**(k-1))//a[i]\n\tif (b[i]*10**(k-1))%a[i] == 0:\n\t\tt_ans -= 1\n\tif ((b[i]+1)*10**(k-1))%a[i] == 0:\n\t\tt_ans += 1    \n\tans *= t_ans\n\tans = ans%(10**9 +7)\nprint(ans)\n\t\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn,k = list(map(int,input().split()))\nA = list(map(int,input().split()))\nB = list(map(int,input().split()))\nans = 1\n\nfor i in range(n//k):\n\tcount = 1 + (10**k - 1)//A[i]\n\tcount -= (10**(k-1) * (B[i] + 1) - 1) // A[i] - (10**(k-1) * B[i] - 1) // A[i]\n\n\tans = ans * count % (10**9 + 7)\n\nprint(ans)\n", "n,k = list(map(int,input().split()))\nb = list(map(int,input().split()))\nc = list(map(int,input().split()))\nmod = 1000000007\nans = 1\nfor x in range(0,n//k):\n\tpo = 10**(k-1)\n\tp = c[x]*po\n\tq = (c[x]+1)*po\n\tres = 0\n\tif p%b[x] == 0:\n\t\tres -= 1\n\tif q%b[x] == 0:\n\t\tres += 1\n\tif (po*10)%b[x] == 0:\n\t\tres -= 1\n\tres += 1\n\tres += 10*po//b[x] - q//b[x] + p//b[x]\n\tans = ((ans%mod)*(res%mod))%mod\nprint(ans)\n", "p = 10**9+7\nn,k = map(int,input().split())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nans = 1\nfor i in range(n//k):\n\tcnt = (10**k-1)//a[i] - (10**(k-1)*(b[i]+1)-1)//a[i]\n\tif b[i] != 0:\n\t\tcnt += (10**(k-1)*b[i]-1)//a[i] + 1\n\tans = ans * cnt % p\nprint (ans)\n", "n,k = map(int,input().split())\nb = list(map(int,input().split()))\nc = list(map(int,input().split()))\nmod = 1000000007\nans = 1\nfor x in range(0,n//k):\n\tpo = 10**(k-1)\n\tp = c[x]*po\n\tq = (c[x]+1)*po\n\tres = 0\n\tif p%b[x] == 0:\n\t\tres -= 1\n\tif q%b[x] == 0:\n\t\tres += 1\n\tif (po*10)%b[x] == 0:\n\t\tres -= 1\n\tres += 1\n\tres += 10*po//b[x] - q//b[x] + p//b[x]\n\tans = ((ans%mod)*(res%mod))%mod\nprint(ans)\n", "p = 10**9+7\nn,k = map(int,input().split())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nans = 1\nfor i in range(n//k):\n\tcnt = (10**k-1)//a[i] - (10**(k-1)*(b[i]+1)-1)//a[i]\n\tif b[i] != 0:\n\t\tcnt += (10**(k-1)*b[i]-1)//a[i] + 1\n\tans = ans * cnt % p\nprint (ans)\n", "from math import *\nMOD=10**9+7\nn,k=list(map(int, input().split()))\na=list(map(int, input().split()))\nb=list(map(int, input().split()))\ntemp= pow(10,k-1)\nans=1\nfor i in range(len(a)):\n\ttotDiv = ceil((temp*10)/a[i])\n\tnum1= temp*(b[i])\n\tnum2= temp*(b[i]+1)\n\tsmaller= ceil(num1/a[i])\n\tlarger=ceil(num2/a[i])\n\ttotDiv+=(smaller-larger)\n\tans= (ans*totDiv)%MOD\nprint(int(ans))\n", "mask = 10 ** 9 + 7\n\ndef count(a, x):\n\treturn x // a + 1\n\nn, k = list(map(int, input().split()))\naa = list(map(int, input().split()))\nbb = list(map(int, input().split()))\n\nbig = 10 ** k - 1\nsmall = 10 ** (k - 1)\nresult = 1\n\nfor i in range(n // k):\n\ta, b = aa[i], bb[i]\n\tsum = 0\n\tsum += count(a, big)\n\tsum -= count(a, (b + 1) * small - 1)\n\tif b != 0:\n\t\tsum += count(a, b * small - 1)\n\tresult = (result * sum) % mask\n\nprint(result)\n"], "id": "id5751"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id5751", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["pasha", 2], ["has", 2], ["recently", 2], ["bought", 2], ["a", 2], ["new", 2], ["phone", 2], ["jpager", 2], ["and", 2], ["started", 2], ["adding", 2], ["his", 2], ["friends", 2], ["phone", 2], ["numbers", 2], ["there", 2], ["each", 2], ["phone", 2], ["number", 2], ["consists", 2], ["of", 2], ["exactly", 2], ["n", 2], ["digits", 2], ["also", 2], ["pasha", 2], ["has", 2], ["a", 2], ["number", 2], ["k", 2], ["and", 0], ["two", 0], ["sequences", 0], ["of", 0], ["length", 0], ["n", 0], ["k", 0], ["n", 0], ["is", 0], ["divisible", 0], ["by", 0], ["k", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["k", 0], ["and", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["b", 0], ["n", 0], ["k", 2], ["let", 2], ["s", 2], ["split", 2], ["the", 2], ["phone", 2], ["number", 2], ["into", 2], ["blocks", 2], ["of", 2], ["length", 2], ["k", 2], ["the", 2], ["first", 2], ["block", 4], ["will", 4], ["be", 2], ["formed", 2], ["by", 2], ["digits", 2], ["from", 2], ["the", 2], ["phone", 2], ["number", 2], ["that", 2], ["are", 2], ["on", 2], ["positions", 2], ["1", 2], ["2", 2], ["k", 2], ["the", 2], ["second", 2], ["block", 4], ["will", 4], ["be", 2], ["formed", 2], ["by", 2], ["digits", 2], ["from", 2], ["the", 2], ["phone", 2], ["number", 2], ["that", 2], ["are", 2], ["on", 2], ["positions", 2], ["k", 2], ["1", 2], ["k", 2], ["2", 2], ["2·k", 2], ["and", 2], ["so", 2], ["on", 2], ["pasha", 2], ["considers", 2], ["a", 2], ["phone", 2], ["number", 2], ["good", 0], ["if", 0], ["the", 0], ["i", 0], ["th", 0], ["block", 0], ["doesn", 0], ["t", 0], ["start", 0], ["from", 0], ["the", 0], ["digit", 0], ["b", 0], ["i", 0], ["and", 0], ["is", 0], ["divisible", 0], ["by", 0], ["a", 0], ["i", 0], ["if", 2], ["represented", 2], ["as", 2], ["an", 2], ["integer", 2], ["to", 2], ["represent", 2], ["the", 2], ["block", 2], ["of", 2], ["length", 2], ["k", 0], ["as", 0], ["an", 0], ["integer", 0], ["let", 0], ["s", 0], ["write", 0], ["it", 0], ["out", 0], ["as", 0], ["a", 0], ["sequence", 0], ["c", 0], ["1", 0], ["c", 0], ["2", 0], ["c", 0], ["k", 0], ["then", 0], ["the", 0], ["integer", 0], ["is", 0], ["calculated", 0], ["as", 0], ["the", 0], ["result", 0], ["of", 0], ["the", 0], ["expression", 0], ["c", 0], ["1·10", 0], ["k", 0], ["1", 0], ["c", 0], ["2·10", 0], ["k", 0], ["2", 0], ["c", 0], ["k", 0], ["pasha", 2], ["asks", 2], ["you", 2], ["to", 2], ["calculate", 2], ["the", 2], ["number", 0], ["of", 0], ["good", 0], ["phone", 0], ["numbers", 0], ["of", 0], ["length", 0], ["n", 0], ["for", 0], ["the", 0], ["given", 0], ["k", 0], ["a", 0], ["i", 0], ["and", 0], ["b", 0], ["i", 0], ["as", 0], ["this", 0], ["number", 0], ["can", 0], ["be", 0], ["too", 0], ["big", 0], ["print", 0], ["it", 6], ["modulo", 0], ["10", 0], ["9", 0], ["7", 0], ["input", 0], ["the", 8], ["first", 7], ["line", 6], ["of", 5], ["the", 5], ["input", 5], ["contains", 2], ["two", 2], ["integers", 5], ["n", 5], ["and", 4], ["k", 2], ["1", 2], ["≤", 2], ["n", 2], ["≤", 2], ["100", 2], ["000", 2], ["1", 2], ["≤", 2], ["k", 2], ["≤", 2], ["min", 2], ["n", 2], ["9", 2], ["—", 2], ["the", 2], ["length", 2], ["of", 2], ["all", 2], ["phone", 2], ["numbers", 2], ["and", 2], ["the", 2], ["length", 2], ["of", 2], ["each", 2], ["block", 2], ["respectively", 2], ["it", 2], ["is", 2], ["guaranteed", 2], ["that", 2], ["n", 2], ["is", 2], ["divisible", 2], ["by", 2], ["k", 2], ["the", 2], ["second", 2], ["line", 4], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["n", 0], ["k", 0], ["space", 0], ["separated", 0], ["positive", 0], ["integers", 0], ["—", 0], ["sequence", 0], ["a", 0], ["1", 0], ["a", 0], ["2", 0], ["a", 0], ["n", 0], ["k", 0], ["1", 0], ["≤", 0], ["a", 0], ["i", 0], ["10", 0], ["k", 0], ["the", 2], ["third", 2], ["line", 4], ["of", 0], ["the", 0], ["input", 0], ["contains", 0], ["n", 0], ["k", 0], ["space", 0], ["separated", 0], ["positive", 0], ["integers", 0], ["—", 0], ["sequence", 0], ["b", 0], ["1", 0], ["b", 0], ["2", 0], ["b", 0], ["n", 0], ["k", 0], ["0", 0], ["≤", 0], ["b", 0], ["i", 0], ["≤", 0], ["9", 0], ["output", 0], ["print", 2], ["a", 2], ["single", 2], ["integer", 0], ["—", 0], ["the", 0], ["number", 0], ["of", 0], ["good", 0], ["phone", 0], ["numbers", 0], ["of", 0], ["length", 0], ["n", 0], ["modulo", 0], ["10", 0], ["9", 0], ["7", 0], ["examples", 0], ["input", 0], ["6", 0], ["2", 0], ["38", 0], ["56", 0], ["49", 0], ["7", 0], ["3", 0], ["4", 0], ["output", 0], ["8", 0], ["input", 0], ["8", 0], ["2", 0], ["1", 0], ["22", 0], ["3", 0], ["44", 0], ["5", 0], ["4", 0], ["3", 0], ["2", 0], ["output", 0], ["32400", 0], ["note", 0], ["in", 2], ["the", 2], ["first", 2], ["test", 2], ["sample", 2], ["good", 0], ["phone", 0], ["numbers", 0], ["are", 0], ["000000", 0], ["000098", 0], ["005600", 0], ["005698", 0], ["380000", 0], ["380098", 0], ["385600", 0], ["385698", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4381443298969072, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.20709069710358372, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6775, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.3290000000000001, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4381443298969072, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.20709069710358372, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6775, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.3290000000000001, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["import", 0], ["math", 0], ["n", 0], ["k", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["input", 0], ["split", 0], ["c", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["count", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["mmin", 0], ["b", 0], ["i", 0], ["10", 0], ["k", 0], ["1", 0], ["mmax", 0], ["b", 0], ["i", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["mcount", 0], ["mmax", 0], ["a", 0], ["i", 0], ["math", 0], ["ceil", 0], ["mmin", 0], ["a", 0], ["i", 0], ["1", 0], ["c", 0], ["c", 0], ["count", 0], ["mcount", 0], ["10", 0], ["9", 0], ["7", 0], ["print", 0], ["c", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["as", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bs", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["solve", 0], ["n", 0], ["k", 0], ["as", 0], ["bs", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["c", 0], ["1", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["as", 0], ["bs", 0], ["c", 0], ["f", 0], ["a", 0], ["b", 0], ["k", 0], ["mod", 0], ["c", 0], ["mod", 0], ["return", 0], ["c", 0], ["def", 0], ["f", 0], ["a", 0], ["b", 0], ["k", 0], ["mod", 0], ["total", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["1", 0], ["p", 0], ["b", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["a", 0], ["q", 0], ["b", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["a", 0], ["return", 0], ["total", 0], ["p", 0], ["q", 0], ["mod", 0], ["print", 0], ["solve", 0], ["n", 0], ["k", 0], ["as", 0], ["bs", 0], ["import", 0], ["sys", 0], ["n", 0], ["int", 0], ["input", 0], ["s", 0], ["input", 0], ["strip", 0], ["a", 0], ["int", 0], ["tmp", 0], ["for", 0], ["tmp", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["n", 0], ["k", 0], ["int", 0], ["tmp", 0], ["for", 0], ["tmp", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["tmp", 0], ["for", 0], ["tmp", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["tmp", 0], ["for", 0], ["tmp", 0], ["in", 0], ["input", 0], ["split", 0], ["big", 0], ["10", 0], ["9", 0], ["7", 0], ["m", 0], ["n", 0], ["k", 0], ["ans", 0], ["0", 0], ["m", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["ans", 0], ["i", 0], ["10", 0], ["k", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["x", 0], ["10", 0], ["k", 0], ["1", 0], ["b", 0], ["i", 0], ["a", 0], ["i", 0], ["if", 0], ["x", 0], ["0", 0], ["ans", 0], ["i", 0], ["10", 0], ["k", 0], ["1", 0], ["x", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["else", 0], ["ans", 0], ["i", 0], ["10", 0], ["k", 0], ["1", 0], ["x", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["all", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["m", 0], ["all", 0], ["ans", 0], ["all", 0], ["ans", 0], ["ans", 0], ["i", 0], ["big", 0], ["print", 0], ["all", 0], ["ans", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["from", 0], ["math", 0], ["import", 0], ["floor", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ln", 0], ["n", 0], ["k", 0], ["p", 0], ["1", 0], ["mod", 0], ["1000000007", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["ln", 0], ["tmp", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["l", 0], ["ceil", 0], ["b", 0], ["i", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["r", 0], ["floor", 0], ["b", 0], ["i", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["tmp", 0], ["r", 0], ["l", 0], ["1", 0], ["p", 0], ["p", 0], ["tmp", 0], ["mod", 0], ["print", 0], ["p", 0], ["codeforces", 0], ["round", 0], ["330", 0], ["div", 0], ["2", 0], ["problem", 0], ["595", 0], ["b", 0], ["author", 0], ["yamaton", 0], ["date", 0], ["2015", 0], ["11", 0], ["08", 0], ["import", 0], ["itertools", 0], ["as", 0], ["it", 0], ["import", 0], ["functools", 0], ["import", 0], ["operator", 0], ["import", 0], ["collections", 0], ["import", 0], ["math", 0], ["import", 0], ["sys", 0], ["base", 0], ["1000000007", 0], ["def", 0], ["count", 0], ["k", 0], ["a", 0], ["b", 0], ["x", 0], ["count", 0], ["multiples", 0], ["a", 0], ["0", 0], ["10", 0], ["k", 0], ["1", 0], ["y", 0], ["count", 0], ["multiples", 0], ["a", 0], ["b", 0], ["10", 0], ["k", 0], ["1", 0], ["b", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["return", 0], ["x", 0], ["y", 0], ["def", 0], ["count", 0], ["multiples", 0], ["a", 0], ["from", 0], ["to", 0], ["if", 0], ["from", 0], ["0", 0], ["return", 0], ["to", 0], ["a", 0], ["from", 0], ["1", 0], ["a", 0], ["else", 0], ["return", 0], ["to", 0], ["a", 0], ["from", 0], ["1", 0], ["a", 0], ["def", 0], ["solve", 0], ["xs", 0], ["ys", 0], ["n", 0], ["k", 0], ["result", 0], ["1", 0], ["for", 0], ["a", 0], ["b", 0], ["in", 0], ["zip", 0], ["xs", 0], ["ys", 0], ["result", 0], ["result", 0], ["count", 0], ["k", 0], ["a", 0], ["b", 0], ["base", 0], ["return", 0], ["result", 0], ["def", 0], ["main", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["xs", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["ys", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["strip", 0], ["split", 0], ["assert", 0], ["len", 0], ["xs", 0], ["len", 0], ["ys", 0], ["n", 0], ["k", 0], ["result", 0], ["solve", 0], ["xs", 0], ["ys", 0], ["n", 0], ["k", 0], ["print", 0], ["result", 0], ["def", 0], ["starting", 0], ["point", 0], ["main", 0], ["starting", 0], ["point", 0], ["import", 0], ["sys", 0], ["n", 0], ["k", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["n", 0], ["int", 0], ["n", 0], ["k", 0], ["int", 0], ["k", 0], ["a", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["b", 0], ["int", 0], ["x", 0], ["for", 0], ["x", 0], ["in", 0], ["sys", 0], ["stdin", 0], ["readline", 0], ["split", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["res", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["k", 0], ["lo", 0], ["b", 0], ["i", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["up", 0], ["b", 0], ["i", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["tmp", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["up", 0], ["a", 0], ["i", 0], ["lo", 0], ["a", 0], ["i", 0], ["1", 0], ["res", 0], ["res", 0], ["tmp", 0], ["res", 0], ["res", 0], ["mod", 0], ["print", 0], ["res", 0], ["def", 0], ["get", 0], ["multypler", 0], ["k", 0], ["a", 0], ["b", 0], ["res", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["1", 0], ["bad", 0], ["residue", 0], ["a", 0], ["10", 0], ["k", 0], ["1", 0], ["b", 0], ["a", 0], ["a", 0], ["suf", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["minus", 0], ["suf", 0], ["a", 0], ["1", 0], ["if", 0], ["bad", 0], ["residue", 0], ["suf", 0], ["a", 0], ["else", 0], ["0", 0], ["return", 0], ["res", 0], ["minus", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["ans", 0], ["get", 0], ["multypler", 0], ["k", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["ans", 0], ["10", 0], ["9", 0], ["7", 0], ["print", 0], ["ans", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python3", 0], ["coding", 0], ["utf", 0], ["8", 0], ["import", 0], ["time", 0], ["mm", 0], ["1000000007", 0], ["def", 0], ["func", 0], ["a", 0], ["b", 0], ["k", 0], ["if", 0], ["b", 0], ["0", 0], ["return", 0], ["divmod", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["0", 0], ["divmod", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["a", 0], ["0", 0], ["else", 0], ["return", 0], ["divmod", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["0", 0], ["divmod", 0], ["b", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["a", 0], ["0", 0], ["divmod", 0], ["b", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["a", 0], ["0", 0], ["1", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["start", 0], ["time", 0], ["time", 0], ["s", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["divmod", 0], ["n", 0], ["k", 0], ["0", 0], ["s", 0], ["func", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["k", 0], ["s", 0], ["divmod", 0], ["s", 0], ["mm", 0], ["1", 0], ["print", 0], ["s", 0], ["finish", 0], ["time", 0], ["time", 0], ["print", 0], ["finish", 0], ["start", 0], ["n", 0], ["k", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["sum", 0], ["1", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["input", 0], ["split", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["if", 0], ["n", 0], ["0", 0], ["x", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["else", 0], ["x", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["sum", 0], ["x", 0], ["sum", 0], ["10", 0], ["9", 0], ["7", 0], ["print", 0], ["sum", 0], ["from", 0], ["math", 0], ["import", 0], ["ceil", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr1", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arr2", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["p", 0], ["10", 0], ["k", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["x", 0], ["y", 0], ["arr1", 0], ["i", 0], ["arr2", 0], ["i", 0], ["a", 0], ["b", 0], ["y", 0], ["10", 0], ["k", 0], ["1", 0], ["y", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["ans", 0], ["ceil", 0], ["p", 0], ["x", 0], ["ceil", 0], ["b", 0], ["x", 0], ["ceil", 0], ["a", 0], ["x", 0], ["ans", 0], ["10", 0], ["9", 0], ["7", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["t", 0], ["10", 0], ["k", 0], ["1", 0], ["res", 0], ["1", 0], ["q", 0], ["10", 0], ["9", 0], ["7", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["res1", 0], ["t", 0], ["10", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["q", 0], ["z", 0], ["t", 0], ["b", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["if", 0], ["b", 0], ["i", 0], ["0", 0], ["z", 0], ["0", 0], ["x", 0], ["t", 0], ["b", 0], ["i", 0], ["t", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["res1", 0], ["res1", 0], ["x", 0], ["z", 0], ["q", 0], ["res", 0], ["res", 0], ["res1", 0], ["q", 0], ["print", 0], ["res", 0], ["from", 0], ["math", 0], ["import", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["m", 0], ["10", 0], ["9", 0], ["7", 0], ["p", 0], ["10", 0], ["k", 0], ["1", 0], ["u", 0], ["10", 0], ["k", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["ans", 0], ["p", 0], ["a", 0], ["i", 0], ["1", 0], ["u", 0], ["b", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["u", 0], ["a", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["ans", 0], ["m", 0], ["print", 0], ["ans", 0], ["m", 0], ["m", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["answer", 0], ["list", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["res", 0], ["0", 0], ["m", 0], ["1", 0], ["0", 0], ["k", 0], ["m", 0], ["int", 0], ["m", 0], ["1", 0], ["q", 0], ["str", 0], ["b", 0], ["i", 0], ["9", 0], ["k", 0], ["1", 0], ["q", 0], ["int", 0], ["q", 0], ["c", 0], ["str", 0], ["b", 0], ["i", 0], ["1", 0], ["9", 0], ["k", 0], ["1", 0], ["c", 0], ["int", 0], ["c", 0], ["c", 0], ["max", 0], ["c", 0], ["1", 0], ["print", 0], ["m", 0], ["q", 0], ["c", 0], ["res", 0], ["m", 0], ["a", 0], ["i", 0], ["1", 0], ["q", 0], ["a", 0], ["i", 0], ["c", 0], ["a", 0], ["i", 0], ["answer", 0], ["append", 0], ["res", 0], ["resa", 0], ["1", 0], ["print", 0], ["answer", 0], ["if", 0], ["sum", 0], ["answer", 0], ["0", 0], ["print", 0], ["0", 0], ["else", 0], ["for", 0], ["i", 0], ["in", 0], ["answer", 0], ["resa", 0], ["resa", 0], ["i", 0], ["1000000007", 0], ["print", 0], ["resa", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ara", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["arb", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["sum1", 0], ["1", 0], ["p", 0], ["k", 0], ["10", 0], ["k", 0], ["p", 0], ["k1", 0], ["10", 0], ["k", 0], ["1", 0], ["p", 0], ["k2", 0], ["10", 0], ["k", 0], ["2", 0], ["m", 0], ["10", 0], ["9", 0], ["7", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["k", 0], ["0", 0], ["if", 0], ["p", 0], ["k", 0], ["ara", 0], ["i", 0], ["0", 0], ["k", 0], ["1", 0], ["if", 0], ["arb", 0], ["i", 0], ["1", 0], ["p", 0], ["k1", 0], ["ara", 0], ["i", 0], ["0", 0], ["k", 0], ["k", 0], ["1", 0], ["if", 0], ["arb", 0], ["i", 0], ["p", 0], ["k1", 0], ["ara", 0], ["i", 0], ["0", 0], ["k", 0], ["k", 0], ["1", 0], ["sum1", 0], ["p", 0], ["k", 0], ["ara", 0], ["i", 0], ["p", 0], ["k1", 0], ["arb", 0], ["i", 0], ["1", 0], ["ara", 0], ["i", 0], ["p", 0], ["k1", 0], ["arb", 0], ["i", 0], ["ara", 0], ["i", 0], ["k", 0], ["1", 0], ["first", 0], ["p", 0], ["k1", 0], ["arb", 0], ["i", 0], ["ara", 0], ["i", 0], ["ara", 0], ["i", 0], ["1", 0], ["print", 0], ["p", 0], ["k", 0], ["ara", 0], ["i", 0], ["k", 0], ["1", 0], ["p", 0], ["k1", 0], ["arb", 0], ["i", 0], ["1", 0], ["ara", 0], ["i", 0], ["p", 0], ["k1", 0], ["arb", 0], ["i", 0], ["ara", 0], ["i", 0], ["sum1", 0], ["p", 0], ["k", 0], ["ara", 0], ["i", 0], ["1", 0], ["p", 0], ["k1", 0], ["first", 0], ["sum1", 0], ["sum1", 0], ["m", 0], ["print", 0], ["sum1", 0], ["10", 0], ["9", 0], ["7", 0], ["import", 0], ["math", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["def", 0], ["calc", 0], ["ans", 0], ["k", 0], ["a", 0], ["b", 0], ["div", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["1", 0], ["b", 0], ["min", 0], ["b", 0], ["10", 0], ["k", 0], ["1", 0], ["b", 0], ["max", 0], ["b", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["1", 0], ["d", 0], ["min", 0], ["inc", 0], ["math", 0], ["ceil", 0], ["b", 0], ["min", 0], ["a", 0], ["d", 0], ["max", 0], ["inc", 0], ["math", 0], ["floor", 0], ["b", 0], ["max", 0], ["a", 0], ["if", 0], ["d", 0], ["min", 0], ["inc", 0], ["a", 0], ["b", 0], ["max", 0], ["return", 0], ["div", 0], ["else", 0], ["print", 0], ["k", 0], ["a", 0], ["b", 0], ["div", 0], ["div", 0], ["d", 0], ["max", 0], ["inc", 0], ["d", 0], ["min", 0], ["inc", 0], ["1", 0], ["return", 0], ["div", 0], ["d", 0], ["max", 0], ["inc", 0], ["d", 0], ["min", 0], ["inc", 0], ["1", 0], ["p", 0], ["10", 0], ["9", 0], ["7", 0], ["ans", 0], ["1", 0], ["for", 0], ["ai", 0], ["bi", 0], ["in", 0], ["zip", 0], ["a", 0], ["b", 0], ["ans", 0], ["ans", 0], ["calc", 0], ["ans", 0], ["k", 0], ["ai", 0], ["bi", 0], ["p", 0], ["print", 0], ["ans", 0], ["def", 0], ["easy", 0], ["calc", 0], ["k", 0], ["a", 0], ["b", 0], ["ans", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["10", 0], ["k", 0], ["c", 0], ["str", 0], ["i", 0], ["first", 0], ["int", 0], ["c", 0], ["0", 0], ["if", 0], ["len", 0], ["c", 0], ["k", 0], ["else", 0], ["0", 0], ["if", 0], ["i", 0], ["a", 0], ["0", 0], ["and", 0], ["not", 0], ["first", 0], ["b", 0], ["ans", 0], ["1", 0], ["return", 0], ["ans", 0], ["import", 0], ["random", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["100", 0], ["k", 0], ["random", 0], ["randrange", 0], ["4", 0], ["5", 0], ["a", 0], ["random", 0], ["randrange", 0], ["1", 0], ["10", 0], ["k", 0], ["b", 0], ["random", 0], ["randrange", 0], ["0", 0], ["10", 0], ["if", 0], ["easy", 0], ["calc", 0], ["k", 0], ["a", 0], ["b", 0], ["calc", 0], ["ans", 0], ["k", 0], ["a", 0], ["b", 0], ["print", 0], ["k", 0], ["a", 0], ["b", 0], ["easy", 0], ["calc", 0], ["k", 0], ["a", 0], ["b", 0], ["calc", 0], ["ans", 0], ["k", 0], ["a", 0], ["b", 0], ["1", 0], ["0", 0], ["s", 0], ["input", 0], ["ast", 0], ["s", 0], ["split", 0], ["n", 0], ["k", 0], ["int", 0], ["ast", 0], ["0", 0], ["int", 0], ["ast", 0], ["1", 0], ["s", 0], ["input", 0], ["a", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["split", 0], ["s", 0], ["input", 0], ["b", 0], ["int", 0], ["i", 0], ["for", 0], ["i", 0], ["in", 0], ["s", 0], ["split", 0], ["l", 0], ["n", 0], ["k", 0], ["p", 0], ["10", 0], ["k", 0], ["r", 0], ["10", 0], ["k", 0], ["1", 0], ["rez", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["l", 0], ["cnt", 0], ["0", 0], ["if", 0], ["b", 0], ["i", 0], ["0", 0], ["cnt", 0], ["b", 0], ["i", 0], ["r", 0], ["1", 0], ["a", 0], ["i", 0], ["cnt", 0], ["p", 0], ["1", 0], ["a", 0], ["i", 0], ["cnt", 0], ["b", 0], ["i", 0], ["1", 0], ["r", 0], ["1", 0], ["a", 0], ["i", 0], ["rez", 0], ["cnt", 0], ["1", 0], ["else", 0], ["cnt", 0], ["p", 0], ["1", 0], ["a", 0], ["i", 0], ["cnt", 0], ["r", 0], ["1", 0], ["a", 0], ["i", 0], ["rez", 0], ["cnt", 0], ["rez", 0], ["rez", 0], ["10", 0], ["9", 0], ["7", 0], ["print", 0], ["rez", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["n", 0], ["k", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["c", 0], ["t", 0], ["ans", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["b", 0], ["i", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["b", 0], ["i", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["if", 0], ["b", 0], ["i", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["0", 0], ["t", 0], ["ans", 0], ["1", 0], ["if", 0], ["b", 0], ["i", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["0", 0], ["t", 0], ["ans", 0], ["1", 0], ["ans", 0], ["t", 0], ["ans", 0], ["ans", 0], ["ans", 0], ["10", 0], ["9", 0], ["7", 0], ["print", 0], ["ans", 0], ["usr", 0], ["bin", 0], ["env", 0], ["python", 0], ["coding", 0], ["utf", 0], ["8", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["count", 0], ["1", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["count", 0], ["10", 0], ["k", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["10", 0], ["k", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["ans", 0], ["ans", 0], ["count", 0], ["10", 0], ["9", 0], ["7", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mod", 0], ["1000000007", 0], ["ans", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["k", 0], ["po", 0], ["10", 0], ["k", 0], ["1", 0], ["p", 0], ["c", 0], ["x", 0], ["po", 0], ["q", 0], ["c", 0], ["x", 0], ["1", 0], ["po", 0], ["res", 0], ["0", 0], ["if", 0], ["p", 0], ["b", 0], ["x", 0], ["0", 0], ["res", 0], ["1", 0], ["if", 0], ["q", 0], ["b", 0], ["x", 0], ["0", 0], ["res", 0], ["1", 0], ["if", 0], ["po", 0], ["10", 0], ["b", 0], ["x", 0], ["0", 0], ["res", 0], ["1", 0], ["res", 0], ["1", 0], ["res", 0], ["10", 0], ["po", 0], ["b", 0], ["x", 0], ["q", 0], ["b", 0], ["x", 0], ["p", 0], ["b", 0], ["x", 0], ["ans", 0], ["ans", 0], ["mod", 0], ["res", 0], ["mod", 0], ["mod", 0], ["print", 0], ["ans", 0], ["p", 0], ["10", 0], ["9", 0], ["7", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["cnt", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["10", 0], ["k", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["if", 0], ["b", 0], ["i", 0], ["0", 0], ["cnt", 0], ["10", 0], ["k", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["ans", 0], ["ans", 0], ["cnt", 0], ["p", 0], ["print", 0], ["ans", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["c", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["mod", 0], ["1000000007", 0], ["ans", 0], ["1", 0], ["for", 0], ["x", 0], ["in", 0], ["range", 0], ["0", 0], ["n", 0], ["k", 0], ["po", 0], ["10", 0], ["k", 0], ["1", 0], ["p", 0], ["c", 0], ["x", 0], ["po", 0], ["q", 0], ["c", 0], ["x", 0], ["1", 0], ["po", 0], ["res", 0], ["0", 0], ["if", 0], ["p", 0], ["b", 0], ["x", 0], ["0", 0], ["res", 0], ["1", 0], ["if", 0], ["q", 0], ["b", 0], ["x", 0], ["0", 0], ["res", 0], ["1", 0], ["if", 0], ["po", 0], ["10", 0], ["b", 0], ["x", 0], ["0", 0], ["res", 0], ["1", 0], ["res", 0], ["1", 0], ["res", 0], ["10", 0], ["po", 0], ["b", 0], ["x", 0], ["q", 0], ["b", 0], ["x", 0], ["p", 0], ["b", 0], ["x", 0], ["ans", 0], ["ans", 0], ["mod", 0], ["res", 0], ["mod", 0], ["mod", 0], ["print", 0], ["ans", 0], ["p", 0], ["10", 0], ["9", 0], ["7", 0], ["n", 0], ["k", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["cnt", 0], ["10", 0], ["k", 0], ["1", 0], ["a", 0], ["i", 0], ["10", 0], ["k", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["1", 0], ["a", 0], ["i", 0], ["if", 0], ["b", 0], ["i", 0], ["0", 0], ["cnt", 0], ["10", 0], ["k", 0], ["1", 0], ["b", 0], ["i", 0], ["1", 0], ["a", 0], ["i", 0], ["1", 0], ["ans", 0], ["ans", 0], ["cnt", 0], ["p", 0], ["print", 0], ["ans", 0], ["from", 0], ["math", 0], ["import", 0], ["mod", 0], ["10", 0], ["9", 0], ["7", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["a", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["b", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["temp", 0], ["pow", 0], ["10", 0], ["k", 0], ["1", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["len", 0], ["a", 0], ["totdiv", 0], ["ceil", 0], ["temp", 0], ["10", 0], ["a", 0], ["i", 0], ["num1", 0], ["temp", 0], ["b", 0], ["i", 0], ["num2", 0], ["temp", 0], ["b", 0], ["i", 0], ["1", 0], ["smaller", 0], ["ceil", 0], ["num1", 0], ["a", 0], ["i", 0], ["larger", 0], ["ceil", 0], ["num2", 0], ["a", 0], ["i", 0], ["totdiv", 0], ["smaller", 0], ["larger", 0], ["ans", 0], ["ans", 0], ["totdiv", 0], ["mod", 0], ["print", 0], ["int", 0], ["ans", 0], ["mask", 0], ["10", 0], ["9", 0], ["7", 0], ["def", 0], ["count", 0], ["a", 0], ["x", 0], ["return", 0], ["x", 0], ["a", 0], ["1", 0], ["n", 0], ["k", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["aa", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["bb", 0], ["list", 0], ["map", 0], ["int", 0], ["input", 0], ["split", 0], ["big", 0], ["10", 0], ["k", 0], ["1", 0], ["small", 0], ["10", 0], ["k", 0], ["1", 0], ["result", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["n", 0], ["k", 0], ["a", 0], ["b", 0], ["aa", 0], ["i", 0], ["bb", 0], ["i", 0], ["sum", 0], ["0", 0], ["sum", 0], ["count", 0], ["a", 0], ["big", 0], ["sum", 0], ["count", 0], ["a", 0], ["b", 0], ["1", 0], ["small", 0], ["1", 0], ["if", 0], ["b", 0], ["0", 0], ["sum", 0], ["count", 0], ["a", 0], ["b", 0], ["small", 0], ["1", 0], ["result", 0], ["result", 0], ["sum", 0], ["mask", 0], ["print", 0], ["result", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nTetris is a popular computer game played in a field consisting of $C$ columns and an unlimited number of rows. In one move, one of the following seven pieces is dropped into the field:\n\nWhen dropping a piece, the player is free to rotate the piece $90$, $180$ or $270$ degrees and to move it left or right, as long as the piece stays entirely in the field. The piece then falls until it settles on the bottom of the field or on already occupied squares. In our variant of Tetris the piece must fall so that all parts of the piece are on the bottom of the field or on already occupied squares. In other words, after the piece has fallen there may not be a free square such that some square above it is occupied.\n\nFor example, let the field be six columns wide with initial heights (the number of already occupied squares in each column) $2$, $1$, $1$, $1$, $0$ and $1$. Piece number $5$ can then be dropped into the field in five different ways:\n\nYou are given the initial heights of all columns and the figure to be dropped into the field.\n\nWrite a program that calculates the number of different ways to do this, i.e., the number of different field configurations that can be achieved by dropping the piece.\n\n-----Input-----\nThe first line contains two integers $C$ and $P$, $1 \\le C \\le 100$, $1 \\le P \\le 7$, the number of columns and the number of the piece to be dropped.\n\nThe second line contains $C$ integers separated by single spaces, each between $0$ and $100$, inclusive. These are the initial heights of the columns.\n\n-----Output-----\nOutput on a single line the number of different ways to drop the piece in the field.\n\n-----Examples-----\nSample Input 1:\n6 5\n2 1 1 1 0 1\nSample Output 1:\n5\n\nSample Input 2:\n5 1\n0 0 0 0 0\nSample Output 2:\n7\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6564"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6564", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["tetris", 0], ["is", 0], ["a", 0], ["popular", 0], ["computer", 0], ["game", 0], ["played", 0], ["in", 0], ["a", 0], ["field", 0], ["consisting", 0], ["of", 0], ["c", 0], ["columns", 0], ["and", 0], ["an", 0], ["unlimited", 0], ["number", 0], ["of", 0], ["rows", 0], ["in", 0], ["one", 0], ["move", 0], ["one", 0], ["of", 0], ["the", 0], ["following", 0], ["seven", 0], ["pieces", 0], ["is", 0], ["dropped", 0], ["into", 0], ["the", 0], ["field", 0], ["when", 1], ["dropping", 1], ["a", 1], ["piece", 1], ["the", 1], ["player", 1], ["is", 1], ["free", 1], ["to", 1], ["rotate", 1], ["the", 1], ["piece", 1], ["90", 1], ["180", 1], ["or", 1], ["270", 1], ["degrees", 1], ["and", 1], ["to", 1], ["move", 1], ["it", 1], ["left", 1], ["or", 1], ["right", 1], ["as", 1], ["long", 1], ["as", 1], ["the", 1], ["piece", 1], ["stays", 1], ["entirely", 1], ["in", 1], ["the", 1], ["field", 1], ["the", 1], ["piece", 1], ["then", 1], ["falls", 1], ["until", 1], ["it", 1], ["settles", 1], ["on", 1], ["the", 1], ["bottom", 1], ["of", 1], ["the", 1], ["field", 1], ["or", 1], ["on", 1], ["already", 1], ["occupied", 1], ["squares", 1], ["in", 1], ["our", 1], ["variant", 1], ["of", 1], ["tetris", 1], ["the", 1], ["piece", 1], ["must", 1], ["fall", 1], ["so", 1], ["that", 1], ["all", 1], ["parts", 1], ["of", 1], ["the", 1], ["piece", 1], ["are", 1], ["on", 1], ["the", 1], ["bottom", 1], ["of", 1], ["the", 1], ["field", 1], ["or", 1], ["on", 1], ["already", 1], ["occupied", 1], ["squares", 1], ["in", 1], ["other", 1], ["words", 1], ["after", 1], ["the", 1], ["piece", 1], ["has", 1], ["fallen", 1], ["there", 1], ["may", 1], ["not", 1], ["be", 0], ["a", 0], ["free", 0], ["square", 0], ["such", 0], ["that", 0], ["some", 0], ["square", 0], ["above", 0], ["it", 0], ["is", 0], ["occupied", 0], ["for", 0], ["example", 0], ["let", 0], ["the", 0], ["field", 0], ["be", 0], ["six", 0], ["columns", 0], ["wide", 0], ["with", 0], ["initial", 0], ["heights", 0], ["the", 0], ["number", 0], ["of", 0], ["already", 0], ["occupied", 0], ["squares", 0], ["in", 0], ["each", 0], ["column", 0], ["2", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["and", 0], ["1", 0], ["piece", 0], ["number", 0], ["5", 0], ["can", 0], ["then", 0], ["be", 0], ["dropped", 0], ["into", 0], ["the", 0], ["field", 0], ["in", 0], ["five", 0], ["different", 0], ["ways", 0], ["you", 1], ["are", 1], ["given", 1], ["the", 1], ["initial", 1], ["heights", 1], ["of", 1], ["all", 1], ["columns", 1], ["and", 1], ["the", 1], ["figure", 1], ["to", 1], ["be", 1], ["dropped", 1], ["into", 1], ["the", 1], ["field", 1], ["write", 1], ["a", 1], ["program", 1], ["that", 1], ["calculates", 1], ["the", 1], ["number", 1], ["of", 1], ["different", 1], ["ways", 1], ["to", 1], ["do", 1], ["this", 1], ["i", 1], ["e", 1], ["the", 1], ["number", 1], ["of", 0], ["different", 0], ["field", 0], ["configurations", 0], ["that", 0], ["can", 0], ["be", 0], ["achieved", 0], ["by", 0], ["dropping", 0], ["the", 0], ["piece", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["contains", 1], ["two", 1], ["integers", 1], ["c", 1], ["and", 1], ["p", 1], ["1", 1], ["le", 1], ["c", 1], ["le", 1], ["100", 1], ["1", 1], ["le", 1], ["p", 1], ["le", 1], ["7", 1], ["the", 1], ["number", 1], ["of", 1], ["columns", 1], ["and", 1], ["the", 1], ["number", 1], ["of", 1], ["the", 1], ["piece", 1], ["to", 1], ["be", 1], ["dropped", 1], ["the", 1], ["second", 1], ["line", 1], ["contains", 1], ["c", 1], ["integers", 1], ["separated", 1], ["by", 1], ["single", 1], ["spaces", 1], ["each", 1], ["between", 1], ["0", 1], ["and", 0], ["100", 0], ["inclusive", 0], ["these", 0], ["are", 0], ["the", 0], ["initial", 0], ["heights", 0], ["of", 0], ["the", 0], ["columns", 0], ["output", 0], ["output", 1], ["on", 1], ["a", 1], ["single", 1], ["line", 1], ["the", 0], ["number", 0], ["of", 0], ["different", 0], ["ways", 0], ["to", 0], ["drop", 0], ["the", 0], ["piece", 0], ["in", 0], ["the", 0], ["field", 0], ["examples", 0], ["sample", 0], ["input", 0], ["1", 0], ["6", 0], ["5", 0], ["2", 0], ["1", 0], ["1", 0], ["1", 0], ["0", 0], ["1", 0], ["sample", 0], ["output", 0], ["1", 0], ["5", 0], ["sample", 0], ["input", 0], ["2", 0], ["5", 0], ["1", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["0", 0], ["sample", 0], ["output", 0], ["2", 0], ["7", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5333333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5333333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6549707602339181, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6549707602339181, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5333333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5333333333333333, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6549707602339181, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6549707602339181, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
{"instance": {"input": "\nQUESTION:\nLittle Mirko wrote into his math notebook an equation containing three positive integers, the equals sign and one of the four basic arithmetic operations (addition, subtraction, multiplication and division).\n\nDuring another class, his friend Slavko erased the equals sign and the operations from Mirko’s notebook. Help Mirko by reconstructing the equation from the three integers\n\n-----Input-----\nThe first line of input contains three integers less than 100, separated by spaces. The input data will guarantee that a solution, although not necessarily unique, will always exist.\n\n-----Output-----\nOn a single line, output a valid equation containing the three integers (in the same order), an equals sign and one of the four operations. If there are multiple solutions, output any of them.\n\n-----Examples-----\nSample Input:\n5 3 8\nSample Output:\n5+3=8\n\n\nUse Standard Input format\n\nANSWER in Python code:\n", "references": [""], "id": "id6452"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "apps"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id6452", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["question", 0], ["little", 1], ["mirko", 1], ["wrote", 1], ["into", 1], ["his", 1], ["math", 1], ["notebook", 1], ["an", 1], ["equation", 1], ["containing", 1], ["three", 1], ["positive", 1], ["integers", 1], ["the", 1], ["equals", 1], ["sign", 1], ["and", 1], ["one", 0], ["of", 0], ["the", 0], ["four", 0], ["basic", 0], ["arithmetic", 0], ["operations", 0], ["addition", 0], ["subtraction", 0], ["multiplication", 0], ["and", 0], ["division", 0], ["during", 0], ["another", 0], ["class", 0], ["his", 0], ["friend", 0], ["slavko", 0], ["erased", 0], ["the", 0], ["equals", 0], ["sign", 0], ["and", 0], ["the", 0], ["operations", 0], ["from", 0], ["mirko’s", 0], ["notebook", 0], ["help", 0], ["mirko", 0], ["by", 0], ["reconstructing", 0], ["the", 0], ["equation", 0], ["from", 0], ["the", 0], ["three", 0], ["integers", 0], ["input", 0], ["the", 1], ["first", 1], ["line", 1], ["of", 1], ["input", 1], ["contains", 1], ["three", 1], ["integers", 1], ["less", 1], ["than", 1], ["100", 1], ["separated", 1], ["by", 1], ["spaces", 1], ["the", 2], ["input", 2], ["data", 2], ["will", 1], ["guarantee", 0], ["that", 0], ["a", 0], ["solution", 0], ["although", 0], ["not", 0], ["necessarily", 0], ["unique", 0], ["will", 0], ["always", 0], ["exist", 0], ["output", 0], ["on", 1], ["a", 1], ["single", 1], ["line", 1], ["output", 1], ["a", 1], ["valid", 1], ["equation", 1], ["containing", 1], ["the", 1], ["three", 1], ["integers", 1], ["in", 1], ["the", 1], ["same", 1], ["order", 1], ["an", 1], ["equals", 1], ["sign", 1], ["and", 1], ["one", 1], ["of", 1], ["the", 0], ["four", 0], ["operations", 0], ["if", 0], ["there", 0], ["are", 0], ["multiple", 0], ["solutions", 0], ["output", 0], ["any", 0], ["of", 0], ["them", 0], ["examples", 0], ["sample", 0], ["input", 0], ["5", 0], ["3", 0], ["8", 0], ["sample", 0], ["output", 0], ["5", 0], ["3", 0], ["8", 0], ["use", 0], ["standard", 0], ["input", 0], ["format", 0], ["answer", 0], ["in", 0], ["python", 0], ["code", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.43846153846153846, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4269230769230769, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6549295774647887, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6549295774647887, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.43846153846153846, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4269230769230769, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6549295774647887, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6549295774647887, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0]], "metrics": []}}
