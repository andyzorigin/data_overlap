{"instance": {"input": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n", "references": ["    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"], "id": "id136"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id136", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["largest", 0], ["smallest", 0], ["integers", 0], ["lst", 1], ["create", 1], ["a", 1], ["function", 1], ["that", 1], ["returns", 1], ["a", 1], ["tuple", 1], ["a", 1], ["b", 1], ["where", 1], ["a", 1], ["is", 1], ["the", 1], ["largest", 1], ["of", 1], ["negative", 1], ["integers", 1], ["and", 1], ["b", 1], ["is", 1], ["the", 1], ["smallest", 1], ["of", 1], ["positive", 1], ["integers", 1], ["in", 1], ["a", 1], ["list", 1], ["if", 1], ["there", 0], ["is", 0], ["no", 0], ["negative", 0], ["or", 0], ["positive", 0], ["integers", 0], ["return", 0], ["them", 0], ["as", 0], ["none", 0], ["examples", 0], ["largest", 0], ["smallest", 0], ["integers", 0], ["2", 0], ["4", 0], ["1", 0], ["3", 0], ["5", 0], ["7", 0], ["none", 0], ["1", 0], ["largest", 0], ["smallest", 0], ["integers", 0], ["none", 0], ["none", 0], ["largest", 0], ["smallest", 0], ["integers", 0], ["0", 0], ["none", 0], ["none", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5172413793103449, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5172413793103449, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5172413793103449, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5172413793103449, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["smallest", 0], ["list", 0], ["filter", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["lst", 0], ["largest", 0], ["list", 0], ["filter", 0], ["lambda", 0], ["x", 0], ["x", 0], ["0", 0], ["lst", 0], ["return", 0], ["max", 0], ["smallest", 0], ["if", 0], ["smallest", 0], ["else", 0], ["none", 0], ["min", 0], ["largest", 0], ["if", 0], ["largest", 0], ["else", 0], ["none", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "references": ["    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n"], "id": "id101"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id101", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["words", 0], ["string", 0], ["s", 0], ["you", 0], ["will", 0], ["be", 0], ["given", 0], ["a", 0], ["string", 0], ["of", 0], ["words", 0], ["separated", 0], ["by", 0], ["commas", 0], ["or", 0], ["spaces", 0], ["your", 0], ["task", 0], ["is", 0], ["to", 0], ["split", 0], ["the", 0], ["string", 0], ["into", 0], ["words", 0], ["and", 0], ["return", 0], ["an", 0], ["array", 0], ["of", 0], ["the", 0], ["words", 0], ["for", 0], ["example", 0], ["words", 0], ["string", 0], ["hi", 0], ["my", 0], ["name", 0], ["is", 0], ["john", 0], ["hi", 0], ["my", 0], ["name", 0], ["is", 0], ["john", 0], ["words", 0], ["string", 0], ["one", 2], ["two", 0], ["three", 0], ["four", 0], ["five", 0], ["six", 0], ["one", 0], ["two", 0], ["three", 0], ["four", 0], ["five", 0], ["six", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.0196078431372549, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00980392156862745, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.20634920634920634, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.10317460317460317, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.0196078431372549, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00980392156862745, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.20634920634920634, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.10317460317460317, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["if", 0], ["not", 0], ["s", 0], ["return", 0], ["s", 0], ["list", 0], ["for", 0], ["letter", 0], ["in", 0], ["s", 0], ["if", 0], ["letter", 0], ["s", 0], ["list", 0], ["append", 0], ["else", 0], ["s", 0], ["list", 0], ["append", 0], ["letter", 0], ["s", 0], ["list", 0], ["join", 0], ["s", 0], ["list", 0], ["return", 0], ["s", 0], ["list", 0], ["split", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n", "references": ["    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n"], "id": "id78"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id78", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["hex", 0], ["key", 0], ["num", 0], ["you", 0], ["have", 0], ["been", 0], ["tasked", 0], ["to", 0], ["write", 0], ["a", 0], ["function", 0], ["that", 0], ["receives", 0], ["a", 0], ["hexadecimal", 0], ["number", 0], ["as", 0], ["a", 0], ["string", 0], ["and", 0], ["counts", 0], ["the", 0], ["number", 0], ["of", 0], ["hexadecimal", 0], ["digits", 0], ["that", 0], ["are", 0], ["primes", 0], ["prime", 281], ["number", 44], ["or", 44], ["a", 44], ["prime", 44], ["is", 66], ["a", 68], ["natural", 68], ["number", 68], ["greater", 68], ["than", 0], ["1", 0], ["that", 0], ["is", 0], ["not", 0], ["a", 0], ["product", 0], ["of", 0], ["two", 0], ["smaller", 0], ["natural", 0], ["numbers", 1], ["hexadecimal", 14], ["digits", 34], ["are", 826], ["0", 13866], ["1", 16139], ["2", 16002], ["3", 15503], ["4", 0], ["5", 0], ["6", 0], ["7", 0], ["8", 0], ["9", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["f", 0], ["prime", 0], ["numbers", 0], ["are", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["11", 0], ["13", 0], ["17", 0], ["so", 0], ["you", 0], ["have", 0], ["to", 0], ["determine", 0], ["a", 0], ["number", 0], ["of", 0], ["the", 0], ["following", 0], ["digits", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["b", 0], ["decimal", 0], ["11", 0], ["d", 0], ["decimal", 0], ["13", 0], ["note", 0], ["you", 0], ["may", 0], ["assume", 0], ["the", 0], ["input", 0], ["is", 0], ["always", 0], ["correct", 0], ["or", 0], ["empty", 0], ["string", 0], ["and", 0], ["symbols", 0], ["a", 0], ["b", 0], ["c", 0], ["d", 0], ["e", 0], ["f", 0], ["are", 0], ["always", 0], ["uppercase", 0], ["examples", 0], ["for", 0], ["num", 0], ["ab", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["1", 0], ["for", 0], ["num", 0], ["1077e", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["2", 0], ["for", 0], ["num", 0], ["abed1a33", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["4", 0], ["for", 0], ["num", 0], ["123456789abcdef0", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["6", 0], ["for", 0], ["num", 0], ["2020", 0], ["the", 0], ["output", 0], ["should", 0], ["be", 0], ["2", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.11538461538461539, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.00814586487572773, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.24404761904761904, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1217744296036111, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00641025641025641, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.00641025641025641, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.11904761904761904, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.11904761904761904, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["primes", 0], ["2", 0], ["3", 0], ["5", 0], ["7", 0], ["b", 0], ["d", 0], ["total", 0], ["0", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["0", 0], ["len", 0], ["num", 0], ["if", 0], ["num", 0], ["i", 0], ["in", 0], ["primes", 0], ["total", 0], ["1", 0], ["return", 0], ["total", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "references": ["    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n"], "id": "id83"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id83", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["starts", 0], ["one", 0], ["ends", 0], ["n", 0], ["given", 1], ["a", 1], ["positive", 1], ["integer", 1], ["n", 1], ["return", 1], ["the", 1], ["count", 1], ["of", 1], ["the", 1], ["numbers", 0], ["of", 0], ["n", 0], ["digit", 0], ["positive", 0], ["integers", 0], ["that", 0], ["start", 0], ["or", 0], ["end", 0], ["with", 0], ["1", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5882352941176471, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5882352941176471, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.7586206896551724, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.7586206896551724, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5882352941176471, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5882352941176471, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.7586206896551724, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.7586206896551724, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["if", 0], ["n", 0], ["1", 0], ["return", 0], ["1", 0], ["return", 0], ["18", 0], ["10", 0], ["n", 0], ["2", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "references": ["    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n"], "id": "id157"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id157", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["right", 0], ["angle", 0], ["triangle", 0], ["a", 0], ["b", 0], ["c", 0], ["given", 0], ["the", 0], ["lengths", 0], ["of", 0], ["the", 0], ["three", 0], ["sides", 0], ["of", 0], ["a", 0], ["triangle", 0], ["return", 0], ["true", 0], ["if", 0], ["the", 0], ["three", 0], ["sides", 0], ["form", 0], ["a", 0], ["right", 0], ["angled", 0], ["triangle", 0], ["false", 0], ["otherwise", 0], ["a", 2], ["right", 0], ["angled", 0], ["triangle", 0], ["is", 0], ["a", 0], ["triangle", 0], ["in", 0], ["which", 0], ["one", 0], ["angle", 0], ["is", 0], ["right", 0], ["angle", 0], ["or", 0], ["90", 0], ["degree", 0], ["example", 0], ["right", 0], ["angle", 0], ["triangle", 0], ["3", 0], ["4", 0], ["5", 0], ["true", 0], ["right", 0], ["angle", 0], ["triangle", 0], ["1", 0], ["2", 0], ["3", 0], ["false", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.019230769230769232, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.009615384615384616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.203125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.1015625, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.019230769230769232, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.009615384615384616, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.203125, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.1015625, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["return", 0], ["a", 0], ["a", 0], ["b", 0], ["b", 0], ["c", 0], ["c", 0], ["or", 0], ["b", 0], ["b", 0], ["a", 0], ["a", 0], ["c", 0], ["c", 0], ["or", 0], ["c", 0], ["c", 0], ["a", 0], ["a", 0], ["b", 0], ["b", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n", "references": ["    while b:\n        a, b = b, a % b\n    return a\n"], "id": "id13"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id13", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["greatest", 0], ["common", 0], ["divisor", 0], ["a", 0], ["int", 0], ["b", 0], ["int", 0], ["int", 0], ["return", 1], ["a", 1], ["greatest", 1], ["common", 1], ["divisor", 1], ["of", 1], ["two", 1], ["integers", 1], ["a", 1], ["and", 1], ["b", 1], ["greatest", 0], ["common", 0], ["divisor", 0], ["3", 0], ["5", 0], ["1", 0], ["greatest", 0], ["common", 0], ["divisor", 0], ["25", 0], ["15", 0], ["5", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6764705882352942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6764705882352942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.5, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6764705882352942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6764705882352942, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["while", 0], ["b", 0], ["a", 0], ["b", 0], ["b", 0], ["a", 0], ["b", 0], ["return", 0], ["a", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "references": ["    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"], "id": "id69"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id69", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["search", 0], ["lst", 0], ["you", 1], ["are", 1], ["given", 1], ["a", 1], ["non", 1], ["empty", 1], ["list", 1], ["of", 1], ["positive", 1], ["integers", 1], ["return", 1], ["the", 1], ["greatest", 1], ["integer", 1], ["that", 1], ["is", 1], ["greater", 1], ["than", 1], ["zero", 1], ["and", 1], ["has", 1], ["a", 1], ["frequency", 1], ["greater", 1], ["than", 1], ["or", 1], ["equal", 1], ["to", 1], ["the", 1], ["value", 1], ["of", 1], ["the", 1], ["integer", 1], ["itself", 1], ["the", 1], ["frequency", 1], ["of", 1], ["an", 1], ["integer", 1], ["is", 1], ["the", 1], ["number", 1], ["of", 1], ["times", 1], ["it", 1], ["appears", 1], ["in", 1], ["the", 0], ["list", 0], ["if", 0], ["no", 0], ["such", 0], ["a", 0], ["value", 0], ["exist", 0], ["return", 0], ["1", 0], ["examples", 0], ["search", 0], ["4", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["search", 0], ["1", 0], ["2", 0], ["2", 0], ["3", 0], ["3", 0], ["3", 0], ["4", 0], ["4", 0], ["4", 0], ["3", 0], ["search", 0], ["5", 0], ["5", 0], ["4", 0], ["4", 0], ["4", 0], ["1", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6103896103896104, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6103896103896104, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6629213483146067, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6629213483146067, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6103896103896104, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6103896103896104, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6629213483146067, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6629213483146067, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["frq", 0], ["0", 0], ["max", 0], ["lst", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["lst", 0], ["frq", 0], ["i", 0], ["1", 0], ["ans", 0], ["1", 0], ["for", 0], ["i", 0], ["in", 0], ["range", 0], ["1", 0], ["len", 0], ["frq", 0], ["if", 0], ["frq", 0], ["i", 0], ["i", 0], ["ans", 0], ["i", 0], ["return", 0], ["ans", 0], ["", 0]], "metrics": []}}
{"instance": {"input": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "references": ["    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n"], "id": "id33"}, "stats_key": {"light_scenario_key": {"scenario_spec": {"class_name": "helm.benchmark.scenarios.code_scenario.CodeScenario", "args": {"dataset": "humaneval"}}, "split": "test"}, "overlap_protocol_spec": {"n": 13}}, "instance_id": "id33", "annotated_input_overlap": {"part": "input", "annotated_entry_overlap": [["", 0], ["def", 0], ["sort", 0], ["third", 0], ["l", 0], ["list", 0], ["this", 0], ["function", 0], ["takes", 0], ["a", 0], ["list", 0], ["l", 0], ["and", 0], ["returns", 0], ["a", 0], ["list", 0], ["l", 1], ["such", 1], ["that", 1], ["l", 1], ["is", 1], ["identical", 1], ["to", 1], ["l", 1], ["in", 1], ["the", 1], ["indicies", 1], ["that", 1], ["are", 1], ["not", 1], ["divisible", 1], ["by", 1], ["three", 1], ["while", 1], ["its", 1], ["values", 1], ["at", 1], ["the", 1], ["indicies", 1], ["that", 1], ["are", 1], ["divisible", 1], ["by", 1], ["three", 1], ["are", 1], ["equal", 1], ["to", 1], ["the", 0], ["values", 0], ["of", 0], ["the", 0], ["corresponding", 0], ["indicies", 0], ["of", 0], ["l", 0], ["but", 0], ["sorted", 0], ["sort", 0], ["third", 0], ["1", 0], ["2", 0], ["3", 0], ["1", 0], ["2", 0], ["3", 0], ["sort", 0], ["third", 0], ["5", 1], ["6", 1], ["3", 0], ["4", 0], ["8", 0], ["9", 0], ["2", 0], ["2", 0], ["6", 0], ["3", 0], ["4", 0], ["8", 0], ["9", 0], ["5", 0], ["", 0]], "metrics": [{"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4714285714285714, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.4714285714285714, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 0.6951219512195121, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": false}}}, {"metric_score": 0.6951219512195121, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 0, "weighting": true}}}, {"metric_score": 1, "metric_protocol_spec": {"partial_overlap_spec": 0, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4714285714285714, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.4714285714285714, "metric_protocol_spec": {"partial_overlap_spec": 1, "frequency_spec": {"filter_value": 10, "weighting": true}}}, {"metric_score": 0.6951219512195121, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": false}}}, {"metric_score": 0.6951219512195121, "metric_protocol_spec": {"partial_overlap_spec": 2, "frequency_spec": {"filter_value": 10, "weighting": true}}}]}, "annotated_ref_overlap": {"part": "references", "annotated_entry_overlap": [["", 0], ["l", 0], ["list", 0], ["l", 0], ["l", 0], ["3", 0], ["sorted", 0], ["l", 0], ["3", 0], ["return", 0], ["l", 0], ["", 0]], "metrics": []}}
